- en: Chapter 1. Deploying web2py
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing web2py on Windows (from source code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing web2py on Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a production deployment on Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with Apache, `mod_proxy`, and `mod_rewrite`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with `Lighttpd`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with Cherokee
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with Nginx and uWSGI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py on shared hosts using CGI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py on shared hosts with `mod_proxy`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py from a user-defined folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing web2py as a service in Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with IIS as proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with ISAPI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discuss how to download, set up, and install web2py in different
    systems and with different web servers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All of them require that you download the latest web2py source from the website:
    [http://web2py.com](http://web2py.com), unzip it under `/home/www-data/web2py`
    on Unix and Linux systems, and on `c:/web2py` on Windows systems. In various places,
    we will assume that the public IP address of the host machine is `192.168.1.1`;
    replace this with your own IP address or host name. We will also assume web2py
    starts on port `8000`, but there is nothing special about this number; change
    it if you need to.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing web2py on Windows (from source code)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although there is a binary distribution for Windows environments (packaging
    executables and standard libraries), web2py is open source, and can be used with
    a normal Python installation.
  prefs: []
  type: TYPE_NORMAL
- en: This method allows working with the latest releases of web2py, and customizing
    the python modules to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, you must install **Python**. Download your preferred 2.x version
    (not 3.x) from: [http://www.python.org/download/releases/](http://www.python.org/download/releases/).'
  prefs: []
  type: TYPE_NORMAL
- en: Although newer versions include more enhancements and bug fixes, previous versions
    have more stability and third-party library coverage. Python 2.5.4 has a good
    balance within features and proven stability history, with good binary libraries
    support. Python 2.7.2 is the latest production release for this platform at the
    time of this writing, so we will use it for the examples.
  prefs: []
  type: TYPE_NORMAL
- en: After downloading your preferred Windows Python installer (that is **python-2.7.2.msi)**,
    double-click to install it. The default values are fine for most cases, so press
    **Next** until it finishes the installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need **Python Win32 extensions** to use the web2py taskbar or Windows
    service. You can install **pywin32** from: [http://starship.python.net/~skippy/win32/Downloads.html](http://starship.python.net/~skippy/win32/Downloads.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Prior to using web2py, you may also need some dependencies to connect to databases.
    SQLite and MySQL drivers are included in web2py. If you plan to use another RDBMS,
    you will need to install its driver.
  prefs: []
  type: TYPE_NORMAL
- en: For **PostgreSQL**, you can install the **psycopg2** binary package (for Python
    2.7, you should use `psycopg2-2.3.1.win32-py2.7-pg9.0.1-release.exe):` [http://www.stickpeople.com/projects/python/win-psycopg/](http://www.stickpeople.com/projects/python/win-psycopg/)
    (notice that web2py requires **psycopg2** and not **psycopg)**.
  prefs: []
  type: TYPE_NORMAL
- en: For MS SQLServer or DB2, you need **pyodbc:** [http://code.google.com/p/pyodbc/downloads/list](http://code.google.com/p/pyodbc/downloads/list%20)
    .
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, you can use web2py with your preferred database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the source package from web2py official website: [http://www.web2py.com/examples/static/web2py_src.zip](http://www.web2py.com/examples/static/web2py_src.zip),
    and unzip it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As web2py doesn't requires installation, you can unzip it in any folder. Using
    `c:\web2py` is convenient, to keep pathnames short.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To start it, double-click `web2py.py`. You can also start it from the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here you can add command-line parameters (`-a` to set an admin password, `-p`
    to specify an alternate port, and so on). You can see all the startup options
    with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: web2py is written in Python, a portable, interpreted and dynamic language that
    doesn't require compilation or complicated installation to run. It uses a virtual
    machine (such as Java and .Net), and it can transparently byte-compile your source
    code on the fly when you run your scripts.
  prefs: []
  type: TYPE_NORMAL
- en: For novice users' convenience, there is web2py Windows binary distribution available
    at the official site, which is precompiled to a bytecode, packaged in a zip file
    with all the required libraries (dll/pyd), and is present with an executable entry-point
    file (web2py.exe), but there is no noticeable difference running web2py from source.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Running web2py from the source package in Windows has many advantages, a few
    of which are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You can more easily use third-party libraries, such as Python Imaging (look
    at Python package index, where you can install more than ten thousand modules!).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can import web2py functionality (for example, the **Database Abstraction
    Layer (DAL))** from other Python programs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can keep web2py updated with the latest changes, help to test it, and submit
    patches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can browse the web2py source code, tweak it for your custom need, and so
    on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing web2py in Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe covers how to install web2py in a development environment using
    the Ubuntu desktop. Installation in a production system will be covered in the
    next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'We assume that you know how to use a console and install applications using
    the console. We will use the latest Ubuntu desktop, at this writing: Ubuntu Desktop
    10.10.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to install web2py in your home directory, so fire up the console.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download web2py.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the download is complete, unzip it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Optionally install the `tk` library for Python, if you want the GUI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support),
    and register to have the files e-mailed directly to you. The code files are also
    uploaded at the following repository: [https://github.com/mdipierro/web2py-recipes-source](http://https://github.com/mdipierro/web2py-recipes-source).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All the code is released under the BSD license ([http://www.opensource.org/licenses/bsd-license.php](http://www.opensource.org/licenses/bsd-license.php))
    unless otherwise stated in the source file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To start web2py, access the web2py directory and run web2py.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/5467OS_01_00.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After installation, each time you run it, web2py will ask you to choose a password.
    This password is your administrative password. If the password is left blank,
    the administrative interface will be disabled.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter `127.0.0.1:8000/` in your browser to check if everything is working OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The administrative interface: `http://127.0.0.1:8000/admin/default/index` is
    only accessible through `localhost`, and always requires a password. It can also
    be accessed through an SSH tunnel.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use some other options. For example, you can specify the port with the
    option `-p port` and IP address with the option `-i 127.0.0.1`. It's useful to
    specify the password, so you don't have to enter it every time you start web2py;
    use option `-a` password. If you want help on other options, run web2py with the
    `-h` or `help` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Setting up a production deployment on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe describes how to install web2py in a production environment using
    the Ubuntu server. This is the recommended method to deploy web2py in production.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We assume that you know how to use a console and install applications using
    a repository and commands. We will use the latest Ubuntu server at the time of
    writing: Ubuntu Server 10.04 LTS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe we will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Install all modules needed to run web2py on Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install web2py in `/home/www-data/`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a self-signed SSL certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up web2py with `mod_wsgi`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overwrite `/etc/apache2/sites-available/default`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Getting ready](img/5467OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we need to be sure that the system is up-to-date. Upgrade the system
    with these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by installing `postgreSQL:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We need to unzip and open `ssh-server`, if it's not installed already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install Apache 2 and `mod-wsgi:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Optionally, if you plan to manipulate images, we can install the **Python Imaging
    Library (PIL)** :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we need to install web2py. We'll create `www-data` in `/home`, and extract
    the web2py source there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the web2py source from the web2py site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the Apache SSL and EXPIRES modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a self-signed certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should obtain your SSL certificates from a trusted **Certificate Authority**,
    such as `verisign.com`, but for testing purposes you can generate your own self-signed
    certificates. You can read more about it at: [https://help.ubuntu.com/10.04/serverguide/C/certificates-and-security.html.](https://help.ubuntu.com/10.04/serverguide/C/certificates-and-security.html.%20)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `SSL` folder, and put the SSL certificates inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you have problem with permissions, use `sudo -i`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the default Apache configuration with your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the Apache server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter `http://192.168.1.1/` in your browser to check if everything is working
    OK, replacing `192.168.1.1` with your public IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Everything that we did can be done automatically using a script provided by
    web2py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Running web2py with Apache, mod_proxy, and mod_rewrite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Apache httpd** is the most popular HTTP server, and having Apache httpd on
    a large installation is a must, just like panettone on Christmas day in Italy.
    Like the panettone, Apache comes in many flavors and with different fillings.
    You have to find the one you like.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we configure Apache with `mod_proxy`, and refine it through
    `mod_rewrite` rules. This is a simple, but robust solution. It can be used to
    increase web2py scalability, throughput, security, and flexibility. These rules
    should satisfy both the connoisseur and the beginner.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to make a web2py installation on a host appear
    as part of a website, even when hosted somewhere else. We will also show how Apache
    can be used to improve the performance of your web2py application, without touching
    web2py.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: web2py installed and running on `localhost` with the built-in Rocket webserver
    (port 8000)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache HTTP server (`httpd`) version 2.2.x or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mod_proxy` and `mod_rewrite` (included in the standard Apache distribution)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Ubuntu or other Debian-based servers, you can install Apache with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'On CentOS or other Fedora-based Linux distributions, you can install Apache
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: For most other systems you can download Apache from the website [http://httpd.apache.org/](http://httpd.apache.org/),
    and install it yourself with the provided instructions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have Apache HTTP server (from now on we will refer to it simply
    as Apache) and web2py both running locally, we must configure it.
  prefs: []
  type: TYPE_NORMAL
- en: Apache is configured by placing directives in plain text configuration files.
    The main configuration file is usually called `httpd.conf`. The default location
    of this file is set at compile time, but may be overridden with the `-f` command
    line flag. `httpd.conf` may include other configuration files. Additional directives
    may be placed in any of these configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration files may be located in `/etc/apache2`, in `/etc/apache`,
    or in `/etc/httpd`, depending on the details of the OS and the Apache version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before editing any of the files, make sure that the required modules are enabled
    from the command-line shell (`bash`), type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With `mod_proxy` and `mod_rewrite` enabled, we are now ready to set up a simple
    rewrite rule to proxy forward HTTP requests received by Apache to any other HTTP
    server we wish. Apache supports multiple `VirtualHosts`, that is, it has the ability
    to handle different virtual host names and ports within a single Apache instance.
    The default `VirtualHost` configuration is in a file called `/etc/<apache>/ sites-available/default`,
    where `<apache> is apache, apache2, or httpd.`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this file each `VirtualHost` is defined by creating an entry as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can read the in-depth `VirtualHost` documentation at `http://httpd.apache.org/docs/2.2/vhosts/.`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To use `RewriteRules`, we need to activate the **Rewrite Engine** inside the
    `VirtualHost:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then we can configure the rewrite rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The second rule tells Apache to do a reverse proxy connection to `http://localhost:8000`,
    passing all the path components of the URL called by the user, except for the
    first, web2py. The syntax used for rules is based on regular expressions (`regex`),
    where the first expression is compared to the incoming URL (the one requested
    by the user).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is a match, the second expression is used to build a new URL. The flags
    inside [`and`] determine how the resulting URL is to be handled. The previous
    example matches any incoming request on the default `VirtualHost` with a path
    that begins with `/web2py`, and generates a new URL prepending `http://localhost:8000/`
    to the remainder of the matched path; the part of the incoming URL that matches
    the expression .* replaces `$1` in the second expression.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The flag `P` tells Apache to use its proxy to retrieve the content pointed by
    the URL, before passing it back to the requesting browser.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Suppose that the Apache Server responds at the domain [www.example.com](http://www.example.com);
    then if the user's browser requests [http://www.example.com/web2py/welcome](http://www.example.com/web2py/welcome),
    it will receive a response with the contents from the scaffolding application
    of web2py. Thats is, it would be as if the browser had requested `http://localhost:8000/welcome.`
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There is a catch: web2py could send an HTTP redirect, for instance to point
    the user''s browser to the default page. The problem is that the redirect is relative
    to web2py''s application layout, the one that the Apache proxy is trying to hide,
    so the redirect is probably going to point the browser to the wrong location.
    To avoid this, we must configure Apache to intercept redirects and correct them.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There is yet another issue. Many URLs generated by web2py are also relative
    to the web2py context. These include the URLs of images or CSS style sheets. We
    have to instruct web2py how to write the correct URL, and of course, since it
    is web2py, it is simple and we do not have to modify any code in our application
    code. We need to define a file `routes.py` in the root of web2py''s installation,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Apache can, at this point, transform the received content before sending it
    back to the client. We have the opportunity to improve website speed in several
    ways. For example, we can compress all content before sending it back to the browser,
    if the browser accepts compressed content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: It is possible in the same way, just by configuring Apache, to do other interesting
    tasks, such as SSL encryption, load balancing, acceleration by content caching,
    and many other things. You can find information for those and many other setups
    at [http://httpd.apache.org.](http://httpd.apache.org.%20)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the complete configuration for the default VirtualHost as used in the
    following recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You must restart Apache for any change to take effect. You can use the following
    command for the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Running web2py with Lighttpd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Lighttpd** is a secure, fast, compliant, and a very flexible web-server that
    has been optimized for high-performance environments. It has a very low memory
    footprint as compared to other web servers, and takes care of the cpu-load. Its
    advanced feature-set (FastCGI, CGI, Auth, Output-Compression, URL-Rewriting, and
    many more) make Lighttpd the perfect web server software for every server that
    suffers load problems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe was derived from official web2py book, but while the book uses
    FastCGI `mod_fcgi` to expose web2py functionality behind a Ligthttpd web server,
    here, we use SCGI instead. The SCGI protocol that we use here is similar in intent
    to FastCGI, but simpler and faster. It is described at the following website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://python.ca/scgi](http://python.ca/scgi)'
  prefs: []
  type: TYPE_NORMAL
- en: '**SCGI** is a binary protocol for inter-process communication over IP. SCGI
    is tailored for the specific task of web server to CGI application communication.
    The CGI standard defines how a web server can delegate to an external application
    the dynamic generation of an HTTP response.'
  prefs: []
  type: TYPE_NORMAL
- en: The problem with CGI is that, for every incoming request a new process has to
    be created. Process creation can take longer than response generation in some
    contexts. This is true in most interpreted language environments, where the time
    to load a new instance of the interpreter can be longer than the execution of
    the program itself.
  prefs: []
  type: TYPE_NORMAL
- en: '**FastCGI** addresses this problem by using long-running processes to answer
    to more than one request without exiting. This is beneficial, in particular, for
    interpreted programs, because the interpreter does not need to be restarted each
    time. SCGI was developed after FastCGI experience to reduce the complexity required
    to convert a CGI to a FastCGI application, allowing better performance. SCGI is
    a standard module of Lighttpd, and is available for Apache as well.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should have:'
  prefs: []
  type: TYPE_NORMAL
- en: web2py installed and running on localhost (port `8000)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lighttpd (download and install from [http://www.lighttpd.net)](http://www.lighttpd.net))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SCGI (download and install from [http://python.ca/scgi)](http://python.ca/scgi))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Paste (download and install from [http://pythonpaste.org/)](http://pythonpaste.org/)),
    or WSGITools (http://subdivi.de/helmut/wsgitools)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you have `setuptools`, you can install SCGI, paste, and wsgitools, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: You will also need a script to start an SCGI server, configured for web2py that
    may or may not come with web2py, depending on the version, so we have supplied
    one to this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, you have to write the script to start the SCGI server that will be listening
    to Lighttpd requests. Don''t worry, even if it is very short and easy, we provide
    one ready to copy here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the previous script, and put it in the root of your web2py installation
    with the name `scgihandler.py`. Start the SCGI server, and leave it running in
    the background:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we are ready to configure `lighttpd.`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We provide a simple `lighttpd.conf` configuration file here, as an example.
    Of course, real-world configurations can be much more complex, but the important
    parts will not differ much.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Append the following lines to your `lighttpd.conf:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This configuration does the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loads the SCGI module into Lighttpd
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configures the server document root to the root of web2py installation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Rewrites the URL, using `mod_rewrite`, so that incoming requests to static files
    are served directly by Lighttpd, while all the rest are rewritten to a **fake**
    URL beginning with `/handler_web2py.scgi`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Creates an SCGI server stanza:** For every request beginning with `/handler_web2py.scgi`
    the request is routed to the SCGI server running on `127.0.0.1` at port `4000`,
    skipping the check for the existence of a corresponding local file on the filesystem'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, check that your configuration is ok:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then start the server for testing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can start/stop/restart the server with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: You will see your web2py application go to the speed of Light(ttpd).
  prefs: []
  type: TYPE_NORMAL
- en: Running web2py with Cherokee
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe explains how to run web2py behind a Cherokee web server using **uWSGI**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cherokee** is a webserver written in C, similar in intent to Lighttpd: fast,
    compact, and modular. Cherokee comes with an administrative interface that allows
    one to manage its configuration, which is difficult to read and modify otherwise.
    uWSGI is described in its website as a fast (pure C), self-healing, developer/sysadmin-friendly
    application container server. Cherokee has an included module to talk to uWSGI
    servers.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the package or download, compile, and install the required components.
    Create the following file in the installation root of web2py, and call it `uwsgi.xml:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This configuration spawns eight processes to manage multiple requests from the
    HTTP server. Change it as needed, and configure `<pythonpath>` to the installation
    root of web2py.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As the user that owns the web2py installation, start the uWSGI server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now launch the Cherokee administrative interface to create a new configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Connect to the admin interface with the browser at the following link: `http://localhost:9090/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Go to the **Sources** section - **(A)**, then click on the **+** button - **(B)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Remote Host** on **(C)**, then fill the text field at **(D)** with
    the IP address, and port to match the configuration in the previous `uswgi.xml`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Having configured the uWGI source, it is now possible to configure a Virtual
    Host, and redirect requests through it. In this recipe, we choose the **default**
    Virtual Host that is used when no other Virtual Host has a better match for the
    incoming request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on button `(C)` to go to **Rule Management**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Delete all rules listed on the left. Only the **default** rule will remain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Configure the **default** rule with a uWSGI **Handler**. Leave the other values
    unchanged.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If you want Cherokee to serve static files directly from web2py folders, you
    can add a **Regular Expression** rule. Click button **(A)**, and select **Regular
    Expression** from the drop-down menu at **(B)**. Be aware that this configuration
    works only if the web2py directory is on the same file system, and is accessible
    to Cherokee.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Configure the **Regular Expressions:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now you can configure the Static Handler pointing to the applications subdirectory
    of your web2py installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Remember to save the configuration, and reload or restart Cherokee from the
    administrative interface; then you are ready to start the uWSGI server.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Change to the correct user ID that was used to install web2py; be aware that
    using root is not recommended.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go into the root directory of web2py installation, where you saved the configuration
    file `uwsgi.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run uWSGI with the `-d <logfile>` option, so that it runs in the background:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Enjoy the speed!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: web2py (installed but not running)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: uWSGI (download and install from [http://projects.unbit.it/uwsgi/wiki)](http://projects.unbit.it/uwsgi/wiki))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cherokee (download and install from [http://www.cherokee-project.com/)](http://www.cherokee-project.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with Nginx and uWSGI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe explains how to run web2py with the Nginx web server using uWSGI.
  prefs: []
  type: TYPE_NORMAL
- en: '**Nginx** is a free, open-source, high-performance HTTP server, and reverse
    proxy, written by **Igor Sysoev**.'
  prefs: []
  type: TYPE_NORMAL
- en: Nginx, unlike traditional servers, does not rely on threads to handle requests,
    rather, it implements an asynchronous architecture. This implies that Nginx uses
    a predictable amount of memory, even under heavy load, resulting in higher stability
    and low resource consumption. Nginx now hosts more than seven percent of all domains
    worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: It should be stressed that even if Nginx is asynchronous, web2py is not. Therefore,
    web2py will use more resources, the more concurrent requests it handles concurrently.
    uWSGI is described on its website as a fast (pure C), self-healing, developer/sysadmin-friendly
    application container server. We will configure Nginx to serve dynamic web2py
    pages through uWSGI, and serve static pages directly, taking advantage of its
    low footprint capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: web2py (installed but not running)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: uWSGI (download and install from [http://projects.unbit.it/uwsgi/wiki)](http://projects.unbit.it/uwsgi/wiki))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nginx (download and install from [http://nginx.net/)](http://nginx.net/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Ubuntu 10.04 LTS, you can install uWSGI and Nginx using `apt-get`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we need to configure Nginx. Create or edit a file called `/etc/nginx/
    sites-available/web2py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the file, write the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, it passes all dynamical requests to `127.0.0.1:9001`. We need
    to get uWSGI running there.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the following file in the installation root of web2py, and call it `web2py.xml:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script assumes that web2py is installed as usual at `/home/www-data/web2py/.`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now disable the default configuration, and enable the new one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to use HTTPS, you may need to create a self-signed certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will also need to enable web2py admin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you are done, restart both uWSGI and Nginx:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'web2py comes with a script that will perform this setup for you automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '`scrips/setup-web2py-nginx-uwsgi-ubuntu.sh`'
  prefs: []
  type: TYPE_NORMAL
- en: Running web2py on shared hosts using CGI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe explains how to configure web2py to run on a shared host with login
    (but not root) access.
  prefs: []
  type: TYPE_NORMAL
- en: With login or FTP access to a shared host, the user isn't able to configure
    the web server, and must live within the host's configured constraints. This recipe
    assumes a typical Unix-based or Linux-based shared host running Apache.
  prefs: []
  type: TYPE_NORMAL
- en: Two deployment methods are possible, depending on how the system is configured.
    If Apache's `mod_proxy` is available, and the host permits long-running processes,
    running web2py's built-in server as an Apache proxy is straightforward and efficient.
    If `mod_proxy` is not available, or the host prohibits long-running processes,
    we're limited to the CGI interface, which is simple to configure and almost universally
    available, but is also slow, since the Python interpreter must run and load web2py
    for each request.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start with CGI deployment, the simpler case.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll assume that the root of your website is `/usr/www/users/username`, and
    that `/usr/www/users/username/cgi-bin` is your CGI binaries directory. If your
    details differ, obtain the actual values from your provider, and modify these
    instructions accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: For security reasons, here, we also assume your host supports running CGI scripts
    as the local user (cgiwrap). This procedure may vary from host to host, if it's
    available at all; check with your provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the web2py source to your `cgi-bin` directory. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, unzip the web2py source locally, and upload it to the host through
    FTP.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your web root directory, create the file `.htaccess`, if necessary, and
    add the following lines (changing paths as required):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change its permissions with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now access[http://yourdomain.com/welcome](http://yourdomain.com/welcome), or
    (depending on your provider)[http://hostingdomain.com/username/welcome](http://hostingdomain.com/username/welcome).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you get access errors at this point, examine the most recent file in `web2py/applications/welcome/errors/`,
    using the `tail` command. This format isn't especially friendly, but it can provide
    useful clues. If the `errors` directory is empty, you may need to double-check
    that the `errors` directory is writable by the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running web2py on shared hosts with mod_proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using `mod_proxy` has two major advantages over CGI deployment discussed in
    the previous recipe: web2py runs continuously, so performance is considerably
    better, and it runs as your local user, which improves security. Because from
    web2py''s perspective it appears to be running on localhost, the admin application
    can run, but if you don''t have SSL operation available, you may want to disable
    admin for security reasons. SSL setup is discussed in the *Setting up a production
    deployment on Ubuntu* recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we assume that you have already downloaded and unzipped web2py somewhere
    in your home folder. We also assume that your web hosting provider has mod_proxy
    enabled, supports long running processes, allows you to open a port (8000 in the
    example but you can change if this port is occupied by another user).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your base web directory, create a file `.htaccess`, if necessary, and add
    these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download and unzip web2py as described previously for CGI operation, except
    that web2py need not be installed in your `cgi-bin` directory, or even in your
    web documents tree. For this recipe, we'll assume that you install it in your
    login home directory `$HOME`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start web2py running on localhost and port `8000` with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The `password` is the one time admin password that you choose. The -N is optional
    and it disables `web2py` cron to save memory. (Notice that this last step cannot
    be accomplished trhough FTP, so login access is required.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py from a user-defined folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe explains how to relocate the web2py `applications` folder.
  prefs: []
  type: TYPE_NORMAL
- en: With web2py, each application lives in a folder under the `applications/` folder,
    which in turn is located in the web2py `base` or `root` folder (the folder that
    also contains `gluon/`, the web2py core code).
  prefs: []
  type: TYPE_NORMAL
- en: When web2py is deployed using its built-in web server, the `applications/` folder
    can be relocated to some other location in your file system. When `applications/`
    is relocated, certain other files are relocated as well, including `logging.conf,
    routes.py`, and `parameters_port.py`. Additionally, a `site-packages` in the same
    folder as the relocated `applications/`, is inserted into `sys.path` (this `site-packages`
    directory need not exist).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When web2py is run from the command line, the folder relocation is specified
    with the `-f` option, which should specify the parent folder of the relocated
    `applications/` folder, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When web2py is run as a Windows service `(web2py.exe -W)`, the relocation can
    be specified in a file `options.py` in the web2py main folder. Change the default
    folder: `os.getcwd()` to specify the parent folder of the relocated `applications/`
    folder. Here is an example of the `options.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Applications relocation is not available when web2py is deployed with an external
    web server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, create a web2py unprivileged user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For security, disable the web2py user password to prevent remote logins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the source package from web2py''s official website, uncompress it
    in a suitable directory (for example `/opt/web2py)`, and set the access permissions
    appropriately:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `init` script in `/etc/inid.d/web2py` (you can use the one in `web2py/scripts/`
    as a starting point):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `init` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the basic configuration parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change `127.0.0.1` and `8001` to your desired IP and port. You can use `0.0.0.0`
    as a wildcard IP that match all the interfaces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a self-signed certificate, if you plan on using admin remotely:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you use `print` statements for debugging purposes, or want to record web2py
    output messages, you can redirect standard output, by adding the following line
    after the `imports` in `web2py.py:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, start your web2py service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install it permanently (so it starts and stop automatically with the rest
    of the operating system services), issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'If all works correctly, you''ll be able to open your web2py admin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Installing web2py as a service in Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For simple sites and intranets, you may need a simple installation method that
    keeps web2py running. This recipe shows how to start web2py in a simple way without
    further dependencies (no Apache webserver!).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can see what is happening using `bash` to debug the `init` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you can change `start-stop-daemon` options to be more verbose, and use
    the web2py user to prevent interference with other Python daemons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember to set up a password to be able to use the administrative interface.
    This can be done by executing the following command (change `mypass` to your desired
    password):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Running web2py with IIS as a proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IIS is the primary web server for the Windows OS. It can run multiple concurrent
    domains and several application pools. When you deploy web2py on IIS, you want
    to set up a new site, and have a separate application pool for its root application.
    In this way, you have separate logs and ability to start/stop the application
    pool, independently on the others. Here we explain how.
  prefs: []
  type: TYPE_NORMAL
- en: This is the first of three recipes in which we repeat the process using different
    configurations. In this first recipe, we set up IIS to act as a proxy for the
    web2py **Rocket** web server.
  prefs: []
  type: TYPE_NORMAL
- en: This configuration is desirable when IIS default site is already in production
    with enabled ASP.NET, ASP, or PHP applications, and at the same time, your web2py
    sites may be under-development and may require frequent restarting (for example,
    due to changes in `routes.py)`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we assume that you have IIS version 7 or later, already installed.
    We do not discuss the steps to install IIS7, since it is a commercial product
    and they are well documented somewhere else.
  prefs: []
  type: TYPE_NORMAL
- en: You also need to have web2py unzipped in a local folder. Start web2py on port
    `8081`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Note that when running web2py as a proxy, you should be careful about unintentionally
    exposing admin without encryption.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you need to be able to use a IIS Proxy. For this, you will need **Application
    Request Routing (ARR)** **2.5**. ARR can be downloaded and installed from Microsoft
    Web Platform Installer available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After you download the web platform installer for ARR, open the application
    and browse to **Products** on the left-hand side of the screen, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, click on **Add** - **Application Request Routing 2.5**, and then click
    on **Install**. This will take you to a new screen, as shown in the following
    screenshot; click on **I Accept:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Web Platform installer will automatically select and install all the dependencies
    required for **Application Request Routing 2.5** to work. Click on **Finish**,
    and this will bring you to the **Download and Installation** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once you receive the successful message, you can close Microsoft web platform
    application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the IIS Manager, and create a new website as directed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, right-click on **Sites** on the top-left in the **IIS Manager**, and
    select **New Website**. This will take you to the following screen. Fill in the
    details as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Make sure you select the right IP on which your site will run.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the site is created, double-click the **URL Rewrite** as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once in **URL Rewrite** module, click on **Add Rule** on the top-right-hand
    side, as shown in the next screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Reverse Proxy** template under **Inbound and Outbound Rules**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill out the details as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Since the **Server IP** field is the most important, it must contain the IP
    and port where web2py is running: `127.0.0.1:8081`. Also, make sure that **SSL
    Offloading** is checked. In the outbound rules for the **TO** field, write the
    domain name assigned to the website. When done, click **OK**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, everything on your web2py installation should be working, except
    for the admin interface. Web2py requires that we use HTTPS when a request for
    the admin interface is coming for a non-localhost server. In our example, localhost
    for web2py is `127.0.0.1:8081`, while IIS is currently operational on `127.0.0.1:80.`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To enable the admin, you will need a certificate. Create a certificate and add
    it to your server certificates in IIS 7, then repeat the previous steps to bind
    `443` to the web2py website we created previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, visit: `https://yourdomain.com/admin/`, and you will be able to browse
    the web2py admin web interface. Enter the password for your web2py admin interface,
    and proceed normally.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running web2py with ISAPI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we present a production quality configuration, which uses a dedicated
    application pool run natively in IIS using the ISAPI handler. It is similar to
    a typical Linux/Apache configuration, but is a Windows native.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As before you will need IIS installed.
  prefs: []
  type: TYPE_NORMAL
- en: You should have web2py already downloaded and unzipped. If you have it already
    running on port **8081** (or other port) on localhost, you can leave it there,
    since it should not interfere with this installation. We will assume web2py is
    installed into `C:\path\to\web2py`.
  prefs: []
  type: TYPE_NORMAL
- en: You can place it anywhere else you like.
  prefs: []
  type: TYPE_NORMAL
- en: Then you need to download and install `isapi-wsgi`. This is explained below.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, you need to download `isapi-wsgi` from: [http://code.google.com/p/isapi-wsgi/](http://code.google.com/p/isapi-wsgi/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is a mature WSGI adapter for IIS, based on pywin32\. Most of this recipe
    is based on the documentation and the examples about `isapi-wsgi.`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can install isapi-wsgi using the win32 installer: `http://code.google.com/p/isapi-wsgi/downloads/detail?name=isapi_wsgi-0.4.2\.
    win32.exe.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also install it simply downloading the Python file somewhere into `"c:\Python\Lib\site-packages"`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://isapi-wsgi.googlecode.com/svn/tags/isapi_wsgi-0.4.2/isapi_wsgi.py.](http://isapi-wsgi.googlecode.com/svn/tags/isapi_wsgi-0.4.2/isapi_wsgi.py)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`isapi_wsgi` runs on IIS 5.1, 6.0, and 7.0\. But IIS 7.x must have **IIS 6.0
    Management Compatability** installed.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You may want to try running the following test to see that it was installed
    properly:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now go to `http://localhost/isapi-wsgi-test/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you get a `500 error` that says `this is not a valid Win32 application`,
    then something is wrong and this is discussed here: [http://support.microsoft.com/kb/895976/en-us](http://support.microsoft.com/kb/895976/en-us).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you see a normal `Hello` response, then the installation was successful,
    and you can remove the test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are not yet ready to configure the web2py handler. You need to enable the
    32-bits mode.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We are now ready to configure the web2py handler. Add your web2py installation
    to the `PYTHONPATH:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If it does not exist already, create the file `isapiwsgihandler.py` in the
    `C:\path\to\web2py` folder, which contains the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Recent versions of web2py may already contain this file, or even a better version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first part is the handler, and the second part will allow an automatic
    installation from the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: By default, this installs the extension for virtual directory `appname` under
    `Default Web Site.`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check the current mode for Web Applications (32 bits or 64 bits):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'If answer is `The parameter "Enable32BitAppOnWin64" is not set at this node`
    or `Enable32BitAppOnWin64 : (BOOLEAN) False`, then you must switch from 64 bits
    to 32 bits mode for the Web Server. ISAPI does not wok on IIS in 64 bits mode.
    You can switch with the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Then restart application pool, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Or set up a separate pool, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
