- en: Chapter 1. Deploying web2py
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Installing web2py on Windows (from source code)
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing web2py on Ubuntu
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a production deployment on Ubuntu
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with Apache, `mod_proxy`, and `mod_rewrite`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with `Lighttpd`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with Cherokee
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with Nginx and uWSGI
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py on shared hosts using CGI
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py on shared hosts with `mod_proxy`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py from a user-defined folder
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing web2py as a service in Ubuntu
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with IIS as proxy
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with ISAPI
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discuss how to download, set up, and install web2py in different
    systems and with different web servers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All of them require that you download the latest web2py source from the website:
    [http://web2py.com](http://web2py.com), unzip it under `/home/www-data/web2py`
    on Unix and Linux systems, and on `c:/web2py` on Windows systems. In various places,
    we will assume that the public IP address of the host machine is `192.168.1.1`;
    replace this with your own IP address or host name. We will also assume web2py
    starts on port `8000`, but there is nothing special about this number; change
    it if you need to.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Installing web2py on Windows (from source code)
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although there is a binary distribution for Windows environments (packaging
    executables and standard libraries), web2py is open source, and can be used with
    a normal Python installation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: This method allows working with the latest releases of web2py, and customizing
    the python modules to be used.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, you must install **Python**. Download your preferred 2.x version
    (not 3.x) from: [http://www.python.org/download/releases/](http://www.python.org/download/releases/).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Although newer versions include more enhancements and bug fixes, previous versions
    have more stability and third-party library coverage. Python 2.5.4 has a good
    balance within features and proven stability history, with good binary libraries
    support. Python 2.7.2 is the latest production release for this platform at the
    time of this writing, so we will use it for the examples.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: After downloading your preferred Windows Python installer (that is **python-2.7.2.msi)**,
    double-click to install it. The default values are fine for most cases, so press
    **Next** until it finishes the installation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need **Python Win32 extensions** to use the web2py taskbar or Windows
    service. You can install **pywin32** from: [http://starship.python.net/~skippy/win32/Downloads.html](http://starship.python.net/~skippy/win32/Downloads.html).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Prior to using web2py, you may also need some dependencies to connect to databases.
    SQLite and MySQL drivers are included in web2py. If you plan to use another RDBMS,
    you will need to install its driver.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: For **PostgreSQL**, you can install the **psycopg2** binary package (for Python
    2.7, you should use `psycopg2-2.3.1.win32-py2.7-pg9.0.1-release.exe):` [http://www.stickpeople.com/projects/python/win-psycopg/](http://www.stickpeople.com/projects/python/win-psycopg/)
    (notice that web2py requires **psycopg2** and not **psycopg)**.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 **PostgreSQL**，您可以安装 **psycopg2** 二进制包（对于 Python 2.7，您应使用 `psycopg2-2.3.1.win32-py2.7-pg9.0.1-release.exe`）：[http://www.stickpeople.com/projects/python/win-psycopg/](http://www.stickpeople.com/projects/python/win-psycopg/)（请注意，web2py
    需要 **psycopg2** 而不是 **psycopg**）。
- en: For MS SQLServer or DB2, you need **pyodbc:** [http://code.google.com/p/pyodbc/downloads/list](http://code.google.com/p/pyodbc/downloads/list%20)
    .
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 MS SQLServer 或 DB2，您需要 **pyodbc**：[http://code.google.com/p/pyodbc/downloads/list](http://code.google.com/p/pyodbc/downloads/list%20)。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: At this point, you can use web2py with your preferred database.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您可以使用您首选的数据库使用 web2py。
- en: 'Download the source package from web2py official website: [http://www.web2py.com/examples/static/web2py_src.zip](http://www.web2py.com/examples/static/web2py_src.zip),
    and unzip it.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 web2py 官方网站下载源代码包：[http://www.web2py.com/examples/static/web2py_src.zip](http://www.web2py.com/examples/static/web2py_src.zip)，并解压它。
- en: As web2py doesn't requires installation, you can unzip it in any folder. Using
    `c:\web2py` is convenient, to keep pathnames short.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 web2py 不需要安装，您可以在任何文件夹中解压它。使用 `c:\web2py` 很方便，以保持路径名短。
- en: 'To start it, double-click `web2py.py`. You can also start it from the console:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动它，双击 `web2py.py`。您也可以从控制台启动它：
- en: '[PRE0]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here you can add command-line parameters (`-a` to set an admin password, `-p`
    to specify an alternate port, and so on). You can see all the startup options
    with:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您可以添加命令行参数（例如 `-a` 用于设置管理员密码，`-p` 用于指定备用端口等）。您可以使用以下命令查看所有启动选项：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: web2py is written in Python, a portable, interpreted and dynamic language that
    doesn't require compilation or complicated installation to run. It uses a virtual
    machine (such as Java and .Net), and it can transparently byte-compile your source
    code on the fly when you run your scripts.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: web2py 是用 Python 编写的，Python 是一种便携、解释和动态的语言，不需要编译或复杂的安装即可运行。它使用虚拟机（如 Java 和 .Net），并且可以在运行脚本时透明地即时字节编译您的源代码。
- en: For novice users' convenience, there is web2py Windows binary distribution available
    at the official site, which is precompiled to a bytecode, packaged in a zip file
    with all the required libraries (dll/pyd), and is present with an executable entry-point
    file (web2py.exe), but there is no noticeable difference running web2py from source.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便新手用户，官方网站上提供了 web2py 的 Windows 二进制发行版，它预先编译成字节码，打包在 zip 文件中，包含所有必需的库（dll/pyd），并附带一个可执行入口点文件（web2py.exe），但使用源代码运行
    web2py 并没有明显的区别。
- en: There's more...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Running web2py from the source package in Windows has many advantages, a few
    of which are listed as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 中从源代码包运行 web2py 有许多优点，以下列出其中一些：
- en: You can more easily use third-party libraries, such as Python Imaging (look
    at Python package index, where you can install more than ten thousand modules!).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以更轻松地使用第三方库，例如 Python Imaging（查看 Python 软件包索引，您可以在那里安装超过一万个模块！）。
- en: You can import web2py functionality (for example, the **Database Abstraction
    Layer (DAL))** from other Python programs.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从其他 Python 程序中导入 web2py 功能（例如，**数据库抽象层 (DAL**)）。
- en: You can keep web2py updated with the latest changes, help to test it, and submit
    patches.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用最新的更改保持 web2py 更新，帮助测试它，并提交补丁。
- en: You can browse the web2py source code, tweak it for your custom need, and so
    on.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以浏览 web2py 的源代码，根据您的定制需求进行调整等。
- en: Installing web2py in Ubuntu
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu 中安装 web2py
- en: This recipe covers how to install web2py in a development environment using
    the Ubuntu desktop. Installation in a production system will be covered in the
    next recipe.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程涵盖如何在 Ubuntu 桌面环境中安装 web2py。在生产系统中的安装将在下一教程中介绍。
- en: 'We assume that you know how to use a console and install applications using
    the console. We will use the latest Ubuntu desktop, at this writing: Ubuntu Desktop
    10.10.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您知道如何使用控制台和通过控制台安装应用程序。我们将使用最新的 Ubuntu 桌面，即本文撰写时的 Ubuntu Desktop 10.10。
- en: Getting ready
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to install web2py in your home directory, so fire up the console.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在您的家目录中安装 web2py，因此请启动控制台。
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Download web2py.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 web2py。
- en: '[PRE2]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When the download is complete, unzip it:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，解压它：
- en: '[PRE3]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Optionally install the `tk` library for Python, if you want the GUI.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想使用 GUI，可以选择安装 Python 的 `tk` 库。
- en: '[PRE4]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Downloading the example code**'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: 'You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support),
    and register to have the files e-mailed directly to you. The code files are also
    uploaded at the following repository: [https://github.com/mdipierro/web2py-recipes-source](http://https://github.com/mdipierro/web2py-recipes-source).'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.PacktPub.com](http://www.PacktPub.com) 的账户中下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了此书，您可以访问
    [http://www.PacktPub.com/support](http://www.PacktPub.com/support)，并注册以将文件直接通过电子邮件发送给您。代码文件也上传到了以下存储库：[https://github.com/mdipierro/web2py-recipes-source](http://https://github.com/mdipierro/web2py-recipes-source)。
- en: All the code is released under the BSD license ([http://www.opensource.org/licenses/bsd-license.php](http://www.opensource.org/licenses/bsd-license.php))
    unless otherwise stated in the source file.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有代码均在BSD许可下发布([http://www.opensource.org/licenses/bsd-license.php](http://www.opensource.org/licenses/bsd-license.php))，除非源文件中另有说明。
- en: To start web2py, access the web2py directory and run web2py.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动web2py，请访问web2py目录并运行web2py。
- en: '[PRE5]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![How to do it...](img/5467OS_01_00.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/5467OS_01_00.jpg)'
- en: After installation, each time you run it, web2py will ask you to choose a password.
    This password is your administrative password. If the password is left blank,
    the administrative interface will be disabled.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装后，每次运行它时，web2py都会要求您选择一个密码。这个密码是您的管理员密码。如果密码留空，则管理界面将被禁用。
- en: Enter `127.0.0.1:8000/` in your browser to check if everything is working OK.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中输入 `127.0.0.1:8000/` 以检查一切是否正常工作。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The administrative interface: `http://127.0.0.1:8000/admin/default/index` is
    only accessible through `localhost`, and always requires a password. It can also
    be accessed through an SSH tunnel.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 管理界面：`http://127.0.0.1:8000/admin/default/index` 只能通过 `localhost` 访问，并且始终需要密码。它也可以通过SSH隧道访问。
- en: There's more...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can use some other options. For example, you can specify the port with the
    option `-p port` and IP address with the option `-i 127.0.0.1`. It's useful to
    specify the password, so you don't have to enter it every time you start web2py;
    use option `-a` password. If you want help on other options, run web2py with the
    `-h` or `help` option.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用一些其他选项。例如，您可以使用选项 `-p port` 指定端口，使用选项 `-i 127.0.0.1` 指定IP地址。指定密码很有用，这样您就不必每次启动web2py时都输入它；使用选项
    `-a` 指定密码。如果您需要其他选项的帮助，请使用带有 `-h` 或 `help` 选项的web2py运行。
- en: 'For example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Setting up a production deployment on Ubuntu
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Ubuntu上设置生产部署
- en: This recipe describes how to install web2py in a production environment using
    the Ubuntu server. This is the recommended method to deploy web2py in production.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱描述了如何在Ubuntu服务器上使用生产环境安装web2py。这是在生产环境中部署web2py的推荐方法。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We assume that you know how to use a console and install applications using
    a repository and commands. We will use the latest Ubuntu server at the time of
    writing: Ubuntu Server 10.04 LTS.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您知道如何使用控制台，并使用存储库和命令安装应用程序。我们将使用写作时的最新Ubuntu服务器：Ubuntu Server 10.04 LTS。
- en: 'In this recipe we will learn how to:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何：
- en: Install all modules needed to run web2py on Ubuntu
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Ubuntu上安装运行web2py所需的所有模块
- en: Install web2py in `/home/www-data/`
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `/home/www-data/` 中安装web2py
- en: Create a self-signed SSL certificate
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自签名SSL证书
- en: Set up web2py with `mod_wsgi`
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `mod_wsgi` 设置web2py
- en: Overwrite `/etc/apache2/sites-available/default`
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖 `/etc/apache2/sites-available/default`
- en: Restart Apache
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重启Apache
- en: '![Getting ready](img/5467OS_01_01.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5467OS_01_01.jpg)'
- en: 'First, we need to be sure that the system is up-to-date. Upgrade the system
    with these commands:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确保系统是最新的。使用以下命令升级系统：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's start by installing `postgreSQL:`
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从安装 `postgreSQL:` 开始。
- en: '[PRE8]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We need to unzip and open `ssh-server`, if it's not installed already.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未安装，我们需要解压并打开 `ssh-server`。
- en: '[PRE9]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Install Apache 2 and `mod-wsgi:`
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Apache 2和 `mod-wsgi:`
- en: '[PRE10]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Optionally, if you plan to manipulate images, we can install the **Python Imaging
    Library (PIL)** :'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '可选地，如果您计划操作图像，我们可以安装 **Python Imaging Library (PIL)** :'
- en: '[PRE11]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now we need to install web2py. We'll create `www-data` in `/home`, and extract
    the web2py source there.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要安装web2py。我们将在 `/home` 中创建 `www-data` 并在那里提取web2py源代码。
- en: '[PRE12]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Get the web2py source from the web2py site:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从web2py网站获取web2py源代码：
- en: '[PRE13]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Enable the Apache SSL and EXPIRES modules:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用Apache SSL和EXPIRES模块：
- en: '[PRE14]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a self-signed certificate:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建自签名证书：
- en: 'You should obtain your SSL certificates from a trusted **Certificate Authority**,
    such as `verisign.com`, but for testing purposes you can generate your own self-signed
    certificates. You can read more about it at: [https://help.ubuntu.com/10.04/serverguide/C/certificates-and-security.html.](https://help.ubuntu.com/10.04/serverguide/C/certificates-and-security.html.%20)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `SSL` folder, and put the SSL certificates inside it:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you have problem with permissions, use `sudo -i`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the default Apache configuration with your editor.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the following code to the configuration:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Restart the Apache server:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Enter `http://192.168.1.1/` in your browser to check if everything is working
    OK, replacing `192.168.1.1` with your public IP address.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Everything that we did can be done automatically using a script provided by
    web2py:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Running web2py with Apache, mod_proxy, and mod_rewrite
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Apache httpd** is the most popular HTTP server, and having Apache httpd on
    a large installation is a must, just like panettone on Christmas day in Italy.
    Like the panettone, Apache comes in many flavors and with different fillings.
    You have to find the one you like.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we configure Apache with `mod_proxy`, and refine it through
    `mod_rewrite` rules. This is a simple, but robust solution. It can be used to
    increase web2py scalability, throughput, security, and flexibility. These rules
    should satisfy both the connoisseur and the beginner.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to make a web2py installation on a host appear
    as part of a website, even when hosted somewhere else. We will also show how Apache
    can be used to improve the performance of your web2py application, without touching
    web2py.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should have the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: web2py installed and running on `localhost` with the built-in Rocket webserver
    (port 8000)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache HTTP server (`httpd`) version 2.2.x or later
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mod_proxy` and `mod_rewrite` (included in the standard Apache distribution)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Ubuntu or other Debian-based servers, you can install Apache with:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'On CentOS or other Fedora-based Linux distributions, you can install Apache
    with:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: For most other systems you can download Apache from the website [http://httpd.apache.org/](http://httpd.apache.org/),
    and install it yourself with the provided instructions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have Apache HTTP server (from now on we will refer to it simply
    as Apache) and web2py both running locally, we must configure it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Apache is configured by placing directives in plain text configuration files.
    The main configuration file is usually called `httpd.conf`. The default location
    of this file is set at compile time, but may be overridden with the `-f` command
    line flag. `httpd.conf` may include other configuration files. Additional directives
    may be placed in any of these configuration files.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: The configuration files may be located in `/etc/apache2`, in `/etc/apache`,
    or in `/etc/httpd`, depending on the details of the OS and the Apache version.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Before editing any of the files, make sure that the required modules are enabled
    from the command-line shell (`bash`), type:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑任何文件之前，请确保从命令行 shell (`bash`) 启用了所需的模块，输入：
- en: '[PRE22]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: With `mod_proxy` and `mod_rewrite` enabled, we are now ready to set up a simple
    rewrite rule to proxy forward HTTP requests received by Apache to any other HTTP
    server we wish. Apache supports multiple `VirtualHosts`, that is, it has the ability
    to handle different virtual host names and ports within a single Apache instance.
    The default `VirtualHost` configuration is in a file called `/etc/<apache>/ sites-available/default`,
    where `<apache> is apache, apache2, or httpd.`
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `mod_proxy` 和 `mod_rewrite` 启用后，我们现在可以设置一个简单的重写规则，将 Apache 收到的 HTTP 请求代理转发到我们希望的其他任何
    HTTP 服务器。Apache 支持多个 `VirtualHosts`，也就是说，它能够在单个 Apache 实例中处理不同的虚拟主机名称和端口。默认的 `VirtualHost`
    配置位于名为 `/etc/<apache>/ sites-available/default` 的文件中，其中 `<apache>` 是 apache、apache2
    或 httpd。`
- en: 'In this file each `VirtualHost` is defined by creating an entry as follows:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件中，每个 `VirtualHost` 都是通过创建以下条目来定义的：
- en: '[PRE23]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can read the in-depth `VirtualHost` documentation at `http://httpd.apache.org/docs/2.2/vhosts/.`
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在 `http://httpd.apache.org/docs/2.2/vhosts/.` 阅读关于 `VirtualHost` 的深入文档。
- en: To use `RewriteRules`, we need to activate the **Rewrite Engine** inside the
    `VirtualHost:`
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 `RewriteRules`，我们需要在 `VirtualHost:` 内部激活 **Rewrite Engine**。
- en: '[PRE24]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then we can configure the rewrite rule:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以配置重写规则：
- en: '[PRE25]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The second rule tells Apache to do a reverse proxy connection to `http://localhost:8000`,
    passing all the path components of the URL called by the user, except for the
    first, web2py. The syntax used for rules is based on regular expressions (`regex`),
    where the first expression is compared to the incoming URL (the one requested
    by the user).
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二条规则告诉 Apache 对 `http://localhost:8000` 执行反向代理连接，传递用户调用的 URL 的所有路径组件，除了第一个，即
    web2py。规则使用的语法基于正则表达式 (`regex`)，其中第一个表达式与传入的 URL（用户请求的 URL）进行比较。
- en: If there is a match, the second expression is used to build a new URL. The flags
    inside [`and`] determine how the resulting URL is to be handled. The previous
    example matches any incoming request on the default `VirtualHost` with a path
    that begins with `/web2py`, and generates a new URL prepending `http://localhost:8000/`
    to the remainder of the matched path; the part of the incoming URL that matches
    the expression .* replaces `$1` in the second expression.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果有匹配，则使用第二个表达式来构建一个新的 URL。`[`and`]` 内部的标志决定了如何处理生成的 URL。前面的例子匹配任何以 `/web2py`
    开头的默认 `VirtualHost` 路径的传入请求，并生成一个新的 URL，将 `http://localhost:8000/` 预先添加到匹配路径的剩余部分；与表达式
    .* 匹配的传入 URL 的部分替换第二个表达式中的 `$1`。
- en: The flag `P` tells Apache to use its proxy to retrieve the content pointed by
    the URL, before passing it back to the requesting browser.
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标志 `P` 告诉 Apache 在将其传递回请求的浏览器之前，使用其代理检索 URL 所指向的内容。
- en: Suppose that the Apache Server responds at the domain [www.example.com](http://www.example.com);
    then if the user's browser requests [http://www.example.com/web2py/welcome](http://www.example.com/web2py/welcome),
    it will receive a response with the contents from the scaffolding application
    of web2py. Thats is, it would be as if the browser had requested `http://localhost:8000/welcome.`
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设 Apache 服务器响应域名 [www.example.com](http://www.example.com)；那么如果用户的浏览器请求 [http://www.example.com/web2py/welcome](http://www.example.com/web2py/welcome)，它将收到来自
    web2py 框架应用的响应内容。也就是说，这就像浏览器请求了 `http://localhost:8000/welcome` 一样。
- en: 'There is a catch: web2py could send an HTTP redirect, for instance to point
    the user''s browser to the default page. The problem is that the redirect is relative
    to web2py''s application layout, the one that the Apache proxy is trying to hide,
    so the redirect is probably going to point the browser to the wrong location.
    To avoid this, we must configure Apache to intercept redirects and correct them.'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一个陷阱：web2py 可能会发送一个 HTTP 重定向，例如将用户的浏览器指向默认页面。问题是重定向是相对于 web2py 的应用程序布局的，即 Apache
    代理试图隐藏的那个布局，因此重定向很可能会指向错误的位置。为了避免这种情况，我们必须配置 Apache 来拦截重定向并纠正它们。
- en: '[PRE26]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'There is yet another issue. Many URLs generated by web2py are also relative
    to the web2py context. These include the URLs of images or CSS style sheets. We
    have to instruct web2py how to write the correct URL, and of course, since it
    is web2py, it is simple and we do not have to modify any code in our application
    code. We need to define a file `routes.py` in the root of web2py''s installation,
    as follows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一个问题。由 web2py 生成的许多 URL 也相对于 web2py 的上下文。这包括图像或 CSS 样式表的 URL。我们必须指导 web2py
    如何编写正确的 URL，当然，由于它是 web2py，所以很简单，我们不需要修改应用程序代码中的任何代码。我们需要在 web2py 安装根目录下定义一个名为
    `routes.py` 的文件，如下所示：
- en: '[PRE27]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Apache can, at this point, transform the received content before sending it
    back to the client. We have the opportunity to improve website speed in several
    ways. For example, we can compress all content before sending it back to the browser,
    if the browser accepts compressed content.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此阶段，Apache 可以在将内容发送回客户端之前对其进行转换。我们有几种方法可以提高网站速度。例如，如果浏览器接受压缩内容，我们可以在将内容发送回浏览器之前对其进行压缩。
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: It is possible in the same way, just by configuring Apache, to do other interesting
    tasks, such as SSL encryption, load balancing, acceleration by content caching,
    and many other things. You can find information for those and many other setups
    at [http://httpd.apache.org.](http://httpd.apache.org.%20)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，只需配置 Apache，就可以执行其他有趣的任务，例如 SSL 加密、负载均衡、通过内容缓存加速，以及许多其他事情。您可以在以下网站找到有关这些和许多其他配置的信息：[http://httpd.apache.org.](http://httpd.apache.org.%20)
- en: 'Here is the complete configuration for the default VirtualHost as used in the
    following recipe:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是以下配方中使用的默认虚拟主机完整配置：
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You must restart Apache for any change to take effect. You can use the following
    command for the same:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须重新启动 Apache 以使任何更改生效。您可以使用以下命令进行相同操作：
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Running web2py with Lighttpd
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Lighttpd 运行 web2py
- en: '**Lighttpd** is a secure, fast, compliant, and a very flexible web-server that
    has been optimized for high-performance environments. It has a very low memory
    footprint as compared to other web servers, and takes care of the cpu-load. Its
    advanced feature-set (FastCGI, CGI, Auth, Output-Compression, URL-Rewriting, and
    many more) make Lighttpd the perfect web server software for every server that
    suffers load problems.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lighttpd** 是一个安全、快速、兼容且非常灵活的 Web 服务器，它针对高性能环境进行了优化。与其他 Web 服务器相比，它具有非常低的内存占用，并关注
    cpu-load。其高级功能集（FastCGI、CGI、认证、输出压缩、URL 重写等）使 Lighttpd 成为每个遭受负载问题的服务器的完美 Web 服务器软件。'
- en: 'This recipe was derived from official web2py book, but while the book uses
    FastCGI `mod_fcgi` to expose web2py functionality behind a Ligthttpd web server,
    here, we use SCGI instead. The SCGI protocol that we use here is similar in intent
    to FastCGI, but simpler and faster. It is described at the following website:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方是从官方 web2py 书籍中提取的，但尽管书中使用 FastCGI `mod_fcgi` 在 Ligthttpd Web 服务器后面公开 web2py
    功能，这里我们使用 SCGI。我们在这里使用的 SCGI 协议在意图上与 FastCGI 类似，但更简单、更快。它描述在以下网站上：
- en: '[http://python.ca/scgi](http://python.ca/scgi)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://python.ca/scgi](http://python.ca/scgi)'
- en: '**SCGI** is a binary protocol for inter-process communication over IP. SCGI
    is tailored for the specific task of web server to CGI application communication.
    The CGI standard defines how a web server can delegate to an external application
    the dynamic generation of an HTTP response.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCGI** 是一种用于 IP 上进程间通信的二进制协议。SCGI 专为 Web 服务器与 CGI 应用程序之间的通信任务量身定制。CGI 标准定义了
    Web 服务器如何将动态生成 HTTP 响应的任务委托给外部应用程序。'
- en: The problem with CGI is that, for every incoming request a new process has to
    be created. Process creation can take longer than response generation in some
    contexts. This is true in most interpreted language environments, where the time
    to load a new instance of the interpreter can be longer than the execution of
    the program itself.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: CGI 的问题在于，对于每个传入的请求，都必须创建一个新的进程。在某些情况下，进程创建可能比响应生成所需的时间更长。这在大多数解释语言环境中都是正确的，其中加载新解释器实例的时间可能比程序本身的执行时间更长。
- en: '**FastCGI** addresses this problem by using long-running processes to answer
    to more than one request without exiting. This is beneficial, in particular, for
    interpreted programs, because the interpreter does not need to be restarted each
    time. SCGI was developed after FastCGI experience to reduce the complexity required
    to convert a CGI to a FastCGI application, allowing better performance. SCGI is
    a standard module of Lighttpd, and is available for Apache as well.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**FastCGI** 通过使用长时间运行的进程来回答多个请求而不退出，从而解决了这个问题。这对于解释程序特别有益，因为每次不需要重新启动解释器。SCGI
    是在 FastCGI 经验之后开发的，以减少将 CGI 转换为 FastCGI 应用程序所需的复杂性，从而提高性能。SCGI 是 Lighttpd 的标准模块，也适用于
    Apache。'
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作。
- en: 'You should have:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该有：
- en: web2py installed and running on localhost (port `8000)`
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: web2py 已安装在本地主机（端口 `8000`）上。
- en: Lighttpd (download and install from [http://www.lighttpd.net)](http://www.lighttpd.net))
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lighttpd（从 [http://www.lighttpd.net](http://www.lighttpd.net) 下载并安装）。
- en: SCGI (download and install from [http://python.ca/scgi)](http://python.ca/scgi))
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SCGI（从 [http://python.ca/scgi](http://python.ca/scgi) 下载并安装）。
- en: Python Paste (download and install from [http://pythonpaste.org/)](http://pythonpaste.org/)),
    or WSGITools (http://subdivi.de/helmut/wsgitools)
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python Paste（从 [http://pythonpaste.org/](http://pythonpaste.org/) 下载并安装），或 WSGITools（http://subdivi.de/helmut/wsgitools）。
- en: 'If you have `setuptools`, you can install SCGI, paste, and wsgitools, as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有 `setuptools`，您可以安装 SCGI、paste 和 wsgitools，如下所示：
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You will also need a script to start an SCGI server, configured for web2py that
    may or may not come with web2py, depending on the version, so we have supplied
    one to this recipe.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要一个脚本来启动一个配置为 web2py 的 SCGI 服务器，这个脚本可能随 web2py 一起提供，也可能不提供，这取决于版本，因此我们为这个配方提供了一个。
- en: How to do it...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Now, you have to write the script to start the SCGI server that will be listening
    to Lighttpd requests. Don''t worry, even if it is very short and easy, we provide
    one ready to copy here:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您必须编写一个脚本来启动将监听 Lighttpd 请求的 SCGI 服务器。别担心，即使它非常短且简单，我们在这里提供了一个可以复制的示例：
- en: '[PRE32]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Copy the previous script, and put it in the root of your web2py installation
    with the name `scgihandler.py`. Start the SCGI server, and leave it running in
    the background:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制前面的脚本，并将其放在您的 web2py 安装根目录中，命名为 `scgihandler.py`。启动 SCGI 服务器，并在后台运行：
- en: '[PRE33]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now we are ready to configure `lighttpd.`
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好配置 `lighttpd`。
- en: We provide a simple `lighttpd.conf` configuration file here, as an example.
    Of course, real-world configurations can be much more complex, but the important
    parts will not differ much.
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们提供了一个简单的 `lighttpd.conf` 配置文件作为示例。当然，现实世界的配置可能更加复杂，但重要部分不会有太大差异。
- en: Append the following lines to your `lighttpd.conf:`
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行追加到您的 `lighttpd.conf` 文件中：
- en: '[PRE34]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This configuration does the following:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此配置执行以下操作：
- en: Loads the SCGI module into Lighttpd
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 SCGI 模块加载到 Lighttpd 中。
- en: Configures the server document root to the root of web2py installation
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将服务器文档根配置为 web2py 安装根目录。
- en: Rewrites the URL, using `mod_rewrite`, so that incoming requests to static files
    are served directly by Lighttpd, while all the rest are rewritten to a **fake**
    URL beginning with `/handler_web2py.scgi`
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `mod_rewrite` 重写 URL，以便静态文件的请求直接由 Lighttpd 服务，而所有其他请求都被重写到以 `/handler_web2py.scgi`
    开头的 **假** URL。
- en: '**Creates an SCGI server stanza:** For every request beginning with `/handler_web2py.scgi`
    the request is routed to the SCGI server running on `127.0.0.1` at port `4000`,
    skipping the check for the existence of a corresponding local file on the filesystem'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建一个 SCGI 服务器段落：** 对于以 `/handler_web2py.scgi` 开头的每个请求，请求会被路由到运行在 `127.0.0.1`
    的 `4000` 端口的 SCGI 服务器，跳过检查文件系统上是否存在相应的本地文件。'
- en: 'Now, check that your configuration is ok:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，检查您的配置是否正确：
- en: '[PRE35]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then start the server for testing:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后启动服务器进行测试：
- en: '[PRE36]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can start/stop/restart the server with the following command:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用以下命令启动/停止/重启服务器：
- en: '[PRE37]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You will see your web2py application go to the speed of Light(ttpd).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到您的 web2py 应用程序达到光速（ttpd）的速度。
- en: Running web2py with Cherokee
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Cherokee 运行 web2py。
- en: This recipe explains how to run web2py behind a Cherokee web server using **uWSGI**.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方解释了如何在 Cherokee 网络服务器后面运行 web2py，使用 **uWSGI**。
- en: '**Cherokee** is a webserver written in C, similar in intent to Lighttpd: fast,
    compact, and modular. Cherokee comes with an administrative interface that allows
    one to manage its configuration, which is difficult to read and modify otherwise.
    uWSGI is described in its website as a fast (pure C), self-healing, developer/sysadmin-friendly
    application container server. Cherokee has an included module to talk to uWSGI
    servers.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the package or download, compile, and install the required components.
    Create the following file in the installation root of web2py, and call it `uwsgi.xml:`
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This configuration spawns eight processes to manage multiple requests from the
    HTTP server. Change it as needed, and configure `<pythonpath>` to the installation
    root of web2py.
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As the user that owns the web2py installation, start the uWSGI server:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now launch the Cherokee administrative interface to create a new configuration:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Connect to the admin interface with the browser at the following link: `http://localhost:9090/`.'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_02.jpg)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Go to the **Sources** section - **(A)**, then click on the **+** button - **(B)**.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Remote Host** on **(C)**, then fill the text field at **(D)** with
    the IP address, and port to match the configuration in the previous `uswgi.xml`
    file.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Having configured the uWGI source, it is now possible to configure a Virtual
    Host, and redirect requests through it. In this recipe, we choose the **default**
    Virtual Host that is used when no other Virtual Host has a better match for the
    incoming request.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on button `(C)` to go to **Rule Management**.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_03.jpg)'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Delete all rules listed on the left. Only the **default** rule will remain.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_04.jpg)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Configure the **default** rule with a uWSGI **Handler**. Leave the other values
    unchanged.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_05.jpg)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If you want Cherokee to serve static files directly from web2py folders, you
    can add a **Regular Expression** rule. Click button **(A)**, and select **Regular
    Expression** from the drop-down menu at **(B)**. Be aware that this configuration
    works only if the web2py directory is on the same file system, and is accessible
    to Cherokee.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_06.jpg)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Configure the **Regular Expressions:**
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_07.jpg)'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now you can configure the Static Handler pointing to the applications subdirectory
    of your web2py installation:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_08.jpg)'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Remember to save the configuration, and reload or restart Cherokee from the
    administrative interface; then you are ready to start the uWSGI server.
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Change to the correct user ID that was used to install web2py; be aware that
    using root is not recommended.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go into the root directory of web2py installation, where you saved the configuration
    file `uwsgi.xml`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run uWSGI with the `-d <logfile>` option, so that it runs in the background:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Enjoy the speed!
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should have the following:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: web2py (installed but not running)
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: uWSGI (download and install from [http://projects.unbit.it/uwsgi/wiki)](http://projects.unbit.it/uwsgi/wiki))
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cherokee (download and install from [http://www.cherokee-project.com/)](http://www.cherokee-project.com/))
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py with Nginx and uWSGI
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe explains how to run web2py with the Nginx web server using uWSGI.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '**Nginx** is a free, open-source, high-performance HTTP server, and reverse
    proxy, written by **Igor Sysoev**.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Nginx, unlike traditional servers, does not rely on threads to handle requests,
    rather, it implements an asynchronous architecture. This implies that Nginx uses
    a predictable amount of memory, even under heavy load, resulting in higher stability
    and low resource consumption. Nginx now hosts more than seven percent of all domains
    worldwide.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: It should be stressed that even if Nginx is asynchronous, web2py is not. Therefore,
    web2py will use more resources, the more concurrent requests it handles concurrently.
    uWSGI is described on its website as a fast (pure C), self-healing, developer/sysadmin-friendly
    application container server. We will configure Nginx to serve dynamic web2py
    pages through uWSGI, and serve static pages directly, taking advantage of its
    low footprint capabilities.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should have the following:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: web2py (installed but not running)
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: uWSGI (download and install from [http://projects.unbit.it/uwsgi/wiki)](http://projects.unbit.it/uwsgi/wiki))
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nginx (download and install from [http://nginx.net/)](http://nginx.net/))
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Ubuntu 10.04 LTS, you can install uWSGI and Nginx using `apt-get`, as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How to do it...
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we need to configure Nginx. Create or edit a file called `/etc/nginx/
    sites-available/web2py`.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the file, write the following:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: As you can see, it passes all dynamical requests to `127.0.0.1:9001`. We need
    to get uWSGI running there.
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the following file in the installation root of web2py, and call it `web2py.xml:`
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This script assumes that web2py is installed as usual at `/home/www-data/web2py/.`
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now disable the default configuration, and enable the new one:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In order to use HTTPS, you may need to create a self-signed certificate:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You will also need to enable web2py admin:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Once you are done, restart both uWSGI and Nginx:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'web2py comes with a script that will perform this setup for you automatically:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '`scrips/setup-web2py-nginx-uwsgi-ubuntu.sh`'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Running web2py on shared hosts using CGI
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe explains how to configure web2py to run on a shared host with login
    (but not root) access.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: With login or FTP access to a shared host, the user isn't able to configure
    the web server, and must live within the host's configured constraints. This recipe
    assumes a typical Unix-based or Linux-based shared host running Apache.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Two deployment methods are possible, depending on how the system is configured.
    If Apache's `mod_proxy` is available, and the host permits long-running processes,
    running web2py's built-in server as an Apache proxy is straightforward and efficient.
    If `mod_proxy` is not available, or the host prohibits long-running processes,
    we're limited to the CGI interface, which is simple to configure and almost universally
    available, but is also slow, since the Python interpreter must run and load web2py
    for each request.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: We'll start with CGI deployment, the simpler case.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll assume that the root of your website is `/usr/www/users/username`, and
    that `/usr/www/users/username/cgi-bin` is your CGI binaries directory. If your
    details differ, obtain the actual values from your provider, and modify these
    instructions accordingly.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: For security reasons, here, we also assume your host supports running CGI scripts
    as the local user (cgiwrap). This procedure may vary from host to host, if it's
    available at all; check with your provider.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the web2py source to your `cgi-bin` directory. For example:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Alternatively, unzip the web2py source locally, and upload it to the host through
    FTP.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your web root directory, create the file `.htaccess`, if necessary, and
    add the following lines (changing paths as required):'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Change its permissions with the following:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Now access[http://yourdomain.com/welcome](http://yourdomain.com/welcome), or
    (depending on your provider)[http://hostingdomain.com/username/welcome](http://hostingdomain.com/username/welcome).
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you get access errors at this point, examine the most recent file in `web2py/applications/welcome/errors/`,
    using the `tail` command. This format isn't especially friendly, but it can provide
    useful clues. If the `errors` directory is empty, you may need to double-check
    that the `errors` directory is writable by the web server.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running web2py on shared hosts with mod_proxy
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using `mod_proxy` has two major advantages over CGI deployment discussed in
    the previous recipe: web2py runs continuously, so performance is considerably
    better, and it runs as your local user, which improves security. Because from
    web2py''s perspective it appears to be running on localhost, the admin application
    can run, but if you don''t have SSL operation available, you may want to disable
    admin for security reasons. SSL setup is discussed in the *Setting up a production
    deployment on Ubuntu* recipe.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we assume that you have already downloaded and unzipped web2py somewhere
    in your home folder. We also assume that your web hosting provider has mod_proxy
    enabled, supports long running processes, allows you to open a port (8000 in the
    example but you can change if this port is occupied by another user).
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your base web directory, create a file `.htaccess`, if necessary, and add
    these lines:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Download and unzip web2py as described previously for CGI operation, except
    that web2py need not be installed in your `cgi-bin` directory, or even in your
    web documents tree. For this recipe, we'll assume that you install it in your
    login home directory `$HOME`.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start web2py running on localhost and port `8000` with the following command:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The `password` is the one time admin password that you choose. The -N is optional
    and it disables `web2py` cron to save memory. (Notice that this last step cannot
    be accomplished trhough FTP, so login access is required.)
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running web2py from a user-defined folder
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe explains how to relocate the web2py `applications` folder.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: With web2py, each application lives in a folder under the `applications/` folder,
    which in turn is located in the web2py `base` or `root` folder (the folder that
    also contains `gluon/`, the web2py core code).
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: When web2py is deployed using its built-in web server, the `applications/` folder
    can be relocated to some other location in your file system. When `applications/`
    is relocated, certain other files are relocated as well, including `logging.conf,
    routes.py`, and `parameters_port.py`. Additionally, a `site-packages` in the same
    folder as the relocated `applications/`, is inserted into `sys.path` (this `site-packages`
    directory need not exist).
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When web2py is run from the command line, the folder relocation is specified
    with the `-f` option, which should specify the parent folder of the relocated
    `applications/` folder, for example:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: There's more...
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When web2py is run as a Windows service `(web2py.exe -W)`, the relocation can
    be specified in a file `options.py` in the web2py main folder. Change the default
    folder: `os.getcwd()` to specify the parent folder of the relocated `applications/`
    folder. Here is an example of the `options.py` file:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Applications relocation is not available when web2py is deployed with an external
    web server.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, create a web2py unprivileged user:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'For security, disable the web2py user password to prevent remote logins:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Download the source package from web2py''s official website, uncompress it
    in a suitable directory (for example `/opt/web2py)`, and set the access permissions
    appropriately:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Create an `init` script in `/etc/inid.d/web2py` (you can use the one in `web2py/scripts/`
    as a starting point):'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Edit the `init` script:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Set the basic configuration parameters:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Change `127.0.0.1` and `8001` to your desired IP and port. You can use `0.0.0.0`
    as a wildcard IP that match all the interfaces.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a self-signed certificate, if you plan on using admin remotely:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: If you use `print` statements for debugging purposes, or want to record web2py
    output messages, you can redirect standard output, by adding the following line
    after the `imports` in `web2py.py:`
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Finally, start your web2py service:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'To install it permanently (so it starts and stop automatically with the rest
    of the operating system services), issue the following command:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'If all works correctly, you''ll be able to open your web2py admin:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Installing web2py as a service in Ubuntu
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For simple sites and intranets, you may need a simple installation method that
    keeps web2py running. This recipe shows how to start web2py in a simple way without
    further dependencies (no Apache webserver!).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can see what is happening using `bash` to debug the `init` script:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Also, you can change `start-stop-daemon` options to be more verbose, and use
    the web2py user to prevent interference with other Python daemons:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Remember to set up a password to be able to use the administrative interface.
    This can be done by executing the following command (change `mypass` to your desired
    password):'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Running web2py with IIS as a proxy
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IIS is the primary web server for the Windows OS. It can run multiple concurrent
    domains and several application pools. When you deploy web2py on IIS, you want
    to set up a new site, and have a separate application pool for its root application.
    In this way, you have separate logs and ability to start/stop the application
    pool, independently on the others. Here we explain how.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: This is the first of three recipes in which we repeat the process using different
    configurations. In this first recipe, we set up IIS to act as a proxy for the
    web2py **Rocket** web server.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: This configuration is desirable when IIS default site is already in production
    with enabled ASP.NET, ASP, or PHP applications, and at the same time, your web2py
    sites may be under-development and may require frequent restarting (for example,
    due to changes in `routes.py)`.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we assume that you have IIS version 7 or later, already installed.
    We do not discuss the steps to install IIS7, since it is a commercial product
    and they are well documented somewhere else.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: You also need to have web2py unzipped in a local folder. Start web2py on port
    `8081`.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Note that when running web2py as a proxy, you should be careful about unintentionally
    exposing admin without encryption.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you need to be able to use a IIS Proxy. For this, you will need **Application
    Request Routing (ARR)** **2.5**. ARR can be downloaded and installed from Microsoft
    Web Platform Installer available here:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: How to do it...
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After you download the web platform installer for ARR, open the application
    and browse to **Products** on the left-hand side of the screen, as shown in the
    following screenshot:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_09.jpg)'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, click on **Add** - **Application Request Routing 2.5**, and then click
    on **Install**. This will take you to a new screen, as shown in the following
    screenshot; click on **I Accept:**
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_10.jpg)'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Web Platform installer will automatically select and install all the dependencies
    required for **Application Request Routing 2.5** to work. Click on **Finish**,
    and this will bring you to the **Download and Installation** screen.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_11.jpg)'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once you receive the successful message, you can close Microsoft web platform
    application.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the IIS Manager, and create a new website as directed.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, right-click on **Sites** on the top-left in the **IIS Manager**, and
    select **New Website**. This will take you to the following screen. Fill in the
    details as shown here:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_12.jpg)'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Make sure you select the right IP on which your site will run.
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the site is created, double-click the **URL Rewrite** as shown in the
    following screenshot:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_13.jpg)'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once in **URL Rewrite** module, click on **Add Rule** on the top-right-hand
    side, as shown in the next screenshot.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Reverse Proxy** template under **Inbound and Outbound Rules**.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill out the details as shown here:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_01_14.jpg)'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Since the **Server IP** field is the most important, it must contain the IP
    and port where web2py is running: `127.0.0.1:8081`. Also, make sure that **SSL
    Offloading** is checked. In the outbound rules for the **TO** field, write the
    domain name assigned to the website. When done, click **OK**.'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, everything on your web2py installation should be working, except
    for the admin interface. Web2py requires that we use HTTPS when a request for
    the admin interface is coming for a non-localhost server. In our example, localhost
    for web2py is `127.0.0.1:8081`, while IIS is currently operational on `127.0.0.1:80.`
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To enable the admin, you will need a certificate. Create a certificate and add
    it to your server certificates in IIS 7, then repeat the previous steps to bind
    `443` to the web2py website we created previously.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, visit: `https://yourdomain.com/admin/`, and you will be able to browse
    the web2py admin web interface. Enter the password for your web2py admin interface,
    and proceed normally.'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running web2py with ISAPI
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we present a production quality configuration, which uses a dedicated
    application pool run natively in IIS using the ISAPI handler. It is similar to
    a typical Linux/Apache configuration, but is a Windows native.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As before you will need IIS installed.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: You should have web2py already downloaded and unzipped. If you have it already
    running on port **8081** (or other port) on localhost, you can leave it there,
    since it should not interfere with this installation. We will assume web2py is
    installed into `C:\path\to\web2py`.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: You can place it anywhere else you like.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: Then you need to download and install `isapi-wsgi`. This is explained below.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, you need to download `isapi-wsgi` from: [http://code.google.com/p/isapi-wsgi/](http://code.google.com/p/isapi-wsgi/).'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is a mature WSGI adapter for IIS, based on pywin32\. Most of this recipe
    is based on the documentation and the examples about `isapi-wsgi.`
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can install isapi-wsgi using the win32 installer: `http://code.google.com/p/isapi-wsgi/downloads/detail?name=isapi_wsgi-0.4.2\.
    win32.exe.`'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also install it simply downloading the Python file somewhere into `"c:\Python\Lib\site-packages"`
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://isapi-wsgi.googlecode.com/svn/tags/isapi_wsgi-0.4.2/isapi_wsgi.py.](http://isapi-wsgi.googlecode.com/svn/tags/isapi_wsgi-0.4.2/isapi_wsgi.py)'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`isapi_wsgi` runs on IIS 5.1, 6.0, and 7.0\. But IIS 7.x must have **IIS 6.0
    Management Compatability** installed.'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You may want to try running the following test to see that it was installed
    properly:'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Now go to `http://localhost/isapi-wsgi-test/`.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you get a `500 error` that says `this is not a valid Win32 application`,
    then something is wrong and this is discussed here: [http://support.microsoft.com/kb/895976/en-us](http://support.microsoft.com/kb/895976/en-us).'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you see a normal `Hello` response, then the installation was successful,
    and you can remove the test:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: We are not yet ready to configure the web2py handler. You need to enable the
    32-bits mode.
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We are now ready to configure the web2py handler. Add your web2py installation
    to the `PYTHONPATH:`
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'If it does not exist already, create the file `isapiwsgihandler.py` in the
    `C:\path\to\web2py` folder, which contains the following:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Recent versions of web2py may already contain this file, or even a better version.
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first part is the handler, and the second part will allow an automatic
    installation from the command line:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: By default, this installs the extension for virtual directory `appname` under
    `Default Web Site.`
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check the current mode for Web Applications (32 bits or 64 bits):'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'If answer is `The parameter "Enable32BitAppOnWin64" is not set at this node`
    or `Enable32BitAppOnWin64 : (BOOLEAN) False`, then you must switch from 64 bits
    to 32 bits mode for the Web Server. ISAPI does not wok on IIS in 64 bits mode.
    You can switch with the command:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Then restart application pool, as follows:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Or set up a separate pool, as follows:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
