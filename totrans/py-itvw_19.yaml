- en: Chapter 19. Mike Bayer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章。迈克·贝耶
- en: '![Mike Bayer](img/B08180_06_01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![迈克·贝耶](img/B08180_06_01.jpg)'
- en: Mike Bayer is an American software developer and a senior software engineer
    at Red Hat, which sells open source software products. Previous positions include
    many New York-based internet companies like MLB.com. He also worked on content
    management software at Major League Baseball. Mike is the creator of a number
    of open source programming libraries for Python, such as SQLAlchemy, an SQL toolkit
    and object-relational mapper. He plays an active role in the Python community
    by promoting good database software practices. Mike is a regular speaker at PyCon
    US and smaller conferences in Europe.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克·贝耶（Mike Bayer）是一位美国软件开发者，同时也是红帽（Red Hat）的高级软件工程师，该公司销售开源软件产品。他之前的工作经历包括在许多纽约的互联网公司，如MLB.com。他还曾在美国职业棒球大联盟（Major
    League Baseball）从事内容管理软件的开发工作。迈克是多个Python开源编程库的创造者，例如SQLAlchemy，这是一个SQL工具包和对象关系映射器。他通过推广良好的数据库软件实践在Python社区中发挥着积极作用。迈克是PyCon
    US和欧洲较小会议的常客演讲者。
- en: '**Discussion themes: SQLAlchemy, AI, v2.7/v3.x.**'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**讨论主题：SQLAlchemy、AI、v2.7/v3.x。**'
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Catch up with Mike Bayer here: @zzzeek**'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**在这里了解迈克·贝耶的最新动态：@zzzeek**'
- en: '**Mike Driscoll**: What made you become a programmer?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**迈克·德里斯科尔（Mike Driscoll）**：是什么让你成为了一名程序员？'
- en: '**Mike Bayer**: I''ve had an interest in computers since 1980, when I was first
    exposed to early personal computers. I tried to learn game programming in assembly
    language for early 8-bit computers, without much success. In high school, I was
    exposed to data structures and procedural programming with Pascal.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**迈克·贝耶**：我从1980年开始对电脑产生兴趣，那时我第一次接触到早期的个人电脑。我试图用汇编语言学习早期的8位电脑的游戏编程，但并没有取得太大的成功。在高中时，我接触到了Pascal语言中的数据结构和过程式编程。'
- en: It seemed pretty natural that I'd become a programmer, but as it turned out,
    I switched majors from computer engineering to music and took several years off
    from touching computers at all. I had found myself being overly competitive with
    other programmers that I met on bulletin boards and I didn't like who I was.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得成为一名程序员似乎是顺理成章的，但结果却是，我从计算机工程转到了音乐专业，并且有几年时间完全没接触过电脑。我发现自己在公告板上与其他程序员竞争过于激烈，而且我不喜欢自己变成的样子。
- en: I got back into computers strictly because it was the only way that I could
    eat and pay rent. About that time, the internet became a commercial industry and
    I immediately got involved in that kind of work.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我重新回到电脑行业纯粹是因为这是我能吃饭和付房租的唯一方式。大约在那个时期，互联网成为了一个商业行业，我立即参与了那种工作。
- en: Once the first internet bubble came along, being a programmer in NYC was suddenly
    intense and exciting. Everyone wanted you to work for them. The competitive element
    of programming has in fact created continuous problems for me over the years.
    I've had to work to minimize that issue.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦第一个互联网泡沫出现，纽约市的程序员突然变得紧张而兴奋。每个人都想让你为他们工作。编程的竞争性实际上多年来一直给我带来持续的问题。我不得不努力减少这个问题。
- en: '**Driscoll**: So how did you get started with Python?'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔（Driscoll）**：你是如何开始接触Python的？'
- en: '**Bayer**: Most of my pre-Python career was spent programming in Perl, Java,
    and a little bit of C. I was really into object-oriented application design and
    I ended up going through a deep architecture astronaut phase, which was very common
    with Java programmers in the late 1990s and early 2000s.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**贝耶（Bayer）**：我的Python之前的大部分职业生涯都是在使用Perl、Java和一点C进行编程。我非常热衷于面向对象的应用程序设计，并最终经历了一个深度的架构宇航员阶段，这在1990年代末和2000年代初的Java程序员中非常普遍。'
- en: I liked the idea of scripting languages, because they allowed you to jump right
    into a text file. You would have something that could work immediately without
    the formality, boilerplate and compilation step of Java. So I also spent a lot
    of time trying to realize OO design in Perl, which was pretty unsatisfying.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢脚本语言的想法，因为它们允许你直接跳入文本文件。你会得到一些可以立即工作而不需要Java那种正式性、样板和编译步骤的东西。因此，我也花了很多时间试图在Perl中实现面向对象设计，但这并不令人满意。
- en: '**Mike Bayer: ''After a few years of refusing to accept significant whitespace,
    I finally got into Python.''**'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**迈克·贝耶：''拒绝接受大量空白符的几年后，我终于开始接触Python。''**'
- en: I became aware that Python might be something that could really strike a balance
    between those two worlds. After a few years of refusing to accept significant
    whitespace, I finally got into Python and realized that the language was in fact
    everything that I was looking for.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我意识到Python可能真的能够在两个世界之间找到一个平衡点。在拒绝接受大量空白符的几年后，我终于开始接触Python，并意识到这门语言实际上是我一直在寻找的一切。
- en: '**Mike Driscoll: What makes Python special to you?**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**迈克·德里斯科尔**：Python对你来说有什么特别之处？'
- en: '**Bayer**: What impressed me about Python was the way that everything in your
    interpreter was a Python object, including all of the modules that you imported.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**拜耳**：给我留下深刻印象的是Python的这种方式，即你的解释器中的所有东西都是Python对象，包括你导入的所有模块。'
- en: Nowadays, that whole way of looking at things is second nature to me. But when
    I first learned that I could inspect elements of the program itself as just more
    data, all of the other languages that I'd been exposed to were nothing like that.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这种看待事物的方式对我来说已经习以为常了。但当我第一次了解到我可以像查看更多数据一样检查程序本身的元素时，我所接触到的所有其他语言都完全不一样。
- en: Python was so simple to understand, especially after I had spent years never
    really understanding what Perl's use statement did. I also observed in Python
    a certain emphasis on consistency and correctness that was uncharacteristic in
    scripting languages in general.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Python非常容易理解，尤其是在我花费多年时间真正弄不懂Perl的use语句之后。我还观察到Python在脚本语言中一般不常见的对一致性和正确性的强调。
- en: I predicted that the Python programmers that I'd be working with would be higher
    quality developers than I'd otherwise been exposed to, since they were attracted
    to Python! That turned out to be completely true.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我预测，我将与之合作的Python程序员将比我之前接触到的开发者质量更高，因为他们被Python所吸引！结果证明这完全正确。
- en: '**Driscoll**: So what inspired you to create SQLAlchemy?'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：那么是什么启发了你创建SQLAlchemy？'
- en: '**Bayer**: Well, I had always had the goal of figuring out which programming
    language I wanted to make my home in. Within that language, I wanted to work up
    a full suite of tools that I could use for everything. I wanted to be able to
    strike out independently and build applications for people.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**拜耳**：嗯，我一直有一个目标，就是找出我想在哪个编程语言中安家。在这个语言中，我想构建一套完整的工具，我可以用它来做任何事情。我想能够独立行动，为人们构建应用程序。'
- en: '**Mike Bayer: ''I wanted to be able to strike out independently and build applications
    for people.''**'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**迈克·拜耳**：“我想能够独立行动，为人们构建应用程序。”'
- en: At my various jobs, I had always had to create some kind of database abstraction
    layer that I'd then use in many projects. I was always building little template
    engines, mini web frameworks and database abstraction layers, in whatever language
    I was using, which I'd try to standardize for all of my projects.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的各种工作中，我总是不得不创建某种类型的数据库抽象层，然后在许多项目中使用它。我总是在使用我所使用的任何语言构建小型模板引擎、微型Web框架和数据库抽象层，并试图为所有项目标准化。
- en: So when I got into Python, I was unsatisfied with the web framework tools and
    database abstraction tools that were available at that time. I had also written
    many template engines and database access tools already, so I had a lot of ideas.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始接触Python时，我对当时可用的Web框架工具和数据库抽象工具并不满意。我之前也已经编写了许多模板引擎和数据库访问工具，所以我有很多想法。
- en: '**Mike Bayer: ''When I got into Python, I was unsatisfied with the web framework
    tools and database abstraction tools that were available at that time.''**'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**迈克·拜耳**：“当我开始接触Python时，我对当时可用的Web框架工具和数据库抽象工具并不满意。”'
- en: I first wrote a template engine called Myghty, which was an almost line-for-line
    port of the Perl template engine HTML::Mason. Myghty was horrible, yet it gained
    some brief popularity and formed the basis of the first version of the Pylons
    web framework.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先编写了一个名为Myghty的模板引擎，它是Perl模板引擎HTML::Mason的几乎逐行移植。Myghty很糟糕，但它还是获得了一些短暂的流行，并成为了Pylons
    Web框架第一个版本的基石。
- en: When I set out to write SQLAlchemy, I took a very deep and slow approach, to
    try to make it amazing. I was still very flawed as a programmer and especially
    as a Python programmer at that point. Early SQLAlchemy had many awful design choices,
    but it still shined as something that was truly unique and potentially kind of
    amazing. The first time that I saw the unit of work do a flush, I was amazed.
    I realized that this thing might have a deep impact on people.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始编写SQLAlchemy时，我采取了非常深入和缓慢的方法，试图让它变得非常出色。在那个阶段，我作为一个程序员，尤其是作为一个Python程序员，仍然有很多缺陷。早期的SQLAlchemy有很多糟糕的设计选择，但它仍然以其真正独特和可能非常出色的特性而闪耀。第一次看到工作单元执行刷新时，我感到非常惊讶。我意识到这件事可能对人们有深远的影响。
- en: '**Driscoll**: So how did Mako come about?'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：那么Mako是如何产生的？'
- en: '**Bayer**: Mako was very simply created to replace Myghty and all of its horrible
    design choices, so that Pylons could have a template engine that wasn''t embarrassing.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bayer**：Mako非常简单地被创建出来，以取代Myghty及其所有糟糕的设计选择，这样Pylons就可以有一个不那么令人尴尬的模板引擎。'
- en: Mako was meant to be a very capable and solid template engine, which could more
    or less be left to go on its own once it was complete. While Mako did gain more
    features over the years, I've considered it to be complete for many years now.
    I still use Mako, but I'm happy for Jinja2 to be the de facto template engine
    in Python. Armin Ronacher did, after all, credit Mako's architecture for being
    a lot of his inspiration for creating Jinja2.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Mako原本打算成为一个非常强大和稳定的模板引擎，一旦完成就可以基本让它自行发展。虽然Mako在多年中增加了更多功能，但我已经认为它在很多年前就已经完成了。我仍然在使用Mako，但我很高兴Jinja2成为Python事实上的模板引擎。毕竟，Armin
    Ronacher将Mako的架构归功于他创建Jinja2的许多灵感来源。
- en: '**Mike Bayer: ''I still use Mako, but I''m happy for Jinja2 to be the de facto
    template engine in Python.''**'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Mike Bayer**：“我仍然使用Mako，但我很高兴Jinja2成为Python的事实上的模板引擎。”'
- en: '**Driscoll**: If you could start over with SQLAlchemy, what would you do differently?'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：如果你能重新开始使用SQLAlchemy，你会做些什么不同的事情？'
- en: '**Bayer**: There were some mistakes that I made, which led to scenarios that
    ultimately benefited the project immensely. So if I had not made those mistakes,
    then I''m not sure how things would have turned out.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bayer**：我犯了一些错误，这些错误最终极大地促进了项目的发展。所以，如果我没有犯这些错误，我不确定事情会怎样发展。'
- en: My issue with competitiveness, which I've mentioned, caused me to have poor
    interactions very early on with some of the contributors. Chasing away people
    who had good ideas, and in many cases, saw things much more clearly than I did,
    was a huge mistake.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到的关于竞争性的问题，导致我在早期与一些贡献者有不良的互动。驱逐那些有良好想法的人，在很多情况下，比我所看到的问题更清晰，这是一个巨大的错误。
- en: I should also have spent more time reading other Python code and getting better
    at using the correct idiomatic patterns, rather than having to retroactively fix
    all of the code once I learned new things about Python.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我也应该花更多的时间阅读其他Python代码，并提高使用正确的惯用模式的技能，而不是在我了解Python的新知识后，不得不回过头来修复所有代码。
- en: If I could start over with SQLAlchemy, I would do other things differently too.
    There were a lot of design patterns that were in the 0.1 version that I tried
    to get rid of by version 0.2 or 0.3\. I couldn't remove those patterns totally.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我能重新开始使用SQLAlchemy，我也会做其他不同的事情。在0.1版本中有很多设计模式，我试图在0.2或0.3版本中消除这些模式。我无法完全去除这些模式。
- en: Version 0.1 relied heavily on the implicit association of objects with database
    connections, both at the core and ORM levels. Today, two of these patterns still
    exist as bound metadata and connectionless execution. These patterns remain extremely
    popular, but continue to create subtle confusion, in contrast to the newer patterns
    that are based on explicitness.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 版本0.1在核心和ORM级别都严重依赖于对象与数据库连接的隐式关联。如今，其中两种模式仍然以绑定元数据和无连接执行的形式存在。这些模式仍然非常受欢迎，但与基于明确性的新模式相比，继续产生微妙的混淆。
- en: '**Mike Bayer: ''Had I been starting with what I know today, SQLAlchemy would
    have been much closer to the mark to begin with.''**'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Mike Bayer**：“如果我现在从我所知的一切开始，SQLAlchemy一开始就会更接近目标。”'
- en: There are many other API patterns that have been heavily revised over the years.
    Had I been starting with what I know today, then SQLAlchemy would have been much
    closer to the mark to begin with. There would have been no need to go through
    major API changes in the early releases.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些年来，许多其他API模式都经历了大幅度的修订。如果我现在从我所知的一切开始，那么SQLAlchemy一开始就会更接近目标。在早期版本中也就没有必要经历重大的API更改。
- en: I also should have recognized the need for a good SQL migrations tool early
    on, although sqlalchemy-migrate did a good job of handling this until I had time
    to create Alembic migrations.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我也应该及早认识到需要一个良好的SQL迁移工具的需求，尽管sqlalchemy-migrate在处理这个问题上做得很好，直到我有时间创建Alembic迁移。
- en: '**Driscoll**: What have you learned from creating open source projects?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：从创建开源项目中，你学到了什么？'
- en: '**Bayer**: Well, for one thing, if your open source project turns out to be
    popular, then it will never be finished. If your project is linked to some set
    of constantly changing technology, like Python database APIs, then your work will
    never be done.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**贝耶**：嗯，首先，如果你的开源项目变得流行，那么它永远不会结束。如果你的项目与某些不断变化的技术相关联，比如Python数据库API，那么你的工作将永远不会完成。'
- en: '**Mike Bayer: ''If your open source project turns out to be popular, then it
    will never be finished.''**'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**迈克·贝耶：''如果你的开源项目变得流行，那么它永远不会结束。''**'
- en: I had no idea that the pace of bug fixing would remain constant for over ten
    years. I have also learned that to be successful in open source, you do have to
    have a lot of luck. You must be fortunate enough to be doing a project at the
    right time. I got into Python much earlier than most of the community and produced
    my software at the perfect time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我完全没有想到，修复bug的速度会保持恒定超过十年。我还了解到，要在开源领域取得成功，你确实需要很多运气。你必须足够幸运，在正确的时间做项目。我比社区中的大多数人更早地接触到了Python，并在最佳时机发布了我的软件。
- en: Finally, I've learned a lot about the calculus that you must apply when a user
    wants some feature, or behavior X. You can't really take them at their word. Often,
    when users think that they want X, they really want Y. Sometimes they think that
    they want X, but they haven't thought through the ramifications.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我学到了很多关于当用户想要某个功能或行为X时必须应用的微积分知识。你真的不能仅仅根据他们的字面意思来对待他们。通常，当用户认为他们想要X时，他们实际上想要Y。有时他们认为他们想要X，但他们没有充分考虑其后果。
- en: You always have to be very careful about how you go about adding X. At the same
    time, you don't want the user to be upset if you are denying their feature request.
    Above all, as the maintainer, you need to be as courteous as possible. This is
    extremely difficult, because lots of users are pretty disrespectful and entitled.
    You gain nothing by venting about this though.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你在添加X时必须非常小心。同时，你不想让用户因为拒绝他们的功能请求而感到不高兴。最重要的是，作为维护者，你需要尽可能有礼貌。这非常困难，因为很多用户都很无礼且自以为是。尽管如此，对此进行发泄也毫无益处。
- en: '**Driscoll**: We''re seeing Python being used a lot in AI and machine learning.
    Why do you think that Python is such a great language for this?'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：我们看到Python在人工智能和机器学习中被大量使用。你认为为什么Python是这种应用如此出色的语言？'
- en: '**Bayer**: What we''re doing in that field is developing our math and algorithms.
    We''re putting the algorithms that we definitely want to keep and optimize into
    libraries such as scikit-learn. Then we''re continuing to iterate and share notes
    on how we organize and think about the data.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**贝耶**：我们在该领域所做的是开发我们的数学和算法。我们将我们肯定想要保留和优化的算法放入scikit-learn等库中。然后我们继续迭代并分享我们如何组织和思考数据的笔记。'
- en: '**Mike Bayer: ''A high-level scripting language is ideal for AI and machine
    learning, because we can quickly move things around and try again.''**'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**迈克·贝耶**：''高级脚本语言非常适合人工智能和机器学习，因为我们可以快速移动事物并再次尝试。我们创建的代码大部分行数都用于表示实际的数学和数据结构，而不是样板代码。'''
- en: A high-level scripting language is ideal for AI and machine learning, because
    we can quickly move things around and try again. The code that we create spends
    most of its lines on representing the actual math and data structures, not on
    boilerplate.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 高级脚本语言非常适合人工智能和机器学习，因为我们可以快速移动事物并再次尝试。我们创建的代码大部分行数都用于表示实际的数学和数据结构，而不是样板代码。
- en: A scripting language like Python is even better, because it is strict and consistent.
    Everyone can understand each other's Python code much better than they could in
    some other language that has confusing and inconsistent programming paradigms.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 类似Python这样的脚本语言甚至更好，因为它既严格又一致。每个人都能比在其他一些具有混乱和不一致编程范式的语言中更好地理解彼此的Python代码。
- en: The availability of tools like IPython notebook has made it possible to iterate
    and share our math and algorithms on a whole new level. Python emphasizes the
    core of the work that we're trying to do and completely minimizes everything else
    about how we give the computer instructions, which is how it should be. Automate
    whatever you don't need to be thinking about.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 工具如IPython笔记本的可用性使得在全新的层面上迭代和分享我们的数学和算法成为可能。Python强调我们试图做的核心工作，并最大限度地减少我们如何向计算机下达指令的其他所有方面，这正是它应该做的。自动化你不需要思考的事情。
- en: '**Mike Bayer: ''Automate whatever you don''t need to be thinking about.''**'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**迈克·贝耶**：''自动化你不需要思考的事情。'''
- en: '**Driscoll**: How do you think that Python could be a better language for AI
    and machine learning?'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你认为Python如何能成为人工智能和机器学习更好的语言？'
- en: '**Bayer**: Machine learning is a CPU intensive task, so we need to continue
    iterating on how to make better use of all of those processor cores, which unfortunately
    means the Global Interpreter Lock (GIL). Right now, the only way to do that is
    to use multiprocessing.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**贝耶**：机器学习是一个CPU密集型任务，因此我们需要继续迭代如何更好地利用所有这些处理器核心，不幸的是，这意味着全局解释器锁（GIL）。目前，唯一的方法是使用多进程。'
- en: '**Mike Bayer: ''Python still lacks a decent concurrency paradigm.''**'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**迈克·贝耶：''Python 仍然缺少一个合适的并发范式。''**'
- en: Python still lacks a decent concurrency paradigm that is somewhere between threads,
    where Python's dynamic contract means that we have a GIL and processes, which
    incur complexity and expense regarding how to share data. It might be helpful
    to have an interpreter concept that acts largely like multiprocessing, but is
    somehow doing it within a single process space. This concept would use OS-level
    threads, yet still keep the processes isolated enough that they don't share the
    same GIL.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Python 仍然缺少一个介于线程和进程之间的合适的并发范式，其中线程意味着 Python 的动态合约意味着我们有一个 GIL，而进程则涉及到如何共享数据的复杂性和成本。可能有一个类似于多进程的解释器概念会有所帮助，但它在单个进程空间内完成。这个概念将使用操作系统级别的线程，同时仍然将进程隔离到足够程度，以至于它们不共享同一个
    GIL。
- en: '**Driscoll**: What advice would you give to someone who is new to programming
    in general?'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你会给一个刚开始学习编程的人什么建议？'
- en: '**Bayer**: There is a lot of conventional wisdom in computer programming. You
    should always put conventional wisdom on trial.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**贝耶**：在计算机编程中有很多传统智慧。你应该总是对传统智慧进行考验。'
- en: '**Mike Bayer: ''You should always put conventional wisdom on trial.''**'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**迈克·贝耶：''你应该总是对传统智慧进行考验。''**'
- en: There are rules in programming, such as don't use mutable global variables,
    which are actually more like training wheels for beginners. They are good rules,
    that have a lot of truth in them, but none of them apply in every case.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中存在一些规则，比如不要使用可变的全局变量，这些规则实际上更像是为初学者准备的训练轮。它们是好的规则，其中包含了很多真理，但它们并不适用于所有情况。
- en: As you progress from being a beginner to being more advanced, you want to be
    able to think on your own. You also want to gain experience by finding novel and
    creative ways to solve problems. These ideas might not always work out, but establishing
    a core practice, of always challenging the status quo, will hopefully allow you
    to see a great new solution to a problem one day.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从初学者成长为更高级的程序员时，你想要能够独立思考。你还想通过寻找新颖和创造性的方法来解决问题来积累经验。这些想法可能并不总是有效，但建立一个核心实践，即始终挑战现状，希望有一天你能找到解决某个问题的绝佳新方案。
- en: '**Driscoll**: Which language would you recommend to someone who is starting
    out in programming?'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你会推荐哪种语言给一个刚开始编程的人？'
- en: '**Bayer**: I think Python is the best beginner language that I''ve ever seen.
    For your first few years of programming, you can just use Python and you''ll probably
    be doing JavaScript as well, since the browser is unavoidable.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**贝耶**：我认为 Python 是我见过的最好的入门语言。在你编程的前几年里，你只需使用 Python，你很可能还会用到 JavaScript，因为浏览器是不可避免的。'
- en: At some point, it's also a great idea to write some kind of scripting language
    interpreter or compiler. An understanding of how instructions declared at a high
    level, like a Python function, end up manifesting as instructions run by a CPU,
    is an essential perspective to have.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，编写某种脚本语言解释器或编译器也是一个很好的主意。理解在高级别声明的指令，如 Python 函数，如何最终表现为 CPU 执行的指令，是一个必须拥有的视角。
- en: '**Driscoll**: What about Python today most excites you?'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：今天，Python 有什么让你最兴奋的？'
- en: '**Bayer**: I''m excited that Python is becoming the default language that virtually
    everyone who wants to do thoughtful work with data chooses first, particularly
    in the field of journalism.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**贝耶**：我很兴奋地看到 Python 正在成为几乎每个想要用数据做有思想的工作的人首选的语言，尤其是在新闻领域。'
- en: '**Mike Bayer: ''I look forward to a new crop of journalists who can program
    Python as well as they can write a headline.''**'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**迈克·贝耶：''我期待着一群既能编写 Python 代码又能撰写标题的记者。''**'
- en: Journalism is becoming more data-driven and I look forward to a new crop of
    journalists who can program Python as well as they can write a headline. We need
    journalists who can produce stories that are based on data from the ground up.
    This will hopefully lead to more data being available as the demand increases.
    Imagine if each time we read a story in the Washington Post, there was also an
    IPython notebook right there, which we could use to analyze the data in the story.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 新闻业正变得更加数据驱动，我期待着新一代记者，他们既能编写 Python 代码，也能撰写标题。我们需要能够从底层产生基于数据的故事的记者。这样，随着需求的增加，可能会有更多的数据可用。想象一下，每次我们在《华盛顿邮报》上阅读故事时，那里也有一份
    IPython 笔记本，我们可以用它来分析故事中的数据。
- en: '**Driscoll**: Should people now leave Python 2.7 behind?'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 现在人们应该放弃 Python 2.7 吗？'
- en: '**Bayer**: Moving from Python 2.7 is a problem that will solve itself. I think
    that people in the data field are definitely starting with the 3.x series now.
    In the infrastructure world that I work in, we are understandably taking a lot
    longer to get there, but we will.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bayer**: 从 Python 2.7 迁移是一个会自行解决的问题。我认为在数据领域，人们现在肯定是从 3.x 系列开始的。在我工作的基础设施领域，我们理解地需要更长的时间才能达到那里，但我们会的。'
- en: '**Mike Bayer: ''Moving from Python 2.7 is a problem that will solve itself.
    I think that people in the data field are definitely starting with the 3.x series
    now.''**'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**贝耶**: 从 Python 2.7 迁移是一个会自行解决的问题。我认为在数据领域，人们现在肯定是从 3.x 系列开始的。'
- en: '**Driscoll**: What are some changes that you''re hoping to see in future Python
    releases?'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 你希望在未来 Python 版本中看到哪些变化？'
- en: '**Bayer**: To be honest, in the future I''d like to see less emphasis on the
    `asyncio` system, which I believe is a widely misunderstood API.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bayer**: 老实说，我希望未来对 `asyncio` 系统的重视程度降低，我认为这是一个被广泛误解的 API。'
- en: New programmers are starting their projects using async for the entire system
    end-to-end. They are creating buggy and overly complicated applications as a result,
    which don't perform any better than they would using traditional techniques.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 新程序员开始他们的项目时，使用异步技术从头到尾构建整个系统。因此，他们创建的带有错误和过于复杂的应用程序，其性能并不比使用传统技术更好。
- en: There is definitely a place for asynchronous I/O, but in virtually any real-world
    application, it should be limited to dealing with interaction with external resources
    and clients. This should only be when the scale of external data interaction will
    be very wide and concurrent (e.g. scraping thousands of websites, or waiting for
    commands from thousands of clients).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 异步 I/O 确实有它的位置，但在几乎任何实际应用中，它应该仅限于处理与外部资源和客户的交互。这应该只发生在外部数据交互的规模非常广泛且并发时（例如，抓取成千上万的网站，或等待成千上万的客户端的命令）。
- en: The central engines of our applications (those which are interacting with local
    data and doing our business logic and algorithms), should be written with traditional
    threading. Asynchronous and synchronous components can talk to each other quite
    well, however the programmer needs to understand both paradigms well. The current
    async culture does not emphasize this at all.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的核心引擎（那些与本地数据交互并执行我们的业务逻辑和算法的），应该使用传统的多线程编写。异步和同步组件可以很好地互相通信，然而程序员需要很好地理解这两种范式。当前的异步文化根本不强调这一点。
- en: '**Driscoll**: Thank you, Mike Bayer.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 谢谢，迈克·贝耶。'
