["```py\n>>> def test(): \n...     print(\"inside test function\") \n... \n>>> x = test \n>>> x() \ninside test function \n>>> x \n<function test at 0x7fca460efbf8> \n\n```", "```py\n>>> def some_function(y): \n...     y() \n... \n>>> some_function(test) \ninside test function \n\n```", "```py\n>>> class Foo:\n...     def say_hi(self):\n...         print(\"hi!\")\n... \n>>> bar = Foo\n>>> z = bar()\n>>> z.say_hi()\nhi!\n\n```", "```py\n1\\. Initial number (orig environment during function creation): 100 \n2\\. Now calling this function with its original environment loaded: \n x: 100, y: 1 , x+y: 101 \n x: 100, y: 5 , x+y: 105\n\n```", "```py\nclass Knight: \n    def move(self): \n        pass \n    def attack(self): \n        pass \n```", "```py\ndef do_something(a_thing): \n    a_thing.move() \n    a_thing.attack() \n```", "```py\n class Lion: \n    def move(self): \n        pass \n    def jump(self): \n        pass \n    def roar(self): \n        pass\n```", "```py\nassert(isinstance(jump_strategy, Callable))\n```", "```py\n    return cls.units_dict.get(key)()\n    ```", "```py\n@classmethod \n@abstractmethod \ndef create_armor(cls, armor_type): \n    return cls.armor_dict.get(armor_type)()\n```", "```py\nfoo_elf_adapter.jump = foo_elf.leap \nfoo_elf_adapter.attack = foo_elf.hit\n```"]