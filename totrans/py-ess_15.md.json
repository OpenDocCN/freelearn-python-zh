["```py\nlogger= logging.getLogger(__name__)\ndef main():\n    parser= argparse.ArgumentParser()\n    parser.add_argument(\"-v\", \"--verbose\",\n        action=\"store_const\", const=logging.DEBUG, default=logging.INFO)\n    parser.add_argument(\"c\", type=float)\n    options= parser.parse_args()\n\n    logging.getLogger().setLevel(options.verbose)\n    logger.debug(\"Converting '{0!r}'\".format(options.c))\n    convert(options.c)\n```", "```py\nfrom turtle import *\n\ndef on_screen():\n    x, y = pos()\n    w, h = screensize()\n    return -w <= x < w and -h <= y < h\n\ndef spiral(angle, incr, size=10):\n    while on_screen():\n        right(angle)\n        forward(size)\n        size *= incr\n```", "```py\nif __name__ == \"__main__\":\n    speed(10)\n    spiral(size=10, incr=1.05, angle = 67)\n    done()\n```", "```py\nfrom flask import Flask, request\nfrom PIL import Image, ImageDraw, ImageColor\nimport tempfile\n\nspiral_app = Flask(__name__)\n\n@spiral_app.route('/image/<spec>', methods=('GET',))\ndef image(spec):\n    spec_uq= urllib.parse.unquote_plus(spec)\n    spec_dict = urllib.parse.parse_qs(spec_uq)\n    spiral_app.logger.info( 'image spec {0!r}'.format(spec_dict) )\n    try:\n        angle= float(spec_dict['angle'][0])\n        incr= float(spec_dict['incr'][0])\n        size= int(spec_dict['size'][0])\n    except Exception as e:\n        return make_response('URL {0} is invalid'.format(spec), 403)\n\n    # Working dir should be under Apache Home.\n    _, temp_name = tempfile.mkstemp('.png')\n\n    im = Image.new('RGB', (400, 300), color=ImageColor.getrgb('white'))\n    pen= Pen(im)\n    spiral(pen, angle=angle, incr=incr, size=size)\n    im.save(temp_name, format='png')\n\n    # Should redirect so that Apache serves the image.\n    spiral_app.logger.debug( 'image file {0!r}'.format(temp_name) )\n    with open(temp_name, 'rb' ) as image_file:\n        data = image_file.read()\n    return (data, 200, {'Content-Type':'image/png'})\n```", "```py\nhttp://127.0.0.1:5000/image/size=10&angle=65.0&incr=1.05\n```", "```py\n{'size': ['10'], 'angle': ['65.0'], 'incr': ['1.05']}\n```", "```py\nif __name__ == '__main__':\n    spiral_app.run(debug=True)\n```", "```py\ncat some_file.dat | python3 map.py | sort | python3 reduce.py\n```", "```py\nimport csv\nimport sys\nimport datetime\nfrom decimal import Decimal\nif __name__ == \"__main__\":\n    rdr = csv.DictReader(sys.stdin)\n    wtr = csv.writer(sys.stdout, delimiter='\\t', lineterminator='\\n')\n    for row in rdr:\n        date = datetime.datetime.strptime(row['DATE'], \"%Y%m%d\").date()\n        if row['TSNW'] in ('0', '-9999', '9999'):\n            continue # Zero or equipment error: reject\n        wtr.writerow( [date.month, Decimal(row['TSNW'])/10] )\n```", "```py\nimport csv\nimport sys\nfrom collections import Counter\nfrom decimal import Decimal\nif __name__ == \"__main__\":\n    rdr= csv.DictReader(\n        sys.stdin, fieldnames=(\"month\",\"snowfall\"),\n        delimiter='\\t', lineterminator='\\n')\n    counts = Counter()\n    for line in rdr:\n        counts[line['month']] += Decimal(line['snowfall'])\n    print( counts )\n```", "```py\nimport subprocess\ndataset = \"526212.csv\"\ncommand = \"\"\"cat {dataset} | python3 -m Chapter_15.map | sort |\n    python3 -m Chapter_15.reduce\"\"\"\ncommand = command.format_map(locals())\nresult= subprocess.check_output(command, shell=True)\nfor line in result.splitlines():\n      print( line.decode(\"ASCII\") )\n```"]