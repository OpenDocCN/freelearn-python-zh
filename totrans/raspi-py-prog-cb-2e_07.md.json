["```py\nsudo raspi-config\n\n```", "```py\nsudo nano /etc/modules\n\n```", "```py\ni2c-dev\ni2c-bcm2708\n\n```", "```py\nsudo apt-get update\nsudo apt-get install i2c-tools\n\n```", "```py\nsudo halt\n\n```", "```py\nsudo i2cdetect -y 0\nsudo i2cdetect -y 1\n\n```", "```py\nsudo nano /etc/modprobe.d/raspi-blacklist.conf\n\n```", "```py\nsudo i2cget -y 1 0x48\nsudo i2cget -y 1 0x48\n\n```", "```py\nsudo i2cset -y 1 0x48 0x01\nsudo i2cget -y 1 0x48\nsudo i2cget -y 1 0x48\n\n```", "```py\nsudo i2cset -y 1 0x48 0x04\n\n```", "```py\nsudo i2cset -y 1 0x48 0x40 0xff\n\n```", "```py\nsudo i2cset -y 1 0x48 0x40 0x00\n\n```", "```py\nsudo i2cset -y 1 0x48 0x01\n\n```", "```py\nsudo i2cset -y 1 0x48 0x40 0xff \n\n```", "```py\nsudo i2cset -y 1 0x48 0x04\n\n```", "```py\nsudo apt-get install python3-dev python3-pip\n\n```", "```py\nsudo pip-3.2 install wiringpi2\n\n```", "```py\n    #!/usr/bin/env python3\n    #data_adc.py\n    import wiringpi2\n    import time\n\n    DEBUG=False\n    LIGHT=0;TEMP=1;EXT=2;POT=3\n    ADC_CH=[LIGHT,TEMP,EXT,POT]\n    ADC_ADR=0x48\n    ADC_CYCLE=0x04\n    BUS_GAP=0.25\n    DATANAME=[\"0:Light\",\"1:Temperature\",\n              \"2:External\",\"3:Potentiometer\"]\n    ```", "```py\n    class device:\n      # Constructor:\n      def __init__(self,addr=ADC_ADR):\n        self.NAME = DATANAME\n        self.i2c = wiringpi2.I2C()\n        self.devADC=self.i2c.setup(addr)\n        pwrup = self.i2c.read(self.devADC) #flush powerup value\n        if DEBUG==True and pwrup!=-1:\n          print(\"ADC Ready\")\n        self.i2c.read(self.devADC) #flush first value\n        time.sleep(BUS_GAP)\n        self.i2c.write(self.devADC,ADC_CYCLE)\n        time.sleep(BUS_GAP)\n        self.i2c.read(self.devADC) #flush first value\n    ```", "```py\n      def getName(self):\n        return self.NAME\n    ```", "```py\n      def getNew(self):\n        data=[]\n        for ch in ADC_CH:\n          time.sleep(BUS_GAP)\n          data.append(self.i2c.read(self.devADC))\n        return data\n    ```", "```py\n    def main():\n      ADC = device(ADC_ADR)\n      print (str(ADC.getName()))\n      for i in range(10):\n        dataValues = ADC.getNew()\n        print (str(dataValues))\n        time.sleep(1)\n\n    if __name__=='__main__':\n      main()\n    #End\n    ```", "```py\nsudo python3 data_adc.py\n\n```", "```py\n#!/usr/bin/env python3\n#data_local.py\nimport subprocess\nfrom random import randint\nimport time\n\nMEM_TOTAL=0\nMEM_USED=1\nMEM_FREE=2\nMEM_OFFSET=7\nDRIVE_USED=0\nDRIVE_FREE=1\nDRIVE_OFFSET=9\nDEBUG=False\nDATANAME=[\"CPU_Load\",\"System_Temp\",\"CPU_Frequency\",\n          \"Random\",\"RAM_Total\",\"RAM_Used\",\"RAM_Free\",\n          \"Drive_Used\",\"Drive_Free\"]\n\ndef read_loadavg():\n  # function to read 1 minute load average from system uptime\n  value = subprocess.check_output(\n            [\"awk '{print $1}' /proc/loadavg\"], shell=True)\n  return float(value)\n\ndef read_systemp():\n  # function to read current system temperature\n  value = subprocess.check_output(\n            [\"cat /sys/class/thermal/thermal_zone0/temp\"],\n            shell=True)\n  return int(value)\n\ndef read_cpu():\n  # function to read current clock frequency\n  value = subprocess.check_output(\n            [\"cat /sys/devices/system/cpu/cpu0/cpufreq/\"+\n             \"scaling_cur_freq\"], shell=True)\n  return int(value)\n\ndef read_rnd():\n  return randint(0,255)\n\ndef read_mem():\n  # function to read RAM info\n  value = subprocess.check_output([\"free\"], shell=True)\n  memory=[]\n  for val in value.split()[MEM_TOTAL+\n                           MEM_OFFSET:MEM_FREE+\n                           MEM_OFFSET+1]:\n    memory.append(int(val))\n  return(memory)\n\ndef read_drive():\n  # function to read drive info\n  value = subprocess.check_output([\"df\"], shell=True)\n  memory=[]\n  for val in value.split()[DRIVE_USED+\n                           DRIVE_OFFSET:DRIVE_FREE+\n                           DRIVE_OFFSET+1]:\n    memory.append(int(val))\n  return(memory)\n\nclass device:\n  # Constructor:\n  def __init__(self,addr=0):\n    self.NAME=DATANAME\n\n  def getName(self):\n    return self.NAME\n\n  def getNew(self):\n    data=[]\n    data.append(read_loadavg())\n    data.append(read_systemp())\n    data.append(read_cpu())\n    data.append(read_rnd())\n    memory_ram = read_mem()\n    data.append(memory_ram[MEM_TOTAL])\n    data.append(memory_ram[MEM_USED])\n    data.append(memory_ram[MEM_FREE])\n    memory_drive = read_drive()\n    data.append(memory_drive[DRIVE_USED])\n    data.append(memory_drive[DRIVE_FREE])\n    return data\n\ndef main():\n  LOCAL = device()\n  print (str(LOCAL.getName()))\n  for i in range(10):\n    dataValues = LOCAL.getNew()\n    print (str(dataValues))\n    time.sleep(1)\n\nif __name__=='__main__':\n  main()\n#End\n```", "```py\n    cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq\n\n    ```", "```py\n    awk '{print $1}' /proc/loadavg\n\n    ```", "```py\n    cat /sys/class/thermal/thermal_zone0/temp\n\n    ```", "```py\n    df\n\n    ```", "```py\n    free\n\n    ```", "```py\nsudo apt-get install tk-dev python3-tk libpng-dev\nsudo pip-3.2 install numpy\nsudo pip-3.2 install matplotlib\n\n```", "```py\nimport matplotlib\n\n```", "```py\nImportError: No module named matplotlib\n\n```", "```py\n    sudo apt-get install tk-dev python3-tk python3-dev libpng-dev\n    sudo pip-3.2 install numpy\n    sudo pip-3.2 install matplotlib\n\n    ```", "```py\n    wget https://github.com/matplotlib/matplotlib/archive/master.zip\n\n    ```", "```py\n    unzip master.zip\n    rm master.zip\n    cd matplotlib-master\n\n    ```", "```py\n    sudo python3 setup.py build\n    sudo python3 setup.py install\n\n    ```", "```py\n    #!/usr/bin/python3\n    #log_adc.c\n    import time\n    import datetime\n    import data_adc as dataDevice\n\n    DEBUG=True\n    FILE=True\n    VAL0=0;VAL1=1;VAL2=2;VAL3=3 #Set data order\n    FORMATHEADER = \"\\t%s\\t%s\\t%s\\t%s\\t%s\"\n    FORMATBODY = \"%d\\t%s\\t%f\\t%f\\t%f\\t%f\"\n\n    if(FILE):f = open(\"data.log\",'w')\n\n    def timestamp():\n      ts = time.time() \n      return datetime.datetime.fromtimestamp(ts).strftime(\n                                        '%Y-%m-%d %H:%M:%S')\n\n    def main():\n        counter=0\n        myData = dataDevice.device()\n        myDataNames = myData.getName()\n        header = (FORMATHEADER%(\"Time\",\n                            myDataNames[VAL0],myDataNames[VAL1],\n                            myDataNames[VAL2],myDataNames[VAL3]))\n        if(DEBUG):print (header)\n        if(FILE):f.write(header+\"\\n\")\n        while(1):\n          data = myData.getNew()\n          counter+=1\n          body = (FORMATBODY%(counter,timestamp(),\n                            data[0],data[1],data[2],data[3]))\n          if(DEBUG):print (body)\n          if(FILE):f.write(body+\"\\n\")\n          time.sleep(0.1)\n\n    try:\n      main()\n    finally:\n      f.close()\n    #End\n    ```", "```py\n    #!/usr/bin/python3\n    #log_graph.py\n    import numpy as np\n    import matplotlib.pyplot as plt\n\n    filename = \"data.log\"\n    OFFSET=2\n    with open(filename) as f:\n        header = f.readline().split('\\t')\n\n    data = np.genfromtxt(filename, delimiter='\\t', skip_header=1,\n                        names=['sample', 'date', 'DATA0',\n                               'DATA1', 'DATA2', 'DATA3'])\n    fig = plt.figure(1)\n    ax1 = fig.add_subplot(211)#numrows, numcols, fignum\n    ax2 = fig.add_subplot(212)\n    ax1.plot(data['sample'],data['DATA0'],'r',\n             label=header[OFFSET+0])\n    ax2.plot(data['sample'],data['DATA1'],'b',\n             label=header[OFFSET+1])\n    ax1.set_title(\"ADC Samples\")    \n    ax1.set_xlabel('Samples')\n    ax1.set_ylabel('Reading')\n    ax2.set_xlabel('Samples')\n    ax2.set_ylabel('Reading')\n\n    leg1 = ax1.legend()\n    leg2 = ax2.legend()\n\n    plt.show()\n    #End\n    ```", "```py\n#!/usr/bin/python3\n#live_graph.py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport data_local as dataDevice\n\nPADDING=5\nmyData = dataDevice.device()\ndispdata = []\ntimeplot=0\nfig, ax = plt.subplots()\nline, = ax.plot(dispdata)\n\ndef update(data):\n  global dispdata,timeplot\n  timeplot+=1\n  dispdata.append(data)\n  ax.set_xlim(0, timeplot)\n  ymin = min(dispdata)-PADDING\n  ymax = max(dispdata)+PADDING\n  ax.set_ylim(ymin, ymax)\n  line.set_data(range(timeplot),dispdata)\n  return line\n\ndef data_gen():\n  while True:\n    yield myData.getNew()[1]/1000\n\nani = animation.FuncAnimation(fig, update, \n                              data_gen, interval=1000)\nplt.show()\n#End\n```", "```py\nyield myData.getNew()[1]/1000\n\n```", "```py\n  def linearCal(realVal1,readVal1,realVal2,readVal2):\n    #y=Ax+C\n    A = (realVal1-realVal2)/(readVal1-readVal2)\n    C = realVal1-(readVal1*A)\n    cal = (A,C)\n    return cal\n```", "```py\n  def calValue(readVal,cal = [1,0]):\n    realVal = (readVal*cal[0])+cal[1]\n    return realVal\n```", "```py\n    #!/usr/bin/python3\n    #lcd_i2c.py\n    import wiringpi2\n    import time\n    import datetime\n    import data_local as dataDevice\n\n    AF_BASE=100\n    AF_E=AF_BASE+13;     AF_RW=AF_BASE+14;   AF_RS=AF_BASE+15\n    AF_DB4=AF_BASE+12;   AF_DB5=AF_BASE+11;  AF_DB6=AF_BASE+10\n    AF_DB7=AF_BASE+9\n\n    AF_SELECT=AF_BASE+0; AF_RIGHT=AF_BASE+1; AF_DOWN=AF_BASE+2\n    AF_UP=AF_BASE+3;     AF_LEFT=AF_BASE+4;  AF_BACK=AF_BASE+5\n\n    AF_GREEN=AF_BASE+6;  AF_BLUE=AF_BASE+7;  AF_RED=AF_BASE+8\n    BNK=\" \"*16 #16 spaces\n\n    def gpiosetup():\n      global lcd\n      wiringpi2.wiringPiSetup()\n      wiringpi2.mcp23017Setup(AF_BASE,0x20)\n      wiringpi2.pinMode(AF_RIGHT,0)\n      wiringpi2.pinMode(AF_LEFT,0)\n      wiringpi2.pinMode(AF_SELECT,0)\n      wiringpi2.pinMode(AF_RW,1)\n      wiringpi2.digitalWrite(AF_RW,0)\n      lcd=wiringpi2.lcdInit(2,16,4,AF_RS,AF_E,\n                            AF_DB4,AF_DB5,AF_DB6,AF_DB7,0,0,0,0)\n\n    def printLCD(line0=\"\",line1=\"\"):\n      wiringpi2.lcdPosition(lcd,0,0)\n      wiringpi2.lcdPrintf(lcd,line0+BNK)\n      wiringpi2.lcdPosition(lcd,0,1)\n      wiringpi2.lcdPrintf(lcd,line1+BNK)\n\n    def checkBtn(idx,size):\n      global run\n      if wiringpi2.digitalRead(AF_LEFT):\n        idx-=1\n        printLCD()\n      elif wiringpi2.digitalRead(AF_RIGHT):\n        idx+=1\n        printLCD()\n      if wiringpi2.digitalRead(AF_SELECT):\n        printLCD(\"Exit Display\")\n        run=False\n      return idx%size\n\n    def main():\n      global run\n      gpiosetup()\n      myData = dataDevice.device()\n      myDataNames = myData.getName()\n      run=True\n      index=0\n      while(run):\n        data = myData.getNew()\n        printLCD(myDataNames[index],str(data[index]))\n        time.sleep(0.2)\n        index = checkBtn(index,len(myDataNames))\n\n    main()\n    #End\n    ```", "```py\n    sudo python3 lcd_i2c.py\n\n    ```", "```py\nwiringpi2.wiringPiSetup()\nwiringpi2.mcp23017Setup(AF_BASE,0x20)\n\n```", "```py\nwiringpi.wiringPiSetupPhys()\n\n```", "```py\n   ##            Timestamp  0:Light  1:Temperature   2:External  3:Potentiometer\n    0 2015-06-16 21:30:51      225            212          122              216\n    1  2015-06-16 21:30:52      225            212          148              216\n    2  2015-06-16 21:30:53      225            212          113              216\n    3  2015-06-16 21:30:54      225            212          137              216\n    4  2015-06-16 21:30:55      225            212          142              216\n    5  2015-06-16 21:30:56      225            212          115              216\n    6  2015-06-16 21:30:57      225            212          149              216\n    7  2015-06-16 21:30:58      225            212          128              216\n    8  2015-06-16 21:30:59      225            212          123              216\n    9  2015-06-16 21:31:02      225            212          147              216 \n```", "```py\nsudo apt-get install sqlite3\n\n```", "```py\nsqlite3 test.db\nSQLite version 3.7.13 2012-06-11 02:05:22\nEnter \".help\" for instructions\nEnter SQL statements terminated with a \";\"\nsqlite>\n\n```", "```py\nCREATE TABLE mytable (info TEXT, info2 TEXT,);\nINSERT INTO mytable VALUES (\"John\",\"Smith\");\nINSERT INTO mytable VALUES (\"Mary\",\"Jane\");\nJohn|Smith\nMary|Jane\nDROP TABLE mytable;\n.exit\n\n```", "```py\n#!/usr/bin/python3\n#mysql_adc.py\nimport sqlite3\nimport datetime\nimport data_adc as dataDevice\nimport time\nimport os\n\nDEBUG=True\nSHOWSQL=True\nCLEARDATA=False\nVAL0=0;VAL1=1;VAL2=2;VAL3=3 #Set data order\nFORMATBODY=\"%5s %8s %14s %12s %16s\"\nFORMATLIST=\"%5s %12s %10s %16s %7s\"\nDATEBASE_DIR=\"/var/databases/datasite/\"\nDATEBASE=DATEBASE_DIR+\"mydatabase.db\"\nTABLE=\"recordeddata\"\nDELAY=1 #approximate seconds between samples\n\ndef captureSamples(cursor):\n    if(CLEARDATA):cursor.execute(\"DELETE FROM %s\" %(TABLE))\n    myData = dataDevice.device()\n    myDataNames=myData.getName()\n\n    if(DEBUG):print(FORMATBODY%(\"##\",myDataNames[VAL0],\n                                myDataNames[VAL1],myDataNames[VAL2],\n                                myDataNames[VAL3]))\n    for x in range(10):\n        data=myData.getNew()\n        for i,dataName in enumerate(myDataNames):\n            sqlquery = \"INSERT INTO %s (itm_name, itm_value) \" %(TABLE) + \\\n                       \"VALUES('%s', %s)\" \\\n                        %(str(dataName),str(data[i]))\n            if (SHOWSQL):print(sqlquery)\n            cursor.execute(sqlquery)\n\n        if(DEBUG):print(FORMATBODY%(x,\n                                    data[VAL0],data[VAL1],\n                                    data[VAL2],data[VAL3]))\n        time.sleep(DELAY)\n    cursor.commit()\n\ndef displayAll(connect):\n    sqlquery=\"SELECT * FROM %s\" %(TABLE)\n    if (SHOWSQL):print(sqlquery)\n    cursor = connect.execute (sqlquery)\n    print(FORMATLIST%(\"\",\"Date\",\"Time\",\"Name\",\"Value\"))\n\n    for x,column in enumerate(cursor.fetchall()):\n       print(FORMATLIST%(x,str(column[0]),str(column[1]),\n                         str(column[2]),str(column[3])))\n\ndef createTable(cursor):\n    print(\"Create a new table: %s\" %(TABLE))\n    sqlquery=\"CREATE TABLE %s (\" %(TABLE) + \\\n             \"itm_date DEFAULT (date('now','localtime')), \" + \\\n             \"itm_time DEFAULT (time('now','localtime')), \" + \\\n             \"itm_name, itm_value)\" \n    if (SHOWSQL):print(sqlquery)\n    cursor.execute(sqlquery)\n    cursor.commit()\n\ndef openTable(cursor):\n    try:\n        displayAll(cursor)\n    except sqlite3.OperationalError:\n        print(\"Table does not exist in database\")\n        createTable(cursor)\n    finally:\n        captureSamples(cursor)\n        displayAll(cursor)\n\ntry:\n    if not os.path.exists(DATEBASE_DIR):\n        os.makedirs(DATEBASE_DIR)\n    connection = sqlite3.connect(DATEBASE)\n    try:\n        openTable(connection)\n    finally:\n        connection.close()\nexcept sqlite3.OperationalError:\n    print(\"Unable to open Database\")\nfinally:\n    print(\"Done\")\n\n#End\n```", "```py\nimport data_local as dataDevice\n\n```", "```py\nCREATE TABLE recordeddata\n(\n    itm_date DEFAULT (date('now','localtime')),\n    itm_time DEFAULT (time('now','localtime')),\n    itm_name,\n    itm_value\n)\n```", "```py\nINSERT INTO recordeddata\n    (itm_name, itm_value) VALUES ('0:Light', 210)\n```", "```py\n SELECT * FROM recordeddata\n```", "```py\n    for x,column in enumerate(cursor.fetchall()):\n       print(FORMATLIST%(x,str(column[0]),str(column[1]),\n                         str(column[2]),str(column[3])))\n```", "```py\nCREATE, INSERT, SELECT, WHERE, UPDATE, SET, DELETE, and DROP\n```", "```py\nCREATE TABLE table_name (\n    column_name1 TEXT, \n    column_name2 INTEGER DEFAULT 0,\n    column_name3 REAL )\n```", "```py\nINSERT INTO table_name (column_name1name1, column_name2name2, column_name3)name3)\n    VALUES ('Terry'Terry Pratchett', 6666, 27.082015)082015)\n```", "```py\nSELECT column_name1, column_name2 FROM table_name\n```", "```py\nSELECT * FROM table_name\n```", "```py\nSELECT * FROM table_name\n    WHERE column_name1= 'Terry Pratchett'\n```", "```py\nUPDATE table_name\n    SET column_name2=49name2=49,column_name3=30name3=30.111997\n    WHERE column_name1name1= 'Douglas Adams'Adams';\n```", "```py\nDELETE FROM table_name\n    WHERE columncolumn_name2=9999\n```", "```py\nDROP table_name\n\n```", "```py\nsudo apt-get update\nsudo aptitude install apache2 php5 php5-sqlite\n\n```", "```py\nsudo nano /var/www/index.html\n\n```", "```py\n<h1>It works!</h1>\n```", "```py\nstartx\n\n```", "```py\n<?php\nphpinfo();\n?>;\n```", "```py\nsudo nano /var/www/show_data_lite.php\n\n```", "```py\n<head>\n<title>DatabaseDatabase Data</title>\n<meta http-equiv=\"refresh\" content=\"10\" >\n</head>\n<body>\n\nPress button to remove the table data\n<br>\n<input type=\"button\" onclick=\"location.href = 'del_data_lite.php';\" value=\"Delete\">\n<br><br>\n<b>Recorded Data</b><br>\n<?php\n$db = new PDO(\"sqlite:/var/databases/datasitedatasite/mydatabase.db\");\n//SQL query\n$strSQL = \"SELECT * FROM recordeddatarecordeddata WHERE itmitm_name LIKE '%'%temp%'\";\n//Excute the query\n$response = $db->query($strSQL);\n//Loop through the response\nwhile($column = $response->fetch())\n{\n   //Display the content of the response\n   echo $column[0] . \" \";\n   echo $column[1] . \" \";\n   echo $column[2] . \" \";\n   echo $column[3] . \"<br />\";\n}\n?>\nDone\n</body>\n</html>\n```", "```py\nsudo nano /var/www/del_data_lite.php\n<html>\n<body>\n\nRemove all the data in the table.\n<br>\n<?php\n$db = new PDO(\"sqlite:/var/databases/datasitedatasite/mydatabase.db\");\n//SQL query\n$strSQL = \"DROPDROP TABLErecordeddata recordeddata\";\n//ExecuteExecute the query\n$response = $db->query($strSQL);\n\nif ($response == 1)\n{\n echo \"Result: DELETED DATA\";\n}\nelse\n{\n echo \"Error: Ensure table exists and database directory is owned by www-data\";\n}\n?>\n<br><br>\nPress button to return to data display.\n<br>\n<input type=\"button\" onclick=\"location.href = 'show'show_data_lite.php';\" value=\"Return\">\n\n</body>\n</html>\n\n```", "```py\nsudo chown www-data /var/databases/datasite -R\n\n```", "```py\nhttp://localhost/showshow_data_lite.php\n```", "```py\nhttp://192.168.1.101/showshow_data_lite.php\n```", "```py\n<meta http-equiv=\"refresh\" content=\"0; URL='show_data_lite.php' \" />\n```", "```py\n<meta http-equiv=\"refresh\" content=\"10\" >\n```", "```py\n<input type=\"button\" onclick=\"location.href = 'del_data_lite.php';\" value=\"Delete\">\n```", "```py\n$db = new PDO(\"sqlite:/var/databases/testsite/mydatabase.db\");\n```", "```py\nSELECT * FROM recordeddatarecordeddata WHERE itm_namename LIKE '%temp%''\n\n```", "```py\n$response = $db->query($strSQL);\nAllowing us to use fetch() (like we used cursor.fetchall() previously) to list all the data columns in each of the data entries within the response.\nwhile($column = $response->fetch())\n{\n   //Display the content of the response\n   echo $column[0] . \" \";\n   echo $column[1] . \" \";\n   echo $column[2] . \" \";\n   echo $column[3] . \"<br />\";\n}\n?>\n```", "```py\nDROP TABLE recordeddata\n```", "```py\nJohn; DELETE FROM Orders\n\n```", "```py\nSELECT * FROM Users WHERE UserName = John; DELETE FROM CurrentOrders\n\n```", "```py\nsqlquery = \"INSERT INTO %s (itm_name, itm_value) VALUES(?, ?)\" %(TABLE)\ncursor.execute(sqlquery, (str(dataName), str(data[i]))\n```", "```py\n    API_KEY = CcRxJbP5TuHp1PiOGVrN2kTGeXVsb6QZRJU236v6PjOdtzze\n    ```", "```py\n    FEED_ID = 399948883\n    ```", "```py\nsudo pip-3.2 install xively-python\n\n```", "```py\nSuccessfully installed xively-python requests\n\n```", "```py\n#!/usr/bin/env python3\n#xivelylog.py\nimport xively\nimport time\nimport datetime\nimport requests\nfrom random import randint\nimport data_local as dataDevice\n\n# Set the FEED_ID and API_KEY from your account\nFEED_ID = 399948883\nAPI_KEY = \"CcRxJbP5TuHp1PiOGVrN2kTGeXVsb6QZRJU236v6PjOdtzze\"\napi = xively.XivelyAPIClient(API_KEY) # initialize api client\nDEBUG=True\n\nmyData = dataDevice.device()\nmyDataNames=myData.getName()\n\ndef get_datastream(feed,name,tags):\n  try:\n    datastream = feed.datastreams.get(name)\n    if DEBUG:print (\"Found existing datastream\")\n    return datastream\n  except:\n    if DEBUG:print (\"Creating new datastream\")\n    datastream = feed.datastreams.create(name, tags=tags)\n    return datastream\n\ndef run():\n  print (\"Connecting to Xively\")\n  feed = api.feeds.get(FEED_ID)\n  if DEBUG:print (\"Got feed\" + str(feed))\n  datastreams=[]\n  for dataName in myDataNames:\n    dstream = get_datastream(feed,dataName,dataName)\n    if DEBUG:print (\"Got %s datastream:%s\"%(dataName,dstream))\n    datastreams.append(dstream)\n\n  while True:\n    data=myData.getNew()\n    for idx,dataValue in enumerate(data):\n      if DEBUG:\n        print (\"Updating %s: %s\" % (dataName,dataValue))\n      datastreams[idx].current_value = dataValue\n      datastreams[idx].at = datetime.datetime.utcnow()\n    try:\n      for ds in datastreams:\n        ds.update()\n    except requests.HTTPError as e:\n      print (\"HTTPError({0}): {1}\".format(e.errno, e.strerror))\n    time.sleep(60)\n\nrun()\n#End\n```"]