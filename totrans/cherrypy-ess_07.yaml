- en: Chapter 7. The Presentation Layer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。表示层
- en: Until now, we have developed our application from a server-side point of view.
    In this chapter, we will start focusing on the client side of the photoblog. Initially,
    we will introduce HTML templating via the `Kid` Python engine and JavaScript via
    the Mochikit library. We will present briefly a few important components of the
    success of the Web such as HTML, XHTML, and CSS. However, these sections do not
    aim at explaining each of them deeply, as this is out of the scope of this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已从服务器端的角度开发我们的应用程序。在本章中，我们将开始关注照片博客的客户端。最初，我们将通过 `Kid` Python 引擎介绍 HTML
    模板，并通过 Mochikit 库介绍 JavaScript。我们将简要介绍 Web 成功的一些重要组件，如 HTML、XHTML 和 CSS。然而，这些部分并不旨在深入解释每个部分，因为这超出了本书的范围。
- en: HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML
- en: Although in our previous chapter, we introduced the separation of concerns between
    layers within our application, we need to keep in mind that our primary target
    is Internet browsers, so we will focus on HTML rendering.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在我们上一章中，我们介绍了应用程序中各层之间的关注点分离，但我们需要记住，我们的主要目标是互联网浏览器，因此我们将专注于 HTML 渲染。
- en: '**HTML** (**HyperText Markup Language**), used right from the beginning of
    the Web as defined by Tim Berners-Lee in the early 1990s, is a light version of
    **SGML** (**Standard Generalized Markup Language**) keeping only simple elements
    that are useful for the Web. Due to the quick growth of the Web, further development
    was achieved on HTML to improve it. Eventually HTML 4.0 was officially specified
    in 1997 by the W3C with an update in 1999 leading to HTML 4.01, which is still
    as of today the official version to use.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML**（**超文本标记语言**），由蒂姆·伯纳斯-李在 20 世纪 90 年代初定义，是 **SGML**（**标准通用标记语言**）的轻量级版本，仅保留了
    Web 有用的简单元素。由于 Web 的快速增长，HTML 进一步发展以改进它。最终，W3C 在 1997 年正式指定了 HTML 4.0，1999 年的更新导致了
    HTML 4.01，至今仍然是官方版本。'
- en: 'Example of an HTML 4.01 document:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 4.01 文档的示例：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first line of the document states the DOCTYPE declaration, specifying which
    variant of a format a document follows. DOCTYPEs are specified in DTDs (Document
    Type Definitions).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的第一行声明了 DOCTYPE 声明，指定了文档遵循的格式变体。DOCTYPEs 在 DTDs（文档类型定义）中指定。
- en: XML
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML
- en: 'In 1996, W3C started to work on **XML** (**Extensible Markup Language**), a
    generic simpler markup language derived from SGML keeping its power while avoiding
    its complexity. In the context of the Web, the goal of XML is aimed at solving
    a few limitations of HTML, such as the lack of:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1996 年，W3C 开始着手于 **XML**（**可扩展标记语言**），这是一种从 SGML 派生出来的通用简单标记语言，它保留了 SGML 的强大功能，同时避免了其复杂性。在
    Web 的背景下，XML 的目标是解决 HTML 的几个限制，例如缺乏：
- en: '**Extensibility:** HTML did not allow new elements to be added to the language.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：HTML 不允许向语言中添加新元素。'
- en: '**Validation:** HTML did not offer a language to validate against the structure
    nor the semantics of a document.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证**：HTML 没有提供一种语言来验证文档的结构或语义。'
- en: '**Structure:** HTML did not allow complex structures.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构**：HTML 不允许复杂的结构。'
- en: XHTML
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XHTML
- en: Due to XML, expressive and flexible work was undertaken by W3C to reformulate
    HTML 4 through XML, leading to specification of XHTML 1.0 in the year 2000.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 XML，W3C 承担了表达性和灵活性的工作，通过 XML 重新定义 HTML 4，从而在 2000 年制定了 XHTML 1.0 规范。
- en: 'XHTML 1.0 has the following features:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: XHTML 1.0 具有以下特点：
- en: User agents that solely understand HTML 4 can render a document, making it backward
    compatible.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅理解 HTML 4 的用户代理可以渲染文档，使其具有向后兼容性。
- en: Publishers can enter the XML world and its richness.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出版商可以进入 XML 世界及其丰富性。
- en: 'Example of an XHTML 1.0 document:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: XHTML 1.0 文档的示例：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this example, we also specify a DOCTYPE declaration informing consumers
    that our document respects the XHTML 1.0 Strict DTD. Since XHTML is an application
    of XML:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们还指定了一个 DOCTYPE 声明，告知消费者我们的文档遵循 XHTML 1.0 Strict DTD。由于 XHTML 是 XML 的应用：
- en: We provide the XML declaration on the very first line to give the XML-consuming
    processor some hints about the document content, such as the fact that it is encoded
    in UTF-8\. Note that it is not compulsory.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在第一行提供了 XML 声明，以便给 XML 消费者处理器一些关于文档内容的提示，例如它使用 UTF-8 编码的事实。请注意，这不是强制性的。
- en: We also explicitly mark the anonymous namespace of that document as the XHTML
    namespace.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还明确地将该文档的匿名命名空间标记为 XHTML 命名空间。
- en: Although the syntax for both the documents is very close, they carry different
    semantics and would be treated differently by user agents. Therefore, both the
    documents have distinct MIME formats. An HTML document should be served using
    the `text/html` MIME content-type, while XHTML documents should be served via
    `application/xhtml+xml`. However, because XHTML 1.0 aims at being backward compatible
    with user agents that do not understand its MIME content-type, it is allowed to
    serve an XHTML 1.0 document respecting specific guidelines as `text/html`. This
    is, however, not recommended and can lead to unexpected rendering that depends
    on how user agents treat the structure of the document; it is often referred as
    *tag-soup*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两个文档的语法非常相似，但它们具有不同的语义，并且会被用户代理以不同的方式处理。因此，这两个文档都有不同的MIME格式。HTML文档应该使用`text/html`
    MIME内容类型提供服务，而XHTML文档应该通过`application/xhtml+xml`提供服务。然而，由于XHTML 1.0旨在与不理解其MIME内容类型的用户代理向后兼容，因此允许按照特定指南将XHTML
    1.0文档作为`text/html`提供服务。然而，这并不推荐，可能会导致意外的渲染，这取决于用户代理如何处理文档的结构；这通常被称为*标签汤*。
- en: For these reasons, serving XHTML can be cumbersome on the Internet and is the
    root of extremely heated discussions. Our photoblog application will therefore
    keep it simple by using HTML.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些原因，在互联网上提供XHTML可能会变得繁琐，并且是极其激烈讨论的根源。因此，我们的照片博客应用将保持简单，使用HTML。
- en: CSS
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS
- en: 'Whether you use HTML or XHTML, both formats only specify the structure and
    the semantics of your pages; they do not inform user agents how they ought to
    render those pages. This is achieved through CSS (Cascading Style Sheets), a language
    to describe rules to apply on elements within a marked up document such as HTML
    or XHTML. A rule is structured as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用HTML还是XHTML，这两种格式都只指定了您页面的结构和语义；它们不告诉用户代理应该如何渲染这些页面。这是通过CSS（层叠样式表）实现的，这是一种描述应用于标记文档（如HTML或XHTML）中元素的规则的编程语言。规则的结构如下：
- en: A *selector* indicates the element on which the rule is to be applied. The selector
    can be precise to target only one specific element within the context of the document
    or applicable to all.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 *选择器* 指定了要应用规则的元素。选择器可以是精确的，仅针对文档上下文中的一个特定元素，也可以是通用的，适用于所有元素。
- en: One or more *attributes* indicate which property of the element is involved.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个 *属性* 指示了元素的哪个属性被涉及。
- en: A *value* or a set of values is associated to each attribute.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个属性都与一个或多个 *值* 或值集相关联。
- en: 'An example applied to the previous HTML example is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个应用于之前HTML示例的例子：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中：
- en: '`body` is the selector.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body`是选择器。'
- en: '`background-color` is the attribute, whose value is `#666633`.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`background-color`是属性，其值为`#666633`。'
- en: 'In the previous example, we have embedded the CSS within the HTML document
    itself. It is advisable to externalize it into its own document and link it from
    the HTML page, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们将CSS嵌入到HTML文档本身中。建议将其外部化到自己的文档中，并从HTML页面链接它，如下所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The CSS file, `style.css`, is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CSS文件，`style.css`，如下所示：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: DHTML
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DHTML
- en: When Tim Berners-Lee imagined the Web, he did so to enable the exchange of documents
    between researchers. Those documents were static and were not generated by the
    web application. In fact, web applications did not exist at that time, only web
    servers that were accepting requests and returning content. Since then, the Web
    has grown much more value and web applications are a reality. Nonetheless, for
    a long time the component achieving the work has been the server itself, the client
    only being required to display the rendered content. Quickly enough however, it
    appeared that providing much fancier interfaces would move the Web one step further
    for it to attract a larger public. The Web should, could, and would be more than
    presenting books or papers on a screen.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当蒂姆·伯纳斯-李想象网络时，他是为了使研究人员之间交换文档成为可能。这些文档是静态的，不是由网络应用生成的。实际上，当时还没有网络应用，只有接受请求并返回内容的网络服务器。从那时起，网络的价值增长了很多，网络应用已经成为现实。尽管如此，长期以来，完成这项工作的组件一直是服务器本身，客户端只需要显示渲染的内容。然而，很快，提供更花哨的界面将使网络向前迈出一大步，以吸引更广泛的公众。网络应该、能够、并且会不仅仅是在屏幕上展示书籍或论文。
- en: 'The term DHTML (Dynamic HTML) was coined to group a set of technologies to
    improve client-side content handling. DHTML encompasses:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 术语DHTML（动态HTML）是为了将一组技术组合在一起，以改善客户端内容处理。DHTML包括：
- en: HTML defining the structure of the document to manipulate
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义文档结构的HTML
- en: CSS to style the web page
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS来样式化网页
- en: JavaScript to dynamically modify the Document Object Model (DOM)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript动态修改文档对象模型（DOM）
- en: A DOM is a memory representation of the (X)HTML document structure built by
    the browser. By using JavaScript functions, it is possible to dynamically modify
    the DOM tree and thus change its rendering from the end-user perspective.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: DOM是浏览器构建的(X)HTML文档结构的内存表示。通过使用JavaScript函数，可以动态修改DOM树，从而从最终用户的角度改变其渲染。
- en: However interesting the idea behind DHTML was, it never really took off due
    to interoperability issues between browser vendors. JavaScript and CSS were not
    implemented equally across navigators making it really hard for web developers
    to ensure their page would act as expected in most cases. Nowadays, DHTML is not
    a common term in the field but its ideas have been kept and improved in newer
    techniques. This has been also possible thanks to a better interoperability between
    browsers, better debugging tools, and the arrival of dedicated JavaScript toolkits
    or frameworks encapsulating browser differences in a common API, as we will see
    later on.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管DHTML背后的想法多么有趣，由于浏览器供应商之间的互操作性问题和JavaScript与CSS在导航器中的不平等实现，它从未真正起飞。这使得网络开发者很难确保他们的页面在大多数情况下能按预期工作。如今，DHTML在领域内不是一个常见的术语，但其思想已被保留并在新技术中得到改进。这也得益于浏览器之间更好的互操作性、更好的调试工具以及专用JavaScript工具包或框架的出现，这些工具包或框架通过公共API封装浏览器差异，正如我们稍后将要看到的。
- en: Templating
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板化
- en: In the previous sections, we have introduced the basic components that constitute
    web pages—HTML or XHTML for the structure and CSS for the style. Generating web
    pages can be as easy as using your favorite text editor and laying it down. However
    in the context of a dynamic application, where the content is based on a given
    context and generated on the fly, you need tools to ease such creation. This is
    achieved through the use of templating engines. A templating engine takes a model
    of the page as well as the input data and then processes both to render the final
    page.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们介绍了构成网页的基本组件——HTML或XHTML用于结构，CSS用于样式。生成网页可能就像使用你喜欢的文本编辑器并将其放置下来一样简单。然而，在动态应用程序的上下文中，内容基于给定的上下文并即时生成，你需要工具来简化这种创建。这是通过使用模板引擎来实现的。模板引擎接受页面的模型以及输入数据，然后处理两者以渲染最终的页面。
- en: 'When searching for a templating engine, you should look for one that offers
    at least some features such as:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当寻找模板引擎时，你应该寻找至少提供以下一些功能的引擎：
- en: 'Variable substitution: In your template, a variable can act as place holder
    for your input.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量替换：在你的模板中，一个变量可以作为输入的占位符。
- en: 'Conditional statements: It is common that a template needs to be rendered with
    slight differences based on the context of the input data.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件语句：通常情况下，模板需要根据输入数据的上下文进行轻微的渲染差异。
- en: 'Looping mechanism: This is obviously mandatory when your template has to render
    a set of data into a table for example.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环机制：当你的模板需要将一组数据渲染到表格中时，这显然是必须的。
- en: 'Extensibility: Templates can often share aspects and diverge in some specific
    contexts, for example common header and footer templates.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性：模板通常可以共享某些方面，并在某些特定上下文中有所不同，例如常见的页眉和页脚模板。
- en: The Python world is anything but short in templating engines, and selecting
    one for your needs will certainly be a matter of taste based on its features as
    well as its syntax. For the purpose of this book, we will use a templating engine
    named `Kid` developed by Ryan Tomayko.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Python世界在模板引擎方面绝不短，选择一个满足你需求的模板引擎将肯定是一个基于其功能和语法口味的个人选择。为了本书的目的，我们将使用由Ryan Tomayko开发的名为`Kid`的模板引擎。
- en: Kid—The Templating Engine
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kid—模板引擎
- en: Now, we will have some description of our `Kid` engine.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将对`Kid`引擎进行一些描述。
- en: Overview
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'Let''s start our introduction to the `Kid` engine by creating a template of
    our previous examples:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建我们之前示例的模板来开始对`Kid`引擎的介绍：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, a template looks very similar to the final expected rendered
    page. When you save this template in a file named `helloworld.kid`, the next step
    is to process the template via the `Kid` engine as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，模板看起来与最终期望渲染的页面非常相似。当你将这个模板保存为名为`helloworld.kid`的文件时，下一步就是通过以下方式通过`Kid`引擎处理模板：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`Kid` provides a `Template` function that requires the name of the template
    to be processed and the input data to be passed on during the rendering of the
    template. When a template is being processed for the first time, `Kid` creates
    a Python module that serves as a cached version of the template for latter use.
    The `kid.Template` function returns an instance of the `Template` class you then
    use to render the output content. To do so, the `Template` class provides the
    following methods:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Kid`提供了一个`Template`函数，该函数需要处理模板的名称以及在渲染模板时传递的输入数据。当模板第一次被处理时，`Kid`创建一个Python模块，作为模板的缓存版本供以后使用。`kid.Template`函数返回一个`Template`类的实例，然后你可以使用该实例来渲染输出内容。为此，`Template`类提供了以下方法：'
- en: '`serialize:` This returns the output content as a Python string.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serialize:` 这返回输出内容作为一个Python字符串。'
- en: '`generate:` This returns the output content as a Python iterator.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate:` 这返回输出内容作为一个Python迭代器。'
- en: '`write:` This dumps the output content into a file object.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`write:` 这将输出内容写入文件对象。'
- en: 'These three methods take the following parameters:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个方法接受以下参数：
- en: '`encoding:` This informs `Kid` how to encode the output content; it defaults
    to UTF-8.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoding:` 这告诉`Kid`如何编码输出内容；默认为UTF-8。'
- en: '`fragment:` This is a Boolean value asking `Kid` to include or not the XML
    prolog or Doctype in the final result.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fragment:` 这是一个布尔值，询问`Kid`是否在最终结果中包含或排除XML序言或Doctype。'
- en: '`output:` This specifies which type of serialization should be used by `Kid`
    to render the content.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output:` 这指定了`Kid`在渲染内容时应使用哪种类型的序列化。'
- en: Kid's Attributes
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Kid`的属性'
- en: 'The attributes of `Kid` are as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`Kid`的属性如下：'
- en: XML-Based Templating Language
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于XML的模板语言
- en: '`Kid` is an XML-based language, which means:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`Kid`是一种基于XML的语言，这意味着：'
- en: A `Kid` template must be a well-formed XML document.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Kid`模板必须是一个有效的XML文档。
- en: '`Kid` uses attributes within XML elements to inform the underlying engine what
    action to follow when reaching an element. To avoid collision with other existing
    attributes within the XML document, `Kid` comes with its own namespace ([http://purl.org/kid/ns#](http://purl.org/kid/ns#)),
    most of the time associated with the `py` prefix, for example:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Kid`使用XML元素内的属性来通知底层引擎在到达元素时应该执行什么操作。为了避免与XML文档中其他现有属性冲突，`Kid`自带一个命名空间([http://purl.org/kid/ns#](http://purl.org/kid/ns#))，通常与`py`前缀相关联，例如：'
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Variable Substitution
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量替换
- en: '`Kid` comes with a very simple variable substitution scheme: `${variable-name}`.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Kid`提供了一个非常简单的变量替换方案：`${variable-name}`。'
- en: This can be used either in attributes of elements or as the text content of
    an element. `Kid` will evaluate the variable each time it comes across it in the
    template.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用于元素的属性或作为元素的文本内容。`Kid`将在模板中每次遇到变量时评估该变量。
- en: If you need to output a literal string such as `${something}`, you can escape
    the variable substitution by doubling the dollar sign such as `$${something}`,
    which will be rendered as `${something}`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要输出一个字面字符串，例如`${something}`，你可以通过将美元符号加倍来转义变量替换，例如`$${something}`，这样它将被渲染为`${something}`。
- en: Conditional Statement
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 条件语句
- en: 'When you need to toggle between different cases in a template, you need to
    use the following syntax:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在模板中需要在不同的案例之间切换时，你需要使用以下语法：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Where:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 位置：
- en: '`tag` is the name of the element, for instance `DIV` or `SPAN`.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tag`是元素的名字，例如`DIV`或`SPAN`。'
- en: '`expression` is a Python expression. If as a Boolean it evaluates to `True`
    the element will be included in the output content. Otherwise, the element will
    not be part of it.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expression`是一个Python表达式。如果作为一个布尔值评估为`True`，则该元素将被包含在输出内容中。否则，该元素将不包含在内。'
- en: Looping Mechanism
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环机制
- en: 'To tell `Kid` to loop on an element, you must use the following syntax:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉`Kid`在元素上循环，你必须使用以下语法：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Where:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 位置：
- en: '`tag` is the name of the element.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tag`是元素的名字。'
- en: '`expression` is a Python expression, for example `for value in [...]`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expression`是一个Python表达式，例如`for value in [...]`。'
- en: 'The looping mechanism is as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 循环机制如下：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Extensibility
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可扩展性
- en: 'Extending a template is done using the following syntax:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下语法扩展模板：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Where:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 位置：
- en: '`tag` is the name of the element. In this specific case however, the element
    can only be the root element of the current template.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tag`是元素的名字。然而，在这个特定情况下，元素只能是当前模板的根元素。'
- en: '`templates` is a comma-separated list of `Kid` template filenames or instances.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates`是一个以逗号分隔的`Kid`模板文件名或实例列表。'
- en: First, define a `Kid` template named `common.kid:`
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，定义一个名为`common.kid:`的`Kid`模板。
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, modify the template of the previous example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，修改前一个示例的模板：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When `Kid` processes that template, it will first compile the `common.kid` template.
    When `Kid` meets the`<this-is-ed />` element, it will understand that it matches
    the head element of the `common.kid` template, and will replace its content.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `Kid` 处理该模板时，它将首先编译 `common.kid` 模板。当 `Kid` 遇到 `<this-is-ed />` 元素时，它将理解这匹配
    `common.kid` 模板的头部元素，并将替换其内容。
- en: Other Attributes
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他属性
- en: '`Kid` comes with more attributes to the basic ones we have reviewed before:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`Kid` 除了我们之前审查的基本属性外，还提供了更多属性：'
- en: '`py:content="expression":` The descendant of the element using this attribute
    will be replaced by the output content of the expression.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py:content="expression":` 使用此属性的元素的子代将被替换为表达式的输出内容。'
- en: '`py:strip="expression":` If the expression evaluates to `True`, the containing
    element will not be present in the result but its descendants will be there. If
    the expression evaluates to `False`, the processing goes as normal.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py:strip="expression":` 如果表达式评估为 `True`，则包含的元素将不会出现在结果中，但其后代将存在。如果表达式评估为 `False`，则处理过程正常进行。'
- en: '`py:replace="expression":` This is a shortcut for `py:content="expression"
    py:strip="True"`.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py:replace="expression":` 这是 `py:content="expression" py:strip="True"` 的快捷方式。'
- en: '`py:attrs="expression":` This allows dynamic insertion of new attributes into
    the element.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py:attrs="expression":` 这允许动态向元素中插入新属性。'
- en: '`py:def="template_name(args)":` This allows creation of a temporary template
    that can be referenced elsewhere in the main template.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py:def="template_name(args)":` 这允许创建一个可以在主模板的其他地方引用的临时模板。'
- en: You can get more information by navigating to the official `Kid` documentation
    available at [http://kid-templating.org/](http://kid-templating.org/).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问官方的 `Kid` 文档来获取更多信息，文档地址为 [http://kid-templating.org/](http://kid-templating.org/).
- en: Photoblog Design Preparation
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 照片博客设计准备
- en: In the previous sections, we have introduced tools that we will use to create
    our application interface. In the following sections, we will create the base
    of that interface.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们介绍了我们将用于创建应用程序界面的工具。在接下来的章节中，我们将创建该界面的基础。
- en: Targetting the User Agent
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位用户代理
- en: Considering the fact that the photoblog application is centered on the images
    to be displayed, we will disregard user agents not supporting that feature. The
    application will also heavily use client-side code through JavaScript. Thus, we
    will solely focus on the modern browser engines supporting it.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到照片博客应用程序以要显示的图像为中心，我们将忽略不支持该特性的用户代理。应用程序还将大量使用客户端代码，通过 JavaScript 实现。因此，我们将仅关注支持它的现代浏览器引擎。
- en: 'Here is a brief list of our principal targets:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个我们主要目标的简要列表：
- en: '| Engine | Browsers Targeted |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 引擎 | 目标浏览器 |'
- en: '| --- | --- |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Gecko | Mozilla Firefox 1.5 and above, Netscape 8 |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| Gecko | Mozilla Firefox 1.5 及以上版本，Netscape 8 |'
- en: '| MSHTML | Internet Explorer 6 SP1 and above |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| MSHTML | Internet Explorer 6 SP1 及以上版本 |'
- en: '| KHTML (and WebKit) | Konqueror, Safari |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| KHTML（及 WebKit）| Konqueror，Safari |'
- en: '| Presto | Opera 9 and above |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| Presto | Opera 9 及以上版本 |'
- en: Tools
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具
- en: 'For this application you will need:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此应用程序，您需要：
- en: A text editor; your favorite text editor will do.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本编辑器；您喜欢的文本编辑器即可。
- en: 'A browser providing development tools; Mozilla Firefox with the following extensions
    would be a good choice:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供开发工具的浏览器；使用以下扩展的 Mozilla Firefox 将是一个不错的选择：
- en: Web developer or Firebug
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页开发者或 Firebug
- en: LiveHTTPHeader or Tamper Data. Alternatively, CherryPy provides the `log_headers`
    tool, which when enabled in the global settings of CherryPy will log the request
    headers on the server allowing an easy debugging per request.
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: LiveHTTPHeader 或 Tamper Data。或者，CherryPy 提供了 `log_headers` 工具，当在 CherryPy 的全局设置中启用时，它将在服务器上记录请求头，从而允许按请求轻松调试。
- en: DOM inspector
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM 检查器
- en: JavaScript debugger
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 调试器
- en: Moreover, although we will be doing most of our development using one specific
    browser, it is recommended to test it regularly using as many browsers as you
    can.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，尽管我们将使用一个特定的浏览器进行大部分开发，但建议您尽可能多地使用各种浏览器定期进行测试。
- en: Global Design Goals
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全球设计目标
- en: 'As we said, the photoblog application is focused on images. With this in mind,
    we will draw a globally designed interface, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，照片博客应用程序专注于图像。考虑到这一点，我们将绘制一个全局设计的界面，如下所示：
- en: '![Global Design Goals](img/1848_07_01.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![全球设计目标](img/1848_07_01.jpg)'
- en: As you can see, our default design will not have the fanciest look but it provides
    us with the basic structure for a blog that we are looking for, to explore web
    design.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的默认设计可能看起来并不华丽，但它为我们提供了一个我们寻找的博客的基本结构，以便探索网页设计。
- en: The topmost area will be our header. This is where you will put the catchy name
    of your blog. Right under it we will have the navigation menu with a few links
    to move through the base areas of the blog. Then we will have the content area
    where we will only display by default photography. It means that by default no
    text will be displayed and it will require user interaction to reveal it. This
    ensures that the focus stays on the photography. However, the content area will
    stretch as requested, when it has to display text content. Finally, there is a
    footer area containing information about the copyrights of the content of this
    blog.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最顶部区域将是我们的页眉。这是您放置博客吸引人的名称的地方。在其下方，我们将有一个导航菜单，包含一些链接，用于浏览博客的基本区域。然后我们将有内容区域，其中默认只显示摄影作品。这意味着默认情况下不会显示任何文本，并且需要用户交互来揭示它。这确保了焦点始终在摄影上。然而，当需要显示文本内容时，内容区域将根据请求进行扩展。最后，有一个包含有关本博客内容版权信息的页脚区域。
- en: Design Directory Layout
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计目录布局
- en: 'The design that we will use for the photoblog application will reside in the
    following directory structure:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为照片博客应用程序使用的布局将位于以下目录结构中：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We will name this design *default*, as it will be the one shipped with the application
    and used by default during the first access to the application.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个设计命名为*default*，因为它将是与应用程序一起提供的，并在第一次访问应用程序时默认使用。
- en: You will note that the `js` directory is empty in spite of intensive use of
    JavaScript. The reason is that we will define a global static directory of files
    that might be shared by different templates, which could be the case with all
    the JavaScript files we will create.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，尽管大量使用了JavaScript，但`js`目录却是空的。原因是我们将定义一个全局静态文件目录，这些文件可能被不同的模板共享，例如我们创建的所有JavaScript文件。
- en: CherryPy—Encapsulating the Template Rendering Process
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CherryPy—封装模板渲染过程
- en: 'CherryPy handlers could well be fine calling `Kid` themselves and returning
    the serialized output of a template but we will not do it that way. Instead, we
    will encapsulate `Kid` into a CherryPy tool that our handlers will call. There
    are two reasons for such a decision:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy处理器完全可以自己调用`Kid`并返回模板的序列化输出，但我们不会这样做。相反，我们将把`Kid`封装成一个CherryPy工具，我们的处理器将调用它。做出这个决定有两个原因：
- en: To allow you to switch from `Kid` to a different templating engine. Imagine
    that you prefer the `Cheetah` templating engine to `Kid`. You could write a template
    with `Cheetah` and only modify the tool without having to go through the entire
    application.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了让您能够从`Kid`切换到不同的模板引擎。想象一下，您更喜欢`Cheetah`模板引擎而不是`Kid`。您可以使用`Cheetah`编写模板，只需修改工具，而无需对整个应用程序进行修改。
- en: To ease the maintenance. If `Kid` evolves and changes its syntax, it will be
    easier to update just the tool rather than the entire application.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了便于维护。如果`Kid`发展并改变其语法，只需更新工具而不是整个应用程序，这将更容易。
- en: 'The tool named `Design` is attached to the default CherryPy toolbox:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 命名为`Design`的工具附加到默认的CherryPy工具箱中：
- en: '[PRE15]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then we will use the tool like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将像这样使用该工具：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: A page handler using that tool will be required to return a Python dictionary
    containing values to be passed to the templating engine and expected by the template.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该工具的页面处理器需要返回一个Python字典，其中包含传递给模板引擎并期望由模板接收的值。
- en: Note also that the tool expects a `path` parameter that will not be passed to
    the decorator call itself. That `path` represents the absolute base path of the
    folder containing a design directory and in our example `path` would be the `default`
    directory that we have already defined. We will set this value once in a configuration
    file that will be attached to the CherryPy application. We will see more details
    about this in[Chapter 10](ch10.html "Chapter 10. Deployment").
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，该工具期望一个`path`参数，该参数本身不会传递给装饰器调用。这个`path`代表包含设计目录的文件夹的绝对基本路径，在我们的例子中`path`将是已经定义的`default`目录。我们将在配置文件中设置这个值一次，该配置文件将附加到CherryPy应用程序中。我们将在第10章中看到更多关于这个的细节[Chapter
    10](ch10.html "第10章。部署")。
- en: Note
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Christian Wyglendowski is the maintainer of a project called Buffet that aims
    at providing the core feature demonstrated in the mentioned tool. It supports
    many templating languages and offers an extended API. However, it currently supports
    solely CherryPy 2 and therefore it is not used in this chapter. CherryPy 3 support
    is planned and will certainly be available soon.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 克里斯蒂安·维格伦多夫斯基是名为Buffet的项目维护者，该项目旨在提供在提到的工具中展示的核心功能。它支持许多模板语言，并提供扩展的API。然而，它目前仅支持CherryPy
    2，因此在本章中未使用。CherryPy 3支持计划中，并将很快可用。
- en: Photoblog Design in Detail
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 照片博客设计细节
- en: Now, we will have a look at the basic structure of our photoblog design.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看我们照片博客设计的基本结构。
- en: Basic Structure
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本结构
- en: 'Our first step is to define the HTML structure of the page:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是定义页面的HTML结构：
- en: '[PRE17]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This template, which we will name `index.kid`, extends the template `common.kid`.
    It looks as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板，我们将命名为`index.kid`，扩展了`common.kid`模板。它看起来如下：
- en: '[PRE18]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `head` element of the `index.kid` template will be replaced by that of the
    `Kid` template named `common.kid`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.kid`模板的`head`元素将被名为`common.kid`的`Kid`模板的`head`元素替换。'
- en: 'We will process that template as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按以下方式处理该模板：
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now if you navigate to [http://localhost:8080/](http://localhost:8080/), it
    should look as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你导航到[http://localhost:8080/](http://localhost:8080/)，它应该看起来如下：
- en: '![Basic Structure](img/1848_07_02.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![基本结构](img/1848_07_02.jpg)'
- en: 'The next step is to add the CSS stylesheet by modifying the `common.kid` template:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是添加CSS样式表，通过修改`common.kid`模板来实现：
- en: '[PRE20]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we define the CSS as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义CSS如下：
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, if you reload the page, you should see something like this:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你重新加载页面，你应该看到如下内容：
- en: '![Basic Structure](img/1848_07_03.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![基本结构](img/1848_07_03.jpg)'
- en: 'We now have the main page of our photoblog application. The following configurations
    will make us understand how we will handle the other pages of our application:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了我们照片博客应用的主页。以下配置将使我们了解我们将如何处理我们应用的其他页面：
- en: 'One `Kid` template per page: In this configuration, each time a link is followed
    or a form is submitted to the application, a new page will be constructed on the
    server from its template and will be sent back to the browser.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个页面一个`Kid`模板：在这种配置中，每次跟随链接或向应用提交表单时，服务器将从其模板构建一个新的页面，并将其发送回浏览器。
- en: 'Advantage: It is easy for the web designer who can now edit every page.'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：对于网页设计师来说很容易，现在可以编辑每个页面。
- en: 'Drawback: It feels less dynamic from the end-user point of view. It feels as
    if the navigation is done *per page*.'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：从最终用户的角度来看，它感觉不太动态。感觉导航是按“页面”进行的。
- en: 'One or two templates and a bunch of JavaScript files: In this case, only one
    page would be sent to the browser but it will contain enough information for the
    browser to generate and insert blocks of content depending on the context and
    end-user interaction.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一到两个模板和一些JavaScript文件：在这种情况下，只会向浏览器发送一个页面，但它将包含足够的信息，让浏览器根据上下文和最终用户的交互生成和插入内容块。
- en: 'Advantage: It feels much more dynamic for the end-user. Less processing is
    done by the server, which sends data to be processed by the user agent.'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：对于最终用户来说感觉更加动态。服务器处理的工作更少，它发送数据给用户代理进行处理。
- en: 'Drawback: It is less intuitive for the web designer. It will not work on user
    agents that do not support JavaScript.'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：对于网页设计师来说不太直观。它不适用于不支持JavaScript的用户代理。
- en: 'One `Kid` template per block of content to be displayed: This is a mix between
    the previous two solutions. One page will be sent to the user agent and upon user
    interaction, the browser will go and fetch extra blocks of content generated on
    the server from the `Kid` templates that will be inserted directly within the
    web page. This technique is referred as AHAH (Asynchronous HTML and HTTP), as
    we will see in the next chapter.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个要显示的内容块一个`Kid`模板：这是前两种解决方案的结合。将向用户代理发送一个页面，并在用户交互时，浏览器将去服务器从`Kid`模板中获取额外的内容块，这些内容块将直接插入到网页中。这种技术被称为AHAH（异步HTML和HTTP），我们将在下一章中看到。
- en: 'Advantage: It is easy for the web developer who works on HTML code, as in the
    first solution.'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：对于在HTML代码上工作的网页开发者来说很容易，就像第一种解决方案一样。
- en: 'Drawback: The rendering is done by the server, so more work on its part. It
    does not work for browsers that do not support JavaScript.'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：渲染工作由服务器完成，因此服务器需要做更多的工作。它不适用于不支持JavaScript的浏览器。
- en: For the purpose of this application, we will be using mainly the second solution.
    We will see the application in the upcoming sections.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个应用的目的，我们将主要使用第二种解决方案。我们将在接下来的章节中看到应用。
- en: Mochikit
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mochikit
- en: 'Mochikit, created and maintained by Bob Ippolito, is a JavaScript toolkit providing
    a set of functionalities to simplify the development of web applications from
    a client-side perspective. Mochikit provides the following components:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Mochikit，由Bob Ippolito创建和维护，是一个JavaScript工具包，提供了一套简化客户端网络应用开发的函数。Mochikit提供了以下组件：
- en: '**Async:** This allows HTTP requests from the browser that are handled either
    synchronously or asynchronously. We will explain this in more detail in the next
    chapter.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步操作**：这允许浏览器进行同步或异步处理的HTTP请求。我们将在下一章中详细解释。'
- en: '**Base:** This is a set of functions for common programming tasks.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础**：这是一组用于常见编程任务的函数。'
- en: '**DOM:** This is an API to ease the manipulation of the DOM tree and perform
    operations such as insertion or removal of nodes in the tree.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DOM**：这是一个API，用于简化DOM树的操纵，并执行如插入或删除树中节点等操作。'
- en: '**DragAndDrop:** This is there to enable drag and drop handling in a web application.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拖放**：这是为了在Web应用中启用拖放处理。'
- en: '**Color:** This provides color abstraction with support for CSS3 colors that
    are not supported natively by current browsers.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色**：这提供了对CSS3颜色的抽象，这些颜色当前浏览器不支持。'
- en: '**DateTime:** These are helpers for date and time management.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日期时间**：这些是用于日期和时间管理的辅助工具。'
- en: '**Format:** These are helpers for string manipulation.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式**：这些是用于字符串操作的辅助工具。'
- en: '**Iter:** This brings good support to JavaScript for the iterator pattern over
    a collection of data.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迭代**：这为JavaScript在数据集合上的迭代模式提供了良好的支持。'
- en: '**Logging** and **LoggingPane:** These are extended logger tools.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**和**日志面板**：这些是扩展的日志工具。'
- en: '**Signal:** This is an API to handle events and their dispatching in a web
    application.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号**：这是一个用于处理网络应用中事件及其分发的API。'
- en: '**Style:** This is a better support for CSS.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**样式**：这是对CSS更好的支持。'
- en: '**Sortable:** This simplifies the way to sort collections of data.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可排序**：这简化了数据集合排序的方式。'
- en: '**Visual:** These are effects to make a web application more attractive.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视觉**：这些是使网络应用更具吸引力的效果。'
- en: Mochikit is not the only major player in the JavaScript toolkit field; there
    are others such Dojo, script.aculo.us, Rico, Yahoo UI Library, JQuery, mooh.fx,
    etc. All of them allow you to write rich client-side web applications and choosing
    one of these is a matter of taste as much as of functionalities.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Mochikit不是JavaScript工具包领域的唯一主要参与者；还有其他如Dojo、script.aculo.us、Rico、Yahoo UI Library、JQuery、mooh.fx等。所有这些都允许你编写丰富的客户端网络应用，选择其中之一既取决于口味也取决于功能。
- en: We will use the Mochikit library extensively to provide a more dynamic feeling
    experience to the end user.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将广泛使用Mochikit库来为最终用户提供更动态的体验。
- en: For example, we could add a box displaying information about the film associated
    to the current photograph displayed. This box would be hidden by default and would
    show up when the user clicks on a link.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以添加一个显示与当前显示的照片相关联的电影信息的框。默认情况下，这个框是隐藏的，当用户点击链接时才会显示。
- en: Developing the Photoblog Design
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发照片博客设计
- en: We have now all the tools to develop a web application interface and we will
    now present step by step how our photoblog application will use those tools through
    specific examples, reflecting the application user-interface cases.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经拥有了开发网络应用界面的所有工具，现在我们将逐步展示我们的照片博客应用如何通过具体的示例使用这些工具，反映应用的用户界面案例。
- en: HTML Code
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML代码
- en: Let's start first by the insertion of an HTML box that will display film information.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们插入一个HTML框来显示电影信息。
- en: 'The HTML code of the box to be inserted into the `index.kid` template:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要插入到`index.kid`模板中的HTML代码：
- en: '[PRE22]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, we define an inner box and an outer box because we may need
    to add more content sharing the same process as the inner box. Note also that
    we do provide some random data from the template itself for testing purpose while
    developing the interface. Indeed, even though the application is built step by
    step in this book, in real-life projects tasks are usually achieved in parallel,
    so the areas that are normally interdependent have to work on their side on mock-up
    objects or data. Those are hard-coded but provide realistic content to work against.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们定义了一个内框和一个外框，因为我们可能需要添加更多与内框共享相同过程的内容。请注意，我们也从模板本身提供了一些随机数据用于测试目的，在开发界面时。实际上，尽管本书中应用程序是逐步构建的，但在现实生活中的项目中，任务通常是并行完成的，因此通常相互依赖的区域必须在它们的侧面对模拟对象或数据进行工作。这些是硬编码的，但提供了实际的内容来工作。
- en: Adding a Link
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加链接
- en: 'As this box will be hidden by default, we need to provide the end user with
    a link to toggle its visibility. To do so, we add the following HTML code to the
    `index.kid` template:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此框默认将隐藏，我们需要为最终用户提供一个切换其可见性的链接。为此，我们在`index.kid`模板中添加以下HTML代码：
- en: '[PRE23]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that, although we call it a link, this is not an HTML`<a />` element but
    instead a text label that will act as a link from the end-user point of view.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管我们称之为链接，但这不是一个HTML`<a />`元素，而是一个将作为链接从最终用户角度起作用的文本标签。
- en: Handling the End-User Actions
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理最终用户操作
- en: 'Assuming we have a JavaScript file named `utils.js`, we would define:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个名为`utils.js`的JavaScript文件，我们将会定义：
- en: '[PRE24]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'First, we create a simple JavaScript function that takes only one parameter,
    a DOM event object containing details of the current event, the caller, and the
    callee. This function performs solely two actions:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个简单的JavaScript函数，它只接受一个参数，即包含当前事件详细信息、调用者和被调用者的DOM事件对象。此函数仅执行两个操作：
- en: It hides the DOM element with `film-pane` as `id`. Mochikit provides the `$(name)`
    as a shortcut to retrieve a DOM node within the DOM tree.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它隐藏了具有`film-pane`作为`id`的DOM元素。Mochikit提供了`$(name)`作为获取DOM树中DOM节点的快捷方式。
- en: It attaches the `onclick` signal of the element with the `id` named `toggle-film-infos`
    to a function named `toggleFilmVisibility`. That function only toggles the state
    of visibility of the film box.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将具有`id`名为`toggle-film-infos`的元素的`onclick`信号连接到名为`toggleFilmVisibility`的函数。该函数仅切换电影框的可见状态。
- en: Then, we connect the `onload` signal of the `window` DOM object with the `initialize`
    function. This means that `initialize` will be called once the `window` object
    has been loaded.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将`window` DOM对象的`onload`信号连接到`initialize`函数。这意味着一旦`window`对象被加载，`initialize`将被调用。
- en: Amending the Template
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改模板
- en: 'In the `common.kid` template, we simply need to add the following lines to
    the`<head />` element:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在`common.kid`模板中，我们只需在`<head />`元素中添加以下行：
- en: '[PRE25]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Amending the CSS
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改CSS
- en: 'As we have seen in our example, our different HTML elements have either an
    `id` attribute and/or a `class` attribute. Both will allow us to apply a specific
    style to those elements, as we will see now:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在示例中所见，我们的不同HTML元素要么有`id`属性和/或`class`属性。两者都将允许我们为这些元素应用特定的样式，正如我们现在将要看到的：
- en: '[PRE26]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Let's be More Flexible...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们更加灵活...
- en: In the example we have been through, we started with the fact that the HTML
    box would be included directly within the main template. Mochikit comes with a
    handy DOM toolbox, with functions named after common HTML elements such as `DIV,
    SPAN, INPUT, FORM`, etc. It provides an extremely easy way to generate HTML elements
    on the fly to insert them into the DOM tree held by the browser.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚才的示例中，我们从HTML框将直接包含在主模板中的事实开始。Mochikit附带了一个方便的DOM工具箱，其中包含以常见HTML元素（如`DIV,
    SPAN, INPUT, FORM`等）命名的函数。它提供了一种在浏览器持有的DOM树中动态生成HTML元素并插入的极其简单的方法。
- en: 'A typical use case of our application will be the presentation of existing
    albums. Since their number is going to change with time, it is required to generate
    the associated HTML code dynamically, as shown in the following example:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的一个典型用例将是现有专辑的展示。由于它们的数量会随着时间的推移而变化，因此需要动态生成相关的HTML代码，如下面的示例所示：
- en: '[PRE27]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We first create the main block containing the information and then we associate
    a unique identifier using the pattern `album-#id#`, where `#id#` is the `id` of
    the album to be displayed. Doing it that way, we provide a unique identifier for
    each block within the DOM tree. This is required as we will attach mouse events
    to the block itself for further processing. Then, we attach a series of inline
    elements, via the `SPAN` element, and we insert the content of the linked attribute
    of the album.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建包含信息的主体块，然后使用模式`album-#id#`关联一个唯一的标识符，其中`#id#`是要显示的专辑的`id`。这样做，我们在DOM树中的每个块都提供了一个唯一的标识符。这是必需的，因为我们将在块本身上附加鼠标事件以进行进一步处理。然后，我们通过`SPAN`元素附加一系列内联元素，并插入专辑链接属性的文本内容。
- en: 'Once the block is created, we connect the mouse events as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建块，我们按照以下方式连接鼠标事件：
- en: '[PRE28]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When a user clicks on an album block `selectAlbum` will be called and operations
    will be performed to display the selected album, as we will see in the next chapter.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击专辑块时，将调用`selectAlbum`，并执行操作以显示所选专辑，正如我们将在下一章中看到的。
- en: 'Next, we attach the newly created element to an outer album box area and we
    display it:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将新创建的元素附加到外部专辑框区域，并显示它：
- en: '[PRE29]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The creation of the blocks containing the album information will take place
    in a loop through the albums retrieved from the server, as we will see in the
    next chapter.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 包含专辑信息的块的创建将通过遍历从服务器检索到的专辑进行循环，正如我们将在下一章中看到的。
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Through this chapter, we have introduced some of the technologies and tools
    that are available today to create web application interfaces with dynamic and
    attractive design.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们介绍了一些今天可用于创建具有动态和吸引设计模式的网络应用程序界面的技术和工具。
- en: These range from the good old HTML variants that are still widely used to structure
    the content, to the CSS, a web designer's best friend to style the interface,
    and the resourceful Mochikit that lets us step into the world of rich web application.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包括从仍然广泛用于结构化内容的经典HTML变体，到CSS，这是网页设计师的得力助手，用于设计界面，以及资源丰富的Mochikit，它让我们进入丰富网络应用程序的世界。
- en: There is still a missing link to put everything together between the server
    and the client. This link is commonly referred today as Ajax. This is what we
    will explain in the next chapter.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然缺少一个连接服务器和客户端以整合一切的链接。这个链接现在通常被称为Ajax。这就是我们将在下一章中解释的内容。
