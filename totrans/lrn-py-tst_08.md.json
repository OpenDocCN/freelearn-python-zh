["```py\nfrom unittest import TestCase\nfrom planner.data import Status\nfrom datetime import datetime\n\nclass statuses_integration_tests(TestCase):\n    def setUp(self):\n        self.A = Status('A',\n                        datetime(year = 2012, month = 7, day = 15),\n                        datetime(year = 2013, month = 5, day = 2))\n\n    def test_repr(self):\n        self.assertEqual(repr(self.A), '<A 2012-07-15T00:00:00 2013-05-02T00:00:00>')\n\n    def test_equality(self):\n        self.assertEqual(self.A, self.A)\n        self.assertNotEqual(self.A, Status('B',\n                          datetime(year = 2012, month = 7, day = 15),\n                          datetime(year = 2013, month = 5, day = 2)))\n        self.assertNotEqual(self.A, Status('A',\n                          datetime(year = 2011, month = 7, day = 15),\n                          datetime(year = 2013, month = 5, day = 2)))\n        self.assertNotEqual(self.A, Status('A',\n                          datetime(year = 2012, month = 7, day = 15),\n                          datetime(year = 2014, month = 5, day = 2)))\n\n    def test_overlap_begin(self):\n        status = Status('status name',\n                          datetime(year = 2011, month = 8, day = 11),\n                          datetime(year = 2012, month = 11, day = 27))\n\n        self.assertTrue(status.overlaps(self.A))\n\n    def test_overlap_end(self):\n        status = Status('status name',\n                          datetime(year = 2012, month = 1, day = 11),\n                          datetime(year = 2014, month = 4, day = 16))\n\n        self.assertTrue(status.overlaps(self.A))\n\n    def test_overlap_inner(self):\n        status = Status('status name',\n                          datetime(year = 2011, month = 10, day = 11),\n                          datetime(year = 2014, month = 1, day = 27))\n\n        self.assertTrue(status.overlaps(self.A))\n\n    def test_overlap_outer(self):\n        status = Status('status name',\n                          datetime(year = 2012, month = 8, day = 12),\n                          datetime(year = 2012, month = 9, day = 15))\n\n        self.assertTrue(status.overlaps(self.A))\n\n    def test_overlap_after(self):\n        status = Status('status name',\n                          datetime(year = 2015, month = 2, day = 6),\n                          datetime(year = 2019, month = 4, day = 27))\n\n        self.assertFalse(status.overlaps(self.A))\n```", "```py\nfrom unittest import TestCase\nfrom planner.data import Activity, TaskError\nfrom datetime import datetime\n\nclass activities_integration_tests(TestCase):\n    def setUp(self):\n        self.A = Activity('A',\n                          datetime(year = 2012, month = 7, day = 15),\n                          datetime(year = 2013, month = 5, day = 2))\n\n    def test_repr(self):\n        self.assertEqual(repr(self.A), '<A 2012-07-15T00:00:00 2013-05-02T00:00:00>')\n\n    def test_equality(self):\n        self.assertEqual(self.A, self.A)\n        self.assertNotEqual(self.A, Activity('B',\n                          datetime(year = 2012, month = 7, day = 15),\n                          datetime(year = 2013, month = 5, day = 2)))\n        self.assertNotEqual(self.A, Activity('A',\n                          datetime(year = 2011, month = 7, day = 15),\n                          datetime(year = 2013, month = 5, day = 2)))\n        self.assertNotEqual(self.A, Activity('A',\n                          datetime(year = 2012, month = 7, day = 15),\n                          datetime(year = 2014, month = 5, day = 2)))\n\n    def test_overlap_begin(self):\n        activity = Activity('activity name',\n                          datetime(year = 2011, month = 8, day = 11),\n                          datetime(year = 2012, month = 11, day = 27))\n\n        self.assertTrue(activity.overlaps(self.A))\n        self.assertTrue(activity.excludes(self.A))\n\n    def test_overlap_end(self):\n        activity = Activity('activity name',\n                          datetime(year = 2012, month = 1, day = 11),\n                          datetime(year = 2014, month = 4, day = 16))\n\n        self.assertTrue(activity.overlaps(self.A))\n        self.assertTrue(activity.excludes(self.A))\n\n    def test_overlap_inner(self):\n        activity = Activity('activity name',\n                          datetime(year = 2011, month = 10, day = 11),\n                          datetime(year = 2014, month = 1, day = 27))\n\n        self.assertTrue(activity.overlaps(self.A))\n        self.assertTrue(activity.excludes(self.A))\n\n    def test_overlap_outer(self):\n        activity = Activity('activity name',\n                          datetime(year = 2012, month = 8, day = 12),\n                          datetime(year = 2012, month = 9, day = 15))\n\n        self.assertTrue(activity.overlaps(self.A))\n        self.assertTrue(activity.excludes(self.A))\n\n    def test_overlap_after(self):\n        activity = Activity('activity name',\n                          datetime(year = 2015, month = 2, day = 6),\n                          datetime(year = 2019, month = 4, day = 27))\n\n        self.assertFalse(activity.overlaps(self.A))\n```", "```py\nfrom unittest import TestCase\nfrom unittest.mock import Mock\nfrom planner.data import Schedule\nfrom datetime import datetime\n\nclass schedule_tests(TestCase):\n    def test_equality(self):\n        A = Mock(overlaps = Mock(return_value = False))\n        B = Mock(overlaps = Mock(return_value = False))\n        C = Mock(overlaps = Mock(return_value = False))\n\n        sched1 = Schedule()\n        sched2 = Schedule()\n\n        self.assertEqual(sched1, sched2)\n\n        sched1.add(A)\n        sched1.add(B)\n\n        sched2.add(A)\n        sched2.add(B)\n        sched2.add(C)\n\n        self.assertNotEqual(sched1, sched2)\n\n        sched1.add(C)\n\n        self.assertEqual(sched1, sched2)\n```", "```py\nfrom planner.data import Schedule, Status\nfrom unittest import TestCase\nfrom datetime import datetime, timedelta\n\nclass test_schedules_and_statuses(TestCase):\n    def setUp(self):\n        self.A = Status('A',\n                        datetime.now(),\n                        datetime.now() + timedelta(minutes = 7))\n        self.B = Status('B',\n                        datetime.now() - timedelta(hours = 1),\n                        datetime.now() + timedelta(hours = 1))\n        self.C = Status('C',\n                        datetime.now() + timedelta(minutes = 10),\n                        datetime.now() + timedelta(hours = 1))\n\n    def test_usage_pattern(self):\n        sched = Schedule()\n\n        sched.add(self.A)\n        sched.add(self.C)\n\n        self.assertTrue(self.A in sched)\n        self.assertTrue(self.C in sched)\n        self.assertFalse(self.B in sched)\n\n        sched.add(self.B)\n\n        self.assertTrue(self.B in sched)\n\n        self.assertEqual(sched, sched)\n\n        sched.remove(self.A)\n\n        self.assertFalse(self.A in sched)\n        self.assertTrue(self.B in sched)\n        self.assertTrue(self.C in sched)\n\n        sched.remove(self.B)\n        sched.remove(self.C)\n\n        self.assertFalse(self.B in sched)\n        self.assertFalse(self.C in sched)\n```", "```py\nfrom planner.data import Schedule, Activity, ScheduleError\nfrom unittest import TestCase\nfrom datetime import datetime, timedelta\n\nclass test_schedules_and_activities(TestCase):\n    def setUp(self):\n        self.A = Activity('A',\n                          datetime.now(),\n                          datetime.now() + timedelta(minutes = 7))\n        self.B = Activity('B',\n                          datetime.now() - timedelta(hours = 1),\n                          datetime.now() + timedelta(hours = 1))\n        self.C = Activity('C',\n                          datetime.now() + timedelta(minutes = 10),\n                          datetime.now() + timedelta(hours = 1))\n\n    def test_usage_pattern(self):\n        sched = Schedule()\n\n        sched.add(self.A)\n        sched.add(self.C)\n\n        self.assertTrue(self.A in sched)\n        self.assertTrue(self.C in sched)\n        self.assertFalse(self.B in sched)\n\n        self.assertRaises(ScheduleError, sched.add, self.B)\n\n        self.assertFalse(self.B in sched)\n\n        self.assertEqual(sched, sched)\n\n        sched.remove(self.A)\n\n        self.assertFalse(self.A in sched)\n        self.assertFalse(self.B in sched)\n        self.assertTrue(self.C in sched)\n\n        sched.remove(self.C)\n\n        self.assertFalse(self.B in sched)\n        self.assertFalse(self.C in sched)\n```", "```py\nfrom planner.data import Schedule, Status, Activity, ScheduleError\nfrom unittest import TestCase\nfrom datetime import datetime, timedelta\n\nclass test_schedules_activities_and_statuses(TestCase):\n    def setUp(self):\n        self.A = Status('A',\n                        datetime.now(),\n                        datetime.now() + timedelta(minutes = 7))\n        self.B = Status('B',\n                        datetime.now() - timedelta(hours = 1),\n                        datetime.now() + timedelta(hours = 1))\n        self.C = Status('C',\n                        datetime.now() + timedelta(minutes = 10),\n                        datetime.now() + timedelta(hours = 1))\n\n        self.D = Activity('D',\n                          datetime.now(),\n                          datetime.now() + timedelta(minutes = 7))\n\n        self.E = Activity('E',\n                          datetime.now() + timedelta(minutes = 30),\n                          datetime.now() + timedelta(hours = 1))\n\n        self.F = Activity('F',\n                          datetime.now() - timedelta(minutes = 20),\n                          datetime.now() + timedelta(minutes = 40))\n\n    def test_usage_pattern(self):\n        sched = Schedule()\n\n        sched.add(self.A)\n        sched.add(self.B)\n        sched.add(self.C)\n\n        sched.add(self.D)\n\n        self.assertTrue(self.A in sched)\n        self.assertTrue(self.B in sched)\n        self.assertTrue(self.C in sched)\n        self.assertTrue(self.D in sched)\n\n        self.assertRaises(ScheduleError, sched.add, self.F)\n        self.assertFalse(self.F in sched)\n        sched.add(self.E)\n        sched.remove(self.D)\n\n        self.assertTrue(self.E in sched)\n        self.assertFalse(self.D in sched)\n\n        self.assertRaises(ScheduleError, sched.add, self.F)\n\n        self.assertFalse(self.F in sched)\n\n        sched.remove(self.E)\n\n        self.assertFalse(self.E in sched)\n\n        sched.add(self.F)\n\n        self.assertTrue(self.F in sched)\n```", "```py\nfrom unittest import TestCase\nfrom planner.persistence import File\nfrom os import unlink\n\nclass test_file(TestCase):\n    def setUp(self):\n        storage = File('file_test.sqlite')\n\n        storage.store_object('tag1', 'A')\n        storage.store_object('tag2', 'B')\n        storage.store_object('tag1', 'C')\n        storage.store_object('tag1', 'D')\n        storage.store_object('tag3', 'E')\n        storage.store_object('tag3', 'F')\n\n    def tearDown(self):\n        try:\n            unlink('file_test.sqlite')\n        except OSError:\n            pass\n\n    def test_other_instance(self):\n        storage = File('file_test.sqlite')\n\n        self.assertEqual(set(storage.load_objects('tag1')),\n                         set(['A', 'C', 'D']))\n\n        self.assertEqual(set(storage.load_objects('tag2')),\n                         set(['B']))\n\n        self.assertEqual(set(storage.load_objects('tag3')),\n                         set(['E', 'F']))\n```", "```py\nfrom unittest import TestCase\nfrom unittest.mock import Mock\nfrom planner.data import Schedule\nfrom planner.persistence import File\nfrom os import unlink\n\ndef unpickle_mocked_task(begins):\n    return Mock(overlaps = Mock(return_value = False), begins = begins)\n\nclass test_schedules_and_file(TestCase):\n    def setUp(self):\n        A = Mock(overlaps = Mock(return_value = False),\n                 __reduce__ = Mock(return_value = (unpickle_mocked_task, (5,))),\n                 begins = 5)\n\n        B = Mock(overlaps = Mock(return_value = False),\n                 __reduce__ = Mock(return_value = (unpickle_mocked_task, (3,))),\n                 begins = 3)\n\n        C = Mock(overlaps = Mock(return_value = False),\n                 __reduce__ = Mock(return_value = (unpickle_mocked_task, (7,))),\n                 begins = 7)\n\n        self.A = A\n        self.B = B\n        self.C = C\n\n    def tearDown(self):\n        try:\n            unlink('test_schedules_and_file.sqlite')\n        except OSError:\n            pass\n\n    def test_save_and_restore(self):\n        sched1 = Schedule()\n\n        sched1.add(self.A)\n        sched1.add(self.B)\n        sched1.add(self.C)\n\n        store1 = File('test_schedules_and_file.sqlite')\n        sched1.store(store1)\n\n        del sched1\n        del store1\n\n        store2 = File('test_schedules_and_file.sqlite')\n        sched2 = Schedule.load(store2)\n\n        self.assertEqual(set([x.begins for x in sched2.tasks]),\n                         set([3, 5, 7]))\n```", "```py\nfrom planner.data import Schedule, Status, Activity, ScheduleError\nfrom planner.persistence import File\nfrom unittest import TestCase\nfrom datetime import datetime, timedelta\nfrom os import unlink\n\nclass test_system(TestCase):\n    def setUp(self):\n        self.A = Status('A',\n                        datetime.now(),\n                        datetime.now() + timedelta(minutes = 7))\n        self.B = Status('B',\n                        datetime.now() - timedelta(hours = 1),\n                        datetime.now() + timedelta(hours = 1))\n        self.C = Status('C',\n                        datetime.now() + timedelta(minutes = 10),\n                        datetime.now() + timedelta(hours = 1))\n\n        self.D = Activity('D',\n                          datetime.now(),\n                          datetime.now() + timedelta(minutes = 7))\n\n        self.E = Activity('E',\n                          datetime.now() + timedelta(minutes = 30),\n                          datetime.now() + timedelta(hours = 1))\n\n        self.F = Activity('F',\n                          datetime.now() - timedelta(minutes = 20),\n                          datetime.now() + timedelta(minutes = 40))\n\n    def tearDown(self):\n        try:\n            unlink('test_system.sqlite')\n        except OSError:\n            pass\n\n    def test_usage_pattern(self):\n        sched1 = Schedule()\n\n        sched1.add(self.A)\n        sched1.add(self.B)\n        sched1.add(self.C)\n        sched1.add(self.D)\n        sched1.add(self.E)\n\n        store1 = File('test_system.sqlite')\n        sched1.store(store1)\n\n        del store1\n\n        store2 = File('test_system.sqlite')\n        sched2 = Schedule.load(store2)\n\n        self.assertEqual(sched1, sched2)\n\n        sched2.remove(self.D)\n        sched2.remove(self.E)\n\n        self.assertNotEqual(sched1, sched2)\n\n        sched2.add(self.F)\n\n        self.assertTrue(self.F in sched2)\n        self.assertFalse(self.F in sched1)\n\n        self.assertRaises(ScheduleError, sched2.add, self.D)\n        self.assertRaises(ScheduleError, sched2.add, self.E)\n\n        self.assertTrue(self.A in sched1)\n        self.assertTrue(self.B in sched1)\n        self.assertTrue(self.C in sched1)\n        self.assertTrue(self.D in sched1)\n        self.assertTrue(self.E in sched1)\n        self.assertFalse(self.F in sched1)\n\n        self.assertTrue(self.A in sched2)\n        self.assertTrue(self.B in sched2)\n        self.assertTrue(self.C in sched2)\n        self.assertFalse(self.D in sched2)\n        self.assertFalse(self.E in sched2)\n        self.assertTrue(self.F in sched2)\n```", "```py\nTraceback (most recent call last):\n File \"integration/integration_tests/test_file.py\", line 26, in test_other_instance\n set(['A', 'C', 'D']))\nAssertionError: Items in the second set but not the first:\n'A'\n'D'\n'C'\n```", "```py\n    def store_object(self, tag, object):\n        self.connection.execute('insert into objects values (?, ?)',\n                                (tag, dumps(object)))\n        self.connection.commit()\n```", "```py\ndef unpickle_mocked_task(begins):\n    return Mock(overlaps = Mock(return_value = False), begins = begins)\n\nclass test_schedules_and_file(TestCase):\n    def setUp(self):\n        A = Mock(overlaps = Mock(return_value = False),\n                 __reduce__ = Mock(return_value = (unpickle_mocked_task, (5,))),\n                 begins = 5)\n\n        B = Mock(overlaps = Mock(return_value = False),\n                 __reduce__ = Mock(return_value = (unpickle_mocked_task, (3,))),\n                 begins = 3)\n\n        C = Mock(overlaps = Mock(return_value = False),\n                 __reduce__ = Mock(return_value = (unpickle_mocked_task, (7,))),\n                 begins = 7)\n```", "```py\n    def tearDown(self):\n        try:\n            unlink('test_schedules_and_file.sqlite')\n        except OSError:\n            pass\n```"]