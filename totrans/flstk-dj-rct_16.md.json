["```py\n...\n\"corsheaders\",\n\"rest_framework_simplejwt.token_blacklist\",\n...\n```", "```py\nfrom rest_framework_simplejwt.tokens import RefreshToken, TokenError\nfrom rest_framework import viewsets, status, permissions\nfrom rest_framework.exceptions import ValidationError\nfrom rest_framework.response import Response\nclass LogoutViewSet(viewsets.ViewSet):\n   authentication_classes = ()\n   permission_classes = (permissions.IsAuthenticated,)\n   http_method_names = [\"post\"]\n```", "```py\n...\nclass LogoutViewSet(viewsets.ViewSet):\n...\n   def create(self, request, *args, **kwargs):\n       refresh = request.data.get(\"refresh\")\n       if refresh is None:\n           raise ValidationError({\"detail\":\n             \"A refresh token is required.\"})\n       try:\n           token = RefreshToken(request.data.get(\n             \"refresh\"))\n           token.blacklist()\n           return Response(\n             status=status.HTTP_204_NO_CONTENT)\n       except TokenError:\n           raise ValidationError({\"detail\":\n             \"The refresh token is invalid.\"})\n```", "```py\n...\nfrom core.auth.viewsets import (\n   RegisterViewSet,\n   LoginViewSet,\n   RefreshViewSet,\n   LogoutViewSet,\n)\n...\nrouter.register(r\"auth/logout\", LogoutViewSet, basename=\"auth-logout\")\n```", "```py\n...\ndef test_logout(self, client, user):\n   data = {\"username\": user.username,\n           \"password\": \"test_password\"}\n   response = client.post(self.endpoint + \"login/\",\n                          data)\n   assert response.status_code == status.HTTP_200_OK\n   client.force_authenticate(user=user)\n   data_refresh = {\"refresh\":\n     response.data[\"refresh\"]}\n   response = client.post(self.endpoint + \"logout/\",\n     data_refresh)\n   assert response.status_code ==\n     status.HTTP_204_NO_CONTENT\n```", "```py\n     docker-compose exec -T api pytest\n    ```", "```py\n...\n             <NavDropdown.Item\n               onClick={userActions.logout}>\n               Logout\n             </NavDropdown.Item>\n...\n```", "```py\n...\n // Logout the user\n function logout() {\n   return axiosService\n     .post(`${baseURL}/auth/logout/`,\n           { refresh: getRefreshToken() })\n     .then(() => {\n       localStorage.removeItem(\"auth\");\n       navigate(\"/login\");\n     });\n }\n```", "```py\nimport React, { useContext } from \"react\";\nimport { Context } from \"./Layout\";\n...\nfunction NavigationBar() {\n const { setToaster } = useContext(Context);\n const userActions = useUserActions();\n const user = getUser();\n const handleLogout = () => {\n   userActions.logout().catch((e) =>\n     setToaster({\n       type: \"danger\",\n       message: \"Logout failed\",\n       show: true,\n       title: e.data?.detail | \"An error occurred.\",\n     })\n   );\n };\n...\n```", "```py\n...\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': 'redis://127.0.0.1:6379/1',\n        'OPTIONS': {\n            'CLIENT_CLASS':\n              'django_redis.client.DefaultClient',\n        }\n    }\n}\n```", "```py\npip install django-redis\n```", "```py\ndjango-redis==5.2.0\n```", "```py\nservices:\n redis:\n   image: redis:alpine\n…\napi:\n...\n depends_on:\n  - db\n  - redis\n...\n```", "```py\nCACHES = {\n   \"default\": {\n       \"BACKEND\": \"django_redis.cache.RedisCache\",\n       \"LOCATION\": \"redis://redis:6379\",\n       \"OPTIONS\": {\n           \"CLIENT_CLASS\":\n             \"django_redis.client.DefaultClient\",\n       },\n   }\n}\n```", "```py\nfrom django.core.cache import cache\n...\ndef _delete_cached_objects(app_label):\n   if app_label == \"core_post\":\n       cache.delete(\"post_objects\")\n   elif app_label == \"core_comment\":\n       cache.delete(\"comment_objects\")\n   else:\n       raise NotImplementedError\n```", "```py\nclass AbstractModel(models.Model):\n...\n   def save(\n       self, force_insert=False, force_update=False,\n       using=None, update_fields=None\n   ):\n       app_label = self._meta.app_label\n       if app_label in [\"core_post\", \"core_comment\"]:\n           _delete_cached_objects(app_label)\n       return super(AbstractModel, self).save(\n           force_insert=force_insert,\n           force_update=force_update,\n           using=using,\n           update_fields=update_fields,\n       )\n```", "```py\nclass AbstractModel(models.Model):\n…\n   def delete(self, using=None, keep_parents=False):\n       app_label = self._meta.app_label\n       if app_label i\" [\"core_p\"st\", \"core_comm\"nt\"]:\n           _delete_cached_objects(app_label)\n       return super(AbstractModel, self).delete(\n         using=using, keep_parents=keep_parents)\n```", "```py\n\"\"\"List a queryset\"\"\"\ndef list(self, request, *args, **kwargs):\n   queryset = self.filter_queryset(self.get_queryset())\n   page = self.paginate_queryset(queryset)\n   if page is not None:\n       serializer = self.get_serializer(page, many=True)\n       return self.get_paginated_response(serializer.data)\n   serializer = self.get_serializer(queryset, many=True)\n   return Response(serializer.data)\n```", "```py\nclass PostViewSet(AbstractViewSet):\n...\n   def list(self, request, *args, **kwargs):\n       post_objects = cache.get(\"post_objects\")\n       if post_objects is None:\n           post_objects =\n             self.filter_queryset(self.get_queryset())\n           cache.set(\"post_objects\", post_objects)\n       page = self.paginate_queryset(post_objects)\n       if page is not None:\n           serializer = self.get_serializer(page,\n                                            many=True)\n           return self.get_paginated_response(\n             serializer.data)\n       serializer = self.get_serializer(post_objects,\n                                        many=True)\n       return Response(serializer.data)\n```", "```py\n    yarn add -D webpack webpack-cli\n    ```", "```py\n...\n\"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"webpack --mode production\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n...\n```", "```py\n    yarn add -D @babel/core babel-loader @babel/preset-env @babel/preset-react\n    ```", "```py\n    {\n    ```", "```py\n      \"presets\": [\"@babel/preset-env\",\n    ```", "```py\n                  \"@babel/preset-react\"]\n    ```", "```py\n    }\n    ```", "```py\n    yarn add -D html-webpack-plugin html-loader copy-webpack-plugin\n    ```", "```py\nconst path = require(\"path\");\nconst HtmlWebPackPlugin = require(\"html-webpack-plugin\");\nconst CopyPlugin = require(\"copy-webpack-plugin\");\nconst webpack = require(\"webpack\");\nmodule.exports = {\n module: {\n   rules: [\n     {\n       test: /\\.(js|jsx)$/,\n       exclude: /node_modules/,\n       use: {\n         loader: \"babel-loader\",\n       },\n     },\n     {\n       test: /\\.css$/i,\n       use: [\"style-loader\", \"css-loader\"],\n     },\n   ],\n },\n};\n```", "```py\n...\n resolve: {\n   modules: [path.resolve(__dirname, \"src\"),\n             \"node_modules\"],\n   extensions: [\"\", \".js\", \".jsx\"],\n },\n};\n```", "```py\n...\n plugins: [\n   new HtmlWebPackPlugin({\n     template: \"./public/index.html\",\n     filename: \"./index.html\",\n   }),\n   new CopyPlugin({\n     patterns: [\n       {\n         from: \"public\",\n         globOptions: {\n           ignore: [\"**/*.html\"],\n         },\n       },\n     ],\n   }),\n   new webpack.DefinePlugin({ process: {env: {}} }),\n ],\n output: {\n   publicPath: '.',\n },\n};\n```", "```py\n    yarn build\n    ```", "```py\nnpm install -g pnpm\n```", "```py\npnpm import\n```", "```py\njobs:\n test:\n   name: Tests\n   runs-on: ubuntu-latest\n   defaults:\n     run:\n       working-directory: ./social-media-react\n   steps:\n     - uses: actions/checkout@v3\n     - uses: pnpm/action-setup@v2.2.4\n       with:\n         version: 7\n     - name: Use Node.js 16\n       uses: actions/setup-node@v3\n       with:\n         node-version: 16\n         cache: 'pnpm'\n         cache-dependency-path:\n           ./social-media-react/pnpm-lock.yaml\n```", "```py\n    function ProtectedRoute({ children }) {\n    ```", "```py\n      const user = getUser();\n    ```", "```py\n      return user ? <>{children}</> : <Navigate to=»/login/» />;\n    ```", "```py\n    }\n    ```"]