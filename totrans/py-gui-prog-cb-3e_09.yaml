- en: Extending Our GUI with the wxPython Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will introduce another Python GUI toolkit that does not
    ship with Python. It is called wxPython. There are two versions of this library.
    The original is called **Classic**, while the newest is called by its development
    project code name, which is **Phoenix**.
  prefs: []
  type: TYPE_NORMAL
- en: The older Classic version does not work with Python 3.x, and we will not look
    further into this version but instead concentrate on the Phoenix software version.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we are solely programming using Python 3.7 and later, and because
    the new Phoenix project is also aimed at supporting Python 3.7 and later, this
    is the version of wxPython we will use in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will install the framework. Then, we will create a simple wxPython
    GUI, and after that, we will try to connect the `tkinter`-based GUIs we developed
    in this book with the new wxPython library.
  prefs: []
  type: TYPE_NORMAL
- en: wxPython is a Python binding to wxWidgets. The *w* in wxPython stands for the
    Windows OS, and the *x* stands for Unix-based OSes, such as Linux and Apple's
    macOS.
  prefs: []
  type: TYPE_NORMAL
- en: While `tkinter` ships with Python, it is valuable to have experience using other
    GUI frameworks that work with Python. This will improve your Python GUI programming
    skills, and you can choose which framework to use in your projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the overview of Python modules for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9eeacd50-9d24-4357-bef7-4d4bee6f6f6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, we will enhance our Python GUI by using the wxPython library.
    We will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the wxPython library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our GUI in wxPython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quickly adding controls using wxPython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trying to embed a main wxPython app in a main tkinter app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trying to embed our tkinter GUI code into wxPython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Python to control two different GUI frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating between two connected GUIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the wxPython library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The wxPython library does not ship with Python, so in order to use it, we first
    have to install it. This recipe will show us where and how to find the right version
    to install in order to match both the installed version of Python and the OS we
    are running.
  prefs: []
  type: TYPE_NORMAL
- en: The wxPython third-party library has been around for more than 18 years, which
    indicates that it is a robust library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to use wxPython with Python 3.7 and later, we have to install the wxPython
    Phoenix version. Here is a link to the downloads page: [https://wxpython.org/pages/downloads/](https://wxpython.org/pages/downloads/).
    We will use this link to download and install the wxPython GUI framework.
  prefs: []
  type: TYPE_NORMAL
- en: And this is a link to PyPI with good information about how to use wxPython: [https://pypi.org/project/wxPython/](https://pypi.org/project/wxPython/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While only a few years ago it was a little tricky to find the right wxPython
    version for Python 3, we can now simply use `pip`. Let''s see how in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Command Prompt or PowerShell window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `pip install wxPython`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The result should look similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52b8865c-1242-4453-a3bb-7a2e2d554e7a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify that you have a new folder named `wx` in your Python `site-packages`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6aa1996-b340-4146-b17e-fd611b147eef.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new module and call it `Hello_wxPython.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding Python 3.7 script creates the following GUI using wxPython/Phoenix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8ed2506f-82d4-41fa-a68c-da02a09d0099.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we use `pip` to install the wxPython framework. Then, we verify that
    we have the new `wx` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '`wx` is the name of the folder that the wxPython Phoenix library was installed
    into. We will import this module into our Python code using the name `wx`.'
  prefs: []
  type: TYPE_NORMAL
- en: We can verify that our installation worked by executing this simple demo script
    from the official wxPython/Phoenix website. The link to the official website is [https://wxpython.org/pages/overview/#hello-world](https://wxpython.org/pages/overview/#hello-world).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we successfully installed the correct version of the wxPython
    toolkit that we can use with Python 3.7\. We found the Phoenix project for this
    GUI toolkit, which is the current and active development line. Phoenix will replace
    the classic wxPython toolkit in time and is specifically designed to work well
    with Python 3.7.
  prefs: []
  type: TYPE_NORMAL
- en: After successfully installing the wxPython/Phoenix toolkit, we then created
    a GUI using this toolkit in only five lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: We previously achieved the same results by using `tkinter`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our GUI in wxPython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will start creating our Python GUIs using the wxPython GUI
    toolkit. We will first recreate several of the widgets we previously created using
    `tkinter`, which ships with Python. Then, we will explore some of the widgets
    the wxPython GUI toolkit offers, which are not that easy to create by using `tkinter`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous recipe showed you how to install the correct version of wxPython
    that matches both your version of Python and the OS you are running. A good place
    to start exploring the wxPython GUI toolkit is by going to the following URL:
    [http://wxpython.org/Phoenix/docs/html/gallery.html](http://wxpython.org/Phoenix/docs/html/gallery.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This web page displays many wxPython widgets and, by clicking on any of them,
    we are taken to their documentation, which is a very helpful feature if you want
    to quickly learn about a wxPython control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17476260-120b-455a-86da-3a4a4ef96824.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's now use the wxPython library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can very quickly create a working window that comes with a title, a menu
    bar, and also a status bar. This status bar displays the text of a menu item when
    hovering the mouse over it. Moving forward, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Python module and name it `wxPython_frame_GUI.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates the following GUI, which is written in Python using the wxPython
    library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/48fe8b61-d6b9-4479-8afb-30c5f82916a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new module and name it `wxPython_panel_GUI.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code and clicking our wxPython button widget results
    in the following GUI output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/69c05a45-6eb8-4e6e-8d68-4b8e1527968a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `wxPython_frame_GUI.py` code, we inherit from `wx.Frame`. In the next code,
    we inherit from `wx.Panel` and we pass in `wx.Frame` to the `__init__()` method
    of our class.
  prefs: []
  type: TYPE_NORMAL
- en: In wxPython, the top-level GUI window is called a frame. There cannot be a wxPython
    GUI without a frame, and the frame has to be created as part of a wxPython application.
    We create both the application and the frame at the bottom of our code.
  prefs: []
  type: TYPE_NORMAL
- en: In order to add widgets to our GUI, we have to attach them to a panel. The parent
    of the panel is the frame (our top-level window), and the parent of the widgets
    we place into the panel is the panel. In the `wxPython_panel_GUI.py` code, the parent is
    a `wx.Frame` we are passing into the GUI initializer. We also add a button widget
    to the panel widget, which, when clicked, prints out some text to the textbox.
  prefs: []
  type: TYPE_NORMAL
- en: We have created our own GUI in this recipe using the mature wxPython GUI toolkit.
    In only a few lines of Python code, we were able to create a fully functional
    GUI that comes with minimize, maximize, and exit buttons. We added a menu bar,
    a multi-line text control, and a button. We also created a status bar that displays
    text when we select a menu item. We placed all these widgets into a panel container
    widget. We hooked up the button to print to the text control. When hovering over
    a menu item, some text gets displayed in the status bar.
  prefs: []
  type: TYPE_NORMAL
- en: Quickly adding controls using wxPython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will recreate the GUI we originally created earlier in this
    book with `tkinter`, but this time, we will be using the wxPython library. We
    will see how easy and quick it is to use the wxPython GUI toolkit to create our
    own Python GUIs.
  prefs: []
  type: TYPE_NORMAL
- en: We will not recreate the entire functionality we created in the previous chapters.
    For example, we will not internationalize our wxPython GUI, nor connect it to
    a MySQL database. We will recreate the visual aspects of the GUI and add some
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing different libraries gives us the choice of which toolkits to use for
    our own Python GUI development, and we can combine several of those toolkits in
    our own Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure you have the wxPython module installed to follow this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how to perform this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we create our Python `OOP` class as we did before when using `tkinter`,
    but this time we inherit from and extend the `wx.Frame` class. We name the class `MainFrame`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Python module and call it `GUI_wxPython.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to create a `notebook` widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new class and name it `Widgets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add these methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `addStaticBoxWithLabels` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following methods and call them in `__init__`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'At the bottom of the module, add the code to call `MainLoop`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run `GUI_wxPython.py`. The final result of our wxPython GUI looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ca130af-7909-462d-9f27-15b61ae2c341.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we create a new Python module. For reasons of clarity, we no longer call
    our class `OOP` but, instead, rename it as `MainFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: In wxPython, the main GUI window is called a frame.
  prefs: []
  type: TYPE_NORMAL
- en: We also create a callback method that closes the GUI when we click the Exit menu
    item and declare a light-gray tuple as the background color for our GUI. We then
    add a tabbed control to our GUI by creating an instance of the wxPython `Notebook` class
    and assign it as the parent of our own custom class named `Widgets`. The `Notebook` class
    instance variable has `wx.Panel` as its parent.
  prefs: []
  type: TYPE_NORMAL
- en: In wxPython, the tabbed widget is named `Notebook`, just like in `tkinter`.
  prefs: []
  type: TYPE_NORMAL
- en: Every `Notebook` widget needs to have a parent and, in order to lay out widgets
    in the `Notebook` in wxPython, we use different kinds of sizers.
  prefs: []
  type: TYPE_NORMAL
- en: wxPython sizers are layout managers, similar to grid layout manager of `tkinter`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we add controls to our `Notebook` page, and we do this by creating a separate
    class, `Widgets`, that inherits from `wx.Panel`. We modularize our GUI code by
    breaking it into small methods, following Python OOP programming best practices,
    which keeps our code manageable and understandable.
  prefs: []
  type: TYPE_NORMAL
- en: When using wxPython `StaticBox` widgets, in order to successfully lay them out,
    we use a combination of `StaticBoxSizer` and a regular `BoxSizer`. The wxPython `StaticBox` is
    very similar to the `LabelFrame` widget of `tkinter`.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding a `StaticBox` within another `StaticBox` is straightforward in `tkinter`,
    but using wxPython is a little non-intuitive. One way to make it work is shown
    in the `addStaticBoxWithLabels` method.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we create a horizontal `BoxSizer`. Next, we create a vertical `StaticBoxSizer` because
    we want to arrange two labels in a vertical layout in this frame. In order to
    arrange another widget to the right of the embedded `StaticBox`, we have to assign
    both the embedded `StaticBox` with its children controls and the next widget to
    the horizontal `BoxSizer`. Next, we need to assign this `BoxSizer`, which now
    contains both our embedded `StaticBox` and our other widgets, to the main `StaticBox`.
  prefs: []
  type: TYPE_NORMAL
- en: Does this sound confusing?
  prefs: []
  type: TYPE_NORMAL
- en: Just experiment with these sizers to get a feel of how to use them. Start with
    the code for this recipe and comment out some code or modify some *x* and *y* coordinates
    to see the effects. It is also good to read the official wxPython documentation
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: The important thing is knowing where to add the different sizers in the code
    in order to achieve the layout we wish.
  prefs: []
  type: TYPE_NORMAL
- en: In order to create the second `StaticBox` below the first, we create separate `StaticBoxSizer` and
    assign them to the same panel. We design and lay out our wxPython GUI in several
    classes. Once we have done this, in the bottom section of our Python module, we
    create an instance of the wxPython application. Next, we instantiate our wxPython
    GUI code.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we call the main GUI event loop, which executes all of our Python
    code running within this application process. This displays our wxPython GUI.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe used OOP to show how to use the wxPython GUI toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Trying to embed a main wxPython app in a main tkinter app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created the same GUI using both Python's built-in `tkinter`
    library as well as the wxPython wrapper of the wxWidgets library, we really would
    like to combine the GUIs we created using these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Both the wxPython and the `tkinter` libraries have their own advantages. In
    online forums, such as [http://stackoverflow.com/](http://stackoverflow.com/),
    we often see questions such as which one is better, which GUI toolkit should I
    use, and so on. This suggests that we have to make an either-or decision. In reality,
    we do not have to make such a decision.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main challenges in doing so is that each GUI toolkit must have its
    own event loop. In this recipe, we will try to embed a simple wxPython GUI by
    calling it from our `tkinter` GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will reuse the `tkinter` GUI we built in the *Combo box widgets *recipe in
    Chapter 1, *Creating the GUI Form and Adding Widgets*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start from a simple `tkinter` GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and name it `Embed_wxPython.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code and observe the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c44febd-10d9-4bae-bf6e-9fd9023cef35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new function, `wxPythonApp`, and place it above the main loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code starts a wxPython GUI from our `tkinter` GUI after
    clicking the `tkinter` button control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed9f5eaf-d5f4-4d7f-ba13-3677091cc514.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we create a simple `tkinter` GUI and run it by itself. Next, we try to
    invoke a simple wxPython GUI, which we created in a previous recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a new function, `wxPythonApp`, which has the wxPython code, and we
    place it above the `tkinter` button. After that, we set the `command` attribute
    of the button to this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The important part is that we place the entire wxPython code into its own function,
    which we named `def wxPythonApp()`. In the callback function for the button-click
    event, we simply call this code.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note is that we have to close the wxPython GUI before we can continue
    using the `tkinter` GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Trying to embed our tkinter GUI code into wxPython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will go in the opposite direction of the previous recipe
    and try to call our `tkinter` GUI code from within a wxPython GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will reuse some of the wxPython GUI code we created in a previous recipe
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start from a simple wxPython GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and name it `Embed_tkinter.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code and observe the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6fb9e9b9-6499-4942-b2ac-6049b59b3e74.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the following code to the very top of the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Run the code and click the Call tkinter GUI button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `tkinter` GUI, enter some text and click the Print button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type into the wxPython `TextCtrl` widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e005ca7-8bd0-4a4e-b977-99f4d91c369b.png)'
  prefs: []
  type: TYPE_IMG
- en: Run the code and click the Call tkinter GUI button several times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type into the `tkinter` GUIs and click the Print button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea624762-f334-46f2-bcb8-1498672c97d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we went in the opposite direction of the previous recipe by
    first creating a GUI using wxPython and then, from within it, creating several
    GUI instances built using `tkinter`.
  prefs: []
  type: TYPE_NORMAL
- en: Running the `Embed_tkinter.py` code starts a `tkinter` GUI from our wxPython
    GUI after clicking the wxPython button widget. We can then enter text into the
    `tkinter` textbox and, by clicking its button, the button text gets updated with
    the name.
  prefs: []
  type: TYPE_NORMAL
- en: After starting the `tkinter` event loop, the wxPython GUI is still responsive
    because we can still type into the `TextCtrl` widget while the `tkinter` GUI is
    up and running.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous recipe, we could not use our `tkinter` GUI until we had closed
    the wxPython GUI. Being aware of this difference can help our design decisions
    if we want to combine the two Python GUI technologies.
  prefs: []
  type: TYPE_NORMAL
- en: We can also create several `tkinter` GUI instances by clicking the wxPython
    GUI button several times. We cannot, however, close the wxPython GUI while any
    `tkinter` GUIs are still running. We have to close them first.
  prefs: []
  type: TYPE_NORMAL
- en: The wxPython GUI remained responsive while one or more `tkinter` GUIs were running.
    However, clicking the `tkinter` button only updated its button text in the first
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Using Python to control two different GUI frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore ways to control the `tkinter` and wxPython GUI
    frameworks from Python. We have already used the Python threading module to keep
    our GUI responsive in [Chapter 6](802f3638-4c00-4d83-8f04-3acdb39b53ec.xhtml),
    *Threads and Networking*, so here we will attempt to use the same approach.
  prefs: []
  type: TYPE_NORMAL
- en: We will see that things don't always work in a way that would be intuitive.
    However, we will improve our `tkinter` GUI from being unresponsive while we invoke
    an instance of the wxPython GUI from within it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will extend a previous recipe from this chapter, *Trying to embed
    a main wxPython app in a main tkinter app*, in which we successfully tried to
    embed a main wxPython GUI into our `tkinter` GUI.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we created an instance of a wxPython GUI from our `tkinter` GUI, we could
    no longer use the `tkinter` GUI controls until we closed the one instance of the
    wxPython GUI. Let''s improve on this now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and name it `Control_Frameworks_NOT_working.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code. Open some wxPython GUIs and type into the `tkinter` GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d8121b9a-45da-4611-a14b-4bb191345a5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Close the GUIs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea830be4-e15a-4f17-a850-3d5b4b90fb39.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to avoid this crashing of the `Python.exe` executable process as shown
    in the preceding screenshot, instead of trying to run the entire wxPython application
    in a thread, we can change the code to make only the wxPython `app.MainLoop` run
    in a thread.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and name it `Control_Frameworks.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the following code and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Let's comprehend the steps in detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We first tried to run the entire wxPython GUI application in a thread, `Control_Frameworks_NOT_working.py`,
    but this did not work because the wxPython main event loop expects to be the main
    thread of the application.
  prefs: []
  type: TYPE_NORMAL
- en: At first, `Control_Frameworks_NOT_working.py` seems to be working, which would
    be intuitive, as the `tkinter` controls are no longer disabled and we can create
    several instances of the wxPython GUI by clicking the button. We can also type
    into the wxPython GUI and select the other `tkinter` widgets. However, once we
    try to close the GUIs, we get an error from wxWidgets and our Python executable
    crashes.
  prefs: []
  type: TYPE_NORMAL
- en: We found a workaround, `Control_Frameworks.py`, for this by only running the
    wxPython `app.MainLoop` in a thread that tricks it into believing it is the main
    thread. One side effect of this approach is that we can no longer individually
    close all of the wxPython GUI instances. At least one of them only closes when
    we close the wxPython GUI that created the threads as daemons. You can test this
    out by clicking the Call wxPython GUI button once or several times and then try
    to close all the created wxPython window forms. We cannot close the last one until
    we close the calling `tkinter` GUI!
  prefs: []
  type: TYPE_NORMAL
- en: I am not quite sure why this is. Intuitively, we might expect to be able to
    close all daemon threads without having to wait for the main thread that created
    them to close first. It possibly has to do with a reference counter not having
    been set to zero while our main thread is still running. On a pragmatic level,
    this is how it currently works.
  prefs: []
  type: TYPE_NORMAL
- en: Communicating between the two connected GUIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: lIn this recipe, we will explore ways to make the two GUIs talk to each other.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reading the previous recipe might be a good preparation for this one.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use the slightly modified GUI code with respect to the
    previous recipe, but most of the basic GUI-building code is the same.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will write Python code that makes the two GUIs communicate with each other
    to a certain degree:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and name it `Communicate.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Run the code and then perform the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click both buttons and type into the controls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f332d976-ae5e-4838-8a7f-a28dc1150470.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running the `Communicate.py` code first creates the `tkinter` part of the program,
    and when we click the button in this GUI, it runs the wxPython GUI. Both are running
    at the same time as before, but this time there is an extra level of communication
    between the two GUIs.
  prefs: []
  type: TYPE_NORMAL
- en: The `tkinter` GUI is shown on the left-hand side in the preceding screenshot,
    and by clicking the Call wxPython GUI button, we invoke an instance of the wxPython
    GUI. We can create several instances by clicking the button several times.
  prefs: []
  type: TYPE_NORMAL
- en: All of the created GUIs remain responsive. They do not crash nor freeze.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the Print button on any of the wxPython GUI instances writes one sentence
    to its own `TextCtrl` widget and then writes another line to itself, as well as
    to the `tkinter` GUI. You will have to scroll up to see the first sentence in
    the wxPython GUI.
  prefs: []
  type: TYPE_NORMAL
- en: The way this works is by using a module-level queue and a `Text` widget of `tkinter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'One important element to note is that we create a thread to run the wxPython
    `app.MainLoop`, as we did in the previous recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We created a class that inherits from `wx.Panel` and named it `GUI` and then
    instantiated an instance of this class in the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created a button-click event callback method in this class, which then calls
    the code that was written above it. Because of this, the class has access to the
    functions and can write to the shared queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We first check whether the data has been placed in the shared queue in the preceding method
    and, if that is the case, print the common data to both GUIs.
  prefs: []
  type: TYPE_NORMAL
- en: The `putDataIntoQueue()` line places data into the queue and `readDataFromQueue()`
    reads it back out, saving it in the `data` variable. `text.insert('0.0', data)`
    is the line that writes this data into the `tkinter` GUI from the Print button's
    wxPython callback method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following functions are called in the code and make it work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We used a simple boolean flag named `dataInQueue` to communicate when the data
    is available in the queue.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we have successfully combined the two GUIs we created in a similar
    fashion, but which were previously standalone and not talking to each other. However,
    in this recipe, we connected them further by making one GUI launch another and,
    via a simple multiprocessing Python queue mechanism, we were able to make them
    communicate with each other, writing data from a shared queue into both GUIs.
  prefs: []
  type: TYPE_NORMAL
- en: There are many more advanced and complicated technologies available to connect
    different processes, threads, pools, locks, pipes, TCP/IP connections, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: In the Pythonic spirit, we found a simple solution that works for us. Once our
    code becomes more complicated, we might have to refactor it, but this is a good
    beginning.
  prefs: []
  type: TYPE_NORMAL
