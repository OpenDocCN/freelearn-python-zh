- en: <st c="0">8</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">8</st>
- en: <st c="2">Implementing User Signup and Login</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">实现用户注册和登录</st>
- en: <st c="36">The next part of our app will concern user authentication, where
    we allow users to sign up and log in.</st> <st c="140">Implementing user authentication
    is famously hard.</st> <st c="191">Fortunately, we can use Django’s powerful built-in
    authentication system to take care of the many security pitfalls that could arise
    if we were to create our own user authentication</st> <st c="373">from scratch.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36">我们应用的下个部分将涉及用户认证，在这里我们允许用户注册和登录。</st> <st c="140">实现用户认证是众所周知的困难。</st>
    <st c="191">幸运的是，我们可以使用Django强大的内置认证系统来处理可能出现的许多安全陷阱，如果我们从头开始创建自己的用户认证</st> <st
    c="373">的话。</st>
- en: <st c="386">In this chapter, we will cover the</st> <st c="422">following topics:</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="386">在本章中，我们将涵盖以下主题：</st>
- en: <st c="439">Creating an</st> <st c="452">accounts app</st>
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="439">创建一个</st> <st c="452">账户应用</st>
- en: <st c="464">Creating a basic</st> <st c="482">signup page</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="464">创建一个基本的</st> <st c="482">注册页面</st>
- en: <st c="493">Improving a signup page to handle</st> `<st c="528">POST</st>` <st
    c="532">actions</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="493">改进注册页面以处理</st> `<st c="528">POST</st>` <st c="532">操作</st>
- en: <st c="540">Customizing</st> `<st c="553">UserCreationForm</st>`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="540">自定义</st> `<st c="553">UserCreationForm</st>`
- en: <st c="569">Creating a</st> <st c="581">login page</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="569">创建一个</st> <st c="581">登录页面</st>
- en: <st c="591">Implementing the</st> <st c="609">logout functionality</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="591">实现登出功能</st>
- en: <st c="629">By the end of this chapter, you will know how to implement an authentication
    system and handle common</st> <st c="732">authentication actions.</st>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="629">在本章结束时，您将了解如何实现认证系统并处理常见的</st> <st c="732">认证操作。</st>
- en: <st c="755">Technical requirements</st>
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="755">技术要求</st>
- en: <st c="778">In this chapter, we will use Python 3.10+.</st> <st c="822">Additionally,
    we will use the VS Code editor in this book, which you can download</st> <st c="904">from</st>
    [<st c="909">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="939">.</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="778">在本章中，我们将使用Python 3.10+。</st> <st c="822">此外，我们将在本书中使用VS Code编辑器，您可以从</st>
    <st c="904">这里</st> [<st c="909">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="939">下载。</st>
- en: <st c="940">The code for this chapter is located</st> <st c="978">at</st> [<st
    c="981">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter08/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter08/moviesstore)<st
    c="1089">.</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="940">本章的代码位于</st> <st c="978">此处</st> [<st c="981">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter08/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter08/moviesstore)<st
    c="1089">。</st>
- en: <st c="1090">The CiA video for this chapter can be found</st> <st c="1135">at</st>
    [<st c="1138">https://packt.link/XmYIk</st>](https://packt.link/XmYIk)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1090">本章的CiA视频可以在</st> <st c="1135">这里</st> [<st c="1138">https://packt.link/XmYIk</st>](https://packt.link/XmYIk)
- en: <st c="1162">Creating an accounts app</st>
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1162">创建一个账户应用</st>
- en: <st c="1187">The</st> <st c="1192">complete user authentication system involves
    a set of functionalities such as a signup, a login, a logout, and some validations.</st>
    <st c="1321">None of these functionalities seem to belong to our</st> *<st c="1373">home</st>*
    <st c="1377">app or</st> *<st c="1385">movies</st>* <st c="1391">app, so let’s
    separate them inside a new app.</st> <st c="1438">This new app will be</st> <st
    c="1459">called</st> `<st c="1466">accounts</st>`<st c="1474">.</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1187">完整的用户认证系统包括一系列功能，如注册、登录、登出和一些验证。</st> <st c="1321">这些功能似乎都不属于我们的</st>
    *<st c="1373">主页</st>* <st c="1377">应用或</st> *<st c="1385">电影</st>* <st c="1391">应用，因此让我们在新的应用中分离它们。</st>
    <st c="1438">这个新应用将被</st> <st c="1459">命名为</st> `<st c="1466">accounts</st>`<st
    c="1474">。</st>
- en: <st c="1475">We will follow these steps to create and configure the</st> <st
    c="1531">new app:</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1475">我们将遵循以下步骤来创建和配置新应用：</st>
- en: <st c="1539">Create an</st> <st c="1550">accounts app.</st>
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="1539">创建一个</st> <st c="1550">账户应用。</st>
- en: <st c="1563">Add the accounts app to the</st> <st c="1592">settings file.</st>
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="1563">将账户应用添加到</st> <st c="1592">设置文件中。</st>
- en: <st c="1606">Include an accounts URL file in the project-level</st> <st c="1657">URL
    file.</st>
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="1606">在项目级别的URL文件中包含一个账户URL文件。</st>
- en: <st c="1666">Let’s go through each of these steps in detail in the next</st>
    <st c="1726">few sections.</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1666">在接下来的几个部分中，我们将详细讨论这些步骤。</st>
- en: <st c="1739">Creating an accounts app</st>
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="1739">创建一个账户应用</st>
- en: <st c="1764">Navigate to the top</st> `<st c="1785">moviesstore</st>` <st c="1796">folder
    (the one that contains the</st> `<st c="1831">manage.py</st>` <st c="1840">file)
    and run the following in</st> <st c="1872">the terminal:</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1764">导航到最顶层的</st> `<st c="1785">moviesstore</st>` <st c="1796">文件夹（包含</st>
    `<st c="1831">manage.py</st>` <st c="1840">文件的文件夹）并在终端中运行以下命令：</st>
- en: <st c="1885">For macOS, run the</st> <st c="1905">following command:</st>
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1885">对于macOS，运行以下命令：</st>
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="1959">For Windows, run the</st> <st c="1981">following command:</st>
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1959">对于Windows，运行以下命令：</st>
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*<st c="2034">Figure 8</st>**<st c="2043">.1</st>* <st c="2045">shows the new
    project structure.</st> <st c="2079">Verify that it matches your current</st>
    <st c="2115">folder structure.</st>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="2034">图8</st>**<st c="2043">.1</st>* <st c="2045">显示了新的项目结构。</st> <st
    c="2079">请确认它与您的当前</st> <st c="2115">文件夹结构相匹配。</st>'
- en: '![Figure 8.1 – The MOVIESSTORE project structure containing the accounts app](img/B22457_08_1.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – 包含accounts应用的MOVIESSTORE项目结构](img/B22457_08_1.jpg)'
- en: <st c="2293">Figure 8.1 – The MOVIESSTORE project structure containing the accounts
    app</st>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2293">图8.1 – 包含accounts应用的MOVIESSTORE项目结构</st>
- en: <st c="2367">Now, let’s add</st> <st c="2383">the accounts app to the</st> <st
    c="2407">settings file.</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2367">现在，让我们将</st> <st c="2383">accounts应用添加到</st> <st c="2407">设置文件中。</st>
- en: <st c="2421">Adding the accounts app to the settings file</st>
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="2421">将accounts应用添加到设置文件中</st>
- en: <st c="2466">Remember</st> <st c="2476">that we must register each newly created
    app in the</st> `<st c="2528">settings.py</st>` <st c="2539">file.</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2466">记住</st> <st c="2476">我们必须在</st> `<st c="2528">settings.py</st>`
    <st c="2539">文件中注册每个新创建的应用。</st>
- en: <st c="2545">In</st> `<st c="2549">/moviesstore/settings.py</st>`<st c="2573">,
    under</st> `<st c="2581">INSTALLED_APPS</st>`<st c="2595">, add the following
    line</st> <st c="2620">in</st> **<st c="2623">bold</st>**<st c="2627">:</st>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2545">在</st> `<st c="2549">/moviesstore/settings.py</st>`<st c="2573">中，在</st>
    `<st c="2581">INSTALLED_APPS</st>`<st c="2595">下，添加以下加粗的</st> <st c="2620">行</st>
    <st c="2623">：</st>
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="2845">Now, let’s</st> <st c="2857">include the accounts URL file in</st>
    <st c="2890">our project.</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2845">现在，让我们将</st> <st c="2857">accounts URL文件包含到</st> <st c="2890">我们的项目中。</st>
- en: <st c="2902">Including the accounts URL file in the project-level URL file</st>
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="2902">将accounts URL文件包含到项目级别的URL文件中</st>
- en: <st c="2964">In</st> `<st c="2968">/moviesstore/urls.py</st>`<st c="2988">,
    add</st> <st c="2994">the following line that is</st> <st c="3021">in bold:</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2964">在</st> `<st c="2968">/moviesstore/urls.py</st>`<st c="2988">中，添加以下加粗的</st>
    <st c="2994">行：</st>
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="3201">All the URLs defined in the</st> `<st c="3230">accounts.urls</st>`
    <st c="3243">file will contain an</st> `<st c="3265">accounts/</st>` <st c="3274">prefix
    (as defined in the previous path).</st> <st c="3317">We will create the</st> `<st
    c="3336">accounts.urls</st>` <st c="3349">file later.</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3201">在</st> `<st c="3230">accounts.urls</st>` <st c="3243">文件中定义的所有</st>
    `<st c="3265">accounts/</st>` <st c="3274">前缀（如前一个路径中定义的）</st> <st c="3317">都将包含。</st>
    <st c="3336">稍后我们将创建</st> `<st c="3336">accounts.urls</st>` <st c="3349">文件。</st>
- en: <st c="3361">Now that we have created the accounts app, let’s create the first
    functionality, the signup page.</st>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3361">现在我们已经创建了accounts应用，让我们创建第一个功能，即注册页面。</st>
- en: <st c="3460">Creating a basic signup page</st>
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="3460">创建基本的注册页面</st>
- en: <st c="3488">The</st> <st c="3493">signup page has a complex functionality.</st>
    <st c="3534">We will need to consider many possible scenarios.</st> <st c="3584">For
    now, let’s implement a basic signup page.</st> <st c="3630">We will refactor and
    improve this functionality in the</st> <st c="3685">upcoming sections.</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3488">注册页面具有复杂的功能。</st> <st c="3534">我们需要考虑许多可能的场景。</st> <st c="3584">现在，让我们实现一个基本的注册页面。</st>
    <st c="3630">我们将在接下来的章节中重构和改进这个功能。</st>
- en: <st c="3703">To implement a basic signup page, we will follow the</st> <st c="3757">following
    steps:</st>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3703">为了实现一个基本的注册页面，我们将遵循以下</st> <st c="3757">步骤：</st>
- en: <st c="3773">Configure a</st> <st c="3786">signup URL.</st>
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3773">配置一个</st> <st c="3786">注册URL。</st>
- en: <st c="3797">Define a</st> `<st c="3807">signup</st>` <st c="3813">function.</st>
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3797">定义一个</st> `<st c="3807">注册</st>` <st c="3813">函数。</st>
- en: <st c="3823">Create an accounts</st> <st c="3843">signup template.</st>
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3823">创建一个</st> <st c="3843">accounts注册模板。</st>
- en: <st c="3859">Add a signup link to the</st> <st c="3885">base template.</st>
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3859">将注册链接添加到</st> <st c="3885">基本模板中。</st>
- en: <st c="3899">Let’s look at these steps in</st> <st c="3929">detail next.</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3899">接下来，让我们详细看看这些步骤。</st>
- en: <st c="3941">Configuring a signup URL</st>
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3941">配置注册URL</st>
- en: <st c="3966">In</st> `<st c="3970">/accounts/</st>`<st c="3980">, create</st>
    <st c="3988">a new file called</st> `<st c="4007">urls.py</st>`<st c="4014">.
    This file will contain the path relating to the URLs of the accounts app.</st>
    <st c="4090">For now, fill it in with the</st> <st c="4119">following code:</st>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3966">在</st> `<st c="3970">/accounts/</st>`<st c="3980">中，创建一个名为</st>
    `<st c="4007">urls.py</st>`<st c="4014">的新文件。这个文件将包含与账户应用URL相关的路径。</st> <st c="4090">目前，用以下代码填充它：</st>
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="4255">We defined a</st> `<st c="4269">/signup</st>` <st c="4276">path,
    but remember that the project-level URL file defined a</st> `<st c="4338">/accounts</st>`
    <st c="4347">prefix for this</st> `<st c="4364">urls.py</st>` <st c="4371">file.</st>
    <st c="4378">So, if a URL matches the</st> `<st c="4403">/accounts/signup</st>`
    <st c="4419">path, it will execute the</st> `<st c="4446">signup</st>` <st c="4452">function
    defined in the</st> `<st c="4477">views</st>` <st c="4482">file.</st> <st c="4489">Next,
    we will implement the</st> `<st c="4517">signup</st>` <st c="4523">function.</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4255">我们定义了一个</st> `<st c="4269">/signup</st>` <st c="4276">路径，但请记住，项目级别的URL文件为这个</st>
    `<st c="4364">urls.py</st>` <st c="4371">文件定义了一个</st> `<st c="4338">/accounts</st>`
    <st c="4347">前缀。</st> <st c="4378">所以，如果一个URL与</st> `<st c="4403">/accounts/signup</st>`
    <st c="4419">路径匹配，它将执行在</st> `<st c="4477">views</st>` <st c="4482">文件中定义的</st>
    `<st c="4446">signup</st>` <st c="4452">函数。</st> <st c="4489">接下来，我们将实现</st> `<st
    c="4517">signup</st>` <st c="4523">函数。</st>
- en: <st c="4533">Defining the signup function</st>
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="4533">定义注册函数</st>
- en: <st c="4562">In</st> `<st c="4566">/accounts/views.py</st>`<st c="4584">, add</st>
    <st c="4590">the following lines that are</st> <st c="4619">in bold:</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4562">在</st> `<st c="4566">/accounts/views.py</st>`<st c="4584">中，添加以下加粗的行：</st>
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="4945">Let’s explain</st> <st c="4960">the code:</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4945">让我们解释</st> <st c="4960">代码：</st>
- en: <st c="4969">We imported</st> `<st c="4982">UserCreationForm</st>`<st c="4998">,
    which is a built-in form class provided by Django.</st> <st c="5051">It is designed
    to facilitate the creation of user registration forms, specifically to create
    new user accounts.</st> <st c="5163">In Django, we can create our own HTML forms,
    use some of these Django forms, or even customize the Django forms.</st> <st c="5276">We
    will learn and use all these three approaches in</st> <st c="5328">this book.</st>
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4969">我们导入了</st> `<st c="4982">UserCreationForm</st>`<st c="4998">，这是Django提供的一个内置表单类。</st>
    <st c="5051">它旨在简化用户注册表单的创建，特别是用于创建新用户账户。</st> <st c="5163">在Django中，我们可以创建自己的HTML表单，使用这些Django表单的一些，或者甚至自定义Django表单。</st>
    <st c="5276">在这本书中，我们将学习和使用这三种方法。</st>
- en: <st c="5338">We created our</st> `<st c="5354">template_data</st>` <st c="5367">variable
    and assigned it</st> <st c="5393">a title.</st>
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5338">我们创建了我们的</st> `<st c="5354">template_data</st>` <st c="5367">变量，并给它</st>
    <st c="5393">分配了一个标题。</st>
- en: <st c="5401">Then, we checked whether the current HTTP request method is</st>
    `<st c="5462">GET</st>`<st c="5465">. If it is a</st> `<st c="5478">GET</st>`
    <st c="5481">request, it means that it’s a user navigating to the signup form
    via the</st> `<st c="5555">localhost:8000/accounts/signup</st>` <st c="5585">URL,
    in which case we simply send an instance of</st> `<st c="5635">UserCreationForm</st>`
    <st c="5651">to the template.</st> <st c="5669">Finally, we rendered the</st>
    `<st c="5694">accounts/signup.html</st>` <st c="5714">template.</st>
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5401">然后，我们检查当前的HTTP请求方法是否是</st> `<st c="5462">GET</st>`<st c="5465">。如果它是一个</st>
    `<st c="5478">GET</st>` <st c="5481">请求，这意味着用户通过</st> `<st c="5555">localhost:8000/accounts/signup</st>`
    <st c="5585">URL导航到注册表单，在这种情况下，我们只需将</st> `<st c="5635">UserCreationForm</st>`
    <st c="5651">的一个实例发送到模板。</st> <st c="5669">最后，我们渲染了</st> `<st c="5694">accounts/signup.html</st>`
    <st c="5714">模板。</st>
- en: <st c="5724">Now, let’s continue by creating the</st> <st c="5761">signup template.</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5724">现在，让我们继续创建</st> <st c="5761">注册模板。</st>
- en: <st c="5777">Creating accounts signup template</st>
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="5777">创建账户注册模板</st>
- en: <st c="5811">In</st> `<st c="5815">/accounts/</st>`<st c="5825">, create</st>
    <st c="5833">a</st> `<st c="5836">templates</st>` <st c="5845">folder.</st> <st
    c="5854">Then, in</st> `<st c="5863">/accounts/templates/</st>`<st c="5883">,
    create an</st> `<st c="5895">accounts</st>` <st c="5903">folder.</st>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5811">在</st> `<st c="5815">/accounts/</st>`<st c="5825">中，创建</st> <st
    c="5833">一个</st> `<st c="5836">templates</st>` <st c="5845">文件夹。</st> <st c="5854">然后，在</st>
    `<st c="5863">/accounts/templates/</st>`<st c="5883">中，创建一个</st> `<st c="5895">accounts</st>`
    <st c="5903">文件夹。</st>
- en: <st c="5911">Now, in</st> `<st c="5920">/accounts/templates/accounts/</st>`<st
    c="5949">, create a new</st> <st c="5963">file,</st> `<st c="5970">signup.html</st>`<st
    c="5981">. For now, fill it in with</st> <st c="6008">the following:</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="5911">现在，在</st>` `<st c="5920">/accounts/templates/accounts/</st>`
    `<st c="5949">，创建一个新文件，</st>` `<st c="5963">文件名为</st>` `<st c="5970">signup.html</st>`
    `<st c="5981">。目前，请用以下内容填充它：</st>`'
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="6482">Let’s</st> <st c="6488">explain</st> <st c="6497">this code:</st>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="6482">让我们</st>` `<st c="6488">解释</st>` `<st c="6497">这段代码：</st>`'
- en: <st c="6507">We extend the</st> `<st c="6522">base.html</st>` <st c="6531">template.</st>
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="6507">我们扩展了</st>` `<st c="6522">base.html</st>` `<st c="6531">模板。</st>`'
- en: <st c="6541">We define a heading element with the text</st> `<st c="6584">Sign
    Up</st>`<st c="6591">.</st>
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="6541">我们定义了一个文本为</st>` `<st c="6584">注册</st>` `<st c="6591">的标题元素。</st>`'
- en: <st c="6592">We define</st> `<st c="6603">form</st>` <st c="6607">with its method
    as</st> `<st c="6627">POST</st>`<st c="6631">. This means that when the form is
    submitted, the data will be sent to the current server URL using the HTTP</st>
    `<st c="6740">POST</st>` <st c="6745">method.</st>
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="6592">我们定义</st>` `<st c="6603">表单</st>` `<st c="6607">的方法为</st>` `<st
    c="6627">POST</st>` `<st c="6631">。这意味着当表单提交时，数据将通过HTTP</st>` `<st c="6740">POST</st>`
    `<st c="6745">方法发送到当前服务器URL。</st>`'
- en: <st c="6752">Inside the form, we use the DTL</st> `<st c="6785">csrf_token</st>`
    <st c="6795">template tag.</st> <st c="6810">It generates a</st> **<st c="6825">Cross-Site
    Request Forgery</st>** <st c="6851">(</st>**<st c="6853">CSRF</st>**<st c="6857">)
    token, which</st> <st c="6873">helps prevent CSRF attacks.</st> <st c="6901">It
    ensures that the form submission originates from the same site where the form
    is rendered.</st> <st c="6995">You should use this tag for all your</st> <st c="7032">Django
    forms.</st>
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单内部，我们使用DTL `<st c="6785">csrf_token</st>` `<st c="6795">模板标签。</st>` `<st
    c="6810">它生成一个</st> **<st c="6825">跨站请求伪造</st>** `<st c="6851">(</st>**<st c="6853">CSRF</st>**<st
    c="6857">) 令牌，这</st>` `<st c="6873">有助于防止CSRF攻击。</st>` `<st c="6901">它确保表单提交来自渲染表单的同一站点。</st>`
    `<st c="6995">你应该为你的所有</st>` `<st c="7032">Django表单</st>` `<st c="7036">使用此标签。</st>`
- en: <st c="7045">Inside the form, we render</st> `<st c="7073">template_data.form</st>`<st
    c="7091">, which represents the</st> `<st c="7114">UserCreationForm</st>` <st
    c="7130">instance passed from the view function.</st> `<st c="7171">.as_p</st>`
    <st c="7176">renders the form fields as HTML paragraphs (</st>`<st c="7221"><p></st>`<st
    c="7225">), with each form field wrapped in its own paragraph.</st> <st c="7280">By
    default,</st> `<st c="7292">UserCreationForm</st>` <st c="7308">contains three
    form fields –</st> `<st c="7338">username</st>`<st c="7346">,</st> `<st c="7348">password</st>`<st
    c="7356">, and</st> `<st c="7362">password confirmation</st>`<st c="7383">.</st>
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="7045">在表单内部，我们渲染</st>` `<st c="7073">template_data.form</st>` `<st
    c="7091">，它代表从视图函数传递过来的</st>` `<st c="7114">UserCreationForm</st>` `<st c="7130">实例。</st>`
    `<st c="7171">.as_p</st>` `<st c="7176">将表单字段渲染为HTML段落（</st>` `<st c="7221"><p></st>`
    `<st c="7225">），每个表单字段都包裹在其自己的段落中。</st>` `<st c="7280">默认情况下，</st>` `<st c="7292">UserCreationForm</st>`
    `<st c="7308">包含三个表单字段——</st>` `<st c="7338">用户名</st>` `<st c="7346">、</st>` `<st
    c="7348">密码</st>` `<st c="7356">和</st>` `<st c="7362">密码确认</st>` `<st c="7383">。</st>`'
- en: <st c="7384">Inside the form, we include a</st> `<st c="7415">submit</st>` <st
    c="7421">button.</st> <st c="7430">This button will direct to the current URL
    using the HTTP</st> `<st c="7488">POST</st>` <st c="7492">method.</st> <st c="7501">Currently,
    our signup view function only specifies the logic for a</st> `<st c="7568">GET</st>`
    <st c="7571">method.</st> <st c="7580">Later, we will implement the logic for
    the</st> `<st c="7623">POST</st>` <st c="7627">method.</st>
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单内部，我们包含一个`<st c="7415">submit</st>` `<st c="7421">按钮。</st>` `<st c="7430">此按钮将使用HTTP</st>`
    `<st c="7488">POST</st>` `<st c="7492">方法将用户重定向到当前URL。</st>` `<st c="7501">目前，我们的注册视图函数仅指定了</st>`
    `<st c="7568">GET</st>` `<st c="7571">方法的逻辑。</st>` `<st c="7580">稍后，我们将实现</st>`
    `<st c="7623">POST</st>` `<st c="7627">方法的逻辑。</st>`
- en: <st c="7635">Note</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="7635">注意</st>`'
- en: <st c="7640">In addition to</st> `<st c="7656">form.as_p</st>`<st c="7665">,
    there are other options to render form elements using different HTML tags.</st>
    <st c="7742">You can find more information</st> <st c="7772">here:</st> [<st c="7778">https://docs.djangoproject.com/en/5.0/ref/forms/api/#output-styles</st>](https://docs.djangoproject.com/en/5.0/ref/forms/api/#output-styles)<st
    c="7844">.</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="7640">除了</st>` `<st c="7656">form.as_p</st>` `<st c="7665">之外，还有其他选项可以用来使用不同的HTML标签渲染表单元素。</st>`
    `<st c="7742">你可以在以下位置找到更多信息：</st>` `<st c="7778">https://docs.djangoproject.com/en/5.0/ref/forms/api/#output-styles</st>`
    `[<st c="7778">https://docs.djangoproject.com/en/5.0/ref/forms/api/#output-styles</st>](https://docs.djangoproject.com/en/5.0/ref/forms/api/#output-styles)<st
    c="7844">。</st>`'
- en: <st c="7845">Now, let’s finalize by adding the signup link to the</st> <st c="7899">base
    template.</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过添加注册链接到基础模板来完成。
- en: <st c="7913">Adding the signup link to the base template</st>
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加注册链接到基础模板
- en: <st c="7957">In</st> `<st c="7961">/moviesstore/templates/base.html</st>`<st
    c="7993">, in the header section, add the following</st> <st c="8036">lines that
    are</st> <st c="8051">in bold:</st>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<st c="7961">/moviesstore/templates/base.html</st>` 中，在标题部分，添加以下粗体行：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="8429">Now, save those files, run the server, and go to</st> [<st c="8479">http://localhost:8000/accounts/signup</st>](http://localhost:8000/accounts/signup)<st
    c="8516">; you should see the new</st> *<st c="8542">signup</st>* <st c="8548">page
    (</st>*<st c="8555">Figure 8</st>**<st c="8564">.2</st>*<st c="8566">).</st>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存这些文件，运行服务器，并访问 [<st c="8479">http://localhost:8000/accounts/signup</st>](http://localhost:8000/accounts/signup)；你应该能看到新的
    *<st c="8542">注册</st>* 页面（<st c="8555">图8</st>**<st c="8564">.2</st>**）。
- en: '![Figure 8.2 – The Sign Up page](img/B22457_08_2.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 注册页面](img/B22457_08_2.jpg)'
- en: <st c="9044">Figure 8.2 – The Sign Up page</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 注册页面
- en: <st c="9073">Note that if</st> <st c="9087">you try to complete and submit the
    form, it will display an error.</st> <st c="9154">This is because we haven’t completed
    the</st> `<st c="9195">signup</st>` <st c="9201">function.</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你尝试完成并提交表单，它将显示错误。这是因为我们还没有完成 `<st c="9195">注册</st>` 函数。
- en: <st c="9211">Improving the signup page to handle POST actions</st>
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进注册页面以处理POST操作
- en: <st c="9260">When a</st> <st c="9267">user submits the signup form, we will
    have to handle the request and create a user in admin.</st> <st c="9361">To implement
    this, we will modify the</st> `<st c="9399">signup</st>` <st c="9405">function.</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交注册表单时，我们必须处理请求并在管理员中创建一个用户。为了实现这一点，我们将修改 `<st c="9399">注册</st>` 函数。
- en: <st c="9415">In</st> `<st c="9419">/accounts/views.py</st>`<st c="9437">, add
    the following lines that are</st> <st c="9472">in bold:</st>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<st c="9415">/accounts/views.py</st>` 中，添加以下粗体行：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**<st c="10083">Let’s explain</st> <st c="10097">this code:</st>'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="10083">让我们解释</st> <st c="10097">这段代码：</st>'
- en: <st c="10108">We import the</st> `<st c="10123">redirect</st>` <st c="10131">function,
    which is used to redirect the user to a different URL within</st> <st c="10203">the
    application.</st>
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们导入 `<st c="10123">redirect</st>` 函数，该函数用于在应用程序内部重定向用户到不同的URL。
- en: <st c="10219">We add an</st> `<st c="10230">elif</st>` <st c="10234">section.</st>
    <st c="10244">This section checks whether the HTTP request method is</st> `<st
    c="10299">POST</st>`<st c="10303">, indicating that the form has</st> <st c="10334">been
    submitted.</st>
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们添加一个 `<st c="10230">elif</st>` 部分。该部分检查HTTP请求方法是否为 `<st c="10299">POST</st>`，表示表单已被提交。
- en: <st c="10349">Inside the</st> `<st c="10361">elif</st>` <st c="10365">section,
    we create an instance of the</st> `<st c="10404">UserCreationForm</st>` <st c="10420">class,
    passing the data from the request’s</st> `<st c="10464">POST</st>` <st c="10468">parameters
    (</st>`<st c="10481">request.POST</st>`<st c="10494">) to populate the form fields.</st>
    <st c="10526">This initializes the form with the</st> <st c="10561">submitted
    data.</st>
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<st c="10361">elif</st>` 部分内部，我们创建一个 `<st c="10404">UserCreationForm</st>`
    类的实例，将请求的 `<st c="10464">POST</st>` 参数（<st c="10481">request.POST</st>`）传递给表单字段以填充数据。这使用提交的数据初始化表单。<st
    c="10526">这将使用提交的数据初始化表单。</st>
- en: <st c="10576">The</st> `<st c="10581">if form.is_valid()</st>` <st c="10599">checks
    whether the submitted form data is valid, according to the validation rules defined
    in the</st> `<st c="10698">UserCreationForm</st>` <st c="10714">class.</st> <st
    c="10722">These</st> <st c="10728">validations include that the two password fields
    match, the password is not common, and the username is unique,</st> <st c="10840">among
    others.</st>
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="10581">if form.is_valid()</st>` 检查提交的表单数据是否有效，根据 `<st c="10698">UserCreationForm</st>`
    类中定义的验证规则。这些验证包括两个密码字段匹配，密码不是常见的，用户名是唯一的，以及其他一些验证。'
- en: <st c="10853">If the form data is valid,</st> `<st c="10881">form.save()</st>`
    <st c="10892">saves the user data to the database.</st> <st c="10930">This means
    creating a new user account with the provided username and password.</st> <st
    c="11010">Also, we redirect the user to the</st> `<st c="11044">home</st>` <st
    c="11048">page based on the URL</st> <st c="11071">pattern name.</st>
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10853">如果表单数据有效，</st> `<st c="10881">form.save()</st>` <st c="10892">将用户数据保存到数据库。</st>
    <st c="10930">这意味着使用提供的用户名和密码创建一个新的用户账户。</st> <st c="11010">此外，我们根据URL</st> `<st
    c="11044">模式名称</st>` <st c="11048">将用户重定向到</st> `<st c="11044">主页</st>`。</st>
- en: <st c="11084">If the form data is not valid, the</st> `<st c="11120">else</st>`
    <st c="11124">section is executed, and we pass the form (including the errors)
    to the template and render the</st> `<st c="11221">accounts/signup.html</st>`
    <st c="11241">template again.</st>
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11084">如果表单数据无效，则执行</st> `<st c="11120">else</st>` <st c="11124">部分，并将表单（包括错误）传递到模板中，再次渲染</st>
    `<st c="11221">accounts/signup.html</st>` <st c="11241">模板。</st>
- en: <st c="11257">Now, run the server, and go to</st> [<st c="11289">http://localhost:8000/accounts/signup</st>](http://localhost:8000/accounts/signup)<st
    c="11326">. First, try to register a user with two passwords that don’t match
    (</st>*<st c="11395">Figure 8</st>**<st c="11404">.3</st>*<st c="11406">).</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11257">现在，运行服务器，并前往</st> [<st c="11289">http://localhost:8000/accounts/signup</st>](http://localhost:8000/accounts/signup)<st
    c="11326">。首先，尝试使用两个不匹配的密码注册用户（</st>*<st c="11395">图8</st>**<st c="11404">.3</st>*<st
    c="11406">）。</st>
- en: '![Figure 8.3 – The Sign Up page with errors](img/B22457_08_3.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – 出错的注册页面](img/B22457_08_3.jpg)'
- en: <st c="11843">Figure 8.3 – The Sign Up page with errors</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11843">图8.3 – 出错的注册页面</st>
- en: <st c="11884">Then, try to register</st> <st c="11907">a user with proper information,
    and you should be redirected to the</st> *<st c="11975">home</st>* <st c="11979">page.</st>
    <st c="11986">Then, go to</st> [<st c="11998">http://127.0.0.1:8000/admin/</st>](http://127.0.0.1:8000/admin/)<st
    c="12026">, navigate to the</st> *<st c="12044">users</st>* <st c="12049">section,
    and you should see the new user registered in the database (</st>*<st c="12119">Figure
    8</st>**<st c="12128">.4</st>*<st c="12130">).</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11884">然后，尝试使用适当的信息注册</st> <st c="11907">一个用户，你应该会被重定向到</st> *<st c="11975">主页</st>*
    <st c="11979">。</st> <st c="11986">然后，前往</st> [<st c="11998">http://127.0.0.1:8000/admin/</st>](http://127.0.0.1:8000/admin/)<st
    c="12026">，导航到</st> *<st c="12044">用户</st>* <st c="12049">部分，你应该能在数据库中看到新注册的用户（</st>*<st
    c="12119">图8</st>**<st c="12128">.4</st>*<st c="12130">）。</st>
- en: '![Figure 8.4 – The users admin page](img/B22457_08_4.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 用户管理页面](img/B22457_08_4.jpg)'
- en: <st c="12355">Figure 8.4 – The users admin page</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12355">图8.4 – 用户管理页面</st>
- en: <st c="12388">We can now</st> <st c="12400">register users.</st> <st c="12416">Now,
    let’s</st> <st c="12427">customize</st> `<st c="12437">UserCreationForm</st>`<st
    c="12453">.</st>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12388">我们现在</st> <st c="12400">可以注册用户。</st> <st c="12416">现在，让我们</st>
    <st c="12427">自定义</st> `<st c="12437">UserCreationForm</st>`<st c="12453">。</st>
- en: <st c="12454">Customizing UserCreationForm</st>
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="12454">自定义UserCreationForm</st>
- en: '`<st c="12483">UserCreationForm</st>` <st c="12500">currently</st> <st c="12511">shows
    quite a lot of additional help text (included by default) that is cluttering our
    form.</st> <st c="12604">To remedy this, we can customize</st> `<st c="12637">UserCreationForm</st>`
    <st c="12653">(which is a big topic on its own).</st> <st c="12689">Here, we will
    apply some simple modifications to improve the look and feel of our</st> <st c="12771">signup
    page.</st>'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="12483">UserCreationForm</st>` <st c="12500">当前</st> <st c="12511">显示了相当多的附加帮助文本（默认包含），这使我们的表单显得杂乱。</st>
    <st c="12604">为了解决这个问题，我们可以自定义</st> `<st c="12637">UserCreationForm</st>` <st
    c="12653">（这是一个很大的主题）。</st> <st c="12689">在这里，我们将对</st> <st c="12771">注册页面</st>
    <st c="12771">进行一些简单的修改，以改善其外观和感觉。</st>'
- en: <st c="12783">To</st> <st c="12787">implement these modifications, we will follow</st>
    <st c="12833">these steps:</st>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12783">为了</st> <st c="12787">实施这些修改，我们将遵循</st> <st c="12833">以下步骤：</st>
- en: <st c="12845">Create</st> `<st c="12853">CustomUserCreationForm</st>`<st c="12875">.</st>
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="12845">创建</st> `<st c="12853">CustomUserCreationForm</st>`<st c="12875">。</st>
- en: <st c="12876">Update the</st> `<st c="12888">signup</st>` <st c="12894">function
    to</st> <st c="12907">use</st> `<st c="12911">CustomUserCreationForm</st>`<st
    c="12933">.</st>
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="12876">更新</st> `<st c="12888">注册</st>` <st c="12894">函数以</st> <st c="12907">使用</st>
    `<st c="12911">CustomUserCreationForm</st>`<st c="12933">。</st>
- en: <st c="12934">Customize the way errors</st> <st c="12960">are displayed.</st>
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="12934">自定义错误</st> <st c="12960">显示方式。</st>
- en: <st c="12974">We will</st> <st c="12983">undertake each of these steps in detail
    in the next</st> <st c="13035">few subsections.</st>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12974">我们将在接下来的</st> <st c="12983">几个小节中详细说明这些步骤。</st>
- en: <st c="13051">Creating CustomUserCreationForm</st>
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="13051">创建 CustomUserCreationForm</st>
- en: <st c="13083">In</st> `<st c="13087">/accounts/</st>`<st c="13097">, create
    a</st> <st c="13108">new file called</st> `<st c="13124">forms.py</st>`<st c="13132">.
    This file will contain the custom forms of the</st> *<st c="13181">accounts</st>*
    <st c="13189">app.</st> <st c="13195">For now, fill it in with the</st> <st c="13224">following
    code:</st>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13083">在</st> `<st c="13087">/accounts/</st>`<st c="13097"> 中，创建一个名为</st>
    <st c="13108">new file called</st> `<st c="13124">forms.py</st>`<st c="13132">
    的新文件。这个文件将包含 *<st c="13181">accounts</st>* <st c="13189">应用的自定义表单。</st> <st c="13195">目前，用以下代码填充它：</st>
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="13611">Let’s explain</st> <st c="13626">the code:</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13611">让我们解释</st> <st c="13626">这段代码：</st>
- en: <st c="13635">We import the</st> `<st c="13650">UserCreationForm</st>` <st c="13666">class
    from Django’s</st> <st c="13687">authentication forms.</st>
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="13635">我们从 Django 的</st> `<st c="13650">UserCreationForm</st>` <st c="13666">类中导入。</st>
- en: <st c="13708">We create a new class named</st> `<st c="13737">CustomUserCreationForm</st>`<st
    c="13759">, which inherits from</st> `<st c="13781">UserCreationForm</st>`<st
    c="13797">, making it a subclass of Django’s built-in user</st> <st c="13846">creation
    form.</st>
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="13708">我们创建一个名为</st> `<st c="13737">CustomUserCreationForm</st>`<st c="13759">
    的新类，它继承自</st> `<st c="13781">UserCreationForm</st>`<st c="13797">，使其成为 Django
    内置用户</st> <st c="13846">创建表单的子类。</st>
- en: <st c="13860">We define the class constructor (the</st> `<st c="13898">__init__</st>`
    <st c="13906">method).</st> <st c="13916">The constructor calls the constructor
    of the parent class (</st>`<st c="13975">UserCreationForm</st>`<st c="13992">)
    through the</st> `<st c="14007">super</st>` <st c="14012">method.</st>
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="13860">我们定义类构造函数（即</st> `<st c="13898">__init__</st>` <st c="13906">方法）。</st>
    <st c="13916">构造函数通过</st> `<st c="14007">super</st>` <st c="14012">方法调用父类的构造函数（</st>`<st
    c="13975">UserCreationForm</st>`<st c="13992">）。</st>
- en: <st c="14020">Then, we</st> <st c="14029">iterate through the fields provided
    by</st> `<st c="14069">UserCreationForm</st>`<st c="14085">. These are</st> `<st
    c="14097">'username'</st>`<st c="14107">,</st> `<st c="14109">'password1'</st>`<st
    c="14120">, and</st> `<st c="14126">'password2'</st>`<st c="14137">. For each
    field specified in the loop, we set the</st> `<st c="14188">help_text</st>` <st
    c="14197">attribute to</st> `<st c="14211">None</st>`<st c="14215">, which removes
    any help text associated with these fields.</st> <st c="14275">Finally, for each
    field specified in the loop, we add the CSS</st> `<st c="14337">form-control</st>`
    <st c="14349">class to the field’s widget.</st> <st c="14379">This is a Bootstrap
    class that improves the look and feel of</st> <st c="14440">the fields.</st>
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="14020">然后，我们</st> <st c="14029">遍历由</st> `<st c="14069">UserCreationForm</st>`<st
    c="14085"> 提供的字段。这些是</st> `<st c="14097">'username'</st>`<st c="14107">,</st>
    `<st c="14109">'password1'</st>`<st c="14120"> 和</st> `<st c="14126">'password2'</st>`<st
    c="14137">。对于循环中指定的每个字段，我们将</st> `<st c="14188">help_text</st>` <st c="14197">属性设置为</st>
    `<st c="14211">None</st>`<st c="14215">，这将移除与这些字段关联的任何帮助文本。</st> <st c="14275">最后，对于循环中指定的每个字段，我们添加
    CSS</st> `<st c="14337">form-control</st>` <st c="14349">类到字段的控件中。</st> <st c="14379">这是一个
    Bootstrap 类，它改善了字段的视觉效果。</st>
- en: <st c="14451">Next, let’s use</st> `<st c="14468">CustomUserCreationForm</st>`
    <st c="14490">in our</st> `<st c="14498">signup</st>` <st c="14504">function.</st>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14451">接下来，让我们在我们的</st> `<st c="14498">signup</st>` <st c="14504">函数中使用</st>
    `<st c="14468">CustomUserCreationForm</st>` <st c="14490">。</st>
- en: <st c="14514">Updating the signup function to use CustomUserCreationForm</st>
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="14514">将注册功能更新为使用 CustomUserCreationForm</st>
- en: <st c="14573">Let’s use the new</st> <st c="14592">form to improve the look
    and feel of the</st> <st c="14633">signup page.</st>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14573">让我们使用这个新表单来改善注册页面的视觉效果。</st>
- en: <st c="14645">In</st> `<st c="14649">/accounts/views.py</st>`<st c="14667">,
    add the following lines that are</st> <st c="14702">in bold:</st>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<st c="14645">/accounts/views.py</st>`<st c="14667"> 中，添加以下加粗的行：</st>
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="15314">In the</st> <st c="15321">updated code, we removed the import
    of</st> `<st c="15361">UserCreationForm</st>` <st c="15377">and added the import
    of</st> `<st c="15402">CustomUserCreationForm</st>`<st c="15424">. Then, we replaced
    the calls of</st> `<st c="15457">UserCreationForm()</st>` <st c="15475">with the
    calls</st> <st c="15491">of</st> `<st c="15494">CustomUserCreationForm()</st>`<st
    c="15518">.</st>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15314">在更新的代码中，我们移除了对</st> `<st c="15361">UserCreationForm</st>` <st
    c="15377">的导入，并添加了对</st> `<st c="15402">CustomUserCreationForm</st>`<st c="15424">的导入。</st>
    然后，我们将对</st> `<st c="15457">UserCreationForm()</st>` <st c="15475">的调用替换为对</st>
    `<st c="15494">CustomUserCreationForm()</st>`<st c="15518">的调用。</st>
- en: <st c="15519">Now, save those files, run the server, go to</st> [<st c="15565">http://localhost:8000/accounts/signup</st>](http://localhost:8000/accounts/signup)<st
    c="15602">, and try to register a user with two passwords that don’t match (</st>*<st
    c="15668">Figure 8</st>**<st c="15677">.5</st>*<st c="15679">); you will see that
    the look and feel</st> <st c="15719">have improved.</st>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15519">现在，保存这些文件，运行服务器，前往</st> [<st c="15565">http://localhost:8000/accounts/signup</st>](http://localhost:8000/accounts/signup)<st
    c="15602">，并尝试使用两个不匹配的密码注册一个用户（</st>*<st c="15668">图8</st>**<st c="15677">.5</st>*<st
    c="15679">）；你会看到外观和感觉</st> <st c="15719">已经得到了改善。</st>
- en: '![Figure 8.5 – An improved Sign Up page with errors](img/B22457_08_5.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – 带有错误的改进注册页面](img/B22457_08_5.jpg)'
- en: <st c="15798">Figure 8.5 – An improved Sign Up page with errors</st>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15798">图8.5 – 带有错误的改进注册页面</st>
- en: <st c="15847">We can improve</st> <st c="15863">the way errors are displayed.</st>
    <st c="15893">So, let’s customize this in the</st> <st c="15925">next section.</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15847">我们可以改进</st> <st c="15863">错误显示的方式。</st> <st c="15893">所以，让我们在下一节中自定义它。</st>
- en: <st c="15938">Customizing the way errors are displayed</st>
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="15938">自定义错误显示方式</st>
- en: <st c="15979">Let’s customize the</st> <st c="15999">way Django forms display
    errors.</st> <st c="16033">In</st> `<st c="16036">/accounts/forms.py</st>`<st
    c="16054">, add the following lines that are</st> <st c="16089">in bold:</st>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15979">让我们自定义Django表单显示错误的方式。</st> <st c="15999">在</st> `<st c="16036">/accounts/forms.py</st>`<st
    c="16054">中，添加以下加粗的行：</st> <st c="16089">（加粗）：</st>
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="16468">Let’s explain</st> <st c="16482">the code:</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16468">让我们解释</st> <st c="16482">一下代码：</st>
- en: <st c="16492">We import the</st> `<st c="16507">ErrorList</st>` <st c="16516">class,
    which is a default class used to store and display validation error messages associated
    with</st> <st c="16617">form fields.</st>
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16492">我们导入</st> `<st c="16507">ErrorList</st>` <st c="16516">类，这是一个默认类，用于存储和显示与</st>
    <st c="16617">表单字段相关的验证错误消息。</st>
- en: <st c="16629">We import the</st> `<st c="16644">mark_safe</st>` <st c="16653">function,
    which is used to mark a string as safe for HTML rendering, indicating that it
    doesn’t contain any harmful content and should be rendered as-is</st> <st c="16807">without
    escaping.</st>
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16629">我们导入</st> `<st c="16644">mark_safe</st>` <st c="16653">函数，该函数用于将字符串标记为适合HTML渲染，表示它不包含任何有害内容，应该原样渲染，无需转义。</st>
    <st c="16807">（无需转义直接渲染）。</st>
- en: <st c="16824">We define a new class named</st> `<st c="16853">CustomErrorList</st>`<st
    c="16868">, which extends Django’s</st> `<st c="16893">ErrorList</st>` <st c="16902">class.</st>
    <st c="16910">This will be the class to define our custom error look</st> <st
    c="16965">and feel.</st>
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16824">我们定义了一个名为</st> `<st c="16853">CustomErrorList</st>`<st c="16868">的新类，它扩展了Django的</st>
    `<st c="16893">ErrorList</st>` <st c="16902">类。</st> <st c="16910">这将是我们定义自定义错误外观和感觉的类。</st>
- en: <st c="16974">We override the</st> `<st c="16991">__str__()</st>` <st c="17000">method
    of the base</st> `<st c="17020">ErrorList</st>` <st c="17029">class.</st> <st
    c="17037">If the error list is empty (i.e., there are no errors), it returns an
    empty string, indicating that no HTML should be generated.</st> <st c="17166">Otherwise,
    it defines a custom HTML code that uses</st> `<st c="17217"><div></st>` <st c="17222">elements
    and Bootstrap CSS classes to improve the way the errors are displayed.</st> <st
    c="17303">It also uses the</st> `<st c="17320">mark_safe</st>` <st c="17329">function
    to render the</st> <st c="17353">code as-is.</st>
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16974">我们重写了</st> `<st c="16991">__str__()</st>` <st c="17000">方法，这是基类</st>
    `<st c="17020">ErrorList</st>` <st c="17029">的方法。</st> <st c="17037">如果错误列表为空（即没有错误），它返回一个空字符串，表示不应生成任何HTML。</st>
    <st c="17166">否则，它定义了一个自定义HTML代码，该代码使用</st> `<st c="17217"><div></st>` <st c="17222">元素和Bootstrap
    CSS类来改进错误显示的方式。</st> <st c="17303">它还使用了</st> `<st c="17320">mark_safe</st>` <st
    c="17329">函数来渲染代码，保持原样。</st>
- en: <st c="17364">Now that we have defined this</st> `<st c="17395">CustomErrorList</st>`
    <st c="17410">class, we just need to specify to our forms that we will</st> <st
    c="17468">use it.</st>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17364">现在我们已经定义了这个</st> `<st c="17395">CustomErrorList</st>` <st c="17410">类，我们只需要指定给我们的表单我们将使用它。</st>
- en: <st c="17475">In</st> `<st c="17479">/accounts/views.py</st>`<st c="17497">,
    add the following</st> <st c="17517">in bold:</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17475">在</st> `<st c="17479">/accounts/views.py</st>`<st c="17497">中，添加以下</st>
    <st c="17517">粗体内容：</st>
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <st c="18000">We imported</st> <st c="18013">our</st> `<st c="18017">CustomErrorList</st>`
    <st c="18032">class, and we passed this class as an argument to</st> `<st c="18083">CustomUserCreationForm</st>`<st
    c="18105">. This time, if an error is found when we submit the signup form, the
    form will use our</st> `<st c="18193">CustomErrorList</st>` <st c="18208">class
    and display the errors with our custom HTML and</st> <st c="18263">CSS code.</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18000">我们导入了</st> <st c="18013">我们的</st> `<st c="18017">CustomErrorList</st>`
    <st c="18032">类，并将此类作为参数传递给</st> `<st c="18083">CustomUserCreationForm</st>`<st
    c="18105">。这次，如果在提交注册表单时发现错误，表单将使用我们的</st> `<st c="18193">CustomErrorList</st>`
    <st c="18208">类，并使用我们的自定义 HTML 和</st> <st c="18263">CSS 代码显示错误。</st>
- en: <st c="18272">Now, save those files, run the server, go to</st> [<st c="18318">http://localhost:8000/accounts/signup</st>](http://localhost:8000/accounts/signup)<st
    c="18355">, and try to register a user with two passwords that don’t match (</st>*<st
    c="18421">Figure 8</st>**<st c="18430">.6</st>*<st c="18432">); you will see that
    the look and feel</st> <st c="18472">have improved.</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18272">现在，保存这些文件，运行服务器，转到</st> [<st c="18318">http://localhost:8000/accounts/signup</st>](http://localhost:8000/accounts/signup)<st
    c="18355">，并尝试使用两个不匹配的密码注册用户（</st>*<st c="18421">图 8</st>**<st c="18430">.6</st>*<st
    c="18432">）；你会看到外观和感觉</st> <st c="18472">已经改进。</st>
- en: '![Figure 8.6 – The Sign Up page with an improved error style](img/B22457_08_6.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 改进错误样式的注册页面](img/B22457_08_6.jpg)'
- en: <st c="18581">Figure 8.6 – The Sign Up page with an improved error style</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18581">图 8.6 – 改进错误样式的注册页面</st>
- en: <st c="18639">We have improved</st> <st c="18657">the look and feel of our errors.</st>
    <st c="18690">Now, let’s implement a</st> <st c="18713">login page.</st>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18639">我们已经改进了我们的错误的外观和感觉。</st> <st c="18657">现在，让我们实现一个</st> <st c="18713">登录页面。</st>
- en: <st c="18724">Creating a login page</st>
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="18724">创建登录页面</st>
- en: <st c="18746">Let’s</st> <st c="18753">implement the login page.</st> <st c="18779">This
    time, we won’t use Django forms; we will create our own HTML form (to learn a
    new approach).</st> <st c="18877">Let’s follow the</st> <st c="18894">following
    steps:</st>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18746">让我们</st> <st c="18753">实现登录页面。</st> <st c="18779">这次，我们不会使用 Django
    表单；我们将创建自己的 HTML 表单（为了学习一种新方法）。</st> <st c="18877">让我们按照以下步骤进行：</st>
- en: <st c="18910">Configure a</st> <st c="18923">login URL.</st>
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="18910">配置登录 URL。</st>
- en: <st c="18933">Define the</st> `<st c="18945">login</st>` <st c="18950">function.</st>
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="18933">定义</st> `<st c="18945">登录</st>` <st c="18950">函数。</st>
- en: <st c="18960">Create an accounts</st> <st c="18980">login template.</st>
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="18960">创建一个账户</st> <st c="18980">登录模板。</st>
- en: <st c="18995">Add a link to the</st> <st c="19014">base template.</st>
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="18995">在基础模板中添加一个链接。</st>
- en: <st c="19028">Redirect a registered user to the</st> <st c="19063">login page.</st>
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="19028">将已注册用户重定向到</st> <st c="19063">登录页面。</st>
- en: <st c="19074">We’ll see these steps to create a login page, in depth, in the
    next</st> <st c="19143">few subsections.</st>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19074">我们将在下一章的几个小节中深入探讨创建登录页面的这些步骤。</st>
- en: <st c="19159">Configuring a login URL</st>
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="19159">配置登录 URL</st>
- en: <st c="19183">In</st> `<st c="19187">/accounts/urls.py</st>`<st c="19204">,
    add</st> <st c="19210">the following path</st> <st c="19229">in bold:</st>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19183">在</st> `<st c="19187">/accounts/urls.py</st>`<st c="19204">中，添加</st>
    <st c="19210">以下路径</st> <st c="19229">的粗体内容：</st>
- en: '[PRE13]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <st c="19410">So, if a URL matches the</st> `<st c="19435">/accounts/login</st>`
    <st c="19450">path, it will execute the</st> `<st c="19477">login</st>` <st c="19482">function
    defined in the</st> `<st c="19507">views</st>` <st c="19512">file.</st>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19410">因此，如果 URL 与</st> `<st c="19435">/accounts/login</st>` <st c="19450">路径匹配，它将执行在</st>
    `<st c="19477">views</st>` <st c="19507">文件中定义的</st> `<st c="19482">登录</st>` <st
    c="19512">函数。</st>
- en: <st c="19518">Now that we have the new path, let’s define the</st> `<st c="19567">login</st>`
    <st c="19572">function.</st>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19518">现在我们有了新的路径，让我们定义</st> `<st c="19567">登录</st>` <st c="19572">函数。</st>
- en: <st c="19582">Defining login function</st>
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="19582">定义登录函数</st>
- en: <st c="19606">In</st> `<st c="19610">/accounts/views.py</st>`<st c="19628">,
    add</st> <st c="19633">the following lines that are</st> <st c="19663">in bold:</st>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19606">在</st> `<st c="19610">/accounts/views.py</st>`<st c="19628">中，添加以下加粗的行：</st>
- en: '[PRE14]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: <st c="20434">Let’s</st> <st c="20441">explain</st> <st c="20449">the code:</st>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20434">让我们</st> <st c="20441">解释</st> <st c="20449">代码：</st>
- en: <st c="20458">We import</st> `<st c="20469">login</st>` <st c="20474">and</st>
    `<st c="20479">authenticate</st>`<st c="20491">. These are used for user authentication.</st>
    <st c="20533">We import</st> `<st c="20543">login</st>` <st c="20548">with an
    alias (</st>`<st c="20564">auth_login</st>`<st c="20575">) to avoid confusion
    with the</st> `<st c="20606">login</st>` <st c="20611">function name.</st>
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="20458">我们导入</st> `<st c="20469">login</st>` <st c="20474">和</st> `<st
    c="20479">authenticate</st>`<st c="20491">。这些用于用户认证。</st> <st c="20533">我们导入</st>
    `<st c="20543">login</st>` <st c="20548">并使用别名（</st>`<st c="20564">auth_login</st>`<st
    c="20575">）以避免与</st> `<st c="20606">login</st>` <st c="20611">函数名混淆。</st>
- en: <st c="20626">We create the</st> `<st c="20641">login</st>` <st c="20646">function.</st>
    <st c="20657">This function defines</st> `<st c="20679">template_data</st>` <st
    c="20692">and</st> <st c="20697">checks</st> `<st c="20704">request.method</st>`<st
    c="20718">.</st>
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="20626">我们创建</st> `<st c="20641">login</st>` <st c="20646">函数。</st> <st
    c="20657">此函数定义</st> `<st c="20679">template_data</st>` <st c="20692">并检查</st>
    `<st c="20697">request.method</st>`<st c="20718">。</st>
- en: <st c="20719">For</st> `<st c="20724">GET</st>` <st c="20727">requests, the
    function renders the</st> `<st c="20763">accounts/login.html</st>` <st c="20782">template.</st>
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="20719">对于</st> `<st c="20724">GET</st>` <st c="20727">请求，函数渲染</st> `<st
    c="20763">accounts/login.html</st>` <st c="20782">模板。</st>
- en: <st c="20792">For</st> `<st c="20797">POST</st>` <st c="20801">requests, the
    function attempts to authenticate the user using the provided</st> `<st c="20878">username</st>`
    <st c="20886">and</st> `<st c="20891">password</st>`<st c="20899">. If authentication
    fails, it renders the login template again with an error message.</st> <st c="20985">If
    authentication succeeds, it logs the user in and</st> <st c="21037">redirects
    them to the</st> *<st c="21059">home</st>* <st c="21063">page.</st>
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="20792">对于</st> `<st c="20797">POST</st>` <st c="20801">请求，函数尝试使用提供的</st>
    `<st c="20878">username</st>` <st c="20886">和</st> `<st c="20891">password</st>`<st
    c="20899">进行用户认证。如果认证失败，它将再次渲染带有错误信息的登录模板。</st> <st c="20985">如果认证成功，它将登录用户并将</st>
    <st c="21037">他们重定向到</st> *<st c="21059">主页</st>* <st c="21063">。</st>
- en: <st c="21069">Now, let’s create the template that requires the</st> `<st c="21119">login</st>`
    <st c="21124">function.</st>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21069">现在，让我们创建需要</st> `<st c="21119">login</st>` <st c="21124">函数的模板。</st>
- en: <st c="21134">Creating accounts login template</st>
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="21134">创建账户登录模板</st>
- en: <st c="21167">In</st> `<st c="21171">/accounts/templates/accounts/</st>`<st
    c="21200">, create a new file,</st> `<st c="21221">login.html</st>`<st c="21231">.
    This file</st> <st c="21243">contains the HTML for the login page.</st> <st c="21281">For
    now, fill</st> <st c="21295">it in with</st> <st c="21306">the following:</st>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21167">在</st> `<st c="21171">/accounts/templates/accounts/</st>`<st c="21200">中，创建一个新文件，</st>
    `<st c="21221">login.html</st>`<st c="21231">。此文件</st> <st c="21243">包含登录页面的HTML。</st>
    <st c="21281">目前，用以下内容填充</st> <st c="21295">它：</st>
- en: '[PRE15]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: <st c="22215">Let’s</st> <st c="22222">explain</st> <st c="22230">the code:</st>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22215">让我们</st> <st c="22222">解释</st> <st c="22230">代码：</st>
- en: <st c="22239">We extend the</st> `<st c="22254">base.html</st>` <st c="22263">template
    and define a heading element with the</st> <st c="22311">text</st> `<st c="22316">Login</st>`<st
    c="22321">.</st>
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="22239">我们扩展</st> `<st c="22254">base.html</st>` <st c="22263">模板并定义一个包含文本</st>
    `<st c="22311">Login</st>`<st c="22316">的标题元素。</st>
- en: <st c="22322">We check whether there is an error and, if so,</st> <st c="22370">display
    it.</st>
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="22322">我们检查是否有错误，如果有，</st> <st c="22370">则显示它。</st>
- en: <st c="22381">We create an HTML form with a</st> `<st c="22412">POST</st>` <st
    c="22416">method and the</st> `<st c="22432">csrf_token</st>` <st c="22442">token.</st>
    <st c="22450">This form contains two inputs, one for the username and another
    for the password.</st> <st c="22532">It also contains a</st> <st c="22551">submit
    button.</st>
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="22381">我们创建一个具有</st> `<st c="22412">POST</st>` <st c="22416">方法</st>
    和</st> `<st c="22432">csrf_token</st>` <st c="22442">令牌</st> 的HTML表单。</st> <st
    c="22450">此表单包含两个输入，一个用于用户名，另一个用于密码。</st> <st c="22532">它还包含一个</st> <st c="22551">提交按钮。</st>
- en: <st c="22565">Let’s continue by adding the login link to the</st> <st c="22613">base
    template.</st>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22565">让我们继续，将登录链接添加到</st> <st c="22613">基本模板。</st>
- en: <st c="22627">Adding the link to the base template</st>
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="22627">将链接添加到基本模板</st>
- en: <st c="22664">Let’s</st> <st c="22671">add the login link in the base template.</st>
    <st c="22712">In</st> `<st c="22715">/moviesstore/templates/base.html</st>`<st
    c="22747">, in the header section, add the following line that is</st> <st c="22803">in
    bold:</st>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22664">让我们</st> <st c="22671">在基本模板中添加登录链接。</st> <st c="22712">在</st>
    `<st c="22715">/moviesstore/templates/base.html</st>`<st c="22747">中，在标题部分，添加以下加粗的</st>
    <st c="22803">行：</st>
- en: '[PRE16]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: <st c="23175">Now, save</st> <st c="23185">those files, run the server, and
    go to</st> [<st c="23225">http://localhost:8000/accounts/login</st>](http://localhost:8000/accounts/login)<st
    c="23261">; you will see the new</st> **<st c="23285">Login</st>** <st c="23290">page
    (</st>*<st c="23297">Figure 8</st>**<st c="23306">.7</st>*<st c="23308">).</st>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23175">现在，保存</st> <st c="23185">这些文件，运行服务器，并访问</st> [<st c="23225">http://localhost:8000/accounts/login</st>](http://localhost:8000/accounts/login)<st
    c="23261">；您将看到新的</st> **<st c="23285">登录</st>** <st c="23290">页面（</st>*<st c="23297">图
    8</st>**<st c="23306">.7</st>*<st c="23308">）。</st>
- en: '![Figure 8.7 – The Login page](img/B22457_08_7.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – 登录页面](img/B22457_08_7.jpg)'
- en: <st c="23367">Figure 8.7 – The Login page</st>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23367">图 8.7 – 登录页面</st>
- en: <st c="23394">Now that we have a login page, let’s redirect the user to it when
    they create</st> <st c="23473">an account.</st>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23394">现在我们有了登录页面，让我们在用户创建</st> <st c="23473">账户时将其重定向到该页面。</st>
- en: <st c="23484">Redirecting a registered user to the login page</st>
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="23484">将注册用户重定向到登录页面</st>
- en: <st c="23532">Let’s finalize</st> <st c="23547">this section by redirecting
    a user who just registered to the</st> `<st c="23625">/accounts/views.py</st>`<st
    c="23643">, add the following</st> <st c="23663">in bold:</st>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23532">让我们通过将刚刚注册的用户重定向到</st> `<st c="23625">/accounts/views.py</st>`<st
    c="23643">，添加以下加粗的</st> <st c="23663">内容来结束本节：</st>
- en: '[PRE17]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: <st c="24079">We just modified the redirection to the</st> **<st c="24120">Login</st>**
    <st c="24125">page.</st> <st c="24132">Try to create a new user, and they should
    be redirected to the</st> **<st c="24195">Login</st>** <st c="24200">page.</st>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24079">我们刚刚修改了重定向到</st> **<st c="24120">登录</st>** <st c="24125">页面的操作。</st>
    <st c="24132">尝试创建一个新用户，他们应该被重定向到</st> **<st c="24195">登录</st>** <st c="24200">页面。</st>
- en: <st c="24206">Let’s finalize this chapter by implementing a</st> <st c="24253">logout
    functionality.</st>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24206">让我们通过实现</st> <st c="24253">登出功能</st>来结束这一章。
- en: <st c="24274">Implementing a logout functionality</st>
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="24274">实现登出功能</st>
- en: <st c="24310">We’ll</st> <st c="24317">follow the</st> <st c="24328">following
    steps:</st>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24310">我们将</st> <st c="24317">按照以下</st> <st c="24328">步骤进行：</st>
- en: <st c="24344">Configure a</st> <st c="24357">logout URL.</st>
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="24344">配置一个</st> <st c="24357">登出 URL。</st>
- en: <st c="24368">Define the</st> `<st c="24380">logout</st>` <st c="24386">function.</st>
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="24368">定义</st> `<st c="24380">登出</st>` <st c="24386">函数。</st>
- en: <st c="24396">Add a</st> <st c="24403">link to the</st> <st c="24415">base template.</st>
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="24396">在</st> <st c="24403">基本模板中</st> <st c="24415">添加一个</st>链接。
- en: <st c="24429">We’ll undertake these steps in the</st> <st c="24465">upcoming
    sections.</st>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24429">我们将在接下来的章节中执行这些步骤。</st>
- en: <st c="24483">Configuring a logout URL</st>
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="24483">配置登出 URL</st>
- en: <st c="24508">In</st> `<st c="24512">/accounts/urls.py</st>`<st c="24529">,
    add</st> <st c="24534">the path that is</st> <st c="24552">in bold:</st>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24508">在</st> `<st c="24512">/accounts/urls.py</st>`<st c="24529">中，添加</st>
    <st c="24534">以下加粗的</st> <st c="24552">路径：</st>
- en: '[PRE18]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: <st c="24788">Now, if a URL matches the</st> `<st c="24814">/accounts/logout</st>`
    <st c="24830">path, it will execute the</st> `<st c="24857">logout</st>` <st c="24863">function
    defined in the</st> `<st c="24888">views</st>` <st c="24893">file.</st>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24788">现在，如果 URL 与</st> `<st c="24814">/accounts/logout</st>` <st c="24830">路径匹配，它将执行在</st>
    `<st c="24857">views</st>` <st c="24863">文件中定义的</st> `<st c="24888">登出</st>` <st
    c="24893">函数。</st>
- en: <st c="24899">Defining the logout function</st>
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="24899">定义登出函数</st>
- en: <st c="24928">In</st> `<st c="24932">/accounts/views.py</st>`<st c="24950">,
    add</st> <st c="24956">the following lines that are</st> <st c="24985">in bold:</st>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24928">在</st> `<st c="24932">/accounts/views.py</st>`<st c="24950">中，添加</st>
    <st c="24956">以下加粗的</st> <st c="24985">行：</st>
- en: '[PRE19]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: <st c="25383">Let’s explain</st> <st c="25397">the code:</st>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25383">让我们解释</st> <st c="25397">以下代码：</st>
- en: <st c="25407">We import the</st> `<st c="25422">logout</st>` <st c="25428">function
    as</st> `<st c="25441">auth_logout</st>`<st c="25452">. This is used to log a</st>
    <st c="25476">user out.</st>
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="25407">我们导入</st> `<st c="25422">登出</st>` <st c="25428">函数作为</st> `<st
    c="25441">auth_logout</st>`<st c="25452">。这用于登出用户。</st>
- en: <st c="25485">We import</st> `<st c="25496">login_required</st>`<st c="25510">,
    which is a decorator to ensure that only authenticated users can access specific
    view functions.</st> <st c="25609">A Django</st> **<st c="25618">decorator</st>**
    <st c="25627">is a function that</st> <st c="25646">wraps another function or
    method to modify its behavior.</st> <st c="25704">Decorators are commonly used
    for things such as authentication, permissions,</st> <st c="25781">and logging.</st>
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="25485">我们导入了</st> `<st c="25496">login_required</st>`<st c="25510">，这是一个装饰器，用于确保只有经过身份验证的用户才能访问特定的视图函数。</st>
    <st c="25609">Django</st> **<st c="25618">装饰器</st>** <st c="25627">是一个函数，它</st>
    <st c="25646">包装另一个函数或方法以修改其行为。</st> <st c="25704">装饰器通常用于诸如认证、权限</st> <st c="25781">和日志记录等。</st>
- en: <st c="25793">We create the</st> `<st c="25808">logout</st>` <st c="25814">function,
    which uses the</st> `<st c="25840">login_required</st>` <st c="25854">decorator.</st>
    <st c="25866">This means that only authenticated users can access</st> <st c="25918">this
    function.</st>
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="25793">我们创建了一个</st> `<st c="25808">注销</st>` <st c="25814">函数，该函数使用了</st>
    `<st c="25840">login_required</st>` <st c="25854">装饰器。</st> <st c="25866">这意味着只有经过身份验证的用户才能访问</st>
    <st c="25918">此函数。</st>
- en: <st c="25932">The</st> `<st c="25937">logout</st>` <st c="25943">function calls</st>
    `<st c="25959">auth_logout</st>`<st c="25970">, which is used to log out the current
    user.</st> <st c="26015">Then, the function redirects the user to the</st> *<st
    c="26060">home</st>* <st c="26064">page.</st>
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="25932">`<st c="25937">注销</st>` <st c="25943">函数调用</st> `<st c="25959">auth_logout</st>`<st
    c="25970">，该函数用于注销当前用户。</st> <st c="26015">然后，该函数将用户重定向到</st> *<st c="26060">主页</st>*
    <st c="26064">。</st>
- en: <st c="26070">Next, let’s add the logout link to the</st> <st c="26110">base
    template.</st>
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26070">接下来，让我们将注销链接添加到</st> <st c="26110">基本模板。</st>
- en: <st c="26124">Adding the link to the base template</st>
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="26124">将链接添加到基本模板</st>
- en: <st c="26161">In</st> `<st c="26165">/moviesstore/templates/base.html</st>`<st
    c="26197">, in the header section, add the following</st> <st c="26239">lines
    that are</st> <st c="26255">in bold:</st>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26161">在</st> `<st c="26165">/moviesstore/templates/base.html</st>`<st
    c="26197">中，在标题部分，添加以下</st> <st c="26239">行，这些行是</st> <st c="26255">粗体：</st>
- en: '[PRE20]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: <st c="26718">We use a</st> <st c="26727">Django template tag that checks whether
    the user is authenticated (logged in).</st> <st c="26806">This validation comes
    from Django’s authentication system.</st> <st c="26865">If the user is authenticated,
    we display the</st> *<st c="26910">logout</st>* <st c="26916">option (which includes
    the username).</st> <st c="26955">Otherwise, we display the</st> *<st c="26981">login</st>*
    <st c="26986">and</st> *<st c="26991">sign</st>* *<st c="26996">up</st>* <st c="26998">options.</st>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26718">我们使用了一个</st> <st c="26727">Django模板标签，该标签检查用户是否经过身份验证（已登录）。</st>
    <st c="26806">这种验证来自Django的认证系统。</st> <st c="26865">如果用户经过身份验证，我们显示</st> *<st
    c="26910">注销</st>* <st c="26916">选项（包括用户名）。</st> <st c="26955">否则，我们显示</st> *<st
    c="26981">登录</st>* <st c="26986">和</st> *<st c="26991">注册</st>* *<st c="26996">选项。</st>
- en: <st c="27007">Now, save those files, run the server, and go to</st> [<st c="27057">http://localhost:8000/</st>](http://localhost:8000/)<st
    c="27079">; you will see how the navbar options change whether the user is logged
    in or not (</st>*<st c="27163">Figure 8</st>**<st c="27172">.8</st>*<st c="27174">).</st>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27007">现在，保存这些文件，运行服务器，并访问</st> [<st c="27057">http://localhost:8000/</st>](http://localhost:8000/)<st
    c="27079">；您将看到导航栏选项如何根据用户是否登录而改变（</st>*<st c="27163">图8</st>**<st c="27172">.8</st>*<st
    c="27174">）。</st>
- en: '![Figure 8.8 – The home page with the navbar updated](img/B22457_08_8.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8 – 更新后的主页](img/B22457_08_8.jpg)'
- en: <st c="27300">Figure 8.8 – The home page with the navbar updated</st>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27300">图8.8 – 更新后的主页</st>
- en: <st c="27350">We have completed our</st> <st c="27372">user signup, login, and</st>
    <st c="27397">logout system.</st>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27350">我们已经完成了</st> <st c="27372">用户注册、登录和</st> <st c="27397">注销系统。</st>
- en: <st c="27411">Summary</st>
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="27411">总结</st>
- en: <st c="27419">In this chapter, we implemented a complete authentication system.</st>
    <st c="27486">Now, users can sign up, log in, and log out.</st> <st c="27531">We
    also learned how to take advantage of some Django forms, how to create our own
    HTML forms, and how to handle validations</st> <st c="27655">and errors.</st>
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27419">在本章中，我们实现了一个完整的认证系统。</st> <st c="27486">现在，用户可以注册、登录和注销。</st>
    <st c="27531">我们还学习了如何利用一些Django表单，如何创建我们自己的HTML表单，以及如何处理验证</st> <st c="27655">和错误。</st>
- en: <st c="27666">In the next chapter, we will implement a movie</st> <st c="27714">review
    system.</st>**
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27666">在下一章中，我们将实现一个电影</st> <st c="27714">评论系统。</st>**
