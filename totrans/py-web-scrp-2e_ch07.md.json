["```py\n>>> import requests\n>>> REGISTER_URL = 'http://example.webscraping.com/user/register' \n>>> session = requests.Session() \n>>> html = session.get(REGISTER_URL)\n>>> form = parse_form(html.content) \n>>> form\n{'_formkey': '1ed4e4c4-fbc6-4d82-a0d3-771d289f8661', \n '_formname': 'register', \n '_next': '/', \n 'email': '', \n 'first_name': '', \n 'last_name': '', \n 'password': '', \n 'password_two': None, \n 'recaptcha_response_field': None} \n\n```", "```py\npip install Pillow\n\n```", "```py\nfrom io import BytesIO\nfrom lxml.html import fromstring\nfrom PIL import Image\nimport base64\n\ndef get_captcha_img(html):\n    tree = fromstring(html)\n    img_data = tree.cssselect('div#recaptcha img')[0].get('src')\n    img_data = img_data.partition(',')[-1]\n    binary_img_data = base64.b64decode(img_data)\n    img = Image.open(BytesIO(binary_img_data))\n    return img\n\n```", "```py\npip install pytesseract\n\n```", "```py\n>>> import pytesseract \n>>> img = get_captcha_img(html.content) \n>>> pytesseract.image_to_string(img) \n'' \n\n```", "```py\n>>> img.save('captcha_original.png') \n>>> gray = img.convert('L') \n>>> gray.save('captcha_gray.png') \n>>> bw = gray.point(lambda x: 0 if x < 1 else 255, '1') \n>>> bw.save('captcha_thresholded.png') \n\n```", "```py\n>>> pytesseract.image_to_string(bw) \n'strange' \n\n```", "```py\n>>> import string \n>>> word = pytesseract.image_to_string(bw) \n>>> ascii_word = ''.join(c for c in word.lower() if c in string.ascii_lowercase)\n\n```", "```py\nimport requests\nimport string\nimport pytesseract\nfrom lxml.html import fromstring\nfrom chp6.login import parse_form\nfrom chp7.image_processing import get_captcha_img, img_to_bw\n\nREGISTER_URL = 'http://example.webscraping.com/user/register'\n\ndef register(first_name, last_name, email, password):\n    session = requests.Session()\n    html = session.get(REGISTER_URL)\n    form = parse_form(html.content)\n    form['first_name'] = first_name\n    form['last_name'] = last_name\n    form['email'] = email\n    form['password'] = form['password_two'] = password\n    img = get_captcha_img(html.content)\n    captcha = ocr(img)\n    form['recaptcha_response_field'] = captcha\n    resp = session.post(html.url, form)\n    success = '/user/register' not in resp.url\n    if not success:\n        form_errors = fromstring(resp.content).cssselect('div.error')\n        print('Form Errors:')\n        print('n'.join(\n              (' {}: {}'.format(f.get('id'), f.text) for f in form_errors)))\n    return success\n\ndef ocr(img):\n    bw = img_to_bw(img)\n    captcha = pytesseract.image_to_string(bw)\n    cleaned = ''.join(c for c in captcha.lower() if c in string.ascii_lowercase)\n    if len(cleaned) != len(captcha):\n        print('removed bad characters: {}'.format(set(captcha) - set(cleaned)))\n    return cleaned\n\n```", "```py\n>>> register(first_name, last_name, email, password) \nTrue \n\n```", "```py\nimport requests\n\nAPI_URL = 'https://www.9kw.eu/index.cgi' \n\ndef send_captcha(api_key, img_data): \n    data = { \n        'action': 'usercaptchaupload', \n        'apikey': api_key, \n        'file-upload-01': img_data, \n        'base64': '1', \n        'selfsolve': '1', \n        'maxtimeout': '60',\n        'json': '1', \n    } \n    response = requests.post(API_URL, data) \n    return response.content\n\n```", "```py\ndef get_captcha_text(api_key, captcha_id): \n    data = { \n        'action': 'usercaptchacorrectdata', \n        'id': captcha_id, \n        'apikey': api_key,\n        'json': '1', \n    } \n    response = requests.get(API_URL, data)  \n    return response.content\n\n```", "```py\nimport base64\nimport re\nimport time\nimport requests\nfrom io import BytesIO\n\nclass CaptchaAPI:\n    def __init__(self, api_key, timeout=120):\n        self.api_key = api_key\n        self.timeout = timeout\n        self.url = 'https://www.9kw.eu/index.cgi'\n\n    def solve(self, img):\n        \"\"\"Submit CAPTCHA and return result when ready\"\"\"\n        img_buffer = BytesIO()\n        img.save(img_buffer, format=\"PNG\")\n        img_data = img_buffer.getvalue()\n        captcha_id = self.send(img_data)\n        start_time = time.time()\n        while time.time() < start_time + self.timeout:\n            try:\n                resp = self.get(captcha_id)\n            except CaptchaError:\n                pass # CAPTCHA still not ready\n            else:\n                if resp.get('answer') != 'NO DATA':\n                    if resp.get('answer') == 'ERROR NO USER':\n                        raise CaptchaError(\n                            'Error: no user available to solve CAPTCHA')\n                    else:\n                        print('CAPTCHA solved!')\n                        return captcha_id, resp.get('answer')\n            print('Waiting for CAPTCHA ...')\n            time.sleep(1)\n        raise CaptchaError('Error: API timeout')\n\n    def send(self, img_data):\n        \"\"\"Send CAPTCHA for solving \"\"\"\n        print('Submitting CAPTCHA')\n        data = {\n            'action': 'usercaptchaupload',\n            'apikey': self.api_key,\n            'file-upload-01': base64.b64encode(img_data),\n            'base64': '1',\n            'selfsolve': '1',\n            'json': '1',\n            'maxtimeout': str(self.timeout)\n        }\n        result = requests.post(self.url, data)\n        self.check(result.text)\n        return result.json()\n\n    def get(self, captcha_id):\n        \"\"\"Get result of solved CAPTCHA \"\"\"\n        data = {\n            'action': 'usercaptchacorrectdata',\n            'id': captcha_id,\n            'apikey': self.api_key,\n            'info': '1',\n            'json': '1',\n        }\n        result = requests.get(self.url, data)\n        self.check(result.text)\n        return result.json()\n\n    def check(self, result):\n        \"\"\"Check result of API and raise error if error code\"\"\"\n        if re.match('00dd w+', result):\n            raise CaptchaError('API error: ' + result)\n\n    def report(self, captcha_id, correct):\n        \"\"\" Report back whether captcha was correct or not\"\"\"\n        data = {\n            'action': 'usercaptchacorrectback',\n            'id': captcha_id,\n            'apikey': self.api_key,\n            'correct': (lambda c: 1 if c else 2)(correct),\n            'json': '1',\n        }\n        resp = requests.get(self.url, data)\n        return resp.json()\n\nclass CaptchaError(Exception):\n    pass\n\n```", "```py\n>>> API_KEY = ... \n>>> captcha = CaptchaAPI(API_KEY) \n>>> img = Image.open('captcha.png') \n>>> captcha_id, text = captcha.solve(img) \nSubmitting CAPTCHA \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nCAPTCHA solved! \n>>> text \njuxhvgy \n\n```", "```py\n>>> captcha_id, text = captcha.solve(img_data) \nSubmitting CAPTCHA \n>>> text \njuxhvgy \n\n```", "```py\nfrom configparser import ConfigParser\nimport requests\n\nfrom lxml.html import fromstring\nfrom chp6.login import parse_form\nfrom chp7.image_processing import get_captcha_img\nfrom chp7.captcha_api import CaptchaAPI\n\nREGISTER_URL = 'http://example.webscraping.com/user/register'\n\ndef get_api_key():\n    config = ConfigParser()\n    config.read('../config/api.cfg')\n    return config.get('captcha_api', 'key')\n\ndef register(first_name, last_name, email, password):\n    session = requests.Session()\n    html = session.get(REGISTER_URL)\n    form = parse_form(html.content)\n    form['first_name'] = first_name\n    form['last_name'] = last_name\n    form['email'] = email\n    form['password'] = form['password_two'] = password\n    api_key = get_api_key()\n    img = get_captcha_img(html.content)\n    api = CaptchaAPI(api_key)\n    captcha_id, captcha = api.solve(img)\n    form['recaptcha_response_field'] = captcha\n    resp = session.post(html.url, form)\n    success = '/user/register' not in resp.url\n    if success:\n        api.report(captcha_id, 1)\n    else:\n        form_errors = fromstring(resp.content).cssselect('div.error')\n        print('Form Errors:')\n\n        print('n'.join(\n            (' {}: {}'.format(f.get('id'), f.text) for f in form_errors)))\n        if 'invalid' in [f.text for f in form_errors]:\n            api.report(captcha_id, 0)\n    return success\n\n```", "```py\n>>> register(first_name, last_name, email, password) \nSubmitting CAPTCHA \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nWaiting for CAPTCHA ... \nTrue \n\n```"]