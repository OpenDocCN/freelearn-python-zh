["```py\nimport logging\nfrom odoo import api, fields, models\nfrom odoo.exceptions import UserError\nfrom odoo.tools.translate import _\n_logger = logging.getLogger(__name__)\nclass HostelRoom(models.Model):\n    _name = 'hostel.room'\n    _description = \"Information about hostel Room\"\n    name = fields.Char(string=\"Hostel Name\", required=True)\n    room_no = fields.Char(string=\"Room Number\", required=True)\n    other_info = fields.Text(\"Other Information\",\n                             help=\"Enter more information\")\n    description = fields.Html('Description')\n    room_rating = fields.Float('Hostel Average Rating', digits=(14, 4))\n    member_ids = fields.Many2many('hostel.room.member', string='Members')\n    state = fields.Selection([\n        ('draft', 'Unavailable'),\n        ('available', 'Available'),\n        ('closed', 'Closed')],\n        'State', default=\"draft\")\n    @api.model\n    def is_allowed_transition(self, old_state, new_state):\n        allowed = [('draft', 'available'),\n                   ('available', 'closed'),\n                   ('closed', 'draft')]\n        return (old_state, new_state) in allowed\n    def change_state(self, new_state):\n        for room in self:\n            if room.is_allowed_transition(room.state, new_state):\n                room.state = new_state\n            else:\n                message = _('Moving from %s to %s is not allowed') % (room.state, new_state)\n                raise UserError(message)\n    def make_available(self):\n        self.change_state('available')\n        return True\n    def make_closed(self):\n        self.change_state('closed')\nclass HostelRoomMember(models.Model):\n    _name = 'hostel.room.member'\n    _inherits = {'res.partner': 'partner_id'}\n    _description = \"Hostel Room member\"\n    partner_id = fields.Many2one('res.partner', ondelete='cascade')\n    date_start = fields.Date('Member Since')\n    date_end = fields.Date('Termination Date')\n    member_number = fields.Char()\n    date_of_birth = fields.Date('Date of birth')\n```", "```py\n    from . import test_hostel_room_state\n    ```", "```py\n    from odoo.tests.common import TransactionCase\n    class TestHostelRoomState(TransactionCase):\n        def setUp(self, *args, **kwargs):\n            super(TestHostelRoomState, self).setUp(*args, **kwargs)\n            self.partner_nikul = self.env['res.partner'].create({'name': 'Nikul Chaudhary'})\n            self.partner_deepak = self.env['res.partner'].create({'name': 'Deepak Ahir'})\n            self.member_ids = self.env['hostel.room.member'].create([\n                {'partner_id': self.partner_nikul.id, 'member_number': '007'},\n                {'partner_id': self.partner_deepak.id, 'member_number': '357'}])\n            self.test_hostel_room = self.env['hostel.room'].create({\n                'name': 'Hostel Room 01',\n                'room_no': '1',\n                'member_ids': [(6, 0, self.member_ids.ids)]\n            })\n        def test_button_available(self):\n            \"\"\"Make available button\"\"\"\n            self.test_hostel_room.make_available()\n            self.assertIn(self.partner_nikul, self.test_hostel_room.mapped('member_ids.partner_id'))\n            self.assertEqual(\n                self.test_hostel_room.state, 'available', 'Hostel Room state should changed to available')\n        def test_button_closed(self):\n            \"\"\"Make closed button\"\"\"\n            self.test_hostel_room.make_available()\n            self.test_hostel_room.make_closed()\n            self.assertEqual(\n                self.test_hostel_room.state, 'closed', 'Hostel Room state should changed to closed')\n    ```", "```py\n    ./odoo-bin -c server.conf -d db_name -i my_hostel --test-enable\n    ```", "```py\n    INFO test odoo.addons.my_hostel.tests.test_hostel_room_state: Starting TestHostelRoomState.test_button_available ...\n    INFO test odoo.addons.my_hostel.tests.test_hostel_room_state: Starting TestHostelRoomState.test_button_closed ...\n    INFO test odoo.modules.loading: Module my_hostel loaded in 0.31s (incl. 0.05s test), 240 queries (+33 test, +240 other)\n    ```", "```py\n    from odoo.tests.common import TransactionCase, tagged\n    @tagged('-at_install', 'post_install')\n    class TestHostelRoomState(TransactionCase):\n        def setUp(self, *args, **kwargs):\n            super(TestHostelRoomState, self).setUp(*args, **kwargs)\n            self.partner_nikul = self.env['res.partner'].create({'name': 'Nikul Chaudhary'})\n            self.partner_deepak = self.env['res.partner'].create({'name': 'Deepak Ahir'})\n            self.member_ids = self.env['hostel.room.member'].create([\n                {'partner_id': self.partner_nikul.id, 'member_number': '007'},\n                {'partner_id': self.partner_deepak.id, 'member_number': '357'}])\n            self.test_hostel_room = self.env['hostel.room'].create({\n                'name': 'Hostel Room 01',\n                'room_no': '1',\n                'member_ids': [(6, 0, self.member_ids.ids)]\n            })\n        def test_button_available(self):\n            \"\"\"Make available button\"\"\"\n            self.test_hostel_room.make_available()\n            self.assertIn(self.partner_nikul, self.test_hostel_room.mapped('member_ids.partner_id'))\n            self.assertEqual(\n                self.test_hostel_room.state, 'available', 'Hostel Room state should changed to available')\n        def test_button_closed(self):\n            \"\"\"Make closed button\"\"\"\n            self.test_hostel_room.make_available()\n            self.test_hostel_room.make_closed()\n            self.assertEqual(\n                self.test_hostel_room.state, 'closed', 'Hostel Room state should changed to closed')\n    ```", "```py\n    ./odoo-bin -c server.conf -d db_name -i my_hostel --test-enable\n    ```", "```py\n    INFO test odoo.modules.loading: Module my_hostel loaded in 0.21s, 240 queries (+240 other)\n    INFO test odoo.modules.loading: Modules loaded\n    INFO test odoo.service.server: Starting post tests\n    INFO test odoo.addons.my_hostel.tests.test_hostel_room_state: Starting TestHostelRoomState.test_button_available ...\n    INFO test odoo.addons.my_hostel.tests.test_hostel_room_state: Starting TestHostelRoomState.test_button_closed ...\n    INFO test odoo.service.server: 2 post-tests in 0.04s, 36 queries\n    INFO test odoo.tests.stats: my_hostel: 4 tests 0.04s 36 queries\n    ```", "```py\n@tagged('-standard', 'my_custom_tag')\nclass TestClass(TransactionCase):\n...\n```", "```py\n./odoo-bin -c server.conf -d db_name -i my_hostel --test-tags=my_custom_tag\n```", "```py\n./odoo-bin -c server.conf -d db_name -i my_hostel --test-tags=my_hostel\n```", "```py\napt-get install chromium-browser\n```", "```py\npip3 install websocket-client\n```", "```py\n    /** @odoo-module */\n    import { registry } from \"@web/core/registry\";\n    import { session } from \"@web/session\";\n    import { uiService } from \"@web/core/ui/ui_service\";\n    import { makeView, setupViewRegistries} from \"@web/../tests/views/helpers\";\n    import { click, getFixture, patchWithCleanup } from \"@web/../tests/helpers/utils\";\n    const serviceRegistry = registry.category(\"services\");\n    QUnit.module(\"Color Picker Widget Tests\", (hooks) => {\n        let serverData;\n        let target;\n        hooks.beforeEach(async function (assert) {\n            target = getFixture();\n            serverData = {\n                models: {\n                    'hostel.room': {\n                        fields: {\n                            name: { string: \"Hostel Name\", type: \"char\" },\n                            room_no: { string: \"Room Number\", type: \"char\" },\n                            color: { string: \"color\", type: \"integer\"},\n                        },\n                        records: [{\n                            id: 1,\n                            name: \"Hostel Room 01\",\n                            room_no: 1,\n                            color: 1,\n                        }, {\n                            id: 2,\n                            name: \"Hostel Room 02\",\n                            room_no: 2,\n                            color: 3\n                        }],\n                    },\n                },\n                views: {\n                    \"hostel.room,false,form\": `<form>\n                        <field name=\"name\"/>\n                        <field name=\"room_no\"/>\n                        <field name=\"color\" widget=\"int_color\"/>\n                    </form>`,\n                },\n            };\n            serviceRegistry.add(\"ui\", uiService);\n            setupViewRegistries();\n        });\n    ```", "```py\n        QUnit.module(\"IntColorField\");\n        QUnit.test(\"factor is applied in IntColorField\", async function (assert) {\n            const form = await makeView({\n                serverData,\n                type: \"form\",\n                resModel: \"hostel.room\",\n            });\n            assert.containsOnce(target, '.o_field_int_color');\n            assert.strictEqual(target.querySelectorAll(\".o_int_color .o_color_pill\").length, 10, \"Color picker should have 10 pills\");\n            await click(target.querySelectorAll(\".o_int_color .o_color_pill\")[3]);\n            assert.strictEqual(target.querySelector('.o_int_color .o_color_4').classList.contains(\"active\"), true, \"Click on pill should make pill active\");\n        });\n    });\n    ```", "```py\n    'assets': {\n    'web.qunit_suite_tests': [\n        'my_hostel/static/tests/**/*',\n    ],\n     },\n    ```", "```py\n./odoo-bin -c server.conf -i my_hostel,web --test-enable\n```", "```py\n... INFO test odoo.addons.web.tests.test_js.WebSuite: console log: \"Color Picker Widget Tests\" passed 2 tests.\n```", "```py\n    /** @odoo-module **/\n    import { _t } from \"@web/core/l10n/translation\";\n    import { registry } from \"@web/core/registry\";\n    import { stepUtils } from \"@web_tour/tour_service/tour_utils\";\n    import { markup } from \"@odoo/owl\";\n    registry.category(\"web_tour.tours\").add(\"hostel_tour\", {\n        url: \"/web\",\n        rainbowMan: false,\n        sequence: 20,\n        steps: () => [stepUtils.showAppsMenuItem(), {\n        trigger: '.o_app[data-menu-xmlid=\"my_hostel.hostel_base_menu\"]',\n        content: markup(_t(\"Ready to launch your <b>Hostel</b>?\")),\n        position: 'bottom',\n        edition: 'community',\n    }\n    ```", "```py\n        trigger: '.o_app[data-menu-xmlid=\"my_hostel.hostel_base_menu\"]',\n        content: markup(_t(\"Ready to launch your <b>Hostel</b>?\")),\n        position: 'bottom',\n        edition: 'enterprise',\n    }, {\n        trigger: '.o_list_button_add',\n        content: markup(_t(\"Let's create new room.\")),\n        position: 'bottom',\n    }, {\n        trigger: \".o_form_view .o_field_char[name='name']\",\n        content: markup(_t('Add a new <b> Hostel Room </b>.')),\n        position: \"top\",\n        run: function (actions) {\n        actions.text(\"Hostel Room 01\", this.$anchor.find(\"input\"));\n    },\n    }, {\n        trigger: \".ui-menu-item > a\",\n        auto: true,\n        in_modal: false,\n    }, {\n        trigger: \".breadcrumb-item:not(.active):first\",\n        content: _t(\"Click on the breadcrumb to go back to your Pipeline. Odoo will save all modifications as you navigate.\"),\n        position: \"bottom\",\n        run: function (actions) {\n        actions.auto(\".breadcrumb-item:not(.active):last\");\n    },\n    },]});\n    ```", "```py\n    'web.assets_backend': [\n    'my_hostel/static/src/js/tours/my_hostel_tour.js',\n    ],\n    ```", "```py\n    from odoo.tests.common import TransactionCase, tagged\n    from odoo.tests import HttpCase\n    @tagged('post_install', '-at_install')\n    class TestUi(HttpCase):\n        def test_01_hostel_tour(self):\n            self.start_tour(\"/web\", 'hostel_tour', login=\"admin\")\n    ```", "```py\n./odoo-bin -c server.conf -i my_hostel --test-enable\n```", "```py\n...INFO test odoo.addons.my_hostel.tests.test_tour.TestroomUI: console log: Tour hostel_tour succeeded\n```", "```py\nodoo.__DEBUG__.services['web_tour.tour'].run('hostel_tour')\n```", "```py\n    await makeView({\n        type: \"form\",\n        resModel: \"hostel.room\",\n        serverData: {\n            models: {\n                'hostel.room': {\n                    fields: {\n                        name: { string: \"Hostel Name\", type: \"char\" },\n                        room_no: { string: \"Room Number\", type: \"char\" },\n                        color: { string: \"color\", type: \"integer\"},\n                    },\n                    records: [\n                        {\n                            id: 1,\n                            name: \"Hostel Room 01\",\n                            room_no: 1,\n                            color: 1,\n                        },\n                        {\n                            id: 2,\n                            name: \"Hostel Room 02\",\n                            room_no: 2,\n                            color: 3\n                        }\n                    ],\n                },\n            },\n            views: { },\n        },\n        arch: `\n        <form>\n            <field name=\"name\"/>\n            <field name=\"room_no\"/>\n            <field name=\"color\" widget=\"int_color\"/>\n        </form>`,\n    });\n    ```", "```py\n    assert.containsN(\n                target,\n                \".o_field_int_color\",\n                1,\n                \"Both records are rendered\"\n            );\n        });\n    });\n    ```", "```py\n    apt-get install ffmpeg\n    ```", "```py\n    --screenshosts command, like this:\n\n    ```", "```py\n\n    ```", "```py\n    from . import hostel_data\n    ```", "```py\n    import logging\n    import random\n    from odoo import models\n    from odoo.tools import populate\n    _logger = logging.getLogger(__name__)\n    class RoomData(models.Model):\n        _inherit = 'hostel.room.member'\n        _populate_sizes = {'small': 10, 'medium': 100, 'large': 500}\n        _populate_dependencies = [\"res.partner\"]\n        def _populate_factories(self):\n            partner_ids = self.env.registry.populated_models['res.partner']\n            return [\n                ('partner_id', populate.randomize(partner_ids)),\n            ]\n    class HostelData(models.Model):\n        _inherit = 'hostel.room'\n        _populate_sizes = {'small': 10, 'medium': 100, 'large': 500}\n        _populate_dependencies = [\"hostel.room.member\"]\n        def _populate_factories(self):\n            member_ids = self.env.registry.populated_models['hostel.room.member']\n            def get_member_ids(values, counter, random):\n                return [\n                    (6, 0, [\n                        random.choice(member_ids) for i in range(random.randint(1, 2))\n                    ])\n                ]\n            return [\n                ('name', populate.constant('Hostel Room {counter}')),\n                ('room_no', populate.constant('{counter}')),\n                ('member_ids', populate.compute(get_member_ids)),\n            ]\n    ```", "```py\n    ./odoo-bin -c server.conf -d db_name -i my_hostel\n    ./odoo-bin populate --models=hostel.room --size=medium -c server.conf -d db_name\n    ```", "```py\nclass RoomData(models.Model):\n    _inherit = 'hostel.room.member'\n    _populate_sizes = {'small': 10, 'medium': 100, 'large': 500}\n    _populate_dependencies = [\"res.partner\"]\n    . . .\n```", "```py\npartner_ids = self.env.registry.populated_models['res.partner']\n```"]