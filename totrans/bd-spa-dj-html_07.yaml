- en: 'Chapter 5: Separating Communication in Rooms'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Channels allow us to broadcast, send, and receive asynchronous messages to/from
    all clients that belong to a group. Within a group, we cannot filter a selection
    of users. To solve this problem and create a division or categories, we must resort
    to creating new Channels and manually grouping the clients.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we can communicate with a customer who is isolated in a Channel or with
    all the customers connected to a common Channel. Now, it is time to learn how
    to control groups/Channels to separate and move customers between different groups
    as needed. You can even assign the same customer to several groups at the same
    time. For example, if we are creating a Chat, it would be useful for the user
    to be subscribed to a unique Channel to receive notifications, as well as another
    public group where all the customers can write freely, and other private groups
    where they can have conversations with other users. It makes sense for a client
    to receive or send different messages from various groups for different purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic functions for managing Channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a full Chat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can download the code for this chapter from this book’s GitHub repository:
    [https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-5](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-5).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the template we constructed in [*Chapter 4*](B18321_04_ePub.xhtml#_idTextAnchor090)*,
    Working with the Database*: [https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template)'
  prefs: []
  type: TYPE_NORMAL
- en: 'I have changed the name of the application to Chat. Ensure that the `App` folder
    is called `/app/chat/` and that `apps.py` has been renamed with its `name` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you rename an application, you must reflect this in `/project_template/settings.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'I have also changed the name of the Consumer to `ChatConsumer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In `project_template/urls.py`, you must change the View import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In `Caddyfile`, change the domain from `hello.localhost` to `chat.localhost`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, remember that whenever you change the name of the Consumer, you must
    modify `/project_template/asgi.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: With the template in place, we can now start the project, which will involve
    creating a Chat tool.
  prefs: []
  type: TYPE_NORMAL
- en: We will prepare the database with a model and generate some random users. However,
    before we continue, we must know about the functions that Channels provide for
    sending information to customers or for managing groups.
  prefs: []
  type: TYPE_NORMAL
- en: Basic functions for managing Channels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic functions for managing Channels are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`send()`: This is used to send new messages from the Consumer to a single client.
    We have used this function from the beginning of this book. However, we used the
    `JsonWebsocketConsumer` wrapper to make `send_json()` more convenient for sending
    JSON:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`group_send()`: This is used to send new messages from the Consumer to a group
    of clients that we have previously defined. It is an asynchronous function, so
    we will need the whole Consumer to be asynchronous or, preferably, use the `async_to_sync`
    function. In the following example, you can see how the `{"my_data": "hi"}` JSON
    is sent to the whole group as `"Main"`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`group_add()`: This is used to add a client to a new or existing group. The
    function is also asynchronous, so we will use `async_to_sync` again. In the following
    example, we are adding `(self.channel_name)` to a group called `"Main"`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`group_discard()`: This is used to remove a client from a group. Again, this
    is an asynchronous function, so we are forced to use `async_to_sync`. In this
    example, we have removed `(self.channel_name)` from a group called `"Main"`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With these functions, we can now dominate the world, or at least the world
    of real time. They are ideal for building a complete chat. And... why don’t we
    compete with WhatsApp or Slack? They have hundreds of the best engineers, but
    we’ll use Django here: it’s a balanced fight. We will create a piece of software
    that will use the full potential of Channels to manage different groups with the
    following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Group and public messages with no limit regarding the number of clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private messages that can be sent between two clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control over connected or disconnected clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registered users can be identified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we add the functions of Channels to those of Django, we will see that we
    have everything we need to manage the information and connect to the database.
    However, we need to learn about a few important details before connecting to Django’s
    models. How can we isolate users?
  prefs: []
  type: TYPE_NORMAL
- en: Creating a full Chat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very popular exercise when implementing WebSockets in any technology is to
    create a simple Chat. However, the difficulty increases considerably when we have
    several connected clients who are going to talk in private spaces and open groups
    so that any client can read or participate. Using Channels, we are creating a
    solid enough abstraction so that we can focus on other issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a Chat complete with modern features:'
  prefs: []
  type: TYPE_NORMAL
- en: Message history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private conversations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customers associated with a registered user in the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we must define the database. We will define the models for users, rooms,
    and messages. That way, we will be able to store the actions of each user and
    there will be a record of everything that happens.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to create some models in the database to manage
    customers, groups (which we will call rooms), and messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `/app/chat/models.py` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Client` model allows us to have a record of the users that are connected
    or disconnected. It also allows us to store the private Channel of each client
    in case we need to send them an individual message from anywhere in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '`Rooms` will be a record of all the Channels that have been created and the
    clients that are subscribed to them via the `users_subscribed` column. We must
    perform this functionality because Channels do not allow us to access this information
    unless we use a third-party extension or make a record in the database, which
    is exactly what we are doing here. We’ll use `clients_active` to know which clients
    are currently viewing the group, as they may be added, but at the same time disconnected
    or present in another room. This way, we will only send the updates or new HTML
    that’s generated with the list of messages to the active clients and not to all
    the subscribed ones. Finally, `name` will be the name of the group and `is_group`
    will mark if this is a public group with many clients (`True`) or a private room
    (`False`), which is mandatory for controlling unwanted guests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The `Message` model will be in charge of storing the Chat messages. Each element
    will have an author (who we will call `user`), a Channel where a message has been
    sent (which we will call `room`), and the text of the message itself (which we
    will call `text`). In addition, we have added `created_at` to sort the messages
    when listing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will lift `docker-compose` to carry out migrations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'With the models defined, we are going to create the migration. We need to go
    into the `django` container and look for its name. As a hint, we know that it
    will end with `_django_1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see a list of all your active containers, along with the processes
    they are running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Listing all the names of the containers after Docker is up'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.01_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Listing all the names of the containers after Docker is up
  prefs: []
  type: TYPE_NORMAL
- en: In my case, Django is `chapter-5_django_1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s enter the interactive Bash terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we can create the necessary migrations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: With the database ready, we will include some random users to differentiate
    the clients.
  prefs: []
  type: TYPE_NORMAL
- en: Generating random users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without registered users, we can’t work, so let’s create a Python script that
    makes some random data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a file called `make_fake_users.py` at the root of the project
    that contains the following content. At the moment, we will not be able to run
    it because we do not have **Faker** installed:'
  prefs: []
  type: TYPE_NORMAL
- en: Faker
  prefs: []
  type: TYPE_NORMAL
- en: Faker is a Python library for generating fake data for various uses. Among its
    most common uses, it is used to insert data into the database to develop, prototype,
    or stress test an application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Using Faker, we generate five unique emails. Then, we iterate them and create
    a unique user with a generated username and last name.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Faker, add the following line to the `requirements.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Don’t forget to recreate the Django image again so that the new dependency is
    installed from `Dockerfile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s run the Python script from Bash from the Django container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: We currently have five random users ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: With the database created and populated with data, we can focus on generating
    the HTML and its components that will make use of this information.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating HTML and styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to display some nice minimalistic HTML to make the Chat usable, although
    we won’t win the best web design of the year award.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create `app/chat/templates/index.html` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s link the future CSS and JavaScript files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s communicate the path that JavaScript will use to connect to `host`
    and check whether the connection is secure with `scheme`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding block is divided into three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<span id="logged-user"></span>`: This is used to display the client’s name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<aside id="aside"></aside>`: A component that will list the name of the groups
    and users that will be clickable to dynamically jump between Channels (or Rooms)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<main id="main"></main>`: Contains another component that will render all
    existing or new messages with the respective form to publish a new message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s create all the components. Let’s start with `/app/chat/templates/components/_aside.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: To simplify this code, we have manually typed in the names of all the groups
    where several clients will be able to speak at the same time. You are free to
    generate them from the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create `/app/chat/templates/components/_chat.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code contains the three essential parts of any self-respecting
    chat room:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the group or Channel present at the time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A form for adding new messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, the list of messages is empty. Where is the loop with the HTML template?
    To be tidy, we have placed it in another component located in `app/chat/templates/components/_list_messages.html`,
    which contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have defined all the HTML for the chat, we just need to add some
    minimal styles to give it structure.
  prefs: []
  type: TYPE_NORMAL
- en: Defining CSS styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will create a style file in `static/css/main.css` with
    a few fixes to make the future Chat more comfortable to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: 'We will prepare some colors, provide a nice typeface (if you only take one
    thing from the book, always use Helvetica), and arrange `body`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: 'We will slightly modernize the inputs and prepare a container to center the
    Chat:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s align `<aside>` and `<main>` horizontally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have fixed the browser and the links included within `<aside>` so
    that they have a clickable area that is comfortable enough to click on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we have converted each chat message into a well-delimited box with
    a border. We also horizontally aligned the input and the form button to display
    it as we are used to today.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we must create a view to render all the pieces we have created – the database,
    generated users, template, and HTML components – with a little CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There’s nothing at the root of the chat yet. Without a view and a route, the
    template cannot be served to the client. Even if we show a static template, we
    must indicate the path where it can be visited and rendered. We need a view to
    generate its presentation HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `/app/chat/views.py`, we will create a view called `index` that renders
    `index.html` with all the users, which will be displayed in `<aside>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: 'In `/project_template/urls.py`, we will add the view to be displayed when a
    visitor enters the site’s root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will open the browser we have at hand with the domain of the project.
    The address is described in the `DOMAIN` variable of the `docker-compose.yaml`
    file. If you haven’t touched the document, the address will be `http://hello.localhost`.
    In my case, I have changed it to `http://chat.localhost`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be able to see in the browser the list of groups, written manually,
    and the list of existing users. In addition, we have a form where we can write
    future messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The chat without any messages, group name, or client name'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.02_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – The chat without any messages, group name, or client name
  prefs: []
  type: TYPE_NORMAL
- en: The visual part is ready; we can now focus all our attention on the chat logic.
    We already have the body; now, we need a brain to manage the logic.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring JavaScript to listen to messages or send them
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s update the `static/js/index.js` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: 'We will connect to the backend with the WebSockets client using the `scheme`
    and `host` values we have printed in the dataset’s `<body>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s retrieve the `sendData()` function we used in the previous examples to
    send messages to the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we must declare a function to send a new message. We won’t need anything
    more than the text since I will know who the author is due to the Consumer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: The `changeGroup()` function will tell the Consumer to change the group and
    send us the HTML for the existing messages of the group. We will accompany this
    request with the dataset that stores the name of the Room to change and information
    about whether it is a multi-user group or a private conversation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final JavaScript fragment is for the backend listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: 'As in the previous examples, we will collect the JSON, parse it, and inject
    the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: 'Every time we print a list of messages or receive a new message, the scroll
    will be placed at an inappropriate height. It may not scroll at all, or it may
    hang in the middle. To fix this, after each HTML injection, we must scroll down
    to the end of the element, always displaying the last message. This is a common
    behavior in all Chats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we must reassign all the events after each render. The button that
    sends a new message, with an ID of `send` will execute `sendNewMessage()`, while
    all `<aside>` buttons will call `changeGroup()`.
  prefs: []
  type: TYPE_NORMAL
- en: With the frontend defined, it’s time to work with the Consumer. The Consumer
    is responsible for managing the database, listening to JavaScript, rendering the
    HTML, and managing the groups.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Consumer to manage groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to define what will happen when a client connects,
    disconnects, sends us the action of changing groups, or adds a new message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `app/chat/consumers.py` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s import the authentication system, User, and models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: 'The first thing we will do when we load the Consumer is delete Zombie Clients
    in case we forcefully close Django:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will accept the customer’s connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will obtain a random user who is not already registered as a customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we will identify the user. It will be easier to work with sessions than
    storing the user ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will send the name of the registered user to the frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will register the client in the database to control who is connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we will assign the `"hi"` group as the first room to be displayed
    when you enter. We have created a special function to handle some repetitive tasks
    when changing rooms. We will describe how the function works shortly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s list the messages of the room where we have just assigned the client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: 'When a client disconnects, we will perform the following three tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the client from the current room:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: 'Deregister the client:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: 'Log the user out:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: With that, we have automatically implemented a system that creates a session
    for the user, which is very handy for identifying and sending individual messages
    to the user, and also closes the user’s session when the WebSocket client disconnects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function we have used in other examples for managing frontend actions is
    useful here. The backend tasks are simple: listen for and return JSON. We will
    always use the same functions, regardless of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the action, we will do one task or the other. These are the actions
    that are requested by the frontend, such as adding a new message or listing all
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: We will only change groups if the frontend makes a request. But when will this
    request be made? When the user clicks on the name of the group where they want
    to go or on the user they want to talk to. The event will be captured by the frontend
    and the `Change group` action will be sent to the backend.
  prefs: []
  type: TYPE_NORMAL
- en: We can’t work in the same way with a user who wants to enter a private room,
    where there will only be two users, and another user who will enter a public room
    (with no limit regarding users and open messages). The code is different. To control
    this situation, we will ask the frontend to send us `isGroup`. If it’s `true`,
    it’s a public group. If it’s `false`, it is a private group between two users.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by changing groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: 'If `isGroup` is `True`, we will add the client in a multi-user room: #hi, #python...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: If `isGroup` is `False`, we will add a target user and the current user to the
    private room.
  prefs: []
  type: TYPE_NORMAL
- en: 'The major problem that we face is when two clients need to talk to each other,
    we need to ensure that we create a Room just for them. The difficulty is that
    we need to check if a Room already exists, and if it doesn’t, we need to create
    a group and then inform the participants of this when they want to connect. We
    will have to make a decision tree, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for an already created Room where both clients have already spoken in
    the past. If it exists, retrieve the name of the Room and add the client to the
    group. If it does not exist, go to *Step 2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See if the users who want to talk to each other are alone in a Room. This is
    because they have created a Room and are waiting for another user to join and
    talk to them. If not, go to *Step 3*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Room and hope that a user wants to talk to us.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we will search for rooms where both clients match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will get the client who wants to talk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: 'An existing group may be found where both the target and current clients are
    already talking. This is the most favorable case as there is a previous conversation
    where a Room has already been created. In this case, the client can be added to
    the group to talk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is no existing group, look for a room where the target user is alone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is a room, let’s join:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: 'If we have not found a room where the target user is alone, we must create
    a new room:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: 'After moving the client to another room, we need to give them feedback so that
    they know which room they are in at the moment. We will send them the name of
    the room:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have received a new message to save:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, there will be changes to show to the client, such as adding a new
    message. We will always send a list of the messages where the client is located
    so that they have the latest changes in the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: 'Whenever we want to know who we are, we can use `self.scope["user"]`. It will
    return the logged-in user object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: 'To add a user to a Room, we must do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the user client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the client from the previous room.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get or create a room.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the room has no name, it is assigned `"private_{id}"`. For example, if `id`
    is 1, it shall be `"private_1"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a client to the group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Send the group name to the client, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s describe the preceding code in more detail. There are several important
    parts to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Obtaining the name of the Room where we are active is relatively easy by filtering
    the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE521]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To remove ourselves from a group, we must do the reverse:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE522]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We get all the Rooms where we are active:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE523]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We go in and out of the Room and eliminate each other:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE524]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We remove the client from the group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE525]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We remove the client from the Room model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE526]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And the Chat is now complete. When we enter, it will render our username and
    the name of the Room where we are active. At the start of the chat, we will see
    `#hi`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Our username, which is randomly assigned when we log in, and
    the current Room'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.03_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Our username, which is randomly assigned when we log in, and the
    current Room
  prefs: []
  type: TYPE_NORMAL
- en: 'If we open a tab in another browser or use private browsing, a new random user
    will be assigned to the session, and we will be able to post to any of the groups.
    All the messages will be rendered in real time to the clients that are present
    or active in the group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Any user can write freely in the groups, without limitations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.04_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Any user can write freely in the groups, without limitations
  prefs: []
  type: TYPE_NORMAL
- en: 'If we open a third browser, we can experience private rooms or conversations
    between two clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – A private conversation between two users'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.05_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – A private conversation between two users
  prefs: []
  type: TYPE_NORMAL
- en: At any time, we can exchange messages with existing users or groups. Moreover,
    as we have a database to store the messages, even if we restart the Docker containers,
    we will always see the history with everything written, sorted by creation date.
    Here, we have a realistic Chat, with real-time response and logic in the backend.
    It’s amazing what we can achieve if we know how to use Django’s native tools and
    know how to manage Channels.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a functional chat with private rooms and groups,
    like other software such as Slack or Teams, with very few lines of JavaScript
    (no comments, less than 35 lines). In addition, we have taken the first steps
    in an authentication system. We can now register and manage clients in different
    Channels, depending on our needs, and know who is connected or disconnected. The
    magic is over – we are now masters of Channels.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [*Chapter 6*](B18321_06_ePub.xhtml#_idTextAnchor139), *Creating
    SPAs on the Backends*, we will deal with the last few elements that are necessary
    to dynamize a site, such as changing pages, deciding when we want to update a
    whole section or add a new HTML fragment, working with sessions so as not to depend
    so much on the database, and validating the origin of the data to avoid **cross-site
    request forgery** (**CSRF**) with WebSockets. With all the skills we will have
    acquired, we will develop a complete SPA by building a blog in [*Chapter 7*](B18321_07_ePub.xhtml#_idTextAnchor152),
    *Creating a Real-Time Blog Using Only Django*.
  prefs: []
  type: TYPE_NORMAL
