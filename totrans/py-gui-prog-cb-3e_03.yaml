- en: Look and Feel Customization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 界面外观定制
- en: In this chapter, we will customize some of the widgets in our GUI by changing
    some of their attributes. We will also introduce a few new widgets that `tkinter`
    offers us.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过更改一些属性来定制我们的GUI中的某些小部件。我们还将介绍一些`tkinter`提供的新的小部件。
- en: In the *Creating tooltips using Python* recipe, we will create a `ToolTip` OOP-style
    class, which will be a part of the single Python module that we have been using
    until now.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在*使用Python创建工具提示*菜谱中，我们将创建一个`ToolTip`面向对象风格的类，它将是我们至今为止使用的单个Python模块的一部分。
- en: You will learn how to create different message boxes, change the GUI window
    title, and much more. We will be using a spin box control to learn how to apply
    different styles.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何创建不同的消息框，更改GUI窗口标题，以及更多。我们将使用旋转框控件来学习如何应用不同的样式。
- en: Look and feel customization is a very important part of GUI design because it
    makes our GUI look professional.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 界面外观定制是GUI设计的重要组成部分，因为它使我们的GUI看起来更专业。
- en: 'Here is the overview of the Python modules for this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章Python模块的概述：
- en: '![](img/18e8538e-3129-4c08-89cb-6b095ad3f5a8.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/18e8538e-3129-4c08-89cb-6b095ad3f5a8.png)'
- en: 'In this chapter, we will customize our GUI using Python 3.7 and above. We will
    cover the following recipes:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Python 3.7及以上版本来定制我们的GUI。我们将涵盖以下菜谱：
- en: Creating message boxes – the information, warning, and error
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建消息框 – 信息、警告和错误
- en: How to create independent message boxes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建独立的消息框
- en: How to create the title of a tkinter window form
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建tkinter窗口的标题
- en: Changing the icon of the main root window
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改主根窗口的图标
- en: Using a spin box control
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用旋转框控件
- en: Applying relief – sunken and raised appearance of widgets
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用浮雕效果 – 小部件的凹凸外观
- en: Creating tooltips using Python
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python创建工具提示
- en: Adding Progressbar to the GUI
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将进度条添加到GUI中
- en: How to use the canvas widget
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用画布控件
- en: Creating message boxes – information, warning, and error
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建消息框 – 信息、警告和错误
- en: A message box is a pop-up window that gives feedback to the user. It can be
    informational, hinting at potential problems, as well as catastrophic errors.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 消息框是一个弹出窗口，向用户提供反馈。它可以提供信息，暗示潜在问题，以及灾难性的错误。
- en: Using Python to create message boxes is very easy.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python创建消息框非常简单。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will add functionality to the Help | About menu item we created in [Chapter
    2](7b1f337c-b9fe-4dc2-8c86-5827e7256831.xhtml), *Layout Management*, in the *Creating
    tabbed widgets* recipe.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第2章](7b1f337c-b9fe-4dc2-8c86-5827e7256831.xhtml)，*布局管理*中创建的*创建标签控件*菜单位置添加功能。
- en: The code is from `GUI_tabbed_all_widgets_both_tabs.py`. The typical feedback
    to the user when clicking the Help | About menu in most applications is informational.
    We'll start with this information and then vary the design pattern to show warnings
    and errors.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 代码来自`GUI_tabbed_all_widgets_both_tabs.py`。在大多数应用程序中，当点击帮助 | 关于菜单时，用户通常会收到信息反馈。我们将从这个信息开始，然后改变设计模式以显示警告和错误。
- en: How to do it…
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the steps to follow to create a message box in Python:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建Python中消息框的步骤：
- en: Open `GUI_tabbed_all_widgets_both_tabs.py` from [Chapter 2](7b1f337c-b9fe-4dc2-8c86-5827e7256831.xhtml),
    *Layout Management*, and save the module as `GUI_message_box.py`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[第2章](7b1f337c-b9fe-4dc2-8c86-5827e7256831.xhtml)，*布局管理*中打开`GUI_tabbed_all_widgets_both_tabs.py`，并将其模块保存为`GUI_message_box.py`。
- en: 'Add the following line of code to the top of the module where the import statements
    live:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到模块顶部的导入语句部分：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, create a callback function that will display a message box. We have to
    place the code of the callback above the code where we attach the callback to
    the menu item, because this is still procedural and not OOP code.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个回调函数，该函数将显示一个消息框。我们必须将回调函数的代码放在将回调附加到菜单项的代码之上，因为这部分仍然是过程式代码，而不是面向对象的代码。
- en: 'Add the following code just above the lines where we create the help menu:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建帮助菜单的代码上方添加以下代码：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding instructions produce the following code, `GUI_message_box.py`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述指令生成以下代码，`GUI_message_box.py`：
- en: '![](img/28d98aa7-e054-46c3-ba08-a17fcb74318d.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/28d98aa7-e054-46c3-ba08-a17fcb74318d.png)'
- en: 'Run the code. Clicking Help | About now causes the following pop-up window
    to appear:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码。现在点击帮助 | 关于将导致以下弹出窗口出现：
- en: '![](img/64be55ea-3290-4121-bf7d-7d6540f69503.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/64be55ea-3290-4121-bf7d-7d6540f69503.png)'
- en: 'Let''s transform this code into a warning message box pop-up window instead:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将此代码转换为警告消息框弹出窗口：
- en: Open `GUI_message_box.py` and save the module as `GUI_message_box_warning.py`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comment out the `msg.showinfo` line.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the information box code with warning box code:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding instructions produce the following code, `GUI_message_box_warning.py`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0050787a-2971-47f1-9783-5335fa47a496.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: 'Running the preceding code will now result in the following slightly modified
    message box:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52c12ac1-269a-42ca-b556-bd71a617151c.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: 'Displaying an error message box is simple and usually warns the user of a serious
    problem. As we did in the previous code snippet, comment out the previous line
    and add the following code, as we have done here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_message_box_warning.py` and save the module as `GUI_message_box_error.py`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the warning box code with error box code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding instructions produce the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf20f606-49f4-4023-9e81-8b5ebe273212.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: 'Run the `GUI_message_box_error.py` file. The error message looks like this:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88a22c82-c2f8-4ad9-8645-2adfde30dc41.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: There are different message boxes that display more than one OK button, and
    we can program our responses according to the user's selection.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a simple example that illustrates this technique:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_message_box_error.py` and save the module as `GUI_message_box_yes_no_cancel.py`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the error box with a `yes_no_cancel` box:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding instructions produce the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c310bfbb-14fd-4323-9ac7-6991f058776a.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: 'Run the `GUI_message_box_yes_no_cancel.py` file. Running this GUI code results
    in a popup whose user response can be used to branch on the answer of this event-driven
    GUI loop, by saving it in the `answer` variable:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d87bf0e-593c-4077-979b-6ff18e43bf5f.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'The console output using Eclipse shows that clicking the Yes button results
    in the Boolean value of `True` being assigned to the `answer` variable:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a9a8763-1907-4002-9fb6-d4883627a7e9.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'For example, we could use the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Clicking No returns `False` and Cancel returns `None`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We added another callback function to all of our `GUI_message_box` Python modules,
    `def _msgBox()`, and attached it to the Help menu `command` attribute to handle
    click events. Now, when we click the Help | About menu, an action takes place.
    We are creating and displaying the most common pop-up message box dialogs. They
    are modal, so the user can't use the GUI until they click the OK button.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: In the first example, we display an information box, as can be seen by the icon
    to its left. Next, we create warning and error message boxes, which automatically
    change the icon associated with the popup. All we have to do is specify which
    message box we want to display.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: The `askyesnocancel` message box returns a different value depending on which
    button the user clicked. We can capture the answer in a variable and write different
    code according to which answer was selected.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create message boxes. Now, let's move on to
    the next recipe.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功学习了如何创建消息框。现在，让我们继续学习下一个技巧。
- en: How to create independent message boxes
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建独立的消息框
- en: In this recipe, we will create our `tkinter` message boxes as standalone top-level
    GUI windows.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个技巧中，我们将创建我们的`tkinter`消息框作为独立的顶级GUI窗口。
- en: You will first notice that, by doing so, we end up with an extra window, so
    we will explore ways to hide this window.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先会注意到，这样做会导致一个额外的窗口，所以我们将探讨隐藏这个窗口的方法。
- en: In the previous recipe, we invoked `tkinter` message boxes via our Help | About
    menu from our main GUI form.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的技巧中，我们通过主GUI表中的帮助 | 关于菜单调用了`tkinter`消息框。
- en: So, why would we wish to create an independent message box?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们为什么想要创建一个独立的消息框呢？
- en: One reason is that we might customize our message boxes and reuse them in several
    of our GUIs. Instead of having to copy and paste the same code into every Python
    GUI we design, we can factor it out of our main GUI code. This creates a small
    reusable component, which we can then import into different Python GUIs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一个原因是我们可能需要自定义我们的消息框并在多个GUI中重用它们。我们不需要在设计的每个Python GUI中复制和粘贴相同的代码，我们可以将其从主GUI代码中提取出来。这创建了一个小的可重用组件，然后我们可以将其导入到不同的Python
    GUI中。
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We have already created the title of a message box in the previous recipe, *Creating
    message boxes - information, warning, and error*. We will not reuse the code from
    the previous recipe, but build a new GUI using very few lines of Python code.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的技巧中，我们已经创建了消息框的标题，*创建消息框 - 信息、警告和错误*。我们不会重用之前的代码，而是使用非常少的Python代码构建一个新的GUI。
- en: How to do it…
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We can create a simple message box as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个简单的消息框如下：
- en: Create a new module and save it as `GUI_independent_msg.py`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模块并将其保存为`GUI_independent_msg.py`。
- en: 'Add the following two lines of code, which is all that is required:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下两行代码，这就是所有需要做的：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the `GUI_independent_msg.py` file. This will result in the following two
    windows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`GUI_independent_msg.py`文件。这将导致以下两个窗口：
- en: '![](img/afd77050-64af-429a-88de-abb9620e3946.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/afd77050-64af-429a-88de-abb9620e3946.png)'
- en: This does not look like what we had in mind. Now, we have two windows, one undesired
    and the second with its text displayed as its title.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来并不像我们想象中的样子。现在，我们有两个窗口，一个是我们不想要的，另一个窗口显示其文本作为标题。
- en: Oops!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！
- en: 'Let''s solve this now. We can change the Python code by adding a single or
    double quote followed by a comma:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在解决这个问题。我们可以通过添加一个单引号或双引号后跟一个逗号来更改Python代码：
- en: Open `GUI_independent_msg.py` and save the module as `GUI_independent_msg_info.py`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_independent_msg.py`并将模块保存为`GUI_independent_msg_info.py`。
- en: 'Create an empty title:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空标题：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the `GUI_independent_msg_info.py` file. Now, we do not have a title but
    our text ended up inside the popup, as we had intended:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`GUI_independent_msg_info.py`文件。现在，我们没有标题，但我们的文本最终出现在弹出窗口中，正如我们预期的：
- en: '![](img/36de33c1-8ece-493b-82cf-62230843dcca.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/36de33c1-8ece-493b-82cf-62230843dcca.png)'
- en: The first parameter is the title and the second is the text displayed in the
    pop-up message box. By adding an empty pair of single or double quotes followed
    by a comma, we can move our text from the title into the pop-up message box.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是标题，第二个参数是在弹出消息框中显示的文本。通过添加一个空的单引号或双引号后跟一个逗号，我们可以将我们的文本从标题移动到弹出消息框中。
- en: We still need a title, and we definitely want to get rid of this unnecessary
    second window. The second window is caused by a Windows event loop. We can get
    rid of it by suppressing it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要一个标题，我们肯定希望去掉这个不必要的第二个窗口。第二个窗口是由Windows事件循环引起的。我们可以通过抑制它来去掉它。
- en: 'Add the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: Open `GUI_independent_msg_info.py` and save the module as `GUI_independent_msg_one_window.py`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_independent_msg_info.py`并将模块保存为`GUI_independent_msg_one_window.py`。
- en: 'Import `Tk` create an instance of the `Tk` class, and call the `withdraw` method:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Tk`创建`Tk`类的一个实例，并调用`withdraw`方法：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, we have only one window. The `withdraw()` method removes the debug window
    that we are not interested in having floating around.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只有一个窗口。`withdraw()`方法移除了我们不感兴趣的浮动调试窗口。
- en: 'Run the code. This will result in the following window:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码。这将导致以下窗口：
- en: '![](img/481e33e2-7b2a-4c67-9cbb-ee98637a4b1c.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/481e33e2-7b2a-4c67-9cbb-ee98637a4b1c.png)'
- en: In order to add a title, all we have to do is place string into our empty first
    argument.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加一个标题，我们只需要将字符串放入我们的第一个空参数中。
- en: 'For example, consider the following code snippet:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下代码片段：
- en: Open `GUI_independent_msg_one_window.py` and save the module as `GUI_independent_msg_one_window_title.py`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give it a title by adding some words into the first argument position:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding instructions produce the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b06f5d7c-5b71-43f8-89ab-22842eae8f64.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Run the `GUI_independent_msg_one_window_title.py` file. Now, our dialog has
    a title, as shown in the following screenshot:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca81f67a-b6b1-43c3-8b44-064861532493.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We pass more arguments into the `tkinter` constructor of the message box to
    add a title to the window form and display the text in the message box instead
    of displaying it as its title. This happens due to the position of the arguments
    we pass. If we leave out an empty quote or a double quote, then the message box
    widget takes the first position of the arguments as the title, not the text to
    be displayed within the message box. By passing an empty quote followed by a comma,
    we change where the message box displays the text we pass into the function.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: We suppress the second pop-up window, which automatically gets created by the
    `tkinter` message box widget, by calling the `withdraw()` method on our main root
    window.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: By adding some words into the previously empty string, we give our message box
    a title. This shows that the different message boxes, in addition to the main
    message they are displaying, have their own custom title. This can be useful to
    relate several different message boxes to the same functionality.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create independent message boxes. Now, let's
    move on to the next recipe.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: How to create the title of a tkinter window form
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The principle of changing the title of a `tkinter` main root window is the
    same as we discussed in the previous recipe: *How to create independent message
    boxes*. We just pass in a string as the first argument to the constructor of the
    widget.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of a pop-up dialog window, we create the main root window and give it
    a title.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code creates the main window and adds a title to it. We have
    already done this in the previous recipes; for example, in the *Creating tabbed
    widgets* recipe, in [Chapter 2](7b1f337c-b9fe-4dc2-8c86-5827e7256831.xhtml), *Layout
    Management*. Here, we just focus on this aspect of our GUI:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_tabbed_all_widgets_both_tabs.py` and save the module as `GUI_title.py`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give the main window a title:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the `GUI_title.py` file. This will result in the following two tabs:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3aed194-0b6e-43c9-ac5b-ee218f143ce6.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This gives a title to the main root window by using the built-in the `title`
    attribute of `tkinter`. After we create a `Tk()` instance, we can use all the
    built-in `tkinter` attributes to customize our GUI.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create a title for a `tkinter` window form.
    Now, let's move on to the next recipe.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功学习了如何为`tkinter`窗口表单创建标题。现在，让我们继续下一个菜谱。
- en: Changing the icon of the main root window
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改主根窗口的图标
- en: One way to customize our GUI is to give it an icon different from the default
    icon that ships out of the box with `tkinter`. Here is how we do this.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 定制我们的GUI的一种方法是为它提供一个与`tkinter`默认图标不同的图标。以下是我们的操作方法。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are improving our GUI from the *Creating tabbed widgets* recipe in [Chapter
    2](7b1f337c-b9fe-4dc2-8c86-5827e7256831.xhtml), *Layout Management*. We will use
    an icon that ships with Python, but you can use any icon you find useful. Make
    sure you have the full path to where the icon lives in your code, or you might
    get errors.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在改进我们的GUI，这是从[第2章](7b1f337c-b9fe-4dc2-8c86-5827e7256831.xhtml)的*创建标签式小部件*菜谱中，*布局管理*。我们将使用Python附带的图标，但你也可以使用任何你认为有用的图标。确保你有图标所在位置的完整路径，否则可能会出错。
- en: How to do it…
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For this example, I have copied the icon from where I installed Python 3.7
    to the same folder where the code lives. The following screenshot shows the icon
    that we will be using:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我已经将图标从安装Python 3.7的地方复制到代码所在的同一文件夹中。以下截图显示了我们将要使用的图标：
- en: '![](img/5a8a7192-d0f7-4e3b-938c-60f9daacbfac.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a8a7192-d0f7-4e3b-938c-60f9daacbfac.png)'
- en: 'In order to use this or another icon file, perform the following steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用此图标或其他图标文件，请执行以下步骤：
- en: Open `GUI_title.py` and save the module as `GUI_icon.py`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_title.py`并将模块保存为`GUI_icon.py`。
- en: 'Place the following code above the main event loop:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码放置在主事件循环之上：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the `GUI_icon.py` file. Observe how the feather default icon in the top-left
    corner of the GUI changed:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`GUI_icon.py`文件。观察GUI左上角的默认羽毛图标是如何改变的：
- en: '![](img/4f30c653-1a64-4125-b9b9-c239f4b9370a.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f30c653-1a64-4125-b9b9-c239f4b9370a.png)'
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解代码，以更好地理解它。
- en: How it works…
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is another attribute that ships with `tkinter`, which ships with Python
    3.7 and above. We use the `iconbitmap` attribute to change the icon of our main
    root window form, by passing in a relative path to an icon. This overrides the
    default icon of `tkinter`, replacing it with our icon of choice.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`tkinter`附带的一个属性，`tkinter`与Python 3.7及以上版本一起提供。我们使用`iconbitmap`属性通过传递到图标的相对路径来更改我们的主根窗口的图标，这会覆盖`tkinter`的默认图标，用我们选择的图标替换它。
- en: If the icon is located in the same folder where the Python module is located,
    we can simply refer to the icon by its name without passing in the full path to
    the icon location.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图标位于与Python模块相同的文件夹中，我们可以简单地通过图标名称来引用它，而无需传递图标位置的完整路径。
- en: We've successfully learned how to change the icon of the main root window. Now,
    let's move on to the next recipe.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功学习了如何更改主根窗口的图标。现在，让我们继续下一个菜谱。
- en: Using a spin box control
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用旋钮控制
- en: In this recipe, we will use a `Spinbox` widget, and we will also bind the *Enter*
    key on the keyboard to one of our widgets. The `Spinbox` widget is a one-line
    widget, like the `Entry` widget, with the additional capability to restrict the
    values it will display. It also has some small up/down arrows to scroll up and
    down between the values.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用一个`Spinbox`小部件，并且我们还将把键盘上的*Enter*键绑定到我们的某个小部件上。`Spinbox`小部件是一个单行小部件，类似于`Entry`小部件，它还具有限制它将显示的值的额外功能。它还有一些小的上下箭头，可以滚动上下值。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use our tabbed GUI, from the *How to create the title of a tkinter window
    form* recipe, and add a `Spinbox` widget above the `ScrolledText` control. This
    simply requires us to increment the `ScrolledText` row value by one and insert
    our new `Spinbox` control in the row above the `Entry` widget.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的标签式GUI，来自*如何创建tkinter窗口标题*菜谱，并在`ScrolledText`控件上方添加一个`Spinbox`小部件。这只需要我们将`ScrolledText`的行值增加一行，并在`Entry`小部件上方插入我们的新`Spinbox`控件。
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we add the `Spinbox` control by performing the following instructions:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过以下步骤添加`Spinbox`控件：
- en: Open `GUI_title.py` and save the module as `GUI_spinbox.py`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_title.py`并将模块保存为`GUI_spinbox.py`。
- en: 'Place the following code above the `ScrolledText` widget:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码放置在`ScrolledText`小部件之上：
- en: '[PRE12]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the code. This will modify our GUI as follows:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码。这将按以下方式修改我们的GUI：
- en: '![](img/2db4206d-cd10-486a-a101-edbcb13665e5.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2db4206d-cd10-486a-a101-edbcb13665e5.png)'
- en: 'Next, we will reduce the size of the `Spinbox` widget:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将减小`Spinbox`小部件的大小：
- en: Open `GUI_spinbox.py` and save the module as `GUI_spinbox_small.py`.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_spinbox.py`并将模块保存为`GUI_spinbox_small.py`。
- en: 'Add a `width` attribute when creating the `Spinbox` widget:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建`Spinbox`小部件时添加一个`width`属性：
- en: '[PRE13]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Running the preceding code results in the following GUI:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的代码会产生以下GUI：
- en: '![](img/bee0a9ed-e9f6-46ab-8dd1-0aa0acd99c01.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bee0a9ed-e9f6-46ab-8dd1-0aa0acd99c01.png)'
- en: 'Next, we add another attribute to customize our widget further; `bd` is short-hand
    notation for the `borderwidth` attribute, and changes the width of the border
    surrounding the spin box:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加另一个属性来进一步自定义我们的小部件；`bd`是`borderwidth`属性的缩写，它改变了围绕滚动框的边框宽度：
- en: Open `GUI_spinbox_small.py` and save the module as `GUI_spinbox_small_bd.py`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_spinbox_small.py`并将模块保存为`GUI_spinbox_small_bd.py`。
- en: 'Add a `bd` attribute, giving it a size of `8`:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`bd`属性，将其大小设置为`8`：
- en: '[PRE14]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Running the preceding code results in the following GUI:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的代码会产生以下GUI：
- en: '![](img/5e57feeb-a4c2-42ba-8b84-e7889a6b90d1.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e57feeb-a4c2-42ba-8b84-e7889a6b90d1.png)'
- en: Next, we add functionality to the widget by creating a callback and linking
    it to the control.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过创建一个回调并将其链接到控制条来为小部件添加功能。
- en: 'The following steps show how to print the selection of the `Spinbox` widget
    into `ScrolledText` as well as onto `stdout`. The variable named `scrol` is our
    reference to the `ScrolledText` widget:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤展示了如何将`Spinbox`小部件的选择打印到`ScrolledText`以及到`stdout`。名为`scrol`的变量是我们对`ScrolledText`小部件的引用：
- en: Open `GUI_spinbox_small_bd.py` and save the module as `GUI_spinbox_small_bd_scrol.py`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_spinbox_small_bd.py`并将模块保存为`GUI_spinbox_small_bd_scrol.py`。
- en: 'Write a callback function right above the creation of the `Spinbox` widget
    and assign it to the `command` attribute of the `Spinbox`: widget:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建`Spinbox`小部件的上方编写一个回调函数，并将其分配给`Spinbox`小部件的`command`属性：
- en: '[PRE15]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Running the `GUI_spinbox_small_bd_scrol.py` file results in the following GUI
    when clicking the `Spinbox` arrows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Spinbox`箭头时，运行`GUI_spinbox_small_bd_scrol.py`文件会产生以下GUI：
- en: '![](img/af07a0aa-f3e5-4d95-bf3b-150197854cab.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af07a0aa-f3e5-4d95-bf3b-150197854cab.png)'
- en: 'Instead of using a range, we can also specify a set of values by performing
    the following instructions:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一组值而不是使用范围，通过执行以下指令：
- en: Open `GUI_spinbox_small_bd_scrol.py` and save the module as `GUI_spinbox_small_bd_scrol_values.py`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_spinbox_small_bd_scrol.py`并将模块保存为`GUI_spinbox_small_bd_scrol_values.py`。
- en: 'Add the `values` attribute, replacing `from_=0, to=10`, and assign it a tuple
    of numbers during the creation of the `Spinbox` widget:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建`Spinbox`小部件时添加`values`属性，替换`from_=0, to=10`，并分配一个数字元组：
- en: '[PRE16]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the code. This will create the following GUI output:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码。这将创建以下GUI输出：
- en: '![](img/e5c42b65-6f74-4e98-a0a3-5c24d127061e.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5c42b65-6f74-4e98-a0a3-5c24d127061e.png)'
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解代码，以更好地理解它。
- en: How it works…
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Note how, in the first Python module, `GUI_spinbox.py`, our new `Spinbox` control
    defaulted to a width of `20`, pushing out the column width of all controls in
    this column. This is not what we want. We gave the widget a range from `0` to
    `10`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在第一个Python模块`GUI_spinbox.py`中，我们的新`Spinbox`控制条的默认宽度为`20`，这推高了该列中所有控制条的列宽。这不是我们想要的。我们给小部件指定了一个从`0`到`10`的范围。
- en: In the second Python module, `GUI_spinbox_small.py`, we reduced the width of
    the `Spinbox` control, which aligned it in the center of the column.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个Python模块`GUI_spinbox_small.py`中，我们减小了`Spinbox`控制条的宽度，使其与列中心对齐。
- en: In the third Python module, `GUI_spinbox_small_bd.py`, we added the `borderwidth`
    attribute of the `Spinbox`, which automatically made the entire `Spinbox` appear
    no longer flat, but three-dimensional.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个Python模块`GUI_spinbox_small_bd.py`中，我们添加了`Spinbox`的`borderwidth`属性，这使得整个`Spinbox`看起来不再扁平，而是三维的。
- en: In the fourth Python module, `GUI_spinbox_small_bd_scrol.py`, we added a callback
    function to display the number chosen in the `ScrolledText` widget and also print
    it to the standard out stream. We added `\n` to insert the values on new lines
    within the callback function, `def _spin()`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在第四个Python模块`GUI_spinbox_small_bd_scrol.py`中，我们添加了一个回调函数，用于在`ScrolledText`小部件中显示所选的数字，并将其打印到标准输出流。我们在回调函数`def
    _spin()`中添加了`\n`以在新的行中插入值。
- en: Notice how the default value does not get printed. It is only when we click
    the control that the callback function gets called. By clicking the down arrow
    with a default of `0`, we can print the `0` value.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 注意默认值并没有被打印出来。只有当我们点击控制条时，回调函数才会被调用。通过点击带有默认值`0`的下箭头，我们可以打印出`0`值。
- en: Lastly, in `GUI_spinbox_small_bd_scrol_values.py`, we restricted the values
    available to a hardcoded set. This could also be read in the form of a data source
    (for example, a text or XML file).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`GUI_spinbox_small_bd_scrol_values.py`中，我们将可用的值限制为硬编码的集合。这也可以以数据源的形式读取（例如，文本或XML文件）。
- en: We've successfully learned how to use a spin box control. Now, let's move on
    to the next recipe.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地学习了如何使用微调框控制。现在，让我们继续学习下一个菜谱。
- en: Applying relief – the sunken and raised appearance of widgets
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用relief – 小部件的凹凸外观
- en: We can control the appearance of our `Spinbox` widgets by using an attribute
    that makes them appear in different formats, such as sunken or raised. This attribute
    is the `relief` attribute.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用一个属性来控制`Spinbox`小部件的外观，使其以不同的格式出现，例如凹或凸。这个属性是`relief`属性。
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: We will add one more `Spinbox` control to demonstrate the available appearances
    of widgets, using the `relief` attribute of the `Spinbox` control.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个额外的`Spinbox`控制，以演示小部件的可用外观，使用`Spinbox`控制的`relief`属性。
- en: How to do it…
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'While we are creating the second `Spinbox`, let''s also increase `borderwidth`
    to distinguish our second `Spinbox` from the first `Spinbox`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建第二个`Spinbox`时，让我们也增加`borderwidth`以区分第二个`Spinbox`和第一个`Spinbox`：
- en: Open `GUI_spinbox_small_bd_scrol_values.py` and save the module as `GUI_spinbox_two_sunken.py`.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_spinbox_small_bd_scrol_values.py`并将模块保存为`GUI_spinbox_two_sunken.py`。
- en: 'Add a second `Spinbox` just below the first `Spinbox` and set `bd=20`:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个`Spinbox`下方添加一个第二个`Spinbox`并设置`bd=20`：
- en: '[PRE17]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will also create a new callback function for the `command` attribute, `_spin2`.
    Place this function *above* the code just shown, where we create the second `Spinbox`:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将为`command`属性创建一个新的回调函数`_spin2`。将此函数放在刚刚显示的代码上方，即创建第二个`Spinbox`的地方：
- en: '[PRE18]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the code. This will create the following GUI output:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码。这将创建以下GUI输出：
- en: '![](img/2d44a4b6-6464-4658-b88d-266c39a5aea1.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d44a4b6-6464-4658-b88d-266c39a5aea1.png)'
- en: Our two spin boxes look different but this is only because of the difference
    in the `borderwidth` (`bd`) we specified. Both widgets look three-dimensional,
    and this is much more visible in the second `Spinbox` that we have added.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的两个微调框看起来不同，但这只是因为我们指定的`borderwidth`（`bd`）不同。两个小部件看起来都是三维的，这在第二个我们添加的`Spinbox`中更为明显。
- en: They actually both have a `relief` style even though we did not specify the
    `relief` attribute when we created the spin boxes.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在创建微调框时没有指定`relief`属性，但它们实际上都有`relief`样式。
- en: When not specified, the `relief` style defaults to `SUNKEN`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定，`relief`样式默认为`SUNKEN`。
- en: 'Here are the available `relief` attribute options that can be set:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是可以设置的`relief`属性选项：
- en: '`tk.SUNKEN`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tk.SUNKEN`'
- en: '`tk.RAISED`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tk.RAISED`'
- en: '`tk.FLAT`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tk.FLAT`'
- en: '`tk.GROOVE`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tk.GROOVE`'
- en: '`tk.RIDGE`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tk.RIDGE`'
- en: We imported `tkinter` as `tk`. This is why we can call the `relief` attribute
    as `tk.SUNKEN`, and so on.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`tkinter`导入为`tk`。这就是为什么我们可以调用`relief`属性为`tk.SUNKEN`，等等。
- en: By assigning the different available options to the `relief` attribute , we
    can create different appearances for this widget.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将不同的可用选项分配给`relief`属性，我们可以为这个小部件创建不同的外观。
- en: 'Assigning the `tk.RIDGE` relief and reducing the border width to the same value
    as our first `Spinbox` widget results in the following GUI:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 将`tk.RIDGE` relief和边框宽度减少到与我们的第一个`Spinbox`小部件相同的值，结果如下GUI：
- en: Open `GUI_spinbox_two_sunken.py` and save the module as `GUI_spinbox_two_ridge.py`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_spinbox_two_sunken.py`并将模块保存为`GUI_spinbox_two_ridge.py`。
- en: 'Set `relief` to `tk.RIDGE`:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`relief`设置为`tk.RIDGE`：
- en: '[PRE19]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the code. The following GUI is obtained after running the code:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码。运行代码后，可以得到以下GUI界面：
- en: '![](img/4a048471-bb2f-4d89-986e-270f61bf16e9.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a048471-bb2f-4d89-986e-270f61bf16e9.png)'
- en: Notice the difference in appearance of our second `Spinbox` widget, on the right.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 注意右侧第二个`Spinbox`小部件外观的差异。
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解代码，以更好地理解它。
- en: How it works…
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: First, we created a second `Spinbox` aligned in the second column (`index ==
    1`). It defaults to `SUNKEN`, so it looks similar to our first `Spinbox`. We distinguished
    the two widgets by increasing the border width of the second control (the one
    on the right).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在第二列（`index == 1`）中创建了一个第二个`Spinbox`，它默认为`SUNKEN`，因此看起来与我们的第一个`Spinbox`相似。我们通过增加第二个控制（右侧的控制）的边框宽度来区分这两个小部件。
- en: Next, we explicitly set the `relief` attribute of the `Spinbox` widget. We made
    `borderwidth` the same as our first `Spinbox` because, by giving it a different
    `relief`, the differences became visible without having to change any other attributes.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们明确设置`Spinbox`小部件的`relief`属性。我们将`borderwidth`设置为与我们的第一个`Spinbox`相同，因为通过给它不同的`relief`，差异在没有改变任何其他属性的情况下变得明显。
- en: 'Here is an example of the different `relief` options, `GUI_spinbox_two_ridge.py`:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个不同`relief`选项的示例，`GUI_spinbox_two_ridge.py`：
- en: '![](img/8040ee6a-56d5-4743-a828-87eda344493d.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8040ee6a-56d5-4743-a828-87eda344493d.png)'
- en: 'And here is a screenshot of what those relief attributes create:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个截图，展示了这些`relief`属性创建的效果：
- en: '![](img/435448c0-096d-4e64-8167-f2e8e4b588ab.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/435448c0-096d-4e64-8167-f2e8e4b588ab.png)'
- en: We've successfully learned how to use and apply relief, sunken, and raised appearances
    to widgets. Now, let's move on to the next recipe.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地学习了如何使用和应用`relief`、凹陷和凸起外观到小部件上。现在，让我们继续到下一个示例。
- en: Creating tooltips using Python
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python创建工具提示
- en: This recipe will show you how to create tooltips. When the user hovers the mouse
    over a widget, additional information will be available in the form of a tooltip.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将向您展示如何创建工具提示。当用户将鼠标悬停在控件上时，将以工具提示的形式提供额外的信息。
- en: We will code this additional information into our GUI.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个附加信息编码到我们的GUI中。
- en: Getting ready
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be adding more useful functionality to our GUI. Surprisingly, adding
    a tooltip to our controls should be simple, but it is not as simple as we'd want
    it to be.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向我们的GUI添加更多有用的功能。令人惊讶的是，给我们的控件添加工具提示应该是简单的，但实际上并不像我们希望的那样简单。
- en: In order to achieve this desired functionality, we will place our tooltip code
    in its own OOP class.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个期望的功能，我们将我们的工具提示代码放置在其自己的面向对象类中。
- en: How to do it…
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'These are the steps to create a tooltip:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 创建工具提示的步骤如下：
- en: Open `GUI_spinbox_small_bd_scrol_values.py` and save the module as `GUI_tooltip.py`.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GUI_spinbox_small_bd_scrol_values.py`并将模块保存为`GUI_tooltip.py`。
- en: 'Add the following class just below the `import` statements:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`import`语句下面添加以下类：
- en: '[PRE20]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add two new methods to the class below `__init__`:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`__init__`下面添加两个新方法：
- en: '[PRE21]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add another method below these two, and name the method `show_tooltip`:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这两个方法下面添加另一个方法，并命名为`show_tooltip`：
- en: '[PRE22]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add another method below `show_tooltip`, and name it `hide_tooltip`:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`show_tooltip`方法下面添加另一个方法，并命名为`hide_tooltip`：
- en: '[PRE23]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Below the class and below the code where we create the `Spinbox` widget, create
    an instance of the `ToolTip` class, passing in the `Spinbox` variable, `spin`:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类下面和创建`Spinbox`小部件的代码下面创建`ToolTip`类的一个实例，传递`Spinbox`变量`spin`：
- en: '[PRE24]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Perform the same step for the `ScrolledText` widget just below the `Spinbox`
    widget:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`Spinbox`小部件下面的`ScrolledText`小部件执行相同的步骤：
- en: '[PRE25]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the code and hover the mouse over the `ScrolledText` widget:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并将鼠标悬停在`ScrolledText`小部件上：
- en: '![](img/5d8ce96b-3dc4-422a-b615-329414a88631.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d8ce96b-3dc4-422a-b615-329414a88631.png)'
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解代码，以更好地理解它。
- en: How it works…
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: This is the beginning of OOP programming we'll do in this book. This might appear
    a little bit advanced, but do not worry; we will explain everything, and it does
    work.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书中我们将要介绍的面向对象编程（OOP）的开始。这可能会显得有些高级，但请不要担心；我们会解释一切，并且它确实可行。
- en: We first created a new class and named it `ToolTip`. In the initializer method,
    `__init__`, we expect `widget` and `tip_text` to be passed in. We save these in
    instance variables, using the `self` keyword.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了一个新类，并将其命名为`ToolTip`。在初始化方法`__init__`中，我们期望传递`widget`和`tip_text`。我们使用`self`关键字将这些保存为实例变量。
- en: Next, we are bind the `Enter` and `Leave` mouse events to new methods that we
    create just below the initializer. These are being automatically called when we
    hover the mouse over a widget for which we have created a tooltip. These two methods
    call the next two methods of our class, which we create just below them.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将`Enter`和`Leave`鼠标事件绑定到我们刚刚在初始化器下面创建的新方法。当我们将鼠标悬停在为我们创建了工具提示的控件上时，这些方法会自动调用。这两个方法调用我们下面创建的两个方法。
- en: The `show_tooltip` method checks whether a text was passed in during the creation
    of a `ToolTip` class instance and, if it was, we get the top-left coordinates
    of the widget, using `winfo_rootx` and `winfo_rooty`. These are `tkinter` built-in
    methods we can use.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`show_tooltip`方法检查在创建`ToolTip`类实例时是否传递了文本，如果是，我们就使用`winfo_rootx`和`winfo_rooty`获取小部件的左上角坐标。这些是我们可以使用的`tkinter`内置方法。'
- en: For the `y_top` variable, we **subtract** `18`, which positions the widget.
    This might seem counterintuitive, but the `tkinter` coordinate system starts with
    `0`, `0` at the top-left corner of the screen, so subtracting from the *y* coordinate
    actually moves it up.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: We then create a `TopLevel` window of `tkinter` for our tooltip. Setting `overrideredirect(True)`
    removes a toolbar that would otherwise be surrounding our `tooltip`, and we don't
    want that.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: We use `geometry` to position our `tooltip`, and then we create a `Label` widget.
    We make our `tooltip` the parent of our label. We then use the tooltip `text`
    to be displayed inside the label.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: We then `pack` the `Label` widget, which makes it visible.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: In the `hide_tooltip` method, we check whether a tooltip has been created and,
    if so, we call the `destroy` method on it. Otherwise, whenever we hover the mouse
    over a widget and then move the mouse away from the widget, the tooltip will not
    go away.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: With our `ToolTip` class code in place, we can now create tooltips for our widgets.
    We do this by creating an instance of the `ToolTip` class, passing in our widget
    variable and the text we wish to be displayed.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: We do this for the `ScolledText` and `Spinbox` widgets.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create tooltips using Python. Now, let's move
    on to the next recipe.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Adding Progressbar to the GUI
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a `Progressbar` to our GUI. It is very easy to add
    a `ttk.Progressbar`, and we will demonstrate how to start and stop a `Progressbar`.
    This recipe will also show you how to delay the stopping of a `Progressbar`, and
    how to run it in a loop.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: A `Progressbar` is typically used to show the current status of a long-running
    process.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add `Progressbar` to `Tab 2` of the GUI that we developed in a previous
    recipe: *Using a spin box control*.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the steps to create a `Progressbar` and some new `Buttons` that start
    and stop the `Progressbar`:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_spinbox_small_bd_scrol_values.py` and save the module as `GUI_progressbar.py`.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the module, add `sleep` to the imports:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add `Progressbar` below the code where we create the three `Radiobutton` widgets:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we write a callback function to update `Progressbar`:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We then write the following three functions below the preceding code:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We will reuse `buttons_frame` and `LabelFrame`, but replace the labels with
    new code. Change the following code:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Delete the previous labels that resided in `buttons_frame`:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create four new buttons. `buttons_frame` is their parent:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add additional padding for the children of `buttons_frame` in a loop:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add additional padding for all children of **Tab2**:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Run the code. The following GUI is obtained after clicking the Run Progressbar
    button:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9a154ed-06de-4e74-a061-28cbfc778aee.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we imported `sleep`, otherwise the `Progressbar` would be too fast to
    be seen. But, be careful when using `sleep` as it can freeze the GUI. We are using
    it here to simulate a long-running process, which is typically where a `Progressbar`
    is used.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: We then create a `ttk.Progressbar` widget and assign it to **Tab2**.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: We create our own callback function, `run_progressbar`, in which we start at
    `0`, loop using `sleep`, and, once we reach the maximum value we have set to `100`,
    and once `Progressbar` has reached the end, we reset it to `0` so `Progressbar`
    will appear empty again.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: We create another function, `start_progressbar`, and in it we use the `ttk.Progressbar`
    built-in `start` method. If we do not call the `stop` method while `Progressbar`
    is running, once it has reached the end, it will start to run all over again from
    the beginning in an endless loop until `stop` has been called.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: The `stop_progressbar` function stops `Progressbar` immediately.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: The `progressbar_stop_after` function delays the stopping by a certain amount
    of time. We defaulted it to `1000` milliseconds, which is 1 second, but a different
    value can be passed into this function.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: We achieve this delay by calling the `after` function on the reference to our
    main GUI window, which we named `win`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: These four functions show us two ways to start and stop `Progressbar`.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Calling the `Stop` functions on the `start_progressbar` function does not stop
    it, though; it will complete the loop.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: We created four new buttons and assigned our functions to their `command` attribute.
    Clicking the buttons now calls those functions.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create `Progressbar` and start and stop it.
    Now, let's move on to the next recipe.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: How to use the canvas widget
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to add dramatic color effects to our GUI by using the
    `tkinter` canvas widget.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will improve our previous code from `GUI_tooltip.py`, and we'll improve the
    look of our GUI by adding some more colors to it.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will create a third tab in our GUI in order to isolate our new code.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to create the new third tab:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_tooltip.py` and save the module as `GUI_canvas.py`.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a third tab control:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, we use another built-in widget of `tkinter`, called `Canvas`. A lot of
    people like this widget because it has powerful capabilities:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run the `GUI_canvas.py` file. The following GUI is obtained after running the
    code:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bc46b947-0194-46a8-8178-46f01d568f11.png)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After we have created the new tab, we place a regular `tk.Frame` into it and
    assign it a background color of blue. In the loop, we create two `tk.Canvas` widgets,
    making their color orange and assigning them to the grid coordinates `0,0` and
    `1,1`. This also makes the blue background color of the `tk.Frame` visible in
    the two other grid locations.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the result created by running the preceding code
    and clicking on the new Tab 3\. It really is orange and blue when you run the
    code. In a non-color printed book, this might not be visually obvious, but those
    colors are true; you can trust me on this.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了运行前面代码并点击新标签页3所创建的结果。当你运行代码时，它确实是橙色和蓝色的。在非彩色印刷的书中，这可能不会在视觉上很明显，但这些颜色是真实的；你可以相信我。
- en: You can check out the graphing and drawing capabilities by searching online.
    I will not go into the widget in more depth in this book (but it is very cool).
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在线搜索来查看图形和绘图功能。在这本书中，我不会深入探讨小部件（但它非常酷）。
