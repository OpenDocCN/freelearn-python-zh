- en: Look and Feel Customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will customize some of the widgets in our GUI by changing
    some of their attributes. We will also introduce a few new widgets that `tkinter`
    offers us.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Creating tooltips using Python* recipe, we will create a `ToolTip` OOP-style
    class, which will be a part of the single Python module that we have been using
    until now.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to create different message boxes, change the GUI window
    title, and much more. We will be using a spin box control to learn how to apply
    different styles.
  prefs: []
  type: TYPE_NORMAL
- en: Look and feel customization is a very important part of GUI design because it
    makes our GUI look professional.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the overview of the Python modules for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18e8538e-3129-4c08-89cb-6b095ad3f5a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, we will customize our GUI using Python 3.7 and above. We will
    cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating message boxes – the information, warning, and error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create independent message boxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create the title of a tkinter window form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the icon of the main root window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a spin box control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying relief – sunken and raised appearance of widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating tooltips using Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Progressbar to the GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the canvas widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating message boxes – information, warning, and error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A message box is a pop-up window that gives feedback to the user. It can be
    informational, hinting at potential problems, as well as catastrophic errors.
  prefs: []
  type: TYPE_NORMAL
- en: Using Python to create message boxes is very easy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add functionality to the Help | About menu item we created in [Chapter
    2](7b1f337c-b9fe-4dc2-8c86-5827e7256831.xhtml), *Layout Management*, in the *Creating
    tabbed widgets* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The code is from `GUI_tabbed_all_widgets_both_tabs.py`. The typical feedback
    to the user when clicking the Help | About menu in most applications is informational.
    We'll start with this information and then vary the design pattern to show warnings
    and errors.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the steps to follow to create a message box in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_tabbed_all_widgets_both_tabs.py` from [Chapter 2](7b1f337c-b9fe-4dc2-8c86-5827e7256831.xhtml),
    *Layout Management*, and save the module as `GUI_message_box.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to the top of the module where the import statements
    live:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, create a callback function that will display a message box. We have to
    place the code of the callback above the code where we attach the callback to
    the menu item, because this is still procedural and not OOP code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code just above the lines where we create the help menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions produce the following code, `GUI_message_box.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28d98aa7-e054-46c3-ba08-a17fcb74318d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the code. Clicking Help | About now causes the following pop-up window
    to appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64be55ea-3290-4121-bf7d-7d6540f69503.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s transform this code into a warning message box pop-up window instead:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_message_box.py` and save the module as `GUI_message_box_warning.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comment out the `msg.showinfo` line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the information box code with warning box code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions produce the following code, `GUI_message_box_warning.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0050787a-2971-47f1-9783-5335fa47a496.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the preceding code will now result in the following slightly modified
    message box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52c12ac1-269a-42ca-b556-bd71a617151c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Displaying an error message box is simple and usually warns the user of a serious
    problem. As we did in the previous code snippet, comment out the previous line
    and add the following code, as we have done here:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_message_box_warning.py` and save the module as `GUI_message_box_error.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the warning box code with error box code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions produce the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf20f606-49f4-4023-9e81-8b5ebe273212.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the `GUI_message_box_error.py` file. The error message looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88a22c82-c2f8-4ad9-8645-2adfde30dc41.png)'
  prefs: []
  type: TYPE_IMG
- en: There are different message boxes that display more than one OK button, and
    we can program our responses according to the user's selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a simple example that illustrates this technique:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_message_box_error.py` and save the module as `GUI_message_box_yes_no_cancel.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the error box with a `yes_no_cancel` box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions produce the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c310bfbb-14fd-4323-9ac7-6991f058776a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the `GUI_message_box_yes_no_cancel.py` file. Running this GUI code results
    in a popup whose user response can be used to branch on the answer of this event-driven
    GUI loop, by saving it in the `answer` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d87bf0e-593c-4077-979b-6ff18e43bf5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The console output using Eclipse shows that clicking the Yes button results
    in the Boolean value of `True` being assigned to the `answer` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a9a8763-1907-4002-9fb6-d4883627a7e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, we could use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Clicking No returns `False` and Cancel returns `None`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We added another callback function to all of our `GUI_message_box` Python modules,
    `def _msgBox()`, and attached it to the Help menu `command` attribute to handle
    click events. Now, when we click the Help | About menu, an action takes place.
    We are creating and displaying the most common pop-up message box dialogs. They
    are modal, so the user can't use the GUI until they click the OK button.
  prefs: []
  type: TYPE_NORMAL
- en: In the first example, we display an information box, as can be seen by the icon
    to its left. Next, we create warning and error message boxes, which automatically
    change the icon associated with the popup. All we have to do is specify which
    message box we want to display.
  prefs: []
  type: TYPE_NORMAL
- en: The `askyesnocancel` message box returns a different value depending on which
    button the user clicked. We can capture the answer in a variable and write different
    code according to which answer was selected.
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create message boxes. Now, let's move on to
    the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to create independent message boxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create our `tkinter` message boxes as standalone top-level
    GUI windows.
  prefs: []
  type: TYPE_NORMAL
- en: You will first notice that, by doing so, we end up with an extra window, so
    we will explore ways to hide this window.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous recipe, we invoked `tkinter` message boxes via our Help | About
    menu from our main GUI form.
  prefs: []
  type: TYPE_NORMAL
- en: So, why would we wish to create an independent message box?
  prefs: []
  type: TYPE_NORMAL
- en: One reason is that we might customize our message boxes and reuse them in several
    of our GUIs. Instead of having to copy and paste the same code into every Python
    GUI we design, we can factor it out of our main GUI code. This creates a small
    reusable component, which we can then import into different Python GUIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already created the title of a message box in the previous recipe, *Creating
    message boxes - information, warning, and error*. We will not reuse the code from
    the previous recipe, but build a new GUI using very few lines of Python code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can create a simple message box as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and save it as `GUI_independent_msg.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following two lines of code, which is all that is required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `GUI_independent_msg.py` file. This will result in the following two
    windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/afd77050-64af-429a-88de-abb9620e3946.png)'
  prefs: []
  type: TYPE_IMG
- en: This does not look like what we had in mind. Now, we have two windows, one undesired
    and the second with its text displayed as its title.
  prefs: []
  type: TYPE_NORMAL
- en: Oops!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s solve this now. We can change the Python code by adding a single or
    double quote followed by a comma:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_independent_msg.py` and save the module as `GUI_independent_msg_info.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an empty title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `GUI_independent_msg_info.py` file. Now, we do not have a title but
    our text ended up inside the popup, as we had intended:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36de33c1-8ece-493b-82cf-62230843dcca.png)'
  prefs: []
  type: TYPE_IMG
- en: The first parameter is the title and the second is the text displayed in the
    pop-up message box. By adding an empty pair of single or double quotes followed
    by a comma, we can move our text from the title into the pop-up message box.
  prefs: []
  type: TYPE_NORMAL
- en: We still need a title, and we definitely want to get rid of this unnecessary
    second window. The second window is caused by a Windows event loop. We can get
    rid of it by suppressing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_independent_msg_info.py` and save the module as `GUI_independent_msg_one_window.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `Tk` create an instance of the `Tk` class, and call the `withdraw` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have only one window. The `withdraw()` method removes the debug window
    that we are not interested in having floating around.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the code. This will result in the following window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/481e33e2-7b2a-4c67-9cbb-ee98637a4b1c.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to add a title, all we have to do is place string into our empty first
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_independent_msg_one_window.py` and save the module as `GUI_independent_msg_one_window_title.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give it a title by adding some words into the first argument position:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions produce the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b06f5d7c-5b71-43f8-89ab-22842eae8f64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the `GUI_independent_msg_one_window_title.py` file. Now, our dialog has
    a title, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca81f67a-b6b1-43c3-8b44-064861532493.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We pass more arguments into the `tkinter` constructor of the message box to
    add a title to the window form and display the text in the message box instead
    of displaying it as its title. This happens due to the position of the arguments
    we pass. If we leave out an empty quote or a double quote, then the message box
    widget takes the first position of the arguments as the title, not the text to
    be displayed within the message box. By passing an empty quote followed by a comma,
    we change where the message box displays the text we pass into the function.
  prefs: []
  type: TYPE_NORMAL
- en: We suppress the second pop-up window, which automatically gets created by the
    `tkinter` message box widget, by calling the `withdraw()` method on our main root
    window.
  prefs: []
  type: TYPE_NORMAL
- en: By adding some words into the previously empty string, we give our message box
    a title. This shows that the different message boxes, in addition to the main
    message they are displaying, have their own custom title. This can be useful to
    relate several different message boxes to the same functionality.
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create independent message boxes. Now, let's
    move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to create the title of a tkinter window form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The principle of changing the title of a `tkinter` main root window is the
    same as we discussed in the previous recipe: *How to create independent message
    boxes*. We just pass in a string as the first argument to the constructor of the
    widget.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of a pop-up dialog window, we create the main root window and give it
    a title.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code creates the main window and adds a title to it. We have
    already done this in the previous recipes; for example, in the *Creating tabbed
    widgets* recipe, in [Chapter 2](7b1f337c-b9fe-4dc2-8c86-5827e7256831.xhtml), *Layout
    Management*. Here, we just focus on this aspect of our GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_tabbed_all_widgets_both_tabs.py` and save the module as `GUI_title.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give the main window a title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `GUI_title.py` file. This will result in the following two tabs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3aed194-0b6e-43c9-ac5b-ee218f143ce6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This gives a title to the main root window by using the built-in the `title`
    attribute of `tkinter`. After we create a `Tk()` instance, we can use all the
    built-in `tkinter` attributes to customize our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create a title for a `tkinter` window form.
    Now, let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the icon of the main root window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to customize our GUI is to give it an icon different from the default
    icon that ships out of the box with `tkinter`. Here is how we do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are improving our GUI from the *Creating tabbed widgets* recipe in [Chapter
    2](7b1f337c-b9fe-4dc2-8c86-5827e7256831.xhtml), *Layout Management*. We will use
    an icon that ships with Python, but you can use any icon you find useful. Make
    sure you have the full path to where the icon lives in your code, or you might
    get errors.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this example, I have copied the icon from where I installed Python 3.7
    to the same folder where the code lives. The following screenshot shows the icon
    that we will be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a8a7192-d0f7-4e3b-938c-60f9daacbfac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to use this or another icon file, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_title.py` and save the module as `GUI_icon.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the following code above the main event loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `GUI_icon.py` file. Observe how the feather default icon in the top-left
    corner of the GUI changed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f30c653-1a64-4125-b9b9-c239f4b9370a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is another attribute that ships with `tkinter`, which ships with Python
    3.7 and above. We use the `iconbitmap` attribute to change the icon of our main
    root window form, by passing in a relative path to an icon. This overrides the
    default icon of `tkinter`, replacing it with our icon of choice.
  prefs: []
  type: TYPE_NORMAL
- en: If the icon is located in the same folder where the Python module is located,
    we can simply refer to the icon by its name without passing in the full path to
    the icon location.
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to change the icon of the main root window. Now,
    let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using a spin box control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use a `Spinbox` widget, and we will also bind the *Enter*
    key on the keyboard to one of our widgets. The `Spinbox` widget is a one-line
    widget, like the `Entry` widget, with the additional capability to restrict the
    values it will display. It also has some small up/down arrows to scroll up and
    down between the values.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use our tabbed GUI, from the *How to create the title of a tkinter window
    form* recipe, and add a `Spinbox` widget above the `ScrolledText` control. This
    simply requires us to increment the `ScrolledText` row value by one and insert
    our new `Spinbox` control in the row above the `Entry` widget.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we add the `Spinbox` control by performing the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_title.py` and save the module as `GUI_spinbox.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the following code above the `ScrolledText` widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code. This will modify our GUI as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2db4206d-cd10-486a-a101-edbcb13665e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will reduce the size of the `Spinbox` widget:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_spinbox.py` and save the module as `GUI_spinbox_small.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `width` attribute when creating the `Spinbox` widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code results in the following GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bee0a9ed-e9f6-46ab-8dd1-0aa0acd99c01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we add another attribute to customize our widget further; `bd` is short-hand
    notation for the `borderwidth` attribute, and changes the width of the border
    surrounding the spin box:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_spinbox_small.py` and save the module as `GUI_spinbox_small_bd.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `bd` attribute, giving it a size of `8`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code results in the following GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5e57feeb-a4c2-42ba-8b84-e7889a6b90d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we add functionality to the widget by creating a callback and linking
    it to the control.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps show how to print the selection of the `Spinbox` widget
    into `ScrolledText` as well as onto `stdout`. The variable named `scrol` is our
    reference to the `ScrolledText` widget:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_spinbox_small_bd.py` and save the module as `GUI_spinbox_small_bd_scrol.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a callback function right above the creation of the `Spinbox` widget
    and assign it to the `command` attribute of the `Spinbox`: widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the `GUI_spinbox_small_bd_scrol.py` file results in the following GUI
    when clicking the `Spinbox` arrows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af07a0aa-f3e5-4d95-bf3b-150197854cab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Instead of using a range, we can also specify a set of values by performing
    the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_spinbox_small_bd_scrol.py` and save the module as `GUI_spinbox_small_bd_scrol_values.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `values` attribute, replacing `from_=0, to=10`, and assign it a tuple
    of numbers during the creation of the `Spinbox` widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code. This will create the following GUI output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e5c42b65-6f74-4e98-a0a3-5c24d127061e.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note how, in the first Python module, `GUI_spinbox.py`, our new `Spinbox` control
    defaulted to a width of `20`, pushing out the column width of all controls in
    this column. This is not what we want. We gave the widget a range from `0` to
    `10`.
  prefs: []
  type: TYPE_NORMAL
- en: In the second Python module, `GUI_spinbox_small.py`, we reduced the width of
    the `Spinbox` control, which aligned it in the center of the column.
  prefs: []
  type: TYPE_NORMAL
- en: In the third Python module, `GUI_spinbox_small_bd.py`, we added the `borderwidth`
    attribute of the `Spinbox`, which automatically made the entire `Spinbox` appear
    no longer flat, but three-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: In the fourth Python module, `GUI_spinbox_small_bd_scrol.py`, we added a callback
    function to display the number chosen in the `ScrolledText` widget and also print
    it to the standard out stream. We added `\n` to insert the values on new lines
    within the callback function, `def _spin()`.
  prefs: []
  type: TYPE_NORMAL
- en: Notice how the default value does not get printed. It is only when we click
    the control that the callback function gets called. By clicking the down arrow
    with a default of `0`, we can print the `0` value.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, in `GUI_spinbox_small_bd_scrol_values.py`, we restricted the values
    available to a hardcoded set. This could also be read in the form of a data source
    (for example, a text or XML file).
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to use a spin box control. Now, let's move on
    to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Applying relief – the sunken and raised appearance of widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can control the appearance of our `Spinbox` widgets by using an attribute
    that makes them appear in different formats, such as sunken or raised. This attribute
    is the `relief` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add one more `Spinbox` control to demonstrate the available appearances
    of widgets, using the `relief` attribute of the `Spinbox` control.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While we are creating the second `Spinbox`, let''s also increase `borderwidth`
    to distinguish our second `Spinbox` from the first `Spinbox`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_spinbox_small_bd_scrol_values.py` and save the module as `GUI_spinbox_two_sunken.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a second `Spinbox` just below the first `Spinbox` and set `bd=20`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also create a new callback function for the `command` attribute, `_spin2`.
    Place this function *above* the code just shown, where we create the second `Spinbox`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code. This will create the following GUI output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d44a4b6-6464-4658-b88d-266c39a5aea1.png)'
  prefs: []
  type: TYPE_IMG
- en: Our two spin boxes look different but this is only because of the difference
    in the `borderwidth` (`bd`) we specified. Both widgets look three-dimensional,
    and this is much more visible in the second `Spinbox` that we have added.
  prefs: []
  type: TYPE_NORMAL
- en: They actually both have a `relief` style even though we did not specify the
    `relief` attribute when we created the spin boxes.
  prefs: []
  type: TYPE_NORMAL
- en: When not specified, the `relief` style defaults to `SUNKEN`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the available `relief` attribute options that can be set:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tk.SUNKEN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tk.RAISED`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tk.FLAT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tk.GROOVE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tk.RIDGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We imported `tkinter` as `tk`. This is why we can call the `relief` attribute
    as `tk.SUNKEN`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: By assigning the different available options to the `relief` attribute , we
    can create different appearances for this widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assigning the `tk.RIDGE` relief and reducing the border width to the same value
    as our first `Spinbox` widget results in the following GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_spinbox_two_sunken.py` and save the module as `GUI_spinbox_two_ridge.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set `relief` to `tk.RIDGE`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code. The following GUI is obtained after running the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a048471-bb2f-4d89-986e-270f61bf16e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice the difference in appearance of our second `Spinbox` widget, on the right.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we created a second `Spinbox` aligned in the second column (`index ==
    1`). It defaults to `SUNKEN`, so it looks similar to our first `Spinbox`. We distinguished
    the two widgets by increasing the border width of the second control (the one
    on the right).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we explicitly set the `relief` attribute of the `Spinbox` widget. We made
    `borderwidth` the same as our first `Spinbox` because, by giving it a different
    `relief`, the differences became visible without having to change any other attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the different `relief` options, `GUI_spinbox_two_ridge.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8040ee6a-56d5-4743-a828-87eda344493d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here is a screenshot of what those relief attributes create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/435448c0-096d-4e64-8167-f2e8e4b588ab.png)'
  prefs: []
  type: TYPE_IMG
- en: We've successfully learned how to use and apply relief, sunken, and raised appearances
    to widgets. Now, let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tooltips using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to create tooltips. When the user hovers the mouse
    over a widget, additional information will be available in the form of a tooltip.
  prefs: []
  type: TYPE_NORMAL
- en: We will code this additional information into our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be adding more useful functionality to our GUI. Surprisingly, adding
    a tooltip to our controls should be simple, but it is not as simple as we'd want
    it to be.
  prefs: []
  type: TYPE_NORMAL
- en: In order to achieve this desired functionality, we will place our tooltip code
    in its own OOP class.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the steps to create a tooltip:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_spinbox_small_bd_scrol_values.py` and save the module as `GUI_tooltip.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following class just below the `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add two new methods to the class below `__init__`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add another method below these two, and name the method `show_tooltip`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Add another method below `show_tooltip`, and name it `hide_tooltip`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Below the class and below the code where we create the `Spinbox` widget, create
    an instance of the `ToolTip` class, passing in the `Spinbox` variable, `spin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform the same step for the `ScrolledText` widget just below the `Spinbox`
    widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code and hover the mouse over the `ScrolledText` widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d8ce96b-3dc4-422a-b615-329414a88631.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the beginning of OOP programming we'll do in this book. This might appear
    a little bit advanced, but do not worry; we will explain everything, and it does
    work.
  prefs: []
  type: TYPE_NORMAL
- en: We first created a new class and named it `ToolTip`. In the initializer method,
    `__init__`, we expect `widget` and `tip_text` to be passed in. We save these in
    instance variables, using the `self` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are bind the `Enter` and `Leave` mouse events to new methods that we
    create just below the initializer. These are being automatically called when we
    hover the mouse over a widget for which we have created a tooltip. These two methods
    call the next two methods of our class, which we create just below them.
  prefs: []
  type: TYPE_NORMAL
- en: The `show_tooltip` method checks whether a text was passed in during the creation
    of a `ToolTip` class instance and, if it was, we get the top-left coordinates
    of the widget, using `winfo_rootx` and `winfo_rooty`. These are `tkinter` built-in
    methods we can use.
  prefs: []
  type: TYPE_NORMAL
- en: For the `y_top` variable, we **subtract** `18`, which positions the widget.
    This might seem counterintuitive, but the `tkinter` coordinate system starts with
    `0`, `0` at the top-left corner of the screen, so subtracting from the *y* coordinate
    actually moves it up.
  prefs: []
  type: TYPE_NORMAL
- en: We then create a `TopLevel` window of `tkinter` for our tooltip. Setting `overrideredirect(True)`
    removes a toolbar that would otherwise be surrounding our `tooltip`, and we don't
    want that.
  prefs: []
  type: TYPE_NORMAL
- en: We use `geometry` to position our `tooltip`, and then we create a `Label` widget.
    We make our `tooltip` the parent of our label. We then use the tooltip `text`
    to be displayed inside the label.
  prefs: []
  type: TYPE_NORMAL
- en: We then `pack` the `Label` widget, which makes it visible.
  prefs: []
  type: TYPE_NORMAL
- en: In the `hide_tooltip` method, we check whether a tooltip has been created and,
    if so, we call the `destroy` method on it. Otherwise, whenever we hover the mouse
    over a widget and then move the mouse away from the widget, the tooltip will not
    go away.
  prefs: []
  type: TYPE_NORMAL
- en: With our `ToolTip` class code in place, we can now create tooltips for our widgets.
    We do this by creating an instance of the `ToolTip` class, passing in our widget
    variable and the text we wish to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: We do this for the `ScolledText` and `Spinbox` widgets.
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create tooltips using Python. Now, let's move
    on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Progressbar to the GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a `Progressbar` to our GUI. It is very easy to add
    a `ttk.Progressbar`, and we will demonstrate how to start and stop a `Progressbar`.
    This recipe will also show you how to delay the stopping of a `Progressbar`, and
    how to run it in a loop.
  prefs: []
  type: TYPE_NORMAL
- en: A `Progressbar` is typically used to show the current status of a long-running
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add `Progressbar` to `Tab 2` of the GUI that we developed in a previous
    recipe: *Using a spin box control*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the steps to create a `Progressbar` and some new `Buttons` that start
    and stop the `Progressbar`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_spinbox_small_bd_scrol_values.py` and save the module as `GUI_progressbar.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the module, add `sleep` to the imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `Progressbar` below the code where we create the three `Radiobutton` widgets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we write a callback function to update `Progressbar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We then write the following three functions below the preceding code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We will reuse `buttons_frame` and `LabelFrame`, but replace the labels with
    new code. Change the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the previous labels that resided in `buttons_frame`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create four new buttons. `buttons_frame` is their parent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Add additional padding for the children of `buttons_frame` in a loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Add additional padding for all children of **Tab2**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code. The following GUI is obtained after clicking the Run Progressbar
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9a154ed-06de-4e74-a061-28cbfc778aee.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we imported `sleep`, otherwise the `Progressbar` would be too fast to
    be seen. But, be careful when using `sleep` as it can freeze the GUI. We are using
    it here to simulate a long-running process, which is typically where a `Progressbar`
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: We then create a `ttk.Progressbar` widget and assign it to **Tab2**.
  prefs: []
  type: TYPE_NORMAL
- en: We create our own callback function, `run_progressbar`, in which we start at
    `0`, loop using `sleep`, and, once we reach the maximum value we have set to `100`,
    and once `Progressbar` has reached the end, we reset it to `0` so `Progressbar`
    will appear empty again.
  prefs: []
  type: TYPE_NORMAL
- en: We create another function, `start_progressbar`, and in it we use the `ttk.Progressbar`
    built-in `start` method. If we do not call the `stop` method while `Progressbar`
    is running, once it has reached the end, it will start to run all over again from
    the beginning in an endless loop until `stop` has been called.
  prefs: []
  type: TYPE_NORMAL
- en: The `stop_progressbar` function stops `Progressbar` immediately.
  prefs: []
  type: TYPE_NORMAL
- en: The `progressbar_stop_after` function delays the stopping by a certain amount
    of time. We defaulted it to `1000` milliseconds, which is 1 second, but a different
    value can be passed into this function.
  prefs: []
  type: TYPE_NORMAL
- en: We achieve this delay by calling the `after` function on the reference to our
    main GUI window, which we named `win`.
  prefs: []
  type: TYPE_NORMAL
- en: These four functions show us two ways to start and stop `Progressbar`.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the `Stop` functions on the `start_progressbar` function does not stop
    it, though; it will complete the loop.
  prefs: []
  type: TYPE_NORMAL
- en: We created four new buttons and assigned our functions to their `command` attribute.
    Clicking the buttons now calls those functions.
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create `Progressbar` and start and stop it.
    Now, let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to use the canvas widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to add dramatic color effects to our GUI by using the
    `tkinter` canvas widget.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will improve our previous code from `GUI_tooltip.py`, and we'll improve the
    look of our GUI by adding some more colors to it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will create a third tab in our GUI in order to isolate our new code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to create the new third tab:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_tooltip.py` and save the module as `GUI_canvas.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a third tab control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we use another built-in widget of `tkinter`, called `Canvas`. A lot of
    people like this widget because it has powerful capabilities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `GUI_canvas.py` file. The following GUI is obtained after running the
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bc46b947-0194-46a8-8178-46f01d568f11.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After we have created the new tab, we place a regular `tk.Frame` into it and
    assign it a background color of blue. In the loop, we create two `tk.Canvas` widgets,
    making their color orange and assigning them to the grid coordinates `0,0` and
    `1,1`. This also makes the blue background color of the `tk.Frame` visible in
    the two other grid locations.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the result created by running the preceding code
    and clicking on the new Tab 3\. It really is orange and blue when you run the
    code. In a non-color printed book, this might not be visually obvious, but those
    colors are true; you can trust me on this.
  prefs: []
  type: TYPE_NORMAL
- en: You can check out the graphing and drawing capabilities by searching online.
    I will not go into the widget in more depth in this book (but it is very cool).
  prefs: []
  type: TYPE_NORMAL
