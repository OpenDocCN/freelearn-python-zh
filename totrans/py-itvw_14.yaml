- en: Chapter 14. Steven Lott
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。史蒂文·洛特
- en: '![Steven Lott](img/B08180_15_01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![史蒂文·洛特](img/B08180_15_01.jpg)'
- en: Steven Lott is an American software developer and author. He is an associate
    for the bank holding company Capital One and uses Python to build APIs for new
    products. Previously, he worked as a solution architect for CTG, which provides
    IT services. In 2003, Steven started using his talent for solving problems with
    Python to write books. He has since authored titles including *Modern Python Cookbook*,
    *Python for Secrets Agents*, and *Functional Python Programming*. Steven creates
    educational content for the Python community and writes a tech blog.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 史蒂文·洛特是一位美国软件开发者和作家。他是资本一控股公司的合作伙伴，并使用 Python 为新产品构建 API。此前，他曾在提供 IT 服务的 CTG
    担任解决方案架构师。2003年，史蒂文开始利用他在 Python 中解决问题的才能来写书。他此后著有包括《现代 Python 烹饪书》、《Python 间谍特工》和《函数式
    Python 编程》在内的书籍。史蒂文为 Python 社区创建教育内容，并撰写技术博客。
- en: '**Discussion themes: Python pros and cons, Python books, v3.6.**'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**讨论主题：Python 的优缺点、Python 书籍、v3.6。**'
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Catch up with Steven Lott here: @s_lott**'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**与史蒂文·洛特保持联系：@s_lott**'
- en: '**Mike Driscoll**: So why did you become a programmer?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**迈克·德里斯科尔**：那么你为什么成为程序员呢？'
- en: '**Steven Lott**: I started programming in the 1970s, when computers were rare.
    My school had two Olivetti Programma 101 calculators and an IBM 1620 computer.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**史蒂文·洛特**：我在20世纪70年代开始编程，当时计算机很稀有。我的学校有两台奥利维蒂Programma 101计算器和一台IBM 1620计算机。'
- en: It was empowering being able to create useful behavior on these machines, such
    as simulating random events, drawing things and trying to design new kinds of
    games. A responsive and autonomous device was the ultimate toy, even when doing
    math homework. The idea of building things that were new and useful via software
    was compelling. Also, I had a bunch of friends who hung around in the computer
    room.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在这些机器上创建有用的行为，例如模拟随机事件、绘制东西和尝试设计新型游戏，这让我感到很有力量。一个响应式且自主的设备是终极玩具，即使是在做数学作业时也是如此。通过软件构建新颖且有用的东西的想法非常吸引人。此外，我还有一帮朋友经常在计算机房里闲逛。
- en: '**Driscoll**: How did you start using Python?'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你是如何开始使用 Python 的？'
- en: '**Lott**: In the late 90s, as object-oriented programming was building momentum,
    I started tracking the popular languages.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛特**：在20世纪90年代末，随着面向对象编程的兴起，我开始跟踪流行的语言。'
- en: I had a Macintosh with the port of Smalltalk-80, the THINK C++ compiler and
    a JDK 1.1\. I made regular searches for emerging object-oriented programming technology
    and eventually found Python.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一台装有 Smalltalk-80 端口、THINK C++ 编译器和 JDK 1.1 的 Macintosh。我定期搜索新兴的面向对象编程技术，最终发现了
    Python。
- en: '**Steven Lott: ''The barriers to entry for Python were so much lower than the
    other languages that I had learned.''**'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**史蒂文·洛特：''Python 的入门门槛比我学过的其他语言要低得多。''**'
- en: The barriers to entry for Python were so much lower than the other languages
    that I had learned. There was only a runtime and no complex toolchain required
    to build software. Python was replacing Perl, AWK, sed, and grep with one tool
    that handled a variety of use cases. By 2000, I was trying to build useful and
    working applications in Python.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的入门门槛比我学过的其他语言要低得多。它只需要运行时，不需要复杂的工具链来构建软件。Python 正在用一种处理各种用例的工具取代 Perl、AWK、sed
    和 grep。到2000年，我正在尝试用 Python 构建有用且可行的应用程序。
- en: '**Driscoll**: What did you like about Python?'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你喜欢 Python 的哪些方面？'
- en: '**Lott**: At first, I was drawn to the elegant simplicity of Python. The standard
    library provided an amazing array of tools. As I learned more, the vast ecosystem
    of modules and packages outside of the standard library showed me how much could
    be done.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛特**：起初，我被 Python 的优雅简洁所吸引。标准库提供了一系列惊人的工具。随着我学习的深入，标准库之外的庞大模块和包生态系统让我看到了可以做多少事情。'
- en: I used Python at work because I could solve a problem quickly. The language
    was wonderful for complex data wrangling problems. In many cases, success stemmed
    from getting started quickly and discovering the nuances and complications of
    a problem as early as possible. Python encourages you to fail quickly and start
    again on a new course.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我在工作中使用 Python，因为我可以快速解决问题。这种语言非常适合处理复杂的数据整理问题。在很多情况下，成功源于快速开始并尽早发现问题的细微差别和复杂性。Python
    鼓励你快速失败并重新开始新的方向。
- en: '**Steven Lott: ''Python encourages you to fail quickly and start again on a
    new course.''**'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**史蒂文·洛特：''Python 鼓励你快速失败并重新开始新的方向。''**'
- en: The more that I learn about NumPy, the more that I see Python as a kind of universal
    container for code. The NumPy libraries are based on C (and Fortran), so having
    a Python wrapper makes them widely available and useful.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我对NumPy了解得越多，就越觉得Python是一种代码的通用容器。NumPy库基于C（和Fortran），因此有一个Python包装器使得它们广泛可用且有用。
- en: The underlying reason for using Python wasn't clear to me until Guido van Rossum's
    keynote speech at PyCon 2016\. Python's biggest strength stems from the community.
    Python's open source nature creates and encourages a community effort to build
    cool new things.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 直到2016年PyCon大会上吉多·范罗苏姆的闭幕演讲，我都没有清楚地意识到使用Python的根本原因。Python的最大优势源于其社区。Python的开源性质创造并鼓励了社区共同努力构建酷炫的新事物。
- en: '**Steven Lott: ''Python''s biggest strength stems from the community.''**'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**史蒂文·洛特：''Python的最大优势源于其社区。''**'
- en: 'Python has numerous other strengths, such as its wide adoption as a language.
    Python is used in numerous contexts: scientists are using it to analyze truly
    gigantic datasets and it''s used to build scalable web services too. Python is
    also used recreationally by home hackers who are integrating their Alexa, Nest,
    and Arduino-based temperature sensors.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Python还有许多其他优势，例如作为一门语言的广泛应用。Python被用于许多场景：科学家们用它来分析真正巨大的数据集，也被用来构建可扩展的Web服务。Python还被家庭黑客用于娱乐，他们正在整合他们的Alexa、Nest和基于Arduino的温度传感器。
- en: Another strength of Python is sometimes called *batteries included*. With a
    single download, you have all the tools you want. If you want to learn the language,
    then you can start with the distribution for your computer. If you want to do
    data science, then you can start with the Anaconda distribution, which is where
    lots of packages are bundled.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python的另一个优势有时被称为“内置电池”。只需下载一次，你就有所有想要的工具。如果你想学习这门语言，可以从适合你电脑的发行版开始。如果你想进行数据科学，可以从Anaconda发行版开始，那里捆绑了许多软件包。
- en: The Python Software Foundation (PSF) makes active steps to be as inclusive as
    possible. The philosophy is that everyone should be able to learn and share their
    findings. Python's community believes that nobody should be excluded. We're all
    using Python to solve problems, so we all need help.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Python软件基金会（PSF）积极采取措施，尽可能地包容。其理念是，每个人都应该能够学习和分享他们的发现。Python的社区认为，没有人应该被排除在外。我们都在使用Python来解决问题，因此我们都需要帮助。
- en: '**Driscoll**: What are Python''s weaknesses as a language?'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里科：Python作为一门语言有哪些弱点？**'
- en: '**Lott**: I''ve collected a few lists of Python''s weaknesses. Some of them
    are utterly farcical and I''ve seen many sentiments which make no sense at all.
    A few complaints about Python are meaningful.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛特：** 我收集了一些Python弱点的列表。其中一些完全是荒谬的，我看到了很多毫无意义的观点。关于Python的一些抱怨是有意义的。'
- en: Overall, I've learned that most problems that are blamed on the Python language
    being slow are more often than not due to ineffective algorithm and data structure
    choices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我了解到，大多数被归咎于Python语言慢的问题，往往是因为算法和数据结构选择不当。
- en: '**Steven Lott: ''Python''s core runtime is remarkably fast.''**'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**史蒂文·洛特：''Python的核心运行时非常快。''**'
- en: Python's core runtime is remarkably fast. Fortran and C are considerably faster
    because they have optimizing compilers, that produce code focused on the underlying
    chipset. The SciPy and NumPy use of binary code wrapped in Python addresses this
    concern nicely.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Python的核心运行时非常快。Fortran和C要快得多，因为它们有优化编译器，可以生成针对底层芯片集的代码。SciPy和NumPy使用Python包装的二进制代码很好地解决了这个问题。
- en: Another issue is the opportunity for confusion when using Python. The orthogonality
    between language statements and data structures means that lists, sets, and dictionaries
    have some overlapping features. The immensely sophisticated implementation of
    Python data structures makes it possible to make a bad choice and get correct
    answers, but have horribly inefficient code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是在使用Python时可能会产生混淆的机会。语言语句和数据结构之间的正交性意味着列表、集合和字典有一些重叠的功能。Python数据结构的极其复杂的实现使得人们可以做出错误的选择并获得正确的结果，但代码效率极低。
- en: Lastly, a weakness for Python is the possibility of creating inheritance problems.
    Everything is dynamic, so it can be difficult for tools like Pylint to discern
    meaningful method redefinitions from spelling mistakes with similar-looking method
    names and plain bad design.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Python的一个弱点是可能会产生继承问题。一切都是动态的，因此对于像Pylint这样的工具来说，区分有意义的方法定义和拼写错误（具有相似外观的方法名和普通糟糕的设计）可能很困难。
- en: The `collections.abc` module has decorators that can be used to organize code
    and provide some help with checking redefinitions. The type definitions in the
    `typing` module allow mypy to locate potential problems.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`collections.abc`模块有一些装饰器，可以用来组织代码并提供一些检查重定义的帮助。`typing`模块中的类型定义允许mypy定位潜在的问题。'
- en: '**Driscoll**: So how did you end up becoming an author of Python books?'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你是如何成为Python书籍作者的？'
- en: '**Lott**: Most roles in my career more or less just happened to me, but becoming
    a writer was a conscious decision.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛特**：在我职业生涯的多数角色都是偶然发生的，但成为一名作家是一个有意识的决策。'
- en: In this case, I had decided that there could be value in teaching the Python
    language and the associated software engineering skills. I started to collect
    notes for a book in 2002\. By 2010, I had tried self-publishing several books
    on Python.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我决定教授Python语言和相关的软件工程技能可能会有价值。我从2002年开始收集书籍的笔记。到2010年，我已经尝试过自出版几本关于Python的书籍。
- en: '**Steven Lott: ''Over a few years, I answered thousands of questions about
    Python and somehow built up a large reputation.''**'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**史蒂文·洛特**：“在几年时间里，我回答了数千个关于Python的问题，并且不知怎么地积累起了很高的声誉。”'
- en: When Stack Overflow started, I was an early participant. There were many interesting
    Python questions. The questions showed gaps where more information was needed
    about Python specifically and software engineering in general. Over a few years,
    I answered thousands of questions about Python and somehow built up a large reputation.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当Stack Overflow开始时，我是一名早期参与者。那时有很多有趣的Python问题。这些问题显示了在Python具体和软件工程一般方面需要更多信息的地方。在几年时间里，我回答了数千个关于Python的问题，并且不知怎么地积累起了很高的声誉。
- en: '**Driscoll**: What have you learned in the writing process?'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你在写作过程中学到了什么？'
- en: '**Lott**: I''ve learned about the difficulty of creating meaningful and interesting
    examples. An example needs to have a story arc and a problem that requires a solution.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛特**：我了解到创造有意义的有趣例子有多难。一个例子需要有一个故事弧和一个需要解决方案的问题。'
- en: Stories require drama and conflict, and that doesn't often surface when thinking
    about data structures and algorithms. I spend more time wandering around trying
    to think of examples than doing any other part of the writing process. A lot of
    the problems that I come up with are too large and complex.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 故事需要戏剧性和冲突，但在思考数据结构和算法时，这通常不会显现出来。我花更多的时间四处游荡，试图想出例子，而不是做写作过程中的其他任何部分。我提出的大多数问题都太大、太复杂。
- en: A snippet of code is difficult to describe if it doesn't solve a problem.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码片段没有解决问题，那么描述它就很困难。
- en: For example, the traveling salesman problem has a compelling story arc that
    characterizes graph traversal. Having a story provides a framework for remembering
    the essential problem and seeing how the solution works. Pure code doesn't help
    anyone to understand why the language construct is important. Code only exists
    to solve a problem, so it's imperative to describe the problem.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，旅行商问题有一个引人入胜的故事弧，它描述了图遍历。有一个故事提供了一个框架来记住基本问题，并看到解决方案是如何工作的。纯代码不能帮助任何人理解语言结构为什么重要。代码只存在于解决问题，因此描述问题是至关重要的。
- en: '**Steven Lott: ''Pure code doesn''t help anyone to understand why the language
    construct is important. Code only exists to solve a problem, so it''s imperative
    to describe the problem.''**'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**史蒂文·洛特**：“纯代码不能帮助任何人理解语言结构为什么重要。代码只存在于解决问题，因此描述问题是至关重要的。”'
- en: Creating stories requires the time to view the problem from a distance, which
    is essential for summarizing and abstracting out needless details. Finding the
    right details requires a deep understanding. I know that I've failed when the
    description of the code becomes long and complex, involving tangential topics.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创造故事需要从远处观察问题的能力，这对于总结和抽象出不必要的细节是必要的。找到正确的细节需要深入理解。我知道当代码描述变得冗长和复杂，涉及相关话题时，我就失败了。
- en: '**Driscoll**: What are the pros and cons of self-publishing your books versus
    using a regular publisher?'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：与使用传统出版商相比，自己出版书籍的优缺点是什么？'
- en: '**Lott**: The difference between self-publishing and using a publisher is editing.
    The way that Python handles documentation testing (via the `doctest` module) means
    that the technical aspects of the content can be validated automatically. I''ve
    become better at this, but there are still some testing gaps in my published code.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛特**：自出版和使用出版社之间的区别在于编辑。Python处理文档测试（通过`doctest`模块）的方式意味着内容的技术方面可以自动验证。我在这方面变得更好，但我的出版代码中仍然存在一些测试空白。'
- en: Other challenges are grammar, usage, clarity, precision, color, unity, coherence,
    and concision. With Packt Publishing, there's a pipeline of editors who ask questions
    and notice the incomprehensible parts, long before my book lands in the hands
    of a reader.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其他挑战包括语法、用法、清晰度、精确度、色彩、统一性、连贯性和简洁性。与Packt出版社合作，有一系列编辑人员会在我的书到达读者手中之前就提出问题并注意到难以理解的部分。
- en: When I self-published, I did what seemed best to me. Publishers manage costs,
    prices, and revenue streams adroitly. My job is to know Python and Packt Publishing
    handles the rest.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当我自行出版时，我做了我认为最好的事情。出版社巧妙地管理成本、价格和收入流。我的工作是了解Python，而Packt出版社处理其余的事情。
- en: '**Driscoll**: Have you learned anything from your readers? If so, what?'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你从读者那里学到了什么？如果是的话，是什么？'
- en: '**Lott**: My readers have taught me the importance of using the Python `doctest`
    tool for checking each example in the body of a book. Readers have spotted numerous
    errors from code that I didn''t check properly.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛特**：我的读者教会了我使用Python `doctest`工具检查书中每个示例的重要性。读者们发现了我在代码中未能正确检查的许多错误。'
- en: '**Driscoll**: What has been your favorite interaction with a reader?'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你与读者之间最喜欢的互动是什么？'
- en: '**Lott**: I work for a tech company in Northern Virginia. A co-worker was surprised
    to find out that I''d written *Mastering Object-Oriented Python*. They had bought
    the book based on recommendations and read the outline, without really looking
    at the author''s name.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛特**：我在弗吉尼亚州北部的一家科技公司工作。一位同事惊讶地发现我写了《Mastering Object-Oriented Python》。他们是根据推荐购买了这本书，并阅读了大纲，而没有真正查看作者的名字。'
- en: '**Driscoll**: So which of your books has been the most popular? Why do you
    think that people buy one book over another?'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：那么，你哪本书最受欢迎？你认为人们为什么选择一本书而不是另一本书？'
- en: '**Lott**: My most successful book has been *Python for Secret Agents*. It seems
    like the fun factor is part of that. If a book has a wide variety of fun exercises
    and problems, then readers can see how Python applies to the problems that they
    know and want to solve. If the book is too narrowly focused on one problem domain,
    or too abstract, then the practical applications become hard to envision.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛特**：我最成功的书是《Python for Secret Agents》。似乎乐趣因素是其中的一部分。如果一本书包含各种有趣的活动和问题，那么读者可以看到Python是如何应用于他们已知并希望解决的问题。如果一本书过于专注于一个问题领域，或者过于抽象，那么实际应用就难以想象。'
- en: '**Driscoll**: What new and exciting trends are you seeing in Python?'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你在Python中看到了哪些新的和令人兴奋的趋势？'
- en: '**Lott**: Python 3.6 is fast and getting faster. The developers working on
    foundational algorithms have done impressive things.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛特**：Python 3.6运行速度快，而且越来越快。在基础算法上工作的开发者们做了令人印象深刻的事情。'
- en: '**Steven Lott: ''Python 3.6 is fast and getting faster. The developers working
    on foundational algorithms have done impressive things.''**'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**史蒂文·洛特**：“Python 3.6运行速度快，而且越来越快。在基础算法上工作的开发者们做了令人印象深刻的事情。”'
- en: The new internal data structures for the `dict` save memory and run faster.
    This kind of internal re-engineering is exciting. There are huge benefits that
    come from having an upgrade with few visible changes to the language.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`dict`的新内部数据结构节省了内存并运行得更快。这种内部重构令人兴奋。从语言几乎看不到的变化中，我们可以获得巨大的好处。'
- en: Another exciting direction that Python is going in is connected to the mypy
    project and the type hints. You have a handy quality tool that doesn't involve
    a profound change to the language, or the development tools. This can help you
    to write more reliable code, without introducing significant overheads. If mypy
    becomes part of Pylint or Pyflakes, then that will help even more.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Python正在走向的一个令人兴奋的方向与mypy项目和类型提示相关。你有一个方便的质量工具，它不需要对语言或开发工具进行重大改变。这可以帮助你编写更可靠的代码，而不会引入重大的开销。如果mypy成为Pylint或Pyflakes的一部分，那么这会帮助更多。
- en: As an Arduino maker, I often collect data for later analysis using Python-based
    tools. My current project involves a customized GPS tracker, which will be used
    on a boat to monitor its position while at anchor. An alarm will sound when the
    vessel is drifting. There are numerous other examples of Internet of things (IoT)
    projects, where Python is an important part of the overall effort to build something
    new and useful.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名Arduino爱好者，我经常使用基于Python的工具收集数据以供后续分析。我的当前项目涉及一个定制的GPS追踪器，它将被用于船只上，以在抛锚时监控其位置。当船只漂移时，会发出警报。还有许多其他物联网（IoT）项目的例子，在这些项目中，Python是构建新事物和有用事物整体努力的重要组成部分。
- en: '**Driscoll**: Do you see Python becoming a popular language for embedded programming
    now that MicroPython is becoming popular?'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 你认为随着MicroPython的流行，Python现在是否会成为嵌入式编程的流行语言？'
- en: '**Lott**: Yes, MicroPython and the pyboard are exciting new developments. Raspberry
    Pis also run Python nicely.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛特**: 是的，MicroPython和pyboard是令人兴奋的新发展。树莓派也能很好地运行Python。'
- en: '**Steven Lott: ''MicroPython and the pyboard are exciting new developments.''**'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**史蒂文·洛特：''MicroPython和pyboard是令人兴奋的新发展。''**'
- en: Processors continue to become faster and smaller, which means that more sophisticated
    languages can be used. One of the first computers that I ever used had 20K of
    memory and was the size of an upright piano. My first Apple II Plus had 64K of
    memory and covered the top of a desk. A pyboard has 1M of ROM and 192K of RAM
    in a package which is just over two square inches.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器持续变得更快更小，这意味着可以使用更复杂的语言。我最早使用的计算机有20K的内存，大小和一个直立的大钢琴一样。我的第一台Apple II Plus有64K的内存，覆盖了桌子的顶部。pyboard在一个超过两平方英寸的包装中拥有1M的ROM和192K的RAM。
- en: '**Driscoll**: Thank you, Steven Lott.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 谢谢，史蒂文·洛特。'
