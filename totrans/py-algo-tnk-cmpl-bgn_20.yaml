- en: Chapter 12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Complex Mathematical Expressions
  prefs: []
  type: TYPE_NORMAL
- en: 12.1 Writing Complex Mathematical Expressions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Section 7.2](chapter07.html#toc_2) you learned all about arithmetic operators
    but little about how to use them and how to write your own complex mathematical
    expressions. In this chapter, you are going to learn how easy is to convert mathematical
    expressions to Python statements.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)Arithmetic operators follow the same precedence rules
    as in mathematics, which means that exponentiation is performed first, multiplication
    and division are performed next, and addition and subtraction are performed last.
    Moreover, when multiplication and division co-exist in the same expression, and
    since both are of the same precedence, these operations are performed left to
    right.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The exponentiation operator ( ** ) serves a dual role.
    Apart from being used to calculate the power of a value raised to another value,
    it is also used to compute any root of a number using the known mathematical formula
    ![Image](img/chapter07-05.png). For example, you can write y = x ** (1 / 3) to
    calculate the cubic root of x or y = x ** (1 / 5) to calculate the fifth root
    of x.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.1-1 Representing Mathematical Expressions in Python
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Which of the following Python statements correctly represent the following mathematical
    expression?
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter12-01.png)
  prefs: []
  type: TYPE_NORMAL
- en: i)x = 1 * 27 / 10 + z
  prefs: []
  type: TYPE_NORMAL
- en: ii)x = 1 · 27 / (10 + z)
  prefs: []
  type: TYPE_NORMAL
- en: iii)x = 27 / 10 + z
  prefs: []
  type: TYPE_NORMAL
- en: iv)x = 27 / (10 + z)
  prefs: []
  type: TYPE_NORMAL
- en: v)x = (1 / 10 + z) * 27
  prefs: []
  type: TYPE_NORMAL
- en: vi)x = 1 / ((10 + z) * 27)
  prefs: []
  type: TYPE_NORMAL
- en: vii)x = 1 / (10 + z) * 27
  prefs: []
  type: TYPE_NORMAL
- en: viii)x = 1 / (10 + z) / 27
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: i)Wrong. Since the multiplication and the division are performed before the
    addition, this is equivalent to ![Image](img/chapter12-02.png).
  prefs: []
  type: TYPE_NORMAL
- en: ii)Wrong. An asterisk must have been used for multiplication.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Wrong. Since the division is performed before the addition, this is equivalent
    to ![Image](img/chapter12-03.png).
  prefs: []
  type: TYPE_NORMAL
- en: iv)Correct. This is equivalent to ![Image](img/chapter12-04.png).
  prefs: []
  type: TYPE_NORMAL
- en: v)Wrong. Inside parentheses, the division is performed before the addition.
    This is equivalent to ![Image](img/chapter12-05.png).
  prefs: []
  type: TYPE_NORMAL
- en: vi)Wrong. Parentheses are executed first and this is equivalent to ![Image](img/chapter12-06.png)
  prefs: []
  type: TYPE_NORMAL
- en: vii)Correct. Division is performed before multiplication (left to right). The
    term ![Image](img/chapter12-07.png) is calculated first and then, the result is
    multiplied by 27.
  prefs: []
  type: TYPE_NORMAL
- en: viii)Wrong. This is equivalent to ![Image](img/chapter12-08.png)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.1-2 Writing a Mathematical Expression in Python
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that calculates the mathematical expression
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter12-09.png)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: First, you must distinguish between the data input and the output result. Obviously,
    the output result is assigned to y and the user must enter values for x and z.
    The solution for this exercise is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_12.1-2'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: z = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = 10 * x - (10 - z) / 4
  prefs: []
  type: TYPE_NORMAL
- en: print("The result is:", y)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.1-3 Writing a Complex Mathematical Expression in Python
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that calculates the mathematical expression
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter12-10.png)
  prefs: []
  type: TYPE_NORMAL
- en: Assume that the user enters only positive values for x, w, and z.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Oops! Now the expression is more complex! In fact, it is much more complex!
    So, let's take a look at a quite different approach. The main idea is to break
    the complex expression into smaller, simpler expressions and assign each sub-result
    to temporary variables. In the end, you can build the original expression out
    of all these temporary variables! This approach is presented next.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_12.1-3a'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: w = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: z = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: temp1 = 3 * x ** 2 + 5 * x + 2
  prefs: []
  type: TYPE_NORMAL
- en: temp2 = 7 * w + 1 / z
  prefs: []
  type: TYPE_NORMAL
- en: temp3 = (3 + x) / 7
  prefs: []
  type: TYPE_NORMAL
- en: nominator = 5 * temp1 / temp2 + z
  prefs: []
  type: TYPE_NORMAL
- en: denominator = 4 * temp3
  prefs: []
  type: TYPE_NORMAL
- en: y = nominator / denominator
  prefs: []
  type: TYPE_NORMAL
- en: print("The result is:", y)
  prefs: []
  type: TYPE_NORMAL
- en: You may say, “Okay, but I wasted so many variables and as everybody knows, each
    variable is a portion of main memory. How can I write the original expression
    in one single line and waste less memory?”
  prefs: []
  type: TYPE_NORMAL
- en: This job may be a piece of cake for an advanced programmer, but what about you?
    What about a novice programmer?
  prefs: []
  type: TYPE_NORMAL
- en: The next method will help you write even the most complex mathematical expressions
    without any syntax or logic errors! The rule is very simple. “After breaking the
    complex expression into smaller, simpler expressions and assigning each sub-result
    to temporary variables, start backwards and replace each variable with its assigned
    expression. Be careful though! When you replace a variable with its assigned expression,
    you must always enclose the expression in parentheses!”
  prefs: []
  type: TYPE_NORMAL
- en: Confused? Don't be! It's easier in action. Let's try to rewrite the previous
    Python program. Starting backwards, replace variables nominator and denominator
    with their assigned expressions. The result is
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter12-11.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/notice.jpg)Note the extra parentheses added.'
  prefs: []
  type: TYPE_NORMAL
- en: Now you must replace variables temp1, temp2, and temp3 with their assigned expressions,
    and the one-line expression is complete!
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter12-12.png)'
  prefs: []
  type: TYPE_IMG
- en: It may look scary at the end but it wasn't that difficult, was it?
  prefs: []
  type: TYPE_NORMAL
- en: The Python program can now be rewritten
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_12.1-3b'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: w = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: z = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = (5 * (3 * x ** 2 + 5 * x + 2) / (7 * w + 1 / z) + z) / (4 * ((3 + x) / 7))
  prefs: []
  type: TYPE_NORMAL
- en: print("The result is:", y)
  prefs: []
  type: TYPE_NORMAL
- en: 12.2 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Match each element from the first table with one or more elements from the
    second table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Expression | Expression |'
  prefs: []
  type: TYPE_TB
- en: '| i) 5 / x ** 2 * y + x ** 3 | a) 5 * y / x ** 2 + x ** 3 |'
  prefs: []
  type: TYPE_TB
- en: '| ii) 5 / (x ** 3 * y) + x ** 2 | b) 5 * y / x * x + x ** 3 |'
  prefs: []
  type: TYPE_TB
- en: '|   | c) 5 / (x * x * x * y) + x * x |'
  prefs: []
  type: TYPE_TB
- en: '|   | d) 5 / (x * x * x) * y + x * x |'
  prefs: []
  type: TYPE_TB
- en: '|   | e) 5 * y / (x * x) + x * x * x |'
  prefs: []
  type: TYPE_TB
- en: '|   | f) 1 / (x * x * x * y) * 5 + x * x |'
  prefs: []
  type: TYPE_TB
- en: '|   | g) y / (x * x) * 5 + x ** 3 |'
  prefs: []
  type: TYPE_TB
- en: '|   | h) 1 / (x * x) * 5 * y + x / 1 * x * x |'
  prefs: []
  type: TYPE_TB
- en: 2)Write the following mathematical expressions in Python using one line of code
    for each.
  prefs: []
  type: TYPE_NORMAL
- en: i)![Image](img/chapter12-13.png)
  prefs: []
  type: TYPE_NORMAL
- en: ii)![Image](img/chapter12-14.png)
  prefs: []
  type: TYPE_NORMAL
- en: iii)![Image](img/chapter12-15.png)
  prefs: []
  type: TYPE_NORMAL
- en: iv)![Image](img/chapter12-16.png)
  prefs: []
  type: TYPE_NORMAL
- en: v)![Image](img/chapter12-17.png)
  prefs: []
  type: TYPE_NORMAL
- en: vi)![Image](img/chapter12-18.png)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Write a Python program that prompts the user to enter a value for x and then
    calculates and displays the result of the following mathematical expression.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter12-19.png)
  prefs: []
  type: TYPE_NORMAL
- en: 4)Write a Python program that prompts the user to enter a value for x and then
    calculates and displays the result of the following mathematical expression.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter12-20.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Suggestion: Try to write the expression in one line of code.'
  prefs: []
  type: TYPE_NORMAL
- en: 5)Write a Python program that prompts the user to enter a positive value for
    x and w and then calculates and displays the result of the following mathematical
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter12-21.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Suggestion: Try to write the expression in one line of code'
  prefs: []
  type: TYPE_NORMAL
- en: 6)Write a Python program that prompts the user to enter a positive value for
    x and w and then calculates and displays the result of the following mathematical
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter12-22.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Suggestion: Try to write the expression in one line of code.'
  prefs: []
  type: TYPE_NORMAL
- en: 7)Write a Python program that prompts the user to enter a positive value for
    x and w and then calculates and displays the result of the following mathematical
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter12-23.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Suggestion: Try to write the expression in one line of code'
  prefs: []
  type: TYPE_NORMAL
- en: 8)Write a Python program that prompts the user to enter the lengths of all three
    sides A, B, and C, of a triangle and then calculates and displays the area of
    the triangle. You can use Heron's formula, which has been known for nearly 2,000
    years!
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter12-24.png)
  prefs: []
  type: TYPE_NORMAL
- en: where S is the semi-perimeter ![Image](img/chapter12-25.png)
  prefs: []
  type: TYPE_NORMAL
