- en: Chapter 12
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第12章
- en: Complex Mathematical Expressions
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的数学表达式
- en: 12.1 Writing Complex Mathematical Expressions
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.1 编写复杂的数学表达式
- en: In [Section 7.2](chapter07.html#toc_2) you learned all about arithmetic operators
    but little about how to use them and how to write your own complex mathematical
    expressions. In this chapter, you are going to learn how easy is to convert mathematical
    expressions to Python statements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第7.2节](chapter07.html#toc_2) 中，你学习了所有关于算术运算符的内容，但很少了解如何使用它们以及如何编写自己的复杂数学表达式。在本章中，你将了解到将数学表达式转换为
    Python 语句是多么容易。
- en: '![](img/remember.jpg)Arithmetic operators follow the same precedence rules
    as in mathematics, which means that exponentiation is performed first, multiplication
    and division are performed next, and addition and subtraction are performed last.
    Moreover, when multiplication and division co-exist in the same expression, and
    since both are of the same precedence, these operations are performed left to
    right.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)算术运算符遵循与数学中相同的优先级规则，这意味着指数运算首先执行，然后是乘法和除法，最后是加法和减法。此外，当同一个表达式中存在乘法和除法时，由于它们的优先级相同，这些运算从左到右执行。'
- en: '![](img/remember.jpg)The exponentiation operator ( ** ) serves a dual role.
    Apart from being used to calculate the power of a value raised to another value,
    it is also used to compute any root of a number using the known mathematical formula
    ![Image](img/chapter07-05.png). For example, you can write y = x ** (1 / 3) to
    calculate the cubic root of x or y = x ** (1 / 5) to calculate the fifth root
    of x.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)指数运算符（**）具有双重作用。除了用于计算一个值被提升到另一个值的幂之外，它还用于使用已知的数学公式 ![Image](img/chapter07-05.png)
    计算一个数的任何根。例如，你可以写 y = x ** (1 / 3) 来计算 x 的立方根，或者 y = x ** (1 / 5) 来计算 x 的五次根。'
- en: Exercise 12.1-1 Representing Mathematical Expressions in Python
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 12.1-1 在 Python 中表示数学表达式
- en: Which of the following Python statements correctly represent the following mathematical
    expression?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪个 Python 语句正确地表示了以下数学表达式？
- en: .![Image](img/chapter12-01.png)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter12-01.png)
- en: i)x = 1 * 27 / 10 + z
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: i)x = 1 * 27 / 10 + z
- en: ii)x = 1 · 27 / (10 + z)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: ii)x = 1 · 27 / (10 + z)
- en: iii)x = 27 / 10 + z
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: iii)x = 27 / 10 + z
- en: iv)x = 27 / (10 + z)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: iv)x = 27 / (10 + z)
- en: v)x = (1 / 10 + z) * 27
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: v)x = (1 / 10 + z) * 27
- en: vi)x = 1 / ((10 + z) * 27)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: vi)x = 1 / ((10 + z) * 27)
- en: vii)x = 1 / (10 + z) * 27
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: vii)x = 1 / (10 + z) * 27
- en: viii)x = 1 / (10 + z) / 27
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: viii)x = 1 / (10 + z) / 27
- en: Solution
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: i)Wrong. Since the multiplication and the division are performed before the
    addition, this is equivalent to ![Image](img/chapter12-02.png).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: i) 错误。由于乘法和除法在加法之前执行，这相当于 ![Image](img/chapter12-02.png)。
- en: ii)Wrong. An asterisk must have been used for multiplication.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ii) 错误。必须使用星号进行乘法。
- en: iii)Wrong. Since the division is performed before the addition, this is equivalent
    to ![Image](img/chapter12-03.png).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: iii) 错误。由于除法在加法之前执行，这相当于 ![Image](img/chapter12-03.png)。
- en: iv)Correct. This is equivalent to ![Image](img/chapter12-04.png).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: iv) 正确。这相当于 ![Image](img/chapter12-04.png)。
- en: v)Wrong. Inside parentheses, the division is performed before the addition.
    This is equivalent to ![Image](img/chapter12-05.png).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: v) 错误。在括号内，除法在加法之前执行。这相当于 ![Image](img/chapter12-05.png)。
- en: vi)Wrong. Parentheses are executed first and this is equivalent to ![Image](img/chapter12-06.png)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: vi) 错误。括号内的运算首先执行，这相当于 ![Image](img/chapter12-06.png)
- en: vii)Correct. Division is performed before multiplication (left to right). The
    term ![Image](img/chapter12-07.png) is calculated first and then, the result is
    multiplied by 27.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: vii) 正确。除法在乘法之前执行（从左到右）。首先计算 ![Image](img/chapter12-07.png)，然后，将结果乘以 27。
- en: viii)Wrong. This is equivalent to ![Image](img/chapter12-08.png)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: viii) 错误。这相当于 ![Image](img/chapter12-08.png)
- en: Exercise 12.1-2 Writing a Mathematical Expression in Python
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 12.1-2 在 Python 中编写数学表达式
- en: Write a Python program that calculates the mathematical expression
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序来计算数学表达式
- en: .![Image](img/chapter12-09.png)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter12-09.png)
- en: Solution
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: First, you must distinguish between the data input and the output result. Obviously,
    the output result is assigned to y and the user must enter values for x and z.
    The solution for this exercise is shown here.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须区分数据输入和输出结果。显然，输出结果分配给 y，用户必须输入 x 和 z 的值。这个练习的解决方案如下所示。
- en: '![](img/my_exercise_header.png) file_12.1-2'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_12.1-2'
- en: x = float(input())
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: z = float(input())
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: z = float(input())
- en: y = 10 * x - (10 - z) / 4
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: y = 10 * x - (10 - z) / 4
- en: print("The result is:", y)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: print("结果是:", y)
- en: Exercise 12.1-3 Writing a Complex Mathematical Expression in Python
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 12.1-3 在 Python 中编写复杂的数学表达式
- en: Write a Python program that calculates the mathematical expression
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，计算以下数学表达式
- en: .![Image](img/chapter12-10.png)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter12-10.png)
- en: Assume that the user enters only positive values for x, w, and z.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户只为 x、w 和 z 输入正值。
- en: Solution
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Oops! Now the expression is more complex! In fact, it is much more complex!
    So, let's take a look at a quite different approach. The main idea is to break
    the complex expression into smaller, simpler expressions and assign each sub-result
    to temporary variables. In the end, you can build the original expression out
    of all these temporary variables! This approach is presented next.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！现在表达式更复杂了！实际上，它要复杂得多！所以，让我们看看一个相当不同的方法。主要思想是将复杂表达式分解成更小、更简单的表达式，并将每个子结果分配给临时变量。最后，你可以用所有这些临时变量构建原始表达式！这种方法将在下面介绍。
- en: '![](img/my_exercise_header.png) file_12.1-3a'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_12.1-3a'
- en: x = float(input())
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: w = float(input())
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: w = float(input())
- en: z = float(input())
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: z = float(input())
- en: temp1 = 3 * x ** 2 + 5 * x + 2
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: temp1 = 3 * x ** 2 + 5 * x + 2
- en: temp2 = 7 * w + 1 / z
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: temp2 = 7 * w + 1 / z
- en: temp3 = (3 + x) / 7
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: temp3 = (3 + x) / 7
- en: nominator = 5 * temp1 / temp2 + z
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 分子 = 5 * temp1 / temp2 + z
- en: denominator = 4 * temp3
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 分母 = 4 * temp3
- en: y = nominator / denominator
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: y = 分子 / 分母
- en: print("The result is:", y)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: print("结果是:", y)
- en: You may say, “Okay, but I wasted so many variables and as everybody knows, each
    variable is a portion of main memory. How can I write the original expression
    in one single line and waste less memory?”
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会说，“好吧，但我浪费了这么多变量，而且众所周知，每个变量都是主内存的一部分。我如何将原始表达式写在一行中并浪费更少的内存？”
- en: This job may be a piece of cake for an advanced programmer, but what about you?
    What about a novice programmer?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这项工作可能对高级程序员来说是小菜一碟，但对你呢？对于一个新手程序员呢？
- en: The next method will help you write even the most complex mathematical expressions
    without any syntax or logic errors! The rule is very simple. “After breaking the
    complex expression into smaller, simpler expressions and assigning each sub-result
    to temporary variables, start backwards and replace each variable with its assigned
    expression. Be careful though! When you replace a variable with its assigned expression,
    you must always enclose the expression in parentheses!”
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下一种方法将帮助您编写即使是最复杂的数学表达式也不会出现任何语法或逻辑错误！规则非常简单。“在将复杂表达式分解成更小、更简单的表达式并将每个子结果分配给临时变量之后，从后往前开始，用分配的表达式替换每个变量。但要注意！当你用分配的表达式替换一个变量时，你必须始终将表达式放在括号内！”
- en: Confused? Don't be! It's easier in action. Let's try to rewrite the previous
    Python program. Starting backwards, replace variables nominator and denominator
    with their assigned expressions. The result is
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 感到困惑吗？不要！实际上操作起来更容易。让我们尝试重写之前的 Python 程序。从后往前，用分配的表达式替换变量分子和分母。结果是
- en: '![Image](img/chapter12-11.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter12-11.png)'
- en: '![](img/notice.jpg)Note the extra parentheses added.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意添加的额外括号。'
- en: Now you must replace variables temp1, temp2, and temp3 with their assigned expressions,
    and the one-line expression is complete!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你必须将变量 temp1、temp2 和 temp3 替换为它们分配的表达式，这样一行表达式就完成了！
- en: '![Image](img/chapter12-12.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter12-12.png)'
- en: It may look scary at the end but it wasn't that difficult, was it?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然最后看起来可能很吓人，但其实并不难，不是吗？
- en: The Python program can now be rewritten
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以将 Python 程序重写为
- en: '![](img/my_exercise_header.png) file_12.1-3b'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_12.1-3b'
- en: x = float(input())
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: w = float(input())
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: w = float(input())
- en: z = float(input())
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: z = float(input())
- en: y = (5 * (3 * x ** 2 + 5 * x + 2) / (7 * w + 1 / z) + z) / (4 * ((3 + x) / 7))
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: y = (5 * (3 * x ** 2 + 5 * x + 2) / (7 * w + 1 / z) + z) / (4 * ((3 + x) / 7))
- en: print("The result is:", y)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: print("结果是:", y)
- en: 12.2 Review Exercises
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12.2 复习练习
- en: Complete the following exercises.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Match each element from the first table with one or more elements from the
    second table.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 1)将第一个表中的每个元素与第二个表中的一个或多个元素匹配。
- en: '| Expression | Expression |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 表达式 | 表达式 |'
- en: '| i) 5 / x ** 2 * y + x ** 3 | a) 5 * y / x ** 2 + x ** 3 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| i) 5 / x ** 2 * y + x ** 3 | a) 5 * y / x ** 2 + x ** 3 |'
- en: '| ii) 5 / (x ** 3 * y) + x ** 2 | b) 5 * y / x * x + x ** 3 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| ii) 5 / (x ** 3 * y) + x ** 2 | b) 5 * y / x * x + x ** 3 |'
- en: '|   | c) 5 / (x * x * x * y) + x * x |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '|   | c) 5 / (x * x * x * y) + x * x |'
- en: '|   | d) 5 / (x * x * x) * y + x * x |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '|   | d) 5 / (x * x * x) * y + x * x |'
- en: '|   | e) 5 * y / (x * x) + x * x * x |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '|   | e) 5 * y / (x * x) + x * x * x |'
- en: '|   | f) 1 / (x * x * x * y) * 5 + x * x |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '|   | f) 1 / (x * x * x * y) * 5 + x * x |'
- en: '|   | g) y / (x * x) * 5 + x ** 3 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '|   | g) y / (x * x) * 5 + x ** 3 |'
- en: '|   | h) 1 / (x * x) * 5 * y + x / 1 * x * x |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '|   | h) 1 / (x * x) * 5 * y + x / 1 * x * x |'
- en: 2)Write the following mathematical expressions in Python using one line of code
    for each.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 2)使用一行代码将以下数学表达式在Python中编写出来。
- en: i)![Image](img/chapter12-13.png)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: i)![Image](img/chapter12-13.png)
- en: ii)![Image](img/chapter12-14.png)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ii)![Image](img/chapter12-14.png)
- en: iii)![Image](img/chapter12-15.png)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: iii)![Image](img/chapter12-15.png)
- en: iv)![Image](img/chapter12-16.png)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: iv)![Image](img/chapter12-16.png)
- en: v)![Image](img/chapter12-17.png)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: v)![Image](img/chapter12-17.png)
- en: vi)![Image](img/chapter12-18.png)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: vi)![Image](img/chapter12-18.png)
- en: 3)Write a Python program that prompts the user to enter a value for x and then
    calculates and displays the result of the following mathematical expression.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 3)编写一个Python程序，提示用户输入x的值，然后计算并显示以下数学表达式的结果。
- en: .![Image](img/chapter12-19.png)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter12-19.png)
- en: 4)Write a Python program that prompts the user to enter a value for x and then
    calculates and displays the result of the following mathematical expression.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 4)编写一个Python程序，提示用户输入x的值，然后计算并显示以下数学表达式的结果。
- en: .![Image](img/chapter12-20.png)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter12-20.png)
- en: 'Suggestion: Try to write the expression in one line of code.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 建议：尝试将表达式写在一行代码中。
- en: 5)Write a Python program that prompts the user to enter a positive value for
    x and w and then calculates and displays the result of the following mathematical
    expression.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 5)编写一个Python程序，提示用户输入x和w的正值，然后计算并显示以下数学表达式的结果。
- en: .![Image](img/chapter12-21.png)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter12-21.png)
- en: 'Suggestion: Try to write the expression in one line of code'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 建议：尝试将表达式写在一行代码
- en: 6)Write a Python program that prompts the user to enter a positive value for
    x and w and then calculates and displays the result of the following mathematical
    expression.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 6)编写一个Python程序，提示用户输入x和w的正值，然后计算并显示以下数学表达式的结果。
- en: .![Image](img/chapter12-22.png)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter12-22.png)
- en: 'Suggestion: Try to write the expression in one line of code.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 建议：尝试将表达式写在一行代码。
- en: 7)Write a Python program that prompts the user to enter a positive value for
    x and w and then calculates and displays the result of the following mathematical
    expression.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 7)编写一个Python程序，提示用户输入x和w的正值，然后计算并显示以下数学表达式的结果。
- en: .![Image](img/chapter12-23.png)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter12-23.png)
- en: 'Suggestion: Try to write the expression in one line of code'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 建议：尝试将表达式写在一行代码
- en: 8)Write a Python program that prompts the user to enter the lengths of all three
    sides A, B, and C, of a triangle and then calculates and displays the area of
    the triangle. You can use Heron's formula, which has been known for nearly 2,000
    years!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 8)编写一个Python程序，提示用户输入三角形的三边长度A、B和C，然后计算并显示三角形的面积。你可以使用近2000年前就为人所知的海伦公式！
- en: .![Image](img/chapter12-24.png)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter12-24.png)
- en: where S is the semi-perimeter ![Image](img/chapter12-25.png)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 其中S是半周长 ![Image](img/chapter12-25.png)
