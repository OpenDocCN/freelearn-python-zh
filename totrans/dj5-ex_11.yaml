- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding Internationalization to Your Shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you added a coupon system to your shop and built a
    product recommendation engine.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how internationalization and localization work.
    By making your application accessible in multiple languages, you can serve a wider
    range of users. Additionally, by adapting your application to local formatting
    conventions such as date or number formatting, you improve its usability. By translating
    and localizing your application, you will make it more intuitive for users from
    different cultural backgrounds and increase user engagement.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your project for internationalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing translation files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating Python code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Rosetta to manage translations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating URL patterns and using a language prefix in URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing users to switch language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating models using `django-parler`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using model translations with the ORM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adapting views to use translations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the localized form fields of `django-localflavor`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Figure 11.1* shows a representation of the views, templates, and functionalities
    that will be built in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Diagram of the functionalities built in Chapter 11'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will implement internationalization in your project and
    translate templates, URLs, and models. You will add language selection links to
    the header of your site and create language-specific URLs. You will modify the
    `product_list` and `product_detail` views of the `shop` application to retrieve
    `Category` and `Product` objects by their translated slugs. You will also add
    a localized postal code field to the form used in the `order_create` view.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: All the Python modules used in this chapter are included in the `requirements.txt`
    file in the source code that comes with this chapter. You can follow the instructions
    to install each Python module below, or you can install all the requirements at
    once with the command `python -m pip install -r requirements.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Internationalization with Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Django offers full internationalization and localization support. It allows
    you to translate your application into multiple languages, and it handles locale-specific
    formatting for dates, times, numbers, and time zones. Let’s clarify the difference
    between internationalization and localization:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internationalization** (frequently abbreviated to **i18n**) is the process
    of adapting software for the potential use of different languages and locales
    so that it isn’t hardwired to a specific language or locale.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Localization** (abbreviated to **l10n**) is the process of actually translating
    the software and adapting it to a particular locale. Django itself is translated
    into more than 50 languages using its internationalization framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The internationalization framework allows you to easily mark strings for translation,
    both in Python code and in your templates. It relies on the GNU `gettext` toolset
    to generate and manage message files. A **message file** is a plain text file
    that represents a language. It contains a part, or all, of the translation strings
    found in your application and their respective translations for a single language.
    Message files have the `.po` extension. Once the translation is done, message
    files are compiled to offer rapid access to translated strings. The compiled translation
    files have the `.mo` extension.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s review the settings that Django provides for internationalization and
    localization.
  prefs: []
  type: TYPE_NORMAL
- en: Internationalization and localization settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Django provides several settings for internationalization. The following settings
    are the most relevant ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`USE_I18N`: A Boolean that specifies whether Django’s translation system is
    enabled. This is `True` by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USE_TZ`: A Boolean that specifies whether datetimes are time-zone-aware. When
    you create a project with the `startproject` command, this is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LANGUAGE_CODE`: The default language code for the project. This is in the
    standard language ID format, for example, `en-us` for American English or `en-gb`
    for British English. This setting requires `USE_I18N` to be set to `True` in order
    to take effect. You can find a list of valid language IDs at `http://www.i18nguy.com/unicode/language-identifiers.html`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LANGUAGES`: A tuple that contains available languages for the project. They
    come in two tuples with a **language code** and a **language name**. You can see
    the list of available languages at `django.conf.global_settings`. When you choose
    which languages your site will be available in, you set `LANGUAGES` to a subset
    of that list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LOCALE_PATHS`: A list of directories where Django looks for message files
    containing translations for the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TIME_ZONE`: A string that represents the time zone for the project. This is
    set to `''UTC''` when you create a new project using the `startproject` command.
    You can set it to any other time zone, such as `''Europe/Madrid''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are some of the internationalization and localization settings available.
    You can find the full list at [https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n](https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n).
  prefs: []
  type: TYPE_NORMAL
- en: After reviewing the most important settings for internationalization and localization,
    let’s learn how we can create translations for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Internationalization management commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Django includes the following management commands to manage translations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`makemessages`: This runs over the source tree to find all the strings marked
    for translation and creates or updates the `.po` message files in the `locale`
    directory. A single `.po` file is created for each language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compilemessages`: This compiles the existing `.po` message files to `.mo`
    files, which are used to retrieve translations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django relies on the `gettext` toolkit to generate and compile translation files.
    Let’s review how to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the gettext toolkit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need the `gettext` toolkit to be able to create, update, and compile
    message files. Most Linux distributions include the `gettext` toolkit. If you
    are using macOS, the simplest way to install it is via Homebrew, at [https://brew.sh/](https://brew.sh/),
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You might also need to force-link it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you are using Windows, follow the steps at [https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows).
    You can download a precompiled `gettext` binary installer for Windows from [https://mlocati.github.io/articles/gettext-iconv-windows.html](https://mlocati.github.io/articles/gettext-iconv-windows.html).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have installed the `gettext` toolkit, you are all set to start translating
    your project. First, you need to understand the steps needed to translate your
    project and how Django determines the user’s language.
  prefs: []
  type: TYPE_NORMAL
- en: How to add translations to a Django project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s explore the process of internationalizing your project. Here are the
    steps needed to translate a Django project:'
  prefs: []
  type: TYPE_NORMAL
- en: Mark the strings for translation in your Python code and your templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `makemessages` command to create or update message files that include
    all the translation strings from your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Translate the strings contained in the message files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile the message files using the `compilemessages` management command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will follow this process to add translations to our project throughout this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you are going to learn how Django determines the language of the current
    user.
  prefs: []
  type: TYPE_NORMAL
- en: How Django determines the current language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Django comes with a middleware that determines the current language based on
    the request data. This is the `LocaleMiddleware` middleware that resides in `django.middleware.locale.LocaleMiddleware`,
    which performs the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using `i18n_patterns`, that is, you are using translated URL patterns,
    it looks for a language prefix in the requested URL to determine the current language.
    You will learn to translate URL patterns in the *Translating URL patterns section*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If no language prefix is found, it looks for an existing `LANGUAGE_SESSION_KEY`
    in the current user’s session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the language is not set in the session, it looks for an existing cookie with
    the current language. A custom name for this cookie can be provided in the `LANGUAGE_COOKIE_NAME`
    setting. By default, the name for this cookie is `django_language`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If no cookie is found, it looks for the `Accept-Language` HTTP header of the
    request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the `Accept-Language` header does not specify a language, Django uses the
    language defined in the `LANGUAGE_CODE` setting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, Django will use the language defined in the `LANGUAGE_CODE` setting
    unless you are using `LocaleMiddleware`. The process described here only applies
    when using this middleware.
  prefs: []
  type: TYPE_NORMAL
- en: We can also let users change their language. You will learn about how to implement
    a language selector in the section *Allowing users to switch language*.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by configuring our project for internationalization.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your project for internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will prepare our project to use different languages. We are going to create
    an English and a Spanish version for the online shop:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings.py` file of your project and add the following `LANGUAGES`
    setting to it. Place it next to the `LANGUAGE_CODE` setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `LANGUAGES` setting contains two tuples that consist of a language code
    and a name. Language codes can be locale-specific, such as `en-us` or `en-gb`,
    or generic, such as `en`. With this setting, you specify that your application
    will only be available in English and Spanish. If you don’t define a custom `LANGUAGES`
    setting, the site will be available in all the languages that Django is translated
    into.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make your `LANGUAGE_CODE` setting look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `''django.middleware.locale.LocaleMiddleware''` to the `MIDDLEWARE` setting.
    Make sure that this middleware comes after `SessionMiddleware` because `LocaleMiddleware`
    needs to use session data. It also has to be placed before `CommonMiddleware`
    because the latter needs an active language to resolve the requested URL. The
    `MIDDLEWARE` setting should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The order of middleware classes is very important because each middleware can
    depend on data set by another middleware that was executed previously. Middleware
    is applied for requests in order of appearance in `MIDDLEWARE`, and in reverse
    order for responses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following directory structure inside the main project directory,
    next to the `manage.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `locale` directory is the place where message files for your application
    will reside.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings.py` file again and add the following setting to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `LOCALE_PATHS` setting specifies the directories where Django has to look
    for translation files. Locale paths that appear first have the highest precedence.
  prefs: []
  type: TYPE_NORMAL
- en: When you use the `makemessages` command from your project directory, message
    files will be generated in the `locale/` path you created. However, for applications
    that contain a `locale/` directory, message files will be generated in that directory.
  prefs: []
  type: TYPE_NORMAL
- en: Your project is now configured for internationalization. Next, you will learn
    how to translate strings in your Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Translating Python code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will explore various methods to handle translations within Python code.
    We will cover the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard translations**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lazy translations**: Executed when the value is accessed rather than when
    the function is called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Translations including variables**: Used to interpolate variables within
    strings that are to be translated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plural forms in translations**: Techniques to manage translations that depend
    on numerical quantities that might affect the string being translated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For translating literals in your Python code, you can mark strings for translation
    using the `gettext()` function included in `django.utils.translation`. This function
    translates the message and returns a string. The convention is to import this
    function as a shorter alias named `_` (the underscore character).
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the documentation about translations at [https://docs.djangoproject.com/en/5.0/topics/i18n/translation/](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s review the different translation methods for Python strings.
  prefs: []
  type: TYPE_NORMAL
- en: Standard translations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code shows how to mark a string for translation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This method allows you to apply translations to most strings within your Python
    code by using the `gettext()` function, aliased as `_` for convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy translations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django includes **lazy** versions for all of its translation functions, which
    have the suffix `_lazy()`. When using the lazy functions, strings are translated
    when the value is accessed, rather than when the function is called (this is why
    they are translated **lazily**). The lazy translation functions come in handy
    when the strings marked for translation are in paths that are executed when modules
    are loaded.
  prefs: []
  type: TYPE_NORMAL
- en: A common example where lazy translations are beneficial is in the `settings.py`
    file of your project, where immediate translation is not practical because the
    settings must be defined before the translation system is fully ready.
  prefs: []
  type: TYPE_NORMAL
- en: Using `gettext_lazy()` instead of `gettext()` means that strings are translated
    when the value is accessed. Django offers a lazy version for all translation functions.
  prefs: []
  type: TYPE_NORMAL
- en: Translations including variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The strings marked for translation can include placeholders to include variables
    in the translations. The following code is an example of a translation string
    with a placeholder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: By using placeholders, you can reorder the text variables. For example, an English
    translation of the previous example might be *today is April 14*, while the Spanish
    one might be *hoy es 14 de Abril*. Always use string interpolation instead of
    positional interpolation when you have more than one parameter for the translation
    string. By doing so, you will be able to reorder the placeholder text.
  prefs: []
  type: TYPE_NORMAL
- en: Plural forms in translations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For plural forms, Django provides `ngettext()` and `ngettext_lazy()`. These
    functions translate singular and plural forms, depending on an argument that indicates
    the number of objects. The following example shows how to use them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this example, if `count` is `1`, `ngettext()` will use the first string and
    output `there is 1 product`. For any other number, it will use the second string,
    appropriately outputting, for example, `there are 5 products`. This allows for
    more accurate and grammatically correct translations in languages where pluralization
    rules are essential.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know the basics of translating literals in your Python code, it’s
    time to apply translations to your project.
  prefs: []
  type: TYPE_NORMAL
- en: Translating your own code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will translate the language names. To do this, you can follow these
    instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings.py` file of your project, import the `gettext_lazy()` function,
    and change the `LANGUAGES` setting, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, you use the `gettext_lazy()` function instead of `gettext()` to avoid
    a circular import, thus translating the languages’ names when they are accessed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell and run the following command from your project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the `locale/` directory. You should see a file structure like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A `.po` message file has been created for each language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `es/LC_MESSAGES/django.po` with a text editor. At the end of the file,
    you should be able to see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Each translation string is preceded by a comment showing details about the
    file and the line where it was found. Each translation includes two strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`msgid`: The translation string as it appears in the source code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msgstr`: The language translation, which is empty by default. This is where
    you have to enter the actual translation for the given string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fill in the `msgstr` translations for the given `msgid` string, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the modified message file, open the shell, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything goes well, you should see an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output gives you information about the message files that are being compiled.
    Take a look at the `locale` directory of the `myshop` project again. You should
    see the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You can see that a `.mo` compiled message file has been generated for each language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have translated the language names, let’s translate the model
    field names that are displayed on the site:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of the `orders` application, and add names marked
    for translation to the `Order` model fields, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You have added names for the fields that are displayed when a user places a
    new order. These are `first_name`, `last_name`, `email`, `address`, `postal_code`,
    and `city`. Remember that you can also use the `verbose_name` attribute to name
    the fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following directory structure inside the `orders` application directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: By creating a `locale` directory, the translation strings of this application
    will be stored in a message file in this directory instead of the main messages
    file. In this way, you can generate separate translation files for each application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell from the project directory and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `locale/es/LC_MESSAGES/django.po` file of the `order` application
    using a text editor. You will see the translation strings for the `Order` model.
    Fill in the following `msgstr` translations for the given `msgid` strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: After you have finished adding the translations, save the file.
  prefs: []
  type: TYPE_NORMAL
- en: Besides a text editor, you can use Poedit to edit translations. Poedit is a
    piece of software for editing translations that uses `gettext`. It is available
    for Linux, Windows, and macOS. You can download Poedit from [https://poedit.net/](https://poedit.net/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also translate the forms of your project. The `OrderCreateForm` of the
    `orders` application does not have to be translated. That’s because it is a `ModelForm`
    and uses the `verbose_name` attribute of the `Order` model fields for the form
    field labels. You are going to translate the forms of the `cart` and `coupons`
    applications:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `forms.py` file inside the `cart` application directory and add a
    `label` attribute to the `quantity` field of the `CartAddProductForm`. Then, mark
    this field for translation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `forms.py` file of the `coupons` application and translate the `CouponApplyForm`
    form, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You have added a label to the `code` field and marked it for translation.
  prefs: []
  type: TYPE_NORMAL
- en: You have finished marking Python strings for translation. Next, you will learn
    how to mark text for translation in templates.
  prefs: []
  type: TYPE_NORMAL
- en: Translating templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django offers the `{% translate %}` and `{% blocktranslate %}` template tags
    to translate the strings using templates. In order to use the translation template
    tags, you have to add `{% load i18n %}` to the top of your template to load them.
  prefs: []
  type: TYPE_NORMAL
- en: The {% translate %} template tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `{% translate %}` template tag allows you to mark a literal for translation.
    Internally, Django executes `gettext()` on the given text. This is how to mark
    a string for translation in a template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use `as` to store the translated content in a variable that you can
    use throughout your template. The following example stores the translated text
    in a variable called `greeting`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `{% translate %}` tag is useful for simple translation strings, but it can’t
    handle content for translation that includes variables.
  prefs: []
  type: TYPE_NORMAL
- en: The {% blocktranslate %} template tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `{% blocktranslate %}` template tag allows you to mark content that includes
    literals and variable content, using placeholders. The following example shows
    you how to use the `{% blocktranslate %}` tag, including a `name` variable in
    the content for translation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use `with` to include template expressions, such as accessing object
    attributes or applying template filters to variables. You always have to use placeholders
    for these. You can’t access expressions or object attributes inside the `blocktrans`
    block. The following example shows you how to use `with` to include an object
    attribute to which the `capfirst` filter has been applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Use the `{% blocktranslate %}` tag instead of `{% translate %}` when you need
    to include variable content in your translation string.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you are familiar with the translation template tags, let’s put them
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: Translating the shop templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `shop/base.html` template of the `shop` application. Make sure that
    you load the `i18n` tag at the top of the template and mark the strings for translation,
    as follows. The new code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that no template tag is split across multiple lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the `{% blocktranslate %}` tag to display the cart’s summary. The cart’s
    summary was previously as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: You changed it, and now you use `{% blocktranslate with ... %}` to set up the
    placeholder `total` with the value of `cart.get_total_price` (the object method
    called here). You also use `count`, which allows you to set a variable for counting
    objects for Django to select the right plural form. You set the `items` variable
    to count objects with the value of `total_items`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This allows you to set a translation for the singular and plural forms, which
    you separate with the `{% plural %}` tag within the `{% blocktranslate %}` block.
    The resulting code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, edit the `shop/product/detail.html` template of the `shop` application
    and add `i18n` to the `{% load %}` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note that `{% load %}` allows you to load all template tags at once by including
    the modules separated by spaces. In this case, we load the `i18n` and `static`
    modules that contain template tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, find the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, find the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, translate the `orders` application template. Edit the `orders/order/create.html`
    template of the `orders` application and mark the text for translation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that no template tag is split across multiple lines. Take a look
    at the following files in the code that accompanies this chapter to see how the
    strings have been marked for translation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `shop` application: Template `shop/product/list.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `orders` application: Template `orders/order/pdf.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `cart` application: Template `cart/detail.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `payments` application: Templates `payment/process.html`, `payment/completed.html`,
    and `payment/canceled.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that you can find the source code for this chapter at [https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter11](https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s update the message files to include the new translation strings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `.po` files are inside the `locale` directory of the `myshop` project, and
    you’ll see that the `orders` application now contains all the strings that you
    marked for translation.
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `.po` translation files of the project and the `orders` application,
    and include Spanish translations in `msgstr`. You can also use the translated
    `.po` files in the source code that accompanies this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to compile the translation files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: A `.mo` file containing compiled translations has been generated for each `.po`
    translation file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have edited `.po` files with a text editor or by using Poedit. Next,
    we are going to use a Django application to edit translations directly within
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Rosetta translation interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rosetta is a third-party application that allows you to edit translations directly
    in the browser, using the same interface as the Django administration site. Rosetta
    makes it easy to edit `.po` files, and it updates compiled translation files.
    This eliminates the need to download and upload translation files, and it supports
    collaborative editing by multiple users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s integrate Rosetta into your project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Rosetta via `pip` using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add `''rosetta''` to the `INSTALLED_APPS` setting in your project’s `settings.py`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to add Rosetta’s URLs to your main URL configuration. Edit the main
    `urls.py` file of your project and add the following URL pattern highlighted in
    bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you place it before the `shop.urls` pattern to prevent an undesired
    pattern match.
  prefs: []
  type: TYPE_NORMAL
- en: Open `http://127.0.0.1:8000/admin/` and log in as a superuser. Then, navigate
    to `http://127.0.0.1:8000/rosetta/` in your browser. In the **Filter** menu, click
    **THIRD PARTY** to display all the available message files, including those that
    belong to the `orders` application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a list of existing languages, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: The Rosetta administration interface'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Myshop** link in the **Spanish** section to edit the Spanish translations.
    You should see a list of translation strings, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: Editing Spanish translations using Rosetta'
  prefs: []
  type: TYPE_NORMAL
- en: You can enter the translations in the **SPANISH** column. The **OCCURRENCE(S)**
    column displays the files and lines of code where each translation string was
    found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Translations that include placeholders will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: Translations including placeholders'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rosetta uses a different background color to display placeholders. When you
    translate content, make sure that you keep placeholders untranslated. For example,
    take the following string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'It can be translated into Spanish as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: You can take a look at the source code that comes with this chapter to use the
    same Spanish translations for your project.
  prefs: []
  type: TYPE_NORMAL
- en: When you finish editing translations, click the **Save and translate next block**
    button to save the translations to the `.po` file. Rosetta compiles the message
    file when you save translations, so there is no need for you to run the `compilemessages`
    command. However, Rosetta requires write access to the `locale` directories to
    write the message files. Make sure that the directories have valid permissions.
  prefs: []
  type: TYPE_NORMAL
- en: If you want other users to be able to edit translations, open `http://127.0.0.1:8000/admin/auth/group/add/`
    in your browser and create a new group named `translators`. Then, access `http://127.0.0.1:8000/admin/auth/user/`
    to edit the users to whom you want to grant permissions so that they can edit
    translations. When editing a user, under the **Permissions** section, add the
    `translators` group to the **Chosen Groups** for each user. Rosetta is only available
    to superusers or users who belong to the `translators` group.
  prefs: []
  type: TYPE_NORMAL
- en: You can read Rosetta’s documentation at [https://django-rosetta.readthedocs.io/](https://django-rosetta.readthedocs.io/).
  prefs: []
  type: TYPE_NORMAL
- en: When you add new translations to your production environment, if you serve Django
    with a real web server, you will have to reload your server after running the
    `compilemessages` command, or after saving the translations with Rosetta, for
    any changes to take effect.
  prefs: []
  type: TYPE_NORMAL
- en: When editing translations, a translation can be marked as *fuzzy*. Let’s review
    what fuzzy translations are.
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzy translations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When editing translations in Rosetta, you can see a **FUZZY** column. This is
    not a Rosetta feature; it is provided by `gettext`. If the **FUZZY** flag is active
    for a translation, it will not be included in the compiled message files. This
    flag marks translation strings that need to be reviewed by a translator. When
    `.po` files are updated with new translation strings, it is possible that some
    translation strings will automatically be flagged as fuzzy. This happens when
    `gettext` finds some `msgid` that has been slightly modified. `gettext` pairs
    it with what it thinks was the old translation and flags it as fuzzy for review.
    The translator should then review the fuzzy translations, remove the **FUZZY**
    flag, and compile the translation file again.
  prefs: []
  type: TYPE_NORMAL
- en: You have translated your project’s interface, but internationalization doesn’t
    stop there. You can also translate URL patterns, offering custom URLs tailored
    for each supported language.
  prefs: []
  type: TYPE_NORMAL
- en: URL patterns for internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Django offers internationalization capabilities for URLs. It includes two main
    features for internationalized URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A language prefix in URL patterns**: Adding a language prefix to URLs to
    serve each language version under a different base URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Translated URL patterns**: Translating URL patterns so that every URL is
    different for each language'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One reason for translating URLs is to optimize your site for search engines.
    By adding a language prefix to your patterns, you will be able to index a URL
    for each language instead of a single URL for all of them. Furthermore, by translating
    URLs into each language, you will provide search engines with URLs that will rank
    better for each language.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a language prefix to URL patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django allows you to add a language prefix to your URL patterns. For example,
    the English version of your site can be served by a path starting with `/en/`,
    and the Spanish version under `/es/`. To use languages in URL patterns, you have
    to use the `LocaleMiddleware` provided by Django. The framework will use it to
    identify the current language from the requested URL. Previously, you added it
    to the `MIDDLEWARE` setting of your project, so you don’t need to do it now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add a language prefix to your URL patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the main `urls.py` file of the `myshop` project and add `i18n_patterns()`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: You can combine non-translatable standard URL patterns and patterns under `i18n_patterns`
    so that some patterns include a language prefix and others don’t. However, it’s
    better to use translated URLs only to avoid the possibility that a carelessly
    translated URL matches a non-translated URL pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Run the development server and open `http://127.0.0.1:8000/` in your browser.
    Django will perform the steps described in the *How Django determines the current
    language* section to determine the current language, and it will redirect you
    to the requested URL, including the language prefix. Take a look at the URL in
    your browser; it should now look like `http://127.0.0.1:8000/en/`. The current
    language is the one set by the `Accept-Language` header of your browser if it
    is Spanish or English; otherwise, it is the default `LANGUAGE_CODE` (English)
    defined in your settings.
  prefs: []
  type: TYPE_NORMAL
- en: You have added a language prefix to your URLs, generating a different URL for
    each language available. This helps you to index different versions in search
    engines.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to translate URL patterns so that we can add fully translated
    URLs to our site.
  prefs: []
  type: TYPE_NORMAL
- en: Translating URL patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Django supports translated strings in URL patterns. You can use a different
    translation for each language for a single URL pattern. You can mark URL patterns
    for translation in the same way you would with literals, using the `gettext_lazy()`
    function. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the main `urls.py` file of the `myshop` project and add translation strings
    to the regular expressions of the URL patterns for the `cart`, `orders`, `payment`,
    and `coupons` applications, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `urls.py` file of the `orders` application and mark the `order_create`
    URL pattern for translation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `urls.py` file of the `payment` application and change the code to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Note that these URL patterns will include a language prefix because they are
    included under `i18n_patterns()` in the main `urls.py` file of the project. This
    will make each URL pattern have a different URI for each available language, one
    starting with `/en/`, another one with `/es/`, and so on. However, we need a single
    URL for Stripe to notify events, and we need to avoid language prefixes in the
    `webhook` URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the `webhook` URL pattern from the `urls.py` file of the `payment` application.
    The file should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following `webhook` URL pattern to the main `urls.py` file of
    the `myshop` project. The new code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We have added the `webhook` URL pattern to `urlpatterns` outside of `i18n_patterns()`
    to ensure we maintain a single URL for Stripe event notifications.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t need to translate the URL patterns of the `shop` application, as they
    are built with variables and do not include any other literals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell and run the next command to update the message files with the
    new translations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure the development server is running with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/en/rosetta/` in your browser and click the **Myshop**
    link under the **Spanish** section. Click on **UNTRANSLATED ONLY** to only see
    the strings that have not been translated yet. Now, you will see the URL patterns
    for translation, as shown in *Figure 11.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: URL patterns for translation in the Rosetta interface'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a different translation string for each URL. Don’t forget to include a
    slash character, `/`, at the end of each URL, as shown in *Figure 11.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: Spanish translations for URL patterns in the Rosetta interface'
  prefs: []
  type: TYPE_NORMAL
- en: When you have finished, click **SAVE AND TRANSLATE NEXT BLOCK**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click on **FUZZY ONLY**. You will see translations that have been flagged
    as fuzzy because they were paired with the old translation of a similar original
    string. In the case displayed in *Figure 11.7*, the translations are incorrect
    and need to be corrected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: Fuzzy translations in the Rosetta interface'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the correct text for the fuzzy translations. Rosetta will automatically
    uncheck the **FUZZY** select box when you enter new text for a translation. When
    you have finished, click **SAVE AND TRANSLATE NEXT BLOCK**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: Correcting fuzzy translations in the Rosetta interface'
  prefs: []
  type: TYPE_NORMAL
- en: You can now go back to `http://127.0.0.1:8000/en/rosetta/files/third-party/`
    and edit the Spanish translation for the `orders` application as well.
  prefs: []
  type: TYPE_NORMAL
- en: After translating the strings into Spanish, our site will be available in two
    languages. You have already learned how Django determines the current language.
    However, users may wish to switch languages. Let’s create the functionality that
    allows users to change their language preference.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing users to switch language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since you are serving content that is available in multiple languages, you should
    let your users switch the site’s language. You are going to add a language selector
    to your site. The language selector will consist of a list of available languages
    displayed using links.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `shop/base.html` template of the `shop` application and locate the
    following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace them with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that no template tag is split into multiple lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how you build your language selector:'
  prefs: []
  type: TYPE_NORMAL
- en: You load the internationalization tags using `{% load i18n %}`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use the `{% get_current_language %}` tag to retrieve the current language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You get the languages defined in the `LANGUAGES` setting using the `{% get_available_languages
    %}` template tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use the tag `{% get_language_info_list %}` to provide easy access to the
    language attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You build an HTML list to display all available languages, and you add a `selected`
    class attribute to the currently active language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the code for the language selector, you used the template tags provided
    by `i18n`, based on the languages available in the settings of your project. Now,
    open `http://127.0.0.1:8000/` in your browser and take a look. You should see
    the language selector in the top right-hand corner of the site, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: The product list page, including a language selector in the site
    header'
  prefs: []
  type: TYPE_NORMAL
- en: 'Images in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Green tea*: Photo by Jia Ye on Unsplash'
  prefs: []
  type: TYPE_NORMAL
- en: '*Red tea*: Photo by Manki Kim on Unsplash'
  prefs: []
  type: TYPE_NORMAL
- en: '*Tea powder*: Photo by Phuong Nguyen on Unsplash'
  prefs: []
  type: TYPE_NORMAL
- en: Users can now effortlessly switch to their preferred language by selecting from
    the options available in the language selector.
  prefs: []
  type: TYPE_NORMAL
- en: Translating models with django-parler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django does not include built-in support to translate models. To manage content
    in multiple languages, you can either develop a custom solution or opt for a third-party
    module that facilitates model translation. There are several third-party applications
    available, each employing a unique method for storing and retrieving translations.
    One of these applications is `django-parler`. This module provides a very effective
    approach for translating models and integrates smoothly with Django’s administration
    site.
  prefs: []
  type: TYPE_NORMAL
- en: '`django-parler` generates a separate database table for each model that contains
    translations. This table includes all the translated fields and a foreign key
    for the original object that the translation belongs to. It also contains a language
    field, since each row stores the content for a single language.'
  prefs: []
  type: TYPE_NORMAL
- en: The `django-parler` package has not received updates for several years. Despite
    this, many developers continue to use it because of its proven effectiveness in
    facilitating model translations.
  prefs: []
  type: TYPE_NORMAL
- en: Installing django-parler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Install `django-parler` via `pip` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `settings.py` file of your project and add `''parler''` to the `INSTALLED_APPS`
    setting, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, add the following code to your settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This setting defines the available languages, `en` and `es`, for `django-parler`.
    You specify the default language, `en`, and indicate that `django-parler` should
    not hide untranslated content.
  prefs: []
  type: TYPE_NORMAL
- en: Parler is now activated in our project. Let’s add translation capabilities to
    our model fields.
  prefs: []
  type: TYPE_NORMAL
- en: Translating model fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s add translations to your product catalog. `django-parler` provides a
    `TranslatableModel` model class and a `TranslatedFields` wrapper to translate
    model fields. You can follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file inside the `shop` application directory and add the
    following import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, modify the `Category` model to make the `name` and `slug` fields translatable,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The `Category` model now inherits from `TranslatableModel` instead of `models.Model`,
    and both the `name` and `slug` fields are included in the `TranslatedFields` wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `Product` model to add translations for the `name`, `slug`, and `description`
    fields, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '`django-parler` manages translations by generating another model for each translatable
    model. In the following schema, you can see the fields of the `Product` model
    and what the generated `ProductTranslation` model will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.10: The Product model and related ProductTranslation model generated
    by django-parler'
  prefs: []
  type: TYPE_NORMAL
- en: The `ProductTranslation` model generated by `django-parler` includes the `name`,
    `slug`, and `description` translatable fields, a `language_code` field, and a
    `ForeignKey` for the master `Product` object. There is a one-to-many relationship
    from `Product` to `ProductTranslation`. A `ProductTranslation` object will exist
    for each available language of each `Product` object.
  prefs: []
  type: TYPE_NORMAL
- en: Since Django uses a separate table for translations, there are some Django features
    that you can’t use. It is not possible to use a default order with a translated
    field. You can filter by translated fields in queries, but you can’t include a
    translatable field in the `ordering Meta` options. Also, you can’t use indexes
    for the fields that are translated, as these fields will not exist in the original
    model because they will reside in the translation model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of the `shop` application and comment out the `ordering`
    and `indexes` attributes of the `Category Meta` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'You also have to comment out the `ordering` and attribute of the `Product Meta`
    class and the indexes that refer to the translated fields. Comment out the following
    lines of the `Product Meta` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about the `django-parler` module’s compatibility with Django
    at [https://django-parler.readthedocs.io/en/latest/compatibility.html](https://django-parler.readthedocs.io/en/latest/compatibility.html).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s continue by integrating the translatable models into the administration
    site.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating translations into the administration site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django-parler` integrates seamlessly with the Django administration site.
    This allows you to easily edit different translations of your objects through
    the user-friendly admin interface. It includes a `TranslatableAdmin` class that
    overrides the `ModelAdmin` class provided by Django to manage model translations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `admin.py` file of the `shop` application and add the following import
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `CategoryAdmin` and `ProductAdmin` classes to inherit from `TranslatableAdmin`
    instead of `ModelAdmin`. The `django-parler` module doesn’t support the `prepopulated_fields`
    attribute, but it does support the `get_prepopulated_fields()` method that provides
    the same functionality. Let’s change this accordingly. Edit the `admin.py` file
    to make it look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: You have adapted the administration site to work with the new translated models.
    You can now sync the database with the model changes that you made.
  prefs: []
  type: TYPE_NORMAL
- en: Creating migrations for model translations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create migrations, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell and run the following command to create a new migration for
    the model translations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This migration automatically includes the `CategoryTranslation` and `ProductTranslation`
    models created dynamically by `django-parler`. It’s important to note that this
    migration deletes the previous existing fields from your models.
  prefs: []
  type: TYPE_NORMAL
- en: This means that you will lose that data and need to set your categories and
    products again on the administration site after running it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the file `migrations/0002_translations.py` of the `shop` application and
    identify the two occurrences of the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace those occurrences with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: This is a fix for a minor issue found in the `django-parler` version you are
    using. This change is necessary to prevent the migration from failing when applying
    it. This issue is related to creating translations for existing fields in the
    model and shall be fixed in newer `django-parler` versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to apply the migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see an output that ends with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Your models are now synchronized with the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the development server using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/en/admin/shop/category/` in your browser. You will
    see that existing categories lost their name and slug, due to deleting those fields
    and using the translatable models generated by `django-parler` instead. You will
    just see a dash under each column, like in *Figure 11.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.11: The category list on the Django administration site after creating
    the translation models'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the dash under the category name to edit it. You will see that the
    **Change category** page includes two different tabs, one for English and one
    for Spanish translations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.12: The category edit form, including the language tabs added by
    django-parler'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you fill in a name and slug for all existing categories. When
    you edit a category, enter the English details and click on **Save and continue
    editing**. Then, click on **Spanish**, add the Spanish translation for the fields,
    and click on **SAVE**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.13: The Spanish translation of the category edit form'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to save the changes before switching between the language tabs.
  prefs: []
  type: TYPE_NORMAL
- en: After you complete the data for existing categories, open `http://127.0.0.1:8000/en/admin/shop/product/`
    and edit each of the products, providing an English and Spanish name, a slug,
    and a description.
  prefs: []
  type: TYPE_NORMAL
- en: Once the translations are in place, the next step will be to explore how to
    interact with the translated fields through the Django ORM.
  prefs: []
  type: TYPE_NORMAL
- en: Using translations in QuerySets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s take a look at how to work with translations in QuerySets. Run the following
    command to open the Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at how you can retrieve and query translation fields. To
    get the object with translatable fields translated into a specific language, you
    can use Django’s `activate()` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to do this is by using the `language()` manager provided by `django-parler`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'When you access translated fields, they are resolved using the current language.
    You can set a different current language for an object to access that specific
    translation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'When performing a QuerySet using `filter()`, you can filter using the related
    translation objects with the `translations__` syntax, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Let’s apply what we have learned to our views.
  prefs: []
  type: TYPE_NORMAL
- en: Adapting views for translations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s adapt the product catalog views:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `shop` application and add the following code
    highlighted in bold to the `product_list` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, edit the `product_detail` view and add the following code highlighted
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The `product_list` and `product_detail` views are now adapted to retrieve objects
    using translated fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the development server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/es/` in your browser. You should see the product
    list page, including all products translated into Spanish:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.14: The Spanish version of the product list page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, each product’s URL is built using the `slug` field translated into the
    current language. For example, the URL for a product in Spanish is `http://127.0.0.1:8000/es/2/te-rojo/`,
    whereas, in English, the URL is `http://127.0.0.1:8000/en/2/red-tea/`. If you
    navigate to a product details page, you will see the translated URL and the contents
    of the selected language, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.15: The Spanish version of the product details page'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to know more about `django-parler`, you can find the full documentation
    at [https://django-parler.readthedocs.io/en/latest/](https://django-parler.readthedocs.io/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: You have learned how to translate Python code, templates, URL patterns, and
    model fields. To complete the internationalization and localization process, you
    need to use localized formatting for dates, times, and numbers as well.
  prefs: []
  type: TYPE_NORMAL
- en: Format localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To enhance user experience, it’s important to present dates, times, and numbers
    in formats that align with the user’s locale. Adapting your site to the data formats
    familiar to users in various regions significantly improves its accessibility.
    Since Django 5.0, localized formatting of data is always enabled. Django displays
    numbers and dates using the format of the current locale.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django tries to use a locale-specific format whenever it outputs a value in
    a template. *Figure 11.16* shows the format localization for decimal numbers in
    the English and Spanish versions of the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.16: Format localization in English and Spanish'
  prefs: []
  type: TYPE_NORMAL
- en: Decimal numbers in the English version are displayed with a dot separator for
    decimal places, while in the Spanish version, a comma is used as the separator.
    This is due to the locale formats specified for the `en` and `es` locales by Django.
    You can take a look at the English formatting configuration at [https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py)
    and the Spanish formatting configuration at [https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py).
  prefs: []
  type: TYPE_NORMAL
- en: By default, Django applies the format localization for each locale. However,
    there might be cases for which you don’t want to use localized values. This is
    especially relevant when outputting JavaScript or JSON, which has to provide a
    machine-readable format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django offers a `{% localize %}` template tag that allows you to turn on/off
    localization for template fragments. This gives you control over localized formatting.
    You will have to load the `l10n` (localization) tags to be able to use this template
    tag. The following is an example of how to turn localization on and off in a template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Django also offers the `localize` and `unlocalize` template filters to force
    or avoid the localization of a value. These filters can be applied as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: You can also create custom format files to specify locale formatting. You can
    find further information about format localization at [https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/](https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/).
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will learn how to create localized form fields.
  prefs: []
  type: TYPE_NORMAL
- en: Using django-localflavor to validate form fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`django-localflavor` is a third-party module that contains a collection of
    utilities, such as form fields or model fields, that are specific for each country.
    It’s very useful for validating local regions, local phone numbers, identity card
    numbers, social security numbers, and so on. The package is organized into a series
    of modules named after ISO 3166 country codes. Follow these instructions to set
    it up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `django-localflavor` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `settings.py` file of your project and add `localflavor` to the `INSTALLED_APPS`
    setting, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'You are going to add the United States zip code field so that a valid United
    States zip code is required to create a new order. Edit the `forms.py` file of
    the `orders` application and make it look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: You import the `USZipCodeField` field from the `us` package of `localflavor`
    and use it for the `postal_code` field of the `OrderCreateForm` form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the development server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/en/orders/create/` in your browser. Fill in all
    the fields, enter a three-letter zip code, and then submit the form. You will
    get the following validation error, which is raised by `USZipCodeField`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 11.17* shows the form validation error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_11_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.17: The validation error for an invalid US zip code'
  prefs: []
  type: TYPE_NORMAL
- en: This is just a brief example of how to use a custom field from `localflavor`
    in your own project for validation purposes. The local components provided by
    `localflavor` are very useful for adapting your application to specific countries.
    You can read the `django-localflavor` documentation and see all the available
    local components for each country at [https://django-localflavor.readthedocs.io/en/latest/](https://django-localflavor.readthedocs.io/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: Expanding your project using AI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you are presented with a task to extend your project, accompanied
    by a sample prompt for ChatGPT to assist you. To engage with ChatGPT, visit [https://chat.openai.com/](https://chat.openai.com/).
    If this is your first interaction with ChatGPT, you can revisit the *Expanding
    your project using AI* section in *Chapter 3, Extending Your Blog Application*.
  prefs: []
  type: TYPE_NORMAL
- en: In this project example, we have implemented an online shop. We have added orders,
    payments, and a coupon system. Now, another typical feature of e-commerce platforms
    is managing shipping costs. Let’s consider adding a weight attribute to products
    and implementing shipping costs based on the total weight of the items shipped.
    Use ChatGPT to help you implement shipping costs for products, making them dependent
    on the product’s weight. Ensure that Stripe charges the correct amount, including
    the calculated shipping costs. You can use the prompt provided at [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter11/prompts/task.md](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter11/prompts/task.md).
  prefs: []
  type: TYPE_NORMAL
- en: Use ChatGPT as a debugging companion. If you find yourself stuck on a particularly
    stubborn bug, describe the problem and the context. It can provide a fresh perspective,
    often prompting you to consider angles you might have overlooked, leading to quicker
    problem resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the basics of the internationalization and localization
    of Django projects. You marked code and template strings for translation, and
    you discovered how to generate and compile translation files. You also installed
    Rosetta in your project to manage translations through a web interface. You translated
    URL patterns, and you created a language selector to allow users to switch the
    language of the site. Then, you used `django-parler` to translate models, and
    you used `django-localflavor` to validate localized form fields.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will start a new Django project that will consist of
    an e-learning platform. You will learn how to use model inheritance to implement
    polymorphism, and you will lay the foundations for a flexible content management
    system. You will create the application models, and you will learn how to create
    and apply fixtures to provide initial data for the models. You will build a custom
    model field and use it in your models. You will also build authentication views
    for your new application.
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter11)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of valid language IDs: [http://www.i18nguy.com/unicode/language-identifiers.html](http://www.i18nguy.com/unicode/language-identifiers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of internationalization and localization settings: [https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n](https://docs.djangoproject.com/en/5.0/ref/settings/#globalization-i18n-l10n)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Homebrew package manager: [https://brew.sh/](https://brew.sh/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing `gettext` on Windows: [https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/#gettext-on-windows)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Precompiled `gettext` binary installer for Windows: [https://mlocati.github.io/articles/gettext-iconv-windows.html](https://mlocati.github.io/articles/gettext-iconv-windows.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Documentation about translations: [https://docs.djangoproject.com/en/5.0/topics/i18n/translation/](https://docs.djangoproject.com/en/5.0/topics/i18n/translation/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Poedit translation file editor: [https://poedit.net/](https://poedit.net/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Documentation for Django Rosetta: [https://django-rosetta.readthedocs.io/](https://django-rosetta.readthedocs.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `django-parler` module’s compatibility with Django: [https://django-parler.readthedocs.io/en/latest/compatibility.html](https://django-parler.readthedocs.io/en/latest/compatibility.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Documentation for `django-parler`: [https://django-parler.readthedocs.io/en/latest/](https://django-parler.readthedocs.io/en/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django formatting configuration for the English locale: [https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/en/formats.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django formatting configuration for the Spanish locale: [https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py](https://github.com/django/django/blob/stable/5.0.x/django/conf/locale/es/formats.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django format localization: [https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/](https://docs.djangoproject.com/en/5.0/topics/i18n/formatting/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Documentation for `django-localflavor`: [https://django-localflavor.readthedocs.io/en/latest/](https://django-localflavor.readthedocs.io/en/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
