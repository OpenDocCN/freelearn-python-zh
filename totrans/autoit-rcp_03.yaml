- en: Chapter 3. Getting Creative with PDF Files and Documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Word documents and PDF files are some of the most used file formats by business
    professionals. Want to send an invoice to you customer or send a set of requirements
    to your vendor, businesses often end up using PDF files and documents for their
    needs. Let's see how we can work with these file formats in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Extracting data from PDF files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and copying PDF documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulating PDFs (adding header/footer, merge, split, delete)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating generation of payslips for finance department
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading Word documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing data into Word documents (adding headings, images, tables)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating personalized new hire orientation for HR team in an automated way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous few chapters, we looked at working with CSV files and then extended
    our scope to learn about working with Excel worksheets. While CSV files are in
    a simple text format, Excel files are available in binary format.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss two more binary file formats: `.pdf` and `.docx`.
    You''ll build knowledge on generating and reading PDF files, copying them and
    even manipulating them to build your own header and footer formats. Do you know
    you could merge many PDF files with a simple Python recipe?'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also takes you on a journey of working with Word documents. It
    helps you build knowledge on reading and writing data into Word files. Adding
    tables, images, charts, you name it and this chapter covers it. Sounds interesting?
    Then this chapter is definitely for you!
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will focus on the following Python modules in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PyPDF2` ([https://pythonhosted.org/PyPDF2/](https://pythonhosted.org/PyPDF2/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fpdf` ([https://pyfpdf.readthedocs.io/](https://pyfpdf.readthedocs.io/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python-docx` ([http://python-docx.readthedocs.io/en/latest/](http://python-docx.readthedocs.io/en/latest/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While you'll learn about the majority of operations supported by `.pdf` and `.docx`
    files in this chapter, we won't be able to cover them in their entirety. I'd recommend
    you to try out the remaining APIs from the libraries discussed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting data from PDF files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**PDF** (**Portable Document Format**) is a file format used to store data
    in documents agnostic to application software, hardware, and operating systems
    (hence the name, portable). PDF documents are fixed-layout flat files that include
    text and graphics and contain information needed to display the content. This
    recipe will show you how to extract information from PDF files and use the reader
    object.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To step through this recipe, you will need to install Python v2.7\. To work
    with PDF files, we have `PyPDF2`, a nice module that can be installed with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Already installed the module? So, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On your Linux/Mac computer, go to Terminal and use Vim or choose your favorite
    editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We start by downloading an existing PDF file from the Internet. Let's download
    the `diveintopython.pdf` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can search for this file on the Internet and easily obtain it. You'll also
    get the file if you download the code samples for this book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s write the Python code for creating a PDF file reader object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code snippet is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_001.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'That''s good; we now have a reader object of the PDF file. Let''s move on to
    see what we can achieve with this object, based on the following Python code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code snippet is shown in the following screenshot.
    See how we use the `PdfFileReader` object to get the metadata of the file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_002.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'OK, that''s neat! But we''d like to extract the contents of the file, wouldn''t we?
    Let''s go ahead and look at how to achieve this with a simple code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'So, what are we doing in the preceding code? I guess, the `print` statement
    is obvious. Yes, we read the first page of the `diveintopython` book. The following screenshot
    shows the contents of the first page of the `diveintopython` book:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The contents are partial (as I couldn't fit the entire page in a screenshot),
    but as you can see, the contents are not in the same format as in the PDF file.
    This is a shortcoming with the text extract of the PDF file. Even though not 100%,
    we can still get the PDF file contents with decent accuracy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s do one more interesting operation with the `PdfFileReader` object. How
    about getting the book outline with it? Yes, this is easily achievable in Python:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code example can be seen in the following screenshot.
    As you can see, we get the complete outline of the book. In the beginning, we
    see the introduction of `Dive Into Python` and `Table of Contents`. Then we get
    the names of all the chapters, starting from `Chapter 1` to `Chapter 18`, and
    also the appendix, from `Appendix A` to `Appendix H`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first code snippet, we used the `PdfFileReader` class from the `PyPDF2`
    module to generate an object. This object opens up the possibilities of reading
    and extracting information from the PDF file.
  prefs: []
  type: TYPE_NORMAL
- en: In the next code snippet, we used the `PdfFileReader` object to get the metadata
    of the file. We got the book details, such as the number of pages in the book,
    the book**'**s title, and also the name of the author.
  prefs: []
  type: TYPE_NORMAL
- en: In the third example, we used the reader object that was created from the `PdfFileReader`
    class and pointed to the first page of the `diveintopython` book. This creates
    a `page` object represented by the `page` variable. We then used the `page` object
    and read the contents of the page with the `extractText()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the last code snippet of this recipe, we used the `getOutlines()`
    method to retrieve the book's outline as an array. The outline not only returns
    the topic's titles but also returns the subtopics under the main topic. In our
    example though, we filtered the subtopics and just printed the main outline of
    the book as seen in the screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cool, so we looked at multiple things that we could achieve with `PdfFileReader`.
    You learnt about reading the file metadata, reading the outline, browsing to a
    given page in a PDF file, and extracting the text information. All this is great,
    but hey, we'd like to create new PDF files, right?
  prefs: []
  type: TYPE_NORMAL
- en: Creating and copying PDF documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with PDFs adds more value when you can create them from scratch programmatically.
    Let's see how we can create our own PDF files in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue to use the `PyPDF2` module for this recipe and will deal with
    its `PdfFileWriter` and `PdfFileMerger` classes. We will also use another module, `fpdf`,
    to demonstrate adding content to PDF files. We will talk about this later in the
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can create a PDF file in multiple ways; in this example, we copy the contents
    of an old file to generate a new PDF file. We start by taking an existing PDF--`Exercise.pdf`.
    The following screenshot shows the contents of this file. It contains two pages;
    the first page is a technical exercise and the second page gives possible hints
    for the solution of the exercise, as shown in the following screenshot:![How to
    do it...](img/image_04_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will create a new PDF file by reading `Exercise.pdf` and writing the contents
    of the first page of the exercise into the new file. We will also add a blank
    page to the newly created PDF file. Let''s start by writing some code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we import the appropriate classes from the `PyPDF2` module.
    As we need to read the `Exercise.pdf` file and then write the contents into a new
    PDF file, we will need both the `PdfFileReader` and `PdfFileWriter` classes. We
    then go ahead and open the exercise file in read mode with the `open()` method
    and create a reader object, `infile`. Later, we instantiate `PdfFileWriter` and
    create an object, `outfile`, which will be used to write the contents to the new
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's move on and add a blank page to the `outfile` object using the `addBlankPage()`
    method. The page dimensions are typically 8.5 x 11 inches, but in this case, we
    need to convert them into units, which is 612 x 792 point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Point* is a desktop publishing point also known as PostScript point. 100 point=1.38
    inch.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we read the contents of the first page of `Exercise.pdf` with the `getPage()`
    method. Once we have the page object `p`, we pass this object to the writer object.
    The writer object uses the `addPage()` method to add the contents to the new file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, we have created an output PDF file object `outfile`, but haven't yet
    created the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OK, cool! Now we have the writer object and the contents to be written into
    the new PDF file. So, we create a new PDF file with the `open()` method and use
    the writer object to write the contents and generate the new PDF, `myPdf.pdf` (this
    is where the PDF file is available on the file system for us to view). The following code
    achieves this. Here, `f` is the file handle of the newly created PDF file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following screenshot shows the contents of the newly created PDF file. As
    you can see, the first page is the blank page and the second page contains the
    contents of the first page of the `Exercise.pdf` file. Sweet, isn't it!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_006.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'But hey, we always need to create a PDF file from scratch! Yes, there is another
    way to create a PDF file. For this we will install a new module `fpdf` using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s look at a very basic example, as given in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, we instantiate the `FPDF()` class from the `fpdf` module and
    create an object, `pdf`, which essentially represents the PDF file. While creating
    the object, we also define the default format of the PDF file, which is `letter`.
    The `fpdf` module supports multiple formats, such as `A3`, `A4`, `A5`, `Letter`,
    and `Legal`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we start inserting content into the file. But hey, the file is still
    empty, so before we write content, we use the `add_page()` method to insert a
    new page and also set the font using the `set_font()` method. We have set the
    font to `Arial` and its size to `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we actually start writing content to the file with the `cell()` method.
    Cell is a rectangular area that contains some text. So, as you can see in the
    following code, we add a new line, `Welcome to Automate It!`, and follow it up
    with another line, `Created by Chetan`. There are a few things that you must have
    observed. 200 x 10 is the height x width of the cell. The `ln=1` designates a
    new line and `align=C` aligns the text to the center of the page. You may get
    into issues when adding long text to a cell, but the `fpdf` module has a `multi_cell()`
    method, which automatically breaks long lines of text with the available effective
    page width. You can always calculate the page width:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code is a PDF file with contents as shown in the
    following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_007.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Manipulating PDFs (adding header/footer, merge, split, delete)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ever wondered if you could merge PDF files programatically in a few seconds?
    Or could update header and footer of many PDF files in a jiffy? In this recipe,
    lets move on to do some interesting and most frequently performed operations on
    PDF files in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will use the `PyPDF2` and `fpdf` modules that were installed
    for the earlier recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by working with the `PdfFileMerge` class of the `PyPDF2`. We use
    this class to merge multiple PDF files. The following code example does exactly
    the same:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you run the preceding piece of code, it will generate a new file, `output.pdf`,
    which would have merged multiple PDF files. Open the `output.pdf` file and see
    for yourself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That was cool! Now, how about adding a header and footer to a PDF file. Let''s
    invoke the example from the previous recipe where we used the `fpdf` module to
    generate a PDF file (`automateit.pdf`). Now, what if we have to create a similar
    file with header and footer information? The following code does exactly that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code snippet can be viewed in the following screenshot.
    Look how we''re able to manipulate the header and footer of our PDF document:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_008.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Wow! That was nice; now, let's quickly cover some more operations. Remember
    we added a blank page to the `myPdf.pdf` file in the previous recipe? What if
    I want to remove blank pages from PDF files?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you run the Python code and look at the contents of `myPdf_wo_blank.pdf`,
    you will just see one page and the blank page would be removed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, what if we want to add specific meta information to our file? We should
    be able to easily edit the metadata for a PDF file with the following code in
    Python:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output of the preceding code can be seen in the following screenshot. See
    how we were successful in adding edited metadata to our PDF file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Another good option to have from a development perspective is the ability to
    rotate a page in a PDF file. Yes, we could do that as well using the `PyPDF2`
    module. The following code rotates the first page of `Exercise.pdf` anticlockwise
    by `90` degrees:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows how the file looks when rotated anticlockwise:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_010.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first code snippet, we created an object of the `PdfFileMerger` class,
    called `merger`. We then went through all the files in the current working directory
    and selected all the files with the `.pdf` extension using Python's list comprehension.
  prefs: []
  type: TYPE_NORMAL
- en: We then sorted the files and ran a loop to pick up one file at a time, read
    it, and append it to the `merger` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once all the files were merged, we used the `write()` method of the `merger`
    object to generate a single merged file: `output.pdf`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we didn't have to create a file handle for the `output.pdf`
    file. The merger internally handles it and generates a nice PDF file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the second code snippet, we performed multiple operations:'
  prefs: []
  type: TYPE_NORMAL
- en: We inherited the standard `FPDF` class and wrote our own class, `PDF`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We overrode two methods--`header()` and `footer()`--to define how the header
    and footer should look when we create a new PDF file with our PDF class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `footer()` method, we added page numbers to every page. The page numbers
    are in `Italics` with font size `8` and in `Arial` font. We also centered them and
    set them to appear 15 mm above the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `header()` method, we created the header cell and positioned it to the
    extreme right. The title of the header is `Automate It` and it is in `Arial` and
    `Bold` with font size `15`. The title is also centered in the context of the cell.
    Lastly, we added a line break of 20 pixels below the header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then created our own PDF with the page format set to `A5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The contents of the PDF will be `This is my new line. Line number is <line_no>` with
    the font set to `Times` and the font size being `12`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The generated PDF looks like the following screenshot. Note that the page is
    of `A5` size; hence, only 15 lines could be added to the page. If it had been
    of letter size, it would have accommodated at least 20 lines on a page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the third code example of this recipe, `getContents()` does the critical
    task of checking whether a given page has any content. So, when we start reading
    the old PDF file, we check the content of the page. If there is no content, the
    page is ignored and is not added to the new PDF file.
  prefs: []
  type: TYPE_NORMAL
- en: In the fourth snippet, we added the metadata information to our PDF file using
    the `addMetadata()` method. The `addMetadata()` method takes a key value pair
    as arguments, where we can pass the attributes that need to be modified for the
    PDF file. In our example, we used the method to add the `/edited` metadata field
    to the PDF file.
  prefs: []
  type: TYPE_NORMAL
- en: For the final example, I think the rest of the code is self-explanatory, except
    the use of `rotateCounterClockwise()`, which actually rotates the page. We could
    use `rotateClockwise()` to rotate the page in a clockwise direction as well.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You learned about reading and writing PDF files and also understood many ways
    of manipulating PDF files. It's now time to put things into perspective with a
    real-life example.
  prefs: []
  type: TYPE_NORMAL
- en: Automating generation of payslips for finance department
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take an example of an organization use case, where the Finance Manager
    of the company wants to make the payslip generation process quicker. He realizes
    that not only is the task mundane but also consumes a lot of time. With more employees
    expected to join the company, it's going to get harder. He chooses to automate
    the process and approaches you. How can you help?
  prefs: []
  type: TYPE_NORMAL
- en: Well, with what you learnt throughout the chapter, I bet this will be a piece
    of cake for you! Let's work on it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We don't need any special modules for this example. All the modules that have
    been installed as part of the previous recipes are enough for us, don't you think?
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's first think of a payslip template. What does a payslip contain?
  prefs: []
  type: TYPE_NORMAL
- en: Employee information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payments from the company
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deductions (tax paid to government)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total payment made
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So we need to get the employee information, add tables for payments and deductions,
    and add an entry for the total salary paid for the month.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code implementation for this scenario could be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the payslip looks with the header, footer, and payslip details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first got the employee data in the dictionary `employee_data`. Now, in a real
    scenario, it could be from the employee table and would be retrieved with an SQL
    query. We wrote our own `PaySlip` class, which is inherited from the `FPDF` class,
    and defined our own header and footer.
  prefs: []
  type: TYPE_NORMAL
- en: We then wrote our own method to generate the payslip. This includes the header
    at the top with the company name (in this case, say **Google**) and the period
    for which the payslip is. We also added the **Employee Id** and **Employee Name**.
  prefs: []
  type: TYPE_NORMAL
- en: Now, this is interesting. We created an HTML document that generates a table
    and adds the payment, tax, and total salary information to the payslip with the
    `add_html()` method.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we added all this information to the PDF file with the `output()`
    method and named the payslip as `payslip_<employee_id>`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even though we coded the example alright, do you think something is missing?
    Yeah, we didn''t encrypt the PDF. It''s always a great idea to secure the payslip
    with a password, so that nobody apart from the employee is able to view it. The
    following code will help us encrypt the file. In this example, we encrypt `Exercise.pdf`,
    secure it with the password, `P@$$w0rd`, and rename it to `EncryptExercise.pdf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we open the secured file, it will ask you for the password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/image_04_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Well, that's an awesome solution! Your finance manager will be happy I must
    say! Wondering how do I decrypt the secure file? I'll leave that to you; it's
    fairly straightforward. Read the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: We have come to the end of this section on working with PDF files. PDF files
    essentially store data in a binary format and support multiple operations as we
    discussed. In the next section we start working with the documents (`.docx`) and
    appreciate what they can offer!
  prefs: []
  type: TYPE_NORMAL
- en: Reading Word documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you might be aware, Microsoft Office started providing a new extension to
    Word documents, which is `.docx`, from Office 2007 onwards. With this change,
    documents moved to XML-based file formats (Office Open XML) with ZIP compression.
    Microsoft made this change when the business community asked for an open file
    format that could help with transferring data across applications. So, let's begin
    our journey with DOCX files!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will use the `python-docx` module to read Word documents.
    The `python-docx` is a comprehensive module that performs both read and write
    operations on Word documents. Let''s install this module with our favorite tool,
    `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by creating our own Word document. It's the same exercise as we saw
    in the previous section while working with PDF files. Except for the fact that
    we have added a table to it and stored it as `WExercise.docx`. It looks as follows:![How
    to do it...](img/image_04_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s now go ahead and read the document `WExercise.docx` file. The following code
    will help us in getting the object that points to the `WExercise.docx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code is shown in the following screenshot. Reading
    a Word document is conceptually pretty similar to reading a file in Python. Just
    like how we created a file handle using the `open()` method, we create a document
    handle in this code snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_014.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now, if we want to get the basic information about a document, we can use the
    document object, `doc`, from the preceding code. For instance, if we want to retrieve
    the title of a document, we can do that with the following code. If you look at
    the code carefully, we use the `paragraphs` object to get the text. Paragraphs
    are the lines present in the document. Assuming that the title of the document
    is the first line of the document, we get the `0` index for the paragraphs in
    the document and call the `text` attribute to get the text of the title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice in the following screenshot how we print the title of our exercise document:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_015.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Wow, that''s cool! Let''s go ahead and read other attributes of the Word document
    that we care about. Let''s use the same `doc` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code is shown in the following screenshot. The
    author of the document is `Chetan Giridhar`. As you may have observed, it was
    created on July 2nd at 4:24 am. Also, note that the document has been changed
    five times, as this is the fifth revision of the document:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_016.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Well, I will get more audacious now and read the table down there in the document.
    The `python-docx` module is awesome for reading tables. Look at the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding example, we used the `tables` object to read the tables in
    the document. Since we have only one table throughout the document, we get the
    first index with `tables[0]` and store the object in the `table` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each table contains rows and columns and they can be accessed with `table.rows`
    or `table.columns`. We used the `table.rows` to get the number of rows in the
    table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we iterated over all the rows and read the text in the cell with `table.rows[index].cells[index].paragraphs[0].text`.
    We needed the `paragraphs` object as this contains the actual text of the cell.
    (We again used the 0^(th) index, as the assumption is that every cell has only
    one line of data.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the first `for` loop, you'd identify that we're reading all three rows
    but reading the first cell in every row. Essentially, we're reading the column
    values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The output of the preceding code snippet shows all the columns with their values:![How
    to do it...](img/image_04_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nice! So, we're now experts in reading a Word document. But what's the use if
    we cant write data into a Word document? Let's look at how to write or create
    a `.docx` document in the next recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Writing data into Word documents (adding headings, images, tables)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reading files is a breeze with the `python-docx` module. Now, let's shift our
    focus to writing Word documents. We'll perform multiple operations with documents
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will use the same fantastic Python module, `python-docx`.
    We don't need to spend much time on the setup. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start with a very basic operation of creating a `.docx` file and then to
    add a heading to it. The following code performs this operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is how the document looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_018.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If you look at the screenshot, you will see a new document being created with
    a string in it. Observe how the screenshot indicates it is styled as a **Title**
    text. How did we achieve this? Do you see `0` in the third line of our Python
    code? It talks about the heading type and styles the text accordingly. The `0`
    indicates title; `1` and `2` indicate text with **Heading 1** or **Heading 2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s move ahead and add a new line to the document. We decorate the string
    with some words in bold and some in italics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The document now looks as shown in the following screenshot. Observe the line
    added in the **Normal** style. Some words in the text are bold and few of them
    are in italics:![How to do it...](img/image_04_019.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'OK, good. Let''s add another subtopic to our document. See the following code
    implementation. Here, we create a subtopic with style **Heading 1** and add a
    new line under this topic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The document now looks as shown in the following screenshots. When taking the
    screenshot, I had clicked on the line with **Heading 1** that shows up in the
    screenshot. Note how the subtopic is styled as a bullet point:![How to do it...](img/image_04_020.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There''s often a need to include images in the documents. Now that''s really,
    really, easy. Check out the following code for this step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you run the Python code on your interpreter, you will see that the document
    now contains a nice Python logo. Please note that I had clicked on the image before
    taking the screenshot to catch your attention, so it''s not done by the library:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_021.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Last but not least, we may also want to add tables to our document, right?
    Let''s do that. The following code demonstrates adding tables to the DOCX file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following screenshot shows how the complete document looks along with the
    table. Nice!
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first code snippet, we created the `document` object from the `Document` class.
    We then used this object to add a new heading, which contains the text `Hi this
    is a nice text document`. I know this is not a text document but just a string.
  prefs: []
  type: TYPE_NORMAL
- en: In the second example, adding a new line is done with the `add_paragraph()`
    method (remember, `paragraphs` was used to read the lines from the word document
    in the previous section). And how did we get the styling? That is possible with
    the `add_run()` method by setting the attributes `bold` and `italic` to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: In the fourth example, we just used the `add_image()` method to add the picture
    to the document. We could also set the height and width of the image in inches.
    To do this, we imported a new class, `Inches`, and set the width of the image
    to 1.25 inches. Simple and neat!
  prefs: []
  type: TYPE_NORMAL
- en: 'In the final example, we added a table to the document by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We started by creating a table object with the `add_table()` method. We configured
    the table to contain one row and three columns. We also styled the table to be
    a grid table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we saw in the previous section, the `table` object has the `rows` and `columns` objects.
    We used these to fill in the table with the dictionary `data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we added a heading to the table. Heading is the first row of the table
    and, hence, we used `table.rows[0]` to fill the data in it. We filled the first
    column by `Id`, the second by `Items`, and the third by `Price`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the heading, we added a new row and filled the cells of this row from
    the data dictionary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you look at the screenshot, the document now has one table added to it, where
    ID is `1`, item is `apple` and price is `50`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What you learnt in the preceding section were straightforward, frequently done,
    day-to-day operations of writing into DOCX files. We could perform many more operations
    programmatically as we are used to doing manually on word documents. Let's now
    bring the learning together in a business use case.
  prefs: []
  type: TYPE_NORMAL
- en: Generating personalized new hire orientation for HR team in an automated way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the HR manager of your company, you are responsible for new hire orientation.
    You see that, every month, you have at least 15-20 new employees joining your
    organization. Once they complete a month in the company, you have to take them
    through your company policies in an orientation program.
  prefs: []
  type: TYPE_NORMAL
- en: For this, you need to send them a personalized document with new hire orientation
    details. Getting the details of employees one by one from the database is tedious;
    on top of that, you have to filter for employees who are due for orientation,
    based on different departments.
  prefs: []
  type: TYPE_NORMAL
- en: All this is time-consuming and you feel this process can be easily automated.
    Let's see how we can use the knowledge we have acquired so far in this chapter
    to automate this process.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will use `python-docx`, which has been so helpful in our
    previous recipes. So, we need not install any new modules.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's first split the problem. First, we need to collect the employees who are
    due for orientation. Next, we need to know their department and look at the schedule
    template based on the department. Once these details are available, we need to
    put this together in a document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at the code implementation for this scenario:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you run this code snippet, this is how your document will look with all the
    relevant details about the orientation. Cool! But how did it work? We will see
    that in the *How it works* section.![How to do it...](img/image_04_023.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding code, we have a prefilled dictionary, `employee_data`, which contains
    employee information. This dictionary also contains information on whether an
    employee is due for orientation or not. We also have the `agenda` dictionary that
    acts as a template for different sessions based on the department. We have manually
    added all this data in Python dictionaries in this example, but in the real world,
    it needs to be pulled from your organization's database.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we write a `generate_document()` method that takes `employee_data` and
    `agenda`. It iterates through all the employees and checks if a given employee
    is due for orientation and starts writing the document. First it adds a title,
    then follows up with a personalized address to the employee, and then shifts down
    to the sessions the employee needs to attend based on his or her department.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, all the text is saved as a document with the name, `orientation_<emp_id>.docx` file.
  prefs: []
  type: TYPE_NORMAL
- en: That was cool! Imagine the time you saved. How happy are you as a HR manager?
    You acquired some new skills and quickly applied them for the benefit of your
    team. Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: We have come to the end of this chapter on reading, writing, and manipulating
    PDF files and documents. Hope you enjoyed it and learnt many new things that you
    can apply to your work at office or at school! Of course you could do more; I
    highly encourage you to try out these modules and have fun with them.
  prefs: []
  type: TYPE_NORMAL
