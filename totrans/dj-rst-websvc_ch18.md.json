["```py\nfrom django.conf.urls import url, include \n\nurlpatterns = [ \n    url(r'^', include('drones.urls')), \n    url(r'^api-auth/', include('rest_framework.urls')) \n]\n```", "```py\npip install pytest\n```", "```py\nInstalling collected packages: attrs, pluggy, six, py, pytest Running setup.py install for pluggy ... doneSuccessfully installed attrs-17.3.0 pluggy-0.6.0 py-1.5.2 pytest-3.3.1 six-1.11.0\n```", "```py\npip install pytest-django\n```", "```py\nInstalling collected packages: pytest-django\nSuccessfully installed pytest-django-3.1.2\n```", "```py\n[pytest] \nDJANGO_SETTINGS_MODULE = restful01.settings \npython_files = tests.py test_*.py *_tests.py \n```", "```py\nREST_FRAMEWORK = { \n    'DEFAULT_PAGINATION_CLASS': \n    'drones.custompagination.LimitOffsetPaginationWithUpperBound', \n    'PAGE_SIZE': 4, \n    'DEFAULT_FILTER_BACKENDS': ( \n        'django_filters.rest_framework.DjangoFilterBackend', \n        'rest_framework.filters.OrderingFilter', \n        'rest_framework.filters.SearchFilter', \n        ), \n    'DEFAULT_AUTHENTICATION_CLASSES': ( \n        'rest_framework.authentication.BasicAuthentication', \n        'rest_framework.authentication.SessionAuthentication', \n        ), \n    'DEFAULT_THROTTLE_CLASSES': ( \n        'rest_framework.throttling.AnonRateThrottle', \n        'rest_framework.throttling.UserRateThrottle', \n    ), \n    'DEFAULT_THROTTLE_RATES': { \n        'anon': '300/hour', \n        'user': '100/hour', \n        'drones': '200/hour', \n        'pilots': '150/hour', \n    } \n} \n```", "```py\nfrom django.utils.http import urlencode \nfrom django.core.urlresolvers import reverse \nfrom rest_framework import status \nfrom rest_framework.test import APITestCase \nfrom drones.models import DroneCategory \nfrom drones import views \n\nclass DroneCategoryTests(APITestCase): \n    def post_drone_category(self, name): \n        url = reverse(views.DroneCategoryList.name) \n        data = {'name': name} \n        response = self.client.post(url, data, format='json') \n        return response \n\n    def test_post_and_get_drone_category(self): \n        \"\"\" \n        Ensure we can create a new DroneCategory and then retrieve it \n        \"\"\" \n        new_drone_category_name = 'Hexacopter' \n        response = self.post_drone_category(new_drone_category_name) \n        print(\"PK {0}\".format(DroneCategory.objects.get().pk)) \n        assert response.status_code == status.HTTP_201_CREATED \n        assert DroneCategory.objects.count() == 1 \n        assert DroneCategory.objects.get().name == new_drone_category_name \n```", "```py\n    def test_post_existing_drone_category_name(self): \n        \"\"\" \n        Ensure we cannot create a DroneCategory with an existing name \n        \"\"\" \n        url = reverse(views.DroneCategoryList.name) \n        new_drone_category_name = 'Duplicated Copter' \n        data = {'name': new_drone_category_name} \n        response1 = self.post_drone_category(new_drone_category_name) \n        assert response1.status_code == status.HTTP_201_CREATED \n        response2 = self.post_drone_category(new_drone_category_name) \n        print(response2) \n        assert response2.status_code == status.HTTP_400_BAD_REQUEST \n```", "```py\n    def test_filter_drone_category_by_name(self): \n        \"\"\" \n        Ensure we can filter a drone category by name \n        \"\"\" \n        drone_category_name1 = 'Hexacopter' \n        self.post_drone_category(drone_category_name1) \n        drone_caregory_name2 = 'Octocopter' \n        self.post_drone_category(drone_caregory_name2) \n        filter_by_name = { 'name' : drone_category_name1 } \n        url = '{0}?{1}'.format( \n            reverse(views.DroneCategoryList.name), \n            urlencode(filter_by_name)) \n        print(url) \n        response = self.client.get(url, format='json') \n        print(response) \n        assert response.status_code == status.HTTP_200_OK \n        # Make sure we receive only one element in the response \n        assert response.data['count'] == 1 \n        assert response.data['results'][0]['name'] == \n        drone_category_name1 \n```", "```py\n    def test_get_drone_categories_collection(self): \n        \"\"\" \n        Ensure we can retrieve the drone categories collection \n        \"\"\" \n        new_drone_category_name = 'Super Copter' \n        self.post_drone_category(new_drone_category_name) \n        url = reverse(views.DroneCategoryList.name) \n        response = self.client.get(url, format='json') \n        assert response.status_code == status.HTTP_200_OK \n        # Make sure we receive only one element in the response \n        assert response.data['count'] == 1 \n        assert response.data['results'][0]['name'] == \n        new_drone_category_name \n```", "```py\n    def test_update_drone_category(self): \n        \"\"\" \n        Ensure we can update a single field for a drone category \n        \"\"\" \n        drone_category_name = 'Category Initial Name' \n        response = self.post_drone_category(drone_category_name) \n        url = reverse( \n            views.DroneCategoryDetail.name,  \n            None,  \n            {response.data['pk']}) \n        updated_drone_category_name = 'Updated Name' \n        data = {'name': updated_drone_category_name} \n        patch_response = self.client.patch(url, data, format='json') \n        assert patch_response.status_code == status.HTTP_200_OK \n        assert patch_response.data['name'] == \n        updated_drone_category_name\n```", "```py\n    def test_get_drone_category(self): \n        \"\"\" \n        Ensure we can get a single drone category by id \n        \"\"\" \n        drone_category_name = 'Easy to retrieve' \n        response = self.post_drone_category(drone_category_name) \n        url = reverse( \n            views.DroneCategoryDetail.name,  \n            None,  \n            {response.data['pk']}) \n        get_response = self.client.get(url, format='json') \n        assert get_response.status_code == status.HTTP_200_OK \n        assert get_response.data['name'] == drone_category_name \n```", "```py\npytest\n```", "```py\npytest -v\n```", "```py\ndrones/tests.py::DroneCategoryTests::test_filter_drone_category_by_name PASSED [16%]\n```", "```py\npytest -vs\n```", "```py\nCreating test database for alias 'default'...Destroying test database for alias 'default'...\n```", "```py\nurl = '{0}?{1}'.format( \n    reverse(views.DroneCategoryList.name), \n    urlencode(filter_by_name)) \nprint(url) \nresponse = self.client.get(url, format='json') \nprint(response) \n```", "```py\ndrones/tests.py::DroneCategoryTests::test_filter_drone_category_by_name Creating test database for alias 'default'.../drone-categories/?name=Hexacopter<Response status_code=200, \"application/json\">PASSED     [ 16%]\n```", "```py\n    def test_post_and_get_drone_category(self): \n        \"\"\" \n        Ensure we can create a new DroneCategory and then retrieve it \n        \"\"\" \n        new_drone_category_name = 'Hexacopter' \n        response = self.post_drone_category(new_drone_category_name) \n        print(\"nPK {0}n\".format(DroneCategory.objects.get().pk)) \n        assert response.status_code == status.HTTP_201_CREATED \n        assert DroneCategory.objects.count() == 1 \n        assert DroneCategory.objects.get().name == \n        new_drone_category_name \n```", "```py\npytest -vs\n```", "```py\nfrom drones.models import Pilot \nfrom rest_framework.authtoken.models import Token \nfrom django.contrib.auth.models import User \n```", "```py\nclass PilotTests(APITestCase):    \n    def post_pilot(self, name, gender, races_count): \n        url = reverse(views.PilotList.name) \n        print(url) \n        data = { \n            'name': name, \n            'gender': gender, \n            'races_count': races_count, \n            } \n        response = self.client.post(url, data, format='json') \n        return response \n\n    def create_user_and_set_token_credentials(self): \n        user = User.objects.create_user( \n            'user01', 'user01@example.com', 'user01P4ssw0rD') \n        token = Token.objects.create(user=user) \n        self.client.credentials( \n            HTTP_AUTHORIZATION='Token {0}'.format(token.key)) \n\n    def test_post_and_get_pilot(self): \n        \"\"\" \n        Ensure we can create a new Pilot and then retrieve it \n        Ensure we cannot retrieve the persisted pilot without a token \n        \"\"\" \n        self.create_user_and_set_token_credentials() \n        new_pilot_name = 'Gaston' \n        new_pilot_gender = Pilot.MALE \n        new_pilot_races_count = 5 \n        response = self.post_pilot( \n            new_pilot_name, \n            new_pilot_gender, \n            new_pilot_races_count) \n        print(\"nPK {0}n\".format(Pilot.objects.get().pk)) \n        assert response.status_code == status.HTTP_201_CREATED \n        assert Pilot.objects.count() == 1 \n        saved_pilot = Pilot.objects.get() \n        assert saved_pilot.name == new_pilot_name \n        assert saved_pilot.gender == new_pilot_gender \n        assert saved_pilot.races_count == new_pilot_races_count \n        url = reverse( \n            views.PilotDetail.name,  \n            None, \n            {saved_pilot.pk}) \n        authorized_get_response = self.client.get(url, format='json') \n        assert authorized_get_response.status_code == \n        status.HTTP_200_OK \n        assert authorized_get_response.data['name'] == new_pilot_name \n        # Clean up credentials \n        self.client.credentials() \n        unauthorized_get_response = self.client.get(url, format='json') \n        assert unauthorized_get_response.status_code == \n        status.HTTP_401_UNAUTHORIZED \n```", "```py\n    def test_try_to_post_pilot_without_token(self): \n        \"\"\" \n        Ensure we cannot create a pilot without a token \n        \"\"\" \n        new_pilot_name = 'Unauthorized Pilot' \n        new_pilot_gender = Pilot.MALE \n        new_pilot_races_count = 5 \n        response = self.post_pilot( \n            new_pilot_name, \n            new_pilot_gender, \n            new_pilot_races_count) \n        print(response) \n        print(Pilot.objects.count()) \n        assert response.status_code == status.HTTP_401_UNAUTHORIZED \n        assert Pilot.objects.count() == 0\n```", "```py\npytest -v\n```"]