["```py\nimport smbus\nfrom time import sleep\nPWR_MGMT_1 = 0x6B\nSMPLRT_DIV = 0x19\nCONFIG = 0x1A\nGYRO_CONFIG = 0x1B\nINT_ENABLE = 0x38\nACCEL_XOUT_H = 0x3B\nACCEL_YOUT_H = 0x3D\nACCEL_ZOUT_H = 0x3F\nGYRO_XOUT_H = 0x43\nGYRO_YOUT_H = 0x45\nGYRO_ZOUT_H = 0x47\ndef MPU_Init():\n  bus.write_byte_data(Device_Address, SMPLRT_DIV, 7)\n  bus.write_byte_data(Device_Address, PWR_MGMT_1, 1)\n  bus.write_byte_data(Device_Address, CONFIG, 0)\n  bus.write_byte_data(Device_Address, GYRO_CONFIG, 24)\n  bus.write_byte_data(Device_Address, INT_ENABLE, 1)\n\ndef read_raw_data(addr):\n  high = bus.read_byte_data(Device_Address, addr)\n  low = bus.read_byte_data(Device_Address, addr+1)\n  value = ((high << 8) | low)\n   if(value > 32768):\n   value = value - 65536\n   return value\n  bus = smbus.SMBus(1)\n  Device_Address = 0x68\n\nMPU_Init()\nprint (\" Reading Data of Gyroscope and Accelerometer\")\nwhile True:\n   Ax = read_raw_data(ACCEL_XOUT_H)\n   Ay = read_raw_data(ACCEL_YOUT_H)\n   Az = read_raw_data(ACCEL_ZOUT_H)\n   Gx = read_raw_data(GYRO_XOUT_H)\n   Gy = read_raw_data(GYRO_YOUT_H)\n   Gz = read_raw_data(GYRO_ZOUT_H)\n  print(“Ax=”+str(Ax)+”Ay=”+str(Ay)+\"Az=\"+str(Az)+“Gx=”+str(Gx)+”Gy=”+str(Gy)+\"Gz=\"+str(Gz))\n```", "```py\ndef MPU_Init():\n\n            bus.write_byte_data(Device_Address, SMPLRT_DIV, 7)\n\n            bus.write_byte_data(Device_Address, PWR_MGMT_1, 1)\n\n            bus.write_byte_data(Device_Address, CONFIG, 0)\n\n            bus.write_byte_data(Device_Address, GYRO_CONFIG, 24)\n\n            bus.write_byte_data(Device_Address, INT_ENABLE, 1)\n```", "```py\ndef read_raw_data(addr):\n\n        high = bus.read_byte_data(Device_Address, addr)\n        low = bus.read_byte_data(Device_Address, addr+1)\n```", "```py\n        value = ((high << 8) | low)\n```", "```py\n\n        if(value > 32768):\n                value = value - 65535\n        return value\n```", "```py\n            acc_x = read_raw_data(ACCEL_XOUT_H)\n            acc_y = read_raw_data(ACCEL_YOUT_H)\n            acc_z = read_raw_data(ACCEL_ZOUT_H)\n\n            gyro_x = read_raw_data(GYRO_XOUT_H)\n            gyro_y = read_raw_data(GYRO_YOUT_H)\n            gyro_z = read_raw_data(GYRO_ZOUT_H)\n```", "```py\nprint(“Ax=”+str(Ax)+”Ay=”+str(Ay)+\"Az=\"+str(Az)+“Gx=”+str(Gx)+”Gy=”+str(Gy)+\"Gz=\"+str(Gz))\n```", "```py\nimport smbus\nfrom time import sleep\nimport RPi.GPIO as GPIO\nint1 = 12\nint2 = 16\nint3 = 18\nint4 = 15\nGPIO.setup(int1, GPIO.OUT)\nGPIO.setup(int2, GPIO.OUT)\nGPIO.setup(int3, GPIO.OUT)\nGPIO.setup(int4, GPIO.OUT)\nPWM1 = GPIO.PWM(12, 100)\nPWM2 = GPIO.PWM(16, 100)\nPWM3 = GPIO.PWM(18, 100)\nPWM4 = GPIO.PWM(15, 100)\nPWM1.start(0)\nPWM2.start(0)\nPWM3.start(0)\nPWM4.start(0)\nPWR_MGMT_1 = 0x6B\nSMPLRT_DIV = 0x19\nCONFIG = 0x1A\nGYRO_CONFIG = 0x1B\nINT_ENABLE = 0x38\nACCEL_XOUT_H = 0x3B\nACCEL_YOUT_H = 0x3D\nACCEL_ZOUT_H = 0x3F\nGYRO_XOUT_H = 0x43\nGYRO_YOUT_H = 0x45\nGYRO_ZOUT_H = 0x47\n\ndef MPU_Init():\n  bus.write_byte_data(Device_Address, SMPLRT_DIV, 7)\n  bus.write_byte_data(Device_Address, PWR_MGMT_1, 1)\n  bus.write_byte_data(Device_Address, CONFIG, 0)\n  bus.write_byte_data(Device_Address, GYRO_CONFIG, 24)\n  bus.write_byte_data(Device_Address, INT_ENABLE, 1)\n\ndef read_raw_data(addr):\n  high = bus.read_byte_data(Device_Address, addr)\n   low = bus.read_byte_data(Device_Address, addr+1)\n   value = ((high << 8) | low)\n   if(value > 32768):\n     value = value - 65536\n     return value\n  bus = smbus.SMBus(1)\n  Device_Address = 0x68\n\nMPU_Init()\nwhile True:\n   acc_x = read_raw_data(ACCEL_XOUT_H)\n   acc_y = read_raw_data(ACCEL_YOUT_H)\n   acc_z = read_raw_data(ACCEL_ZOUT_H)\n   gyro_x = read_raw_data(GYRO_XOUT_H)\n   gyro_y = read_raw_data(GYRO_YOUT_H)\n   gyro_z = read_raw_data(GYRO_ZOUT_H)\n   Ax = (gyro_x/327)\n   Ay = (gyro_y/327)\n   for Ax > 20:\n     PWM1.changeDutyCycle(Ax)\n     PWM3.changeDutyCycle(Ax)\n   for Ax < -20:\n     PWM2.changeDutyCycle(Ax)\n     PWM4.changeDutyCycle(Ax)\n\n   for Ay > 20:\n     PWM1.changeDutyCycle(Ax)\n     PWM4.changeDutyCycle(Ax)\n   for Ay < -20:\n     PWM2.changeDutyCycle(Ax)\n     PWM3.changeDutyCycle(Ax)\n\n```", "```py\n Ax = (gyro_x/327)\n Ay = (gyro_y/327)\n```", "```py\n for Ax < -20:\n         PWM2.changeDutyCycle(Ax)\n         PWM4.changeDutyCycle(Ax)\n```", "```py\nfor Ay < -20:\n         PWM2.changeDutyCycle(Ax)\n         PWM3.changeDutyCycle(Ax)\n```", "```py\n for Ay > 20:\n         PWM1.changeDutyCycle(Ax)\n         PWM4.changeDutyCycle(Ax)\n```", "```py\nimport smbus\nfrom time import sleep\nimport RPi.GPIO as GPIO\nint1 = 12\nint2 = 16\nint3 = 18\nint4 = 15\nGPIO.setup(int1, GPIO.OUT)\nGPIO.setup(int2, GPIO.OUT)\nGPIO.setup(int3, GPIO.OUT)\nGPIO.setup(int4, GPIO.OUT)\nPWM1 = GPIO.PWM(12, 100)\nPWM2 = GPIO.PWM(16, 100)\nPWM3 = GPIO.PWM(18, 100)\nPWM4 = GPIO.PWM(15, 100)\nPWM1.start(0)\nPWM2.start(0)\nPWM3.start(0)\nPWM4.start(0)\nPWR_MGMT_1 = 0x6B\nSMPLRT_DIV = 0x19\nCONFIG = 0x1A\nGYRO_CONFIG = 0x1B\nINT_ENABLE = 0x38\nACCEL_XOUT_H = 0x3B\nACCEL_YOUT_H = 0x3D\nACCEL_ZOUT_H = 0x3F\nGYRO_XOUT_H = 0x43\nGYRO_YOUT_H = 0x45\nGYRO_ZOUT_H = 0x47\n\ndef MPU_Init():\n   bus.write_byte_data(Device_Address, SMPLRT_DIV, 7)\n   bus.write_byte_data(Device_Address, PWR_MGMT_1, 1)\n   bus.write_byte_data(Device_Address, CONFIG, 0)\n   bus.write_byte_data(Device_Address, GYRO_CONFIG, 24)\n   bus.write_byte_data(Device_Address, INT_ENABLE, 1)\ndef read_raw_data(addr):\n   high = bus.read_byte_data(Device_Address, addr)\n   low = bus.read_byte_data(Device_Address, addr+1)\n   value = ((high << 8) | low)\n   if(value > 32768):\n     value = value - 65536\n     return value\n  bus = smbus.SMBus(1)\n  Device_Address = 0x68\nMPU_Init()\nwhile True:\n   acc_x = read_raw_data(ACCEL_XOUT_H)\n   acc_y = read_raw_data(ACCEL_YOUT_H)\n   acc_z = read_raw_data(ACCEL_ZOUT_H)\n   gyro_x = read_raw_data(GYRO_XOUT_H)\n   gyro_y = read_raw_data(GYRO_YOUT_H)\n   gyro_z = read_raw_data(GYRO_ZOUT_H)\n   Ax = (gyro_x/160)- 16384\n  Ay = (gyro_y/160)-16384\n   if Ax > 20:\n     if Ay > 20:\n       dc1 = Ax - Ay\n       PWM1.changeDutyCycle(dc1)\n       dc3 = Ax + Ay\n       PWM3.changeDutyCycle(dc3)\n   elif Ay <- 20:\n     dc2 = Ax + Ay\n     PWM1.changeDutyCycle(dc)\n     dc4 = Ax - Ay\n     PWM3.changeDutyCycle(dc4)\n   else:\n     dc1=Ax\n     PWM1.changeDutyCycle(dc)\n     dc3=Ax\n     PWM3.changeDutyCycle(dc)\n    if Ax < -20:\n       if Ay > 20:\n         dc1 = Ax - Ay\n         dc3 = Ax + Ay\n         PWM1.changeDutyCycle(dc1)\n         PWM3.changeDutyCycle(dc3)\n       if Ay <- 20:\n         dc2 = Ax + Ay\n         dc4 = Ax - Ay\n         PWM2.changeDutyCycle(dc2)\n         PWM4.changeDutyCycle(dc4)\n       else:\n         dc2=Ax\n         dc4=Ax\n         PWM2.changeDutyCycle(dc2)\n         PWM4.changeDutyCycle(dc4)\n```", "```py\n If Ax > 20:\n     if Ay > 20:\n         dc1 = Ax - Ay\n         PWM1.changeDutyCycle(dc1)\n         dc3 = Ax + Ay\n         PWM3.changeDutyCycle(dc3)\n```", "```py\nelif Ay <- 20:\n\n    dc2 = Ax + Ay\n    PWM1.changeDutyCycle(dc)\n    dc4 = Ax - Ay\n    PWM3.changeDutyCycle(dc4)\n```", "```py\n Else:\n\n     dc1=Ax\n     PWM1.changeDutyCycle(dc)\n     dc3=Ax\n     PWM3.changeDutyCycle(dc)\n```"]