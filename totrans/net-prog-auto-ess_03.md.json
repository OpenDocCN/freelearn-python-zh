["```py\nservice RouterStatus {\n  rpc GetStatus (StatusRequest) returns (StatusReply);\n}\nmessage StatusRequest {}\nmessage StatusReply {\n  double memory = 1;\n  double cpu = 2;\n  int32 uptime = 3;\n} \n```", "```py\nimport grpc\nimport routerstatus_pb2\nimport routerstatus_pb2_grpc as r_grpc\ndef run():\n    address = \"router:50051\"\n    with grpc.insecure_channel(address) as channel:\n        stub = r_grpc.StatusStub(channel)\n        r = stub.GetStatus(r_grpc.StatusRequest())\n        print(\"Memory:{.2f}% CPU:{.2f}%, Uptime:{d}s\\n\".format(r.memory, r.cpu, r.uptime))\nif __name__ == '__main__':\n    run()\n```", "```py\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n    \"fmt\"\n    \"google.golang.org/grpc\"\n    pb \"example/routerstatus\"\n)\nfunc main() {\n    address = \"router:50051\"\n    // Set up a connection to the server.\n    conn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())\n    if err != nil {\n        log.Fatalf(\"did not connect: %v\", err)\n    }\n    c := pb.NewStatusClient(conn)\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n    defer cancel()\n    r, err := c.GetStatus(ctx, &pb.StatusRequest{})\n    if err != nil {\n        log.Fatalf(\"could not get router status: %v\", err)\n    }\n    fmt.Printf(\"CPU:%.2f%%, Memory:%.2f%%, Uptime:%ds\", r.GetCpu(), r.GetMemory(), r.GetUptime())\n}\n```", "```py\n<elem: <name: \"interfaces”>elem: <name: \"interface\"key: <key: \"name”value: \"Ethernet1/2/3\">>elem: <name: \"state\">>\n```"]