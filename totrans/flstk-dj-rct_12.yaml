- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Deployment Basics – Git, GitHub, and AWS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署基础 – Git、GitHub 和 AWS
- en: It’s nice to develop an application with a functioning backend and a nice, flexible
    frontend on your machine. Still, if you want your application to be used publicly,
    you need to deploy the application to production. From this chapter to the last
    one, you will learn how to prepare the application we’ve built for deployment,
    deploy the backend on **Amazon Web Services** (**AWS**) and the frontend on Vercel,
    and finally, go through some security and performance optimizations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的机器上开发一个具有功能后端和良好、灵活前端的程序是件好事。然而，如果您想公开使用您的应用程序，您需要将应用程序部署到生产环境。从本章到最后，您将学习如何为部署准备我们构建的应用程序，在
    **亚马逊网络服务**（**AWS**）上部署后端，在 Vercel 上部署前端，并最终进行一些安全和性能优化。
- en: 'In this chapter, we will learn deployment basics such as jargon and concepts
    to understand before going further. We will be learning about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习部署基础，如术语和概念，以便在进一步学习之前理解。我们将学习以下主题：
- en: Basics of software deployment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件部署基础
- en: Tools and methods of web application deployment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络应用程序部署的工具和方法
- en: Platforms for web application deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络应用程序部署平台
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need to have Git installed on your machine. If you
    are on Linux or macOS, it will come by default. You can check its existence with
    the following command in the terminal:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要在您的机器上安装 Git。如果您使用的是 Linux 或 macOS，它将默认安装。您可以在终端中使用以下命令检查其存在性：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Otherwise, feel free to download the right version at [https://git-scm.com/downloads](https://git-scm.com/downloads).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，您可以自由地下载正确的版本，请访问 [https://git-scm.com/downloads](https://git-scm.com/downloads)。
- en: 'After the installation, let’s configure Git if not done yet. In a terminal,
    enter the following configuration commands to set the username (usually the username
    on your GitHub account) and the email address (usually the email address on your
    GitHub account):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，如果尚未完成，让我们配置 Git。在终端中，输入以下配置命令以设置用户名（通常是您的 GitHub 账户上的用户名）和电子邮件地址（通常是您的
    GitHub 账户上的电子邮件地址）：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You will also need an active GitHub account. You can register on the official
    website at [https://github.com/](https://github.com/). As we will also be deploying
    the application on a remote AWS server, you will need an AWS account that can
    be created at [https://portal.aws.amazon.com/billing/signup](https://portal.aws.amazon.com/billing/signup).
    If you don’t have an AWS account, you can still use any **virtual private server**
    (**VPS**) or **virtual private cloud** (**VPC**) you have online. However, this
    chapter will also document how to create a VPC instance using AWS and how to upload
    the code and serve the Django API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要一个活跃的 GitHub 账户。您可以在官方网站 [https://github.com/](https://github.com/) 上注册。由于我们还将应用程序部署到远程
    AWS 服务器，您需要一个可以在 [https://portal.aws.amazon.com/billing/signup](https://portal.aws.amazon.com/billing/signup)
    创建的 AWS 账户。如果您没有 AWS 账户，您仍然可以使用您在线的任何 **虚拟专用服务器**（**VPS**）或 **虚拟专用云**（**VPC**）。然而，本章还将记录如何使用
    AWS 创建 VPC 实例以及如何上传代码和提供 Django API。
- en: Basics of software deployment
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件部署基础
- en: '**Software deployment** concerns all the activities that make a software system
    available to consumers. The term *software deployment* is also commonly described
    as application deployment. Following the best software deployment practices will
    ensure that all applications deployed operate smoothly and work as expected.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件部署**涉及使软件系统可供消费者使用的所有活动。术语 *软件部署* 也通常描述为应用程序部署。遵循最佳软件部署实践将确保所有部署的应用程序都能平稳运行并按预期工作。'
- en: 'There are several benefits of software deployment, such as:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 软件部署有几种好处，例如：
- en: '**Saved time**: A good software deployment process can be configured to only
    take a few minutes. This saves time for compiling and distribution to the users.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节省时间**：良好的软件部署流程可以配置为只需几分钟即可完成。这节省了编译和分发给用户的时间。'
- en: '**Increased security**: Deploying your application in a structured manner rather
    than doing it manually or for individual users means you ensure the security of
    the application and not only the security of the application on every user’s device.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强安全性**：以结构化的方式部署您的应用程序，而不是手动部署或为单个用户部署，这意味着您确保了应用程序的安全性，而不仅仅是每个用户设备上的应用程序安全性。'
- en: '**Better monitoring**: Deploying an application on production servers helps
    provide more control and data on what is working from the user’s end.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的监控**：在生产服务器上部署应用程序有助于提供更多关于用户端工作情况的控制和数据。'
- en: With software deployment defined, we will dive deeper into the tools and methods
    used for web application deployment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 软件部署定义后，我们将更深入地探讨用于Web应用程序部署的工具和方法。
- en: Tools and methods of web application deployment
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序部署的工具和方法
- en: Deploying a web application for production has drastically evolved over the
    years. From manual deployment to automated deployment techniques, web application
    deployment has advanced, making the process more secure, smooth, and as fast as
    possible. There are many tools for web application deployment, but in this book,
    we will focus on the automated tools and configure the Django project and the
    React project for automated deployments when pushes are made on the remote repository
    of the code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 部署Web应用程序到生产环境在近年来经历了巨大的演变。从手动部署到自动化部署技术，Web应用程序部署已经进步，使过程更加安全、顺畅，尽可能快。有许多Web应用程序部署工具，但在这本书中，我们将专注于自动化工具，并在代码的远程仓库上推送时配置Django项目和React项目以进行自动化部署。
- en: But where will the code be pushed first? Let’s start describing and learning
    how to use the tools for our full stack application deployment, starting with
    Git and GitHub.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但代码首先会被推送到哪里呢？让我们开始描述和学习如何使用工具来部署我们的全栈应用程序，从Git和GitHub开始。
- en: Using Git and GitHub
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Git和GitHub
- en: Git is a popular tool used for source code version control and collaboration.
    It not only helps the user keep track of changes made to the code but also allows
    developers to work through small or large code bases, with collaboration made
    easier. In the following subsections, we will initialize a Git repository in the
    backend project, commit the changes, and then push the changes to a remote repository
    on GitHub.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个流行的源代码版本控制和协作工具。它不仅帮助用户跟踪代码的更改，还允许开发者通过小型或大型代码库进行工作，使协作更加容易。在以下小节中，我们将在后端项目中初始化Git仓库，提交更改，然后将更改推送到GitHub上的远程仓库。
- en: Creating a Git repository
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Git仓库
- en: 'Open a new terminal in the directory where you created the Django project and
    enter the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在你创建Django项目的目录中打开一个新的终端，并输入以下命令：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This command will create an empty `.git/` directory in the current directory:
    this is a Git repository. This repository tracks all changes made to files in
    the project, helping build a history of changes made, with details on the files
    changed, the name of the person making the changes, and much more information.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在当前目录中创建一个空的`.git/`目录：这是一个Git仓库。此仓库跟踪项目中文件的所有更改，帮助构建更改的历史，包括更改的文件、更改人员的姓名以及更多信息。
- en: After the initialization, we will need to ignore some files in the project.
    We are talking about files such as `.pycache`, `.env`, and the virtual environment
    directories. After all, we don’t want important information such as secret environment
    variables to be available in the project or useless cache files to be present
    in the changes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化后，我们需要在项目中忽略一些文件。我们谈论的是像`.pycache`、`.env`和虚拟环境目录这样的文件。毕竟，我们不希望重要的信息，如秘密环境变量，在项目中可用，或者无用的缓存文件出现在更改中。
- en: 'Inside the directory of the Django API, create a new file called `.gitignore`.
    This file tells Git which files and directories to ignore when tracking changes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django API的目录内创建一个名为`.gitignore`的新文件。此文件告诉Git在跟踪更改时应忽略哪些文件和目录：
- en: .gitignore
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: .gitignore
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These files and directories in the preceding code will be ignored. Next, we
    will add the change in the directory to the staging area. The staging area allows
    you to group related changes before committing them to the project history. As
    we have successfully added a `.gitignore` file, we can freely run the `git` `add`
    command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码中的这些文件和目录将被忽略。接下来，我们将目录中的更改添加到暂存区。暂存区允许你在提交到项目历史之前将相关更改分组。由于我们已经成功添加了`.gitignore`文件，我们可以自由运行`git
    add`命令：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The dot (`.`) at the end of the command tells Git to only look for changed
    files in the current directory. To have a look at the changes to be committed
    to the Git history, run the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 命令末尾的点（`.`）告诉Git只在该当前目录中查找已更改的文件。要查看要提交到Git历史的更改，请运行以下命令：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `git status` command is used to show the state of the working directory
    and also the staging area. Using the command, you can see changes that are tracked
    or not. The following figure shows an example of the output you should have:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`git status`命令用于显示工作目录和暂存区的状态。使用该命令，你可以看到被跟踪或未被跟踪的更改。以下图示展示了你应该得到的输出示例：'
- en: '![Figure 12.1 – Running the git status command](img/Figure_12.1_B18821.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – 运行git status命令](img/Figure_12.1_B18821.jpg)'
- en: Figure 12.1 – Running the git status command
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 运行git status命令
- en: 'We can now run the `git commit` command. A commit is an operation that writes
    the latest changes of the source code to the version control system history. In
    our case, with `git commit` command will save the changes to the local repository:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以运行`git commit`命令。提交是将源代码的最新更改写入版本控制系统历史记录的操作。在我们的例子中，使用`git commit`命令将保存更改到本地仓库：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding command will prompt you to a text editor in the terminal or an
    app, depending on your system. Either way, you will need to enter a message. It’s
    important to enter a meaningful message because this message will be shown in
    the history of changes made to the source code. You can enter the following line
    if you want:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将提示您在终端或应用程序中的文本编辑器中输入消息。无论哪种方式，您都需要输入一条消息。输入有意义的消息很重要，因为这条消息将显示在源代码更改的历史记录中。如果您想输入以下行：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After saving the message, you can check the Git history with the `git` `log`
    command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 保存消息后，您可以使用`git log`命令检查Git历史记录：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You will have something similar to the following figure:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下类似图示：
- en: '![Figure 12.2 – Writing a commit message](img/Figure_12.2_B18821.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 编写提交信息](img/Figure_12.2_B18821.jpg)'
- en: Figure 12.2 – Writing a commit message
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 编写提交信息
- en: Important note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Writing meaningful commit messages is important, particularly in a team or a
    collaborative environment. You can read more about commit messages at [https://www.conventionalcommits.org/en/v1.0.0/](https://www.conventionalcommits.org/en/v1.0.0/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 编写有意义的提交信息很重要，尤其是在团队或协作环境中。您可以在[https://www.conventionalcommits.org/en/v1.0.0/](https://www.conventionalcommits.org/en/v1.0.0/)了解更多关于提交信息的内容。
- en: The project repository has been initialized locally; however, we want the code
    on GitHub. The next section will show you how to upload your code on GitHub.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 项目仓库已在本地初始化；然而，我们希望代码在GitHub上。下一节将向您展示如何上传您的代码到GitHub。
- en: Uploading code on GitHub
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上传代码到GitHub
- en: GitHub is a code hosting platform for collaboration and version control. It
    helps developers around the world work together on projects and is actually the
    code hosting platform for the majority of popular open source projects.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub是一个用于协作和版本控制的代码托管平台。它帮助世界各地的开发者共同工作，实际上是大多数流行开源项目的代码托管平台。
- en: 'On your GitHub account dashboard, on the navigation bar, create a new repository:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的GitHub账户仪表板上，在导航栏中，创建一个新的仓库：
- en: '![Figure 12.3 – Creating a repository on GitHub](img/Figure_12.3_B18821.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – 在GitHub上创建仓库](img/Figure_12.3_B18821.jpg)'
- en: Figure 12.3 – Creating a repository on GitHub
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 在GitHub上创建仓库
- en: Once it’s done, you will be redirected to a new page to enter basic information
    about the repository, such as the name of the repository and a description, stating
    if the repository is public or private, and adding a license or a `.gitignore`
    file. The repository name is required, and the other pieces of information are
    optional.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您将被重定向到一个新页面，以输入有关仓库的基本信息，例如仓库名称和描述，说明仓库是公开的还是私有的，以及添加许可证或`.gitignore`文件。仓库名称是必需的，其他信息是可选的。
- en: 'You can now create the repository, and you will have a similar page to this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以创建仓库，您将看到类似以下页面：
- en: '![Figure 12.4 – Repository created](img/Figure_12.4_B18821.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – 创建的仓库](img/Figure_12.4_B18821.jpg)'
- en: Figure 12.4 – Repository created
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – 创建的仓库
- en: 'We have an existing repository, and we want to push it to the GitHub platform.
    Let’s follow the steps for **…or push an existing repository from the command
    line**. Inside the directory of your backend project, open a new terminal, and
    let’s enter the shell commands:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个现有的仓库，我们希望将其推送到GitHub平台。让我们按照**…或从命令行推送现有仓库**的步骤进行。在您的后端项目目录中，打开一个新的终端，让我们输入shell命令：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `git remote` command allows you to create, view, and delete connections
    to Git repositories hosted on the internet or another network. In the preceding
    command, we are adding a remote repository URL of the GitHub repository. Let’s
    change the name of the branch we are working on:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`git remote`命令允许您创建、查看和删除连接到互联网或另一个网络上的Git仓库。在上面的命令中，我们正在添加GitHub仓库的远程仓库URL。让我们更改我们正在工作的分支名称：'
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By default, when a repository is created using Git on a local machine, the branch
    of work is called master. What is a branch in Git?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当在本地机器上使用 Git 创建仓库时，工作分支被称作 master。Git 中的分支是什么？
- en: Well, it is just a separate version of the main repository. This allows multiple
    developers to work on the same project. For example, if you are working with a
    backend developer who wants to add support for file uploading on posts and comments,
    instead of working directly on the main branch, the developer can create a new
    branch (`feature/images-post`) from the main branch. After the work is done on
    this branch, the `feature/images-post` branch can be merged with the main branch.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这只是主仓库的一个独立版本。这允许多个开发者共同工作在同一个项目上。例如，如果你与一个想要在帖子及评论中添加文件上传支持的后端开发者合作，开发者可以直接在主分支上创建一个新的分支（`feature/images-post`），而不是直接在主分支上工作。在这个分支上的工作完成后，`feature/images-post`
    分支可以与主分支合并。
- en: 'With the main branch created, we can now push the changes to GitHub:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 主分支创建后，我们现在可以将更改推送到 GitHub：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `git push` command is used to upload local repository changes on the source
    code to a remote repository. In your case, the command will push the current code
    to your GitHub repository URL.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`git push` 命令用于将本地仓库的源代码更改上传到远程仓库。在你的情况下，该命令将把当前代码推送到你的 GitHub 仓库 URL。'
- en: 'Reload the repository page on GitHub, and you will see something similar to
    this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 上重新加载仓库页面，你会看到类似以下内容：
- en: '![Figure 12.5 – Code pushed to the repository](img/Figure_12.5_B18821.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5 – 代码推送到仓库](img/Figure_12.5_B18821.jpg)'
- en: Figure 12.5 – Code pushed to the repository
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – 代码推送到仓库
- en: And voilà! We have the code uploaded on GitHub. But this is just the code. What
    if you can have this running on a remote server that you can access from anywhere?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们已经将代码上传到 GitHub。但这只是代码。如果你能在任何地方访问的远程服务器上运行它怎么办？
- en: Let’s talk about platforms for web application deployment and deploy the Django
    backend on AWS.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈网络应用程序部署的平台，并在 AWS 上部署 Django 后端。
- en: Platforms for web application deployment
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络应用程序部署平台
- en: 'With the complexity of software development increasing and more innovative
    and data-intensive applications evolving or being created every year, there has
    been an explosion of services to allow teams to deploy their products on the internet
    and scale them with ease. This has created a new kind of service called cloud
    computing: the on-demand delivery of IT resources over the internet with pay-as-you-go
    model pricing.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件开发复杂性的增加和每年更多创新和数据处理密集型应用的演变或创建，出现了大量服务，允许团队轻松地将他们的产品部署到互联网上并进行扩展。这创造了一种新的服务类型：云计算：通过互联网按需交付
    IT 资源，采用按使用付费的定价模式。
- en: In this book, we will deploy the backend on AWS, mostly on an **Elastic Compute
    Cloud** (**EC2**) instance, which is just a fancy name for a VPS. Well, actually,
    an AWS EC2 instance is a virtual server in Amazon’s EC2 for running web applications.
    Let’s start by creating the AWS server.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将部署 AWS 上的后端，主要是在一个 **弹性计算云**（**EC2**）实例上，这只是一个 VPS 的花哨名称。实际上，AWS EC2
    实例是亚马逊 EC2 中的一个虚拟服务器，用于运行网络应用程序。让我们先创建 AWS 服务器。
- en: Important note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The following steps can work for any VPS, not just for an AWS VPS. If you can’t
    create a VPS on AWS, you can see other solutions such as Linode, **Google Cloud
    Platform** (**GCP**), Azure, or IBM. They provide free credit you can use for
    learning about their services.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤适用于任何 VPS，而不仅仅是 AWS VPS。如果你在 AWS 上无法创建 VPS，你可以查看其他解决方案，如 Linode、**谷歌云平台**（**GCP**）、Azure
    或 IBM。它们提供免费信用额度，你可以用来了解它们的服务。
- en: Creating an EC2 instance
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 EC2 实例
- en: 'Follow these steps to create an EC2 instance:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建 EC2 实例：
- en: 'Make sure to be logged in to your AWS account. On the dashboard, open the EC2
    console:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已经登录到你的 AWS 账户。在仪表板上，打开 EC2 控制台：
- en: '![Figure 12.6 – Accessing the EC2 console](img/Figure_12.6_B18821.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6 – 访问 EC2 控制台](img/Figure_12.6_B18821.jpg)'
- en: Figure 12.6 – Accessing the EC2 console
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – 访问 EC2 控制台
- en: 'On the EC2 console, launch a new instance:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 EC2 控制台中，启动一个新的实例：
- en: '![Figure 12.7 – Creating an EC2 instance](img/Figure_12.7_B18821.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7 – 创建 EC2 实例](img/Figure_12.7_B18821.jpg)'
- en: Figure 12.7 – Creating an EC2 instance
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – 创建 EC2 实例
- en: You will be shown a page where you will have to configure the instance.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一个页面，你需要配置实例。
- en: 'Enter the name of the instance:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入实例名称：
- en: '![Figure 12.8 – Naming the EC2 instance](img/Figure_12.8_B18821.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.8 – 命名 EC2 实例](img/Figure_12.8_B18821.jpg)'
- en: Figure 12.8 – Naming the EC2 instance
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 – 命名EC2实例
- en: 'The next step is to choose an operating system. We will use **Ubuntu Server
    22.04 LTS** for the **Amazon Machine** **Image** (**AMI**):'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是选择操作系统。我们将使用**Ubuntu Server 22.04 LTS**作为**亚马逊机器****镜像**（**AMI**）：
- en: '![Figure 12.9 – Choosing an operating system on the EC2 instance](img/Figure_12.9_B18821.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图12.9 – 在EC2实例上选择操作系统](img/Figure_12.9_B18821.jpg)'
- en: Figure 12.9 – Choosing an operating system on the EC2 instance
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9 – 在EC2实例上选择操作系统
- en: We are using Ubuntu here because of its security, versatility, and the policy
    of regular updates. However, feel free to use any other Linux distros you are
    familiar with.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用Ubuntu，因为它具有安全性、多功能性和定期更新的政策。然而，您也可以自由使用您熟悉的任何其他Linux发行版。
- en: 'And finally, you will need to set the instance type and create a pair of keys
    for **Secure Shell** (**SSH**) login. After that, you can launch the instance:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您需要设置实例类型并为**Secure Shell**（**SSH**）登录创建一对密钥。之后，您可以启动实例：
- en: '![Figure 12.10 – Launching the instance](img/Figure_12.10_B18821.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图12.10 – 启动实例](img/Figure_12.10_B18821.jpg)'
- en: Figure 12.10 – Launching the instance
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10 – 启动实例
- en: 'Wait a moment, and the instance will be created:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 稍等片刻，实例将被创建：
- en: '![Figure 12.11 – Instance created](img/Figure_12.11_B18821.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图12.11 – 实例已创建](img/Figure_12.11_B18821.jpg)'
- en: Figure 12.11 – Instance created
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11 – 实例已创建
- en: Click on the **View all instances** button, and you will see the created Postagram
    instance.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**查看所有实例**按钮，您将看到创建的Postagram实例。
- en: 'Click on the checkbox next to the name of the instance and click the **Connect**
    button:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击实例名称旁边的复选框，然后点击**连接**按钮：
- en: '![Figure 12.12 – Connecting to an EC2 instance](img/Figure_12.12_B18821.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图12.12 – 连接到EC2实例](img/Figure_12.12_B18821.jpg)'
- en: Figure 12.12 – Connecting to an EC2 instance
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12 – 连接到EC2实例
- en: 'This will redirect you to a page with the information and steps needed to connect
    via SSH:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带您到一个页面，其中包含通过SSH连接所需的信息和步骤
- en: '![Figure 12.13 – Connecting via SSH to an EC2 instance](img/Figure_12.13_B18821.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图12.13 – 通过SSH连接到EC2实例](img/Figure_12.13_B18821.jpg)'
- en: Figure 12.13 – Connecting via SSH to an EC2 instance
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13 – 通过SSH连接到EC2实例
- en: 'In your terminal, type the following command to connect via SSH:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端中，键入以下命令通过SSH连接：
- en: '[PRE12]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once you are connected to the server, we will configure it to have a Django
    backend running on this machine and accessible from the internet:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦连接到服务器，我们将配置它以在机器上运行Django后端，并可以从互联网访问：
- en: '[PRE13]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding commands update the `apt` packages index of Ubuntu packages and
    upgrade all packages on the server.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令更新了Ubuntu软件包的`apt`索引，并升级了服务器上的所有软件包。
- en: The Django project will run on port `8000` on the machine, so we have to allow
    a connection to this port. By default, EC2 instances will only allow connections
    on ports `80` for HTTP requests, `22` for SSH connections, and—sometimes—`443`
    for **Secure Sockets Layer** (**SSL**) connections.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Django项目将在机器的`8000`端口上运行，因此我们必须允许对此端口的连接。默认情况下，EC2实例将只允许通过`80`端口进行HTTP请求的连接，`22`端口进行SSH连接，有时通过`443`端口进行**Secure
    Sockets Layer**（**SSL**）连接。
- en: 'You can allow connections on port `8000` directly on the **Details** page of
    the created EC2 instance to access the **Security** tab on the list of tabs at
    the bottom of the page and click on the security setting group:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接在创建的EC2实例的**详情**页面允许端口`8000`的连接，以访问页面底部选项卡列表中的**安全**设置组：
- en: '![Figure 12.14 – Security tab](img/Figure_12.14_B18821.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图12.14 – 安全选项卡](img/Figure_12.14_B18821.jpg)'
- en: Figure 12.14 – Security tab
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.14 – 安全选项卡
- en: 'On the security group setting, access the **Actions** menu and click on **Edit
    inbound** **rules**. You will have access to a page where you can add a new rule,
    as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全组设置中，访问**操作**菜单并点击**编辑入站****规则**。您将可以访问一个页面，您可以在此添加一条新规则，如下所示：
- en: The type of connection is set to **Custom TCP**
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接类型设置为**自定义TCP**
- en: The port range is set to `8000`
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口范围设置为`8000`
- en: The source is set to `0.0.0.0` to indicate that all requests should be redirected
    to the machine on port `8000`
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源设置为`0.0.0.0`，表示所有请求应重定向到端口`8000`上的机器
- en: And finally, add a default description to not forget why we have added this
    rule
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，添加一个默认描述，以免忘记我们添加此规则的原因
- en: 'Click on `8000`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`8000`：
- en: '![Figure 12.15 – Adding a new security rule](img/Figure_12.15_B18821.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图12.15 – 添加新的安全规则](img/Figure_12.15_B18821.jpg)'
- en: Figure 12.15 – Adding a new security rule
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.15 – 添加新的安全规则
- en: The server is now ready for work, and we can now run the Django backend application.
    Let’s see the next steps in the following sections.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器现在已准备好工作，我们可以现在运行Django后端应用程序。让我们在以下部分中查看下一步。
- en: Configuring the server for the Django project
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Django项目的服务器
- en: 'The source code for the Django project is hosted on GitHub. It’s definitely
    possible to directly use `scp` to copy the code from your machine to the remote
    machine but let’s go with Git, as it will be an important command of our workflow.
    On the terminal of the remote instance, enter the following command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Django项目的源代码托管在GitHub上。直接使用 `scp` 从您的机器复制代码到远程机器是完全可能的，但让我们使用Git，因为这将是我们工作流程中的重要命令。在远程实例的终端中，输入以下命令：
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In my case, I am using the following repository for this project:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，我正在使用以下存储库进行此项目：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `git clone` command is used to get a copy of an existing repository from
    a remote machine on the internet or another network. The `–branch` flag is used
    to denote a specific branch you want to clone.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`git clone` 命令用于从互联网上的远程机器或另一个网络上的远程机器获取现有存储库的副本。`–branch` 标志用于指定您想要克隆的特定分支。'
- en: Important note
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As I am working using the repository of the project in this book, the current
    code and actions done are on the `chap12` branch. In your case, if you are using
    your own repository, you may not have to use the `–branch` flag. Also, depending
    on if the GitHub repository is private or public, you will only enter your GitHub
    credentials if the repository is private.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我正在使用本书项目的存储库进行工作，当前的代码和操作都是在 `chap12` 分支上。在您的案例中，如果您正在使用自己的存储库，您可能不需要使用 `–branch`
    标志。此外，根据GitHub存储库是私有还是公共，如果存储库是私有的，您才需要输入您的GitHub凭据。
- en: 'The `git clone` command will clone the content of the project in a new directory.
    Enter the newly created directory and let’s start configuring the project. We
    will follow most of the steps done in [*Chapter 1*](B18221_01.xhtml#_idTextAnchor016),
    *Creating a Django Project*, until the creation of the Django project:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`git clone` 命令将在新目录中克隆项目的所有内容。进入新创建的目录，让我们开始配置项目。我们将遵循在 [*第1章*](B18221_01.xhtml#_idTextAnchor016)
    中完成的步骤，即 *创建Django项目*，直到创建Django项目：'
- en: 'First of all, create a virtual environment with the following command:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用以下命令创建一个虚拟环境：
- en: '[PRE17]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And activate the virtual environment with the following command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令激活虚拟环境：
- en: '[PRE18]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let’s install the packages from the `requirements.txt` file:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们安装 `requirements.txt` 文件中的包：
- en: '[PRE19]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Great! The project is ready, but we need to configure a Postgres server to have
    the Django project running.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！项目已准备就绪，但我们需要配置一个Postgres服务器，以便Django项目可以运行。
- en: Postgres configuration and deployment
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Postgres配置和部署
- en: 'In [*Chapter 1*](B18221_01.xhtml#_idTextAnchor016) of the book, *Creating a
    Django Project*, we configured Postgres by directly installing an executable or
    building the source code. On the EC2 instance, we will directly use the `apt`
    tool to install the Postgres server. You can follow these steps to install the
    Postgres server on the EC2 machine:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的 *创建Django项目* 的 [*第1章*](B18221_01.xhtml#_idTextAnchor016) 中，我们通过直接安装可执行文件或构建源代码来配置Postgres。在EC2实例上，我们将直接使用
    `apt` 工具安装Postgres服务器。您可以根据以下步骤在EC2机器上安装Postgres服务器：
- en: 'Enter the following command to install the Postgres server:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令安装Postgres服务器：
- en: '[PRE20]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let’s connect to the `psql` console and create a database:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们连接到 `psql` 控制台并创建一个数据库：
- en: '[PRE21]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Great! Let’s create the database with the same information on the `DATABASES`
    settings in the `CoreRoot/settings.py` file:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了！让我们在 `CoreRoot/settings.py` 文件中的 `DATABASES` 设置上创建具有相同信息的数据库：
- en: CoreRoot/settings.py
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: CoreRoot/settings.py
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Enter the following command on the `psql` console to create the `coredb` database:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `psql` 控制台上输入以下命令以创建 `coredb` 数据库：
- en: '[PRE24]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To connect to the database, we need a user with a password. Execute the following
    command:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要连接到数据库，我们需要一个带有密码的用户。执行以下命令：
- en: '[PRE25]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And the next step is to grant access to our database to the new user:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是授予新用户对数据库的访问权限：
- en: '[PRE26]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And we are nearly done. We also need to make sure this user can create a database.
    This will be helpful when we can run tests. To run tests, Django will configure
    a full environment but will also use a database:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们几乎完成了。我们还需要确保此用户可以创建数据库。当我们运行测试时，这将非常有用。要运行测试，Django将配置一个完整的环境，但也会使用数据库：
- en: '[PRE27]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And we are done with the creation of the database. Next, let’s connect this
    database to our Django project:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了数据库的创建。接下来，让我们将此数据库连接到我们的Django项目：
- en: 'In the project directory, run the `migrate` command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中运行`migrate`命令：
- en: '[PRE28]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `migrate` command should pass, and we can now start the Django server by
    running the following command:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`migrate`命令应该通过，现在我们可以通过运行以下命令来启动Django服务器：'
- en: '[PRE29]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'With the Django server running, visit `http://public_ip:8000` in your web browser
    to access your Django project. You will have a page similar to the following figure:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django服务器运行后，在你的网页浏览器中访问`http://public_ip:8000`以访问你的Django项目。你将看到一个类似于以下图所示的页面：
- en: '![Figure 12.16 – DisallowedHost error](img/Figure_12.16_B18821.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图12.16 – 不允许的主机错误](img/Figure_12.16_B18821.jpg)'
- en: Figure 12.16 – DisallowedHost error
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.16 – 不允许的主机错误
- en: 'This is actually an error. This comes from the `ALLOWED_HOSTS` setting being
    empty. It is implemented by Django to prevent security vulnerabilities such as
    HTTP host header attacks. The `ALLOWED_HOSTS` setting contains a list of hostnames
    or domain names that Django can serve:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是一个错误。这是由于`ALLOWED_HOSTS`设置为空导致的。这是Django为了防止诸如HTTP主机头攻击等安全漏洞而实现的。`ALLOWED_HOSTS`设置包含Django可以服务的主机名或域名列表：
- en: CoreRoot/settings.py
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: CoreRoot/settings.py
- en: '[PRE30]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As we are running the project from the terminal, let’s modify the settings
    file directly on the server:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们是从终端运行项目，让我们直接在服务器上修改设置文件：
- en: '[PRE31]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or, you can use the `emacs` or `nano` command. It’s up to you. The following
    line tells Django to accept requests from whatever is the hostname:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用`emacs`或`nano`命令。由你决定。以下行告诉Django接受来自任何主机名的请求：
- en: CoreRoot/settings.py
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: CoreRoot/settings.py
- en: '[PRE32]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Save the file and launch the server again:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并再次启动服务器：
- en: '[PRE33]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then, again, visit `http://public_ip:8000` in your web browser. You will see
    the following:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，再次，在你的网页浏览器中访问`http://public_ip:8000`。你会看到以下内容：
- en: '![Figure 12.17 – Issues with DisallowedHost resolved](img/Figure_12.17_B18821.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图12.17 – DisallowedHost问题已解决](img/Figure_12.17_B18821.jpg)'
- en: Figure 12.17 – Issues with DisallowedHost resolved
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.17 – DisallowedHost问题已解决
- en: Great! The project is running fine on the internet, and you can even play with
    the API using an API client such as Postman or Insomnia. Congratulations! You
    have successfully deployed your Django application on an AWS EC2 machine.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！项目在互联网上运行良好，你甚至可以使用Postman或Insomnia等API客户端来玩转API。恭喜！你已经在AWS EC2机器上成功部署了你的Django应用程序。
- en: However, we have a lot of issues (we can access debugging information directly
    on the internet, as in *Figure 12**.17*), and we made some dangerous decisions
    such as not serving the API through HTTPS or not correctly setting allowed hosts
    throughout the deployment. Let’s explore these issues in the next section.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们遇到了很多问题（我们可以在互联网上直接访问调试信息，就像*图12.17*所示），我们做出了一些危险的决定，例如不通过HTTPS提供服务API或在整个部署过程中没有正确设置允许的主机。让我们在下一节中探讨这些问题。
- en: Errors made when deploying on EC2
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在EC2上部署时犯的错误
- en: 'We have successfully deployed the Django backend on AWS. However, I decided
    to ignore some important and best practices for deployment so that we can have
    the Django server running ASAP. Let’s correct this. Let’s start with the errors
    that Django can show us. In the terminal of the project on the remote server,
    run the following command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在AWS上成功部署了Django后端。然而，我决定忽略一些重要的和最佳实践部署，以便我们可以尽快运行Django服务器。让我们纠正这一点。让我们从Django可以显示给我们的错误开始。在远程服务器的项目终端中，运行以下命令：
- en: '[PRE34]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here’s the output of the preceding command:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面命令的输出：
- en: '[PRE35]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'That’s a lot of things. As we are building an API, let’s focus on the security
    issues that concern our API:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这有很多东西。由于我们正在构建一个API，让我们关注与我们的API相关的安全问题：
- en: '`SECRET_KEY`: This is an important setting in Django. It is used for all sessions,
    cryptographic signings, and even `PasswordReset` tokens. Having an already set
    value for `SECRET_KEY` can lead to dangerous security issues such as privilege
    escalation and remote code execution.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECRET_KEY`：这是Django中的一个重要设置。它用于所有会话、加密签名甚至`PasswordReset`令牌。为`SECRET_KEY`设置一个已存在的值可能会导致危险的安全问题，如权限提升和远程代码执行。'
- en: '`DEBUG`, which is set to `True`. That is basically why we were able to see
    the `DisallowedHost` error. Imagine an attacker going through your API, causing
    a `500` error, and then being able to read everything. That would be very bad.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEBUG`，设置为`True`。这就是我们能够看到`DisallowedHost`错误的原因。想象一下，一个攻击者遍历你的API，导致`500`错误，然后能够读取一切。这将非常糟糕。'
- en: Those are mostly the errors that Django has detected. In the last section, *Postgres
    configuration and deployment*, we resolved the issue of the `DisallowedHost` error
    by having Django allow whichever hostname comes in a Host header. Well, this is
    actually bad because it can lead to an **HTTP Host header attack**, a technique
    used for web cache poisoning, poisoning links in the email, and modification of
    sensitive operations such as password reset.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这些大多是 Django 检测到的错误。在最后一节“Postgres 配置和部署”中，我们通过让 Django 允许 Host 头中出现的任何主机名来解决
    `DisallowedHost` 错误。嗯，这实际上是不好的，因为它可能导致 HTTP 主机头攻击，这是一种用于网络缓存投毒、邮件链接投毒以及修改敏感操作（如密码重置）的技术。
- en: Important note
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: You can read more about HTTP Host header attacks at [https://www.invicti.com/web-vulnerability-scanner/vulnerabilities/http-header-injection/](https://www.invicti.com/web-vulnerability-scanner/vulnerabilities/http-header-injection/).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://www.invicti.com/web-vulnerability-scanner/vulnerabilities/http-header-injection/](https://www.invicti.com/web-vulnerability-scanner/vulnerabilities/http-header-injection/)
    上了解更多关于 HTTP 主机头攻击的信息。
- en: There are also some issues concerning the developer experience. It’s true that
    we have seen how to use Git and GitHub to host source code online, clone it on
    a remote server, and then configure it for deployment. You can repeat the same
    process, right? But what happens when you have to update the code for features
    or fixes multiple times per day? It can quickly become draining, so we need a
    solution for automated deployment on our EC2 server.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些与开发者体验相关的问题。确实，我们已经看到了如何使用 Git 和 GitHub 在线托管源代码，将其克隆到远程服务器上，然后配置它以进行部署。你可以重复同样的过程，对吧？但是，当你每天需要多次更新功能或修复代码时会发生什么呢？这可能会很快变得令人疲惫，因此我们需要在我们的
    EC2 服务器上实现自动化部署的解决方案。
- en: 'Also, we have Postgres and, finally, the Django project running separately.
    Sometimes, there might come a time when you will need to add another service to
    the machine. This can be done manually, but it creates an issue: the production
    environment starts to become different from the development environment.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还有 Postgres，最后，Django 项目是独立运行的。有时，可能会有需要将另一个服务添加到机器上的时刻。这可以手动完成，但会引发一个问题：生产环境开始与开发环境不同。
- en: It is an important habit to make sure that the development environment and the
    production environment are as similar as possible; this can make the reproduction
    of bugs easier but also the development of features predictable.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 确保开发环境和生产环境尽可能相似是一个重要的习惯；这可以使错误的重现更容易，同时也有助于功能的开发可预测。
- en: All these issues will be addressed in the next chapters. You will be introduced
    to environment variables, Docker, NGINX, and **continuous integration/continuous
    deployment** (**CI/CD**) concepts with GitHub Actions.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些问题都将在下一章中解决。你将了解环境变量、Docker、NGINX 以及 GitHub Actions 中的持续集成/持续部署（CI/CD）概念。
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have successfully deployed a Django application on an EC2
    instance. Before deploying the Django application, we used Git to create a repository
    on a local machine, then created a remote repository on GitHub and pushed the
    changes online.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经在 EC2 实例上成功部署了一个 Django 应用程序。在部署 Django 应用程序之前，我们使用 Git 在本地机器上创建了一个仓库，然后在
    GitHub 上创建了一个远程仓库并将更改推送到线上。
- en: We have also learned how to configure a server for deployment manually with
    the installation of essential and interesting tools such as the Postgres server.
    We also explored the errors made when deploying the application and how we will
    address these errors in the following chapters.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何通过安装如 Postgres 服务器等基本和有趣的工具手动配置服务器以进行部署。我们还探讨了在部署应用程序时出现的错误以及我们将在以下章节中如何解决这些错误。
- en: These errors will be resolved in the next chapters, but first, we’ll learn more
    about environment variables and Docker in the next chapter.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误将在下一章中解决，但首先，我们将在下一章中学习更多关于环境变量和 Docker 的知识。
- en: Questions
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the usage of a Git branch?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 分支的用途是什么？
- en: What is the difference between Git and GitHub?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 和 GitHub 之间有什么区别？
- en: What is an HTTP Host header attack?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 HTTP 主机头攻击？
- en: What is the use of `SECRET_KEY` in Django?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django 中的 `SECRET_KEY` 有什么用途？
