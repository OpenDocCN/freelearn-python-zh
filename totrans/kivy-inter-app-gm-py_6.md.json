["```py\n1\\. # File name: video.kv\n2\\. #:set _default_video \"http://video.ted.com/talk/stream/2004/None/DanGilbert_2004-180k.mp4\"\n3\\. \n4\\. <Video>:\n5\\.     allow_stretch: True\n6\\.     color: 0,0,0,0\n7\\.     source: _default_video\n```", "```py\n8\\. # File name: video.py\n9\\. from kivy.uix.video import Video as KivyVideo\n10\\. \n11\\. from kivy.factory import Factory\n12\\. from kivy.lang import Builder\n13\\. \n14\\. Builder.load_file('video.kv')\n15\\. \n16\\. class Video(KivyVideo): \n17\\. \n18\\.     def on_state(self, instance, value):\n19\\.         if self.state == 'stop':\n20\\.             self.seek(0) \n21\\.         return super(self.__class__, self).on_state(instance, value)\n22\\. \n23\\.     def on_eos(self, instance, value):\n24\\.         if value:\n25\\.             self.state = 'stop'\n26\\. \n27\\.     def _on_load(self, *largs):\n28\\.         super(self.__class__, self)._on_load(largs)\n29\\.         self.color = (1,1,1,1)\n30\\. \n31\\.     def on_source(self, instance, value):\n32\\.         self.color = (0, 0, 0, 0)\n33\\. \n34\\. Factory.unregister('Video')\n35\\. Factory.register('Video', cls=Video)\n```", "```py\n36\\. # File name: kivyplayer.py\n37\\. from kivy.app import App\n38\\. \n39\\. from video import Video\n40\\. \n41\\. class KivyPlayerApp(App):\n42\\. \n43\\.     def build(self):\n44\\.         self.video = Video()\n45\\.         self.video.bind(on_touch_down=self.touch_down)\n46\\.         return self.video\n47\\. \n48\\.     def touch_down(self, instance, touch):\n49\\.         if self.video.state == 'play':\n50\\.             self.video.state = 'pause'\n51\\.         else:\n52\\.             self.video.state = 'play'\n53\\.         if touch.is_double_tap:\n54\\.             self.video.state = 'stop'\n55\\. \n56\\. if __name__ == \"__main__\":\n57\\.     KivyPlayerApp().run()\n```", "```py\n58\\. # File name: video.kv \n59\\. ...\n60\\. #:set _default_image \"http://images.ted.com/images/ted/016a827cc0757092a0439ab2a63feca8655b6c29_1600x1200.jpg\"\n61\\. \n62\\. <Video>:\n63\\.     cover: _cover\n64\\.     image: _default_image\n65\\.     ...\n66\\.     AsyncImage:\n67\\.         id: _cover\n68\\.         source: root.image\n69\\.         size: root.width,root.height\n```", "```py\n70\\. # File name: video.py\n71\\.  ...\n72\\. from kivy.properties import ObjectProperty\n73\\.  ...\n74\\. class Video(KivyVideo): \n75\\.     image = ObjectProperty(None)\n76\\. \n77\\.     def on_state(self, instance, value):\n78\\.         if self.state == 'play':\n79\\.             self.cover.opacity = 0\n80\\.         elif self.state == 'stop':\n81\\.             self.seek(0) \n82\\.             self.cover.opacity = 1\n83\\.         return super(self.__class__, self).on_state(instance, value)\n84\\. \n85\\.     def on_image(self, instance, value):\n86\\.         self.cover.opacity = 1\n87\\.  ...\n```", "```py\n88\\. # File name: subtitle.kv\n89\\. <Subtitle@Label>:\n90\\.     halign: 'center'\n91\\.     font_size: '20px'\n92\\.     size: self.texture_size[0] + 20, self.texture_size[1] + 20\n93\\.     y: 50\n94\\.     bcolor: .1, .1, .1, 0\n95\\.     canvas.before:\n96\\.         Color:\n97\\.             rgba: self.bcolor\n98\\.         Rectangle:\n99\\.             pos: self.pos\n100\\.             size: self.size\n```", "```py\n101\\. # File name: video.kv \n102\\. ...\n103\\. #:set _default_surl \"http://www.ted.com/talks/subtitles/id/97/lang/en\"\n104\\. \n105\\. <Video>:\n106\\.     surl: _default_surl\n107\\.     slabel: _slabel\n108\\.     ...\n109\\. \n110\\.     Subtitle:\n111\\.         id: _slabel\n112\\.         x: (root.width - self.width)/2\n```", "```py\n113\\. {\n114\\.     \"captions\": [{\n115\\.         \"duration\":1976,\n116\\.         \"content\": \"When you have 21 minutes to speak,\",\n117\\.         \"startOfParagraph\":true,\n118\\.         \"startTime\":0,\n119\\.     }, ...\n```", "```py\n120\\. # File name: subtitles.py\n121\\. from kivy.network.urlrequest import UrlRequest\n122\\. \n123\\. class Subtitles:\n124\\. \n125\\.     def __init__(self, url):\n126\\.         self.subtitles = []\n127\\.         req = UrlRequest(url, self.got_subtitles)\n128\\. \n129\\.     def got_subtitles(self, req, results):\n130         self.subtitles = results['captions']\n131\\. \n132\\.     def next(self, secs):\n133\\.         for sub in self.subtitles:\n134\\.             ms = secs*1000 - 12000\n135\\.             st = 'startTime'\n136\\.             d = 'duration'\n137\\.             if ms >= sub[st] and ms <= sub[st] + sub[d]:\n138\\.                 return sub\n139\\.         return None \n```", "```py\n140\\. # File name: video.py\n141\\. ...\n142\\. from kivy.properties import StringProperty\n143\\. ...\n144\\. from kivy.lang import Builder\n145\\. \n146\\. Builder.load_file('subtitle.kv')\n147\\. \n148\\. class Video(KivyVideo):\n149\\.     image = ObjectProperty(None)\n150\\.     surl = StringProperty(None)\n```", "```py\n151\\.     ...\n152\\.     def on_source(self, instance, value):\n153\\.         self.color = (0,0,0,0)\n154\\.         self.subs = Subtitles(name, self.surl)\n155\\.         self.sub = None\n156\\. \n157\\.     def on_position(self, instance, value):\n158\\.         next = self.subs.next(value)\n159\\.         if next is None:\n160\\.             self.clear_subtitle()\n161\\.         else:\n162\\.             sub = self.sub\n163\\.             st = 'startTime'\n164\\.             if sub is None or sub[st] != next[st]:\n165\\.                 self.display_subtitle(next)\n166\\. \n167\\.     def clear_subtitle(self):\n168\\.         if self.slabel.text != \"\":\n169\\.             self.sub = None\n170\\.             self.slabel.text = \"\"\n171\\.             self.slabel.bcolor = (0.1, 0.1, 0.1, 0)\n172\\. \n173\\.     def display_subtitle(self, sub):\n174\\.         self.sub = sub\n175\\.         self.slabel.text = sub['content']\n176\\.         self.slabel.bcolor = (0.1, 0.1, 0.1, .8)\n177\\. (...)\n```", "```py\n178\\. # File name: controlbar.kv\n179\\. <ControlBar@GridLayout>:\n180\\.     rows: 1\n181\\.     size_hint: None, None\n182\\.     pos_hint: {'right': 1}\n183\\.     padding: [10,0,0,0]\n184\\.     play_pause: _play_pause\n185\\.     progress: 0\n```", "```py\n186\\.     VideoPlayPause:\n187\\.         id: _play_pause\n188\\.         start: 'atlas://data/images/defaulttheme/media-playback-start'\n189\\.         pause: 'atlas://data/images/defaulttheme/media-playback-pause'\n190\\.         size_hint: [None, None]\n191\\.         width: 44\n192\\.         source: self.start if self.state == 'normal' else self.pause\n```", "```py\n193\\.     VideoStop:\n194\\.         size_hint: [None, None]\n195\\.         width: 44\n196\\.         source: 'atlas://data/images/defaulttheme/media-playback-stop'\n197\\.         on_press: self.stop(root.parent.video, _play_pause)\n```", "```py\n198\\. # File name: controlbar.py \n199\\. from kivy.uix.behaviors import ButtonBehavior, ToggleButtonBehavior\n200\\. from kivy.uix.image import Image\n201\\. from kivy.lang import Builder\n202\\. \n203\\. Builder.load_file('controlbar.kv')\n204\\. \n205\\. class VideoPlayPause(ToggleButtonBehavior, Image):\n206\\.     pass\n207\\. \n208\\. class VideoStop(ButtonBehavior, Image):\n209\\. \n210\\.     def stop(self, video, play_pause):\n211\\.         play_pause.state = 'normal'\n212\\.         video.state = 'stop'\n```", "```py\n213\\. # File name: videocontroller.kv\n214\\. <VideoController >:\n215\\.     video: _video\n216\\.     control_bar: _control_bar\n217\\.     play_pause: _control_bar.play_pause\n218\\.     control_bar_width: self.width\n219\\.     playing: _video.state == 'play'\n220\\. \n221\\.     Video:\n222\\.         id: _video\n223\\.         state: 'pause' if _control_bar.play_pause.state == 'normal' else 'play'\n224\\. \n225\\.     ControlBar:\n226\\.         id: _control_bar\n227\\.         width: root.control_bar_width\n228\\.         progress: _video.position / _video.duration\n```", "```py\n229\\. # File name: videocontroller.py\n230\\. from kivy.uix.floatlayout import FloatLayout\n231\\. from kivy.lang import Builder\n232\\. \n233\\. import video\n234\\. import controlbar\n235\\. \n236\\. Builder.load_file('videocontroller.kv')\n237\\. \n238\\. class VideoController(FloatLayout):\n239\\.     pass\n```", "```py\n240\\. # File name: kivyplayer.py\n241\\. from kivy.app import App\n242\\. from videocontroller import VideoController\n243\\. \n244\\. class KivyPlayerApp(App):\n245\\.     def build(self):\n246\\.         return VideoController()\n247\\. \n248\\. if __name__==\"__main__\":\n249\\.     KivyPlayerApp().run()\n```", "```py\n250\\. # File name: controlbar.kv\n251\\. <ControlBar@GridLayout>:\n252\\.     ...\n253\\.     VideoSlider:\n254\\.         value: root.progress\n255\\.         max: 1\n256\\.     VideoPlayPause:\n257\\.         ...\n```", "```py\n258\\. # File name: controlbar.py \n259\\. ...\n260\\. class VideoSlider(Slider):\n261\\. \n262\\.     def on_touch_down(self, touch):\n263\\.         video = self.parent.parent.video\n264\\.         if self.collide_point(*touch.pos):\n265\\.             self.prev_state = video.state\n266\\.             self.prev_touch = touch\n267\\.             video.state = 'pause'\n268\\.         return super(self.__class__, self).on_touch_down(touch)\n269\\. \n270\\.     def on_touch_up(self, touch):\n271\\.         if self.collide_point(*touch.pos) and \\\n272\\.             hasattr(self, 'prev_touch') and \\\n273\\.             touch is self.prev_touch:\n274\\.             video = self.parent.parent.video\n275\\.             video.seek(self.value)\n276\\.             if prev_state != 'stop':\n277\\.                 video.state = self.prev_state\n278\\.         return super(self.__class__, self).on_touch_up(touch)\n```", "```py\n279\\. # File name: videocontroller.py\n280\\. from kivy.animation import Animation\n281\\. from kivy.properties import ObjectProperty\n282\\. ...\n283\\. class VideoController(FloatLayout):\n284\\.     playing = ObjectProperty(None)\n285\\. \n286\\.     def on_playing(self, instance, value):\n287\\.         if value:\n288\\.             self.animationVB = Animation(top=0)\n289\\.             self.control_bar.disabled = True\n290\\.             self.animationVB.start(self.control_bar)\n291\\.         else:\n292\\.             self.play_pause.state = 'normal'\n293\\.             self.control_bar.disabled = False\n294\\.             self.control_bar.y = 0\n295\\. \n296\\.     def on_touch_down(self, touch):\n297\\.         if self.collide_point(*touch.pos):\n298\\.             if hasattr(self, 'animationVB'):\n299\\.                self.animationVB.cancel(self.control_bar)\n300\\.             self.play_pause.state = 'normal'\n301\\.         return super(self.__class__, self).on_touch_down(touch)\n```", "```py\n302\\. # File name: kivyplayer.kv\n303\\. \n304\\. <KivyPlayer>:\n305\\.     list_button: _list_button\n306\\.     action_bar: _action_bar\n307\\.     video_controller: _video_controller\n308\\. \n309\\.     VideoController:\n310\\.         id: _video_controller\n311\\.         on_playing: root.hide_bars(*args)\n312\\. \n313\\.     ActionBar:\n314\\.         id: _action_bar\n315\\.         top: root.height\n316\\.         ActionView:\n317\\.             use_separator: True\n318\\.             ActionListButton:\n319\\.                 id: _list_button\n320\\.                 root: root\n321\\.                 title: 'KPlayer'\n322\\.             ActionToggleButton:\n323\\.                 text: 'Mute'\n324\\.                 on_state: root.toggle_mute(*args)\n325\\.             ActionGroup:\n326\\.                 text: 'More Options...'\n327\\.                 ActionButton:\n328\\.                     text: 'Open List'\n329\\.                     on_release: root.show_load_list()\n330\\.                 ActionTextInput: \n331\\.                     on_text_validate: root.search(self.text)\n```", "```py\n332\\. # File name: actiontextinput.kv\n333\\. <ActionTextInput@TextInput+ActionItem>\n334\\.     background_color: 0.2,0.2,0.2,1\n335\\.     foreground_color: 1,1,1,1\n336\\.     cursor_color: 1,1,1,1\n337\\.     hint_text: 'search' \n338\\.     multiline: False\n339\\.     padding: 14\n340\\.     size_hint: None, 1\n```", "```py\n341\\. # File name: kivyplayer.py (Fragment 1 of 3)\n342\\. from kivy.app import App\n343\\. from kivy.uix.floatlayout import FloatLayout\n344\\. from kivy.animation import Animation\n345\\. from kivy.uix.behaviors import ToggleButtonBehavior\n346\\. from kivy.uix.actionbar import ActionPrevious\n347\\. \n348\\. from kivy.lang import Builder\n349\\. \n350\\. import videocontroller\n351\\. \n352\\. Builder.load_file('actiontextinput.kv')\n353\\. \n354\\. \n355\\. class ActionListButton(ToggleButtonBehavior, ActionPrevious):\n356\\.     pass\n```", "```py\n357\\. # File name: kivyplayer.py (Fragment 2 of 3)\n358\\. class KivyPlayer(FloatLayout):\n359\\. \n360\\.     def hide_bars(self, instance, playing):\n361\\.         if playing:\n362\\.             self.list_button.state = 'normal'\n363\\.             self.animationAB = Animation(y=self.height)\n364\\.             self.action_bar.disabled = True\n365\\.             self.animationAB.start(self.action_bar)\n366\\.         else:\n367\\.             self.action_bar.disabled = False\n368\\.             self.action_bar.top = self.height\n369\\.             if hasattr(self, 'animationAB'):\n370\\.                 self.animationAB.cancel(self.action_bar)\n371\\. \n372\\.     def toggle_mute(self, instance, state):\n373\\.         if state == 'down':\n374\\.             self.video_controller.video.volume = 0\n375\\.         else:\n376\\.             self.video_controller.video.volume = 1\n377\\. \n378\\.     def show_load_list(self):\n379\\.         pass\n380\\. \n381\\.     def search(self, text):\n382\\.         pass\n```", "```py\n383\\. # File name: kivyplayer.py (Fragment 3 of 3)\n384\\. class KivyPlayerApp(App):\n385\\.     def build(self):\n386\\.         return KivyPlayer()\n387\\. \n388\\. if __name__==\"__main__\":\n389\\.     KivyPlayerApp().run()\n```", "```py\n390\\. # File name: loaddialog.kv\n391\\. <LoadDialog>:\n392\\.     BoxLayout:\n393\\.         size: root.size\n394\\.         pos: root.pos\n395\\.         orientation: \"vertical\"\n396\\.         FileChooserListView:\n397\\.             id: filechooser\n398\\.             path: './'\n399\\.         BoxLayout:\n400\\.             size_hint_y: None\n401\\.             height: 30\n402\\.             Button:\n403\\.                 text: \"Cancel\"\n404\\.                 on_release: root.cancel()\n405\\.             Button:\n406\\.                 text: \"Load\"\n407\\.                 on_release: root.load(filechooser.path, filechooser.selection)\n```", "```py\n408\\. # File name: loaddialog.py\n409\\. \n410\\. from kivy.uix.floatlayout import FloatLayout\n411\\. from kivy.properties import ObjectProperty\n412\\. from kivy.lang import Builder\n413\\. \n414\\. Builder.load_file('loaddialog.kv')\n415\\. \n416\\. class LoadDialog(FloatLayout):\n417\\.     load = ObjectProperty(None)\n418\\.     cancel = ObjectProperty(None)\n```", "```py\n419\\.     def show_load_list(self):\n420\\.         content = LoadDialog(load=self.load_list, cancel=self.dismiss_popup)\n421\\.         self._popup = Popup(title=\"Load a file list\", content=content, size_hint=(1, 1))\n422\\.         self._popup.open()\n423\\. \n424\\.     def load_list(self, path, filename):\n425\\.         pass\n426\\. \n427\\.     def dismiss_popup(self):\n428\\.         self._popup.dismiss() \n```", "```py\n429\\. from kivy.uix.popup import Popup\n430\\. from loaddialog import LoadDialog\n431\\. from sidebar import ListItem\n```", "```py\n432\\. # File name: sidebar.kv\n433\\. <ListItem>:\n434\\.     size_hint: [1,None]\n435\\.     height: 70\n436\\.     group: 'listitem'\n437\\.     text_size: [self.width-20, None]\n438\\. \n439\\. \n440\\. <Sidebar@ScrollView>:\n441\\.     playlist: _playlist\n442\\.     size_hint: [None, None]\n443\\.     canvas.before:\n444\\.         Color:\n445\\.             rgba: 0,0,0,.9\n446\\.         Rectangle:\n447\\.             pos: 0,0,\n448\\.             size: self.width,self.height\n449\\. \n450\\.     GridLayout:\n451\\.         id: _playlist\n452\\.         size_hint_y: None\n453\\.         cols: 1\n```", "```py\n454\\. # File name: sidebar.py\n455\\. \n456\\. import json\n457\\. \n458\\. from kivy.uix.togglebutton import ToggleButton\n459\\. from kivy.properties import ObjectProperty\n460\\. from kivy.lang import Builder\n461\\. \n462\\. Builder.load_file('sidebar.kv')\n463\\. \n464\\. class ListItem(ToggleButton):\n465\\.     video = ObjectProperty(None)\n466\\. \n467\\.     def __init__(self, video, meta, surl, **kwargs):\n468\\.         super(self.__class__, self).__init__(**kwargs)\n469\\.         self.video = video\n470\\.         self.meta = meta\n471\\.         self.surl = surl\n472\\. \n473\\.     def on_state(self, instance, value):\n474\\.         if self.state == 'down':            \n475\\.             data = json.load(open(self.meta))['talk']\n476\\.             self.video.surl = self.surl\n477\\.             self.video.source = data['media']['internal']['950k']['uri']\n478\\.             self.video.image = data['images'][-1]['image']['url']\n```", "```py\n479\\. # File name: kivyplayer.kv\n480\\. <KivyPlayer>:\n481\\.     list_button: _list_button\n482\\.     action_bar: _action_bar\n483\\.     video_controller: _video_controller\n484\\.     side_bar: _side_bar\n485\\.     playlist: _side_bar.playlist\n486\\. \n487\\.     VideoController:\n488\\.         id: _video_controller\n489\\.         control_bar_width: root.width - _side_bar.right\n490\\. \n491\\. (...)\n492\\. \n493\\.     Sidebar:\n494\\.         id: _side_bar\n495\\.         width: min(_list_button.width,350)\n496\\.         height: root.height - _action_bar.height\n497\\.         top: root.height - _action_bar.height\n498\\.         x: 0 - self.width if _list_button.state == 'normal' else 0\n```", "```py\n499\\. # File name: kivyplayer.py\n500\\. import json\n501\\. import os\n502\\. \n503\\. (...)\n504\\. \n505\\. from sidebar import ListItem\n506\\. \n507\\. Builder.load_file('actiontextinput.kv')\n508\\. \n509\\. _surl = 'http://www.ted.com/talks/subtitles/id/%s/lang/en'\n510\\. _meta = 'results/%s.json'\n511\\. \n512\\. class ActionListButton(ToggleButtonBehavior, ActionPrevious):\n513\\.     def on_state(self, instance, value):\n514\\.         if self.state == 'normal':\n515\\.             self.animationSB = Animation(right=0)\n516\\.             self.animationSB.start(self.root.side_bar)\n517\\.         else:\n518\\.             self.root.side_bar.x=0\n519\\. \n520\\. class KivyPlayer(FloatLayout):\n521\\. \n522\\.     def __init__(self, **kwargs):\n523\\.         super(self.__class__, self).__init__(**kwargs)\n524\\.         self.playlist.bind(minimum_height= self.playlist.setter('height'))\n```", "```py\n525\\.     def load_list(self, path, filename):\n526\\.         json_data=open(os.path.join(path, filename[0]))\n527\\.         data = json.load(json_data)\n528\\.         json_data.close()\n529\\.         self.load_from_json(data)\n530\\.         self.dismiss_popup()\n531\\. \n532\\.     def load_from_json(self, data):\n533\\.         self.playlist.clear_widgets()\n534\\.         for val in data['results']:\n535\\.             t = val['talk']\n536\\.             video = self.video_controller.video\n537\\.             meta = _meta % t['id']\n538\\.             surl = _surl % t['id']\n539\\.             item = ListItem(video, meta, surl, text=t['name'])\n540\\.             self.playlist.add_widget(item)\n541\\.         self.list_button.state = 'down'\n```", "```py\n_api = 'YOUR_API_KEY_GOES_HERE'\n```", "```py\n_search = 'https://api.ted.com/v1/search.json?q=%s&categories=talks&api-key=%s'\n_meta = 'https://api.ted.com/v1/talks/%s.json?api-key=%s'\n```", "```py\n542\\.     def on_state(self, instance, value):\n543\\.         if self.state == 'down':\n544\\.             req = UrlRequest(self.meta, self.got_meta)\n545\\.         \n546\\.     def got_meta(self, req, results):\n547\\.         data = results['talk']\n548\\.         self.video.surl = self.surl\n549\\.         self.video.source = data['media']['internal']['950k']['uri']\n550\\.         self.video.image = data['images'][-1]['image']['url'] \n```", "```py\n551\\.     def search(self, text):\n552\\.         url = _search % (text, _api)\n553\\.         req = UrlRequest(url, self.got_search)\n554\\. \n555\\.     def got_search(self, req, results):\n556\\.         self.load_from_json(results) \n```"]