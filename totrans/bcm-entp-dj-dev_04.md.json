["```py\n    # /becoming_a_django_entdev/chapter_3/models.py\n    from django.db import models\n    class Vehicle(models.Model):\n        pass\n    ```", "```py\nRuntimeError: Conflicting 'vehicle' models in application 'chapter_3':\n```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    from django.db import models\n    YESNO_CHOICES = (\n        (True, 'Yes'),\n        (False, 'No')\n    )\n    ...\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class VehicleModel(models.Model):\n        name = models.CharField(\n            verbose_name = 'Model',\n            max_length = 75,\n            unique = True,\n            blank = True,\n            null = True,\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class Engine(models.Model):\n        name = models.CharField(\n            verbose_name = 'Engine',\n            max_length = 75,\n            blank = True,\n            null = True,\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class Vehicle(models.Model):\n        vin = models.CharField(\n            verbose_name = 'VIN',\n            max_length = 17,\n            unique = True,\n            blank = True,\n            null = True,\n        )\n        sold = models.BooleanField(\n            verbose_name = 'Sold?',\n            choices = YESNO_CHOICES,\n            default = False,\n            blank = True,\n            null = True,\n        )\n    ```", "```py\n    (virtual_env) PS > python3 manage.py makemigrations\n    Migrations for 'chapter_3':\n      becoming_a_django_entdev\\chapter_3\\migrations\\0001_initial.py\n    - Create model Engine \n        - Create model Vehicle\n        - Create model VehicleModel\n    (virtual_env) PS > python3 manage.py migrate\n    Operations to perform:\n      Apply all migrations: admin, auth, chapter_1, chapter_3, contenttypes, sessions\n    Running migrations:\n      Applying chapter_3.0001_initial... OK\n    ```", "```py\n    (virtual_env) PS > pip install django-money\n    ```", "```py\n    # /becoming_a_django_entdev/settings.py\n    ...\n    INSTALLED_APPS = [\n        ...,\n        'djmoney',\n        'becoming_a_django_entdev.chapter_3',\n    ]\n    ```", "```py\n    # /becoming_a_django_entdev/settings.py\n    ...\n    CURRENCIES = ('USD', 'EUR')\n    CURRENCY_CHOICES = [\n        ('USD', 'USD $'), \n        ('EUR', 'EUR €')\n    ]\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    from django.db import models\n    from djmoney.models.fields import MoneyField\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class Vehicle(models.Model):\n        ...\n        price = MoneyField(\n            max_digits = 19,\n            decimal_places = 2,\n            default_currency = 'USD',\n            null = True,\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    from djmoney.models.validators import MaxMoneyValidator, MinMoneyValidator\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class Vehicle(models.Model):\n        ...\n        price = MoneyField(\n            max_digits = 19,\n            decimal_places = 2,\n            default_currency = 'USD',\n            null = True,\n            validators = [\n                MinMoneyValidator(\n                    {'EUR': 500, 'USD': 400}\n                ),\n                MaxMoneyValidator(\n                    {'EUR': 500000, 'USD': 400000}\n                ),\n            ])\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class Vehicle(models.Model):\n        ...\n        vehicle_model = models.ForeignKey(\n            VehicleModel,\n            on_delete = models.CASCADE,\n            verbose_name = 'Model',\n            related_name = 'model_vehicle',\n            blank = True,\n            null = True,\n        )\n        engine = models.ForeignKey(\n            Engine,\n            on_delete = models.CASCADE,\n            verbose_name = 'Engine',\n            related_name = 'engine_vehicle',\n            blank = True,\n            null = True,\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class Engine(models.Model):\n        ...\n        vehicle_model = models.ForeignKey(\n            VehicleModel,\n            on_delete = models.CASCADE,\n            verbose_name = 'Model',\n            related_name = 'model_engine',\n            blank = True,\n            null = True,\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class Seller(models.Model):\n        name = models.CharField(\n            verbose_name = 'Seller Name',\n            max_length = 150,\n            blank = True,\n            null = True,\n        )\n        vehicle = models.ManyToManyField(\n            Vehicle,\n            verbose_name = 'Vehicles',\n            related_name = 'vehicle_sellers',\n            related_query_name = 'vehicle_seller',\n            blank = True,\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    MAKE_CHOICES = (\n        (1, 'Buick'),\n        (2, 'Cadillac'),\n        (3, 'Chevrolet'),\n        ...\n    )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class Vehicle(models.Model):\n        ...\n        make = models.PositiveIntegerField(\n            choices = MAKE_CHOICES,\n            verbose_name = 'Vehicle Make/Brand',\n            blank = True,\n            null = True,\n        )\n    ```", "```py\n# /becoming_a_django_entdev/chapter_3/models.py \n```", "```py\n...\n```", "```py\nclass VehicleModel(models.Model):\n```", "```py\n    ...\n```", "```py\n    class Meta:\n```", "```py\n        verbose_name = 'Vehicle Model'\n```", "```py\n        verbose_name_plural = 'Vehicle Models'\n```", "```py\n# /becoming_a_django_entdev/chapter_3/models.py \n```", "```py\n...\n```", "```py\nclass VehicleModel(models.Model):\n```", "```py\n    ...\n```", "```py\n    class Meta:\n```", "```py\n        ...\n```", "```py\n        #ordering = ['name', 'secondary_field',]\n```", "```py\n        ordering = ['-name']\n```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    from django.db.models.functions import Lower\n    ...\n    class VehicleModel(models.Model):\n        ...\n        class Meta:\n            ...\n            indexes = [\n                models.Index(fields=['name']),\n                models.Index(\n                    fields = ['-name'], \n                    name = 'desc_name_idx'\n                ),\n                models.Index(\n                    Lower('name').desc(), \n                    name = 'lower_name_idx'\n                )\n            ]\n    ```", "```py\n        - Create index chapter_3_v_name_055414_idx on field(s) name of model vehiclemodel\n        - Create index desc_name_idx on field(s) -name of model vehiclemodel\n        - Create index lower_name_idx on OrderBy(Lower(F(name)), descending=True) on model vehiclemodel\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class engine2(models.Model):\n        name = models.CharField(\n            verbose_name = 'Engine',\n            max_length = 75,\n            blank = True,\n            null = True,\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class engine2(models.Model):\n        ...\n        class Meta:\n            db_table = 'chapter_3_practice_engine'\n    ```", "```py\n# /becoming_a_django_entdev/chapter_3/models.py \n```", "```py\n...\n```", "```py\nclass Vehicle(models.Model):\n```", "```py\n    ...\n```", "```py\n    def __str__(self):\n```", "```py\n        MAKE_CHOICES_DICT = dict(MAKE_CHOICES)\n```", "```py\n        return MAKE_CHOICES_DICT[self.make] + ' ' + self.model.name\n```", "```py\n# /becoming_a_django_entdev/chapter_3/models.py \n```", "```py\n...\n```", "```py\nclass Vehicle(models.Model):\n```", "```py\n    ...\n```", "```py\n    def full_vehicle_name(self):\n```", "```py\n        return self.__str__() + ' - ' + self.engine.name\n```", "```py\n>>> print(my_object.my_custom_method())\n```", "```py\n>>> print(my_object.my_custom_method)\n```", "```py\n# /becoming_a_django_entdev/chapter_3/models.py \n```", "```py\n...\n```", "```py\nclass Vehicle(models.Model):\n```", "```py\n    ...\n```", "```py\n    @property\n```", "```py\n    def fullname(self):\n```", "```py\n        return self.__str__() + ' - ' + self.engine.name\n```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class engine2(models.Model):\n        name = models.CharField(...)\n        vehicle_model = models.ForeignKey(\n            VehicleModel,\n            on_delete = models.CASCADE,\n            verbose_name = 'Model',\n            related_name = 'model_engine2',\n            blank = True,\n            null = True,\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class engine2(models.Model):\n        class Meta:\n            abstract = True\n            db_table = 'chapter_3_practice_engine'\n            ordering = ['name',]\n            verbose_name = 'Practice Engine'\n            verbose_name_plural = 'Practice Engines'\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class engine3(engine2):\n        other_name = models.CharField(\n            verbose_name = 'Other Engine Name',\n            max_length = 75,\n            blank = True,\n            null = True,\n        )\n    ```", "```py\n    # In the Query Tool of the PgAdmin App\n    DROP SCHEMA public CASCADE;\n    CREATE SCHEMA public;\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    from django.contrib.auth.models import AbstractUser\n    ...\n    class Seller(AbstractUser):\n        ...\n    ```", "```py\n    # /becoming_a_django_entdev/settings.py\n    ...\n    AUTH_USER_MODEL = 'chapter_3.Seller'\n    ```", "```py\n    (virtual_env) PS > python3 manage.py shell\n    ```", "```py\n    Python 3.7.8 (tags/v3.7.8:4b47a5b6ba, Jun 28 2020, 08:53:46) [MSC v.1916 64 bit (AMD64)] on win32\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    (InteractiveConsole)\n    >>>\n    ```", "```py\n    (virtual_env) PS > python3 manage.py shell \n    ```", "```py\n    >>> myvar = 'my_string'\n    >>> myvar[2] = ''\n    Traceback (most recent call last):\n      File \"<console>\", line 1, in <module>\n    TypeError: 'str' object does not support item assignment\n    >>>\n    ```", "```py\n    >>> myvar = 'my_string'\n    >>> print(myvar)\n    my_string\n    >>> myvar = 'mystring'\n    >>> print(myvar)\n    mystring\n    >>> \n    ```", "```py\n    >>> myvar = 'my_string'\n    >>> print(myvar[0:2] + myvar[3:9])\n    mystring\n    >>> \n    ```", "```py\n    >>> exit()\n    ```", "```py\n    (virtual_env) PS > python3 manage.py shell\n    >>> from secret_key_generator import secret_key_generator\n    ```", "```py\n    >>> print(secret_key_generator.generate())\n    your_randomly_generated_key_printed_here\n    ```", "```py\n    (virtual_env) PS > python3 manage.py shell\n    >>> from becoming_a_django_entdev.chapter_3.models import Engine, Seller, Vehicle, VehicleModel \n    ```", "```py\n    >>> vehicle_model = VehicleModel(name = 'Enclave Avenir', make = 1)\n    >>> vehicle_model.save()\n    ```", "```py\n    >>> engine = Engine(name = '3.6L DI DOHC 6cyl', vehicle_model = 1)\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot assign \"1\": \"Engine.model\" must be a \"VehicleModel\" instance.\n    ```", "```py\n    >>> vehicle_model = VehicleModel(name = 'Enclave Avenir', make = 1)\n    >>> vehicle_model.save()\n    >>> engine = Engine(name = '3.6L DI DOHC 6cyl', vehicle_model = vehicle_model)\n    >>> engine.save()\n    ```", "```py\nTraceback (most recent call last):\n  File \"C:\\Projects\\Packt_Publishing\\Repo\\becoming_a_django_entdev\\virtual_env\\lib\\site-packages\\django\\db\\backends\\utils.py\", line 84, in _execute\n    return self.cursor.execute(sql, params)\npsycopg2.errors.UniqueViolation: duplicate key value violates unique constraint \"chapter_3_vehiclemodel_name_a94a4619_uniq\"\nDETAIL:  Key (name)=(Enclave Avenir) already exists.\n...\nThe above exception was the direct cause of the following exception:\ndjango.db.utils.IntegrityError: duplicate key value violates unique constraint \"chapter_3_vehiclemodel_name_a94a4619_uniq\"\nDETAIL:  Key (name)=(Enclave Avenir) already exists.\n```", "```py\n>>> vehicle_model = VehicleModel(name = 'Blazer LT', make = 3)\n>>> engine = Engine(name = '4 Cylinders 4 2.0L DI Turbo DOHC 122 CID', vehicle_model = vehicle_model)\n>>> engine.save()\nTraceback (most recent call last):\n  ...\nValueError: save() prohibited to prevent data loss due to unsaved related object 'model'.\n```", "```py\n    (virtual_env) PS > python3 manage.py shell\n    >>> vehicle_model, created = VehicleModel.objects.update_or_create(name = 'Enclave Avenir', make = 1, defaults={'name': 'Enclave Avenir', 'make': 1},)\n    ```", "```py\n    >>> from djmoney.money import Money\n    ```", "```py\n    >>> vehicle_model, model_created = VehicleModel.objects.update_or_create(name = 'Blazer LT', make = 3,)\n    >>> engine, engine_created = Engine.objects.update_or_create(name = '3.9L DI DOHC 6cyl', vehicle_model = vehicle_model,)\n    >>> vehicle, vehicle_created = Vehicle.objects.update_or_create(vin = 'aa123456789012345', sold = True, price = Money(10000, 'USD'), make = 3, vehicle_model = vehicle_model, engine = engine,)\n    ```", "```py\n(virtual_env) PS > python3 manage.py loaddata chapter_3\n```", "```py\n(virtual_env) PS > python3 manage.py shell\n>>> from becoming_a_django_entdev.chapter_3.models import Engine, Seller, Vehicle, VehicleModel \n>>> VehicleModel.objects.all()\n<QuerySet [<VehicleModel: Blazer LT>, <VehicleModel: Enclave Avenir>, <VehicleModel: Envision Avenir>]> \n```", "```py\n<QuerySet [<VehicleModel: VehicleModel object (3)>, <VehicleModel: VehicleModel object (2)>, <VehicleModel: VehicleModel object (1)>]>\n```", "```py\n    >>> vehicle = Vehicle.objects.get(vin = 'aa123456789012345')\n    >>> print(vehicle)\n    Chevrolet Blazer LT\n    ```", "```py\n    >>> print(vehicle.full_vehicle_name())\n    Chevrolet Blazer LT - 3.6L DI DOHC 6cyl\n    ```", "```py\n    >>> print(vehicle.fullname)\n    Chevrolet Blazer LT - 3.6L DI DOHC 6cyl\n    ```", "```py\n >>> print(VehicleModel.objects.filter(make = 1))\n<QuerySet [<VehicleModel: Enclave Avenir>, <VehicleModel: Envision Avenir>]>\n```", "```py\n    (virtual_env) PS > python3 manage.py shell\n    >>> from becoming_a_django_entdev.chapter_3.models import Vehicle\n    >>> from django.db.models import Avg\n    ```", "```py\n    >>> vehicles = Vehicle.objects.all().aggregate(Avg('price'))\n    ```", "```py\n    >>> print(vehicles)\n    {'price__avg': Decimal('16335.428571428571')}\n    ```", "```py\n    >>> print(vehicles['price__avg'])\n    16335.428571428571\n    ```", "```py\n    >>> from djmoney.money import Money\n    >>> print(Money(vehicles['price__avg'], 'USD'))\n    $16,335.43\n    ```", "```py\n >>> vehicles = Vehicle.objects.aggregate(Avg('price'))\n```", "```py\n>>> vehicles = Vehicle.objects.filter(sold=False).aggregate(Avg('price'))\n>>> print(Money(vehicles['price__avg'], 'USD'))\n$18,419.60\n```", "```py\n    (virtual_env) PS > python3 manage.py shell\n    >>> from becoming_a_django_entdev.chapter_3.models import Seller, Vehicle\n    >>> from django.db.models import Avg, Count\n    >>> sellers = Seller.objects.filter(vehicles__sold=True).annotate(Count('vehicles'))\n    >>> print(sellers[0].vehicles__count)\n    2\n    ```", "```py\n    >>> sellers = Seller.objects.filter(vehicles__sold=False).annotate(Count('vehicles'))\n    >>> print(sellers[0].vehicles__count)\n    5\n    ```", "```py\n    >>> print(sellers)\n    <QuerySet [<Seller: admin>]>\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class BuickVehicleManager(models.Manager):\n        def get_queryset(self):\n            return super().get_queryset().filter(make=1)\n    class ChevyVehicleManager(models.Manager):\n        def get_queryset(self):\n            return super().get_queryset().filter(make=3)\n    ...\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py \n    ...\n    class Vehicle(models.Model):\n        # Place Model Fields Here\n        # The Default Model Manager\n        objects = models.Manager()\n        # The Buick Specific Manager\n        buick_objects = BuickVehicleManager()\n        # The Chevy Specific Manager\n        chevy_objects = ChevyVehicleManager()\n        # Place Meta Class and Model Methods Here\n    ```", "```py\n    (virtual_env) PS > python3 manage.py shell\n    >>> from becoming_a_django_entdev.chapter_3.models import Vehicle \n    ```", "```py\n    >>> Vehicle.objects.all().count()\n    7\n    ```", "```py\n    >>> Vehicle.buick_objects.all().count()\n    2\n    ```", "```py\n    >>> Vehicle.chevy_objects.all().count()\n    5\n    ```"]