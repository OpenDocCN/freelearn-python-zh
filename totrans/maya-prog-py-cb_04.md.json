["```py\nimport maya.cmds as cmds\n\ndef uvInfo():\n\n    sel = cmds.ls(selection=True)\n    obj = sel[0]\n\n    uvs = cmds.polyEvaluate(obj, uvComponent=True)\n    uvPos = cmds.polyEditUV(obj + '.map[0]', query=True)\n        isFirstEdgeSplit = isSplitEdge(obj, 0)\n\n    print('Num UVs: ' + str(uvs))\n    print(\"Position of first UV: \", uvPos)\n     print(\"First edge is split: \", isFirstEdgeSplit))\n\n    cmds.select(obj, replace=True)\n\ndef isSplitEdge(obj, index):\n\n    result = cmds.polyListComponentConversion(obj + '.e[' + str(index) + ']', fromEdge=True, toUV=True)\n    cmds.select(result, replace=True)\n    vertNum = cmds.polyEvaluate(vertexComponent=True)\n\n    result = cmds.polyListComponentConversion(obj + '.e[' + str(index) + ']', fromEdge=True, toVertex=True)\n    cmds.select(result, replace=True)\n    uvNum = cmds.polyEvaluate(uvComponent=True)\n\n    if (uvNum == vertNum):\n        return False\n\n    return True\n\nuvInfo()\n```", "```py\nuvs = cmds.polyEvaluate(obj, uvComponent=True)\n```", "```py\nmyObject.map[0]\n```", "```py\nuvPos = cmds.polyEditUV(obj + '.map[0]', query=True)\n```", "```py\nisFirstEdgeSplit = isSplitEdge(obj, 0)\n```", "```py\ncmds.polyListComponentConversion('myObject.e[0]', fromEdge=True, toVertex=True)\n```", "```py\nresult = cmds.polyListComponentConversion(obj + '.e[' + str(index) + ']', fromEdge=True, toVertex=True)\n```", "```py\ncmds.select(result, replace=True)\n```", "```py\nvertNum = cmds.polyEvaluate(vertexComponent=True)\n```", "```py\nresult = cmds.polyListComponentConversion(obj + '.e[' + str(index) + ']', fromEdge=True, toUV=True)\ncmds.select(result, replace=True)\nuvNum = cmds.polyEvaluate(uvComponent=True)\n```", "```py\nif (uvNum == vertNum):\n        return False\n\n    return True\n```", "```py\n    print('Num UVs: ' + str(uvs))\n    print(\"Position of first UV: \", uvPos)\n    print(\"First edge is split: \", isFirstEdgeSplit)\n```", "```py\ncmds.select(obj, replace=True)\n```", "```py\nimport maya.cmds as cmds\n\ndef layoutUVs():\n\n    selected = cmds.ls(selection=True)\n    obj = selected[0]\n\n    totalFaces = cmds.polyEvaluate(obj, face=True)\n\n    oneThird = totalFaces/3\n\n    startFace = 0\n    endFace = oneThird - 1\n    cmds.polyProjection(obj + '.f[' + str(startFace) + ':' + str(endFace) + ']', type=\"planar\")\n\n    startFace = oneThird\n    endFace = (oneThird * 2) - 1\n    cmds.polyProjection(obj + '.f[' + str(startFace) + ':' + str(endFace) + ']', type=\"cylindrical\")\n\n    startFace = (oneThird * 2)\n    endFace = totalFaces - 1\n    cmds.polyProjection(obj + '.f[' + str(startFace) + ':' + str(endFace) + ']', type=\"spherical\")\n\nlayoutUVs()\n```", "```py\nselected = cmds.ls(selection=True)\nobj = selected[0]\ntotalFaces = cmds.polyEvaluate(obj, face=True)\n```", "```py\noneThird = totalFaces/3\n```", "```py\noneThirdAsDecimal = totalFaces/3.0\n```", "```py\nstartFace = 0\nendFace = oneThird - 1\n```", "```py\nmySphere.f[0:5]\n```", "```py\nobj + '.f[' + str(startFace) + ':' + str(endFace) + ']'\n```", "```py\ncmds.polyProjection(obj + '.f[' + str(startFace) + ':' + str(endFace) + ']', type=\"planar\")\n```", "```py\nmyObject.f[:]\n```", "```py\ncmds.select('myObject.f[0:4]', 'myObject.f[32:76]', replace=True)\n```", "```py\ncmds.polyProjection('myObject.f[0:4]', 'myObject.f[32:76]', type=\"planar\")\n```", "```py\nobj + '.f[' + str(startFace) + ':' + str(endFace) + ']'\n```", "```py\npersonAge = 21\npersonName = \"Alice\"\n\"Congratulations on turning {0}, {1}!\".format(personAge, personName)\n# results in \"Congratulations on turning 21, Alice!\"\n```", "```py\ncmds.select(myObject + '.f[' + str(startFace) + ':' + str(endFace) + ']', replace=True)\n```", "```py\ncmds.select(\"{0}.f[{1}:{2}]\".format(myObj, startFace, endFace), replace=True)\n```", "```py\nimport maya.cmds as cmds\n\ndef createNodes():\n\n    shaderNode = cmds.shadingNode('blinn', asShader=True)\n    rampTexture = cmds.shadingNode('ramp', asTexture=True)\n    samplerNode = cmds.shadingNode('samplerInfo', asUtility=True)\n\n    cmds.setAttr(rampTexture + '.interpolation', 0)\n    cmds.setAttr(rampTexture + '.colorEntryList[0].position', 0)\n    cmds.setAttr(rampTexture + '.colorEntryList[1].position', 0.45)\ncmds.setAttr(rampTexture + '.colorEntryList[0].color', 0, 0, 0, type=\"float3\")\n    cmds.setAttr(rampTexture + '.colorEntryList[1].color', 1, 0, 0, type=\"float3\")\n\n    cmds.connectAttr(samplerNode + '.facingRatio', rampTexture + '.vCoord')\n    cmds.connectAttr(rampTexture + '.outColor', shaderNode + '.color')\n\ncreateNodes()\n```", "```py\nshaderNode = cmds.shadingNode('blinn', asShader=True)\nrampTexture = cmds.shadingNode('ramp', asTexture=True)\nsamplerNode = cmds.shadingNode('samplerInfo', asUtility=True)\n```", "```py\ncmds.setAttr(rampTexture + '.interpolation', 0)\n```", "```py\ncmds.setAttr(rampTexture + '.colorEntryList[0].position', 0)\ncmds.setAttr(rampTexture + '.colorEntryList[1].position', 0.45)\n```", "```py\ncmds.setAttr(rampTexture + '.colorEntryList[0].color', 0, 0, 0, type=\"float3\")\ncmds.setAttr(rampTexture + '.colorEntryList[1].color', 1, 0, 0, type=\"float3\")\n```", "```py\ncmds.connectAttr(samplerNode + '.facingRatio', rampTexture + '.vCoord')\ncmds.connectAttr(rampTexture + '.outColor', shaderNode + '.color')\n```", "```py\nfileTex = cmds.shadingNode('file', asTexture=True)\nplaceTex = cmds.shadingNode('place2dTexture', asUtility=True)\ncmds.defaultNavigation(connectToExisting=True, source=placeTex, destination=fileTex)\n```", "```py\ncmds.disconnectAttr(placeTex + '.offset', fileTex + '.offset')\n```", "```py\nimport maya.cmds as cmds\n\ndef shadersFromObject(obj):\n    cmds.select(obj, replace=True)\n    cmds.hyperShade(obj, shaderNetworksSelectMaterialNodes=True)\n    shaders = cmds.ls(selection=True)\n    return shaders\n\ndef isGeometry(obj):\n    shapes = cmds.listRelatives(obj, shapes=True)\n\n    shapeType = cmds.nodeType(shapes[0])\n    geometryTypes = ['mesh', 'nurbsSurface', 'subdiv']\n\n    if shapeType in geometryTypes:\n        return True\n\n    return False\n\ndef findUnattachedObjects():\n\n    objects = cmds.ls(type=\"transform\")\n\n    unShaded = []\n\n    for i in range(0, len(objects)):\n        if (isGeometry(objects[i])):\n            shaders = shadersFromObject(objects[i])\n            if (len(shaders) < 1):\n                unShaded.append(objects[i])\n\n    newShader = cmds.shadingNode('blinn', asShader=True)\n    cmds.setAttr(newShader + '.color', 0, 1, 1, type=\"double3\")\n\n    cmds.select(unShaded, replace=True)\n    cmds.hyperShade(assign=newShader)\n\nfindUnattachedObjects()\n```", "```py\ndef shadersFromObject(obj):\n    cmds.select(obj, replace=True)\n    cmds.hyperShade(shaderNetworksSelectMaterialNodes=True)\n    shaders = cmds.ls(selection=True)\n    return shaders\n```", "```py\ndef isGeometry(obj):\n    shapes = cmds.listRelatives(obj, shapes=True)\n```", "```py\n    shapeType = cmds.nodeType(shapes[0])\n```", "```py\ngeometryTypes = ['mesh', 'nurbsSurface', 'subdiv']\n\nif shapeType in geometryTypes:\n    return True\n```", "```py\nobjects = cmds.ls(type=\"transform\")\n```", "```py\nunShaded = []\n\nfor i in range(0, len(objects)):\n    if (isGeometry(objects[i])):\n        shaders = shadersFromObject(objects[i])\n        if (len(shaders) < 1):\n            unShaded.append(objects[i])\n```", "```py\nnewShader = cmds.shadingNode('blinn', asShader=True)\ncmds.setAttr(newShader + '.color', 0, 1, 1, type=\"double3\")\n```", "```py\ncmds.select(unShaded, replace=True)\ncmds.hyperShade(assign=newShader)\n```", "```py\ndef objectsFromShader(shader):\n    cmds.hyperShade(objects=shader)\n    objects = cmds.ls(selection=True)\n    return objects\n```", "```py\nimport maya.cmds as cmds\n\ndef keepCentered():\n\n    objects = cmds.ls(selection=True)\n\n    if (len(objects) < 3):\n        cmds.error('Please select at least three objects')\n\n    avgNode = cmds.shadingNode('plusMinusAverage', asUtility=True)\n    cmds.setAttr(avgNode + '.operation', 3)\n\n    for i in range(0, len(objects) - 1):\n        cmds.connectAttr(objects[i] + '.translateX', avgNode + '.input3D[{0}].input3Dx'.format(i))\n        cmds.connectAttr(objects[i] + '.translateZ', avgNode + '.input3D[{0}].input3Dz'.format(i))\n\n    controlledObjIndex = len(objects) - 1\n\n    cmds.connectAttr(avgNode + '.output3D.output3Dx', objects[controlledObjIndex] + '.translateX')\n    cmds.connectAttr(avgNode + '.output3D.output3Dz', objects[controlledObjIndex] + '.translateZ')\n\nkeepCentered()\n```", "```py\nobjects = cmds.ls(selection=True)\n\n    if (len(objects) < 3):\n        cmds.error('Please select at least three objects')\n```", "```py\n    avgNode = cmds.shadingNode('plusMinusAverage', asUtility=True)\n    cmds.setAttr(avgNode + '.operation', 3)\n```", "```py\navgNode.input1D[1]\n```", "```py\navgNode.input2D[0].input2Dy\n```", "```py\navgNode.input3D[0].input3Dx\n```", "```py\nfor i in range(0, len(objects) - 1):\n    cmds.connectAttr(objects[i] + '.translateX', avgNode + '.input3D[{0}].input3Dx'.format(i))\n    cmds.connectAttr(objects[i] + '.translateZ', avgNode + '.input3D[{0}].input3Dz'.format(i))\n```", "```py\ncontrolledObjIndex = len(objects) - 1\n\ncmds.connectAttr(avgNode + '.output3D.output3Dx', objects[controlledObjIndex] + '.translateX')\ncmds.connectAttr(avgNode + '.output3D.output3Dz', objects[controlledObjIndex] + '.translateZ')\n```"]