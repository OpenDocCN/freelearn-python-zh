- en: Chapter 10. Integration with Other Tools and Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium WebDriver Python API is very powerful and flexible. So far we have
    learned how Selenium WebDriver integrates with the `unittest` library and creates
    a simple testing framework. However, this does not limit us to just using the
    `unittest` library. We can integrate Selenium WebDriver with lots of other tools
    and frameworks. There are a number of ready-to-use frameworks available along
    with Selenium WebDriver.
  prefs: []
  type: TYPE_NORMAL
- en: We can use Selenium WebDriver for applying **Behavior-Driven Development** (**BDD**)
    in your projects with various frameworks that support BDD.
  prefs: []
  type: TYPE_NORMAL
- en: We can also integrate Selenium Python API with **Continuous Integration** (**CI**)
    and build tools that allow us to run the test immediately after the application
    is built. This provides an early feedback to developers about quality and stability
    of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn some of the major integration examples including:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Behave for BDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing features with Behave
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating features with Behave and Selenium WebDriver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and installing Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Jenkins to run Selenium tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Jenkins to capture results from test runs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Behavior-Driven Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BDD is an agile software development method introduced by Dan North in his famous
    paper *Introducing* *BDD* ([http://dannorth.net/introducing-bdd/](http://dannorth.net/introducing-bdd/)).
  prefs: []
  type: TYPE_NORMAL
- en: BDD is also known as **Acceptance Test Driven Development** (**ATDD**), story
    testing, or specification by example. BDD encourages collaboration between developers,
    QAs, and nontechnical or business users in a software project to define specifications
    and decide acceptance criteria by writing test cases in a natural language that
    nonprogrammers can read.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of tools available in Python to implement BDD; the two major
    tools are **Behave** ([https://pythonhosted.org/behave/](https://pythonhosted.org/behave/))
    and **Lettuce** ([http://lettuce.it/](http://lettuce.it/)), which is inspired
    by the very famous BDD tool called **Cucumber** ([http://cukes.info/](http://cukes.info/))
    available in Ruby.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to use Behave to implement BDD for the sample application
    in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Behave
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing Behave is a simple process. We can download and install Behave with
    the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will download and install Behave along with its dependencies. There are
    additional installation options available for Behave at [https://pythonhosted.org/behave/install.html](https://pythonhosted.org/behave/install.html).
  prefs: []
  type: TYPE_NORMAL
- en: Writing the first feature in Behave
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process starts with discussing and listing the features and user stories
    for these features for the application that is being developed. Various stakeholders
    meet together and create a list of features, user stories, and acceptance criteria
    in a ubiquitous language, which is understood by all the parties, including developers,
    testers, business analysts, and customers. Behave supports creating feature files
    in the Gherkin language in the **Given**, **When**, **Then** (**GWT**) format.
    Refer to [https://github.com/cucumber/cucumber/wiki/Gherkin](https://github.com/cucumber/cucumber/wiki/Gherkin)
    for more information on the Gherkin language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with a feature for the search functionality in the sample application.
    The search feature should enable users to search for products from the home page.
    The feature file provides a simple description for the user story and acceptance
    criteria as a scenario outline in the GWT format. These are also known as scenario
    steps, explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Given**: This sets a precondition to execute the scenario; navigate to the
    home page in this scenario'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When**: This contains the actions for the scenario; search for a term in
    this example'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Then**: This contains the outcome of the scenario; check whether the list
    of matching products is displayed in this example'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can have multiple `When` and `Then` steps in a scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To use this feature with Behave, we need to store this in a plain text file
    with a `.feature` extension. Let's create a folder named `bdd`/`feature` and save
    this file as `search.feature` in the folder.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a step definition file for the feature
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once we write the feature files, we need to create step definitions for the
    steps written in scenario outline. Step definitions are Python code blocks that
    understand the steps written in plain text format and contain the code to either
    call the API or Selenium WebDriver commands to execute the steps. The step definition
    files should be stored in a `steps` subfolder where feature files are stored.
    Let''s create a `search_steps.py` file with the following step definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For each GWT, we need to create a matching step definition. For example, for
    the given `I am on home page` step, we created the following step definition.
    Steps are identified using decorators that match the predicate from the feature
    file: `@given`, `@when`, and `@then`. The decorator accepts a string containing
    the rest of the phrase used in the scenario step it belongs to, in this case,
    `I am on home page`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can also pass parameters that are embedded in steps to the step definition.
    For example, for `@when` we are passing the search phrase as `when I search for
    "phone"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can read the value using `{text}` as shown in the following code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can see the context variable passed to the step definitions. The context
    variable is used by Behave to store information to share around. It runs at three
    levels, automatically managed by Behave. We can also use the context variable
    to store and share information between the steps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating environment configurations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before we can run the feature, we need to create an environment file that is
    used to set up common Behave settings and any code that will be shared between
    steps or step definition files. This is a great place to initialize the WebDriver
    to start Firefox, which will be used to run the steps using the Selenium WebDriver.
    Create an `environment.py` file by the side of the feature files and add the `before_all()`
    and `after_all()` methods, which will be executed before and after the features
    are executed, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Running features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, it''s time to run the features with Behave. This is really simple. Navigate
    to the `bdd` folder that we created in the earlier steps and execute the `behave`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Behave will execute all the features that are written in the `bdd` folder.
    It will use the step definition and environment settings that we made to run the
    scenarios. At the end of execution, you will see a summary of the execution, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running features](img/3506OS_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Behave generates a summary at three levels, namely features, scenarios, and
    steps for pass and failure.
  prefs: []
  type: TYPE_NORMAL
- en: Using a scenario outline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes we might want to run scenario(s) with a number of variables giving
    a set of known states, actions to take, and expected outcomes, all using the same
    steps, something similar to data-driven tests. We can use a scenario outline for
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Let's rewrite the `search.feature` file with a scenario outline and examples
    as given in the following steps. The scenario outline works like a template, for
    example, given in the `Example` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we create two examples to check the search functionality on
    the categories or for a specific product. The `Example` sections contain the search
    term and the expected results in a tabular format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, modify the `search_steps.py` file to match the text used in steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we execute this feature, Behave will automatically repeat the scenario
    outline for the number of rows it finds in the `Example` section that are written
    in the `search.feature` file. It passes the data from the example data to the
    scenario steps and executes the definition. You can see the outcome after Behave
    is run on the modified feature. Behave prints all the combinations it ran on the
    feature as shown in following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a scenario outline](img/3506OS_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Behave also supports report generation in JUnit format using the `–junit` switch.
  prefs: []
  type: TYPE_NORMAL
- en: CI with Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins is a popular CI server written in Java. It is derived from the Hudson
    project. Both Jenkins and Hudson provide similar features.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins supports various version control tools such as CVS, SVN, Git, Mercurial,
    Perforce, and ClearCase, and can execute projects built with Apache Ant or Maven
    for Java. However, it can also build projects for other platforms using plugins,
    arbitrary shell scripts, and Windows' `batch` commands.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from building the software, Jenkins can be deployed to set up an automated
    testing environment where Selenium WebDriver tests can be run unattended based
    on a defined schedule, or every time changes are submitted to the version control
    system.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming sections, you will learn how to set up Jenkins to run tests
    using a free-style project template.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start using Jenkins to run our tests, we need to make few changes
    so that we can take advantage of Jenkins's capabilities. We will use Jenkins to
    run our tests on a pre-defined schedule and collect results from tests so that
    Jenkins can show them on a dashboard. We will reuse smoke tests that we created
    in [Chapter 2](ch02.html "Chapter 2. Writing Tests Using unittest"), *Writing
    Tests Using unittest*.
  prefs: []
  type: TYPE_NORMAL
- en: We used the `TestSuite` runner of `unittest` to execute the bunch of tests together.
    We will now output the results of these tests in the JUnit report format. For
    this, we need a Python library called `xmlrunner` from [https://pypi.python.org/pypi/xmlrunner/1.7.4](https://pypi.python.org/pypi/xmlrunner/1.7.4).
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and install `xmlrunner` with the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use `smoketests.py`, which uses the `TestSuite` runner to run the tests
    from `homepagetests.py` and `searchtest.py`. We will use the `xmlrunner.XML TestRunner`
    to run these tests and generate a test report in JUnit format. This report will
    be generated in XML format and kept in the `test-reports` subfolder. To use `xmlrunner`,
    please make the highlighted changes in `smoketest.py`, as shown in the following
    code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Setting up Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Setting up Jenkins is fairly straightforward. You can download and install
    Jenkins using the installers available for various platforms. In following example,
    we will set up Jenkins and create a new build job to run the smoke tests on the
    sample application:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the Jenkins CI server from [http://jenkins-ci.org/](http://jenkins-ci.org/).
    For this recipe, the Jenkins Windows installer is used to set up Jenkins on a
    Windows 7 machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Jenkins Dashboard** (`http://localhost:8080` by default) in the
    browser window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On **Jenkins Dashboard**, click on **New Item** or **create new jobs** link
    to create a new Jenkins job as shown in the following screenshot:![Setting up
    Jenkins](img/3506OS_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Demo_App_Smoke_Test` in the **Item name** textbox and select the **Build
    a free-style software project** radio button as shown in the following screenshot:![Setting
    up Jenkins](img/3506OS_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **OK** button. A new job will be created with the specified name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We can connect to various version control or **Source Control Management** (**SCM**)
    tools such as SVN, GIT, Perforce, and so on to store the source and test code.
    We can then get the latest version of the code to build and test the software
    in the Jenkins workspace as part of building the steps. However, to keep things
    simple, in this example, we will copy the test scripts from a folder to the Jenkins
    workspace using the **Execute Windows batch command** build step as described
    in following set of steps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Build** section, click on **Add build step** and select the **Execute
    Windows batch command** option from the dropdown.![Setting up Jenkins](img/3506OS_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command in the **Command** textbox as shown in the following
    screenshot. Paths will be different in your case. This command will copy the Python
    files containing smoke tests to the Jenkins workspace and run `smoketest.py` as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Setting up Jenkins](img/3506OS_10_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We configured `smoketest.py` to generate test results in JUnit format so that
    Jenkins can display the test results on its dashboard. To integrate these reports
    with Jenkins, click on **Add post-build action** and select the **Publish JUnit
    test result report** option from the dropdown as shown in the following screenshot:![Setting
    up Jenkins](img/3506OS_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Post-build Actions** section, add `test-reports/*.xml` in the **Test
    report XMLs** textbox as shown in the following screenshot. Every time Jenkins
    runs the tests, it will read test results from the `test-report` subfolder.![Setting
    up Jenkins](img/3506OS_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To schedule tests for automatic execution in the **Build Triggers** section,
    select **Build periodically** and enter the data as shown in the following screenshot
    in the **Schedule** textbox. This will trigger the build process every day at
    10 p.m. and Jenkins will run the tests as part of the build process unattended
    so you can see the results next morning when you arrive at the office.![Setting
    up Jenkins](img/3506OS_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button to save the job configuration. Jenkins will display
    the project page for the newly created job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can check if everything is set to see if tests are executed. Click on the
    **Build Now** link to run the job manually as shown in the following screenshot:![Setting
    up Jenkins](img/3506OS_10_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can see the running status for the build in the **Build History** section
    as shown in the following screenshot:![Setting up Jenkins](img/3506OS_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the running item in the **Build History** section, which will open
    the following page:![Setting up Jenkins](img/3506OS_10_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apart from the status on Jenkins and the progress bar, we can also see what's
    happening behind the scenes by opening the **Console Output** link. This will
    open the **Console Output** page with the command-line output as shown in the
    following screenshot:![Setting up Jenkins](img/3506OS_10_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the build process is completed by Jenkins, we can see a build page similar
    to the one shown in the next screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkins displays test results and various other metrics by reading the result
    files generated by the `unittest` frameworks. Jenkins also archives test results.
    To view the test results, click on the **Test Results** link on the build page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We configured our tests to generate the test results in the JUnit format and
    when we click on **Test** **Results**, Jenkins will display the JUnit test results
    as shown in the following screenshot. It highlights the tests that are failed
    and a summary for the tests.![Setting up Jenkins](img/3506OS_10_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can drill down by clicking on the package names and see the results for individual
    tests as shown in the following screenshot:![Setting up Jenkins](img/3506OS_10_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Jenkins also shows a status on the Dashboard for the job with the status of
    the last build in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Jenkins](img/3506OS_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to integrate Selenium with Behave for BDD and
    Jenkins for CI. You saw how to integrate Selenium WebDriver API with Behave to
    run automated acceptance tests by writing features and step definition files.
  prefs: []
  type: TYPE_NORMAL
- en: You set up Jenkins to run Selenium WebDriver tests so that you can run these
    tests while building the software or scheduling tests so they can be run nightly.
    Jenkins provides an easy-to-set-up model to run the build and test jobs for various
    application development platforms and environments.
  prefs: []
  type: TYPE_NORMAL
- en: This completes your learning journey using Selenium WebDriver with Python. You
    learned some basic lessons on using Selenium WebDriver to automate browser interaction
    to create automated tests for web applications. You can use this knowledge and
    build your own testing framework.
  prefs: []
  type: TYPE_NORMAL
