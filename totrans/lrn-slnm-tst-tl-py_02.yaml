- en: Chapter 2. Writing Tests Using unittest
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：使用 unittest 编写测试
- en: Selenium WebDriver is a browser automation API. It provides features to automate
    browser interaction, and this API is mainly used to test web applications. We
    cannot set up test preconditions and post conditions, check the expected and actual
    output, check the state of the application, report test results, create data-driven
    tests, and so on with Selenium WebDriver. We can use a unit testing framework
    or test runners used for unit testing along with Selenium to create a testing
    framework. In this chapter, we will learn how to use the `unittest` library to
    create Selenium WebDriver tests in Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 是一个浏览器自动化 API。它提供了自动化浏览器交互的功能，这个 API 主要用于测试网络应用程序。我们不能使用
    Selenium WebDriver 设置测试的前置条件和后置条件，检查预期的和实际的输出，检查应用程序的状态，报告测试结果，创建数据驱动测试等等。我们可以使用单元测试框架或单元测试中使用的测试运行器与
    Selenium 结合，创建一个测试框架。在本章中，我们将学习如何使用 `unittest` 库在 Python 中创建 Selenium WebDriver
    测试。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What `unittest` is?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 `unittest`？
- en: Using the `unittest` library to write Selenium WebDriver tests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `unittest` 库编写 Selenium WebDriver 测试
- en: Implementing a test using the `TestCase` class
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `TestCase` 类实现测试
- en: Understanding various types of `assert` methods provided by the `unittest` library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 `unittest` 库提供的各种 `assert` 方法的类型
- en: Creating a `TestSuite` for a group of tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为一组测试创建 `TestSuite`
- en: Generating test reports in HTML format using the `unittest` extension
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `unittest` 扩展生成 HTML 格式的测试报告
- en: The unittest library
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`unittest` 库'
- en: The `unittest` library (originally named as PyUnit) is inspired by the JUnit
    library widely used in Java application development. We can use `unittest` to
    create a comprehensive suite of tests for any project. The `unittest` module is
    used within the Python project to test various standard library modules including
    `unittest` itself. You can find the `unittest` documentation at [http://docs.python.org/2/library/unittest.html](http://docs.python.org/2/library/unittest.html).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`unittest` 库（最初命名为 PyUnit）灵感来源于在 Java 应用程序开发中广泛使用的 JUnit 库。我们可以使用 `unittest`
    为任何项目创建一个全面的测试套件。`unittest` 模块在 Python 项目中使用，用于测试各种标准库模块，包括 `unittest` 本身。您可以在
    [http://docs.python.org/2/library/unittest.html](http://docs.python.org/2/library/unittest.html)
    找到 `unittest` 的文档。'
- en: 'The `unittest` library provides us with the ability to create test cases, test
    suites, and test fixtures. Let''s understand each of these components as shown
    in following diagram:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`unittest` 库为我们提供了创建测试用例、测试套件和测试设置的能力。让我们根据以下图表了解每个组件：'
- en: '![The unittest library](img/3506_02_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![unittest 库](img/3506_02_01.jpg)'
- en: '**Test Fixture**: By using a test fixture, we can define the preparation needed
    to perform one or more tests and any associated clean-up actions.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试设置**：通过使用测试设置，我们可以定义执行一个或多个测试所需的准备工作以及任何相关的清理操作。'
- en: '**Test Case**: A test case is the smallest unit of testing in `unittest`. It
    checks for a specific response to a particular set of actions and inputs using
    various `assert` methods provided by the `unittest` library. The `unittest` library
    provides a base class called `TestCase` that may be used to create new test cases.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试用例**：在 `unittest` 中，测试用例是测试的最小单元。它使用 `unittest` 库提供的各种 `assert` 方法检查对特定动作和输入的特定响应。`unittest`
    库提供了一个名为 `TestCase` 的基类，可以用来创建新的测试用例。'
- en: '**Test Suite**: A test suite is a collection of multiple tests or test cases
    to create groups of tests representing specific functionality or modules of the
    application under test, which will be executed together.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试套件**：测试套件是多个测试或测试用例的集合，用于创建代表特定功能或测试应用程序的模块的测试组，这些测试将一起执行。'
- en: '**Test Runner**: The test runner orchestrates execution of tests and provides
    results to the user. The runner may use a graphical interface, a textual interface,
    or return a special value to indicate the results of executing the tests.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试运行器**：测试运行器协调测试的执行并向用户提供结果。运行器可能使用图形界面、文本界面或返回一个特殊值来指示测试执行的结果。'
- en: '**Test Report**: A test report displays a summary of test results showing the
    pass or fail status of executed test cases, expected versus actual results for
    failed steps, and summary of overall run and timing information.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试报告**：测试报告显示测试结果的摘要，包括已执行测试用例的通过或失败状态，失败的步骤的预期与实际结果，以及整体运行和计时信息的摘要。'
- en: 'A test created with the `xUnit` framework such as `unittest` is divided into
    three parts also known as the 3 A''s, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`xUnit`框架（如`unittest`）创建的测试分为三个部分，也称为3A，如下所示：
- en: '**Arrange**: This part sets up the preconditions for tests including the object(s)
    that need to be tested, related configuration, and dependencies'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安排**：这部分为测试设置前提条件，包括需要测试的对象、相关配置和依赖项。'
- en: '**Act**: This part exercises the functionality'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行动**：这部分执行功能。'
- en: '**Assert**: This part checks the outcome with the expected results'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断言**：这部分检查结果是否符合预期。'
- en: We will use this approach to create tests with the `unittest` library in rest
    of the chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的其余部分使用这种方法，通过`unittest`库来创建测试。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'We will use the `unittest` library in rest of the book to create and run Selenium
    WebDriver tests. However, there are other testing frameworks available in Python
    with additional features, as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的其余部分使用`unittest`库来创建和运行Selenium WebDriver测试。然而，Python中还有其他具有额外功能的测试框架，如下所示：
- en: '**Nose**: The `nose` framework extends the `unittest` library and provides
    ability to search and run tests automatically. It also provides various plugins
    to create more advanced tests. You can find more about `nose` at [https://nose.readthedocs.org/en/latest/](https://nose.readthedocs.org/en/latest/).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nose**：`nose`框架扩展了`unittest`库，并提供了自动搜索和运行测试的能力。它还提供了各种插件来创建更高级的测试。你可以在[https://nose.readthedocs.org/en/latest/](https://nose.readthedocs.org/en/latest/)了解更多关于`nose`的信息。'
- en: '**Pytest**: The `pytest` framework is another testing framework that offers
    a number of advanced features to write and run unit tests in Python. You can find
    out more about `pytest` at [http://pytest.org/latest/](http://pytest.org/latest/).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pytest**：`pytest`框架是另一个提供许多高级功能以在Python中编写和运行单元测试的测试框架。你可以在[http://pytest.org/latest/](http://pytest.org/latest/)了解更多关于`pytest`的信息。'
- en: The TestCase class
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`TestCase`类'
- en: We can create a test, or group of tests, by inheriting the `TestCase` class
    and adding each test as a method to this class. To make a test, we need to either
    use `assert` or one of the many variations on `assert` that are part of the `TestCase`
    class. The most important task of each test is a call to `assertEqual()` to check
    for an expected result, `assertTrue()` to verify a condition, or `assertRaises()`
    to verify that an expected exception gets raised.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过继承`TestCase`类并将每个测试作为方法添加到这个类中来创建一个测试或一组测试。要创建一个测试，我们需要使用`assert`或`TestCase`类中包含的许多`assert`变体之一。每个测试最重要的任务是调用`assertEqual()`来检查预期的结果，`assertTrue()`来验证条件，或`assertRaises()`来验证预期的异常被抛出。
- en: 'In addition to adding tests, we can add test fixtures: that is the `setUp()`
    and `tearDown()` methods to handle creation and disposition of any objects or
    conditions that are needed for a test.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了添加测试外，我们还可以添加测试固定装置：即`setUp()`和`tearDown()`方法来处理创建和处置测试所需的任何对象或条件。
- en: Let's start using the `unittest` library, first writing a simple test by inheriting
    the `TestCase` class and then adding a test method for the sample script that
    we created in [Chapter 1](ch01.html "Chapter 1. Getting Started with Selenium
    WebDriver and Python"), *Getting Started with Selenium WebDriver and Python*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用`unittest`库，首先通过继承`TestCase`类编写一个简单的测试，然后为我们在[第1章](ch01.html "第1章. 使用Selenium
    WebDriver和Python入门")中创建的示例脚本添加一个测试方法，*使用Selenium WebDriver和Python入门*。
- en: 'We need to import the `unittest` module and define a class that inherits the
    `TestCase` class, as shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要导入`unittest`模块并定义一个继承`TestCase`类的类，如下所示：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The setUp() method
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`setUp()`方法'
- en: The starting point for test cases is the `setUp()` method, which we can use
    to perform some tasks at the start of each test or all the tests that will be
    defined in the class. These can be test preparation tasks such as creating an
    instance of a browser driver, navigating to the base URL, loading test data, opening
    logfiles, and so on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例的起点是`setUp()`方法，我们可以用它来在每个测试的开始或定义在类中的所有测试之前执行一些任务。这些可以是测试准备任务，例如创建浏览器驱动程序的实例、导航到基本URL、加载测试数据、打开日志文件等等。
- en: 'This method takes no arguments and doesn''t return anything. When a `setUp()`
    method is defined, the test runner will run that method prior to each test method.
    In our example, we will use the `setUp()` method to create an instance of Firefox,
    set up the properties, and navigate to the main page of the application before
    a test is executed as shown in the following example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法不接受任何参数，也不返回任何内容。当定义了`setUp()`方法时，测试运行器将在每个测试方法之前运行该方法。在我们的例子中，我们将使用`setUp()`方法创建Firefox的实例，设置属性，并在测试执行之前导航到应用程序的主页，如下面的示例所示：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Writing tests
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写测试
- en: With a setup method in place, we can now write some tests to verify the application's
    functionality that we want to test. In this example, we will search for a product
    and check if the result returns a number of items. Similar to the `setUp()` method,
    test methods are implemented in the `TestCase` class. It is important that we
    name these methods beginning with the word `test`. This naming convention informs
    the test runner about which methods represent a test.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置方法到位后，我们现在可以编写一些测试来验证我们想要测试的应用程序的功能。在这个例子中，我们将搜索一个产品并检查结果是否返回了项目数量。与`setUp()`方法类似，测试方法是在`TestCase`类中实现的。我们命名这些方法时以单词`test`开头是很重要的。这种命名约定通知测试运行器哪些方法代表一个测试。
- en: For each test method that the test runner finds, it executes the `setUp()` method
    before executing the `test` method. This helps ensure that each `test` method
    can depend on a consistent environment, regardless of how many tests are defined
    in the class. We will use a simple `assertEqual()` method to check that the expected
    results for the given search term match with the results returned by the application.
    We will discuss more about assertions later in the chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试运行器找到的每个测试方法，它会在执行`test`方法之前执行`setUp()`方法。这有助于确保每个`test`方法都可以依赖于一个一致的环境，无论类中定义了多少个测试。我们将使用简单的`assertEqual()`方法来检查给定搜索词的预期结果是否与应用程序返回的结果匹配。我们将在本章后面讨论断言。
- en: 'Add a new test method, `test_search_by_category()`, which searches for products
    by category and checks for the number of products returned by the search, as shown
    in following example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个新的测试方法，`test_search_by_category()`，该方法通过类别搜索产品并检查搜索返回的产品数量，如下面的示例所示：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Cleaning up the code
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清理代码
- en: 'Similar to the `setUp()` method that is called before each test method, the
    `TestCase` class also calls a `tearDown()` method to clean up any initialized
    values after the test is executed. Once a test is executed, the values defined
    in the `setUp()` method are no longer required; so, it is good practice to clean
    up the values initialized by the `setUp()` method after a test is completed. In
    our example, after a test is executed, we no longer need the instance of Firefox.
    We will close the Firefox instance that was created for the test in the `tearDown()`
    method, as shown in the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与在每次测试方法之前调用的`setUp()`方法类似，`TestCase`类也会调用一个`tearDown()`方法来清理测试执行后的任何初始化值。一旦测试执行完毕，`setUp()`方法中定义的值就不再需要；因此，在测试完成后清理`setUp()`方法初始化的值是一个好习惯。在我们的例子中，测试执行后，我们不再需要Firefox的实例。我们将在`tearDown()`方法中关闭为测试创建的Firefox实例，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Running the test
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'To run the test from command line, we can add a call to the `main` method of
    the test case. We will pass the `verbosity` argument that is used to display the
    amount of test result details on the console:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行运行测试，我们可以向测试用例的`main`方法添加一个调用。我们将传递`verbosity`参数，该参数用于在控制台上显示测试结果细节的数量：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can store the tests as a normal Python script. For this example, save the
    sample test as `searchtests.py`. After saving the file, we can execute it through
    command line by using the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将测试存储为正常的Python脚本。对于这个例子，将示例测试保存为`searchtests.py`。保存文件后，我们可以通过使用以下命令在命令行中执行它：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After running the tests, `unittest` shows the results on the console along
    with the summary of tests as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试后，`unittest`会在控制台上显示结果以及测试摘要，如下面的截图所示：
- en: '![Running the test](img/3506_02_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![运行测试](img/3506_02_02.jpg)'
- en: 'In addition to the results summary, when a test case fails, for each failure,
    summary will produce a block of text to describe what went wrong. Look at the
    following screenshot to see what happens when we change the expected value to
    something else:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了结果摘要之外，当测试用例失败时，对于每次失败，摘要将生成一段文本来描述出错的原因。查看以下截图，了解当我们更改预期值时会发生什么：
- en: '![Running the test](img/3506_02_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![运行测试](img/3506_02_03.jpg)'
- en: As you can see, it shows exactly which test method generated the failure, with
    trace-back information to track down the code flow that led to the failure. In
    addition, the failure itself is shown as `AssertionError`, with a mismatch of
    the expected output with the actual output.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它显示了哪个测试方法生成了失败，并带有跟踪信息以追踪导致失败代码流。此外，失败本身被显示为`AssertionError`，显示了预期输出与实际输出的不匹配。
- en: Adding another test
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加另一个测试
- en: 'We can group a number of tests as part of one test class. This helps in creating
    logical groups of tests that belong to a specific functionality. Let''s add another
    test to the test class. The rule is simple; name the new method starting with
    the word `test`, as shown in the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将多个测试组合成一个测试类的一部分。这有助于创建属于特定功能的逻辑测试组。让我们向测试类中添加另一个测试。规则很简单；为新方法命名时以单词`test`开头，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the test and you will see two instances of Firefox opening and closing.
    This is how the `setUp()` and `tearDown()` methods work for each test method.
    You will see the result as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试，你会看到两个Firefox实例打开和关闭。这就是`setUp()`和`tearDown()`方法对每个测试方法的工作方式。你将看到如下截图所示的结果：
- en: '![Adding another test](img/3506_02_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![添加另一个测试](img/3506_02_04.jpg)'
- en: Class-level setUp() and tearDown() methods
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类级别的`setUp()`和`tearDown()`方法
- en: 'In the previous example, we created a new instance of Firefox using the `setUp()`
    method before the execution of each test method and closed that instance after
    the execution of the test method. How about sharing a single Firefox instance
    between the methods instead of creating a new instance every time? This can be
    done by using the `setUpClass()` and `tearDownClass()` methods and using the `@classmethod`
    decorator. These methods allow us to initialize values at the class level instead
    of the method level and then share these values between the test methods. In the
    following example, the code is modified to call the `setUpClass()` and `tearDownClass()`
    methods with the `@classmethod` decorator:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们在每个测试方法执行之前使用`setUp()`方法创建一个新的Firefox实例，并在测试方法执行后关闭该实例。那么，我们是否可以考虑在每次创建新实例之前，在方法之间共享单个Firefox实例呢？这可以通过使用`setUpClass()`和`tearDownClass()`方法以及使用`@classmethod`装饰器来实现。这些方法允许我们在类级别而不是方法级别初始化值，然后在这些测试方法之间共享这些值。在下面的示例中，代码被修改为使用`@classmethod`装饰器调用`setUpClass()`和`tearDownClass()`方法：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Run the test and you will see a single Firefox instance created; both the tests
    will use this instance.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试，你会看到一个Firefox实例被创建；两个测试都将使用这个实例。
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the `@classmethod` decorator, refer to [https://docs.python.org/2/library/functions.html#classmethod](https://docs.python.org/2/library/functions.html#classmethod).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`@classmethod`装饰器的更多信息，请参阅[https://docs.python.org/2/library/functions.html#classmethod](https://docs.python.org/2/library/functions.html#classmethod)。
- en: Assertions
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言
- en: The `TestCase` class of the `unittest` library offers a number of utility methods
    to check the expected values against actual values returned by the application.
    These methods are implemented in such a way that they represent a condition that
    must be true in order to continue the execution of the test. There are broadly
    three types of such methods, each covering a specific type of condition such as
    checking equivalence, logical comparison, and exceptions. If the given assertion
    passes, the test will continue to the next line of code; otherwise, the test halts
    immediately and a failure message will be generated.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`unittest`库的`TestCase`类提供了一些实用方法，用于检查应用程序返回的实际值与预期值之间的差异。这些方法以这种方式实现，即它们代表必须为真才能继续执行测试的条件。大致有三种这样的方法，每种方法覆盖特定类型的条件，例如检查等价性、逻辑比较和异常。如果给定的断言通过，测试将继续到下一行代码；否则，测试将立即停止，并生成一个失败消息。'
- en: 'The `unittest` library provides all the standard xUnit `asserts` methods. The
    following table lists some of the important methods that we will be using in the
    rest of the book:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`unittest`库提供了所有标准的xUnit `asserts`方法。以下表格列出了我们将在本书其余部分使用的一些重要方法：'
- en: '| Method | Condition that is checked | Example uses |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 检查的条件 | 示例使用 |'
- en: '| --- | --- | --- |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `assertEqual(a, b [,msg])` | a == b | These methods check whether or not
    `a` and `b` are equal to each other. The `msg` object is a message explaining
    the failure (if any).This is useful to check values of elements, attributes, and
    so on. For example:`assertEqual(element.text,"10")` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `assertEqual(a, b [,msg])` | a == b | 这些方法检查 `a` 和 `b` 是否相等。`msg` 对象是一个解释失败（如果有的话）的消息。这有助于检查元素、属性等值。例如：`assertEqual(element.text,"10")`
    |'
- en: '| `assertNotEqual(a, b[,msg])` | a != b |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `assertNotEqual(a, b[,msg])` | a != b |'
- en: '| `assertTrue(x[,msg]))` | bool(x) is True | These methods check whether the
    given expression evaluates to `True` or `False`.For example, to check whether
    the element is displayed on a page, we can use the following method:`assertTrue(element.is_dispalyed())`
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `assertTrue(x[,msg]))` | bool(x) 是 True | 这些方法检查给定的表达式是否评估为 `True` 或 `False`。例如，为了检查元素是否在页面上显示，我们可以使用以下方法：`assertTrue(element.is_dispalyed())`
    |'
- en: '| `assertFalse(x[,msg]))` | bool(x) is False |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `assertFalse(x[,msg]))` | bool(x) 是 False |'
- en: '| `assertIsNot(a, b[,msg]))` | a is not b |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `assertIsNot(a, b[,msg]))` | a 不是 b |'
- en: '| `assertRaises(exc, fun, *args, **kwds)` | fun(*args, **kwds) raises exc |
    These methods check whether the specific exceptions are raised by the test steps.
    A possible use of this method is to check `NoSuchElementFoundexception`. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `assertRaises(exc, fun, *args, **kwds)` | fun(*args, **kwds) 抛出 exc | 这些方法检查测试步骤是否引发了特定的异常。此方法的可能用途是检查
    `NoSuchElementFoundexception`。|'
- en: '| `assertRaisesRegexp(exc, r, fun, *args, **kwds)` | fun(*args, **kwds) raises
    exc and the message matches regex r |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `assertRaisesRegexp(exc, r, fun, *args, **kwds)` | fun(*args, **kwds) 抛出
    exc 并且消息与正则表达式 r 匹配 |'
- en: '| `assertAlmostEqual(a, b)` | round(a-b, 7) == 0 | These methods specifically
    check for numeric values, and round the value to the given number of decimal places
    before checking for equality. This helps account for rounding errors and other
    problems due to floating-point arithmetic. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `assertAlmostEqual(a, b)` | round(a-b, 7) 等于 0 | 这些方法专门检查数值，并在检查相等性之前将值四舍五入到指定的十进制位数。这有助于解决舍入误差和其他由于浮点运算引起的问题。|'
- en: '| `assertNotAlmostEqual(a, b)` | round(a-b, 7) != 0 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `assertNotAlmostEqual(a, b)` | round(a-b, 7) 不等于 0 |'
- en: '| `assertGreater(a, b)` | a > b | These methods are similar to the `assertEqual()`
    method, designed with logical conditions. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `assertGreater(a, b)` | a > b | 这些方法与 `assertEqual()` 方法类似，都是基于逻辑条件设计的。|'
- en: '| `assertGreaterEqual(a, b)` | a >= b |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `assertGreaterEqual(a, b)` | a >= b |'
- en: '| `assertLess(a, b)` | a < b |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `assertLess(a, b)` | a < b |'
- en: '| `assertLessEqual(a, b)` | a <= b |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `assertLessEqual(a, b)` | a <= b |'
- en: '| `assertRegexpMatches(s, r)` | r.search(s) | These methods check whether a
    `regexp` search matches the text. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `assertRegexpMatches(s, r)` | r.search(s) | 这些方法检查 `regexp` 搜索是否与文本匹配。|'
- en: '| `assertNotRegexpMatches(s, r)` | not r.search(s) |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `assertNotRegexpMatches(s, r)` | not r.search(s) |'
- en: '| `assertMultiLineEqual(a, b)` | strings | This method is a specialized form
    of `assertEqual()`, designed for multiline strings. Equality works like any other
    string, but the default failure message is optimized to show the differences between
    the values. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `assertMultiLineEqual(a, b)` | 字符串 | 此方法是 `assertEqual()` 的一个特殊形式，专为多行字符串设计。相等性工作方式与其他字符串相同，但默认的失败消息已优化以显示值之间的差异。|'
- en: '| `assertListEqual(a, b)` | lists | This method checks whether the lists `a`
    and `b` match. This is useful to match options from drop-down fields. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `assertListEqual(a, b)` | 列表 | 此方法检查列表 `a` 和 `b` 是否匹配。这对于匹配下拉字段中的选项很有用。|'
- en: '| `fail()` |   | This method fails the test unconditionally. This can also
    be used to create custom conditional blocks where other `assert` methods do not
    work easily. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `fail()` |  | 此方法无条件地使测试失败。这也可以用来创建其他 `assert` 方法难以轻松工作的自定义条件块。|'
- en: Test suites
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试套件
- en: Using the `TestSuites` feature of `unittest`, we can collect various tests into
    logical groups and then into a unified test suite that can be run with a single
    command. This is done by using the `TestSuite`, `TestLoader`, and `TestRunner`
    classes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `unittest` 的 `TestSuites` 功能，我们可以将各种测试收集到逻辑组中，然后将其合并到一个统一的测试套件中，该套件可以通过单个命令运行。这是通过使用
    `TestSuite`、`TestLoader` 和 `TestRunner` 类来实现的。
- en: 'Before we get into details of `TestSuite`, let''s add a new test to check the
    home page of the sample application. We will aggregate this test along with the
    previous search tests into a single test suite, as shown in the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入 `TestSuite` 的细节之前，让我们添加一个新的测试来检查示例应用的首页。我们将把这个测试与之前的搜索测试一起汇总到一个单独的测试套件中，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will use the `TestSuite` class for defining and running the test suite.
    We can add multiple test cases to the test suite. In addition to the `TestSuite`
    class we need to use `TestLoader` and `TextTestRunner` to create and run a test
    suite as shown in the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`TestSuite`类来定义和运行测试套件。我们可以向测试套件添加多个测试用例。除了`TestSuite`类，我们还需要使用`TestLoader`和`TextTestRunner`来创建和运行测试套件，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using the `TestLoader` class, we will get all the test methods from the specified
    test files that will be used to create the test suite. The `TestRunner` class
    will take the test suite and run all the tests from these files.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`TestLoader`类，我们将从指定的测试文件中获取所有测试方法，这些方法将用于创建测试套件。`TestRunner`类将接受测试套件并运行这些文件中的所有测试。
- en: 'We can run the new test suite file using the following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令运行新的测试套件文件：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will run all the tests from the `SearchProductTest` and `HomePageTest`
    class and generate the following output in the console:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行`SearchProductTest`和`HomePageTest`类中的所有测试，并在控制台生成以下输出：
- en: '![Test suites](img/3506_02_05.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![测试套件](img/3506_02_05.jpg)'
- en: Generating the HTML test report
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成HTML测试报告
- en: The `unittest` library generates the test output on a console window. You might
    want to generate a report of all the tests executed as evidence or to distribute
    test results to various stakeholders. Sending console logs to the stakeholder
    may not be a good idea. Stakeholders will need nicely formatted, summary reports
    with a drill-down access to the details. The `unittest` library does not have
    an in-built way to generate nicely formatted reports. We can use the `HTMLTestRunner`
    extension of `unittest` written by Wai Yip Tung. You can find more about `HTMLTestRunner`
    at [https://pypi.python.org/pypi/HTMLTestRunner](https://pypi.python.org/pypi/HTMLTestRunner)
    along with the download instructions.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`unittest`库在控制台窗口生成测试输出。你可能想生成所有测试执行的报告作为证据，或者将测试结果分发给不同的利益相关者。将控制台日志发送给利益相关者可能不是一个好主意。利益相关者需要格式良好、可以深入细节的总结报告。`unittest`库没有内置的生成格式良好报告的方式。我们可以使用由Wai
    Yip Tung编写的`unittest`的`HTMLTestRunner`扩展。你可以在[https://pypi.python.org/pypi/HTMLTestRunner](https://pypi.python.org/pypi/HTMLTestRunner)上找到更多关于`HTMLTestRunner`的信息，以及下载说明。'
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `HTMLTestRunner` extension is bundled with the book's source code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTMLTestRunner`扩展包含在本书的源代码中。'
- en: 'We will use `HTMLTestRunner` in our test to generate a nice-looking report.
    Let''s modify the test suite file that we created earlier in the chapter and add
    `HTMLTestRunner` support. We need to create an output file that will contain the
    actual report, configure the `HTMLTestRunner` options, and run the tests in the
    following way:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在测试中使用`HTMLTestRunner`生成一个看起来很棒的报告。让我们修改本章中创建的测试套件文件，并添加`HTMLTestRunner`支持。我们需要创建一个包含实际报告的输出文件，配置`HTMLTestRunner`选项，并按以下方式运行测试：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the test suite; `HTMLTestRunner` executes all the tests similar to the
    `unittest` library''s default test runner. At the end of the execution, it will
    generate a report file as shown in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试套件；`HTMLTestRunner`执行所有测试，类似于`unittest`库的默认测试运行器。执行结束时，它将生成如下截图所示的报告文件：
- en: '![Generating the HTML test report](img/3506_02_06.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![生成HTML测试报告](img/3506_02_06.jpg)'
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to use the `unittest` testing library for writing
    and running tests with Selenium WebDriver. We created a test using the `TestClass`
    class with the `setUp()` and `tearDown()` methods. We added an assertion to check
    the expected output with the actual output.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用`unittest`测试库和Selenium WebDriver编写和运行测试。我们使用具有`setUp()`和`tearDown()`方法的`TestClass`类创建了一个测试，并添加了一个断言来检查预期的输出与实际输出。
- en: We also learned how to use different types of assertions that are supported
    by the `unittest` library. We implemented the test suite that provides the ability
    to aggregate tests in logical groups. Finally, we used `HTMLTestRunner` to generate
    test reports in HTML format that show nicely formatted test results.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何使用`unittest`库支持的不同类型的断言。我们实现了提供在逻辑组中聚合测试能力的测试套件。最后，我们使用`HTMLTestRunner`生成HTML格式的测试报告，这些报告展示了格式良好的测试结果。
- en: In the next chapter, we will learn how to use and define locators to interact
    with various HTML elements displayed on a page.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用和定义定位器来与页面上显示的各种HTML元素进行交互。
