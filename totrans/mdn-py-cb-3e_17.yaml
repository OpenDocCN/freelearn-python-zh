- en: '17'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '17'
- en: Documentation and Style
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 文档和风格
- en: We’ve combined two topics into a single chapter. They’re often looked at as
    ”extras” in a project’s life-cycle. The deliverable code is often considered to
    be the most important thing.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将两个主题合并到一个章节中。它们通常被视为项目生命周期中的“额外”内容。交付的代码通常被认为是最重要的事情。
- en: Some developers will try to argue that test cases and documentation aren’t the
    code with which the user interacts, and therefore, these additional pieces aren’t
    as important as the code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者可能会试图争辩说测试用例和文档并不是用户与之交互的代码，因此，这些额外的部分并不像代码那样重要。
- en: This is false.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是错误的。
- en: While it is true the users don’t interact directly with test cases, the presence
    of test cases is what gives people the confidence to use the code. Without the
    test cases, there’s no evidence the code does anything useful at all.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然用户确实不会直接与测试用例交互，但测试用例的存在是让人们有信心使用代码的原因。没有测试用例，就没有证据表明代码有任何有用的功能。
- en: Documentation provides essential information that can – eventually – be extracted
    from the code. A project with a prominent docs folder is considerably more trustworthy
    than a project that lacks documentation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 文档提供了可以从代码中提取的基本信息。一个拥有突出文档文件夹的项目比缺乏文档的项目更值得信赖。
- en: Code ”style” is a relatively minor point. However, it’s also part of the static
    assessment of code, including type hint analysis, quality metrics, and more specific
    ”lint” checks. There are many software implementation practices that can be confusing,
    or rely on poorly documented language or library features. These are the ”fuzzy
    edges” of the software. A lint tool acts like a lint trap in an electric clothes
    dryer, catching highly flammable lint so it doesn’t clog the vents, preventing
    a fire. Removing software fuzz can prevent bugs. In some cases, it may only reduce
    the possibility of problems.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 代码“风格”是一个相对较小的问题。然而，它也是代码静态评估的一部分，包括类型提示分析、质量指标以及更具体的“lint”检查。有许多软件实现实践可能会令人困惑，或者依赖于文档不良的语言或库功能。这些都是软件的“模糊边缘”。lint
    工具就像电烘干机中的 lint 捕集器，捕捉易燃的 lint，防止其堵塞通风口，从而预防火灾。移除软件模糊可以防止错误。在某些情况下，它可能只是减少了问题的可能性。
- en: We’ll consider linting and formatting to be quality assurance steps as important
    as test cases and static type checking.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把代码的 linting 和格式化视为与测试用例和静态类型检查一样重要的质量保证步骤。
- en: 'In this chapter, we’ll look at the following recipes for creating useful documentation:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下创建有用文档的食谱：
- en: '[The bare minimum: a README.rst file](ch021.xhtml#x1-9150001)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[最基本的要求：一个 README.rst 文件](ch021.xhtml#x1-9150001)'
- en: '[Installing Sphinx and creating documentation](ch021.xhtml#x1-9210002)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[安装 Sphinx 和创建文档](ch021.xhtml#x1-9210002)'
- en: '[Using Sphinx autodoc to create the API reference](ch021.xhtml#x1-9270003)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Sphinx autodoc 创建 API 参考](ch021.xhtml#x1-9270003)'
- en: '[Identifying other CI/CD tools in pyproject.toml](ch021.xhtml#x1-9330004)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 pyproject.toml 中识别其他 CI/CD 工具](ch021.xhtml#x1-9330004)'
- en: '[Using tox to run comprehensive quality checks](ch021.xhtml#x1-9390005)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 tox 运行全面的质量检查](ch021.xhtml#x1-9390005)'
- en: '17.1 The bare minimum: a README.rst file'
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.1 最基本的要求：一个 README.rst 文件
- en: In Chapter [16](ch020_split_000.xhtml#x1-86400016), the [Creating a pyproject.toml
    file](ch020_split_000.xhtml#x1-8790003) recipe described how to create a pyproject.toml
    file with a reference to a README file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 [16](ch020_split_000.xhtml#x1-86400016) 章中，[创建 pyproject.toml 文件](ch020_split_000.xhtml#x1-8790003)
    的食谱描述了如何创建一个包含 README 文件引用的 pyproject.toml 文件。
- en: For the purposes of that recipe, we suggested the file is a summary of how to
    install and use the project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了那个食谱的目的，我们建议该文件是对如何安装和使用项目的总结。
- en: 'We also noted there are six essential questions: ”who?”, ”what?”, ”why?”, ”when?”,
    ”where?”, and ”how?” that can help in writing a short lede paragraph to describe
    the project.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还指出，有六个基本问题：“谁？”、“什么？”、“为什么？”、“何时？”、“何地？”和“如何？”这些问题可以帮助撰写简短的引言段落来描述项目。
- en: 'There are two common challenges when writing a README file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写 README 文件时，有两个常见的挑战：
- en: Writing too much
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写得太多
- en: Writing too little
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写得太少
- en: A good package will include a separate docs folder with detailed documentation.
    The README file is only an introduction and a roadmap through the project’s various
    files and folders. In many cases, where concrete examples are called for, it’s
    important to very judiciously repeat information provided elsewhere in the documentation
    to avoid contradictions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的软件包将包括一个包含详细文档的单独文档文件夹。README文件仅是一个介绍，以及项目各种文件和文件夹的路线图。在许多情况下，当需要具体示例时，非常重要地审慎地重复文档中其他地方提供的信息，以避免矛盾。
- en: A project without a README is visibly deficient. Locating good examples can
    help provide guidance on what is needed. Some developers feel the code should
    somehow speak for itself, and serve as documentation. The code, unfortunately,
    only really answers the ”how?” question effectively. Questions about who the users
    are and how the software should be deployed require statements that must exist
    outside the software.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 没有README的项目在视觉上是有缺陷的。找到好的例子可以帮助提供指导，了解需要什么。一些开发者认为代码应该以某种方式为自己说话，并作为文档。不幸的是，代码只能有效地回答“如何？”这个问题。关于用户是谁以及软件应该如何部署的问题需要存在于软件之外的说法。
- en: In this recipe, we’ll dive into what makes a useful README file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将深入了解一个有用的README文件的特点。
- en: 17.1.1 Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.1.1 准备工作
- en: 'A preliminary step is to choose the markup that will be used for the README
    file. There are three common choices:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先的一个步骤是选择用于README文件的标记语言。这里有三种常见的选项：
- en: Plain text
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯文本
- en: Markdown
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Markdown
- en: ReStructured Text (RST)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReStructured Text (RST)
- en: The advantage of plain text is the simplicity of avoiding additional formatting
    elements. The disadvantage is the lack of typographic hints like font changes
    to provide important context.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 纯文本的优势在于避免了额外的格式化元素。缺点是缺乏字体变化等印刷提示，以提供重要上下文。
- en: The Markdown markup has the advantage of having a small set of elements. These
    overlap with a number of common practices in writing natural-language text in
    a file. Showing indented text in a distinct font for example, and treating a paragraph
    starting with a punctuation mark and a space as a bulleted list item.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown标记语言的优势在于它有一组小的元素。这些元素与在文件中编写自然语言文本的许多常见实践重叠。例如，显示缩进文本时使用不同的字体，以及将带有标点符号和空格的段落视为项目符号列表项。
- en: Using RST provides a comprehensive set of elements that covers a wide variety
    of typographic details. This is the preferred markup language for Python’s internal
    documentation projects. In some cases, the docs folder may be built with RST,
    but the README file may be in plain text.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RST提供了一套全面的元素，涵盖了广泛的印刷细节。这是Python内部文档项目的首选标记语言。在某些情况下，文档文件夹可能使用RST构建，但README文件可能是纯文本。
- en: The choice is free of long-term consequences, since this file is essentially
    isolated from the rest of the project’s documentation. When in doubt, it can help
    to toss a three-sided coin to make the choice. The file is not large, and making
    changes is relatively easy.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 选择没有长期后果，因为此文件本质上与项目其他文档隔离。如有疑问，扔一个三面硬币来做出选择可能会有所帮助。文件不大，修改相对容易。
- en: 17.1.2 How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.1.2 如何操作...
- en: Write an introduction, or lede, with information about who would use this package,
    why they would use it, and what it does. In some cases, it may be helpful to state
    when and where an application is used; this may be needed to clarify client-vs.-server
    hosting or admin-vs.-user roles. Keep this short; details will follow. This is
    sometimes called the ”elevator pitch” because you can state it during an elevator
    ride in an office building.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写一个介绍，或者说是引言，包含关于谁会使用这个包，为什么他们会使用它，以及它做什么的信息。在某些情况下，说明何时何地使用应用程序可能是有帮助的；这可能需要澄清客户端与服务器托管或管理员与用户角色的区别。保持简短；细节将在后面跟进。这有时被称为“电梯演讲”，因为你可以在一个办公楼的电梯里陈述它。
- en: Summarize the important features of the software. This is often a bulleted list.
    It may include screen grabs to show a user interface, if that’s an important feature.
    It’s important to summarize and not overwrite all the details here. The details
    should be in the separate docs folder.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 概述软件的重要特性。这通常是一个项目符号列表。如果用户界面是一个重要特性，它可能包括屏幕截图来展示。在这里总结而不是详述所有细节是很重要的。细节应该放在单独的文档文件夹中。
- en: Detail any requirements or dependencies. This may include hardware and operating
    system if that’s important. It must include any Python version constraints. This
    may repeat the dependencies in the pyproject.toml in the case where a library
    or package is a plug-in or extension to another package or module.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 详细说明任何需求或依赖项。这可能包括硬件和操作系统，如果这很重要的话。必须包括任何Python版本限制。在库或包是另一个包或模块的插件或扩展的情况下，这可能会在pyproject.toml中重复依赖项。
- en: Provide installation instructions. Often this is the python -m pip command required
    to download and install the package. If there are optional features, these will
    be summarized here, also.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供安装说明。通常这是下载和安装包所需的python -m pip命令。如果有可选功能，这些也会在这里总结。
- en: Provide an introduction to usage or operation. This is not the user guide, but
    it is what most people will see first, and the usage section should provide a
    tidy, clear, working example.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供使用或操作的简介。这不是用户指南，但这是大多数人首先看到的内容，使用部分应提供一个整洁、清晰、可工作的示例。
- en: 'There are two distinct approaches to writing this, depending on what the software
    is:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据软件的性质，有两种不同的方法来编写这个：
- en: For modules and packages that will be imported, a doctest example is ideal.
    The README can then be tested to confirm the example really is correct and works
    as expected.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于将要导入的模块和包，一个doctest示例是理想的。然后可以通过测试README来确认示例确实正确且按预期工作。
- en: For applications, the usage may include step-by-step instructions for a common
    use case, possibly with screen-grab images.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于应用程序，使用说明可能包括常见用例的逐步说明，可能还带有屏幕截图图像。
- en: For some simple applications, this may be the entire user guide. Generally,
    it’s only going to show a single, simple use case.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于一些简单的应用程序，这可能就是整个用户指南。通常情况下，它只会展示一个单一、简单的用例。
- en: Provide the type of license and a link.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供许可证类型和链接。
- en: Provide a section on contributing to the project. This may be a link to a separate
    contributor guide document, or it may be a short description of how to make changes
    and submit a pull request.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个关于如何为项目做出贡献的部分。这可能是一个指向单独的贡献者指南文档的链接，或者可能是一个简短的说明，说明如何进行更改并提交拉取请求。
- en: In some cases, information about the integration, testing, and deployment may
    be helpful here. For complicated applications, the build process may involve steps
    that aren’t obvious.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，有关集成、测试和部署的信息可能在这里很有帮助。对于复杂的应用程序，构建过程可能涉及一些不明显步骤。
- en: This should also include information about documenting issues and making feature
    requests.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这还应包括有关记录问题和提出功能请求的信息。
- en: It’s also polite to include credits or acknowledgments for the work of other
    contributors. This may include information about backers and sponsors.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含对其他贡献者工作的致谢或认可也是礼貌的。这可能包括关于赞助商和资助者的信息。
- en: 17.1.3 How it works...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.1.3 它是如何工作的...
- en: The key ingredient of a README file is concrete examples of commands and features
    that actually work. It shows what the software is, how to install it, how to use
    it, and how to maintain it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: README文件的关键成分是实际工作的命令和功能的具体示例。它展示了软件是什么，如何安装它，如何使用它，以及如何维护它。
- en: Examining READMEs from popular repositories reveals some common features. There’s
    a [Make a README](https://www.makeareadme.com) web site that can help create a
    file in case additional guidance is required.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 检查流行存储库的README文件可以揭示一些共同特征。有一个[Make a README](https://www.makeareadme.com)网站，在需要额外指导的情况下可以帮助创建文件。
- en: While there will be additional documentation elsewhere, the README is the first
    thing most people read. In some cases, it’s also the last thing they read. Therefore,
    it must be clear what the software is and how it will be used.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然其他地方可能有额外的文档，但README是大多数人首先阅读的内容。在某些情况下，它也是他们最后阅读的内容。因此，必须清楚地说明软件是什么以及如何使用它。
- en: 17.1.4 There’s more...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.1.4 更多...
- en: A common feature of README files is badges showing the general health of the
    project. There are several sources for these graphical summaries.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: README文件的一个常见特点是显示项目总体健康状况的徽章。这些图形摘要有多个来源。
- en: The [https://shields.io](https://shields.io) site provides a number of static
    and dynamic badges. A dynamic badge can interrogate services like PyPI or GitHub
    to post the current status.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://shields.io](https://shields.io)网站提供了一系列静态和动态徽章。动态徽章可以查询像PyPI或GitHub这样的服务，以发布当前状态。'
- en: In Markdown, something like the following might be used to build a badge.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Markdown中，可能使用以下内容来构建徽章。
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This would show a small graphic badge with pypi on the left, and the current
    PyPI release number on the right side.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一个带有pypi的小型图形徽章在左侧，以及右侧的当前PyPI版本号。
- en: '![PIC](img/file85.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/file85.png)'
- en: 'Figure 17.1: Badge Example'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1：徽章示例
- en: The badge can also be a link, and can provide more detailed information.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 徽章也可以是一个链接，并提供更详细的信息。
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 17.1.5 See also
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.1.5 参考信息
- en: The C4 model offers additional help on how to describe software. See [https://c4model.com](https://c4model.com).
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C4模型提供了关于如何描述软件的额外帮助。请参阅[https://c4model.com](https://c4model.com)。
- en: See the [https://github.com/matiassingers/awesome-readme](https://github.com/matiassingers/awesome-readme)
    project on GitHub for good examples.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅GitHub上的[https://github.com/matiassingers/awesome-readme](https://github.com/matiassingers/awesome-readme)项目，以获取良好的示例。
- en: 'Cookie-cutter templates are available with a search for ”cookiecutter” repositories:
    [GitHub search](https://github.com/search?q=cookiecutter&%3Btype=Repositories&type=repositories).
    This is quite a large list with 1000’s of cookie-cutter templates: [https://github.com/search?q=cookiecutter&amp%3Btype=Repositories&type=repositories](https://github.com/search?q=cookiecutter&%3Btype=Repositories&type=repositories).'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过搜索“cookiecutter”仓库可以找到cookie-cutter模板：[GitHub搜索](https://github.com/search?q=cookiecutter&%3Btype=Repositories&type=repositories)。这是一个相当大的列表，包含1000多个cookie-cutter模板：[https://github.com/search?q=cookiecutter&%3Btype=Repositories&type=repositories](https://github.com/search?q=cookiecutter&%3Btype=Repositories&type=repositories)。
- en: 17.2 Installing Sphinx and creating documentation
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.2 安装Sphinx和创建文档
- en: A README file is a summary of the software touching on a few key points. Proper
    documentation often parallels the important topics of the README, but in more
    depth.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: README文件是软件的摘要，涉及几个关键点。适当的文档通常与README的重要主题平行，但更深入。
- en: 'Important adjuncts to the essential ”how-to” guides include two important topics:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的辅助“如何做”指南包括两个重要主题：
- en: What the software does. This is often a detailed description of the observable
    features.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件做什么。这通常是对可观察特征的详细描述。
- en: How the software works, showing the implementation concepts.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件的工作原理，展示实现概念。
- en: 'The [C4 model](https://c4model.com) suggests four tiers of abstraction in the
    description:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[C4模型](https://c4model.com)建议在描述中包含四个抽象层级。'
- en: The context in which an application is used.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序使用的上下文。
- en: The containers in which the software runs.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件运行的容器。
- en: Component diagrams showing the architecture of the software.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示软件架构的组件图。
- en: Code diagrams showing the implementation details.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示实现细节的代码图。
- en: This organization offers the necessary focus for documentation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这种组织方式为文档提供了必要的焦点。
- en: We’ll write in RST or Markdown format. Tools like Sphinx then build output documents
    in a variety of target formats.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用RST或Markdown格式编写。然后，Sphinx等工具在多种目标格式中构建输出文档。
- en: We often want to provide an API document with the implementation details, extracted
    from the docstrings present in our modules, classes, methods, and functions. In
    Chapter [2](ch006_split_000.xhtml#x1-840002), the [Including descriptions and
    documentation](ch006_split_000.xhtml#x1-1010003) recipe described how to add docstrings
    to various Python structures. The Sphinx tool autodoc extension extracts the docstrings
    to produce detailed API documentation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常希望提供一个包含实现细节的API文档，这些细节是从我们模块、类、方法和函数中存在的docstrings中提取出来的。在第[2](ch006_split_000.xhtml#x1-840002)章中，[包含描述和文档](ch006_split_000.xhtml#x1-1010003)食谱描述了如何向各种Python结构添加docstrings。Sphinx工具的autodoc扩展从docstrings中提取信息，以生成详细的API文档。
- en: Further, the Sphinx tool makes it easy to decompose the documentation source
    into smaller files that are easier to edit and manage.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Sphinx工具使得将文档源分解成更小的文件变得容易，这些文件更容易编辑和管理。
- en: 17.2.1 Getting ready
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.2.1 准备工作
- en: 'We’ll need to download and install the Sphinx tool. Generally, this is done
    with the following terminal command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要下载并安装Sphinx工具。通常，这是通过以下终端命令完成的：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using the python -m pip command ensures that we will use the pip command that
    goes with the currently active virtual environment.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用python -m pip命令确保我们将使用与当前活动虚拟环境关联的pip命令。
- en: There are several built-in themes, plus numerous third-party themes. See [https://sphinx-themes.org](https://sphinx-themes.org)
    for dozens of additional themes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个内置主题，以及许多第三方主题。请参阅[https://sphinx-themes.org](https://sphinx-themes.org)以获取更多主题。
- en: 17.2.2 How to do it...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.2.2 如何操作...
- en: 'Make sure the project directory has at least the following sub-directories:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保项目目录至少有以下子目录：
- en: The source. This may use the package’s name or it may be called src.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源。这可能使用包的名称，或者可能被称为 src。
- en: The tests, often called tests.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试，通常称为 tests。
- en: The documentation, often called docs.
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常称为文档的文档。
- en: Change the working directory to the docs directory with a cd or chdir command.
    From there, run the sphinx-quickstart command.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 cd 或 chdir 命令将工作目录更改为 docs 目录。从那里，运行 sphinx-quickstart 命令。
- en: '[PRE3]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will embark on an interactive conversation to gather details about your
    project and seed your docs folder with the files required to run Sphinx.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将开始一个交互式对话，以收集有关您的项目详细信息，并在您的文档文件夹中生成运行 Sphinx 所需的文件。
- en: 'The result will be several directories and files for the documentation:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果将是用于文档的几个目录和文件：
- en: conf.py has the project configuration.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: conf.py 包含项目配置。
- en: index.rst is the root document.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: index.rst 是根文档。
- en: Makefile can be used in all other environments to build the documentation.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Makefile 可用于所有其他环境来构建文档。
- en: A make.bat for use in a Windows environment may also be present.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于 Windows 环境的 make.bat 也可以存在。
- en: Edit the index.rst file to write an initial summary. This might be copied from
    the README file.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 index.rst 文件以编写初始摘要。这可能会从 README 文件中复制过来。
- en: Run the make html command to build the initial documentation. This is a shell
    command, run in the terminal window. Make sure the current working directory is
    the docs directory.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 make html 命令来构建初始文档。这是一个在终端窗口中运行的 shell 命令。确保当前工作目录是 docs 目录。
- en: 17.2.3 How it works...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.2.3 它是如何工作的...
- en: The Sphinx tool starts processing by reading the root document. The root_doc
    configuration parameter names index. The source_suffix configuration parameter
    sets the suffix for this file to .rst.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Sphinx 工具通过读取根文档开始处理。root_doc 配置参数命名为 index。source_suffix 配置参数设置此文件的后缀为 .rst。
- en: 'Generally, this file will name the other files in the documentation. The ..  toctree::
    directive is used to specify the other files in the documentation.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '通常，此文件将命名文档中的其他文件。使用 .. toctree:: 指令指定文档中的其他文件。'
- en: Let’s say we need to write several sections for installation, usage, maintenance,
    design, and API reference. The index.rst will have this as the primary content.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要为安装、使用、维护、设计和 API 参考编写几个部分。index.rst 将包含这些作为主要内容。
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The file created by the sphinx-quickstart tool will create a preamble in front
    of the above example. We’ve omitted them from this example, since there’s no good
    reason to change them.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由 sphinx-quickstart 工具创建的文件将在上述示例之前创建一个序言。我们已从示例中省略了它们，因为没有很好的理由去更改它们。
- en: The toctree directive has two parameters, :maxdepth: 2 and :caption: Contents:.
    These tailor the behavior of the directive’s output.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'toctree 指令有两个参数，:maxdepth: 2 和 :caption: Contents:。这些调整指令输出的行为。'
- en: Note that content inside a directive must be indented consistently. Often the
    initial file will have an indent of three spaces. Some editors work with a default
    indent of four spaces, so some changes to settings can be helpful.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，指令内部的内容必须保持一致的缩进。通常初始文件将有一个三个空格的缩进。一些编辑器使用默认的四个空格缩进，因此对设置的一些更改可能会有所帮助。
- en: Each of the names in the toctree body refers to a file with the configured suffix,
    in our case, .rst.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: toctree 体中的每个名称都指的是一个具有配置后缀的文件，在我们的例子中是 .rst。
- en: The installation.rst, usage.rst, maintenance.rst, design.rst, and api.rst documents
    must start with a proper RST title line. The initial content can come from notes
    or the README. For more help on RST, see [Writing better docstrings with RST markup](ch006_split_000.xhtml#x1-1090004)
    in Chapter [2](ch006_split_000.xhtml#x1-840002).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: installation.rst、usage.rst、maintenance.rst、design.rst 和 api.rst 文档必须以适当的 RST
    标题行开始。初始内容可以来自笔记或 README。有关 RST 的更多信息，请参阅第[2](ch006_split_000.xhtml#x1-840002)章中的[使用
    RST 标记编写更好的 docstrings](ch006_split_000.xhtml#x1-1090004)。
- en: The content of the api.rst document will make use of the autodoc extension.
    We’ll look at this in [Using Sphinx autodoc to create the API reference](ch021.xhtml#x1-9270003).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: api.rst 文档的内容将使用 autodoc 扩展。我们将在[使用 Sphinx autodoc 创建 API 参考](ch021.xhtml#x1-9270003)中查看这一点。
- en: 17.2.4 There’s more...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.2.4 更多...
- en: There are many useful extensions for Sphinx. We’ll look at including a to-do
    list.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Sphinx 有许多有用的扩展。我们将查看包括待办事项列表。
- en: 'Enable an extension by adding sphinx.ext.todo to the list of extensions in
    the conf.py configuration file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 conf.py 配置文件中将 sphinx.ext.todo 添加到扩展列表中，启用一个扩展：
- en: '[PRE5]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will introduce two new directives to the available markup:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为可用的标记引入两个新的指令：
- en: 'The ..  todo:: directive creates a to-do item.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '.. todo:: 指令创建一个待办事项。'
- en: 'The ..  todolist:: directive will be replaced by the content of all the todo
    items.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`..  todolist::` 指令将被所有待办事项的内容所替换。'
- en: The todo items produce no other output. It’s easy to find them; some IDEs will
    automatically scan the files for the letters todo and keep this as a list of things
    for a developer to address.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项不会产生其他输出。很容易找到它们；一些IDE会自动扫描文件中的todo字母，并将这些作为开发人员需要解决的问题列表。
- en: 'Editing the conf.py configuration file to add the following line will enable
    the .. todolist:: directive to include the items in the documentation:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编辑conf.py配置文件并添加以下行，将启用`.. todolist::`指令以包含文档中的项目：
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With this, the todo items are elevated from personal notes to public items in
    the documentation.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，待办事项从个人笔记提升为文档中的公共项目。
- en: Sphinx comes with a number of themes that define the styles to use. The default
    theme is called alabaster. Changing to one of the other built-in themes can be
    done with the html_theme setting in the conf.py configuration file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Sphinx附带了一些主题，这些主题定义了要使用的样式。默认主题被称为alabaster。可以通过在conf.py配置文件中的html_theme设置中更改到其他内置主题。
- en: 'Change to the sphinxdoc theme with a setting like the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下设置更改到sphinxdoc主题：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Many themes have further customizations possible. Providing an html_theme_options
    dictionary tailors the theme.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 许多主题都有进一步的定制选项。提供html_theme_options字典可以定制主题。
- en: 17.2.5 See also
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.2.5 参见
- en: See Sphinx [https://www.sphinx-doc.org/en/master/](https://www.sphinx-doc.org/en/master/)
    for details on the Sphinx project.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Sphinx项目的详细信息，请参阅Sphinx [https://www.sphinx-doc.org/en/master/](https://www.sphinx-doc.org/en/master/)。
- en: See [https://sphinx-themes.org](https://sphinx-themes.org) for some additional
    Sphinx themes.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关一些额外的Sphinx主题，请参阅[https://sphinx-themes.org](https://sphinx-themes.org)。
- en: See [Using Sphinx autodoc to create the API reference](ch021.xhtml#x1-9270003)
    to see how to build API documentation from code.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看如何从代码中构建API文档的[使用Sphinx autodoc创建API参考](ch021.xhtml#x1-9270003)。
- en: 17.3 Using Sphinx autodoc to create the API reference
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.3 使用Sphinx autodoc创建API参考
- en: One of the huge strengths of Sphinx is being able to generate the API documentation
    using the autodoc extension. A series of commands can extract the docstrings from
    modules, classes, functions, and methods. Options are available to fine-tune exactly
    what members are included or excluded.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Sphinx的一个巨大优势是能够使用autodoc扩展生成API文档。一系列命令可以从模块、类、函数和方法中提取文档字符串。有选项可以微调确切包含或排除的成员。
- en: 'We’ll refer back to Chapter [7](ch011_split_000.xhtml#x1-3760007), the [Extending
    a built-in collection – a list that does statistics](ch011_split_001.xhtml#x1-4250009)
    recipe. In there is this Statslist class:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将回溯到第[7](ch011_split_000.xhtml#x1-3760007)章，[扩展内置集合 – 做统计的列表](ch011_split_001.xhtml#x1-4250009)配方。其中有一个Statslist类：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Because this inherits methods from the list class, there are a large number
    of available methods. By default, only those methods with docstrings, excluding
    private methods (those with a leading _), will be examined and included in the
    documentation. We have a number of other choices of which methods to include in
    the documentation:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这继承了列表类的方法，所以有大量的可用方法。默认情况下，只有那些带有文档字符串的方法（不包括私有方法，即以_开头的方法）将被检查并包含在文档中。我们还有其他一些选择，可以选择包含在文档中的方法：
- en: We can name specific methods, and only those will be documented.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以指定特定的方法，并且只有这些方法将被记录。
- en: We can ask to include methods without docstrings; the signature will be shown.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以请求包含没有文档字符串的方法；将显示签名。
- en: We can ask for private members (those with a leading _).
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以请求私有成员（那些以_开头的）。
- en: We can ask for special members (those with double leading __).
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以请求特殊成员（那些以两个_开头的）。
- en: We can ask for inherited members to see members from the superclasses.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以请求继承的成员以查看超类中的成员。
- en: We’ll start by putting docstrings into this class definition. Once that task
    is finished, we can include the necessary configuration and directives in the
    documentation directory.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先将文档字符串放入这个类定义中。一旦这项任务完成，我们就可以在文档目录中包含必要的配置和指令。
- en: 17.3.1 Getting ready
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.3.1 准备工作
- en: The first step is to add docstrings to the module, the class, and the methods.
    In some cases, partial docstrings are in place and the task is to expand them
    to be more complete.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是为模块、类和方法添加文档字符串。在某些情况下，部分文档字符串已经存在，任务是将它们扩展得更完整。
- en: 'We might, for example, have already added the following kinds of comments:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能已经添加了以下类型的注释：
- en: '[PRE9]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This started to provide some useful documentation in an API reference. The class
    docstring has a doctest example to show how it works. The method has a docstring
    with a summary of what it does.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这开始提供了一些有用的文档，在API参考中。类的文档字符串包含一个doctest示例，以展示其工作方式。该方法有一个文档字符串，总结了其功能。
- en: We need to extend this to add details on parameters, return values, and exceptions
    raised. This is done with additional syntax called a ”field list”.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要扩展它以添加有关参数、返回值和引发的异常的详细信息。这是通过称为“字段列表”的附加语法完成的。
- en: 'Each item in a field list has a name and a body. The general syntax is this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 字段列表中的每个项都有一个名称和正文。一般语法如下：
- en: '[PRE10]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The Sphinx tool defines a large number of field list names that are used to
    format documentation for a function or method. Here are a few of the most useful
    ones:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Sphinx工具定义了大量的字段列表名称，用于格式化函数或方法的文档。以下是一些最有用的：
- en: ':param name: Description of a parameter'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ':param name: 参数的描述'
- en: ':key name: Description of a keyword parameter'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ':key name: 关键字参数的描述'
- en: ':raises exception: Description of the reason for the exception'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ':raises exception: 异常原因的描述'
- en: ':var name: Details for internal variables of a class that are exposed'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ':var name: 类内部变量的详细信息，这些变量是公开的'
- en: ':returns: The return value from a method or function'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ':returns: 方法或函数的返回值'
- en: These permit the writing of detailed descriptions of methods.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这些允许编写方法的详细描述。
- en: 17.3.2 How to do it...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.3.2 如何做...
- en: Edit the docstrings to include details.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑文档字符串以包含详细信息。
- en: 'We might, for example, want to expand on the method definition as follows:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，我们可能想如下扩展方法定义：
- en: '[PRE11]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For a function as simple as this, the :returns: part of the field list seems
    redundant.'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这样一个简单的函数，字段列表中的:returns:部分似乎有些冗余。
- en: 'Edit the conf.py file to add the ’sphinx.ext.autodoc’ string to the list extensions:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑conf.py文件，将’sphinx.ext.autodoc’字符串添加到扩展列表中：
- en: '[PRE12]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the src directory to sys.path in the conf.py configuration file:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在conf.py配置文件中将src目录添加到sys.path：
- en: '[PRE13]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This works because the conf.py file is a Python module, and can execute any
    Python statements. Adding the src directory to the path means Sphinx can import
    the module.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这之所以有效，是因为conf.py文件是一个Python模块，可以执行任何Python语句。将src目录添加到路径意味着Sphinx可以导入该模块。
- en: Put the following directive in the api.rst document.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在api.rst文档中放入以下指令。
- en: '[PRE14]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will import the module, extract the docstring, and then attempt to create
    documentation for all of the members, including those that do not – as yet – have
    docstrings.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将导入模块，提取文档字符串，然后尝试为所有成员创建文档，包括那些尚未有文档字符串的成员。
- en: The Sphinx quickstart created a Makefile to help build the final PDF or HTML
    file from the source material; see the [Installing Sphinx and creating documentation](ch021.xhtml#x1-9210002)
    recipe for more information. Run the make html shell command in the docs directory,
    The build directory will have a static website with the project’s documentation.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Sphinx快速入门创建了一个Makefile，以帮助从源材料构建最终的PDF或HTML文件；有关更多信息，请参阅[安装Sphinx和创建文档](ch021.xhtml#x1-9210002)配方。在文档目录中运行make
    html shell命令，构建目录将包含项目的静态网站。
- en: 17.3.3 How it works...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.3.3 它是如何工作的...
- en: 'The examination of docstrings to extract the detailed documentation starts
    with an elegantly clever feature of the Python language: the documentation string.
    The rules of RST markup continue a path toward elegant-looking documentation.
    The resulting Sphinx page looks like this:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 从文档字符串中提取详细文档的检查始于Python语言的巧妙特性：文档字符串。RST标记的规则继续走向优雅的文档。生成的Sphinx页面看起来像这样：
- en: '![PIC](img/file86.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![PIC](img/file86.png)'
- en: 'Figure 17.2: Sphinx Output Example'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2：Sphinx输出示例
- en: 'Note the variance() method includes a ..  math:: directive with details on
    how the computation is performed. This requires some care because the LaTeXmath
    syntax involves a fair number of \ characters.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 注意variance()方法包含一个..  math::指令，其中包含有关计算方式的详细信息。这需要一些小心，因为LaTeXmath语法涉及相当多的\字符。
- en: 'There are two ways to deal with LaTeXmath in docstrings:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档字符串中处理LaTeXmath有两种方式：
- en: 'Use a ”raw” string literal and single \:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“原始”字符串字面量和单个\：
- en: '[PRE15]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This means that no other escaped characters can be used. This may prevent using
    Unicode characters, for example.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着不能使用其他转义字符。这可能会阻止使用Unicode字符，例如。
- en: 'Use a \ to escape the special meaning of \:'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用\来转义\的特殊含义：
- en: '[PRE16]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This permits including Unicode escape sequences like \N{Black Spade Suit} in
    the docstring.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这允许在文档字符串中包含Unicode转义序列，如\N{黑桃}。
- en: In both cases, note that RST uses back-ticks ‘ around the content that has a
    role, like :math:.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，请注意，RST 使用反引号 ` 包围具有角色的内容，如 :math:。
- en: 17.3.4 There’s more...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.3.4 更多...
- en: 'A cross-reference to another class, module, or method uses :role:‘value‘ syntax.
    The :role: portion is the specific kind of reference to help distinguish modules,
    classes, and functions. The value is a name that has a definition directive somewhere
    in the documentation.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '对另一个类、模块或方法的交叉引用使用 :role:‘value’ 语法。:role: 部分是特定类型的引用，有助于区分模块、类和函数。值是在文档中某处有定义指令的名称。'
- en: A cross-reference will generate appropriately formatted text with a hypertext
    link to the the definition for the name.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉引用将生成适当格式化的文本，并带有指向名称定义的超文本链接。
- en: 'Here’s an example:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE17]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The :py:class:‘~stats.StatsList‘ has the role of :py:class: to create a class
    reference to the StatsList class definition. The use of ~ in the name means that
    only the last level of the name will be shown. The full path is required to generate
    a correct reference to the class. The :py:mod:‘stats‘ reference is a role of :py:mod:
    and names the stats module.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: ':py:class:‘~stats.StatsList’ 的作用是创建一个指向 StatsList 类定义的类引用。在名称中使用 ~ 的意思是只显示名称的最后一层。生成正确的类引用需要完整的路径。:py:mod:‘stats’
    引用是 :py:mod: 的作用，并命名了 stats 模块。'
- en: 17.3.5 See also
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.3.5 参见
- en: See [Installing Sphinx and creating documentation](ch021.xhtml#x1-9210002) for
    more information on Sphinx.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见 [安装 Sphinx 和创建文档](ch021.xhtml#x1-9210002) 以获取有关 Sphinx 的更多信息。
- en: See Chapter [7](ch011_split_000.xhtml#x1-3760007), the [Extending a built-in
    collection – a list that does statistics](ch011_split_001.xhtml#x1-4250009) recipe
    for the example this is built around.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见第 [7](ch011_split_000.xhtml#x1-3760007) 章，[扩展内置集合 – 一个用于统计的列表](ch011_split_001.xhtml#x1-4250009)
    的配方，了解这个例子所围绕的示例。
- en: See Chapter [2](ch006_split_000.xhtml#x1-840002), the [Including descriptions
    and documentation](ch006_split_000.xhtml#x1-1010003) recipe for more information
    on docstrings.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见第 [2](ch006_split_000.xhtml#x1-840002) 章，[包含描述和文档](ch006_split_000.xhtml#x1-1010003)
    的配方，以获取有关 docstrings 的更多信息。
- en: 17.4 Identifying other CI/CD tools in pyproject.toml
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.4 在 pyproject.toml 中识别其他 CI/CD 工具
- en: The terms Continuous Integration (CI) and Continuous Deployment (CD) are often
    used to describe the process of publishing a Python package for use by others.
    The idea of doing a number of quality checks for integration and deployment is
    central to good software engineering. Running a test suite is one of many ways
    to affirm that software is fit for the intended purpose.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 连续集成 (CI) 和连续部署 (CD) 这些术语通常用来描述发布 Python 包供他人使用的流程。对集成和部署进行一系列质量检查的想法是良好软件工程的核心。运行测试套件是确认软件适合预期用途的许多方法之一。
- en: Additional tools might include memray, which is used to check the use of memory
    resources. A tool like ruff is also an effective linter.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 可能包括额外的工具，如 memray，用于检查内存资源的使用。像 ruff 这样的工具也是一个有效的代码检查器。
- en: In Chapter [16](ch020_split_000.xhtml#x1-86400016), the [Creating a pyproject.toml
    file](ch020_split_000.xhtml#x1-8790003) recipe, and also In Chapter [15](ch019_split_000.xhtml#x1-79400015),
    the [Combining unittest and doctest tests](ch019_split_000.xhtml#x1-8250005) recipe,
    both talk about defining test tools in addition to the dependencies required to
    install the project.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 [16](ch020_split_000.xhtml#x1-86400016) 章，[创建 pyproject.toml 文件](ch020_split_000.xhtml#x1-8790003)
    的配方中，以及在第 [15](ch019_split_000.xhtml#x1-79400015) 章，[结合 unittest 和 doctest 测试](ch019_split_000.xhtml#x1-8250005)
    的配方中，都讨论了在安装项目所需的依赖项之外定义测试工具。
- en: 'This suggests there are several layers of requirements (also called dependencies):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明存在多个要求层（也称为依赖项）：
- en: Requirements needed to install the application in the first place. Within this
    book, this includes projects like pydantic, beautifulsoup4, jupyterlab, and matplotlib.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首次安装应用程序所需的条件。在本书中，这包括 pydantic、beautifulsoup4、jupyterlab 和 matplotlib 等项目。
- en: Optional requirements for special features, plug-ins, or extensions. These aren’t
    required to install the project. They are named in configuration files and applied
    when the software is used. As an example, the pydantic package has an optional
    validator for email addresses. If your application requires this, it needs to
    be named as part of the dependency.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于特殊功能、插件或扩展的可选要求。这些不是安装项目的必需条件。它们在配置文件中命名，并在软件使用时应用。例如，pydantic 包有一个可选的电子邮件地址验证器。如果您的应用程序需要这个功能，它需要作为依赖项的一部分命名。
- en: Requirements to run the test suite. For the most part, this has been pytest
    and mypy. It hasn’t been emphasized, but the unit test cases for the examples
    in this book all use tox for test automation.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行测试套件的要求。大部分情况下，这是 pytest 和 mypy。虽然这并没有被强调，但本书中示例的单元测试案例都使用了 tox 进行测试自动化。
- en: Packages and tools needed for development. This includes tools like memray and
    sphinx. A tool like ruff or black might be part of this set of requirements.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发所需的软件包和工具。这包括像 memray 和 sphinx 这样的工具。像 ruff 或 black 这样的工具可能也是这些要求的一部分。
- en: The dependency information is used to install the software properly. It’s also
    used to create development environments for collaboration. The Python ecosystem
    of packages is in a constant state of flux.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项信息用于正确安装软件。它还用于创建协作的开发环境。Python 的软件包生态系统处于不断变化的状态。
- en: It’s imperative to record which versions a package was tested with. This detail
    makes it possible for tools like PIP to download and install the required components
    in the virtual environment.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 记录软件包测试的版本是至关重要的。这个细节使得工具如 PIP 能够在虚拟环境中下载和安装所需的组件。
- en: 17.4.1 Getting ready
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.4.1 准备工作
- en: 'The first step is to create the base pyproject.toml file. See the [Creating
    a pyproject.toml file](ch020_split_000.xhtml#x1-8790003) recipe in Chapter [16](ch020_split_000.xhtml#x1-86400016)
    for another recipe closely related to this. This should have a dependencies item
    in the [project] table. It might look like this:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建基础 pyproject.toml 文件。参见第 [16](ch020_split_000.xhtml#x1-86400016) 章中的 [Creating
    a pyproject.toml file](ch020_split_000.xhtml#x1-8790003) 菜单，其中包含与此密切相关的另一个菜谱。这应该在
    [project] 表中有一个依赖项。它可能看起来是这样的：
- en: '[PRE18]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When using Poetry, this information is in a slightly different format. The information
    goes in the [tool.poetry.dependencies] table. Often, we’ll build this by using
    the poetry add command-line tool.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Poetry 时，这个信息以略微不同的格式。信息放在 [tool.poetry.dependencies] 表中。我们通常会使用 poetry
    add 命令行工具来构建这个信息。
- en: 'Note that Poetry commands offer some additional syntax:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Poetry 命令提供了一些额外的语法：
- en: '[PRE19]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The ^ prefix is a sophisticated rule that permits a larger version number for
    the minor or patch level. It does not permit any changes to the left-most, major
    version number, 2, in this case. This means that any version of Pydantic at or
    after 2.6.0 will be considered. Versions above 3.x will not be considered.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: ^ 前缀是一个复杂的规则，允许对次要版本号或补丁级别使用更大的版本号。它不允许对最左侧的主版本号，在这个例子中的 2，进行任何更改。这意味着任何 2.6.0
    或更高版本的 Pydantic 都将被考虑。高于 3.x 的版本则不考虑。
- en: 17.4.2 How to do it...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.4.2 如何做...
- en: 'Add the test dependencies in a table named [project.optional-dependencies].
    This will be a list named test. It looks like this:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为 [project.optional-dependencies] 的表中添加测试依赖项。这将是一个名为 test 的列表。它看起来是这样的：
- en: '[PRE20]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This name of test can be used by pip-compile to build a detailed requirements-test.txt
    for the test tools.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个 test 名称可以被 pip-compile 用于构建详细的 requirements-test.txt，用于测试工具。
- en: When using Poetry, this optional dependency group is in a different table. We
    use the --group option to specify the group.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 Poetry 时，这个可选依赖项组位于不同的表中。我们使用 --group 选项来指定组。
- en: 'The command line would look like this:'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令行看起来会是这样：
- en: '[PRE21]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the development dependencies in a table named [project.optional-dependencies]
    Generally, the name dev is used. It looks like this:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为 [project.optional-dependencies] 的表中添加开发依赖项。通常使用 dev 这个名称。它看起来是这样的：
- en: '[PRE22]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This name of dev can be used by pip-compile to build a detailed requirements-dev.txt
    for the entire suite of tools, plus the base dependencies.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个 dev 名称可以被 pip-compile 用于构建整个工具套件以及基础依赖项的详细 requirements-dev.txt。
- en: When using Poetry, the --group option specifies the group. An add command might
    include --group dev to add an item to the dev group.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 Poetry 时，--group 选项指定组。一个添加命令可能包括 --group dev 以将项目添加到 dev 组。
- en: 17.4.3 How it works...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.4.3 它是如何工作的...
- en: The goal is to provide ranges and patterns in the pyproject.toml file, offering
    flexibility in version identification. Separate requirements*.txt files record
    specific version numbers used for the current release. This generic-specific distinction
    supports the integration and reuse of complex packages.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是在 pyproject.toml 文件中提供范围和模式，以提供版本标识的灵活性。单独的 requirements*.txt 文件记录了当前发布版使用的特定版本号。这种通用-特定区分支持复杂软件包的集成和重用。
- en: 17.4.4 There’s more...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.4.4 更多...
- en: When working with tools like tox, we can create multiple virtual environments
    to test our software with variants on the dependencies.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用像 tox 这样的工具时，我们可以创建多个虚拟环境，以使用依赖项的不同变体来测试我们的软件。
- en: Package installation often uses a requirements.txt file with specific version
    identification. Development efforts, on the other hand, may involve a number of
    alternative virtual environments.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包安装通常使用具有特定版本标识的 requirements.txt 文件。另一方面，开发工作可能涉及多个替代虚拟环境。
- en: We can use tools like pip-compile to create the mix of packages to permit testing
    in a number of alternative virtual environments. See Workflow for layered requirements
    at [https://pip-tools.readthedocs.io/en/latest/](https://pip-tools.readthedocs.io/en/latest/)
    for more information.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 pip-compile 等工具创建包的混合，以允许在多个替代虚拟环境中进行测试。有关更多信息，请参阅[分层需求工作流程](https://pip-tools.readthedocs.io/en/latest/)。
- en: 'We’ll often create a base requirements.in file to define the common requirements
    across all virtual environments. For more information on this, see Chapter [16](ch020_split_000.xhtml#x1-86400016),
    [Dependencies and Virtual Environments](ch020_split_000.xhtml#x1-86400016). This
    is often a simple list of the packages required:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常会创建一个 base-requirements.in 文件来定义所有虚拟环境中的共同需求。有关更多信息，请参阅第[16](ch020_split_000.xhtml#x1-86400016)章，[依赖项和虚拟环境](ch020_split_000.xhtml#x1-86400016)。这通常是一个所需软件包的简单列表：
- en: '[PRE23]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This provides the baseline set of packages unique to the project.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了项目独有的基本包集。
- en: 'We can then create layered requirements-dev_x.in files for various test environments.
    Each of these files will include the base layer requirements.txt and an additional
    set of constraints. The file might look like this:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以为各种测试环境创建 layered-requirements-dev_x.in 文件。这些文件中的每一个都将包括基础层 requirements.txt
    和一组额外的约束。文件可能看起来像这样：
- en: '[PRE24]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We’ve included a comment that provides information on why this distinct development
    virtual environment is required. These reasons change frequently, and it’s helpful
    to leave reminders on why a particular environment is helpful.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包含了一条注释，说明了为什么需要这个独特的发展虚拟环境。这些原因经常变化，留下关于为什么特定环境有帮助的提醒是有帮助的。
- en: Within a tox.ini file, the pip-sync command will build a distinct virtual environment
    for testing. We’ll look at this in the [Using tox to run comprehensive quality
    checks](ch021.xhtml#x1-9390005) recipe.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在 tox.ini 文件中，pip-sync 命令将为测试构建一个独立的虚拟环境。我们将在[使用 tox 运行全面质量检查](ch021.xhtml#x1-9390005)的菜谱中查看这一点。
- en: 17.4.5 See also
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.4.5 参见
- en: In Chapter [16](ch020_split_000.xhtml#x1-86400016), the [Creating a pyproject.toml
    file](ch020_split_000.xhtml#x1-8790003) recipe shows a way to start a pyproject.toml
    file.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第[16](ch020_split_000.xhtml#x1-86400016)章中，[创建 pyproject.toml 文件](ch020_split_000.xhtml#x1-8790003)的菜谱展示了如何开始一个
    pyproject.toml 文件。
- en: See [Using tox to run comprehensive quality checks](ch021.xhtml#x1-9390005)
    for more information on using the tox tool to run a test suite.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关使用 tox 工具运行测试套件的更多信息，请参阅[使用 tox 运行全面质量检查](ch021.xhtml#x1-9390005)。
- en: 17.5 Using tox to run comprehensive quality checks
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.5 使用 tox 运行全面质量检查
- en: When we start using multiple CI/CD tools, it’s essential to make sure all of
    the tools are used consistently. The virtual environments must also be built consistently.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始使用多个 CI/CD 工具时，确保所有工具都一致使用至关重要。虚拟环境也必须一致构建。
- en: Traditionally, a tool like make was used to rebuild target files when source
    files were modified. This requires a great deal of care because Python doesn’t
    really fit the compiler-centric model of make.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，当源文件被修改时，使用像 make 这样的工具来重建目标文件。这需要极大的谨慎，因为 Python 并不适合 make 的编译器中心模型。
- en: Tools like tox and nox are far more helpful for running comprehensive sequences
    of test and CI/CD tools on Python code.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如 tox 和 nox 这样的工具对于在 Python 代码上运行全面的测试和 CI/CD 工具序列非常有帮助。
- en: 17.5.1 Getting ready
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.5.1 准备工作
- en: 'For careful software development, a variety of tools can be useful:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 对于谨慎的软件开发，各种工具都可能很有用：
- en: 'Unit testing: We can use the built-in doctest or unittest modules. We can also
    use tools like pytest to find and run a test suite.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试：我们可以使用内置的 doctest 或 unittest 模块。我们还可以使用像 pytest 这样的工具来查找和运行测试套件。
- en: 'Benchmarking: Also called performance testing. The pytest-benchmark project
    offers a handy fixture for assuring performance meets expectations.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试：也称为性能测试。pytest-benchmark 项目提供了一个方便的 fixture，以确保性能符合预期。
- en: 'Acceptance testing: A tool like behave or the pytest-bdd plug-in can help by
    stating acceptance test cases in Gherkin to make them more readily understood
    by product owners.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 接受测试：像 behave 或 pytest-bdd 插件这样的工具可以通过在 Gherkin 中声明接受测试用例来帮助，使产品所有者更容易理解。
- en: 'Type hint checking: This is often handled by tools like mypy, pyre, pyright,
    or pytype.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提示检查：这通常由 mypy、pyre、pyright 或 pytype 等工具处理。
- en: 'Linting: While the term ”linting” is in common use, this is really better termed
    ”lint blocking”. There are numerous tools, including ruff, pylint, flake8, and
    pylama.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 检查：虽然“linting”这个术语很常见，但这实际上更好的称呼是“lint blocking”。有众多工具，包括 ruff、pylint、flake8
    和 pylama。
- en: 'Style and formatting: Two popular tools for this are ruff and black.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 样式和格式：为此，有两个流行的工具，即 ruff 和 black。
- en: 'Documentation: This is often built with Sphinx.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 文档：这通常使用 Sphinx 构建。
- en: This means we’ll need to install the chosen suite of tools. One more tool can
    be helpful to find them all and bind them into a usable form. The tox tool can
    create and run tests in multiple virtual environments.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们需要安装所选的工具套件。一个额外的工具可以帮助找到所有工具并将它们绑定成可用的形式。tox 工具可以在多个虚拟环境中创建和运行测试。
- en: 'We’ll need to download and install the tox tool. Generally, this is done with
    the following terminal command:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要下载并安装 tox 工具。通常，这是通过以下终端命令完成的：
- en: '[PRE25]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Using the python -m pip command ensures that we will use the pip command that
    goes with the currently active virtual environment.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 python -m pip 命令确保我们将使用与当前活动虚拟环境关联的 pip 命令。
- en: 17.5.2 How to do it...
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.5.2 如何操作...
- en: There are two ways to provide configuration files for tox. We can embed the
    configuration in the pyproject.toml. While this fits the philosophy of the file,
    the tox tool doesn’t handle TOML options. It relies on a string with INI-formatted
    options in the TOML file.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有两种方式为 tox 提供配置文件。我们可以将配置嵌入到 pyproject.toml 中。虽然这符合文件的理念，但 tox 工具不处理 TOML 选项。它依赖于在
    TOML 文件中的具有 INI 格式选项的字符串。
- en: 'A better alternative is to create a separate tox.ini file. In this file, create
    an initial [tox] table with core configuration options. The following are appropriate
    for many projects:'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更好的替代方案是创建一个单独的 tox.ini 文件。在这个文件中，创建一个包含核心配置选项的初始 [tox] 表。以下对于许多项目都是合适的：
- en: '[PRE26]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For applications or scripts that don’t need to be installed, the following
    two lines are appropriate to avoid trying to prepare and install a package:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于不需要安装的应用或脚本，以下两行是合适的，以避免尝试准备和安装包：
- en: '[PRE27]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: For packages that will be distributed and installed, add nothing.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于将要分发和安装的包，无需添加任何内容。
- en: Create a [testenv] table with general information about test environments. In
    some cases, a single environment is sufficient. When multiple, distinct environments
    are required, there will be multiple [testenv] sections.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含关于测试环境一般信息的 [testenv] 表。在某些情况下，一个环境就足够了。当需要多个不同的环境时，将会有多个 [testenv] 部分。
- en: '[PRE28]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Inside this [testenv] table, the deps= value lists the test tools that will
    be used. It might look like this:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个 [testenv] 表内，deps= 的值列出了将要使用的测试工具。它可能看起来像这样：
- en: '[PRE29]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The tox tool uses a pip command to build the items listed in the deps section.
    It can, of course, be used to install all of the requirements. Using -r requirements.txt
    will do this.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: tox 工具使用 pip 命令构建 deps 部分中列出的项目。当然，它可以用来安装所有需求。使用 -r requirements.txt 将这样做。
- en: It’s somewhat more efficient to use the pip-sync tool because it can avoid reinstalling
    any dependencies that are already present in the environment. When using pip-sync,
    we do not use -r requirements.txt in the deps= list.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 pip-sync 工具效率更高一些，因为它可以避免重新安装环境中已经存在的任何依赖。当使用 pip-sync 时，我们不在 deps= 列表中使用
    -r requirements.txt。
- en: 'If pip-sync is being used to install requirements, this is given as the commands_pre=
    value:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果使用 pip-sync 安装需求，这将以 commands_pre= 的值给出：
- en: '[PRE30]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If any unique environment variables are required, they’re set by the setenv=
    value:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要任何独特的环境变量，它们将通过 setenv= 的值设置：
- en: '[PRE31]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, provide the sequence of commands to execute:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，提供要执行的命令序列：
- en: '[PRE32]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After closing this file, use the following command to run the test suite:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭此文件后，使用以下命令运行测试套件：
- en: '[PRE33]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 17.5.3 How it works...
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.5.3 它是如何工作的...
- en: A great many assumptions and defaults are built into tools like tox. This saves
    us from having to write clever shell scripts or tinker with the assumptions present
    in a makefile. Instead, we can provide a few lines of configuration and a sequence
    of commands.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 tox 这样的工具中，内置了许多假设和默认值。这使我们免于编写复杂的 shell 脚本或调整 makefile 中存在的假设。相反，我们可以提供几行配置和一系列命令。
- en: 'Ideally, using tox always looks like this:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，使用 tox 总是看起来像这样：
- en: '[PRE34]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The final congratulations is an apt summary.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的祝贺是一个恰当的总结。
- en: 17.5.4 There’s more...
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.5.4 更多...
- en: In many cases, a project has multiple virtual environments. Virtual environments
    are distinguished using extended names. These will have the general pattern of
    [testenv:name] where name is something descriptive.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，一个项目有多个虚拟环境。虚拟环境使用扩展名称来区分。这些将具有 [testenv:name] 的一般模式，其中 name 是某种描述性的内容。
- en: In the [tox] section of the configuration, env_list lists the environments to
    process automatically. Environments not listed can be executed manually by using
    the -e option on the tox command.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置的 [tox] 部分，env_list 列出了要自动处理的虚拟环境。未列出的环境可以通过在 tox 命令中使用 -e 选项手动执行。
- en: 'To test with another version of Python, we add the following to our tox.ini
    file:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试其他版本的 Python，我们将在 tox.ini 文件中添加以下内容：
- en: '[PRE35]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will inherit the details of the master testenv settings. An override is
    applied to change the base Python version to 3.11.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这将继承 master testenv 设置的详细信息。通过应用覆盖，将基本 Python 版本更改为 3.11。
- en: The py311 name is a handy tox shorthand for a longer specification like python>=3.11\.
    The tool will search the system-wide PATH for candidate Python implementations.
    To test with multiple Python versions, they all need to be installed in directories
    named in the PATH.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: py311 名称是针对较长的指定（如 python>=3.11）的便捷 tox 简写。工具将在系统范围内的 PATH 中搜索候选 Python 实现。要测试多个
    Python 版本，它们都需要安装在 PATH 中命名的目录中。
- en: 17.5.5 See also
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.5.5 参见
- en: See [Identifying other CI/CD tools in pyproject.toml](ch021.xhtml#x1-9330004)
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看 [pyproject.toml 中识别其他 CI/CD 工具](ch021.xhtml#x1-9330004)。
- en: See Chapter [15](ch019_split_000.xhtml#x1-79400015) for more information on
    testing.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看 [15](ch019_split_000.xhtml#x1-79400015) 章节了解更多关于测试的信息。
- en: See Chapter [16](ch020_split_000.xhtml#x1-86400016) for recipes related to virtual
    environments.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看 [16](ch020_split_000.xhtml#x1-86400016) 章节了解有关虚拟环境的食谱。
- en: See [https://tox.wiki/en/latest/](https://tox.wiki/en/latest/) for more information
    on the tox tool.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看更多关于 tox 工具的信息，请访问 [https://tox.wiki/en/latest/](https://tox.wiki/en/latest/)。
- en: See [https://nox.thea.codes/en/stable/](https://nox.thea.codes/en/stable/) for
    information on the nox tool, which offers similar functionality.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看关于 nox 工具的信息，它提供了类似的功能，请访问 [https://nox.thea.codes/en/stable/](https://nox.thea.codes/en/stable/)。
- en: Join our community Discord space
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的社区 Discord 空间。
- en: 'Join our Python Discord workspace to discuss and find out more about the book:
    [https://packt.link/dHrHU](https://packt.link/dHrHU)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的 Python Discord 工作空间，讨论并了解更多关于本书的信息：[https://packt.link/dHrHU](https://packt.link/dHrHU)。
- en: '![PIC](img/file1.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/file1.png)'
- en: '![PIC](img/file87.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/file87.png)'
- en: '[www.packt.com](https://www.packt.com)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.packt.com](https://www.packt.com)'
- en: Subscribe to our online digital library for full access to over 7,000 books
    and videos, as well as industry leading tools to help you plan your personal development
    and advance your career. For more information, please visit our website.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅我们的在线数字图书馆，全面访问超过 7,000 本书和视频，以及帮助您规划个人发展和提升职业的业界领先工具。更多信息，请访问我们的网站。
- en: Why subscribe?
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么订阅？
- en: '[nosep]Spend less time learning and more time coding with practical eBooks
    and Videos from over 4,000 industry professionals Improve your learning with Skill
    Plans built especially for you Get a free eBook or video every month Fully searchable
    for easy access to vital information Copy and paste, print, and bookmark content'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '[nosep]使用来自 4,000 多位行业专业人士的实用电子书和视频，节省学习时间，多花时间编码。通过为您量身定制的技能计划提高学习效果。每月免费获得一本电子书或视频。内容可全文搜索，便于快速访问关键信息。可复制粘贴、打印和添加书签。'
- en: Did you know that Packt offers eBook versions of every book published, with
    PDF and ePub files available? You can upgrade to the eBook version at packt.com
    and as a print book customer, you are entitled to a discount on the eBook copy.
    Get in touch with us at [customercare@packtpub.com](mailto:customercare@packtpub.com)
    for more details.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 您知道 Packt 为每本书都提供电子书版本，包括 PDF 和 ePub 文件吗？您可以在 packt.com 升级到电子书版本，作为印刷书客户，您有权获得电子书副本的折扣。有关更多详情，请联系我们
    [customercare@packtpub.com](mailto:customercare@packtpub.com)。
- en: At [www.packt.com](https://www.packt.com), you can also read a collection of
    free technical articles, sign up for a range of free newsletters, and receive
    exclusive discounts and offers on Packt books and eBooks.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [www.packt.com](https://www.packt.com) 上，您还可以阅读一系列免费的技术文章，订阅各种免费通讯，并享受 Packt
    书籍和电子书的独家折扣和优惠。
