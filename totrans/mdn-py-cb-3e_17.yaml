- en: '17'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Documentation and Style
  prefs: []
  type: TYPE_NORMAL
- en: We’ve combined two topics into a single chapter. They’re often looked at as
    ”extras” in a project’s life-cycle. The deliverable code is often considered to
    be the most important thing.
  prefs: []
  type: TYPE_NORMAL
- en: Some developers will try to argue that test cases and documentation aren’t the
    code with which the user interacts, and therefore, these additional pieces aren’t
    as important as the code.
  prefs: []
  type: TYPE_NORMAL
- en: This is false.
  prefs: []
  type: TYPE_NORMAL
- en: While it is true the users don’t interact directly with test cases, the presence
    of test cases is what gives people the confidence to use the code. Without the
    test cases, there’s no evidence the code does anything useful at all.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation provides essential information that can – eventually – be extracted
    from the code. A project with a prominent docs folder is considerably more trustworthy
    than a project that lacks documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Code ”style” is a relatively minor point. However, it’s also part of the static
    assessment of code, including type hint analysis, quality metrics, and more specific
    ”lint” checks. There are many software implementation practices that can be confusing,
    or rely on poorly documented language or library features. These are the ”fuzzy
    edges” of the software. A lint tool acts like a lint trap in an electric clothes
    dryer, catching highly flammable lint so it doesn’t clog the vents, preventing
    a fire. Removing software fuzz can prevent bugs. In some cases, it may only reduce
    the possibility of problems.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll consider linting and formatting to be quality assurance steps as important
    as test cases and static type checking.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll look at the following recipes for creating useful documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[The bare minimum: a README.rst file](ch021.xhtml#x1-9150001)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Installing Sphinx and creating documentation](ch021.xhtml#x1-9210002)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Sphinx autodoc to create the API reference](ch021.xhtml#x1-9270003)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Identifying other CI/CD tools in pyproject.toml](ch021.xhtml#x1-9330004)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using tox to run comprehensive quality checks](ch021.xhtml#x1-9390005)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '17.1 The bare minimum: a README.rst file'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter [16](ch020_split_000.xhtml#x1-86400016), the [Creating a pyproject.toml
    file](ch020_split_000.xhtml#x1-8790003) recipe described how to create a pyproject.toml
    file with a reference to a README file.
  prefs: []
  type: TYPE_NORMAL
- en: For the purposes of that recipe, we suggested the file is a summary of how to
    install and use the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also noted there are six essential questions: ”who?”, ”what?”, ”why?”, ”when?”,
    ”where?”, and ”how?” that can help in writing a short lede paragraph to describe
    the project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two common challenges when writing a README file:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing too much
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing too little
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A good package will include a separate docs folder with detailed documentation.
    The README file is only an introduction and a roadmap through the project’s various
    files and folders. In many cases, where concrete examples are called for, it’s
    important to very judiciously repeat information provided elsewhere in the documentation
    to avoid contradictions.
  prefs: []
  type: TYPE_NORMAL
- en: A project without a README is visibly deficient. Locating good examples can
    help provide guidance on what is needed. Some developers feel the code should
    somehow speak for itself, and serve as documentation. The code, unfortunately,
    only really answers the ”how?” question effectively. Questions about who the users
    are and how the software should be deployed require statements that must exist
    outside the software.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll dive into what makes a useful README file.
  prefs: []
  type: TYPE_NORMAL
- en: 17.1.1 Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A preliminary step is to choose the markup that will be used for the README
    file. There are three common choices:'
  prefs: []
  type: TYPE_NORMAL
- en: Plain text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReStructured Text (RST)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantage of plain text is the simplicity of avoiding additional formatting
    elements. The disadvantage is the lack of typographic hints like font changes
    to provide important context.
  prefs: []
  type: TYPE_NORMAL
- en: The Markdown markup has the advantage of having a small set of elements. These
    overlap with a number of common practices in writing natural-language text in
    a file. Showing indented text in a distinct font for example, and treating a paragraph
    starting with a punctuation mark and a space as a bulleted list item.
  prefs: []
  type: TYPE_NORMAL
- en: Using RST provides a comprehensive set of elements that covers a wide variety
    of typographic details. This is the preferred markup language for Python’s internal
    documentation projects. In some cases, the docs folder may be built with RST,
    but the README file may be in plain text.
  prefs: []
  type: TYPE_NORMAL
- en: The choice is free of long-term consequences, since this file is essentially
    isolated from the rest of the project’s documentation. When in doubt, it can help
    to toss a three-sided coin to make the choice. The file is not large, and making
    changes is relatively easy.
  prefs: []
  type: TYPE_NORMAL
- en: 17.1.2 How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write an introduction, or lede, with information about who would use this package,
    why they would use it, and what it does. In some cases, it may be helpful to state
    when and where an application is used; this may be needed to clarify client-vs.-server
    hosting or admin-vs.-user roles. Keep this short; details will follow. This is
    sometimes called the ”elevator pitch” because you can state it during an elevator
    ride in an office building.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summarize the important features of the software. This is often a bulleted list.
    It may include screen grabs to show a user interface, if that’s an important feature.
    It’s important to summarize and not overwrite all the details here. The details
    should be in the separate docs folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detail any requirements or dependencies. This may include hardware and operating
    system if that’s important. It must include any Python version constraints. This
    may repeat the dependencies in the pyproject.toml in the case where a library
    or package is a plug-in or extension to another package or module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide installation instructions. Often this is the python -m pip command required
    to download and install the package. If there are optional features, these will
    be summarized here, also.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide an introduction to usage or operation. This is not the user guide, but
    it is what most people will see first, and the usage section should provide a
    tidy, clear, working example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two distinct approaches to writing this, depending on what the software
    is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For modules and packages that will be imported, a doctest example is ideal.
    The README can then be tested to confirm the example really is correct and works
    as expected.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For applications, the usage may include step-by-step instructions for a common
    use case, possibly with screen-grab images.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For some simple applications, this may be the entire user guide. Generally,
    it’s only going to show a single, simple use case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Provide the type of license and a link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a section on contributing to the project. This may be a link to a separate
    contributor guide document, or it may be a short description of how to make changes
    and submit a pull request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In some cases, information about the integration, testing, and deployment may
    be helpful here. For complicated applications, the build process may involve steps
    that aren’t obvious.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This should also include information about documenting issues and making feature
    requests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It’s also polite to include credits or acknowledgments for the work of other
    contributors. This may include information about backers and sponsors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 17.1.3 How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The key ingredient of a README file is concrete examples of commands and features
    that actually work. It shows what the software is, how to install it, how to use
    it, and how to maintain it.
  prefs: []
  type: TYPE_NORMAL
- en: Examining READMEs from popular repositories reveals some common features. There’s
    a [Make a README](https://www.makeareadme.com) web site that can help create a
    file in case additional guidance is required.
  prefs: []
  type: TYPE_NORMAL
- en: While there will be additional documentation elsewhere, the README is the first
    thing most people read. In some cases, it’s also the last thing they read. Therefore,
    it must be clear what the software is and how it will be used.
  prefs: []
  type: TYPE_NORMAL
- en: 17.1.4 There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common feature of README files is badges showing the general health of the
    project. There are several sources for these graphical summaries.
  prefs: []
  type: TYPE_NORMAL
- en: The [https://shields.io](https://shields.io) site provides a number of static
    and dynamic badges. A dynamic badge can interrogate services like PyPI or GitHub
    to post the current status.
  prefs: []
  type: TYPE_NORMAL
- en: In Markdown, something like the following might be used to build a badge.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This would show a small graphic badge with pypi on the left, and the current
    PyPI release number on the right side.
  prefs: []
  type: TYPE_NORMAL
- en: '![PIC](img/file85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.1: Badge Example'
  prefs: []
  type: TYPE_NORMAL
- en: The badge can also be a link, and can provide more detailed information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 17.1.5 See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The C4 model offers additional help on how to describe software. See [https://c4model.com](https://c4model.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the [https://github.com/matiassingers/awesome-readme](https://github.com/matiassingers/awesome-readme)
    project on GitHub for good examples.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cookie-cutter templates are available with a search for ”cookiecutter” repositories:
    [GitHub search](https://github.com/search?q=cookiecutter&%3Btype=Repositories&type=repositories).
    This is quite a large list with 1000’s of cookie-cutter templates: [https://github.com/search?q=cookiecutter&amp%3Btype=Repositories&type=repositories](https://github.com/search?q=cookiecutter&%3Btype=Repositories&type=repositories).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 17.2 Installing Sphinx and creating documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A README file is a summary of the software touching on a few key points. Proper
    documentation often parallels the important topics of the README, but in more
    depth.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important adjuncts to the essential ”how-to” guides include two important topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What the software does. This is often a detailed description of the observable
    features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the software works, showing the implementation concepts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The [C4 model](https://c4model.com) suggests four tiers of abstraction in the
    description:'
  prefs: []
  type: TYPE_NORMAL
- en: The context in which an application is used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The containers in which the software runs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Component diagrams showing the architecture of the software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code diagrams showing the implementation details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This organization offers the necessary focus for documentation.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll write in RST or Markdown format. Tools like Sphinx then build output documents
    in a variety of target formats.
  prefs: []
  type: TYPE_NORMAL
- en: We often want to provide an API document with the implementation details, extracted
    from the docstrings present in our modules, classes, methods, and functions. In
    Chapter [2](ch006_split_000.xhtml#x1-840002), the [Including descriptions and
    documentation](ch006_split_000.xhtml#x1-1010003) recipe described how to add docstrings
    to various Python structures. The Sphinx tool autodoc extension extracts the docstrings
    to produce detailed API documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Further, the Sphinx tool makes it easy to decompose the documentation source
    into smaller files that are easier to edit and manage.
  prefs: []
  type: TYPE_NORMAL
- en: 17.2.1 Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll need to download and install the Sphinx tool. Generally, this is done
    with the following terminal command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using the python -m pip command ensures that we will use the pip command that
    goes with the currently active virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: There are several built-in themes, plus numerous third-party themes. See [https://sphinx-themes.org](https://sphinx-themes.org)
    for dozens of additional themes.
  prefs: []
  type: TYPE_NORMAL
- en: 17.2.2 How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure the project directory has at least the following sub-directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The source. This may use the package’s name or it may be called src.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The tests, often called tests.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The documentation, often called docs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the working directory to the docs directory with a cd or chdir command.
    From there, run the sphinx-quickstart command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will embark on an interactive conversation to gather details about your
    project and seed your docs folder with the files required to run Sphinx.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The result will be several directories and files for the documentation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: conf.py has the project configuration.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: index.rst is the root document.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Makefile can be used in all other environments to build the documentation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A make.bat for use in a Windows environment may also be present.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the index.rst file to write an initial summary. This might be copied from
    the README file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the make html command to build the initial documentation. This is a shell
    command, run in the terminal window. Make sure the current working directory is
    the docs directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 17.2.3 How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Sphinx tool starts processing by reading the root document. The root_doc
    configuration parameter names index. The source_suffix configuration parameter
    sets the suffix for this file to .rst.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, this file will name the other files in the documentation. The ..  toctree::
    directive is used to specify the other files in the documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we need to write several sections for installation, usage, maintenance,
    design, and API reference. The index.rst will have this as the primary content.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The file created by the sphinx-quickstart tool will create a preamble in front
    of the above example. We’ve omitted them from this example, since there’s no good
    reason to change them.
  prefs: []
  type: TYPE_NORMAL
- en: The toctree directive has two parameters, :maxdepth: 2 and :caption: Contents:.
    These tailor the behavior of the directive’s output.
  prefs: []
  type: TYPE_NORMAL
- en: Note that content inside a directive must be indented consistently. Often the
    initial file will have an indent of three spaces. Some editors work with a default
    indent of four spaces, so some changes to settings can be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the names in the toctree body refers to a file with the configured suffix,
    in our case, .rst.
  prefs: []
  type: TYPE_NORMAL
- en: The installation.rst, usage.rst, maintenance.rst, design.rst, and api.rst documents
    must start with a proper RST title line. The initial content can come from notes
    or the README. For more help on RST, see [Writing better docstrings with RST markup](ch006_split_000.xhtml#x1-1090004)
    in Chapter [2](ch006_split_000.xhtml#x1-840002).
  prefs: []
  type: TYPE_NORMAL
- en: The content of the api.rst document will make use of the autodoc extension.
    We’ll look at this in [Using Sphinx autodoc to create the API reference](ch021.xhtml#x1-9270003).
  prefs: []
  type: TYPE_NORMAL
- en: 17.2.4 There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many useful extensions for Sphinx. We’ll look at including a to-do
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable an extension by adding sphinx.ext.todo to the list of extensions in
    the conf.py configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will introduce two new directives to the available markup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ..  todo:: directive creates a to-do item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ..  todolist:: directive will be replaced by the content of all the todo
    items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The todo items produce no other output. It’s easy to find them; some IDEs will
    automatically scan the files for the letters todo and keep this as a list of things
    for a developer to address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Editing the conf.py configuration file to add the following line will enable
    the .. todolist:: directive to include the items in the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With this, the todo items are elevated from personal notes to public items in
    the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Sphinx comes with a number of themes that define the styles to use. The default
    theme is called alabaster. Changing to one of the other built-in themes can be
    done with the html_theme setting in the conf.py configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to the sphinxdoc theme with a setting like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Many themes have further customizations possible. Providing an html_theme_options
    dictionary tailors the theme.
  prefs: []
  type: TYPE_NORMAL
- en: 17.2.5 See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See Sphinx [https://www.sphinx-doc.org/en/master/](https://www.sphinx-doc.org/en/master/)
    for details on the Sphinx project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [https://sphinx-themes.org](https://sphinx-themes.org) for some additional
    Sphinx themes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [Using Sphinx autodoc to create the API reference](ch021.xhtml#x1-9270003)
    to see how to build API documentation from code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 17.3 Using Sphinx autodoc to create the API reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the huge strengths of Sphinx is being able to generate the API documentation
    using the autodoc extension. A series of commands can extract the docstrings from
    modules, classes, functions, and methods. Options are available to fine-tune exactly
    what members are included or excluded.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll refer back to Chapter [7](ch011_split_000.xhtml#x1-3760007), the [Extending
    a built-in collection – a list that does statistics](ch011_split_001.xhtml#x1-4250009)
    recipe. In there is this Statslist class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Because this inherits methods from the list class, there are a large number
    of available methods. By default, only those methods with docstrings, excluding
    private methods (those with a leading _), will be examined and included in the
    documentation. We have a number of other choices of which methods to include in
    the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: We can name specific methods, and only those will be documented.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can ask to include methods without docstrings; the signature will be shown.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can ask for private members (those with a leading _).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can ask for special members (those with double leading __).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can ask for inherited members to see members from the superclasses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll start by putting docstrings into this class definition. Once that task
    is finished, we can include the necessary configuration and directives in the
    documentation directory.
  prefs: []
  type: TYPE_NORMAL
- en: 17.3.1 Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is to add docstrings to the module, the class, and the methods.
    In some cases, partial docstrings are in place and the task is to expand them
    to be more complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'We might, for example, have already added the following kinds of comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This started to provide some useful documentation in an API reference. The class
    docstring has a doctest example to show how it works. The method has a docstring
    with a summary of what it does.
  prefs: []
  type: TYPE_NORMAL
- en: We need to extend this to add details on parameters, return values, and exceptions
    raised. This is done with additional syntax called a ”field list”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each item in a field list has a name and a body. The general syntax is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The Sphinx tool defines a large number of field list names that are used to
    format documentation for a function or method. Here are a few of the most useful
    ones:'
  prefs: []
  type: TYPE_NORMAL
- en: ':param name: Description of a parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ':key name: Description of a keyword parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ':raises exception: Description of the reason for the exception'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ':var name: Details for internal variables of a class that are exposed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ':returns: The return value from a method or function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These permit the writing of detailed descriptions of methods.
  prefs: []
  type: TYPE_NORMAL
- en: 17.3.2 How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edit the docstrings to include details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We might, for example, want to expand on the method definition as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For a function as simple as this, the :returns: part of the field list seems
    redundant.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the conf.py file to add the ’sphinx.ext.autodoc’ string to the list extensions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the src directory to sys.path in the conf.py configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This works because the conf.py file is a Python module, and can execute any
    Python statements. Adding the src directory to the path means Sphinx can import
    the module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Put the following directive in the api.rst document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will import the module, extract the docstring, and then attempt to create
    documentation for all of the members, including those that do not – as yet – have
    docstrings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Sphinx quickstart created a Makefile to help build the final PDF or HTML
    file from the source material; see the [Installing Sphinx and creating documentation](ch021.xhtml#x1-9210002)
    recipe for more information. Run the make html shell command in the docs directory,
    The build directory will have a static website with the project’s documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 17.3.3 How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The examination of docstrings to extract the detailed documentation starts
    with an elegantly clever feature of the Python language: the documentation string.
    The rules of RST markup continue a path toward elegant-looking documentation.
    The resulting Sphinx page looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PIC](img/file86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2: Sphinx Output Example'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the variance() method includes a ..  math:: directive with details on
    how the computation is performed. This requires some care because the LaTeXmath
    syntax involves a fair number of \ characters.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to deal with LaTeXmath in docstrings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use a ”raw” string literal and single \:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This means that no other escaped characters can be used. This may prevent using
    Unicode characters, for example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use a \ to escape the special meaning of \:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This permits including Unicode escape sequences like \N{Black Spade Suit} in
    the docstring.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In both cases, note that RST uses back-ticks ‘ around the content that has a
    role, like :math:.
  prefs: []
  type: TYPE_NORMAL
- en: 17.3.4 There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A cross-reference to another class, module, or method uses :role:‘value‘ syntax.
    The :role: portion is the specific kind of reference to help distinguish modules,
    classes, and functions. The value is a name that has a definition directive somewhere
    in the documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: A cross-reference will generate appropriately formatted text with a hypertext
    link to the the definition for the name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The :py:class:‘~stats.StatsList‘ has the role of :py:class: to create a class
    reference to the StatsList class definition. The use of ~ in the name means that
    only the last level of the name will be shown. The full path is required to generate
    a correct reference to the class. The :py:mod:‘stats‘ reference is a role of :py:mod:
    and names the stats module.'
  prefs: []
  type: TYPE_NORMAL
- en: 17.3.5 See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [Installing Sphinx and creating documentation](ch021.xhtml#x1-9210002) for
    more information on Sphinx.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See Chapter [7](ch011_split_000.xhtml#x1-3760007), the [Extending a built-in
    collection – a list that does statistics](ch011_split_001.xhtml#x1-4250009) recipe
    for the example this is built around.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See Chapter [2](ch006_split_000.xhtml#x1-840002), the [Including descriptions
    and documentation](ch006_split_000.xhtml#x1-1010003) recipe for more information
    on docstrings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 17.4 Identifying other CI/CD tools in pyproject.toml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The terms Continuous Integration (CI) and Continuous Deployment (CD) are often
    used to describe the process of publishing a Python package for use by others.
    The idea of doing a number of quality checks for integration and deployment is
    central to good software engineering. Running a test suite is one of many ways
    to affirm that software is fit for the intended purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Additional tools might include memray, which is used to check the use of memory
    resources. A tool like ruff is also an effective linter.
  prefs: []
  type: TYPE_NORMAL
- en: In Chapter [16](ch020_split_000.xhtml#x1-86400016), the [Creating a pyproject.toml
    file](ch020_split_000.xhtml#x1-8790003) recipe, and also In Chapter [15](ch019_split_000.xhtml#x1-79400015),
    the [Combining unittest and doctest tests](ch019_split_000.xhtml#x1-8250005) recipe,
    both talk about defining test tools in addition to the dependencies required to
    install the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'This suggests there are several layers of requirements (also called dependencies):'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements needed to install the application in the first place. Within this
    book, this includes projects like pydantic, beautifulsoup4, jupyterlab, and matplotlib.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional requirements for special features, plug-ins, or extensions. These aren’t
    required to install the project. They are named in configuration files and applied
    when the software is used. As an example, the pydantic package has an optional
    validator for email addresses. If your application requires this, it needs to
    be named as part of the dependency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements to run the test suite. For the most part, this has been pytest
    and mypy. It hasn’t been emphasized, but the unit test cases for the examples
    in this book all use tox for test automation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages and tools needed for development. This includes tools like memray and
    sphinx. A tool like ruff or black might be part of this set of requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dependency information is used to install the software properly. It’s also
    used to create development environments for collaboration. The Python ecosystem
    of packages is in a constant state of flux.
  prefs: []
  type: TYPE_NORMAL
- en: It’s imperative to record which versions a package was tested with. This detail
    makes it possible for tools like PIP to download and install the required components
    in the virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.1 Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to create the base pyproject.toml file. See the [Creating
    a pyproject.toml file](ch020_split_000.xhtml#x1-8790003) recipe in Chapter [16](ch020_split_000.xhtml#x1-86400016)
    for another recipe closely related to this. This should have a dependencies item
    in the [project] table. It might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When using Poetry, this information is in a slightly different format. The information
    goes in the [tool.poetry.dependencies] table. Often, we’ll build this by using
    the poetry add command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that Poetry commands offer some additional syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The ^ prefix is a sophisticated rule that permits a larger version number for
    the minor or patch level. It does not permit any changes to the left-most, major
    version number, 2, in this case. This means that any version of Pydantic at or
    after 2.6.0 will be considered. Versions above 3.x will not be considered.
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.2 How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add the test dependencies in a table named [project.optional-dependencies].
    This will be a list named test. It looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This name of test can be used by pip-compile to build a detailed requirements-test.txt
    for the test tools.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When using Poetry, this optional dependency group is in a different table. We
    use the --group option to specify the group.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The command line would look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the development dependencies in a table named [project.optional-dependencies]
    Generally, the name dev is used. It looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This name of dev can be used by pip-compile to build a detailed requirements-dev.txt
    for the entire suite of tools, plus the base dependencies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When using Poetry, the --group option specifies the group. An add command might
    include --group dev to add an item to the dev group.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 17.4.3 How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The goal is to provide ranges and patterns in the pyproject.toml file, offering
    flexibility in version identification. Separate requirements*.txt files record
    specific version numbers used for the current release. This generic-specific distinction
    supports the integration and reuse of complex packages.
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.4 There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working with tools like tox, we can create multiple virtual environments
    to test our software with variants on the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Package installation often uses a requirements.txt file with specific version
    identification. Development efforts, on the other hand, may involve a number of
    alternative virtual environments.
  prefs: []
  type: TYPE_NORMAL
- en: We can use tools like pip-compile to create the mix of packages to permit testing
    in a number of alternative virtual environments. See Workflow for layered requirements
    at [https://pip-tools.readthedocs.io/en/latest/](https://pip-tools.readthedocs.io/en/latest/)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll often create a base requirements.in file to define the common requirements
    across all virtual environments. For more information on this, see Chapter [16](ch020_split_000.xhtml#x1-86400016),
    [Dependencies and Virtual Environments](ch020_split_000.xhtml#x1-86400016). This
    is often a simple list of the packages required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This provides the baseline set of packages unique to the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then create layered requirements-dev_x.in files for various test environments.
    Each of these files will include the base layer requirements.txt and an additional
    set of constraints. The file might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We’ve included a comment that provides information on why this distinct development
    virtual environment is required. These reasons change frequently, and it’s helpful
    to leave reminders on why a particular environment is helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Within a tox.ini file, the pip-sync command will build a distinct virtual environment
    for testing. We’ll look at this in the [Using tox to run comprehensive quality
    checks](ch021.xhtml#x1-9390005) recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 17.4.5 See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Chapter [16](ch020_split_000.xhtml#x1-86400016), the [Creating a pyproject.toml
    file](ch020_split_000.xhtml#x1-8790003) recipe shows a way to start a pyproject.toml
    file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [Using tox to run comprehensive quality checks](ch021.xhtml#x1-9390005)
    for more information on using the tox tool to run a test suite.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 17.5 Using tox to run comprehensive quality checks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we start using multiple CI/CD tools, it’s essential to make sure all of
    the tools are used consistently. The virtual environments must also be built consistently.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, a tool like make was used to rebuild target files when source
    files were modified. This requires a great deal of care because Python doesn’t
    really fit the compiler-centric model of make.
  prefs: []
  type: TYPE_NORMAL
- en: Tools like tox and nox are far more helpful for running comprehensive sequences
    of test and CI/CD tools on Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 17.5.1 Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For careful software development, a variety of tools can be useful:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unit testing: We can use the built-in doctest or unittest modules. We can also
    use tools like pytest to find and run a test suite.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Benchmarking: Also called performance testing. The pytest-benchmark project
    offers a handy fixture for assuring performance meets expectations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Acceptance testing: A tool like behave or the pytest-bdd plug-in can help by
    stating acceptance test cases in Gherkin to make them more readily understood
    by product owners.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type hint checking: This is often handled by tools like mypy, pyre, pyright,
    or pytype.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Linting: While the term ”linting” is in common use, this is really better termed
    ”lint blocking”. There are numerous tools, including ruff, pylint, flake8, and
    pylama.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Style and formatting: Two popular tools for this are ruff and black.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation: This is often built with Sphinx.'
  prefs: []
  type: TYPE_NORMAL
- en: This means we’ll need to install the chosen suite of tools. One more tool can
    be helpful to find them all and bind them into a usable form. The tox tool can
    create and run tests in multiple virtual environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll need to download and install the tox tool. Generally, this is done with
    the following terminal command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Using the python -m pip command ensures that we will use the pip command that
    goes with the currently active virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: 17.5.2 How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two ways to provide configuration files for tox. We can embed the
    configuration in the pyproject.toml. While this fits the philosophy of the file,
    the tox tool doesn’t handle TOML options. It relies on a string with INI-formatted
    options in the TOML file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A better alternative is to create a separate tox.ini file. In this file, create
    an initial [tox] table with core configuration options. The following are appropriate
    for many projects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For applications or scripts that don’t need to be installed, the following
    two lines are appropriate to avoid trying to prepare and install a package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For packages that will be distributed and installed, add nothing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a [testenv] table with general information about test environments. In
    some cases, a single environment is sufficient. When multiple, distinct environments
    are required, there will be multiple [testenv] sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside this [testenv] table, the deps= value lists the test tools that will
    be used. It might look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The tox tool uses a pip command to build the items listed in the deps section.
    It can, of course, be used to install all of the requirements. Using -r requirements.txt
    will do this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It’s somewhat more efficient to use the pip-sync tool because it can avoid reinstalling
    any dependencies that are already present in the environment. When using pip-sync,
    we do not use -r requirements.txt in the deps= list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If pip-sync is being used to install requirements, this is given as the commands_pre=
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If any unique environment variables are required, they’re set by the setenv=
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, provide the sequence of commands to execute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After closing this file, use the following command to run the test suite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 17.5.3 How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A great many assumptions and defaults are built into tools like tox. This saves
    us from having to write clever shell scripts or tinker with the assumptions present
    in a makefile. Instead, we can provide a few lines of configuration and a sequence
    of commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, using tox always looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The final congratulations is an apt summary.
  prefs: []
  type: TYPE_NORMAL
- en: 17.5.4 There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In many cases, a project has multiple virtual environments. Virtual environments
    are distinguished using extended names. These will have the general pattern of
    [testenv:name] where name is something descriptive.
  prefs: []
  type: TYPE_NORMAL
- en: In the [tox] section of the configuration, env_list lists the environments to
    process automatically. Environments not listed can be executed manually by using
    the -e option on the tox command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test with another version of Python, we add the following to our tox.ini
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This will inherit the details of the master testenv settings. An override is
    applied to change the base Python version to 3.11.
  prefs: []
  type: TYPE_NORMAL
- en: The py311 name is a handy tox shorthand for a longer specification like python>=3.11\.
    The tool will search the system-wide PATH for candidate Python implementations.
    To test with multiple Python versions, they all need to be installed in directories
    named in the PATH.
  prefs: []
  type: TYPE_NORMAL
- en: 17.5.5 See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [Identifying other CI/CD tools in pyproject.toml](ch021.xhtml#x1-9330004)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See Chapter [15](ch019_split_000.xhtml#x1-79400015) for more information on
    testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See Chapter [16](ch020_split_000.xhtml#x1-86400016) for recipes related to virtual
    environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [https://tox.wiki/en/latest/](https://tox.wiki/en/latest/) for more information
    on the tox tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [https://nox.thea.codes/en/stable/](https://nox.thea.codes/en/stable/) for
    information on the nox tool, which offers similar functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community Discord space
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our Python Discord workspace to discuss and find out more about the book:
    [https://packt.link/dHrHU](https://packt.link/dHrHU)'
  prefs: []
  type: TYPE_NORMAL
- en: '![PIC](img/file1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![PIC](img/file87.png)'
  prefs: []
  type: TYPE_IMG
- en: '[www.packt.com](https://www.packt.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Subscribe to our online digital library for full access to over 7,000 books
    and videos, as well as industry leading tools to help you plan your personal development
    and advance your career. For more information, please visit our website.
  prefs: []
  type: TYPE_NORMAL
- en: Why subscribe?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[nosep]Spend less time learning and more time coding with practical eBooks
    and Videos from over 4,000 industry professionals Improve your learning with Skill
    Plans built especially for you Get a free eBook or video every month Fully searchable
    for easy access to vital information Copy and paste, print, and bookmark content'
  prefs: []
  type: TYPE_NORMAL
- en: Did you know that Packt offers eBook versions of every book published, with
    PDF and ePub files available? You can upgrade to the eBook version at packt.com
    and as a print book customer, you are entitled to a discount on the eBook copy.
    Get in touch with us at [customercare@packtpub.com](mailto:customercare@packtpub.com)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: At [www.packt.com](https://www.packt.com), you can also read a collection of
    free technical articles, sign up for a range of free newsletters, and receive
    exclusive discounts and offers on Packt books and eBooks.
  prefs: []
  type: TYPE_NORMAL
