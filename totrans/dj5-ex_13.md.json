["```py\nfrom django.views.generic.list import ListView\nfrom .models import Course\nclass ManageCourseListView(ListView):\n    model = Course\n    template_name = 'courses/manage/course/list.html'\ndef get_queryset(self):\n        qs = super().get_queryset()\n        return qs.filter(owner=self.request.user) \n```", "```py\n**from** **django.urls** **import** **reverse_lazy**\n**from** **django.views.generic.edit** **import** **CreateView, DeleteView, UpdateView**\nfrom django.views.generic.list import ListView\nfrom .models import Course\n**class****OwnerMixin****:**\n**def****get_queryset****(****self****):**\n **qs =** **super****().get_queryset()**\n**return** **qs.****filter****(owner=self.request.user)**\n**class****OwnerEditMixin****:**\n**def****form_valid****(****self, form****):**\n **form.instance.owner = self.request.user**\n**return****super****().form_valid(form)**\n**class****OwnerCourseMixin****(****OwnerMixin****):**\n **model = Course**\n **fields = [****'subject'****,** **'title'****,** **'slug'****,** **'overview'****]**\n **success_url = reverse_lazy(****'manage_course_list'****)**\n**class****OwnerCourseEditMixin****(OwnerCourseMixin, OwnerEditMixin):**\n **template_name =** **'courses/manage/course/form.html'**\nclass ManageCourseListView(**OwnerCourseMixin,** ListView):\n    template_name = 'courses/manage/course/list.html'\n**class****CourseCreateView****(OwnerCourseEditMixin, CreateView):**\n**pass**\n**class****CourseUpdateView****(OwnerCourseEditMixin, UpdateView):**\n**pass**\n**class****CourseDeleteView****(OwnerCourseMixin, DeleteView):**\n **template_name =** **'courses/manage/course/delete.html'** \n```", "```py\npython manage.py runserver \n```", "```py\nfrom django.contrib.auth.mixins import (\n    LoginRequiredMixin,\n    PermissionRequiredMixin\n) \n```", "```py\nclass OwnerCourseMixin(\n    OwnerMixin**, LoginRequiredMixin, PermissionRequiredMixin**\n):\n    model = Course\n    fields = ['subject', 'title', 'slug', 'overview']\n    success_url = reverse_lazy('manage_course_list') \n```", "```py\nclass ManageCourseListView(OwnerCourseMixin, ListView):\n    template_name = 'courses/manage/course/list.html'\n **permission_required =** **'courses.view_course'**\nclass CourseCreateView(OwnerCourseEditMixin, CreateView):\n **permission_required =** **'courses.add_course'**\nclass CourseUpdateView(OwnerCourseEditMixin, UpdateView):\n **permission_required =** **'courses.change_course'**\nclass CourseDeleteView(OwnerCourseMixin, DeleteView):\n    template_name = 'courses/manage/course/delete.html'\n **permission_required =** **'courses.delete_course'** \n```", "```py\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\n    path(\n        'mine/',\n        views.ManageCourseListView.as_view(),\n        name='manage_course_list'\n    ),\n    path(\n        'create/',\n        views.CourseCreateView.as_view(),\n        name='course_create'\n    ),\n    path(\n        '<pk>/edit/',\n        views.CourseUpdateView.as_view(),\n        name='course_edit'\n    ),\n    path(\n        '<pk>/delete/',\n        views.CourseDeleteView.as_view(),\n        name='course_delete'\n    ),\n] \n```", "```py\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\nfrom django.contrib.auth import views as auth_views\nfrom django.urls import **include,** path\nurlpatterns = [\n    path(\n        'accounts/login/', auth_views.LoginView.as_view(), name='login'\n    ),\n    path(\n        'accounts/logout/',\n        auth_views.LogoutView.as_view(),\n        name='logout'\n    ),\n    path('admin/', admin.site.urls),\n **path(****'course/'****, include(****'courses.urls'****)),**\n]\nif settings.DEBUG:\n    urlpatterns += static(\n        settings.MEDIA_URL, document_root=settings.MEDIA_ROOT\n    ) \n```", "```py\ncourses/\n    manage/\n        course/\n            list.html\n            form.html\n            delete.html \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}My courses{% endblock %}\n{% block content %}\n  <h1>My courses</h1>\n<div class=\"module\">\n    {% for course in object_list %}\n      <div class=\"course-info\">\n<h3>{{ course.title }}</h3>\n<p>\n<a href=\"{% url \"course_edit\" course.id %}\">Edit</a>\n<a href=\"{% url \"course_delete\" course.id %}\">Delete</a>\n</p>\n</div>\n    {% empty %}\n      <p>You haven't created any courses yet.</p>\n    {% endfor %}\n    <p>\n<a href=\"{% url \"course_create\" %}\" class=\"button\">Create new course</a>\n</p>\n</div>\n{% endblock %} \n```", "```py\npython manage.py runserver \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}\n  {% if object %}\n    Edit course \"{{ object.title }}\"\n  {% else %}\n    Create a new course\n  {% endif %}\n{% endblock %}\n{% block content %}\n  <h1>\n    {% if object %}\n      Edit course \"{{ object.title }}\"\n    {% else %}\n      Create a new course\n    {% endif %}\n  </h1>\n<div class=\"module\">\n<h2>Course info</h2>\n<form method=\"post\">\n      {{ form.as_p }}\n      {% csrf_token %}\n      <p><input type=\"submit\" value=\"Save course\"></p>\n</form>\n</div>\n{% endblock %} \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Delete course{% endblock %}\n{% block content %}\n  <h1>Delete course \"{{ object.title }}\"</h1>\n<div class=\"module\">\n<form action=\"\" method=\"post\">\n      {% csrf_token %}\n      <p>Are you sure you want to delete \"{{ object }}\"?</p>\n<input type=\"submit\" value=\"Confirm\">\n</form>\n</div>\n{% endblock %} \n```", "```py\nfrom django.forms.models import inlineformset_factory\nfrom .models import Course, Module\nModuleFormSet = inlineformset_factory(\n    Course,\n    Module,\n    fields=['title', 'description'],\n    extra=2,\n    can_delete=True\n) \n```", "```py\nfrom django.shortcuts import get_object_or_404, redirect\nfrom django.views.generic.base import TemplateResponseMixin, View\nfrom .forms import ModuleFormSet\nclass CourseModuleUpdateView(TemplateResponseMixin, View):\n    template_name = 'courses/manage/module/formset.html'\n    course = None\ndef get_formset(self, data=None):\n        return ModuleFormSet(instance=self.course, data=data)\n    def dispatch(self, request, pk):\n        self.course = get_object_or_404(\n            Course, id=pk, owner=request.user\n        )\n        return super().dispatch(request, pk)\n    def get(self, request, *args, **kwargs):\n        formset = self.get_formset()\n        return self.render_to_response(\n            {'course': self.course, 'formset': formset}\n        )\n    def post(self, request, *args, **kwargs):\n        formset = self.get_formset(data=request.POST)\n        if formset.is_valid():\n            formset.save()\n            return redirect('manage_course_list')\n        return self.render_to_response(\n            {'course': self.course, 'formset': formset}\n        ) \n```", "```py\npath(\n    '<pk>/module/',\n    views.CourseModuleUpdateView.as_view(),\n    name='course_module_update'\n), \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}\n  Edit \"{{ course.title }}\"\n{% endblock %}\n{% block content %}\n  <h1>Edit \"{{ course.title }}\"</h1>\n<div class=\"module\">\n<h2>Course modules</h2>\n<form method=\"post\">\n      {{ formset }}\n      {{ formset.management_form }}\n      {% csrf_token %}\n      <input type=\"submit\" value=\"Save modules\">\n</form>\n</div>\n{% endblock %} \n```", "```py\n<a href=\"{% url \"course_edit\" course.id %}\">Edit</a>\n<a href=\"{% url \"course_delete\" course.id %}\">Delete</a>\n**<a href=****\"{% url \"****course_module_update****\" course.id %}\"****>Edit modules</a>** \n```", "```py\nfrom django.apps import apps\nfrom django.forms.models import modelform_factory\nfrom .models import Module, Content\nclass ContentCreateUpdateView(TemplateResponseMixin, View):\n    module = None\n    model = None\n    obj = None\n    template_name = 'courses/manage/content/form.html'\ndef get_model(self, model_name):\n        if model_name in ['text', 'video', 'image', 'file']:\n            return apps.get_model(\n                app_label='courses', model_name=model_name\n            )\n        return None\ndef get_form(self, model, *args, **kwargs):\n        Form = modelform_factory(\n            model, exclude=['owner', 'order', 'created', 'updated']\n        )\n        return Form(*args, **kwargs)\n    def dispatch(self, request, module_id, model_name, id=None):\n        self.module = get_object_or_404(\n            Module, id=module_id, course__owner=request.user\n        )\n        self.model = self.get_model(model_name)\n        if id:\n            self.obj = get_object_or_404(\n                self.model, id=id, owner=request.user\n            )\n        return super().dispatch(request, module_id, model_name, id) \n```", "```py\ndef get(self, request, module_id, model_name, id=None):\n    form = self.get_form(self.model, instance=self.obj)\n    return self.render_to_response(\n        {'form': form, 'object': self.obj}\n    )\ndef post(self, request, module_id, model_name, id=None):\n    form = self.get_form(\n        self.model,\n        instance=self.obj,\n        data=request.POST,\n        files=request.FILES\n    )\n    if form.is_valid():\n        obj = form.save(commit=False)\n        obj.owner = request.user\n        obj.save()\n        if not id:\n            # new content\n            Content.objects.create(module=self.module, item=obj)\n        return redirect('module_content_list', self.module.id)\n    return self.render_to_response(\n        {'form': form, 'object': self.obj}\n    ) \n```", "```py\npath(\n    'module/<int:module_id>/content/<model_name>/create/',\n    views.ContentCreateUpdateView.as_view(),\n    name='module_content_create'\n),\npath(\n    'module/<int:module_id>/content/<model_name>/<id>/',\n    views.ContentCreateUpdateView.as_view(),\n    name='module_content_update'\n), \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}\n  {% if object %}\n    Edit content \"{{ object.title }}\"\n  {% else %}\n    Add new content\n  {% endif %}\n{% endblock %}\n{% block content %}\n  <h1>\n    {% if object %}\n      Edit content \"{{ object.title }}\"\n    {% else %}\n      Add new content\n    {% endif %}\n  </h1>\n<div class=\"module\">\n<h2>Course info</h2>\n<form action=\"\" method=\"post\" enctype=\"multipart/form-data\">\n      {{ form.as_p }}\n      {% csrf_token %}\n      <p><input type=\"submit\" value=\"Save content\"></p>\n</form>\n</div>\n{% endblock %} \n```", "```py\npython manage.py shell \n```", "```py\n>>> from courses.models import Module\n>>> Module.objects.latest('id').id\n6 \n```", "```py\nclass ContentDeleteView(View):\n    def post(self, request, id):\n        content = get_object_or_404(\n            Content, id=id, module__course__owner=request.user\n        )\n        module = content.module\n        content.item.delete()\n        content.delete()\n        return redirect('module_content_list', module.id) \n```", "```py\npath(\n    'content/<int:id>/delete/',\n    views.ContentDeleteView.as_view(),\n    name='module_content_delete'\n), \n```", "```py\nclass ModuleContentListView(TemplateResponseMixin, View):\n    template_name = 'courses/manage/module/content_list.html'\ndef get(self, request, module_id):\n        module = get_object_or_404(\n            Module, id=module_id, course__owner=request.user\n        )\n        return self.render_to_response({'module': module}) \n```", "```py\npath(\n    'module/<int:module_id>/',\n    views.ModuleContentListView.as_view(),\n    name='module_content_list'\n), \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}\n  Module {{ module.order|add:1 }}: {{ module.title }}\n{% endblock %}\n{% block content %}\n{% with course=module.course %}\n  <h1>Course \"{{ course.title }}\"</h1>\n<div class=\"contents\">\n<h3>Modules</h3>\n<ul id=\"modules\">\n      {% for m in course.modules.all %}\n        <li data-id=\"{{ m.id }}\" {% if m == module %}\n class=\"selected\"{% endif %}>\n<a href=\"{% url \"module_content_list\" m.id %}\">\n<span>\n              Module <span class=\"order\">{{ m.order|add:1 }}</span>\n</span>\n<br>\n            {{ m.title }}\n          </a>\n</li>\n      {% empty %}\n        <li>No modules yet.</li>\n      {% endfor %}\n    </ul>\n<p><a href=\"{% url \"course_module_update\" course.id %}\">\n    Edit modules</a></p>\n</div>\n<div class=\"module\">\n<h2>Module {{ module.order|add:1 }}: {{ module.title }}</h2>\n<h3>Module contents:</h3>\n<div id=\"module-contents\">\n      {% for content in module.contents.all %}\n        <div data-id=\"{{ content.id }}\">\n          {% with item=content.item %}\n            <p>{{ item }}</p>\n<a href=\"#\">Edit</a>\n<form action=\"{% url \"module_content_delete\" content.id %}\"\n method=\"post\">\n<input type=\"submit\" value=\"Delete\">\n              {% csrf_token %}\n            </form>\n          {% endwith %}\n        </div>\n      {% empty %}\n        <p>This module has no contents yet.</p>\n      {% endfor %}\n    </div>\n<h3>Add new content:</h3>\n<ul class=\"content-types\">\n<li>\n<a href=\"{% url \"module_content_create\" module.id \"text\" %}\">\n          Text\n        </a>\n</li>\n<li>\n<a href=\"{% url \"module_content_create\" module.id \"image\" %}\">\n          Image\n        </a>\n</li>\n<li>\n<a href=\"{% url \"module_content_create\" module.id \"video\" %}\">\n          Video\n        </a>\n</li>\n<li>\n<a href=\"{% url \"module_content_create\" module.id \"file\" %}\">\n          File\n        </a>\n</li>\n</ul>\n</div>\n{% endwith %}\n{% endblock %} \n```", "```py\ntemplatetags/\n    __init__.py\n    course.py \n```", "```py\nfrom django import template\nregister = template.Library()\n@register.filter\ndef model_name(obj):\n    try:\n        return obj._meta.model_name\n    except AttributeError:\n        return None \n```", "```py\n{% load course %} \n```", "```py\n<p>{{ item }}</p>\n<a href=\"#\">Edit</a> \n```", "```py\n<p>{{ item }} **({{ item|model_name }})**</p>\n<a href=\"**{% url \"****module_content_update****\" module.id item****|model_name item.id %}**\">\n  Edit\n</a> \n```", "```py\n<a href=\"{% url \"course_module_update\" course.id %}\">Edit modules</a>\n**{% if course.modules.count > 0 %}**\n**<****a****href****=****\"{% url \"****module_content_list****\"** **course.modules.first.id %}\"****>**\n **Manage contents**\n**</****a****>**\n**{% endif %}** \n```", "```py\npython manage.py runserver \n```", "```py\npython -m pip install django-braces==1.15.0 \n```", "```py\nfrom braces.views import CsrfExemptMixin, JsonRequestResponseMixin\nclass ModuleOrderView(CsrfExemptMixin, JsonRequestResponseMixin, View):\n    def post(self, request):\n        for id, order in self.request_json.items():\n            Module.objects.filter(\n                id=id, course__owner=request.user\n            ).update(order=order)\n        return self.render_json_response({'saved': 'OK'}) \n```", "```py\nclass ContentOrderView(CsrfExemptMixin, JsonRequestResponseMixin, View):\n    def post(self, request):\n        for id, order in self.request_json.items():\n            Content.objects.filter(\n                id=id, module__course__owner=request.user\n            ).update(order=order)\n        return self.render_json_response({'saved': 'OK'}) \n```", "```py\npath(\n    'module/order/',\n    views.ModuleOrderView.as_view(),\n    name='module_order'\n),\npath(\n    'content/order/',\n    views.ContentOrderView.as_view(),\n    name='content_order'\n), \n```", "```py\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    # ...\n  </head>\n<body>\n<div id=\"header\">\n      # ...\n    </div>\n<div id=\"content\">\n      {% block content %}\n      {% endblock %}\n    </div>\n **{% block include_js %}**\n **{% endblock %}**\n<script>\n document.addEventListener('DOMContentLoaded', (event) => {\n // DOM loaded\n        {% block domready %}\n        {% endblock %}\n      })\n </script>\n</body>\n</html> \n```", "```py\n# ...\n{% block content %}\n  # ...\n{% endblock %}\n**{% block include_js %}**\n**<****script****src****=****\"https://cdnjs.cloudflare.com/ajax/libs/html5sortable/0.13.3/html5sortable.min.js\"****></****script****>**\n**{% endblock %}** \n```", "```py\n# ...\n{% block content %}\n  # ...\n{% endblock %}\n{% block include_js %}\n  <script src=\"img/html5sortable.min.js\"></script>\n{% endblock %}\n**{% block domready %}**\n **var options = {**\n **method: 'POST',**\n **mode: 'same-origin'**\n **}**\n **const moduleOrderUrl = '{% url \"module_order\" %}';**\n**{% endblock %}** \n```", "```py\n{% block domready %}\n  var options = {\n      method: 'POST',\n      mode: 'same-origin'\n  }\n  const moduleOrderUrl = '{% url \"module_order\" %}';\n **sortable('#modules', {**\n **forcePlaceholderSize: true,**\n **placeholderClass: 'placeholder'**\n **});**\n{% endblock %} \n```", "```py\n{% block domready %}\n  var options = {\n      method: 'POST',\n      mode: 'same-origin'\n  }\n  const moduleOrderUrl = '{% url \"module_order\" %}';\n  sortable('#modules', {\n    forcePlaceholderSize: true,\n    placeholderClass: 'placeholder'\n  })**[0].addEventListener('sortupdate', function(e) {**\n **modulesOrder = {};**\n **var modules = document.querySelectorAll('#modules li');**\n **modules.forEach(function (module, index) {**\n **// update module index**\n **modulesOrder[module.dataset.id] = index;**\n **// update index in HTML element**\n **module.querySelector('.order').innerHTML = index + 1;**\n **});**\n **// add new order to the HTTP request options**\n **options['body'] = JSON.stringify(modulesOrder);**\n **// send HTTP request**\n **fetch(moduleOrderUrl, options)**\n **});**\n{% endblock %} \n```", "```py\n{% block domready %}\n  // ...\n **const contentOrderUrl = '{% url \"content_order\" %}';**\n **sortable('#module-contents', {**\n **forcePlaceholderSize: true,**\n **placeholderClass: 'placeholder'**\n **})[0].addEventListener('sortupdate', function(e) {**\n **contentOrder = {};**\n **var contents = document.querySelectorAll('#module-contents div');**\n **contents.forEach(function (content, index) {**\n **// update content index**\n **contentOrder[content.dataset.id] = index;**\n **});**\n **// add new order to the HTTP request options**\n **options['body'] = JSON.stringify(contentOrder);**\n **// send HTTP request**\n **fetch(contentOrderUrl, options)**\n **});**\n{% endblock %} \n```"]