- en: Chapter 6. IPython and IronPython in PTVS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will see how PTVS interacts with two particularly useful
    Python extensions: IPython and IronPython.'
  prefs: []
  type: TYPE_NORMAL
- en: Despite their names, they are very different from each other. IPython is more
    oriented toward extending the REPL interface in a way that can help you have a
    more interactive approach to the code, providing you with features such as on-the-fly
    graph plotting. IronPython provides .NET class access to your Python code and
    integrates Python in .NET applications.
  prefs: []
  type: TYPE_NORMAL
- en: IPython in PTVS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPython is a command shell for interactive computing for Python (also available
    for other language integrations) that offers enhanced type introspection—the possibility
    to examine the type or properties of an object at runtime—rich media, and REPL
    extensions.
  prefs: []
  type: TYPE_NORMAL
- en: As an interactive shell tool used for data analysis and math graph plotting,
    IPython comes from an academic-scientific computing background, but appeals to
    data scientists through the power of graphing integration.
  prefs: []
  type: TYPE_NORMAL
- en: An interesting feature of IPython is its ability to plot mathematical graphs
    of expressions in an interactive way, much like MATLAB.
  prefs: []
  type: TYPE_NORMAL
- en: PTVS supports IPython libraries and provides the ability to integrate the graph
    that is generated inside REPL.
  prefs: []
  type: TYPE_NORMAL
- en: We need to install IPython and its supporting dependencies such as matplotlib
    from a distribution that has all the code already compiled for Windows OS. The
    distribution of this package can be downloaded from [http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy-stack](http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy-stack).
    This web page, from the University of California in Irivine, contains an unofficial
    repository of Windows binaries for a large number of Python packages. There are
    different packages that are available, which depend on the version of the Python
    interpreter and the operating system you are using. For our proposal, we are going
    to install Python 2.7 for Windows 32-bit.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As an alternative, you can use the Python (x, y) distribution that contains
    a whole range of Python libraries for scientific and engineering software. The
    installer can be downloaded from [https://code.google.com/p/pythonxy/](https://code.google.com/p/pythonxy/).
  prefs: []
  type: TYPE_NORMAL
- en: Running the installer gives you the ability to choose the libraries it offers;
    for our scope, ensure that you include the SciPy libraries and IPython.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the libraries from the source of your choice, we can test the
    whole installation by executing the following command from the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This command executes the IPython environment with the `pylab` extension. Also,
    it permits you to use the matplotlib library to plot graphs; this is a Python-plotting
    library that can be used with Python to plot graphs using mathematical functions.
    As an example, let''s try to plot a histogram out of 10,000 random numbers that
    are clustered in 100 samples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Typing the preceding code into the IPython shell will display the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IPython in PTVS](img/8687OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For more details on what the matplotlib library can do, refer to the library
    website at [http://matplotlib.org/](http://matplotlib.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Now that IPython is up and working, let's instruct PTVS in a way that will allow
    REPL to talk to IPython to extend it along with its plotting capabilities. First,
    we need to find the Python interpreter's REPL options. You can quickly locate
    this from the **Python Environments** window by clicking on the **Interactive
    Options** label in the Python environment that is being used.
  prefs: []
  type: TYPE_NORMAL
- en: '![IPython in PTVS](img/8687OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will bring up the **Options** dialog box, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IPython in PTVS](img/8687OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Interactive Mode** drop-down menu, the different modes of the PTVS
    REPL tool are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard**: This mode offers the default REPL interactive window in which
    we can execute the Python code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IPython**: This mode permits us to see the graphs directly inside REPL when
    REPL interacts with the PyLab library directly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IPython w/o PyLab**: This mode permits us to see the graphs that are rendered
    in an independent window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our example, we are choosing the IPython mode. Now that we have set up
    **Interactive Window**, let''s see how Visual Studio acts. Instead of writing
    the code of our previous example inside **Interactive Window**, you can write
    it in the code editor and then execute it in REPL through the **Send to Interactive
    Window** option in the contextual menu. As we have seen in [Chapter 2](ch02.html
    "Chapter 2. Python Tools in Visual Studio"), *Python Tools in Visual Studio*,
    the following is the result to be expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IPython in PTVS](img/8687OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also execute the code in the file in a way through which we''ll only
    see the resulting graph in an external window. However, before we can do this,
    we need to add some other code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IPython in PTVS](img/8687OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first line in the preceding screenshot will reference the `pylab` libraries,
    and the last line will render the plot. To run the code in an external window,
    right-click on the file node in the **Solution Explorer** window and select the
    **Start without debugging** command as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IPython in PTVS](img/8687OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will execute the code in the console, and the resulting rendering window
    will appear at the end of the execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IPython in PTVS](img/8687OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The matplotlib library also offers the possibility to save the resulting plot
    into a file with just a line of code by adding the `savefig` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IPython in PTVS](img/8687OS_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, the resulting graph will be saved as a `plot.png` file in the
    root of the project folder.
  prefs: []
  type: TYPE_NORMAL
- en: For more in-depth functionalities and to dig deeper into the plotting functionalities
    offered by the IPython integration, please refer to the IPython website at [http://ipython.org/](http://ipython.org/).
    You can also refer to the matplotlib website at [http://matplotlib.org/](http://matplotlib.org/),
    which contains great documentation on this subject that are correlated with examples.
  prefs: []
  type: TYPE_NORMAL
- en: The only limitation of IPython is the fact that it cannot be used with the other
    library, IronPython, that we are going to explore right now. IronPython currently
    does not support IPython, despite the fact that you can select it on the **Interactive
    Options** form.
  prefs: []
  type: TYPE_NORMAL
- en: IronPython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IronPython is an open source implementation of the Python language which is
    tightly integrated with the Microsoft .NET framework. This means that you can
    use the .NET libraries through IronPython in your Python applications or use Python
    scripts inside .NET languages.
  prefs: []
  type: TYPE_NORMAL
- en: Using .NET classes in Python code with IronPython
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set up IronPython in PTVS, first we need to download the IronPython installer
    from the official website, [http://ironpython.net/](http://ironpython.net/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you download the version of the package for your operating system, install
    the package by double-clicking on it. After the installation is complete, you
    will see that a new interpreter is available in the **Python Environments** window
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using .NET classes in Python code with IronPython](img/8687OS_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the example shown in the preceding screenshot, there are actually two interpreters.
    This is because the 64-bit version of IronPython is installed, which results in
    the installation of both the 32-bit and 64-bit versions on the machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to create a new IronPython project to learn how to interact with
    the .NET libraries from Python. Navigate to **File** | **New** | **Project** to
    create a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using .NET classes in Python code with IronPython](img/8687OS_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open the **New Project** dialog box. Select the **IronPython Application**
    template and assign a project name to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using .NET classes in Python code with IronPython](img/8687OS_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will create a normal Python project, except that the environment for the
    project will be IronPython instead of Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using .NET classes in Python code with IronPython](img/8687OS_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can find IronPython indicated as the environment in Solution Explorer
  prefs: []
  type: TYPE_NORMAL
- en: Now you can access .NET libraries from inside the Python applications. The system's
    .NET namespace is referenced by default, so we can start using the elements inside
    it to see how to interact with the base classes in Python.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, let's see how to create a **Globally Unique Identifier** (**GUID**),
    play with the `date` function, and then print them out to the console; we're doing
    all of this using Python by accessing the .NET classes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using .NET classes in Python code with IronPython](img/8687OS_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example of using .NET classes inside Python
  prefs: []
  type: TYPE_NORMAL
- en: As shown, we imported the `Console`, `Guid`, and `DateTime` .NET objects and
    used them in the code to create a new GUID object (line **3**), get the current
    UTC date and time (line **4**), and add 100 days to it (line **5**). After this,
    we used the .NET console object to print out the result (line **7** to **11**)
    and waited for the user to press the *Enter* key to close the application. Obviously,
    we could have used the normal Python `print` command instead of the `Console`
    object to print out the result. However, since there is no distinction between
    Python and the .NET code with IronPython, we used the `Console` object for the
    sake of seeing different object integrations in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The execution of the code will provide us with the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using .NET classes in Python code with IronPython](img/8687OS_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also take advantage of other .NET namespaces outside of the Core System
    assembly. For example, if we want to use the `System.Xml` assembly, which is a
    .NET core library that is installed in the **Global Assembly Cache** (**GAC**)
    of the system, all we need to do is to load it in our code using the load functionality
    of the `clr` module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it can be referenced in the code, and the IntelliSense functionalities
    become available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using .NET classes in Python code with IronPython](img/8687OS_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .NET types are exposed as Python classes, and you can do many of the same operations
    on .NET types as with Python classes. In either case, you create an instance by
    calling the type. Even for complex types, `XmlDocument` for example, you don't
    need to instantiate it as you do in .NET; it will be done by the IronPython runtime
    under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using .NET classes in Python code with IronPython](img/8687OS_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An example of using the XmlDocument class in Python
  prefs: []
  type: TYPE_NORMAL
- en: Using the Python code in .NET with IronPython
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have learned how we can interact with .NET classes from the Python
    code; now let's take a look at how to use Python inside our .NET code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, let''s create a new C# console application. To be able to run the
    Python code from your .NET code, you need to reference two assemblies that are
    necessary to add the integration functionality for our .NET application: `IronPython`
    and `Microsoft.Scripting`. To add a reference to an assembly in a .NET application,
    right-click on the **Reference** node of the **Solution Explorer** window and
    select the **Add Reference** menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Python code in .NET with IronPython](img/8687OS_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open the **Reference Manager** dialog window. The two assemblies
    that we need are located in the **Extensions** list, which can be activated by
    clicking on the tree view on the left-hand side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Python code in .NET with IronPython](img/8687OS_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the two assemblies are selected from the list by placing a tick in the
    checkboxes next to them, click on **OK**. The references to these assemblies are
    made in the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see them listed in the **Reference** list in the **Solution Explorer**
    window as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Python code in .NET with IronPython](img/8687OS_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s create a new class in our project that contains the code for our
    Python integration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Python code in .NET with IronPython](img/8687OS_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This code will create `scripting engine` for Python (line **8**), define the
    string that contains the Python code to be executed (lines **12**-**18**), and
    then execute the Python script. Pay special attention to the string that contains
    the Python code. It has to be indented correctly; otherwise, the interpreter will
    return an indentation error.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the code and see the result in the console, add the following code into
    the `Program.cs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Python code in .NET with IronPython](img/8687OS_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will execute our function defined earlier and expect the user to press
    *Enter*. Run the application to see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Python code in .NET with IronPython](img/8687OS_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also call variables and functions defined in .NET applications and use
    them inside the Python code. To do this, we need to define a scope and pass it
    as an argument to the `Execute` method in a way that the interpreter can pass
    those elements to the Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extend our previous `Execute` method by adding a scope that contains an `Add`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Python code in .NET with IronPython](img/8687OS_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We created a scope and the `Add` function with a lambda function (lines **13**
    and **14**); then, we added a new Python command (line **23**) that invokes this
    function. Finally, we executed the Python code and passed the scope variable to
    the script (line **27**). Executing the program will display the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Python code in .NET with IronPython](img/8687OS_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In our last example, we will see how to execute a code that comes from an external
    file. Let''s say that we have a Python file that contains the following code,
    which is actually the code we had as a string in our last example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Python code in .NET with IronPython](img/8687OS_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is how we can execute the file from inside our .NET application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Python code in .NET with IronPython](img/8687OS_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the example, we define the scripting engine and the scope. Instead of defining
    and executing the Python code from inside the .NET code, we are loading it from
    an external file, passing the scope to the interpreter, and executing it (line
    **40**).
  prefs: []
  type: TYPE_NORMAL
- en: The possibilities offered by integrating Python code into .NET applications
    are really endless. Sharing the scope variables with the interpreter opens up
    a possibility to use existent Python libraries from inside the .NET applications
    or use Python as a scripting language inside our application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we looked at two ways to extend PTVS and Python in Visual
    Studio in general along with two powerful tools: IPython and IronPython. IPython
    is more related to plain Python language and IronPython is more integrated with
    the Microsoft .NET framework.'
  prefs: []
  type: TYPE_NORMAL
- en: Both tools show new ways to use and interact with Python, providing new frontiers
    to explore with this powerful language; all made possible from inside Visual Studio
    and PTVS.
  prefs: []
  type: TYPE_NORMAL
- en: With this chapter, our voyage to explore the Python tools in Visual Studio ends.
    We tried to show Python developers the power of Visual Studio and the amount of
    automatism and help that the Microsoft IDE offers; we also explored and learned
    the possibility of using Python as a language to create new powerful applications.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the tools themselves, we also went through the possible problems and
    workarounds of using Python libraries on the Microsoft Windows operating system.
    We also looked at the topic of exploring Django in Visual Studio and also some
    of the powerful libraries it offers to accelerate and manage the application's
    life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: We have only scratched the surface, but we hope that this book has provided
    you with a deep insight into PTVS and has sparked the curiosity for you to go
    deeper and explore more.
  prefs: []
  type: TYPE_NORMAL
- en: Happy coding!
  prefs: []
  type: TYPE_NORMAL
