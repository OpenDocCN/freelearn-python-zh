- en: Chapter 8. Talking to Bots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wow, bots?! Really? Will I learn to build bots for fun or my business use case?
    Yes, of course this chapter takes you to the brand new world of bots with Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a moody Telegram bot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Different types of bots: stateless, stateful, and smart'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A smart bot with artificial intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating business processes with bots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last couple of decades have been an age of digital transformation and automation.
    Most businesses today prefer an online sales model rather than the traditional
    brick-and-mortar way of selling products.
  prefs: []
  type: TYPE_NORMAL
- en: Websites have not only helped companies increase their reach, but have also
    made it cheaper (no fixed costs such as rentals) for them to sell their products.
    A responsive **graphical user interface** (**GUI**), combined with the power of
    real-time technologies, has made the process of selling easier; now executives
    can just chat with potential customers and guide them to buy products, increasing
    conversions.
  prefs: []
  type: TYPE_NORMAL
- en: With advancements in **artificial intelligence** (**AI**) and language processing
    techniques, businesses are slowly but steadily adopting conversational interfaces
    to automate their processes. A conversational user interface refers to an interface
    that has free-form text for natural languages. With conversational interfaces
    and natural language processing techniques, businesses feel that a machine can
    respond to certain customer queries by analyzing the context. These machines,
    in today's world, are referred to as **chatbots**.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the different types of bots, look at how
    to develop simple chatbots, and learn about how bots can be used to automate business
    processes. Also, note that when we refer to bots in this chapter, we're talking
    about chatbots or text-based bots.
  prefs: []
  type: TYPE_NORMAL
- en: What are bots?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OK, let's take a simple example. Say you want to order a pizza from **Pizza
    Hut** for an evening get-together with friends this coming weekend. Usually, you'd
    go to the Pizza Hut website, spend time looking for a certain type of pizza or
    that particular topping you like, and place an order. More often than not, you
    already know what you want to order; then the question really is, why take the
    pain to look for it on the Pizza Hut website?
  prefs: []
  type: TYPE_NORMAL
- en: Worry no more! Just log in to **Facebook** and use the Facebook Messenger chatbot
    to buy what you need from Pizza Hut. Not just this, the chatbot will also keep
    you posted on the latest offers and updates from Pizza Hut. So a chatbot can give
    you the same experience of visiting a website from your favorite social networking
    platform. Look at [http://blog.pizzahut.com/press-center/pizza-hut-announces-new-social-ordering-platform/](http://blog.pizzahut.com/press-center/pizza-hut-announces-new-social-ordering-platform/)
    for the announcement [Pizza Hut](http://blog.pizzahut.com/press-center/pizza-hut-announces-new-social-ordering-platform/) made
    regarding collaborating with Facebook Messenger.
  prefs: []
  type: TYPE_NORMAL
- en: You may say, "Yes, we understand the use case, but what exactly is a chatbot?"
  prefs: []
  type: TYPE_NORMAL
- en: A chatbot is a service powered by rules and AI that you, as a customer, interact
    with via a chat (text) interface. Bots carry out semi-intelligent or mundane tasks
    and run them as software applications. Chatbots can provide you with multiple
    services and can run on social platforms such as **Facebook**, **Telegram**, **Slack**,
    and many more. Chatbots are still in active research and are an emerging computer
    science field.
  prefs: []
  type: TYPE_NORMAL
- en: How do bots work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Based on what we have discussed so far, you might be thinking, "How these bots
    function? How do they understand human words or sentiments? How do they understand
    the context?" So here''s the answer. There are typically two types of chatbots:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bots that work on a rule engine**: This type of bot understands certain words
    or commands (so to speak) and has very limited behavior. It is pretty straightforward:
    if *x* is the input, then *y* should be the output. They''re very useful in cases
    where there are fixed sets of questions or when questions act as queries. For
    example, the CNN chatbot helps you get the top stories for that moment, and furthermore,
    you have the luxury of asking the bot about the top stories on certain topics,
    such as **politics** or **business**. (Great! Then why should I even go to the
    CNN website?) Look at some of the screenshots that I took from my Facebook Messenger
    app regarding my interaction with the CNN chatbot. The first screen asks you to
    click on **GET ****STARTED**, and when you do this, the bot takes you to the next
    screen where it gives you an option to look at the top stories:![How do bots work?](img/image_09_0011.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you click on **TOP ** **STORIES**, it shows you the **Yahoo!** story and
    asks you whether you''re interested in certain topics, politics for example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How do bots work?](img/image_09_0012.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**A smart bot that works on machine learning**: Smart bots use AI and sentiment
    analysis to understand the context of a conversation and respond to language semantics.
    They are hence applicable to sophisticated use cases, such as purchasing products
    or answering customer support queries. What''s more, these bots can learn from
    past interactions. Amazing, isn''t it?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sentiment analysis is also referred to as opinion mining and aims at identifying
    and extracting subjective information from the available text and determining
    the emotion of the writer, taking care of the contextual properties of the text.
  prefs: []
  type: TYPE_NORMAL
- en: Why bots now?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may ask, "The world has been talking about machine learning for a while
    now and the chat feature has been around a long time now, so why are bots becoming
    so relevant now?" That''s because of the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Usage patterns**: Companies have figured out that users tend to spend more
    time on chats than on social media platforms or websites. Hence, businesses can
    engage with users in better ways via a chat platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost-effective**: No need for humans--sounds like no cost at all! Businesses
    are taking advantage of bots to automate processes, such as customer service,
    without human resource investments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scale**: It''s easy to reach out to millions of users through Facebook or
    Telegram, which act as distribution channels for bots. This way, businesses can
    target as many potential customers as possible without looking at the human costs
    involved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Efficient technology**: Growth in AI or **Natural Language Processing** (**NLP**)
    has made it even easier to plug algorithms into these bots. Algorithms can, or
    will, mature over time, and they will serve customers even better.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OK, great! Now that we understand bots and their utility much better, let's
    get our hands dirty and develop our own bot.
  prefs: []
  type: TYPE_NORMAL
- en: Building a moody Telegram bot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start developing a bot, we should be clear about our objectives:
    what is my bot going to do? We take a simple example of creating a bot that would
    respond with an emoji based on the user''s mood. It''s a moody bot for the simple
    reason that it represents the mood of the user. Sounds like an interesting use
    case? Let''s go for it!'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we shall use the `python-telegram-bot` ([https://github.com/python-telegram-bot/](https://github.com/python-telegram-bot/))
    library to develop a Telegram bot. So, let''s get started by first installing
    the `python-telegram-bot` module with our favorite utility, namely python `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We also install the `emoji` ([https://github.com/carpedm20/emoji](https://github.com/carpedm20/emoji))
    library to work with emoji icons so that we can return appropriate expressions
    to the user based on their mood:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Have you installed the modules already? Cool! Let's move ahead.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To develop a bot of your own, first download the Telegram app on your mobile.
    Sign up for an account and verify your number. Assuming you have done this, congrats!
    You are one step closer to creating a Telegram bot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, the next thing you need to do to register your bot is to contact another
    bot called **BotFather**. On your Telegram app, search for **BotFather** and click
    on it to start a conversation with it (or him?). This is how it will look:![How
    to do it...](img/image_09_004-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you start the conversation with **BotFather**, follow the steps and use
    commands such as `/newbot` or `/enable` to configure your bot. Follow the steps
    carefully and you'll create a new bot. The following screenshot will guide you
    through the process of creating a new bot:![How to do it...](img/image_09_005-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you create a new bot, you'll get a token specific to your bot. Keep this
    handy and safe with you; do not share it with anybody. The following screenshot
    shows how **BotFather** works and how the token looks:![How to do it...](img/image_09_006-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Nice! So you have created your own bot. But the bot is not functional and doesn''t
    do anything spectacular yet. Let''s make it do some cool stuff like we planned
    at the beginning of the recipe. Create a file called `bot.py` and copy the following
    code to it. Also, make sure you change the **token** to your bot''s token ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'OK, cool! We have now added the required functionality to our bot and we expect
    it to run well. But how do we test it? First, run the Python file with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We then search for our bot and start a conversation with it. In my case, the
    bot is called **Chetbot**, and I started a conversation with it using the standard
    `/start` command:![How to do it...](img/image_09_007-2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, when I started the conversation with my bot, it
    asked me about my mood for the day and gave me three options. The three options
    were **Happy**, **Whatever**, and **Sad**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's neat! But what happens when I click on one of these options? Voila! It
    returns me my mood for the day with an emoticon. Awesome!![How to do it...](img/image_09_008-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observe that if I have to start the conversation again, I would need to reenter
    the `/start` command to converse with the bot. In the following screenshot, the
    bot recognizes the start command and asks me my mood again. Neat, huh?![How to
    do it...](img/image_09_009-2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `python-telegram-bot` module works on standard event-driven philosophy.
    A bot can be considered as a single-threaded event loop, which keeps polling for
    events. An event loop is also registered with command handlers, also referred
    to as dispatchers. As soon as an event gets triggered, a callback handles the
    event and returns the desired response to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code snippet, we registered two command handlers: `start()`
    and `help()`. The `start()` method gets called when a user starts the conversation
    with the bot (the `/start` command) or asks for help (the `/help` command).'
  prefs: []
  type: TYPE_NORMAL
- en: We have also added a callback query handler with `button()` as the callback
    method; this gets invoked when the user responds to the bot's options.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, initially, the bot is running, waiting for an input. When a user says `/start`,
    the request is dispatched to the `start()` method, which in turn asks the user
    **Hey there! How do you feel today?** and presents an inline keyboard with three
    options: **Happy**, **Whatever**, or **Sad**.'
  prefs: []
  type: TYPE_NORMAL
- en: When the user selects either of the options, an event gets generated, which
    is handled by the callback method `button()`. The callback has preloaded data
    that acts according to the option that is chosen. Based on the choice made by
    the user, the bot sends back the right emotion to the user. Emoticons are retuned
    to the user with the help of the `emoji` library that has all the expressions
    implemented.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cool! Have you created your own bot already? Can you think of other simple examples
    where Telegram bots will be useful? There are many Python modules using which
    you can develop bots with Telegram, such as `telepot` ([https://github.com/nickoala/telepot](https://github.com/nickoala/telepot))
    or `twx.botapi` ([https://github.com/datamachine/twx.botapi](https://github.com/datamachine/twx.botapi));
    both are good. You can use either one of them to get your bot up and running.
    Why not try them and see what they have to offer?
  prefs: []
  type: TYPE_NORMAL
- en: Different types of bots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Taking confidence from having built a bot ourselves, let's take a step forward
    and look at how bots can be classified.
  prefs: []
  type: TYPE_NORMAL
- en: The bot we developed in the last recipe can be tagged unintelligent. By unintelligent,
    I mean it questioned the user, and based on the option, responded with an emoji.
    But when the user says `/start` again, the bot asked the same question. Not helpful,
    is it?
  prefs: []
  type: TYPE_NORMAL
- en: How about a scenario where the bot would remember your previous choice and try
    to motivate you with some nice articles or places you can go to within the city?
    Just to change your mood? How about actually increasing the happiness quotient?
  prefs: []
  type: TYPE_NORMAL
- en: 'To put the preceding discussion in perspective, bots can be classified into three
    different categories based on the implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stateless ****bots**: These can also be referred to as don''t-remember-anything
    bots. They don''t persist information; that is, for them, every interaction is
    a new session, and they treat every question in isolation. For example, a news
    bot can keep returning updates on the latest stories or return the top stories
    in the *politics* category all the time; however, if it doesn''t remember the
    state of the conversation, it will be deemed stateless and will not be considered
    useful. Most bots built today come under this category, because of which the value
    offered by them is very limited.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stateful ****bots**: We discussed the news bot in the preceding point. What
    if the news bot remembers the news category of the user''s interest and accordingly
    recommends more stories from the past, which the user may find interesting to
    read? Yeah, now we''re talking business. This way, we keep the user engaged with
    the bot for a longer period of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Such bots keep track of the user's identity and also persist information of
    the current and previous sessions. For example, these bots may store the news
    categories searched today and from the past, and can then recommend users news
    feeds that match the searched categories.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Such bots are useful, but they are not smart; they don't understand context
    and language semantics.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Smart ****bots**: Smart bots have many batteries plugged in. They use machine
    learning, understand language semantics, and can build predictive algorithms based
    on the data they have.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take the famous example of diaper and beer. It is said that if you analyze
    the pattern of purchase, there is a high correlation between the purchase of beer
    and that of the diaper, which means a person who buys a diaper more or less definitely
    buys beer. Smart bots can persist data and come up with such patterns that will
    result in meaningful insights into conversations. Let's take another example of
    language semantics. Think about the phrase "*filthy awesome*"; now filthy, means
    dirty and awesome is a very positive word. Smart bots will understand these phrases
    and can comprehend the users' context much better.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Based on the preceding categorization, it's up to us to decide what kind of
    bot we need to develop for a particular use case. Smart bots are often needed
    in cases where interaction is far more humane and involved, as in the case of
    customer support, but imagine the productivity gains a business can harness by
    using smart bots.
  prefs: []
  type: TYPE_NORMAL
- en: A smart bot with artificial intelligence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the knowledge of different types of bots in the previous section, let's
    try to write a bot that uses artificial intelligence and sentiment analysis in
    Python. But before that, let's understand both these fields in brief.
  prefs: []
  type: TYPE_NORMAL
- en: '**Artificial intelligence** (**AI**) is an area of computer science that emphasizes
    on the creation of machines that can react like humans. Essentially, artificial
    intelligence relates to machines that perceive its context and take an action
    relevant to the content in order to maximize the chances of success. For instance,
    a machine can take decisions based on certain rules and a certain context to maximize
    the results of the decision.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sentiment analysis**, on the other hand, is about identifying and categorizing
    a piece of text to determine whether the opinion or attitude of the person involved
    is positive, neutral, or negative to a product or event. It refers to the use
    of natural language processing algorithms to perform text analysis and extract
    subjective information, or the sentiment, of the content.'
  prefs: []
  type: TYPE_NORMAL
- en: I think, by now, you must have already started thinking of how AI and sentiment
    analysis can be used in our bots for various needs. In this recipe, let's build
    a smart bot with these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Smart bots can be built on multiple technologies, such as predictive intelligence,
    AI, NLP, and more; however, it's completely up to you to decide which technology
    you need to use to meet your objectives. Also, bots don't need to be on the Web
    or an app; they can be simple CLI-based bots. A web UI, CLI, or a mobile app can
    be used as a distributor for a bot, but it is not a necessity to build a bot.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To include AI in our bot, we will use a well-known Python module called `aiml`.
    **AIML** stands for **Artificial Intelligence Markup Language**, but it''s essentially
    an XML file. AIML is a form of XML that defines the rules for matching patterns
    and determining responses. So, let''s get started by installing the `aiml` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As step 1, we start by creating the AIML file. Go to your favorite editor and
    create an AIML file, just like a normal XML file, with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we create a startup XML file that will load the AIML file; this will
    also load the artificial intelligence we added to the preceding AIML file. Let''s
    call this file `init.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s develop the Python code to run our chatbot. The following code does
    exactly what we need. We call this file `aibot.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we run this bot with the `python aibot.py` command, it presents an input
    screen, waiting for a user's input. Look at the following screenshot to see how
    it works:![How to do it...](img/image_09_010-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding Python code mimics a typical bot built on AI. When we run the
    Python code, `amil.Kernel()` will load the AI kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Once the kernel is loaded, `kernel.learn()` will call the start up `xml` file.
    The AIML rule engine is loaded when the `load aiml b` command is sent to the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Once the engine is loaded into the kernel, we are free to chat with the bot.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, when we say **hello**, the bot understands it (from
    the `chat.aiml` file) and responds to it with **Hi, hello!**, which is configured
    in `chat.aiml`.
  prefs: []
  type: TYPE_NORMAL
- en: In the second case, the AI bot matches the pattern `WHO ARE *` when **who are
    you?** is asked by the user; the pattern is again defined in `chat.aiml`.
  prefs: []
  type: TYPE_NORMAL
- en: If you observe, the `WHO ARE *` pattern is configured for multiple responses
    in the `chat.aiml` file, so the bot, at runtime, chooses a random response and
    returns **My name is superman!**.
  prefs: []
  type: TYPE_NORMAL
- en: Automating business processes with bots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, you have learned what bots are, how they are built,
    and a few simple use cases where bots can be used. Let's see how we can solve
    Jay's problem with the knowledge we have developed so far and maybe learn more
    about building bots.
  prefs: []
  type: TYPE_NORMAL
- en: Jay is a marketing manager at a famous book publishing company, *MyBooks*. His
    task is to come up with book promotion e-mails. He feels that the promotional
    e-mails he sends are too generic and are not targeted to the readers effectively.
    For instance, an e-mail on the Python learning path may not encourage a Java developer
    to spend money. He thinks he can do a much better job if he understands the interests
    of the audience and makes his interaction more relevant; the reader would be much
    more inclined to buy the book this way. He also feels that a lot of readers (potential
    buyers) are on Facebook, but they are not currently being reached out to by the
    publishing house. Can we help Jay here?
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes, let's help Jay by developing a fantastic bot for him. If you look into
    Jay's problem, he needs to understand the audience (in this case, the readers
    who would be interested in buying a book) and suggest them books based on their
    interest. So, our bot should be smart enough to get the relevant information from
    the readers.
  prefs: []
  type: TYPE_NORMAL
- en: Also, since the readers are already on Facebook, we can create a MyBooks Facebook
    page and build a Facebook Messenger bot so that the readers can be contacted.
    Let's see how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we get into building the bot, let''s install a few Python modules that
    will be needed for this exercise. We install the `flask` and `requests` module
    using the Python `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To develop a Facebook Messenger bot, first create a Facebook account (who doesn't
    have a Facebook account?). Log in to your account and go to [https://www.facebook.com/pages/create/](https://www.facebook.com/pages/create/)
    to create a new page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our case, since we're building a page for MyBook's company, we can call our
    page **MyBooks** and choose an appropriate organization type, which is **Media/news
    company**. This is how the page will look:![How to do it...](img/B05370_08_new.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The second step in creating the Facebook page is to fill out the other details
    requested by Facebook, as shown in the following screenshot. We have given a nice
    description to our page: `Get updates on our latest books`:![How to do it...](img/image_09_012-1.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have filled in all the details for Jay, and the MyBooks Facebook page is
    ready and looks smashing:![How to do it...](img/image_09_013-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, that's a good start. Readers will start following this page, but we really
    need to add the ability for our readers to converse via a Facebook page; we do
    this with a Facebook Messenger bot. So let's go ahead and work on this aspect
    of our solution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To create a Facebook Messenger bot, we need a Facebook app. We will create an
    app by navigating to [https://developers.facebook.com/quickstarts/?platform=web](https://developers.facebook.com/quickstarts/?platform=web)
    and clicking on **Skip and Create App ID**, as shown in the following screenshot:![How
    to do it...](img/image_09_014-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now fill out the required details and push the **Create App ID** button to
    create the app. The following screenshot shows the details we added to create
    an app:![How to do it...](img/image_09_015-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as we fill out the details and click on **Create App ID**, a new app
    gets created for us. This Facebook app is for our bot. We see the app ID on the
    top-right section of our page, but to get associated with the bot, we scroll down
    and click on **Get ****Started** in the **Messenger** section:![How to do it...](img/image_09_016-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To let the bot access Messenger, we will generate **Page Access Token**, like
    in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep this token safe with you and don't share it with anyone.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This token is used to respond to the readers who initiate a conversation with
    the bot from the **MyBooks** Facebook page:![How to do it...](img/image_09_017-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'OK, there''s one last thing pending. We also need to receive messages from
    the readers; only then can we respond to them. For this, we go to the **Webhooks**
    section and add a few settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Callback URL**: This is a link to our server where we receive messages from
    our readers via the Facebook page'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Verification Token**: Any set of characters can be used here, say `token`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscription Fields**: We choose **messages** as subscription fields for
    our bot (this can be changed later)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you see, we need to have a callback URL. This will be used by Facebook to
    verify whether our callback URL is set up fine. For this, we create a Flask server
    and configure the route to be used for **Callback URL**. The following code creates
    a route called `/bot` that is used as **Callback URL** for verification:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we run the server on port 5000 and also use `ngrok` to run on the same port,
    we get a callback URL that can be placed in the **Webhook** settings. This is
    how callback URL looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_018-1.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The settings can be verified and saved by clicking on the button, as shown
    in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_019-1.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'When we verify and save the settings, a `GET` request is sent to our Flask
    server with the `hub.challenge` code. We return this code to Facebook from the
    `flask` route and verify the **Webhook** setting:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the bot to work fine we also need to make sure that the Facebook page allows
    certain events like reading or echoing messages. We enable these settings in the
    **Webhooks** section:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_020-1.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Cool! So now we''re ready with a **Webhook** to receive messages from readers
    and also have an access token to respond to users. If you realize, **Webhook**
    is going to be our bot server! Let''s just go ahead and make our bot do smarter
    things. The following code will make our bot do all the great things that Jay
    needs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We run the preceding Flask server to activate our bot. Now, let's see how the
    bot works by navigating to the Facebook page. On the Facebook page, if we click
    on **Message**, we can start chatting with the bot on the **MyBooks** page:![How
    to do it...](img/image_09_021.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's start the conversation with the bot using a simple `Hi` message. The bot
    responds to us with a question about whether we'd like information on Python or
    Java books. Nice!![How to do it...](img/image_09_022-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if we click on **Python**, the bot recommends an architectural book written
    in Python and encourages the readers to buy it. This also happens when the reader
    clicks on **Java**. See the following screenshot:![How to do it...](img/image_09_023.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot demonstrates a Java example where the *RESTful Java
    Patterns and Best Practices* book is recommended when the user selects **Java**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_09_024.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Cool, right? This is what Jay needed. So, when the readers arrive at the **MyBooks**
    page, they get to talk to the bot and the bot recommends them a book based on
    their interest. Since the suggestion made by the bot is much more relevant to
    the reader, compared to a generic promotional e-mail, the chances of the reader
    buying a book are higher. Awesome!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We first created a Facebook page for Jay''s publishing house: MyBooks. We then
    associated a Facebook Messenger bot with this page and got **Access Token** to
    send the message back to the readers who chat with the bot. We also set up **Webhooks**
    so that our bot would receive messages from the readers and use **Access Token**
    to post messages back to them. Here, **Webhook** is the brains behind the bot.'
  prefs: []
  type: TYPE_NORMAL
- en: When the reader reaches the **MyBooks** page, they click on **Messenger** to
    start a conversation with the bot. When he or she says `Hi`, HTTP's `POST` request
    is sent to the **Webhook ** [`https://2d7d823f.ngrok.io/bot/`](https://2d7d823f.ngrok.io/bot/)
    with the message.
  prefs: []
  type: TYPE_NORMAL
- en: The bot reads the message from the reader and sends a *generic template* message
    to the reader with `postback` options. The bot sends this message using Facebook's
    Graph APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Facebook has template messages for sending `postback` messages, buttons, images,
    URLs, and audio/video media files.
  prefs: []
  type: TYPE_NORMAL
- en: When the reader chooses **Python**, the bot receives this message and, based
    on the payload, returns the image of the book along with the URL so users can
    buy it. Users can then click on **Buy** to go to the book's URL and buy the book
    from there, exactly what Jay hoped for!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we build bots based on CLI, Web UI, and mobile apps. The bots
    can reside on other chat systems, such as Slack, which has a nice set of APIs.
    You may want to try writing one. If you do write one, send me the pointers; I
    would love to try them out.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can reach out to me on Twitter or send me a direct message and I will get
    back to you.
  prefs: []
  type: TYPE_NORMAL
