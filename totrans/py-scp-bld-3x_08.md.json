["```py\ntype (enum in ['GENERATOR', 'FNGENERATOR', 'ENVELOPE', 'CYCLES', 'NOISE', 'LIMITS', 'STEPPED'])\n```", "```py\n>>> import bpy\n>>> anim_data = bpy.context.object.animation_data\n>>> m = anim_data.action.fcurves[2].modifiers.new('STEPPED')\n```", "```py\n>>> anim_data.action.fcurves[2].modifiers.remove(m)\n```", "```py\nbl_info = {\n    \"name\": \"Object Shaker\",\n    \"author\": \"Packt Man\",\n    \"version\": (1, 0),\n    \"blender\": (3, 00, 0),\n    \"description\": \"Add Shaky motion to active object\",\n    \"location\": \"Object Right Click -> Add Object Shake\",\n    \"category\": \"Learning\",\n}\n```", "```py\nimport bpy\nclass ObjectShaker(bpy.types.Operator):\n    \"\"\"Set Playback range to current action Start/End\"\"\"\n    bl_idname = \"object.shaker_animation\"\n    bl_label = \"Add Object Shake\"\n    bl_description = \"Add Shake Motion to Active Object\"\n    bl_options = {'REGISTER', 'UNDO'}\n```", "```py\n    duration: bpy.props.FloatProperty(default=1.0, min=0)\n    strenght: bpy.props.FloatProperty(default=1.0,\n                                      soft_min=0,\n                                      soft_max=1.0)\n```", "```py\n    @classmethod\n    def poll(cls, context):\n        return bool(context.object)\n```", "```py\n    def get_fcurve(self, obj, data_path, index):\n        \"\"\"Returns F-Curve of given data_path/index\"\"\"\n        action = obj.animation_data.action\n        assert action\n```", "```py\n        try:\n            crv = action.fcurves.new(data_path,index=index)\n        except RuntimeError:\n            crv = next(fc for fc in action.fcurves\n                       if fc.data_path == data_path and\n                          fc.array_index == index)\n```", "```py\n        if not crv.keyframe_points:\n            crv.keyframe_points.insert(\n                         frame=context.scene.frame_current,\n                         value=getattr(obj,\n                                       data_path)[index])\n```", "```py\n        return crv\n```", "```py\n    def execute(self, context):\n        if not context.object.animation_data:\n            anim = context.object.animation_data_create()\n        else:\n            anim = context.object.animation_data\n```", "```py\n        if not anim.action:\n            action = bpy.data.actions.new('ShakeMotion')\n            anim.action = action\n        else:\n            action = anim_data.action\n```", "```py\n        fps = context.scene.render.fps\n        duration_frames = self.duration * fps / 2\n        current = context.scene.frame_current\n        start = current – duration_frames\n        end = current + duration_frames\n```", "```py\n        z_loc_crv = self.get_fcurve(context,\n                                    'location',\n                                    index=2)\n        x_rot_crv = self.get_fcurve(context,\n                                    'rotation_euler',\n                                    index=0)\n        y_rot_crv = self.get_fcurve(context,\n                                    'rotation_euler',\n                                    index=1)\n```", "```py\n        for crv in z_loc_crv, y_rot_crv, x_rot_crv:\n            noise = crv.modifiers.new('NOISE')\n            noise.strength = self.strenght\n            noise.use_restricted_range = True\n            noise.frame_start = start\n            noise.frame_end = end\n        return {'FINISHED'}\n```", "```py\ndef m_items(self, context):\n    self.layout.separator()\n    self.layout.operator(ObjectShaker.bl_idname)\n```", "```py\n>>> [c for c in dir(bpy.types) if\n     c.endswith('context_menu')]\n```", "```py\n['ASSETBROWSER_MT_context_menu',\n...\n['VIEW3D_MT_edit_metaball_context_menu', 'VIEW3D_MT_gpencil_edit_context_menu', 'VIEW3D_MT_object_context_menu', 'VIEW3D_MT_particle_context_menu',\n...\n```", "```py\n[c for c in dir(bpy.types)if c.endswith('context_menu')\n                          and 'object' in c]\n```", "```py\n>>> [c for c in dir(bpy.types)if c.endswith('context_menu')\n...                           and 'object' in c]\n['VIEW3D_MT_object_context_menu']\n```", "```py\ndef register():\n    bpy.utils.register_class(ObjectShaker)\n    bpy.types.VIEW3D_MT_object_context_menu.append(m_items)\n```", "```py\ndef unregister():\n    bpy.types.VIEW3D_MT_object_context_menu.remove(m_items)\n    bpy.utils.unregister_class(ObjectShaker)\n```"]