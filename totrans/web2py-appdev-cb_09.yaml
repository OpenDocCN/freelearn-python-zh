- en: Chapter 9. Routing Recipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Making cleaner URLs with `routes.py`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a URL prefix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Associating applications with domains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Omitting the application name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing application names and controllers from URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replacing underscores with hyphens in URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping `favicons.ico` and `robots.txt`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using URLs to specify the language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its core, web2py contains a dispatcher that maps URLs into function calls.
    This mapping is called routing, and it can be configured. This may be necessary
    in order to shorten URLs, or to deploy a web2py application as a replacement for
    a pre-existing application, by not wanting to break old external links. web2py
    comes with two routers, that is, a two-way routing configuration. The old one
    uses regular expressions to match incoming URLs and map them into the app/controller/function.
    The new style router instead uses a more holistic approach.
  prefs: []
  type: TYPE_NORMAL
- en: Making cleaner URLs with routes.py
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In web2py, incoming URLs are, by default, interpreted as`http://domain.com/application/controller/function/arg1/arg2?var1=val1&var2=val2`.
  prefs: []
  type: TYPE_NORMAL
- en: That is, the first three elements of the URL are interpreted as the web2py application
    name, controller name, and function name, with the remaining path elements saved
    in `request.args` (a **list)**, and the query string saved in `request.vars` (a
    **dictionary)**.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the incoming URL has fewer than three path elements, then the missing elements
    are filled in using the defaults: `/init/default/index`, or, if there is no application
    named `init`, they are filled using the `welcome` application: `/welcome/default/index`.
    web2py''s `URL()` function creates a URL path (by default, without a scheme or
    domain) from its component parts: application, controller, function, args list,
    and vars dictionary. The results are typically used for `href` links in web pages,
    and for the argument to the redirect function.'
  prefs: []
  type: TYPE_NORMAL
- en: As part of its routing logic, web2py also supports URL rewriting, in which the
    configuration file, `routes.py`, specifies rules by which `URL()` rewrites the
    URL it generates, and by which web2py interprets the incoming URLs. There are
    two independent rewriting mechanisms, depending on which one is configured in
    `routes.py`.
  prefs: []
  type: TYPE_NORMAL
- en: One uses regular-expression pattern matching to rewrite URL strings, while the
    other uses a routing-parameter dictionary to control the rewriting. We refer to
    these as the **pattern-based router** and the **parameter-based router**, respectively
    (sometimes they are referred to as the old router and the new router, respectively,
    but those terms are not very descriptive, and we will avoid them here).
  prefs: []
  type: TYPE_NORMAL
- en: An example of usage of the old router is given in the following section. An
    example of usage of the new router is given in the rest of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Normally web URLs have a structure like `http://host/app/controller/function/args`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now imagine an application where each user has its own home page. For example:
    `http://host/app/default/home/johndoe`, where `home` is the action that renders
    pages, and `johndoe` is the `request.args(0)` that tells web2py which use we are
    looking for. While this is possible, it would be much better to have URLs that
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://host/johndoe/home`.'
  prefs: []
  type: TYPE_NORMAL
- en: This can be done using the web2py pattern-based routing mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: We will assume the following minimalist application called `pages`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `models/db.py`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Add the following code and the usual scaffolding files to `controllers/default.py:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We proceed by creating/editing `routes.py` in the main web2py folder, in order
    to implement the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that `$app` is a shortcut for the regular expression `(? P<app>\w+)`, and
    it will match everything not containing slashes. `$username` is a shortcut for
    `(? P<username>\w+)`. Similarly, you can use other variables. `$anything` is special,
    since it corresponds with a different regular expression, `(? P<app>.*)`; that
    is, it will match everything until the end of the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The critical parts of the code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These map the request for `home`. We then do the same for the `css` action.
    The rest of the code is not really necessary, but makes sure that you do not accidentally
    break the `admin` and the `appadmin` URLs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This and the next recipes in this chapter deal with the new parameter-based
    router, which is generally easier to configure, and handles most common re-writing
    tasks effectively. If possible, try to use the parameter-based router, but if
    you need more control for special URL-rewriting tasks, look at the pattern-based
    router.
  prefs: []
  type: TYPE_NORMAL
- en: 'The starting point for using the parameter-based router is to copy the file
    `router.example.py` to `routes.py`, in the web2py `base` directory. (The file
    `routes.example.py` serves the same purpose for the pattern-based router.) The
    `example` file contains basic documentation for its respective routing systems;
    additional documentation is available online in the web2py book, [Chapter 4](ch04.html
    "Chapter 4. Advanced Forms"),*The Core: URL rewrite and Routes on error..*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever `routes.py` is changed, you must either restart web2py or, if the
    admin app is available, load the following URL, for the new configuration to take
    effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://yourdomain.com/admin/default/reload_routes`'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The example routing files contain a set of Python `doctests`. When you make
    a change to the routing configuration, add to or edit the `doctests` in `routes.py`
    to check that your configuration does what you expect.
  prefs: []
  type: TYPE_NORMAL
- en: The first problem we want to solve is that we want to eliminate the default
    application and controller from visible URLs, when possible.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy `router.example.py` to `routes.py` in the main web2py folder, and edit
    it as follows. Find the routers `dict:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change `default_application` from `welcome` to the name of your application.
    If your default controller and function are not named, `default` and `index` respectively,
    then specify those defaults as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding a URL prefix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often when you are running web2py under a production server, the same URL may
    be shared by multiple applications or services, and you will need to add an extra
    `PATH_INFO` prefix to identify the web2py service. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://example.com/php/](http://example.com/php)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://example.com/web2py/app/default/index](http://example.com/web2py/app/default/index)'
  prefs: []
  type: TYPE_NORMAL
- en: Here, `web2py/` identifies the web2py service, and `php/` identifies a php service,
    and the mapping is performed by the web service. You may want to eliminate the
    extra `web2py/` from the `PATH_INFO`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you specify `path_prefix`, it is prepended to all URLs generated by `URL()`,
    and stripped from all incoming URLs. For example, if you want your external URLs
    to look like `http://example.com/web2py/app/default/index`, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Associating applications with domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, you want to associate specific domains with specific web2py applications,
    so that incoming URLs directed to specified domains are routed to the appropriate
    application, without needing the application name in the URL. Again, the parametric
    router comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the parameter-based router''s domains feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `domain1.com` and `domain2.com` are being served by the same
    physical host. The configuration specifies that URLs directed to `domain1.com`
    (and in this case, its subdomain `www)` are to be routed to `app1`, and URLs directed
    to `domain2.com` are to be routed to `app2`. If `exclusive_domain` is (optionally)
    set to `True`, then attempts to use the URL to generate a URL referring to `app2`
    in response to a request from a domain other than `domain2.com` (and similarly
    for `app1)`, will fail unless they explicitly supply a host name to URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that you can also use the following, to further configure the paths
    for the two apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Omitting the application name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using the parametric router, you may want to omit the default application
    name from the visible URLs for static files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is simple; you just turn on the `map_static` flag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, if you''re using an application-specific router dictionary, turn on the
    `map_static` flag for each application (that is, `myapp` in the following example):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Removing application name and controllers from URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you want to use the parametric router's URL parsing, but you don't
    want to rewrite visible URLs. Again, you can use the parametric router, but disable
    URL rewriting.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Find the router''s `dict` in `routes.py`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After finding it, change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting `applications` and `controllers` to `None` (functions and `languages`
    are set to `None` by default), tells the parametric router not to omit the corresponding
    parts of the visible URL. web2py's default URL parsing is stricter than many applications
    might require, since it assumes that URL components might be used for filenames.
    The parametric router adheres more closely to the HTTP URL RFCs, which makes it
    friendlier to applications that need more exotic characters in their arguments
    or query strings. The `null` router in this recipe, enables this parsing without
    actually rewriting URLs.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing underscores with hyphens in URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Underscores in URLs can be ugly, and they can be hard to see when the URL is
    underlined, as it often is on web pages. A hyphen is a more visually appealing
    alternative, but you can't, for example, use a hyphen in a function name, because
    it must also be a legal Python identifier. You can use the parametric router and
    to map `-` into `_!`
  prefs: []
  type: TYPE_NORMAL
- en: 'The parametric router''s `map_hyphen` flag converts underscores in application,
    controller, and function names to hyphens in the visible URLs, and back to underscores
    when the URL is received. `Args, vars` (query string), and possible language selectors
    are not affected, since hyphens are fine in those fields. As a result, a URL like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://some_controller/some_function`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Will appear instead as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://some-controller/some-function`'
  prefs: []
  type: TYPE_NORMAL
- en: While the internal controller and function names retain their underscores.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Turn on the `map_hyphen` flag. In the routers directive, add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Mapping favicons.ico and robots.txt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some special files, such as `robots.txt` and `favicon.ico`, are accessed directly
    as the root path of a URL. Therefore, they must be mapped from the `root` folder
    into the `static` folder of the application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the parameter-based router sets `root_static` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This specifies that the listed files are to be served from the default application's
    static directory.
  prefs: []
  type: TYPE_NORMAL
- en: Using URLs to specify the language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipe *Using cookies to set the language*, in [Chapter 2](ch02.html "Chapter 2. Building
    Your First Application"), describes how to save a user language preference in
    a cookie. In this recipe, we describe how to do something similar&mdash;to **store**
    the user language preference in the URL. One advantage to this approach is that
    it's then possible to bookmark a link that includes a language preference.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The parametric router supports an optional `language` field in the URL as a
    field following the application name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://domain.com/app/lang/controller/function](http://domain.com/app/lang/controller/function)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The language field is subject to the usual omission rules: the parametric router
    will omit the language designator, if when the default language is used its omission
    does not create ambiguity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'URL-based language handling will ordinarily be specified in an application-specific
    parametric router, setting `default_language` and `languages` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To specify a language for outgoing URLs using `URL()`, set `request.lang` to
    one of the supported languages. For incoming requests, `request.lang` will be
    set to the language specified by the incoming URL. As with the language-in-cookie
    recipe, use `T.force` to force the desired translations in a model file, before
    translations are to be used. For example, in your model, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
