["```py\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, id=wx.ID_ANY, title=\"\", \n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n                 style=wx.DEFAULT_FRAME_STYLE,\n                 name=\"MyFrame\"):\n        super(MyFrame, self).__init__(parent, id, title,\n                                      pos, size, style, name)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n\n        self.btn1 = wx.Button(self.panel, label=\"Push Me\")\n        self.btn2 = wx.Button(self.panel, label=\"push me too\")\n\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(self.btn1, 0, wx.ALL, 10)\n        sizer.Add(self.btn2, 0, wx.ALL, 10)\n        self.panel.SetSizer(sizer)\n\n        self.Bind(wx.EVT_BUTTON, self.OnButton, self.btn1)\n        self.Bind(wx.EVT_BUTTON,\n                  lambda event:\n                  self.btn1.Enable(not self.btn1.Enabled),\n                  self.btn2)\n\n    def OnButton(self, event):\n        \"\"\"Called when self.btn1 is clicked\"\"\"\n        event_id = event.GetId()\n        event_obj = event.GetEventObject()\n        print \"Button 1 Clicked:\"\n        print \"ID=%d\" % event_id\n        print \"object=%s\" % event_obj.GetLabel()\n\n```", "```py\nimport wx\n\nID_BUTTON1 = wx.NewId()\nID_BUTTON2 = wx.NewId()\n\nclass MyApp(wx.App):\n    def OnInit(self):\n        self.frame = MyFrame(None, title=\"Event Propagation\")\n        self.SetTopWindow(self.frame)\n        self.frame.Show()\n\n        self.Bind(wx.EVT_BUTTON, self.OnButtonApp)\n\n        return True\n\n    def OnButtonApp(self, event):\n        event_id = event.GetId()\n        if event_id == ID_BUTTON1:\n            print \"BUTTON ONE Event reached the App Object\"\n\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, id=wx.ID_ANY, title=\"\", \n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n                 style=wx.DEFAULT_FRAME_STYLE,\n                 name=\"MyFrame\"):\n        super(MyFrame, self).__init__(parent, id, title,\n                                      pos, size, style, name)\n\n        # Attributes\n        self.panel = MyPanel(self)\n\n        self.btn1 = wx.Button(self.panel, ID_BUTTON1,\n                              \"Propagates\")\n        self.btn2 = wx.Button(self.panel, ID_BUTTON2,\n                              \"Doesn't Propagate\")\n\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(self.btn1, 0, wx.ALL, 10)\n        sizer.Add(self.btn2, 0, wx.ALL, 10)\n        self.panel.SetSizer(sizer)\n\n        self.Bind(wx.EVT_BUTTON, self.OnButtonFrame)\n\n    def OnButtonFrame(self, event):\n        event_id = event.GetId()\n        if event_id == ID_BUTTON1:\n            print \"BUTTON ONE event reached the Frame\"\n            event.Skip()\n        elif event_id == ID_BUTTON2:\n            print \"BUTTON TWO event reached the Frame\"\n\nclass MyPanel(wx.Panel):\n    def __init__(self, parent):\n        super(MyPanel, self).__init__(parent)\n\n        self.Bind(wx.EVT_BUTTON, self.OnPanelButton)\n\n    def OnPanelButton(self, event):\n        event_id = event.GetId()\n        if event_id == ID_BUTTON1:\n            print \"BUTTON ONE event reached the Panel\"\n            event.Skip()\n        elif event_id == ID_BUTTON2:\n            print \"BUTTON TWO event reached the Panel\"\n            # Not skipping the event will cause its \n            # propagation to end here\nif __name__ == \"__main__\":\n    app = MyApp(False)\n    app.MainLoop()\n\n```", "```py\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        super(MyFrame, self).__init__(parent, *args, **kwargs)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n        self.txtctrl = wx.TextCtrl(self.panel, \n                                   style=wx.TE_MULTILINE)\n\n        # Layout\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(self.txtctrl, 1, wx.EXPAND)\n        self.panel.SetSizer(sizer)\n        self.CreateStatusBar() # For output display\n\n        # Event Handlers\n        self.txtctrl.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)\n        self.txtctrl.Bind(wx.EVT_CHAR, self.OnChar)\n        self.txtctrl.Bind(wx.EVT_KEY_UP, self.OnKeyUp)\n\n    def OnKeyDown(self, event):\n        \"\"\"KeyDown event is sent first\"\"\"\n        print \"OnKeyDown Called\"\n        # Get information about the event and log it to\n        # the StatusBar for display.\n        key_code = event.GetKeyCode()\n        raw_code = event.GetRawKeyCode()\n        modifiers = event.GetModifiers()\n        msg = \"key:%d,raw:%d,modifers:%d\" % \\\n              (key_code, raw_code, modifiers)\n        self.PushStatusText(\"KeyDown: \" + msg)\n\n        # Must Skip the event to allow OnChar to be called\n        event.Skip()\n\n    def OnChar(self, event):\n        \"\"\"The Char event comes second and is\n        where the character associated with the\n        key is put into the control.\n        \"\"\"\n        print \"OnChar Called\"\n        modifiers = event.GetModifiers()\n        key_code = event.GetKeyCode()\n        # Beep at the user if the Shift key is down\n        # and disallow input.\n        if modifiers & wx.MOD_SHIFT:\n            wx.Bell()\n        elif chr(key_code) in \"aeiou\":elif unichr(key_code) in   \"aeiou\":\n            # When a vowel is pressed append a\n            # question mark to the end.\n            self.txtctrl.AppendText(\"?\")\n        else:\n            # Let the text go in to the buffer\n            event.Skip()\n\n    def OnKeyUp(self, event):\n        \"\"\"KeyUp comes last\"\"\"\n        print \"OnKeyUp Called\"\n        event.Skip()\n\n```", "```py\nclass TextFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        super(TextFrame, self).__init__(parent,\n                                        *args,\n                                        **kwargs)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n        self.txtctrl = wx.TextCtrl(self.panel,\n                                   value=\"Hello World\",\n                                   style=wx.TE_MULTILINE)\n\n        # Layout\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(self.txtctrl, 1, wx.EXPAND)\n        self.panel.SetSizer(sizer)\n        self.CreateStatusBar() # For output display\n\n        # Menu\n        menub = wx.MenuBar()\n        editm = wx.Menu()\n        editm.Append(wx.ID_COPY, \"Copy\\tCtrl+C\")\n        editm.Append(wx.ID_CUT, \"Cut\\tCtrl+X\")\n        editm.Append(ID_CHECK_ITEM, \"Selection Made?\",\n                     kind=wx.ITEM_CHECK)\n        menub.Append(editm, \"Edit\")\n        self.SetMenuBar(menub)\n\n        # Event Handlers\n        self.Bind(wx.EVT_UPDATE_UI, self.OnUpdateEditMenu)\n\n    def OnUpdateEditMenu(self, event):\n        event_id = event.GetId()\n        sel = self.txtctrl.GetSelection()\n        has_sel = sel[0] != sel[1]\n        if event_id in (wx.ID_COPY, wx.ID_CUT):\n            event.Enable(has_sel)\n        elif event_id == ID_CHECK_ITEM:\n            event.Check(has_sel)\n        else:\n            event.Skip()\n\n```", "```py\nclass MouseFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        super(MouseFrame, self).__init__(parent,\n                                         *args,\n                                         **kwargs)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n        self.btn = wx.Button(self.panel)\n\n        # Event Handlers\n        self.panel.Bind(wx.EVT_ENTER_WINDOW, self.OnEnter)\n        self.panel.Bind(wx.EVT_LEAVE_WINDOW, self.OnLeave)\n        self.panel.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)\n        self.panel.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)\n\n    def OnEnter(self, event):\n        \"\"\"Called when the mouse enters the panel\"\"\"\n        self.btn.SetForegroundColour(wx.BLACK)\n        self.btn.SetLabel(\"EVT_ENTER_WINDOW\")\n        self.btn.SetInitialSize()\n\n    def OnLeave(self, event):\n        \"\"\"Called when the mouse leaves the panel\"\"\"\n        self.btn.SetLabel(\"EVT_LEAVE_WINDOW\")\n        self.btn.SetForegroundColour(wx.RED)\n\n    def OnLeftDown(self, event):\n        \"\"\"Called for left down clicks on the Panel\"\"\"\n        self.btn.SetLabel(\"EVT_LEFT_DOWN\")\n\n    def OnLeftUp(self, event):\n        \"\"\"Called for left clicks on the Panel\"\"\"\n        position = event.GetPosition()\n        self.btn.SetLabel(\"EVT_LEFT_UP\")\n        # Move the button\n        self.btn.SetPosition(position - (25, 25))\n\n```", "```py\nimport wx\nimport wx.lib.newevent\n\n# Our first custom event\nMyEvent, EVT_MY_EVENT = wx.lib.newevent.NewCommandEvent()\n\n# Our second custom event\nmyEVT_TIME_EVENT = wx.NewEventType()\nEVT_MY_TIME_EVENT = wx.PyEventBinder(myEVT_TIME_EVENT, 1)\nclass MyTimeEvent(wx.PyCommandEvent):\n    def __init__(self, id=0, time=\"12:00:00\"):\n         evttype = myEVT_TIME_EVENT\n        super(MyTimeEvent, self).__init__(evttype, id)wx.PyCommandEvent.__init__(self, myEVT_TIME_EVENT, id)\n\n        # Attributes\n        self.time = time\n\n    def GetTime(self):\n        return self.time\n\n```", "```py\nevent = MyEvent(eventID)\nwx.PostEvent(myFrame, event)\n\n```", "```py\nevent = MyEvent(eventID)\nmyFrame.GetEventHandler().ProcessEvent(event)\n\n```", "```py\nimport wx\nimport wx.lib.eventStack as eventStack \n\nclass EventMgrApp(wx.App, eventStack.AppEventHandlerMixin):\n    \"\"\"Application object base class that\n    event handler managment.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        eventStack.AppEventHandlerMixin.__init__(self)\n        wx.App.__init__(self, *args, **kwargs)\n\nclass EventMgrFrame(wx.Frame):\n    \"\"\"Frame base class that provides event\n    handler managment.\n    \"\"\"\n    def __init__(self, parent, *args, **kwargs):\n        super(EventMgrFrame, self).__init__(parent,\n                                            *args,\n                                            **kwargs)\n\n        # Attributes\n        self._menu_handlers = []\n        self._ui_handlers = []\n\n        # Event Handlers\n        self.Bind(wx.EVT_ACTIVATE, self._OnActivate)\n\n    def _OnActivate(self, event):\n        \"\"\"Pushes/Pops event handlers\"\"\"\n        app = wx.GetApp()\n        active = event.GetActive()\n        if active:\n            mode = wx.UPDATE_UI_PROCESS_SPECIFIED\n            wx.UpdateUIEvent.SetMode(mode)\n            self.SetExtraStyle(wx.WS_EX_PROCESS_UI_UPDATES)\n\n            # Push this instances handlers\n            for handler in self._menu_handlers:\n                app.AddHandlerForID(*handler)\n\n            for handler in self._ui_handlers:\n                app.AddUIHandlerForID(*handler)\n        else:\n            self.SetExtraStyle(0)\n            wx.UpdateUIEvent.SetMode(wx.UPDATE_UI_PROCESS_ALL)\n            # Pop this instances handlers\n            for handler in self._menu_handlers:\n                app.RemoveHandlerForID(handler[0])\n\n            for handler in self._ui_handlers:\n                app.RemoveUIHandlerForID(handler[0])\n\n    def RegisterMenuHandler(self, event_id, handler):\n        \"\"\"Register a MenuEventHandler\n        @param event_id: MenuItem ID\n        @param handler: Event handler function\n        \"\"\"\n        self._menu_handlers.append((event_id, handler))\n\n    def RegisterUpdateUIHandler(self, event_id, handler):\n        \"\"\"Register a controls UpdateUI handler\n        @param event_id: Control ID\n        @param handler: Event handler function\n        \"\"\"\n        self._ui_handlers.append((event_id, handler))\n\n```", "```py\nimport wx\nimport sys\n\nclass IntRangeValidator(wx.PyValidator):\n    \"\"\"An integer range validator for a TextCtrl\"\"\"\n    def __init__(self, min_=0, max_=sys.maxint):\n        \"\"\"Initialize the validator\n        @keyword min: min value to accept\n        @keyword max: max value to accept\n\n        \"\"\"\n        super(IntRangeValidator, self).__init__()\n        assert min_ >= 0, \"Minimum Value must be >= 0\"\n        self._min = min_\n        self._max = max_\n\n        # Event managment\n        self.Bind(wx.EVT_CHAR, self.OnChar)\n\n    def Clone(self):\n        \"\"\"Required override\"\"\"\n        return IntRangeValidator(self._min, self._max)\n\n    def Validate(self, win):\n        \"\"\"Override called to validate the window's value.\n        @return: bool\n        \"\"\"\n        txtCtrl = self.GetWindow()\n        val = txtCtrl.GetValue()\n        isValid = False\n        if val.isdigit():\n            digit = int(val)\n            if digit >= self._min and digit <= self._max:\n                isValid = True\n\n        if not isValid:\n            # Notify the user of the invalid value\n            msg = \"Value must be between %d and %d\" % \\\n                  (self._min, self._max)\n            wx.MessageBox(msg,\n                          \"Invalid Value\",\n                          style=wx.OK|wx.ICON_ERROR)\n\n        return isValid\n\n    def OnChar(self, event):\n        txtCtrl = self.GetWindow()\n        key = event.GetKeyCode()\n        isDigit = False\n        if key < 256:\n            isDigit = chr(key).isdigit()\n\n        if key in (wx.WXK_RETURN,\n                   wx.WXK_DELETE,\n                   wx.WXK_BACK) or \\\n           key > 255 or isDigit:\n            if isDigit:\n                # Check if in range\n                val = txtCtrl.GetValue()\n                digit = chr(key)\n                pos = txtCtrl.GetInsertionPoint()\n                if pos == len(val):\n                    val += digit\n                else:\n                    val = val[:pos] + digit + val[pos:]\n\n                val = int(val)\n                if val < self._min or val > self._max:\n                    if not wx.Validator_IsSilent():\n                        wx.Bell()\n                    return\n\n            event.Skip()\n            return\n\n        if not wx.Validator_IsSilent():\n            # Beep to warn about invalid input\n            wx.Bell()\n\n        return\n\n    def TransferToWindow(self):\n         \"\"\"Overridden to skip data transfer\"\"\"\n         return True\n\n    def TransferFromWindow(self):\n         \"\"\"Overridden to skip data transfer\"\"\"\n         return True\n\n```", "```py\nimport wx\n\nclass MyApp(wx.App):\n    def OnInit(self):\n        self.frame = MyFrame(None, title=\"AppleEvents\")\n        self.SetTopWindow(self.frame)\n        self.frame.Show()\n\n        return True\n\n    def MacNewFile(self):\n        \"\"\"Called for an open-application event\"\"\"\n        self.frame.PushStatusText(\"MacNewFile Called\")\n\n    def MacOpenFile(self, filename):\n        \"\"\"Called for an open-document event\"\"\"\n        self.frame.PushStatusText(\"MacOpenFile: %s\" % \\\n                                  filename)\n\n    def MacOpenURL(self, url):\n        \"\"\"Called for a get-url event\"\"\"\n        self.frame.PushStatusText(\"MacOpenURL: %s\" % url)\n\n    def MacPrintFile(self, filename):\n        \"\"\"Called for a print-document event\"\"\"\n        self.frame.PushStatusText(\"MacPrintFile: %s\" % \\\n                                   filename)\n\n    def MacReopenApp(self):\n        \"\"\"Called for a reopen-application event\"\"\"\n        self.frame.PushStatusText(\"MacReopenApp\")\n        # Raise the application from the Dock\n        if self.frame.IsIconized():\n            self.frame.Iconize(False)\n        self.frame.Raise()\n\n```"]