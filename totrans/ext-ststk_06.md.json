["```py\n# salt-run state.event\n\n```", "```py\n# salt '*' test.ping\n\n```", "```py\nEvent fired at Sun Dec 20 12:04:15 2015\n*************************\nTag: 20151220120415357444\nData:\n{'_stamp': '2015-12-20T19:04:15.387417',\n 'minions': ['trotter',\n             'achatz']}\n```", "```py\nEvent fired at Sun Dec 20 12:04:15 2015\n*************************\nTag: salt/job/20151220120415357444/ret/dufresne\nData:\n{'_stamp': '2015-12-20T19:04:15.618340',\n 'cmd': '_return',\n 'fun': 'test.ping',\n 'fun_args': [],\n 'id': 'dufresne',\n 'jid': '20151220120415357444',\n 'retcode': 0,\n 'return': True,\n 'success': True}\n```", "```py\n# salt '*' test.ping\nachatz:\n True\ntrotter:\n Minion did not return. [Not connected]\n\n```", "```py\n# salt-minion --log-level info\n\n```", "```py\n# salt dufresne test.ping\ndufresne:\n True\n\n```", "```py\n[INFO    ] User sudo_techhat Executing command test.ping with jid 20151220124647074029\n[INFO    ] Starting a new job with PID 25016\n[INFO    ] Returning information for job: 20151220124647074029\n```", "```py\n# salt dufresne --return local test.ping\ndufresne:\n True\n\n```", "```py\n[INFO    ] User sudo_techhat Executing command test.ping with jid 20151220124658909637\n[INFO    ] Starting a new job with PID 25066\n[INFO    ] Returning information for job: 20151220124658909637\n{'fun_args': [], 'jid': '20151220124658909637', 'return': True, 'retcode': 0, 'success': True, 'fun': 'test.ping', 'id': 'dufresne'}\n```", "```py\ndef returner(ret):\n    '''\n    Print the return data to the terminal to verify functionality\n    '''\n    print(ret)\n```", "```py\n'''\nStore return data locally in JSON format\n\nThis file should be saved as salt/returners/local_json.py\n'''\nimport json\nimport salt.utils\n\ndef returner(ret):\n    '''\n    Open new file, and save return data to it in JSON format\n    '''\n    path = '/tmp/salt-{0}-{1}.json'.format(ret['jid'], ret['id'])\n    with salt.utils.fopen(path, 'w') as fp_:\n        json.dump(ret, fp_)\n```", "```py\n# salt-call --local --return local_json test.ping\nlocal:\n True\n\n```", "```py\n# ls -l /tmp/salt*\n-rw-r--r-- 1 root  root  132 Dec 20 13:03 salt-20151220130309936721-dufresne.json\n\n```", "```py\n# cat /tmp/salt-20151220130309936721-dufresne.json\n{\"fun_args\": [], \"jid\": \"20151220130309936721\", \"return\": true, \"retcode\": 0, \"success\": true, \"fun\": \"test.ping\", \"id\": \"dufresne\"}\n\n```", "```py\nimport json\nimport os.path\nimport salt.utils\nimport salt.syspaths\n\ndef _job_path(jid):\n    '''\n    Return the path for the requested JID\n    '''\n    return os.path.join(\n        salt.syspaths.CACHE_DIR,\n        'master',\n        'json_cache',\n        jid[:4],\n        jid[4:6],\n        jid[6:],\n    )\n\ndef returner(ret):\n    '''\n    Open new file, and save return data to it in JSON format\n    '''\n    path = os.path.join(_job_path(ret['jid']), ret['id']) + '/'\n    __salt__['file.makedirs'](path)\n    ret_file = os.path.join(path, 'return.json')\n    with salt.utils.fopen(ret_file, 'w') as fp_:\n        json.dump(ret, fp_)\n```", "```py\n/var/cache/salt/master/json_cache/2015/12/21134608721496/dufresne/return.json\n```", "```py\ndef save_load(jid, clear_load, minions=None):\n    '''\n    Save the load to the specified JID\n    '''\n    path = os.path.join(_job_path(jid)) + '/'\n    __salt__['file.makedirs'](path)\n\n    load_file = os.path.join(path, 'load.json')\n    with salt.utils.fopen(load_file, 'w') as fp_:\n        json.dump(clear_load, fp_)\n\n    if 'tgt' in clear_load:\n        if minions is None:\n            ckminions = salt.utils.minions.CkMinions(__opts__)\n            # Retrieve the minions list\n            minions = ckminions.check_minions(\n                    clear_load['tgt'],\n                    clear_load.get('tgt_type', 'glob')\n                    )\n        minions_file = os.path.join(path, 'minions.json')\n        with salt.utils.fopen(minions_file, 'w') as fp_:\n            json.dump(minions, fp_)\n```", "```py\next_job_cache: local_json\n```", "```py\n# systemctl restart salt-master\n# systemctl restart salt-minion\n# salt dufresne test.ping\ndufresne:\n True\n# find /var/cache/salt/master/json_cache/\n/var/cache/salt/master/json_cache/2015/12/\n/var/cache/salt/master/json_cache/2015/12/21184312454127\n/var/cache/salt/master/json_cache/2015/12/21184312454127/load.json\n/var/cache/salt/master/json_cache/2015/12/21184312454127/dufresne\n/var/cache/salt/master/json_cache/2015/12/21184312454127/dufresne/return.json\n/var/cache/salt/master/json_cache/2015/12/21184312454127/minions.json\n# cat /var/cache/salt/master/json_cache/2015/12/21184312454127/load.json\n{\"tgt_type\": \"glob\", \"jid\": \"20151221184312454127\", \"cmd\": \"publish\", \"tgt\": \"dufresne\", \"kwargs\": {\"delimiter\": \":\", \"show_timeout\": true, \"show_jid\": false}, \"ret\": \"local_json\", \"user\": \"sudo_larry\", \"arg\": [], \"fun\": \"test.ping\"}\n# cat /var/cache/salt/master/json_cache/2015/12/21184312454127/minions.json\n[\"dufresne\"]\n\n```", "```py\ndef get_load(jid):\n    '''\n    Return the load data for a specified JID\n    '''\n    path = os.path.join(_job_path(jid), 'load.json')\n    with salt.utils.fopen(path, 'r') as fp_:\n        return json.load(fp_)\n```", "```py\ndef get_jid(jid):\n    '''\n    Return the information returned when the specified JID was executed\n    '''\n    minions_path = os.path.join(_job_path(jid), 'minions.json')\n    with salt.utils.fopen(minions_path, 'r') as fp_:\n        minions = json.load(fp_)\n\n    ret = {}\n    for minion in minions:\n        data_path = os.path.join(_job_path(jid), minion, 'return.json')\n        with salt.utils.fopen(data_path, 'r') as fp_:\n            ret[minion] = json.load(fp_)\n\n    return ret\n```", "```py\n# salt-run jobs.print_job 20151221184312454127\n20151221184312454127:\n ----------\n Arguments:\n Function:\n test.ping\n Result:\n ----------\n dufresne:\n ----------\n fun:\n test.ping\n fun_args:\n id:\n dufresne\n jid:\n 20151221184312454127\n retcode:\n 0\n return:\n True\n success:\n True\n StartTime:\n 2015, Dec 21 18:43:12.454127\n Target:\n dufresne\n Target-type:\n glob\n User:\n sudo_techhat\n\n```", "```py\nimport salt.utils.find\n\ndef get_jids():\n    '''\n    Return a dict mapping all JIDs to job information\n    '''\n    path = os.path.join(\n        salt.syspaths.CACHE_DIR,\n        'master',\n        'json_cache'\n    )\n\n    ret = {}\n    finder = salt.utils.find.Finder({'name': 'load.json'})\n    for file_ in finder.find(path):\n        with salt.utils.fopen(file_) as fp_:\n            data = json.load(fp_)\n        if 'jid' in data:\n            ret[data['jid']] = {\n                'Arguments': data['arg'],\n                'Function': data['fun'],\n                'StartTime': salt.utils.jid.jid_to_time(data['jid']),\n                'Target': data['tgt'],\n                'Target-type': data['tgt_type'],\n                'User': data['user'],\n            }\n\n    return ret\n```", "```py\n# salt-run jobs.list_jobs\n20151221184312454127:\n ----------\n Arguments:\n Function:\n test.ping\n StartTime:\n 2015, Dec 21 18:43:12.454127\n Target:\n dufresne\n Target-type:\n glob\n User:\n sudo_techhat\n\n```", "```py\n'''\nStore return data locally in JSON format\n\nThis file should be saved as salt/returners/local_json.py\n'''\nimport json\nimport os.path\nimport salt.utils\nimport salt.utils.find\nimport salt.utils.jid\nimport salt.syspaths\n\ndef _job_path(jid):\n    '''\n    Return the path for the requested JID\n    '''\n    return os.path.join(\n        salt.syspaths.CACHE_DIR,\n        'master',\n        'json_cache',\n        jid[:4],\n        jid[4:6],\n        jid[6:],\n    )\n\ndef returner(ret):\n    '''\n    Open new file, and save return data to it in JSON format\n    '''\n    path = os.path.join(_job_path(ret['jid']), ret['id']) + '/'\n    __salt__['file.makedirs'](path)\n    ret_file = os.path.join(path, 'return.json')\n    with salt.utils.fopen(ret_file, 'w') as fp_:\n        json.dump(ret, fp_)\n\ndef save_load(jid, clear_load, minions=None):\n    '''\n    Save the load to the specified JID\n    '''\n    path = os.path.join(_job_path(jid)) + '/'\n    __salt__['file.makedirs'](path)\n\n    load_file = os.path.join(path, 'load.json')\n    with salt.utils.fopen(load_file, 'w') as fp_:\n        json.dump(clear_load, fp_)\n            minions = ckminions.check_minions(\n                    clear_load['tgt'],\n                    clear_load.get('tgt_type', 'glob')\n                    )\n        minions_file = os.path.join(path, 'minions.json')\n        with salt.utils.fopen(minions_file, 'w') as fp_:\n            json.dump(minions, fp_)\n\ndef get_load(jid):\n    '''\n    Return the load data for a specified JID\n    '''\n    path = os.path.join(_job_path(jid), 'load.json')\n    with salt.utils.fopen(path, 'r') as fp_:\n        return json.load(fp_)\n\ndef get_jid(jid):\n    '''\n    Return the information returned when the specified JID was executed\n    '''\n    minions_path = os.path.join(_job_path(jid), 'minions.json')\n    with salt.utils.fopen(minions_path, 'r') as fp_:\n        minions = json.load(fp_)\n\n    ret = {}\n    for minion in minions:\n        data_path = os.path.join(_job_path(jid), minion, 'return.json')\n        with salt.utils.fopen(data_path, 'r') as fp_:\n            ret[minion] = json.load(fp_)\n\n    return ret\n\ndef get_jids():\n    '''\n    Return a dict mapping all JIDs to job information\n    '''\n    path = os.path.join(\n        salt.syspaths.CACHE_DIR,\n        'master',\n        'json_cache'\n    )\n\n    ret = {}\n    finder = salt.utils.find.Finder({'name': 'load.json'})\n    for file_ in finder.find(path):\n        with salt.utils.fopen(file_) as fp_:\n            data = json.load(fp_)\n        if 'jid' in data:\n            ret[data['jid']] = {\n                'Arguments': data['arg'],\n                'Function': data['fun'],\n                'StartTime': salt.utils.jid.jid_to_time(data['jid']),\n                'Target': data['tgt'],\n                'Target-type': data['tgt_type'],\n                'User': data['user'],\n            }\n\n    return ret\n```", "```py\n# salt-master --log-level debug\n# salt-minion --log-level debug\n\n```", "```py\n'''\nPickle outputter\n\nThis file should be saved as salt/output/pickle.py\n'''\nfrom __future__ import absolute_import\nimport pickle\n\ndef output(data):\n    '''\n    Dump out data in pickle format\n    '''\n    return pickle.dumps(data)\n```", "```py\n# salt-call --local test.ping --out pickle\n(dp0\nS'local'\np1\nI01\ns.\n\n```", "```py\n# salt-call --local grains.items --out pickle\n# salt-call --local grains.items --out pprint\n\n```"]