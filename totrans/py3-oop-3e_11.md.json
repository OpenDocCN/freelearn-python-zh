["```py\nclass AgeCalculator:\n    def __init__(self, birthday):\n        self.year, self.month, self.day = (\n            int(x) for x in birthday.split(\"-\")\n        )\n\n    def calculate_age(self, date):\n        year, month, day = (int(x) for x in date.split(\"-\"))\n        age = year - self.year\n        if (month, day) < (self.month, self.day):\n            age -= 1\n        return age\n```", "```py\nimport datetime \n\nclass DateAgeAdapter:\n    def _str_date(self, date):\n        return date.strftime(\"%Y-%m-%d\")\n\n    def __init__(self, birthday):\n        birthday = self._str_date(birthday)\n        self.calculator = AgeCalculator(birthday)\n\n    def get_age(self, date):\n        date = self._str_date(date)\n        return self.calculator.calculate_age(date)\n```", "```py\nimport datetime \nclass AgeableDate(datetime.date): \n    def split(self, char): \n        return self.year, self.month, self.day \n```", "```py\n>>> bd = AgeableDate(1975, 6, 14)\n>>> today = AgeableDate.today()\n>>> today\nAgeableDate(2015, 8, 4)\n>>> a = AgeCalculator(bd)\n>>> a.calculate_age(today)\n40  \n```", "```py\nimport smtplib \nimport imaplib \n\nclass EmailFacade: \n    def __init__(self, host, username, password): \n        self.host = host \n        self.username = username \n        self.password = password \n```", "```py\n    def send_email(self, to_email, subject, message):\n        if not \"@\" in self.username:\n            from_email = \"{0}@{1}\".format(self.username, self.host)\n        else:\n            from_email = self.username\n        message = (\n            \"From: {0}\\r\\n\" \"To: {1}\\r\\n\" \"Subject: {2}\\r\\n\\r\\n{3}\"\n        ).format(from_email, to_email, subject, message)\n\n        smtp = smtplib.SMTP(self.host)\n        smtp.login(self.username, self.password)\n        smtp.sendmail(from_email, [to_email], message)\n```", "```py\n    def get_inbox(self):\n        mailbox = imaplib.IMAP4(self.host)\n        mailbox.login(\n            bytes(self.username, \"utf8\"), bytes(self.password, \"utf8\")\n        )\n        mailbox.select()\n        x, data = mailbox.search(None, \"ALL\")\n        messages = []\n        for num in data[0].split():\n            x, message = mailbox.fetch(num, \"(RFC822)\")\n            messages.append(message[0][1])\n        return messages\n```", "```py\nimport weakref\n\nclass CarModel:\n    _models = weakref.WeakValueDictionary()\n\n    def __new__(cls, model_name, *args, **kwargs):\n        model = cls._models.get(model_name)\n        if not model:\n            model = super().__new__(cls)\n            cls._models[model_name] = model\n\n        return model\n```", "```py\n    def __init__(\n        self,\n        model_name,\n        air=False,\n        tilt=False,\n        cruise_control=False,\n        power_locks=False,\n        alloy_wheels=False,\n        usb_charger=False,\n    ):\n        if not hasattr(self, \"initted\"):\n            self.model_name = model_name\n            self.air = air\n            self.tilt = tilt\n            self.cruise_control = cruise_control\n            self.power_locks = power_locks\n            self.alloy_wheels = alloy_wheels\n            self.usb_charger = usb_charger\n            self.initted = True\n\n```", "```py\n    def check_serial(self, serial_number):\n        print(\n            \"Sorry, we are unable to check \"\n            \"the serial number {0} on the {1} \"\n            \"at this time\".format(serial_number, self.model_name)\n        )\n```", "```py\nclass Car: \n    def __init__(self, model, color, serial): \n        self.model = model \n        self.color = color \n        self.serial = serial \n\n    def check_serial(self): \n        return self.model.check_serial(self.serial) \n```", "```py\n>>> dx = CarModel(\"FIT DX\")\n>>> lx = CarModel(\"FIT LX\", air=True, cruise_control=True,\n... power_locks=True, tilt=True)\n>>> car1 = Car(dx, \"blue\", \"12345\")\n>>> car2 = Car(dx, \"black\", \"12346\")\n>>> car3 = Car(lx, \"red\", \"12347\")  \n```", "```py\n>>> id(lx)\n3071620300\n>>> del lx\n>>> del car3\n>>> import gc\n>>> gc.collect()\n0\n>>> lx = CarModel(\"FIT LX\", air=True, cruise_control=True,\n... power_locks=True, tilt=True)\n>>> id(lx)\n3071576140\n>>> lx = CarModel(\"FIT LX\")\n>>> id(lx)\n3071576140\n>>> lx.air\nTrue  \n```", "```py\nimport sys \n\nclass Window: \n    def exit(self): \n        sys.exit(0) \n\nclass Document: \n    def __init__(self, filename): \n        self.filename = filename \n        self.contents = \"This file cannot be modified\" \n\n    def save(self): \n        with open(self.filename, 'w') as file: \n            file.write(self.contents) \n```", "```py\nclass ToolbarButton:\n    def __init__(self, name, iconname):\n        self.name = name\n        self.iconname = iconname\n\n    def click(self):\n        self.command.execute()\n\nclass MenuItem:\n    def __init__(self, menu_name, menuitem_name):\n        self.menu = menu_name\n        self.item = menuitem_name\n\n    def click(self):\n        self.command.execute()\n\nclass KeyboardShortcut:\n    def __init__(self, key, modifier):\n        self.key = key\n        self.modifier = modifier\n\n    def keypress(self):\n        self.command.execute()\n```", "```py\nclass SaveCommand:\n    def __init__(self, document):\n        self.document = document\n\n    def execute(self):\n        self.document.save()\n\nclass ExitCommand:\n    def __init__(self, window):\n        self.window = window\n\n    def execute(self):\n        self.window.exit()\n```", "```py\nwindow = Window() \ndocument = Document(\"a_document.txt\") \nsave = SaveCommand(document) \nexit = ExitCommand(window) \n\nsave_button = ToolbarButton('save', 'save.png') \nsave_button.command = save \nsave_keystroke = KeyboardShortcut(\"s\", \"ctrl\") \nsave_keystroke.command = save \nexit_menu = MenuItem(\"File\", \"Exit\") \nexit_menu.command = exit \n```", "```py\nimport sys\n\nclass Window:\n    def exit(self):\n        sys.exit(0)\n\nclass MenuItem:\n    def click(self):\n        self.command()\n\nwindow = Window()\nmenu_item = MenuItem()\nmenu_item.command = window.exit\n```", "```py\nclass Document:\n    def __init__(self, filename):\n        self.filename = filename\n        self.contents = \"This file cannot be modified\"\n\n    def save(self):\n        with open(self.filename, \"w\") as file:\n            file.write(self.contents)\n\nclass KeyboardShortcut:\n    def keypress(self):\n        self.command()\n\nclass SaveCommand:\n    def __init__(self, document):\n        self.document = document\n\n    def __call__(self):\n        self.document.save()\n\ndocument = Document(\"a_file.txt\")\nshortcut = KeyboardShortcut()\nsave_command = SaveCommand(document)\nshortcut.command = save_command\n```", "```py\nclass FranceDateFormatter:\n    def format_date(self, y, m, d):\n        y, m, d = (str(x) for x in (y, m, d))\n        y = \"20\" + y if len(y) == 2 else y\n        m = \"0\" + m if len(m) == 1 else m\n        d = \"0\" + d if len(d) == 1 else d\n        return \"{0}/{1}/{2}\".format(d, m, y)\n\nclass USADateFormatter:\n    def format_date(self, y, m, d):\n        y, m, d = (str(x) for x in (y, m, d))\n        y = \"20\" + y if len(y) == 2 else y\n        m = \"0\" + m if len(m) == 1 else m\n        d = \"0\" + d if len(d) == 1 else d\n        return \"{0}-{1}-{2}\".format(m, d, y)\n\nclass FranceCurrencyFormatter:\n    def format_currency(self, base, cents):\n        base, cents = (str(x) for x in (base, cents))\n        if len(cents) == 0:\n            cents = \"00\"\n        elif len(cents) == 1:\n            cents = \"0\" + cents\n\n        digits = []\n        for i, c in enumerate(reversed(base)):\n            if i and not i % 3:\n                digits.append(\" \")\n            digits.append(c)\n        base = \"\".join(reversed(digits))\n        return \"{0}â‚¬{1}\".format(base, cents)\n\nclass USACurrencyFormatter:\n    def format_currency(self, base, cents):\n        base, cents = (str(x) for x in (base, cents))\n        if len(cents) == 0:\n            cents = \"00\"\n        elif len(cents) == 1:\n            cents = \"0\" + cents\n        digits = []\n        for i, c in enumerate(reversed(base)):\n            if i and not i % 3:\n                digits.append(\",\")\n            digits.append(c)\n        base = \"\".join(reversed(digits))\n        return \"${0}.{1}\".format(base, cents)\n```", "```py\nclass USAFormatterFactory:\n    def create_date_formatter(self):\n        return USADateFormatter()\n\n    def create_currency_formatter(self):\n        return USACurrencyFormatter()\n\nclass FranceFormatterFactory:\n    def create_date_formatter(self):\n        return FranceDateFormatter()\n\n    def create_currency_formatter(self):\n        return FranceCurrencyFormatter()\n```", "```py\ncountry_code = \"US\"\nfactory_map = {\"US\": USAFormatterFactory, \"FR\": FranceFormatterFactory}\nformatter_factory = factory_map.get(country_code)()\n```", "```py\nlocalize/ \n    __init__.py \n    backends/ \n        __init__.py \n        USA.py \n        France.py \n        ... \n```", "```py\nfrom .backends import USA, France \n\nif country_code == \"US\": \n    current_backend = USA \n```", "```py\nclass Folder: \n    def __init__(self, name): \n        self.name = name \n        self.children = {} \n\n    def add_child(self, child): \n        pass \n\n    def move(self, new_path): \n        pass \n\n    def copy(self, new_path): \n        pass \n\n    def delete(self): \n        pass \n\nclass File: \n    def __init__(self, name, contents): \n        self.name = name \n        self.contents = contents \n\n    def move(self, new_path): \n        pass \n\n    def copy(self, new_path): \n        pass \n\n    def delete(self): \n        pass \n```", "```py\nclass Component:\n    def __init__(self, name):\n        self.name = name\n\n    def move(self, new_path):\n        new_folder = get_path(new_path)\n        del self.parent.children[self.name]\n        new_folder.children[self.name] = self\n        self.parent = new_folder\n\n    def delete(self):\n        del self.parent.children[self.name]\n\nclass Folder(Component):\n    def __init__(self, name):\n        super().__init__(name)\n        self.children = {}\n\n    def add_child(self, child):\n        pass\n\n    def copy(self, new_path):\n        pass\n\nclass File(Component):\n    def __init__(self, name, contents):\n        super().__init__(name)\n        self.contents = contents\n\n    def copy(self, new_path):\n        pass\n\nroot = Folder(\"\")\n\ndef get_path(path):\n    names = path.split(\"/\")[1:]\n    node = root\n    for name in names:\n        node = node.children[name]\n    return node\n```", "```py\n    def add_child(self, child):\n        child.parent = self\n        self.children[child.name] = child\n```", "```py\n$ python3 -i 1261_09_18_add_child.py\n\n>>> folder1 = Folder('folder1')\n>>> folder2 = Folder('folder2')\n>>> root.add_child(folder1)\n>>> root.add_child(folder2)\n>>> folder11 = Folder('folder11')\n>>> folder1.add_child(folder11)\n>>> file111 = File('file111', 'contents')\n>>> folder11.add_child(file111)\n>>> file21 = File('file21', 'other contents')\n>>> folder2.add_child(file21)\n>>> folder2.children\n{'file21': <__main__.File object at 0xb7220a4c>}\n>>> folder2.move('/folder1/folder11')\n>>> folder11.children\n{'folder2': <__main__.Folder object at 0xb722080c>, 'file111': <__main__.File object at \n0xb72209ec>}\n>>> file21.move('/folder1')\n>>> folder1.children\n{'file21': <__main__.File object at 0xb7220a4c>, 'folder11': <__main__.Folder object at \n0xb722084c>}  \n```"]