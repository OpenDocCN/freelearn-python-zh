["```py\nbl_info = {\n    \"name\": \"Text PunchClock\",\n    \"author\": \"Packt Man\",\n    \"version\": (1, 0),\n    \"blender\": (3, 00, 0),\n    \"description\": \"Create an Hour/Minutes text object\",\n    \"category\": \"Learning\",\n}\n```", "```py\nimport bpy\nclass PunchClock(bpy.types.Operator):\n    \"\"\"Create Hour/Minutes text\"\"\"\n    bl_idname = \"text.punch_clock\"\n    bl_label = \"Create Hour/Minutes Text\"\n    bl_description = \"Create Hour Minutes Text\"\n    bl_options = {'REGISTER', 'UNDO'}\n    hour: bpy.props.IntProperty(default=0, min=0, max=23)\n    mins: bpy.props.IntProperty(default=0, min=0, max=59)\n```", "```py\n    @classmethod\n    def poll(cls, context):\n        return context.mode == 'OBJECT'\n```", "```py\n    def execute(self, context):\n        txt_crv = bpy.data.curves.new(type=\"FONT\",\n                                      name=\"TXT-clock\")\n        txt_crv.body = f\"{self.hour:02}:{self.mins:02}\"\n```", "```py\n        txt_obj = bpy.data.objects.new(name=\"Font Object\",\n                                       object_data=txt_crv)\n```", "```py\n        context.collection.objects.link(txt_obj)\n        return {'FINISHED'}\n```", "```py\ndef menu_func(self, context):\n    self.layout.separator()\n    self.layout.operator(PunchClock.bl_idname, icon='TIME')\n```", "```py\ndef register():\n    bpy.utils.register_class(PunchClock)\n    bpy.types.VIEW3D_MT_add.append(menu_func)\ndef unregister():\n    bpy.types.VIEW3D_MT_add.remove(menu_func)\n    bpy.utils.unregister_class(PunchClock)\n```", "```py\nimport bpy\nimport datetime\n```", "```py\n    @classmethod\n    def poll(cls, context):\n        return context.mode == 'OBJECT'\n    def invoke(self, context, event):\n        now = datetime.datetime.now()\n        self.hour = now.hour\n        self.mins = now.minute\n        return self.execute(context)\n```", "```py\ndef menu_func(self, context):\n    self.layout.separator()\n    row = self.layout.row()\n    row.operator_context = \"INVOKE_DEFAULT\"\n    row.operator(PunchClock.bl_idname, icon='TIME')\n```", "```py\n    def invoke(self, context, event):\n        now = datetime.datetime.now()\n        self.hour = now.hour\n        self.mins = now.minute\n        self.txt_crv = bpy.data.curves.new(type=\"FONT\",\n                                           name=\"TXT-hhmm\")\n        self.txt_obj = bpy.data.objects.new(name=\"OB-Txt\",\n                                 object_data=self.txt_crv)\n        context.collection.objects.link(self.txt_obj)\n        context.window_manager.modal_handler_add(self)\n        return {'RUNNING_MODAL'}\n```", "```py\n    event.type == \"MOUSEMOVE\"\n```", "```py\n    hour: bpy.props.IntProperty(default=0, min=0, max=23)\n    mins: bpy.props.IntProperty(default=0, min=0, max=59)\n    set_hours: bpy.props.BoolProperty(default=True)\n```", "```py\n    def modal(self, context, event):\n        if event.type == 'MOUSEMOVE':\n            delta = event.mouse_x - event.mouse_prev_x\n            delta /= 10\n```", "```py\n            delta = round(delta)\n```", "```py\n            if self.set_hours:\n                self.hour += delta\n            else:\n                self.mins += delta\n            txt = f\"{self.hour:02}:{self.mins:02}\"\n            self.txt_crv.body = txt\n```", "```py\n        if event.type == 'TAB' and event.value == 'PRESS':\n            self.set_hours = not self.set_hours\n```", "```py\n         elif event.type == 'RET':\n            return {'FINISHED'}\n```", "```py\n        elif event.type == 'ESC':\n            bpy.data.objects.remove(self.txt_obj)\n            return {'CANCELLED'}\n```", "```py\n        return {'RUNNING_MODAL'}\n```", "```py\n    def draw(self, context):\n        layout = self.layout\n        row = layout.row(align=True)\n        row.alignment = 'CENTER'\n```", "```py\n        row.prop(self, 'hour', text=\"\")\n        row.label(text=' :',)\n        row.prop(self, 'mins', text=\"\")\n```"]