["```py\nimport sys\nfrom pathlib import Path\n\nsrc_path = Path.cwd().parent / \"src\"\nsys.path.append(str(src_path))\n```", "```py\nf\"mean = {statistics.mean(data_values): .2f}\"\n```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\n%matplotlib inline\n%config InlineBackend.figure_formats = {’png’, ’retina’}\n```", "```py\nx = [s.x for s in series_1]\ny = [s.y for s in series_1]\n```", "```py\nfrom operator import attrgetter\n\nx = list(map(attrgetter(’x’), series_1))\ny = list(map(attrgetter(’y’), series_1))\n```", "```py\nfig, ax = plt.subplots()\n```", "```py\nfig, (ax_0, ax_1) = plt.subplots(1, 2)\n```", "```py\nfig, ax = plt.subplots()\n\n# Labels and Title\nax.set_xlabel(’Y’)\nax.set_ylabel(’Counts’)\nax.set_title(’Series I’)\n\n# Draw Histogram\n_ = ax.hist(y, fill=False)\n```", "```py\nfig, ax = plt.subplots()\n\n# Labels and Title\nax.set_xlabel(’X’)\nax.set_ylabel(’Y’)\nax.set_title(’Series I’)\n\n# Draw Scatter\n_ = ax.scatter(x, y)\n```", "```py\nx = [s.x for s in series_1]\ny = [s.y for s in series_1]\n```", "```py\ndef load(source_file):\n    \"\"\"\n    >>> from io import StringIO\n    >>> file = StringIO(’’’{\"x\": 2.0, \"y\": 3.0}\\\\n{\"x\": 5.0, \"y\": 7.0}’’’)\n    >>> d = load(file)\n    >>> len(d)\n    2\n    >>> d[0]\n    SeriesSample(x=2.0, y=3.0)\n    \"\"\"\n    data = [\n        SeriesSample(**json.loads(line)) for line in source_file if line\n    ]\n    return data\n```", "```py\nimport doctest\ndoctest.testmod()\n```"]