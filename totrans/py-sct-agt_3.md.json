["```py\nMacBookPro-SLott:code slott$ ls *.jpg\n1drachmi_1973.jpg      IPhone_Internals.jpg\nCommon_face_of_one_euro_coin.jpg  LHD_warship.jpg\n```", "```py\n>>> import glob\n>>> glob.glob(\"*.jpg\")\n['1drachmi_1973.jpg', 'Common_face_of_one_euro_coin.jpg', 'IPhone_Internals.jpg', 'LHD_warship.jpg']\n```", "```py\n>>> import os\n>>> os.path.splitext( \"1drachmi_1973.jpg\" )\n('1drachmi_1973', '.jpg')\n```", "```py\nwith open(\"some_file\") as data:\n    for line in data:\n       ... process the line ...\n```", "```py\nwith open(\"some_file\") as data:\n    for line in (raw.rstrip() for raw in data):\n       ... process the line ...\n```", "```py\nwith open(\"some_file\") as data:\n    clean_lines = (raw.rstrip() for raw in data)\n    for line in clean_lines:\n        ... process the line ...\n```", "```py\nwith open(\"some_file\") as data:\n    clean_lines = (raw.rstrip() for raw in data)\n    non_blank_lines = (line for line in clean_lines if len(line) != 0)\n    for line in non_blank_lines:\n        ... process the line ...\n```", "```py\nimport zipfile\n```", "```py\nwith zipfile.ZipFile(\"demo.zip\", \"r\") as archive:\n```", "```py\nwith ZipFile(\"test.zip\", \"w\", compression=zipfile.zipfile.ZIP_DEFLATED) as archive:\n```", "```py\n    with archive.open(\"some_file\") as member:\n        ...process member... \n```", "```py\nimport zipfile\nwith zipfile.ZipFile( \"demo.zip\", \"r\" ) as archive:\n    archive.printdir()\n    first = archive.infolist()[0]\n    with archive.open(first) as member:\n        text= member.read()\n        print( text )\n```", "```py\nimport zipfile\nwith zipfile.ZipFile( \"photos.zip\", \"r\" ) as archive:\n    archive.extract(\"warship.png\")\n```", "```py\nimport json\n```", "```py\n...create an_object...\nwith open(\"some_file.json\", \"w\") as output:\n    json.save(an_object, output)\n```", "```py\nwith open(\"some_file.json\") as input:\n    an_object= json.load(input)\n...process an_object...\n```", "```py\nimport csv\n```", "```py\nimport io\nwith urllib.request.urlopen( query_history ) as document:\n    history_data= document.read().decode(\"utf-8\") \nreader= csv.reader( io.StringIO(history_data) )\n```", "```py\nfor row in reader:\n    print( row )\n```", "```py\nruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\"\n\n```", "```py\nbrew install libtiff libjpeg webp littlecms\n\n```", "```py\nsudo easy_install-3.3 pillow\n\n```", "```py\n--------------------------------------------------------------------\nPIL SETUP SUMMARY\n--------------------------------------------------------------------\nversion      Pillow 2.4.0\nplatform     darwin 3.3.4 (v3.3.4:7ff62415e426, Feb  9 2014, 00:29:34)\n [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]\n--------------------------------------------------------------------\n--- TKINTER support available\n--- JPEG support available\n*** OPENJPEG (JPEG2000) support not available\n--- ZLIB (PNG/ZIP) support available\n--- LIBTIFF support available\n*** FREETYPE2 support not available\n*** LITTLECMS2 support not available\n--- WEBP support available\n--- WEBPMUX support available\n--------------------------------------------------------------------\nTo add a missing option, make sure you have the required\nlibrary, and set the corresponding ROOT variable in the\nsetup.py script.\n\nTo check the build, run the selftest.py script.\n\n```", "```py\n>>> from PIL import Image\n```", "```py\n>>> pix= Image.open(\"1drachmi_1973.jpg\")\n>>> pix\n<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=198x194 at 0x10183BA90>\n```", "```py\n>>> pix.save(\"test.tiff\")\n```", "```py\nfrom PIL import Image\npix= Image.open(\"LHD_warship.jpg\")\n```", "```py\n>>> pix.info.keys()\ndict_keys(['jfif_density', 'icc_profile', 'jfif_version', 'jfif', 'exif', 'jfif_unit', 'dpi'])\n```", "```py\n>>> exif= pix._getexif()\n>>> exif.keys()\ndict_keys([36864, 37121, 37378, 36867, 36868, 41989, 40960, 37383, 37385, 37386, 40962, 271, 272, 37521, 37522, 40963, 37396, 41495, 41988, 282, 283, 33434, 37500, 34850, 40961, 34853, 41986, 34855, 296, 34665, 41987, 41990, 42034, 33437, 305, 306, 42035, 42036, 41729])\n```", "```py\n>>> import PIL.ExifTags\n>>> for k, v in pix._getexif().items():\n...     print( PIL.ExifTags.TAGS[k], v ) \n```", "```py\n  Software 7.1.1\n  DateTime 2014:05:10 09:59:22\n  LensMake Apple\n  LensModel iPhone 4 back camera 3.85mm f/2.8\n```", "```py\n    img= Image.open(name)\n    print( name, img.format, img.mode, img.size )\n    for key in img.info:\n        if key == 'exif':\n            for k,v in img._getexif().items():\n                if k == 34853: # GPSInfo\n                    print( \" \", PIL.ExifTags.TAGS[k], v )\n                    for gk, gv in v.items():\n                        print( \"  \", PIL.ExifTags.GPSTAGS[gk], gv )\n                else:\n                    print( \" \", PIL.ExifTags.TAGS[k], v )\n        elif key == 'icc_profile':\n            print( key ) # Skip these details\n        else:\n            print( key, img.info[key] )\n```", "```py\nCommon_face_of_one_euro_coin.jpg JPEG RGB (320, 312)\n  ExifOffset 26\n  ExifImageWidth 320\n  ExifImageHeight 312\njfif_version (1, 1)\njfif_unit 0\njfif_density (1, 1)\njfif 257\n```", "```py\n  DateTimeOriginal 2009:03:18 04:24:24\n  DateTimeDigitized 2009:03:18 04:24:24\n  SceneCaptureType 0\n  MeteringMode 3\n  Flash 16\n  FocalLength (20, 1)\n  ApertureValue (35, 8)\n  FocalPlaneXResolution (257877, 53)\n  Make Canon\n  Model Canon EOS DIGITAL REBEL XSi \n```", "```py\n   GPSLatitudeRef N\n   GPSLatitude ((36, 1), (50, 1), (4012, 100))\n   GPSLongitudeRef W\n   GPSLongitude ((76, 1), (17, 1), (3521, 100))\n```", "```py\nfrom PIL import Image\nimport glob\nimport os\n\nfor filename in glob.glob(\"*.jpg\"):\n    name, ext = os.path.splitext( filename )\n    if name.endswith(\"_thumb\"):\n        continue\n    img = Image.open( filename )\n    thumb= img.copy()\n    w, h = img.size\n    largest = max(w,h)\n    w_n, h_n = w*128//largest, h*128//largest\n    print( \"Resize\", filename, \"from\", w,h, \"to\", w_n,h_n )\n    thumb.thumbnail( (w_n, h_n), PIL.Image.ANTIALIAS )\n    thumb.save( name+\"_thumb\"+ext )\n```", "```py\n>>> from PIL import Image\n>>> ship= Image.open( \"LHD_warship.jpg\" )\n>>> ship.size\n(2592, 1936)\n```", "```py\n>>> w, h = ship.size\n>>> ship.crop( box=(w//3,0,2*w//3,h//3) ).show()\n>>> ship.crop( box=(w//3,h//3,2*w//3,2*h//3) ).show()\n```", "```py\n>>> p=h/w\n>>> x,y=3*w//12, 3*h//12\n>>> ship.crop( box=(x,y,x+600,int(y+600*p)) ).show()\n>>> x,y=3*w//12, 5*h//12\n>>> ship.crop( box=(x,y,x+600,int(y+600*p)) ).show()\n```", "```py\n>>> from fractions import Fraction\n>>> slices = 6\n>>> box = [ Fraction(i,slices) for i in range(slices+1) ]\n>>> box\n[Fraction(0, 1), Fraction(1, 6), Fraction(1, 3), Fraction(1, 2), Fraction(2, 3), Fraction(5, 6), Fraction(1, 1)]\n```", "```py\nfor i in range(slices):\n    for j in range(slices):\n       bounds = int(w*box[i]), int(h*box[j]), int(w*box[i+1]), int(h*box[j+1])\n```", "```py\nprint( bounds )\nship.crop( bounds ).show() \n```", "```py\nbounds = map( int, (w*box[i], h*box[j], w*box[i+1], h*box[j+1]) )\n```", "```py\nslices = 12\nbox = [ Fraction(i,slices) for i in range(slices+1) ]\nbounds = map( int, (w*box[3], h*box[6], w*box[5], h*box[7]) )\nlogo= ship.crop( bounds )\nlogo.show()\nlogo.save( \"LHD_number.jpg\" )\n```", "```py\nw,h= logo.size\nlogo.resize( (w*3,h*3) )\n```", "```py\n>>> from PIL import ImageEnhance\n>>> e= ImageEnhance.Contrast(logo)\n>>> e.enhance(2.0).show()\n>>> e.enhance(4.0).show()\n>>> e.enhance(8.0).show()\n```", "```py\n>>> from PIL import ImageFilter\n>>> logo.filter( ImageFilter.EDGE_ENHANCE ).show()\n```", "```py\n>>> e.enhance(8.0).filter( ImageFilter.EDGE_ENHANCE ).save( \"LHD_Number_2.jpg\" )\n```", "```py\n>>> p1= e.enhance(8.0).filter( ImageFilter.ModeFilter(8) )\n>>> p1.filter( ImageFilter.EDGE_ENHANCE ).show()\n```", "```py\n>>> from PIL import ImageOps\n>>> ImageOps.autocontrast( logo ).show()\n>>> logo.show()\n```", "```py\n>>> ac= ImageEnhance.Contrast( ImageOps.autocontrast( logo ) )\n>>> ac.enhance( 2.5 ).save( \"LHD_Number_3.jpg\" )\n```", "```py\n>>> y = 0\n>>> for x in range(64):\n...     print(ship.getpixel( (x,y) ))\n... \n(234, 244, 243)\n(234, 244, 243)\n(233, 243, 242)\n(233, 243, 242)\netc.\n```", "```py\n>>> ship.getbands() \n('R', 'G', 'B')\n```", "```py\n>>> message=\"http://www.kearsarge.navy.mil\"\n>>> message.encode(\"UTF-8\")\nb'http://www.kearsarge.navy.mil'\n```", "```py\n>>> message.encode(\"UTF-16\")\nb'\\xff\\xfeh\\x00t\\x00t\\x00p\\x00:\\x00/\\x00/\\x00w\\x00w\\x00w\\x00.\\x00k\\x00e\\x00a\\x00r\n\\x00s\\x00a\\x00r\\x00g\\x00e\\x00.\\x00n\\x00a\\x00v\\x00y\\x00.\\x00m\\x00i\\x00l\\x00'\n```", "```py\n>>> [ hex(c) for c in message.encode(\"UTF-8\") ]\n['0x68', '0x74', '0x74', '0x70', '0x3a', '0x2f', '0x2f', '0x77', '0x77', '0x77', '0x2e', '0x6b', '0x65', '0x61', '0x72', '0x73', '0x61', '0x72', '0x67', '0x65', '0x2e', '0x6e', '0x61', '0x76', '0x79', '0x2e', '0x6d', '0x69', '0x6c']\n```", "```py\ndef to_bits( v ):\n    b= []\n    for i in range(8):\n        b.append( v & 1 )\n        v >>= 1\n    return tuple(reversed(b))\n```", "```py\n>>> to_bits(234)\n(1, 1, 1, 0, 1, 0, 1, 0)\n>>> bin(234)\n'0b11101010'\n```", "```py\ndef to_byte( b ):\n    v= 0\n    for bit in b:\n        v = (v<<1)|bit\n    return v\n```", "```py\nfor test in range(256):\n    b = to_bits(test)\n    v = to_byte(b)\n    assert v == test\n```", "```py\nmessage_bytes = message.encode(\"UTF-8\")\nprint( list(to_bits(c) for c in message_bytes) )\n```", "```py\n[(1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 0), \n(0, 1, 1, 0, 1, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0),\n  ...\n(0, 1, 1, 0, 1, 1, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0)]\n```", "```py\ndef bit_sequence( list_of_tuples ):\n    for t8 in list_of_tuples:\n        for b in t8:\n            yield b\n```", "```py\nprint( list( bit_sequence(\n    (to_bits(c) for c in message_bytes)\n) ) )\n```", "```py\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, \n0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n... \n0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n```", "```py\ndef byte_sequence( bits ):\n    byte= []\n    for n, b in enumerate(bits):\n        if n%8 == 0 and n != 0:\n            yield to_byte(byte)\n            byte= []\n        byte.append( b )\n    yield to_byte(byte)\n```", "```py\n>>> list(byte_sequence(bits))\n[255, 254, 104, 0, 116, 0, 116, 0, 112, 0, 58, 0, 47, 0, 47, 0, 119, 0, 119, 0, 119, 0, 46, 0, 107, 0, 101, 0, 97, 0, 114, 0, 115, 0, 97, 0, 114, 0, 103, 0, 101, 0, 46, 0, 110, 0, 97, 0, 118, 0, 121, 0, 46, 0, 109, 0, 105, 0, 108, 0]\n```", "```py\nlen_H, len_L = divmod( len(message), 256 )\nsize = [to_bits(len_H), to_bits(len_L)]\n```", "```py\nmessage_bytes= message.encode(\"UTF-8\")\nbits_list = list(to_bits(c) for c in message_bytes )\nlen_h, len_l = divmod( len(message_bytes), 256 )\nsize_list = [to_bits(len_h), to_bits(len_l)]\nbit_sequence( size_list+bits_list ) \n```", "```py\nw, h = ship.size\nfor p,m in enumerate( bit_sequence(size_list+bits_list) ):\n    y, x = divmod( p, w )\n    r, g, b = ship.getpixel( (x,y) )\n    r_new = (r & 0xfe) | m\n    print( (r, g, b), m, (r_new, g, b) )\n    ship.putpixel( (x,y), (r_new, g, b)  )\n```", "```py\n>>> 1 & 1\n1\n>>> 0 & 1\n0\n```", "```py\n(245, 247, 246) 0 (244, 247, 246)\n(246, 248, 247) 1 (247, 248, 247)\n```", "```py\n>>> 245 & 0xfe\n244\n>>> (245 & 0xfe) | 0\n244\n```", "```py\n>>> 246 & 0xfe\n246\n>>> (246 & 0xfe) | 1\n247\n```", "```py\ndef get_bits( image, offset= 0, size= 16 ):\n    w, h = image.size\n    for p in range(offset, offset+size):\n        y, x = divmod( p, w )\n        r, g, b = image.getpixel( (x,y) )\n        yield r & 0x01\n```", "```py\nsize_H, size_L = byte_sequence( get_bits( ship, 0, 16 ) )\nsize= size_H*256+size_L\n```", "```py\nmessage= byte_sequence(get_bits(ship, 16, size*8))\n```", "```py\nprint( bytes(message).decode(\"UTF-8\") )\n```", "```py\nimport hashlib\nmd5 = hashlib.new(\"md5\")\nwith open( \"LHD_warship.jpg\", \"rb\" ) as some_file:\n    md5.update( some_file.read() )\nprint( md5.hexdigest() )\n```", "```py\n0032e5b0d9dd6e3a878a611b49807d24\n```", "```py\nimport hmac\nwith open( \"LHD_warship.jpg\", \"rb\" ) as some_file:\n    keyed= hmac.new( b\"Agent Garbo\", some_file.read() )\nprint( keyed.hexdigest() )\n```", "```py\n42212d077cc5232f3f2da007d35a726c\n```", "```py\ndef package( text, image_source, key_hmac, filename ):\n```", "```py\n    image= Image.open( image_source )\n    steg_embed( image, text )\n    image.save( \"/tmp/package.tiff\", format=\"TIFF\" )\n    with open(\"/tmp/package.tiff\",\"rb\") as saved:\n        digest= hmac.new( key_hmac.encode(\"ASCII\"), saved.read() )\n    with ZipFile( filename, \"w\" ) as archive:\n        archive.write( \"/tmp/package.tiff\", \"image.tiff\" )\n        archive.comment= digest.hexdigest().encode(\"ASCII\")\n    os.remove( \"/tmp/package.tiff\" )\n```", "```py\ndef unpackage( filename, key_hmac ):\n```", "```py\n    try:\n        os.remove( \"/tmp/image.tiff\" )\n    except FileNotFoundError:\n        pass\n    with ZipFile( filename, \"r\" ) as archive:\n        with archive.open( \"image.tiff\", \"r\" ) as member:\n            keyed= hmac.new( key_hmac.encode(\"ASCII\"), member.read() )\n        assert archive.comment == keyed.hexdigest().encode(\"ASCII\"), \"Invalid HMAC\"\n        archive.extract( \"image.tiff\", \"/tmp\" )\n    image= Image.open( \"/tmp/image.tiff\" )\n    text= steg_extract( image )\n    os.remove( \"/tmp/image.tiff\" )\n    return text, image\n```"]