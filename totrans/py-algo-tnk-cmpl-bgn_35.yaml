- en: Chapter 23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Introduction to Loop Control Structures
  prefs: []
  type: TYPE_NORMAL
- en: 23.1 What is a Loop Control Structure?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A loop control structure is a control structure that allows the execution of
    a statement or block of statements multiple times until a specified condition
    is met.
  prefs: []
  type: TYPE_NORMAL
- en: 23.2 From Sequence Control to Loop Control Structures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next example lets the user enter four numbers and it then calculates and
    displays their sum. As you can see, there is no loop control structure employed
    yet, only the familiar sequence control structure.
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: z = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: w = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: total = x + y + z + w
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: While this code is quite short, consider a similar one that allows the user
    to enter 1000 numbers instead of just four. Can you imagine having to write the
    input statement float(input()) a thousand times? It would certainly be more convenient
    if you could write this statement just once and instruct the computer to execute
    it a thousand times, wouldn't it? This is where a loop control structure comes
    into play!
  prefs: []
  type: TYPE_NORMAL
- en: But before you delve into loop control structures, try to solve a riddle first!
    Without using a loop control structure yet, try to rewrite the previous example,
    using only two variables, x and total. Yes, you heard that right! This code must
    calculate and display the sum of four user-provided numbers, but it must do so
    with only two variables! Can you find a way?
  prefs: []
  type: TYPE_NORMAL
- en: 'Hmmm… it''s obvious what you are thinking right now: “The only thing that I
    can do with two variables is to read one single value in variable x and then assign
    that value to variable total”. Your thinking is quite correct, and it is presented
    here.'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())  #Read the first number
  prefs: []
  type: TYPE_NORMAL
- en: total = x
  prefs: []
  type: TYPE_NORMAL
- en: which can equivalently be written as
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())  #Read the first number
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: 'And now what? Now, there are three things that you can actually do, and these
    are: think, think, and of course, think!'
  prefs: []
  type: TYPE_NORMAL
- en: The first user-provided number has been stored in variable total, so variable
    x is now free for further use! Thus, you can reuse variable x to read a second
    value which will also accumulate in variable total, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())  #Read the first number
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())  #Read the second number
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Statement total = total + x accumulates the value of x in
    total, which means that it adds the value of x to total along with any previous
    value in total. For example, if variable total contains the value 5 and variable
    x contains the value 3, the statement total = total + x assigns the value 8 to
    variable total.'
  prefs: []
  type: TYPE_NORMAL
- en: Since the second user-provided number has been accumulated in the variable total,
    variable x can be reused! This process can repeat until all four numbers are read
    and accumulated in variable total. The final code is as follows. Please note that
    it does not use any loop control structure yet!
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Both this code and the initial one at the beginning of this
    section are considered equivalent. The main distinction between them, however,
    lies in the fact that this one contains four identical pairs of statements.'
  prefs: []
  type: TYPE_NORMAL
- en: Apparently, you can use this example to read and find the sum of more than four
    numbers. However, writing those pairs of statements multiple times can be quite
    cumbersome and may lead to errors if any pair is accidentally omitted.
  prefs: []
  type: TYPE_NORMAL
- en: What you truly need here is to retain just one pair of statements, but use a
    loop control structure to execute it four times (or even 1000 times, if you wish).
    You can use something like the following code fragment.
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'execute_these_statements_4_times:'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: Obviously there isn't any execute_these_statements_4_times statement in Python.
    This is for demonstration purposes only, but soon enough you will learn everything
    about all the loop control structures that Python supports!
  prefs: []
  type: TYPE_NORMAL
- en: '23.3 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)A loop control structure is a structure that allows the execution of a statement
    or block of statements multiple times until a specified condition is met.
  prefs: []
  type: TYPE_NORMAL
- en: 2)It is possible to use a sequence control structure that prompts the user to
    enter 1000 numbers and then calculates their sum.
  prefs: []
  type: TYPE_NORMAL
- en: 3)The following code fragment accumulates the value 10 in variable total.
  prefs: []
  type: TYPE_NORMAL
- en: total = 10
  prefs: []
  type: TYPE_NORMAL
- en: a = 0
  prefs: []
  type: TYPE_NORMAL
- en: total = total + a
  prefs: []
  type: TYPE_NORMAL
- en: 4)The following Python program (not code fragment) satisfies the property of
    effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: total = total + a
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: 5)Both of the following two code fragments assign the value of 5 to the variable
    total.
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: total = a
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: total = total + a
  prefs: []
  type: TYPE_NORMAL
