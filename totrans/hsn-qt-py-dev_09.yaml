- en: Using Comboboxes and List Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The components of the GUI that will be discussed in this chapter are somewhat
    mixed in nature. They are text fields and can be used to control elements in the
    application. In other words, the user can input text in these fields and then
    make a choice via a drop-down menu that is provided with additional functionality.
    Using these components helps make the GUI application more compact and informative.
  prefs: []
  type: TYPE_NORMAL
- en: The components within this chapter represent the model-view paradigm of the
    Qt framework. In short, the line edit field can also be implemented using the
    list view.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Model-view architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combobox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple list view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model-view architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Qt framework has a set of classes that utilize a model-view paradigm to
    regulate the relationship between the data and the representation of the data
    known as the **Model-View-Controller** (**MVC**) paradigm. MVC is a design pattern
    that''s often used while establishing user interfaces. MVC has three kinds of
    objects:'
  prefs: []
  type: TYPE_NORMAL
- en: The model (application object)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The view (screen presentation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller (defines the action on the user interface on user input)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram depicts the interactions among the model, view, and controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/331fcf00-26d2-4857-bb54-effe5c8b3299.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Qt framework, when the view and controller are combined, this creates
    the model-view architecture. To create the model with Qt, the framework uses the
    classes of the `QtCore` module, such as `QAbstractItemModel`, the base class,
    and the classes that inherit this class, such as `QAbstractListModel` and `QAbstractTableModel`.
    The classes that represent the views use the views from the `QtWidgets` module,
    such as `QListView`, `QTableView`, and `QTreeView`, and they inherit the base
    class, `QAbstractItemView`. Here, we will describe just a few of them, including the
    basics for implementing the model-view architecture with the application. Refer
    to the documentations ([https://doc.qt.io/qt-5/model-view-programming.html](https://doc.qt.io/qt-5/model-view-programming.html))
    for a more in-depth understanding.
  prefs: []
  type: TYPE_NORMAL
- en: QAbstractItemModel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class realizes the abstract interface for model classes. The full list
    of functions to manipulate the model part of the model-view architecture is available
    in the documentation. The construction syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The functions that need to be overridden are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`columnCount(QtCore.QModelIndex)`: This returns the number of columns under
    the parent specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`data(QtCore.QModelIndex, int)`: This returns the data stored under the role
    (the second parameter) for the item specified as the first parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`index(int, int, QtCore.QModelIndex)`: This returns the item''s index in the
    model specified by the row (the first parameter), column (the second parameter),
    and parent (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`rowCount(QtCore.QModelIndex)`: This returns the number of rows under the parent
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most useful functions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`insertColumn(int, QtCore.QModelIndex)`: This inserts the column before the
    column specified as the first parameter in the child items of the parent (the
    second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`insertColumns(int, int, QtCore.QModelIndex)`: This inserts the number of new
    columns (the second parameter) before the column (the first parameter) related
    to the item represented by the parent model index (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`insertRow(int, QtCore.QModelIndex)`: This inserts the row before the row specified as the
    first parameter in the child items of the parent (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`insertRows(int, int, QtCore.QModelIndex)`: This inserts the number of new
    rows (the second parameter) before the row (the first parameter) related to the
    item represented by the parent model index (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`moveColumn(QtCore.QModelIndex, int, QtCore.QModelIndex, int)`: This moves
    the source column (the second parameter) from the source parent (the first parameter)
    to the destination child (the fourth parameter) under the destination parent (the
    third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`moveColumns(QtCore.QModelIndex, int, int, QtCore.QModelIndex, int)`: This
    moves the number of columns specified as the third parameter, starting with the
    source column (the second parameter), from the source parent (the first parameter)
    to the destination child (the fifth parameter) under the destination parent (the
    fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`moveRow(QtCore.QModelIndex, int, QtCore.QModelIndex, int)`: This moves the
    source row (the second parameter) from the source parent (the first parameter)
    to the destination child (the fourth parameter) under the destination parent (the
    third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`moveRows(QtCore.QModelIndex, int, int, QtCore.QModelIndex, int)`: This moves
    the number of rows specified as the third parameter, starting with the source
    row (the second parameter), from the source parent (the first parameter) to the
    destination child (the fifth parameter) under the destination parent (the fourth
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`removeColumn(int, QtCore.QModelIndex)`: This removes the column (the first
    parameter) of the parent (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`removeColumns(int, int, QtCore.QModelIndex)`: This removes the number of columns
    specified as the second parameter, starting with the column (the first parameter)
    of the parent (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`removeRow(int, QtCore.QModelIndex)`: This removes the row (the first parameter)
    of the parent (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`removeRows(int, int, QtCore.QModelIndex)`: This removes the number of rows
    specified as the second parameter, starting with the row (the first parameter)
    of the parent (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`sort(int, QtCore.Qt.SortOrder)`: This sorts the model by columns (the first
    parameter) according to the order specified as the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setData(QtCore.QModelIndex, object, int)`: This sets the data for the item
    with a specified role (the third parameter) and index (the first parameter) to
    a specified value (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`setHeaderData(int, QtCore.Qt.Orientation, object, int)`: This sets the header
    data with a specified role (the fourth parameter), section (the first parameter),
    and orientation (the second parameter) to a specified value (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: QAbstractTableModel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides a standard interface that represents the data as a two-dimensional
    array in the model. The `QAbstractTableModel` class inherits from the `QAbstractItemModel`
    class. The construction syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: QAbstractItemView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a base abstract class that provides the basic functionality for view
    classes in the Qt framework. Usually, this class is reimplemented with the `QListView`,
    `QTreeView`, and `QTableView` classes in the GUI application construction. The
    inheritance scheme for this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/daf5fded-0f44-4173-aea4-d4d6c25c4822.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Functions that are commonly used with the GUI application include the following
    (the full list is available in the documentation):'
  prefs: []
  type: TYPE_NORMAL
- en: '`setDragEnabled(bool)`: If the parameter is `True`, the view will support the
    dragging of items.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setDragDropMode(QtWidgets.QAbstractItemView.DragDropMode)`: This sets the
    drag and drop mode; by default, dragging or dropping is not supported in the view.
    The available modes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.NoDragDrop`—`0`: This view doesn''t support dragging
    and dropping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.DragOnly`—`1`: This view supports dragging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.DropOnly`—`2`: This view supports dropping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.DragDrop`—`3`: This view supports dragging and
    dropping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.InternalMove`—`4`: This view will accept moving
    operations, excluding copying.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setDropIndicatorShown(bool)`: If the parameter is `True`, this sets the drop
    indicator, as demonstrated when used with the dragging and dropping of items.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setModel(QtCore.QAbstractItemModel)`: This sets the model that will be represented
    with the view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setRootIndex(QtCore.QModelIndex)`: This sets the root item to the item according
    to the index specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior)`: This
    sets the selection behavior that will be used by the view. The available behaviors
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.SelectItems`—`0`: Single items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.SelectRows`—`1`: Only rows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.SelectColumns`—`2`: Only columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode)`: This sets how
    the view will respond to selections. The selection modes that are available are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.NoSelection`—`0`: The items are not selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.SingleSelection`—`1`: An item that has already
    been selected will be deselected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.MultiSelection`—`2`: The selected item is toggled,
    and the other items are left alone. Multiple items can be toggled by dragging
    the mouse over them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.ExtendedSelection`—`3`: An item that has already
    been selected will be selected and deselected using the *Shift* key, or using
    the *Ctrl* key, the clicked item gets toggled and all other items are left untouched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.ContiguousSelection`—`4`: An item that has already
    been selected will be deselected, and not deselected using the *Shift* key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setSelectionModel(QtCore.QItemSelectionModel)`: Sets the selection model specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setState(QtWidgets.QAbstractItemView.State)`: Sets the item views state specified
    in the parameter. The states are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.NoState`—`0`: Default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.DraggingState`—`1`: The items are dragged by the
    user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.DragSelectingState`—`2`: The items are selected
    by the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.EditingState`—`3`: The items are edited by the
    user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.ExpandingState`—`4`: The items are opened in a
    branch by the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.CollapsingState`—`5`: The branch of items is closed
    by the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractItemView.AnimatingState`—`6`: This is the view performing
    the animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edit(QtCore.QModelIndex)`: This begins editing the item according to the index
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`model()`: This returns the model of the `QtCore.QAbstractItemModel` type that''s
    represented in the view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectAll()`: This selects all the items represented in the view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`startDrag(QtCore.Qt.DropActions)`: This starts a drag process by calling drag
    with `exec()`, which is related to the drop actions specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`update(QtCore.QModelIndex)`: This updates the area occupied by the index specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QComboBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The combobox widget, which is constructed with the `QComboBox` class, provides
    the combined button and pop-up list. This widget contains the field where current
    text is displayed (or can be edited), a pop-up list containing some values, and
    the option to make a choice and select a number of control elements. This can
    be used in the GUIs, where there is a need to represent numerous values with options
    in order to choose something from the popup, and that may imply another functionality.
    Developers create the comboboxes where places inside the graphical window are
    limited and many values need to be displayed. The `QComboBox` class has a declaration
    syntax in the application that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: QComboBox functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QComboBox` inherits the `QWidget` class and improves functionality with the
    following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to the addition of the elements or actions to the
    combobox:'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.addItem("item", object)`: This adds the item (the first parameter)
    of the Unicode string type and optional user data with a second parameter (the
    default is `None`) to the end of this combobox pop-up list.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.addItem(QtGui.QIcon, "item", object)`: This adds the item (the second
    parameter) of the Unicode string type and optional user data with a third parameter
    (the default is `None`) to the end of this combobox pop-up list. The item''s text
    will be displayed with the icon (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.addItems(["item"])`: This adds several items with the text of the
    Unicode string type to the end of this combobox pop-up list. Each item of the
    list, specified in the parameter, will be appended as the new line of the pop-up
    list.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to the setting of the parameters/properties in
    relation to the combobox, including the setting of text, alignment, or functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setCompleter(QtWidgets.QCompleter)`: This sets the completer that
    will be used with the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setCurrentIndex(int)`: This sets the current index specified in
    the parameter of the item in the combobox. The item with this index will be marked
    as current and visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setCurrentText("Item")`: This sets the current text specified in
    the parameter of the item in the combobox. The item with this text will be marked
    as current and visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setDuplicatesEnabled(bool)`: If the parameter is `True`, sets are
    allowed to enter duplicate items into the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setEditable(bool)`: If the parameter is `True`, this sets the combobox
    as being available to edit with the line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setEditText("Text")`: This sets the text in the line edit field
    of the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setFrame(bool)`: If the parameter is `True`, this sets the frame
    around the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setIconSize(QtCore.QSize)`: This sets the size of the icons that
    will be displayed in the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setInsertPolicy(QtWidgets.QComboBox.InsertPolicy)`: This sets the
    insert policy for this combobox. The policies that are available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QComboBox.NoInsert`—`0`: The items will not be inserted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QComboBox.InsertAtTop`—`1`: The current item will be inserted as
    the first item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QComboBox.InsertAtCurrent`—`2`: The current item in the combobox
    will be replaced by the new item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QComboBox.InsertAtBottom`—`3`: The current item will be inserted
    after the last item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QComboBox.InsertAfterCurrent`—`4`: This item will be inserted after
    the current item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QComboBox.InsertBeforeCurrent`—`5`: This item will be inserted before
    the current item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QComboBox.InsertAlphabetically`—`6`: This item will be inserted
    in alphabetical order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`combo_box.setItemData(int, object, int)`: This sets the data role (the third
    parameter) for the item with an index (the first parameter) to the value specified
    as the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setItemDelegate(QtWidgets.QAbstractItemDelegate)`: This sets the
    pop-up list view item delegate.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setItemIcon(int, QtGui.QIcon)`: This sets the icon (the second parameter)
    for the item specified by the index (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setItemText(int, "Item")`: This sets the text (the second parameter)
    for the item specified by the index (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setLineEdit(QtWidgets.QLineEdit)`: This sets the line edit field
    that will be used with this combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setMaxCount(int)`: This sets the maximum number of items that will
    be used in this combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setMaxVisibleItems(int)`: This sets the maximum number of items
    that will be visible in the combobox screen without scrolling.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setMinimumContentsLength(int)`: This sets the minimum number of
    characters for the item that will be represented with the combobox screen.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setModel(QtCore.QAbstractItemModel)`: This sets the model for this
    combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setModelColumn(int)`: This sets the visible column in the combobox
    model.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setRootModelIndex(QtCore.QModelIndex)`: This sets the root model
    item as an index in the parameter for the combobox items.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setSizeAdjustPolicy(QtWidgets.QComboBox.SizeAdjustPolicy)`: This
    sets the size adjust policy for this combobox. The policies that are available are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QComboBox.AdjustToContents`—`0`: Will always adjust to the content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QComboBox.AdjustToContentsOnFirstShow`—`1`: Will adjust to the content
    the first time it is shown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QComboBox.AdjustToMinimumContentsLength`—`2`: Will adjust to the
    minimum content length.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QComboBox.AdjustToMinimumContentsLengthWithIcon`—`3`: Will adjust
    to the minimum content length, plus space for the icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`combo_box.setValidator(QtGui.QValidator)`: This sets the validator that will
    be used with this combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.setView(QtWidgets.QAbstractItemView)`: This sets the view that will
    be used in the combobox pop-up list.'
  prefs: []
  type: TYPE_NORMAL
- en: edit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that make some changes to the current content of the combobox,
    including clear, undo, and redo:'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.clear()`: This clears the pop-up list items from the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.clearEditText()`: This clears the text of the edited field of the
    combobox. The line edit text of the combobox will be cleared.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.hidePopup()`: This hides the combobox pop-up list; the list will
    be reset.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.showPopup()`: This shows the combobox pop-up list.'
  prefs: []
  type: TYPE_NORMAL
- en: is/has
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the combobox
    states, for example, to check for availability:'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.hasFrame()`: This returns `True` if the combobox has a surrounding
    frame.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.isEditable()`: This returns `True` if the line field of this combobox
    can be edited.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are functions related to the current values of the combobox being
    returned, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.completer()`: This returns the completer for autocompletion of the
    text input for this combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.count()`: This counts the items of the pop-up list and returns the
    integer value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.currentData(int)`: This returns the object that describes the current
    data of the pop-up list item, with a `QtCore.Qt.UserRole` parameter type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.currentIndex()`:This returns the current index of the item (integer
    value) from the pop-up list that may have been chosen by the user.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.currentText()`: This returns the current text of the item (`string`)
    from the pop-up list that may have been chosen by the user.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.duplicatesEnabled()`: This returns `True` if it is possible to enter
    duplicate items in the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.findData(object, int, QtCore.Qt.MatchFlags)`: This returns the index
    of the item that contains the specified data (the first parameter), role (the
    second parameter), and flags (the third parameter). Otherwise, it returns a value
    of `-1`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.findText("Text to find", QtCore.Qt.MatchFlags)`: This returns the
    index of the item that contains the text (the first parameter) with flags (the
    second parameter), such as `QtCore.Qt.MatchCaseSensitive`. Otherwise, it returns
    a value of `-1`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.iconSize()`: This returns the icon size of the `QtCore.QSize` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.initStyleOption(QtWidgets.QStyleOptionFrame)`: This initializes
    style options with the values from the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.inputMethodQuery(QtCore.Qt.InputMethodQuery, object)`: This is used
    to query a set of properties of the combobox to enable support for complex input
    method operations, such as support for surrounding text and reconversions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.insertItem(int, "Item text", object)`: This inserts the item in
    the position (the first parameter) of the pop-up list with text (the second parameter)
    and user data (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.insertItem(int, QtGui.QIcon, "Item text", object)`: This inserts
    the item in the position (the first parameter) of the pop-up list with text (the
    third parameter) that will be displayed with the icon (the second parameter) and
    user data (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.insertItems(int, ["Item text"])`: This inserts several items with
    Unicode string type text in the position (the first parameter) of the combobox
    pop-up list. Each item from the iterable (the second parameter) will be inserted
    as the new line of the pop-up list and will begin from the given position index.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.insertPolicy()`: This returns the policy of the `QtWidgets.QComboBox.InsertPolicy`
    type that was used when inserting the policy into the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.insertSeparator(int)`: This inserts the separator for these combobox
    items in the position specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.itemData(int, int)`: This returns the item''s data according to
    the index (the first parameter) for the given role (the second parameter) in the
    combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.itemDelegate()`: This returns the delegate of the item of the `QtWidgets.QAbstractItemDelegate`
    type that''s used by the pop-up list view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.itemIcon(int)`: This returns the icon of the `QtGui.QIcon` type
    for the item with the index specified in the parameter, inside the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.itemText(int)`: This returns the text of the item with the index
    in the combobox specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.lineEdit()`: This returns the line edit field used to edit items
    in the combobox, if the combobox is editable.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.maxCount()`: This returns the maximum number of items that can be
    used with the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.maxVisibleItems()`: This returns the maximum number of items that
    can be displayed as a combobox pop-up list. If there are more elements than this,
    they will be visible if you scroll through the combobox screen.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.minimumContentsLength()`: This returns the minimum number of characters
    that will be represented with the combobox screen (default `0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.model()`: This returns the model for the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.modelColumn()`: This returns the visible column in the combobox
    model.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.removeItem(int)`: This removes the item from the combobox with the
    index specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.rootModelIndex()`: This returns the root model item index for the
    combobox item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.sizeAdjustPolicy()`: This returns the adjusted size of the `QtWidgets.QComboBox.SizeAdjustPolicy`
    type that''s used with the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.validator()`: This returns the validator for the text input of the
    combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.view()`: This returns the pop-up list view that''s used for the
    combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.changeEvent(QtCore.QEvent)`: This handles state changes within the
    combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.contextMenuEvent(QtGui.QContextMenuEvent)`: This event handler is
    designed to receive combobox context menu events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.event(QtCore.QEvent)`: This receives events for the object and should
    return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.focusOutEvent(QtGui.QFocusEvent)`: This event handler is designed
    to receive the combobox keyboard focus events that are passed with event parameters
    when the focus is lost.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.focusInEvent(QtGui.QFocusEvent)`: This event handler is designed
    to receive the comb box keyboard focus events that are passed with event parameters
    when the focus is received.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler is
    designed to receive input method composition events that are passed with event
    parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.keyPressEvent(QtGui.QKeyEvent)`: This event handler is designed to
    receive key press events for the combobox that is passed with event parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.keyReleaseEvent(QtGui.QKeyEvent)`: This event handler is designed to
    receive key release events for the combobox that is passed with event parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.mousePressEvent(QtGui.QMouseEvent)`: This event handler is designed
    to receive mouse press events for the combobox that is passed with event parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler is designed
    to receive mouse release events for the combobox that this passed with event parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.paintEvent(QtGui.QPaintEvent)`: This event handler is designed to
    receive paint events for the combobox that is passed with event parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.resizeEvent(QtGui.QResizeEvent)`: This event handler is designed
    to receive and resize events for the combobox that is passed with event parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.showEvent(QtGui.QShowEvent)`: This event handler is designed to
    receive show events for the combobox that is passed with event parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.wheelEvent(QtGui.QWheelEvent)`: This event handler is designed to
    receive mouse wheel events for the combobox that is passed with event parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals for the `QComboBox` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.activated(int)`: This signal is emitted when the item is chosen in
    the combobox with the index of the item passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.activated(str)`: This signal is emitted when the item is chosen
    in the combobox with the text of the item passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.currentIndexChanged(int)`: This signal is emitted when the item
    is chosen in the combobox and the current index of the item is changed, with the
    index that was passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.currentIndexChanged(str)`: This signal is emitted when the item
    is chosen in the combobox and the current index of the item is changed, with the
    item''s text that is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.currentTextChanged(str)`: This signal is emitted when the item is chosen
    in the combobox and the current text of the item is changed, with the item''s
    text that is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.editTextChanged(str)`: This signal is emitted when the text of the
    editable line field is changed, with text that is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.highlighted(int)`: This signal is emitted when the item is highlighted
    by the user, with the item''s index that is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_box.highlighted(str)`: This signal is emitted when the item is highlighted
    by the user, with the item''s text that is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QFontComboBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PyQt5 and PySide2 provide the completed combobox so that you can choose the
    font family in regard to text in the text field (for example). We can use this
    combobox in the application by typing the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`QFontComboBox` inherits `QComboBox` with the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting the parameters/properties in
    relation to the font combobox, such as setting text, alignment, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_boxf.setCurrentFont(QtGui.QFont)`: This sets the current font family
    for this combobox. The name of the font family, such as Helvetica or Times New
    Roman, which is passed to the parameter, can be used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_boxf.setFontFilters(QtWidgets.QFontComboBox.FontFilters)`: This sets
    the filters that will be used with this combobox. The available filters are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QFontComboBox.AllFonts`: Shows all fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFontComboBox.ScalableFonts`: Shows scalable fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFontComboBox.NonScalableFonts`: Non-scalable fonts in the combobox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFontComboBox.MonospacedFonts`: Monospaced fonts in the combobox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFontComboBox.ProportionalFonts`: Proportional fonts in the combobox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`combo_boxf.setWritingSystem(QtGui.QFontDatabase.WritingSystem)`: This sets
    the writing system that serves as a filter for this combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return the current values of the font combobox, changes
    in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_boxf.currentFont()`: This returns the current font family of the `QtGui.QFont`
    type that is displayed/selected with the font combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_boxf.fontFilters()`: This returns the filters of the `QtWidgets.QFontComboBox.FontFilters`
    type for the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_boxf.writingSystem()`: This returns the writing system for the combobox.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to the events, such as event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_boxf.event(QtCore.QEvent)`: This receives events for the object and
    should return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the available signal for the `QFontComboBox` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`combo_boxf.currentFontChanged(QtGui.QFont)`: This signal is emitted when the
    current font family of the combobox changes, and occurs when a new font is passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QComboBox example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s implement the comboboxes we described previously in the application.
    We are creating the combobox so that we can choose between different fields that
    will be visualized—text field and table. Add the `QComboBox` class to the `u_style.py` files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `UComBox` class using the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This combobox has styling properties that can be reimplemented. Now, we need
    to add this class to the `u_app.py` files so that we can use them in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to the import section of the `u_app.py` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following lines to the `__init__()`  function of the `u_app.py`
    files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is the combobox instance with the list of items that will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the arrow of the combobox button to an icon, we can change the following
    line, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will add the icon with a specified path and will change the default arrow
    icon.
  prefs: []
  type: TYPE_NORMAL
- en: QListView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides a list or icon view that''s implemented on the model. `QListView`
    is used to display the items as a simple non-hierarchical list. With the help
    of the list view, the combobox pop-up list can be represented in another way.
    The inheritance scheme of `QListView` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/daec193a-99b6-4c24-84cf-73f62fe3da1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the declaration statement of this class in the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Functions of the QListView class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `QListView` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting parameters/properties in relation to
    the list view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.setBatchSize(int)`: This sets the number of items of each batch
    if the layout mode is set to `Batched`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.setFlow(QtWidgets.QListView.Flow)`: This sets the flow of the content
    that''s used with the list view. The flows that are available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QListView.LeftToRight`—`0`: The items will be laid out from left
    to right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QListView.TopToBottom`—`1`: The items will be laid out from top
    to bottom.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list_view.setGridSize(QtCore.QSize)`: This sets the size of the layout grid.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.setLayoutMode(QtWidgets.QListView.LayoutMode)`: This sets the mode
    of the layout for this list view. The modes that are available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QListView.SinglePass`—`0`: All items are laid out simultaneously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QListView.Batched`—`1`: Items are laid out in batches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list_view.setModelColumn(int)`: This sets the column in the model specified
    in the parameter that will be visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.setMovement(QtWidgets.QListView.Movement)`: This sets the movement
    for items in this list view. The movements that are available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QListView.Static`—`0`: Items cannot be moved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QListView.Free`—`1`: Items can be moved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QListView.Snap`—`2`: Items will be moved when they''re snapped to
    the specified grid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list_view.setPositionForIndex(QtCore.QPoint, QtCore.QModelIndex)`: This sets
    the content position of the item at the index (the second parameter) in the model
    in relation to the position specified as the first parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.setResizeMode(QtWidgets.QListView.ResizeMode)`: This sets the resize
    mode for the model of the list view. The resizing that''s available is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QListView.Fixed`—`0`: The items will be laid out for the first time
    when the list view is shown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QListView.Adjust`—`1`: The items will be laid out every time the
    list view is resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list_view.setRowHidden(int, bool)`: This sets the row (the first parameter)
    to hidden if the second parameter is set to `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.setSelectionRectVisible(bool)`: If the parameter is `True`, this
    sets the selection rectangle as visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.setSpacing(int)`: This sets the space around all the sides of the
    items represented in the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.setUniformItemSizes(bool)`: If the parameter is `True`, all items
    are supposed to be the same size in the list view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.setViewMode(QtWidgets.QListView.ViewMode)`: This sets the view mode
    for this list view. The view modes that are available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QListView.ListMode`—`0`: Items will be laid out using static movement,
    a `TopToBottom` flow, with a small size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QListView.IconMode`—`1`: Items will be laid out using free movement,
    a `LeftToRight` flow, with a large size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list_view.setWordWrap(bool)`: If the parameter is `True`, the item text will
    be wrapped at word breaks.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.setWrapping(bool)`: If the parameter is `True`, the item layout
    will wrap when the space in the visible area is insufficient.'
  prefs: []
  type: TYPE_NORMAL
- en: is/has
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the list
    view states, for example, to check visibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.isRowHidden(int)`: This returns `True` if the row, specified in
    the parameter, is hidden in the list view; otherwise, it returns `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list_view.isSelectionRectVisible()`: This returns `True` if the selection
    rectangle is visible; otherwise, the selection rectangle is hidden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list_view.isWrapping()`: This returns `True` if the layout will wrap when
    the space in the visible area is insufficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current list view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.batchSize()`: This returns the number of items of each batch if
    the layout mode is set to `Batched`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.clearPropertyFlags()`: This clears the property flags from the list
    view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.flow()`: This returns the flow of the content that''s used with
    a list view of the `QtWidgets.QListView.Flow` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.gridSize()`: This returns the size of the layout grid that''s used
    with a list view of the `QtCore.QSize` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.layoutMode()`: This returns the layout mode of the `QtWidgets.QListView.LayoutMode`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.modelColumn()`: This returns the number of columns that are visible
    in the model.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.movement()`: This returns the movement of the `QtWidgets.QListView.Movement`
    type, describing whether the items can be moved, snapped to a grid, or cannot
    be moved.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.rectForIndex(QtCore.QModelIndex)`: This returns the rectangle of
    the `QtCore.QRect` type for the item at the position index in the model, as specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.resizeMode()`: This returns the resize mode of the `QtWidgets.QListView.ResizeMode`
    type or how the items are laid out when the list view is resized.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.spacing()`: This returns the space around all the sides of the items
    in the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.uniformItemSizes()`: This returns `True` if all the items have the
    same size in this list view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.viewMode()`: This returns the view mode of the `QtWidgets.QListView.ViewMode`
    type for this list view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.wordWrap()`: This returns `True` if the item text is wrapped at
    word breaks.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.dragLeaveEvent(QtGui.QDragLeaveEvent)`: This event handler is called
    with the event parameter when the mouse leaves the list view and a drag operation
    is in progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.dragMoveEvent(QtGui.QDragMoveEvent)`: This event handler is called
    with the event parameter when conditions occur, such as the cursor entering or moving
    within the view, the modifier key is clicked on the keyboard while the list view
    has focus, or if a drag operation is in progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.dropEvent(QtGui.QDropEvent)`: This event handler is called with
    the event parameter when the drag is dropped on the list view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.event(QtCore.QEvent)`: This receives events to the object and should
    return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.mouseMoveEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse move events for the list view, along with the mouse event that''s passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse release events for the list view, along with the mouse event that''s passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.paintEvent(QtGui.QPaintEvent)`: This event handler receives paint
    events for the list view, along with the paint event that''s passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.resizeEvent(QtGui.QResizeEvent)`: This event handler receives resize
    events for the list view, along with the resize event that''s passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.timerEvent(QtCore.QTimerEvent)`: This event handler receives timer
    events for the list view, along with the timer event that''s passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.wheelEvent(QtGui.QWheelEvent)`: This event handler receives mouse
    wheel events for the list view, along with the wheel event that''s passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signal for the `QListView` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`list_view.indexesMoved(QtCore.QModelIndexList)`: This signal is emitted when
    the indexes specified in the parameter are moved in the view.'
  prefs: []
  type: TYPE_NORMAL
- en: QListView example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will create the `UListV` class in the `u_style.py` files of the PySide2
    and PyQt5 apps. This class will demonstrate utilization of the list view with
    the combobox that we created previously:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `UListV` class to the `u_style.py` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This list view will be used in the combobox to display the popup. To implement
    this list view with a combobox in the application, we need to add some lines in
    the `u_app.py` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `UListV` class to the import section of the `u_app.py` files, in keeping
    with the `UCombo` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, change the lines of the combobox, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This sets the list view for the combobox element. By doing this, we can style
    and add functionality to the combobox pop-up list.
  prefs: []
  type: TYPE_NORMAL
- en: QTableView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s describe table implementation in the GUI application. The `QTableView`
    class provides the representation of the data in table form. In accordance with
    the paradigm of the Qt framework, this class (including the list view) provides
    a default model-view implementation of the table view. To fill the table with
    some data, you need to use models such as the `QAbstractTableModel` class of the
    `QtCore` module. The `QTableView` class has the following inheritance scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e485f97c-0a08-4fbc-be61-167e48d8a5bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The declaration statement of this class in the application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: QTableView functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `QTableView` class improves functionality with the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters/properties in relation
    to the table view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setColumnHidden(int, bool)`: If the second parameter is `True`,
    this sets the column specified in the parameter as hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setColumnWidth(int, int)`: This sets the width (the second parameter)
    of the column that''s specified as the first parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setCornerButtonEnabled(bool)`: If the parameter is `True`, this
    sets the button in the top-left corner of this table to select all of the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setGridStyle(QtCore.Qt.PenStyle)`: This sets the pen style that
    will be used to draw the grid for this table. The styles that are available are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.Qt.NoPen`—`0`: No pen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.SolidLine`—`1`: Plain line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.DashLine`—`2`: Dashed line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.DotLine`—`3`: Dotted line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.DashDotLine`—`4`: Dashed-dotted line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.DashDotDotLine`—`5`: Dashed and double-dotted line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.CustomDashLine`—`6`: Customized dashed line, which is defined by
    using the `QtGui.QPainterPathStroker` custom pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table_view.setHorizontalHeader(QtWidgets.QHeaderView)`: This sets the header
    specified in the parameter that will be used as a horizontal header.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setModel(QtCore.QAbstractItemModel)`: This sets the model with
    data that will be used for the table view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setRowHeight(int, int)`: This sets the height (the second parameter)
    of the row specified as the first parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setRowHidden(int, bool)`: If the second parameter is `True`, this
    sets the row (the first parameter) as hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setShowGrid(bool)`: If the parameter is `True`, the grid will be
    shown with this table.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setSortingEnabled(bool)`: If the parameter is `True`, this sets
    the sorting for the table as enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setSpan(int, int, int, int)`: This sets the span for the element
    in the row (the first parameter) and column (the second parameter) to the number
    of rows (the third parameter) and columns (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setVerticalHeader(QtWidgets.QHeaderView)`: This sets the header
    that''s specified in the parameter and will be used as a vertical header.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.setWordWrap(bool)`: If the parameter is `True`, this sets the word
    wrapping policy for the item''s text.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the table
    view states, for example, to check visibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.isColumnHidden(int)`: This returns `True` if the column specified
    in the parameter is hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.isCornerButtonEnabled()`: This returns `True` if the button displayed
    in the top-left corner of the table view is enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.isRowHidden(int)`: This returns `True` if the row specified in
    the parameter is hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.isSortingEnabled()`: This returns `True` if sorting is enabled
    for this table.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return the current table view values, changes in functionality,
    and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.clearSpans()`: This removes all row/column spans in the table view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.columnAt(int)`: This returns the column that is located by the
    *y* coordinate that''s specified in the parameter in the content coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.columnCountChanged(int, int)`: This is the slot that''s called
    when columns are added or deleted. The previous number of columns is specified
    as the first parameter, while the new number of columns is specified as the second
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.columnMoved(int, int, int)`: This is the slot that''s called to
    change the index of the column that''s specified as the first parameter. The previous
    index is specified as the second parameter, while the new index is specified as
    the third parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.columnResized(int, int, int)`: This is the slot that''s called
    to change the width of the column that''s specified as the first parameter. The
    previous width is specified as the second parameter, while the new width is specified
    as the third parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.columnSpan(int, int)`: This returns the column span of the element
    in the table in the specified row (the first parameter) and column (the second
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.columnViewportPosition(int)`: This returns the *x* coordinate of
    the column specified in the parameter in the content coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.columnWidth(int)`: This returns the width of the column specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.gridStyle()`: This returns the style of the `QtCore.Qt.PenStyle`
    type for the table grid.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.hideColumn(int)`: This hides the column of the table specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.hideRow(int)`: This hides the row specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.horizontalHeader()`: This returns the horizontal header of the
    `QtWidgets.QHeaderView` type for the table view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.resizeColumnsToContents()`: This resizes all columns to the size
    based on the size hints of the delegate that''s used for each item in the columns.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.resizeColumnToContents(int)`: This resizes the column that''s specified
    in the parameter to the size based on the size hint of the delegate that''s used
    for each item in the column.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.resizeRowsToContents()`: This resizes all rows to the size based
    on the size hints of the delegate that''s used for each item in the rows.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.resizeRowToContents(int)`: This resizes the row that''s specified
    in the parameter to the size based on the size hint of the delegate that''s used
    for each item in the row.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.rowAt(int)`: This returns the row that is located by the *y* coordinate
    that''s specified in the parameter in the content coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.rowCountChanged(int, int)`: This is the slot that''s called when
    columns are added or deleted, that is, the previous number of rows (the first
    parameter) and the new number of rows (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.rowHeight(int)`: This returns the height of the row specified in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.rowMoved(int, int, int)`: This is the slot that''s called to change
    the index of the row that''s specified as the first parameter. The previous index
    is specified as the second parameter, while the new index is specified as the
    third parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.rowResized(int, int, int)`: This is the slot that''s called to
    change the width of the row that''s specified as the first parameter. The previous
    width is specified as the second parameter, while the new width is specified as
    the third parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.rowSpan(int, int)`: This returns the row span of the element in
    the table that is in the specified row (the first parameter) and column (the second
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.rowViewportPosition(int)`: This returns the *y* coordinate of the
    row that''s specified in the parameter in the content coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.selectColumn(int)`: This selects the column that''s specified in
    the parameter of this table view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.selectRow(int)`: This selects the row that''s specified in the
    parameter of this table view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.showColumn(int)`: This shows the column that''s specified in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.showGrid()`: This returns `True` if the table is displayed in grid
    mode.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.showRow(int)`: This shows the row that''s specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.sortByColumn(int, QtCore.Qt.SortOrder)`: This sorts the model by
    the column specified as the first parameter in the order (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.verticalHeader()`: This returns the vertical header of the `QtWidgets.QHeaderView`
    type that''s used for this table view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.wordWrap()`: This returns `True` if the word wrapping policy is
    enabled for the item''s text.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is function that is related to events such as event handler, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`table_view.paintEvent(QtGui.QPaintEvent)`: This event handler receives paint
    events for this table view with events passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QTableView example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate the table in the application, we need to create the table data
    model and view for the table. First, let''s create the model with the `QAbstractTableModel`
    class from the `QtCore` module. Create files named `u_table.py` in both the `App/App_PyQt5/`
    and `App/App_PySide2/` directories and include the following lines inside them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of PyQt5, add the following to the import section of the `u_table.py`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of PySide2, add the following to the import section of the `u_table.py`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the `UTModel` class to the `u_table.py` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: These methods are required in the abstract class. They describe the total number
    of rows and columns in the table, as well as the data for each cell. Now, we need
    to add some style for this table using the `u_style.py` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class called `UTabView` in the `u_style.py` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This table view will be used to style the table with custom properties and will
    allow us to reimplement them if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add some lines to the `u_app.py` files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the import section of the `u_app.py` file, add the `UTabView` class, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, inside the `__init__()` function of the `UApp` class, add the table and
    set the model. Finally, add the signal of the combobox with the function that
    will be called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re using the table view to represent the table in the application and using
    the model to represent the data in the table (following the model-view paradigm). As
    a result, if the table in the combobox is selected, the table will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8939828d-9409-4163-8c82-a4af8b178155.png)'
  prefs: []
  type: TYPE_IMG
- en: Each cell of this table uses the random number as a value.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we described the basic paradigms of the Qt framework known
    as the model-view. In a broad sense, the MVC architecture provides us with an
    opportunity to use data and represent this data in a flexible form; in other words,
    to split the model with the data and views of the data model. In this way, almost
    any type of data can be implemented with a GUI application. In regard to the development
    process, some features, such as tree views and list views, were not shown, but
    these can be used in conjunction with documentation in a broad area of software
    development. In the chapters that follow, models with data will be modernized
    and demonstrated in greater detail.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will describe the basic construction of the different kinds
    of buttons that are used with Python bindings to create GUI apps.
  prefs: []
  type: TYPE_NORMAL
