["```py\nfrom PIL import Image as pim\nimport Blender\nfrom Blender import Camera, Scene, Image, Object, Mathutils, Window\nimport bpy\nimport os\n```", "```py\ndef paste(top,right,front,free,output=\"result.png\"):\n   im = pim.open(top)\n w,h= im.size\n   edge=4\n   edgecolor=(0.0,0.0,0.0)\n```", "```py\n   comp = pim.new(im.mode,(w*2+3*edge,h*2+3*edge),edgecolor)\n```", "```py\n   comp.paste(im,(edge,edge))\n```", "```py\n   im = pim.open(right)\n   comp.paste(im,(w+2*edge,edge))\n   im = pim.open(front)\n   comp.paste(im,(edge,h+2*edge))\n   im = pim.open(free)\n   comp.paste(im,(w+2*edge,h+2*edge))\n comp.save(output)\n\n```", "```py\ndef render(camera):\n   cam = Object.Get(camera)\n   scn = Scene.GetCurrent()\n scn.setCurrentCamera(cam)\n   context = scn.getRenderingContext()\n```", "```py\n   frame = context.currentFrame()\n   context.endFrame(frame)\n   context.startFrame(frame)\n context.displayMode=0\n   context.renderAnim()\n```", "```py\n   filename= context.getFrameFilename()\n```", "```py\n   camera = os.path.join(os.path.dirname(filename),camera)\n   try:\n      os.remove(camera)\n   except:\n      pass\n   os.rename(filename,camera)\n   return camera\n```", "```py\nfrom math import asin,tan,pi,radians\n```", "```py\ndef frame(cameras,bb):\n   maxx = max(v.x for v in bb)\n   maxy = max(v.y for v in bb)\n   maxz = max(v.z for v in bb)\n   minx = min(v.x for v in bb)\n   miny = min(v.y for v in bb)\n   minz = min(v.z for v in bb)\n   wx=maxx-minx\n   wy=maxy-miny\n   wz=maxz-minz\n   m=Mathutils.Vector((wx/2.0,wy/2.0,wz/2.0))\n   maxw=max((wx,wy,wz))/2.0\n```", "```py\n   sins=[]\n   for cam in cameras:\n      p=Mathutils.Vector(Object.Get(cam).getLocation('worldspace'))\n d=(p-m).length\n      sins.append(maxw/d)\n```", "```py\n   maxsin=max(sins)\n   angle=asin(maxsin)\n   for cam in cameras:\n      Object.Get(cam).getData().lens = 16.0/tan(angle)\n\n```", "```py\ndef createcams():\n   cameras = {\n              'Top'  : (( 0.0,  0.0,10.0),( 0.0,0.0, 0.0),35.0),'Right': ((10.0,  0.0, 0.0),(90.0,0.0,90.0),35.0),\n              'Front': (( 0.0,-10.0, 0.0),(90.0,0.0, 0.0),35.0),'Free' : (( 5.8, -5.8, 5.8),(54.7,0.0,45.0),35.0)\n             }\n```", "```py\n   for cam in cameras:\n      try:\n         ob = Object.Get(cam)\n         camob = ob.getData()\n         if camob == None:\n            camob = Camera.New('persp',cam)\n            ob.link(camob)\n```", "```py\n      except ValueError:\n         ob = Object.New('Camera',cam)\n         Scene.GetCurrent().link(ob)\n         camob = Camera.New('persp',cam)\n         ob.link(camob)\n```", "```py\n      ob.setLocation(cameras[cam][0])\n      ob.setEuler([radians(a) for a in cameras[cam][1]])\n      camob.lens=cameras[cam][2]\n      Blender.Redraw()\n```", "```py\ndef run():\n   ob = Scene.GetCurrent().objects.active\n   cameras = ('Top','Right','Front','Free')\n   frame(cameras,ob.getBoundBox())\n   files = []\n   for cam in cameras:\n files.append(render(cam))\n\n```", "```py\n   outfile = os.path.join(os.path.dirname(files[0]),'result.png')\n```", "```py\n   paste(*files,output=outfile)\n   im=Image.Load(outfile)\n bpy.data.images.active = im\n   im.reload()\n   Window.RedrawAll()\n```", "```py\nif __name__ == \"__main__\":\n   createcams()\n   run()\n```", "```py\ndef strip(files,name='Strip',cols=4):\n   rows = int(len(files)/cols)\n   if len(files)%int(cols) : rows += 1\n\n   im = pim.open(files.pop(0))\n   w,h= im.size\n   edge=2\n   edgecolor=(0.0,0.0,0.0)\n\n   comp =  pim.new(im.mode,(w*cols+(cols+1)*edge,h*rows+(rows+1)*edge),edgecolor)\n\n   for y in range(rows):\n      for x in range(cols):\n comp.paste(im,(edge+x*(w+edge),edge+y*(h+edge)))\n         if len(files)>0:\n            im = pim.open(files.pop(0))\n         else:\n            comp.save(name,format='png')\n            return Image.Load(name)\n```", "```py\ndef render(skip=10):\n   context = Scene.GetCurrent().getRenderingContext()\n   filenames = []\n   e = context.endFrame()\n   s = context.startFrame()\n   context.displayMode=0\n for frame in range(s,e+1,skip):\n      context.currentFrame(frame)\n      context.startFrame(frame)\n      context.endFrame(frame)\n      context.renderAnim()\n      filenames.append(context.getFrameFilename())\n   context.startFrame(s)\n   context.endFrame(e)\n   return filenames\n```", "```py\ndef run():\n   files = render()\n   im=strip(files)\n   bpy.data.images.active = im\n   im.reload()\n Window.RedrawAll()\n\nif __name__ == \"__main__\":\n   run()\n```", "```py\nimport combine\nreload(combine)\n```", "```py\ndef render(camera):\n   cam = Object.Get(camera)\n   scn = Scene.GetCurrent()\n   scn.setCurrentCamera(cam)\n   context = scn.getRenderingContext()\n   frame = context.currentFrame()\n   context.endFrame(frame)\n   context.startFrame(frame)\n   context.displayMode=0\n context.enablePremultiply()\n   context.renderAnim()\n   filename= context.getFrameFilename()\n   camera = os.path.join(os.path.dirname(filename),camera)\n   try:\n      os.remove(camera) # remove otherwise rename fails on windows\n   except:\n      pass\n   os.rename(filename,camera)\n\n   context.enableSky()\n   return camera\n```", "```py\ndef imagemat(image):\n   mat = Material.New()\n mat.setAlpha(0.0)\n   mat.setMode(mat.getMode()|Material.Modes.ZTRANSP)\n   tex = Texture.New()\n   tex.setType('Image')\n   tex.image = image\n   tex.setImageFlags('UseAlpha')\n   image.premul=True\n mat.setTexture(0,tex,Texture.TexCo.UV,Texture.MapTo.COL|Texture.MapTo.ALPHA)\n   return mat\n```", "```py\ndef reset(face):\n   face.uv=[vec(0.0,0.0),vec(1.0,0.0),vec(1.0,1.0),vec(0.0,1.0)]\n```", "```py\ndef cardboard(left,right):\n   mesh = Mesh.New('Cardboard')\n   verts=[(0.0,0.0,0.0),(1.0,0.0,0.0),(1.0,0.0,1.0),(0.0,0.0,1.0),\n          (0.5,-0.5,0.0),(0.5,0.5,0.0),(0.5,0.5,1.0),(0.5,-0.5,1.0)]\n   faces=[(0,1,2,3),(4,5,6,7)]\n   mesh.verts.extend(verts)\n   mesh.faces.extend(faces)\n\n mesh.addUVLayer('Reset')\n   mesh.activeUVLayer='Reset'\n```", "```py\n   mesh.materials=[imagemat(left),imagemat(right)]\n\n   reset(mesh.faces[0])\n   reset(mesh.faces[1])\n mesh.faces[0].mat=0\n mesh.faces[1].mat=1\n\n   mesh.update()\n   return mesh\n```", "```py\ndef setmesh(obname,mesh):\n   ob = Object.Get(obname)\n ps = ob.getParticleSystems()[0]\n   dup = ps.duplicateObject\n   dup.link(mesh)\n   ob.makeDisplayList()\n   dup.makeDisplayList()\n   Window.RedrawAll()\n```", "```py\ndef run():\n   act_ob = Scene.GetCurrent().objects.active\n   act_ob.restrictRender = False\n```", "```py\n   renderstate = {}\n   for ob in Scene.GetCurrent().objects:\n      renderstate[ob.getName()] = ob.restrictRender\n if not ob.getType() in ('Camera','Lamp' ):\n         ob.restrictRender = True\n   act_ob.restrictRender = False\n```", "```py\n   cameras = ('Front','Right')\n combine.frame(cameras,act_ob.getBoundBox())\n   images={}\n   for cam in cameras:\n      im=Image.Load(render(cam))\n      im.reload()\n      images[cam]=im\n   bpy.data.images.active = im\n   Window.RedrawAll()\n```", "```py\n   for ob in Scene.GetCurrent().objects:\n      ob.restrictRender = renderstate[ob.getName()]\n\n   mesh = cardboard(images['Front'],images['Right'])\n   act_ob.restrictRender = True\n   setmesh('CardboardP',mesh)\n```", "```py\nif __name__ == \"__main__\":\n   combine.createcams()\n   run()\n```", "```py\nimport BaseHTTPServer\nimport re\nimport os\nimport shutil\n```", "```py\nclass CaptchaRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):\n\n   def do_GET(self):\n      f=self.do_HEAD()\n shutil.copyfileobj(f,self.wfile)\n      f.close()\n```", "```py\n   def do_HEAD(self):\n text=self.gettext()\n      if text==None:\n            self.send_error(404, \"File not found\")\n            return None\n```", "```py\n      try:\n            filename = self.captcha(text)\n      except:\n            self.send_error(500, \"Internal server error\")\n            return None\n```", "```py\n      f = open(filename,'rb')\n      self.send_response(200)\n      self.send_header(\"Content-type\", 'image/png')\n fs = os.fstat(f.fileno())\n self.send_header(\"Content-Length\", str(fs[6]))\n      self.send_header(\"Last-Modified\",self.date_time_string(fs.st_mtime))\n      self.end_headers()\n      return f\n```", "```py\n   def gettext(self):\n      match = re.match(r'^.*/captcha\\?text=(.*)$',self.path)\n      if match != None:\n         return match.group(1)\n\n      return None\n```", "```py\n   def captcha(self,text):\n      import Blender\n      scn = Blender.Scene.GetCurrent()\n\n      text_ob = None\n      for ob in scn.objects:\n if ob.name == 'Text' :\n            text_ob = ob.getData()\n            break\n```", "```py\n      if text_ob == None:\n         text_ob = Blender.Text3d.New('Text')\n         ob=scn.objects.new(text_ob)\n         ob.setName('Text')\n```", "```py\n      text_ob.setText(text)\n      text_ob.setExtrudeDepth(0.3)\n      text_ob.setWidth(1.003)\n      text_ob.setSpacing(0.8)\n text_ob.setExtrudeBevelDepth(0.01)\n      ob.makeDisplayList()\n```", "```py\n      context = scn.getRenderingContext()\n      context.displayMode=0\n```", "```py\n      context.imageSizeX(160)\n      context.imageSizeY(120)\n      context.setImageType(Blender.Scene.Render.PNG)\n      context.enableRGBAColor()\n      context.alphaMode=2\n```", "```py\n      context.currentFrame(1)\n      context.sFrame=1\n      context.eFrame=1\n      context.renderAnim()\n self.result=context.getFrameFilename()\n      return self.result\n```", "```py\ndef run(HandlerClass = CaptchaRequestHandler,\n       ServerClass = BaseHTTPServer.HTTPServer,\n       protocol=\"HTTP/1.1\"):\n\n port = 8080\n      server_address = ('', port)\n\n      HandlerClass.protocol_version = protocol\n\n      httpd = ServerClass(server_address, HandlerClass)\n\n      httpd.serve_forever()\n\nif __name__ == '__main__':\n      run()\n```"]