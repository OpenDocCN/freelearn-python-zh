["```py\n#!/usr/bin/env python3\n# Modified from \n# https://docs.python.org/3/library/multiprocessing.html\nfrom multiprocessing import Process\nimport os\ndef process_info():\n    print('process id:', os.getpid())\ndef worker(number):\n    print(f'Worker number {number}')\n    process_info()\nif __name__ == '__main__':\n    for i in range(5):\n        p = Process(target=worker, args=(i,))\n        p.start() \n```", "```py\n(venv) $ python multiprocess_1.py \nWorker number 0\nprocess id: 109737\nWorker number 2\nprocess id: 109739\nWorker number 3\nprocess id: 109740\nWorker number 1\nprocess id: 109738\nWorker number 4\nprocess id: 109741 \n```", "```py\n#!/usr/bin/env python3\n# Modified from https://pymotw.com/3/threading/index.html\nimport threading\n# Get thread ID\ndef thread_id():\n    print('thread id:', threading.get_ident())\n# Worker function\ndef worker(number):\n    print(f'Worker number {number}')\n    thread_id()\nthreads = []\nfor i in range(5):\n    t = threading.Thread(target=worker, args=(i,))\n    threads.append(t)\n    t.start() \n```", "```py\n(venv) $ python threading_1.py \nWorker number 0\nthread id: 140170712495680\nWorker number 1\nthread id: 140170704102976\nWorker number 2\nthread id: 140170695710272\nWorker number 3\nthread id: 140170704102976\nWorker number 4\nthread id: 140170695710272 \n```", "```py\n#!/usr/bin/env python3\nimport asyncio\nasync def main():\n    print('Hello ...')\n    await asyncio.sleep(1)\n    print('... World!')\n    await asyncio.sleep(2)\n    print('... and again.')\nasyncio.run(main()) \n```", "```py\n$ python asyncio_1.py \nHello ...\n... World!\n... and again. \n```", "```py\n#!/usr/bin/env python3\n# Modified from https://realpython.com/async-io-python/#the-asyncio-package-and-asyncawait countsync.py example\nimport time\ndef count():\n    print(\"One\")\n    time.sleep(1)\n    print(\"Two\")\ndef main():\n    count()\n    count()\n    count()\nif __name__ == \"__main__\":\n    s = time.perf_counter()\n    main()\n    elapsed = time.perf_counter() - s\n    print(f\"Completed in {elapsed:0.2f} seconds.\") \n```", "```py\n(venv) $ python sync_count.py\nOne\nTwo\nOne\nTwo\nOne\nTwo\nCompleted in 3.00 seconds. \n```", "```py\n#!/usr/bin/env python3\n# example from https://realpython.com/async-io-python/#the-asyncio-package-and-asyncawait countasync.py\nimport asyncio\nasync def count():\n    print(\"One\")\n    await asyncio.sleep(1)\n    print(\"Two\")\nasync def main():\n    await asyncio.gather(count(), count(), count())\nif __name__ == \"__main__\":\n    import time\n    s = time.perf_counter()\n    asyncio.run(main())\n    elapsed = time.perf_counter() - s\n    print(f\"Completed in {elapsed:0.2f} seconds.\") \n```", "```py\n(venv) $ python async_count.py\nOne\nOne\nOne\nTwo\nTwo\nTwo\nCompleted in 1.00 seconds. \n```", "```py\n(venv) $ pip install scrapli\n(venv) $ mkdir scrapli && cd scrapli \n```", "```py\n# Modified from https://github.com/carlmontanari/scrapli\nfrom scrapli import Scrapli\ndevice = {\n   \"host\": \"192.168.2.50\",\n   \"auth_username\": \"cisco\",\n   \"auth_password\": \"cisco\",\n   \"auth_strict_key\": False,\n   \"ssh_config_file\": True,\n   \"platform\": \"cisco_nxos\",\n}\nconn = Scrapli(**device)\nconn.open()\nresponse = conn.send_command(\"show version\")\nprint(response.result) \n```", "```py\n(venv) $ python scrapli_example_1.py \nCisco Nexus Operating System (NX-OS) Software\nTAC support: http://www.cisco.com/tac\n…\nSoftware\n  loader:    version N/A\n  kickstart: version 7.3(0)D1(1)\n  system:    version 7.3(0)D1(1)\nHardware\n  cisco NX-Osv Chassis (\"NX-Osv Supervisor Module\")\n  IntelI CITM) i5-7260U C with 3064740 kB of memory.\n  Processor Board ID TM000940CCB\n  Device name: lax-cor-r1\n  bootflash:    3184776 kB\n… \n```", "```py\n$ cat ~/.ssh/config\n…\nHost 192.168.2.50\n  HostKeyAlgorithms +ssh-rsa\n  KexAlgorithms +diffie-hellman-group-exchange-sha1 \n```", "```py\n(venv) $ pip install scrapli[asyncssh] \n```", "```py\n#!/usr/bin/env python3\n# Modified from \n# https://github.com/carlmontanari/scrapli/blob/main/examples/async_usage/async_multiple_connections.py\nimport asyncio\nfrom scrapli.driver.core import AsyncNXOSDriver\nasync def gather_cor_device_version(ip, username, password):\n    device = {\n        \"host\": ip,\n        \"auth_username\": username,\n        \"auth_password\": password,\n        \"auth_strict_key\": False,\n        \"ssh_config_file\": True,\n        \"transport\": \"asyncssh\",\n        \"driver\": AsyncNXOSDriver\n    }\n    driver = device.pop(\"driver\")\n    conn = driver(**device)\n    await conn.open()\n    response = await conn.send_command(\"show version\")\n    await conn.close()\n    return response\nasync def main():\n    results = await asyncio.gather(\n                        gather_cor_device_version('192.168.2.50', 'cisco', 'cisco'),\n                        gather_cor_device_version('192.168.2.60', 'cisco', 'cisco')\n                    )\n    for result in results: \n        print(result.result)\nif __name__ == \"__main__\": \n    import time\n    s = time.perf_counter()\n    asyncio.run(main())\n    elapsed = time.perf_counter() - s\n    print(f\"Completed in {elapsed:0.2f} seconds.\") \n```", "```py\n(venv) $ python scrapli_example_2_async.py \nCisco Nexus Operating System (NX-OS) Software\n…\n  loader:    version N/A\n  kickstart: version 7.3(0)D1(1)\n  system:    version 7.3(0)D1(1)\n…\n  Device name: lax-cor-r1\n  bootflash:    3184776 kB\n…\n  Device name: nyc-cor-r1\n  bootflash:    3184776 kB\n…\nCompleted in 1.37 seconds. \n```", "```py\n#!/usr/bin/env python3\n# Modified from \n# https://github.com/carlmontanari/scrapli/blob/main/examples/async_usage/async_multiple_connections.py\nimport asyncio\n# from scrapli.driver.core import Paramiko\nfrom scrapli.driver import GenericDriver\ndef gather_cor_device_version(ip, username, password):\n    device = {\n        \"host\": ip,\n        \"auth_username\": username,\n        \"auth_password\": password,\n        \"auth_strict_key\": False,\n        \"ssh_config_file\": True,\n        \"driver\": GenericDriver\n    }\n    driver = device.pop(\"driver\")\n    conn = driver(**device)\n    conn.open()\n    response = conn.send_command(\"show version\")\n    conn.close()\n    return response\ndef main():\n    results = []\n    for device in [\n                    '192.168.2.50', \n                    '192.168.2.60',\n                    '192.168.2.50', \n                    '192.168.2.60',\n                    '192.168.2.50', \n                    '192.168.2.60',\n                    '192.168.2.50', \n                    '192.168.2.60',\n                  ]:\n        results.append(gather_cor_device_version(device, 'cisco', 'cisco'))\n    return results\nif __name__ == \"__main__\": \n    import time\n    s = time.perf_counter()\n    main()\n    elapsed = time.perf_counter() - s\n    print(f\"Completed in {elapsed:0.2f} seconds.\") \n```", "```py\n(venv) $ python scrapli_example_3_sync.py \nCompleted in 5.97 seconds.\n(venv) $ python scrapli_example_3_async.py \nCompleted in 4.67 seconds. \n```"]