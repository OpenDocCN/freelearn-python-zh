["```py\n...\n    def long_task():\n        while True:\n            QtWidgets.qApp.processEvents(QtCore.QEventLoop.AllEvents)\n            print(\"HELLO\")\n    ...\n...\n```", "```py\nprocess = QtCore.QProcess()\n```", "```py\nprocess_env = QtCore.QProcessEnvironment()\n```", "```py\nimport QtQuick 2.7\nimport QtQuick.Layouts 1.3\nimport \"qmls\" as Uqmls\n\nRectangle {\n    visible: true\n    color: Qt.rgba(0, 0.07, 0.14, 1);\n    GridLayout {\n        id: grid1; anchors.fill: parent; visible: true\n        function wsize() {\n            if (width < 590) {return 1;} else {return 2;};\n        }\n        columns: wsize();\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        Uqmls.URectGlow {\n            id: g5; Layout.fillWidth: true\n            Layout.fillHeight: true\n            Layout.margins: 20\n            color: Qt.rgba(0, 0.07, 0.14, 1);\n            glowcolor: Qt.rgba(0.007, 1, 1, 1);\n            txglow: Qt.rgba(0.007, 0.7, 0.7, 1);\n            txtext: \"Camera\"\n            txcolor: Qt.rgba(0.2, 0.2, 0.2, 1)\n            signal clicked();\n            MouseArea { \n                anchors.fill: parent\n                onClicked: {\n                    g5.glowcolor == Qt.rgba(0.007, 1, 1, 1) ?\n                    g5.glowcolor = Qt.rgba(0, 0.07, 0.14, 1) :\n                    g5.glowcolor = Qt.rgba(0.007, 1, 1, 1);\n                    g5.txglow == Qt.rgba(0, 0.07, 0.14, 1) ?\n                    g5.txglow = Qt.rgba(0.007, 1, 1, 1) :\n                    g5.txglow = Qt.rgba(0, 0.07, 0.14, 1);\n                    g5.clicked();\n                }\n            }\n        }\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        Uqmls.URectGlow {\n            id: g6; Layout.fillWidth: true;\n            Layout.fillHeight: true\n            Layout.margins: 20\n            color: Qt.rgba(0, 0.07, 0.14, 1);\n            glowcolor: Qt.rgba(0.95, 0, 0, 1);\n            txglow: Qt.rgba(0.77, 0, 0, 1);\n            txtext: \"QMLS\"\n            txcolor: Qt.rgba(0.2, 0.2, 0.2, 1)\n            signal clicked();\n            MouseArea {\n                anchors.fill: parent\n                onClicked: {\n                    g6.glowcolor == Qt.rgba(0.95, 0, 0, 1) ?\n                    g6.glowcolor = Qt.rgba(0, 0.07, 0.14, 1) :\n                    g6.glowcolor = Qt.rgba(0.95, 0, 0, 1);\n                    g6.txglow == Qt.rgba(0, 0.07, 0.14, 1) ?\n                    g6.txglow = Qt.rgba(0.77, 0, 0, 1) :\n                    g6.txglow = Qt.rgba(0, 0.07, 0.14, 1);\n                    g6.clicked(); \n                }\n            }\n        }\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        Uqmls.URectGlow {\n            id: g7; Layout.fillWidth: true\n            Layout.fillHeight: true\n            Layout.margins: 20\n            color: Qt.rgba(0, 0.07, 0.14, 1);\n            glowcolor: Qt.rgba(0,0.95,0.37,1);\n            txglow: Qt.rgba(0,0.47,0.37,1);\n            txtext: \"JUPYTER\"\n            txcolor: Qt.rgba(0.2, 0.2, 0.2, 1)\n            signal clicked();\n            MouseArea {\n                anchors.fill: parent \n                onClicked: {\n                    g7.glowcolor == Qt.rgba(0, 0.95, 0.37, 1) ?\n                    g7.glowcolor = Qt.rgba(0, 0.07, 0.14, 1) :\n                    g7.glowcolor = Qt.rgba(0, 0.95, 0.37, 1);\n                    g7.txglow == Qt.rgba(0, 0.07, 0.14, 1) ?\n                    g7.txglow = Qt.rgba(0, 0.47, 0.37, 1) :\n                    g7.txglow = Qt.rgba(0, 0.07, 0.14, 1);\n                    g7.clicked(); \n                }\n            }\n        }\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        Uqmls.URectGlow {\n            id: g8; Layout.fillWidth: true; Layout.fillHeight: true\n            Layout.margins: 20\n            color: Qt.rgba(0, 0.07, 0.14, 1);\n            glowcolor: Qt.rgba(1, 1, 1, 1);\n            txglow: \"grey\";\n            txtext: \"WEB\"\n            txcolor: Qt.rgba(0.2, 0.2, 0.2, 1)\n            signal clicked();\n            MouseArea {\n                anchors.fill: parent\n                onClicked: {\n                    g8.glowcolor == Qt.rgba(1, 1, 1, 1) ?\n                    g8.glowcolor = Qt.rgba(0, 0.07, 0.14, 1) :\n                    g8.glowcolor = Qt.rgba(1, 1, 1, 1);\n                    g8.txglow == Qt.rgba(0, 0.07, 0.14, 1) ?\n                    g8.txglow = \"grey\" :\n                    g8.txglow = Qt.rgba(0, 0.07, 0.14, 1);\n                    g8.clicked();\n                }\n            }\n        }\n    }\n}\n```", "```py\n...\nfrom PySide2 import QtQuickWidgets\n...\n```", "```py\n...\nfrom PyQt5 import QtQuickWidgets\n...\n```", "```py\n...\nclass UApp(UWindow, UTools):\n\n    def __init__(self, parent=None):\n        ...\n        self.apps = QtQuickWidgets.QQuickWidget(self.twid1)\n        self.apps.setSource(QtCore.QUrl(\"apps.qml\"))\n        self.properties = self.apps.rootObject()\n        ...\n        self.qmlbut1 = self.properties.childItems()[0].childItems()[0]\n        self.qmlbut1.clicked.connect(self.video_camera)\n        self.qmlbut2 = self.properties.childItems()[0].childItems()[1]\n        self.qmlbut2.clicked.connect(self.qml_apps)\n        self.qmlbut3 = self.properties.childItems()[0].childItems()[2]\n        self.qmlbut3.clicked.connect(self.jupyter)\n        self.qmlbut4 = self.properties.childItems()[0].childItems()[3]\n        self.qmlbut4.clicked.connect(self.web_browse)\n        ...\n        self.qapp1 = 0\n        self.qapp2 = 0\n        self.qapp3 = 0\n        self.qapp4 = 0\n    ...\n...\n```", "```py\n...\n    ...\n    def resizeEvent(self, event):\n        self.properties.setWidth(\n             float(self.tabwid.currentWidget().width()))\n        self.properties.setHeight(\n             float(self.tabwid.currentWidget().height()))\n    ...\n...\n```", "```py\n...\n    ...\n    def video_camera(self):\n        self.qapp1 += 1\n        if self.qapp1 == 1:\n            # subprocess.Popen([\"python\", r\"u_media.py\"])\n            self.approc1 = QtCore.QProcess()\n            self.approc1.start(\"python\", [\"u_media.py\"])\n        if self.qapp1 == 2:\n            self.approc1.kill()\n            self.qapp1 = 0\n    ...\n...\n```", "```py\n...\n    ...\n    def qml_apps(self):\n        self.qapp2 += 1\n        if self.qapp2 == 1:\n            # subprocess.Popen([\"python\", r\"u_qml.py\"])\n            self.approc2 = QtCore.QProcess()\n            self.approc2.start(\"python\", [\"u_qml.py\"])\n        if self.qapp2 == 2:\n            self.approc2.kill()\n            self.qapp2 = 0\n    ...\n...\n```", "```py\n...\nfrom PySide2 import QtWidgets, QtCore\nfrom PySide2.QtQml import QQmlApplicationEngine\nimport sys\n...\n```", "```py\n...\nfrom PyQt5 import QtWidgets, QtCore\nfrom PyQt5.QtQml import QQmlApplicationEngine\nimport sys\n...\n```", "```py\n...\napp = QtWidgets.QApplication(sys.argv)\nqwid = QQmlApplicationEngine()\nqwid.load(QtCore.QUrl('u_qml.qml'))\nsys.exit(app.exec_())\n...\n```", "```py\n...\n    ...\n    def jupyter(self):\n        self.qapp3 += 1\n        if self.qapp3 == 1:\n            # subprocess.Popen([\"jupyter\", [\"notebook\", \"-- \n            #                             browser=firefox\"])\n            self.approc3 = QtCore.QProcess()\n            self.approc3.start(\"jupyter\", [\"notebook\", \"--\n                                         browser=firefox\"])\n        if self.qapp3 == 2:\n            self.approc3.kill()\n            self.qapp3 = 0\n    ...\n...\n```", "```py\n...\n    ...\n    def web_browse(self):\n        self.qapp4 += 1\n        if self.qapp4 == 1:\n            # subprocess.Popen(\"python\", [\"-m\", \"webbrowser\", \"-n\", \n            #                            \"https://www.python.org\"])\n            self.approc4 = QtCore.QProcess()\n            self.approc4.start(\"python\", [\"-m\", \"webbrowser\", \"-n\",\n                                          \"https://www.python.org\"])\n        if self.qapp4 == 2:\n            self.approc4.kill()\n            self.qapp4 = 0\n    ...\n...\n```", "```py\nthread = QtCore.QThread()\n```", "```py\nthread_pool = QtCore.QThreadPool()\n```", "```py\n...\nclass MongoThread(QThread):\n\n    sig1 = app_signal(object, str)\n\n    def __init__(self, parent=None):\n        super(MongoThread, self).__init__(parent)\n\n    def on_source(self, datas):\n        self.datas = datas\n    ...\n...\n```", "```py\n...\n    ...\n    def run(self):\n        try:\n            import pymongo\n            try:\n                self.client = pymongo.MongoClient('localhost',\n                                                         27017)\n                self.db = self.client['umongodb']\n            except pymongo.errors as err:\n                self.sig1.emit('', str(err))\n            if self.datas[1] == \"insert\":\n                posts = self.db.posts\n                posts.insert_one(self.datas[0])\n            if self.datas[1] == \"select\":\n                dbdata = self.db.posts.find()\n                self.sig1.emit(dbdata, '')\n            if self.isFinished():\n                self.quit()\n        except Exception as err:\n            self.sig1.emit('', str(err))\n            if self.isFinished():\n                self.quit()\n...\n```", "```py\n...\nclass CouchThread(QThread):\n\n    sig1 = app_signal(object, str)\n\n    def __init__(self, parent=None):\n        super(CouchThread, self).__init__(parent)\n\n    def on_source(self, datas):\n        self.datas = datas\n    ...\n...\n```", "```py\n...\n    ...\n    def run(self):\n        try:\n            import couchdb\n            try:\n                self.couch = couchdb.Server(\n                                \"http://127.0.0.1:5984/\")\n                self.db = self.couch[\"u_couchdb\"]\n            except Exception as err:\n                self.sig1.emit('', str(err))\n            if self.datas[1] == \"insert\":\n                self.db.save(self.datas[0])\n            if self.datas[1] == \"select\":\n                self.sig1.emit(self.db, '')\n            if self.isFinished():\n                self.quit()\n        except Exception as err:\n            self.sig1.emit('', str(err))\n            if self.isFinished():\n                self.quit()\n...\n```", "```py\n...\nclass UTools(object):\n\n    pandas_sig1 = app_signal(list)\n    pandas_sig2 = app_signal(list)\n    mongo_sig1 = app_signal(list)\n    mongo_sig2 = app_signal(list)\n    couch_sig1 = app_signal(list)\n    couch_sig2 = app_signal(list)\n\n    def __init__(self):\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def mongo_insert(self, username=None, email=None,\n                                    passw=None, data=None):\n        datas = [{\"User Name\": username, \"Email\": email,\n        \"Password\": passw, \"Data\": data}, \"insert\"]\n        self.mongo_thread1 = MongoThread()\n        self.mongo_sig1.connect(self.mongo_thread1.on_source)\n        self.mongo_sig1.emit(datas)\n        self.mongo_thread1.start()\n    ...\n...\n```", "```py\n...\n    ...\n    def mongo_select(self):\n        datas = [{}, \"select\"]\n        self.mongo_thread2 = MongoThread()\n        self.mongo_sig2.connect(self.mongo_thread2.on_source)\n        self.mongo_sig2.emit(datas)\n        self.mongo_thread2.start()\n        return self.mongo_thread2\n    ...\n...\n```", "```py\n...\n    ...\n    def couch_insert(self, username=None, email=None,\n                                passw=None, data=None):\n        datas = [{\"User Name\": username,\n          \"User email\": email,\n          \"User password\": passw,\n                  \"User Data\": data}, \"insert\"]\n        self.couch_thread1 = CouchThread()\n        self.couch_sig1.connect(self.couch_thread1.on_source)\n        self.couch_sig1.emit(datas)\n        self.couch_thread1.start()\n    ...\n...\n```", "```py\n...\n    ...\n    def couch_select(self):\n        datas = [{}, \"select\"]\n        self.couch_thread2 = CouchThread()\n        self.couch_sig2.connect(self.couch_thread2.on_source)\n        self.couch_sig2.emit(datas)\n        self.couch_thread2.start()\n        return self.couch_thread2\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        if self.actx == \"MongoDB\":\n            try:\n                mongo_data = self.mongo_select()\n                def to_field(dbdata, er):\n                    if er == '':\n                        for dtx in dbdata:\n                            self.text_edit.append(\n                                    \"%s\\n%s\\n%s\\n%s\" % (\n                                    dtx[\"User Name\"],\n                                    dtx[\"Email\"],\n                                    dtx[\"Password\"],\n                                    dtx[\"Data\"]))\n                    else:\n                        self.stat_bar.showMessage(\n                                    self.actx + ' ' + er)\n                mongo_data.sig1.connect(\n                     to_field, QtCore.Qt.QueuedConnection)\n                self.stat_bar.showMessage(\n                                    self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                               self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        if self.actx == \"CouchDB\":\n            try:\n                couch_data = self.couch_select()\n                def to_field(dbdata, er):\n                    if er == '':\n                        for dtx in dbdata.view(\n                                        \"_all_docs\",\n                                        include_docs=True):\n                            self.text_edit.append(\n                                 \"%s\\n%s\\n%s\\n%s\" % (\n                                 dtx[\"doc\"][\"User Name\"],\n                                 dtx[\"doc\"][\"User email\"],\n                                 dtx[\"doc\"][\"User password\"],\n                                 dtx[\"doc\"][\"User Data\"]))\n                    else:\n                        self.stat_bar.showMessage(\n                                      self.actx + ' ' + er)\n                couch_data.sig1.connect(\n                       to_field, QtCore.Qt.QueuedConnection)\n                self.stat_bar.showMessage(\n                                 self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                                 self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\nmutex = QtCore.QMutex(QtCore.QMutex.RecursionMode)\n```", "```py\n...\nclass WPandas(QThread):\n    ...\n    def __init__(self, parent=None):\n        ...\n        self.mutex = QMutex()\n    ...\n    def run(self):\n        self.mutex.lock()\n        try:\n            ...\n        except Exception as err:\n            ...\n        self.mutex.unlock()\n...\n```", "```py\nmutex_locker = QtCore.QMutexLocker(QtCore.QBasicMutex)\n```", "```py\n...\nclass WPandas(QThread):\n    ...\n    def __init__(self, parent=None):\n        ...\n        self.mutex = QMutex()\n    ...\n    def run(self):\n        mutex_locker = QMutexLocker(self.mutex)\n        try:\n            ...\n        except Exception as err:\n            ...\n...\n```", "```py\n...\nclass WPandas(QThread):\n    ...\n    def __init__(self, parent=None):\n        ...\n        self.mutex = QMutex()\n    ...\n    def run(self):\n        with QMutexLocker(self.mutex):\n            try:\n                ...\n            except Exception as err:\n                ...\n...\n```", "```py\nsystem_semaphore = QtCore.QSystemSemaphore(str, int,\n                         QtCore.QSystemSemaphore.AccessMode)\n```", "```py\nsemaphore = QtCore.QSemaphore(int)\n```", "```py\nwait_condition = QtCore.QWaitCondition()\n```", "```py\n...\nimport threading\n...\n```", "```py\nthread1 = threading.Thread(group=None, target=None, name=None,\n                             args=(), kwargs={}, *, daemon=None)\n```", "```py\ndef func(n):\n    ...\n\nthread1 = threading.Thread(target=func, args=(14,))\nthread1.start()\nthread1.join()\n```", "```py\nthread1_lock = threading.Lock\n```", "```py\nthread1_rlock = threading.RLock\n```", "```py\nthread1_cond = threading.Condition(lock=None)\n```", "```py\nthread1_sema = threading.Semaphore(value=1)\n```", "```py\nthread1_bsema = threading.BoundedSemaphore(value=1)\n```", "```py\nthread1_event = threading.Event\n```", "```py\nthread1_timer = threading.Timer(interval, function,\n                                args=None, kwargs=None)\n```", "```py\nthread1_barrier = threading.Barrier(parties, action=None,\n                                             timeout=None)\n```", "```py\n...\nimport queue\n..\n```", "```py\nqueue1 = queue.Queue(maxsize=0)\n```", "```py\nqueue1 = queue.LifoQueue(maxsize=0)\n```", "```py\nqueue1 = queue.PriorityQueue(maxsize=0)\n```", "```py\nqueue1 = queue.SimpleQueue\n```", "```py\n...\nimport subprocess\n...\n```", "```py\nsubprocess1 = subprocess.run([\"command\", \"-flags\", \"args\"],\n                    *, stdin=None, input=None, stdout=None,\n                         stderr=None, capture_output=False,\n                       shell=False, cwd=None, timeout=None,\n                   check=False, encoding=None, errors=None,\n                   text=None, env=None, universal_newlines=None)\n```", "```py\nsubprocess1 = subprocess.Popen([\"command\", \"-flags\", \"args\"],\n                     bufsize=-1, executable=None, stdin=None,\n                   stdout=None, stderr=None, preexec_fn=None,\n                       close_fds=True, shell=False, cwd=None,\n                           env=None, universal_newlines=None,\n                           startupinfo=None, creationflags=0,\n                                        restore_signals=True,\n                     start_new_session=False, pass_fds=(), *,\n                       encoding=None, errors=None, text=None)\n```", "```py\n...\nimport multiprocessing\n..\n```", "```py\nprocess1 = multiprocessing.Process(group=None, target=None,\n                                        name=None, args=(),\n                                 kwargs={}, *, daemon=None)\n```", "```py\nconn = multiprocessing.connection.Connection\n```", "```py\nconn1, conn2 = multiprocessing.Pipe(duplex)\n```", "```py\ndef func1(msg, conn):\n    conn.send(str(msg))\n    conn.close()\n\ndef func2(msg, conn):\n    conn.send(msg)\n    conn.close()\n\nif __name__ == \"__main__\":\n    conn1, conn2 = multiprocessing.Pipe()\n    process1 = multiprocessing.Process(\n           target=func1, args=(\n                  \"Hello Process # 1\", conn2))\n    process2 = multiprocessing.Process(\n           target=func2, args=(\n                  \"Hello Process # 2\", conn1))\n    process1.start()\n    process2.start()\n    print(conn1.recv())\n    print(conn2.recv())\n    process1.join()\n    process2.join()\n```"]