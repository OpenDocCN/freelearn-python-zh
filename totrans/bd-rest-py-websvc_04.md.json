["```py\nREST_FRAMEWORK = { \n    'DEFAULT_PAGINATION_CLASS': \n    'games.pagination.LimitOffsetPaginationWithMaxLimit', \n    'PAGE_SIZE': 5, \n    'DEFAULT_AUTHENTICATION_CLASSES': ( \n        'rest_framework.authentication.BasicAuthentication', \n        'rest_framework.authentication.SessionAuthentication', \n        ), \n    'DEFAULT_THROTTLE_CLASSES': ( \n        'rest_framework.throttling.AnonRateThrottle', \n        'rest_framework.throttling.UserRateThrottle', \n    ), \n    'DEFAULT_THROTTLE_RATES': { \n        'anon': '5/hour', \n        'user': '20/hour', \n        'game-categories': '30/hour', \n    } \n}\n\n```", "```py\nfrom rest_framework.throttling import ScopedRateThrottle \n\n```", "```py\nclass GameCategoryList(generics.ListCreateAPIView): \n    queryset = GameCategory.objects.all() \n    serializer_class = GameCategorySerializer \n    name = 'gamecategory-list' \n    throttle_scope = 'game-categories' \n    throttle_classes = (ScopedRateThrottle,)\n\n```", "```py\nclass GameCategoryDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = GameCategory.objects.all() \n    serializer_class = GameCategorySerializer \n    name = 'gamecategory-detail' \n    throttle_scope = 'game-categories' \n    throttle_classes = (ScopedRateThrottle,)\n\n```", "```py\npython manage.py runserver\npython manage.py runserver 0.0.0.0:8000\n\n```", "```py\nhttp :8000/player-scores/\n\n```", "```py\nfor i in {1..6}; do http :8000/player-scores/; done;\n\n```", "```py\ncurl -iX GET :8000/player-scores/\n\n```", "```py\nfor i in {1..6}; do curl -iX GET :8000/player-scores/; done;\n\n```", "```py\nHTTP/1.0 429 Too Many Requests\nAllow: GET, POST, HEAD, OPTIONS\nContent-Type: application/json\nDate: Tue, 05 Jul 2016 03:37:50 GMT\nRetry-After: 3189\nServer: WSGIServer/0.2 CPython/3.5.1\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n{\n \"detail\": \"Request was throttled. Expected available in 3189 seconds.\"\n}\n\n```", "```py\nhttp -a superuser:'password' :8000/player-scores/\n\n```", "```py\nfor i in {1..6}; do http -a superuser:'password' :8000/player-scores/; done;\n\n```", "```py\ncurl --user superuser:'password' -iX GET :8000/player-scores/\n\n```", "```py\nfor i in {1..6}; do curl --user superuser:'password' -iX GET :8000/player-scores/; done;\n\n```", "```py\nhttp :8000/game-categories/\n\n```", "```py\nfor i in {1..30}; do http :8000/game-categories/; done;\n\n```", "```py\ncurl -iX GET :8000/game-categories/\n\n```", "```py\nfor i in {1..30}; do curl -iX GET :8000/game-categories/; done;\n\n```", "```py\npip install django-filter\n\n```", "```py\nCollecting django-filter\n Downloading django_filter-0.13.0-py2.py3-none-any.whl\nInstalling collected packages: django-filter\nSuccessfully installed django-filter-0.13.0\n\n```", "```py\npip install django-crispy-forms\n\n```", "```py\nCollecting django-crispy-forms\nInstalling collected packages: django-crispy-forms\n Running setup.py install for django-crispy-forms\nSuccessfully installed django-crispy-forms-1.6.0\n\n```", "```py\nREST_FRAMEWORK = { \n    'DEFAULT_PAGINATION_CLASS': \n    'games.pagination.LimitOffsetPaginationWithMaxLimit', \n    'PAGE_SIZE': 5, \n    'DEFAULT_FILTER_BACKENDS': ( \n        'rest_framework.filters.DjangoFilterBackend', \n        'rest_framework.filters.SearchFilter', \n        'rest_framework.filters.OrderingFilter', \n        ), \n    'DEFAULT_AUTHENTICATION_CLASSES': ( \n        'rest_framework.authentication.BasicAuthentication', \n        'rest_framework.authentication.SessionAuthentication', \n        ), \n    'DEFAULT_THROTTLE_CLASSES': ( \n        'rest_framework.throttling.AnonRateThrottle', \n        'rest_framework.throttling.UserRateThrottle', \n    ), \n    'DEFAULT_THROTTLE_RATES': { \n        'anon': '5/hour', \n        'user': '20/hour', \n        'game-categories': '30/hour', \n    } \n} \n\n```", "```py\nINSTALLED_APPS = [ \n    'django.contrib.admin', \n    'django.contrib.auth', \n    'django.contrib.contenttypes', \n    'django.contrib.sessions', \n    'django.contrib.messages', \n    'django.contrib.staticfiles', \n    # Django REST Framework \n    'rest_framework', \n    # Games application \n    'games.apps.GamesConfig', \n    # Crispy forms \n    'crispy_forms', \n] \n\n```", "```py\nfrom rest_framework import filters \nfrom django_filters import NumberFilter, DateTimeFilter, AllValuesFilter \n\n```", "```py\nclass GameCategoryList(generics.ListCreateAPIView): \n    queryset = GameCategory.objects.all() \n    serializer_class = GameCategorySerializer \n    name = 'gamecategory-list' \n    throttle_scope = 'game-categories' \n    throttle_classes = (ScopedRateThrottle,) \n    filter_fields = ('name',) \n    search_fields = ('^name',) \n    ordering_fields = ('name',) \n\n```", "```py\nclass GameList(generics.ListCreateAPIView): \n    queryset = Game.objects.all() \n    serializer_class = GameSerializer \n    name = 'game-list' \n    permission_classes = ( \n        permissions.IsAuthenticatedOrReadOnly, \n        IsOwnerOrReadOnly, \n        ) \n    filter_fields = ( \n        'name',  \n        'game_category',  \n        'release_date',  \n        'played',  \n        'owner', \n        ) \n    search_fields = ( \n        '^name', \n        ) \n    ordering_fields = ( \n        'name', \n        'release_date', \n        ) \n\n    def perform_create(self, serializer): \n        serializer.save(owner=self.request.user) \n\n```", "```py\nclass PlayerList(generics.ListCreateAPIView): \n    queryset = Player.objects.all() \n    serializer_class = PlayerSerializer \n    name = 'player-list' \n    filter_fields = ( \n        'name',  \n        'gender',  \n        )\nsearch_fields = ( \n        '^name', \n        ) \n    ordering_fields = ( \n        'name', \n        )\n\n```", "```py\nclass PlayerScoreFilter(filters.FilterSet): \n    min_score = NumberFilter( \n        name='score', lookup_expr='gte') \n    max_score = NumberFilter( \n        name='score', lookup_expr='lte') \n    from_score_date = DateTimeFilter( \n        name='score_date', lookup_expr='gte') \n    to_score_date = DateTimeFilter( \n        name='score_date', lookup_expr='lte') \n    player_name = AllValuesFilter( \n        name='player__name') \n    game_name = AllValuesFilter( \n        name='game__name') \n\n    class Meta: \n        model = PlayerScore \n        fields = ( \n            'score', \n            'from_score_date', \n            'to_score_date', \n            'min_score', \n            'max_score', \n            #player__name will be accessed as player_name \n            'player_name', \n            #game__name will be accessed as game_name \n            'game_name', \n            ) \n\n```", "```py\nclass PlayerScoreList(generics.ListCreateAPIView): \n    queryset = PlayerScore.objects.all() \n    serializer_class = PlayerScoreSerializer \n    name = 'playerscore-list' \n    filter_class = PlayerScoreFilter \n    ordering_fields = ( \n        'score', \n        'score_date', \n        ) \n\n```", "```py\npython manage.py runserver\npython manage.py runserver 0.0.0.0:8000\n\n```", "```py\nhttp :8000/game-categories/?name=3D+RPG\n\n```", "```py\ncurl -iX GET :8000/game-categories/?name=3D+RPG\n\n```", "```py\n{\n \"count\": 1, \n \"next\": null, \n \"previous\": null, \n \"results\": [\n {\n \"games\": [\n \"http://localhost:8000/games/2/\", \n \"http://localhost:8000/games/15/\", \n \"http://localhost:8000/games/3/\", \n \"http://localhost:8000/games/16/\"\n ], \n \"name\": \"3D RPG\", \n \"pk\": 3, \n \"url\": \"http://localhost:8000/game-categories/3/\"\n }\n ]\n}\n\n```", "```py\nhttp ':8000/games/?game_category=3&played=True&ordering=-release_date'\n\n```", "```py\ncurl -iX GET ':8000/games/?game_category=3&played=True&ordering=-release_date'\n\n```", "```py\n{\n \"count\": 2, \n \"next\": null, \n \"previous\": null, \n \"results\": [\n {\n \"game_category\": \"3D RPG\", \n \"name\": \"PvZ Garden Warfare 4\", \n \"owner\": \"superuser\", \n \"played\": true, \n \"release_date\": \"2016-06-21T03:02:00.776594Z\", \n \"url\": \"http://localhost:8000/games/2/\"\n }, \n {\n \"game_category\": \"3D RPG\", \n \"name\": \"Superman vs Aquaman\", \n \"owner\": \"superuser\", \n \"played\": true, \n \"release_date\": \"2016-06-21T03:02:00.776594Z\", \n \"url\": \"http://localhost:8000/games/3/\"\n }\n ]\n}\n\n```", "```py\nhttp ':8000/player-scores/?player_name=Kevin&game_name=Superman+vs+Aquaman'\n\n```", "```py\ncurl -iX GET ':8000/player-scores/?player_name=Kevin&game_name=Superman+vs+Aquaman'\n\n```", "```py\n{ \n    \"count\": 1,  \n    \"next\": null,  \n    \"previous\": null,  \n    \"results\": [ \n        { \n            \"game\": \"Superman vs Aquaman\",  \n            \"pk\": 5,  \n            \"player\": \"Kevin\",  \n            \"score\": 123200,  \n            \"score_date\": \"2016-06-22T03:02:00.776594Z\",  \n            \"url\": \"http://localhost:8000/player-scores/5/\" \n        } \n    ] \n} \n\n```", "```py\nhttp ':8000/player-scores/?score=&from_score_date=2016-06-01&to_score_date=2016-06-28&min_score=30000&max_score=150000&ordering=-score_date'\n\n```", "```py\ncurl -iX GET ':8000/player-scores/?score=&from_score_date=2016-06-01&to_score_date=2016-06-28&min_score=30000&max_score=150000&ordering=-score_date'\n\n```", "```py\n{\n \"count\": 3, \n \"next\": null, \n \"previous\": null, \n \"results\": [\n {\n \"game\": \"Superman vs Aquaman\", \n \"pk\": 5, \n \"player\": \"Kevin\", \n \"score\": 123200, \n \"score_date\": \"2016-06-22T03:02:00.776594Z\", \n \"url\": \"http://localhost:8000/player-scores/5/\"\n }, \n {\n \"game\": \"PvZ Garden Warfare 4\", \n \"pk\": 4, \n \"player\": \"Brandon\", \n \"score\": 85125, \n \"score_date\": \"2016-06-22T01:02:00.776594Z\", \n \"url\": \"http://localhost:8000/player-scores/4/\"\n }, \n {\n \"game\": \"PvZ Garden Warfare 4\", \n \"pk\": 3, \n \"player\": \"Brandon\", \n \"score\": 35000, \n \"score_date\": \"2016-06-21T03:02:00.776594Z\", \n \"url\": \"http://localhost:8000/player-scores/3/\"\n }\n ]\n}\n\n```", "```py\nhttp ':8000/games/?search=S'\n\n```", "```py\ncurl -iX GET ':8000/games/?search=S'\n\n```", "```py\n{\n \"count\": 2, \n \"next\": null, \n \"previous\": null, \n \"results\": [\n {\n \"game_category\": \"2D mobile arcade\", \n \"name\": \"Scribblenauts Unlimited\", \n \"owner\": \"superuser\", \n \"played\": false, \n \"release_date\": \"2016-06-21T03:02:00.776594Z\", \n \"url\": \"http://localhost:8000/games/7/\"\n }, \n {\n \"game_category\": \"3D RPG\", \n \"name\": \"Superman vs Aquaman\", \n \"owner\": \"superuser\", \n \"played\": true, \n \"release_date\": \"2016-06-21T03:02:00.776594Z\", \n \"url\": \"http://localhost:8000/games/3/\"\n }\n ]\n}\n\n```", "```py\nGET /player-scores/?score=&from_score_date=&to_score_date=&min_score=30000&max_score=40000&player_name=Brandon&game_name=PvZ+Garden+Warfare+4\n\n```", "```py\npip install coverage\n\n```", "```py\nCollecting coverage\n Downloading coverage-4.1.tar.gz\nInstalling collected packages: coverage\n Running setup.py install for coverage\nSuccessfully installed coverage-4.1\n\n```", "```py\npip install django-nose\n\n```", "```py\nCollecting django-nose\n Downloading django_nose-1.4.4-py2.py3-none-any.whl\nCollecting nose>=1.2.1 (from django-nose)\n Downloading nose-1.3.7-py3-none-any.whl\nInstalling collected packages: nose, django-nose\nSuccessfully installed django-nose-1.4.4 nose-1.3.7\n\n```", "```py\nINSTALLED_APPS = [ \n    'django.contrib.admin', \n    'django.contrib.auth', \n    'django.contrib.contenttypes', \n    'django.contrib.sessions', \n    'django.contrib.messages', \n    'django.contrib.staticfiles', \n    # Django REST Framework \n    'rest_framework', \n    # Games application \n    'games.apps.GamesConfig', \n    # Crispy forms \n    'crispy_forms', \n    # Django nose \n    'django_nose', \n] \n\n```", "```py\n# We want to use nose to run all the tests \nTEST_RUNNER = 'django_nose.NoseTestSuiteRunner' \n\n# We want nose to measure coverage on the games app \nNOSE_ARGS = [ \n    '--with-coverage', \n    '--cover-erase', \n    '--cover-inclusive', \n    '--cover-package=games', \n] \n\n```", "```py\n[run] \nomit = *migrations* \n\n```", "```py\nfrom django.test import TestCase \nfrom django.core.urlresolvers import reverse \nfrom django.utils.http import urlencode \nfrom rest_framework import status \nfrom rest_framework.test import APITestCase \nfrom games.models import GameCategory \n\nclass GameCategoryTests(APITestCase): \n    def create_game_category(self, name): \n        url = reverse('gamecategory-list') \n        data = {'name': name} \n        response = self.client.post(url, data, format='json') \n        return response \n\n    def test_create_and_retrieve_game_category(self): \n        \"\"\" \n        Ensure we can create a new GameCategory and then retrieve it \n        \"\"\" \n        new_game_category_name = 'New Game Category' \n        response = self.create_game_category(new_game_category_name) \n        self.assertEqual(response.status_code, status.HTTP_201_CREATED) \n        self.assertEqual(GameCategory.objects.count(), 1) \n        self.assertEqual( \n            GameCategory.objects.get().name,  \n            new_game_category_name) \n        print(\"PK {0}\".format(GameCategory.objects.get().pk)) \n\n```", "```py\n def test_create_duplicated_game_category(self): \n        \"\"\" \n        Ensure we can create a new GameCategory. \n        \"\"\" \n        url = reverse('gamecategory-list') \n        new_game_category_name = 'New Game Category' \n        data = {'name': new_game_category_name} \n        response1 = self.create_game_category(new_game_category_name) \n        self.assertEqual( \n            response1.status_code,  \n            status.HTTP_201_CREATED) \n        response2 = self.create_game_category(new_game_category_name) \n        self.assertEqual( \n            response2.status_code,  \n            status.HTTP_400_BAD_REQUEST) \n\n    def test_retrieve_game_categories_list(self): \n        \"\"\" \n        Ensure we can retrieve a game cagory \n        \"\"\" \n        new_game_category_name = 'New Game Category' \n        self.create_game_category(new_game_category_name) \n        url = reverse('gamecategory-list') \n        response = self.client.get(url, format='json') \n        self.assertEqual( \n            response.status_code,  \n            status.HTTP_200_OK) \n        self.assertEqual( \n            response.data['count'], \n            1) \n        self.assertEqual( \n            response.data['results'][0]['name'], \n            new_game_category_name) \n\n    def test_update_game_category(self): \n        \"\"\" \n        Ensure we can update a single field for a game category \n        \"\"\" \n        new_game_category_name = 'Initial Name' \n        response = self.create_game_category(new_game_category_name) \n        url = reverse( \n            'gamecategory-detail',  \n            None,  \n            {response.data['pk']}) \n        updated_game_category_name = 'Updated Game Category Name' \n        data = {'name': updated_game_category_name} \n        patch_response = self.client.patch(url, data, format='json') \n        self.assertEqual( \n            patch_response.status_code,  \n            status.HTTP_200_OK) \n        self.assertEqual( \n            patch_response.data['name'], \n            updated_game_category_name) \n\n    def test_filter_game_category_by_name(self): \n        \"\"\" \n        Ensure we can filter a game category by name \n        \"\"\" \n        game_category_name1 = 'First game category name' \n        self.create_game_category(game_category_name1) \n        game_caregory_name2 = 'Second game category name' \n        self.create_game_category(game_caregory_name2) \n        filter_by_name = { 'name' : game_category_name1 } \n        url = '{0}?{1}'.format( \n            reverse('gamecategory-list'), \n            urlencode(filter_by_name)) \n        response = self.client.get(url, format='json') \n        self.assertEqual( \n            response.status_code,  \n            status.HTTP_200_OK) \n        self.assertEqual( \n            response.data['count'], \n            1) \n        self.assertEqual( \n            response.data['results'][0]['name'], \n            game_category_name1) \n\n```", "```py\nself.assertEqual(response.data['count'], 1) \nself.assertEqual( \n    response.data['results'][0]['name'], \n    new_game_category_name) \n\n```", "```py\nfilter_by_name = { 'name' : game_category_name1 } \nurl = '{0}?{1}'.format( \n    reverse('gamecategory-list'), \n    urlencode(filter_by_name)) \n\n```", "```py\npython manage.py test -v 2\n\n```", "```py\nnosetests --with-coverage --cover-package=games --cover-erase --cover-inclusive -v --verbosity=2\nCreating test database for alias 'default' ('test_games')...\nOperations to perform:\n Synchronize unmigrated apps: django_nose, staticfiles, crispy_forms, messages, rest_framework\n Apply all migrations: games, admin, auth, contenttypes, sessions\nSynchronizing apps without migrations:\n Creating tables...\n Running deferred SQL...\nRunning migrations:\n Rendering model states... DONE\n Applying contenttypes.0001_initial... OK\n Applying auth.0001_initial... OK\n Applying admin.0001_initial... OK\n Applying admin.0002_logentry_remove_auto_add... OK\n Applying contenttypes.0002_remove_content_type_name... OK\n Applying auth.0002_alter_permission_name_max_length... OK\n Applying auth.0003_alter_user_email_max_length... OK\n Applying auth.0004_alter_user_username_opts... OK\n Applying auth.0005_alter_user_last_login_null... OK\n Applying auth.0006_require_contenttypes_0002... OK\n Applying auth.0007_alter_validators_add_error_messages... OK\n Applying games.0001_initial... OK\n Applying games.0002_auto_20160623_2131... OK\n Applying games.0003_game_owner... OK\n Applying sessions.0001_initial... OK\nEnsure we can create a new GameCategory and then retrieve it ... ok\nEnsure we can create a new GameCategory. ... ok\nEnsure we can filter a game category by name ... ok\nEnsure we can retrieve a game cagory ... ok\nEnsure we can update a single field for a game category ... ok\nName                   Stmts   Miss  Cover\n------------------------------------------\ngames.py                   0      0   100%\ngames/admin.py             1      1     0%\ngames/apps.py              3      3     0%\ngames/models.py           36     35     3%\ngames/pagination.py        3      0   100%\ngames/permissions.py       6      3    50%\ngames/serializers.py      45      0   100%\ngames/urls.py              3      0   100%\ngames/views.py            91      2    98%\n------------------------------------------\nTOTAL                    188     44    77%\n------------------------------------------\nRan 5 tests in 0.143s\nOK\nDestroying test database for alias 'default' ('test_games')...\n\n```", "```py\ncoverage report -m\n\n```", "```py\nName                   Stmts   Miss  Cover   Missing\n----------------------------------------------------\ngames/__init__.py          0      0   100%\ngames/admin.py             1      1     0%   1\ngames/apps.py              3      3     0%   1-5\ngames/models.py           36     35     3%   1-10, 14-70\ngames/pagination.py        3      0   100%\ngames/permissions.py       6      3    50%   6-9\ngames/serializers.py      45      0   100%\ngames/tests.py            55      0   100%\ngames/urls.py              3      0   100%\ngames/views.py            91      2    98%   83, 177\n----------------------------------------------------\nTOTAL                    243     44    82%\n\n```", "```py\ncoverage html\n\n```", "```py\nfrom games.models import Player \n\nclass PlayerTests(APITestCase): \n    def create_player(self, name, gender): \n        url = reverse('player-list') \n        data = {'name': name, 'gender': gender} \n        response = self.client.post(url, data, format='json') \n        return response \n\n    def test_create_and_retrieve_player(self): \n        \"\"\" \n        Ensure we can create a new Player and then retrieve it \n        \"\"\" \n        new_player_name = 'New Player' \n        new_player_gender = Player.MALE \n        response = self.create_player(new_player_name, new_player_gender) \n        self.assertEqual(response.status_code, status.HTTP_201_CREATED) \n        self.assertEqual(Player.objects.count(), 1) \n        self.assertEqual( \n            Player.objects.get().name,  \n            new_player_name) \n\n    def test_create_duplicated_player(self): \n        \"\"\" \n        Ensure we can create a new Player and we cannot create a duplicate. \n        \"\"\" \n        url = reverse('player-list') \n        new_player_name = 'New Female Player' \n        new_player_gender = Player.FEMALE \n        response1 = self.create_player(new_player_name, new_player_gender) \n        self.assertEqual( \n            response1.status_code,  \n            status.HTTP_201_CREATED) \n        response2 = self.create_player(new_player_name, new_player_gender) \n        self.assertEqual( \n            response2.status_code,  \n            status.HTTP_400_BAD_REQUEST) \n\n    def test_retrieve_players_list(self): \n        \"\"\" \n        Ensure we can retrieve a player \n        \"\"\" \n        new_player_name = 'New Female Player' \n        new_player_gender = Player.FEMALE \n        self.create_player(new_player_name, new_player_gender) \n        url = reverse('player-list') \n        response = self.client.get(url, format='json') \n        self.assertEqual( \n            response.status_code,  \n            status.HTTP_200_OK) \n        self.assertEqual( \n            response.data['count'], \n            1) \n        self.assertEqual( \n            response.data['results'][0]['name'], \n            new_player_name) \n        self.assertEqual( \n            response.data['results'][0]['gender'], \n            new_player_gender) \n\n```", "```py\npython manage.py test -v 2\n\n```", "```py\nEnsure we can create a new GameCategory and then retrieve it ... ok\nEnsure we can create a new GameCategory. ... ok\nEnsure we can filter a game category by name ... ok\nEnsure we can retrieve a game cagory ... ok\nEnsure we can update a single field for a game category ... ok\nEnsure we can create a new Player and then retrieve it ... ok\nEnsure we can create a new Player and we cannot create a duplicate. ... ok\nEnsure we can retrieve a player ... ok\nName                   Stmts   Miss  Cover\n------------------------------------------\ngames.py                   0      0   100%\ngames/admin.py             1      1     0%\ngames/apps.py              3      3     0%\ngames/models.py           36     34     6%\ngames/pagination.py        3      0   100%\ngames/permissions.py       6      3    50%\ngames/serializers.py      45      0   100%\ngames/urls.py              3      0   100%\ngames/views.py            91      2    98%\n------------------------------------------\nTOTAL                    188     43    77%\n----------------------------------------------------------------------\nRan 8 tests in 0.168s\nOK\nDestroying test database for alias 'default' ('test_games')...\n\n```", "```py\npip freeze > requirements.txt\n\n```", "```py\ncoverage==4.1\nDjango==1.9.7\ndjango-braces==1.9.0\ndjango-crispy-forms==1.6.0\ndjango-filter==0.13.0\ndjango-nose==1.4.4\ndjango-oauth-toolkit==0.10.0\ndjangorestframework==3.3.3\nnose==1.3.7\noauthlib==1.0.3\npsycopg2==2.6.2\nsix==1.10.0\n\n```", "```py\nDEBUG = True \n\n```", "```py\nDEBUG = False \n\n```"]