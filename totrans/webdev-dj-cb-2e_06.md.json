["```py\n# products/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nimport os\nfrom django.db import models\nfrom django.utils.timezone import now as timezone_now\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.core.urlresolvers import reverse\nfrom django.core.urlresolvers import NoReverseMatch\nfrom django.utils.encoding import python_2_unicode_compatible\nfrom utils.models import UrlMixin\n\ndef upload_to(instance, filename):\n    now = timezone_now()\n    filename_base, filename_ext = os.path.splitext(filename)\n    return \"products/%s/%s%s\" % (\n        instance.product.slug,\n        now.strftime(\"%Y%m%d%H%M%S\"),\n        filename_ext.lower(),\n    )\n\n@python_2_unicode_compatible\nclass Product(UrlMixin):\n    title = models.CharField(_(\"title\"), max_length=200)\n    slug = models.SlugField(_(\"slug\"), max_length=200)\n    description = models.TextField(_(\"description\"), blank=True)\n    price = models.DecimalField(_(\"price (€)\"), max_digits=8,\n        decimal_places=2, blank=True, null=True)\n\n    class Meta:\n        verbose_name = _(\"Product\")\n        verbose_name_plural = _(\"Products\")\n\n    def __str__(self):\n        return self.title\n\n    def get_url_path(self):\n        try:\n            return reverse(\"product_detail\", kwargs={\n                \"slug\": self.slug\n            })\n        except NoReverseMatch:\n            return \"\"\n\n@python_2_unicode_compatible\nclass ProductPhoto(models.Model):\n    product = models.ForeignKey(Product)\n    photo = models.ImageField(_(\"photo\"), upload_to=upload_to)\n\n    class Meta:\n        verbose_name = _(\"Photo\")\n        verbose_name_plural = _(\"Photos\")\n\n    def __str__(self):\n        return self.photo.name\n```", "```py\n# products/admin.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.contrib import admin\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.http import HttpResponse\n\nfrom .models import Product, ProductPhoto\n\nclass ProductPhotoInline(admin.StackedInline):\n    model = ProductPhoto\n    extra = 0\n\nclass ProductAdmin(admin.ModelAdmin):\n    list_display = [\"title\", \"get_photo\", \"price\"]\n    list_editable = [\"price\"]\n\n    fieldsets = (\n        (_(\"Product\"), {\n            \"fields\": (\"title\", \"slug\", \"description\", \"price\"),\n        }),\n    )\n    prepopulated_fields = {\"slug\": (\"title\",)}\n    inlines = [ProductPhotoInline]\n\n    def get_photo(self, obj):\n        project_photos = obj.productphoto_set.all()[:1]\n        if project_photos.count() > 0:\n            return \"\"\"<a href=\"%(product_url)s\" target=\"_blank\">\n                <img src=\"img/%(photo_url)s\" alt=\"\" width=\"100\" />\n            </a>\"\"\" % {\n                \"product_url\": obj.get_url_path(),\n                \"photo_url\":  project_photos[0].photo.url,\n            }\n        return \"\"\n    get_photo.short_description = _(\"Preview\")\n    get_photo.allow_tags = True\n\nadmin.site.register(Product, ProductAdmin)\n```", "```py\n(myproject_env)$ pip install xlwt\n```", "```py\n    # products/admin.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import xlwt\n    # ... other imports ...\n\n    def export_xls(modeladmin, request, queryset):\n        response = HttpResponse(\n            content_type=\"application/ms-excel\"\n        )\n        response[\"Content-Disposition\"] = \"attachment; \"\\\n            \"filename=products.xls\"\n        wb = xlwt.Workbook(encoding=\"utf-8\")\n        ws = wb.add_sheet(\"Products\")\n\n        row_num = 0\n\n        ### Print Title Row ###\n        columns = [\n            # column name, column width\n            (\"ID\", 2000),\n            (\"Title\", 6000),\n            (\"Description\", 8000),\n            (\"Price (€)\", 3000),\n        ]\n\n        header_style = xlwt.XFStyle()\n        header_style.font.bold = True\n\n        for col_num, (item, width) in enumerate(columns):\n            ws.write(row_num, col_num, item, header_style)\n            # set column width\n            ws.col(col_num).width = width\n\n        text_style = xlwt.XFStyle()\n        text_style.alignment.wrap = 1\n\n        price_style = xlwt.XFStyle()\n        price_style.num_format_str = \"0.00\"\n\n        styles = [\n            text_style, text_style, text_style,\n            price_style, text_style\n        ]\n\n        for obj in queryset.order_by(\"pk\"):\n            row_num += 1\n            project_photos = obj.productphoto_set.all()[:1]\n            url = \"\"\n            if project_photos:\n                url = \"http://{0}{1}\".format(\n                    request.META['HTTP_HOST'],\n                    project_photos[0].photo.url,\n                )\n            row = [\n                obj.pk,\n                obj.title,\n                obj.description,\n                obj.price,\n                url,\n            ]\n            for col_num, item in enumerate(row):\n                ws.write(\n                    row_num, col_num, item, styles[col_num]\n                )\n\n        wb.save(response)\n        return response\n\n    export_xls.short_description = _(\"Export XLS\")\n    ```", "```py\n    class ProductAdmin(admin.ModelAdmin):\n        # ...\n        actions = [export_xls]\n    ```", "```py\n    # products/admin.py\n    # -*- coding: UTF-8 -*-\n    # ... all previous imports go here ...\n    from django.db import models\n\n    class PhotoFilter(admin.SimpleListFilter):\n        # Human-readable title which will be displayed in the\n        # right admin sidebar just above the filter options.\n        title = _(\"photos\")\n\n        # Parameter for the filter that will be used in the\n        # URL query.\n        parameter_name = \"photos\"\n\n        def lookups(self, request, model_admin):\n            \"\"\"\n            Returns a list of tuples. The first element in each\n            tuple is the coded value for the option that will\n            appear in the URL query. The second element is the\n            human-readable name for the option that will appear\n            in the right sidebar.\n            \"\"\"\n            return (\n                (\"zero\", _(\"Has no photos\")),\n                (\"one\", _(\"Has one photo\")),\n                (\"many\", _(\"Has more than one photo\")),\n            )\n\n        def queryset(self, request, queryset):\n            \"\"\"\n            Returns the filtered queryset based on the value\n            provided in the query string and retrievable via\n            `self.value()`.\n            \"\"\"\n            qs = queryset.annotate(\n                num_photos=models.Count(\"productphoto\")\n            )\n            if self.value() == \"zero\":\n                qs = qs.filter(num_photos=0)\n            elif self.value() == \"one\":\n                qs = qs.filter(num_photos=1)\n            elif self.value() == \"many\":\n                qs = qs.filter(num_photos__gte=2)\n            return qs\n    ```", "```py\n    class ProductAdmin(admin.ModelAdmin):\n        # ...\n        list_filter = [PhotoFilter]\n    ```", "```py\n# custom_admin/admin.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin, GroupAdmin\nfrom django.contrib.auth.admin import User, Group\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.core.urlresolvers import reverse\nfrom django.contrib.contenttypes.models import ContentType\n\nclass UserAdminExtended(UserAdmin):\n    list_display = (\"username\", \"email\", \"first_name\",\n        \"last_name\", \"is_active\", \"is_staff\", \"date_joined\",\n        \"last_login\")\n    list_filter = (\"is_active\", \"is_staff\", \"is_superuser\",\n        \"date_joined\", \"last_login\")\n    ordering = (\"last_name\", \"first_name\", \"username\")\n    save_on_top = True\n\nclass GroupAdminExtended(GroupAdmin):\n    list_display = (\"__unicode__\", \"display_users\")\n    save_on_top = True\n\n    def display_users(self, obj):\n        links = []\n        for user in obj.user_set.all():\n            ct = ContentType.objects.get_for_model(user)\n            url = reverse(\n                \"admin:{}_{}_change\".format(\n                    ct.app_label, ct.model\n                ),\n                args=(user.id,)\n            )\n            links.append(\n                \"\"\"<a href=\"{}\" target=\"_blank\">{}</a>\"\"\".format(\n                    url,\n                    \"{} {}\".format(\n                        user.first_name, user.last_name\n                    ).strip() or user.username,\n                )\n            )\n        return u\"<br />\".join(links)\n    display_users.allow_tags = True\n    display_users.short_description = _(\"Users\")\n\nadmin.site.unregister(User)\nadmin.site.unregister(Group)\nadmin.site.register(User, UserAdminExtended)\nadmin.site.register(Group, GroupAdminExtended)\n```", "```py\n# locations/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import python_2_unicode_compatible\n\nCOUNTRY_CHOICES = (\n    (\"UK\", _(\"United Kingdom\")),\n    (\"DE\", _(\"Germany\")),\n    (\"FR\", _(\"France\")),\n    (\"LT\", _(\"Lithuania\")),\n)\n\n@python_2_unicode_compatible\nclass Location(models.Model):\n    title = models.CharField(_(\"title\"), max_length=255,\n        unique=True)\n    description = models.TextField(_(\"description\"), blank=True)\n    street_address = models.CharField(_(\"street address\"),\n        max_length=255, blank=True)\n    street_address2 = models.CharField(\n        _(\"street address (2nd line)\"), max_length=255,\n        blank=True)\n    postal_code = models.CharField(_(\"postal code\"),\n        max_length=10, blank=True)\n    city = models.CharField(_(\"city\"), max_length=255, blank=True)\n    country = models.CharField(_(\"country\"), max_length=2,\n        blank=True, choices=COUNTRY_CHOICES)\n    latitude = models.FloatField(_(\"latitude\"), blank=True,\n        null=True,\n        help_text=_(\"Latitude (Lat.) is the angle between \"\n            \"any point and the equator \"\n            \"(north pole is at 90; south pole is at -90).\"))\n    longitude = models.FloatField(_(\"longitude\"), blank=True,\n        null=True,\n        help_text=_(\"Longitude (Long.) is the angle \"\n            \"east or west of \"\n            \"an arbitrary point on Earth from Greenwich (UK), \"\n            \"which is the international zero-longitude point \"\n            \"(longitude=0 degrees). \"\n            \"The anti-meridian of Greenwich is both 180 \"\n            \"(direction to east) and -180 (direction to west).\"))\n    class Meta:\n        verbose_name = _(\"Location\")\n        verbose_name_plural = _(\"Locations\")\n\n    def __str__(self):\n        return self.title\n```", "```py\n    # locations/admin.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.utils.translation import ugettext_lazy as _\n    from django.contrib import admin\n    from django.template.loader import render_to_string\n    from .models import Location\n\n    class LocationAdmin(admin.ModelAdmin):\n        save_on_top = True\n        list_display = (\"title\", \"street_address\",\n            \"description\")\n        search_fields = (\"title\", \"street_address\",\n            \"description\")\n\n        def get_fieldsets(self, request, obj=None):\n            map_html = render_to_string(\n                \"admin/includes/map.html\"\n            )\n            fieldsets = [\n                (_(\"Main Data\"), {\"fields\": (\"title\",\n                    \"description\")}),\n                (_(\"Address\"), {\"fields\": (\"street_address\",\n                    \"street_address2\", \"postal_code\", \"city\",\n                    \"country\", \"latitude\", \"longitude\")}),\n                (_(\"Map\"), {\"description\": map_html,\n                    \"fields\": []}),\n            ]\n            return fieldsets\n\n    admin.site.register(Location, LocationAdmin)\n    ```", "```py\n    {# myproject/templates/admin/locations/location/change_form.html #}\n    {% extends \"admin/change_form.html\" %}\n    {% load i18n admin_static admin_modify %}\n    {% load url from future %}\n    {% load admin_urls %}\n\n    {% block extrastyle %}\n        {{ block.super }}\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ STATIC_URL }}site/css/locating.css\" />\n    {% endblock %}\n\n    {% block field_sets %}\n        {% for fieldset in adminform %}\n            {% include \"admin/includes/fieldset.html\" %}\n        {% endfor %}\n        <script type=\"text/javascript\" src=\"img/js?language=en\"></script>\n        <script type=\"text/javascript\" src=\"img/locating.js\"></script>\n    {% endblock %}\n    ```", "```py\n    {# myproject/templates/admin/includes/map.html #}\n    {% load i18n %}\n    <div class=\"form-row\">\n        <div id=\"map_canvas\">\n            <!-- THE GMAPS WILL BE INSERTED HERE\n            DYNAMICALLY -->\n        </div>\n        <ul id=\"map_locations\"></ul>\n        <div class=\"buttonHolder\">\n            <button id=\"locate_address\" type=\"button\"\n            class=\"secondaryAction\">\n                {% trans \"Locate address\" %}\n            </button>\n            <button id=\"remove_geo\" type=\"button\"\n            class=\"secondaryAction\">\n                {% trans \"Remove from map\" %}\n            </button>\n        </div>\n    </div>\n    ```", "```py\n    /* site_static/site/css/locating.css */\n    #map_canvas {\n        width:722px;\n        height:300px;\n        margin-bottom: 8px;\n    }\n    #map_locations {\n        width:722px;\n        margin: 0;\n        padding: 0;\n        margin-bottom: 8px;\n    }\n    #map_locations li {\n        border-bottom: 1px solid #ccc;\n        list-style: none;\n    }\n    #map_locations li:first-child {\n        border-top: 1px solid #ccc;\n    }\n    .buttonHolder {\n        width:722px;\n    }\n    #remove_geo {\n        float: right;\n    }\n    ```", "```py\n    // site_static/site/js/locating.js\n    (function ($, undefined) {\n        var gMap;\n        var gettext = window.gettext || function (val) {\n            return val;\n        };\n        var gMarker;\n\n        // ... this is where all the further JavaScript\n        // functions go ...\n\n    }(django.jQuery));\n    ```", "```py\n    function getAddress4search() {\n        var address = [];\n        var sStreetAddress2 = $('#id_street_address2').val();\n        if (sStreetAddress2) {\n            sStreetAddress2 = ' ' + sStreetAddress2;\n        }\n        address.push($('#id_street_address').val() + sStreetAddress2);\n        address.push($('#id_city').val());\n        address.push($('#id_country').val());\n        address.push($('#id_postal_code').val());\n        return address.join(', ');\n    }\n    ```", "```py\n    function updateMarker(lat, lng) {\n        var point = new google.maps.LatLng(lat, lng);\n        if (gMarker) {\n            gMarker.setPosition(point);\n        } else {\n            gMarker = new google.maps.Marker({\n                position: point,\n                map: gMap\n            });\n        }\n        gMap.panTo(point, 15);\n        gMarker.setDraggable(true);\n        google.maps.event.addListener(gMarker, 'dragend', function() {\n            var point = gMarker.getPosition();\n            updateLatitudeAndLongitude(point.lat(), point.lng());\n        });\n    }\n    ```", "```py\n    function updateLatitudeAndLongitude(lat, lng) {\n        lat = Math.round(lat * 1000000) / 1000000;\n        lng = Math.round(lng * 1000000) / 1000000;\n        $('#id_latitude').val(lat);\n        $('#id_longitude').val(lng);\n    }\n    ```", "```py\n    function autocompleteAddress(results) {\n        var $foundLocations = $('#map_locations').html('');\n        var i, len = results.length;\n\n        // console.log(JSON.stringify(results, null, 4));\n\n        if (results) {\n            if (len > 1) {\n                for (i=0; i<len; i++) {\n                    $('<a href=\"\">' + results[i].formatted_address + '</a>').data('gmap_index', i).click(function (e) {\n                        e.preventDefault();\n                        var result = results[$(this).data('gmap_index')];\n                        updateAddressFields(result.address_components);\n                        var point = result.geometry.location;\n                        updateLatitudeAndLongitude(point.lat(), point.lng());\n                        updateMarker(point.lat(), point.lng());\n                        $foundLocations.hide();\n                    }).appendTo($('<li>').appendTo($foundLocations));\n                }\n                $('<a href=\"\">' + gettext('None of the listed') + '</a>').click(function (e) {\n                    e.preventDefault();\n                    $foundLocations.hide();\n                }).appendTo($('<li>').appendTo($foundLocations));\n                $foundLocations.show();\n            } else {\n                $foundLocations.hide();\n                var result = results[0];\n                updateAddressFields(result.address_components);\n                var point = result.geometry.location;\n                updateLatitudeAndLongitude(point.lat(), point.lng());\n                updateMarker(point.lat(), point.lng());\n            }\n        }\n    }\n    ```", "```py\n    function updateAddressFields(addressComponents) {\n        var i, len=addressComponents.length;\n        var streetName, streetNumber;\n        for (i=0; i<len; i++) {\n            var obj = addressComponents[i];\n            var obj_type = obj.types[0];\n            if (obj_type == 'locality') {\n                $('#id_city').val(obj.long_name);\n            }\n            if (obj_type == 'street_number') {\n                streetNumber = obj.long_name;\n            }\n            if (obj_type == 'route') {\n                streetName = obj.long_name;\n            }\n            if (obj_type == 'postal_code') {\n                $('#id_postal_code').val(obj.long_name);\n            }\n            if (obj_type == 'country') {\n                $('#id_country').val(obj.short_name);\n            }\n        }\n        if (streetName) {\n            var streetAddress = streetName;\n            if (streetNumber) {\n                streetAddress += ' ' + streetNumber;\n            }\n            $('#id_street_address').val(streetAddress);\n        }\n    }\n    ```", "```py\n    $(function (){\n        $('#locate_address').click(function() {\n            var oGeocoder = new google.maps.Geocoder();\n            oGeocoder.geocode(\n                {address: getAddress4search()},\n                function (results, status) {\n                    if (status === google.maps.GeocoderStatus.OK) {\n                        autocompleteAddress(results);\n                    } else {\n                        autocompleteAddress(false);\n                    }\n                }\n            );\n        });\n\n        $('#remove_geo').click(function() {\n            $('#id_latitude').val('');\n            $('#id_longitude').val('');\n            gMarker.setMap(null);\n            gMarker = null;\n        });\n\n        gMap = new google.maps.Map($('#map_canvas').get(0), {\n            scrollwheel: false,\n            zoom: 16,\n            center: new google.maps.LatLng(51.511214, -0.119824),\n            disableDoubleClickZoom: true\n        });\n        google.maps.event.addListener(gMap, 'dblclick', function(event) {\n            var lat = event.latLng.lat();\n            var lng = event.latLng.lng();\n            updateLatitudeAndLongitude(lat, lng);\n            updateMarker(lat, lng);\n        });\n        $('#map_locations').hide();\n\n        var $lat = $('#id_latitude');\n        var $lng = $('#id_longitude');\n        if ($lat.val() && $lng.val()) {\n            updateMarker($lat.val(), $lng.val());\n        }\n    });\n    ```", "```py\nconsole.log(JSON.stringify(results, null, 4));\n```"]