["```py\n$ bin/test\nRunning tests at level 1\nRunning todo.FunctionalLayer tests:\nSet up\nin 12.319 seconds.\nRunning:\n...2009-09-30 15:00:47,490 INFO sqlalchemy.engine.base.Engine.0x...782c PRAGMA table_info(\"users\")\n2009-09-30 15:00:47,490 INFO sqlalchemy.engine.base.Engine.0x...782c ()\nRan 3 tests with 0 failures and 0 errors in 0.465 seconds.\nTearing down left over layers:\nTear down todo.FunctionalLayer ... not supported \n\n```", "```py\nDo a Python test on the app.\n:unittestt:\n\n```", "```py\n<configure\n\ni18n_domain=\"todo\"\npackage=\"todo\"\n>\n<include package=\"todo\" />\n<include package=\"todo_plus\" />\n<!-- Typical functional testing security setup -->\n<securityPolicy\ncomponent=\"zope.securitypolicy.zopepolicy.ZopeSecurityPolicy\"\n/>\n<unauthenticatedPrincipal\nid=\"zope.anybody\"\ntitle=\"Unauthenticated User\"\n/>\n<grant\npermission=\"zope.View\"\nprincipal=\"zope.anybody\"\n/>\n<principal\nid=\"zope.mgr\"\ntitle=\"Manager\"\nlogin=\"mgr\"\npassword=\"mgrpw\"\n/>\n<role id=\"zope.Manager\" title=\"Site Manager\" />\n<grantAll role=\"zope.Manager\" />\n<grant role=\"zope.Manager\" principal=\"zope.mgr\" />\n\n```", "```py\nimport os.path\nimport z3c.testsetup\nimport todo\nfrom zope.app.testing.functional import ZCMLLayer\nftesting_zcml = os.path.join(\nos.path.dirname(todo.__file__), 'ftesting.zcml')\nFunctionalLayer = ZCMLLayer(ftesting_zcml, __name__, 'FunctionalLayer', allow_teardown=True)\ntest_suite = z3c.testsetup.register_all_tests('todo')\n\n```", "```py\nDo a functional doctest test on the app.\n========================================\n:doctest:\n:layer: todo.tests.FunctionalLayer\nLet's first create an instance of Todo at the top level:\n>>> from todo.app import Todo\n>>> root = getRootFolder()\n>>> root['app'] = Todo()\nRun tests in the testbrowser\n----------------------------\nThe zope.testbrowser.browser module exposes a Browser class that\nsimulates a web browser similar to Mozilla Firefox or IE. We use that to test how our application behaves in a browser. For more\ninformation, see http://pypi.python.org/pypi/zope.testbrowser.\nCreate a browser and visit the instance you just created:\n>>> from zope.testbrowser.testing import Browser\n>>> browser = Browser()\n>>> browser.open('http://localhost/app')\nCheck some basic information about the page you visit:\n>>> browser.url\n'http://localhost/app/@@login?camefrom=%2Fapp%2F%40%40index'\n>>> browser.headers.get('Status').upper()\n'200 OK'\n\n```", "```py\nSince we haven't logged in, we can't see the application. The login page appears:\n>>> 'Username' in browser.contents\nTrue\n>>> 'Password' in browser.contents\nTrue\n\n```", "```py\n>>> browser.addHeader('Authorization', 'Basic mgr:mgrpw')\n>>> browser.open('http://localhost/app')\n>>> 'Logged in as Manager' in browser.contents\nTrue\n\n```", "```py\n>>> browser.getLink('Create a new project').click()\n>>> browser.getControl(name='form.title').value='a project'\n>>> browser.getControl(name='form.description').value='The description.'\n>>> browser.getControl('Add project').click()\n>>> browser.url\n'http://localhost/app/0'\n>>> 'Create new list' in browser.contents\nTrue\n\n```", "```py\n>>> browser.getControl(name='title').value='a list'\n>>> browser.getControl(name='description').value='The list description.'\n>>> browser.getControl(name='new_list').click()\n>>> 'New item' in browser.contents\nTrue\n\n```", "```py\n$ bin/testRunning tests at level 1\nRunning todo.FunctionalLayer tests:\nSet up\nin 3.087 seconds.\nRunning:\n.......2009-09-30 21:35:44,585 INFO sqlalchemy.engine.base.Engine.0x...69ec PRAGMA table_info(\"users\")\n2009-09-30 21:35:44,585 INFO sqlalchemy.engine.base.Engine.0x...69ec ()\nRan 7 tests with 0 failures and 0 errors in 0.428 seconds.\nTearing down left over layers:\nTear down todo.FunctionalLayer ... not supported \n\n```", "```py\n>>> browser.open('http://localhost/invalid')\nTraceback (most recent call last):\n...\nHTTPError: HTTP Error 404: Not Found\n\n```", "```py\n>>> browser.handleErrors = False\n>>> browser.open('http://localhost/invalid')\nTraceback (most recent call last):\n...\nNotFound: Object: <zope.site.folder.Folder object at ...>,\nname: u'invalid'\n\n```", "```py\n\"\"\"\nDo a Python test on the app.\n:unittest:\n\"\"\"\nimport unittest\nfrom todo.app import Todo\nclass InitializationTest(unittest.TestCase):\ntodoapp = None\ndef setUp(self):\nself.todoapp = Todo()\ndef test_title_set(self):\nself.assertEqual(self.todoapp.title,u'To-do list manager')\ndef test_next_id_set(self):\nself.assertEqual(self.todoapp.next_id,0)\n\n```", "```py\n$ bin/test\nRunning tests at level 1\nRunning todo.FunctionalLayer tests:\nSet up\nin 2.691 seconds.\nRunning:\n.......2009-09-30 22:00:50,703 INFO sqlalchemy.engine.base.Engine.0x...684c PRAGMA table_info(\"users\")\n2009-09-30 22:00:50,703 INFO sqlalchemy.engine.base.Engine.0x...684c ()\nRan 7 tests with 0 failures and 0 errors in 0.420 seconds.\nRunning zope.testing.testrunner.layer.UnitTests tests:\nTear down todo.FunctionalLayer ... not supported\nRunning in a subprocess.\nSet up zope.testing.testrunner.layer.UnitTests in 0.000 seconds.\nRan 2 tests with 0 failures and 0 errors in 0.000 seconds.\nTear down zope.testing.testrunner.layer.UnitTests in 0.000 seconds.\nTotal: 9 tests, 0 failures, 0 errors in 5.795 seconds \n\n```", "```py\nimport pdb; pdb.set_trace()\n\n```", "```py\n@grok.action('Add project')\ndef add(self,**data):\nimport pdb; pdb.set_trace()\nproject = Project()\nproject.creator = self.request.principal.title\nproject.creation_date = datetime.datetime.now()\nproject.modification_date = datetime.datetime.now()\nself.applyData(project,**data)\nid = str(self.context.next_id)\nself.context.next_id = self.context.next_id+1\nself.context[id] = project\nreturn self.redirect(self.url(self.context[id]))\n\n```", "```py\n> /home/cguardia/work/virtual/grok1/todo/src/todo/app.py(109)add()\n-> project = Project()\n(Pdb) | \n\n```", "```py\n(Pdb) n\n> /home/cguardia/work/virtual/grok1/todo/src/todo/app.py(110)add()\n-> project.creator = self.request.principal.title\n(Pdb) \n\n```", "```py\n(Pdb) h\nDocumented commands (type help <topic>):\n========================================\nEOF break condition disable help list q step w\na bt cont down ignore n quit tbreak whatis\nalias c continue enable j next r u where\nargs cl d exit jump p return unalias\nb clear debug h l pp s up\nMiscellaneous help topics:\n==========================\nexec pdb\nUndocumented commands:\n======================\nretval rv\n(Pdb) \n\n```", "```py\n(Pdb) list\n105\n106 @grok.action('Add project')\n107 def add(self,**data):\n108 import pdb; pdb.set_trace()\n109 project = Project()\n110 -> project.creator = self.request.principal.title\n111 project.creation_date = datetime.datetime.now()\n112 project.modification_date = datetime.datetime.now()\n113 self.applyData(project,**data)\n114 id = str(self.context.next_id)\n115 self.context.next_id = self.context.next_id+1\n(Pdb) \n\n```", "```py\n(Pdb) project\n<todo.app.Project object at 0xa0ef72c>\n(Pdb) data\n{'kind': 'personal', 'description': u'Nothing', 'title': u'Project about nothing'}\n(Pdb) \n\n```", "```py\nproject = Project(**data)\n\n```", "```py\n$ bin/paster serve parts/etc/deploy.ini \n\n```", "```py\n$ bin/paster serve parts/etc/debug.ini \n\n```", "```py\n[filter-app:main]\n# Change the last part from 'ajax' to 'pdb' for a post-mortem debugger\n# on the console:\nuse = egg:z3c.evalexception#pdb # <--- change here to pdb\nnext = zope\n\n```"]