["```py\nmy_dict={\"Basant\" : \"9829012345\", \"Ram\": \"9829012346\", \"Shyam\": \"9829012347\", \"Sita\": \"9829012348\"}\nprint(\"All keys and values\")\nfor x,y in my_dict.items():\n    print(x, \":\" , y)       #prints keys and values\nmy_dict[\"Ram\"] \n```", "```py\nBasant : 9829012345\nRam : 9829012346\nShyam : 9829012347\nSita : 9829012348\n'9829012346' \n```", "```py\nsum(map(ord, 'hello world')) \n```", "```py\n1116 \n```", "```py\n'world hello' string:\n```", "```py\nsum(map(ord, 'world hello')) \n```", "```py\n1116 \n```", "```py\nsum(map(ord, 'gello xorld')) \n```", "```py\n1116 \n```", "```py\ndef myhash(s): \n       mult = 1 \n       hv = 0 \n       for ch in s: \n           hv += mult * ord(ch) \n           mult += 1 \n       return hv \n```", "```py\nfor item in ('hello world', 'world hello', 'gello xorld'): \n        print(\"{}: {}\".format(item, myhash(item))) \n```", "```py\nhello world: 6736\nworld hello: 6616\ngello xorld: 6742 \n```", "```py\nfor item in ('ad', 'ga'): \n        print(\"{}: {}\".format(item, myhash(item))) \n```", "```py\nad: 297\nga: 297 \n```", "```py\nclass HashItem: \n    def __init__(self, key, value): \n        self.key = key \n        self.value = value \n```", "```py\nclass HashTable: \n     def __init__(self): \n         self.size = 256 \n         self.slots = [None for i in range(self.size)] \n         self.count = 0 \n```", "```py\ndef _hash(self, key): \n      mult = 1 \n      hv = 0 \n      for ch in key: \n          hv += mult * ord(ch) \n          mult += 1 \n      return hv % self.size \n```", "```py\ndef put(self, key, value): \n    item = HashItem(key, value) \n    h = self._hash(key)\n    while self.slots[h] != None:\n        if self.slots[h].key == key:\n            break\n        h = (h + 1) % self.size\n    if self.slots[h] == None:\n        self.count += 1\n    self.slots[h] = item\n    self.check_growth() \n```", "```py\nwhile self.slots[h] != None: \n      if self.slots[h].key == key: \n          break \n      h = (h + 1) % self.size \n```", "```py\nif self.slots[h] is None: \n     self.count += 1 \nself.slots[h] = item \nself.check_growth() \n```", "```py\nclass HashTable: \n     def __init__(self): \n         self.size = 256 \n         self.slots = [None for i in range(self.size)] \n         self.count = 0 \n         self.MAXLOADFACTOR = 0.65 \n```", "```py\n def check_growth(self):\n        loadfactor = self.count / self.size \n        if loadfactor > self.MAXLOADFACTOR:\n            print(\"Load factor before growing the hash table\", self.count / self.size )\n            self.growth()\n            print(\"Load factor after growing the hash table\", self.count / self.size ) \n```", "```py\n def growth(self):\n        New_Hash_Table = HashTable()\n        New_Hash_Table.size = 2 * self.size\n        New_Hash_Table.slots = [None for i in range(New_Hash_Table.size)]\n\n        for i in range(self.size):\n             if self.slots[i] != None:\n                New_Hash_Table.put(self.slots[i].key, self.slots[i].value)\n\n        self.size = New_Hash_Table.size\n        self.slots = New_Hash_Table.slots \n```", "```py\nht = HashTable() \nht.put(\"good\", \"eggs\") \nht.put(\"better\", \"ham\") \nht.put(\"best\", \"spam\") \nht.put(\"ad\", \"do not\") \nht.put(\"ga\", \"collide\") \nht.put(\"awd\", \"do not\") \nht.put(\"add\", \"do not\") \nht.checkGrow() \n```", "```py\nLoad factor before growing the hash table 0.7\nLoad factor after growing the hash table 0.35 \n```", "```py\ndef get(self, key): \n    h = self._hash(key)    # computed hash for the given key \n    while self.slots[h] != None:\n        if self.slots[h].key == key: \n            return self.slots[h].value \n        h = (h+ 1) % self.size \n    return None \n```", "```py\nht = HashTable()\nht.put(\"good\", \"eggs\")\nht.put(\"better\", \"ham\")\nht.put(\"best\", \"spam\")\nht.put(\"ad\", \"do not\")\nht.put(\"ga\", \"collide\")\nfor key in (\"good\", \"better\", \"best\", \"worst\", \"ad\", \"ga\"):\n        v = ht.get(key)\n        print(v) \n```", "```py\neggs\nham\nspam\nnone\ndo not\ncollide \n```", "```py\ndef __setitem__(self, key, value):\n     self.put(key, value)\ndef __getitem__(self, key):\n     return self.get(key) \n```", "```py\nht = HashTable()\nht[\"good\"] = \"eggs\"\nht[\"better\"] = \"ham\"\nht[\"best\"] = \"spam\"\nht[\"ad\"] = \"do not\"\nht[\"ga\"] = \"collide\"\nfor key in (\"good\", \"better\", \"best\", \"worst\", \"ad\", \"ga\"):\n     v = ht[key]\n     print(v)\nprint(\"The number of elements is: {}\".format(ht.count)) \n```", "```py\neggs\nham\nspam\nnone\ndo not\ncollide\nThe number of elements is: 5 \n```", "```py\nnew-hash(key) = (old-hash-value + i²)\nHere, hash-value = key mod table_size \n```", "```py\n def get_quadratic(self, key):\n        h = self._hash(key)\n `j = 1`\n        while self.slots[h] != None:\n            if self.slots[h].key == key:\n                return self.slots[h].value\n `h = (h+ j*j) % self.size`\n `j = j + 1`\n        return None\n    def put_quadratic(self, key, value):\n        item = HashItem(key, value)\n        h = self._hash(key)\n `j = 1`\n        while self.slots[h] != None:\n            if self.slots[h].key == key:\n                break\n `h = (h + j*j) % self.size`\n `j = j+1`\n        if self.slots[h] == None:\n            self.count += 1\n        self.slots[h] = item\n        self.check_growth() \n```", "```py\nht = HashTable() \nht.put_quadratic(\"good\", \"eggs\") \nht.put_quadratic(\"ad\", \"packt\") \nht.put_quadratic(\"ga\", \"books\") \n\nv = ht.get_quadratic(\"ga\") \nprint(v) \n```", "```py\nbooks \n```", "```py\n(h¹(key)+i*h²(key))mod table_size\nh¹(key) = key mod table_size \n```", "```py\nh²(key) = prime_number - (key mod prime_number) \n```", "```py\n def h2(self, key):\n        mult = 1\n        hv = 0\n        for ch in key:\n            hv += mult * ord(ch)\n            mult += 1\n        return hv \n```", "```py\nclass HashTable:\n    def __init__(self):\n        self.size = 256\n        self.slots = [None for i in range(self.size)]\n        self.count = 0\n        self.MAXLOADFACTOR = 0.65\n        self.prime_num = 5 \n```", "```py\n def put_double_hashing(self, key, value):\n        item = HashItem(key, value)\n        h = self._hash(key)\n        j = 1    \n        while self.slots[h] != None:\n            if self.slots[h].key == key:\n                break\n `h = (h + j * (self.prime_num - (self.h2(key) % self.prime_num))) % self.size`\n `j = j+1`\n        if self.slots[h] == None:\n            self.count += 1\n        self.slots[h] = item\n        self.check_growth()\n\n    def get_double_hashing(self, key):\n        h = self._hash(key)\n        j = 1\n        while self.slots[h] != None:\n            if self.slots[h].key == key:\n                return self.slots[h].value\n `h = (h + j * (self.prime_num - (self.h2(key) % self.prime_num))) % self.size`\n `j = j + 1`\n        return None \n```", "```py\nht = HashTable() \nht.put_doubleHashing(\"good\", \"eggs\") \nht.put_doubleHashing(\"better\", \"spam\") \nht.put_doubleHashing(\"best\", \"cool\") \nht.put_doubleHashing(\"ad\", \"donot\") \nht.put_doubleHashing(\"ga\", \"collide\") \nht.put_doubleHashing(\"awd\", \"hello\") \nht.put_doubleHashing(\"addition\", \"ok\") \n\nfor key in (\"good\", \"better\", \"best\", \"worst\", \"ad\", \"ga\"): \n        v = ht.get_doubleHashing(key) \n        print(v) \nprint(\"The number of elements is: {}\".format(ht.count)) \n```", "```py\neggs\nspam\ncool\nnone\ndonot\ncollide\nThe number of elements is: 7 \n```", "```py\nclass Node:\n    def __init__(self, key=None, value=None):\n        self.key = key\n        self.value = value\n        self.next = None \n```", "```py\nclass SinglyLinkedList:\n    def __init__ (self):\n        self.tail = None\n        self.head = None\n\n    def append(self, key, value):\n        node = Node(key, value)\n        if self.tail:\n            self.tail.next = node \n            self.tail = node        else:\n            self.head = node \n            self.tail = node \n```", "```py\n def traverse(self):\n        current = self.head\n        while current:\n            print(\"\\\"\", current.key, \"--\", current.value, \"\\\"\")\n            current = current.next \n```", "```py\n def search(self, key):\n        current = self.head\n        while current:\n            if current.key == key: \n                print(\"\\\"Record found:\", current.key, \"-\", current.value, \"\\\"\")\n                return True\n            current = current.next\n        return False \n```", "```py\n class HashTableChaining:\n    def __init__(self):\n        self.size = 6\n        self.slots = [None for i in range(self.size)]\n        for x in range(self.size) :\n            self.slots[x] = SinglyLinkedList() \n```", "```py\n def _hash(self, key):\n        mult = 1\n        hv = 0\n        for ch in key:\n            hv += mult * ord(ch)\n            mult += 1\n        return hv % self.size \n```", "```py\n def put(self, key, value):\n        node = Node(key, value)        \n        h = self._hash(key) \n        self.slots[h].append(key, value) \n```", "```py\n def get(self, key):\n        h = self._hash(key)\n        v = self.slots[h].search(key) \n```", "```py\n def printHashTable(self) :\n        print(\"Hash table is :- \\n\")\n        print(\"Index \\t\\tValues\\n\")\n        for x in range(self.size) :\n            print(x,end=\"\\t\\n\")\n            self.slots[x].traverse() \n```", "```py\nht = HashTableChaining() \nht.put(\"good\", \"eggs\") \nht.put(\"better\", \"ham\") \nht.put(\"best\", \"spam\") \nht.put(\"ad\", \"do not\") \nht.put(\"ga\", \"collide\") \nht.put(\"awd\", \"do not\") \n\nht.printHashTable() \n```", "```py\nHash table is :- \nIndex              Values\n0\n1\n2\n\" good - eggs \"\n3\n\" better - ham \"\n\" ad - do not \"\n\" ga - collide \"\n4\n5\n\" best - spam \"\n\" awd - do not \" \n```", "```py\n name = \"Joe\"\n    age = 27 \n```"]