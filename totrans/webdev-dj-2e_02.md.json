["```py\ninsert into book values ('The Sparrow Warrior', 'Super Hero   Publications', 'Patric Javagal');\n```", "```py\ninsert into book values ('Ninja Warrior', 'East Hill Publications',   'Edward Smith');\ninsert into book values ('The European History', 'Northside   Publications', 'Eric Robbins');\n```", "```py\nselect title, publisher, author from book;\n```", "```py\nselect * from book;\n```", "```py\nselect author from book where title=\"The Sparrow Warrior\";\n```", "```py\nupdate book set publisher = 'Northside Publications' where   title='The Sparrow Warrior';\n```", "```py\ndelete from book where title='The Sparrow Warrior';\n```", "```py\nDATABASES = {\\\n             'default': {\\\n                         'ENGINE': 'django.db.backends.sqlite3',\\\n                         'NAME': os.path.join\\\n                                 (BASE_DIR, 'db.sqlite3'),}}\n```", "```py\nDATABASES = {\\\n             'default': {\\\n                         'ENGINE': 'django.db\\\n                                    .backends.postgresql',\\\n                         'NAME': 'bookr',\\\n                         'USER': <username>,\\\n                         'PASSWORD': <password>,\\\n                         'HOST': <host-IP-address>,\\\n                         'PORT': '5432',}}\n```", "```py\nINSTALLED_APPS = ['django.contrib.admin',\\\n                  'django.contrib.auth',\\\n                  'django.contrib.contenttypes',\\\n                  'django.contrib.sessions',\\\n                  'django.contrib.messages',\\\n                  'django.contrib.staticfiles',]\n```", "```py\npython manage.py migrate\n```", "```py\nfrom django.db import models\nclass Publisher(models.Model):\n    \"\"\"A company that publishes books.\"\"\"\n    name = models.CharField\\\n           (max_length=50, \\\n            help_text=\"The name of the Publisher.\")\n    website = models.URLField\\\n              (help_text=\"The Publisher's website.\")\n    email = models.EmailField\\\n            (help_text=\"The Publisher's email address.\")\n```", "```py\npython manage.py makemigrations reviews\n```", "```py\nMigrations for 'reviews':\n  reviews/migrations/0001_initial.py\n    - Create model Publisher\n```", "```py\npython manage.py showmigrations\n```", "```py\nadmin\n [X] 0001_initial\n [X] 0002_logentry_remove_auto_add\n [X] 0003_logentry_add_action_flag_choices\nauth\n [X] 0001_initial\n [X] 0002_alter_permission_name_max_length\n [X] 0003_alter_user_email_max_length\n [X] 0004_alter_user_username_opts\n [X] 0005_alter_user_last_login_null\n [X] 0006_require_contenttypes_0002\n [X] 0007_alter_validators_add_error_messages\n [X] 0008_alter_user_username_max_length\n [X] 0009_alter_user_last_name_max_length\n [X] 0010_alter_group_name_max_length\n [X] 0011_update_proxy_permissions\ncontenttypes\n [X] 0001_initial\n [X] 0002_remove_content_type_name\nreviews\n [ ] 0001_initial\nsessions\n [X] 0001_initial\n```", "```py\npython manage.py sqlmigrate reviews 0001_initial \n```", "```py\nBEGIN;\n--\n-- Create model Publisher\n--\nCREATE TABLE \"reviews_publisher\" (\"id\" integer \\\n    NOT NULL PRIMARY KEY AUTOINCREMENT, \"name\" \\\n    varchar(50) NOT NULL, \"website\" varchar(200) \\\n    NOT NULL, \"email\" varchar(254) NOT NULL);\nCOMMIT;\n```", "```py\npython manage.py migrate reviews\n```", "```py\nOperations to perform:\n    Apply all migrations: reviews\nRunning migrations:\n    Applying reviews.0001_initial... OK\n```", "```py\nclass Book(models.Model):\n    \"\"\"A published book.\"\"\"\n    title = models.CharField\\\n            (max_length=70, \\\n             help_text=\"The title of the book.\")\n    publication_date = models.DateField\\\n                       (verbose_name=\\\n                        \"Date the book was published.\")\n    isbn = models.CharField\\\n           (max_length=20, \\\n            verbose_name=\"ISBN number of the book.\")\nclass Contributor(models.Model):\n\"\"\"\nA contributor to a Book, e.g. author, editor, \\\nco-author.\n\"\"\"\n  first_names = models.CharField\\\n                (max_length=50, \\\n                 help_text=\\\n                 \"The contributor's first name or names.\")\n    last_names = models.CharField\\\n                 (max_length=50, \\\n                  help_text=\\\n                  \"The contributor's last name or names.\")\n    email = models.EmailField\\\n            (help_text=\"The contact email for the contributor.\")\n```", "```py\nclass Book(models.Model):\n    \"\"\"A published book.\"\"\"\n    title = models.CharField\\\n            (max_length=70, \\\n             help_text=\"The title of the book.\")\n    publication_date = models.DateField\\\n                       (verbose_name=\\\n                        \"Date the book was published.\")\n    isbn = models.CharField\\\n           (max_length=20, \\\n            verbose_name=\"ISBN number of the book.\")\n    publisher = models.ForeignKey\\\n                (Publisher, on_delete=models.CASCADE)\n```", "```py\nclass Book(models.Model):\n    \"\"\"A published book.\"\"\"\n    title = models.CharField\\\n            (max_length=70, \\\n             help_text=\"The title of the book.\")\n    publication_date = models.DateField\\\n                       (verbose_name=\\\n                        \"Date the book was published.\")\n    isbn = models.CharField\\\n           (max_length=20, \\\n            verbose_name=\"ISBN number of the book.\")\n    publisher = models.ForeignKey\\\n                (Publisher, on_delete=models.CASCADE)\n    contributors = models.ManyToManyField\\\n                   ('Contributor', through=\"BookContributor\")\n```", "```py\nclass BookContributor(models.Model):\n    class ContributionRole(models.TextChoices):\n        AUTHOR = \"AUTHOR\", \"Author\"\n        CO_AUTHOR = \"CO_AUTHOR\", \"Co-Author\"\n        EDITOR = \"EDITOR\", \"Editor\"\n    book = models.ForeignKey\\\n           (Book, on_delete=models.CASCADE)\n    contributor = models.ForeignKey\\\n                  (Contributor, \\\n                   on_delete=models.CASCADE)\n    role = models.CharField\\\n           (verbose_name=\\\n            \"The role this contributor had in the book.\", \\\n            choices=ContributionRole.choices, max_length=20)\n```", "```py\nclass DriverLicence(models.Model):\n    person = models.OneToOneField\\\n             (Person, on_delete=models.CASCADE)\n    licence_number = models.CharField(max_length=50)\n```", "```py\nfrom django.contrib import auth\nclass Review(models.Model):\n    content = models.TextField\\\n              (help_text=\"The Review text.\")\n    rating = models.IntegerField\\\n             (help_text=\"The rating the reviewer has given.\")\n    date_created = models.DateTimeField\\\n                   (auto_now_add=True, \\\n                    help_text=\\\n                    \"The date and time the review was created.\")\n    date_edited = models.DateTimeField\\\n                  (null=True, \\\n                   help_text=\\\n                   \"The date and time the review was last edited.\")\n    creator = models.ForeignKey\\\n              (auth.get_user_model(), on_delete=models.CASCADE)\n    book = models.ForeignKey\\\n           (Book, on_delete=models.CASCADE, \\\n            help_text=\"The Book that this review is for.\")\n```", "```py\nclass Publisher(models.Model):\n    \"\"\"A company that publishes books.\"\"\"\n    name = models.CharField\\\n           (max_length=50, \\\n            help_text=\"The name of the Publisher.\")\n    website = models.URLField\\\n              (help_text=\"The Publisher's website.\")\n    email = models.EmailField\\\n            (help_text=\"The Publisher's email address.\")\n    def __str__(self):\n        return self.name\n```", "```py\nclass Book(models.Model):\n    \"\"\"A published book.\"\"\"\n    title = models.CharField\\\n            (max_length=70, \\\n             help_text=\"The title of the book.\")\n    publication_date = models.DateField\\\n                       (verbose_name=\\\n                        \"Date the book was published.\")\n    isbn = models.CharField\\\n           (max_length=20, \\\n            verbose_name=\"ISBN number of the book.\")\n    publisher = models.ForeignKey\\\n                (Publisher, \\\n                 on_delete=models.CASCADE)\n    contributors = models.ManyToManyField\\\n                   ('Contributor', through=\"BookContributor\")\n    def __str__(self):\n        return self.title\nclass Contributor(models.Model):\n\"\"\"\nA contributor to a Book, e.g. author, editor, \\\nco-author.\n\"\"\"\n    first_names = models.CharField\\\n                  (max_length=50, \\\n                   help_text=\\\n                   \"The contributor's first name or names.\")\n    last_names = models.CharField\\\n                 (max_length=50, \\\n                  help_text=\\\n                  \"The contributor's last name or names.\")\n    email = models.EmailField\\\n            (help_text=\\\n             \"The contact email for the contributor.\")\n    def __str__(self):\n        return self.first_names\n```", "```py\npython manage.py makemigrations reviews\n```", "```py\n  reviews/migrations/0002_auto_20191007_0112.py\n    - Create model Book\n    - Create model Contributor\n    - Create model Review\n    - Create model BookContributor\n    - Add field contributors to book\n    - Add field publisher to book\n```", "```py\npython manage.py migrate reviews\n```", "```py\nOperations to perform:\n  Apply all migrations: reviews\nRunning migrations:\n  Applying reviews.0002_auto_20191007_0112... OK\n```", "```py\npython manage.py shell\n```", "```py\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> \n```", "```py\n    >>>from reviews.models import Publisher\n    ```", "```py\n    >>>publisher = Publisher(name='Packt Publishing', website='https://www.packtpub.com', email='info@packtpub.com')\n    ```", "```py\n    >>>publisher.save()\n    ```", "```py\n    >>>publisher.email\n    'info@packtpub.com'\n    >>> publisher.email = 'customersupport@packtpub.com'\n    >>> publisher.save()\n    ```", "```py\n    >>> from reviews.models import Contributor\n    ```", "```py\n    >>> contributor  =   Contributor.objects.create(first_names=\"Rowel\",     last_names=\"Atienza\", email=\"RowelAtienza@example.com\")\n    ```", "```py\n    >>>from reviews.models import Book, Publisher\n    ```", "```py\n    >>>publisher = Publisher.objects.get(name='Packt Publishing')\n    ```", "```py\n    >>>from datetime import date\n    ```", "```py\n    >>>book = Book.objects.create(title=\"Advanced Deep Learning   with Keras\", publication_date=date(2018, 10, 31),     isbn=\"9781788629416\", publisher=publisher)\n    ```", "```py\n    >>>from reviews.models import Book\n    >>>from reviews.models import Contributor\n    >>>contributor = Contributor.objects.get(first_names='Rowel')\n    book = Book.objects.get(title=\"Advanced Deep Learning with Keras\")\n    ```", "```py\n    >>>from reviews.models import BookContributor\n    >>>book_contributor = BookContributor(book=book,   contributor=contributor, role='AUTHOR')\n    >>> book_contributor.save()\n    ```", "```py\n    >>>from reviews.models import Book, Contributor\n    >>>book = Book.objects.get(title=\"Advanced Deep Learning with   Keras\")\n    ```", "```py\n    >>>contributor = Contributor.objects.create(first_names='Packt',   last_names='Example Editor',     email='PacktEditor@example.com')\n    ```", "```py\n    >>>book.contributors.add(contributor,   through_defaults={'role': 'EDITOR'})\n    ```", "```py\n>>>book.contributors.create(first_names='Packtp', last_names=  'Editor Example', email='PacktEditor2@example.com',     through_defaults={'role': 'EDITOR'})\n```", "```py\n>>>from reviews.models import Publisher\n```", "```py\n>>> publisher = Publisher.objects.create(name='Pocket Books',   website='https://pocketbookssampleurl.com', email='pocketbook@example.com')\n>>> contributor1 = Contributor.objects.create(first_names=  'Stephen', last_names='Stephen', email='StephenKing@example.com')\n>>> contributor2 = Contributor.objects.create(first_names=  'Peter', last_names='Straub', email='PeterStraub@example.com')\n>>> book = Book.objects.create(title='The Talisman',   publication_date=date(2012, 9, 25), isbn='9781451697216',     publisher=publisher)\n```", "```py\n>>> book.contributors.set([contributor1, contributor2],   through_defaults={'role': 'CO_AUTHOR'})\n```", "```py\n    >>>from reviews.models import Publisher\n    >>> publisher = Publisher.objects.get(name='Pocket Books')\n    ```", "```py\n    >>> publisher\n    <Publisher: Pocket Books>\n    ```", "```py\n    >>> publisher.name\n    'Pocket Books'\n    ```", "```py\n    >>> publisher.website\n    'https://pocketbookssampleurl.com'\n    ```", "```py\n    >>> publisher.email\n    'pocketbook@example.com'\n    ```", "```py\n>>> publisher = Publisher.objects.get(website='https://pocketbookssampleurl.com')\n```", "```py\n>>> publisher.name\n'Pocket Books'\n```", "```py\n>>> Publisher.objects.get(pk=2)\n<Publisher: Pocket Books>\n```", "```py\n>>> Publisher.objects.get(id=2)\n<Publisher: Pocket Books>\n```", "```py\n    >>>from reviews.models import Contributor\n    >>> Contributor.objects.all()\n    <QuerySet [<Contributor: Rowel>, <Contributor: Packt>, <Contributor: Packtp>, <Contributor: Stephen>, <Contributor:   Peter>]>\n    ```", "```py\n    >>> contributors = Contributor.objects.all()\n    ```", "```py\n    >>> contributors[0]\n    <Contributor: Rowel>\n    ```", "```py\n    >>> contributors[0].first_names\n    'Rowel'\n    >>> contributors[0].last_names\n    'Atienza'\n    ```", "```py\n    >>>from reviews.models import Contributor\n    >>> Contributor.objects.create(first_names='Peter', last_names='Wharton', email='PeterWharton@example.com')\n    >>> Contributor.objects.create(first_names='Peter', last_names='Tyrrell', email='PeterTyrrell@example.com')\n    ```", "```py\n    >>> Contributor.objects.filter(first_names='Peter')\n    <QuerySet [<Contributor: Peter>, <Contributor: Peter>,   <Contributor: Peter>]>\n    ```", "```py\n    >>>Contributor.objects.filter(first_names='Rowel')\n    <QuerySet [<Contributor: Rowel>]>\n    ```", "```py\n    >>>Contributor.objects.filter(first_names='Nobody')\n    <QuerySet []>\n    ```", "```py\n>>>from reviews.models import Book\n>>>book = Book.objects.filter(publication_date__gt=date(2014, 1, 1))\n```", "```py\n>>> book\n<QuerySet [<Book: Advanced Deep Learning with Keras>]>\n```", "```py\n>>> book[0].publication_date\ndatetime.date(2018, 10, 31)\n```", "```py\n>>> book = Book.objects.filter(title__contains=\n    'Deep learning')\n```", "```py\n>>> book\n<QuerySet [<Book: Advanced Deep Learning with Keras>]>\n>>> book[0].title\n'Advanced Deep Learning with Keras'\n```", "```py\n>>> Contributor.objects.all()\n<QuerySet [<Contributor: Rowel>, <Contributor: Packt>,   <Contributor: Packtp>, <Contributor: Stephen>,     <Contributor: Peter>, <Contributor: Peter>,       <Contributor: Peter>]>\n```", "```py\n>>> Contributor.objects.exclude(first_names='Peter')\n<QuerySet [<Contributor: Rowel>, <Contributor: Packt>,   <Contributor: Packtp>, <Contributor: Stephen>]>\n```", "```py\n>>> books = Book.objects.order_by(\"publication_date\")\n>>> books\n<QuerySet [<Book: The Talisman>, <Book: Advanced Deep Learning   with Keras>]>\n```", "```py\n>>> books[0].publication_date\ndatetime.date(2012, 9, 25)\n>>> books[1].publication_date\ndatetime.date(2018, 10, 31)\n```", "```py\n>>> books = Book.objects.order_by(\"-publication_date\")\n>>> books\n<QuerySet [<Book: Advanced Deep Learning with Keras>,   <Book: The Talisman>]>\n```", "```py\n>>> books[0].publication_date\ndatetime.date(2018, 10, 31)\n>>> books[1].publication_date\ndatetime.date(2012, 9, 25)\n```", "```py\n>>>books = Book.objects.order_by('id')\n<QuerySet [<Book: Advanced Deep Learning with Keras>,   <Book: The Talisman>]>\n```", "```py\n>>> books[0].id\n1\n>>> books[1].id\n2\n```", "```py\n>>> Book.objects.order_by('-id')\n<QuerySet [<Book: The Talisman>, <Book: Advanced Deep Learning   with Keras>]>\n```", "```py\n>>> books[0].id\n2\n>>> books[1].id\n1\n```", "```py\n>>>Book.objects.order_by('title')\n<QuerySet [<Book: Advanced Deep Learning with Keras>, <Book:   The Talisman>]>\n```", "```py\n>>> books[0]\n<Book: Advanced Deep Learning with Keras>\n>>> books[1]\n<Book: The Talisman>\n```", "```py\n>>> Book.objects.order_by('-title')\n<QuerySet [<Book: The Talisman>, <Book: Advanced Deep Learning   with Keras>]>\n```", "```py\n>>> books[0]\n<Book: The Talisman>\n>>> books[1]\n<Book: Advanced Deep Learning with Keras>\n```", "```py\n>>> publishers = Publisher.objects.all().values()\n>>> publishers\n<QuerySet [{'id': 1, 'name': 'Packt Publishing', 'website':   'https://www.packtpub.com', 'email':     'customersupport@packtpub.com'}, {'id': 2, 'name':       'Pocket Books', 'website': 'https://pocketbookssampleurl.com',        'email': 'pocketbook@example.com'}]>\n>>> publishers[0]\n{'id': 1, 'name': 'Packt Publishing', 'website':  'https://www.packtpub.com', 'email':     'customersupport@packtpub.com'}\n>>> publishers[0]\n{'id': 1, 'name': 'Packt Publishing', 'website':   'https://www.packtpub.com', 'email':    'customersupport@packtpub.com'}\n```", "```py\n>>> Book.objects.filter(publisher__name='Packt Publishing')\n<QuerySet [<Book: Advanced Deep Learning with Keras>]>\n```", "```py\n>>> Publisher.objects.get(book__title='Advanced Deep Learning   with Keras')\n<Publisher: Packt Publishing>\n```", "```py\n>>> book = Book.objects.get(title='The Talisman')\n>>> book.publisher\n<Publisher: Pocket Books>\n```", "```py\n>>> publisher = Publisher.objects.get(name='Pocket Books')\n>>> publisher.book_set.all()\n<QuerySet [<Book: The Talisman>]>\n```", "```py\n>>> Book.objects.filter(publisher__name='Pocket Books').filter(title='The Talisman')\n<QuerySet [<Book: The Talisman>]>\n```", "```py\n    >>> from reviews.models import Contributor\n    ```", "```py\n    >>>Contributor.objects.filter(book__title='The Talisman')\n    ```", "```py\n    <QuerySet [<Contributor: Stephen>, <Contributor: Peter>]>\n    ```", "```py\n    >>> from reviews.models import Book\n    ```", "```py\n    >>> book = Book.objects.get(title='The Talisman')\n    ```", "```py\n    >>>book.contributors.all()\n    <QuerySet [<Contributor: Stephen>, <Contributor: Peter>]>\n    ```", "```py\n    >>> from reviews.models import Contributor\n    ```", "```py\n    >>> contributor = Contributor.objects.get(first_names='Rowel')\n    ```", "```py\n    >>> contributor.book_set.all()\n    <QuerySet [<Book: Advanced Deep Learning with Keras>]>\n    ```", "```py\n    >>> from reviews.models import Contributor\n    >>> Contributor.objects.filter(last_names='Tyrrell').  update(first_names='Mike')\n    1\n    ```", "```py\n    >>> Contributor.objects.get(last_names='Tyrrell').first_names\n    'Mike'\n    ```", "```py\n    >>> from reviews.models import Contributor\n    >>> Contributor.objects.get(last_names='Wharton').delete()\n    (1, {'reviews.BookContributor': 0, 'reviews.Contributor': 1})\n    ```", "```py\n    >>> Contributor.objects.get(last_names='Wharton')\n    Traceback (most recent call last):\n        File \"<console>\", line 1, in <module>\n        File \"/../site-packages/django/db/models/manager.py\",  line 82, in manager_method\n        return getattr(self.get_queryset(), name)(*args, **kwargs)\n        File \"/../site-packages/django/db/models/query.py\",  line 417, in get\n        self.model._meta.object_name\n    reviews.models.Contributor.DoesNotExist: Contributor   matching query does not exist.\n    ```", "```py\n    bookr/reviews/management/commands/\n    ```", "```py\n    rm reviews/db.sqlite3\n    ```", "```py\n    python manage.py migrate\n    ```", "```py\n    python manage.py loadcsv --csv reviews/management/commands/WebDevWithDjangoData.csv\n    ```"]