["```py\n>>> \"abc\".index(\"x\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: substring not found\n\n>>> \"abc\".find(\"x\")\n-1.\n```", "```py\n    obj = Exception(\"some message\")\n    raise obj\n    ```", "```py\n    raise Exception(\"Some Argument\", \"additional details\")\n    ```", "```py\n    raise MyError(\"problem\") from some_exception\n    ```", "```py\ndef clean_number(text):\n    try:\n        value= float(text)\n    except ValueError:\n        value= None\n    return value\n```", "```py\n    >>> row = ['heading', '23', '2.718']\n    >>> list(map(clean_number, row))\n    [None, 23.0, 2.718]\n    >>> clean_number(\"1,956\")\n```", "```py\nfrom decimal import Decimal,  InvalidOperation\ndef clean_number3(text, num_type=Decimal):\n    try:\n        value= num_type(text)\n    except (ValueError, InvalidOperation):\n        text= text.replace(\",\",\"\").replace(\"$\",\"\")\n        try:\n            value= num_type(text)\n        except (ValueError, InvalidOperation):\n            value= None\n    return value\n```", "```py\n>>> from fractions import Fraction\n>>> clean_number3(',2/0,', Fraction)\n```", "```py\nTraceback (most recent call last):\n  ...\nValueError: Invalid literal for Fraction: ',2/0,'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  ...\nZeroDivisionError: Fraction(2, 0)\n```", "```py\ndef fraction_row(row):\n    try:\n        return [clean_number3(item,Fraction) for item in row]\n    except (TypeError, ZeroDivisionError):\n        return [None for item in row]\n```", "```py\nexcept SomeException as exc:\n```", "```py\nimport os\ndef names(path=\".\"):\n    try:\n        return [name\n            for name in os.listdir(path)\n            if not name.startswith('.')]\n    except OSError as exc:\n        print( exc.__class__.__name__, exc )\n        raise\n\n```", "```py\ndef server():\n        try:\n        while True:\n            try:\n                one_request()\n            except Exception as e:\n                print(e.__class__.__name__, e)\n    except Shutdown_Request:\n        print(\"Shutting Down\")\n```", "```py\ntry:\n    # Something that might fail.\nexcept SomeException:\n    # Fallback plan to handle failure.\nfinally:\n    # Always executed.\n```", "```py\n>>> import warnings\n>>> warnings.warn(\"oopsie\")\n__main__:1: UserWarning: oopsie\n```", "```py\nif text.isdigit():\n    num= int(text)\nelse:\n    num= None\n```", "```py\ntry:\n    num= int(text)\nexcept ValueError:\n    num= None\n```"]