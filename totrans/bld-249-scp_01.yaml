- en: Chapter 1. Extending Blender with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start crafting scripts in Blender we must check whether or not we
    have all the necessary tools available. After that we will have to familiarize
    ourselves with these tools so that we can use them with confidence. In this chapter,
    we will look at:'
  prefs: []
  type: TYPE_NORMAL
- en: What can and cannot be accomplished with Python in Blender
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install a full Python distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the built-in editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to run a Python script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to explore built-in modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write a simple script that adds an object to a Blender scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to register a script in the Blender scripts menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to document your script in a user-friendly way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to distribute a script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With so many things possible there is an awful lot to learn, but fortunately
    the learning curve is not as steep as it might seem. Let's just type in a quick
    few lines of Python to put a simple object into our Blender scene, just to prove
    we can, before we head into deeper waters.
  prefs: []
  type: TYPE_NORMAL
- en: Start Blender with an empty scene.![Extending Blender with Python](img/0400_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the interactive Python console (refer to the preceding screenshot to see
    where to find it).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the following lines (end each one with a *Enter*/*Return*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Voila! That's all that is needed to add Suzanne, Blender's famous mascot, to
    the scene.
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending Blender with Python](img/0400_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Blender API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost anything in Blender is accessible from Python scripts but there are some
    exceptions and limitations. In this section, we illustrate what this means exactly
    and which notable features are not accessible to Python (for example, fluid dynamics).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Blender API consists of three major areas of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to Blender objects and their properties, for example a `Camera` object
    and its `angle` property or a `Scene` object and its `objects` property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to operations to perform, for example adding a new `Camera` or rendering
    an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the graphical user interface, either by using simple building blocks
    or by interacting with the Blender event system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also some utilities that do not fit well in any of these categories
    as they concern themselves with abstractions that have no direct relation to Blender
    objects as seen by the end user, for example functions to manipulate vectors and
    matrices.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of power
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Taken together this means we can achieve a lot of things from Python scripts.
    We can:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Blender object of any type, including cameras, lamps, meshes, and
    even scenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact with the user with a graphical user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate common tasks within Blender such as rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate maintenance tasks outside of Blender such as cleaning up directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manipulate any property of a Blender object that is exposed by the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That last statement shows one of the current weaknesses of the Blender API:
    any object property that the developers add in the Blender C source must be provided
    separately in the Python API. There is no automatic conversion from internal structures
    to the interface available in Python and this means that efforts must be duplicated
    and may lead to omitted functionality. For instance, in Blender 2.49 it is not
    possible at all to set up a fluid simulation from a script. Although it is possible
    to set up a particle system, there is no way to set the behavioral characteristics
    of a boids particle system.'
  prefs: []
  type: TYPE_NORMAL
- en: Another problem of the 2.49 Python API is that many of the actions a user may
    choose to perform on an object have no equivalent in the API. Setting simple parameters
    such as the camera angle or performing a rotation of any object is easy and even
    associating for example, a subsurface modifier to a mesh is just a few lines of
    code but common actions, especially on mesh objects, such as subdividing selected
    edges or extruding faces are missing from the API and must be implemented by the
    script developer.
  prefs: []
  type: TYPE_NORMAL
- en: These problems led the Blender developers to completely redesign the Blender
    Python API for the 2.5 version, focusing on feature parity (that is, everything
    possible in Blender should be possible using the Python API). This means that
    in many situations it will be far easier to get the same results in Blender 2.5.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, Python is used in more places than just standalone scripts: **PyDrivers**
    and **PyConstraints** enable us to control the way Blender objects behave and
    we will encounter them in later chapters. Python also allows us to write custom
    textures and shaders as part of the nodes system as we will see in [Chapter 7](ch07.html
    "Chapter 7. Creating Custom Shaders and Textures with Pynodes"), *Creating Custom
    Shaders and Textures.*'
  prefs: []
  type: TYPE_NORMAL
- en: Also, it is important to keep in mind that Python offers us far more than just
    the (already impressive) tools to automate all sorts of tasks in Blender. Python
    is a general programming language with an extensive library of tools included,
    so we do not have to resort to external tools for common system tasks such as
    copying files or archiving (zipping) directories. Even networking tasks can be
    implemented quite easily as a number of render farm solutions prove.
  prefs: []
  type: TYPE_NORMAL
- en: Some batteries included
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we install Blender, a Python interpreter is already part of the application.
    This means that it is not necessary to install Python as a separate application.
    But there is more to Python than just the interpreter. Python comes with a huge
    collection of modules that provide a wealth of functionality. Anything from file
    manipulation to XML processing and more is available, and the best bit is that
    these modules are a standard part of the language. They are just as well maintained
    as the Python interpreter itself and (with very few exceptions) available on any
    platform that Python runs on.
  prefs: []
  type: TYPE_NORMAL
- en: The downside is, of course, that this collection of modules is fairly large
    (40MB or so), so the Blender developers chose to distribute only the bare minimum,
    primarily the math module. This makes sense if you want to keep the size of the
    Blender downloads manageable. Many Python developers have come to depend on the
    standard distribution because not having to reinvent the wheel saves huge amounts
    of time, not to mention it's not an easy task to develop and test a full-fledged
    XML library say, just because you want to be able to read a simple XML file. That
    is why it is now more or less a consensus that it is a good thing to install the
    full Python distribution. Fortunately, the installation is just as easy as the
    installation of Blender itself, even for end users, as binary installers are provided
    for many platforms, such as Windows and Mac, also in 64-bit versions. (Distributions
    for Linux are provided as source code with instructions on how to compile them,
    but many Linux distributions either already provide Python automatically or make
    it very easy to install it afterwards from a package repository).
  prefs: []
  type: TYPE_NORMAL
- en: Check for a full Python distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Chances are that you already have a full Python distribution on your system.
    You can verify this by starting Blender and checking the console window (the term
    **console** **window** refers to either the DOSBox that starts in parallel on
    Windows or the X terminal window where you start Blender from on other systems)
    to see if it displays the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If it does, then there is nothing you have to do and you can skip to *The*
    *interactive* *Python* *console* section. If it shows the following message then
    you do have to take some action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Installing a full Python distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps toward a full Python installation for Windows or Mac are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Download a suitable installer from [http://www.python.org/download/](http://www.python.org/download/).
    At the moment of writing, the latest stable 2.6 version is 2.6.2 (used in Blender
    2.49). It is generally a good thing to install the latest stable version as it
    will contain the latest bug fixes. Make sure, however, to use the same major version
    as Blender is compiled with. It is fine to use version 2.6.3 when it is released
    even as Blender is compiled with version 2.6.2\. But if you use an older version
    of Blender that is compiled with Python 2.5.4 you have to install the latest Python
    2.5.x release (or upgrade to Blender 2.49, if that is an option).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the installer: On Windows the installer offers you to choose where to install
    Python. You can choose anything you like here, but if you choose the default,
    Blender will almost certainly find the modules installed here without the need
    to set the `PYTHONPATH` variable. (see below)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '(Re) start Blender. The Blender console should show the text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If it doesn''t, it might be necessary to set the `PYTHONPATH` variable. Refer
    to the Blender wiki for detailed information: [http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python](http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On Ubuntu Linux, the first step is not needed and installing can be done by
    using the built-in package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Other distributions might use a different package management system so you might
    have to check the documentation for that. Under Windows it might be necessary
    to set the `PYTHONPATH` environment variable, although this is unlikely when using
    the provided packages.
  prefs: []
  type: TYPE_NORMAL
- en: The interactive Python console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To see where Blender actually looks for modules you may look at Python''s `sys.path`
    variable. To do this you have to start up Blender''s interactive Python console.
    Note that you use a different and possibly confusing notion of console here—the
    DOSBox or the terminal window that is started alongside Blender''s main application
    window and where various informational messages are displayed is referred to as
    **console** as well! The Python interactive console that we want to use now is
    started from the **script window**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The interactive Python console](img/0400_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the interactive Python console is started, type the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the interactive Python console does not show any prompt (unless when
    expecting indentation, for example within a `for` loop) but anything you type
    will be in a different color (white on black by default) from what is returned
    (that will be blue or black). The two preceding commands will give us access to
    Python''s `sys` module that contains various variables with system information.
    The `sys.path` variable that we print here will hold all of the directories that
    will be searched when we try to import a module. (Note that importing `sys` will
    always work because `sys` is a built-in module.) The output will be something
    similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If your Python installation directory is not in this list then you should set
    the `PYTHONPATH` variable before starting Blender.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring built-in modules, the help() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The interactive Python console is a good platform to explore built-in modules
    as well. Because Python comes equipped with two very useful functions, `help()`
    and `dir()`, you have instant access to a lot of information contained in Blender's
    (and Python's) modules as a lot of documentation is provided as part of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'For people not familiar with these functions, here are two short examples,
    both run from the interactive Python console. To get information on a specific
    object or function, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The information will be printed in the same console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `help()` function will show the associated docstring of functions, classes,
    or modules. In the previous example, that is the information provided with the
    `Get()` method (function) of the `Lamp` class. A **docstring** is the first string
    defined in a function, class, or module. When defining your own functions, it
    is a good thing to do this as well. This might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now apply the `help` function to our newly-defined function like we
    did before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output then shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the programs that we will be developing, we will use this method of documenting
    where appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring built-in functions, the dir() function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `dir()` function lists all members of an object. That object can be an
    instance, but also a class or module. For example, we might apply it to the `Blender.Lamp`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be a list of all members of the `Blender.Lamp` module. You
    can spot the `Get()` function that we encountered earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Once you know which members a class or module has, you can then check for any
    additional help information for these members by applying the `help()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Of course both `dir()` and `help()` are most useful when you already have some
    clue where to look for information. But if so, they can be very convenient tools
    indeed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with the built-in editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to use any editor (that you like) to write Python scripts and
    then import the scripts as text files but Blender's built-in text editor will
    probably be adequate for all programming needs. It features conveniences such
    as syntax highlighting, line numbering, and automatic indentation, and gives you
    the possibility to run a script directly from the editor. The ability to run a
    script directly from the editor is a definite boon when debugging because of the
    direct feedback that you get when encountering an error. You will not only get
    an informative message but the offending line will also be highlighted in the
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: What is more, the editor comes with many plug-ins of which the automatic suggestion
    of members and the documentation viewer are very convenient for programmers. And
    of course, it is possible to write additional plug-ins yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can select the built-in editor by choosing **Text Editor** from the Windows
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting familiar with the built-in editor](img/0400_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you start up you are presented with an almost empty area except for a
    strip of buttons at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting familiar with the built-in editor](img/0400_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can select the default empty text buffer `TX:Text` or create a new empty
    text by selecting **ADD NEW** from the drop-down menu available when we click
    on the **Menu** button.
  prefs: []
  type: TYPE_NORMAL
- en: The default name for this new text will be `TX:Text.001,` but you may change
    it to something more meaningful by clicking on the name and changing it. Note
    that if you would like to save this text to an external file (with **Text** **|**
    **Save** **As...**) the name of the text is distinct from the filename (although
    in general it is a good idea to keep these the same to avoid confusion). It is
    not mandatory to save texts as external files; texts are Blender objects that
    are saved together with all other information when you save your `.blend` file.
  prefs: []
  type: TYPE_NORMAL
- en: External files may be opened as texts by selecting **OPEN NEW** from the **Menu**
    button drop-down instead of **ADD NEW**. If for some reason an external file and
    an associated text are out of sync when Blender is started, an out of sync button
    is displayed. When clicked, it displays a number of options to resolve the issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a new or existing text is selected, the menu bar at the bottom of the
    screen is updated with some additional menu options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting familiar with the built-in editor](img/0400_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Text** **file** **menu** gives access to options to open or save a file
    or to run the script in the editor. It also presents a number of template scripts
    that may be used as a basis for your own scripts. If you select one of these templates
    a new text buffer is created with a copy of the selected template.
  prefs: []
  type: TYPE_NORMAL
- en: The **Edit** **menu** contains **cut-and-paste** functionality as well as options
    to search and replace text or jump to a chosen line number.
  prefs: []
  type: TYPE_NORMAL
- en: The **Format** menu has options to indent and unindent selected text as well
    as options to convert whitespace. The latter option can be very helpful when the
    Python interpreter complains about unexpected indentation levels although there
    seems nothing amiss with your file. If that happens you possibly have mixed tabs
    and spaces in way that confuse Python (as they are different as far as the interpreter
    is concerned) and a possible way out is to convert selected text to spaces first
    and then back to tabs. This way mixed spaces and tabs will be used in a uniform
    way again.
  prefs: []
  type: TYPE_NORMAL
- en: An editor example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get used to the editor, create a new text buffer by choosing **Text | New**
    and type in the following example lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Most keys on the keyboard will behave in a familiar way, including *Delete*,
    *Backspace*, and *Enter*. The shortcut keys for cutting, pasting, and copying
    are listed in the **Edit** menu as *Alt + X*, *Alt + V*, and *Alt + C* respectively
    but the *Ctrl* key equivalents *Ctrl + X*, *Ctrl + V*, and *Ctrl + C* (familiar
    to Windows users) work just as well. A full keyboard map can be consulted on the
    Blender wiki, [http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python/Text_editor](http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python/Text_editor)
  prefs: []
  type: TYPE_NORMAL
- en: Selecting portions of the text can be achieved by clicking and dragging the
    mouse, but you can also select text by moving the text cursor around while pressing
    the *Shift* key.
  prefs: []
  type: TYPE_NORMAL
- en: Text will be uncolored by default, but reading scripts can be made a lot easier
    on the eye by enabling syntax highlighting. Clicking on the little **AB** button
    will toggle this (it will be black and white when syntax highlighting is off and
    colored when on.) Like many aspects of Blender, text colors can be customized
    in the **themes** section of the **User Preferences** window.
  prefs: []
  type: TYPE_NORMAL
- en: Another feature that is very convenient to enable, especially when debugging
    scripts, is line numbering. (You might write a faultless code in one go, but unfortunately
    yours truly is less of a genius.) Every Python error message that will be shown
    will have a filename and a line number, and the offending line will be highlighted.
    But the lines of the calling function(s), if any, will not be highlighted although
    their line numbers will be shown in the error message, so having line numbers
    enabled will enable you to quickly locate the calling context of the trouble spot.
    Line numbering is enabled by clicking on the **lines** button.
  prefs: []
  type: TYPE_NORMAL
- en: Running a script is done by pressing *Alt + P*. Nothing is displayed in the
    editor when there are no errors encountered, but the output will be shown on the
    console (that is, the DOSBox or X terminal Blender started from, *not* the Python
    interactive console that we encountered earlier).
  prefs: []
  type: TYPE_NORMAL
- en: 'First steps: Hello world'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tradition demands every book about programming to have a "hello world" example
    and why would we offend people? We will implement, and run, a simple object instantiating
    script and show how to integrate this in Blender's script menu. We will also show
    how to document it and make an entry in the help system. Finally, we will spend
    some words on the pros and cons of distributing scripts as `.blend` files or as
    scripts to install in the `scriptdir` by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Let's write some code! You can type in the following lines directly into the
    interactive Python console, or you can open a new text in Blender's text editor
    and then press *Alt + P* to run the script. It is a short script but we'll go
    through it in some detail as it features many of the key aspects of the Blender
    Python API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The first line identifies this script as a Blender script. This is not necessary
    to run the script, but if we want to be able to make this script a part of Blender's
    menu structure we need it, so we better get used to it right away.
  prefs: []
  type: TYPE_NORMAL
- en: You will find the second line (which is highlighted) in virtually any Blender
    script because it gives us access to the classes and functions of the Blender
    Python API. Likewise, the third line gives us access to the specific submodules
    of the Blender module that we will need in this script. We could access them as
    members of the `Blender` module of course (for example, `Blender.Scene`), but
    importing them explicitly saves some typing and enhances readability.
  prefs: []
  type: TYPE_NORMAL
- en: The next two lines first create a `Text3d` object and assign that to the variable
    `hello`. The `Text3d` object will have the name `HelloWorld` in Blender so users
    can refer to this object by this name. Also this is the name that will be visible
    in the Outliner window and in the lower-left corner if the object is selected.
    If there already exists an object of the same type with this name, Blender adds
    a numerical suffix to the name to make it unique. ``For example, `HelloWorld`
    might become `HelloWord.001` if we run the scripts twice.``
  prefs: []
  type: TYPE_NORMAL
- en: '``By default, a newly created `Text3d` object will contain the text **Text**
    so we change that to **Hello** **World!** with `setText()` method.``'
  prefs: []
  type: TYPE_NORMAL
- en: '``A newly created Blender object is not visible by default, we have to associate
    that with a `Scene` so the next few lines retrieve a reference to the current
    scene and add the `Text3d` object to it. The `Text3d` object is not added directly
    to the scene but the `scene.objects.new()` method embeds the `Text3d` object in
    a generic Blender object and returns a reference to the latter. The generic Blender
    object holds information common to all objects, such as position, whereas the
    `Text3d` object holds specific information, such as the text font.``'
  prefs: []
  type: TYPE_NORMAL
- en: '`Finally, we tell the window manager to refresh any window that needs a refresh
    due to the addition of a new object.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Integrating a script in Blender''s menus`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Your own script doesn''t have to be a second class citizen. It can be made
    part of Blender on par with any of the bundled scripts that come with Blender.
    It can be added to the **Add** menu present in the header at the top of the View3D
    window.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Note`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Actually, the **Add** menu is present in the header at the bottom of the user
    preferences window but as this window is situated above the View3D window, and
    is by default minimized to just the header, it looks as if it''s a header at the
    top of the View3D window. Many users are so accustomed to it that they see it
    as part of the View3D window.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`It may supply information to Blender''s help system just like any other script.
    The following few lines of code make that possible:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`We start the script with a standalone string containing several lines.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Note`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Each line starts with a label followed by a colon and a value. The colon should
    follow the label immediately. There should not be any intervening space, otherwise
    our script will *not* show up in any menu.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`The labels at the beginning of each line serve the following purpose:`'
  prefs: []
  type: TYPE_NORMAL
- en: '`` `Name` (a string) defines the name of the scripts as it appears in the menu
    ``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `Blender` (a number) defines the minimum version of Blender needed to use
    the script ``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `Group` (a string) is the submenu of the scripts menu under which this script
    should be grouped  If our scripts are to appear under the **Add | Mesh** menu
    in the View3D window (also accessible by pressing *Space*) this should read `AddMesh`.
    If it should be under a different submenu of the script''s menu, it could read,
    for example, `Wizards` or `Object`. Besides the necessary labels the following
    optional labels might be added: ``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `Version` (a string) is the version of the script in any format you like.
    ``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `Tip` (a string) is the information shown in the tooltip when hovering over
    the menu item in the **Scripts** menu. If the script belongs to the group `AddMesh`,
    no tooltip will be shown even if we define one here. ``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`![Integrating a script in Blender''s menus](img/0400_01_07.jpg)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Integrating a script in Blender''s help system`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Blender has an integrated help system that is accessible from the **Help**
    menu at the top of the screen. It gives access to online resources and to information
    on registered scripts via the **Scripts** **Help** **Browser** entry. Once selected,
    it shows a collection of drop-down menus, one for each group, where you can select
    a script and view its help information.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`If we want to enter our script in the integrated help system we need to define
    some additional global variables:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '``These variables should be self-explanatory except for the `__url__` variable—this
    one will take a list of strings where each string consists of a short description,
    a comma, and a URL. The resulting help screen will look like this:``'
  prefs: []
  type: TYPE_NORMAL
- en: '`![Integrating a script in Blender''s help system](img/0400_01_08.jpg)`'
  prefs: []
  type: TYPE_NORMAL
- en: '``Now all that we have left to do is to test it and then place this script
    in an appropriate location. We can test the script by pressing *Alt + P*. If no
    errors are encountered, this will result in our `Hello` `World` `Text3d` object
    being added to the scene but the script will *not* be appended to the **Add**
    menu yet.``'
  prefs: []
  type: TYPE_NORMAL
- en: '``If a script is to be added to the **Add** menu it has to reside in Blender''s
    script directory. To do this, first save the script in the text buffer to a file
    with a meaningful name. Next, make sure that this file is located in Blender''s
    script directory. This directory is called `scripts` and is a subdirectory of
    `.blender`, Blender''s configuration directory. It is either located in Blender''s
    installation directory or (on Windows) in the `Application` `Data` directory.
    The easiest way to find ours is to simply look at the `sys.path` variable again
    to see which listed directory ends in `.blender\scripts`.``'
  prefs: []
  type: TYPE_NORMAL
- en: '``Scripts located in Blender''s `scripts` directory will be automatically executed
    on startup, so our hello world script will be available anytime we start up Blender.
    If we want Blender to reexamine the script directory (so that we don''t have to
    restart Blender to see our new addition) we can choose **Scripts | Update menus**
    in the interactive console.``'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18] from Blender import Camera cam = Camera.New()         # creates new
    camera data ob = scn.objects.new(cam)  # adds a new camera object scn.setCurrentCamera(ob)    #
    makes this camera active [PRE19] from Blender import Lamp lamp = Lamp.New()            #
    create a new lamp ob = scn.objects.new(lamp) [PRE20] from Blender import Mesh,Scene  corners=[
    (-1,-1,-1), (1,-1,-1), (1,1,-1), (-1,1,-1),(-1,-1, 1), (1,-1, 1), (1,1, 1), (-1,1,
    1) ] sides= [ (0,1,2,3), (4,5,6,7), (0,1,5,4), (1,2,6,5), (2,3,7,6), (3,0,4,7)
    ]  me = Mesh.New(''Cube'') me.verts.extend(corners) me.faces.extend(sides) scn
    = Scene.GetCurrent() ob = scn.objects.new(me, ''Cube'') Window.RedrawAll() [PRE21]
    import Blender version = Blender.Get(''version'') [PRE22] import Blender Blender.PackAll()
    Blender.Save(''myfile.blend'') [PRE23] import Blender ob = Blender.Object.Get(name=''MyObject'')
    [PRE24] import bpy ob = bpy.data.objects[''MyObject''] [PRE25] import Blender
    scene = Blender.Scene.GetCurrent() [PRE26] import bpy scene = bpy.data.scenes.active
    [PRE27]     …     if type(someobject) == Blender.Types.CurveType :     … do things
    only allowed for Curve objects ...     [PRE28]`'
  prefs: []
  type: TYPE_NORMAL
