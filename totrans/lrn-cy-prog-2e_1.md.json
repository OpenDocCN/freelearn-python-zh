["```py\n$ pip install Cython\n```", "```py\n$ yum install cython     # will work on Fedora and Centos\n$ apt-get install cython # will work on Debian based systems.\n```", "```py\n(when (>= emacs-major-version 24)\n  (require 'package)\n  (add-to-list\n   'package-archives\n   '(\"melpa\" . \"http://melpa.org/packages/\")\n   t)\n  (package-initialize))\n```", "```py\n'M-x package-install RET cython-mode'\n```", "```py\n(require 'cython-mode)\n```", "```py\n'M-x cython-mode RET'\n```", "```py\n$ git clone git://github.com/redbrain/cython-book.git\n```", "```py\n$ cd cython-book/chapter1/helloworld\n$ make\n```", "```py\n$ python\nPython 2.7.3 (default, Aug  1 2012, 05:16:07)\n[GCC 4.6.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import helloworld\nHello World from cython!\n```", "```py\n$ cython helloworld.pyx\n$ gcc/clang -g -O2 -fpic `python-config --cflags` -c helloworld.c -o helloworld.o\n$ gcc/clang -shared -o helloworld.so helloworld.o `python-config â€“libs`\n```", "```py\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\n\nsetup(\n    ext_modules = cythonize(\"helloworld.pyx\")\n)\n```", "```py\n#include <stdio.h>\n\nint AddFunction(int a, int b) {\n    printf(\"look we are within your c code!\\n\");\n    return a + b;\n}\n```", "```py\n#ifndef __ADDFUNCTION_H__\n#define __ADDFUNCTION_H__\n\nextern int AddFunction (int, int);\n\n#endif //__ADDFUNCTION_H__\n```", "```py\ncdef extern from \"AddFunction.h\":\n    cdef int AddFunction(int, int)\n```", "```py\ndef Add(a, b):\n     return AddFunction(a, b)\n```", "```py\n$ cd cython-book/chapter1/ownmodule\n$ make\ncython -2 PyAddFunction.pyx\ngcc -g -O2 -fpic -c PyAddFunction.c -o PyAddFunction.o `python-config --includes`\ngcc -g -O2 -fpic -c AddFunction.c -o AddFunction.o\ngcc -g -O2 -shared -o PyAddFunction.so AddFunction.o PyAddFunction.o `python-config --libs`\n```", "```py\n$ python\n>>> from PyAddFunction import Add\n>>> Add(1,2)\nlook we are within your c code!!\n3\n```", "```py\ncdef extern from \"AddFunction.h\":\n    cdef int AddFunction(int, int)\n```", "```py\ndef Add(a, b):\n     return AddFunction(a, b)\n```"]