["```py\nPOST http://localhost:8000/games/ \n\n```", "```py\nGET http://localhost:8000/games/{id}/ \n\n```", "```py\nPUT http://localhost:8000/games/{id}/ \n\n```", "```py\nDELETE http://localhost:8000/games/{id}/ \n\n```", "```py\n ~/PythonREST/Django \n```", "```py\n%USERPROFILE%\\PythonREST\\Django\n```", "```py\npython3 -m venv ~/PythonREST/Django01\n```", "```py\npython -m venv %USERPROFILE%\\PythonREST\\Django01\n```", "```py\necho $SHELL\n```", "```py\nsource ~/PythonREST/Django01/bin/activate\n```", "```py\nsource ~/PythonREST/Django01/bin/activate.csh\n```", "```py\nsource ~/PythonREST/Django01/bin/activate.fish\n```", "```py\n%USERPROFILE%\\PythonREST\\Django01\\Scripts\\activate.bat\n```", "```py\ncd $env:USERPROFILE\nPythonREST\\Django01\\Scripts\\Activate.ps1\n```", "```py\npip install django\n```", "```py\nCollecting django\nInstalling collected packages: django\nSuccessfully installed django-1.10\n```", "```py\npip install djangorestframework\n```", "```py\nCollecting djangorestframework\nInstalling collected packages: djangorestframework\nSuccessfully installed djangorestframework-3.3.3\n```", "```py\ncd ~/PythonREST/Django01\n```", "```py\ncd /d %USERPROFILE%\\PythonREST\\Django01\n```", "```py\ndjango-admin.py startproject gamesapi\n```", "```py\ncd gamesapi\n```", "```py\npython manage.py startapp games\n```", "```py\nfrom django.apps import AppConfig \n\nclass GamesConfig(AppConfig): \n    name = 'games' \n\n```", "```py\nINSTALLED_APPS = [ \n    'django.contrib.admin', \n    'django.contrib.auth', \n    'django.contrib.contenttypes', \n    'django.contrib.sessions', \n    'django.contrib.messages', \n    'django.contrib.staticfiles', \n] \n\n```", "```py\nINSTALLED_APPS = [ \n    'django.contrib.admin', \n    'django.contrib.auth', \n    'django.contrib.contenttypes', \n    'django.contrib.sessions', \n    'django.contrib.messages', \n    'django.contrib.staticfiles', \n    # Django REST Framework \n    'rest_framework', \n    # Games application \n    'games.apps.GamesConfig', \n] \n\n```", "```py\nfrom django.db import models \n\n# Create your models here. \n\n```", "```py\nfrom django.db import models \n\nclass Game(models.Model): \n    created = models.DateTimeField(auto_now_add=True) \n    name = models.CharField(max_length=200, blank=True, default='') \n    release_date = models.DateTimeField() \n    game_category = models.CharField(max_length=200, blank=True, default='') \n    played = models.BooleanField(default=False) \n\n    class Meta: \n        ordering = ('name',) \n\n```", "```py\npython manage.py makemigrations games\n```", "```py\nMigrations for 'games':\n 0001_initial.py:\n - Create model Game\n```", "```py\n# -*- coding: utf-8 -*- \n# Generated by Django 1.9.6 on 2016-05-17 21:19 \nfrom __future__ import unicode_literals \n\nfrom django.db import migrations, models \n\nclass Migration(migrations.Migration): \n\n    initial = True \n\n    dependencies = [ \n    ] \n\n    operations = [ \n        migrations.CreateModel( \n            name='Game', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True,\n                serialize=False, verbose_name='ID')), \n                ('created', models.DateTimeField(auto_now_add=True)), \n                ('name', models.CharField(blank=True, default='',\n                 max_length=200)), \n                ('release_date', models.DateTimeField()), \n                ('game_category', models.CharField(blank=True, default='',\n                 max_length=200)), \n                ('played', models.BooleanField(default=False)), \n            ], \n            options={ \n                'ordering': ('name',), \n            }, \n        ), \n    ] \n\n```", "```py\npython manage.py migrate\n```", "```py\nOperations to perform:\n Apply all migrations: sessions, games, contenttypes, admin, auth\nRunning migrations:\n Rendering model states... DONE\n Applying contenttypes.0001_initial... OK\n Applying auth.0001_initial... OK\n Applying admin.0001_initial... OK\n Applying admin.0002_logentry_remove_auto_add... OK\n Applying contenttypes.0002_remove_content_type_name... OK\n Applying auth.0002_alter_permission_name_max_length... OK\n Applying auth.0003_alter_user_email_max_length... OK\n Applying auth.0004_alter_user_username_opts... OK\n Applying auth.0005_alter_user_last_login_null... OK\n Applying auth.0006_require_contenttypes_0002... OK\n Applying auth.0007_alter_validators_add_error_messages... OK\n Applying games.0001_initial... OK\n Applying sessions.0001_initial... OK\n```", "```py\nsqlite3 db.sqlite3 '.tables'\n```", "```py\nsqlite3 db.sqlite3 '.schema games_game'\n```", "```py\nsqlite3 db.sqlite3 'SELECT * FROM games_game ORDER BY name;'\n```", "```py\nDATABASES = { \n    'default': { \n        'ENGINE': 'django.db.backends.sqlite3', \n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), \n    } \n} \n\n```", "```py\nCREATE TABLE \"games_game\" ( \n    \"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \n    \"created\" datetime NOT NULL, \n    \"name\" varchar(200) NOT NULL, \n    \"release_date\" datetime NOT NULL, \n    \"game_category\" varchar(200) NOT NULL, \n    \"played\" bool NOT NULL \n) \n\n```", "```py\nfrom rest_framework import serializers \nfrom games.models import Game \n\nclass GameSerializer(serializers.Serializer): \n    pk = serializers.IntegerField(read_only=True) \n    name = serializers.CharField(max_length=200) \n    release_date = serializers.DateTimeField() \n    game_category = serializers.CharField(max_length=200) \n    played = serializers.BooleanField(required=False) \n\n    def create(self, validated_data): \n        return Game.objects.create(**validated_data) \n\n    def update(self, instance, validated_data): \n        instance.name = validated_data.get('name', instance.name) \n        instance.release_date = validated_data.get('release_date', instance.release_date) \n        instance.game_category = validated_data.get('game_category', instance.game_category) \n        instance.played = validated_data.get('played', instance.played) \n        instance.save() \n        return instance \n\n```", "```py\npython manage.py shell\n```", "```py\nfrom datetime import datetime \nfrom django.utils import timezone \nfrom django.utils.six import BytesIO \nfrom rest_framework.renderers import JSONRenderer \nfrom rest_framework.parsers import JSONParser \nfrom games.models import Game \nfrom games.serializers import GameSerializer \n\n```", "```py\ngamedatetime = timezone.make_aware(datetime.now(), timezone.get_current_timezone()) \ngame1 = Game(name='Smurfs Jungle', release_date=gamedatetime, game_category='2D mobile arcade', played=False) \ngame1.save() \ngame2 = Game(name='Angry Birds RPG', release_date=gamedatetime, game_category='3D RPG', played=False) \ngame2.save() \n\n```", "```py\nprint(game1.pk) \nprint(game1.name) \nprint(game1.created) \nprint(game2.pk) \nprint(game2.name) \nprint(game2.created) \n\n```", "```py\ngame_serializer1 = GameSerializer(game1) \nprint(game_serializer1.data) \n\n```", "```py\n{'release_date': '2016-05-18T03:02:00.776594Z', 'game_category': '2D mobile arcade', 'played': False, 'pk': 2, 'name': 'Smurfs Jungle'} \n\n```", "```py\ngame_serializer2 = GameSerializer(game2) \nprint(game_serializer2.data) \n\n```", "```py\n{'release_date': '2016-05-18T03:02:00.776594Z', 'game_category': '3D RPG', 'played': False, 'pk': 3, 'name': 'Angry Birds RPG'} \n\n```", "```py\nrenderer = JSONRenderer() \nrendered_game1 = renderer.render(game_serializer1.data) \nrendered_game2 = renderer.render(game_serializer2.data) \nprint(rendered_game1) \nprint(rendered_game2) \n\n```", "```py\nb'{\"pk\":2,\"name\":\"Smurfs Jungle\",\"release_date\":\"2016-05-\n    18T03:02:00.776594Z\",\"game_category\":\"2D mobile arcade\",\"played\":false}'\nb'{\"pk\":3,\"name\":\"Angry Birds RPG\",\"release_date\":\"2016-05-\n18T03:02:00.776594Z\",\"game_category\":\"3D RPG\",\"played\":false}'\n```", "```py\njson_string_for_new_game = '{\"name\":\"Tomb Raider Extreme Edition\",\"release_date\":\"2016-05-18T03:02:00.776594Z\",\"game_category\":\"3D RPG\",\"played\":false}' \njson_bytes_for_new_game = bytes(json_string_for_new_game , encoding=\"UTF-8\") \nstream_for_new_game = BytesIO(json_bytes_for_new_game) \nparser = JSONParser() \nparsed_new_game = parser.parse(stream_for_new_game) \nprint(parsed_new_game) \n\n```", "```py\n{'release_date': '2016-05-18T03:02:00.776594Z', 'played': False,\n    'game_category': '3D RPG', 'name': 'Tomb Raider Extreme Edition'}\n```", "```py\nnew_game_serializer = GameSerializer(data=parsed_new_game) \nif new_game_serializer.is_valid(): \n    new_game = new_game_serializer.save() \n    print(new_game.name) \n\n```", "```py\nquit() \n\n```", "```py\nfrom django.shortcuts import render \n\n# Create your views here. \n\n```", "```py\nfrom django.http import HttpResponse \nfrom django.views.decorators.csrf import csrf_exempt \nfrom rest_framework.renderers import JSONRenderer \nfrom rest_framework.parsers import JSONParser \nfrom rest_framework import status \nfrom games.models import Game \nfrom games.serializers import GameSerializer \n\nclass JSONResponse(HttpResponse): \n    def __init__(self, data, **kwargs): \n        content = JSONRenderer().render(data) \n        kwargs['content_type'] = 'application/json' \n        super(JSONResponse, self).__init__(content, **kwargs) \n\n@csrf_exempt \ndef game_list(request): \n    if request.method == 'GET': \n        games = Game.objects.all() \n        games_serializer = GameSerializer(games, many=True) \n        return JSONResponse(games_serializer.data) \n\n    elif request.method == 'POST': \n        game_data = JSONParser().parse(request) \n        game_serializer = GameSerializer(data=game_data) \n        if game_serializer.is_valid(): \n            game_serializer.save() \n            return JSONResponse(game_serializer.data,\n            status=status.HTTP_201_CREATED) \n        return JSONResponse(game_serializer.errors,\n        status=status.HTTP_400_BAD_REQUEST) \n\n@csrf_exempt \ndef game_detail(request, pk): \n    try: \n        game = Game.objects.get(pk=pk) \n    except Game.DoesNotExist: \n        return HttpResponse(status=status.HTTP_404_NOT_FOUND) \n\n    if request.method == 'GET': \n        game_serializer = GameSerializer(game) \n        return JSONResponse(game_serializer.data) \n\n    elif request.method == 'PUT': \n        game_data = JSONParser().parse(request) \n        game_serializer = GameSerializer(game, data=game_data) \n        if game_serializer.is_valid(): \n            game_serializer.save() \n            return JSONResponse(game_serializer.data) \n        return JSONResponse(game_serializer.errors,\n        status=status.HTTP_400_BAD_REQUEST) \n\n    elif request.method == 'DELETE': \n        game.delete() \n        return HttpResponse(status=status.HTTP_204_NO_CONTENT) \n\n```", "```py\nfrom django.conf.urls import url \nfrom games import views \n\nurlpatterns = [ \n    url(r'^games/$', views.game_list), \n    url(r'^games/(?P<pk>[0-9]+)/$', views.game_detail), \n] \n\n```", "```py\nfrom django.conf.urls import url, include \n\nurlpatterns = [ \n    url(r'^', include('games.urls')), \n] \n\n```", "```py\npython manage.py runserver\n```", "```py\nPerforming system checks...\nSystem check identified no issues (0 silenced).\nMay 20, 2016 - 04:22:38\nDjango version 1.9.6, using settings 'gamesapi.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n```", "```py\npython manage.py runserver 0.0.0.0:8000\n```", "```py\ncurl -X GET :8000/games/\n```", "```py\n[{\"pk\":3,\"name\":\"Angry Birds RPG\",\"release_date\":\"2016-05-18T03:02:00.776594Z\",\"game_category\":\"3D RPG\",\"played\":false},{\"pk\":2,\"name\":\"Smurfs Jungle\",\"release_date\":\"2016-05-18T03:02:00.776594Z\",\"game_category\":\"2D mobile arcade\",\"played\":false},{\"pk\":11,\"name\":\"Tomb Raider Extreme Edition\",\"release_date\":\"2016-05-18T03:02:00.776594Z\",\"game_category\":\"3D RPG\",\"played\":false}]\n```", "```py\ncurl -iX GET :8000/games/\n```", "```py\nHTTP/1.0 200 OK\nDate: Tue, 24 May 2016 18:04:40 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nContent-Type: application/json\nX-Frame-Options: SAMEORIGIN\n[{\"pk\":3,\"name\":\"Angry Birds RPG\",\"release_date\":\"2016-05-18T03:02:00.776594Z\",\"game_category\":\"3D RPG\",\"played\":false},{\"pk\":2,\"name\":\"Smurfs Jungle\",\"release_date\":\"2016-05-18T03:02:00.776594Z\",\"game_category\":\"2D mobile arcade\",\"played\":false},{\"pk\":11,\"name\":\"Tomb Raider Extreme Edition\",\"release_date\":\"2016-05-18T03:02:00.776594Z\",\"game_category\":\"3D RPG\",\"played\":false}]\n```", "```py\n[25/May/2016 04:35:09] \"GET /games/ HTTP/1.1\" 200 379\n[25/May/2016 04:35:10] \"GET /games/ HTTP/1.1\" 200 379\n```", "```py\npip install --upgrade httpie\n```", "```py\nCollecting httpie\n Downloading httpie-0.9.3-py2.py3-none-any.whl (66kB)\nCollecting requests>=2.3.0 (from httpie)\n Using cached requests-2.10.0-py2.py3-none-any.whl\nCollecting Pygments>=1.5 (from httpie)\n Using cached Pygments-2.1.3-py2.py3-none-any.whl\nInstalling collected packages: requests, Pygments, httpie\nSuccessfully installed Pygments-2.1.3 httpie-0.9.3 requests-2.10.0\n```", "```py\nhttp :8000/games/\n```", "```py\nhttp GET :8000/games/\n```", "```py\nHTTP/1.0 200 OK\nContent-Type: application/json\nDate: Thu, 26 May 2016 21:33:17 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nX-Frame-Options: SAMEORIGIN\n[\n {\n \"game_category\": \"3D RPG\",\n \"name\": \"Angry Birds RPG\",\n \"pk\": 3,\n \"played\": false,\n \"release_date\": \"2016-05-18T03:02:00.776594Z\"\n },\n {\n \"game_category\": \"2D mobile arcade\",\n \"name\": \"Smurfs Jungle\",\n \"pk\": 2,\n \"played\": false,\n \"release_date\": \"2016-05-18T03:02:00.776594Z\"\n },\n {\n \"game_category\": \"3D RPG\",\n \"name\": \"Tomb Raider Extreme Edition\",\n \"pk\": 11,\n \"played\": false,\n \"release_date\": \"2016-05-18T03:02:00.776594Z\"\n }\n]\n```", "```py\nhttp -b :8000/games/\n```", "```py\nhttp :8000/games/3/\n```", "```py\ncurl -iX GET :8000/games/3/\n```", "```py\nHTTP/1.0 200 OK\nContent-Type: application/json\nDate: Fri, 27 May 2016 02:28:30 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nX-Frame-Options: SAMEORIGIN\n{\n \"game_category\": \"3D RPG\",\n \"name\": \"Angry Birds RPG\",\n \"pk\": 3,\n \"played\": false,\n \"release_date\": \"2016-05-18T03:02:00.776594Z\"\n}\n```", "```py\nhttp :8000/games/99999/\n```", "```py\ncurl -iX GET :8000/games/99999/\n```", "```py\nHTTP/1.0 404 Not Found\nContent-Type: text/html; charset=utf-8\nDate: Fri, 27 May 2016 02:20:41 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nX-Frame-Options: SAMEORIGIN\n```", "```py\nhttp POST :8000/games/ name='PvZ 3' game_category='2D mobile arcade' played=false release_date='2016-05-18T03:02:00.776594Z'\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"PvZ 3\", \"game_category\":\"2D mobile arcade\", \"played\": \"false\", \"release_date\": \"2016-05-18T03:02:00.776594Z\"}' :8000/games/\n```", "```py\n{  \n    \"name\": \"PvZ 3\",  \n    \"game_category\": \"2D mobile arcade\",  \n    \"played\": false,  \n    \"release_date\": \"2016-05-18T03:02:00.776594Z\" \n} \n\n```", "```py\nHTTP/1.0 201 Created\nContent-Type: application/json\nDate: Fri, 27 May 2016 05:12:39 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nX-Frame-Options: SAMEORIGIN\n{\n \"game_category\": \"2D mobile arcade\",\n \"name\": \"PvZ 3\",\n \"pk\": 15,\n \"played\": false,\n \"release_date\": \"2016-05-18T03:02:00.776594Z\"\n}\n```", "```py\nhttp PUT :8000/games/15/ name='PvZ 3' game_category='2D mobile arcade' played=true release_date='2016-05-20T03:02:00.776594Z'\n```", "```py\ncurl -iX PUT -H \"Content-Type: application/json\" -d '{\"name\":\"PvZ 3\", \"game_category\":\"2D mobile arcade\", \"played\": \"true\", \"release_date\": \"2016-05-20T03:02:00.776594Z\"}' :8000/games/15/\n```", "```py\n{  \n    \"name\": \"PvZ 3\",  \n    \"game_category\": \"2D mobile arcade\",  \n    \"played\": true,  \n    \"release_date\": \"2016-05-20T03:02:00.776594Z\" \n} \n\n```", "```py\nHTTP/1.0 200 OK\nContent-Type: application/json\nDate: Sat, 28 May 2016 00:49:05 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nX-Frame-Options: SAMEORIGIN\n{\n \"game_category\": \"2D mobile arcade\",\n \"name\": \"PvZ 3\",\n \"pk\": 15,\n \"played\": true,\n \"release_date\": \"2016-05-20T03:02:00.776594Z\"\n}\n```", "```py\nhttp PUT :8000/games/15/ name='PvZ 4'\n```", "```py\ncurl -iX PUT -H \"Content-Type: application/json\" -d '{\"name\":\"PvZ 4\"}'\n    :8000/games/15/\n```", "```py\n{  \n    \"name\": \"PvZ 4\",  \n} \n\n```", "```py\nHTTP/1.0 400 Bad Request\nContent-Type: application/json\nDate: Sat, 28 May 2016 02:53:08 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nX-Frame-Options: SAMEORIGIN\n{\n \"game_category\": [\n \"This field is required.\"\n ],\n \"release_date\": [\n \"This field is required.\"\n ]\n}\n```", "```py\nhttp DELETE :8000/games/15/\n```", "```py\ncurl -iX DELETE :8000/games/15/\n```", "```py\nHTTP/1.0 204 No Content\nDate: Sat, 28 May 2016 04:08:58 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nContent-Length: 0\nX-Frame-Options: SAMEORIGIN\nContent-Type: text/html; charset=utf-8\n```", "```py\n{ \n    \"name\": \"Batman vs Superman\",  \n    \"game_category\": \"3D RPG\",  \n    \"played\": false,  \n    \"release_date\": \"2016-05-18T03:02:00.776594Z\" \n} \n\n```", "```py\n{ \n    \"name\": \"Teenage Mutant Ninja Turtles\",  \n    \"game_category\": \"3D RPG\",  \n    \"played\": false,  \n    \"release_date\": \"2016-05-18T03:02:00.776594Z\" \n} \n\n```", "```py\nhttp POST :8000/games/ name='Teenage Mutant Ninja Turtles' game_category='3D RPG' played=false release_date='2016-05-18T03:02:00.776594Z'\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\": \"Teenage\nMutant Ninja Turtles\", \"game_category\": \"3D RPG\", \"played\": \"false\",\n\"release_date\": \"2016-05-18T03:02:00.776594Z\"}' :8000/games/\n```"]