- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile applications ceased to be the "new hotness" a long time ago, and these
    days users routinely expect that new software—be it a videogame or a social network—has
    a mobile version. Similar trend affects desktop operating systems; writing cross-platform
    software, once uncommon, has swiftly become a norm. Even game developers, usually
    limited to Microsoft operating systems on desktop, can be seen working on Mac
    and Linux ports for many new titles (for example, Steam, at the time of writing,
    hosts more than a hundred games that run on Mac and more than 50 that run on Linux).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is especially valuable for start-ups and indie developers: building truly
    cross-platform software widens the potential audience, which leads to increased
    sales and may create good press along the way.'
  prefs: []
  type: TYPE_NORMAL
- en: On the downside, writing portable software can be a very resource-hungry process,
    and this also affects small developers much more than big corporations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, many platforms have a preferred programming language and **software
    development kit** (**SDK**): iOS apps are mostly written in Objective-C and Swift,
    Android suggests the subpar Java programming language, and Microsoft promotes
    the use of the .NET framework, especially C#, for building Windows software.'
  prefs: []
  type: TYPE_NORMAL
- en: Employing these tools allows you to leverage the native user interface and underlying
    functionality of an OS, but it also automatically prevents code reuse. This means
    that even if you are equally proficient in all programming languages and interfaces
    involved, porting the code may still take a non-trivial amount of time and introduce
    new bugs.
  prefs: []
  type: TYPE_NORMAL
- en: Write once, run anywhere
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This whole situation creates a demand for a universal, multi-platform way to
    program. The problem isn''t exactly new: one solution to it, created by Sun in
    1995, is the Java programming language. Its marketing promise—*write once, run
    anywhere*—was never fulfilled and the language itself is unreasonably cumbersome
    to use. This led to many mocking variations of the slogan, culminating with *write
    once, run away* that refers to many developers abandoning Java in favor of better
    programming languages, including Python.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Not coincidentally, Kivy—the main topic of this book—is a graphical user interface
    library facilitating easy creation of multi-platform Python applications. The
    main features of Kivy toolkit are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compatibility**: Kivy-based apps work in Linux, Mac OS X, Windows, Android,
    and iOS—all from a single codebase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Natural user interface**: Kivy bridges the gap between different input methods,
    allowing you to handle a multitude of possible user interactions with similar
    code, mouse events and multitouch gestures alike.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fast hardware-accelerated graphics**: OpenGL rendering makes Kivy suitable
    for creating graphics-heavy applications such as videogames, and also improves
    the user experience with smooth transitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The use of Python**: Kivy apps are written in Python, one of the better general
    purpose programming languages. In addition to being inherently portable, expressive,
    and readable, Python features a useful standard library and a rich ecosystem of
    third-party packages, the **Python Package Index** (**PyPI**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Speaking of third-party packages, Kivy can be seen as a superset of many battle-tested
    components: a large part of its functionality relies on well-known libraries such
    as Pygame, SDL, and GStreamer. The API that Kivy exposes, however, is very high-level
    and unified.'
  prefs: []
  type: TYPE_NORMAL
- en: It's worth mentioning that Kivy is free and open source MIT licensed software.
    In practice, this means that you can use it commercially without paying licensing
    fees. Its full source code is hosted on GitHub, so you can also patch bugs or
    add new features to it.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Building a Clock App"), *Building a Clock
    App* provides a gentle introduction to writing applications with Kivy. It covers
    the Kivy language, layouts, widgets and timers. By the end of the chapter we build
    a simple Clock app, similar to the one found in your cellphone.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Building a Paint App"), *Building a Paint
    App* is a further exploration of the Kivy framework''s components and functionality.
    The resulting Paint app showcases the customization of built-in widgets, drawing
    arbitrary shapes on canvas and handling multi-touch events.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Sound Recorder for Android"), *Sound Recorder
    for Android* serves as an example of writing a Kivy-based Android app. It shows
    how to use the Pyjnius interoperability layer to load Java classes into Python,
    which enables us to mix Android API calls with a Kivy-based user interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Kivy Networking"), *Kivy Networking* is a
    hands-on guide to building a network application from the ground up. In covers
    a number of topics, from creating a simple protocol to writing server and client
    software in Python, and culminates with the Kivy Chat application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Making a Remote Desktop App"), *Making a
    Remote Desktop App* exemplifies another way of writing client-server apps. This
    chapter''s program is based on the HTTP protocol—the one that powers the Internet.
    We develop a command-line HTTP server first, and then build the Remote Desktop
    client app with Kivy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Making the 2048 Game"), *Making the 2048
    Game* walks you through building a playable replica of the 2048 game. We demonstrate
    more complex Kivy functionality, such as creating custom widgets, using Kivy properties
    for data binding, and processing touch screen gestures.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Writing a Flappy Bird Clone"), *Writing a
    Flappy Bird Clone* introduces another Kivy-based game, this time it''s an arcade
    game similar to the well-known Flappy Bird title. Over the course of this chapter
    we discuss the use of texture coordinates and sounds effects, implement arcade
    physics and collision detection.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Introducing Shaders"), *Introducing Shaders*
    demonstrates the use of GLSL shaders in the context of a Kivy application. In
    this tutorial you will learn about OpenGL primitives such as indices and vertices,
    and then write incredibly fast low-level code that runs directly on the GPU.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Making a Shoot-Em-Up Game"), *Making a Shoot-Em-Up
    Game* continues where the previous chapter left off: we use the knowledge of GLSL
    in order to build a side-scrolling shooter. A reusable particle system class is
    developed along the way. This project concludes the series and capitalizes on
    many techniques that were explained throughout the book, such as collision detection,
    touch screen controls, sound effects and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix](apa.html "Appendix A. The Python Ecosystem"), *The Python Ecosystem*,
    gives you more on Python libraries and tools.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the working environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section briefly discusses the requirements needed to effectively follow
    the narrative, implement, and run Kivy applications. Personal computer running
    a modern operating system—a Mac, Linux, or Windows box—is implied.
  prefs: []
  type: TYPE_NORMAL
- en: A note on Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python is the primary programming language used in the book; good knowledge
    of it, while not strictly necessary, may help.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, there are two incompatible versions of Python in wide
    use. Python 2.7 is monumentally stable but no longer actively developed, and Python
    3 is a newer and slightly more controversial version bringing many improvements
    to the language, but occasionally breaking compatibility along the way.
  prefs: []
  type: TYPE_NORMAL
- en: The code in this book should largely work in both Python versions, but it may
    need minor adjustments to be fully compatible with Python 3; for best results,
    it's recommended that you use Python 2.7, or the latest Python 2 version available
    for your system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Installing Python separately for Kivy development is not necessary on most
    platforms: it either comes preinstalled (Mac OS X), bundled with Kivy (MS Windows),
    or included as a dependency (Linux, Ubuntu in particular).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and running Kivy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kivy can be downloaded from the official site ([http://kivy.org/](http://kivy.org/));
    just choose an appropriate version and follow the instructions. This whole procedure
    should be pretty straightforward and simple.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and running Kivy](img/7849OS_Preface_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Kivy downloads
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether the installation is working, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Mac:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open **Terminal.app**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `kivy`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The Python prompt, `>>>`, should appear. Type `import kivy`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The command should complete with no errors, printing a message along the lines
    of `[INFO] Kivy v1.8.0`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On a Linux machine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open a terminal.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `python`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The Python prompt, `>>>`, should appear. Type `import kivy`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The command should print a message similar to `[INFO] Kivy v1.8.0`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On a Windows box:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-click **kivy.bat** inside the Kivy package directory.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `python` at the command prompt.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `import kivy`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The command should print a message similar to `[INFO] Kivy v1.8.0`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Installing and running Kivy](img/7849OS_Preface_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: A terminal session
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Running a Kivy application (basically, a Python program) is achieved similarly:'
  prefs: []
  type: TYPE_NORMAL
- en: On a Mac, use `kivy main.py`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Linux, use `python main.py`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, use `kivy.bat main.py` (or drag-and-drop the **main.py** file on
    top of **kivy.bat**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note on coding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Programming typically amounts to working with text a lot; hence, it's important
    to choose a good text editor. This is why I profoundly recommend trying Vim before
    you consider other options.
  prefs: []
  type: TYPE_NORMAL
- en: Vim is one of the better text editors largely available; it's highly configurable
    and built specifically for effective text editing (way more so than a typical
    alternative). Vim has a vibrant community, is actively maintained, and comes preinstalled
    with many Unix-like operating systems—including Mac OS X and Linux. It is known
    that (at least some) developers of the Kivy framework also prefer Vim.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some quick Kivy-related tips for Vim users out there:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python-mode** ([https://github.com/klen/python-mode](https://github.com/klen/python-mode))
    is great for writing Python code. It throws in a lot of extra functionality, such
    as stylistic and static checker, smart completion, and support for refactoring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source code of GLSL shaders can be properly highlighted using the `vim-glsl`
    syntax ([https://github.com/tikhomirov/vim-glsl](https://github.com/tikhomirov/vim-glsl)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kivy texture maps (the `.atlas` files, covered in [Chapter 8](ch08.html "Chapter 8. Introducing
    Shaders"), *Introducing Shaders*) are basically JSON, so you can use, for example,
    **vim-json** ([https://github.com/elzr/vim-json](https://github.com/elzr/vim-json)),
    and add a file association to your `.vimrc` file like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Kivy layout files, `.kv`, are slightly more complicated to handle as they''re
    similar to Python, but don''t really parse as Python. There is an incomplete Vim
    plugin in the Kivy repository, but at the time of writing, Vim''s built-in **YAML**
    support highlights these files better (this obviously might change in future).
    To load `.kv` files as YAML, add the following line to your `.vimrc` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clearly, you are not *obliged* to use Vim to follow examples of this book—this
    is but a mere suggestion. Now let's write a bit of code, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: Hello, Kivy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When learning a new programming language or technology, the first thing demonstrated
    to students is traditionally a "hello, world" program. This is how it looks in
    Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The Kivy version of a "hello, world" is a little lengthier and consists of two
    files, namely, a Python module and a `.kv` layout definition.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Kivy application''s entry point is customarily called `main.py`, and its
    contents are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this takes Kivy's `App` class, adds absolutely nothing to it,
    and calls `run()`.
  prefs: []
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A layout file is typically named after the application class, in this case
    `HelloApp`, sans the `App` suffix and in lowercase: `hello.kv`. It contains the
    following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is a very simple Kivy layout definition consisting of a single widget,
    `Label`, with the desired text inside. Layout files allow building complex widget
    hierarchies in a concise, declarative fashion, which is clearly not displayed
    here, but will be heavily used over the course of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the program now (refer to the *Installing and running Kivy* section
    for details), this is what we''ll get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Layout](img/7849OS_Preface_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our first application powered by Kivy
  prefs: []
  type: TYPE_NORMAL
- en: Now you're ready to move on to the first chapter and start writing real programs.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for programmers who are comfortable with the Python language
    and who want to build desktop and mobile applications with a rich graphical user
    interface in Python with minimal hassle. Knowledge of Kivy, while certainly won't
    hurt, is not required—every aspect of the framework is described when it's first
    used.
  prefs: []
  type: TYPE_NORMAL
- en: At various points in this book, we will make an analogy between Kivy and web
    development practices. However, an extensive knowledge of the latter also isn't
    required to follow the narrative.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Kivy
    application''s entry point is customarily called `main.py`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "The first event handler is for the **Start** and **Stop** buttons."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply e-mail `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book's title in the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you. Another option of getting
    the up-to-date source code is by cloning the GitHub repository, [https://github.com/mvasilkov/kb](https://github.com/mvasilkov/kb).
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the color images of this book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We also provide you with a PDF file that has color images of the screenshots/diagrams
    used in this book. The color images will help you better understand the changes
    in the output. You can download this file from: [http://www.packtpub.com/sites/default/files/downloads/7849OS_ColorImages.pdf](http://www.packtpub.com/sites/default/files/downloads/7849OS_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  prefs: []
  type: TYPE_NORMAL
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the **Errata** section.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a problem with any aspect of this book, you can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`,
    and we will do our best to address the problem.
  prefs: []
  type: TYPE_NORMAL
