["```py\n    >>> o = object()\n    >>> o.x = 5\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    AttributeError: 'object' object has no attribute 'x'  \n```", "```py\nclass MyObject: \n    pass \n```", "```py\n>>> m = MyObject()\n>>> m.x = \"hello\"\n>>> m.x\n'hello'  \n```", "```py\n>>> stock = \"FB\", 177.46, 178.67, 175.79\n>>> stock2 = (\"FB\", 177.46, 178.67, 175.79)\n```", "```py\nimport datetime\n\ndef middle(stock, date):\n symbol, current, high, low = stock\n    return (((high + low) / 2), date)\n\nmid_value, date = middle(\n    (\"FB\", 177.46, 178.67, 175.79), datetime.date(2018, 8, 27)\n)\n```", "```py\n>>> stock = \"FB\", 75.00, 75.03, 74.90\n>>> high = stock[2]\n>>> high\n75.03  \n```", "```py\n>>> stock[1:3]\n(75.00, 75.03)  \n```", "```py\nfrom collections import namedtuple \nStock = namedtuple(\"Stock\", [\"symbol\", \"current\", \"high\", \"low\"])\nstock = Stock(\"FB\", 177.46, high=178.67, low=175.79) \n```", "```py\n>>> stock.high\n175.79\n>>> symbol, current, high, low = stock\n>>> current\n177.46  \n```", "```py\n>>> stock.current = 74.98\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nAttributeError: can't set attribute  \n```", "```py\nfrom dataclasses import make_dataclass\nStock = make_dataclass(\"Stock\", \"symbol\", \"current\", \"high\", \"low\")\nstock = Stock(\"FB\", 177.46, high=178.67, low=175.79)\n```", "```py\n>>> stock\nStock(symbol='FB', current=177.46, high=178.67, low=175.79)\n>>> stock.current\n177.46\n>>> stock.current=178.25\n>>> stock\nStock(symbol='FB', current=178.25, high=178.67, low=175.79)\n>>> stock.unexpected_attribute = 'allowed'\n>>> stock.unexpected_attribute\n'allowed'\n```", "```py\nclass StockRegClass:\n    def __init__(self, name, current, high, low):\n        self.name = name\n        self.current = current\n        self.high = high\n        self.low = low\n\nstock_reg_class = Stock(\"FB\", 177.46, high=178.67, low=175.79)\n```", "```py\n>>> stock_reg_class\n<__main__.Stock object at 0x7f506bf4ec50>\n>>> stock_reg_class2 = StockRegClass(\"FB\", 177.46, 178.67, 175.79)\n>>> stock_reg_class2 == stock_reg_class\nFalse\n>>> stock2 = Stock(\"FB\", 177.46, 178.67, 175.79)\n>>> stock2 == stock\nTrue \n```", "```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass StockDecorated:\n    name: str\n    current: float\n    high: float\n    low: float\n```", "```py\n@dataclass\nclass StockDefaults:\n    name: str\n    current: float = 0.0\n    high: float = 0.0\n    low: float = 0.0\n```", "```py\n>>> StockDefaults('FB')\nStockDefaults(name='FB', current=0.0, high=0.0, low=0.0)\n>>> StockDefaults('FB', 177.46, 178.67, 175.79)\nStockDefaults(name='FB', current=177.46, high=178.67, low=175.79) \n```", "```py\n@dataclass(order=True)\nclass StockOrdered:\n    name: str\n    current: float = 0.0\n    high: float = 0.0\n    low: float = 0.0\n\nstock_ordered1 = StockDecorated(\"FB\", 177.46, high=178.67, low=175.79)\nstock_ordered2 = StockOrdered(\"FB\")\nstock_ordered3 = StockDecorated(\"FB\", 178.42, high=179.28, low=176.39)\n```", "```py\n>>> stock_ordered1 < stock_ordered2\nFalse\n>>> stock_ordered1 > stock_ordered2\nTrue\n>>> from pprint import pprint\n>>> pprint(sorted([stock_ordered1, stock_ordered2, stock_ordered3]))\n[StockOrdered(name='FB', current=0.0, high=0.0, low=0.0),\n StockOrdered(name='FB', current=177.46, high=178.67, low=175.79),\n StockOrdered(name='FB', current=178.42, high=179.28, low=176.39)] \n```", "```py\nstocks = {\n    \"GOOG\": (1235.20, 1242.54, 1231.06),\n    \"MSFT\": (110.41, 110.45, 109.84),\n}\n```", "```py\n>>> stocks[\"GOOG\"]\n(1235.20, 1242.54, 1231.06)\n>>> stocks[\"RIM\"]\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nKeyError: 'RIM'  \n```", "```py\n>>> print(stocks.get(\"RIM\"))\nNone\n>>> stocks.get(\"RIM\", \"NOT FOUND\")\n'NOT FOUND'  \n```", "```py\n>>> stocks.setdefault(\"GOOG\", \"INVALID\")\n(613.3, 625.86, 610.5)\n>>> stocks.setdefault(\"BBRY\", (10.87, 10.76, 10.90))\n(10.50, 10.62, 10.39)\n>>> stocks[\"BBRY\"]\n(10.50, 10.62, 10.39)  \n```", "```py\n>>> for stock, values in stocks.items():\n... print(f\"{stock} last value is {values[0]}\")\n...\nGOOG last value is 1235.2\nMSFT last value is 110.41\nBBRY last value is 10.5\n```", "```py\n>>> stocks[\"GOOG\"] = (1245.21, 1252.64, 1245.18)\n>>> stocks['GOOG']\n(1245.21, 1252.64, 1245.18)\n```", "```py\nrandom_keys = {} \nrandom_keys[\"astring\"] = \"somestring\" \nrandom_keys[5] = \"aninteger\" \nrandom_keys[25.2] = \"floats work too\" \nrandom_keys[(\"abc\", 123)] = \"so do tuples\" \n\nclass AnObject: \n    def __init__(self, avalue): \n        self.avalue = avalue \n\nmy_object = AnObject(14) \nrandom_keys[my_object] = \"We can even store objects\" \nmy_object.avalue = 12 \ntry: \n    random_keys[[1,2,3]] = \"we can't store lists though\" \nexcept: \n    print(\"unable to store list\\n\") \n\nfor key, value in random_keys.items(): \n    print(\"{} has value {}\".format(key, value)) \n```", "```py\ndef letter_frequency(sentence): \n    frequencies = {} \n    for letter in sentence: \n        frequency = frequencies.setdefault(letter, 0) \n        frequencies[letter] = frequency + 1 \n    return frequencies \n```", "```py\nfrom collections import defaultdict \ndef letter_frequency(sentence): \n frequencies = defaultdict(int) \n    for letter in sentence: \n        frequencies[letter] += 1 \n    return frequencies \n```", "```py\nfrom collections import defaultdict\n\nnum_items = 0 \n\ndef tuple_counter(): \n    global num_items \n    num_items += 1 \n    return (num_items, []) \n\nd = defaultdict(tuple_counter) \n```", "```py\n>>> d = defaultdict(tuple_counter)\n>>> d['a'][1].append(\"hello\")\n>>> d['b'][1].append('world')\n>>> d\ndefaultdict(<function tuple_counter at 0x82f2c6c>,\n{'a': (1, ['hello']), 'b': (2, ['world'])})  \n```", "```py\nfrom collections import Counter \ndef letter_frequency(sentence): \n return Counter(sentence) \n```", "```py\nfrom collections import Counter \n\nresponses = [ \n    \"vanilla\", \n    \"chocolate\", \n    \"vanilla\", \n    \"vanilla\", \n    \"caramel\", \n    \"strawberry\", \n    \"vanilla\" \n] \n\nprint( \n    \"The children voted for {} ice cream\".format( \n Counter(responses).most_common(1)[0][0] \n    ) \n) \n```", "```py\nimport string \nCHARACTERS  = list(string.ascii_letters) + [\" \"] \n\ndef letter_frequency(sentence): \n    frequencies = [(c, 0) for c in CHARACTERS] \n    for letter in sentence: \n        index = CHARACTERS.index(letter) \n        frequencies[index] = (letter,frequencies[index][1]+1) \n    return frequencies \n```", "```py\nclass WeirdSortee:\n    def __init__(self, string, number, sort_num):\n        self.string = string\n        self.number = number\n        self.sort_num = sort_num\n\n def __lt__(self, object):\n        if self.sort_num:\n            return self.number < object.number\n        return self.string < object.string\n\n    def __repr__(self):\n        return f\"{self.string}:{self.number}\"\n\n```", "```py\n>>> a = WeirdSortee('a', 4, True)\n>>> b = WeirdSortee('b', 3, True)\n>>> c = WeirdSortee('c', 2, True)\n>>> d = WeirdSortee('d', 1, True)\n>>> l = [a,b,c,d]\n>>> l\n[a:4, b:3, c:2, d:1]\n>>> l.sort()\n>>> l\n[d:1, c:2, b:3, a:4]\n>>> for i in l:\n...     i.sort_num = False\n...\n>>> l.sort()\n>>> l\n[a:4, b:3, c:2, d:1]  \n```", "```py\nfrom functools import total_ordering \n\n@total_ordering \nclass WeirdSortee: \n    def __init__(self, string, number, sort_num): \n        self.string = string \n        self.number = number \n        self.sort_num = sort_num \n\n def __lt__(self, object): \n        if self.sort_num: \n            return self.number < object.number \n        return self.string < object.string \n\n    def __repr__(self): \n        return f\"{self.string}:{self.number}\"\n\n def __eq__(self, object): \n        return all(( \n            self.string == object.string, \n            self.number == object.number, \n            self.sort_num == object.number \n        )) \n```", "```py\n>>> l = [\"hello\", \"HELP\", \"Helo\"]\n>>> l.sort()\n>>> l\n['HELP', 'Helo', 'hello']\n>>> l.sort(key=str.lower)\n>>> l\n['hello', 'Helo', 'HELP']  \n```", "```py\n>>> from operator import itemgetter\n>>> l = [('h', 4), ('n', 6), ('o', 5), ('p', 1), ('t', 3), ('y', 2)]\n>>> l.sort(key=itemgetter(1))\n>>> l\n[('p', 1), ('y', 2), ('t', 3), ('h', 4), ('o', 5), ('n', 6)]  \n```", "```py\nsong_library = [\n    (\"Phantom Of The Opera\", \"Sarah Brightman\"),\n    (\"Knocking On Heaven's Door\", \"Guns N' Roses\"),\n    (\"Captain Nemo\", \"Sarah Brightman\"),\n    (\"Patterns In The Ivy\", \"Opeth\"),\n    (\"November Rain\", \"Guns N' Roses\"),\n    (\"Beautiful\", \"Sarah Brightman\"),\n    (\"Mal's Song\", \"Vixy and Tony\"),\n]\n\nartists = set()\nfor song, artist in song_library:\n    artists.add(artist)\n\nprint(artists)\n```", "```py\n{'Sarah Brightman', \"Guns N' Roses\", 'Vixy and Tony', 'Opeth'}  \n```", "```py\n>>> \"Opeth\" in artists\nTrue\n>>> for artist in artists:\n...     print(\"{} plays good music\".format(artist))\n...\nSarah Brightman plays good music\nGuns N' Roses plays good music\nVixy and Tony play good music\nOpeth plays good music\n>>> alphabetical = list(artists)\n>>> alphabetical.sort()\n>>> alphabetical\n[\"Guns N' Roses\", 'Opeth', 'Sarah Brightman', 'Vixy and Tony']  \n```", "```py\nfirst_artists = {\n    \"Sarah Brightman\",\n    \"Guns N' Roses\",\n    \"Opeth\",\n    \"Vixy and Tony\",\n}\n\nsecond_artists = {\"Nickelback\", \"Guns N' Roses\", \"Savage Garden\"}\n\nprint(\"All: {}\".format(first_artists.union(second_artists)))\nprint(\"Both: {}\".format(second_artists.intersection(first_artists)))\nprint(\n    \"Either but not both: {}\".format(\n        first_artists.symmetric_difference(second_artists)\n    )\n)\n\n```", "```py\nAll: {'Sarah Brightman', \"Guns N' Roses\", 'Vixy and Tony',\n'Savage Garden', 'Opeth', 'Nickelback'}\nBoth: {\"Guns N' Roses\"}\nEither but not both: {'Savage Garden', 'Opeth', 'Nickelback',\n'Sarah Brightman', 'Vixy and Tony'}  \n```", "```py\nfirst_artists = {\"Sarah Brightman\", \"Guns N' Roses\", \n        \"Opeth\", \"Vixy and Tony\"} \n\nbands = {\"Guns N' Roses\", \"Opeth\"} \n\nprint(\"first_artists is to bands:\") \nprint(\"issuperset: {}\".format(first_artists.issuperset(bands))) \nprint(\"issubset: {}\".format(first_artists.issubset(bands))) \nprint(\"difference: {}\".format(first_artists.difference(bands))) \nprint(\"*\"*20) \nprint(\"bands is to first_artists:\") \nprint(\"issuperset: {}\".format(bands.issuperset(first_artists))) \nprint(\"issubset: {}\".format(bands.issubset(first_artists))) \nprint(\"difference: {}\".format(bands.difference(first_artists))) \n```", "```py\nfirst_artists is to bands:\nissuperset: True\nissubset: False\ndifference: {'Sarah Brightman', 'Vixy and Tony'}\n********************\nbands is to first_artists:\nissuperset: False\nissubset: True\ndifference: set()  \n```", "```py\nc = a + b \nc = a.add(b) \n\nl[0] = 5 \nl.setitem(0, 5) \nd[key] = value \nd.setitem(key, value) \n\nfor x in alist: \n    #do something with x \nit = alist.iterator() \nwhile it.has_next(): \n    x = it.next() \n    #do something with x \n```", "```py\nclass SillyInt(int): \n    def __add__(self, num): \n        return 0 \n```", "```py\n>>> a = SillyInt(1)\n>>> b = SillyInt(2)\n>>> a + b\n0  \n```", "```py\n>>> dir(list)\n\n['__add__', '__class__', '__contains__', '__delattr__','__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'  \n```", "```py\n>>> help(list.__add__)\nHelp on wrapper_descriptor:\n\n__add__(self, value, /)\n Return self+value.  \n```", "```py\n<html> \n    <body> \n        <a href=\"contact.html\">Contact us</a> \n        <a href=\"blog.html\">Blog</a> \n        <a href=\"esme.html\">My Dog</a> \n        <a href=\"/hobbies.html\">Some hobbies</a> \n        <a href=\"/contact.html\">Contact AGAIN</a> \n        <a href=\"http://www.archlinux.org/\">Favorite OS</a> \n    </body> \n</html> \n```", "```py\n$python3 -m http.server  \n```", "```py\nfrom urllib.request import urlopen \nfrom urllib.parse import urlparse \nimport re \nimport sys \nLINK_REGEX = re.compile( \n        \"<a [^>]*href=['\\\"]([^'\\\"]+)['\\\"][^>]*>\") \n\nclass LinkCollector: \n    def __init__(self, url): \n        self.url = \"\" + urlparse(url).netloc \n\n    def collect_links(self, path=\"/\"): \n        full_url = self.url + path \n        page = str(urlopen(full_url).read()) \n        links = LINK_REGEX.findall(page) \n        print(links) \n\nif __name__ == \"__main__\": \n    LinkCollector(sys.argv[1]).collect_links() \n```", "```py\n['contact.html', 'blog.html', 'esme.html', '/hobbies.html', \n'/contact.html', 'http://www.archlinux.org/'] \n```", "```py\n    def normalize_url(self, path, link): \n        if link.startswith(\"http://\"): \n            return link \n        elif link.startswith(\"/\"): \n            return self.url + link \n        else: \n            return self.url + path.rpartition( \n                '/')[0] + '/' + link \n```", "```py\nclass LinkCollector: \n    def __init__(self, url): \n        self.url = \"http://+\" + urlparse(url).netloc \n        self.collected_links = set() \n        self.visited_links = set() \n\n    def collect_links(self, path=\"/\"): \n        full_url = self.url + path \n        self.visited_links.add(full_url) \n        page = str(urlopen(full_url).read()) \n        links = LINK_REGEX.findall(page) \n        links = {self.normalize_url(path, link \n            ) for link in links} \n        self.collected_links = links.union( \n                self.collected_links) \n        unvisited_links = links.difference( \n                self.visited_links) \n        print(links, self.visited_links, \n                self.collected_links, unvisited_links) \n```", "```py\n        for link in unvisited_links: \n            if link.startswith(self.url): \n                self.collect_links(urlparse(link).path) \n```", "```py\nif __name__ == \"__main__\": \n    collector = LinkCollector(sys.argv[1]) \n    collector.collect_links() \n    for link in collector.collected_links: \n        print(link) \n```", "```py\n$ python3 link_collector.py http://localhost:8000\nhttp://localhost:8000/\nhttp://en.wikipedia.org/wiki/Cavalier_King_Charles_Spaniel\nhttp://beluminousyoga.com\nhttp://archlinux.me/dusty/\nhttp://localhost:8000/blog.html\nhttp://ccphillips.net/\nhttp://localhost:8000/contact.html\nhttp://localhost:8000/taichi.html\nhttp://www.archlinux.org/\nhttp://localhost:8000/esme.html\nhttp://localhost:8000/hobbies.html  \n```", "```py\nfrom urllib.request import urlopen \nfrom urllib.parse import urlparse \nimport re \nimport sys \nLINK_REGEX = re.compile( \n        \"<a [^>]*href=['\\\"]([^'\\\"]+)['\\\"][^>]*>\") \n\nclass LinkCollector: \n    def __init__(self, url): \n        self.url = \"http://%s\" % urlparse(url).netloc \n        self.collected_links = {} \n        self.visited_links = set() \n\n    def collect_links(self, path=\"/\"): \n        full_url = self.url + path \n        self.visited_links.add(full_url) \n        page = str(urlopen(full_url).read()) \n        links = LINK_REGEX.findall(page) \n        links = {self.normalize_url(path, link \n            ) for link in links} \n        self.collected_links[full_url] = links \n        for link in links: \n            self.collected_links.setdefault(link, set()) \n        unvisited_links = links.difference( \n                self.visited_links) \n        for link in unvisited_links: \n            if link.startswith(self.url): \n                self.collect_links(urlparse(link).path) \n\n    def normalize_url(self, path, link): \n        if link.startswith(\"http://\"): \n            return link \n        elif link.startswith(\"/\"): \n            return self.url + link \n        else: \n            return self.url + path.rpartition('/' \n                    )[0] + '/' + link \nif __name__ == \"__main__\": \n    collector = LinkCollector(sys.argv[1]) \n    collector.collect_links() \n    for link, item in collector.collected_links.items(): \n        print(\"{}: {}\".format(link, item)) \n```", "```py\nfrom urllib.request import urlopen \nfrom urllib.parse import urlparse \nimport re \nimport sys \nfrom queue import Queue \nLINK_REGEX = re.compile(\"<a [^>]*href=['\\\"]([^'\\\"]+)['\\\"][^>]*>\") \n\nclass LinkCollector: \n    def __init__(self, url): \n        self.url = \"http://%s\" % urlparse(url).netloc \n        self.collected_links = {} \n        self.visited_links = set() \n\n    def collect_links(self): \n        queue = Queue() \n        queue.put(self.url) \n        while not queue.empty(): \n            url = queue.get().rstrip('/') \n            self.visited_links.add(url) \n            page = str(urlopen(url).read()) \n            links = LINK_REGEX.findall(page) \n            links = { \n                self.normalize_url(urlparse(url).path, link) \n                for link in links \n            } \n            self.collected_links[url] = links \n            for link in links: \n                self.collected_links.setdefault(link, set()) \n            unvisited_links = links.difference(self.visited_links) \n            for link in unvisited_links: \n                if link.startswith(self.url): \n                    queue.put(link) \n\n    def normalize_url(self, path, link): \n        if link.startswith(\"http://\"): \n            return link.rstrip('/') \n        elif link.startswith(\"/\"): \n            return self.url + link.rstrip('/') \n        else: \n            return self.url + path.rpartition('/')[0] + '/' + link.rstrip('/') \n\nif __name__ == \"__main__\": \n    collector = LinkCollector(sys.argv[1]) \n    collector.collect_links() \n    for link, item in collector.collected_links.items(): \n        print(\"%s: %s\" % (link, item)) \n```"]