["```py\n    npm create vite@latest frontend-app -- --template react\n    ```", "```py\n    npm install -D tailwindcss postcss autoprefixer\n    ```", "```py\n    npx tailwindcss init -p\n    ```", "```py\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```", "```py\nexport default function App() {\n  return ( <\n    h1 className = “text-3xl font-bold” >\n    Cars FARM <\n    /h1>\n  )\n}\n```", "```py\n    npm i react-router-dom@6.23.1\n    ```", "```py\n    const Home = () => {\n        return (\n            <div>Home</div>\n        )\n    }\n    export default Home\n    ```", "```py\n    const RootLayout = () => {\n      return (\n        <div>RootLayout</div>\n      )\n    }\n    export default RootLayout\n    ```", "```py\n    import {\n      createBrowserRouter,\n      Route,\n      createRoutesFromElements,\n      RouterProvider\n    } from “react-router-dom”\n    import RootLayout from “./layouts/RootLayout”\n    import Cars from “./pages/Cars”\n    import Home from “./pages/Home”\n    import Login from “./pages/Login”\n    import NewCar from “./pages/NewCar”\n    import SingleCar from “./pages/SingleCar”\n    ```", "```py\n    const router = createBrowserRouter(\n      createRoutesFromElements(\n        <Route path=”/” element={<RootLayout />}>\n          <Route index element={<Home />} />\n          <Route path=”cars” element={<Cars />} />\n          <Route path=”login” element={<Login />} />\n          <Route path=”new-car” element={<NewCar />} />\n          <Route path=”cars/:id” element={<SingleCar />} />\n        </Route>\n      )\n    )\n    export default function App() {\n      return (\n        <RouterProvider router={router} />\n      )\n    }\n    ```", "```py\n    const NotFound = () => {\n      return (\n        <div>This page does not exist yet!</div>\n      )\n    }\n    export default NotFound\n    ```", "```py\n      createRoutesFromElements(\n        <Route path=”/” element={<RootLayout />}>\n          <Route index element={<Home />} />\n    \t// more routes here…\n          <Route path=”*” element={<NotFound />} />\n        </Route>\n      )\n    <Route path=”/” element={<RootLayout />}>\n    ```", "```py\n    import { Outlet } from “react-router-dom”\n    const RootLayout = () => {\n        return (\n            <div className=” bg-blue-200 min-h-screen p-2”>\n                <h2>RootLayout</h2>\n                <main className=”p-8 flex flex-col flex-1 bg-white “>\n     <Outlet />\n                </main>\n            </div>\n        )\n    }\n    export default RootLayout\n    ```", "```py\n    import {\n      Outlet,\n      NavLink\n    } from “react-router-dom”\n    const RootLayout = () => {\n      return (\n        <div className=” bg-blue-200 min-h-screen p-2”>\n          <h2>RootLayout</h2>\n          <header className=”p-8 w-full”>\n            <nav className=”flex flex-row \n              justify-between”>\n              <div className=”flex flex-row space-x-3”>\n                <NavLink to=”/”>Home</NavLink>\n                <NavLink to=”/cars”>Cars</NavLink>\n                <NavLink to=”/login”>Login</NavLink>\n                <NavLink to=”/new-car”>New Car</NavLink>\n              </div>\n            </nav>\n          </header>\n          <main className=”p-8 flex flex-col flex-1\n            bg-white “>\n            <Outlet />\n         </main>\n       </div>\n      )\n    }\n    export default RootLayout\n    ```", "```py\nVITE_API_URL=http://127.0.0.1:8000\n```", "```py\n    const CarCard = ({ car }) => {\n      return (\n        <div className=”flex flex-col p-3 text-black \n          bg-white rounded-xl overflow-hidden shadow-md\n          hover:scale-105 transition-transform\n          duration-200”>\n          <div>{car.brand} {car.make} {car.year} {car.cm3}\n            {car.price} {car.km}\n          </div>\n          <img src={car.picture_url} alt={car.make}\n            className=”w-full h-64 object-cover\n            object-center” />\n        </div>\n      )\n    }\n    export default CarCard\n    ```", "```py\n    import { useLoaderData } from “react-router-dom”\n    import CarCard from “../components/CarCard”\n    const Cars = () => {\n      const cars = useLoaderData()\n      return (\n        <div>\n          <h1>Available cars</h1>\n          <div className=”md:grid md:grid-cols-3 sm:grid\n            sm:grid-cols-2 gap-5”>\n            {cars.map(car => (\n              <CarCard key={car.id} car={car} />\n            ))}\n          </div>\n        </div>\n      )\n    }\n    export default Cars\n    ```", "```py\n    export const carsLoader = async () => {\n      const res = await fetch(\n        `${import.meta.env.VITE_API_URL}/cars?limit=30`\n        )\n      const response = await res.json()\n      if (!res.ok){\n        throw new Error(response.message)\n      }\n      return response[‘cars’]\n    }\n    ```", "```py\n    import Cars, { carsLoader } from “./pages/Cars”\n    // continues\n      <Route path=”/” element={<RootLayout />}>\n        <Route index element={<Home />} />\n        <Route path=”cars” element={<Cars />}     \n          loader={carsLoader} />\n          <Route path=”login” element={<Login />} />\n          <Route path=”new-car” element={<NewCar />} />\n          <Route path=”cars/:id” \n            element={<SingleCar />} />\n          <Route path=”*” element={<NotFound />} />\n        </Route>\n    ```", "```py\n    npm i react-hook-form@7.51.5\n    ```", "```py\n    import LoginForm from “../components/LoginForm”\n    const Login = () => {\n      return (\n      <div>\n        <h1>Login</h1>\n        <LoginForm />\n      </div>\n      )\n    }\n    export default Login\n    ```", "```py\n    import { useForm } from “react-hook-form”\n    import { z } from ‘zod’;\n    import { zodResolver } from ‘@hookform/resolvers/zod’;\n    const schema = z.object({\n      username: z.string().min(4, ‘Username must be at least 4 characters long’).max(10, ‘Username cannot exceed 10 characters’),\n      password: z.string().min(4, ‘Password must be at least 4 characters long’).max(10, ‘Password cannot exceed 10 characters’),\n    });\n    ```", "```py\n    const LoginForm = () => {\n      const { register, handleSubmit, \n        formState: { errors } } = useForm({\n          resolver: zodResolver(schema),\n        });\n      const onSubmitForm = (data) => {\n          console.log(data)\n        }\n    ```", "```py\n    return (\n      <div className=”flex items-center justify-center”>\n        <div className=”w-full max-w-xs”>\n        <form className=”bg-white shadow-md rounded \n          px-8 pt-6 pb-8 mb-4”                      \n          onSubmit={handleSubmit(onSubmit event is bound to the handle. This process is quite simple: the form has an onSubmit method that you handed over to the handleSubmit method of RHF. This handleSubmit method is destructured from the hook itself, along with the register function (for mapping input fields) and the errors that reside in the form state. After establishing the connection, the handleSubmit method needs to know which function should process the form and its data. In this case, it should pass the handling to the onSubmitForm function.The two form fields, for the username and the password, are nearly identical:\n\n    ```", "```py\n\n    ```", "```py\n<div className=”mb-6”>\n  <label htmlFor=”password” className=”block text-gray-700   \n    text-sm font-bold mb-2”>Password</label>\n  <input id=”password” type=”password” placeholder=”****”\n    required\n    {...register(‘password’)}\n    className=”shadow appearance-none border rounded w-full\n    py-2 px-3 text-gray-700 mb-3 leading-tight\n    focus:outline-none focus:shadow-outline” />\n  {errors.password && <p className=”text-red-500 text-xs\n italic”>{errors.password.message}</p>}\n</div>\n<div className=”flex items-center justify-between”>\n          <button type=”submit”>Sign In</button>\n        </div>\n      </form>\n    </div>\n  </div>\n  )\n}\nexport default LoginForm\n```", "```py\n    import { createContext, useState, useEffect } from ‘react’;\n    import { Navigate } from ‘react-router-dom’;\n    export const AuthContext = createContext();\n    export const AuthProvider = ({ children }) => {\n      const [user, setUser] = useState(null);\n      const [jwt, setJwt] =  useState(localStorage.getItem('jwt')||null);\n      const [message, setMessage] = useState(\n        “Please log in”\n      );\n    ```", "```py\n    useEffect(() => {\n      const storedJwt = localStorage\n        .getItem(‘jwt’);\n      if(storedJwt) {\n        setJwt(storedJwt);\n        fetch(\n          `${import.meta.env.VITE_API_URL}/users/me`, {\n          headers: {\n          Authorization: `Bearer ${storedJwt}`,\n          },\n            })\n        .then(res => res.json())\n    ```", "```py\n    .then(data => {\n      if(data.username) {\n        setUser({user: data.username});\n        setMessage(`Welcome back, ${data.username}!`);\n      } else {\n    ```", "```py\n    localStorage.removeItem(\n      ‘jwt’);\n    setJwt(null);\n    setUser(null);\n    setMessage(data.message)\n    }\n    })\n    .catch(() => {\n      localStorage\n        .removeItem(\n          ‘jwt’);\n      setJwt(null);\n      setUser(null);\n      setMessage(\n        ‘Please log in or register’\n      );\n    });\n    }\n    else {\n      setJwt(null);\n      setUser(null);\n      setMessage(\n        ‘Please log in or register’\n      );\n    }\n    }, []); };\n    ```", "```py\n    const login = async (username,\n      password) => {  const response = await fetch(`${import.meta.env.VITE_API_URL}/users/login`, {\n          method: ‘POST’,\n          headers: {\n            ‘Content-Type’: ‘application/json’,\n          },\n          body: JSON.stringify({\n            username,\n            password\n          }),\n        });\n    ```", "```py\n      const data = await response\n        .json();\n      if(response.ok) {\n        setJwt(data.token);\n        localStorage.setItem(‘jwt’, data\n          .token);\n        setUser(data.username);\n        setMessage(\n          `Login successful: welcome  ${data.username}`\n        );\n      } else {\n        setMessage(‘Login failed: ‘ +\n          data.detail);\n        setUser(null)\n        setJwt(null);\n        localStorage.removeItem(‘jwt’);\n      }\n      return data\n    };\n    ```", "```py\n        const logout = () => {\n          setUser(null);\n          setJwt(null);\n          localStorage.removeItem(‘jwt’);\n          setMessage(‘Logout successful’);\n        };\n        return ( <\n          AuthContext.Provider value = {\n            {\n              username,\n              jwt,\n              login,\n              logout,\n              message,\n              setMessage\n            }\n          } > {\n            children\n          } <\n          /AuthContext.Provider>\n        );\n    ```", "```py\n    import {\n      useContext\n    } from “react”;\n    import {\n      AuthContext\n    } from “../contexts/AuthContext”;\n    export const useAuth = () => {\n      const context = useContext(\n        AuthContext)\n      if (!context) {\n        throw new Error(\n          ‘Must be used within an AuthProvider’\n          )\n      }\n      return context\n    }\n    ```", "```py\n    import { AuthProvider } from “./contexts/AuthContext”\n    // continues\n    export default function App() {\n      return (\n        <AuthProvider>\n          <RouterProvider router={router} />\n        </AuthProvider>\n      )\n    }\n    ```", "```py\n    import { Outlet, NavLink } from “react-router-dom”\n    import { useAuth } from “../hooks/useAuth”\n    const RootLayout = () => {\n        logout function, you can now add a little bit of JSX conditional rendering and create a dynamic menu:\n\n    ```", "```py\n\n    ```", "```py\n    import {\n      Outlet,\n      Navigate\n    } from “react-router-dom”\n    import {\n      useAuth\n    } from “../hooks/useAuth”\n    const AuthRequired = () => {\n      const {\n        jwt\n      } = useAuth()\n      return (\n        <div>\n                <h1>AuthRequired</h1>\n                {jwt ? <Outlet /> : <Navigate to=”/login” />}\n            </div>\n      )\n    }\n    export default AuthRequired\n    ```", "```py\n    import AuthRequired from “./components/AuthRequired”\n    import { AuthProvider } from “./contexts/AuthContext”\n    // code continues\n    const router = createBrowserRouter(\n      createRoutesFromElements(\n        <Route path=”/” element={<RootLayout />}>\n          <Route index element={<Home />} />\n          <Route path=”cars” element={<Cars />} loader={carsLoader} />\n          <Route path=”login” element={<Login />} />\n     <Route element={<AuthRequired />}>\n     <Route path=”new-car” element={<NewCar />} />\n     </Route>\n          <Route path=”cars/:id” element={<SingleCar />} />\n    ```", "```py\n    import CarForm from “../components/CarForm”\n    const NewCar = () => {\n        return (\n            <div>\n     <CarForm />\n            </div>\n        )\n    }\n    export default NewCar\n    ```", "```py\n    const InputField = ({ props }) => {\n      const { name, type, error } = props;\n      return (\n        <div className=”mb-4”>\n          <label\n            className=”block text-gray-700 text-sm mb-2”\n            htmlFor={name}\n          >\n            {name}\n          </label>\n          <input\n            className=”shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline”\n            id={name}\n            name={name}\n            type={type}\n            placeholder={name}\n            required\n            autoComplete=”off”\n            {...props}\n          />\n          {error && <p className=”text-red-500 text-xs italic”>{error.message}</p>}\n        </div>\n      );\n    };\n    export default InputField;\n    ```", "```py\n    import { useForm } from “react-hook-form”\n    import { z } from ‘zod’;\n    import { zodResolver } from ‘@hookform/resolvers/zod’;\n    import { useNavigate } from “react-router-dom”;\n    import { useAuth } from “../hooks/useAuth”;\n    import InputField from “./InputField”;\n    ```", "```py\n    const schema = z.object({\n        brand: z.string().min(2, ‘Brand must contain at least two letters’).max(20, ‘Brand cannot exceed 20 characters’),\n        make: z.string().min(1, ‘Car model must be at least 1 character long’).max(20, ‘Model cannot exceed 20 characters’),\n        year: z.coerce.number().gte(1950).lte(2025),\n        price: z.coerce.number().gte(100).lte(1000000),\n        km: z.coerce.number().gte(0).lte(500000),\n        cm3: z.coerce.number().gt(0).lte(5000),\n        picture: z.any()\n            .refine(file => file[0] && file[0].type.startsWith(‘image/’), { message: ‘File must be an image’ })\n            .refine(file => file[0] && file[0].size <= 1024 * 1024, { message: ‘File size must be less than 1MB’ }),\n    });\n    ```", "```py\n    const CarForm = () => {\n        const navigate = useNavigate();\n        const { jwt } = useAuth();\n        const { register, handleSubmit, \n        formState: { errors, isSubmitting } } = useForm({\n            resolver: zodResolver(schema),\n        });\n    ```", "```py\n        let formArray = [\n            {\n                name: “brand”,\n                type: “text”,\n                error: errors.brand\n            },\n            {\n                name: “make”,\n                type: “text”,\n                error: errors.make\n            },\n            {\n                name: “year”,\n                type: “number”,\n                error: errors.year\n            },\n            {\n                name: “price”,\n                type: “number”,\n                error: errors.price\n            },\n            {\n                name: “km”,\n                type: “number”,\n                error: errors.km\n            },\n            {\n                name: “cm3”,\n                type: “number”,\n                error: errors.cm3\n            },\n            {\n                name: “picture”,\n                type: “file”,\n                error: errors.picture\n            }\n        ]\n    ```", "```py\n    const onSubmit = async (data) => {\n      const formData = new FormData();\n      formArray.forEach((field) => {\n        if (field == “picture”) {\n          formData.append(field, data[field][0]);\n        } else {\n          formData.append(field.name, data[field.name]);\n        }\n      });\n    };\n    ```", "```py\n    const result = await fetch(`${import.meta.env.VITE_API_URL}/cars/`, {\n      method: “POST”,\n      body: formData,\n      headers: {\n        Authorization: `Bearer ${jwt}`,\n      },\n    });\n    const json = await result.json();\n    if (result.ok) {\n      navigate(“/cars”);\n    } else if (json.detail) {\n      setMessage(JSON.stringify(json));\n      navigate(“/”);\n    }\n    ```", "```py\n    return (\n      <div className=”flex items-center justify-center”>\n        <div className=”w-full max-w-xs”>\n          <form\n            className=”bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 “\n            encType=”multipart/form-data”\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <h2 className=”text-center text-2xl font-bold mb-6”>Insert new car</h2>\n            {formArray.map((item, index) => (\n              <InputField\n                key={index}\n                props={{\n                  name: item.name,\n                  type: item.type,\n                  error: item.error,\n                  ...register(item.name),\n                }}\n              />\n            ))}\n            <div className=”flex items-center justify-between”>\n              <button\n                className=”bg-gray-900 hover:bg-gray-700 text-white w-full font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline”\n                type=”submit”\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? “Saving...” : “Save new car”}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );}\n    export default CarForm\n    ```", "```py\n    import { useLoaderData } from “react-router-dom”;\n    import CarCard from “../components/CarCards”;\n    const SingleCar = () => {\n        const car = useLoaderData()\n        return (\n            <CarCard car={car} />\n        );\n    };\n    export default SingleCar\n    ```", "```py\n    import fetchCarData from “./utils/fetchCarData”\n    // continues\n    const router = createBrowserRouter(\n      createRoutesFromElements(\n        <Route path=”/” element={<RootLayout />}>\n          <Route index element={<Home />} />\n          <Route path=”cars” element={<Cars />} loader={carsLoader} />\n          <Route path=”login” element={<Login />} />\n          <Route element={<AuthRequired />}>\n            <Route path=”new-car” element={<NewCar />} />\n          </Route>\n          <Route\n            path=”cars/:id”\n            element={<SingleCar />}\n     loader={async ({ params }) => {\n     return fetchCarData(params.id);\n     }}\n     errorElement={<NotFound />} />\n          <Route path=”*” element={<NotFound />} />\n        </Route>\n      )\n    )\n    ```", "```py\n    export default async function fetchCarData(id) {\n        const res = await fetch(`${import.meta.env.VITE_API_URL}/cars/${id}`)\n        const response = await res.json()\n        if (!res.ok) {\n            throw new Error(response.message)\n        }\n        return response\n    }\n    ```"]