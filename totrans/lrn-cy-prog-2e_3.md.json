["```py\ndef primes(kmax):\n    n = 0\n    k = 0\n    i = 0\n    if kmax > 1000:\n        kmax = 1000\n    p = [0] * kmax\n    result = []\n    k = 0\n    n = 2\n    while k < kmax:\n        i = 0\n        while i < k and n % p[i] != 0:\n            i = i + 1\n        if i == k:\n            p[k] = n\n            k = k + 1\n            result.append(n)\n        n = n + 1\n    return result\nprimes (10000)\n```", "```py\n$ make\ncython --embed primes.pyx\ngcc -g -O2 -c primes.c -o primes.o `python-config --includes`\ngcc -g -O2 -o primes primes.o `python-config –libs`\n$ time python pyprimes.py\n        0.18 real         0.17 user         0.01 sys\n$ time ./primes\n        0.04 real         0.03 user         0.01 sys\n```", "```py\n$ cython pyprimes.py –embed\n$ gcc -g -O2 pyprimes.c -o pyprimes `python-config --includes –libs`\n```", "```py\n    $ time ./primes\n    real    0m0.050s\n    user    0m0.035s\n    sys     0m0.013s\n\n    ```", "```py\n    $ time ./pyprimes\n    real    0m0.139s\n    user    0m0.122s\n    sys     0m0.013s\n\n    ```", "```py\n    philips-macbook:primes redbrain$ time python pyprimes.py\n    real    0m0.184s\n    user    0m0.165s\n    sys     0m0.016s\n\n    ```", "```py\n>>> import pyximport\n>>> pyximport.install()\n(None, <pyximport.pyximport.PyxImporter object at 0x102fba4d0>)\n>>> import helloworld\nHello World from cython!\n```", "```py\ntypedef struct data {\n int value;\n} data_t;\n```", "```py\ncdef extern from \"Data.h\":\n    struct data:\n        int value\n    ctypedef data data_t\n```", "```py\ncimport PyData\n\ncdef class Data(object):\n    cdef PyData.data_t * _nativeData\n    …\n```", "```py\nfrom libc.stdlib cimport malloc, free\n```", "```py\ndef __cinit__(self):\n        self._nativeData = <data_t*>malloc(sizeof(data_t))\n        if not self._nativeData:\n            self._nativeData = NULL\n            raise MemoryError()\n\ndef __dealloc__(self):\n        if self._nativeData is not NULL:\n            free(self._nativeData)\n            self._nativeData = NULL\n```", "```py\ndef __init__(self, int value):\n        self.SetValue(value)\n\ndef SetValue(self, int value):\n        self.SetNativeValue(value)\n\ncdef SetNativeValue(self, int value):\n        self._nativeData.value = value\n```", "```py\nfrom PyData import Data\n\ndef TestPythonData():\n    # Looks and feels like normal python objects\n    objectList = [Data(1), Data(2), Data(3)]\n\n    # Print them out\n    for dataObject in objectList:\n        print dataObject\n\n    # Show the Mutability\n    objectList[1].SetValue(1234)\n    print objectList[1]\n```", "```py\nconst struct cmd_entry cmd_kill_window_entry = {\n  \"kill-window\", \"killw\",\n  \"at:\", 0, 0,\n  \"[-a] \" CMD_TARGET_WINDOW_USAGE,\n  0,\n  NULL,\n  NULL,\n cmd_kill_window_exec\n};\n```", "```py\nextern const struct cmd_entry *cmd_table[];\nextern const struct cmd_entry cmd_attach_session_entry;\nextern const struct cmd_entry cmd_bind_key_entry;\n….\n```", "```py\nconst struct cmd_entry *cmd_table[] = {\n  &cmd_attach_session_entry,\n  &cmd_bind_key_entry,\n…\n```", "```py\n/* Command definition. */\nstruct cmd_entry {\n const char  *name;\n const char  *alias;\n\n  const char  *args_template;\n  int     args_lower;\n  int     args_upper;\n\n const char  *usage;\n\n#define CMD_STARTSERVER 0x1\n#define CMD_CANTNEST 0x2\n#define CMD_SENDENVIRON 0x4\n#define CMD_READONLY 0x8\n  int     flags;\n\n  void     (*key_binding)(struct cmd *, int);\n  int     (*check)(struct args *);\n enum cmd_retval   (*execc)(struct cmd *, struct cmd_q *);\n};\n```", "```py\nPhilips-MacBook:tmux-project redbrain$ ack-5.12 execc\ntmux-1.8/cmd-queue.c\n229:               retval = cmdq->cmd->entry->execc(cmdq->cmd, cmdq);\n\n```", "```py\n# want python support for pytmux scripting\nfound_python=no\nAC_ARG_ENABLE(\n  python,\n  AC_HELP_STRING(--enable-python, create python support),\n  found_python=yes\n)\nAM_CONDITIONAL(IS_PYTHON, test \"x$found_python\" = xyes)\n\nPYLIBS=\"\"\nPYINCS=\"\"\nif test \"x$found_python\" = xyes; then\n AC_CHECK_PROG(CYTHON_CHECK,cython,yes)\n   if test x\"$CYTHON_CHECK\" != x\"yes\" ; then\n      AC_MSG_ERROR([Please install cython])\n   fi\n AC_CHECK_PROG(PYTHON_CONF_CHECK,python-config,yes)\n PYLIBS=`python-config --libs`\n PYINCS=`python-config --includes`\n   if test \"x$PYLIBS\" == x; then\n      AC_MSG_ERROR(\"python-dev not found\")\n   fi\n AC_DEFINE(HAVE_PYTHON)\nfi\nAC_SUBST(PYLIBS)\nAC_SUBST(PYINCS)\n```", "```py\nif IS_PYTHON\nPYTHON_SOURCES = cmdpython.pyx\nelse\nPYTHON_SOURCES =\nendif\n\n# List of sources.\ndist_tmux_SOURCES = \\\n $(PYTHON_SOURCES) \\\n...\n```", "```py\nSUFFIXES = .pyx\n.pyx.c:\n  @echo \"  CPY   \" $<\n @cython -2 -o $@ $<\n\n```", "```py\nCFLAGS += $(PYINCS)\ntmux_LDADD = \\\n $(PYLIBS)\n\n```", "```py\n#ifdef HAVE_PYTHON\n Py_InitializeEx (0);\n#endif\n  server_loop();\n#ifdef HAVE_PYTHON\n  Py_Finalize ();\n#endif\n```", "```py\nstruct cmd_entry {\n  const char  *name;\n  const char  *alias;\n\n  const char  *args_template;\n  int     args_lower;\n  int     args_upper;\n\n  const char  *usage;\n  int     flags;\n\n  void     (*key_binding)(struct cmd *, int);\n  int     (*check)(struct args *);\n enum cmd_retval   (*execc)(struct cmd *, struct cmd_q *);\n};\n```", "```py\n/* Command return values. */\nenum cmd_retval {\n  CMD_RETURN_ERROR = -1,\n  CMD_RETURN_NORMAL = 0,\n  CMD_RETURN_WAIT,\n  CMD_RETURN_STOP\n};\n```", "```py\ncdef enum cmd_retval:\n        CMD_RETURN_ERROR = -1\n        CMD_RETURN_NORMAL = 0\n        CMD_RETURN_WAIT = 1\n        CMD_RETURN_STOP = 2\n```", "```py\nstruct cmd {\n  const struct cmd_entry  *entry;\n  struct args    *args;\n\n  char      *file;\n  u_int       line;\n\n  TAILQ_ENTRY(cmd)   qentry;\n};\n```", "```py\n cdef struct cmd:\n cmd_entry * entry\n args * aargs\n        char * file\n        int line\n```", "```py\n/* Parsed arguments. */\nstruct args {\n bitstr_t  *flags;\n char    *values[SCHAR_MAX];\n\n  int     argc;\n  char         **argv;\n};\n```", "```py\n cdef struct args:\n char * flags\n char **values\n        int argc\n        char **argv\n```", "```py\n/* Command queue. */\nstruct cmd_q {\n  int       references;\n  int       dead;\n\n struct client    *client;\n  int       client_exit;\n\n struct cmd_q_items   queue;\n struct cmd_q_item  *item;\n struct cmd    *cmd;\n\n  time_t       time;\n  u_int       number;\n\n  void       (*emptyfn)(struct cmd_q *);\n  void      *data;\n\n struct msg_command_data  *msgdata;\n\n TAILQ_ENTRY(cmd_q)       waitentry;\n};\n```", "```py\n cdef struct cmd_q:\n        int references\n        int dead\n void * client\n        int client_exit\n        int queue\n void * item\n cmd * cmd\n        int time\n        int number\n        void (*emptyfn)(cmd_q *)\n void * msgdata\n\n```", "```py\ncdef struct cmd_entry:\n        char * name\n        char * alias\n        char * args_template\n        int args_lower\n        int args_upper\n        char * usage\n        int flags\n        void (*keybinding)(cmd *, int)\n        int (*check)(args *)\n        cmd_retval (*execc)(cmd *, cmd_q *)\n```", "```py\ncimport cmdpython\n\ncdef public cmd_entry cmd_entry_python\n```", "```py\ncdef public void tmux_init_cython () with gil:\n cmd_entry_python.name = \"python\"\n    cmd_entry_python.alias = \"py\"\n    cmd_entry_python.args_template = \"\"\n    cmd_entry_python.args_lower = 0\n    cmd_entry_python.args_upper = 0\n    cmd_entry_python.usage = \"python usage...\"\n    cmd_entry_python.flags = 0\n    #cmd_entry_python.key_binding = NULL\n    #cmd_entry_python.check = NULL\n cmd_entry_python.execc = python_exec\n\n```", "```py\ncdef cmd_retval python_exec (cmd * cmd, cmd_q * cmdq) with gil:\n    cdef char * message = \"Inside your python command inside tmux!!!\"\n    log_debug (message)\n    return CMD_RETURN_NORMAL;\n```", "```py\n#ifdef HAVE_PYTHON\n  Py_InitializeEx (0);\n tmux_init_cython ();\n#endif\n\n  server_loop();\n\n#ifdef HAVE_PYTHON\n  Py_Finalize ();\n#endif\n```", "```py\nextern const struct cmd_entry cmd_wait_for_entry;\n#ifdef HAVE_PYTHON\n# include \"cmdpython.h\"\n#endif\n```", "```py\nconst struct cmd_entry *cmd_table[] = {\n  &cmd_attach_session_entry,\n  &cmd_bind_key_entry,\n  &cmd_break_pane_entry,\n…\n  &cmd_wait_for_entry,\n &cmd_entry_python,\n  NULL\n};\n```", "```py\n$ ./configure –enable-python\n$ make\n$ ./tmux -vvv\n$ tmux: C-b :python\n$ tmux: exit\n\n```", "```py\ncomplete key ^M 0xd\ncmdq 0xbb38f0: python (client 8)\nInside your python command inside tmux!!!\nkeys are 1 (e)\n\n```"]