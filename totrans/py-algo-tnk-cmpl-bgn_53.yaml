- en: Chapter 37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More with Subprograms
  prefs: []
  type: TYPE_NORMAL
- en: 37.1 Simple Exercises with Subprograms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exercise 37.1-1 A Simple Currency Converter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named displayMenu that displays the following menu.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Convert USD to Euro (EUR)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Convert Euro (EUR) to USD
  prefs: []
  type: TYPE_NORMAL
- en: 3)Exit
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that displays the
    previously mentioned menu and prompts the user to enter a choice (of 1, 2, or
    3). If choice 1 or 2 is selected, the program must prompt the user to enter an
    amount of money and then it must calculate and display the corresponding converted
    value. The process must repeat as many times as the user wishes.
  prefs: []
  type: TYPE_NORMAL
- en: It is given that $1 = 0.94 EUR (€).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: According to the “Ultimate” rule, the while-loop of the main code must be as
    follows, given in general form.
  prefs: []
  type: TYPE_NORMAL
- en: displayMenu();
  prefs: []
  type: TYPE_NORMAL
- en: 'choice = int(input())     #Initialization of choice.'
  prefs: []
  type: TYPE_NORMAL
- en: 'while choice != 3:'
  prefs: []
  type: TYPE_NORMAL
- en: Prompt the user to enter an amount of money, and then calculate and display
    the required value.
  prefs: []
  type: TYPE_NORMAL
- en: displayMenu();
  prefs: []
  type: TYPE_NORMAL
- en: 'choice = int(input()) #Update/alteration of choice'
  prefs: []
  type: TYPE_NORMAL
- en: The solution is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_37.1-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'def displayMenu():'
  prefs: []
  type: TYPE_NORMAL
- en: print("----------------------------")
  prefs: []
  type: TYPE_NORMAL
- en: print("1\. Convert USD to Euro (EUR)")
  prefs: []
  type: TYPE_NORMAL
- en: print("2\. Convert Euro (EUR) to USD")
  prefs: []
  type: TYPE_NORMAL
- en: print("3\. Exit")
  prefs: []
  type: TYPE_NORMAL
- en: print("----------------------------")
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Enter a choice: ", end = "")'
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: displayMenu()
  prefs: []
  type: TYPE_NORMAL
- en: choice = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'while choice != 3:'
  prefs: []
  type: TYPE_NORMAL
- en: 'amount = float(input("Enter an amount: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if choice == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: print(amount, "USD =", amount * 0.94, "Euro")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print(amount, "Euro =", amount / 0.94, "USD")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: displayMenu()
  prefs: []
  type: TYPE_NORMAL
- en: choice = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 37.1-2 Finding the Average Values of Positive Integers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named testInteger that accepts a number through its formal
    argument list and returns True when the passed number is an integer; it must return
    False otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that lets the user
    enter numeric values repeatedly until a real one is entered. In the end, the program
    must display the average value of positive integers entered.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: To solve this exercise, a while statement will be used. According to the “Ultimate”
    rule discussed in [Section 28.3](chapter28.html#toc_3), the pre-test loop structure
    that solves this problem should be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'x = float(input())   #Initialization of x'
  prefs: []
  type: TYPE_NORMAL
- en: 'while testInteger(x):   #Boolean expression dependent on x'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: 'x = float(input())   #Update/alteration of x'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The statement while testInteger(x) is equivalent to the
    statement while testInteger(x) == True.'
  prefs: []
  type: TYPE_NORMAL
- en: The final solution is presented next.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_37.1-2'
  prefs: []
  type: TYPE_NORMAL
- en: 'def testInteger(number):'
  prefs: []
  type: TYPE_NORMAL
- en: returnValue = False
  prefs: []
  type: TYPE_NORMAL
- en: 'if number == int(number):'
  prefs: []
  type: TYPE_NORMAL
- en: returnValue = True
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return returnValue
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: count = 0
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())  #Initialization of x
  prefs: []
  type: TYPE_NORMAL
- en: 'while testInteger(x):  #Boolean Expression dependent on x'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: total += x
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: count += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x = float(input())  #Update/alteration of x
  prefs: []
  type: TYPE_NORMAL
- en: 'if count > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print(total / count)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note the last single-alternative decision structure, if
    count > 0\. It is necessary in order for the program to satisfy the property of
    definiteness. Think about it! If the user enters a real right from the beginning,
    the variable count, in the end, will contain a value of zero.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The following function can be used as an alternative to
    the previous one. It directly returns the result (True or False) of the Boolean
    expression number == int(number).'
  prefs: []
  type: TYPE_NORMAL
- en: 'def test_integer(number):'
  prefs: []
  type: TYPE_NORMAL
- en: return number == int(number)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 37.1-3 Finding the Sum of Odd Positive Integers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named testInteger that accepts a number through its formal
    argument list and returns True when the passed number is an integer; it must return
    False otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram named testOdd that accepts a number through its formal
    argument list and returns True when the passed number is odd; it must return False
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Write a subprogram named testPositive that accepts a number through its
    formal argument list and returns True when the passed number is positive; it must
    return False otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: iv)Using the subprograms cited above, write a Python program that lets the user
    enter numeric values repeatedly until a negative one is entered. In the end, the
    program must display the sum of odd positive integers entered.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This exercise is pretty much the same as the previous one. Each subprogram returns
    one value (which can be True or False). The solution is presented here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_37.1-3'
  prefs: []
  type: TYPE_NORMAL
- en: 'def testInteger(number):'
  prefs: []
  type: TYPE_NORMAL
- en: return number == int(number)
  prefs: []
  type: TYPE_NORMAL
- en: 'def testOdd(number):'
  prefs: []
  type: TYPE_NORMAL
- en: return number % 2 != 0
  prefs: []
  type: TYPE_NORMAL
- en: 'def testPositive(number):'
  prefs: []
  type: TYPE_NORMAL
- en: return number > 0
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'while testPositive(x):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if testInteger(x) and testOdd(x):'
  prefs: []
  type: TYPE_NORMAL
- en: total += x
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The statement if testInteger(x) and testOdd(x) is equivalent
    to the statement if testInteger(x) == True and testOdd(x) == True'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 37.1-4 Finding the Values of y
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that finds and displays the value of y (if possible)
    in the following formula.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter37-01.png)
  prefs: []
  type: TYPE_NORMAL
- en: For each part of the formula, write a subprogram that accepts x through its
    formal argument list and then calculates and displays the result. The subprogram
    must display an error message when the calculation is not possible.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Each subprogram must calculate and display the result of the corresponding formula
    or display an error message when the calculation is not possible. As these two
    subprograms return no result, they can both be written as void functions. The
    solution is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_37.1-4'
  prefs: []
  type: TYPE_NORMAL
- en: 'def formula1(x):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == 5:  #No need to check for x == 0 when x >= 1'
  prefs: []
  type: TYPE_NORMAL
- en: print("Error! Division by zero")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 3 * x / (x - 5) + (7 - x) / (2 * x)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(y)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'def formula2(x):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == -2:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Error! Division by zero")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y = (45 - x) / (x + 2) + 3 * x
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(y)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = float(input("Enter a value for x: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x >= 1:'
  prefs: []
  type: TYPE_NORMAL
- en: formula1(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: formula2(x)
  prefs: []
  type: TYPE_NORMAL
- en: 37.2 Exercises of a General Nature with Subprograms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exercise 37.2-1 Validating Data Input Using a Subprogram
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named getAge that prompts the user to enter their age and
    returns it. Using a loop control structure, the subprogram must also validate
    data input and display an error message when the user enters any non-positive
    values.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram named findMax that accepts a list through its formal argument
    list and returns the index position of the maximum value of the list.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Using the subprograms cited above, write a Python program that prompts the
    user to enter the first names, last names, and ages of 50 people into three lists
    and then displays the name of the oldest person.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Since the subprogram getAge() returns one value, it can be written as a function.
    The same applies to subprogram findMax() because it also returns one value. The
    main code must prompt the user to enter the first names, the last names, and the
    ages of 50 people into lists firstNames, lastNames, and ages respectively. Then,
    with the help of function findMax(), it can find the index position of the maximum
    value of list ages. The solution is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_37.2-1'
  prefs: []
  type: TYPE_NORMAL
- en: PEOPLE = 50
  prefs: []
  type: TYPE_NORMAL
- en: 'def getAge():'
  prefs: []
  type: TYPE_NORMAL
- en: 'age = int(input("Enter an age: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'while age <= 0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Error: Invalid age!")'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'age = int(input("Enter a positive number: "))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return age
  prefs: []
  type: TYPE_NORMAL
- en: 'def findMax(a):'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = a[0]
  prefs: []
  type: TYPE_NORMAL
- en: maxI = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, PEOPLE):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a[i] > maximum:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: maximum = a[i]
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: maxI = i
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: return maxI
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: firstNames = [None] * PEOPLE
  prefs: []
  type: TYPE_NORMAL
- en: lastNames = [None] * PEOPLE
  prefs: []
  type: TYPE_NORMAL
- en: ages = [None] * PEOPLE
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(PEOPLE):'
  prefs: []
  type: TYPE_NORMAL
- en: 'firstNames[i] = input("First name of person No" + str(i + 1) + ": ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'lastNames[i] = input("Last name of person No" + str(i + 1) + ": ")'
  prefs: []
  type: TYPE_NORMAL
- en: ages[i] = getAge()
  prefs: []
  type: TYPE_NORMAL
- en: indexOfMax = findMax(ages)
  prefs: []
  type: TYPE_NORMAL
- en: print("The oldest person is:", firstNames[indexOfMax], lastNames[indexOfMax])
  prefs: []
  type: TYPE_NORMAL
- en: print("They are", ages[indexOfMax], "years old!")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 37.2-2 Sorting a List Using a Subprogram
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named mySwap that accepts a list through its formal argument
    list, as well as two indexes. The subprogram then swaps the values of the elements
    at the corresponding index positions.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram mySwap() cited above, write a subprogram named mySort
    that accepts a list through its formal argument list and then sorts the list using
    the bubble sort algorithm. It must be able to sort in either ascending or descending
    order. To do this, include an addition Boolean argument within the formal argument
    list.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Write a subprogram named displayList that accepts a list through its formal
    argument list and then displays it.
  prefs: []
  type: TYPE_NORMAL
- en: 'iv)Using the subprograms mySort() and displayList() cited above, write a Python
    program that prompts the user to enter the names of 20 people and then displays
    them twice: once sorted in ascending order, and once in descending order.'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the Python program below, the void function mySort() uses
    an adapted version of the bubble sort algorithm. When the value True is passed
    to the argument ascending, the algorithm sorts list a in ascending order. When
    the value False is passed, the algorithm sorts list a in descending order.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the void function mySort() calls the void function mySwap() every
    time a swap is required between the contents of two elements.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_37.2-2'
  prefs: []
  type: TYPE_NORMAL
- en: PEOPLE = 20
  prefs: []
  type: TYPE_NORMAL
- en: 'def mySwap(a, index1, index2):'
  prefs: []
  type: TYPE_NORMAL
- en: a[index1], a[index2] = a[index2] = a[index1]
  prefs: []
  type: TYPE_NORMAL
- en: 'def mySort(a, ascending = True):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for m in range(PEOPLE - 1):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for n in range(PEOPLE - 1, m, -1):'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if ascending:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if a[n] < a[n - 1]:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: mySwap(a, n, n - 1)
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if a[n] > a[n - 1]:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: mySwap(a, n, n - 1)
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'def displayList(a):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(PEOPLE):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: names = [None] * PEOPLE
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(PEOPLE):'
  prefs: []
  type: TYPE_NORMAL
- en: 'names[i] = input("Enter a name: ")'
  prefs: []
  type: TYPE_NORMAL
- en: mySort(names)          #Sort names in ascending order
  prefs: []
  type: TYPE_NORMAL
- en: 'displayList(names)     #and display them'
  prefs: []
  type: TYPE_NORMAL
- en: 'mySort(names, False)   #Sort names in descending order'
  prefs: []
  type: TYPE_NORMAL
- en: 'displayList(names)     #and display them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the argument ascending is an optional argument.
    This means that if no value is passed for that argument, the default value True
    is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In Python, lists are passed by reference. This is why there
    is no need to include a return statement in the subprograms mySwap() and mySort().'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 37.2-3 Progressive Rates and Electricity Consumption
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The LAV Electricity Company charges subscribers for their electricity consumption
    according to the following table (monthly rates for domestic accounts).
  prefs: []
  type: TYPE_NORMAL
- en: '| Kilowatt‑hours (kWh) | USD per kWh |'
  prefs: []
  type: TYPE_TB
- en: '| kWh ≤ 400 | $0.08 |'
  prefs: []
  type: TYPE_TB
- en: '| 401 ≤ kWh ≤ 1500 | $0.22 |'
  prefs: []
  type: TYPE_TB
- en: '| 1501 ≤ kWh ≤ 2000 | $0.35 |'
  prefs: []
  type: TYPE_TB
- en: '| 2001 ≤ kWh | $0.50 |'
  prefs: []
  type: TYPE_TB
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named getConsumption that prompts the user to enter the
    total number of kWh consumed and then returns it. Using a loop control structure,
    the subprogram must also validate data input and display an error message when
    the user enters any negative values.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram named findAmount that accepts consumed kWh through its
    formal argument list and then returns the total amount to pay (according to the
    table above).
  prefs: []
  type: TYPE_NORMAL
- en: iii)Using the subprograms cited above, write a Python program that prompts the
    user to enter the total number of kWh consumed and then displays the total amount
    to pay. The program must iterate as many times as the user wishes. At the end
    of each calculation, the program must ask the user if they wish to calculate the
    total amount to pay for another consumer. If the answer is “yes” the program must
    repeat; it must end otherwise. Make your program accept the answer in all possible
    forms such as “yes”, “YES”, “Yes”, or even “YeS”.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the rates are progressive and that transmission services and
    distribution charges, as well as federal, state, and local taxes, add a total
    of 26% to each bill.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: There is nothing new here. Processing progressive rates is something that you
    have already learned! If this doesn't ring any bells, you need to refresh your
    memory and review the corresponding [Exercise 22.4-5](chapter22.html#toc_20).
  prefs: []
  type: TYPE_NORMAL
- en: The Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_37.2-3'
  prefs: []
  type: TYPE_NORMAL
- en: 'def getConsumption():'
  prefs: []
  type: TYPE_NORMAL
- en: 'consumption = int(input("Enter kWh consumed: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'while consumption < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Error: Invalid number!")'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'consumption = input("Enter a non-negative number: ")'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return consumption
  prefs: []
  type: TYPE_NORMAL
- en: 'def findAmount(kwh):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if kwh <= 400:'
  prefs: []
  type: TYPE_NORMAL
- en: amount = kwh * 0.08
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif kwh <= 1500:'
  prefs: []
  type: TYPE_NORMAL
- en: amount = 400 * 0.08 + (kwh - 400) * 0.22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif kwh <= 2000:'
  prefs: []
  type: TYPE_NORMAL
- en: amount = 400 * 0.08 + 1100 * 0.22 + (kwh - 1500) * 0.35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: amount = 400 * 0.08 + 1100 * 0.22 + 500 * 0.35 + (kwh - 2000) * 0.5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: amount += 0.26 * amount
  prefs: []
  type: TYPE_NORMAL
- en: return amount
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: kwh = getConsumption()
  prefs: []
  type: TYPE_NORMAL
- en: print("You need to pay:", findAmount(kwh))
  prefs: []
  type: TYPE_NORMAL
- en: answer = input("Would you like to repeat? ")
  prefs: []
  type: TYPE_NORMAL
- en: 'if answer.upper() != "YES": break'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 37.2-4 Roll, Roll, Roll the… Dice!
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named dice that returns a random integer between 1 and
    6.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram named searchAndCount that accepts an integer and a list
    through its formal argument list and returns the number of times the integer exists
    in the list.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Using the subprograms cited above, write a Python program that fills a list
    with 100 random integers (between 1 and 6) and then lets the user enter an integer.
    The program must display how many times that user-provided integer exists in the
    list.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Both subprograms can be written as functions because they both return one value
    each. Function dice() returns a random integer between 1 and 6, and function searchAndCount()
    returns a number that indicates the number of times an integer exists in a list.
    The solution is presented here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_37.2-4'
  prefs: []
  type: TYPE_NORMAL
- en: from random import randrange
  prefs: []
  type: TYPE_NORMAL
- en: ELEMENTS = 100
  prefs: []
  type: TYPE_NORMAL
- en: 'def dice():'
  prefs: []
  type: TYPE_NORMAL
- en: return randrange(1, 7)
  prefs: []
  type: TYPE_NORMAL
- en: 'def searchAndCount(x, a):'
  prefs: []
  type: TYPE_NORMAL
- en: count = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ELEMENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a[i] == x:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: count += 1
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: return count
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: a = [None] * ELEMENTS
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ELEMENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: a[i] = dice()
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: print("Provided value exists in the list", searchAndCount(x, a), "times")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 37.2-5 How Many Times Does Each Number of the Dice Appear?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using the functions dice() and searchAndCount() cited in the previous exercise
    ([Exercise 37.2-4](#toc_10)), write a Python program that fills a list with 100
    random integers (between 1 and 6) and then displays how many times each of the
    six numbers appears in the list, as well as which number appears most often.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: If you were to solve this exercise without using a loop control structure, you
    would proceed as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '#Assign to n1 the number of times that value 1 exists in list a'
  prefs: []
  type: TYPE_NORMAL
- en: n1 = searchAndCount(1, a)
  prefs: []
  type: TYPE_NORMAL
- en: '#Assign to n2 the number of times that value 2 exists in list a'
  prefs: []
  type: TYPE_NORMAL
- en: n2 = searchAndCount(2, a)
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: '#Assign to n6 the number of times that value 6 exists in list a'
  prefs: []
  type: TYPE_NORMAL
- en: n6 = searchAndCount(6, a)
  prefs: []
  type: TYPE_NORMAL
- en: '#Display how many times each of the six numbers appears in list a'
  prefs: []
  type: TYPE_NORMAL
- en: print(n1, n2, n3, n4, n5, n6)
  prefs: []
  type: TYPE_NORMAL
- en: '#Find maximum of n1, n2,… n6'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = n1
  prefs: []
  type: TYPE_NORMAL
- en: maxI = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if n2 > maximum:'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = n2
  prefs: []
  type: TYPE_NORMAL
- en: maxI = 2
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 'if n6 > maximum:'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = n6
  prefs: []
  type: TYPE_NORMAL
- en: maxI = 6
  prefs: []
  type: TYPE_NORMAL
- en: '#Display which number appears in the list most often.'
  prefs: []
  type: TYPE_NORMAL
- en: print(maxI)
  prefs: []
  type: TYPE_NORMAL
- en: But now that you are reaching the end of this book, of course, you can do something
    more creative. Instead of assigning each result of the searchAndCount() function
    to individual variables n1, n2, n3, n4, n5, and n6, you can assign those results
    to the positions 0, 1, 2, 3, 4, and 5 of a list named n, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: n = [None] * 6
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(6):'
  prefs: []
  type: TYPE_NORMAL
- en: n[i] = searchAndCount(i + 1, a)
  prefs: []
  type: TYPE_NORMAL
- en: After that, you can find the maximum of the list n using what you learned in
    [Section 33.3](chapter33a.html#toc_9).
  prefs: []
  type: TYPE_NORMAL
- en: The complete solution is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_37.2-5'
  prefs: []
  type: TYPE_NORMAL
- en: from random import randrange
  prefs: []
  type: TYPE_NORMAL
- en: ELEMENTS = 100
  prefs: []
  type: TYPE_NORMAL
- en: 'def dice():'
  prefs: []
  type: TYPE_NORMAL
- en: return randrange(1, 7)
  prefs: []
  type: TYPE_NORMAL
- en: 'def searchAndCount(x, a):'
  prefs: []
  type: TYPE_NORMAL
- en: count = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ELEMENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a[i] == x:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: count += 1
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: return count
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: '#Create list a of random integers between 1 and 6'
  prefs: []
  type: TYPE_NORMAL
- en: a = [None] * ELEMENTS
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ELEMENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: a[i] = dice()
  prefs: []
  type: TYPE_NORMAL
- en: '#Create list n and display how many times each of the six numbers appears in
    list a'
  prefs: []
  type: TYPE_NORMAL
- en: n = [None] * 6
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(6):'
  prefs: []
  type: TYPE_NORMAL
- en: n[i] = searchAndCount(i + 1, a)
  prefs: []
  type: TYPE_NORMAL
- en: print("Value", i + 1, "appears", n[i], "times")
  prefs: []
  type: TYPE_NORMAL
- en: '#Find maximum of list n'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = n[0]
  prefs: []
  type: TYPE_NORMAL
- en: maxI = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 6):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if n[i] > maximum:'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = n[i]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: maxI = i
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Display which number appears in the list most often.'
  prefs: []
  type: TYPE_NORMAL
- en: print("Value", maxI + 1, "appears in the list", maximum, "times.")
  prefs: []
  type: TYPE_NORMAL
- en: 37.3 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: '1)Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named displayMenu that displays the following menu.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Convert USD to Euro (EUR)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Convert USD to British Pound Sterling (GBP)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Convert USD to Japanese Yen (JPY)
  prefs: []
  type: TYPE_NORMAL
- en: 4)Convert USD to Canadian Dollar (CAD)
  prefs: []
  type: TYPE_NORMAL
- en: 5)Exit
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write four different subprograms named USD_to_EU, USD_to_GBP, USD_to_JPY,
    and USD_to_CAD, that accept a currency through their formal argument list and
    then return the corresponding converted value.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Using the subprograms cited above, write a Python program that displays
    the previously mentioned menu and then prompts the user to enter a choice (of
    1, 2, 3, 4, or 5). If choice 1, 2, 3, or 4 is selected, the program must prompt
    the user to enter an amount of money and then it must calculate and display the
    corresponding converted value. The process must repeat as many times as the user
    wishes.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is given that:'
  prefs: []
  type: TYPE_NORMAL
- en: ►$1 = 0.94 EUR (€)
  prefs: []
  type: TYPE_NORMAL
- en: ►$1 = 0.81 GBP (£)
  prefs: []
  type: TYPE_NORMAL
- en: ►$1 = ¥ 149.11 JPY
  prefs: []
  type: TYPE_NORMAL
- en: ►$1 = 1.36 CAD ($)
  prefs: []
  type: TYPE_NORMAL
- en: '2)Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named displayMenu that displays the following menu.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Convert USD to Euro (EUR)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Convert USD to British Pound Sterling (GBP)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Convert EUR to USD
  prefs: []
  type: TYPE_NORMAL
- en: 4)Convert EUR to GBP
  prefs: []
  type: TYPE_NORMAL
- en: 5)Convert GBP to USD
  prefs: []
  type: TYPE_NORMAL
- en: 6)Convert GBP to EUR
  prefs: []
  type: TYPE_NORMAL
- en: 7)Exit
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write two different subprograms named USD_to_EUR, and USD_to_GBP, that accept
    a currency through their formal argument list and then return the corresponding
    converted value.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Using the subprograms cited above, write a Python program that displays
    the previously mentioned menu and then prompts the user to enter a choice (of
    1 to 7) and an amount. The program must then display the required value. The process
    must repeat as many times as the user wishes. It is given that
  prefs: []
  type: TYPE_NORMAL
- en: ►$1 = 0.94 EUR (€)
  prefs: []
  type: TYPE_NORMAL
- en: ►$1 = 0.81 GBP (£)
  prefs: []
  type: TYPE_NORMAL
- en: '3)Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named factorial that accepts an integer through its formal
    argument list and returns its factorial.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram factorial() cited above, write a subprogram named mySin
    that accepts a value through its formal argument list and returns the sine of
    x, using the Taylor series (shown next) with an accuracy of 0.0000000001.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter29-26.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Keep in mind that x is in radians, and ![Image](img/chapter29-27.png).'
  prefs: []
  type: TYPE_NORMAL
- en: iii)Write a subprogram named degreesToRad that accepts an angle in degrees through
    its formal argument list and returns its radian equivalent. It is given that 2π
    = 360^ο.
  prefs: []
  type: TYPE_NORMAL
- en: iv)Using the subprograms mySin() and degreesToRad() cited above, write a Python
    program that displays the sine of all integers from 0^o to 360^o.
  prefs: []
  type: TYPE_NORMAL
- en: '4)Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named isLeap that accepts a year through its formal argument
    list and returns True or False depending on whether or not that year is a leap
    year.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram named numOfDays that accepts a month and a year and returns
    the number of the days in that month. If that month is February and the year is
    a leap year, the subprogram must return the value of 29.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Use the subprogram isLeap() cited above.'
  prefs: []
  type: TYPE_NORMAL
- en: iii)Write a subprogram named checkDate that accepts a day, a month, and a year
    and returns True or False depending on whether or not that date is valid.
  prefs: []
  type: TYPE_NORMAL
- en: iv)Using the subprograms cited above, write a Python program that prompts the
    user to enter a date (a day, a month, and a year) and then calculates and displays
    the number of days that have passed between the beginning of the user-provided
    year and the user-provided date. Using a loop control structure, the program must
    also validate data input and display an error message when the user enters any
    non-valid date.
  prefs: []
  type: TYPE_NORMAL
- en: '5)In a computer game, players roll two dice. The player who gets the greatest
    sum of dice gets one point. After ten rolls, the player that wins is the one with
    the greatest sum of points. Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named dice that returns a random integer between 1 and
    6.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that prompts two
    players to enter their names. Then, each player consecutively “rolls” two dice
    ten times. The player that wins is the one with the greatest sum of points.
  prefs: []
  type: TYPE_NORMAL
- en: '6)The LAV Car Rental Company has rented 40 cars, which are divided into three
    categories: hybrid, gas, and diesel. The company charges for a car according to
    the following table.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Days | Car Type |'
  prefs: []
  type: TYPE_TB
- en: '| Gas | Diesel | Hybrid |'
  prefs: []
  type: TYPE_TB
- en: '| 1 ‐ 5 | $24 per day | $28 per day | $30 per day |'
  prefs: []
  type: TYPE_TB
- en: '| 6 ‐ 8 | $22 per day | $25 per day | $28 per day |'
  prefs: []
  type: TYPE_TB
- en: '| 9 and above | $18 per day | $21 per day | $23 per day |'
  prefs: []
  type: TYPE_TB
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named getChoice that displays the following menu.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Gas
  prefs: []
  type: TYPE_NORMAL
- en: 2)Diesel
  prefs: []
  type: TYPE_NORMAL
- en: 3)Hybrid
  prefs: []
  type: TYPE_NORMAL
- en: The subprogram then prompts the user to enter the type of the car (1, 2, or
    3) and returns it to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram named getDays that prompts the user to enter the total
    number of rental days and returns it to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Write a subprogram named getCharge that accepts the type of the car (1,
    2, or 3) and the total number of rental days through its formal argument list
    and then returns the amount of money to pay according to the previous table. Federal,
    state, and local taxes add a total of 10% to each bill.
  prefs: []
  type: TYPE_NORMAL
- en: 'iv)Using the subprograms cited above, write a Python program that prompts the
    user to enter all necessary information about the rented cars and then displays
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: a)for each car, the total amount to pay including taxes
  prefs: []
  type: TYPE_NORMAL
- en: b)the total number of hybrid cars rented
  prefs: []
  type: TYPE_NORMAL
- en: c)the total net profit the company gets after removing taxes
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the rates are progressive.
  prefs: []
  type: TYPE_NORMAL
- en: 7)TAM (Television Audience Measurement) is the specialized branch of media research
    dedicated to quantify and qualify television audience information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The LAV Television Audience Measurement Company counts the number of viewers
    of the main news program on each of 10 different TV channels. The company needs
    a software application in order to get some useful information. Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named getData that prompts the user to enter into two lists
    the names of the channels and the number of viewers of the main news program for
    each day of the week (Monday to Sunday). It then returns these lists to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram getAverage that accepts a one-dimensional list through
    its formal argument list and returns the average value of the first five elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'iii)Using the subprograms cited above, write a Python program that prompts
    the user to enter the names of the channels and the number of viewers for each
    day of the week and then displays the following:'
  prefs: []
  type: TYPE_NORMAL
- en: a)the name of the channels whose average viewer numbers on the weekend were
    at least 20% higher than the average viewer numbers during the rest of the week.
  prefs: []
  type: TYPE_NORMAL
- en: b)the name of the channels (if any) that, from day to day, showed constantly
    increasing viewer numbers. If there is no such channel, a corresponding message
    must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '8)A public opinion polling company asks 300 citizens whether they have been
    hospitalized during the Covid-19 lockdown period. Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named inputData that prompts the user to enter the citizen's
    SSN (Social Security Number) and their answer (Yes, No) into two lists, SSNs and
    answers, respectively. The two lists must be returned to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram named sortLists that accepts the lists SSNs and answers
    through its formal argument list. It then sorts list SSNs in ascending order using
    the selection sort algorithm. The subprogram must preserve the one-to-one correspondence
    between the elements of the two lists.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Write a subprogram named searchList that accepts list SSNs and an SSN through
    its formal argument list and then returns the index position of that SSN in the
    list. If the SSN is not found, a message “SSN not found” must be displayed and
    the value −1 must be returned. Use the binary search algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: iv)Write a subprogram named countAnswers that accepts the list answers and an
    answer through its formal argument list. It then returns the number of times this
    answer exists in the list.
  prefs: []
  type: TYPE_NORMAL
- en: v)Using the subprograms cited above, write a Python program that prompts the
    user to enter the SSNs and the answers of the citizens. It must then prompt the
    user to enter an SSN and display the answer that the citizen with this SSN gave,
    as well as the percentage of citizens that gave the same answer in relation to
    the total number of citizens. The program must then ask the user if they wish
    to search for another SSN. If the answer is “Yes” the process must repeat; it
    must end otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '9)Eight teams participate in a football tournament, and each team plays 12
    games, one game each week. Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named inputData that prompts the user to enter the name
    of each team and the letter “W” for win, “L” for loss, or “T” for tie (draw) for
    each game into two lists, names and results, respectively. It then returns the
    lists to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram named displayResult that accepts lists names and results
    through its formal argument list. It then prompts the user for a letter (W, L,
    or T) and displays, for each team, the week number(s) in which the team won, lost,
    or tied respectively. For example, if the user enters “L”, the subprogram must
    search and display, for each team, the week numbers (e.g., week 3, week 14, and
    so on) in which the team lost the game.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Write a subprogram named findTeam that accepts list names through its formal
    argument list. It then prompts the user to enter the name of a team and returns
    the index position of that team in the list. If the user-provided team name does
    not exist, the value −1 must be returned.
  prefs: []
  type: TYPE_NORMAL
- en: iv)Using the subprograms cited above, write a Python program that prompts the
    user to enter the name of each team and the letter “W” for win, “L” for loss,
    or “T” for tie (draw) for each game. It must then prompt the user for a letter
    (W, L, or T) and display, for each team, the week number(s) in which the team
    won, lost, or tied respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the program must prompt the user to enter the name of a team. If the
    user-provided team is found, the program must display the total number of points
    for this team and then prompt the user to enter the name of another team. This
    process must repeat as long as the user enters an existing team name. If user-provided
    team name is not found, the message “Team not found” must be displayed and the
    program must end.
  prefs: []
  type: TYPE_NORMAL
- en: It is given that a win receives 3 points and a tie receives 1 point.
  prefs: []
  type: TYPE_NORMAL
- en: '10)Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named hasDuplicateDigits that accepts an integer and returns
    True when any of its digits appears more than once; it must return False otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Declare a list of 10 elements to keep track of the occurrences of each
    digit. The list must be initialized to all zeros.'
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter an integer and displays a message indicating whether or not, any
    of its digits appears more than once. Moreover, using a loop control structure,
    the program must validate data input and display an error message when the user
    enters any value less than 11.
  prefs: []
  type: TYPE_NORMAL
