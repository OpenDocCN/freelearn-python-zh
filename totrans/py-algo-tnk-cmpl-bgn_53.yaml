- en: Chapter 37
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 37 章
- en: More with Subprograms
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于子程序的内容
- en: 37.1 Simple Exercises with Subprograms
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 37.1 使用子程序进行简单练习
- en: Exercise 37.1-1 A Simple Currency Converter
  id: totrans-3
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 37.1-1 简单货币转换器
- en: 'Do the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: i)Write a subprogram named displayMenu that displays the following menu.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为 displayMenu 的子程序，显示以下菜单。
- en: 1)Convert USD to Euro (EUR)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 1)将美元 (USD) 转换为欧元 (EUR)
- en: 2)Convert Euro (EUR) to USD
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2)将欧元 (EUR) 转换为美元
- en: 3)Exit
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 3)退出
- en: ii)Using the subprogram cited above, write a Python program that displays the
    previously mentioned menu and prompts the user to enter a choice (of 1, 2, or
    3). If choice 1 or 2 is selected, the program must prompt the user to enter an
    amount of money and then it must calculate and display the corresponding converted
    value. The process must repeat as many times as the user wishes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述子程序，编写一个 Python 程序，显示之前提到的菜单并提示用户输入选择（1、2 或 3）。如果选择 1 或 2，程序必须提示用户输入金额，然后必须计算并显示相应的转换值。此过程必须根据用户的意愿重复进行。
- en: It is given that $1 = 0.94 EUR (€).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 已知 1 美元 = 0.94 欧元 (€)。
- en: Solution
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: According to the “Ultimate” rule, the while-loop of the main code must be as
    follows, given in general form.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据“终极”规则，主代码中的 while 循环必须如下，以一般形式给出。
- en: displayMenu();
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: displayMenu();
- en: 'choice = int(input())     #Initialization of choice.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 'choice = int(input())     #choice 的初始化'
- en: 'while choice != 3:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 'while choice != 3:'
- en: Prompt the user to enter an amount of money, and then calculate and display
    the required value.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 提示用户输入金额，然后计算并显示所需的价值。
- en: displayMenu();
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: displayMenu();
- en: 'choice = int(input()) #Update/alteration of choice'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 'choice = int(input()) #更新/修改选择'
- en: The solution is as follows.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案如下。
- en: '![](img/my_exercise_header.png) file_37.1-1'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_37.1-1'
- en: 'def displayMenu():'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'def displayMenu():'
- en: print("----------------------------")
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: print("----------------------------")
- en: print("1\. Convert USD to Euro (EUR)")
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: print("1. 将美元 (USD) 转换为欧元 (EUR)")
- en: print("2\. Convert Euro (EUR) to USD")
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: print("2. 将欧元 (EUR) 转换为美元")
- en: print("3\. Exit")
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: print("3. 退出")
- en: print("----------------------------")
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: print("----------------------------")
- en: 'print("Enter a choice: ", end = "")'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("输入选择: ", end = "")'
- en: '#Main code starts here'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: displayMenu()
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: displayMenu()
- en: choice = int(input())
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: choice = int(input())
- en: 'while choice != 3:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 'while choice != 3:'
- en: 'amount = float(input("Enter an amount: "))'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'amount = float(input("输入金额: "))'
- en: 'if choice == 1:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'if choice == 1:'
- en: print(amount, "USD =", amount * 0.94, "Euro")
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(amount, "USD =", amount * 0.94, "Euro")
- en: 'else:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print(amount, "Euro =", amount / 0.94, "USD")
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(amount, "Euro =", amount / 0.94, "USD")
- en: displayMenu()
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: displayMenu()
- en: choice = int(input())
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: choice = int(input())
- en: Exercise 37.1-2 Finding the Average Values of Positive Integers
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 37.1-2 查找正整数的平均值
- en: 'Do the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: i)Write a subprogram named testInteger that accepts a number through its formal
    argument list and returns True when the passed number is an integer; it must return
    False otherwise.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为 testInteger 的子程序，它通过其形式参数列表接受一个数字，当传递的数字是整数时返回 True；否则返回 False。
- en: ii)Using the subprogram cited above, write a Python program that lets the user
    enter numeric values repeatedly until a real one is entered. In the end, the program
    must display the average value of positive integers entered.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述子程序，编写一个 Python 程序，允许用户重复输入数值，直到输入一个实数。最后，程序必须显示输入的正整数的平均值。
- en: Solution
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: To solve this exercise, a while statement will be used. According to the “Ultimate”
    rule discussed in [Section 28.3](chapter28.html#toc_3), the pre-test loop structure
    that solves this problem should be as follows.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个练习，将使用 while 语句。根据第 28.3 节中讨论的“终极”规则，解决此问题的预测试循环结构应如下所示。
- en: 'x = float(input())   #Initialization of x'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 'x = float(input())   #x 的初始化'
- en: 'while testInteger(x):   #Boolean expression dependent on x'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 'while testInteger(x):   #依赖于 x 的布尔表达式'
- en: A statement or block of statements
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: 'x = float(input())   #Update/alteration of x'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'x = float(input())   #x 的更新/修改'
- en: '![](img/notice.jpg)The statement while testInteger(x) is equivalent to the
    statement while testInteger(x) == True.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)语句 while testInteger(x) 等价于语句 while testInteger(x) == True。'
- en: The final solution is presented next.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最终解决方案将在下面展示。
- en: '![](img/my_exercise_header.png) file_37.1-2'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_37.1-2'
- en: 'def testInteger(number):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 'def testInteger(number):'
- en: returnValue = False
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: returnValue = False
- en: 'if number == int(number):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 'if number == int(number):'
- en: returnValue = True
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: returnValue = True
- en: return returnValue
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: return returnValue
- en: '#Main code starts here'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: total = 0
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: count = 0
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: count = 0
- en: x = float(input())  #Initialization of x
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())  #x 的初始化
- en: 'while testInteger(x):  #Boolean Expression dependent on x'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 'while testInteger(x):  #依赖于 x 的布尔表达式'
- en: 'if x > 0:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x > 0:'
- en: total += x
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += x
- en: count += 1
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: count += 1
- en: x = float(input())  #Update/alteration of x
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())  #更新/修改 x
- en: 'if count > 0:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 'if count > 0:'
- en: print(total / count)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: print(总和 / count)
- en: '![](img/notice.jpg)Note the last single-alternative decision structure, if
    count > 0\. It is necessary in order for the program to satisfy the property of
    definiteness. Think about it! If the user enters a real right from the beginning,
    the variable count, in the end, will contain a value of zero.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意最后的单分支决策结构，if count > 0\. 它对于程序满足确定性属性是必要的。想想看！如果用户一开始就输入一个实数，那么变量
    count，最终将包含零的值。'
- en: '![](img/notice.jpg)The following function can be used as an alternative to
    the previous one. It directly returns the result (True or False) of the Boolean
    expression number == int(number).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)以下函数可以作为之前函数的替代。它直接返回布尔表达式数字等于 int(数字)的结果（True 或 False）。'
- en: 'def test_integer(number):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 'def test_integer(数字):'
- en: return number == int(number)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: return 数字等于 int(数字)
- en: Exercise 37.1-3 Finding the Sum of Odd Positive Integers
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 37.1-3 求奇数正整数的和
- en: 'Do the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: i)Write a subprogram named testInteger that accepts a number through its formal
    argument list and returns True when the passed number is an integer; it must return
    False otherwise.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为 testInteger 的子程序，它通过其形式参数列表接受一个数字，当传入的数字是整数时返回 True；否则返回 False。
- en: ii)Write a subprogram named testOdd that accepts a number through its formal
    argument list and returns True when the passed number is odd; it must return False
    otherwise.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ii)编写一个名为 testOdd 的子程序，它通过其形式参数列表接受一个数字，当传入的数字是奇数时返回 True；否则返回 False。
- en: iii)Write a subprogram named testPositive that accepts a number through its
    formal argument list and returns True when the passed number is positive; it must
    return False otherwise.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: iii)编写一个名为 testPositive 的子程序，它通过其形式参数列表接受一个数字，当传入的数字是正数时返回 True；否则返回 False。
- en: iv)Using the subprograms cited above, write a Python program that lets the user
    enter numeric values repeatedly until a negative one is entered. In the end, the
    program must display the sum of odd positive integers entered.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: iv)使用上述子程序，编写一个Python程序，允许用户重复输入数值，直到输入一个负数。最后，程序必须显示输入的奇数正整数的总和。
- en: Solution
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: This exercise is pretty much the same as the previous one. Each subprogram returns
    one value (which can be True or False). The solution is presented here.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习基本上与上一个相同。每个子程序返回一个值（可以是 True 或 False）。解决方案在此处展示。
- en: '![](img/my_exercise_header.png) file_37.1-3'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_37.1-3'
- en: 'def testInteger(number):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'def test_integer(数字):'
- en: return number == int(number)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: return 数字等于 int(数字)
- en: 'def testOdd(number):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 'def testOdd(数字):'
- en: return number % 2 != 0
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: return 数字 % 2 != 0
- en: 'def testPositive(number):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 'def testPositive(数字):'
- en: return number > 0
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: return 数字 > 0
- en: '#Main code starts here'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: total = 0
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 总和 = 0
- en: x = float(input())
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: 'while testPositive(x):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 'while testPositive(x):'
- en: 'if testInteger(x) and testOdd(x):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'if testInteger(x) and testOdd(x):'
- en: total += x
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 总和 += x
- en: x = float(input())
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: print(total)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: print(总和)
- en: '![](img/notice.jpg)The statement if testInteger(x) and testOdd(x) is equivalent
    to the statement if testInteger(x) == True and testOdd(x) == True'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)语句 if testInteger(x) and testOdd(x) 等价于语句 if testInteger(x)
    == True and testOdd(x) == True'
- en: Exercise 37.1-4 Finding the Values of y
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 37.1-4 求解 y 的值
- en: Write a Python program that finds and displays the value of y (if possible)
    in the following formula.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，找出并显示以下公式中 y 的值（如果可能）。
- en: .![Image](img/chapter37-01.png)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter37-01.png)
- en: For each part of the formula, write a subprogram that accepts x through its
    formal argument list and then calculates and displays the result. The subprogram
    must display an error message when the calculation is not possible.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于公式的每一部分，编写一个子程序，它通过其形式参数列表接受 x，然后计算并显示结果。当计算不可能时，子程序必须显示错误信息。
- en: Solution
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Each subprogram must calculate and display the result of the corresponding formula
    or display an error message when the calculation is not possible. As these two
    subprograms return no result, they can both be written as void functions. The
    solution is shown here.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每个子程序必须计算并显示相应公式的结果，或者在计算不可能时显示错误信息。由于这两个子程序不返回结果，它们都可以写成 void 函数。解决方案在此处展示。
- en: '![](img/my_exercise_header.png) file_37.1-4'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_37.1-4'
- en: 'def formula1(x):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 'def formula1(x):'
- en: 'if x == 5:  #No need to check for x == 0 when x >= 1'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x == 5:  #当 x >= 1 时，无需检查 x == 0'
- en: print("Error! Division by zero")
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("错误！除以零")
- en: 'else:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y = 3 * x / (x - 5) + (7 - x) / (2 * x)
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = 3 * x / (x - 5) + (7 - x) / (2 * x)
- en: print(y)
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(y)
- en: 'def formula2(x):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 'def formula2(x):'
- en: 'if x == -2:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x == -2:'
- en: print("Error! Division by zero")
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("错误！除以零")
- en: 'else:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y = (45 - x) / (x + 2) + 3 * x
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = (45 - x) / (x + 2) + 3 * x
- en: print(y)
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(y)
- en: '#Main code starts here'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'x = float(input("输入x的值: "))'
- en: 'x = float(input("Enter a value for x: "))'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为getAge的子程序，提示用户输入他们的年龄并返回它。使用循环控制结构，子程序还必须验证数据输入，并在用户输入任何非正值时显示错误消息。
- en: 'if x >= 1:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x >= 1:'
- en: formula1(x)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: formula1(x)
- en: 'else:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: formula2(x)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: formula2(x)
- en: 37.2 Exercises of a General Nature with Subprograms
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 37.2 具有子程序的一般性质练习
- en: Exercise 37.2-1 Validating Data Input Using a Subprogram
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 37.2-1 使用子程序验证数据输入
- en: 'Do the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 37.2-2 使用子程序对列表进行排序
- en: i)Write a subprogram named getAge that prompts the user to enter their age and
    returns it. Using a loop control structure, the subprogram must also validate
    data input and display an error message when the user enters any non-positive
    values.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: ii)Write a subprogram named findMax that accepts a list through its formal argument
    list and returns the index position of the maximum value of the list.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ii)编写一个名为findMax的子程序，它通过形式参数列表接受一个列表，并返回列表中最大值的索引位置。
- en: iii)Using the subprograms cited above, write a Python program that prompts the
    user to enter the first names, last names, and ages of 50 people into three lists
    and then displays the name of the oldest person.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: iii)使用上述子程序编写一个Python程序，提示用户输入50人的名字、姓氏和年龄到三个列表中，然后显示最年长的人的名字。
- en: Solution
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Since the subprogram getAge() returns one value, it can be written as a function.
    The same applies to subprogram findMax() because it also returns one value. The
    main code must prompt the user to enter the first names, the last names, and the
    ages of 50 people into lists firstNames, lastNames, and ages respectively. Then,
    with the help of function findMax(), it can find the index position of the maximum
    value of list ages. The solution is shown here.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于子程序getAge()返回一个值，它可以写成函数。同样，对于也返回一个值的findMax()子程序也是如此。主代码必须提示用户首先将50人的名字、姓氏和年龄分别输入到firstNames、lastNames和ages列表中。然后，借助findMax()函数，它可以找到ages列表中最大值的索引位置。解决方案如下。
- en: '![](img/my_exercise_header.png) file_37.2-1'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_37.2-1'
- en: PEOPLE = 50
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: PEOPLE = 50
- en: 'def getAge():'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 'def getAge():'
- en: 'age = int(input("Enter an age: "))'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 'age = int(input("输入年龄: "))'
- en: 'while age <= 0:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 'while age <= 0:'
- en: 'print("Error: Invalid age!")'
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("错误：无效的年龄！")
- en: 'age = int(input("Enter a positive number: "))'
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'age = int(input("输入一个正数: "))'
- en: return age
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: return age
- en: 'def findMax(a):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'def findMax(a):'
- en: maximum = a[0]
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: maximum = a[0]
- en: maxI = 0
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: maxI = 0
- en: 'for i in range(1, PEOPLE):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, PEOPLE):'
- en: 'if a[i] > maximum:'
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if a[i] > maximum:'
- en: maximum = a[i]
  id: totrans-142
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: maximum = a[i]
- en: maxI = i
  id: totrans-143
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: maxI = i
- en: return maxI
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: return maxI
- en: '#Main code starts here'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: firstNames = [None] * PEOPLE
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: firstNames = [None] * PEOPLE
- en: lastNames = [None] * PEOPLE
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: lastNames = [None] * PEOPLE
- en: ages = [None] * PEOPLE
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: ages = [None] * PEOPLE
- en: 'for i in range(PEOPLE):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(PEOPLE):'
- en: 'firstNames[i] = input("First name of person No" + str(i + 1) + ": ")'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 'firstNames[i] = input("第" + str(i + 1) + "个人的名字: ")'
- en: 'lastNames[i] = input("Last name of person No" + str(i + 1) + ": ")'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 'lastNames[i] = input("第" + str(i + 1) + "个人的姓氏: ")'
- en: ages[i] = getAge()
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: ages[i] = getAge()
- en: indexOfMax = findMax(ages)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: indexOfMax = findMax(ages)
- en: print("The oldest person is:", firstNames[indexOfMax], lastNames[indexOfMax])
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: print("最年长的人是:", firstNames[indexOfMax], lastNames[indexOfMax])
- en: print("They are", ages[indexOfMax], "years old!")
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: print("他们", ages[indexOfMax], "岁！")
- en: Exercise 37.2-2 Sorting a List Using a Subprogram
  id: totrans-156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: 'Do the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: i)Write a subprogram named mySwap that accepts a list through its formal argument
    list, as well as two indexes. The subprogram then swaps the values of the elements
    at the corresponding index positions.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为mySwap的子程序，它通过形式参数列表接受一个列表，以及两个索引。然后，子程序交换相应索引位置的元素值。
- en: ii)Using the subprogram mySwap() cited above, write a subprogram named mySort
    that accepts a list through its formal argument list and then sorts the list using
    the bubble sort algorithm. It must be able to sort in either ascending or descending
    order. To do this, include an addition Boolean argument within the formal argument
    list.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上面提到的mySwap()子程序，编写一个名为mySort的子程序，它通过形式参数列表接受一个列表，然后使用冒泡排序算法对列表进行排序。它必须能够按升序或降序排序。为此，在形式参数列表中包含一个额外的布尔参数。
- en: iii)Write a subprogram named displayList that accepts a list through its formal
    argument list and then displays it.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: iii)编写一个名为displayList的子程序，它通过形式参数列表接受一个列表，然后显示它。
- en: 'iv)Using the subprograms mySort() and displayList() cited above, write a Python
    program that prompts the user to enter the names of 20 people and then displays
    them twice: once sorted in ascending order, and once in descending order.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: iv)使用上面引用的子程序 mySort() 和 displayList()，编写一个 Python 程序，提示用户输入 20 个人的名字，然后显示两次：一次按升序排序，一次按降序排序。
- en: Solution
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: As you can see in the Python program below, the void function mySort() uses
    an adapted version of the bubble sort algorithm. When the value True is passed
    to the argument ascending, the algorithm sorts list a in ascending order. When
    the value False is passed, the algorithm sorts list a in descending order.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在下面的 Python 程序中可以看到，void 函数 mySort() 使用了冒泡排序算法的改进版本。当将值 True 传递给参数 ascending
    时，算法按升序对列表 a 进行排序。当传递值 False 时，算法按降序对列表 a 进行排序。
- en: Moreover, the void function mySort() calls the void function mySwap() every
    time a swap is required between the contents of two elements.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，void 函数 mySort() 在需要交换两个元素的内容时，每次都会调用 void 函数 mySwap()。
- en: '![](img/my_exercise_header.png) file_37.2-2'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_37.2-2'
- en: PEOPLE = 20
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: PEOPLE = 20
- en: 'def mySwap(a, index1, index2):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'def mySwap(a, index1, index2):'
- en: a[index1], a[index2] = a[index2] = a[index1]
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: a[index1], a[index2] = a[index2] = a[index1]
- en: 'def mySort(a, ascending = True):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'def mySort(a, ascending = True):'
- en: 'for m in range(PEOPLE - 1):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'for m in range(PEOPLE - 1):'
- en: 'for n in range(PEOPLE - 1, m, -1):'
  id: totrans-171
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'for n in range(PEOPLE - 1, m, -1):'
- en: 'if ascending:'
  id: totrans-172
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if ascending:'
- en: 'if a[n] < a[n - 1]:'
  id: totrans-173
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if a[n] < a[n - 1]:'
- en: mySwap(a, n, n - 1)
  id: totrans-174
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: mySwap(a, n, n - 1)
- en: 'else:'
  id: totrans-175
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'if a[n] > a[n - 1]:'
  id: totrans-176
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if a[n] > a[n - 1]:'
- en: mySwap(a, n, n - 1)
  id: totrans-177
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: mySwap(a, n, n - 1)
- en: 'def displayList(a):'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 'def displayList(a):'
- en: 'for i in range(PEOPLE):'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(PEOPLE):'
- en: print(a[i])
  id: totrans-180
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(a[i])
- en: '#Main code starts here'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: names = [None] * PEOPLE
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: names = [None] * PEOPLE
- en: 'for i in range(PEOPLE):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(PEOPLE):'
- en: 'names[i] = input("Enter a name: ")'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[i] = input("Enter a name: ")'
- en: mySort(names)          #Sort names in ascending order
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: mySort(names)          #按升序排序 names
- en: 'displayList(names)     #and display them'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'displayList(names)     #并显示它们'
- en: 'mySort(names, False)   #Sort names in descending order'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 'mySort(names, False)   #按降序排序 names'
- en: 'displayList(names)     #and display them.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 'displayList(names)     #并显示它们。'
- en: '![](img/notice.jpg)Note that the argument ascending is an optional argument.
    This means that if no value is passed for that argument, the default value True
    is used.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意，参数 ascending 是一个可选参数。这意味着如果没有为该参数传递值，则使用默认值 True。'
- en: '![](img/notice.jpg)In Python, lists are passed by reference. This is why there
    is no need to include a return statement in the subprograms mySwap() and mySort().'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在 Python 中，列表是通过引用传递的。这就是为什么在子程序 mySwap() 和 mySort() 中不需要包含返回语句。'
- en: Exercise 37.2-3 Progressive Rates and Electricity Consumption
  id: totrans-191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 37.2-3 递进费率和电力消耗
- en: The LAV Electricity Company charges subscribers for their electricity consumption
    according to the following table (monthly rates for domestic accounts).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: LAV 电力公司根据以下表格（家庭账户的月度费率）向用户收取电力消耗费用。
- en: '| Kilowatt‑hours (kWh) | USD per kWh |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 千瓦时 (kWh) | 每千瓦时美元 |'
- en: '| kWh ≤ 400 | $0.08 |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| kWh ≤ 400 | $0.08 |'
- en: '| 401 ≤ kWh ≤ 1500 | $0.22 |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 401 ≤ kWh ≤ 1500 | $0.22 |'
- en: '| 1501 ≤ kWh ≤ 2000 | $0.35 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 1501 ≤ kWh ≤ 2000 | $0.35 |'
- en: '| 2001 ≤ kWh | $0.50 |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 2001 ≤ kWh | $0.50 |'
- en: 'Do the following:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: i)Write a subprogram named getConsumption that prompts the user to enter the
    total number of kWh consumed and then returns it. Using a loop control structure,
    the subprogram must also validate data input and display an error message when
    the user enters any negative values.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为 getConsumption 的子程序，该子程序提示用户输入消耗的总千瓦时数，然后返回它。使用循环控制结构，该子程序还必须验证数据输入，并在用户输入任何负值时显示错误消息。
- en: ii)Write a subprogram named findAmount that accepts consumed kWh through its
    formal argument list and then returns the total amount to pay (according to the
    table above).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: ii)编写一个名为 findAmount 的子程序，该子程序通过其形式参数列表接受消耗的 kWh，然后返回应付的总金额（根据上面的表格）。
- en: iii)Using the subprograms cited above, write a Python program that prompts the
    user to enter the total number of kWh consumed and then displays the total amount
    to pay. The program must iterate as many times as the user wishes. At the end
    of each calculation, the program must ask the user if they wish to calculate the
    total amount to pay for another consumer. If the answer is “yes” the program must
    repeat; it must end otherwise. Make your program accept the answer in all possible
    forms such as “yes”, “YES”, “Yes”, or even “YeS”.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: iii)使用上述子程序编写一个Python程序，提示用户输入消耗的总千瓦时数，然后显示应付的总金额。程序必须根据用户的意愿进行迭代。每次计算结束后，程序必须询问用户是否希望为另一个消费者计算总金额。如果答案是“是”，程序必须重复；否则必须结束。程序必须接受所有可能的形式的答案，如“是”、“YES”、“Yes”或甚至“YeS”。
- en: Please note that the rates are progressive and that transmission services and
    distribution charges, as well as federal, state, and local taxes, add a total
    of 26% to each bill.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，费率是递进的，并且传输服务和分配费用，以及联邦、州和地方税，总共为每张账单增加了26%。
- en: Solution
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: There is nothing new here. Processing progressive rates is something that you
    have already learned! If this doesn't ring any bells, you need to refresh your
    memory and review the corresponding [Exercise 22.4-5](chapter22.html#toc_20).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么新的内容。处理递进费率是你已经学过的东西！如果这让你感到困惑，你需要刷新你的记忆并回顾相应的[练习22.4-5](chapter22.html#toc_20)。
- en: The Python program is as follows.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序如下。
- en: '![](img/my_exercise_header.png) file_37.2-3'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_37.2-3'
- en: 'def getConsumption():'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 'def getConsumption():'
- en: 'consumption = int(input("Enter kWh consumed: "))'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: consumption = int(input("输入消耗的千瓦时："))
- en: 'while consumption < 0:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 'while consumption < 0:'
- en: 'print("Error: Invalid number!")'
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("错误：无效的数字！")
- en: 'consumption = input("Enter a non-negative number: ")'
  id: totrans-211
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: consumption = input("输入一个非负数：")
- en: return consumption
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: return consumption
- en: 'def findAmount(kwh):'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 'def findAmount(kwh):'
- en: 'if kwh <= 400:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 'if kwh <= 400:'
- en: amount = kwh * 0.08
  id: totrans-215
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: amount = kwh * 0.08
- en: 'elif kwh <= 1500:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif kwh <= 1500:'
- en: amount = 400 * 0.08 + (kwh - 400) * 0.22
  id: totrans-217
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: amount = 400 * 0.08 + (kwh - 400) * 0.22
- en: 'elif kwh <= 2000:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif kwh <= 2000:'
- en: amount = 400 * 0.08 + 1100 * 0.22 + (kwh - 1500) * 0.35
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: amount = 400 * 0.08 + 1100 * 0.22 + (kwh - 1500) * 0.35
- en: 'else:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: amount = 400 * 0.08 + 1100 * 0.22 + 500 * 0.35 + (kwh - 2000) * 0.5
  id: totrans-221
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: amount = 400 * 0.08 + 1100 * 0.22 + 500 * 0.35 + (kwh - 2000) * 0.5
- en: amount += 0.26 * amount
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: amount += 0.26 * amount
- en: return amount
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: return amount
- en: '#Main code starts here'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: 'while True:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: kwh = getConsumption()
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: kwh = getConsumption()
- en: print("You need to pay:", findAmount(kwh))
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: print("你需要支付：", findAmount(kwh))
- en: answer = input("Would you like to repeat? ")
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: answer = input("你想重复吗？ ")
- en: 'if answer.upper() != "YES": break'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'if answer.upper() != "YES": break'
- en: Exercise 37.2-4 Roll, Roll, Roll the… Dice!
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习37.2-4 掷骰子！
- en: 'Do the following:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 做以下操作：
- en: i)Write a subprogram named dice that returns a random integer between 1 and
    6.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为dice的子程序，它返回1到6之间的随机整数。
- en: ii)Write a subprogram named searchAndCount that accepts an integer and a list
    through its formal argument list and returns the number of times the integer exists
    in the list.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: ii)编写一个名为searchAndCount的子程序，它通过形式参数列表接受一个整数和一个列表，并返回该整数在列表中存在的次数。
- en: iii)Using the subprograms cited above, write a Python program that fills a list
    with 100 random integers (between 1 and 6) and then lets the user enter an integer.
    The program must display how many times that user-provided integer exists in the
    list.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: iii)使用上述子程序编写一个Python程序，用100个随机整数（1到6之间）填充一个列表，然后让用户输入一个整数。程序必须显示用户提供的整数在列表中出现的次数。
- en: Solution
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Both subprograms can be written as functions because they both return one value
    each. Function dice() returns a random integer between 1 and 6, and function searchAndCount()
    returns a number that indicates the number of times an integer exists in a list.
    The solution is presented here.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个子程序都可以写成函数，因为它们都返回一个值。函数dice()返回1到6之间的随机整数，函数searchAndCount()返回一个表示整数在列表中存在的次数的数字。解决方案在此处展示。
- en: '![](img/my_exercise_header.png) file_37.2-4'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_37.2-4'
- en: from random import randrange
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: from random import randrange
- en: ELEMENTS = 100
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 100
- en: 'def dice():'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 'def dice():'
- en: return randrange(1, 7)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: return randrange(1, 7)
- en: 'def searchAndCount(x, a):'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 'def searchAndCount(x, a):'
- en: count = 0
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: count = 0
- en: 'for i in range(ELEMENTS):'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'if a[i] == x:'
  id: totrans-245
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if a[i] == x:'
- en: count += 1
  id: totrans-246
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: count += 1
- en: return count
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: return count
- en: '#Main code starts here'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: a = [None] * ELEMENTS
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: a = [None] * ELEMENTS
- en: 'for i in range(ELEMENTS):'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: a[i] = dice()
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: a[i] = dice()
- en: x = int(input())
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())
- en: print("Provided value exists in the list", searchAndCount(x, a), "times")
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: print("提供的值在列表中存在", searchAndCount(x, a), "次")
- en: Exercise 37.2-5 How Many Times Does Each Number of the Dice Appear?
  id: totrans-254
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习37.2-5：骰子中每个数字出现的次数是多少？
- en: Using the functions dice() and searchAndCount() cited in the previous exercise
    ([Exercise 37.2-4](#toc_10)), write a Python program that fills a list with 100
    random integers (between 1 and 6) and then displays how many times each of the
    six numbers appears in the list, as well as which number appears most often.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上一练习（[练习37.2-4](#toc_10)）中引用的dice()和searchAndCount()函数，编写一个Python程序，用100个随机整数（介于1和6之间）填充一个列表，然后显示列表中每个数字出现的次数，以及哪个数字出现最频繁。
- en: Solution
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: If you were to solve this exercise without using a loop control structure, you
    would proceed as follows.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不使用循环控制结构来解决这个问题，你可以按照以下步骤进行。
- en: '#Assign to n1 the number of times that value 1 exists in list a'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '#将值1在列表a中出现的次数赋值给n1'
- en: n1 = searchAndCount(1, a)
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: n1 = searchAndCount(1, a)
- en: '#Assign to n2 the number of times that value 2 exists in list a'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '#将值2在列表a中出现的次数赋值给n2'
- en: n2 = searchAndCount(2, a)
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: n2 = searchAndCount(2, a)
- en: .
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: '#Assign to n6 the number of times that value 6 exists in list a'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '#将值6在列表a中出现的次数赋值给n6'
- en: n6 = searchAndCount(6, a)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: n6 = searchAndCount(6, a)
- en: '#Display how many times each of the six numbers appears in list a'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '#显示列表a中每个数字出现的次数'
- en: print(n1, n2, n3, n4, n5, n6)
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: print(n1, n2, n3, n4, n5, n6)
- en: '#Find maximum of n1, n2,… n6'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '#找到n1、n2、… n6的最大值'
- en: maximum = n1
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: maximum = n1
- en: maxI = 1
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: maxI = 1
- en: 'if n2 > maximum:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 'if n2 > maximum:'
- en: maximum = n2
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: maximum = n2
- en: maxI = 2
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: maxI = 2
- en: .
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: 'if n6 > maximum:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 'if n6 > maximum:'
- en: maximum = n6
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: maximum = n6
- en: maxI = 6
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: maxI = 6
- en: '#Display which number appears in the list most often.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '#显示列表中出现次数最多的数字。'
- en: print(maxI)
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: print(maxI)
- en: But now that you are reaching the end of this book, of course, you can do something
    more creative. Instead of assigning each result of the searchAndCount() function
    to individual variables n1, n2, n3, n4, n5, and n6, you can assign those results
    to the positions 0, 1, 2, 3, 4, and 5 of a list named n, as shown here.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在你即将结束这本书的学习，当然，你可以做一些更有创意的事情。而不是将searchAndCount()函数的每个结果分别赋值给n1、n2、n3、n4、n5和n6这些变量，你可以将这些结果赋值给名为n的列表的0、1、2、3、4和5位置，如下所示。
- en: n = [None] * 6
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: n = [None] * 6
- en: 'for i in range(6):'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(6):'
- en: n[i] = searchAndCount(i + 1, a)
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: n[i] = searchAndCount(i + 1, a)
- en: After that, you can find the maximum of the list n using what you learned in
    [Section 33.3](chapter33a.html#toc_9).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，你可以使用你在[第33.3节](chapter33a.html#toc_9)中学到的知识来找到列表n的最大值。
- en: The complete solution is shown here.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的解决方案如下所示。
- en: '![](img/my_exercise_header.png) file_37.2-5'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_37.2-5'
- en: from random import randrange
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: from random import randrange
- en: ELEMENTS = 100
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 100
- en: 'def dice():'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 'def dice():'
- en: return randrange(1, 7)
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: return randrange(1, 7)
- en: 'def searchAndCount(x, a):'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 'def searchAndCount(x, a):'
- en: count = 0
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: count = 0
- en: 'for i in range(ELEMENTS):'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'if a[i] == x:'
  id: totrans-297
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if a[i] == x:'
- en: count += 1
  id: totrans-298
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: count += 1
- en: return count
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: return count
- en: '#Main code starts here'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: '#Create list a of random integers between 1 and 6'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '#创建列表a，包含1到6之间的随机整数'
- en: a = [None] * ELEMENTS
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: a = [None] * ELEMENTS
- en: 'for i in range(ELEMENTS):'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: a[i] = dice()
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: a[i] = dice()
- en: '#Create list n and display how many times each of the six numbers appears in
    list a'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '#创建列表n并显示列表a中每个数字出现的次数'
- en: n = [None] * 6
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: n = [None] * 6
- en: 'for i in range(6):'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(6):'
- en: n[i] = searchAndCount(i + 1, a)
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: n[i] = searchAndCount(i + 1, a)
- en: print("Value", i + 1, "appears", n[i], "times")
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: print("Value", i + 1, "appears", n[i], "times")
- en: '#Find maximum of list n'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '#找到列表n的最大值'
- en: maximum = n[0]
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: maximum = n[0]
- en: maxI = 0
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: maxI = 0
- en: 'for i in range(1, 6):'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, 6):'
- en: 'if n[i] > maximum:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 'if n[i] > maximum:'
- en: maximum = n[i]
  id: totrans-315
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: maximum = n[i]
- en: maxI = i
  id: totrans-316
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: maxI = i
- en: '#Display which number appears in the list most often.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '#显示列表中出现次数最多的数字。'
- en: print("Value", maxI + 1, "appears in the list", maximum, "times.")
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: print("Value", maxI + 1, "appears in the list", maximum, "times.")
- en: 37.3 Review Exercises
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 37.3 复习练习
- en: Complete the following exercises.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: '1)Do the following:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 1)执行以下操作：
- en: i)Write a subprogram named displayMenu that displays the following menu.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为displayMenu的子程序，显示以下菜单。
- en: 1)Convert USD to Euro (EUR)
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 1)将美元（USD）转换为欧元（EUR）
- en: 2)Convert USD to British Pound Sterling (GBP)
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 2)将美元（USD）转换为英镑（GBP）
- en: 3)Convert USD to Japanese Yen (JPY)
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 3)将美元（USD）转换为日元（JPY）
- en: 4)Convert USD to Canadian Dollar (CAD)
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 4)将美元（USD）转换为加拿大元（CAD）
- en: 5)Exit
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 5)退出
- en: ii)Write four different subprograms named USD_to_EU, USD_to_GBP, USD_to_JPY,
    and USD_to_CAD, that accept a currency through their formal argument list and
    then return the corresponding converted value.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: ii)编写四个不同的子程序，分别命名为USD_to_EU、USD_to_GBP、USD_to_JPY和USD_to_CAD，它们通过它们的正式参数列表接受货币，然后返回相应的转换值。
- en: iii)Using the subprograms cited above, write a Python program that displays
    the previously mentioned menu and then prompts the user to enter a choice (of
    1, 2, 3, 4, or 5). If choice 1, 2, 3, or 4 is selected, the program must prompt
    the user to enter an amount of money and then it must calculate and display the
    corresponding converted value. The process must repeat as many times as the user
    wishes.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: iii)使用上述子程序编写一个Python程序，显示之前提到的菜单，然后提示用户输入一个选择（1、2、3、4或5）。如果选择了1、2、3或4，程序必须提示用户输入金额，然后计算并显示相应的转换值。该过程必须根据用户的意愿重复进行。
- en: 'It is given that:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 已知：
- en: ►$1 = 0.94 EUR (€)
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: ►1美元($1) = 0.94欧元(EUR) (€)
- en: ►$1 = 0.81 GBP (£)
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: ►1美元($1) = 0.81英镑(GBP) (£)
- en: ►$1 = ¥ 149.11 JPY
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: ►1美元($1) = 149.11日元(JPY)
- en: ►$1 = 1.36 CAD ($)
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: ►1美元($1) = 1.36加拿大元(CAD) ($)
- en: '2)Do the following:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 2)执行以下操作：
- en: i)Write a subprogram named displayMenu that displays the following menu.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为displayMenu的子程序，显示以下菜单。
- en: 1)Convert USD to Euro (EUR)
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 1)将美元(USD)转换为欧元(EUR)
- en: 2)Convert USD to British Pound Sterling (GBP)
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 2)将美元(USD)转换为英镑(GBP)
- en: 3)Convert EUR to USD
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 3)将欧元(EUR)转换为美元(USD)
- en: 4)Convert EUR to GBP
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 4)将欧元(EUR)转换为英镑(GBP)
- en: 5)Convert GBP to USD
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 5)将英镑(GBP)转换为美元(USD)
- en: 6)Convert GBP to EUR
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 6)将英镑(GBP)转换为欧元(EUR)
- en: 7)Exit
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 7)退出
- en: ii)Write two different subprograms named USD_to_EUR, and USD_to_GBP, that accept
    a currency through their formal argument list and then return the corresponding
    converted value.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: ii)编写两个不同的子程序，分别命名为USD_to_EUR和USD_to_GBP，它们通过其形式参数列表接受货币，然后返回相应的转换值。
- en: iii)Using the subprograms cited above, write a Python program that displays
    the previously mentioned menu and then prompts the user to enter a choice (of
    1 to 7) and an amount. The program must then display the required value. The process
    must repeat as many times as the user wishes. It is given that
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: iii)使用上述子程序编写一个Python程序，显示之前提到的菜单，然后提示用户输入一个选择（1到7）和一个金额。然后程序必须显示所需的价值。该过程必须根据用户的意愿重复进行。已知
- en: ►$1 = 0.94 EUR (€)
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: ►1美元($1) = 0.94欧元(EUR) (€)
- en: ►$1 = 0.81 GBP (£)
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: ►1美元($1) = 0.81英镑(GBP) (£)
- en: '3)Do the following:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 3)执行以下操作：
- en: i)Write a subprogram named factorial that accepts an integer through its formal
    argument list and returns its factorial.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为factorial的子程序，该子程序通过其形式参数列表接受一个整数，并返回其阶乘。
- en: ii)Using the subprogram factorial() cited above, write a subprogram named mySin
    that accepts a value through its formal argument list and returns the sine of
    x, using the Taylor series (shown next) with an accuracy of 0.0000000001.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述提到的factorial()子程序编写一个名为mySin的子程序，该子程序通过其形式参数列表接受一个值，并返回x的正弦值，使用泰勒级数（如下所示）以0.0000000001的精度计算。
- en: .![Image](img/chapter29-26.png)
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: .![图片](img/chapter29-26.png)
- en: 'Hint: Keep in mind that x is in radians, and ![Image](img/chapter29-27.png).'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：请记住x是以弧度为单位的，并且![图片](img/chapter29-27.png)。
- en: iii)Write a subprogram named degreesToRad that accepts an angle in degrees through
    its formal argument list and returns its radian equivalent. It is given that 2π
    = 360^ο.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: iii)编写一个名为degreesToRad的子程序，该子程序通过其形式参数列表接受一个角度（以度为单位），并返回其弧度等效值。已知2π = 360°。
- en: iv)Using the subprograms mySin() and degreesToRad() cited above, write a Python
    program that displays the sine of all integers from 0^o to 360^o.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: iv)使用上述提到的mySin()和degreesToRad()子程序编写一个Python程序，显示从0°到360°的所有整数的正弦值。
- en: '4)Do the following:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 4)执行以下操作：
- en: i)Write a subprogram named isLeap that accepts a year through its formal argument
    list and returns True or False depending on whether or not that year is a leap
    year.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为isLeap的子程序，该子程序通过其形式参数列表接受一个年份，并返回True或False，取决于该年份是否为闰年。
- en: ii)Write a subprogram named numOfDays that accepts a month and a year and returns
    the number of the days in that month. If that month is February and the year is
    a leap year, the subprogram must return the value of 29.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: ii)编写一个名为numOfDays的子程序，该子程序接受一个月份和年份，并返回该月份的天数。如果该月份是二月且年份是闰年，则子程序必须返回29。
- en: 'Hint: Use the subprogram isLeap() cited above.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：使用上述提到的isLeap()子程序。
- en: iii)Write a subprogram named checkDate that accepts a day, a month, and a year
    and returns True or False depending on whether or not that date is valid.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: iii)编写一个名为checkDate的子程序，该子程序接受一个日期（日、月、年）并返回True或False，取决于该日期是否有效。
- en: iv)Using the subprograms cited above, write a Python program that prompts the
    user to enter a date (a day, a month, and a year) and then calculates and displays
    the number of days that have passed between the beginning of the user-provided
    year and the user-provided date. Using a loop control structure, the program must
    also validate data input and display an error message when the user enters any
    non-valid date.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: iv)使用上述子程序，编写一个Python程序，提示用户输入一个日期（日、月、年），然后计算并显示从用户提供的年份开始到用户提供的日期之间经过的天数。使用循环控制结构，程序必须验证数据输入，并在用户输入任何非有效日期时显示错误信息。
- en: '5)In a computer game, players roll two dice. The player who gets the greatest
    sum of dice gets one point. After ten rolls, the player that wins is the one with
    the greatest sum of points. Do the following:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 5)在电脑游戏中，玩家掷两个骰子。得分总和最高的玩家得一分。经过十次掷骰后，得分总和最高的玩家获胜。请执行以下操作：
- en: i)Write a subprogram named dice that returns a random integer between 1 and
    6.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为dice的子程序，返回1到6之间的随机整数。
- en: ii)Using the subprogram cited above, write a Python program that prompts two
    players to enter their names. Then, each player consecutively “rolls” two dice
    ten times. The player that wins is the one with the greatest sum of points.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述子程序，编写一个Python程序，提示两位玩家输入他们的名字。然后，每位玩家连续“掷”两次骰子十次。获胜者是得分总和最高的玩家。
- en: '6)The LAV Car Rental Company has rented 40 cars, which are divided into three
    categories: hybrid, gas, and diesel. The company charges for a car according to
    the following table.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 6)LAV汽车租赁公司已租赁了40辆车，这些车分为三个类别：混合动力、汽油和柴油。公司根据以下表格对车辆进行收费。
- en: '| Days | Car Type |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| 天数 | 车型 |'
- en: '| Gas | Diesel | Hybrid |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| 汽油 | 柴油 | 混合动力 |'
- en: '| 1 ‐ 5 | $24 per day | $28 per day | $30 per day |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| 1-5天 | 每日$24 | 每日$28 | 每日$30 |'
- en: '| 6 ‐ 8 | $22 per day | $25 per day | $28 per day |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| 6-8天 | 每日$22 | 每日$25 | 每日$28 |'
- en: '| 9 and above | $18 per day | $21 per day | $23 per day |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| 9天及以上 | 每日$18 | 每日$21 | 每日$23 |'
- en: 'Do the following:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 请执行以下操作：
- en: i)Write a subprogram named getChoice that displays the following menu.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为getChoice的子程序，显示以下菜单。
- en: 1)Gas
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 1)汽油
- en: 2)Diesel
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 2)柴油
- en: 3)Hybrid
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 3)混合动力
- en: The subprogram then prompts the user to enter the type of the car (1, 2, or
    3) and returns it to the caller.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 子程序随后提示用户输入汽车的类型（1、2或3），并将其返回给调用者。
- en: ii)Write a subprogram named getDays that prompts the user to enter the total
    number of rental days and returns it to the caller.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: ii)编写一个名为getDays的子程序，提示用户输入租赁的总天数，并将其返回给调用者。
- en: iii)Write a subprogram named getCharge that accepts the type of the car (1,
    2, or 3) and the total number of rental days through its formal argument list
    and then returns the amount of money to pay according to the previous table. Federal,
    state, and local taxes add a total of 10% to each bill.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: iii)编写一个名为getCharge的子程序，接受通过形式参数列表传入的汽车类型（1、2或3）和总租赁天数，然后根据之前的表格返回应付款项。联邦、州和地方税费总计为每笔账单增加10%。
- en: 'iv)Using the subprograms cited above, write a Python program that prompts the
    user to enter all necessary information about the rented cars and then displays
    the following:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: iv)使用上述子程序，编写一个Python程序，提示用户输入关于租赁车辆的所有必要信息，然后显示以下信息：
- en: a)for each car, the total amount to pay including taxes
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: a)每辆车的总费用（包括税费）
- en: b)the total number of hybrid cars rented
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: b)租赁的混合动力汽车总数
- en: c)the total net profit the company gets after removing taxes
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: c)公司在扣除税费后的总净利润
- en: Please note that the rates are progressive.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些费用是递增的。
- en: 7)TAM (Television Audience Measurement) is the specialized branch of media research
    dedicated to quantify and qualify television audience information.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 7)TAM（电视观众测量）是媒体研究的一个专门分支，致力于量化电视观众信息。
- en: 'The LAV Television Audience Measurement Company counts the number of viewers
    of the main news program on each of 10 different TV channels. The company needs
    a software application in order to get some useful information. Do the following:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: LAV电视观众测量公司统计了10个不同电视频道上主要新闻节目的观众人数。公司需要一个软件应用程序来获取一些有用的信息。请执行以下操作：
- en: i)Write a subprogram named getData that prompts the user to enter into two lists
    the names of the channels and the number of viewers of the main news program for
    each day of the week (Monday to Sunday). It then returns these lists to the caller.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为getData的子程序，提示用户输入每周每天（周一至周日）主要新闻节目的频道名称和观众人数，然后将这些列表返回给调用者。
- en: ii)Write a subprogram getAverage that accepts a one-dimensional list through
    its formal argument list and returns the average value of the first five elements.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: ii) 编写一个名为getAverage的子程序，该子程序通过其形式参数列表接受一个一维列表，并返回前五个元素的平均值。
- en: 'iii)Using the subprograms cited above, write a Python program that prompts
    the user to enter the names of the channels and the number of viewers for each
    day of the week and then displays the following:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: iii) 使用上述子程序编写一个Python程序，提示用户输入每个频道每天观众的名称和数量，然后显示以下内容：
- en: a)the name of the channels whose average viewer numbers on the weekend were
    at least 20% higher than the average viewer numbers during the rest of the week.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: a) 周末平均观众数量至少比一周中其他时间平均观众数量高出20%的频道名称。
- en: b)the name of the channels (if any) that, from day to day, showed constantly
    increasing viewer numbers. If there is no such channel, a corresponding message
    must be displayed.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: b) 每日观众数量持续增长的频道名称（如果有）。如果没有这样的频道，必须显示相应的消息。
- en: '8)A public opinion polling company asks 300 citizens whether they have been
    hospitalized during the Covid-19 lockdown period. Do the following:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 8) 一家民意调查公司询问300名公民在新冠疫情期间是否被隔离治疗。请执行以下操作：
- en: i)Write a subprogram named inputData that prompts the user to enter the citizen's
    SSN (Social Security Number) and their answer (Yes, No) into two lists, SSNs and
    answers, respectively. The two lists must be returned to the caller.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: i) 编写一个名为inputData的子程序，提示用户输入公民的社会安全号码（SSN）和他们的答案（是，否），分别输入到SSNs和answers两个列表中。这两个列表必须返回给调用者。
- en: ii)Write a subprogram named sortLists that accepts the lists SSNs and answers
    through its formal argument list. It then sorts list SSNs in ascending order using
    the selection sort algorithm. The subprogram must preserve the one-to-one correspondence
    between the elements of the two lists.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: ii) 编写一个名为sortLists的子程序，该子程序通过其形式参数列表接受SSNs和answers列表。然后使用选择排序算法按升序对SSNs列表进行排序。子程序必须保持两个列表元素的一对一对应关系。
- en: iii)Write a subprogram named searchList that accepts list SSNs and an SSN through
    its formal argument list and then returns the index position of that SSN in the
    list. If the SSN is not found, a message “SSN not found” must be displayed and
    the value −1 must be returned. Use the binary search algorithm.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: iii) 编写一个名为searchList的子程序，该子程序通过其形式参数列表接受SSNs列表和一个SSN，然后返回该SSN在列表中的索引位置。如果SSN未找到，必须显示消息“SSN
    not found”，并返回值-1。使用二分查找算法。
- en: iv)Write a subprogram named countAnswers that accepts the list answers and an
    answer through its formal argument list. It then returns the number of times this
    answer exists in the list.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: iv) 编写一个名为countAnswers的子程序，该子程序通过其形式参数列表接受答案列表和一个答案。然后返回该答案在列表中存在的次数。
- en: v)Using the subprograms cited above, write a Python program that prompts the
    user to enter the SSNs and the answers of the citizens. It must then prompt the
    user to enter an SSN and display the answer that the citizen with this SSN gave,
    as well as the percentage of citizens that gave the same answer in relation to
    the total number of citizens. The program must then ask the user if they wish
    to search for another SSN. If the answer is “Yes” the process must repeat; it
    must end otherwise.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: v) 使用上述子程序编写一个Python程序，提示用户输入公民的SSN和答案。然后提示用户输入一个SSN，显示具有该SSN的公民给出的答案，以及与公民总数相比给出相同答案的百分比。程序必须询问用户是否要搜索另一个SSN。如果答案是“是”，则过程必须重复；否则必须结束。
- en: '9)Eight teams participate in a football tournament, and each team plays 12
    games, one game each week. Do the following:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 9) 八支队伍参加足球锦标赛，每支队伍每周进行一场比赛，共进行12场比赛。请执行以下操作：
- en: i)Write a subprogram named inputData that prompts the user to enter the name
    of each team and the letter “W” for win, “L” for loss, or “T” for tie (draw) for
    each game into two lists, names and results, respectively. It then returns the
    lists to the caller.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: i) 编写一个名为inputData的子程序，提示用户输入每个队伍的名称以及每场比赛的“W”（胜利）、“L”（失败）或“T”（平局）字母，分别输入到names和results两个列表中。然后返回列表给调用者。
- en: ii)Write a subprogram named displayResult that accepts lists names and results
    through its formal argument list. It then prompts the user for a letter (W, L,
    or T) and displays, for each team, the week number(s) in which the team won, lost,
    or tied respectively. For example, if the user enters “L”, the subprogram must
    search and display, for each team, the week numbers (e.g., week 3, week 14, and
    so on) in which the team lost the game.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: ii) 编写一个名为 displayResult 的子程序，它通过形式参数列表接受队伍名称和结果。然后，它提示用户输入一个字母（W、L 或 T），并为每个队伍显示它们分别赢得、输掉或平局的周数。例如，如果用户输入“L”，则子程序必须搜索并显示每个队伍输掉比赛的所有周数（例如，第
    3 周、第 14 周，等等）。
- en: iii)Write a subprogram named findTeam that accepts list names through its formal
    argument list. It then prompts the user to enter the name of a team and returns
    the index position of that team in the list. If the user-provided team name does
    not exist, the value −1 must be returned.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: iii) 编写一个名为 findTeam 的子程序，它通过形式参数列表接受队伍名称。然后，它提示用户输入一个队伍的名称，并返回该队伍在列表中的索引位置。如果用户提供的队伍名称不存在，则返回值
    −1。
- en: iv)Using the subprograms cited above, write a Python program that prompts the
    user to enter the name of each team and the letter “W” for win, “L” for loss,
    or “T” for tie (draw) for each game. It must then prompt the user for a letter
    (W, L, or T) and display, for each team, the week number(s) in which the team
    won, lost, or tied respectively.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: iv) 使用上述子程序，编写一个 Python 程序，提示用户输入每个队伍的名称以及每场比赛的“W”表示胜利、“L”表示失败或“T”表示平局（平局）。然后，它必须提示用户输入一个字母（W、L
    或 T），并为每个队伍显示它们分别赢得、输掉或平局的周数。
- en: Finally, the program must prompt the user to enter the name of a team. If the
    user-provided team is found, the program must display the total number of points
    for this team and then prompt the user to enter the name of another team. This
    process must repeat as long as the user enters an existing team name. If user-provided
    team name is not found, the message “Team not found” must be displayed and the
    program must end.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，程序必须提示用户输入一个队伍的名称。如果找到用户提供的队伍，程序必须显示该队伍的总积分，然后提示用户输入另一个队伍的名称。只要用户输入现有的队伍名称，此过程必须重复进行。如果用户提供的队伍名称不存在，则显示消息“队伍未找到”，并且程序必须结束。
- en: It is given that a win receives 3 points and a tie receives 1 point.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 已知胜利获得 3 分，平局获得 1 分。
- en: '10)Do the following:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 10) 执行以下操作：
- en: i)Write a subprogram named hasDuplicateDigits that accepts an integer and returns
    True when any of its digits appears more than once; it must return False otherwise.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: i) 编写一个名为 hasDuplicateDigits 的子程序，它接受一个整数，当其任何一位数字重复出现时返回 True；否则返回 False。
- en: 'Hint: Declare a list of 10 elements to keep track of the occurrences of each
    digit. The list must be initialized to all zeros.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：声明一个包含 10 个元素的列表来跟踪每个数字的出现次数。该列表必须初始化为全部为零。
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter an integer and displays a message indicating whether or not, any
    of its digits appears more than once. Moreover, using a loop control structure,
    the program must validate data input and display an error message when the user
    enters any value less than 11.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: ii) 使用上述子程序，编写一个 Python 程序，提示用户输入一个整数，并显示一条消息，指出该整数的任何一位数字是否重复出现。此外，使用循环控制结构，程序必须验证数据输入，并在用户输入任何小于
    11 的值时显示错误消息。
