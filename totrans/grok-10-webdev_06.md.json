["```py\nclass ProjectIndexes(grok.Indexes):\ngrok.site(ITodo)\ngrok.context(IProject)\ntitle = grok.index.Text()\n\n```", "```py\nproject_title = grok.index.Text(attribute='title')\n\n```", "```py\nclass TodoSearch(grok.View):\ngrok.context(Todo)\ngrok.name('search')\ndef update(self,query):\nif query:\ncatalog = getUtility(ICatalog)\nself.results = catalog.searchResults(title=query)\n\n```", "```py\n<html>\n<head>\n<title tal:content=\"context/title\">To-Do list manager</title>\n<link rel=\"stylesheet\" type=\"text/css\" tal:attributes=\"href static/styles.css\" />\n</head>\n\n```", "```py\n<body>\n<div id=\"appheader\">\n<form id=\"search\" tal:attributes=\"action python:view.url('search')\">\n<input type=\"text\" name=\"query\" tal:attributes=\"value request/query|nothing\" />\n<input class=\"new_button\" type=\"submit\" value=\"search\" />\n</form>\n<h1 id=\"apptitle\" tal:content=\"string:${context/title}: search\"> To-Do list manager </h1>\n</div>\n<p class=\"create\">\n<a tal:attributes=\"href python:view.url(context)\"> Go back to main page </a>\n</p>\n\n```", "```py\n<h2 tal:condition=\"not:view/results|nothing\">There were no results.</h2>\n\n```", "```py\n<div class=\"projects\" tal:condition=\"view/results|nothing\">\n<h2>These are the results for \"<i tal:content=\"request/query\"></i>\":</h2 >\n<table>\n<tr>\n<th>Project name</th>\n<th>Kind</th>\n<th>Description</th>\n<th>Created on</th>\n<th>Last modified</th>\n<th>Owner</th>\n</tr>\n<tr tal:repeat=\"project view/results\">\n<td>\n<a href=\"\" tal:attributes=\"href python:view.url(project)\" tal:content=\"project/title\">title</a>\n</td>\n<td tal:content=\"project/kind\">type</td>\n<td tal:content=\"project/description\">type</td>\n<td tal:content=\"project/creation_date\">type</td>\n<td tal:content=\"project/modification_date\">type</td>\n<td tal:content=\"project/creator\">type</td>\n</tr>\n</table>\n</div>\n</body>\n</html>\n\n```", "```py\nclass IMetadata(interface.Interface):\ncreator = schema.TextLine(title=u'Creator')\ncreation_date = schema.Datetime(title=u'Creation date')\nmodification_date = schema.Datetime(title=u'Modification date')\n\n```", "```py\nclass ITodo(interface.Interface):\ntitle = schema.TextLine(title=u'Title',required=True)\nnext_id = schema.Int(title=u'Next id',default=0)\nclass Todo(grok.Application, grok.Container):\ngrok.implements(ITodo)\ntitle = u'To-do list manager'\nnext_id = 0\ndef deleteProject(self,project):\ndel self[project]\n\n```", "```py\nclass IProject(interface.Interface):\ntitle = schema.TextLine(title=u'Title', required=True, constraint=check_title)\nkind = schema.Choice(title=u'Kind of project', values=['personal', 'business'])\ndescription = schema.Text(title=u'Description', required=False)\nnext_id = schema.Int(title=u'Next id', default=0)\nclass Project(grok.Container):\ngrok.implements(IProject, IMetadata)\nnext_id = 0\ndescription = u''\ndef addList(self, title, description):\nid = str(self.next_id)\nself.next_id = self.next_id+1\nself[id] = TodoList(title, description)\ndef deleteList(self, list):\ndel self[list]\n\n```", "```py\n@grok.action('Add project')\ndef add(self,**data):\nproject = Project()\nself.applyData(project,**data)\nid = str(self.context.next_id)\nself.context.next_id = self.context.next_id+1\nself.context[id] = project\nproject.creator = self.request.principal.title\nproject.creation_date = datetime.datetime.now()\nproject.modification_date = datetime.datetime.now()\nreturn self.redirect(self.url(self.context[id]))\n\n```", "```py\nclass ITodoList(interface.Interface):\ntitle = schema.TextLine(title=u'Title',required=True, constraint=check_title)\ndescription = schema.Text(title=u'Description',required=False)\nnext_id = schema.Int(title=u'Next id',default=0)\nclass TodoList(grok.Container):\ngrok.implements(ITodoList, IMetadata)\nnext_id = 0\ndescription = u''\ndef __init__(self,title,description):\nsuper(TodoList, self).__init__()\nself.title = title\nself.description = description\nself.next_id = 0\ndef addItem(self,description):\nid = str(self.next_id)\nself.next_id = self.next_id+1\nself[id] = TodoItem(description)\ndef deleteItem(self,item):\ndel self[item]\ndef updateItems(self, items):\nfor name,item in self.items():\nif name in items:\nself[item].checked = True\nelse:\nself[item].checked = False\nclass ITodoItem(interface.Interface):\ndescription = schema.Text(title=u'Description',required=True)\nchecked = schema.Bool(title=u'Checked',default=False)\nclass TodoItem(grok.Model):\ngrok.implements(ITodoItem, IMetadata)\nchecked = False\ndef __init__(self,item_description):\nsuper(TodoItem, self).__init__()\nself.description = item_description\nself.checked = False\ndef toggleCheck(self):\nself.checked = not self.checked\n\n```", "```py\nclass DashBoard(grok.View):\ngrok.context(Todo)\ngrok.name('index')\n\n```", "```py\n<html>\n<head>\n<title tal:content=\"context/title\">To-Do list manager</title>\n<link rel=\"stylesheet\" type=\"text/css\" tal:attributes=\"href static/styles.css\" />\n</head>\n<body>\n<div id=\"appheader\">\n<form id=\"search\" tal:attributes=\"action python:view.url('search')\">\n<input type=\"text\" name=\"query\" />\n<input class=\"new_button\" type=\"submit\" value=\"search\" />\n</form>\n<h1 id=\"apptitle\" tal:content=\"context/title\"> To-Do list manager</h1>\n</div>\n<p class=\"create\"><a href=\"add\">Create a new project</a></p>\n<h2 tal:define=\"projects context/values\" tal:condition=\"projects\"> These are your available projects</h2>\n<div class=\"projects\">\n<table>\n<tr>\n<th>Project name</th>\n<th>Kind</th>\n<th>Description</th>\n<th>Created on</th>\n<th>Last modified</th>\n<th>Owner</th>\n<th>Delete</th>\n</tr>\n<tr tal:repeat=\"project context/values\">\n<td>\n<a href=\"\" tal:attributes=\"href python:view.url(project)\" tal:content=\"project/title\">title</a>\n</td>\n<td tal:content=\"project/kind\">type</td>\n<td tal:content=\"project/description\">type</td>\n<td tal:content=\"project/creation_date\">type</td>\n<td tal:content=\"project/modification_date\">type</td>\n<td tal:content=\"project/creator\">type</td>\n<td>\n<a tal:define=\"url python:view.url('deleteproject')\" tal:attributes=\"href string:${url}?project=${project/__name__}\">\n<img border=\"0\" tal:attributes=\"src static/bin_closed.png\" />\n</a>\n</td>\n</tr>\n</table>\n</div>\n</body>\n</html>\n\n```", "```py\ndescription = grok.index.Text()\n\n```", "```py\nself.results = catalog.searchResults(title=query, description=query)\n\n```", "```py\nclass IProject(interface.Interface):\ntitle = schema.TextLine(title=u'Title', required=True, constraint=check_title)\nkind = schema.Choice(title=u'Kind of project', values=['personal', 'business'])\ndescription = schema.Text(title=u'Description', required=False)\nnext_id = schema.Int(title=u'Next id', default=0)\ndef searchableText():\n\"\"\"return concatenated string with all text fields to search\"\"\"\n\n```", "```py\nsearchableText = grok.index.Text()\n\n```", "```py\ndef searchableText(self):\nreturn self.title+self.description\n\n```", "```py\nself.results = catalog.searchResults(searchableText=query)\n\n```"]