["```py\n    {{\n    \tresponse.files.append('http://ajax.googleapis.com/ajax\\\n    \t\t/libs/jqueryui/1.8.9/jquery-ui.js')\n    \tresponse.files.append('http://ajax.googleapis.com/ajax\\\n    \t\t/libs/jqueryui/1.8.9/themes/ui-darkness/jquery-ui.css')\n    \tresponse.files.append(URL('static','js/jquery.multiSelect.js'))\n     response.files.append(URL('static','css/jquery.\\\n    \t\tmultiSelect.css'))\n    }}\n\n    ```", "```py\n    <script>\n    \tjQuery(document).ready(function(){jQuery('[multiple]').\n    \t\tmultiSelect();});\n    </script>\n\n    ```", "```py\n    def index():\n    \tis_fruits =\n    \t\tIS_IN_SET(['Apples','Oranges','Bananas','Kiwis','Lemons'],\n    \t\tmultiple=True)\n    \tform = SQLFORM.factory(Field('fruits','list:string',\n    \t\trequires=is_fruits))\n    \tif form.accepts(request,session):\n    \t\tresponse.flash = 'Yummy!'\n    \treturn dict(form=form)\n\n    ```", "```py\n    {{\n    \tresponse.files.append('http://ajax.googleapis.com/ajax\\\n    \t\t/libs/jqueryui/1.8.9/jquery-ui.js')\n    \tresponse.files.append('http://ajax.googleapis.com/ajax\\\n    \t\t/libs/jqueryui/1.8.9/themes/ui-darkness/jquery-ui.css')\n    \tresponse.files.append(URL('static','js/jquery.multiSelect.js'))\n    \tresponse.files.append(URL('static','css/jquery.\\\n    \t\tmultiSelect.css'))\n    }}\n    {{extend 'layout.html}}\n    <script>\n    \tjQuery(document).ready(function(){jQuery('[multiple]').\n    \t\tmultiSelect();});\n    </script>\n    {{=form}}\n\n    ```", "```py\n    class SelectOrAdd(object):\n\n    def __init__(self, controller=None, function=None,\n    \tform_title=None, button_text = None, dialog_width=450):\n    \t\tif form_title == None:\n    \t\t\tself.form_title = T('Add New')\n    \t\telse:\n    \t\t\tself.form_title = T(form_title)\n    \t\tif button_text == None:\n    \t\t\tself.button_text = T('Add')\n    \t\telse:\n    \t\t\tself.button_text = T(button_text)\n    \t\t\tself.dialog_width = dialog_width\n    \t\t\tself.controller = controller\n    \t\t\tself.function = function\n\n    def widget(self, field, value):\n    \t#generate the standard widget for this field\n    \tfrom gluon.sqlhtml import OptionsWidget\n    \tselect_widget = OptionsWidget.widget(field, value)\n\n    \t#get the widget's id (need to know later on so can tell\n    \t#receiving controller what to update)\n    \tmy_select_id = select_widget.attributes.get('_id', None)\n    \tadd_args = [my_select_id]\n\n    \t#create a div that will load the specified controller via ajax\n    \tform_loader_div = DIV(LOAD(c=self.controller, f=self.function,\n    \t\targs=add_args,ajax=True), _id=my_select_id+\"_dialog-form\",\n    \t\t_title=self.form_title)\n\n    \t#generate the \"add\" button that will appear next the options\n    \t#widget and open our dialog\n    \tactivator_button = A(T(self.button_text),\n    \t\t_id=my_select_id+\"_option_add_trigger\")\n\n    \t#create javascript for creating and opening the dialog\n    \tjs = 'jQuery( \"#%s_dialog-form\" ).dialog({autoOpen: false,\n    \t\tshow: \"blind\", hide: \"explode\", width: %s});' %\n    \t\t(my_select_id, self.dialog_width)\n    \tjs += 'jQuery( \"#%s_option_add_trigger\" ).click(function() {\n    \t\tjQuery( \"#%s_dialog-form\" ).dialog( \"open\" );return\n    \t\tfalse;}); ' % (my_select_id, my_select_id) \t\t\t#decorate\n    \t\tour activator button for good measure\n    \tjs += 'jQuery(function() { jQuery( \"#%s_option_add_trigger\"\n    \t).button({text: true, icons: { primary: \"ui-icon-circle-\n    \tplus\"} }); });' % (my_select_id)\n    \tjq_script=SCRIPT(js, _type=\"text/javascript\")\n\n    \twrapper = DIV(_id=my_select_id+\"_adder_wrapper\")\n    \twrapper.components.extend([select_widget, form_loader_div,\n    \t\tactivator_button, jq_script])\n    \treturn wrapper\n\n    ```", "```py\n    # Initialize the widget\n    add_option = SelectOrAdd(form_title=\"Add a new something\",\n    \tcontroller=\"product\", function=\"add_category\", button_text =\n    \t\"Add New\", dialog_width=500)\n\n    ```", "```py\n    db.define_table('category',\n    \tField('name', 'string', notnull=True, unique=True),\n    \tField('description', 'text')\n    )\n    db.define_table('product',\n    \tField('category_id', db.category, requires=IS_IN_DB(db,\n    \t\t'category.id', 'category.name')),\n    \tField('name', 'string', notnull=True),\n    \tField('description', 'text'),\n    \tField('price', 'decimal(10,2)', notnull=True)\n    )\n\n    # assign widget to field\n    \tdb.product.category_id.widget = add_option.widget\n\n    ```", "```py\n    #This is the main function, the one your users go to\n    def create():\n    \t#Initialize the widget\n    \tadd_option = SelectOrAdd(form_title=\"Add new Product Category\",\n    \t\t\t\t\t\t\tcontroller=\"product\",\n    \t\t\t\t\t\t\tfunction=\"add_category\",\n    \t\t\t\t\t\t\tbutton_text = \"Add New\")\n    \t#assign widget to field\n    \tdb.product.category_id.widget = add_option.widget\n    \tform = SQLFORM(db.product)\n    \tif form.accepts(request, session):\n    \t\tresponse.flash = \"New product created\"\n    \telif form.errors:\n    \t\tresponse.flash = \"Please fix errors in form\"\n    \telse:\n    \t\tresponse.flash = \"Please fill in the form\"\n\n    \t#you need jQuery for the widget to work; include here or just\n    \t#put it in your master layout.html\n    \tresponse.files.append(\"http://ajax.googleapis.com/ajax/\\\n    \tlibs/jqueryui/1.8.9/jquery-ui.js\")\n    \tresponse.files.append(\"http://ajax.googleapis.com/ajax/\\\n    \tlibs/jqueryui/1.8.9/themes/smoothness/jquery-ui.css\")\n    \treturn dict(message=\"Create your product\", form = form)\n\n    def add_category():\n    \t#this is the controller function that will appear in our dialog\n    \tform = SQLFORM(db.category)\n    \tif form.accepts(request):\n    \t\t#Successfully added new item\n    \t\t#do whatever else you may want\n    \t\t#Then let the user know adding via our widget worked\n    \t\tresponse.flash = T(\"Added\")\n    \t\ttarget = request.args[0]\n    \t\t#close the widget's dialog box\n    \t\tresponse.js = 'jQuery(\"#%s_dialog-form\" ).dialog(\\\n    \"close\" );' % target\n\n    \t\t#update the options they can select their new category in the\n    \t\t#main form\n    \t\tresponse.js += \\\n    \t\t\"\"\"jQuery(\"#%s\")\\\n    \t\t.append(\"<option value='%s'>%s</option>\");\"\"\" % \\\n    \t\t(target, form.vars.id, form.vars.name)\n    \t\t#and select the one they just added\n    \t\tresponse.js += \"\"\"jQuery(\"#%s\").val(\"%s\");\"\"\" % \\\n    \t\t(target, form.vars.id)\n\n    \t\t#finally, return a blank form in case for some reason they\n    \t\t#wanted to add another option\n    \t\treturn form\n\n    \telif form.errors:\n    \t\t# silly user, just send back the form and it'll still be in\n    \t\t# our dialog box complete with error messages\n    \t\treturn form\n\n    \telse:\n    \t\t#hasn't been submitted yet, just give them the fresh blank\n    \t\t#form\n    \t\treturn form\n\n    ```", "```py\n    def autocomplete_widget(field,value):\n    \tresponse.files.append(URL('static','autocomplete/jquery.\\\n    autocomplete.js'))\n    \tresponse.files.append(URL('static','autocomplete/jquery.\\\n    autocomplete.css'))\n    \tprint response.files\n    \timport uuid\n    \tfrom gluon.serializers import json\n    \tid = \"autocomplete-\" + str(uuid.uuid4())\n    \twrapper = DIV(_id=id)\n    \tinp = SQLFORM.widgets.string.widget(field,value)\n    \trows = field._db(field._table['id']>0).\n    \t\tselect(field,distinct=True)\n    \titems = [str(t[field.name]) for t in rows]\n    \tscr = SCRIPT(\"jQuery('#%s input').autocomplete({source: %s});\" % \\\n    (id, json(items)))\n    \twrapper.append(inp)\n    \twrapper.append(scr)\n    \treturn wrapper\n\n    ```", "```py\n    db.define_table('person',Field('name'))\n    db.person.name.widget = autocomplete_widget\n\n    ```", "```py\n    rows = field._db(field._table['id']>0).select(field,distinct=True)\n    items = [str(t[field.name]) for t in rows]\n\n    ```", "```py\n    rows = field._db(query).select(otherfield,distinct=True)\n    items = [str(t[otherfield.name]) for t in rows]\n\n    ```", "```py\ndef autocomplete_widget(field,value):\n\timport uuid\n\tid = \"autocomplete-\" + str(uuid.uuid4())\n\tcallback_url = URL('get_items')\n\twrapper = DIV(_id=id)\n\tinp = SQLFORM.widgets.string.widget(field,value)\n\tscr = SCRIPT(\"jQuery('#%s input').\n\t\tautocomplete('%s',{extraParams:{field:'%s',table:'%s'}});\" % \\\n\t\t(id, callback_url,field.name,field._tablename))\n\twrapper.append(inp)\n\twrapper.append(scr)\n\treturn wrapper\n\n```", "```py\ndef get_items():\n\tMINCHARS = 2 # characters required to trigger response\n\tMAXITEMS = 20 # numer of items in response\n\tquery = request.vars.q\n\tfieldname = request.vars.field\n\ttablename = request.vars.table\n\tif len(query.strip()) > MINCHARS and fieldname and tablename:\n\t\tfield = db[tablename][fielfname]\n\t\trows = db(field.upper().startswith(qery)).\n\t\t\tselect(field,distinct=True,limitby=(0,MINITEMS))\n\t\titems = [str(row[fieldname]) for row in rows]\n\telse:\n\t\titems = []\n\n\treturn '\\n'.join(items)\n\n```", "```py\n    def select_datewidget(field,value):\n    \tMINYEAR = 2000\n    \tMAXYEAR = 2020\n    \timport datetime\n    \tnow = datetime.date.today()\n    \tdtval = value or now.isoformat()\n    \tyear,month,day= str(dtval).split(\"-\")\n    \tdt = SQLFORM.widgets.string.widget(field,value)\n    \tid = dt['_id']\n    \tdayid = id+'__day'\n    \tmonthid = id+'__month'\n    \tyearid = id+'__year'\n    \twrapperid = id+'__wrapper'\n    \twrapper = DIV(_id=wrapperid)\n    \tday = SELECT([OPTION(str(i).zfill(2)) for i in range(1,32)],\n    \t\tvalue=day,_id=dayid)\n    \tmonth = SELECT([OPTION(datetime.date(2008,i,1).strftime('%B'),\n    \t\t_value=str(i).zfill(2)) for i in range(1,13)],\n    \t\tvalue=month,_id=monthid)\n    \tyear = SELECT([OPTION(i) for i in range(MINYEAR,MAXYEAR)],\n    \t\tvalue=year,_id=yearid)\n    \tjqscr = SCRIPT(\"\"\"\n    \t\tjQuery('#%s').hide();\n    \t\tvar curval = jQuery('#%s').val();\n    \t\tif(curval) {\n    \t\t\tvar pieces = curval.split('-');\n    \t\t\tjQuery('#%s').val(pieces[0]);\n    \t\t\tjQuery('#%s').val(pieces[1]);\n    \t\t\tjQuery('#%s').val(pieces[2]);\n    \t\t}\n    \t\tjQuery('#%s select').change(function(e) {\n    \t\t\tjQuery('#%s').val(\n    \t\t\t\tjQuery('#%s').val()+'-'+jQuery('#%s').val()+'-\n    \t\t\t\t\t'+jQuery('#%s').val());\n    \t});\n\n    \t\"\"\" % (id,id,yearid,monthid,dayid,\n    \t\twrapperid,id,yearid,monthid,dayid))\n    \twrapper.components.extend([month,day,year,dt,jqscr])\n    \treturn wrapper\n\n    ```", "```py\n    def index():\n    \tform = SQLFORM.factory(\n    \t\tField('posted','date',default=request.now,\n    \t\twidget=select_datewidget))\n\n    \tif form.accepts(request,session):\n    \t\tresponse.flash = \"New record added\"\n    \treturn dict(form=form)\n\n    ```", "```py\n    function ajax(u,s,t) {\n    \t/* app_loading_image contains the img html\n    \t\tset in layout.html before including web2py_ajax.html */\n    \tjQuery(\"#\"+t).html(app_loading_image);\n    \tvar query=\"\";\n    \tfor(i=0; i<s.length; i++) {\n    \t\tif(i>0) query=query+\"&\";\n    \t\tquery=query+encodeURIComponent(s[i])+\"=\"+\n    \t\t\tencodeURIComponent(document.getElementById(s[i]).value);\n    \t}\n    \t// window.alert(loading_image);\n    \tjQuery.ajax({type: \"POST\", url: u, data: query,\n    \t\tsuccess: function(msg) {\n    \t\t\tif(t==':eval') eval(msg);\n    \t\t\telse document.getElementById(t).innerHTML=msg;\n    \t\t}\n    \t});\n    };\n\n    ```", "```py\n    def slider_widget(field,value):\n    \tresponse.files.append(\"http://ajax.googleapis.com/ajax\\\n    /libs/jqueryui/1.8.9/jquery-ui.js\")\n    \tresponse.files.append(\"http://ajax.googleapis.com/ajax\\\n    /libs/jqueryui/1.8.9/themes/ui-darkness/jquery-ui.css\")\n    \tid = '%s_%s' % (field._tablename,field.name)\n    \twrapper = DIV(_id=\"slider_wrapper\",_style=\"width: 200px;text-\\\n    align:center;\")\n    \twrapper.append(DIV(_id=id+'__slider'))\n    \twrapper.append(SPAN(INPUT(_id=id, _style=\"display: none;\"),\n    \t\t_id=id+'__value'))\n    \twrapper.append(SQLFORM.widgets.string.widget(field,value))\n\n    \twrapper.append(SCRIPT(\"\"\"\n    \t\tjQuery('#%(id)s__value').text('%(value)s');\n    \t\tjQuery('#%(id)s').val('%(value)s');\n    \t\tjQuery('#%(id)s').hide();\n    \t\tjQuery('#%(id)s__slider').slider({\n    \t\t\tvalue:'%(value)s',\n    \t\t\tstop: function(event, ui){\n    \t\t\t\tjQuery('#%(id)s__value').text(ui.value);\n    \t\t\t\tjQuery('#%(id)s').val(ui.value);\n    \t\t}});\n    \t\t\"\"\" % dict(id=id, value=value)))\n    \treturn wrapper\n\n    ```", "```py\n    db.define_table(\"product\",\n    \tField(\"quantity\",\"integer\", default=0))\n\n    ```", "```py\n    def index():\n    \tdb.product.quantity.widget=slider_widget\n    \tform = SQLFORM(db.product)\n    \tif form.accepts(request,session):\n    \t\tresponse.flash = \"Got it\"\n    \tinventory = db(db.product).select()\n    \treturn dict(form=form,inventory=inventory)\n\n    ```", "```py\nfrom gluon.contrib.populate import populate\n\ndb.define_table('stuff',\n\tField('name'),\n\tField('quantity', 'integer'),\n\tField('price', 'double'))\n\nif db(db.stuff).count() == 0:\n\tpopulate(db.stuff, 50)\n\n```", "```py\ndef JQGRID(table,fieldname=None, fieldvalue=None, col_widths=[],\n\t\t\tcolnames=[], _id=None, fields=[],\n\t\t\tcol_width=80, width=700, height=300, dbname='db'):\n\t# <styles> and <script> section\n\t\tresponse.files.append('http://ajax.googleapis.com/ajax\\\n/libs/jqueryui/1.8.9/jquery-ui.js')\n\tresponse.files.append('http://ajax.googleapis.com/ajax\\\n\t/libs/jqueryui/1.8.9/themes/ui-darkness/jquery-ui.css')\n\tfor f in ['jqgrid/ui.jqgrid.css',\n\t\t\t\t'jqgrid/i18n/grid.locale-en.js',\n\t\t\t\t'jqgrid/jquery.jqGrid.min.js']:\n\t\tresponse.files.append(URL('static',f))\n\n\t# end <style> and <script> section\n\tfrom gluon.serializers import json\n\t_id = _id or 'jqgrid_%s' % table._tablename\n\tif not fields:\n\t\tfields = [field.name for field in table if field.readable]\n\telse:\n\t\tfields = fields\n\tif col_widths:\n\t\tif isinstance(col_widths,(list,tuple)):\n\t\t\tcol_widths = [str(x) for x in col_widths]\n\t\tif width=='auto':\n\t\t\twidth=sum([int(x) for x in col_widths])\n\telif not col_widths:\n\t\tcol_widths = [col_width for x in fields]\n\t\tcolnames = [(table[x].label or x) for x in fields]\n\t\tcolmodel = [{'name':x,'index':x, 'width':col_widths[i],\n\t\t\t\t\t'sortable':True} \\\n\t\t\t\t\tfor i,x in enumerate(fields)]\n\n\tcallback = URL('jqgrid',\n\t\t\t\t\tvars=dict(dbname=dbname,\n\t\t\t\t\t\t\t\ttablename=table._tablename,\n\t\t\t\t\t\t\t\tcolumns=','.join(fields),\n\t\t\t\t\t\t\t\tfieldname=fieldname or '',\n\t\t\t\t\t\t\t\tfieldvalue=fieldvalue,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\thmac_key=auth.settings.hmac_key,\n\t\t\t\t\tsalt=auth.user_id)\n\tscript=\"\"\"\n\tjQuery(function(){\n\tjQuery(\"#%(id)s\").jqGrid({\n\turl:'%(callback)s',\n\tdatatype: \"json\",\n\tcolNames: %(colnames)s,\n\tcolModel:%(colmodel)s,\n\trowNum:10, rowList:[20,50,100],\n\tpager: '#%(id)s_pager',\n\tviewrecords: true,\n\theight:%(height)s\n\t});\n\tjQuery(\"#%(id)s\").jqGrid('navGrid','#%(id)s_pager',{\n\tsearch:true,add:false,\n\tedit:false,del:false\n\t});\n\tjQuery(\"#%(id)s\").setGridWidth(%(width)s,false);\n\tjQuery('select.ui-pg-selbox,input.ui-g-\n\tinput').css('width','50px');\n\t});\n\t\"\"\" % dict(callback=callback, colnames=json(colnames),\n\t\t\t\tcolmodel=json(colmodel),id=_id,\n\t\t\t\theight=height,width=width)\n\n\treturn TAG[''](TABLE(_id=_id),\n\t\t\t\t\tDIV(_id=_id+\"_pager\"),\n\t\t\t\t\tSCRIPT(script))\n\n```", "```py\n@auth.requires_login()\ndef index():\n\treturn dict(mygrid = JQGRID(db.stuff))\n\n```", "```py\ndef jqgrid():\n\tfrom gluon.serializers import json\n\timport cgi\n\thash_vars = 'dbname|tablename|columns|fieldname|\n\t\tfieldvalue|user'.split('|')\n\tif not URL.verify(request,hmac_key=auth.settings.hmac_key,\n\t\thash_vars=hash_vars,salt=auth.user_id):\n\t\traise HTTP(404)\n\n\tdbname = request.vars.dbname or 'db'\n\ttablename = request.vars.tablename or error()\n\tcolumns = (request.vars.columns or error()).split(',')\n\trows=int(request.vars.rows or 25)\n\tpage=int(request.vars.page or 0)\n\tsidx=request.vars.sidx or 'id'\n\tsord=request.vars.sord or 'asc'\n\tsearchField=request.vars.searchField\n\tsearchString=request.vars.searchString\n\tsearchOper={'eq':lambda a,b: a==b,\n\t\t'nq':lambda a,b: a!=b,\n\t\t'gt':lambda a,b: a>b,\n\t\t'ge':lambda a,b: a>=b,\n\t\t'lt':lambda a,b: a<b,\n\t\t'le':lambda a,b: a<=b,\n\t\t'bw':lambda a,b: a.startswith(b),\n\t\t'bn':lambda a,b: ~a.startswith(b),\n\t\t'ew':lambda a,b: a.endswith(b),\n\t\t'en':lambda a,b: ~a.endswith(b),\n\t\t'cn':lambda a,b: a.contains(b),\n\t\t'nc':lambda a,b: ~a.contains(b),\n\t\t'in':lambda a,b: a.belongs(b.split()),\n\t\t'ni':lambda a,b: ~a.belongs(b.split())}\\\n\n\t[request.vars.searchOper or 'eq']\n\ttable=globals()[dbname][tablename]\n\n\tif request.vars.fieldname:\n\t\tnames = request.vars.fieldname.split('|')\n\t\tvalues = request.vars.fieldvalue.split('|')\n\t\tquery = reduce(lambda a,b:a&b,\n\t\t\t[table[names[i]]==values[i] for i in range(len(names))])\n\n\telse:\n\tquery = table.id>0\n\tdbset = table._db(query)\n\n\tif searchField:\n\t\tdbset=dbset(searchOper(table[searchField],searchString))\n\t\torderby = table[sidx]\n\n\tif sord=='desc': orderby=~orderby\n\t\tlimitby=(rows*(page-1),rows*page)\n\t\tfields = [table[f] for f in columns]\n\t\trecords = dbset.select(orderby=orderby,limitby=limitby,*fields)\n\t\tnrecords = dbset.count()\n\t\titems = {}\n\t\titems['page']=page\n\t\titems['total']=int((nrecords+(rows-1))/rows)\n\t\titems['records']=nrecords\n\t\treadable_fields=[f.name for f in fields if f.readable]\n\t\tdef f(value,fieldname):\n\t\t\tr = table[fieldname].represent\n\t\tif r: value=r(value)\n\t\ttry: return value.xml()\n\t\texcept: return cgi.escape(str(value))\n\t\titems['rows']=[{'id':r.id,'cell':[f(r[x],x) for x in\n\t\t\treadable_fields]} \\\n\t\t\tfor r in records]\n\t\treturn json(items)\n\n```", "```py\ndb.define_table('stuff',\n\tField('name'),\n\tField('location'),\n\tField('quantity','integer'))\n\n```", "```py\n    def index():\n    \timport webgrid\n    \tgrid = webgrid.WebGrid(crud)\n    \tgrid.datasource = db(db.stuff.id>0)\n    \tgrid.pagesize = 10\n    \treturn dict(grid=grid()) # notice the ()\n\n    ```", "```py\n    grid.datasource = db(db.stuff.id>0) \t\t\t\t# Set\n    grid.datasource = db(db.stuff.id>0).select() \t# Rows\n    grid.datasource = db.stuff \t\t\t\t\t\t\t# Table\n    grid.datasource = [db.stuff,db.others] \t\t\t\t# list of Tables\n    grid.datasource = db(db.stuff.id==db.other.thing) \t#\tjoin\n\n    ```", "```py\n    grid.crud_function = 'data'\n\n    ```", "```py\n    grid.enabled_rows = ['header','filter',\n    'pager','totals','footer','add_links']\n\n    ```", "```py\n    grid.fields = ['stuff.name','stuff.location','stuff.quantity']\n    grid.field_headers = ['Name','Location','Quantity']\n\n    ```", "```py\n    grid.action_links = ['view','edit','delete']\n    grid.action_headers = ['view','edit','delete']\n\n    ```", "```py\n    if request.controller == 'default' and request.function == 'data':\n    \tif request.args:\n    \t\tcrud.settings[request.args(0)+'_next'] = URL('index')\n\n    ```", "```py\n    grid.totals = ['stuff.quantity']\n\n    ```", "```py\n    grid.filters = ['stuff.name','stuff.created']\n\n    ```", "```py\n    grid.filter_query = lambda f,v: f==v\n\n    ```", "```py\n    grid.allowed_vars =\n    \t['pagesize','pagenum','sortby','ascending','groupby','totals']\n\n    ```", "```py\n    grid.view_link = lambda row: ...\n    grid.edit_link = lambda row: ...\n    grid.delete_link = lambda row: ...\n    grid.header = lambda fields: ...\n    grid.datarow = lambda row: ...\n    grid.footer = lambda fields: ...\n    grid.pager = lambda pagecount: ...\n    grid.page_total = lambda:\n\n    ```", "```py\n    grid.joined # tells you if your datasource is a join\n    grid.css_prefix # used for css\n    grid.tablenames\n    grid.response # the datasource result\n    grid.colnames # column names of datasource result\n    grid.pagenum\n    grid.pagecount\n    grid.total # the count of datasource result\n\n    ```", "```py\n    grid.footer = lambda fields : TFOOT(TD(\"This is my footer\" ,\n    \t_colspan=len(grid.action_links)+len(fields),\n    \t_style=\"text-align:center;\"),\n    \t_class=grid.css_prefix + '-webgrid footer')\n\n    ```", "```py\n    grid.messages.confirm_delete = 'Are you sure?'\n    grid.messages.no_records = 'No records'\n    grid.messages.add_link = '[add %s]'\n    grid.messages.page_total = \"Total:\"\n\n    ```", "```py\n    def on_row_created(row,rowtype,record):\n    \tif rowtype=='header':\n    \t\trow.components.append(TH(' '))\n    grid.row_created = on_row_created\n\n    ```", "```py\n    def links_right(tablerow,rowtype,rowdata):\n    \tif rowtype != 'pager':\n    \tlinks = tablerow.components[:3]\n    \tdel tablerow.components[:3]\n    \ttablerow.components.extend(links)\n    grid.row_created = links_right\n\n    ```", "```py\n    db.define_table('country',\n    \tField('iso'),\n    \tField('name'),\n    \tField('printable_name'),\n    \tField('iso3'),\n    \tField('numcode'))\n\n    ```", "```py\n    if not db(db.country).count():\n    \tfor (iso,name,printable_name,iso3,numcode) in [\n    \t\t('UY','URUGUAY','Uruguay','URY','858'),\n    \t\t('UZ','UZBEKISTAN','Uzbekistan','UZB','860'),\n    \t\t('VU','VANUATU','Vanuatu','VUT','548'),\n    \t\t('VE','VENEZUELA','Venezuela','VEN','862'),\n    \t\t('VN','VIETNAM','Viet Nam','VNM','704'),\n    \t\t('VG','VIRGIN ISLANDS, BRITISH','Virgin Islands,\n    \t\t\tBritish','VGB','092'),\n    \t\t('VI','VIRGIN ISLANDS, U.S.','Virgin Islands,\n    \t\t\tU.s.','VIR','850'),\n    \t\t('EH','WESTERN SAHARA','Western Sahara','ESH','732'),\n    \t\t('YE','YEMEN','Yemen','YEM','887'),\n    \t\t('ZM','ZAMBIA','Zambia','ZMB','894'),\n    \t\t('ZW','ZIMBABWE','Zimbabwe','ZWE','716')]:\n    db.country.insert(iso=iso,name=name,printable_name=printable_name,\n    \tiso3=iso3,numcode=numcode)\n\n    ```", "```py\n    #livesearchresults {\n    \tbackground: #ffffff;\n    \tpadding: 5px 10px;\n    \tmax-height: 400px;\n    \toverflow: auto;\n    \tposition: absolute;\n    \tz-index: 99;\n    \tborder: 1px solid #A9A9A9;\n    \tborder-width: 0 1px 1px 1px;\n    \t-webkit-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.3);\n    \t-moz-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.3);\n    \t-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.3);\n    }\n\n    #livesearchresults a{\n    \tcolor:#666666;\n    }\n    input#livesearch {\n    \tfont-size:12px;\n    \tcolor:#666666;\n    \tbackground-color:#ffffff;\n    \tpadding-top:5px;\n    \twidth:200px;\n    \theight:20px;\n    \tborder:1px solid #999999;\n    }\n\n    ```", "```py\n    function livesearch(value){\n    \tif(value != \"\"){\n    \t\tjQuery(\"#livesearchresults\").show();\n    \t\tjQuery.post(livesearch_url,\n    \t\t\t{keywords:value},\n    \t\t\tfunction(result){\n    \t\t\t\tjQuery(\"#livesearchresults\").html(result);\n    \t\t\t}\n    \t\t);\n    \t}\n\n    \telse{\n    \t\tjQuery(\"#livesearchresults\").hide();\n    \t}\n    }\n\n    function updatelivesearch(value){\n    \tjQuery(\"#livesearch\").val(value);jQuery(\"#livesearchresults\").\n    \t\thide();\n    }\n\n    jQuery(function(){jQuery(\"#livesearchresults\").hide();});\n\n    ```", "```py\n    def index():\n    \treturn dict()\n\n    ```", "```py\n    <script type=\"text/javascript\">\n    \t/* url definition for livesearch ajax call */\n    \tvar livesearch_url = \"{{=URL('ajaxlivesearch')}}\";\n    </script>\n    {{response.files.append(URL('static','css/livesearch.css'))}}\n    {{response.files.append(URL('static','js/livesearch.js'))}}\n    {{extend 'layout.html'}}\n\n    <label for=\"livesearch\">Search country:</label><br />\n    <input type=\"text\" id=\"livesearch\" name=\"country\" autocomplete=\"off\" onkeyup=\"livesearch(this.value);\" /><br />\n    <div id=\"livesearchresults\"></div>\n\n    ```", "```py\n    def ajaxlivesearch():\n    \tkeywords = request.vars.keywords\n    \tprint \"Keywords: \" + str(keywords)\n\n    \tif keywords:\n    \t\tquery = reduce(lambda a,b:a&b,\n    \t\t\t[db.country.printable_name.contains(k) for k in \\\n    \t\t\tkeywords.split()])\n\n    \tcountries = db(query).select()\n    \titems = []\n\n    \tfor c in countries:\n    \t\titems.append(DIV(A(c.printable_name, _href=\"#\",\n    \t\t\t_id=\"res%s\"%c.iso,\n    \t\t\t_onclick=\"updatelivesearch(jQuery('#res%s').\n    \t\t\thtml())\"%c.iso)))\n    \treturn DIV(*items)\n\n    ```", "```py\n    response.files.append(URL('static','js/jquery.sparkline.js'))\n    response.files.append(URL('static','js/jquery.timers-1.2.js'))\n\n    ```", "```py\n    def index():\n    \treturn dict(message=\"hello from sparkline.py\",\n    \t\tngraphs=20, chartmin=0, chartmax=20)\n\n    def call():\n    \treturn service()\n\n    @service.json\n    def sparkdata(ngraphs,chartmin,chartmax):\n    \timport random\n    \tngraphs = int(ngraphs)\n    \tchartmin = int(chartmin)\n    \tchartmax = int(chartmax)\n\n    \td = dict()\n    \tfor n in xrange(ngraphs):\n    \tid = \"dynbar\" + str(n)\n    \t### data for bar graph.\n    \t### 9 random ints between chartmax and chartmin\n    \tdata = [random.choice(range(chartmin,chartmax))\\\n    \t\t\tfor i in xrange(9)]\n    \t### simulate a Pareto plot\n    \tdata.sort()\n    \tdata.reverse()\n    \td[id] = data\n    return d\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    {{\n    \tchartoptions =\n    \t\tXML(\"{type:'bar',barColor:'green','chartRangeMin':'%d',\n    \t\t'chartRangeMax':'%d'}\" % (chartmin,chartmax))\n    \t\tjsonurl = URL('call/json/sparkdata/\\\n    \t\t%(ngraphs)d/%(chartmin)d/%(chartmax)d' % locals())\n    }}\n\n    <script type=\"text/javascript\">\n    \tjQuery(function() {\n    \t\tjQuery(this).everyTime(1000,function(i) {\n    \t\t\tjQuery.getJSON('{{=jsonurl}}', function(data) {\n    \t\t\t\t{{for n in xrange(ngraphs):}}\n    \t\t\t\tjQuery(\"#dynbar{{=n}}\").sparkline(data.dynbar{{=n}},\n    \t\t\t\t{{ =chartoptions }} );\n    \t\t\t\t{{pass}}\n    \t\t\t\t});\n    \t\t});\n    \t});\n    </script>\n    <h1>This is the sparkline.html template</h1>\n    {{for n in xrange(ngraphs):}}\n    <p>\n    \tBar chart with dynamic data: <span id=\"dynbar{{=n}}\"\n    \t\tclass=\"dynamicbar\">Loading..</span>\n    </p>\n    {{pass}}\n    {{=BEAUTIFY(response._vars)}}\n\n    ```"]