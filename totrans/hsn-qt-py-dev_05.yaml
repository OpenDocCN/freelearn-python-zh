- en: Getting Started with PyQt and PySide
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用PyQt和PySide
- en: In this chapter, we will lay the groundwork so that we can start the creation
    of GUIs with Python bindings, such as PyQt and PySide. These bindings are able to
    utilize all Python programming language functionalities and various Python-based
    tools that are available in the Python world, together with the powerful Qt framework,
    which, in turn, allows us to visualize our imagination and development processes
    in real and widely functional GUI applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将打下基础，以便我们可以使用Python绑定（如PyQt和PySide）开始创建GUI。这些绑定能够利用所有Python编程语言的功能和Python世界中可用的各种基于Python的工具，再加上强大的Qt框架，这反过来又允许我们在真实且功能广泛的GUI应用程序中可视化我们的想象和开发过程。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: PyQt versus PySide
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyQt与PySide的比较
- en: PyQt5
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyQt5
- en: PySide2
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PySide2
- en: PyQt versus PySide
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyQt与PySide的比较
- en: As we can see, PyQt and PySide represent the bindings of the Python programming
    language functionality with the Qt library. These tools are very similar and provide
    just the ability to implement the Python syntax with C++, because Qt is basically
    a C++ language-based framework. The bindings are implemented as a set of Python
    modules and contain the classes that realize the GUI and infrastructure implementation. PySide
    is a community managed Qt Project ([http://qt-project.org](http://qt-project.org)),
    while PyQt is a binding that's developed by the British firm, Riverbank Computing
    ([https://riverbankcomputing.com](https://riverbankcomputing.com)) . The most
    recent versions of these bindings, at the time of writing this book, support the
    Qt5.x framework in both the PySide2 and PyQt5 versions. Within this book, the
    most recent versions of the bindings, PyQt5 and PySide2, will be used. These versions
    can be downloaded and installed from official sources, with `pip` or other available
    package managers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，PyQt和PySide代表了Python编程语言功能与Qt库的绑定。这些工具非常相似，仅提供了使用C++实现Python语法的功能，因为Qt基本上是基于C++语言的框架。这些绑定作为一组Python模块实现，包含实现GUI和基础设施的类。PySide是由社区管理的Qt项目([http://qt-project.org](http://qt-project.org))，而PyQt是由英国公司Riverbank
    Computing([https://riverbankcomputing.com](https://riverbankcomputing.com))开发的绑定。在撰写本书时，这些绑定的最新版本都支持Qt5.x框架，包括PySide2和PyQt5版本。在本书中，我们将使用绑定的最新版本，即PyQt5和PySide2。这些版本可以从官方来源下载和安装，使用`pip`或其他可用的包管理器。
- en: Downloading and installing
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装
- en: 'To start using these tools with Python, you need to have done the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Python这些工具，你需要完成以下操作：
- en: Downloaded and installed Python from [https://www.python.org/downloads/](https://www.python.org/downloads/)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[https://www.python.org/downloads/](https://www.python.org/downloads/)下载并安装了Python
- en: 'In the case of PyQt5, you need to have done the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyQt5的情况下，你需要完成以下操作：
- en: Built and installed SIP
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建并安装了SIP
- en: 'Downloaded and installed the PyQt5 package from the official source or with
    `pip`:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从官方来源或使用`pip`下载并安装了PyQt5包：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the case of PySide2, you need to have done the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在PySide2的情况下，你需要完成以下操作：
- en: Installed libclang
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了libclang
- en: 'Downloaded and installed the PySide2 package from the official source:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从官方来源下载并安装了PySide2包：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Alternatively, the option that is most recommended is downloading and installing
    the Anaconda toolset. Anaconda, by default, has PyQt5 installed and ready to work.
    In addition, the PySide2 binding can be installed using the command in the cmd/Terminal:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个最推荐的选项是下载并安装Anaconda工具集。Anaconda默认已安装PyQt5并准备好使用。此外，可以使用cmd/Terminal中的命令安装PySide2绑定：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Finally, PySide2 can be installed using Anaconda Navigator, which is provided
    as a default tool.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以使用Anaconda Navigator安装PySide2，这是默认提供的一个工具。
- en: In this book, PySide2 with the Python 2.x Anaconda environment will be used
    and PyQt5 with Python 3.x Anaconda. This circumvents numerous version conflicts
    and gets the necessary knowledge about the differences between Python versions
    2.x/3.x in practice.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，将使用Python 2.x的Anaconda环境中的PySide2和Python 3.x的PyQt5。这避免了众多版本冲突，并获得了关于2.x/3.x版本在实际中差异的必要知识。
- en: The difference between PyQt5 and PySide2 bindings
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyQt5与PySide2绑定的区别
- en: Given that the Python and Qt bindings are installed, let's describe some of
    the differences between PyQt and PySide. These differences are not constant over
    the period in question and may be excluded in the future. Firstly, there is a
    different `import` statement.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 Python 和 Qt 绑定已安装，让我们描述一下 PyQt 和 PySide 之间的一些差异。这些差异在所讨论的时期内可能不是恒定的，并且将来可能会被排除。首先，有不同的
    `import` 语句。
- en: 'For the PyQt5 binding, `import` looks like the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PyQt5 绑定，`import` 的语法如下：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For the PySide2 binding, use the following `import` statement:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PySide2 绑定，使用以下 `import` 语句：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we can see, the difference is in the name of the binding that is used to
    import the module. The statement to import some modules or classes can be different.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，区别在于用于导入模块的绑定名称。导入某些模块或类的语句可能不同。
- en: 'For example, the `import` statement of PyQt5 to Qt looks like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，PyQt5 导入 Qt 的 `import` 语句如下：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But with PySide2, it is different:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但在 PySide2 中，情况不同：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Also, other classes can have different importing locations. It is recommended
    to learn these import locations for both PyQt5 and PySide2 binding modules and
    classes in relation to the versions used.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，其他类可能有不同的导入位置。建议学习 PyQt5 和 PySide2 绑定模块和类的导入位置，以及所使用的版本。
- en: The PySide2 binding only supports API 2, which means that classes including
    `QStrings`, `QStringLists`, and `QVariants` are not available.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: PySide2 绑定仅支持 API 2，这意味着包括 `QStrings`、`QStringLists` 和 `QVariants` 在内的类不可用。
- en: Signals and slots have some different syntax.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 信号和槽有一些不同的语法。
- en: 'The syntax for PyQt5 signals is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: PyQt5 信号的语法如下：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For the PySide2 binding, we need to modify this syntax so that it''s similar
    to the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PySide2 绑定，我们需要修改此语法，使其类似于以下：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following are some facts about the syntax:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关于语法的要点：
- en: The signal decorator of PySide2 is `@Signal`, not `@pyqtSignal`, as it is in
    PyQt5 binding.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PySide2 的信号装饰器是 `@Signal`，而不是 PyQt5 绑定中的 `@pyqtSignal`。
- en: PySide2 will not export C++ components deprecated by Qt.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PySide2 不会导出 Qt 弃用的 C++ 组件。
- en: There are also differences with property declaration. If, in PyQt5, this looks
    like `QtCore.pyqtProperty`,then for PySide2, this will be `QtCore.Property`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在属性声明方面也存在差异。如果在 PyQt5 中看起来像 `QtCore.pyqtProperty`，那么对于 PySide2，这将变为 `QtCore.Property`。
- en: Different tool names are available with bindings. For example, the PyQt5 tool
    name, `pyuic5`, will be `pyside2-uic` with PySide2, and so on.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定提供了不同的工具名称。例如，PyQt5 工具名称 `pyuic5` 在 PySide2 中将是 `pyside2-uic`，等等。
- en: PySide uses `event()` and `connect()` with the `QObject` class. These property
    names cannot be used in the code for something else.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PySide 使用 `event()` 和 `connect()` 与 `QObject` 类。这些属性名不能在代码中用于其他目的。
- en: By working with the `QThread` class, in PySide2, after calling `stop()`, we
    need to use `wait()` when quitting the application.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过与 `QThread` 类一起工作，在 PySide2 中，在调用 `stop()` 后，退出应用程序时需要使用 `wait()`。
- en: The PySide2 `sender()` method returns `None` when a slot is a Lambda function.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PySide2 的 `sender()` 方法在槽是一个 Lambda 函数时返回 `None`。
- en: With inheritance using PySide2, the parent class constructors always need to
    be called.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PySide2 继承时，父类构造函数始终需要被调用。
- en: 'Let''s have a look at the following code snippets:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码片段：
- en: 'The PyQt5 class construction is similar to this:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyQt5 类的构造类似于以下：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In PySide2, the class name needs to be added to the `super()` function:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PySide2 中，需要在 `super()` 函数中添加类名：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'PySide2 only supports new-style classes, which are classes that are available
    as part of inheritance with PyQt5:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PySide2 只支持新式类，这些类可以作为 PyQt5 继承的一部分使用：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With PySide2, we need change to the new style by adding `object`:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PySide2，我们需要通过添加 `object` 来更改为新式：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The old-style signals look like this:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧式信号看起来如下：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With PySide2, the old-style signals need to be rewritten as follows:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PySide2，旧式信号需要重写如下：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Only signals without arguments will have the auto connection to the constructor:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有没有参数的信号才会自动连接到构造函数：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code, the `triggered()` signal will be connected to the slot
    handler instead of the `triggered(bool)` signal.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`triggered()` 信号将被连接到槽处理程序，而不是 `triggered(bool)` 信号。
- en: PySide2 is related to `shiboken2`, the Python binding generator that is used
    to create the PySide2 modules, and is the Qt C++ API to Python. Shiboken is a
    generator runner plugin that provides C++ code for CPython extensions. PyQt5 is
    built using the SIP bindings generator, the tool that creates Python bindings
    for C and C++ libraries.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: PySide2与`shiboken2`相关，这是一个Python绑定生成器，用于创建PySide2模块，并且是Qt C++ API到Python的接口。Shiboken是一个生成器运行插件，为CPython扩展提供C++代码。PyQt5使用SIP绑定生成器构建，这是创建C和C++库Python绑定的工具。
- en: As we can see, the differences between PyQt5 and PySide2 are not the cardinal
    point in the comparison. All of these problems can easily be prevented. Within
    this book, we will try to avoid the limitations and restrictions related to the
    versions of the bindings, languages, and framework features. Hence, as we mentioned previously,
    we will use the most recent Anaconda 2 environment for PySide2, and the most recent
    Anaconda 3 environment for PyQt5\. Also, modern programming approaches, including
    the utilization of the new-style classes, will be adopted.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，PyQt5和PySide2之间的差异并不是比较的核心点。所有这些问题都可以轻松预防。在本书中，我们将尝试避免与绑定版本、语言和框架功能相关的限制和限制。因此，正如我们之前提到的，我们将使用最新的Anaconda
    2环境用于PySide2，最新的Anaconda 3环境用于PyQt5。此外，还将采用现代编程方法，包括使用新式类。
- en: Frequent questions that arise inside the community regarding the differences
    between PyQt5 and PySide2 are related to the licenses of these bindings. PySide2
    is under the GNU **Lesser General Public License** (**LGPL**), or the Qt Commercial
    License, as a counterweight to PyQt5, under the Riverbank Commercial License,
    or GPL v3\. Also, some third-party components of PySide2 are under licenses that
    may not be the LGPLs. If you are intending to use the software for commercial
    purposes, you need to read these license rules carefully.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 社区内经常出现关于PyQt5和PySide2之间差异的问题，这些问题与这些绑定软件的许可证有关。PySide2采用GNU **较宽松的通用公共许可证**（**LGPL**）或Qt商业许可证，作为PyQt5的对抗，PyQt5采用Riverbank商业许可证或GPL
    v3。此外，PySide2的一些第三方组件可能采用不是LGPL的许可证。如果您打算将软件用于商业目的，您需要仔细阅读这些许可证规则。
- en: PyQt5
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyQt5
- en: 'We will start our learning of GUI creation with Python by exploring the PyQt5
    binding to the Qt framework. As we mentioned previously, PyQt5 is a binding to
    the Qt application framework that''s provided by the Qt company and developed
    by RiverBank Computing. At the time of writing, PyQt5 may be used on Windows,
    Linux, Unix platforms, macOS, Android, and iOS. The downloaded PyQt5 package does
    not have a copy of Qt, and by now, you must have downloaded and installed the
    correct licensed copy of Qt framework from the official source. PyQt5 is a dual
    licensed software, licensed under the Riverbank Commercial License and the GPL
    v3\. This means that if the GPL license is to be used, then the code provided
    by the developer must also use a compatible license. PyQt5 modules contain the
    following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过探索PyQt5绑定到Qt框架来开始我们的Python GUI创建学习。正如我们之前提到的，PyQt5是Qt公司提供并由RiverBank Computing开发的Qt应用程序框架的绑定。在撰写本文时，PyQt5可以在Windows、Linux、Unix平台、macOS、Android和iOS上使用。下载的PyQt5包不包含Qt，到现在为止，您必须已经从官方来源下载并安装了正确的许可证版本的Qt框架。PyQt5是双许可软件，许可协议为Riverbank商业许可证和GPL
    v3。这意味着如果使用GPL许可证，则开发者提供的代码也必须使用兼容的许可证。PyQt5模块包含以下内容：
- en: '**Base**:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础**：'
- en: '`Qt`: This is a consolidation of the modules, such as in the Qt library—the
    base of all classes. This is the base class of the Qt library.'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt`：这是模块的整合，如Qt库——所有类的基类。这是Qt库的基类。'
- en: '**Basic with GUI creation**:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带有GUI创建的基本**：'
- en: '`QtCore`: These are the core Qt classes; they provide core functionality, such
    as signals/slots or alignment of the elements.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore`：这些是Qt的核心类；它们提供核心功能，如信号/槽或元素对齐。'
- en: '`QtWidgets`: This is the GUI for creating classes which create desktop applications,
    such as creating a window.'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets`：这是用于创建桌面应用程序类（如创建窗口）的GUI。'
- en: '`QtGui`: These are the core classes for widgets and GUIs, such as adding icons
    and working with colors and texts.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui`：这些是用于小部件和GUI的核心类，如添加图标、处理颜色和文本。'
- en: '`QtPrintSupport`: This provides local/remote printing functionality integration
    with the applications, with the ability to generate PostScript and PDF files.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtPrintSupport`：这为应用程序提供了本地/远程打印功能集成，能够生成PostScript和PDF文件。'
- en: '`QtMultimedia`: These are classes for multimedia content and APIs to access
    camera and radio. It has audio and video classes.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia`：这些是多媒体内容类和用于访问相机和收音机的 API。它包含音频和视频类。'
- en: '`QtMultimediaWidgets`: These are additional classes for multimedia widgets
    and controls, such as video widgets.'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimediaWidgets`：这些是多媒体小部件和控制的附加类，例如视频小部件。'
- en: '`QtSql`: This provides integration with SQL databases. This includes the SQL
    database, drivers, fields, table models, and queries classes.'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtSql`：这提供了与 SQL 数据库的集成。这包括 SQL 数据库、驱动程序、字段、表模型和查询类。'
- en: '`QtSvg`: This provides support for rendering the contents of the **Structured
    Vector Graphics** (**SVG**).'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtSvg`：这提供了对**结构化矢量图形**（**SVG**）内容的渲染支持。'
- en: '**QML**:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**QML**：'
- en: '`QtQml`: Classes for integrating the QML language infrastructure with PyQt5
    applications.'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtQml`：用于将 QML 语言基础设施与 PyQt5 应用程序集成的类。'
- en: '`QtQuick`: Provides the extension for the QML user interfaces.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtQuick`：为 QML 用户界面提供扩展。'
- en: '`QtQuickWidgets`: Used to render a QML scene in traditional widgets.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtQuickWidgets`：用于在传统小部件中渲染 QML 场景。'
- en: '**Devices, networking, and the web**:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Devices, networking, and the web**：'
- en: '`QtBluetooth`: These are classes to connect with Bluetooth devices, such as
    scanning for devices, gathering information, and exchanging data.'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtBluetooth`：这些是用于连接蓝牙设备的类，例如扫描设备、收集信息和交换数据。'
- en: '`QtNfc`: This provides the classes to connect between NFC devices (near-field
    communication protocols used by devices).'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtNfc`：这提供了连接 NFC 设备（设备使用的近场通信协议）的类。'
- en: '`QtNetwork`: These are the core network classes. This facilitates the creation
    of UDP and TCP clients and servers, and includes the classes that implement HTTP
    clients and support DNS lookups. Options to work with sockets, network configuration,
    and SSL certificates are available.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtNetwork`：这些是核心网络类。这有助于创建 UDP 和 TCP 客户端和服务器，并包括实现 HTTP 客户端和支持 DNS 查询的类。提供了与套接字、网络配置和
    SSL 证书一起工作的选项。'
- en: '`QtNetworkAuth`: These are classes for network authorization (OAuth).'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtNetworkAuth`：这些是用于网络授权（OAuth）的类。'
- en: '`QtWebChannel`: This is for use of the classes that enable peer-to-peer communication
    between a server, Python/QML application and client, HTML/JavaScript, or QML application.'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWebChannel`：这是用于启用服务器、Python/QML 应用程序和客户端、HTML/JavaScript 或 QML 应用程序之间的点对点通信的类。'
- en: '`QtWebEngine`: These are classes for integrating QML WebEngine objects with
    Python.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWebEngine`：这些是用于将 QML WebEngine 对象与 Python 集成的类。'
- en: '`QtWebEngineCore`: These are the core web engine classes.'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWebEngineCore`：这些是核心网络引擎类。'
- en: '`QtWebEngineWidgets`: This provides a Chromium-based web browser.'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWebEngineWidgets`：这提供了一个基于 Chromium 的网络浏览器。'
- en: '`QtWebSockets`: This is an implementation of the WebSocket protocol.'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWebSockets`：这是 WebSocket 协议的实现。'
- en: '`QtPurchasing`: This provides in-app purchasing, App Store, and Google Play
    support.'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtPurchasing`：这提供了应用内购买、App Store 和 Google Play 支持。'
- en: '**3D**:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3D**：'
- en: '`Qt3DAnimation`: Classes used for animations that are applied to the object
    properties in simulations.'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt3DAnimation`：用于在模拟中应用于对象属性的动画的类。'
- en: '**`Qt3DCore`**: The core classes for the near real-time simulation systems
    with 2D and 3D rendering.'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`Qt3DCore`**：用于近实时模拟系统的核心类，具有 2D 和 3D 渲染。'
- en: '`Qt3DExtras`: Classes that provide pre-built elements for Qt3D, such as geometries,
    meshes and materials, and camera controllers.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt3DExtras`：提供预构建元素（如几何形状、网格和材质以及相机控制器）的类。'
- en: '`Qt3DInput`: Classes for handling user input with Qt3D.'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt3DInput`：用于处理 Qt3D 用户输入的类。'
- en: '`Qt3DLogic`: Synchronization of the frames with the Qt3D backend.'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt3DLogic`：与 Qt3D 后端同步帧。'
- en: '`Qt3DRender`: Classes for 2D and 3D rendering with Qt3D.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt3DRender`：用于 Qt3D 的 2D 和 3D 渲染类。'
- en: '`QtDataVisualization`: Contains the classes that visualize data in 3D as surface
    graphs, bars, and scatter plots.'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtDataVisualization`：包含将数据以表面图、条形图和散点图的形式可视化的类。'
- en: '**XML**:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML**：'
- en: '`QtXml`:Classes that provide the simple API for XML (SAX) and **Document Object
    Model** (**DOM**) interfaces for the XML parser of the Qt framework.'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtXml`：提供简单 API 的类，用于 XML（SAX）和**文档对象模型**（**DOM**）接口，用于 Qt 框架的 XML 解析器。'
- en: '`QtXmlPatterns`: Classes for additional XML technologies, such as XPath and
    XQuery, **Extensible Stylesheet Language Transformations** (**XSLT**), and XML
    schema validation.'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtXmlPatterns`：用于额外 XML 技术的类，如 XPath 和 XQuery、**可扩展样式表语言转换**（**XSLT**）和 XML
    架构验证。'
- en: '**Utilities**:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Utilities**：'
- en: '`QtLocation`: This provides classes for the creation of the mapping applications
    with data from the popular location services that provide navigation information
    and geocoding, along with place searching.'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtLocation`: 这提供了创建具有来自流行位置服务（提供导航信息和地理编码）的数据的映射应用程序的类，包括地点搜索。'
- en: '`QtPositioning`: This module provides the classes for working with positioning
    information from satellites, Wi-Fi, and so on, and can be used to determine a
    position on a map.'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtPositioning`: 此模块提供了用于处理来自卫星、Wi-Fi等定位信息的类，可用于在地图上确定位置。'
- en: '`QtSensors`: This provides classes for working with a system''s hardware sensors,
    such as gyroscopes and accelerometers, altimeters, ambient light and temperature
    sensors, and magnetometers.'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtSensors`: 这提供了用于处理系统硬件传感器的类，例如陀螺仪和加速度计、高度计、环境光和温度传感器，以及磁力计。'
- en: '`QtSerialPort`: This module provides the classes for working with serial ports
    of the system, and for configuring, I/O operations, and getting and setting the
    control signals of the RS-232 pinouts.'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtSerialPort`: 此模块提供了用于处理系统串行端口的类，以及配置、I/O操作、获取和设置RS-232引脚的控制信号的类。'
- en: '`QtDBus`: This provides classes for working with the D-Bus protocol—the **Inter-Process
    Communication** (**IPC**) and **Remote Procedure Calling** (**RPC**) mechanism.
    This was designed to allow interaction between system-level processes, such as
    printers and hardware driver services, and other user processes.'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtDBus`: 这提供了用于处理D-Bus协议的类——**进程间通信**（IPC）和**远程过程调用**（RPC）机制。它被设计为允许系统级进程（如打印机硬件驱动服务）与其他用户进程之间的交互。'
- en: '`QAxContainer`: This provides classes that provide access to ActiveX (internet-enabled
    components) controls and COM objects.'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QAxContainer`: 这提供了提供对ActiveX（互联网启用组件）控件和COM对象访问的类。'
- en: '`QtChart`: This provides classes for the creation of 2D charts. These include
    line and spline charts, area and scatter charts, bar charts, pie charts, box-and-whiskers
    charts, candlestick charts, and polar charts.'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtChart`: 这提供了创建2D图表的类。这些包括线形和样条图、面积和散点图、条形图、饼图、箱线图、蜡烛图和极坐标图。'
- en: '`QtDesigner`: A module with classes that provides extensions for using the
    Qt Designer with Python.'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtDesigner`: 一个模块，其中包含提供使用Python扩展Qt Designer的类的扩展。'
- en: '`QtHelp`: Classes that allow the creation/viewing of searchable help and documentation
    in the applications.'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtHelp`: 允许在应用程序中创建/查看可搜索的帮助和文档的类。'
- en: '`uic`: The **User Interface Compiler** (`uic`) handles the files that are created
    using the Qt Designer graphical interface tool and the generation of Python code
    from the `gui.ui` files that are created.'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uic`: **用户界面编译器**（`uic`）处理使用Qt Designer图形界面工具创建的文件，并从创建的`gui.ui`文件生成Python代码。'
- en: '`QtTest`: This provides unit testing for the applications. It includes the
    `QSignalSpy` class, which provides introspection of the signals and slots.'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtTest`: 这为应用程序提供单元测试。它包括`QSignalSpy`类，该类提供了对信号和槽的反射。'
- en: '**Extras**:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附加内容**:'
- en: '`QtAndroidExtras`: Classes specific to Android platforms.'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtAndroidExtras`: 专门针对Android平台的类。'
- en: '`QtMacExtras`: Classes specific to macOS and iOS platforms.'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMacExtras`: 专门针对macOS和iOS平台的类。'
- en: '`QtWinExtras`: Classes specific to Windows, such as a progress indicator on
    the taskbar button and a thumbnail toolbar.'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWinExtras`: 专门针对Windows的类，例如任务栏按钮上的进度指示器和缩略图工具栏。'
- en: '`QtX11Extras`: Classes specific to the X11 windowing system.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtX11Extras`: 专门针对X11窗口系统的类。'
- en: 'In addition, the PyQt5 framework provides a number of utility programs:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，PyQt5框架还提供了一些实用程序：
- en: '`pyuic5`: A utility that converts `gui.ui` files, which are created using the
    Qt Designer graphical tool, into standard Python code.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyuic5`: 一个实用工具，可以将使用Qt Designer图形工具创建的`gui.ui`文件转换为标准Python代码。'
- en: '`pyrcc5`: A utility that embeds icons, images, translation files, and so on,
    as described by the resource collection file in any Python module.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyrcc5`: 一个实用工具，可以将图标、图像、翻译文件等嵌入到任何Python模块中，如资源收集文件所述。'
- en: '`pylupdate5`:A utility for extracting the translatable strings from Python
    code and creating/updating translation files.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pylupdate5`: 一个实用工具，用于从Python代码中提取可翻译的字符串并创建/更新翻译文件。'
- en: PySide2
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PySide2
- en: 'The PySide2 library, as we mentioned previously, is a coupling of the classes
    that were provided so that Qt could be used with Python. It is developed by the
    Qt project community. These libraries (PyQt and PySide) are very similar and have
    a construction that uses the main Qt functionality for creating GUIs with Python.
    In this sense, PySide2 facilitates the use of Qt5 APIs in Python applications.
    This gives software developers the ability to use the full potential of Qt. The
    PySide2 module provides access to individual Qt modules, such as Qt Widgets, Qt
    Core, and Qt GUI. Some of these will repeat the preceding content, but for comparison
    purposes, it is necessary to describe these modules here:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，PySide2 库是将提供这些类耦合在一起，以便可以使用 Python 使用 Qt。它由 Qt 项目社区开发。这些库（PyQt 和 PySide）非常相似，并且使用主
    Qt 功能来创建 Python 的 GUI。在这方面，PySide2 便于在 Python 应用程序中使用 Qt5 API。这为软件开发者提供了使用 Qt
    全部潜力的能力。PySide2 模块提供了对 Qt 各个模块的访问，例如 Qt Widgets、Qt Core 和 Qt GUI。其中一些将重复前面的内容，但为了比较目的，有必要在这里描述这些模块：
- en: '**GUI creation**:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GUI 创建**:'
- en: '`QtCore`: This is the core non-GUI functionality class that provides core functionality
    signals/slots or calibration of the components, similar to the PyQt5 library.'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore`: 这是提供核心非 GUI 功能的类，它提供核心功能信号/槽或组件校准，类似于 PyQt5 库。'
- en: '`QtWidgets`: This implements C++ classes to extend Qt GUI widget functionality
    and provides the graphical components, such as buttons, window, and widgets.'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets`: 这实现了 C++ 类以扩展 Qt GUI 小部件功能，并提供图形组件，如按钮、窗口和小部件。'
- en: '`QtGui`: This has classes for the windowing system and graphics in the Qt library,
    such as events, OpenGL, OpenGL ES, and Vulkan integration; 2D graphics; imaging;
    typography fonts; and colors.'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui`: 这在 Qt 库中具有用于窗口系统和图形的类，例如事件、OpenGL、OpenGL ES 和 Vulkan 集成；2D 图形；图像处理；字体排印字体；和颜色。'
- en: '`QtPrintSupport`: This is a cross-platform printing functionality of the Qt
    library.'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtPrintSupport`: 这是 Qt 库的跨平台打印功能。'
- en: '`QtMultimedia`: This is a low-level multimedia functionality for audio, video,
    radio, camera, and so on.'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia`: 这为音频、视频、广播、摄像头等提供了低级多媒体功能。'
- en: '`QtMultimediaWidgets`: These classes are for the creation of multimedia widgets
    from the Qt Multimedia Widgets module.'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimediaWidgets`: 这些类用于从 Qt Multimedia Widgets 模块创建多媒体小部件。'
- en: '`QtSql`: This is the module for database implementations in the application.
    This includes the drivers, SQL API, and user interface layers for SQL databases.'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtSql`: 这是应用程序中数据库实现的模块。这包括驱动程序、SQL API 和 SQL 数据库的用户界面层。'
- en: '`QtSvg`: This provides classes to display SVG files, such as rendering (`QSvgRenderer`)
    and drawing (`QSvgWidget`).'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtSvg`: 这提供了显示 SVG 文件的类，例如渲染（`QSvgRenderer`）和绘图（`QSvgWidget`）。'
- en: '`QtConcurrent`: This provides high-level API functionality for the concurrent
    execution of code. It can be used for writing multithreaded constructions of the
    applications without using low-level threading primitives, such as mutexes, read-write
    locks, wait conditions, or semaphores.'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtConcurrent`: 这提供了用于代码并发执行的 API 功能。它可以用于编写不需要使用低级线程原语（如互斥锁、读写锁、等待条件或信号量）的多线程应用程序结构。'
- en: '**QML**:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**QML**:'
- en: '`QtQml`:This is a Python API for the Qt QML infrastructure.'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtQml`: 这是为 Qt QML 基础设施提供的 Python API。'
- en: '`QtQuick`: This is a class for Qt Quick in Qt/C++ applications.'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtQuick`: 这是在 Qt/C++ 应用程序中用于 Qt Quick 的类。'
- en: '`QtQuickWidgets`: This is the `QQuickWidget` class for Qt Quick in widget-based
    applications.'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtQuickWidgets`: 这是在基于小部件的应用程序中用于 Qt Quick 的 `QQuickWidget` 类。'
- en: '**Networking and web**:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络和网页**:'
- en: '`QtNetwork`: This is a network programming class that allows the creation of UDP
    and TCP clients and servers, and includes the classes that implement HTTP clients
    and support DNS lookups. Options to work with sockets, network configuration,
    and SSL certificates are available.'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtNetwork`: 这是一个网络编程类，允许创建 UDP 和 TCP 客户端和服务器，并包括实现 HTTP 客户端和支持 DNS 查询的类。提供了与套接字、网络配置和
    SSL 证书一起工作的选项。'
- en: '`QtWebChannel`: This is a class for peer-to-peer communication between a server
    and a client HTML/JavaScript or QML application.'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWebChannel`: 这是一个用于服务器和客户端 HTML/JavaScript 或 QML 应用程序之间点对点通信的类。'
- en: '`QtWebEngineCore`: The core functionality is to fuse the web content, the public
    API shared by `QtWebEngine`, and the `QtWebEnginEWidgets` classes.'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWebEngineCore`: 核心功能是将网页内容、由 `QtWebEngine` 共享的公共 API 以及 `QtWebEnginEWidgets`
    类融合在一起。'
- en: '`QtWebEngineWidgets`: This provides a web browser engine with common C++ classes
    to provide and collaborate with web content.'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWebEngineWidgets`: 这提供了一个带有常见 C++ 类的网页浏览器引擎，用于提供和协作网页内容。'
- en: '`QtWebSockets`: Interfaces for the Qt application that can act as servers/clients
    that can process WebSocket requests or receive data from the server. This also
    includes C++ classes that enable socket-based communication.'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWebSockets`: 为 Qt 应用程序提供接口，可以作为服务器/客户端处理 WebSocket 请求或从服务器接收数据。这还包括启用基于套接字通信的
    C++ 类。'
- en: '**3D**:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3D**:'
- en: '`Qt3DAnimation`: This is a module that provides classes with basic elements
    to animate 3D objects in the Qt framework.'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt3DAnimation`: 这是一个提供用于在 Qt 框架中动画化 3D 对象的基本元素的模块。'
- en: '`Qt3DCore`: This is the Qt3D module with classes for the core types that are
    used for near real-time simulations, built on the Qt3D framework.'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt3DCore`: 这是 Qt3D 模块，包含用于近实时模拟的核心类型类，基于 Qt3D 框架构建。'
- en: '`Qt3DExtras`: This provides prebuilt elements for working with Qt3D.'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt3DExtras`: 这提供了与 Qt3D 一起工作的预构建元素。'
- en: '`Qt3DInput`: This is a module with classes for handling user input with Qt3D.'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt3DInput`: 这是一个提供用于处理 Qt3D 用户输入的类的模块。'
- en: '`Qt3DLogic`: This provides classes for the synchronization of frames with the
    Qt3D backend.'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt3DLogic`: 这提供了与 Qt3D 后端同步帧的类。'
- en: '`Qt3DRender`: This is a module with classes for 2D/3D rendering with Qt3D.'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt3DRender`: 这是一个包含用于 Qt3D 的 2D/3D 渲染类别的模块。'
- en: '`QtDataVisualization`: This provides classes to visualize data in 3D as surface
    graphs, bars, and scatter plots.'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtDataVisualization`: 这提供了将数据以表面图、条形图和散点图的形式可视化的类。'
- en: '**XML**:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML**:'
- en: '`QtXml`: C++ implementations of the simple API for XML (SAX) and DOM interfaces
    with the Qt application.'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtXml`: Qt 应用程序中简单 API（SAX）和 DOM 接口的 C++ 实现。'
- en: '`QtXmlPatterns`: XQuery, XPath, XSLT, and XML schema validation.'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtXmlPatterns`: XQuery、XPath、XSLT 和 XML 架构验证。'
- en: '`QtScxml`: Classes for creation using state machines from SCXML files.'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtScxml`: 用于从 SCXML 文件创建状态机类。'
- en: '**Utilities**:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实用工具**:'
- en: '`QtLocation`: This provides C++ interfaces for location and navigational information.'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtLocation`: 这提供了用于位置和导航信息的 C++ 接口。'
- en: '`QtPositioning`: This provides positioning access through QML and Python interfaces
    to the satellite and area monitoring data.'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtPositioning`: 这通过 QML 和 Python 接口提供对卫星和区域监控数据的定位访问。'
- en: '`QtSensors`: This provides classes for reading a system''s sensor hardware
    via QML and Python interfaces. It also provides a motion gesture recognition API.'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtSensors`: 这通过 QML 和 Python 接口提供了读取系统传感器硬件的类。它还提供了一个运动手势识别 API。'
- en: '`QAxContainer`: This provides the `QAxObject` object and the `QAxWidget` widget,
    which are used as containers for the ActiveX controls and COM objects.'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QAxContainer`: 这提供了 `QAxObject` 对象和 `QAxWidget` 小部件，它们用作 ActiveX 控件和 COM 对象的容器。'
- en: '`QtCharts`: This is the most commonly used chart components.'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCharts`: 这是最常用的图表组件。'
- en: '`QtTextToSpeech`: This is an API to access text-to-speech engines with the `QTextToSpeechEngine`,
    `QTextToSpeech`, and `QVoice` classes.'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtTextToSpeech`: 这是一个 API，可以通过 `QTextToSpeechEngine`、`QTextToSpeech` 和 `QVoice`
    类访问文本到语音引擎。'
- en: '`QtHelp`: This provides classes to include online help and documentation in
    applications.'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtHelp`: 这提供了在应用程序中包含在线帮助和文档的类。'
- en: '`QtUiTools`: This provides classes to handle Qt Designer forms.'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtUiTools`: 这提供了处理 Qt Designer 表单的类。'
- en: '`QtTest`: This provides classes for unit testing of the Qt applications and
    libraries.'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtTest`: 这提供了用于 Qt 应用程序和库单元测试的类。'
- en: '**Extras**:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附加内容**:'
- en: '`QtWindowsExtras`: Classes so that you can use a number of Windows APIs with
    Qt.'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWindowsExtras`: 使您能够使用许多 Windows API 与 Qt 一起使用。'
- en: '`QtMacExtras`: Classes specific to macOS and iOS operating systems.'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMacExtras`: 专门针对 macOS 和 iOS 操作系统的类。'
- en: '`QtX11Extras`: Information regarding the X11 configuration.'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtX11Extras`: 关于 X11 配置的信息。'
- en: Application construction
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序构建
- en: The two Python bindings (PyQt5 and PySide2) to the Qt library are similar in
    nature. The most commonly used modules are related to GUI creation. These include Qt
    Core, Qt Widgets, and Qt GUI. As we can see, these modules are available in both
    PyQt5 and PySide2. It is precisely these modules that will be examined in detail
    within this book. The programming approach that will be used in this book implies
    writing the Python code inside Python files, with a declaration of the classes,
    functions, variables, and so on. Before we start this exciting process, we would
    like to consider a slightly different way of creating the GUI application in the
    design part—creation involving Qt Designer.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 两个与 Qt 库绑定的 Python 模块（PyQt5 和 PySide2）在本质上相似。最常用的模块与 GUI 创建相关。这些包括 Qt Core、Qt
    Widgets 和 Qt GUI。正如我们所见，这些模块在 PyQt5 和 PySide2 中都是可用的。正是这些模块将在本书中详细探讨。本书中将要使用的编程方法意味着在
    Python 文件中编写 Python 代码，并声明类、函数、变量等。在我们开始这个激动人心的过程之前，我们想考虑一种在设计部分创建 GUI 应用程序的不同方式——涉及
    Qt Designer 的创建。
- en: Qt Designer
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Designer
- en: 'This graphical user tool for creating GUI applications with Qt is available
    with almost all variations of the PyQt and PySide libraries, as provided by the
    Anaconda toolset, with PyQt5 standalone, or can be downloaded and installed with
    Qt. Let''s try to do something with Qt Designer. For this, we just need to open
    Designer by clicking on the icon, or we do this through the cmd/Terminal:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这个用于使用 Qt 创建 GUI 应用的图形用户工具几乎包含在 Anaconda 工具集提供的 PyQt 和 PySide 库的所有变体中，包括 PyQt5
    独立版本，或者可以下载并安装 Qt。让我们尝试使用 Qt Designer 做些事情。为此，我们只需点击图标打开 Designer，或者我们通过 cmd/Terminal
    来做这件事：
- en: '[PRE16]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we can see the designer window, along with options to create forms, buttons,
    labels, and so on. Create the simple widget and add some elements, including frames
    and different buttons, to the widget, as demonstrated in the following screenshot:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到设计师窗口，以及创建表单、按钮、标签等选项。创建一个简单的小部件，并向其中添加一些元素，包括框架和不同的按钮，如下面的截图所示：
- en: '![](img/3d433afe-14ca-4020-b190-eada486f19b0.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d433afe-14ca-4020-b190-eada486f19b0.png)'
- en: 'Then, we need to save this file with a name, such as `design_app`**.** It should
    be noted that Qt Designer uses XML `*.ui` files to store designs and does not
    generate any code itself. Choose the Save option and then save the file as `design_app.ui`
    in the `App/`directory. As a result, we will have a file with a UI extension and
    XML inside it. However, it would be preferable for this file to be a Python file
    containing Python code. To do this, we need to convert this code into Python with
    the help of an additional utility—`pyuic5` (PyQt5) or `pyside2-uic` (PySide2).
    Type the following command in the cmd/Terminal:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将此文件保存为一个名称，例如 `design_app`**。**需要注意的是，Qt Designer 使用 XML `*.ui` 文件来存储设计，并且本身不会生成任何代码。选择“保存”选项，然后将文件保存为
    `design_app.ui` 到 `App/` 目录下。因此，我们将有一个具有 UI 扩展名和 XML 内容的文件。然而，最好将此文件作为一个包含 Python
    代码的 Python 文件。为此，我们需要使用一个额外的实用工具——`pyuic5`（PyQt5）或 `pyside2-uic`（PySide2）将此代码转换为
    Python。在 cmd/Terminal 中输入以下命令：
- en: '[PRE17]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, we can see the `design_app.py` file with Python code inside the `App/`directory.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到位于 `App/` 目录下的 `design_app.py` 文件，其中包含 Python 代码。
- en: This book will not describe GUI development with Qt Designer. This brief introduction
    to this tool is sufficient to understand how a developer can use Qt Designer.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将不会描述使用 Qt Designer 进行 GUI 开发。这个关于这个工具的简要介绍足以让开发者了解如何使用 Qt Designer。
- en: Getting started with GUI
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 GUI
- en: Following this brief introduction to Qt Designer, let's move on to the main
    objective of this book, namely, the correct choice in terms of the construction
    and writing of the qualitative Python code for the application with the GUI. Most
    programming practices require an understanding of the functionality and the form
    of the future application in order to appreciate how everything in the application
    works. But this is not what we will do. We will use Python—a real-time dynamic
    programming language that gives us the opportunity to implement almost everything
    in the world in a graphical window. We need to start low and go high.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在对 Qt Designer 进行简要介绍之后，让我们继续本书的主要目标，即正确选择构建和编写具有 GUI 的应用程序的定性 Python 代码。大多数编程实践需要理解未来应用程序的功能和形式，以便欣赏应用程序中的一切是如何工作的。但我们将不会这样做。我们将使用
    Python——一种实时动态编程语言，它给我们提供了在图形窗口中实现世界上几乎所有事情的机会。我们需要从低到高逐步进行。
- en: First, we need to organize the directories with application files in the correct
    manner. Although this book will demonstrate examples of both bindings, it is recommended
    that you create directories, such as `App/App_PySide2` and `App/App_PyQt5`,inside
    the `App/`directory. But if your choice of a certain Python binding has been made, it's
    not obligatory. Then, we need to execute a rewrite of the files, as we described
    in previous chapters, and add some more files. There are many different ways to
    create GUI applications. If the GUI app that will be created is small in size,
    on a small scale, or simply provides a limited functionality, for example, only
    performing several functions, it makes sense to put the code in a single file.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要以正确的方式组织包含应用程序文件的目录。尽管本书将演示两种绑定的示例，但建议你在`App/`目录内创建如`App/App_PySide2`和`App/App_PyQt5`之类的目录。但如果你已经选择了某种Python绑定，这并不是强制性的。然后，我们需要执行我们之前章节中描述的文件重写，并添加一些更多文件。创建GUI应用程序有许多不同的方法。如果将要创建的GUI应用程序体积小、规模小或仅提供有限的功能，例如仅执行几个功能，将代码放在单个文件中是有意义的。
- en: However, this is a bad idea, because each application can be rebuilt, updated,
    upgraded, or enlarged with additional code. And splitting the small application
    into several files will have no, or almost no, effect on performance and productivity.
    On the other hand, incorporating large-scale application code in a single file will
    lead to problems in terms of editors reading this file, as well as maintenance
    problems, and confusion in general. Problems may also arise in regards to rebuilding
    and changing the functionality. For example, if some style properties need to
    be changed, it will be necessary to find these parameters, and something will
    always go unnoticed. GUI applications usually have many lines of code, unlike
    the lines of functions for some special operations. In other words, it is a good
    idea to split the application between the different files in some way and import
    classes and functions from these files to the file with the main GUI application.
    This is the art of programming—to create applications with files, classes, and
    functions in the right places. We need to understand that some of them need to
    be located in the spaces that are allowed in order to exclude the problems associated
    with namespacing. We will utilize the **object-oriented programming** (**OOP**)
    approach, which means that we want to use the code many times in different places,
    and sometimes in other applications in the future. In addition, the styling code
    of GUI applications commonly requires many lines.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这是一个坏主意，因为每个应用程序都可以被重建、更新、升级或通过添加额外代码来扩展。将小型应用程序拆分为多个文件对性能和生产力几乎没有任何影响，或者几乎没有影响。另一方面，将大规模应用程序代码放入单个文件会导致编辑器阅读此文件时出现问题，以及维护问题和一般性的困惑。在重建和更改功能方面也可能出现问题。例如，如果需要更改某些样式属性，将需要找到这些参数，而且总会有一些东西被忽略。GUI应用程序通常有大量的代码行，而某些特殊操作的函数行数则较少。换句话说，以某种方式在不同文件中拆分应用程序是一个好主意，并将这些文件中的类和函数导入到具有主要GUI应用程序的文件中。这是编程的艺术——在正确的位置创建具有文件、类和函数的应用程序。我们需要理解，其中一些需要位于允许的空间中，以排除与命名空间相关的问题。我们将利用**面向对象编程**（**OOP**）方法，这意味着我们希望在多个地方多次使用代码，有时在未来在其他应用程序中使用。此外，GUI应用程序的样式代码通常需要很多行。
- en: Based on this, let's split the application into the three files as they are
    created: `u_app.py`, `u_tools.py`, and a `u_style.py` file that we will add now.
    Then, put them into the `App/App_PySide2` and `App/App_PyQt5` directories. The
    `u_app.py` file will contain the main class of the GUI application, along with
    instructions to run it. Change the code inside as follows.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此，我们将应用程序拆分为三个文件，就像它们被创建时那样：`u_app.py`、`u_tools.py`以及我们现在要添加的`u_style.py`文件。然后，将它们放入`App/App_PySide2`和`App/App_PyQt5`目录中。`u_app.py`文件将包含GUI应用程序的主类，以及运行它的说明。按照以下方式更改代码。
- en: 'With regards to the `u_app.py` file, the following code creates the class with PyQt5:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`u_app.py`文件，以下代码使用PyQt5创建类：
- en: '[PRE18]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this file, we are creating the main class of the GUI application. This class
    will combine all of the functionality from the other modules (third-party packages)
    and create the application.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，我们正在创建GUI应用程序的主类。此类将结合来自其他模块（第三方包）的所有功能，并创建应用程序。
- en: 'In the case of the PySide2 `u_app.py` file, we have the following:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在PySide2的`u_app.py`文件中，我们有以下内容：
- en: '[PRE19]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This is the file with the main class that will be used with the PySide2 binding
    to Qt. The `u_tools.py` file will contain the classes and functions to provide
    some functionality or additional features for the GUI application.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与 PySide2 绑定一起用于 Qt 的主类文件。`u_tools.py` 文件将包含为 GUI 应用程序提供一些功能或额外功能的类和函数。
- en: 'Change the content of this file to the following in the case of the PyQt5 `u_tools.py`
    file:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyQt5 的 `u_tools.py` 文件的情况下，将此文件的内容更改为以下内容：
- en: '[PRE20]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is the file that includes classes. We will use convenient functions that
    are not related, in the full sense, to the GUI representation of the application
    here.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包含类的文件。我们将在这里使用一些方便的函数，这些函数与应用程序的 GUI 表示无关。
- en: 'In the case of the PySide2 `u_tools.py` file, we have the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PySide2 的 `u_tools.py` 文件中，我们有以下内容：
- en: '[PRE21]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Where possible, we will avoid differences in syntax, used modules, and classes
    between the Python versions and Python bindings in the Qt library (PySide2/PyQt5).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，我们将避免在 Python 版本和 Qt 库（PySide2/PyQt5）的 Python 绑定之间的语法、使用的模块和类之间的差异。
- en: The `u_style.py` file will contain the classes and functions that provide styling
    to the GUI application, including widgets, buttons, labels, frames, colors, and
    fonts.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`u_style.py` 文件将包含为 GUI 应用程序提供样式的类和函数，包括小部件、按钮、标签、框架、颜色和字体。'
- en: 'In the case of the PyQt5 `u_style.py` file, we have the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyQt5 的 `u_style.py` 文件中，我们有以下内容：
- en: '[PRE22]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: These styling files will only contain graphically related objects and graphics
    properties.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这些样式文件将只包含与图形相关的对象和图形属性。
- en: 'In the case of the PySide2 `u_style.py` file, we have the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PySide2 的 `u_style.py` 文件中，我们有以下内容：
- en: '[PRE23]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As we can see, the only differences between the PySide2 and PyQt5 bindings is
    in the name import statements and in the printing of the `string` variable, which
    depends on the different Python versions. Throughout this book, the code in these
    files will be augmented or changed as we add new elements, widgets, and functionality.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，PySide2 和 PyQt5 绑定之间的唯一区别在于名称导入语句以及在打印 `string` 变量时的不同，这取决于不同的 Python
    版本。在整个书中，随着我们添加新的元素、小部件和功能，这些文件中的代码将会被增强或更改。
- en: 'For now, these applications can be run using the cmd/Terminal command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这些应用程序可以通过 cmd/Terminal 命令运行：
- en: '[PRE24]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We will get the same result, in other words, an empty widget:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到相同的结果，换句话说，一个空的小部件：
- en: '![](img/9b58da04-ba27-4781-829d-0becb2b99f6a.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9b58da04-ba27-4781-829d-0becb2b99f6a.png)'
- en: In the cmd/Terminal, we have the same output that we did when the system arguments
    were passed with `QApplication`, that is, a list with the name of the application
    and a `string` variable of the `UTools` class.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在 cmd/Terminal 中，我们有与当通过 `QApplication` 传递系统参数时相同的输出，即包含应用程序名称的列表和 `UTools`
    类的 `string` 变量。
- en: Application features
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序功能
- en: 'Let''s consider the process that will be executed when the application is created
    and run the `u_app.py` file with the script. Let''s look at what happens, line
    by line:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑当应用程序创建并运行带有脚本的 `u_app.py` 文件时将执行的过程。让我们逐行查看发生了什么：
- en: In the `u_app.py` file, the import section that import the `UTools` class, which
    will provide some functionality, was fixed, including functions, or, like it was
    in this case, `string` variables with text. The `UWid` class, which implements
    `Qwidget` (a widget that will be shown as a graphical element), will also be imported.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `u_app.py` 文件中，导入部分导入 `UTools` 类，该类将提供一些功能，包括函数，或者像在这个例子中一样，包含文本的 `string`
    变量。实现 `Qwidget`（将作为图形元素显示的小部件）的 `UWid` 类也将被导入。
- en: The `UApp` class is created. This is the main class of the application and will
    contain the tools, functions, elements, and layouts for these elements, as well
    as additional features. This class will inherit the `UTools` and `UWid` classes
    in order to realize their functionalities.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建了 `UApp` 类。这是应用程序的主要类，将包含工具、函数、元素以及这些元素的布局，以及额外的功能。这个类将继承 `UTools` 和 `UWid`
    类以实现其功能。
- en: 'Instructions such as `if __name__ == "__main__"` specify whether this file
    will run from the cmd/Terminal or in another way, such as an executable script.
    The `__name__` variable will contain the `"__main__"` value, and instructions
    to the `if` statement will be realized. In other cases, if the classes, functions,
    or variables of this file are imported into another application or code, these
    instructions will not be realized, and the imported code will be used as an element
    in another construction that implies the OOP approach. These instructions are
    as follows:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如`if __name__ == "__main__"`之类的指令指定了此文件是否将从cmd/Terminal或以其他方式（例如可执行脚本）运行。`__name__`变量将包含`"__main__"`值，`if`语句的指令将被实现。在其他情况下，如果此文件中的类、函数或变量被导入到另一个应用程序或代码中，这些指令将不会实现，导入的代码将作为另一个构造中的元素使用，这暗示了面向对象的方法。这些指令如下：
- en: '`import sys`—this is how you import the `sys` module from the standard Python
    library. The `sys` module provides access to the variables and functions that
    are used, maintained, or interact with the Python interpreter.'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import sys`——这是从标准Python库中导入`sys`模块的方法。`sys`模块提供了访问用于、维护或与Python解释器交互的变量和函数。'
- en: Importing `QtWidgets`, `QtGui`, and `QtCore`—these most commonly used modules
    for creating the application, adding graphical elements, working with features
    such as images, colors, and fonts, and core functions to provide functionality,
    such as events, signals and slots, and configuration.
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入`QtWidgets`、`QtGui`和`QtCore`——这些是最常用的模块，用于创建应用程序、添加图形元素、处理图像、颜色和字体等特性，以及提供功能的核心函数，如事件、信号和槽以及配置。
- en: 'Declaration of the object of the `QApplication` class from the `QtWidgets`
    module: The inheritance scheme of this class is `QtCore.QObject`—`QtCore.QCoreApplication`—`QtGui.QGuiApplication`—`QtWidgets.QApplication`.
    This class provides the main settings and control flow for the GUI application.
    For any Qt GUI application, there is precisely one `QApplication` object. The
    `qApp` attribute provides access to the `QApplication` object from any place in
    the application. This object takes the `sys.argv` parameter, which is the list
    of command-line arguments that are passed to a Python script. As we can see in
    the cmd/Terminal output, this parameter has the name of the file that contains
    the script (`u_app.py`).'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`QtWidgets`模块声明`QApplication`类的对象：这个类的继承方案是`QtCore.QObject`—`QtCore.QCoreApplication`—`QtGui.QGuiApplication`—`QtWidgets.QApplication`。这个类为GUI应用程序提供了主要的设置和控制流程。对于任何Qt
    GUI应用程序，恰好有一个`QApplication`对象。`qApp`属性提供了从应用程序的任何位置访问`QApplication`对象的方法。此对象接受`sys.argv`参数，这是传递给Python脚本的命令行参数列表。正如我们在cmd/Terminal输出中看到的那样，此参数具有包含脚本的文件名（`u_app.py`）。
- en: 'Creating the class instance of the main application class with a widget and
    calling the `show()` method to visualize the widget: In the other case, if we
    do not implement the instance and do not call the `show()` method, the application
    will be created but not visualized in the GUI performance because we will not
    have a visual element (`Qwidget`, in this case). `sys.exit(app.exec_())` is the
    line that''s used to execute the application; all lines of code that follow will
    not be executed. `sys.exit()` is the `exit()` method of the `sys` module and will
    exit from Python. This means that the program will be exited if an error occurs
    or will be closed with the application window. `app.exec_()` starts the main loop
    of the application, and returns the status code (success = `0`) , such as application
    exit or the appearance of some error, that will be used with `sys.exit()`.'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用小部件创建主应用程序类的实例并调用`show()`方法来可视化小部件：在另一种情况下，如果我们不实现实例且不调用`show()`方法，应用程序将被创建但不会在GUI性能中可视化，因为我们将没有可视元素（在这种情况下是`Qwidget`）。`sys.exit(app.exec_())`是执行应用程序的行；所有随后的代码行将不会执行。`sys.exit()`是`sys`模块的`exit()`方法，将退出Python。这意味着如果发生错误或应用程序窗口关闭，程序将退出。`app.exec_()`启动应用程序的主循环，并返回状态码（成功为`0`），例如应用程序退出或出现某些错误，这些状态码将与`sys.exit()`一起使用。
- en: If we run the file with application definitions from the cmd/Terminal, or by
    other means, this starts the application in an infinite loop and will continue
    until the application is closed or another exit event arises. To demonstrate these
    features, let's temporarily add to the `u_app.py` file, including instructions
    to run, along with some informative lines.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从cmd/Terminal或其他方式运行该文件，并且包含应用程序定义，这将导致应用程序进入无限循环，并且将持续到应用程序关闭或出现另一个退出事件。为了演示这些功能，让我们暂时向`u_app.py`文件中添加一些内容，包括运行指令和一些信息性语句。
- en: 'In the case of the PyQt5 `u_app.py` file, we have the following:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyQt5的`u_app.py`文件的情况下，我们有以下内容：
- en: '[PRE25]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the case of the PySide2 `u_app.py` file, we have the following:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在PySide2的`u_app.py`文件的情况下，我们有以下内容：
- en: '[PRE26]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Run these files in the cmd/Terminal:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在cmd/Terminal中运行这些文件：
- en: '[PRE27]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The results in the case of the PyQt5 `u_app.py` file will be as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyQt5的`u_app.py`文件的情况下，结果如下：
- en: '![](img/40836d3e-7b18-4876-af24-35e53a28f508.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40836d3e-7b18-4876-af24-35e53a28f508.png)'
- en: 'The results in the case of the PySide2 `u_app.py` file will be as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在PySide2的`u_app.py`文件的情况下，结果如下：
- en: '![](img/46d608b1-e9d3-44bd-8338-4456944d641b.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46d608b1-e9d3-44bd-8338-4456944d641b.png)'
- en: By implementing the preceding steps, we have constructed our application!
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施前面的步骤，我们已经构建了我们的应用程序！
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This was the final introductory chapter of this book and the final chapter of
    the first section. In this chapter, we covered the creation of the GUI application
    with the PyQt5 and PySide2 Python bindings. All of the chapters that follow will
    continue this theme. It is highly recommended that you review the code of the
    various examples regarding comparisons of the different Python bindings to the
    Qt library. This chapter included a brief description of PyQt5 and PySide, which
    may help when it comes to choosing one of these frameworks. Both bindings have
    numerous advantages and some disadvantages too.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的最后一章也是第一部分的最后一章。在这一章中，我们介绍了使用PyQt5和PySide2 Python绑定创建GUI应用程序。接下来的所有章节都将继续这一主题。强烈建议您回顾有关不同Python绑定与Qt库比较的各种示例的代码。本章简要介绍了PyQt5和PySide，这可能在选择这些框架之一时有所帮助。这两个绑定都有许多优点，也有一些缺点。
- en: The next chapter will consider the `QWidget` and `QMainWindow` classes, which
    provide the main window and widgets window for displaying the GUI application.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将考虑`QWidget`和`QMainWindow`类，它们为显示GUI应用程序提供主窗口和小部件窗口。
