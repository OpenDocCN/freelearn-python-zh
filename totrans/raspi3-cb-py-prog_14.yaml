- en: Can I Recommend a Movie for You?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Euclidean distance score computation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pearson correlation score computation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to find similar users in the dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to develop a movie recommendation module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application of recommender systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Movie recommendations are used to predict movies for users based on their interests.
    The content in the database is filtered and an appropriate movie is recommended
    for the user. Having the appropriate movie recommended increases the probability
    of the user purchasing the movie. Collaborative filtering is used to build the
    movie recommendation system. It considers the behavior of the current user in
    the past. It also considers the ratings given by my other users. Collaborative
    filtering involves finding and computing the Euclidean distance, Pearson correlation,
    and finding similar users in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Computing the Euclidean distance score
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in building a recommendation engine includes finding similar
    users in the database. The Euclidean distance score is one of the measures to
    find similarities.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NumPy (Numerical Python) needs to be installed on Raspberry Pi 3 to calculate
    Euclidean distance. Readers can install `numpy` by typing the following command
    in the Raspberry Pi 3 Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a new Python file and import the following packages into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To calculate the Euclidean score between two users, we will define a new function.
    Let''s check the presence of the users in the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now extract the movies that have been rated by both users. Then we
    will compute the score:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'No movies in common indicates no similarities between the first and second
    user. (otherwise unable to compute the ratings in database):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If the ratings are common, calculate the sum of the squared differences, compute
    the square root of the result obtained, and then normalize it. The score will
    now be between zero and one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If both user ratings are same, then sum of squared differences will be a small
    value. Therefore, the score will be high. This the aim here.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will name our data file `movie_rates.json`. We will now load it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s calculate the Euclidean distance score for two random users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will print the Euclidean distance score in the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5f2a1de-a34e-4a95-865b-2f2ef667ab03.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Readers can refer to the article *Similarity and recommender systems* to learn
    how Euclidean distance works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.inf.ed.ac.uk/teaching/courses/inf2b/learnnotes/inf2b-learn-note02-2up.pdf](http://www.inf.ed.ac.uk/teaching/courses/inf2b/learnnotes/inf2b-learn-note02-2up.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Readers can refer to the article *Comparison of various metrics used in collaborative
    filtering for recommendation system* to learn more about various metrics used
    in recommendation systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://ieeexplore.ieee.org/document/7346670/](http://ieeexplore.ieee.org/document/7346670/)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Quick Guide to Build a Recommendation Engine in Python*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.analyticsvidhya.com/blog/2016/06/quick-guide-build-recommendation-engine-python/](https://www.analyticsvidhya.com/blog/2016/06/quick-guide-build-recommendation-engine-python/)'
  prefs: []
  type: TYPE_NORMAL
- en: Computing a Pearson correlation score
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Euclidean distance assumes that the sample points are distributed about the
    sample mean in a spherical manner, which is not always true. Hence, the Pearson
    correlation score is used instead of the Euclidean distance score. The computation
    of the Pearson correlation score is explained next.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a new Python file and import the following packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To calculate the Pearson correlation score between two users, we will define
    a new function. Let''s check the presence of the users in the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now extract the movies that have been rated by both users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'No movies in common indicates no similarities between the first and second
    user; hence, we return zero:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the sum of squared values of common movie ratings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the sum of squared ratings of all the common movie ratings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, calculate the sum of the products:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the various variables required to calculate the Pearson correlation
    score:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to take care of the issue where the denominator becomes zero:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Return the Pearson correlation score:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function and calculate the Pearson correlation score between
    the two users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will print the Pearson correlation in the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30f978bd-988b-413c-bca1-ce94c0910ca6.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Readers can refer to *Pearson Correlation Coefficient - Simple Tutorial* to
    learn how the Pearson correlation coefficient is calculated: [https://www.spss-tutorials.com/pearson-correlation-coefficient/](https://www.spss-tutorials.com/pearson-correlation-coefficient/)'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Readers can refer to two different variants of Pearson Correlation Coefficient
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Correlation Coefficient: Simple Definition, Formula, Easy Steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.statisticshowto.com/how-to-compute-pearsons-correlation-coefficients/](http://www.statisticshowto.com/how-to-compute-pearsons-correlation-coefficients/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A new user similarity model to improve the accuracy of collaborative filtering:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.sciencedirect.com/science/article/pii/S0950705113003560](http://www.sciencedirect.com/science/article/pii/S0950705113003560)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The new similarity measure based on user preference models for collaborative
    filtering*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://ieeexplore.ieee.org/document/7279353/](http://ieeexplore.ieee.org/document/7279353/)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Application of artificial immune systems combines collaborative filtering
    in movie recommendation system*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://ieeexplore.ieee.org/document/6846855/](http://ieeexplore.ieee.org/document/6846855/)'
  prefs: []
  type: TYPE_NORMAL
- en: Finding similar users in the dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finding similar users in the dataset is a critical step in movie recommendations,
    and this process is explained next.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a new Python file and import the following packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'First, define a function for the input user that will find the similar users.
    For this, three arguments are needed: the number of similar users, the input user,
    and the database. Check whether the user is present in the database. If they are
    present, calculate the Pearson correlation score between the users present in
    the database and the input user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now sort the obtained scores in descending order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We will pick the first `k` scores:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We define the `main` function and load the input database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We find three similar users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Recommendation for Movies and Stars Using YAGO and IMDB*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://ieeexplore.ieee.org/document/5474144/](http://ieeexplore.ieee.org/document/5474144/)'
  prefs: []
  type: TYPE_NORMAL
- en: Developing a movie recommendation module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now ready to build the movie recommendation engine. We will use all the
    functionalities that we built in the previous recipes. Let's see how it can be
    done.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a new Python file and import the following packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'For movie recommendations for a given user, we will define a function first.
    We now check whether the user already exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Compute the person score for the present user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the movies that have not been rated by the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'What if the user has seen all the movies in the dataset? Then there will be
    no recommendations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have a list of these scores. Let''s create a normalized list of movie
    ranks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the score, sort the list in descending order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We are finally ready to extract the movie recommendations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function and load the dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s generate recommendations for `Steven Ferndndes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The user `Ramesh Nayak` has watched all the movies. Therefore, if we try to
    generate recommendations for him, it should display zero recommendations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will print the movie recommendations in the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d848d89-f60e-4711-bd19-865f25758bed.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Recommender systems explained*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://medium.com/recombee-blog/recommender-systems-explained-d98e8221f468](https://medium.com/recombee-blog/recommender-systems-explained-d98e8221f468)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Recommendation System Algorithms*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://blog.statsbot.co/recommendation-system-algorithms-ba67f39ac9a3](https://blog.statsbot.co/recommendation-system-algorithms-ba67f39ac9a3)'
  prefs: []
  type: TYPE_NORMAL
- en: Applications of recommender systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recommender systems are currently used in various fields. They play a very prominent
    role and are utilized in a variety of areas including music, movies, books, news,
    search queries, social tags, research articles, and products in general. There
    are also recommender systems for restaurants, experts, collaborators, financial
    services, jokes, garments, Twitter pages, and life insurance.
  prefs: []
  type: TYPE_NORMAL
