- en: Chapter 4. Django in PTVS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django is a high-level Python Web framework based on the **Model View Controller**
    (**MVC**) pattern; it provides a series of tools and helpers to create a rapid
    development environment for the Web. There are plenty of successful websites that
    are based on Django, such as Instagram, Pinterest, Disqus, and some parts of Dropbox.
    It has been in development since 2006, making it a rock-solid choice for web projects,
    especially when using Python as the language of choice. For more information about
    Django, refer to its official project website at [https://www.djangoproject.com/](https://www.djangoproject.com/).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go deeper into Django framework integration in Visual
    Studio. We will see how to start a Django project, taking advantage of Visual
    Studio tools and setting up the development environment for it.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have a basic working website, we will learn how to create a connection
    to the database and set up the admin interface to create a new Django application
    within Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Django project template and tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at Django-related tools and templates available in PTVS,
    starting with the Django project template. Project templates in Visual Studio
    are boilerplate helpers that create a project''s outline based on the specific
    type of the project. To start a new Django project, open the **New Project** window
    under the **File** menu. Once it''s open, select **Python** from the list on the
    left-hand side. This displays the installed project types available in the system.
    Here is what the window looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Django project template and tools](img/8687OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Django Project** option in the right-hand panel to define the
    project name in the bottom of the window. We perform this action while specifying
    where the file should be saved. You can also define the solution name for the
    Visual Studio solution for the project. Once these properties are defined, clicking
    on **OK** creates the Django project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Django project template and tools](img/8687OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example default Django project structure shown in Solution Explorer
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Python package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic Django project file structure is shown in the **Solution Explorer**
    window. With the project structure in place, the next step is to install the Python
    package required. We have to instruct our solution about either the Django framework''s
    whereabouts or the location where we need to install it. To begin, add a Python
    interpreter to the project—we are going to use Python 2.7—then install the Django
    packages by right-clicking on the installed **Python** entry in the **Python Environments**
    node of the **Solution Explorer** window, and finally select the **Install Python
    Package** entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing a Python package](img/8687OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Install Python Package** window will open; here, insert the name of the
    `pip` Python package that is required to start referencing the framework in our
    environment, which is `django`. You can even choose a specific version of the
    framework by naming the version of the package in the `django==x.x.x` format.
    The `x.x.x` indicates the complete version label. If no version number is supplied,
    the latest available version of the package will be installed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing a Python package](img/8687OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **OK** to begin the Django package installation by downloading it from
    the `pip` repository. Make sure to check your system settings on the system agreement
    to give Visual Studio the privileges of a system administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Run as Administrator** checkbox should only be checked when the previous
    installation has failed. It ensures that `pip` has the necessary privileges on
    the system to install the package.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing a Python package](img/8687OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The installation process can be viewed in the output window as shown in preceding
    screenshot. If you are using **Run as Administrator**, the real-time download
    progress is not available. In this scenario, **Installing 'django'** is displayed
    in the output window for a period of time, as this indicates that `pip` is still
    downloading.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing a Python package](img/8687OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the downloading process finishes, a more detailed view is available as
    shown in preceding screenshot. It'll keep you informed about the installation
    process and whether it is successful. If everything happens without a hitch, a
    **'django' was installed successfully** message is shown at the end of the `pip`
    log in the **Output** window.
  prefs: []
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that the Django framework is successfully installed in the system and is
    referenced in the project, let''s make sure it works and all the workflows are
    running correctly. Run the application by pressing *F5* or by clicking on the
    **Run** icon in the toolbar. Since Visual Studio understands that the current
    project is a website, it will run the output in a browser instance. You can see
    the **Run** button followed by the name of the default system browser that will
    be started. It''s possible to select the browser in which we''ll run the project
    by clicking on the drop-down button that shows all possible choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/8687OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following two things happen when you run the application:'
  prefs: []
  type: TYPE_NORMAL
- en: PTVS runs the Django `manage.py` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A browser instance with the output of the website is shown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first one is shown in a command-prompt window that informs us about the
    result of the execution. It indicates whether there was any problem in the settings.
    It is the equivalent of launching the `python manage.py runserver` command from
    the command line.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/8687OS_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the same time, a new instance of the browser is created with our website''s
    home page. In a new classical Django installation, you will see the following
    **It worked!** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/8687OS_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you're able to see the preceding screen, it means that the setup of the Django
    project has been successfully completed. Now we can continue with the development
    of the website.
  prefs: []
  type: TYPE_NORMAL
- en: IntelliSense in Django templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already talked about the power of IntelliSense in Visual Studio in Python
    code. IntelliSense supports even the Django template editor, providing it with
    access to all the template tags of Django; it also provides access to the context
    defined by the calling view.
  prefs: []
  type: TYPE_NORMAL
- en: 'IntelliSense offers help with the HTML part as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IntelliSense in Django templates](img/8687OS_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, when in a Django block tag, `("{% … %}")`, it shows Django-specific
    tags and view context objects. IntelliSense also helps with filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IntelliSense in Django templates](img/8687OS_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up and managing a database for a Django project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a working Django project is set up, we will need to attach a database in
    order to have a place to store the website data and the overall configuration
    of the Django admin console. For the purpose of this book, we are going to use
    a SQLite database, which is easy to manage, to connect to the project. It's a
    file-based database and can be easily managed by Django. For more information
    on SQLite, refer to its website at [http://www.sqlite.org/](http://www.sqlite.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Attaching a database to Django is really easy. You just have to tell Django
    which database to use and how to connect to it. This has to be done in the Django
    `settings.py` file. To connect to and create a SQLite database, the database section
    of code should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up and managing a database for a Django project](img/8687OS_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since SQLite is a file-based database, the `Name` property should be the path
    of the database file. We are using a constant that contains the project''s root
    path, `Project_Root`, which has to be defined first with the following two lines
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up and managing a database for a Django project](img/8687OS_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The database is now connected to the Django project. To create the configuration
    tables in the database, use the Django sync DB command. Visual Studio provides
    a command, which starts this process from inside the IDE. To access the `sync`
    command, right-click on the project node of the **Solution Explorer** window and
    select the **Django Sync DB** entry to start the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up and managing a database for a Django project](img/8687OS_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on **Django Sync DB**, the synchronizing starts. The **Django
    Management Console** option displays a detailed log of activities as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up and managing a database for a Django project](img/8687OS_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the command is first executed, Django creates the actual database and also
    the authentication entries to be used for the Django administration console. The
    preferred username and password are asked to be entered. Once the information
    is provided, the process ends with the database created.
  prefs: []
  type: TYPE_NORMAL
- en: We can also see the result of the process in the **Solution Explorer** window
    since we have instructed Django to use SQLite and indicated the location to create
    the database file. To view this information, enable the **View all files** option
    in the solution folder by clicking on the **View all files** command in the **Solution
    Explorer** toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up and managing a database for a Django project](img/8687OS_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Find the "View all files" option in the toolbar
  prefs: []
  type: TYPE_NORMAL
- en: Once the view is active, the file `db.sqlite3` can be found in the solution
    folder. It can be included in the solution files by right-clicking on it and selecting
    the **Include in Project** command. The SQLite file is then included in the list
    of files that are managed by Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up and managing a database for a Django project](img/8687OS_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up the admin interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that a database is attached to the project, we can activate the administration
    interface of Django in it. The process is really simple at this point; you just
    need to uncomment a couple of lines of code in the project settings file and the
    main URL manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, activate the Django application `django.contrib.admin` in the `Installed_Apps`
    section of the settings file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the admin interface](img/8687OS_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Second, go to the `urls.py` file and uncomment the section that imports the
    `admin` class and that enables the admin''s discovery of the models inside the
    project. Besides this, it is also necessary that we uncomment the last line of
    the URL pattern that manages the `/admin/` path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the admin interface](img/8687OS_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the Django administration application is activated in the project. If the
    operation is successful, you will be presented with the admin login page. After
    launching the application, navigate to the `/admin/` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the admin interface](img/8687OS_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Insert the credentials created during the database setup to access the administration
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the admin interface](img/8687OS_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have a fully set up and working Django environment. Let's go ahead and
    create a new Django application in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Django application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Django application is a submodule of the project which is self-contained and
    not intertwined with other applications. In theory, you could copy it and put
    it in another project without much, or any, change.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, to start a Django app, you have to run the `manage.py startapp` command
    in the command line, which will create a new folder in your projectwhere you can
    find a view, a model, an admin, and a test Python file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio provides an easy way of creating a new Django app right in the
    IDE, automating the whole process; furthermore, the command is also in the process
    of creating a template folder. To create a new Django application, just right-click
    on the project node in the **Solution Explorer** window and select the **Django
    app** command in the **Add** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new Django application](img/8687OS_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This opens the **Add Django App** window in which you can assign the name of
    the Django app to be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new Django application](img/8687OS_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By clicking on **OK**, the Django app is created in the project, and a list
    of added files can be found in the **Solution Explorer** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new Django application](img/8687OS_04_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can create the code for the app as we usually do for Django. Take into
    account that even if Visual Studio automates the creation of the Django application,
    it doesn''t necessarily create the entry in the settings file. This has to be
    done manually as usual, adding the reference into the `Installed_Apps` section;
    to do this, just open the main `settings.py` file and add the newly created application
    in the `Installed_Apps` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new Django application](img/8687OS_04_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Deploying a Django project on Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud platforms are complex systems that provide ways to scale web applications
    across multiple server instances based on the traffic the application is receiving.
    They also offer an abstraction of the server environment in a way that developers
    do not need to deal with the hardware and software architecture of the system,
    but only with the resources and services. This is an advantage because with this
    in place, the developer does not actually need to configure and manage the server;
    however, at the same time, it also proves to be a disadvantage, since not all
    software components are able to work in such systems.
  prefs: []
  type: TYPE_NORMAL
- en: Azure is a cloud-hosting platform by Microsoft that enables developers to quickly
    build, deploy, and manage applications across a global network of Microsoft-managed
    data centers. It is tightly integrated in Visual Studio; also, the Python language
    is covered by this service.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to see how to deploy a Django project on Azure by using the tools
    that Visual Studio provides.
  prefs: []
  type: TYPE_NORMAL
- en: To use Microsoft Windows Azure, first we need to create an Azure account via
    [http://www.windowsazure.com/](http://www.windowsazure.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'After the account is created, you can access the **Portal** section that brings
    you to your Azure services portal in which you can find all the services available
    on the left-hand side menu. Now we''ll create a website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To create a new website, click on the **CREATE A WEB SITE** link; this will
    open the **NEW** tab at the bottom of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Just insert the name of the website that you want to create in the **URL**
    textbox; if the name is available, click on the **CREATE WEB SITE** button to
    create the website. This will initiate the website generation process, at the
    end of which you will see the created website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Besides the website service, we also need to create a storage entry where the
    website files can be uploaded to. To create a storage entry, click on the **Storage**
    item on the left-hand side menu and click on **NEW**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open the storage creation area at the bottom of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As for the website service, we just need the name of the storage service in
    the **URL** textbox; once you have this, click on the **CREATE STORAGE ACCOUNT**
    button to create the storage service instance.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have all the elements needed to deploy our Django project to Azure. However,
    before going ahead, we need to ensure that our project is ready for it. Azure
    needs all the files related to the project that reside in the project folder,
    since it needs to ensure that all the Python libraries are present. To ensure
    that these requirements are met, the Django project needs to be created in a virtual
    environment. This will keep all the files to be included in the project folder;
    otherwise, the libraries just reside in the site-packages folder of the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'A virtual environment is an isolated working copy of the Python environment,
    which allows you to work on a specific project without worrying about affecting
    other projects. At the same time, it keeps together all the dependencies in the
    same folder structure. Creating a virtual environment is easy in PTVS; you can
    do this by selecting the **Add Virtual Environment** command from the **Python
    Environments** contextual menu, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open the **Add Virtual Environment** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you enter the name of the virtual environment and click on the **Create**
    button, the virtual environment is created in the project. Now, all the packages
    that you include in the project will be copied into it, so all the dependencies
    will be available inside the project folder, which doesn''t rely on the system''s
    site-packages folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have ensured that our project is contained in a virtual environment,
    we can go ahead and configure Visual Studio in a way to be ready to deploy our
    Django project to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The deployment procedure starts by invoking the **Publish** command from the
    contextual menu of the Django website node in the **Solution Explorer** tree view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open the **Publish Web** wizard window, which will guide you through
    the deployment process of the Django project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To link Visual Studio to the Azure website we created earlier, click on the
    **Import** button; once you are certain about being able to log in with your Azure
    account, select the name of the website you want the Django application to be
    deployed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, follow the other wizard entries and click on **Publish**. With
    this, Visual Studio will start the process of deploying all the files to the Azure
    platform; you can follow the deployment process from the **Output** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the deployment process finishes, Visual Studio will open in the default
    browser of the deployed website on Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a Django project on Microsoft Azure](img/8687OS_04_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For further documentation about Python on Windows Azure, refer to the Windows
    Azure website at [http://www.windowsazure.com/en-us/develop/python/](http://www.windowsazure.com/en-us/develop/python/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create a Django project in Visual Studio
    and set up the environment. We also learned about deploying a Django project on
    Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to manage Python libraries inside
    Visual Studio. Also, we'll learn how to use some of the most powerful Python libraries
    for the Django framework to manage deployments, the synchronization of databases
    between environments, and a library that helps us use and manage images successfully
    and dynamically in our website.
  prefs: []
  type: TYPE_NORMAL
