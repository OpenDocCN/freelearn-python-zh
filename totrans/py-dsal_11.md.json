["```py\n    def quick_select(array_list, left, right, k): \n\n        split = partition(array_list, left, right) \n\n        if split == k: \n            return array_list[split] \n        elif split < k: \n            return quick_select(array_list, split + 1, right, k) \n        else: \n            return quick_select(array_list, left, split-1, k) \n\n```", "```py\n    def partition(unsorted_array, first_index, last_index): \n        if first_index == last_index: \n            return first_index \n\n        pivot = unsorted_array[first_index] \n        pivot_index = first_index \n        index_of_last_element = last_index \n\n        less_than_pivot_index = index_of_last_element \n        greater_than_pivot_index = first_index + 1 \n\n        while True: \n\n            while unsorted_array[greater_than_pivot_index] < pivot and  \n                  greater_than_pivot_index < last_index: \n                  greater_than_pivot_index += 1 \n            while unsorted_array[less_than_pivot_index] > pivot and \n                  less_than_pivot_index >= first_index: \n                  less_than_pivot_index -= 1 \n\n            if greater_than_pivot_index < less_than_pivot_index: \n                temp = unsorted_array[greater_than_pivot_index] \n                unsorted_array[greater_than_pivot_index] = \n                    unsorted_array[less_than_pivot_index] \n                unsorted_array[less_than_pivot_index] = temp \n            else: \n                break \n\n        unsorted_array[pivot_index] =  \n            unsorted_array[less_than_pivot_index] \n        unsorted_array[less_than_pivot_index] = pivot \n\n        return less_than_pivot_index \n\n```", "```py\n    def partition(unsorted_array, first_index, last_index): \n\n        if first_index == last_index: \n            return first_index \n        else: \n            nearest_median =     \n            median_of_medians(unsorted_array[first_index:last_index]) \n\n        index_of_nearest_median = \n            get_index_of_nearest_median(unsorted_array, first_index, \n                                        last_index, nearest_median) \n\n        swap(unsorted_array, first_index, index_of_nearest_median) \n\n        pivot = unsorted_array[first_index] \n        pivot_index = first_index \n        index_of_last_element = last_index \n\n        less_than_pivot_index = index_of_last_element \n        greater_than_pivot_index = first_index + 1 \n\n```", "```py\n    def partition(unsorted_array, first_index, last_index): \n\n        if first_index == last_index: \n            return first_index \n        else: \n            nearest_median =   \n            median_of_medians(unsorted_array[first_index:last_index]) \n        .... \n\n```", "```py\ndef median_of_medians(elems): \n\n    sublists = [elems[j:j+5] for j in range(0, len(elems), 5)] \n\n    medians = [] \n    for sublist in sublists: \n        medians.append(sorted(sublist)[len(sublist)/2]) \n\n    if len(medians) <= 5: \n        return sorted(medians)[len(medians)/2] \n    else: \n        return median_of_medians(medians) \n\n```", "```py\n    medians = [] \n        for sublist in sublists: \n            medians.append(sorted(sublist)[len(sublist)/2]) \n\n```", "```py\n    if len(medians) <= 5: \n            return sorted(medians)[len(medians)/2] \n\n```", "```py\n    def get_index_of_nearest_median(array_list, first, second, median): \n        if first == second: \n            return first \n        else: \n            return first + array_list[first:second].index(median) \n\n```", "```py\n    swap(unsorted_array, first_index, index_of_nearest_median) \n\n```", "```py\ndef swap(array_list, first, second): \n    temp = array_list[first] \n    array_list[first] = array_list[second] \n    array_list[second] = temp \n\n```", "```py\n\n def deterministic_select(array_list, left, right, k): \n\n        split = partition(array_list, left, right) \n\n        if split == k: \n            return array_list[split] \n        elif split < k : \n            return deterministic_select(array_list, split + 1, right, k) \n        else: \n            return deterministic_select(array_list, left, split-1, k) \n\n```"]