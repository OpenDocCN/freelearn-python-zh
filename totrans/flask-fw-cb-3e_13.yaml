- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GPT with Flask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GPT**, the latest buzzword of today (which stands for **Generative Pre-trained
    Transformer**), is a state-of-the-art language model developed by **OpenAI**.
    It is based on the Transformer architecture and uses unsupervised learning to
    generate natural language text. GPT was first introduced in 2018 with the release
    of GPT-1, followed by GPT-2 and GPT-3 in 2019 and 2020, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the most well-known applications of GPT is text completion, where it
    can generate coherent and grammatically correct sentences based on a given prompt.
    This has led to its use in various writing assistance tools, such as autocomplete
    and auto-correction features in text editors and messaging apps.
  prefs: []
  type: TYPE_NORMAL
- en: Another popular application of GPT is in the development of chatbots, such as
    ChatGPT. With its ability to generate natural language responses, GPT can create
    chatbots that simulate human conversation, making them useful for customer service
    and other applications.
  prefs: []
  type: TYPE_NORMAL
- en: GPT has also been used for image generation, where it generates images based
    on textual descriptions. This has opened up new possibilities for creative applications
    such as art and design.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will touch upon some new terminology that is mostly specific
    to GPT. One of the most important of these new terms would be **prompt**.
  prefs: []
  type: TYPE_NORMAL
- en: In simple terms, a prompt in GPT is a starting point or a partial sentence that
    is given to the model. It’s like giving a suggestion or a hint to the model so
    that it can generate the rest of the sentence or paragraph based on that hint.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to generate a review for a restaurant, you could start
    with a prompt such as “The food was...” and let GPT generate the rest of the sentence.
    The generated text could be something like “The food was delicious, with a perfect
    balance of spices and flavors. The portions were generous, and the presentation
    was beautiful.”
  prefs: []
  type: TYPE_NORMAL
- en: By providing a prompt, you are giving GPT some context to work with and guiding
    it toward generating text that fits that context. This can be useful in various
    natural language processing tasks, such as text completion, summarization, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: GPT is a powerful language model that has been applied to various natural language
    processing tasks, such as text completion, chatbots, and image generation. Its
    ability to generate human-like text has made it a valuable tool for developers,
    especially in the Python community who are interested in natural language processing
    and related web applications, such as those developed using Flask.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at how to implement GPT for the use cases we have
    mentioned. There can be innumerable other applications of GPT as it is open to
    imagination and creativity, but in this chapter, I will limit it to some basic
    yet powerful examples applicable to web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Automating text completion using GPT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing chat using GPT (ChatGPT)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating images using GPT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For all the recipes in this chapter, the following steps are common and mandatory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use a library called `openai`, which is the official Python library
    provided by OpenAI for working with GPT:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also need an API key from the OpenAI website, which is necessary to
    make any API call for using GPT. For this, simply create an account at [platform.openai.com](http://platform.openai.com)
    and then navigate to **Settings** to create your API key. The following is a screenshot
    demonstrating the same:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 13.1 – API keys on OpenAI for using GPT](img/B19111_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – API keys on OpenAI for using GPT
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Be mindful that GPT by OpenAI is a paid tool and, as of writing this book, there
    is a small grant of 5 USD given with each account for a period of 3 months to
    experiment and get acquainted with the APIs. Once the limit is exhausted, you
    would have to opt for a paid plan. Read more about pricing at [https://openai.com/pricing](https://openai.com/pricing).
  prefs: []
  type: TYPE_NORMAL
- en: Automating text completion using GPT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Text completion using GPT involves providing a prompt or starting sentence to
    the model, which then generates a coherent and relevant continuation. GPT’s capabilities
    in this area are impressive, as it can generate complex and contextually relevant
    text with a high degree of accuracy. This makes it an ideal tool for web applications
    that involve writing, such as content creation, auto-correction, and messaging.
    By incorporating GPT’s text completion abilities into these applications, developers
    can enhance the user experience by automating tedious or time-consuming tasks,
    improving the quality of written content, and providing more natural and responsive
    communication.
  prefs: []
  type: TYPE_NORMAL
- en: If we talk in the context of an e-commerce website, one of the most important
    features is effective search. In addition to effectiveness, if the search is made
    interactive and intuitive, then it becomes highly engaging for the users. In this
    recipe, we will implement text completion using GPT to build intuitive and user-friendly
    search queries on an e-commerce website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter
    for details on setting up GPT.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate the complete context of this recipe, I will be using a JavaScript
    library called **Awesomplete** for autocomplete functionality on a demo search
    field. Head over to [https://projects.verou.me/awesomplete/](https://projects.verou.me/awesomplete/)
    to download the static files and learn more about this library.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate this recipe, we will start with the code base that was developed
    in [*Chapter 4*](B19111_04.xhtml#_idTextAnchor184).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to perform the setup of autocomplete functionality and then
    use GPT for text completion:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding the static files from `my_app/templates/base.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ajax/libs/awesomplete/1.1.5/awesomplete.min.js">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: </script>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: I have used the link to the static files directly from CDN. You can alternatively
    choose to download these files to your static files folder and refer from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the API key provided by OpenAI to your application configuration
    in `my_app/__init__.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a new method to handle the user search term and convert it to
    GPT-generated search queries in `my_app/catalog/views.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, first, `openai` is imported. Then a new endpoint is created
    under the `catalog` blueprint with the relative path, `/product-search-gpt`. This
    endpoint serves both `GET` and `POST` requests.
  prefs: []
  type: TYPE_NORMAL
- en: On a `GET` request, it will simply render the `product-search-gpt-demo.html`
    template, which we have created to demonstrate this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: On a `POST` request, it expects a form field with the name `query`, which is
    then used to make an API request to the `openai.Completion` module with a relevant
    prompt. Look carefully at the prompt where I have specified the `Context` followed
    by the `Operation` that needs to be performed. There is no defined format in which
    you can provide the prompt; it just needs to be something that GPT can understand
    and work upon. The response returned by GPT needs a bit of formatting before it
    can be sent to the JS library for interpretation.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: Notice the multiple parameters that have been provided in the API request that
    we made to the `openai.Completion` module. You can read more about all of them
    at [https://platform.openai.com/docs/api-reference/completions/create](https://platform.openai.com/docs/api-reference/completions/create).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the template that we referenced in the last step needs to be created.
    Create a new template file at `my_app/templates/product-search-gpt-demo.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, I have created a simple HTML form with just one field.
    It is intended to demonstrate the search field on an e-commerce store. Here, you
    can enter any product of choice and the value entered will be sent to GPT to create
    search queries that will help users make more targeted searches.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `http://127.0.0.1:5000/product-search-gpt` in your browser. In the query
    field, enter the product value of choice and see how GPT provides more helpful
    search queries. This is demonstrated in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 13.2 – Text completi\uFEFFon using GPT](img/B19111_13_02.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Text completion using GPT
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Read about the usage and capabilities of text completion using GPT at [https://platform.openai.com/docs/guides/completion/introduction](https://platform.openai.com/docs/guides/completion/introduction)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out the detailed API reference specific to text completion at [https://platform.openai.com/docs/api-reference/completions/create](https://platform.openai.com/docs/api-reference/completions/create)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing chat using GPT (ChatGPT)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Arguably, chat using GPT, or more popularly, **ChatGPT**, is the most widely
    used application of GPT. Chat using GPT involves using the model to generate natural
    language responses to user input in a conversational setting. GPT’s capabilities
    in this area are impressive, as it can generate coherent and contextually relevant
    responses that simulate human conversation. This makes it an ideal tool for web
    applications that involve chatbots, virtual assistants, or other conversational
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: With GPT’s ability to generate human-like responses, chatbots developed using
    this technology can provide a more personalized and engaging experience for users.
    By understanding the context of the conversation and providing relevant responses,
    these chatbots can be used for a wide range of applications, such as customer
    service, scheduling appointments, and more.
  prefs: []
  type: TYPE_NORMAL
- en: If we talk in the context of an e-commerce website or any web application, one
    of the common features in recent times is chatbots. All businesses want to remain
    connected to their users but, at the same time, might not want to hire many customer
    support executives. In such a scenario, ChatGPT becomes very helpful. I will demonstrate
    this with some basic examples in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter
    for details on setting up GPT.
  prefs: []
  type: TYPE_NORMAL
- en: We will build this recipe on top of the previous recipe, *Text completion using
    GPT*. Refer to the same for the `openai` configuration settings.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go through the following steps to implement a basic chatbot on your Flask-powered
    web application using ChatGPT:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a handler to receive user chat messages and respond to them using
    ChatGPT. This should be done in `my_app/catalog/views.py` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, a new endpoint is created under the `catalog` blueprint
    with the relative path, `/chat-gpt`. This endpoint serves both `GET` and `POST`
    requests.
  prefs: []
  type: TYPE_NORMAL
- en: On a `GET` request, it will simply render the `chatgpt-demo.html` template,
    which we have created to demonstrate this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: On a `POST` request, it expects a form field with the name `msg`, which should
    refer to the message entered by the user while talking to the chatbot. The message
    is then used to make an API request to the `openai.ChatCompletion` module with
    a relevant set of messages.
  prefs: []
  type: TYPE_NORMAL
- en: If you look carefully at the `messages` provided in the `ChatCompletion` API,
    you will notice that the first message has a `system` role. It essentially prepares
    the context for ChatGPT in which it will address the messages from the actual
    user that will be in the `msg` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the template that we referenced in the last step needs to be created.
    Create a new template file at `my_app/templates/chatgpt-demo.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code file, I have created a very simple chatbot using a JS
    list. Here, a simple `textfield` takes the user input and sends it to the API
    endpoint that we created in the first step for GPT to respond.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:5000/chat-gpt` in your browser. In the message field,
    enter the message that you want to send to the chatbot and it will respond with
    a relevant response in the context of an e-commerce website. See the following
    screenshot for a demonstration:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 13.3 – Chat assi\uFEFFstant/bot using GPT](img/B19111_13_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Chat assistant/bot using GPT
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Read about the usage and capabilities of ChatGPT at [https://platform.openai.com/docs/guides/chat](https://platform.openai.com/docs/guides/chat)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out the detailed API reference specific to ChatGPT at [https://platform.openai.com/docs/api-reference/chat](https://platform.openai.com/docs/api-reference/chat)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating images using GPT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Image generation** using GPT involves using the model to generate images
    based on textual descriptions. GPT’s capabilities in this area have shown promising
    results, although image generation is not its primary function. By providing a
    textual description, GPT can generate images that attempt to match the given description.'
  prefs: []
  type: TYPE_NORMAL
- en: While the quality of the generated images may not be as high as specialized
    image generation models, GPT’s ability to produce visual representations opens
    up new possibilities for creative applications in web development. Possible applications
    include generating placeholder images, creating visual representations based on
    user input, or even assisting in the design process by providing visual suggestions
    based on textual descriptions. However, it’s important to note that for advanced
    image generation tasks, dedicated image generation models such as GANs or VAEs
    are typically preferred.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will generate an image using GPT for a product listing on
    an e-commerce store. With a clear enough prompt, GPT should generate a custom
    image suited to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter
    for details on setting up GPT.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate this recipe, we will start with the code base that was developed
    in [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273).
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the first recipe in this chapter, *Text completion using GPT*, for
    the `openai` configuration settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also be using the `requests` library to download the image. It can
    simply be installed via `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go through the following steps to generate an image while creating the product
    automatically and using the same on the product view page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first change is a very trivial one. In this recipe, we are creating a product
    without uploading the product image as the image will be generated using GPT.
    Hence, the requirement for an `image` field in the product creation form becomes
    obsolete. Accordingly, a new form should be created as follows in `my_app/catalog/models.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, a new form named `ProductGPTForm` is created with just
    the `price` and `category` fields. The `name` field will be provided by `NameForm`,
    which the newly created form inherits from.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, a new product creation handler and endpoint need to be created that will
    use GPT to generate images in the `my_app/catalog/views.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, on a `GET` request, the `product-create-gpt.html`
    template is rendered, which is a newly created template.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a `POST` request, once the form is validated, the relevant data
    for the `name`, `price`, and `category` fields is captured. Then, a request is
    made to GPT using the `create` method of the `openai.Image` module to generate
    an image using the given `prompt`. Notice the other parameters provided to the
    `create()` method – that is, `n` and `size`, which refer to the number of images
    to be generated and the size in pixels, respectively. The `image_url` is captured
    from the response of `create()` and then the image is downloaded using `requests.get()`.
    The downloaded image content is then saved to `UPLOAD_FOLDER`, which is configured
    during the initialization of the application. Then, the rest of the product creation
    continues, as discussed throughout [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the template that we referenced in the last step needs to be created.
    Create a new template file at `my_app/templates/product-create-gpt.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code snippet is a simple HTML form that takes the product name,
    price, and category as input before making a `POST` request for product creation.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, run your application and create some categories using this URL: `http://127.0.0.1:5000/category-create`.
    Then, head over to `http://127.0.0.1:5000/product-create-gpt` to create a new
    product using the GPT image generation logic that was described earlier in this
    recipe. The screen should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Product creation form without image field](img/B19111_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Product creation form without image field
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have filled in the details, submit the form and see the image getting
    generated automatically using GPT in accordance with the product name provided.
    Check the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – The newly created product with an image generated using GPT](img/B19111_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – The newly created product with an image generated using GPT
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example is just a demonstration of how to use GPT for image generation.
    The images generated might not be exactly accurate or use exact product logos
    because of image copyright issues. You can choose to be more creative in your
    approach while defining the prompt as per your use cases.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Read about the usage and capabilities of image generation using GPT at [https://platform.openai.com/docs/guides/images/introduction](https://platform.openai.com/docs/guides/images/introduction)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out the detailed API reference specific to GPT image generation at [https://platform.openai.com/docs/api-reference/images](https://platform.openai.com/docs/api-reference/images)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273) to get more details
    and context about product creation APIs and forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
