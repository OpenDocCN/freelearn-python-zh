- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: GPT with Flask
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flask 的 GPT
- en: '**GPT**, the latest buzzword of today (which stands for **Generative Pre-trained
    Transformer**), is a state-of-the-art language model developed by **OpenAI**.
    It is based on the Transformer architecture and uses unsupervised learning to
    generate natural language text. GPT was first introduced in 2018 with the release
    of GPT-1, followed by GPT-2 and GPT-3 in 2019 and 2020, respectively.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**GPT**（今天的最新热门词汇，代表**生成预训练转换器**），是由 **OpenAI** 开发的最先进的语言模型。它基于 Transformer
    架构，并使用无监督学习来生成自然语言文本。GPT 首次在 2018 年 GPT-1 发布时推出，随后在 2019 年和 2020 年分别推出了 GPT-2
    和 GPT-3。'
- en: One of the most well-known applications of GPT is text completion, where it
    can generate coherent and grammatically correct sentences based on a given prompt.
    This has led to its use in various writing assistance tools, such as autocomplete
    and auto-correction features in text editors and messaging apps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: GPT 最著名的应用之一是文本补全，它可以基于给定的提示生成连贯且语法正确的句子。这导致它在各种写作辅助工具中得到应用，例如文本编辑器和消息应用中的自动完成和自动纠错功能。
- en: Another popular application of GPT is in the development of chatbots, such as
    ChatGPT. With its ability to generate natural language responses, GPT can create
    chatbots that simulate human conversation, making them useful for customer service
    and other applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: GPT 的另一个流行应用是在聊天机器人（如 ChatGPT）的开发中。凭借其生成自然语言响应的能力，GPT 可以创建模拟人类对话的聊天机器人，这使得它们在客户服务和其他应用中非常有用。
- en: GPT has also been used for image generation, where it generates images based
    on textual descriptions. This has opened up new possibilities for creative applications
    such as art and design.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: GPT 还被用于图像生成，它根据文本描述生成图像。这为艺术和设计等创意应用开辟了新的可能性。
- en: Information
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: In this chapter, we will touch upon some new terminology that is mostly specific
    to GPT. One of the most important of these new terms would be **prompt**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍一些主要针对 GPT 的新术语。其中最重要的新术语之一将是 **提示**。
- en: In simple terms, a prompt in GPT is a starting point or a partial sentence that
    is given to the model. It’s like giving a suggestion or a hint to the model so
    that it can generate the rest of the sentence or paragraph based on that hint.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，GPT 中的提示是一个起点或部分句子，它被提供给模型。这就像给模型一个建议或提示，以便它可以根据这个提示生成剩余的句子或段落。
- en: For example, if you want to generate a review for a restaurant, you could start
    with a prompt such as “The food was...” and let GPT generate the rest of the sentence.
    The generated text could be something like “The food was delicious, with a perfect
    balance of spices and flavors. The portions were generous, and the presentation
    was beautiful.”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想为一家餐厅生成评论，你可以从一个提示开始，比如“食物是...”，然后让 GPT 生成剩余的句子。生成的文本可能类似于“食物美味，香料和风味的平衡恰到好处。份量充足，摆盘美观。”
- en: By providing a prompt, you are giving GPT some context to work with and guiding
    it toward generating text that fits that context. This can be useful in various
    natural language processing tasks, such as text completion, summarization, and
    more.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供提示，你为 GPT 提供了一些上下文，并引导它生成符合该上下文的文本。这在各种自然语言处理任务中非常有用，例如文本补全、摘要等。
- en: GPT is a powerful language model that has been applied to various natural language
    processing tasks, such as text completion, chatbots, and image generation. Its
    ability to generate human-like text has made it a valuable tool for developers,
    especially in the Python community who are interested in natural language processing
    and related web applications, such as those developed using Flask.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: GPT 是一种强大的语言模型，已被应用于各种自然语言处理任务，例如文本补全、聊天机器人和图像生成。它生成类似人类文本的能力使其成为开发者的宝贵工具，尤其是对自然语言处理和相关网络应用（如使用
    Flask 开发的应用）感兴趣的 Python 社区成员。
- en: In this chapter, we will look at how to implement GPT for the use cases we have
    mentioned. There can be innumerable other applications of GPT as it is open to
    imagination and creativity, but in this chapter, I will limit it to some basic
    yet powerful examples applicable to web applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何实现 GPT 在我们提到的用例中的应用。GPT 的应用几乎无限，因为它开放于想象力和创造力，但在这章中，我将将其限制于一些适用于网络应用的基本但强大的示例。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Automating text completion using GPT
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GPT 自动化文本补全
- en: Implementing chat using GPT (ChatGPT)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GPT 实现聊天（ChatGPT）
- en: Generating images using GPT
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For all the recipes in this chapter, the following steps are common and mandatory:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use a library called `openai`, which is the official Python library
    provided by OpenAI for working with GPT:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will also need an API key from the OpenAI website, which is necessary to
    make any API call for using GPT. For this, simply create an account at [platform.openai.com](http://platform.openai.com)
    and then navigate to **Settings** to create your API key. The following is a screenshot
    demonstrating the same:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 13.1 – API keys on OpenAI for using GPT](img/B19111_13_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – API keys on OpenAI for using GPT
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Be mindful that GPT by OpenAI is a paid tool and, as of writing this book, there
    is a small grant of 5 USD given with each account for a period of 3 months to
    experiment and get acquainted with the APIs. Once the limit is exhausted, you
    would have to opt for a paid plan. Read more about pricing at [https://openai.com/pricing](https://openai.com/pricing).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Automating text completion using GPT
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Text completion using GPT involves providing a prompt or starting sentence to
    the model, which then generates a coherent and relevant continuation. GPT’s capabilities
    in this area are impressive, as it can generate complex and contextually relevant
    text with a high degree of accuracy. This makes it an ideal tool for web applications
    that involve writing, such as content creation, auto-correction, and messaging.
    By incorporating GPT’s text completion abilities into these applications, developers
    can enhance the user experience by automating tedious or time-consuming tasks,
    improving the quality of written content, and providing more natural and responsive
    communication.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: If we talk in the context of an e-commerce website, one of the most important
    features is effective search. In addition to effectiveness, if the search is made
    interactive and intuitive, then it becomes highly engaging for the users. In this
    recipe, we will implement text completion using GPT to build intuitive and user-friendly
    search queries on an e-commerce website.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter
    for details on setting up GPT.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate the complete context of this recipe, I will be using a JavaScript
    library called **Awesomplete** for autocomplete functionality on a demo search
    field. Head over to [https://projects.verou.me/awesomplete/](https://projects.verou.me/awesomplete/)
    to download the static files and learn more about this library.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate this recipe, we will start with the code base that was developed
    in [*Chapter 4*](B19111_04.xhtml#_idTextAnchor184).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to perform the setup of autocomplete functionality and then
    use GPT for text completion:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding the static files from `my_app/templates/base.html`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ajax/libs/awesomplete/1.1.5/awesomplete.min.js">
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: </script>
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: I have used the link to the static files directly from CDN. You can alternatively
    choose to download these files to your static files folder and refer from there.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the API key provided by OpenAI to your application configuration
    in `my_app/__init__.py`:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, create a new method to handle the user search term and convert it to
    GPT-generated search queries in `my_app/catalog/views.py`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding code, first, `openai` is imported. Then a new endpoint is created
    under the `catalog` blueprint with the relative path, `/product-search-gpt`. This
    endpoint serves both `GET` and `POST` requests.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: On a `GET` request, it will simply render the `product-search-gpt-demo.html`
    template, which we have created to demonstrate this recipe.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: On a `POST` request, it expects a form field with the name `query`, which is
    then used to make an API request to the `openai.Completion` module with a relevant
    prompt. Look carefully at the prompt where I have specified the `Context` followed
    by the `Operation` that needs to be performed. There is no defined format in which
    you can provide the prompt; it just needs to be something that GPT can understand
    and work upon. The response returned by GPT needs a bit of formatting before it
    can be sent to the JS library for interpretation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Information
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Notice the multiple parameters that have been provided in the API request that
    we made to the `openai.Completion` module. You can read more about all of them
    at [https://platform.openai.com/docs/api-reference/completions/create](https://platform.openai.com/docs/api-reference/completions/create).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the template that we referenced in the last step needs to be created.
    Create a new template file at `my_app/templates/product-search-gpt-demo.html`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: In the preceding code, I have created a simple HTML form with just one field.
    It is intended to demonstrate the search field on an e-commerce store. Here, you
    can enter any product of choice and the value entered will be sent to GPT to create
    search queries that will help users make more targeted searches.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `http://127.0.0.1:5000/product-search-gpt` in your browser. In the query
    field, enter the product value of choice and see how GPT provides more helpful
    search queries. This is demonstrated in the following screenshot.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 13.2 – Text completi\uFEFFon using GPT](img/B19111_13_02.jpg)"
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Text completion using GPT
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Read about the usage and capabilities of text completion using GPT at [https://platform.openai.com/docs/guides/completion/introduction](https://platform.openai.com/docs/guides/completion/introduction)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out the detailed API reference specific to text completion at [https://platform.openai.com/docs/api-reference/completions/create](https://platform.openai.com/docs/api-reference/completions/create)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing chat using GPT (ChatGPT)
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Arguably, chat using GPT, or more popularly, **ChatGPT**, is the most widely
    used application of GPT. Chat using GPT involves using the model to generate natural
    language responses to user input in a conversational setting. GPT’s capabilities
    in this area are impressive, as it can generate coherent and contextually relevant
    responses that simulate human conversation. This makes it an ideal tool for web
    applications that involve chatbots, virtual assistants, or other conversational
    interfaces.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: With GPT’s ability to generate human-like responses, chatbots developed using
    this technology can provide a more personalized and engaging experience for users.
    By understanding the context of the conversation and providing relevant responses,
    these chatbots can be used for a wide range of applications, such as customer
    service, scheduling appointments, and more.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: If we talk in the context of an e-commerce website or any web application, one
    of the common features in recent times is chatbots. All businesses want to remain
    connected to their users but, at the same time, might not want to hire many customer
    support executives. In such a scenario, ChatGPT becomes very helpful. I will demonstrate
    this with some basic examples in this recipe.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter
    for details on setting up GPT.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: We will build this recipe on top of the previous recipe, *Text completion using
    GPT*. Refer to the same for the `openai` configuration settings.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go through the following steps to implement a basic chatbot on your Flask-powered
    web application using ChatGPT:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a handler to receive user chat messages and respond to them using
    ChatGPT. This should be done in `my_app/catalog/views.py` as follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: In the preceding code, a new endpoint is created under the `catalog` blueprint
    with the relative path, `/chat-gpt`. This endpoint serves both `GET` and `POST`
    requests.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: On a `GET` request, it will simply render the `chatgpt-demo.html` template,
    which we have created to demonstrate this recipe.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: On a `POST` request, it expects a form field with the name `msg`, which should
    refer to the message entered by the user while talking to the chatbot. The message
    is then used to make an API request to the `openai.ChatCompletion` module with
    a relevant set of messages.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: If you look carefully at the `messages` provided in the `ChatCompletion` API,
    you will notice that the first message has a `system` role. It essentially prepares
    the context for ChatGPT in which it will address the messages from the actual
    user that will be in the `msg` variable.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the template that we referenced in the last step needs to be created.
    Create a new template file at `my_app/templates/chatgpt-demo.html`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: In the preceding code file, I have created a very simple chatbot using a JS
    list. Here, a simple `textfield` takes the user input and sends it to the API
    endpoint that we created in the first step for GPT to respond.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:5000/chat-gpt` in your browser. In the message field,
    enter the message that you want to send to the chatbot and it will respond with
    a relevant response in the context of an e-commerce website. See the following
    screenshot for a demonstration:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 13.3 – Chat assi\uFEFFstant/bot using GPT](img/B19111_13_03.jpg)"
  id: totrans-220
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Chat assistant/bot using GPT
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Read about the usage and capabilities of ChatGPT at [https://platform.openai.com/docs/guides/chat](https://platform.openai.com/docs/guides/chat)
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out the detailed API reference specific to ChatGPT at [https://platform.openai.com/docs/api-reference/chat](https://platform.openai.com/docs/api-reference/chat)
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating images using GPT
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Image generation** using GPT involves using the model to generate images
    based on textual descriptions. GPT’s capabilities in this area have shown promising
    results, although image generation is not its primary function. By providing a
    textual description, GPT can generate images that attempt to match the given description.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: While the quality of the generated images may not be as high as specialized
    image generation models, GPT’s ability to produce visual representations opens
    up new possibilities for creative applications in web development. Possible applications
    include generating placeholder images, creating visual representations based on
    user input, or even assisting in the design process by providing visual suggestions
    based on textual descriptions. However, it’s important to note that for advanced
    image generation tasks, dedicated image generation models such as GANs or VAEs
    are typically preferred.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will generate an image using GPT for a product listing on
    an e-commerce store. With a clear enough prompt, GPT should generate a custom
    image suited to our needs.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section at the beginning of this chapter
    for details on setting up GPT.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate this recipe, we will start with the code base that was developed
    in [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the first recipe in this chapter, *Text completion using GPT*, for
    the `openai` configuration settings.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also be using the `requests` library to download the image. It can
    simply be installed via `pip`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: How to do it…
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go through the following steps to generate an image while creating the product
    automatically and using the same on the product view page:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'The first change is a very trivial one. In this recipe, we are creating a product
    without uploading the product image as the image will be generated using GPT.
    Hence, the requirement for an `image` field in the product creation form becomes
    obsolete. Accordingly, a new form should be created as follows in `my_app/catalog/models.py`:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: In the preceding code, a new form named `ProductGPTForm` is created with just
    the `price` and `category` fields. The `name` field will be provided by `NameForm`,
    which the newly created form inherits from.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, a new product creation handler and endpoint need to be created that will
    use GPT to generate images in the `my_app/catalog/views.py` file:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: In the preceding code snippet, on a `GET` request, the `product-create-gpt.html`
    template is rendered, which is a newly created template.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a `POST` request, once the form is validated, the relevant data
    for the `name`, `price`, and `category` fields is captured. Then, a request is
    made to GPT using the `create` method of the `openai.Image` module to generate
    an image using the given `prompt`. Notice the other parameters provided to the
    `create()` method – that is, `n` and `size`, which refer to the number of images
    to be generated and the size in pixels, respectively. The `image_url` is captured
    from the response of `create()` and then the image is downloaded using `requests.get()`.
    The downloaded image content is then saved to `UPLOAD_FOLDER`, which is configured
    during the initialization of the application. Then, the rest of the product creation
    continues, as discussed throughout [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the template that we referenced in the last step needs to be created.
    Create a new template file at `my_app/templates/product-create-gpt.html`:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: The preceding code snippet is a simple HTML form that takes the product name,
    price, and category as input before making a `POST` request for product creation.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, run your application and create some categories using this URL: `http://127.0.0.1:5000/category-create`.
    Then, head over to `http://127.0.0.1:5000/product-create-gpt` to create a new
    product using the GPT image generation logic that was described earlier in this
    recipe. The screen should look like the following screenshot:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Product creation form without image field](img/B19111_13_04.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Product creation form without image field
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have filled in the details, submit the form and see the image getting
    generated automatically using GPT in accordance with the product name provided.
    Check the following screenshot:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – The newly created product with an image generated using GPT](img/B19111_13_05.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – The newly created product with an image generated using GPT
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Important
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example is just a demonstration of how to use GPT for image generation.
    The images generated might not be exactly accurate or use exact product logos
    because of image copyright issues. You can choose to be more creative in your
    approach while defining the prompt as per your use cases.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Read about the usage and capabilities of image generation using GPT at [https://platform.openai.com/docs/guides/images/introduction](https://platform.openai.com/docs/guides/images/introduction)
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out the detailed API reference specific to GPT image generation at [https://platform.openai.com/docs/api-reference/images](https://platform.openai.com/docs/api-reference/images)
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看针对GPT图像生成的详细API参考，请访问[https://platform.openai.com/docs/api-reference/images](https://platform.openai.com/docs/api-reference/images)
- en: Refer to [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273) to get more details
    and context about product creation APIs and forms
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考第[*第五章*](B19111_05.xhtml#_idTextAnchor273)以获取更多关于产品创建API和表单的详细信息及背景
