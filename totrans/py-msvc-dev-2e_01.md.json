["```py\nimport json\nimport time \ndef application(environ, start_response): \n    headers = [('Content-type', 'application/json')] \n    start_response('200 OK', headers) \n    return [bytes(json.dumps({'time': time.time()}), 'utf8')] \n```", "```py\nfrom aiohttp import web  \nimport time \nasync def handle(request): \n    return web.json_response({'time': time.time()}) \nif __name__ == '__main__': \n    app = web.Application() \n    app.router.add_get('/', handle) \n    web.run_app(app) \n```", "```py\nimport asyncio \nimport aiopg \n# Start an example postgres instance with:\n# docker run -p5432:5432 --name some-postgres \\\n# -e POSTGRES_PASSWORD=mysecretpassword -d postgres\ndsn = \"dbname=postgres user=postgres password=mysecretpassword host=127.0.0.1\"\nasync def go():\n    pool = await aiopg.create_pool(dsn)\n    async with pool.acquire() as conn:\n        async with conn.cursor() as cur:\n            await cur.execute(\"SELECT 1\")\n            ret = []\n            async for row in cur:\n                ret.append(row)\n            assert ret == [(1,)]\n    await pool.clear()\nloop = asyncio.get_event_loop()\nloop.run_until_complete(go()) \n```", "```py\n>>> def myfunc(data): \n...     for value in data: \n...         yield value + 1 \n... \n>>> import dis \n>>> dis.dis(myfunc) \n  2           0 LOAD_FAST             0 (data)\n              2 GET_ITER\n        >>    4 FOR_ITER             14 (to 20)\n              6 STORE_FAST            1 (value)\n  3           8 LOAD_FAST             1 (value)\n             10 LOAD_CONST            1 (1)\n             12 BINARY_ADD\n             14 YIELD_VALUE\n             16 POP_TOP\n             18 JUMP_ABSOLUTE         4\n        >>   20 LOAD_CONST            0 (None)\n             22 RETURN_VALUE \n```"]