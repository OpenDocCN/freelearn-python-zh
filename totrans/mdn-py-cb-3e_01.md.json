["```py\n    >>> from decimal import Decimal\n    ```", "```py\n    >>> tax_rate = Decimal(’7.25’)/Decimal(100) \n\n    >>> purchase_amount = Decimal(’2.95’) \n\n    >>> tax_rate * purchase_amount \n\n    Decimal(’0.213875’)\n    ```", "```py\n    >>> penny = Decimal(’0.01’)\n    ```", "```py\n    >>> total_amount = purchase_amount + tax_rate * purchase_amount \n\n    >>> total_amount.quantize(penny) \n\n    Decimal(’3.16’)\n    ```", "```py\n>>> import decimal \n\n>>> total_amount.quantize(penny, decimal.ROUND_UP) \n\nDecimal(’3.17’)\n```", "```py\n    >>> from fractions import Fraction\n    ```", "```py\n    >>> sugar_cups = Fraction(’2.5’) \n\n    >>> scale_factor = Fraction(5/8) \n\n    >>> sugar_cups * scale_factor \n\n    Fraction(25, 16)\n    ```", "```py\n    >>> (19/155)*(155/19) \n\n    0.9999999999999999\n    ```", "```py\n    >>> answer = (19/155)*(155/19) \n\n    >>> round(answer, 3) \n\n    1.0\n    ```", "```py\n>>> 8.066e+67 \n\n8.066e+67\n```", "```py\n>>> (6737037547376141/(2**53))*(2**226) \n\n8.066e+67\n```", "```py\n>>> import math \n\n>>> math.frexp(8.066E+67) \n\n(0.7479614202861186, 226)\n```", "```py\n>>> (19/155)*(155/19) == 1.0 \n\nFalse \n >>> math.isclose((19/155)*(155/19), 1.0) \n\nTrue\n```", "```py\n>>> math.sqrt(-2) \n\nTraceback (most recent call last): \n\n... \n\nValueError: math domain error \n >>> import cmath \n\n>>> cmath.sqrt(-2) \n\n1.4142135623730951j\n```", "```py\n    >>> total_seconds = 7385 \n\n    >>> hours = total_seconds // 3600 \n\n    >>> remaining_seconds = total_seconds % 3600\n    ```", "```py\n    >>> minutes = remaining_seconds // 60 \n\n    >>> seconds = remaining_seconds % 60 \n\n    >>> hours, minutes, seconds \n\n    (2, 3, 5)\n    ```", "```py\n    >>> total_seconds = 7385 \n\n    >>> hours, remaining_seconds = divmod(total_seconds, 3600)\n    ```", "```py\n    >>> minutes, seconds = divmod(remaining_seconds, 60) \n\n    >>> hours, minutes, seconds \n\n    (2, 3, 5)\n    ```", "```py\n>>> total_seconds = 7385 \n\n>>> hours = total_seconds / 3600 \n\n>>> round(hours, 4) \n\n2.0514\n```", "```py\n    >>> from fractions import Fraction \n\n    >>> total_seconds = Fraction(7385)\n    ```", "```py\n    >>> hours = total_seconds / 3600 \n\n    >>> hours \n\n    Fraction(1477, 720)\n    ```", "```py\n    >>> round(float(hours), 4) \n\n    2.0514\n    ```", "```py\n    >>> 7358.0 // 3600.0 \n\n    2.0\n    ```", "```py\n>>> ingredient = \"Kumquat: 2 cups\"\n```", "```py\n    (ingredient words): (amount digits) (unit words)\n    ```", "```py\n    >>> import re\n    ```", "```py\n    >>> pattern_text = r’([\\w\\s]+):\\s+(\\d+)\\s+(\\w+)’\n    ```", "```py\n    >>> pattern = re.compile(pattern_text)\n    ```", "```py\n    >>> match = pattern.match(ingredient) \n\n    >>> match is None \n\n    False \n\n    >>> match.groups() \n\n    (’Kumquat’, ’2’, ’cups’)\n    ```", "```py\n    >>> match.group(1) \n\n    ’Kumquat’ \n\n    >>> match.group(2) \n\n    ’2’ \n\n    >>> match.group(3) \n\n    ’cups’\n    ```", "```py\n(?P<name>\\w+)\\s*[=:]\\s*(?P<value>.*)\n```", "```py\nsize = 12 \n\nweight: 14\n```", "```py\n>>> ingredient_pattern = re.compile( \n\n... r’(?P<ingredient>[\\w\\s]+):\\s+’ # name of the ingredient up to the \":\" \n\n... r’(?P<amount>\\d+)\\s+’ # amount, all digits up to a space \n\n... r’(?P<unit>\\w+)’ # units, alphanumeric characters \n\n... )\n```", "```py\n>>> ingredient_pattern_x = re.compile(r’’’ \n\n... (?P<ingredient>[\\w\\s]+):\\s+ # name of the ingredient up to the \":\" \n\n... (?P<amount>\\d+)\\s+ # amount, all digits up to a space \n\n... (?P<unit>\\w+) # units, alphanumeric characters \n\n... ’’’, re.X)\n```", "```py\n>>> id = \"IAD\" \n\n>>> location = \"Dulles Intl Airport\" \n\n>>> max_temp = 32 \n\n>>> min_temp = 13 \n\n>>> precipitation = 0.4\n```", "```py\nIAD : Dulles Intl Airport : 32 / 13 / 0.40\n```", "```py\n    f’{id} : {location} : {max_temp} / {min_temp} / {precipitation}’\n    ```", "```py\n    f’{id:s} : {location:s} : {max_temp:d} / {min_temp:d} / {precipitation:f}’\n    ```", "```py\n    >>> f’{id:3s} : {location:19s} : {max_temp:3d} / {min_temp:3d} / {precipitation:5.2f}’ \n\n    ’IAD : Dulles Intl Airport :  32 /  13 /  0.40’\n    ```", "```py\n    >>> value = 2**12-1 \n\n    >>> f’{value=} {2**7+1=}’ \n\n    ’value=4095 2**7+1=129’ \n    ```", "```py\n>>> data = dict( \n\n... id=id, location=location, max_temp=max_temp, \n\n... min_temp=min_temp, precipitation=precipitation \n\n... ) \n\n>>> ’{id:3s} : {location:19s} : {max_temp:3d} / {min_temp:3d} / {precipitation:5.2f}’.format_map(data) \n\n’IAD : Dulles Intl Airport :  32 /  13 /  0.40’\n```", "```py\n>>> title = \"Recipe 5: Rewriting an Immutable String\"\n```", "```py\n>>> from string import whitespace, punctuation\n```", "```py\n    >>> title_list = list(title)\n    ```", "```py\n    >>> colon_position = title_list.index(’:’)\n    ```", "```py\n    >>> del title_list[:colon_position+1]\n    ```", "```py\n    >>> for position in range(len(title_list)): \n\n    ...     if title_list[position] in whitespace+punctuation: \n\n    ...         title_list[position]= ’_’\n    ```", "```py\n    >>> title = ’’.join(title_list) \n\n    >>> title \n\n    ’_Rewriting_an_Immutable_String’\n    ```", "```py\nchcp 65001\n```", "```py\n>>> ’You Rolled \\u2680’ \n\n’You Rolled ’ \n >>> ’You drew \\U0001F000’ \n\n’You drew ’ \n >>> ’Discard \\N{MAHJONG TILE RED DRAGON}’ \n\n’Discard ’\n```", "```py\n’HELLO’\n```", "```py\n’\\u0048\\u0045\\u004c\\u004c\\u004f’\n```", "```py\n>>> r\"\\w+\" \n\n’\\\\w+’\n```", "```py\n    (cookbook3) % export PYTHONIOENCODING=UTF-8\n    ```", "```py\n    (cookbook3) % python\n    ```", "```py\n    >>> with open(’some_file.txt’, ’w’, encoding=’utf-8’) as output: \n\n    ...     print(’You drew \\U0001F000’, file=output) \n\n    >>> with open(’some_file.txt’, ’r’, encoding=’utf-8’) as input: \n\n    ...     text = input.read() \n\n    >>> text \n\n    ’You drew ’\n    ```", "```py\n>>> string_bytes = ’You drew \\U0001F000’.encode(’utf-8’) \n\n>>> string_bytes \n\nb’You drew \\xf0\\x9f\\x80\\x80’\n```", "```py\n>>> ’You drew \\U0001F000’.encode(’ascii’) \n\nTraceback (most recent call last): \n\n... \n\nUnicodeEncodeError: ’ascii’ codec can’t encode character ’\\U0001f000’ in position 9: ordinal not in range(128\n```", "```py\n>>> import urllib.request \n\n>>> warnings_uri = ( \n\n...     ’https://forecast.weather.gov/’ \n\n...     ’product.php?site=AKQ&product=SMW&issuedby=AKQ’ \n\n... ) \n >>> with urllib.request.urlopen(warnings_uri) as source: \n\n...     forecast_text = source.read()\n```", "```py\n(cookbook3) % curl ’https://forecast.weather.gov/product.php?site=AKQ&product=SMW&issuedby=AKQ’ -o AKQ.html\n```", "```py\n>>> forecast_text[:80] \n\nb’<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/x’\n```", "```py\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    ```", "```py\n    Content-Type: text/html; charset=ISO-8859-4\n    ```", "```py\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    ```", "```py\n    >>> document = forecast_text.decode(\"UTF-8\") \n\n    >>> document[:80] \n\n    ’<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/x’\n    ```", "```py\n>>> import re \n\n>>> content_pattern = re.compile(r\"// CONTENT STARTS(.*?)// CONTENT ENDS\", re.MULTILINE | re.DOTALL) \n\n>>> content_pattern.search(document) \n\n<re.Match object; span=(8530, 9113), match=’// CONTENT STARTS HERE -->\\n\\n<span style=\"font-s>\n```", "```py\n>>> ingredient = \"Kumquat: 2 cups\"\n```", "```py\n>>> import re \n\n>>> ingredient_pattern = re.compile(r’(?P<ingredient>\\w+):\\s+(?P<amount>\\d+)\\s+(?P<unit>\\w+)’) \n\n>>> match = ingredient_pattern.match(ingredient) \n\n>>> match.groups() \n\n(’Kumquat’, ’2’, ’cups’)\n```", "```py\n    >>> from fractions import Fraction \n\n    >>> my_data = (’Rice’, Fraction(1/4), ’cups’)\n    ```", "```py\n>>> one_tuple = (’item’, ) \n\n>>> len(one_tuple) \n\n1\n```", "```py\n>>> 355, \n\n(355,)\n```", "```py\n    >>> my_data[1] \n\n    Fraction(1, 4)\n    ```", "```py\n    >>> ingredient, amount, unit =  my_data \n\n    >>> ingredient \n\n    ’Rice’ \n\n    >>> unit \n\n    ’cups’\n    ```", "```py\n>>> t = (’Kumquat’, ’2’, ’cups’)\n```", "```py\n    >>> len(t) \n\n    3\n    ```", "```py\n    >>> t.count(’2’) \n\n    1\n    ```", "```py\n    >>> t.index(’cups’) \n\n    2 \n\n    >>> t[2] \n\n    ’cups’\n    ```", "```py\n    >>> t.index(’Rice’) \n\n    Traceback (most recent call last): \n\n    ... \n\n    ValueError: tuple.index(x): x not in tuple\n    ```", "```py\n    >>> ’Rice’ in t \n\n    False\n    ```", "```py\nr’(?P<ingredient>\\w+):\\s+(?P<amount>\\d+)\\s+(?P<unit>\\w+)’)\n```", "```py\n>>> item = match.groups() \n\n>>> item \n\n(’Kumquat’, ’2’, ’cups’)\n```", "```py\n>>> from fractions import Fraction \n\n>>> Fraction(item[1]) \n\nFraction(2, 1)\n```", "```py\n    >>> from typing import NamedTuple\n    ```", "```py\n    >>> class Ingredient(NamedTuple): \n\n    ...     ingredient: str \n\n    ...     amount: str \n\n    ...     unit: str\n    ```", "```py\n    >>> item_2 = Ingredient(’Kumquat’, ’2’, ’cups’)\n    ```", "```py\n    >>> Fraction(item_2.amount) \n\n    Fraction(2, 1) \n\n    >>> f\"Use {item_2.amount} {item_2.unit} fresh {item_2.ingredient}\" \n\n    ’Use 2 cups fresh Kumquat’\n    ```", "```py\n>>> from typing import NamedTuple \n\n>>> from fractions import Fraction \n\n>>> class IngredientF(NamedTuple): \n\n...     ingredient: str \n\n...     amount: Fraction \n\n...     unit: str\n```", "```py\n>>> item_3 = IngredientF(’Kumquat’, Fraction(’2’), ’cups’)\n```", "```py\n>>> f’{item_3.ingredient} doubled: {item_3.amount * 2}’ \n\n’Kumquat doubled: 4’\n```"]