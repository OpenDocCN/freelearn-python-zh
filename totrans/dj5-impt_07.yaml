- en: <st c="0">7</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Understanding the Database</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="28">The previous chapters showed us how to use Django models to persist
    and retrieve data from a database.</st> <st c="132">In this chapter, we will explore
    how databases work in Django.</st> <st c="195">We will utilize a database viewer
    to examine how Django manages various information and stores it.</st> <st c="294">Additionally,
    we will learn how to customize the Django admin panel and switch between</st>
    <st c="381">database engines.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="398">In this chapter, we will cover the</st> <st c="434">following topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="451">Understanding the</st> <st c="470">database viewer</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="485">Customizing the Django</st> <st c="509">admin panel</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="520">Switching to a</st> <st c="536">MySQL database</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="550">By the end of this chapter, you will understand how the database
    works, how to visualize database information, and how to switch to a different</st>
    <st c="695">database engine.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="711">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="734">In this chapter, we will use Python 3.10+.</st> <st c="778">Additionally,
    we will use the</st> **<st c="808">VS Code</st>** <st c="815">editor in this book,
    which you can download</st> <st c="860">from</st> [<st c="865">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="895">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="896">The code for this chapter is located</st> <st c="934">at</st> [<st
    c="937">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter07/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter07/moviesstore)<st
    c="1045">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1046">The CiA video for this chapter can be found</st> <st c="1091">at</st>
    [<st c="1094">https://packt.link/wD2bK</st>](https://packt.link/wD2bK)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1118">Understanding the database viewer</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1152">Let’s take</st> <st c="1164">some time to understand how the database
    works.</st> <st c="1212">The objects are</st> <st c="1228">stored in the</st>
    `<st c="1242">db.sqlite3</st>` <st c="1252">file.</st> <st c="1259">If you click
    on it, it is not very readable.</st> <st c="1304">However, you can view such SQLite
    files with a SQLite Viewer; just google</st> `<st c="1378">SQLite Viewer</st>`
    <st c="1391">for a list of them.</st> <st c="1412">One</st> <st c="1415">example</st>
    <st c="1424">is</st> [<st c="1427">https://inloop.github.io/sqlite-viewer/</st>](https://inloop.github.io/sqlite-viewer/)<st
    c="1466">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1467">Drag and drop your</st> `<st c="1487">db.sqlite3</st>` <st c="1497">file
    into the previous link (over the SQLite Viewer), and you will see the different
    tables in the database (as shown in</st> *<st c="1619">Figure 7</st>**<st c="1627">.1</st>*<st
    c="1629">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Opening db.sqlite3 in SQLite Viewer](img/B22457_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="2012">Figure 7.1 – Opening db.sqlite3 in SQLite Viewer</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2060">You can</st> <st c="2068">see the table of the model we have created
    – that is,</st> `<st c="2123">movie</st>`<st c="2128">. Note that the actual name
    of the table is determined by combining the name of the app with the name of the
    model.</st> <st c="2244">For example, if your app is named</st> `<st c="2278">movies</st>`
    <st c="2284">and your model is named</st> `<st c="2309">Movie</st>`<st c="2314">,
    the corresponding table name would be</st> `<st c="2354">movies_movie</st>`<st
    c="2366">. This naming convention helps Django differentiate between tables belonging
    to different apps and models within</st> <st c="2479">those apps.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2490">There are also other tables, such as</st> `<st c="2528">django_session</st>`<st
    c="2542">, because of the different apps that are installed for functions such
    as sessions</st> <st c="2624">and authentications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2644">Select a table (for example,</st> `<st c="2674">movies_movie</st>`<st
    c="2686">), and you should be able to see its rows (</st>*<st c="2730">Figure
    7</st>**<st c="2739">.2</st>*<st c="2741">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Selecting a table in SQLite Viewer](img/B22457_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="3238">Figure 7.2 – Selecting a table in SQLite Viewer</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3285">Hopefully,</st> <st c="3297">this lets you appreciate what goes
    on behind the scenes in a Django database.</st> <st c="3375">Currently, we are
    using an SQLite database.</st> <st c="3419">However, what if we want to switch
    to some other database engines?</st> <st c="3486">Django officially supports the
    following databases – PostgreSQL, MariaDB, MySQL, Oracle,</st> <st c="3575">and
    SQLite.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3586">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3591">In addition to the officially supported databases, there are backends
    provided by third parties that allow you to use other databases with Django, such
    as CockroachDB, Firebird, Google Cloud Spanner, Microsoft SQL Server, Snowflake,
    TiDB, and YugabyteDB.</st> <st c="3847">You can find more information</st> <st
    c="3877">here:</st> [<st c="3883">https://docs.djangoproject.com/en/5.0/ref/databases/#third-party-notes</st>](https://docs.djangoproject.com/en/5.0/ref/databases/#third-party-notes)<st
    c="3953">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3954">To switch to another database engine, go to</st> `<st c="3999">/moviereviews/settings.py</st>`
    <st c="4024">and make changes to the lines</st> <st c="4055">in</st> **<st c="4058">bold</st>**<st
    c="4062">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="4171">You can still create</st> <st c="4192">your models as normal, and
    the changes are handled by Django behind</st> <st c="4261">the scenes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4272">In the book, we use SQLite</st> <st c="4299">because it is the
    simplest.</st> <st c="4328">Django uses SQLite by default, and it’s a great choice
    for small projects.</st> <st c="4403">It runs off a single file and doesn’t require
    complex installation.</st> <st c="4471">In contrast, the other options involve
    some complexity to configure them properly.</st> <st c="4554">We will see at the
    end of this chapter how to configure a more</st> <st c="4617">robust database.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4633">Customizing the Django admin panel</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="4668">The Django admin panel is a</st> <st c="4697">powerful built-in
    feature of Django that automatically generates a user-friendly interface to manage
    our application’s data models.</st> <st c="4829">This is a great feature of Django
    that many other frameworks</st> <st c="4890">don’t offer.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="4902">Figure 7</st>**<st c="4911">.3</st>* <st c="4913">shows the current
    movies</st> <st c="4939">admin page.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – The movies admin page](img/B22457_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="5321">Figure 7.3 – The movies admin page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5355">The admin panel may seem very rigid, but fortunately, Django allows
    us to customize it according to our needs.</st> <st c="5467">Let’s apply two customizations
    to the movies admin page – first, ordering movies by name, and</st> <st c="5561">second,
    allowing searches</st> <st c="5587">by name.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5595">Ordering movies by name</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="5619">In</st> `<st c="5623">/movies/admin.py</st>`<st c="5639">, add
    the</st> <st c="5648">following</st> <st c="5659">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="5822">Let’s explain the</st> <st c="5840">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5854">We created a</st> `<st c="5868">MovieAdmin</st>` <st c="5878">class
    that inherits from</st> `<st c="5904">admin.ModelAdmin</st>`<st c="5920">. This
    defines a custom admin class that allows you to customize the behavior of the
    admin interface for the</st> `<st c="6029">Movie</st>` <st c="6034">model.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6041">We set an</st> `<st c="6052">ordering</st>` <st c="6060">attribute.</st>
    <st c="6072">This attribute sets the default ordering of the movie objects in
    the admin</st> <st c="6146">interface.</st> <st c="6158">In our case, it specifies
    that the movies should be ordered by their</st> `<st c="6227">name</st>` <st c="6231">field.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6238">Finally, we registered the</st> `<st c="6266">Movie</st>` <st c="6271">model
    with the custom admin class,</st> `<st c="6307">MovieAdmin</st>`<st c="6317">.
    This tells Django to use the</st> `<st c="6348">MovieAdmin</st>` <st c="6358">class
    to customize the admin interface for the</st> `<st c="6406">Movie</st>` <st c="6411">model.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6418">Now, save your file, go back to</st> `<st c="6451">/admin</st>`<st
    c="6457">, and navigate to the movies page.</st> <st c="6492">You will see the
    movie objects ordered by name (as shown in</st> *<st c="6552">Figure 7</st>**<st
    c="6560">.4</st>*<st c="6562">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – The movies admin page](img/B22457_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="6839">Figure 7.4 – The movies admin page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6873">Allowing searches by name</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6899">In</st> `<st c="6903">/movies/admin.py</st>`<st c="6919">, add
    the</st> <st c="6928">following</st> <st c="6939">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="7126">We added a</st> `<st c="7138">search_fields</st>` <st c="7151">attribute
    that specifies that only the</st> `<st c="7191">name</st>` <st c="7195">field
    of the</st> `<st c="7209">Movie</st>` <st c="7214">model is searchable in the
    admin interface.</st> <st c="7259">This means that users can enter keywords into
    a search box provided by the admin interface, and Django will filter the list
    of movie objects based on</st> <st c="7409">whether the entered keywords match
    any part of the</st> <st c="7460">movie names.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7472">Now, save your file, go back to</st> `<st c="7505">/admin</st>`<st
    c="7511">, and navigate to the movies page.</st> <st c="7546">You will see the
    new search box available (as shown in</st> *<st c="7601">Figure 7</st>**<st c="7609">.5</st>*<st
    c="7611">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The movies admin page with a search box](img/B22457_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7972">Figure 7.5 – The movies admin page with a search box</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8024">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8029">As you saw, it is very easy to apply some customizations with very
    few lines of code.</st> <st c="8116">If you want to explore some additional customization,
    check out this</st> <st c="8185">link:</st> [<st c="8191">https://docs.djangoproject.com/en/5.0/ref/contrib/admin/</st>](https://docs.djangoproject.com/en/5.0/ref/contrib/admin/)<st
    c="8247">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8248">Let’s finalize this chapter by</st> <st c="8279">understanding
    how to switch to a</st> <st c="8313">different database.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8332">Switching to a MySQL database</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="8362">As we earlier mentioned, we use SQLite throughout this book because
    it is the simplest.</st> <st c="8451">However, we will explain how to switch to
    a</st> <st c="8495">more robust database engine</st> <st c="8523">called</st>
    <st c="8529">MySQL.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8536">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8541">The book code is based on SQLite, so the changes in this section
    are optional and won’t be reflected either in the GitHub book repository or in</st>
    <st c="8686">upcoming chapters.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="8704">MySQL</st>** <st c="8710">is</st> <st c="8714">a popular open
    source SQL database management system developed by Oracle.</st> <st c="8788">There
    are several different ways to install MySQL.</st> <st c="8839">For this section,
    we will install MySQL and a MySQL</st> <st c="8890">administration tool called</st>
    *<st c="8918">phpMyAdmin</st>*<st c="8928">. Both tools can be</st> <st c="8947">found
    in a development environment called XAMPP, so let’s</st> <st c="9006">install
    that.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="9019">XAMPP</st>** <st c="9025">is</st> <st c="9029">a popular PHP
    development environment.</st> <st c="9068">It is a free Apache distribution containing
    MySQL, PHP, and Perl.</st> <st c="9134">As previously mentioned, XAMPP also includes</st>
    *<st c="9179">phpMyAdmin</st>*<st c="9189">. If you don’t have</st> <st c="9209">XAMPP
    installed, go to</st> [<st c="9232">https://www.apachefriends.org/download.html</st>](https://www.apachefriends.org/download.html)<st
    c="9275">, download it, and</st> <st c="9294">install it.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9305">To switch to a MySQL database, we will need to follow</st> <st
    c="9360">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9372">Configuring the</st> <st c="9389">MySQL database.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="9404">Configuring our project to use the</st> <st c="9440">MySQL database.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="9455">Running</st> <st c="9464">the migrations.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="9479">Configuring the MySQL database</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9510">Execute XAMPP, and then start</st> <st c="9541">the Apache module
    (</st>**<st c="9560">1</st>**<st c="9562">), start the MySQL module (</st>**<st
    c="9589">2</st>**<st c="9591">), and click the MySQL</st> **<st c="9614">Admin</st>**
    <st c="9619">button (in the MySQL module) (</st>**<st c="9650">3</st>**<st c="9652">),
    which will take us to the</st> *<st c="9681">phpMyAdmin</st>* <st c="9691">application
    (as shown in</st> *<st c="9717">Figure 7</st>**<st c="9725">.6</st>*<st c="9727">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Starting the MySQL module in XAMPP](img/B22457_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9882">Figure 7.6 – Starting the MySQL module in XAMPP</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9929">In the</st> *<st c="9937">phpMyAdmin</st>* <st c="9947">application,
    enter your username and password.</st> <st c="9995">The default values are</st>
    `<st c="10018">root</st>` <st c="10022">(for the username) and an empty password
    (</st>*<st c="10065">Figure 7</st>**<st c="10074">.7</st>*<st c="10076">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – XAMPP phpMyAdmin application](img/B22457_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10258">Figure 7.7 – XAMPP phpMyAdmin application</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10299">Once you have logged</st> <st c="10320">in to</st> *<st c="10327">phpMyAdmin</st>*<st
    c="10337">, click the Databases tab (</st>`<st c="10393">moviesstore</st>` <st
    c="10404">(</st>**<st c="10406">2</st>**<st c="10407">), and click the</st> **<st
    c="10424">Create</st>** <st c="10430">button (</st>**<st c="10439">3</st>**<st
    c="10441">) (as shown in</st> *<st c="10456">Figure 7</st>**<st c="10464">.8</st>*<st
    c="10466">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Database creation](img/B22457_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10626">Figure 7.8 – Database creation</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10656">Configuring our project to use the MySQL database</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="10706">First, we</st> <st c="10717">need to install a package called
    PyMySQL.</st> <st c="10759">PyMySQL is an</st> <st c="10772">interface to connect
    to a MySQL database from Python.</st> <st c="10827">Go to the</st> <st c="10836">terminal
    and run the</st> <st c="10858">following commands:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10877">For macOS,</st> <st c="10889">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="10919">For Windows,</st> <st c="10933">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="10962">Then, we need to add the following bold lines to the</st> `<st
    c="11016">moviesstore/__init__.py</st>` <st c="11039">file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: DATABASES = {
  prefs: []
  type: TYPE_NORMAL
- en: '''default'': { <st c="11415">''ENGINE'': ''django.db.backends.mysql'',</st>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="11452">''NAME'': ''moviesstore'',</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="11475">''USER'': ''root'',</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="11491">''PASSWORD'': '''',</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="11507">''HOST'': ''localhost'',</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="11528">''PORT'': ''3306'',</st> }'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11693">python3 manage.py migrate</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="11742">python manage.py migrate</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
