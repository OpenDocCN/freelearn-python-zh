["```py\n    from abc import abstractmethod, ABC\n    class PrintCard(ABC):    \n        def add_name(self, name):\n            self.name = name        \n        def add_manager(self, branch):\n            self.branch = branch.FORMATTING        \n        @abstractmethod\n        def printcard(self):\n            pass\n    ```", "```py\n    class CardABC(PrintCard):\n        def __init__(self, logo, name, branch):\n            self.logo = logo\n            super().add_name(name)\n            super().add_manager(branch)\n\n        def printcard(self, *args):\n            print(self.logo + self.name)\n            for arg in args:\n                print(self.branch + str(arg))\n    ```", "```py\n    class CardXYZ(PrintCard):\n        def __init__(self, style, logo, name, branch):\n            self.style = style\n            self.logo = logo\n            super().add_name(name)\n            super().add_manager(branch)\n\n        def printcard(self, *args):\n            print(self.logo + self.style + self.name)\n            for arg in args:\n                print(self.branch + str(arg))\n    ```", "```py\n    class Manager:\n        def formatting(self):\n            pass\n    ```", "```py\n    class Manager_manhattan(Manager):\n        def __init__(self):\n            self.formatting()\n\n        def formatting(self):\n            self.FORMATTING = '\\33[7m'\n    ```", "```py\n    class Manager_albany(Manager):\n        def __init__(self):\n            self.formatting()\n\n        def formatting(self):\n            self.FORMATTING = '\\033[94m'\n    ```", "```py\n    manager_manhattan = CardABC(logo = '\\33[43m', name = 'ABC Megamart', branch = Manager_manhattan())\n    ```", "```py\n    manager_manhattan.printcard('John M',\n                  'john.m@abcmegamart.com',\n      '40097 5th Main Street',\n      'Manhattan',\n      'New York City',\n      'New York',\n      11007)\n    ```", "```py\nABC Megamart\nJohn M\njohn.m@abcmegamart.com\n40097 5th Main Street\nManhattan\nNew York City\nNew York\n11007\n```", "```py\n    manager_albany = CardXYZ(style = '\\33[43m',logo = '\\33[5m', name = 'XYZ Megamart', branch = Manager_albany())\n    ```", "```py\n    manager_albany.printcard('Ron D','ron.d@abcmegamart.com','123 Main Street','Albany','New York', 12084)\n    ```", "```py\nXYZ Megamart\nRon D\nron.d@abcmegamart.com\n123 Main Street\nAlbany\nNew York\n12084\n```", "```py\n    class Cart:\n        def __init__(self, items):\n            self.items = items\n        def return_cart(self):\n            cart_items = []\n            for i in self.items:\n                cart_items.append(i)\n            print(\"Running return_cart...\")\n            return cart_items\n    ```", "```py\n    class Counter:\n        def __init__(self, name):\n            self.name = name\n        def goto_counter(self):\n            countername = self.name\n            print(\"Running goto_counter...\")\n            return countername\n    ```", "```py\n    class BarCode:\n        def __init__(self, scan):\n            self.scan = scan\n        def scan_bar_code(self):\n            codes = []\n            for i in self.scan:\n                codes.append(i)\n            print(\"Running scan_bar_code...\")\n            return codes\n    ```", "```py\n    class Billing:\n        def __init__(self, codes, units ):\n            self.codes = codes\n            self.units = units\n        def add_billing(self):\n            codes = self.codes.scan_bar_code()\n            pricetag = []\n            for i in self.units:\n                pricetag.append(i)\n            bill = dict(zip(codes, pricetag))\n            print(\"Running add_billing...\")\n            return bill\n    ```", "```py\n    class Tax:\n        def __init__(self, tax):\n            self.tax = tax\n        def add_tax(self):\n            taxed = []\n            for i in self.tax:\n                taxed.append(i)\n            print(\"Running add_tax...\")\n            return taxed\n    ```", "```py\n    class FinalBill:\n        def __init__(self, billing, cart, tax):\n            self.billing = billing\n            self.cart = cart\n            self.tax = tax    \n        def calc_bill(self):\n            bill = self.billing.add_billing()\n            items = []\n            cart_items = self.cart.return_cart()\n            calc_bill = []\n            taxes = self.tax.add_tax()\n            for item,tax in zip(bill.items(),taxes):\n                items.append(item[1])\n                calc_bill.append(item[1] + item[1]*tax)\n            finalbill = dict(zip(cart_items, calc_bill))\n            print(\"Running calc_bill...\")\n            return finalbill\n    ```", "```py\n    class Invoice:\n        def __init__(self, finalbill, counter):\n            self.finalbill = finalbill\n            self.counter = counter\n        def print_invoice(self):\n            finalbill = self.finalbill.calc_bill()\n            final_total = sum(finalbill.values())\n            print(\"Running print_invoice...\")\n            print('**************ABC \n                   Megamart*****************')\n            print('***********------------------\n                   **************')\n            print('Counter Name: ', \n                   self.counter.goto_counter())\n            for item,price in finalbill.items():\n                print(item,\": \", price)\n            print('Total:',final_total)\n            print('***********------------------\n                   **************')\n            print('***************PAID********************\n                   ****')\n    ```", "```py\n    class Queue:\n        def __init__(self, items, name, scan, units, tax):\n            self.cart = Cart(items)\n            self.counter = Counter(name)\n            self.barcode = BarCode(scan)\n            self.billing = Billing(self.barcode, units)\n            self.tax = Tax(tax)\n            self.finalbill = FinalBill(self.billing, \n                             self.cart, self.tax)\n            self.invoice = Invoice(self.finalbill, \n                                   self.counter)\n        def pipeline(self):\n            self.cart.return_cart()\n            self.counter.goto_counter()\n            self.barcode.scan_bar_code()\n            self.tax.add_tax()\n        def pipeline_implicit(self):\n            self.invoice.print_invoice()\n    ```", "```py\n    def run_facade():\n        queue = Queue(items = ['paperclips','blue \n                        pens','stapler','pencils'],\n                 name = ['Regular Counter'],\n                 scan = [113323,3434332,2131243,2332783],\n                 units = [10,15,12,14],\n                 tax = [0.04,0.03,0.035,0.025],\n                 )\n        queue.pipeline()\n    ```", "```py\n    run_facade()\n    ```", "```py\nRunning return_cart...\nRunning goto_counter...\nRunning scan_bar_code...\nRunning add_tax...\n```", "```py\n    def run_facade_implicit():\n        queue = Queue(items = ['paperclips','blue \n                         pens','stapler','pencils'],\n                 name = ['Regular Counter'],\n                 scan = [113323,3434332,2131243,2332783],\n                 units = [10,15,12,14],\n                 tax = [0.04,0.03,0.035,0.025],\n                 )\n        queue.pipeline_implicit()\n    ```", "```py\n    run_facade_implicit()\n    ```", "```py\nRunning scan_bar_code...\nRunning add_billing...\nRunning return_cart...\nRunning add_tax...\nRunning calc_bill...\nRunning print_invoice...\n**************ABC Megamart*****************\n***********------------------**************\nRunning goto_counter...\nCounter Name:  ['Regular Counter']\npaperclips :  10.4\nblue pens :  15.45\nstapler :  12.42\npencils :  14.35\nTotal: 52.620000000000005\n***********------------------**************\n***************PAID************************\n```", "```py\n    class NYC:\n        def __init__(self):\n            self.manager = {}\n            self.branch = {}\n            self.product = {}\n            self.sales = {}        \n        def set_parameters(self, manager, branch, product,\n                           sales):\n            self.manager = manager\n            self.branch = branch\n            self.product = product\n            self.sales = sales        \n        def get_parameters(self):\n            return self.manager, self.branch, \n                   self.product, self.sales    \n        def calc_tax_nyc(self):\n            branch = self.branch\n            manager = self.manager\n            product = self.product\n            sales = self.sales\n            pricebeforetax = sales['purchase_price'] + \n                             sales['purchase_price'] * \n                             sales['profit_margin']\n            finalselling_price = pricebeforetax + \n                (pricebeforetax * (sales['tax_rate'] + \n                 sales['local_rate']))  \n            sales['selling_price'] = finalselling_price\n            return branch, manager, product, sales   \n    ```", "```py\n    class ReturnBook(NYC):\n        def __init__(self, nyc):\n            self.nyc = nyc\n        def add_book_details(self, state, manager, branch, \n                             product, sales):\n            if state in ['NY', 'NYC', 'New York']:\n                self.nyc.set_parameters(manager, branch, \n                                        product, sales)\n            else:\n                print(\"There is no branch in the state:\", \n                      state)\n        def show_book_details(self, state):\n            if state in ['NY', 'NYC', 'New York']:\n                return self.nyc.get_parameters()\n            else:\n                print(state, \"has no data\")\n        def calc_tax(self, state):\n            if state in ['NY', 'NYC', 'New York']:\n                return self.nyc.calc_tax_nyc()\n            else:\n                print(\"The state\", state, \"is not \n                       supported\") \n    ```", "```py\n    branch_manhattan = ReturnBook(NYC())\n    ```", "```py\n    branch_manhattan.add_book_details(state = 'NY', manager = {'regional_manager': 'John M',\n      'branch_manager': 'Tom H',\n      'sub_branch_id': '2021-01'},\n       branch = {'branchID': 2021,\n      'branch_street': '40097 5th Main Street',\n      'branch_borough': 'Manhattan',\n      'branch_city': 'New York City',\n      'branch_state': 'New York',\n      'branch_zip': 11007},\n       product = {'productId': 100002,\n      'product_name': 'WashingMachine',\n      'product_brand': 'Whirlpool'},\n       sales = {'purchase_price': 450,\n      'profit_margin': 0.19,\n      'tax_rate': 0.4,\n      'local_rate': 0.055})\n    ```", "```py\n    branch_manhattan.show_book_details('NY')\n    ```", "```py\n({'regional_manager': 'John M',\n  'branch_manager': 'Tom H',\n  'sub_branch_id': '2021-01'},\n {'branchID': 2021,\n  'branch_street': '40097 5th Main Street',\n  'branch_borough': 'Manhattan',\n  'branch_city': 'New York City',\n  'branch_state': 'New York',\n  'branch_zip': 11007},\n {'productId': 100002,\n  'product_name': 'WashingMachine',\n  'product_brand': 'Whirlpool'},\n {'purchase_price': 450,\n  'profit_margin': 0.19,\n  'tax_rate': 0.4,\n  'local_rate': 0.055})\n```", "```py\n    branch_manhattan.calc_tax('NY')\n    ```", "```py\n    branch_manhattan.add_book_details(state = 'LA', manager = {'regional_manager': 'John M',\n      'branch_manager': 'Tom H',\n      'sub_branch_id': '2021-01'},\n       branch = {'branchID': 2021,\n      'branch_street': '40097 5th Main Street',\n      'branch_borough': 'Manhattan',\n      'branch_city': 'New York City',\n      'branch_state': 'New York',\n      'branch_zip': 11007},\n       product = {'productId': 100002,\n      'product_name': 'WashingMachine',\n      'product_brand': 'Whirlpool'},\n       sales = {'purchase_price': 450,\n      'profit_margin': 0.19,\n      'tax_rate': 0.4,\n      'local_rate': 0.055})\n    ```", "```py\nThere is no branch in the state: LA\n```", "```py\n    branch_manhattan.show_book_details('LA')\n    ```", "```py\nLA has no data\n```", "```py\n    branch_manhattan.calc_tax('LA')\n    ```", "```py\nThe state LA is not supported\n```", "```py\n    from abc import abstractmethod\n    class Branch:\n        @abstractmethod\n        def buy_product(self):\n            pass\n        @abstractmethod\n        def maintenance_cost(self):\n            pass\n    ```", "```py\n    class Brooklyn(Branch):\n        def __init__(self,product,unit_price,quantity,\n                     product_type):\n            self.product = product\n            self.unit_price = unit_price\n            self.quantity = quantity\n            self.product_type = product_type        \n        def buy_product(self):\n            if (self.product_type == 'FMCG'):\n                self.statetax_rate = 0.035\n                self.promotiontype = 'Discount'\n                self.discount = 0.10\n                self.initialprice = \n                    self.unit_price*self.quantity \n                self.salesprice = self.initialprice + \n                    self.initialprice*self.statetax_rate\n                self.finalprice = self.salesprice * \n                    (1-self.discount)\n                return self.salesprice, \n                    self.product,self.promotiontype\n            else:\n                return \"We don't stock this product\"\n         def maintenance_cost(self):\n            self.coldstorageCost = 100\n            if (self.product_type == 'FMCG'):\n                self.maintenance_cost = self.quantity * \n                    0.25 + self.coldstorageCost    \n                return self.maintenance_cost\n            else:\n                return \"We don't stock this product\"\n    ```", "```py\n    class Manhattan(Branch):\n        def __init__(self,product,unit_price,quantity,\n                     product_type):\n            self.product = product\n            self.unit_price = unit_price\n            self.quantity = quantity\n            self.product_type = product_type\n    ```", "```py\n        def buy_product(self):\n            if (self.product_type == 'Electronics'):\n                self.statetax_rate = 0.05        \n                self.promotiontype = 'Buy 1 Get 1'\n                self.discount = 0.50\n                self.initialprice = \n                    self.unit_price*self.quantity \n                self.salesprice = self.initialprice + \n                    self.initialprice*self.statetax_rate\n                self.finalprice = self.salesprice * \n                    (1-self.discount)\n                return self.finalprice, \n                    self.product,self.promotiontype\n            else:\n                return \"We don't stock this product\"\n    ```", "```py\n        def maintenance_cost(self):\n            if (self.product_type == 'Electronics'):\n              self.maintenance_cost = self.quantity * 0.05\n                return self.maintenance_cost\n            else:\n                return \"We don't stock this product\"\n    ```", "```py\n    Class BranchFactory:\n        def create_branch(self,branch,product,unit_price,\n                          quantity,product_type):\n            if str.upper(branch) == 'BROOKLYN':\n                return Brooklyn(product,unit_price,\n                                quantity,product_type)\n\n            elif str.upper(branch) == 'MANHATTAN':\n                return Manhattan(product,unit_price,\n                                 quantity,product_type)\n    ```", "```py\n    def test_factory(branch,product,unit_price,quantity,product_type):\n        branchfactory = BranchFactory()\n        branchobject = branchfactory.create_branch(branch,\n                product,unit_price,quantity,product_type) \n        print(branchobject)\n        print(branchobject.buy_product())\n        print(branchobject.maintenance_cost())\n    ```", "```py\n    test_factory('Brooklyn','Milk', 10,5,'FMCG')\n    ```", "```py\n<__main__.Brooklyn object at 0x000002101D4569A0>\n(51.75, 'Milk', 'Discount')\n101.25\n```", "```py\n    test_factory('manhattan','iPhone', 1000,1,'Electronics')\n    ```", "```py\n<__main__.Manhattan object at 0x000002101D456310>\n(525.0, 'iPhone', 'Buy 1 Get 1')\n0.05\n```", "```py\n    class Prototype:\n        def __init__(self):\n            self.cp = __import__('copy')\n\n        def clone(self, objname):\n            return self.cp.deepcopy(objname)\n    ```", "```py\n    class FMCG:\n        def __init__(self,supplier_name,supplier_code,\n        supplier_address,supplier_contract_start_date,\\\n        supplier_contract_end_date,supplier_quality_code):\n            self.supplier_name = supplier_name\n            self.supplier_code = supplier_code\n            self.supplier_address = supplier_address\n            self.supplier_contract_start_date = \n                 supplier_contract_start_date\n            self.supplier_contract_end_date = \n                 supplier_contract_end_date\n            self.supplier_quality_code = \n                 supplier_quality_code\n\n        def get_supplier_details(self):\n            supplierDetails = {\n               'Supplier_name': self.supplier_name, \n                'Supplier_code': self.supplier_code,\n                'Supplier_address': self.supplier_address,\n                'ContractStartDate': \n                     self.supplier_contract_start_date,\n                'ContractEndDate': \n                     self.supplier_contract_end_date, \n                'QualityCode': self.supplier_quality_code\n            }\n            return supplierDetails\n    ```", "```py\n    fmcg_supplier = FMCG('Test Supplier','a0015','5093 9th Main Street, Pasadena,California, 91001', '05/04/2020', '05/04/2025',1)\n    ```", "```py\n    proto = Prototype()\n    ```", "```py\n    fmcg_supplier_reuse = proto.clone(fmcg_supplier)\n    ```", "```py\n    id(fmcg_supplier)\n    ```", "```py\n2268233820528\n```", "```py\n    id(fmcg_supplier_reuse)\n    ```", "```py\n2268233819616\n```", "```py\n    fmcg_supplier_reuse.supplier_name = 'ABC Supplier'\n    fmcg_supplier_reuse.get_supplier_details()\n    ```", "```py\n{'Supplier_name': 'ABC Supplier',\n 'Supplier_code': 'a0015',\n 'Supplier_address': '5093 9th Main Street, Pasadena,California, 91001',\n 'ContractStartDate': '05/04/2020',\n 'ContractEndDate': '05/04/2025',\n 'QualityCode': 1}\n```", "```py\n    fmcg_supplier.get_supplier_details()\n    ```", "```py\n{'Supplier_name': 'Test Supplier',\n 'Supplier_code': 'a0015',\n 'Supplier_address': '5093 9th Main Street, Pasadena,California, 91001',\n 'ContractStartDate': '05/04/2020',\n 'ContractEndDate': '05/04/2025',\n 'QualityCode': 1}\n```", "```py\n    class SingletonBilling:\n        billing_instance = None\n        product_name = 'Dark Chocolate'\n        unit_price = 6\n        quantity = 4\n        tax = 0.054\n    ```", "```py\n        def __init__(self):\n            if SingletonBilling.billing_instance == None:\n                SingletonBilling.billing_instance = self\n            else:\n                print(\"Billing can have only one \n                       instance\")\n    ```", "```py\n        def generate_bill(self):\n            total = self.unit_price * self.quantity \n            final_total = total + total*self.tax\n            print('***********------------------\n                   **************')\n            print('Product:', self.product_name)\n            print('Total:',final_total)\n            print('***********------------------\n                   **************')\n    ```", "```py\n    invoice1 = SingletonBilling()\n    invoice1.generate_bill()\n    ```", "```py\n***********------------------**************\nProduct: Dark Chocolate\nTotal: 25.296\n***********------------------**************\n```", "```py\n    invoice2 = SingletonBilling()\n    ```", "```py\nBilling can have only one instance\n```"]