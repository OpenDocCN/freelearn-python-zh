["```py\n    { \"name\": \"Library Book Checkout\",\n      \"description\": \"Members can borrow books from the \n        library.\",\n      \"author\": \"Daniel Reis\",\n      \"depends\": [\"library_member\"],\n      \"data\": [\n        \"security/ir.model.access.csv\",\n        \"views/library_menu.xml\",\n        \"views/checkout_view.xml\",\n      ],\n    }\n    ```", "```py\n    from . import models\n    ```", "```py\n    from . import library_checkout\n    ```", "```py\n    from odoo import fields, models\n    class Checkout(models.Model):\n        _name = \"library.checkout\"\n        _description = \"Checkout Request\"\n        member_id = fields.Many2one(\n            \"library.member\",\n            required=True,\n        )\n        user_id = fields.Many2one(\n            \"res.users\",\n            \"Librarian\",\n            default=lambda s: s.env.user,\n        )\n        request_date = fields.Date(\n            default=lambda s: fields.Date.today(),\n        )\n    ```", "```py\n    id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\n    checkout_user,Checkout User,model_library_checkout,library_app.library_group_user,1,1,1,1\n    ```", "```py\n    <odoo>\n      <record id=\"action_library_checkout\" \n              model=\"ir.actions.act_window\">\n        <field name=\"name\">Checkouts</field>\n        <field name=\"res_model\">library.checkout</field>\n        <field name=\"view_mode\">tree,form</field>\n      </record>\n      <menuitem id=\"menu_library_checkout\"\n                name=\"Checkout\"\n                action=\"action_library_checkout\"\n                parent=\"library_app.menu_library\"\n      />\n    </odoo>\n    ```", "```py\n    <odoo>\n      <record id=\"view_tree_checkout\" model=\"ir.ui.view\">\n        <field name=\"name\">Checkout Tree</field>\n        <field name=\"model\">library.checkout</field>\n        <field name=\"arch\" type=\"xml\">\n            <tree>\n                <field name=\"request_date\" />\n                <field name=\"member_id\" />\n            </tree>\n        </field>\n      </record>\n      <record id=\"view_form_checkout\" model=\"ir.ui.view\">\n        <field name=\"name\">Checkout Form</field>\n        <field name=\"model\">library.checkout</field>\n        <field name=\"arch\" type=\"xml\">\n          <form>\n            <sheet>\n              <group>\n                <field name=\"member_id\" />\n                <field name=\"request_date\" />\n                <field name=\"user_id\" />\n              </group>\n            </sheet>\n          </form>\n        </field>\n      </record>\n    </odoo>\n    ```", "```py\n        line_ids = fields.One2many(\n            \"library.checkout.line\",\n            \"checkout_id\",\n            string=\"Borrowed Books\",\n        )\n    ```", "```py\n    from . import library_checkout\n    from . import library_checkout_line\n    ```", "```py\n    from odoo import api, exceptions, fields, models\n    class CheckoutLine(models.Model):\n        _name = \"library.checkout.line\"\n        _description = \"Checkout Request Line\"\n        checkout_id = fields.Many2one(\n            \"library.checkout\",\n            required=True,\n        )\n        book_id = fields.Many2one(\"library.book\", \n          required=True)\n        note = fields.Char(\"Notes\")\n    ```", "```py\n    id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\n    checkout_user,Checkout User,model_library_checkout,library_app.library_group_user,1,1,1,1\n    checkout_line_user,Checkout Line User,model_library_checkout,library_app.library_group_user,1,1,1,1\n    ```", "```py\n              <notebook>\n                <page name=\"lines\">\n                  <field name=\"line_ids\">\n                    <tree editable=\"bottom\">\n                      <field name=\"book_id\" />\n                      <field name=\"note\" />\n                    </tree>\n                  </field>\n                </page>\n              </notebook>\n    ```", "```py\n    from odoo import fields, models\n    class CheckoutStage(models.Model):\n        _name = \"library.checkout.stage\"\n        _description = \"Checkout Stage\"\n        _order = \"sequence\"\n        name = fields.Char()\n        sequence = fields.Integer(default=10)\n        fold = fields.Boolean()\n        active = fields.Boolean(default=True)\n        state = fields.Selection(\n            [(\"new\",\"Requested\"),\n             (\"open\",\"Borrowed\"),\n             (\"done\",\"Returned\"),\n             (\"cancel\", \"Canceled\")],\n            default=\"new\",\n        )\n    ```", "```py\n    from . import library_checkout_stage\n    from . import library_checkout\n    from . import library_checkout_line\n    ```", "```py\n    id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\n    checkout_user,Checkout User,model_library_checkout,library_app.library_group_user,1,1,1,1\n    checkout_line_user,Checkout Line\n    User,model_library_checkout,library_app.library_group_user,1,1,1,1\n    checkout_stage_user,Checkout Stage User,model_library_checkout_stage,library_app.library_group_user,1,0,0,0\n    checkout_stage_manager,Checkout Stage Manager,model_library_checkout_stage,library_app.library_group_manager,1,1,1,1\n    ```", "```py\n      <menuitem id=\"menu_library_configuration\"\n                name=\"Configuration\"\n                parent=\"menu_library\"\n      />\n    ```", "```py\n      <record id=\"action_library_stage\" \n              model=\"ir.actions.act_window\">\n        <field name=\"name\">Stages</field>\n        <field name=\"res_model\">\n          library.checkout.stage</field>\n        <field name=\"view_mode\">tree,form</field>\n      </record>\n      <menuitem id=\"menu_library_stage\"\n                name=\"Stages\"\n                action=\"action_library_stage\"\n                parent=\n                 \"library_app.menu_library_configuration\" \n      />\n    ```", "```py\n    <odoo noupdate=\"1\">\n      <record id=\"stage_new\" model=\n        \"library.checkout.stage\">\n          <field name=\"name\">Draft</field>\n          <field name=\"sequence\">10</field>\n          <field name=\"state\">new</field>\n      </record>\n      <record id=\"stage_open\" model=\n        \"library.checkout.stage\">\n          <field name=\"name\">Borrowed</field>\n          <field name=\"sequence\">20</field>\n          <field name=\"state\">open</field>\n      </record>\n      <record id=\"stage_done\" model=\n        \"library.checkout.stage\">\n          <field name=\"name\">Completed</field>\n          <field name=\"sequence\">90</field>\n          <field name=\"state\">done</field>\n      </record>\n      <record id=\"stage_cancel\" model=\n        \"library.checkout.stage\">\n          <field name=\"name\">Canceled</field>\n          <field name=\"sequence\">95</field>\n          <field name=\"state\">cancel</field>\n      </record>\n    </odoo>\n    ```", "```py\n      \"data\": [\n        \"security/ir.model.access.csv\",\n        \"views/library_menu.xml\",\n        \"views/checkout_view.xml\",\n        \"data/library_checkout_stage.xml\",\n      ],\n    ```", "```py\n    @api.model\n    def _default_stage_id(self):\n        Stage = self.env[\"library.checkout.stage\"]\n        return Stage.search([(\"state\", \"=\", \"new\")], \n          limit=1)\n```", "```py\n    @api.model\n    def _group_expand_stage_id(self, stages, domain, \n      order):\n        return stages.search([], order=order)\n```", "```py\n    stage_id = fields.Many2one(\n        \"library.checkout.stage\",\n        default=_default_stage_id,\n        group_expand=\"_group_expand_stage_id\")\n    state = fields.Selection(related=\"stage_id.state\")\n```", "```py\n    @api.model \n    def create(self, vals):\n        # Code before create: should use the 'vals' dict\n        new_record = super().create(vals) \n        # Code after create: can use the 'new_record' \n        # created \n        if new_record.stage_id.state in (\"open\", \"close\"):\n            raise exceptions.UserError(\n                \"State not allowed for new checkouts.\"\n            )\n        return new_record\n```", "```py\n    checkout_date = fields.Date(readonly=True)\n    close_date = fields.Date(readonly=True)\n```", "```py\n    def write(self, vals):\n        # Code before write: 'self' has the old values \n        if \"stage_id\" in vals:\n            Stage = self.env[\"library.checkout.stage\"]\nold_state = self.stage_id.state\nnew_state = \n              Stage.browse(vals[\"stage_id\"]).state\nif new_state != old_state and new_state == \n              \"open\":\n                vals['checkout_date'] = fields.Date.today()\nif new_state != old_state and new_state == \n               \"done\":\n                vals['close_date'] = fields.Date.today()\n        super().write(vals)\n        # Code after write: can use 'self' with the updated \n        # values\n        return True\n```", "```py\n    def write(self, vals):\n        # Code before write: 'self' has the old values \n        old_state = self.stage_id.state\n        super().write(vals)\n        # Code after write: can use 'self' with the updated \n        # values\n        new_state = self.stage_id.state \n        if not self.env.context.get(\"_checkout_write\"):\n            if new_state != old_state and new_state == \"open\":\n                self.with_context(\n                  _checkout_write=True).write(\n                    {\"checkout_date\": fields.Date.today()})\n            if new_state != old_state and new_state == \n              \"done\":\n                self.with_context(\n                  _checkout_write=True).write(\n                    {\"close_date\": fields.Date.today()})\n        return True\n```", "```py\n    @api.onchange(\"member_id\")\n    def onchange_member_id(self):\n        today_date = fields.Date.today()\n        if self.request_date != today_date:\n            self.request_date = today_date\n            return {\n                \"warning\": {\n                    \"title\": \"Changed Request Date\",\n                    \"message\": \"Request date changed to \n                      today!\",\n                }\n            }\n```", "```py\n    request_date = fields.Date(\n        default=lambda s: fields.Date.today(),\n        compute=\"_compute_request_date_onchange\",\n        store=True,\n        readonly=False,\n    )\n```", "```py\n    @api.depends(\"member_id\")\n    def _compute_request_date_onchange(self):\n        today_date = fields.Date.today()\n        if self.request_date != today_date:\n            self.request_date = today_date\n            return {\n                \"warning\": {\n                    \"title\": \"Changed Request Date\",\n                    \"message\": \"Request date changed to \n                      today!\",\n                }\n            }\n```", "```py\n      \"depends\": [\"library_member\", \"mail\"],\n    ```", "```py\n    class Checkout(models.Model): \n        _name = \"library.checkout\"\n        _description = \"Checkout Request\"\n        _inherit = [\"mail.thread\", \"mail.activity.mixin\"]\n    ```", "```py\n      <record id=\"view_form_checkout\" model=\"ir.ui.view\">\n        <field name=\"name\">Checkout Form</field>\n        <field name=\"model\">library.checkout</field>\n        <field name=\"arch\" type=\"xml\">\n          <form>\n            <sheet>\n              <group>\n                <field name=\"member_id\" />\n                <field name=\"request_date\" />\n                <field name=\"user_id\" />\n              </group>\n              <notebook>\n                <page name=\"lines\">\n                  <field name=\"line_ids\">\n                    <tree editable=\"bottom\">\n                      <field name=\"book_id\" />\n                      <field name=\"note\" />\n                    </tree>\n                  </field>\n                </page>\n              </notebook>\n            </sheet>\n            <div class=\"oe_chatter\">\n              <field name=\"message_follower_ids\"\n                     widget=\"mail_followers\" />\n              <field name=\"activity_ids\"\n                     widget=\"mail_activity\"/>\n              <field name=\"message_ids\"\n                     widget=\"mail_thread\" />\n    </div>\n          </form>\n        </field>\n      </record>\n    </odoo>\n    ```", "```py\nself.message_post(\"Hello!\")\n```", "```py\nself.message_post(\n    \"Hello again!\",\n    subject=\"Hello\",\n    subtype='mail.mt_comment\",\n)\n```", "```py\n    from . import models\n    from . import wizard\n    ```", "```py\n    from . import checkout_mass_message\n    ```", "```py\n    from odoo import api, exceptions, fields, models\n    class CheckoutMassMessage(models.TransientModel): \n        _name = \"library.checkout.massmessage\"\n        _description = \"Send Message to Borrowers\"\n        checkout_ids = fields.Many2many(\n            \"library.checkout\",\n            string=\"Checkouts\",\n        )\n        message_subject = fields.Char()\n        message_body = fields.Html()\n    ```", "```py\nid,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\ncheckout_user,Checkout User,model_library_checkout,library_app.library_group_user,1,1,1,1\ncheckout_line_user,Checkout Line\ncheckout_user,Checkout User,model_library_checkout,library_app.library_group_user,1,1,1,1\ncheckout_stage_user,Checkout Stage User,model_library_checkout_stage,library_app.library_group_user,1,0,0,0\ncheckout_stage_manager,Checkout Stage Manager,model_library_checkout_stage,library_app.library_group_manager,1,1,1,1\ncheckout_massmessage_user,Checkout Mass Message User,model_library_checkout_massmessage,library_app.library_group_user,1,1,1,1\n```", "```py\n<odoo>\n  <record id=\"view_form_checkout_message\" \n    model=\"ir.ui.view\">\n    <field name=\"name\">Library Checkout Mass Message \n      Wizard</field>\n    <field name=\"model\">\n      library.checkout.massmessage</field>\n    <field name=\"arch\" type=\"xml\">\n      <form>\n        <group>\n          <field name=\"message_subject\" />\n          <field name=\"message_body\" />\n          <field name=\"checkout_ids\" />\n        </group>\n        <footer>\n          <button type=\"object\"\n            name=\"button_send\"\n            string=\"Send Messages\" />\n          <button special=\"cancel\" \n            string=\"Cancel\" \n            class=\"btn-secondary\" />\n        </footer>\n      </form>\n    </field>\n  </record>\n  <record id=\"action_checkout_message\"\n          model=\"ir.actions.act_window\">\n    <field name=\"name\">Send Messages</field>\n    <field name=\"res_model\">\n      library.checkout.massmessage</field>\n    <field name=\"view_mode\">form</field>\n    <field name=\"binding_model_id\"\n           ref=\"model_library_checkout\" />\n    <field name=\"binding_view_types\">form,list</field>\n    <field name=\"target\">new</field>\n  </record>\n</odoo>\n```", "```py\n  \"data\": [\n    \"security/ir.model.access.csv\",\n    \"wizard/checkout_mass_message_wizard_view.xml\",\n    \"views/library_menu.xml\",\n    \"views/checkout_view.xml\",\n    \"data/library_checkout_stage.xml\",\n  ],\n```", "```py\n    @api.model\n    def default_get(self, field_names):\n        defaults_dict = super().default_get(field_names)\n        # Add values to the defaults_dict here\n        return defaults_dict\n```", "```py\n    @api.model\n    def default_get(self, field_names):\n        defaults_dict = super().default_get(field_names)\n        checkout_ids = self.env.context[\"active_ids\"]\n        defaults_dict[\"checkout_ids\"] = checkout_ids\n        return defaults_dict\n```", "```py\n    def button_send(self):\n        self.ensure_one()\n        for checkout in self.checkout_ids:\n            checkout.message_post(\n                body=self.message_body,\n                subject=self.message_subject,\n                subtype='mail.mt_comment',\n            )\n        return True\n```", "```py\nfrom odoo import exceptions\nraise exceptions.ValidationError(\"Inconsistent data\")\nraise exceptions.UserError(\"Wrong input\")\n```", "```py\n    def button_send(self):\n        self.ensure_one()\n        if not self.checkout_ids:\n            raise exceptions.UserError(\n                \"No Checkouts were selected.\"\n            )\n        if not self.message_body:\n            raise exceptions.UserError(\n                \"A message body is required\"\n            )\n        for checkout in self.checkout_ids:\n            checkout.message_post(\n                body=self.message_body,\n                subject=self.message_subject,\n                subtype='mail.mt_comment',\n            )\n        return True\n```", "```py\nfrom . import test_checkout_mass_message\n```", "```py\nfrom odoo import exceptions\nfrom odoo.tests import common\nclass TestWizard(common.SingleTransactionCase):\n    def setUp(self, *args, **kwargs):\n        super(TestWizard, self).setUp(*args, **kwargs)\n        # Add test setup code here... \n    def test_01_button_send(self):\n        \"\"\"Send button should create messages on\n           Checkouts\"\"\"\n        # Add test code\n```", "```py\n(env15) $ odoo -c library.conf --test-enable -u library_checkout --stop-after-init\n```", "```py\nINFO library odoo.modules.module: odoo.addons.library_checkout.tests.test_checkout_mass_message running tests.\n```", "```py\nfrom odoo import exceptions\nfrom odoo.tests import common\nclass TestWizard(common.SingleTransactionCase):\n    def setUp(self, *args, **kwargs):\n        super().setUp(*args, **kwargs)\n        # Setup test data\n        admin_user = self.env.ref('base.user_admin')\n        self.Checkout = self.env['library.checkout']\\\n            .with_user(admin_user)\n        self.Wizard = self.env[\n          'library.checkout.massmessage']\\\n            .with_user(admin_user)\n        a_member = self.env['library.member']\\\n            .create({'partner_id': \n               admin_user.partner_id.id})\n        self.checkout0 = self.Checkout\\\n            .create({'member_id': a_member.id})\n```", "```py\n    def test_01_button_send(self):\n        \"\"\"Send button creates messages on Checkouts\"\"\"\n        count_before = len(self.checkout0.message_ids)\n        # TODO: run wizard\n        count_after = len(self.checkout0.message_ids)\n        self.assertEqual(\n            count_before + 1,\n            count_after,\n\"Expected one additional message in the \n             Checkout.\",\n        )\n```", "```py\n    def test_01_button_send(self):\n        \"\"\"Send button creates messages on Checkouts\"\"\"\n        count_before = len(self.checkout0.message_ids)\n        Wizard0 = self.Wizard\\\n            .with_context(active_ids=self.checkout0.ids)\n        wizard0 = Wizard0.create({\n            \"message_subject\": \"Hello\",\n            \"message_body\": \"This is a message.\",\n        })\n        wizard0.button_send()\n        count_after = len(self.checkout0.message_ids)\n        self.assertEqual(\n            count_before + 1,\n            count_after,\n            \"Expected one additional message in the \n             Checkout.\",\n        )\n```", "```py\n    def test_02_button_send_empty_body(self):\n        \"\"\"Send button errors on empty body message\"\"\"\n        Wizard0 = self.Wizard\\\n            .with_context(active_ids=self.checkout0.ids)\n        wizard0 = Wizard0.create({})\n        with self.assertRaises(exceptions.UserError) as e:\n            wizard0.button_send()\n```", "```py\nimport logging\n_logger = logging.getLogger(__name__)\n```", "```py\n_logger.debug('A DEBUG message') \n_logger.info('An INFO message') \n_logger.warning('A WARNING message') \n_logger.error('An ERROR message')\n```", "```py\n        _logger.info(\n            \"Posted %d messages to the Checkouts: %s\",\n            len(self.checkout_ids),\n            str(self.checkout_ids),\n        )\n```", "```py\nINFO library odoo.addons.library_checkout.wizard.checkout_mass_message: Posted 2 messages to the Checkouts: [3, 4]\n```", "```py\n            _logger.debug(\n                \"Message on %d to followers: %s\",\n                checkout.id,\n                checkout.message_follower_ids)\n```", "```py\n--log-handler=\nodoo.addons.library_checkout.wizard.checkout_mass_message:DEBUG\n```", "```py\n(env15) $ pip3 install watchdog\n```", "```py\n(env15) $ odoo -c library.conf --dev=all\n```", "```py\nimport pdb; pdb.set_trace()\n```", "```py\n    def button_send(self):\n        import pdb; pdb.set_trace()\n        self.ensure_one()\n        # ...\n```", "```py\n> /home/daniel/work15/library/library_checkout/wizard\n/checkout_mass_message.py(29)button_send()\n-> self.ensure_one()\n(Pdb)\n```", "```py\n(pdb) self.checkout_ids\nlibrary.checkout(1,)\n(Pdb)\n```", "```py\n$ pip3 install ipdb\n```", "```py\nimport ipdb; ipdb.set_trace()\n```", "```py\n$ sudo apt-get install python-pudb  # using Debian OS packages\n$ pip3 install pudb  # or using pip, possibly in a virtualenv\n```", "```py\nimport pudb; pudb.set_trace()\n```", "```py\nimport pudb; pu.db\n```", "```py\n$ ps ax | grep odoo\n```", "```py\n 2650 pts/5  S+   0:00 grep --color=auto odoo\n21688 pts/4  Sl+  0:05 python3 /home/daniel/work15/env15/bin/odoo\n```", "```py\n$ kill -3 <PID>\n```", "```py\n$ kill -HUP <PID>\n$ kill -TERM <PID>\n```"]