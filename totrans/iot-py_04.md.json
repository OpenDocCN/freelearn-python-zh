["```py\npip install tornado\n```", "```py\nCollecting tornado\n/usr/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:90: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.\n  InsecurePlatformWarning\n  Downloading tornado-4.3.tar.gz (450kB)\n    100% |################################| 454kB 25kB/s \nCollecting backports.ssl-match-hostname (from tornado)\n  Downloading backports.ssl_match_hostname-3.5.0.1.tar.gz\nCollecting singledispatch (from tornado)\n  Downloading singledispatch-3.4.0.3-py2.py3-none-any.whl\nCollecting certifi (from tornado)\n  Downloading certifi-2015.11.20.1-py2.py3-none-any.whl (368kB)\n    100% |################################| 372kB 31kB/s \nCollecting backports-abc>=0.4 (from tornado)\n  Downloading backports_abc-0.4-py2.py3-none-any.whl\nCollecting six (from singledispatch->tornado)\n  Downloading six-1.10.0-py2.py3-none-any.whl\n...\nInstalling collected packages: backports.ssl-match-hostname, six, singledispatch, certifi, backports-abc, tornado\n  Running setup.py install for backports.ssl-match-hostname\n  Running setup.py install for tornado\nSuccessfully installed backports-abc-0.4 backports.ssl-match-hostname-3.5.0.1 certifi-2015.11.20.1 singledispatch-3.4.0.3 six-1.10.0 tornado-4.3\n```", "```py\npip install --upgrade httpie\n```", "```py\nCollecting httpie\n/usr/lib/python2.7/site-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:90: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.\n  InsecurePlatformWarning\n  Downloading httpie-0.9.3-py2.py3-none-any.whl (66kB)\n    100% |################################| 69kB 117kB/s \nCollecting Pygments>=1.5 (from httpie)\n  Downloading Pygments-2.0.2-py2-none-any.whl (672kB)\n    100% |################################| 675kB 17kB/s \nCollecting requests>=2.3.0 (from httpie)\n  Downloading requests-2.9.1-py2.py3-none-any.whl (501kB)\n    100% |################################| 503kB 23kB/s \nInstalling collected packages: Pygments, requests, httpie\nSuccessfully installed Pygments-2.0.2 httpie-0.9.3 requests-2.9.1\n```", "```py\nimport mraa\nfrom datetime import date\nimport tornado.escape\nimport tornado.ioloop\nimport tornado.web\n\nclass BoardInteraction:\n    number_in_leds = NumberInLeds()\n    current_number = 0\n\nclass VersionHandler(tornado.web.RequestHandler):\n    def get(self):\n        response = {'version': '1.0',\n                    'last_build': date.today().isoformat()}\n        self.write(response)\n\nclass PutNumberInLedsHandler(tornado.web.RequestHandler):\n    def put(self, number):\n        int_number = int(number)\n        BoardInteraction.number_in_leds.print_number(int_number)\n        BoardInteraction.current_number = int_number\n        response = {'number': int_number}\n        self.write(response)\n\nclass GetCurrentNumberHandler(tornado.web.RequestHandler):\n    def get(self):\n        response = {'number': BoardInteraction.current_number}\n        self.write(response)\n```", "```py\napplication = tornado.web.Application([\n    (r\"/putnumberinleds/([0-9])\", PutNumberInLedsHandler),\n    (r\"/getcurrentnumber\", GetCurrentNumberHandler),\n    (r\"/version\", VersionHandler)])\n\nif __name__ == \"__main__\":\n       print(\"Listening at port 8888\")\n    BoardInteraction.number_in_leds.print_number(0)\n    application.listen(8888)\n    tornado.ioloop.IOLoop.instance().start()\n```", "```py\nSUPPORTED_METHODS = (\"GET\", \"HEAD\", \"POST\", \"DELETE\", \"PATCH\", \"PUT\", \"OPTIONS\")\n```", "```py\ndef get(self, *args, **kwargs):\n    raise HTTPError(405)\n```", "```py\npython iot_python_chapter_04_01.py\n```", "```py\nListening at port 8888\n==== Turning on 0 LEDs ====\nI've turned off the LED connected to GPIO Pin #9, in position 1.\nI've turned off the LED connected to GPIO Pin #8, in position 2.\nI've turned off the LED connected to GPIO Pin #7, in position 3.\nI've turned off the LED connected to GPIO Pin #6, in position 4.\nI've turned off the LED connected to GPIO Pin #5, in position 5.\nI've turned off the LED connected to GPIO Pin #4, in position 6.\nI've turned off the LED connected to GPIO Pin #3, in position 7.\nI've turned off the LED connected to GPIO Pin #2, in position 8.\nI've turned off the LED connected to GPIO Pin #1, in position 9.\n```", "```py\nhttp GET :8888/version\n```", "```py\nHTTP/1.1 200 OK\nContent-Length: 46\nContent-Type: application/json; charset=UTF-8\nDate: Thu, 28 Jan 2016 03:15:21 GMT\nEtag: \"fb066668a345b0637fdc112ac0ddc37c318d8709\"\nServer: TornadoServer/4.3\n\n{\n    \"last_build\": \"2016-01-28\", \n    \"version\": \"1.0\"\n}\n```", "```py\nhttp â€“b GET :8888/version\n```", "```py\nhttp -b PUT 192.168.1.107:8888/putnumberinleds/5\n```", "```py\n{\n    \"number\": 5\n}\n```", "```py\nhttp -b GET 192.168.1.107:8888/getcurrentnumber\n```", "```py\n{\n    \"number\": 5\n}\n```", "```py\n(r\"/putnumberinleds/([0-9])\", PutNumberInLedsHandler)\n```", "```py\nhttp -b PUT 192.168.1.107:8888/putnumberinleds/12\n```", "```py\n<html><title>404: Not Found</title><body>404: Not Found</body></html>\n```", "```py\nhttp -b PUT 192.168.1.107:8888/putnumberinleds/x\n```", "```py\nhttp -b PUT 192.168.1.107:8888/putnumberinleds/8\n```", "```py\n{\n    \"number\": 8\n}\n```", "```py\nhttp -b GET 192.168.1.107:8888/getcurrentnumber\n```", "```py\n{\n    \"number\": 8\n}\n```", "```py\nfor brightness in range(0, 256):\n    print(brightness / 255.0)\n```", "```py\nfor brightness in range(0, 256):\n    print(brightness / 255.0 * 5)\n```", "```py\nimport mraa\nfrom datetime import date\nimport tornado.escape\nimport tornado.ioloop\nimport tornado.web\n\nclass AnalogLed:\n    def __init__(self, pin, name):\n        self.pin = pin\n        self.name = name\n        self.pwm = mraa.Pwm(pin)\n        self.pwm.period_us(700)\n        self.pwm.enable(True)\n        self.brightness_value = 0\n        self.set_bightness(0)\n\n    def set_brightness(self, value):\n        brightness_value = value\n        if brightness_value > 255:\n            brightness_value = 255\n        elif brightness_value < 0:\n            brightness_value = 0\n        led_value = brightness_value / 255.0\n        self.pwm.write(led_value)\n        self.brightness_value = brightness_value\n        print(\"{0} LED connected to PWM Pin #{1} set to brightness {2}.\".format(self.name, self.pin, brightness_value))\n```", "```py\nclass BoardInteraction:\n    # The Red LED is connected to pin ~6\n    red_led = AnalogLed(6, 'Red')\n    # The Green LED is connected to Pin ~5\n    green_led = AnalogLed(5, 'Green')\n    # The Blue LED is connected to Pin ~3\n    blue_led = AnalogLed(3, 'Blue')\n```", "```py\nclass VersionHandler(tornado.web.RequestHandler):\n    def get(self):\n        response = {'version': '1.0',\n                    'last_build': date.today().isoformat()}\n        self.write(response)\n\nclass PutRedBrightnessHandler(tornado.web.RequestHandler):\n    def put(self, value):\n        int_value = int(value)\n        BoardInteraction.red_led.set_brightness(int_value)\n        response = {'red': BoardInteraction.red_led.brightness_value}\n        self.write(response)\n\nclass PutGreenBrightnessHandler(tornado.web.RequestHandler):\n    def put(self, value):\n        int_value = int(value)\n        BoardInteraction.green_led.set_brightness(int_value)\n        response = {'green': BoardInteraction.green_led.brightness_value}\n        self.write(response)\n\nclass PutBlueBrightnessHandler(tornado.web.RequestHandler):\n    def put(self, value):\n        int_value = int(value)\n        BoardInteraction.blue_led.set_brightness(int_value)\n        response = {'blue': BoardInteraction.blue_led.brightness_value}\n        self.write(response)\n```", "```py\nclass GetRedBrightnessHandler(tornado.web.RequestHandler):\n    def get(self):\n        response = {'red': BoardInteraction.red_led.brightness_value}\n        self.write(response)\n\nclass GetGreenBrightnessHandler(tornado.web.RequestHandler):\n    def get(self):\n        response = {'green': BoardInteraction.green_led.brightness_value}\n        self.write(response)\n\nclass GetBlueBrightnessHandler(tornado.web.RequestHandler):\n    def get(self):\n        response = {'blue': BoardInteraction.blue_led.brightness_value}\n        self.write(response)\n```", "```py\napplication = tornado.web.Application([\n    (r\"/putredbrightness/([0-9]+)\", PutRedBrightnessHandler),\n    (r\"/putgreenbrightness/([0-9]+)\", PutGreenBrightnessHandler),\n    (r\"/putbluebrightness/([0-9]+)\", PutBlueBrightnessHandler),\n    (r\"/getredbrightness\", GetRedBrightnessHandler),\n    (r\"/getgreenbrightness\", GetGreenBrightnessHandler),\n    (r\"/getbluebrightness\", GetBlueBrightnessHandler),\n    (r\"/version\", VersionHandler)])\n\nif __name__ == \"__main__\":\n    print(\"Listening at port 8888\")\n    application.listen(8888)\n    tornado.ioloop.IOLoop.instance().start()\n```", "```py\npython iot_python_chapter_04_02.py\n```", "```py\nRed LED connected to PWM Pin #6 set to brightness 0.\nGreen LED connected to PWM Pin #5 set to brightness 0.\nBlue LED connected to PWM Pin #3 set to brightness 0.\nListening at port 8888\n```", "```py\nhttp -b PUT 192.168.1.107:8888/putredbrightness/30\n```", "```py\n{\n    \"red\": 30\n}\n```", "```py\nhttp -b GET 192.168.1.107:8888/getredbrightness\n```", "```py\n{\n    \"red\": 30\n}\n```", "```py\nhttp -b PUT 192.168.1.107:8888/putredbrightness/128\n```", "```py\n{\n    \"green\": 128\n}\n```", "```py\nhttp -b PUT 192.168.1.107:8888/putbluebrightness/255\n```", "```py\n{\n    \"blue\": 255\n}\n```", "```py\nhttp -b GET 192.168.1.107:8888/getgreenbrightness\nhttp -b GET 192.168.1.107:8888/getbluebrightness\n```", "```py\n{\n    \"green\": 128\n}\n\n{\n    \"blue\": 255\n}\n```", "```py\nclass PutRGBBrightnessHandler(tornado.web.RequestHandler):\n    def put(self, red, green, blue):\n        int_red = int(red)\n        int_green = int(green)\n        int_blue = int(blue)\n        BoardInteraction.red_led.set_brightness(int_red)\n        BoardInteraction.green_led.set_brightness(int_green)\n        BoardInteraction.blue_led.set_brightness(int_blue)\n        response = dict(\n            red=BoardInteraction.red_led.brightness_value,\n            green=BoardInteraction.green_led.brightness_value,\n            blue=BoardInteraction.blue_led.brightness_value)\n        self.write(response)\n```", "```py\napplication = tornado.web.Application([\n    (r\"/putredbrightness/([0-9]+)\", PutRedBrightnessHandler),\n    (r\"/putgreenbrightness/([0-9]+)\", PutGreenBrightnessHandler),\n    (r\"/putbluebrightness/([0-9]+)\", PutBlueBrightnessHandler),\n (r\"/putrgbbrightness/r([0-9]+)g([0-9]+)b([0-9]+)\", \n PutRGBBrightnessHandler),\n    (r\"/getredbrightness\", GetRedBrightnessHandler),\n    (r\"/getgreenbrightness\", GetGreenBrightnessHandler),\n    (r\"/getbluebrightness\", GetBlueBrightnessHandler),\n    (r\"/version\", VersionHandler)])\n```", "```py\npython iot_python_chapter_04_03.py\n```", "```py\nRed LED connected to PWM Pin #6 set to brightness 0.\nGreen LED connected to PWM Pin #5 set to brightness 0.\nBlue LED connected to PWM Pin #3 set to brightness 0.\nListening at port 8888\n```", "```py\nPUT http://192.168.1.107:8888/putrgbbrightness/r30g128b255\n\n```", "```py\nhttp -b PUT 192.168.1.107:8888/putrgbbrightness/r30g128b255\n```", "```py\n{\n    \"blue\": 255, \n    \"green\": 128, \n    \"red\": 30\n}\n```", "```py\npython iot_python_chapter_04_03.py\n```", "```py\nhttp -b PUT 192.168.1.107:8888/putrgbbrightness/r255g255b0\n```", "```py\n{\n    \"blue\": 0, \n    \"green\": 255, \n    \"red\": 255\n}\n```", "```py\nhttp -b PUT 192.168.1.107:8888/putrgbbrightness/r255g0b128\n```", "```py\n{\n    \"blue\": 128, \n    \"green\": 0, \n    \"red\": 255\n}\n```", "```py\nhttp -b PUT 192.168.1.107:8888/putrgbbrightness/r0g255b255\n```", "```py\n{\n    \"blue\": 255, \n    \"green\": 255, \n    \"red\": 0\n}\n```", "```py\nfrom wiringx86 import GPIOGalileoGen2 as GPIO\n\nclass Board:\n    gpio = GPIO(debug=False)\n\nclass AnalogLed:\n    def __init__(self, pin, name):\n        self.pin = pin\n        self.name = name\n self.gpio = Board.gpio\n self.gpio.pinMode(pin, self.gpio.PWM)\n        self.brightness_value = 0\n        self.set_brightness(0)\n\n    def set_brightness(self, value):\n        brightness_value = value\n        if brightness_value > 255:\n            brightness_value = 255\n        elif brightness_value < 0:\n            brightness_value = 0\n self.gpio.analogWrite(self.pin, brightness_value)\n        self.brightness_value = brightness_value\n        print(\"{0} LED connected to PWM Pin #{1} set to brightness {2}.\".format(self.name, self.pin, brightness_value))\n```", "```py\npython iot_python_chapter_04_04.py\n```"]