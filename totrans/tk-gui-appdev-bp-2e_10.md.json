["```py\nfrom tkinter import Tk, Label, Entry, StringVar\nroot = Tk()\nmy_variable = StringVar()  \n\ndef trace_when_my_variable_written(var, indx, mode):\n   print (\"Traced variable {}\".format(my_variable.get()))\n\nmy_variable.trace_variable(\"w\", trace_when_my_variable_written)\n\nLabel(root, textvariable = my_variable).pack(padx=5, pady=5)\nEntry(root, textvariable = my_variable).pack(padx=5, pady=5)\n\nroot.mainloop()\n```", "```py\nmy_variable.trace_variable(\"w\", trace_when_my_variable_written)\n```", "```py\ntrace_vdelete(self, mode, callback_to_be_deleted)\n```", "```py\nvcmd = (self.root.register(self.validate_data), '%V')\n```", "```py\ndef validate_data(self, v)\n```", "```py\nclass PercentSubstitutionsDemo():\n\n  def __init__(self):\n    self.root = tk.Tk()\n    tk.Label(text='Type Something Below').pack()\n    vcmd = (self.root.register(self.validate), '%d', '%i', '%P', '%s',\n                                                '%S', '%v', '%V', '%W')\n    tk.Entry(self.root, validate=\"all\", validatecommand=vcmd).pack()\n    self.root.mainloop()\n\n  def validate(self, d, i, P, s, S, v, V, W):\n    print(\"Following Data is received for running our validation checks:\")\n    print(\"d:{}\".format(d))\n    print(\"i:{}\".format(i))\n    print(\"P:{}\".format(P))\n    print(\"s:{}\".format(s))\n    print(\"S:{}\".format(S))\n    print(\"v:{}\".format(v))\n    print(\"V:{}\".format(V))\n    print(\"W:{}\".format(W))\n    # returning true for now \n    # in actual validation you return true if data is valid \n    # else return false\n    return True\n```", "```py\nimport tkinter as tk\n\nclass KeyValidationDemo():\n  def __init__(self):\n    root = tk.Tk()\n    tk.Label(root, text='Enter your name / only alpabets & space \n      allowed').pack()\n    vcmd = (root.register(self.validate_data), '%S')\n    invcmd = (root.register(self.invalid_name), '%S')\n    tk.Entry(root, validate=\"key\",validatecommand=vcmd, \n               invalidcommand=invcmd).pack(pady=5, padx=5)\n    self.error_message = tk.Label(root, text='', fg='red')\n    self.error_message.pack()\n    root.mainloop()\n\n  def validate_data(self, S):\n    self.error_message.config(text='')\n    return (S.isalpha() or S == ' ')\n\n  def invalid_name(self, S):\n    self.error_message.config(text='Invalid character %s \\n \n                     name can only have alphabets and spaces' % S)\n    app = KeyValidationDemo()\n```", "```py\nimport tkinter as tk\nimport re\n\nclass FocusOutValidationDemo():\n  def __init__(self):\n    self.master = tk.Tk()\n    self.error_message = tk.Label(text='', fg='red') \n    self.error_message.pack()\n    tk.Label(text='Enter Email Address').pack()\n    vcmd = (self.master.register(self.validate_email), '%P')\n    invcmd = (self.master.register(self.invalid_email), '%P')\n    self.email_entry = tk.Entry(self.master, validate=\"focusout\", \n              validatecommand=vcmd, invalidcommand=invcmd)\n    self.email_entry.pack()\n    tk.Button(self.master, text=\"Login\").pack()\n    tk.mainloop()\n\n  def validate_email(self, P):\n    self.error_message.config(text='')\n    x = re.match(r\"[^@]+@[^@]+\\.[^@]+\", P)\n    return (x != None)\n\n  def invalid_email(self, P):\n    self.error_message.config(text='Invalid Email Address')\n    self.email_entry.focus_set()\n\napp = FocusOutValidationDemo()\n```", "```py\nfrom tkinter import Tk, Entry, Label, StringVar, INSERT\n\nclass FormatEntryWidgetDemo:\n\n  def __init__(self, root):\n    Label(root, text='Date(MM/DD/YYYY)').pack()\n    self.entered_date = StringVar()\n    self.date_entry = Entry(textvariable=self.entered_date)\n    self.date_entry.pack(padx=5, pady=5)  \n    self.date_entry.focus_set()\n    self.slash_positions = [2, 5]\n    root.bind('<Key>', self.format_date_entry_widget)\n\n  def format_date_entry_widget(self, event):\n    entry_list = [c for c in self.entered_date.get() if c !='/']\n    for pos in self.slash_positions:\n      if len(entry_list) > pos:\n        entry_list.insert(pos, '/')\n    self.entered_date.set(''.join(entry_list))\n    # Controlling cursor\n    cursor_position = self.date_entry.index(INSERT) # current cursor \n      position\n    for pos in self.slash_positions:\n      if cursor_position == (pos + 1): # if cursor position is on slash\n        cursor_position += 1\n    if event.keysym not in ['BackSpace', 'Right', 'Left','Up', 'Down']:\n      self.date_entry.icursor(cursor_position)\n\nroot = Tk()\nFormatEntryWidgetDemo(root)\nroot.mainloop()\n```", "```py\nLabel(text=\"Sale Up to 50% Off !\", font=\"TkHeadingFont 20\")\nLabel(text=\"**Conditions Apply\", font=\"TkSmallCaptionFont 8\") \n```", "```py\nfrom tkinter import Tk, Label, Pack\nfrom tkinter import font\nroot = Tk()\nlabel = Label(root, text=\"Humpty Dumpty was pushed\")\nlabel.pack()\ncurrent_font = font.Font(font=label['font'])\nprint ('Actual :', str(current_font.actual()))\nprint ('Family : ', current_font.cget(\"family\"))\nprint ('Weight : ', current_font.cget(\"weight\"))\nprint ('Text width of Dumpty : {}'.format(current_font.measure(\"Dumpty\")))\nprint ('Metrics:', str(current_font.metrics()))\ncurrent_font.config(size=14)\nlabel.config(font=current_font)\nprint ('New Actual :', str(current_font.actual()))\nroot.mainloop()\n```", "```py\nActual: {'slant': 'roman', 'underline': 0, 'family': 'DejaVu Sans', 'weight': 'normal', 'size': -12, 'overstrike': 0}\nFamily: DejaVu Sans\nWeight: normal\nText width of Dumpty: 49\nMetrics: {'fixed': 0, 'descent': 3, 'ascent': 12, 'linespace':15}\nNew actual: {'slant': 'roman', 'underline': 0, 'family': 'DejaVu Sans', 'weight': 'normal', 'size': 14, 'overstrike': 0}\n```", "```py\nfrom tkinter import Tk, font\nroot = Tk()\nall_fonts = font.families()\nprint(all_fonts) # this prints the tuple containing all fonts on a system.\n```", "```py\ndef on_value_change(self, event=None):\n  self.current_font.config(family=self.family.get(), size=self.size.get(),    \n           weight=self.weight.get(), slant=self.slant.get(),  \n           underline=self.underline.get(),  \n           overstrike=self.overstrike.get())\n  self.text.tag_config('fontspecs', font=self.current_font)\n```", "```py\nself.text.insert(INSERT, '{}\\n{}'.format(self.sample_text,  \n                          self.sample_text.upper()), 'fontspecs')\n```", "```py\nsubprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=())\n```", "```py\nfrom tkinter import Tk, Text, END\nfrom subprocess import Popen, PIPE\nroot = Tk()\ntext = Text(root)\ntext.pack()\n\n#replace \"ls\" with \"dir\" in the next line on windows platform\nwith Popen([\"ls\"], stdout=PIPE, bufsize=1, universal_newlines=True) as p:\n   for line in p.stdout:\n      text.insert(END, line)\n\nroot.mainloop()\n```", "```py\nPopen(['your command', arg0, arg1, ...])\n```", "```py\nPopen('path/toexecutable/script',stdout=sub.PIPE,stderr=sub.PIPE)\n```", "```py\nimport tkinter\nimport inspect\n\nprint ('Class Hierarchy for Frame Widget')\n\nfor i, classname in enumerate(inspect.getmro(tkinter.Frame)):\n  print( '\\t{}: {}'.format(i, classname))\n\nprint ('Class Hierarchy for Toplevel')\nfor i, classname in enumerate(inspect.getmro(tkinter.Toplevel)):\n  print ('\\t{}:{}'.format(i, classname))\n\nprint ('Class Hierarchy for Tk')\nfor i, classname in enumerate(inspect.getmro(tkinter.Tk)):\n  print ('\\t{}: {}'.format(i, classname))\n```", "```py\nClass Hierarchy for Frame Widget\n 0: <class 'tkinter.Frame'>\n 1: <class 'tkinter.Widget'>\n 2: <class 'tkinter.BaseWidget'>\n 3: <class 'tkinter.Misc'>\n 4: <class 'tkinter.Pack'>\n 5: <class 'tkinter.Place'>\n 6: <class 'tkinter.Grid'>\n 7: <class 'object'>\nClass Hierarchy for Toplevel\n 0:<class 'tkinter.Toplevel'>\n 1:<class 'tkinter.BaseWidget'>\n 2:<class 'tkinter.Misc'>\n 3:<class 'tkinter.Wm'>\n 4:<class 'object'>\nClass Hierarchy for Tk\n 0: <class 'tkinter.Tk'>\n 1: <class 'tkinter.Misc'>\n 2: <class 'tkinter.Wm'>\n 3: <class 'object'>\n```", "```py\n>>> import tkinter\n>>> help(tkinter.Misc)\n```", "```py\nif some_thing_wrong:\n  do_something_else()\nelse:\n  do_something_normal()\n```", "```py\ntry:\n  do_some_thing_normal()\nexcept some_thing_wrong:\n  do_some_thing_else()\n```", "```py\n from platform import uname\n operating_system = uname()[0]\n if ( operating_system == \"Linux\" ):\n   canvas.bind('<Button-4>', wheelUp) # X11\n   canvas.bind('<Button-5>', wheelDown)\n elif ( operating_system == \"Darwin\" ):\n   canvas.bind('<MouseWheel>', wheel) # MacOS\n else: \n   canvas.bind_all('<MouseWheel>', wheel) # windows\n```", "```py\nprint filter(lambda num: num>6, range(1,10))# prints [7, 8,9]\n```", "```py\nprint map(lambda num: num+5, range(1,5)) #prints [6, 7, 8,9]\n```", "```py\nself.mylabel = Label(root, text='Name')\nself.mylabel.pack(side=LEFT)\n```", "```py\nkey = event.keysym\nmylabel.config (text=key)\n```", "```py\nimport cProfile\ncProfile.run('spam()','spam.profile')\n```", "```py\nimport pstats\nstats = pstats.Stats('spam.profile')\nstats.strip_dirs().sort_stats('time').print_stats()\n```", "```py\npython -m cProfile myscript.py\n```", "```py\n57607465 function calls (57607420 primitive calls) in 110.040 seconds\nOrdered by: standard name\nncalls tottime percall cumtime percall filename:lineno(function)\n 1 50.100 50.100 95.452 95.452 8.09_vornoi_diagram.py:15(create_voronoi_diagram)\n 1 0.000 0.000 110.040 110.040 8.09_vornoi_diagram.py:5(<module>)\n 400125 2.423 0.000 14.616 0.000 __init__.py:2313(_create)\n 400125 0.661 0.000 15.277 0.000 __init__.py:2342(create_rectangle)\n 400128 1.849 0.000 2.743 0.000 __init__.py:95(_cnfmerge)\n 625 0.001 0.000 0.003 0.000 random.py:170(randrange)\n 625 0.002 0.000 0.002 0.000 random.py:220(_randbelow)\n 50400000 30.072 0.000 30.072 0.000 {built-in method math.hypot}\n 1 14.202 14.202 14.358 14.358 {method 'mainloop' of '_tkinter.tkapp' objects}\n```", "```py\nimport Tkinter  # for Python 2\nimport tkinter  # for Python 3\n```", "```py\ntry:\n  import tkinter as tk\nexcept ImportError:\n  import Tkinter as tk\n\ntry:\n  import tkinter.messagebox\nexcept:\n  import tkMessageBox\n```"]