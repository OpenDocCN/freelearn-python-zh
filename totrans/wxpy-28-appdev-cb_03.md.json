["```py\nclass MyPanel(wx.Panel):\n    def __init__(self, parent):\n        super(MyPanel, self).__init__(parent)\n\n        # Make some buttons\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        for bid in (wx.ID_OK, wx.ID_CANCEL,\n                    wx.ID_APPLY, wx.ID_HELP):\n            button = wx.Button(self, bid)\n            sizer.Add(button, 0, wx.ALL, 5)\n        self.SetSizer(sizer)\n\n```", "```py\nimport wx\nfor x in dir(wx):\n    if x.startswith(‘ID_’):\n        print x\n\n```", "```py\nimport wx\nimport wx.lib.platebtn as platebtn\nimport wx.lib.agw.gradientbutton as gradbtn\n\nclass ButtonTestPanel(wx.Panel):\n    def __init__(self, parent):\n        super(ButtonTestPanel, self).__init__(parent)\n\n        # Attributes\n        # Make a ToggleButton\n        self.toggle = wx.ToggleButton(self,\n                                      label=\"Toggle Button\")\n\n        # Make a BitmapButton\n        bmp = wx.Bitmap(\"./face-monkey.png\",\n                        wx.BITMAP_TYPE_PNG)\n        self.bmpbtn = wx.BitmapButton(self, bitmap=bmp)\n\n        # Make a few PlateButton variants\n        self.pbtn1 = pbtn.PlateButton(self,\n                                      label=\"PlateButton\")\n        self.pbtn2 = pbtn.PlateButton(self, \n                                      label=\"PlateBmp\",\n                                      bmp=bmp)\n        style = pbtn.PB_STYLE_SQUARE\n        self.pbtn3 = pbtn.PlateButton(self,\n                                      label=\"Square Plate\",\n                                      bmp=bmp,\n                                      style=style)\n        self.pbtn4 = pbtn.PlateButton(self,\n                                      label=\"PlateMenu\")\n        menu = wx.Menu()\n        menu.Append(wx.NewId(), text=\"Hello World\")\n        self.pbtn4.SetMenu(menu)\n\n        # Gradient Buttons\n        self.gbtn1 = gbtn.GradientButton(self,\n                                         label=\"GradientBtn\")\n        self.gbtn2 = gbtn.GradientButton(self,\n                                         label=\"GradientBmp\",\n                                         bitmap=bmp)\n\n        # Layout\n        vsizer = wx.BoxSizer(wx.VERTICAL)\n        vsizer.Add(self.toggle, 0, wx.ALL, 12)\n        vsizer.Add(self.bmpbtn, 0, wx.ALL, 12)\n        hsizer1 = wx.BoxSizer(wx.HORIZONTAL)\n        hsizer1.AddMany([(self.pbtn1, 0, wx.ALL, 5),\n                        (self.pbtn2, 0, wx.ALL, 5),\n                        (self.pbtn3, 0, wx.ALL, 5),\n                        (self.pbtn4, 0, wx.ALL, 5)])\n        vsizer.Add(hsizer1, 0, wx.ALL, 12)\n        hsizer2 = wx.BoxSizer(wx.HORIZONTAL)\n        hsizer2.AddMany([(self.gbtn1, 0, wx.ALL, 5),\n                         (self.gbtn2, 0, wx.ALL, 5)])\n        vsizer.Add(hsizer2, 0, wx.ALL, 12)\n        self.SetSizer(vsizer)\n\n```", "```py\nclass CheckBoxFrame(wx.Frame):\n    def __init__(self, *args, **kwargs):\n        super(CheckBoxFrame, self).__init__(*args, **kwargs)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n        self.checkbox1 = wx.CheckBox(self.panel,\n                                     label=\"2 State CheckBox\")\n        style = wx.CHK_3STATE|wx.CHK_ALLOW_3RD_STATE_FOR_USER\n        self.checkbox2 = wx.CheckBox(self.panel,\n                                     label=\"3 State CheckBox\",\n                                     style=style)\n\n        # Layout\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.checkbox1, 0, wx.ALL, 15)\n        sizer.Add(self.checkbox2, 0, wx.ALL, 15)\n        self.panel.SetSizer(sizer)\n        self.CreateStatusBar()\n\n        # Event Handlers\n        self.Bind(wx.EVT_CHECKBOX, self.OnCheck)\n\n    def OnCheck(self, event):\n        e_obj = event.GetEventObject()\n        if e_obj == self.checkbox1:\n            checked = self.checkbox1.GetValue()\n            msg = \"Two State Clicked: %s\" % checked\n            self.PushStatusText(msg)\n        elif e_obj == self.checkbox2:\n            state = self.checkbox2.Get3StateValue()\n            msg = \"Three State Clicked: %d\" % state\n            self.PushStatusText(msg)\n        else:\n            event.Skip()\n\n```", "```py\nclass LoginDialog(wx.Dialog):LoginDialog(wx.Dialog):\n    def __init__(self, *args, **kwargs):\n        super(LoginDialog, self).__init__(*args, **kwargs)wx.Dialog.__init__(self, *args, **kwargs)\n\n        # Attributes\n        self.panel = LoginPanel(self)\n\n        # Layout\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.panel, 1, wx.EXPAND)\n        self.SetSizer(sizer)\n        self.SetInitialSize()\n\n    def GetUsername(self):\n        return self.panel.GetUsername()\n\n    def GetPassword(self):\n        return self.panel.GetPassword()\n\n```", "```py\nclass LoginPanel(wx.Panel):\n    def __init__(self, parent):\n        super(LoginPanel, self).__init__(parent)\n\n        # Attributes\n        self._username = wx.TextCtrl(self)\n        self._passwd = wx.TextCtrl(self, style=wx.TE_PASSWORD)\n\n        # Layout\n        sizer = wx.FlexGridSizer(2, 2, 8, 8)\n        sizer.Add(wx.StaticText(self, label=\"Username:\"),\n                  0, wx.ALIGN_CENTER_VERTICAL)\n        sizer.Add(self._username, 0, wx.EXPAND)\n        sizer.Add(wx.StaticText(self, label=\"Password:\"),\n                  0, wx.ALIGN_CENTER_VERTICAL)\n        sizer.Add(self._passwd, 0, wx.EXPAND)\n        msizer = wx.BoxSizer(wx.VERTICAL)\n        msizer.Add(sizer, 1, wx.EXPAND|wx.ALL, 20)\n        btnszr = wx.StdDialogButtonSizer()\n        button = wx.Button(self, wx.ID_OK)\n        button.SetDefault()\n        btnszr.AddButton(button)\n        msizer.Add(btnszr, 0, wx.ALIGN_CENTER|wx.ALL, 12)\n        btnszr.Realize()\n\n        self.SetSizer(msizer)\n\n    def GetUsername(self):\n        return self._username.GetValue()\n\n    def GetPassword(self):\n        return self._passwd.GetValue()\n\n```", "```py\nclass ChoicePanel(wx.Panel):\n    def __init__(self, parent):\n        super(ChoicePanel, self).__init__(parent)\n\n        # Attributes\n        items = [\"item 1\", \"item 2\", \"item 3\"]\n        self.choice = wx.Choice(self, choices=items)\n        self.choice.SetSelection(0)\n\n        # Layout\n        sizer = wx.BoxSizer()\n        sizer.Add(self.choice, 1,\n                  wx.EXPAND|wx.ALL, 20)\n        self.SetSizer(sizer)\n\n        # Event Handlers\n        self.Bind(wx.EVT_CHOICE, self.OnChoice)\n\n    def OnChoice(self, event):\n        selection = self.choice.GetStringSelection()\n        index = self.choice.GetSelection()\n        print \"Selected Item: %d '%s'\" % (index, selection)\n\n```", "```py\nID_READ_ONLY = wx.NewId()\n\nclass MenuFrame(wx.Frame):\n    def __init__(self, *args, **kwargs):\n        super(MenuFrame, self).__init__(*args, **kwargs)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n        self.txtctrl = wx.TextCtrl(self.panel,\n                                   style=wx.TE_MULTILINE)\n\n        # Layout\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(self.txtctrl, 1, wx.EXPAND)\n        self.panel.SetSizer(sizer)\n        self.CreateStatusBar() # For output display\n\n        # Setup the Menu\n        menub = wx.MenuBar()\n\n        # File Menu\n        filem = wx.Menu()\n        filem.Append(wx.ID_OPEN, \"Open\\tCtrl+O\")\n        menub.Append(filem, \"&File\")\n\n        # Edit Menu\n        editm = wx.Menu()\n        editm.Append(wx.ID_COPY, \"Copy\\tCtrl+C\")\n        editm.Append(wx.ID_CUT, \"Cut\\tCtrl+X\")\n        editm.Append(wx.ID_PASTE, \"Paste\\tCtrl+V\")\n        editm.AppendSeparator()\n        editm.Append(ID_READ_ONLY, \"Read Only\",\n                     kind=wx.ITEM_CHECK)\n        menub.Append(editm, \"E&dit\")\n        self.SetMenuBar(menub)\n\n        # Event Handlers\n        self.Bind(wx.EVT_MENU, self.OnMenu)\n\n    def OnMenu(self, event):\n        \"\"\"Handle menu clicks\"\"\"\n        evt_id = event.GetId()\n        actions = { wx.ID_COPY  : self.txtctrl.Copy,\n                    wx.ID_CUT   : self.txtctrl.Cut,\n                    wx.ID_PASTE : self.txtctrl.Paste }\n        action = actions.get(evt_id, None)\n        if action:\n            action()\n        elif evt_id == ID_READ_ONLY:\n            # Toggle enabled state\n            self.txtctrl.Enable(not self.txtctrl.Enabled)\n        elif evt_id == wx.ID_OPEN:\n            dlg = wx.FileDialog(self, \"Open File\", \n                                style=wx.FD_OPEN)\n            if dlg.ShowModal() == wx.ID_OK:\n                fname = dlg.GetPath()\n                handle = open(fname, 'r')\n                self.txtctrl.SetValue(handle.read())\n                handle.close()\n        else:\n            event.Skip()\n\n```", "```py\nART_MAP = { wx.ID_CUT : wx.ART_CUT,\n            wx.ID_COPY : wx.ART_COPY,\n            wx.ID_PASTE : wx.ART_PASTE }\n\nclass EasyToolBar(wx.ToolBar):\n    def AddEasyTool(self, id, shortHelp=u\"\", longHelp=u\"\"):\n        \"\"\"Simplifies adding a tool to the toolbar\n        @param id: Stock ID\n\n        \"\"\"\n        assert id in ART_MAP, \"Unknown Stock ID\"\n        art_id = ART_MAP.get(id)\n        bmp = wx.ArtProvider.GetBitmap(art_id, wx.ART_TOOLBAR)\n        self.AddSimpleTool(id, bmp, shortHelp, longHelp)\n\n```", "```py\nclass ToolBarFrame(wx.Frame):\n    def __init__(self, *args, **kwargs):\n        super(ToolBarFrame, self).__init__(*args, **kwargs)\n\n        # Setup the ToolBar\n        toolb = EasyToolBar(self)\n        toolb.AddEasyTool(wx.ID_CUT)\n        toolb.AddEasyTool(wx.ID_COPY)\n        toolb.AddEasyTool(wx.ID_PASTE)\n        toolb.Realize()\n        self.SetToolBar(toolb)\n\n        # Event Handlers\n        self.Bind(wx.EVT_TOOL, self.OnToolBar)\n\n    def OnToolBar(self, event):\n        print \"ToolBarItem Clicked\", event.GetId()\n\n```", "```py\nclass PopupMenuMixin(object):\n    def __init__(self):\n        super(PopupMenuMixin, self).__init__()\n\n        # Attributes\n        self._menu = None\n\n        # Event Handlers\n        self.Bind(wx.EVT_CONTEXT_MENU, self.OnContextMenu)\n\n    def OnContextMenu(self, event):\n        \"\"\"Creates and shows the Menu\"\"\"\n        if self._menu is not None:\n            self._menu.Destroy()\n\n        self._menu = wx.Menu()\n        self.CreateContextMenu(self._menu)\n        self.PopupMenu(self._menu)\n\n    def CreateContextMenu(self, menu):\n        \"\"\"Override in subclass to create the menu\"\"\"\n        raise NotImplementedError\n\n```", "```py\nclass PanelWithMenu(wx.Panel, PopupMenuMixin):\n    def __init__(self, parent):\n        wx.Panel.__init__(self, parent)\n        PopupMenuMixin.__init__(self)\n\n    def CreateContextMenu(self, menu):\n        \"\"\"PopupMenuMixin Implementation\"\"\"\n        menu.Append(wx.ID_CUT)\n        menu.Append(wx.ID_COPY)\n        menu.Append(wx.ID_PASTE)\n\n```", "```py\nclass MyPanel(wx.Panel):\n    def __init__(self, parent):\n        super(MyPanel, self).__init__(parent)\n\n        # Layout\n        sbox = wx.StaticBox(self, label=\"Box Label\")\n        sboxsz = wx.StaticBoxSizer(sbox, wx.VERTICAL)\n\n        # Add some controls to the box\n        cb = wx.CheckBox(self, label=\"Enable\")\n        sboxsz.Add(cb, 0, wx.ALL, 8)\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(wx.StaticText(self, label=\"Value:\"))\n        sizer.Add((5, 5))\n        sizer.Add(wx.TextCtrl(self))\n        sboxsz.Add(sizer, 0, wx.ALL, 8)8)\n\n        msizer = wx.BoxSizer(wx.VERTICAL)\n        msizer.Add(sboxsz, 0, wx.EXPAND|wx.ALL, 20)\n        self.SetSizer(msizer)\n\n```"]