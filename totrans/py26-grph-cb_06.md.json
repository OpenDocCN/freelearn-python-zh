["```py\n# image_getattributes_1.py\n# >>>>>>>>>>>>>>>>>>\nimport Image\nimageFile = \"/constr/pics1/canary_a.jpg\"\nim_1 = Image.open(imageFile)\nim_width = im_1.size[0]\nim_height = im_1.size[1]\nim_mode = im_1.mode\nim_format = im_1.format\nprint \"Size: \",im_width, im_height\nprint \"Mode: \",im_mode\nprint \"Format: \",im_format\nim_1.show()\n\n```", "```py\n# images_jpg2png_1.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nimport Image\nim_1 = Image.open(\"/constr/pics1/duzi_leo_1.jpg\")\nim_1.show()\nim_1.save('/constr/picsx/duzi_leo_2.png', 'PNG')\n\n```", "```py\n# images_one2another_1.py\n#>>>>>>>>>>>>>>>>>>>>>\nimport Image\n# Convert a jpg image to OTHER formats\nim_1 = Image.open(\"/constr/pics1/test_pattern_1.jpg\")\nim_1.save('/constr/picsx/test_pattern_2.png', 'PNG')\nim_1.save('/constr/picsx/test_pattern_3.gif', 'GIF')\nim_1.save('/constr/picsx/test_pattern_4.tif', 'TIFF')\nim_1.save('/constr/picsx/test_pattern_5.bmp', 'BMP')\n# Convert a png image to OTHER formats\nim_2 = Image.open(\"/constr/picsx/test_pattern_2.png\")\nim_2.save('/constr/picsx/test_pattern_6.jpg', 'JPEG')\nim_2.save('/constr/picsx/test_pattern_7.gif', 'GIF')\nim_2.save('/constr/picsx/test_pattern_8.tif', 'TIFF')\nim_2.save('/constr/picsx/test_pattern_9.bmp', 'BMP')\n# Convert a gif image to OTHER formats\n# It seems that gif->jpg does not work\nim_3 = Image.open(\"/constr/pics1/test_pattern_3.gif\")\n#im_3.save('/constr/pics1/test_pattern_10.jpg', 'JPEG')\n# \"IOError \"cannot write mode P as JPEG\"\nim_3.save('/constr/picsx/test_pattern_11.png', 'PNG')\nim_3.save('/constr/picsx/test_pattern_12.tif', 'TIFF')\nim_3.save('/constr/picsx/test_pattern_13.bmp', 'BMP')\n# Convert a tif image to OTHER formats\nim_4 = Image.open(\"/constr/picsx/test_pattern_4.tif\")\nim_4.save('/constr/picsx/test_pattern_14.png', 'PNG')\nim_4.save('/constr/picsx/test_pattern_15.gif', 'GIF')\nim_4.save('/constr/picsx/test_pattern_16.tif', 'TIFF')\nim_4.save('/constr/picsx/test_pattern_17.bmp', 'BMP')\n# Convert a bmp image to OTHER formats\nim_5 = Image.open(\"/constr/picsx/test_pattern_5.bmp\")\nim_5.save('/constr/picsx/test_pattern_18.png', 'PNG')\nim_5.save('/constr/picsx/test_pattern_19.gif', 'GIF')\nim_5.save('/constr/picsx/test_pattern_20.tif', 'TIFF')\nim_5.save('/constr/picsx/test_pattern_21.jpg', 'JPEG')\n\n```", "```py\n# image_rotate_1.py\n#>>>>>>>>>>>>>>>>\nimport Image\nim_1 = Image.open(\"/constr/pics1/dusi_leo.png\")\nim_2= im_1.rotate(-90)\nim_2.show()\nim_2.save(\"/constr/picsx/dusi_leo_rightway.png\")\n\n```", "```py\n# image_resize_1.py\n#>>>>>>>>>>>>>>>>\nimport Image\nim_1 = Image.open(\"/constr/pics1/dusi_leo_1.jpg\")\n# adjust width and height to desired size\nwidth = 300\nheight = 300\n# NEAREST Filter is compulsory to resize the image\nim_2 = im_1.resize((width, height), Image.NEAREST)\nim_2.save(\"/constr/picsx/dusi_leo_2.jpg\")\n\n```", "```py\n# image_preserved_aspect_resize_1.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>\nimport Image\nim_1 = Image.open(\"/constr/pics1/dusi_leo_1.jpg\")\nim_width = im_1.size[0]\nim_height = im_1.size[1]\nprint im_width, im_height\nnew_size = 0.2 # New image to be reduced to one fifth of original.\n# adjust width and height to desired size\nwidth = int(im_width * new_size)\nheight = int(im_height * new_size)\n# Filter is compulsory to resize the image\nim_2 = im_1.resize((width, height), Image.NEAREST)\nim_2.save(\"/constr/picsx/dusi_leo_3.jpg\")\n\n```", "```py\n#image_get_green_1.py\n#>>>>>>>>>>>>>>>>>>\nimport ImageEnhance\nimport Image\nred_frac = 1.0\ngreen_frac = 1.0\nblue_frac = 1.0\nim_1 = Image.open(\"/a_constr/pics1/dusi_leo_1.jpg\")\n# split the image into individual bands\nsource = im_1.split()\nR, G, B = 0, 1, 2\n# Assign color intensity bands, zero for red and blue.\nred_band = source[R].point(lambda i: i * 0.0)\ngreen_band = source[G]\nblue_band = source[B].point(lambda i: i * 0.0)\nnew_source = [red_band, green_band, blue_band]\n# Merge (add) the three color bands\nim_2 = Image.merge(im_1.mode, new_source)\nim_2.show()\n\n```", "```py\n#image_color_manip_1.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nimport ImageEnhance, Image\nim_1 = Image.open(\"/constr/pics1/dusi_leo_smlr_1.jpg\")\n# Split the image into individual bands\nsource = im_1.split()\nR, G, B = 0, 1, 2\n# Select regions where red is less than 100\nred_band = source[R]\ngreen_band = source[G]\nblue_band = source[B]\n# Process the red band: intensify red x 2\nout_red = source[R].point(lambda i: i * 2.0)\n# Process the green band: weaken by 20%\nout_green = source[G].point(lambda i: i * 0.8)\n# process the blue band: Eliminate all blue\nout_blue = source[B].point(lambda i: i * 0.0)\n# Make a new source of color band values\nnew_source = [out_red, out_green, out_blue]\n# Add the three altered bands back together\nim_2 = Image.merge(im_1.mode, new_source)\nim_2.show()\n\n```", "```py\n#image_color_adjuster_1.py\n#>>>>>>>>>>>>>>>>>>>\nimport ImageEnhance\nimport Image\nimport Tkinter\nroot =Tkinter.Tk()\nroot.title(\"Photo Image Color Adjuster\")\nred_frac = 1.0\ngreen_frac = 1.0\nblue_frac = 1.0\nslide_value_red = Tkinter.IntVar()\nslide_value_green = Tkinter.IntVar()\nslide_value_blue = Tkinter.IntVar()\nim_1 = Image.open(\"/constr/pics1/dusi_leo_smlr_1.jpg\")\nim_1.show()\nsource = im_1.split() # split the image into individual bands\nR, G, B = 0, 1, 2\n# Assign color intensity bands\nred_band = source[R]\ngreen_band = source[G]\nblue_band = source[B]\n#===============================================\n# Slider and Button event service functions (callbacks)\ndef callback_button_1():\ntoolconstructing, for desirable color mix# Adjust red intensity by slider value.\nout_red = source[R].point(lambda i: i * red_frac)\nout_green = source[G].point(lambda i: i * green_frac) # Adjust # green\nout_blue = source[B].point(lambda i: i * blue_frac) # Adjust # blue\nnew_source = [out_red, out_green, out_blue]\nim_2 = Image.merge(im_1.mode, new_source) # Re-combine bands\nim_2.show()\nbutton_1= Tkinter.Button(root,bg= \"sky blue\", text= \"Display adjusted image \\\n(delete previous one)\", command=callback_ \\button_1)\nbutton_1.grid(row=1, column=2, columnspan=3)\ndef callback_red(*args):\nglobal red_frac\nred_frac = slide_value_red.get()/100.0\ndef callback_green(*args):\nglobal green_frac\ngreen_frac = slide_value_green.get()/100.0\ndef callback_blue(*args):\nglobal blue_frac\nblue_frac = slide_value_blue.get()/100.0\nslide_value_red.trace_variable(\"w\", callback_red)\nslide_value_green.trace_variable(\"w\", callback_green)\nslide_value_blue.trace_variable(\"w\", callback_blue)\nslider_red = Tkinter.Scale(root,\nlength = 400,\nfg = 'red',\nactivebackground = \"tomato\",\nbackground = \"grey\",\ntroughcolor = \"red\",\nlabel = \"RED\",\nfrom_ = 0,\nto = 200,\nresolution = 1,\nvariable = slide_value_red,\norient = 'vertical')\nslider_red.grid(row=0, column=2)\nslider_green = Tkinter.Scale(root,\nlength = 400,\nfg = 'dark green',\nactivebackground = \"green yellow\",\nbackground = \"grey\",\ntroughcolor = \"green\",\nlabel = \"GREEN\",\nfrom_ = 0,\nto = 200,\ntoolconstructing, for desirable color mixresolution = 1,\nvariable = slide_value_green,\norient = 'vertical')\nslider_green.grid(row=0, column=3)\nslider_blue = Tkinter.Scale(root,\nlength = 400,\nfg = 'blue',\nactivebackground = \"turquoise\",\nbackground = \"grey\",\ntroughcolor = \"blue\",\nlabel = \"BLUE\",\nfrom_ = 0,\nto = 200,\nresolution = 1,\nvariable = slide_value_blue,\norient = 'vertical')\nslider_blue.grid(row=0, column=4)\nroot.mainloop()\n#===============================================\n\n```", "```py\n# image_blend_1.py\n# >>>>>>>>>>>>>>>>\nimport Image\nim_1 = Image.open(\"/constr/pics1/100_canary.png\") # mode is RGBA\nim_2 = Image.open(\"/constr/pics1/100_cockcrow.png\") # mode is RGB\n# Check on mode, size and format first for compatibility.\nprint \"im_1 format:\", im_1.format, \";size:\", im_1.size, \"; mode:\",im_1.mode\nprint \"im_2 format:\", im_2.format, \";size:\", im_2.size, \"; mode:\",im_2.mode\nim_2 = im_2.convert(\"RGBA\") # Make both modes the same\nim_4 = Image.blend(im_1, im_2, 0.5)\nim_4.show()\n\n```", "```py\n# image_blend_2.py\n# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nimport Image\nim_1 = Image.open(\"/constr/pics1/lion_ramp_2.png\")\nim_2 = Image.open(\"/constr/pics1/fiery_2.png\")\n# Various degrees of alpha\nim_3 = Image.blend(im_1, im_2, 0.05) # 95% im_1, 5% im_2\nim_4 = Image.blend(im_1, im_2, 0.2)\nim_5 = Image.blend(im_1, im_2, 0.5)\nim_6 = Image.blend(im_1, im_2, 0.6)\nim_7 = Image.blend(im_1, im_2, 0.8)\nim_8 = Image.blend(im_1, im_2, 0.95) # 5% im_1, 95% im_2\nim_3.save(\"/constr/picsx/fiery_lion_1.png\")\nim_4.save(\"/constr/picsx/fiery_lion_2.png\")\nim_5.save(\"/constr/picsx/fiery_lion_3.png\")\nim_6.save(\"/constr/picsx/fiery_lion_4.png\")\nim_7.save(\"/constr/picsx/fiery_lion_5.png\")\nim_8.save(\"/constr/picsx/fiery_lion_6.png\")\n\n```", "```py\n# image_composite_1.py\n# >>>>>>>>>>>>>>>>>\nimport Image\nim_1 = Image.open(\"/constr/pics1/100_canary.png\") # mode is RGBA\nim_2 = Image.open(\"/constr/pics1/100_cockcrow.png\") # mode is RGB\nim_3 = Image.open(\"/constr/pics1/100_sun_1.png\")\n# Check on mode, size and format first for compatibility.\nprint \"im_1 format:\", im_1.format, \";size:\", im_1.size, \"; mode:\", \\im_1.mode\nprint \"im_2 format:\", im_2.format, \";size:\", im_2.size, \"; mode:\", \\im_2.mode\nprint \"im_3 format:\", im_3.format, \";size:\", im_3.size, \"; mode:\", \\im_3.mode\nim_2 = im_2.convert(\"RGBA\")\nim_3 = im_3.convert(\"L\")\nim_4 = Image.composite(im_1, im_2, im_3)\nim_4.show()\n\n```", "```py\n# image_offset_1.py\n# >>>>>>>>>>>>>>>\nimport Image\nimport ImageChops\nim_1 = Image.open(\"/constr/pics1/canary_a.jpg\")\n# adjust width and height to desired size\ndx = 200\ndy = 300\nim_2 = ImageChops.offset(im_1, dx, dy)\nim_2.save(\"/constr/picsx/canary_2.jpg\")\n\n```", "```py\n# image_flips_1.py\n#>>>>>>>>>>>>>>\nimport Image\nim_1 = Image.open(\"/a_constr/pics1/dusi_leo_1.jpg\")\nim_out_1 = im_1.transpose(Image.FLIP_LEFT_RIGHT)\nim_out_2 = im_1.transpose(Image.FLIP_TOP_BOTTOM)\nim_out_3 = im_1.transpose(Image.ROTATE_90)\nim_out_4 = im_1.transpose(Image.ROTATE_180)\nim_out_5 = im_1.transpose(Image.ROTATE_270)\nim_out_1.save(\"/a_constr/picsx/dusi_leo_horizontal.jpg\")\nim_out_1.save(\"/a_constr/picsx/dusi_leo_vertical.jpg\")\nim_out_1.save(\"/a_constr/picsx/dusi_leo_90.jpg\")\nim_out_1.save(\"/a_constr/picsx/dusi_leo_180.jpg\")\nim_out_1.save(\"/a_constr/picsx/duzi_leo_270.jpg\")\n\n```", "```py\n# image_pileof_filters_1.py\n# >>>>>>>>>>>>>>>>>>>\nimport ImageFilter\nim_1 = Image.open(\"/constr/pics1/russian_doll.png\")\nim_2 = im_1.filter(ImageFilter.BLUR)\nim_3 = im_1.filter(ImageFilter.CONTOUR)\nim_4 = im_1.filter(ImageFilter.DETAIL)\nim_5 = im_1.filter(ImageFilter.EDGE_ENHANCE)\nim_6 = im_1.filter(ImageFilter.EDGE_ENHANCE_MORE)\nim_7 = im_1.filter(ImageFilter.EMBOSS)\nim_8 = im_1.filter(ImageFilter.FIND_EDGES)\nim_9 = im_1.filter(ImageFilter.SMOOTH)\nim_10 = im_1.filter(ImageFilter.SMOOTH_MORE)\nim_11 = im_1.filter(ImageFilter.SHARPEN)\nim_2.save(\"/constr/picsx/russian_doll_BLUR.png\")\nim_3.save(\"/constr/picsx/ russian_doll_CONTOUR.png\")\nim_4.save(\"/constr/picsx/ russian_doll_DETAIL.png\")\nim_5.save(\"/constr/picsx/ russian_doll_EDGE_ENHANCE.png\")\nim_6.save(\"/constr/picsx/ russian_doll_EDGE_ENHANCE_MORE.png\")\nim_7.save(\"/constr/picsx/ russian_doll_EMBOSS.png\")\nim_8.save(\"/constr/picsx/ russian_doll_FIND_EDGES.png\")\nim_9.save(\"/constr/picsx/ russian_doll_SMOOTH.png\")\nim_10.save(\"/constr/picsx/ russian_doll_SMOOTH_MORE.png\")\nim_11.save(\"/constr/picsx/ russian_doll_SHARPEN.png\")\n\n```", "```py\n# image_rotate_resize_1.py\n# >>>>>>>>>>>>>>>>>>>>\nimport Image\nimport math\nTHETADEG = 5.0 # degrees\nTHETARAD = math.radians(THETADEG)\nim_1 = Image.open(\"/constr/pics1/blank.png\")\nim_seed = Image.open(\"/constr/pics1/100_canary.png\") # THE SEED IMAGE\nim_seq_name = \"canary\"\n#GET IMAGE WIDTH AND HEIGHT - not done here\n# For the time being assume the image is 100 x 100\nwidth = 100\nheight = 100\nnum_images = int(math.pi/(2*THETARAD))\nQ = []\nfor j in range(0,2*num_images + 1):\nQ.append(j)\nfor i in range(0, num_images):\nnew_size = width * math.cos(i*THETARAD) # Width for reduced # image\nim_temp = im_seed.resize((new_size, height), Image.NEAREST)\nim_width = im_temp.size[0] # Get the width of the reduced image\nx_start = 50 -im_width/2 # Centralize new image in a 100x100 # square.\nim_1.paste(im_temp,( x_start,10)) # Paste: This creates the # annoying ghosting.\nstri = str(i)\n# Save the reduced image\nQ[i] = \"/constr/picsx/\" + im_seq_name + stri + \".gif\"\nim_1.save(Q[i])\n# Flip horizontally and save the reduced image.\nim_transpose = im_temp.transpose(Image.FLIP_LEFT_RIGHT)\nim_1.paste(im_transpose,( x_start,10))\nstrj = str(2 * num_images - i)\nQ[ 2 * num_images - i ] = \"/constr/picsx/\" + im_seq_name + strj \\ + \".gif\"\nim_1.save(Q[ 2 * num_images - i ])\n\n```"]