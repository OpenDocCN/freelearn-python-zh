["```py\nclass MySubClass(object): \n    pass \n```", "```py\nclass Contact:\n   all_contacts: List[\"Contact\"] = []\n   def __init__(self, name: str, email: str) -> None:\n       self.name = name\n       self.email = email\n       Contact.all_contacts.append(self)\n   def __repr__(self) -> str:\n       return (\n           f\"{self.__class__.__name__}(\"\n           f\"{self.name!r}, {self.email!r}\"\n           f\")\"\n      ) \n```", "```py\n>>> c_1 = Contact(\"Dusty\", \"dusty@example.com\")\n>>> c_2 = Contact(\"Steve\", \"steve@itmaybeahack.com\")\n>>> Contact.all_contacts\n[Contact('Dusty', 'dusty@example.com'), Contact('Steve', 'steve@itmaybeahack.com')] \n```", "```py\nclass Supplier(Contact):\n   def order(self, order: \"Order\") -> None:\n       print(\n           \"If this were a real system we would send \"\n           f\"'{order}' order to '{self.name}'\"\n       ) \n```", "```py\n>>> c = Contact(\"Some Body\", \"somebody@example.net\")\n>>> s = Supplier(\"Sup Plier\", \"supplier@example.net\")\n>>> print(c.name, c.email, s.name, s.email)\nSome Body somebody@example.net Sup Plier supplier@example.net\n>>> from pprint import pprint\n>>> pprint(c.all_contacts)\n[Contact('Dusty', 'dusty@example.com'),\n Contact('Steve', 'steve@itmaybeahack.com'),\n Contact('Some Body', 'somebody@example.net'),\n Supplier('Sup Plier', 'supplier@example.net')]\n>>> c.order(\"I need pliers\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'Contact' object has no attribute 'order'\n>>> s.order(\"I need pliers\")\nIf this were a real system we would send 'I need pliers' order to 'Sup Plier' \n```", "```py\nfrom __future__ import annotations\nclass ContactList(list[\"Contact\"]):\n    def search(self, name: str) -> list[\"Contact\"]:\n        matching_contacts: list[\"Contact\"] = []\n        for contact in self:\n            if name in contact.name:\n                matching_contacts.append(contact)\n        return matching_contacts\nclass Contact:\n    all_contacts = ContactList()\n    def __init__(self, name: str, email: str) -> None:\n        self.name = name\n        self.email = email\n        Contact.all_contacts.append(self)\n    def __repr__(self) -> str:\n        return (\n            f\"{self.__class__.__name__}(\" \n            f\"{self.name!r}, {self.email!r}\" f\")\"\n        ) \n```", "```py\n>>> c1 = Contact(\"John A\", \"johna@example.net\")\n>>> c2 = Contact(\"John B\", \"johnb@sloop.net\")\n>>> c3 = Contact(\"Jenna C\", \"cutty@sark.io\")\n>>> [c.name for c in Contact.all_contacts.search('John')]\n['John A', 'John B'] \n```", "```py\n>>> [] == list()\nTrue \n```", "```py\nclass LongNameDict(dict[str, int]):\n    def longest_key(self) -> Optional[str]:\n        \"\"\"In effect, max(self, key=len), but less obscure\"\"\"\n        longest = None\n        for key in self:\n            if longest is None or len(key) > len(longest):\n                longest = key\n        return longest \n```", "```py\n>>> articles_read = LongNameDict()\n>>> articles_read['lucy'] = 42\n>>> articles_read['c_c_phillips'] = 6\n>>> articles_read['steve'] = 7\n>>> articles_read.longest_key()\n'c_c_phillips'\n>>> max(articles_read, key=len)\n'c_c_phillips' \n```", "```py\nclass Friend(Contact):\n    def __init__(self, name: str, email: str, phone: str) -> None:\n        self.name = name\n        self.email = email\n        self.phone = phone \n```", "```py\nclass Friend(Contact):\n    def __init__(self, name: str, email: str, phone: str) -> None:\n        super().__init__(name, email)\n        self.phone = phone \n```", "```py\n>>> f = Friend(\"Dusty\", \"Dusty@private.com\", \"555-1212\")\n>>> Contact.all_contacts\n[Friend('Dusty', 'Dusty@private.com')] \n```", "```py\nclass Emailable(Protocol):\n    email: str\nclass MailSender(Emailable):\n    def send_mail(self, message: str) -> None:\n        print(f\"Sending mail to {self.email=}\")\n        # Add e-mail logic here \n```", "```py\nclass EmailableContact(Contact, MailSender):\n    pass \n```", "```py\n>>> e = EmailableContact(\"John B\", \"johnb@sloop.net\")\n>>> Contact.all_contacts\n[EmailableContact('John B', 'johnb@sloop.net')]\n>>> e.send_mail(\"Hello, test e-mail here\")\nSending mail to self.email='johnb@sloop.net' \n```", "```py\nclass AddressHolder:\n    def __init__(self, street: str, city: str, state: str, code: str) -> None:\n        self.street = street\n        self.city = city\n        self.state = state\n        self.code = code \n```", "```py\nclass Friend(Contact, AddressHolder):\n    def __init__(\n        self,\n        name: str,\n        email: str,\n        phone: str,\n        street: str,\n        city: str,\n        state: str,\n        code: str,\n    ) -> None:\n        Contact.__init__(self, name, email)\n        AddressHolder.__init__(self, street, city, state, code)\n        self.phone = phone \n```", "```py\nclass BaseClass:\n    num_base_calls = 0\n    def call_me(self) -> None:\n        print(\"Calling method on BaseClass\")\n        self.num_base_calls += 1\nclass LeftSubclass(BaseClass):\n    num_left_calls = 0\n    def call_me(self) -> None:\n        BaseClass.call_me(self)\n        print(\"Calling method on LeftSubclass\")\n        self.num_left_calls += 1\nclass RightSubclass(BaseClass):\n    num_right_calls = 0\n    def call_me(self) -> None:\n        BaseClass.call_me(self)\n        print(\"Calling method on RightSubclass\")\n        self.num_right_calls += 1\nclass Subclass(LeftSubclass, RightSubclass):\n    num_sub_calls = 0\n    def call_me(self) -> None:\n        LeftSubclass.call_me(self)\n        RightSubclass.call_me(self)\n        print(\"Calling method on Subclass\")\n        self.num_sub_calls += 1 \n```", "```py\n>>> s = Subclass()\n>>> s.call_me()\nCalling method on BaseClass\nCalling method on LeftSubclass\nCalling method on BaseClass\nCalling method on RightSubclass\nCalling method on Subclass\n>>> print(\n... s.num_sub_calls,\n... s.num_left_calls,\n... s.num_right_calls,\n... s.num_base_calls)\n1 1 1 2 \n```", "```py\nclass BaseClass:\n    num_base_calls = 0\n    def call_me(self):\n        print(\"Calling method on Base Class\")\n        self.num_base_calls += 1\nclass LeftSubclass_S(BaseClass):\n    num_left_calls = 0\n    def call_me(self) -> None:\n        **super().call_me()**\n        print(\"Calling method on LeftSubclass_S\")\n        self.num_left_calls += 1\nclass RightSubclass_S(BaseClass):\n    num_right_calls = 0\n    def call_me(self) -> None:\n        **super().call_me()**\n        print(\"Calling method on RightSubclass_S\")\n        self.num_right_calls += 1\nclass Subclass_S(LeftSubclass_S, RightSubclass_S):\n    num_sub_calls = 0\n    def call_me(self) -> None:\n        **super().call_me()**\n        print(\"Calling method on Subclass_S\")\n        self.num_sub_calls += 1 \n```", "```py\n>>> ss = Subclass_S()\n>>> ss.call_me()\nCalling method on BaseClass\nCalling method on RightSubclass_S\nCalling method on LeftSubclass_S\nCalling method on Subclass_S\n>>> print(\n... ss.num_sub_calls,\n... ss.num_left_calls,\n... ss.num_right_calls,\n... ss.num_base_calls)\n1 1 1 1 \n```", "```py\n>>> from pprint import pprint\n>>> pprint(Subclass_S.__mro__)\n(<class 'commerce_naive.Subclass_S'>,\n <class 'commerce_naive.LeftSubclass_S'>,\n <class 'commerce_naive.RightSubclass_S'>,\n <class 'commerce_naive.BaseClass'>,\n <class 'object'>) \n```", "```py\nContact.__init__(self, name, email)\nAddressHolder.__init__(self, street, city, state, code) \n```", "```py\nclass Contact:\n    all_contacts = ContactList()\n    def __init__(self, /, name: str = \"\", email: str = \"\", **kwargs: Any) -> None:\n        super().__init__(**kwargs)  # type: ignore [call-arg]\n        self.name = name\n        self.email = email\n        self.all_contacts.append(self)\n    def __repr__(self) -> str:\n        return f\"{self.__class__.__name__}(\" f\"{self.name!r}, {self.email!r}\" f\")\"\nclass AddressHolder:\n    def __init__(\n        self,\n        /,\n        street: str = \"\",\n        city: str = \"\",\n        state: str = \"\",\n        code: str = \"\",\n        **kwargs: Any,\n    ) -> None:\n        super().__init__(**kwargs)  # type: ignore [call-arg]\n        self.street = street\n        self.city = city\n        self.state = state\n        self.code = code\nclass Friend(Contact, AddressHolder):\n    def __init__(self, /, phone: str = \"\", **kwargs: Any) -> None:\n        super().__init__(**kwargs)\n        self.phone = phone \n```", "```py\naudio_file.play() \n```", "```py\nfrom pathlib import Path\nclass AudioFile:\n    ext: str\n    def __init__(self, filepath: Path) -> None:\n        if not filepath.suffix == self.ext:\n            raise ValueError(\"Invalid file format\")\n        self.filepath = filepath\nclass MP3File(AudioFile):\n    ext = \".mp3\"\n    def play(self) -> None:\n        print(f\"playing {self.filepath} as mp3\")\nclass WavFile(AudioFile):\n    ext = \".wav\"\n    def play(self) -> None:\n        print(f\"playing {self.filepath} as wav\")\nclass OggFile(AudioFile):\n    ext = \".ogg\"\n    def play(self) -> None:\n        print(f\"playing {self.filepath} as ogg\") \n```", "```py\n>>> p_1 = MP3File(Path(\"Heart of the Sunrise.mp3\"))\n>>> p_1.play()\nplaying Heart of the Sunrise.mp3 as mp3\n>>> p_2 = WavFile(Path(\"Roundabout.wav\"))\n>>> p_2.play()\nplaying Roundabout.wav as wav\n>>> p_3 = OggFile(Path(\"Heart of the Sunrise.ogg\"))\n>>> p_3.play()\nplaying Heart of the Sunrise.ogg as ogg\n>>> p_4 = MP3File(Path(\"The Fish.mov\"))\nTraceback (most recent call last):\n...\nValueError: Invalid file format \n```", "```py\nclass FlacFile:\n    def __init__(self, filepath: Path) -> None:\n        if not filepath.suffix == \".flac\":\n            raise ValueError(\"Not a .flac file\")\n        self.filepath = filepath\n    def play(self) -> None:\n        print(f\"playing {self.filepath} as flac\") \n```", "```py\nclass Playable(Protocol):\n    def play(self) -> None:\n        ... \n```", "```py\nclass ED(Distance):\n    def distance(self, s1: Sample, s2: Sample) -> float:\n        return hypot(\n            s1.sepal_length - s2.sepal_length,\n            s1.sepal_width - s2.sepal_width,\n            s1.petal_length - s2.petal_length,\n            s1.petal_width - s2.petal_width,\n        ) \n```", "```py\nclass Distance:\n    \"\"\"Definition of a distance computation\"\"\"\n    def distance(self, s1: Sample, s2: Sample) -> float:\n        pass \n```", "```py\nclass MD(Distance):\n    def distance(self, s1: Sample, s2: Sample) -> float:\n        return sum(\n            [\n                abs(s1.sepal_length - s2.sepal_length),\n                abs(s1.sepal_width - s2.sepal_width),\n                abs(s1.petal_length - s2.petal_length),\n                abs(s1.petal_width - s2.petal_width),\n            ]\n        ) \n```", "```py\nclass CD(Distance())\n    def distance(self, s1: Sample, s2: Sample) -> float:\n        return sum(\n            [\n                abs(s1.sepal_length - s2.sepal_length),\n                abs(s1.sepal_width - s2.sepal_width),\n                abs(s1.petal_length - s2.petal_length),\n                abs(s1.petal_width - s2.petal_width),\n            ]\n        ) \n```", "```py\nclass SD(Distance):\n    def distance(self, s1: Sample, s2: Sample) -> float:\n        return sum(\n            [\n                abs(s1.sepal_length - s2.sepal_length),\n                abs(s1.sepal_width - s2.sepal_width),\n                abs(s1.petal_length - s2.petal_length),\n                abs(s1.petal_width - s2.petal_width),\n            ]\n        ) / sum(\n            [\n                s1.sepal_length + s2.sepal_length,\n                s1.sepal_width + s2.sepal_width,\n                s1.petal_length + s2.petal_length,\n                s1.petal_width + s2.petal_width,\n            ]\n        ) \n```"]