- en: Chapter 39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Introduction to Files
  prefs: []
  type: TYPE_NORMAL
- en: 39.1 Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All programs you have seen so far can be described as “temporary”. Even though
    they read some input data and display some output results, all of the values are
    stored in variables, lists, and other data structures that exist in the main memory
    (RAM) of your computer; therefore, these values are all lost when the program
    finishes executing. Even if this doesn't happen, they are certainly lost when
    you shut down your computer. There are many cases, however, where you need to
    keep those values in more permanent storage devices, such as a Hard Disk Drive
    (HDD) or a Solid State Drive (SSD).
  prefs: []
  type: TYPE_NORMAL
- en: Python can read input data stored in a computer file or write output results
    in the same or a different file. This reading/writing process is called File I/O
    (File Input/Output) and can be implemented with some of Python's ready-to-use
    functions and methods.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, the type of file being used is a text file. A text file contains a
    sequence of characters and is stored in a permanent storage device (HDD, SSD etc.).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Another type of file being used in computer programming
    is a “binary file”; however, this type is beyond the scope of this book and will
    be no further analyzed.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, you will learn how to open and close a text file,
    how to read values from or write values in a text file, and even how to search
    a value within it.
  prefs: []
  type: TYPE_NORMAL
- en: 39.2 Opening a File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use a file (for reading, writing, or appending), the first thing you need
    to do is open the file. The general form of the Python statement is
  prefs: []
  type: TYPE_NORMAL
- en: descriptor = open(filename [, mode])
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►descriptor is the name of a file object and can be used to read from, write
    in, or append to a file.
  prefs: []
  type: TYPE_NORMAL
- en: ►filename is a string that contains the folder (directory) and the name of the
    file stored in the hard disk (or any other storage device, such as SSD, Flash
    USB disk etc.).
  prefs: []
  type: TYPE_NORMAL
- en: ►mode is a string that defines the way that you want to access the file filename.
    This argument is optional. If omitted, its default value is “r”. The three basic
    values for this argument are shown in the table that follows.
  prefs: []
  type: TYPE_NORMAL
- en: '| mode | Description |'
  prefs: []
  type: TYPE_TB
- en: '| r | It opens a text file for reading. The file pointer is positioned at the
    beginning of the file (position 0). If the file filename does not exist, Python
    throws a runtime error. |'
  prefs: []
  type: TYPE_TB
- en: '| w | It opens a text file for writing. If the file filename already exists,
    Python overwrites it; otherwise, Python creates a new file. |'
  prefs: []
  type: TYPE_TB
- en: '| a | It opens a text file for appending, preserving any previous content in
    the file. The file pointer is positioned at the end of the file. If the file filename
    does not exist, Python creates a new file. |'
  prefs: []
  type: TYPE_TB
- en: '![](img/notice.jpg)To some extent, the file pointer can be likened to the index
    of a list. You will learn more about the file pointer in [Section 39.5](#toc_5).'
  prefs: []
  type: TYPE_NORMAL
- en: Let's see some examples.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1
  prefs: []
  type: TYPE_NORMAL
- en: The following statement
  prefs: []
  type: TYPE_NORMAL
- en: 'f = open("names.txt", "r")        #Equivalent to: f = open("names.txt")'
  prefs: []
  type: TYPE_NORMAL
- en: opens the text file “names.txt” for reading. The file “names.txt” must exist
    in the same folder (directory) where the source code has been saved. If the file
    does not exist, Python throws a runtime error.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The function open() is a built-in function of Python. You
    do not have to import it from any library.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 2
  prefs: []
  type: TYPE_NORMAL
- en: The statement
  prefs: []
  type: TYPE_NORMAL
- en: fgrades = open("c:/temp/grades.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: creates the text file “grades.txt” in the folder (directory) “c:/temp” and opens
    it for writing. If the file already exists, Python overwrites it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the path definition of a file uses the slash (
    / ) and not the backslash ( \ ) character.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 3
  prefs: []
  type: TYPE_NORMAL
- en: The statement
  prefs: []
  type: TYPE_NORMAL
- en: fgrades = open("c:/temp/students/grades.txt", "a")
  prefs: []
  type: TYPE_NORMAL
- en: opens the text file “grades.txt” for appending. The file must exist in the subfolder
    (subdirectory) “students” of the folder (directory) “c:/temp”. If the file does
    not exist, Python creates a new file.
  prefs: []
  type: TYPE_NORMAL
- en: 39.3 Closing a File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After completing reading, writing, or appending operations on a file, it is
    crucial to close the file using the close() method. This method states that the
    use of the file has been completed, leading the operating system (OS) to save
    any unsaved data that may exist in the main memory (RAM). The general form of
    the close() method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: descriptor.close()
  prefs: []
  type: TYPE_NORMAL
- en: where descriptor is the name of the file object that was used to open the file.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see some examples.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1
  prefs: []
  type: TYPE_NORMAL
- en: The following code fragment opens the text file “c:/temp/data.txt” for reading
    and, at the end, it closes it.
  prefs: []
  type: TYPE_NORMAL
- en: fst = open("c:/temp/data.txt")
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: fst.close()
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that when the mode parameter is omitted, the default
    value is "r".'
  prefs: []
  type: TYPE_NORMAL
- en: Example 2
  prefs: []
  type: TYPE_NORMAL
- en: The following code fragment opens the text file “temperatures.txt” for appending
    and, at the end, it closes it.
  prefs: []
  type: TYPE_NORMAL
- en: f = open("temperatures.txt", "a")
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: f.close()
  prefs: []
  type: TYPE_NORMAL
- en: 39.4 Writing in (or Appending to) a File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To write a string in (or even append a string to) a file, you can use the write()
    method. The general form of this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: descriptor.write(str)
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►descriptor is the name of the file object that was used to open the file.
  prefs: []
  type: TYPE_NORMAL
- en: ►str is the string value that you want to write in (or append to) the file.
  prefs: []
  type: TYPE_NORMAL
- en: The following example creates the file “f_data39.4-i.txt” in the folder (directory)
    “c:/temp”. If the file “f_data39.4-i.txt” already exists, Python overwrites it;
    otherwise, Python creates a new file.  Then, the program writes three strings
    in the file, using the write() method.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_39.4a'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fout = open(PATH + "f_data39.4-i.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: fout.write("Good Morning")
  prefs: []
  type: TYPE_NORMAL
- en: fout.write("Good Evening")
  prefs: []
  type: TYPE_NORMAL
- en: fout.write("Good Night")
  prefs: []
  type: TYPE_NORMAL
- en: fout.close()
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to execute the above program and then locate and open (using a notepad
    application) the recently created “c:/temp/f_data39.4-i.txt” file. What you see
    in the file is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Good MorningGood EveningGood Night
  prefs: []
  type: TYPE_NORMAL
- en: All three strings were written in a single row. This happened because, unlike
    the print statement that you're familiar with, the write() method does not automatically
    add a “line break” at the end of the string.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)To open a text file and see what is written inside, you
    can use a simple notepad application, such as the Notepad of Windows. Alternatively,
    you can download free of charge and use the Notepad++ application, from the following
    address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://notepad-plus-plus.org](https://notepad-plus-plus.org)'
  prefs: []
  type: TYPE_NORMAL
- en: To force Python to write a “line break”, you can use the special sequence of
    characters \n (presented in [Section 6.2](chapter06.html#toc_2)). The next example
    opens the previously created file “c:/temp/f_data39.4-i.txt” for appending. Subsequently,
    a “line break” is written along with three lines of text.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_39.4b'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fout = open(PATH + "f_data39.4-i.txt", "a")
  prefs: []
  type: TYPE_NORMAL
- en: fout.write("\n")
  prefs: []
  type: TYPE_NORMAL
- en: fout.write("Hello!\n")
  prefs: []
  type: TYPE_NORMAL
- en: fout.write("Hi!\n")
  prefs: []
  type: TYPE_NORMAL
- en: fout.write("Bye!\n")
  prefs: []
  type: TYPE_NORMAL
- en: fout.close()
  prefs: []
  type: TYPE_NORMAL
- en: 'If you execute this program, and then locate and open the “c:/temp/f_data39-i.txt”
    file with a notepad application, you will now see the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: Good MorningGood EveningGood Night
  prefs: []
  type: TYPE_NORMAL
- en: Hello!
  prefs: []
  type: TYPE_NORMAL
- en: Hi!
  prefs: []
  type: TYPE_NORMAL
- en: Bye!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The first line “Good MorningGood EveningGood Night” was
    already in the file before opening the file for appending.'
  prefs: []
  type: TYPE_NORMAL
- en: The next example creates the file “f_data39.4-ii.txt” in the folder “c:/temp”.
    If the file “f_data39.4-ii.txt” already exists, Python overwrites it, otherwise,
    Python creates a new file. Then, the program writes 10 strings on 10 separate
    lines in the file using the write() method.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_39.4c'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fout = open(PATH + "f_data39.4-ii.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 11):'
  prefs: []
  type: TYPE_NORMAL
- en: fout.write("Line " + str(i) + "\n")
  prefs: []
  type: TYPE_NORMAL
- en: fout.close()
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The argument of the write() method must be of type string.
    If you wish to write a number (integer or float) in the file, you must first convert
    it to a string, using the str() function.'
  prefs: []
  type: TYPE_NORMAL
- en: 39.5 The File Pointer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As already mentioned, the file pointer is quite similar to the index of a list.
    Both are used to specify the point from which to read information or where to
    write new information. However, the main distinction between the file pointer
    and the list index is that the former is automatically moved every time a read
    or write operation is performed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume a file already contains the messages “HELLO JOHN\nHI ALL!”. If
    you open this specific file for reading, the file pointer is automatically placed
    at the beginning of the file, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter39-01.png)'
  prefs: []
  type: TYPE_IMG
- en: If you now perform a read operation (as described in the next section), the
    reading will commence from the position indicated by the file pointer, and the
    pointer will automatically advance towards the end, moving as many positions as
    the characters you have read. Below is the position the file pointer will be in
    if you read 6 characters from the file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter39-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/notice.jpg)The subsequent read operation will start from the position
    where the word “JOHN” begins.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the contrary, if you open a file for appending, the file pointer is automatically
    positioned at the end of the file, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter39-03.png)'
  prefs: []
  type: TYPE_IMG
- en: If you then perform a write operation, the writing will commence from the position
    indicated by the file pointer, and the pointer will automatically advance towards
    the end, moving as many positions as the characters you have written in the file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter39-04.png)'
  prefs: []
  type: TYPE_IMG
- en: 39.6 Reading from a File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose the file “f_data39.6.txt” contains the following text.
  prefs: []
  type: TYPE_NORMAL
- en: 15.3 15 Round the number down
  prefs: []
  type: TYPE_NORMAL
- en: 22.6 23 Round the number up
  prefs: []
  type: TYPE_NORMAL
- en: 55.5 56 Round the number up again
  prefs: []
  type: TYPE_NORMAL
- en: Reading until the end of the current line
  prefs: []
  type: TYPE_NORMAL
- en: To read all the characters from the current position of a file until the end
    of the current line and assign them to variable var_name_str, you can use the
    following statement given in general form
  prefs: []
  type: TYPE_NORMAL
- en: var_name_str = descriptor.readline()
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►descriptor is the name of the file object that was used to open the file.
  prefs: []
  type: TYPE_NORMAL
- en: ►var_name_str can be any variable of type string.
  prefs: []
  type: TYPE_NORMAL
- en: The program that follows assigns the three lines of the file “f_data39.6.txt”
    to the variables s1, s2, and s3.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_39.6a'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "f_data39.6.txt", "r")
  prefs: []
  type: TYPE_NORMAL
- en: s1 = fin.readline()
  prefs: []
  type: TYPE_NORMAL
- en: s2 = fin.readline()
  prefs: []
  type: TYPE_NORMAL
- en: s3 = fin.readline()
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: 'print(s1, end = "")  #It displays: 15.3 15 Round the number down'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(s2, end = "")  #It displays: 22.6 23 Round the number up'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(s3, end = "")  #It displays: 55.5 56 Round the number up again'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)As you already know, the argument end = "" cancels the “line
    break” at the end of the print statement. However, if you execute the previous
    example, you will notice that the three lines of the file are displayed one under
    the other. This happens because the line breaks (special sequence of characters
    \n) already exist in the file (at the end of each line), and they are assigned
    to the variables s1, s2, and s3\. If you want to get rid of these line breaks,
    you can use the strip() method (presented in [Section 14.3](chapter14.html#toc_3)).'
  prefs: []
  type: TYPE_NORMAL
- en: Reading some characters or until the end of the file
  prefs: []
  type: TYPE_NORMAL
- en: To read length number of characters from the current position and assign them
    to variable var_name_str, you can use the following statement given in general
    form. Please note that the argument length is optional. If omitted, all the characters
    from the current position until the end of the file are read.
  prefs: []
  type: TYPE_NORMAL
- en: var_name_str = descriptor.read([length])
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►descriptor is the name of the file object that was used to open the file.
  prefs: []
  type: TYPE_NORMAL
- en: ►var_name_str can be any variable of type string.
  prefs: []
  type: TYPE_NORMAL
- en: ►length can be any value greater than 0 of type integer.
  prefs: []
  type: TYPE_NORMAL
- en: The following program assigns the first two values from the file “f_data39.6.txt”
    to the variables d1, i1 and the text of the first line to the variable s1, while
    removing the line break. Then, it perform the same operation for the second line
    of the file, assigning the values to the variables d2, i2 and s2 respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_39.6b'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "f_data39.6.txt", "r")
  prefs: []
  type: TYPE_NORMAL
- en: d1 = fin.read(4)              #Read '15.3' as string
  prefs: []
  type: TYPE_NORMAL
- en: i1 = fin.read(3)              #Read ' 15' as string (including the leading space)
  prefs: []
  type: TYPE_NORMAL
- en: 's1 = fin.readline().strip()   #Read the text of the first line and remove \n'
  prefs: []
  type: TYPE_NORMAL
- en: 'd2 = float(fin.read(4))       #Read 22.6 as float'
  prefs: []
  type: TYPE_NORMAL
- en: 'i2 = int(fin.read(3))         #Read 23 as integer'
  prefs: []
  type: TYPE_NORMAL
- en: 's2 = fin.readline().strip()   #Read the text of the second line and remove
    \n'
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: 'print(d1)  #It displays: 15.3'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(i1)  #It displays:  15'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(s1)  #It displays: Round the number down'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(d2)  #d2 is a float. It displays: 22.6'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(i2)  #i2 is an integer. It displays: 23'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(s2)  #It displays: Round the number up'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The readline() method reads all the characters from the
    current position of a file until the end of the current line.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, the read() method assigns all the content of the file “f_data39.6.txt”
    to the variable s.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_39.6c'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "f_data39.6.txt", "r")
  prefs: []
  type: TYPE_NORMAL
- en: s = fin.read()
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: 39.7 Iterating Through the Contents of a File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are three approaches to iterate through the contents of a file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s suppose the file “f_to_be_or_not_to_be.txt” contains the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To be, or not to be: that is the question:'
  prefs: []
  type: TYPE_NORMAL
- en: Whether 'tis nobler in the mind to suffer
  prefs: []
  type: TYPE_NORMAL
- en: The slings and arrows of outrageous fortune,
  prefs: []
  type: TYPE_NORMAL
- en: Or to take arms against a sea of troubles,
  prefs: []
  type: TYPE_NORMAL
- en: 'And by opposing end them? To die: to sleep;'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see all three approaches.
  prefs: []
  type: TYPE_NORMAL
- en: First approach
  prefs: []
  type: TYPE_NORMAL
- en: This approach assigns all the contents of a file to a variable and then, using
    a for structure, iterates through the characters of the variable, as shown in
    the example that follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_39.7a'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
  prefs: []
  type: TYPE_NORMAL
- en: s = fin.read()  #Assign the contents of the file to the variable s
  prefs: []
  type: TYPE_NORMAL
- en: 'fin.close()     #Close the file. No need to keep it open any more!'
  prefs: []
  type: TYPE_NORMAL
- en: '#Iterate through the contents of the variable s'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(len(s)):'
  prefs: []
  type: TYPE_NORMAL
- en: print(s[i])
  prefs: []
  type: TYPE_NORMAL
- en: The next example does pretty much the same, but without the variable s.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_39.7b'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
  prefs: []
  type: TYPE_NORMAL
- en: 'for letter in fin.read():'
  prefs: []
  type: TYPE_NORMAL
- en: print(letter)
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)This approach is not suitable when dealing with large files.'
  prefs: []
  type: TYPE_NORMAL
- en: Second approach
  prefs: []
  type: TYPE_NORMAL
- en: A better approach to iterate through the contents of a file is to directly access
    each line of the file using a for structure. The following example displays all
    the lines of the file, one at each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_39.7c'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
  prefs: []
  type: TYPE_NORMAL
- en: 'for line in fin:'
  prefs: []
  type: TYPE_NORMAL
- en: print(line, end = "")
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: Third approach
  prefs: []
  type: TYPE_NORMAL
- en: Another approach to iterate through the contents of a file is to directly access
    each line of the file using a while-loop. The following example displays all the
    lines of the file, one at each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_39.7d'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
  prefs: []
  type: TYPE_NORMAL
- en: line = fin.readline()
  prefs: []
  type: TYPE_NORMAL
- en: 'while line != "":'
  prefs: []
  type: TYPE_NORMAL
- en: print(line, end = "")
  prefs: []
  type: TYPE_NORMAL
- en: line = fin.readline()
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The methods read() and readline() return an empty string
    when the current position is at the end of the file.'
  prefs: []
  type: TYPE_NORMAL
- en: '39.8 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)The contents of a file are lost when you shut down your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 2)If you open a file using the “r” argument, this means that if the file does
    not exist, Python creates a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 3)If you open a file using the “a” argument, this means that if the file does
    not exist, Python creates a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 4)If you open a file using the “w” argument, this means that if the file does
    not exist, Python throws a runtime error.
  prefs: []
  type: TYPE_NORMAL
- en: 5)The statement f = open("filename", "a") overwrites the file filename (when
    the file already exists).
  prefs: []
  type: TYPE_NORMAL
- en: 6)The following program (not code fragment) is correct
  prefs: []
  type: TYPE_NORMAL
- en: ff = open("grades.txt", "r")
  prefs: []
  type: TYPE_NORMAL
- en: print(ff.readline())
  prefs: []
  type: TYPE_NORMAL
- en: fff.close()
  prefs: []
  type: TYPE_NORMAL
- en: 7)The following code fragment is correct
  prefs: []
  type: TYPE_NORMAL
- en: f = open("grades.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: print(f.read())
  prefs: []
  type: TYPE_NORMAL
- en: 8)The following code fragment is correct
  prefs: []
  type: TYPE_NORMAL
- en: f = open("grades.txt")
  prefs: []
  type: TYPE_NORMAL
- en: f.write("OK")
  prefs: []
  type: TYPE_NORMAL
- en: 9)The following code fragment is correct
  prefs: []
  type: TYPE_NORMAL
- en: f = open("grades.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: f.write("OK")
  prefs: []
  type: TYPE_NORMAL
- en: 10)If there are 10 characters in a file named “test.txt”, after executing the
    following program, the size of the file gets bigger.
  prefs: []
  type: TYPE_NORMAL
- en: f = open("test.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: f.write("Hello")
  prefs: []
  type: TYPE_NORMAL
- en: f.close()
  prefs: []
  type: TYPE_NORMAL
- en: 11)After executing the following program, the size of the file “test.txt” gets
    bigger.
  prefs: []
  type: TYPE_NORMAL
- en: f = open("test.txt", "a")
  prefs: []
  type: TYPE_NORMAL
- en: f.write("Hello")
  prefs: []
  type: TYPE_NORMAL
- en: f.close()
  prefs: []
  type: TYPE_NORMAL
- en: 12)The following code fragment is correct.
  prefs: []
  type: TYPE_NORMAL
- en: f = open("c:/data/test.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: f.write(10)
  prefs: []
  type: TYPE_NORMAL
- en: f.close()
  prefs: []
  type: TYPE_NORMAL
- en: 13)After repeatedly executing the following program three times, there will
    be only two lines of text in the file “test.txt”.
  prefs: []
  type: TYPE_NORMAL
- en: f = open("test.txt", "a")
  prefs: []
  type: TYPE_NORMAL
- en: f.write("Good Morning\n")
  prefs: []
  type: TYPE_NORMAL
- en: f.write("Good Evening\n")
  prefs: []
  type: TYPE_NORMAL
- en: f.close()
  prefs: []
  type: TYPE_NORMAL
- en: 14)After repeatedly executing the following program three times, there will
    be only two lines of text in the file “test.txt”.
  prefs: []
  type: TYPE_NORMAL
- en: f = open("test.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: f.write("Good Morning")
  prefs: []
  type: TYPE_NORMAL
- en: f.write("Good Evening")
  prefs: []
  type: TYPE_NORMAL
- en: f.close()
  prefs: []
  type: TYPE_NORMAL
- en: 15)After repeatedly executing the following program three times, there will
    be only two lines of text in the file “test.txt”.
  prefs: []
  type: TYPE_NORMAL
- en: f = open("test.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: f.write("Good Morning\n")
  prefs: []
  type: TYPE_NORMAL
- en: f.write("Good Evening\n")
  prefs: []
  type: TYPE_NORMAL
- en: f.close()
  prefs: []
  type: TYPE_NORMAL
- en: 16)The readline() method reads one line from a file.
  prefs: []
  type: TYPE_NORMAL
- en: 17)The read() method always reads all the characters of a file.
  prefs: []
  type: TYPE_NORMAL
- en: 18)You cannot use a while-loop to iterate through the contents of a file.
  prefs: []
  type: TYPE_NORMAL
- en: 19)You cannot use a for-loop to iterate through the contents of a file.
  prefs: []
  type: TYPE_NORMAL
- en: 20)Suppose there are two lines of text in a file named “test.txt”. After executing
    the following code fragment, only one line of text will be displayed on the user's
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: fin = open("data.txt")
  prefs: []
  type: TYPE_NORMAL
- en: 'for line in fin:'
  prefs: []
  type: TYPE_NORMAL
- en: print(line.strip(), end = "")
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: 21)If the current position is at the end of a file, and a read() method is executed,
    Python returns an empty string.
  prefs: []
  type: TYPE_NORMAL
- en: 22)If the file “test.txt” contains the text as shown below
  prefs: []
  type: TYPE_NORMAL
- en: Hello
  prefs: []
  type: TYPE_NORMAL
- en: World!
  prefs: []
  type: TYPE_NORMAL
- en: then, the following code fragment displays “LOL!” without the double quotes
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: x = []
  prefs: []
  type: TYPE_NORMAL
- en: f = open("test.txt")
  prefs: []
  type: TYPE_NORMAL
- en: x.append(f.readline())
  prefs: []
  type: TYPE_NORMAL
- en: x.append(f.readline())
  prefs: []
  type: TYPE_NORMAL
- en: f.close()
  prefs: []
  type: TYPE_NORMAL
- en: a = ""
  prefs: []
  type: TYPE_NORMAL
- en: a += x[0][2]
  prefs: []
  type: TYPE_NORMAL
- en: a += x[0][4]
  prefs: []
  type: TYPE_NORMAL
- en: a += x[1][3]
  prefs: []
  type: TYPE_NORMAL
- en: a += x[1][5]
  prefs: []
  type: TYPE_NORMAL
- en: print(a.upper())
  prefs: []
  type: TYPE_NORMAL
- en: 39.9 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Write a Python program that creates a text file and writes the days of the
    week (Sunday, Monday etc.), one on each line.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Write a Python program that reads the days of the week from the file created
    in the previous exercise (Sunday, Monday etc.) and stores them into a list. Then,
    the program must display the days of the week in the exact reverse of the order
    in which they are stored in the list.
  prefs: []
  type: TYPE_NORMAL
- en: 3)Write a Python program that appends to the file of the previous exercise the
    text “*** End of File ***”, without the double quotes.
  prefs: []
  type: TYPE_NORMAL
- en: 4)Write a Python program that writes 50 random integers (between 1 and 100)
    in a file named “randoms.txt”, one on each line.
  prefs: []
  type: TYPE_NORMAL
- en: 5)Write a Python program that creates 10 files named “file1.txt”, “file2.txt”,
    … “file10.txt” and writes a random 3-digit integer in each one.
  prefs: []
  type: TYPE_NORMAL
- en: 6)Write a Python program that writes the following multiplication table in a
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 1 x 1 = 1
  prefs: []
  type: TYPE_NORMAL
- en: 1 x 2 = 2
  prefs: []
  type: TYPE_NORMAL
- en: 1 x 3 = 3
  prefs: []
  type: TYPE_NORMAL
- en: 1 x 4 = 4
  prefs: []
  type: TYPE_NORMAL
- en: 2 x 1 = 2
  prefs: []
  type: TYPE_NORMAL
- en: 2 x 2 = 4
  prefs: []
  type: TYPE_NORMAL
- en: 2 x 3 = 6
  prefs: []
  type: TYPE_NORMAL
- en: 2 x 4 = 8
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: 10 x 1 = 10
  prefs: []
  type: TYPE_NORMAL
- en: 10 x 2 = 20
  prefs: []
  type: TYPE_NORMAL
- en: 10 x 3 = 30
  prefs: []
  type: TYPE_NORMAL
- en: 10 x 4 = 40
  prefs: []
  type: TYPE_NORMAL
- en: 7)Write a Python program that displays the number of characters that exist in
    each line of a file.
  prefs: []
  type: TYPE_NORMAL
- en: 8)Write a Python program that displays the number of characters and lines that
    exist in a file.
  prefs: []
  type: TYPE_NORMAL
- en: 9)Write a Python program that, for each line of a file, displays the message
    “There is a punctuation mark on line No XX”, in case there is a punctuation mark
    in the line (check only for commas, periods, and exclamation marks). Please note
    that XX must be replaced by an actual value.
  prefs: []
  type: TYPE_NORMAL
