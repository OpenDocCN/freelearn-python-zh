- en: Chapter 39
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第39章
- en: Introduction to Files
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 文件介绍
- en: 39.1 Introduction
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 39.1 简介
- en: All programs you have seen so far can be described as “temporary”. Even though
    they read some input data and display some output results, all of the values are
    stored in variables, lists, and other data structures that exist in the main memory
    (RAM) of your computer; therefore, these values are all lost when the program
    finishes executing. Even if this doesn't happen, they are certainly lost when
    you shut down your computer. There are many cases, however, where you need to
    keep those values in more permanent storage devices, such as a Hard Disk Drive
    (HDD) or a Solid State Drive (SSD).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你迄今为止看到的所有程序都可以描述为“临时”的。尽管它们读取一些输入数据并显示一些输出结果，但所有这些值都存储在计算机主内存（RAM）中的变量、列表和其他数据结构中；因此，当程序执行完毕时，这些值都会丢失。即使这种情况没有发生，当你关闭计算机时，它们肯定也会丢失。然而，有许多情况下，你需要将这些值保存在更持久的存储设备中，例如硬盘驱动器（HDD）或固态硬盘（SSD）。
- en: Python can read input data stored in a computer file or write output results
    in the same or a different file. This reading/writing process is called File I/O
    (File Input/Output) and can be implemented with some of Python's ready-to-use
    functions and methods.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python可以读取存储在计算机文件中的输入数据或将输出结果写入同一文件或不同文件。这种读取/写入过程称为文件I/O（文件输入/输出），可以使用Python的一些现成函数和方法实现。
- en: Usually, the type of file being used is a text file. A text file contains a
    sequence of characters and is stored in a permanent storage device (HDD, SSD etc.).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，所使用的文件类型是文本文件。文本文件包含一系列字符，并存储在永久存储设备（硬盘驱动器（HDD）、固态硬盘（SSD）等）中。
- en: '![](img/notice.jpg)Another type of file being used in computer programming
    is a “binary file”; however, this type is beyond the scope of this book and will
    be no further analyzed.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在计算机编程中使用的另一种类型的文件是“二进制文件”；然而，这种类型超出了本书的范围，将不再进一步分析。'
- en: In the following sections, you will learn how to open and close a text file,
    how to read values from or write values in a text file, and even how to search
    a value within it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，你将学习如何打开和关闭文本文件，如何从文本文件中读取值或写入值，甚至如何在其中搜索值。
- en: 39.2 Opening a File
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 39.2 打开文件
- en: To use a file (for reading, writing, or appending), the first thing you need
    to do is open the file. The general form of the Python statement is
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用文件（用于读取、写入或追加），你需要做的第一件事是打开文件。Python语句的一般形式是
- en: descriptor = open(filename [, mode])
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: descriptor = open(filename [, mode])
- en: where
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: where
- en: ►descriptor is the name of a file object and can be used to read from, write
    in, or append to a file.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ►描述符是文件对象的名称，可以用来从文件中读取、写入或追加内容。
- en: ►filename is a string that contains the folder (directory) and the name of the
    file stored in the hard disk (or any other storage device, such as SSD, Flash
    USB disk etc.).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ►文件名是一个字符串，包含存储在硬盘（或任何其他存储设备，如SSD、闪存U盘等）中的文件夹（目录）和文件名。
- en: ►mode is a string that defines the way that you want to access the file filename.
    This argument is optional. If omitted, its default value is “r”. The three basic
    values for this argument are shown in the table that follows.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ►模式是一个字符串，它定义了你想访问文件文件名的方式。此参数是可选的。如果省略，其默认值是“r”。此参数的三个基本值如下表所示。
- en: '| mode | Description |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 模式 | 描述 |'
- en: '| r | It opens a text file for reading. The file pointer is positioned at the
    beginning of the file (position 0). If the file filename does not exist, Python
    throws a runtime error. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| r | 它以读取模式打开文本文件。文件指针位于文件开头（位置0）。如果文件文件名不存在，Python将抛出运行时错误。|'
- en: '| w | It opens a text file for writing. If the file filename already exists,
    Python overwrites it; otherwise, Python creates a new file. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| w | 它以写入模式打开文本文件。如果文件文件名已存在，Python将覆盖它；否则，Python将创建一个新文件。|'
- en: '| a | It opens a text file for appending, preserving any previous content in
    the file. The file pointer is positioned at the end of the file. If the file filename
    does not exist, Python creates a new file. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| a | 它以追加模式打开文本文件，保留文件中的任何先前内容。文件指针位于文件末尾。如果文件文件名不存在，Python将创建一个新文件。|'
- en: '![](img/notice.jpg)To some extent, the file pointer can be likened to the index
    of a list. You will learn more about the file pointer in [Section 39.5](#toc_5).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在某种程度上，文件指针可以比作列表的索引。你将在[第39.5节](#toc_5)中了解更多关于文件指针的内容。'
- en: Let's see some examples.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些示例。
- en: Example 1
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1
- en: The following statement
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句
- en: 'f = open("names.txt", "r")        #Equivalent to: f = open("names.txt")'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 'f = open("names.txt", "r") # 等价于：f = open("names.txt")'
- en: opens the text file “names.txt” for reading. The file “names.txt” must exist
    in the same folder (directory) where the source code has been saved. If the file
    does not exist, Python throws a runtime error.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文本文件“names.txt”进行读取。文件“names.txt”必须位于源代码保存的同一文件夹（目录）中。如果文件不存在，Python会抛出运行时错误。
- en: '![](img/notice.jpg)The function open() is a built-in function of Python. You
    do not have to import it from any library.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)open()函数是Python的内置函数。您不需要从任何库中导入它。'
- en: Example 2
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2
- en: The statement
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句
- en: fgrades = open("c:/temp/grades.txt", "w")
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: fgrades = open("c:/temp/grades.txt", "w")
- en: creates the text file “grades.txt” in the folder (directory) “c:/temp” and opens
    it for writing. If the file already exists, Python overwrites it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件夹（目录）“c:/temp”中创建文本文件“grades.txt”并打开它进行写入。如果文件已存在，Python将覆盖它。
- en: '![](img/notice.jpg)Note that the path definition of a file uses the slash (
    / ) and not the backslash ( \ ) character.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意，文件路径的定义使用斜杠（/）而不是反斜杠（\）字符。'
- en: Example 3
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3
- en: The statement
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句
- en: fgrades = open("c:/temp/students/grades.txt", "a")
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: fgrades = open("c:/temp/students/grades.txt", "a")
- en: opens the text file “grades.txt” for appending. The file must exist in the subfolder
    (subdirectory) “students” of the folder (directory) “c:/temp”. If the file does
    not exist, Python creates a new file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文本文件“grades.txt”进行追加。该文件必须位于文件夹（目录）“c:/temp”的子文件夹（子目录）“students”中。如果文件不存在，Python将创建一个新文件。
- en: 39.3 Closing a File
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 39.3 关闭文件
- en: 'After completing reading, writing, or appending operations on a file, it is
    crucial to close the file using the close() method. This method states that the
    use of the file has been completed, leading the operating system (OS) to save
    any unsaved data that may exist in the main memory (RAM). The general form of
    the close() method is as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成对文件的读取、写入或追加操作后，使用close()方法关闭文件至关重要。此方法表示文件的使用已完成，这将导致操作系统（OS）保存主内存（RAM）中可能存在的任何未保存数据。close()方法的通用形式如下：
- en: descriptor.close()
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: descriptor.close()
- en: where descriptor is the name of the file object that was used to open the file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，描述符是用于打开文件的文件对象的名称。
- en: Let's see some examples.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些示例。
- en: Example 1
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1
- en: The following code fragment opens the text file “c:/temp/data.txt” for reading
    and, at the end, it closes it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段打开文本文件“c:/temp/data.txt”进行读取，并在最后关闭它。
- en: fst = open("c:/temp/data.txt")
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: fst = open("c:/temp/data.txt")
- en: A statement or block of statements
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: fst.close()
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: fst.close()
- en: '![](img/notice.jpg)Note that when the mode parameter is omitted, the default
    value is "r".'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意，当省略模式参数时，默认值是 "r"。'
- en: Example 2
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2
- en: The following code fragment opens the text file “temperatures.txt” for appending
    and, at the end, it closes it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段打开文本文件“temperatures.txt”进行追加，并在最后关闭它。
- en: f = open("temperatures.txt", "a")
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: f = open("temperatures.txt", "a")
- en: A statement or block of statements
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: f.close()
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: f.close()
- en: 39.4 Writing in (or Appending to) a File
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 39.4 在文件中写入（或追加）字符串
- en: 'To write a string in (or even append a string to) a file, you can use the write()
    method. The general form of this method is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要在文件中写入字符串（甚至追加字符串），可以使用write()方法。此方法的通用形式如下：
- en: descriptor.write(str)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: descriptor.write(str)
- en: where
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►descriptor is the name of the file object that was used to open the file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ►描述符是用于打开文件的文件对象的名称。
- en: ►str is the string value that you want to write in (or append to) the file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ►str是要写入（或追加到）文件中的字符串值。
- en: The following example creates the file “f_data39.4-i.txt” in the folder (directory)
    “c:/temp”. If the file “f_data39.4-i.txt” already exists, Python overwrites it;
    otherwise, Python creates a new file.  Then, the program writes three strings
    in the file, using the write() method.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例在文件夹（目录）“c:/temp”中创建文件“f_data39.4-i.txt”。如果文件“f_data39.4-i.txt”已存在，Python将覆盖它；否则，Python将创建一个新文件。然后，程序使用write()方法在文件中写入三个字符串。
- en: '![](img/my_exercise_header.png) file_39.4a'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_39.4a'
- en: PATH = "c:/temp/"
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fout = open(PATH + "f_data39.4-i.txt", "w")
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: fout = open(PATH + "f_data39.4-i.txt", "w")
- en: fout.write("Good Morning")
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write("Good Morning")
- en: fout.write("Good Evening")
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write("Good Evening")
- en: fout.write("Good Night")
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write("Good Night")
- en: fout.close()
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: fout.close()
- en: 'Try to execute the above program and then locate and open (using a notepad
    application) the recently created “c:/temp/f_data39.4-i.txt” file. What you see
    in the file is the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试执行上述程序，然后找到并打开（使用记事本应用程序）最近创建的“c:/temp/f_data39.4-i.txt”文件。你在文件中看到的是以下内容：
- en: Good MorningGood EveningGood Night
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Good MorningGood EveningGood Night
- en: All three strings were written in a single row. This happened because, unlike
    the print statement that you're familiar with, the write() method does not automatically
    add a “line break” at the end of the string.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三行字符串都写在了同一行。这是因为，与您熟悉的 print 语句不同，write() 方法不会在字符串末尾自动添加“换行符”。
- en: '![](img/notice.jpg)To open a text file and see what is written inside, you
    can use a simple notepad application, such as the Notepad of Windows. Alternatively,
    you can download free of charge and use the Notepad++ application, from the following
    address:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)要打开一个文本文件并查看其中的内容，您可以使用简单的记事本应用程序，例如 Windows 的记事本。或者，您可以从以下地址免费下载并使用
    Notepad++ 应用程序：'
- en: '[https://notepad-plus-plus.org](https://notepad-plus-plus.org)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://notepad-plus-plus.org](https://notepad-plus-plus.org)'
- en: To force Python to write a “line break”, you can use the special sequence of
    characters \n (presented in [Section 6.2](chapter06.html#toc_2)). The next example
    opens the previously created file “c:/temp/f_data39.4-i.txt” for appending. Subsequently,
    a “line break” is written along with three lines of text.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制 Python 写入“换行符”，可以使用特殊的字符序列 \n（在[第 6.2 节](chapter06.html#toc_2)中介绍）。下一个示例将打开之前创建的文件“c:/temp/f_data39.4-i.txt”进行追加。随后，将写入一个“换行符”和三行文本。
- en: '![](img/my_exercise_header.png) file_39.4b'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_39.4b'
- en: PATH = "c:/temp/"
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fout = open(PATH + "f_data39.4-i.txt", "a")
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: fout = open(PATH + "f_data39.4-i.txt", "a")
- en: fout.write("\n")
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write("\n")
- en: fout.write("Hello!\n")
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write("Hello!\n")
- en: fout.write("Hi!\n")
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write("Hi!\n")
- en: fout.write("Bye!\n")
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write("Bye!\n")
- en: fout.close()
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: fout.close()
- en: 'If you execute this program, and then locate and open the “c:/temp/f_data39-i.txt”
    file with a notepad application, you will now see the following content:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您执行此程序，然后使用记事本应用程序定位并打开“c:/temp/f_data39-i.txt”文件，您现在将看到以下内容：
- en: Good MorningGood EveningGood Night
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Good MorningGood EveningGood Night
- en: Hello!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Hello!
- en: Hi!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Hi!
- en: Bye!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Bye!
- en: '![](img/notice.jpg)The first line “Good MorningGood EveningGood Night” was
    already in the file before opening the file for appending.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在打开文件进行追加之前，第一行“Good MorningGood EveningGood Night”已经存在于文件中。'
- en: The next example creates the file “f_data39.4-ii.txt” in the folder “c:/temp”.
    If the file “f_data39.4-ii.txt” already exists, Python overwrites it, otherwise,
    Python creates a new file. Then, the program writes 10 strings on 10 separate
    lines in the file using the write() method.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例在“c:/temp”文件夹中创建文件“f_data39.4-ii.txt”。如果文件“f_data39.4-ii.txt”已存在，Python
    将覆盖它，否则，Python 将创建一个新文件。然后，程序使用 write() 方法在文件中写入 10 个字符串，每个字符串占一行。
- en: '![](img/my_exercise_header.png) file_39.4c'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_39.4c'
- en: PATH = "c:/temp/"
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fout = open(PATH + "f_data39.4-ii.txt", "w")
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: fout = open(PATH + "f_data39.4-ii.txt", "w")
- en: 'for i in range(1, 11):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, 11):'
- en: fout.write("Line " + str(i) + "\n")
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: fout.write("Line " + str(i) + "\n")
- en: fout.close()
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: fout.close()
- en: '![](img/notice.jpg)The argument of the write() method must be of type string.
    If you wish to write a number (integer or float) in the file, you must first convert
    it to a string, using the str() function.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)write() 方法的参数必须是字符串类型。如果您想在文件中写入一个数字（整数或浮点数），您必须首先使用 str()
    函数将其转换为字符串。'
- en: 39.5 The File Pointer
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 39.5 文件指针
- en: As already mentioned, the file pointer is quite similar to the index of a list.
    Both are used to specify the point from which to read information or where to
    write new information. However, the main distinction between the file pointer
    and the list index is that the former is automatically moved every time a read
    or write operation is performed.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，文件指针与列表索引非常相似。两者都用于指定读取信息或写入新信息的起点。然而，文件指针与列表索引的主要区别在于，每次执行读取或写入操作时，前者会自动移动。
- en: Let's assume a file already contains the messages “HELLO JOHN\nHI ALL!”. If
    you open this specific file for reading, the file pointer is automatically placed
    at the beginning of the file, as shown below.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个文件已经包含消息“HELLO JOHN\nHI ALL!”。如果您为此特定文件打开读取，文件指针将自动放置在文件的开头，如下所示。
- en: '![Image](img/chapter39-01.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter39-01.png)'
- en: If you now perform a read operation (as described in the next section), the
    reading will commence from the position indicated by the file pointer, and the
    pointer will automatically advance towards the end, moving as many positions as
    the characters you have read. Below is the position the file pointer will be in
    if you read 6 characters from the file.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在执行读取操作（如下一节所述），读取将从文件指针指示的位置开始，指针将自动向前移动，移动的位数与读取的字符数相同。以下是从文件中读取 6 个字符时文件指针将处于的位置。
- en: '![Image](img/chapter39-02.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter39-02.png)'
- en: '![](img/notice.jpg)The subsequent read operation will start from the position
    where the word “JOHN” begins.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)随后的读取操作将从单词“JOHN”开始的位置开始。'
- en: 'On the contrary, if you open a file for appending, the file pointer is automatically
    positioned at the end of the file, as illustrated here:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果你为追加而打开一个文件，文件指针将自动定位在文件末尾，如下所示：
- en: '![Image](img/chapter39-03.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter39-03.png)'
- en: If you then perform a write operation, the writing will commence from the position
    indicated by the file pointer, and the pointer will automatically advance towards
    the end, moving as many positions as the characters you have written in the file.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你随后执行写操作，写入将从文件指针指示的位置开始，指针将自动向前移动，移动的位数与你在文件中写入的字符数相同。
- en: '![Image](img/chapter39-04.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter39-04.png)'
- en: 39.6 Reading from a File
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 39.6 从文件中读取
- en: Suppose the file “f_data39.6.txt” contains the following text.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 假设文件“f_data39.6.txt”包含以下文本。
- en: 15.3 15 Round the number down
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 15.3 15 向下取整
- en: 22.6 23 Round the number up
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 22.6 23 向上取整
- en: 55.5 56 Round the number up again
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 55.5 56 再次向上取整
- en: Reading until the end of the current line
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 读取到当前行的末尾
- en: To read all the characters from the current position of a file until the end
    of the current line and assign them to variable var_name_str, you can use the
    following statement given in general form
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要从文件当前位置读取所有字符直到当前行的末尾并将它们赋值给变量 var_name_str，你可以使用以下一般形式的语句
- en: var_name_str = descriptor.readline()
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: var_name_str = descriptor.readline()
- en: where
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►descriptor is the name of the file object that was used to open the file.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: ►descriptor 是用于打开文件的文件对象名称。
- en: ►var_name_str can be any variable of type string.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ►var_name_str 可以是任何类型的字符串变量。
- en: The program that follows assigns the three lines of the file “f_data39.6.txt”
    to the variables s1, s2, and s3.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的程序将文件“f_data39.6.txt”的三个行赋值给变量 s1, s2 和 s3。
- en: '![](img/my_exercise_header.png) file_39.6a'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_39.6a'
- en: PATH = "c:/temp/"
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "f_data39.6.txt", "r")
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "f_data39.6.txt", "r")
- en: s1 = fin.readline()
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: s1 = fin.readline()
- en: s2 = fin.readline()
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: s2 = fin.readline()
- en: s3 = fin.readline()
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: s3 = fin.readline()
- en: fin.close()
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: 'print(s1, end = "")  #It displays: 15.3 15 Round the number down'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: print(s1, end = "")  #它显示：15.3 15 向下取整
- en: 'print(s2, end = "")  #It displays: 22.6 23 Round the number up'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: print(s2, end = "")  #它显示：22.6 23 向上取整
- en: 'print(s3, end = "")  #It displays: 55.5 56 Round the number up again'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: print(s3, end = "")  #它显示：55.5 56 再次向上取整
- en: '![](img/notice.jpg)As you already know, the argument end = "" cancels the “line
    break” at the end of the print statement. However, if you execute the previous
    example, you will notice that the three lines of the file are displayed one under
    the other. This happens because the line breaks (special sequence of characters
    \n) already exist in the file (at the end of each line), and they are assigned
    to the variables s1, s2, and s3\. If you want to get rid of these line breaks,
    you can use the strip() method (presented in [Section 14.3](chapter14.html#toc_3)).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)正如你所知，参数 end = "" 取消了打印语句末尾的“换行符”。然而，如果你执行前面的示例，你会注意到文件的三行是依次显示的。这是因为文件中（每行的末尾）已经存在换行符（特殊字符序列
    \n），并且它们被分配给了变量 s1, s2 和 s3。如果你想去除这些换行符，可以使用 strip() 方法（在[第 14.3 节](chapter14.html#toc_3)中介绍）。'
- en: Reading some characters or until the end of the file
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 读取一些字符或直到文件末尾
- en: To read length number of characters from the current position and assign them
    to variable var_name_str, you can use the following statement given in general
    form. Please note that the argument length is optional. If omitted, all the characters
    from the current position until the end of the file are read.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要从当前位置读取指定数量的字符并将它们赋值给变量 var_name_str，你可以使用以下一般形式的语句。请注意，length 参数是可选的。如果省略，则从当前位置读取直到文件末尾的所有字符。
- en: var_name_str = descriptor.read([length])
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: var_name_str = descriptor.read([length])
- en: where
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►descriptor is the name of the file object that was used to open the file.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ►描述符是用于打开文件的文件对象的名称。
- en: ►var_name_str can be any variable of type string.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ►var_name_str可以是任何字符串类型的变量。
- en: ►length can be any value greater than 0 of type integer.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: ►长度可以是任何大于0的整数类型的值。
- en: The following program assigns the first two values from the file “f_data39.6.txt”
    to the variables d1, i1 and the text of the first line to the variable s1, while
    removing the line break. Then, it perform the same operation for the second line
    of the file, assigning the values to the variables d2, i2 and s2 respectively.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序将文件“f_data39.6.txt”的前两个值分配给变量d1、i1，并将第一行的文本分配给变量s1，同时移除换行符。然后，对文件的第二行执行相同的操作，将值分配给变量d2、i2和s2。
- en: '![](img/my_exercise_header.png) file_39.6b'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_39.6b'
- en: PATH = "c:/temp/"
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "f_data39.6.txt", "r")
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "f_data39.6.txt", "r")
- en: d1 = fin.read(4)              #Read '15.3' as string
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: d1 = fin.read(4)              #将'15.3'作为字符串读取
- en: i1 = fin.read(3)              #Read ' 15' as string (including the leading space)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: i1 = fin.read(3)              #将' 15'作为字符串读取（包括前导空格）
- en: 's1 = fin.readline().strip()   #Read the text of the first line and remove \n'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 's1 = fin.readline().strip()   #读取第一行文本并移除换行符'
- en: 'd2 = float(fin.read(4))       #Read 22.6 as float'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 'd2 = float(fin.read(4))       #将22.6作为浮点数读取'
- en: 'i2 = int(fin.read(3))         #Read 23 as integer'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 'i2 = int(fin.read(3))         #将23作为整数读取'
- en: 's2 = fin.readline().strip()   #Read the text of the second line and remove
    \n'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 's2 = fin.readline().strip()   #读取第二行文本并移除换行符'
- en: fin.close()
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: 'print(d1)  #It displays: 15.3'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: print(d1)  #它显示：15.3
- en: 'print(i1)  #It displays:  15'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: print(i1)  #它显示： 15
- en: 'print(s1)  #It displays: Round the number down'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: print(s1)  #它显示：向下取整
- en: 'print(d2)  #d2 is a float. It displays: 22.6'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: print(d2)  #d2是一个浮点数。它显示：22.6
- en: 'print(i2)  #i2 is an integer. It displays: 23'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: print(i2)  #i2是一个整数。它显示：23
- en: 'print(s2)  #It displays: Round the number up'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: print(s2)  #它显示：向上取整
- en: '![](img/remember.jpg)The readline() method reads all the characters from the
    current position of a file until the end of the current line.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)readline()方法从文件当前位置读取所有字符，直到当前行的末尾。'
- en: In the next example, the read() method assigns all the content of the file “f_data39.6.txt”
    to the variable s.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，read()方法将文件“f_data39.6.txt”的全部内容分配给变量s。
- en: '![](img/my_exercise_header.png) file_39.6c'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_39.6c'
- en: PATH = "c:/temp/"
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "f_data39.6.txt", "r")
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "f_data39.6.txt", "r")
- en: s = fin.read()
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: s = fin.read()
- en: fin.close()
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: print(s)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: 39.7 Iterating Through the Contents of a File
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 39.7 遍历文件内容
- en: There are three approaches to iterate through the contents of a file.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历文件内容有三种方法。
- en: 'Let''s suppose the file “f_to_be_or_not_to_be.txt” contains the following text:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 假设文件“f_to_be_or_not_to_be.txt”包含以下文本：
- en: 'To be, or not to be: that is the question:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要是，还是不是：这是个问题：
- en: Whether 'tis nobler in the mind to suffer
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 是否在心灵中忍受
- en: The slings and arrows of outrageous fortune,
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 生活的箭矢和命运的狂傲，
- en: Or to take arms against a sea of troubles,
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 或者拿起武器对抗海上的麻烦，
- en: 'And by opposing end them? To die: to sleep;'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对抗结束它们？去死：去睡；
- en: Now, let's see all three approaches.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看所有三种方法。
- en: First approach
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: This approach assigns all the contents of a file to a variable and then, using
    a for structure, iterates through the characters of the variable, as shown in
    the example that follows.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法将文件的全部内容分配给一个变量，然后使用for结构遍历变量的字符，如下面的示例所示。
- en: '![](img/my_exercise_header.png) file_39.7a'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_39.7a'
- en: PATH = "c:/temp/"
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
- en: s = fin.read()  #Assign the contents of the file to the variable s
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: s = fin.read()  #将文件内容分配给变量s
- en: 'fin.close()     #Close the file. No need to keep it open any more!'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 'fin.close()     #关闭文件。不再需要保持打开状态！'
- en: '#Iterate through the contents of the variable s'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '#遍历变量s的内容'
- en: 'for i in range(len(s)):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(len(s)):'
- en: print(s[i])
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: print(s[i])
- en: The next example does pretty much the same, but without the variable s.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例几乎做了同样的事情，但没有使用变量s。
- en: '![](img/my_exercise_header.png) file_39.7b'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_39.7b'
- en: PATH = "c:/temp/"
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
- en: 'for letter in fin.read():'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'for letter in fin.read():'
- en: print(letter)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: print(letter)
- en: fin.close()
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: '![](img/notice.jpg)This approach is not suitable when dealing with large files.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)这种方法在处理大文件时并不适用。'
- en: Second approach
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: A better approach to iterate through the contents of a file is to directly access
    each line of the file using a for structure. The following example displays all
    the lines of the file, one at each iteration.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更好的方法是使用for结构直接访问文件的内容的每一行来迭代文件。以下示例显示文件的所有行，每次迭代一行。
- en: '![](img/my_exercise_header.png) file_39.7c'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_39.7c'
- en: PATH = "c:/temp/"
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
- en: 'for line in fin:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 'for line in fin:'
- en: print(line, end = "")
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: print(line, end = "")
- en: fin.close()
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: Third approach
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法
- en: Another approach to iterate through the contents of a file is to directly access
    each line of the file using a while-loop. The following example displays all the
    lines of the file, one at each iteration.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用while循环直接访问文件的内容的每一行来迭代文件。以下示例显示文件的所有行，每次迭代一行。
- en: '![](img/my_exercise_header.png) file_39.7d'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_39.7d'
- en: PATH = "c:/temp/"
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: PATH = "c:/temp/"
- en: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open(PATH + "f_to_be_or_not_to_be.txt", "r")
- en: line = fin.readline()
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: line = fin.readline()
- en: 'while line != "":'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 'while line != "":'
- en: print(line, end = "")
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: print(line, end = "")
- en: line = fin.readline()
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: line = fin.readline()
- en: fin.close()
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: '![](img/notice.jpg)The methods read() and readline() return an empty string
    when the current position is at the end of the file.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)read()和readline()方法在当前位置处于文件末尾时返回空字符串。'
- en: '39.8 Review Questions: True/False'
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 39.8 复习问题：正确/错误
- en: Choose true or false for each of the following statements.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下每个陈述，选择正确或错误。
- en: 1)The contents of a file are lost when you shut down your computer.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 1)当你关闭计算机时，文件的内容会丢失。
- en: 2)If you open a file using the “r” argument, this means that if the file does
    not exist, Python creates a new one.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 2)如果你使用“r”参数打开文件，这意味着如果文件不存在，Python会创建一个新的文件。
- en: 3)If you open a file using the “a” argument, this means that if the file does
    not exist, Python creates a new one.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 3)如果你使用“a”参数打开文件，这意味着如果文件不存在，Python会创建一个新的文件。
- en: 4)If you open a file using the “w” argument, this means that if the file does
    not exist, Python throws a runtime error.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 4)如果你使用“w”参数打开文件，这意味着如果文件不存在，Python会抛出一个运行时错误。
- en: 5)The statement f = open("filename", "a") overwrites the file filename (when
    the file already exists).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 5)f = open("filename", "a")语句会覆盖文件filename（当文件已存在时）。
- en: 6)The following program (not code fragment) is correct
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 6)以下程序（不是代码片段）是正确的
- en: ff = open("grades.txt", "r")
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: ff = open("grades.txt", "r")
- en: print(ff.readline())
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: print(ff.readline())
- en: fff.close()
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: fff.close()
- en: 7)The following code fragment is correct
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 7)以下代码片段是正确的
- en: f = open("grades.txt", "w")
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: f = open("grades.txt", "w")
- en: print(f.read())
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: print(f.read())
- en: 8)The following code fragment is correct
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 8)以下代码片段是正确的
- en: f = open("grades.txt")
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: f = open("grades.txt")
- en: f.write("OK")
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: f.write("OK")
- en: 9)The following code fragment is correct
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 9)以下代码片段是正确的
- en: f = open("grades.txt", "w")
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: f = open("grades.txt", "w")
- en: f.write("OK")
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: f.write("OK")
- en: 10)If there are 10 characters in a file named “test.txt”, after executing the
    following program, the size of the file gets bigger.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 10)如果文件“test.txt”中有10个字符，执行以下程序后，文件的大小会变大。
- en: f = open("test.txt", "w")
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: f = open("test.txt", "w")
- en: f.write("Hello")
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: f.write("你好")
- en: f.close()
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: f.close()
- en: 11)After executing the following program, the size of the file “test.txt” gets
    bigger.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 11)执行以下程序后，文件“test.txt”的大小会变大。
- en: f = open("test.txt", "a")
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: f = open("test.txt", "a")
- en: f.write("Hello")
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: f.write("你好")
- en: f.close()
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: f.close()
- en: 12)The following code fragment is correct.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 12)以下代码片段是正确的。
- en: f = open("c:/data/test.txt", "w")
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: f = open("c:/data/test.txt", "w")
- en: f.write(10)
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: f.write(10)
- en: f.close()
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: f.close()
- en: 13)After repeatedly executing the following program three times, there will
    be only two lines of text in the file “test.txt”.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 13)重复执行以下程序三次后，文件“test.txt”中只有两行文本。
- en: f = open("test.txt", "a")
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: f = open("test.txt", "a")
- en: f.write("Good Morning\n")
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: f.write("早上好\n")
- en: f.write("Good Evening\n")
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: f.write("晚上好\n")
- en: f.close()
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: f.close()
- en: 14)After repeatedly executing the following program three times, there will
    be only two lines of text in the file “test.txt”.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 14)重复执行以下程序三次后，文件“test.txt”中只有两行文本。
- en: f = open("test.txt", "w")
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: f = open("test.txt", "w")
- en: f.write("Good Morning")
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: f.write("早上好")
- en: f.write("Good Evening")
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: f.write("晚上好")
- en: f.close()
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: f.close()
- en: 15)After repeatedly executing the following program three times, there will
    be only two lines of text in the file “test.txt”.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 15)重复执行以下程序三次后，文件“test.txt”中只有两行文本。
- en: f = open("test.txt", "w")
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: f = open("test.txt", "w")
- en: f.write("Good Morning\n")
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: f.write("早上好\n")
- en: f.write("Good Evening\n")
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: f.write("晚上好\n")
- en: f.close()
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: f.close()
- en: 16)The readline() method reads one line from a file.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 16) readline() 方法从文件中读取一行。
- en: 17)The read() method always reads all the characters of a file.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 17) read() 方法总是读取文件中的所有字符。
- en: 18)You cannot use a while-loop to iterate through the contents of a file.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 18) 你不能使用 while 循环遍历文件的内容。
- en: 19)You cannot use a for-loop to iterate through the contents of a file.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 19) 你不能使用 for 循环遍历文件的内容。
- en: 20)Suppose there are two lines of text in a file named “test.txt”. After executing
    the following code fragment, only one line of text will be displayed on the user's
    screen.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 20) 假设文件“test.txt”中有两行文本。在执行以下代码片段后，用户屏幕上只显示一行文本。
- en: fin = open("data.txt")
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: fin = open("data.txt")
- en: 'for line in fin:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 'for line in fin:'
- en: print(line.strip(), end = "")
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: print(line.strip(), end = "")
- en: fin.close()
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: fin.close()
- en: 21)If the current position is at the end of a file, and a read() method is executed,
    Python returns an empty string.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 21) 如果当前位置在文件的末尾，并且执行了 read() 方法，Python 返回一个空字符串。
- en: 22)If the file “test.txt” contains the text as shown below
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 22) 如果文件“test.txt”包含以下文本
- en: Hello
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Hello
- en: World!
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: World!
- en: then, the following code fragment displays “LOL!” without the double quotes
    on the screen.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以下代码片段在屏幕上显示“LOL!”，不带双引号。
- en: x = []
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: x = []
- en: f = open("test.txt")
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: f = open("test.txt")
- en: x.append(f.readline())
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: x.append(f.readline())
- en: x.append(f.readline())
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: x.append(f.readline())
- en: f.close()
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: f.close()
- en: a = ""
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: a = ""
- en: a += x[0][2]
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: a += x[0][2]
- en: a += x[0][4]
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: a += x[0][4]
- en: a += x[1][3]
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: a += x[1][3]
- en: a += x[1][5]
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: a += x[1][5]
- en: print(a.upper())
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: print(a.upper())
- en: 39.9 Review Exercises
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 39.9 复习练习
- en: Complete the following exercises.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Write a Python program that creates a text file and writes the days of the
    week (Sunday, Monday etc.), one on each line.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 编写一个 Python 程序，创建一个文本文件并将一周中的日子（星期日、星期一等），每个一行写入。
- en: 2)Write a Python program that reads the days of the week from the file created
    in the previous exercise (Sunday, Monday etc.) and stores them into a list. Then,
    the program must display the days of the week in the exact reverse of the order
    in which they are stored in the list.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 编写一个 Python 程序，从上一个练习中创建的文件中读取一周中的日子（星期日、星期一等）并将它们存储到一个列表中。然后，程序必须以与它们在列表中存储的顺序相反的顺序显示一周中的日子。
- en: 3)Write a Python program that appends to the file of the previous exercise the
    text “*** End of File ***”, without the double quotes.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 3) 编写一个 Python 程序，将“*** 文件结束 ***”文本追加到上一个练习中的文件中，不带双引号。
- en: 4)Write a Python program that writes 50 random integers (between 1 and 100)
    in a file named “randoms.txt”, one on each line.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 4) 编写一个 Python 程序，将 50 个随机整数（介于 1 和 100 之间）写入名为“randoms.txt”的文件中，每个一行。
- en: 5)Write a Python program that creates 10 files named “file1.txt”, “file2.txt”,
    … “file10.txt” and writes a random 3-digit integer in each one.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 5) 编写一个 Python 程序，创建 10 个文件，分别命名为“file1.txt”、“file2.txt”等，“file10.txt”，并在每个文件中写入一个随机的
    3 位整数。
- en: 6)Write a Python program that writes the following multiplication table in a
    file.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 6) 编写一个 Python 程序，将以下乘法表写入文件。
- en: 1 x 1 = 1
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 1 x 1 = 1
- en: 1 x 2 = 2
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 1 x 2 = 2
- en: 1 x 3 = 3
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 1 x 3 = 3
- en: 1 x 4 = 4
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 1 x 4 = 4
- en: 2 x 1 = 2
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 2 x 1 = 2
- en: 2 x 2 = 4
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 2 x 2 = 4
- en: 2 x 3 = 6
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 2 x 3 = 6
- en: 2 x 4 = 8
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 2 x 4 = 8
- en: …
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: …
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: 10 x 1 = 10
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 10 x 1 = 10
- en: 10 x 2 = 20
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 10 x 2 = 20
- en: 10 x 3 = 30
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 10 x 3 = 30
- en: 10 x 4 = 40
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 10 x 4 = 40
- en: 7)Write a Python program that displays the number of characters that exist in
    each line of a file.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 7) 编写一个 Python 程序，显示文件中每行的字符数。
- en: 8)Write a Python program that displays the number of characters and lines that
    exist in a file.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 8) 编写一个 Python 程序，显示文件中存在的字符数和行数。
- en: 9)Write a Python program that, for each line of a file, displays the message
    “There is a punctuation mark on line No XX”, in case there is a punctuation mark
    in the line (check only for commas, periods, and exclamation marks). Please note
    that XX must be replaced by an actual value.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 9) 编写一个 Python 程序，对于文件的每一行，如果该行中有标点符号（仅检查逗号、句号和感叹号），则显示消息“第 XX 行有标点符号”。请注意，XX
    必须替换为实际值。
