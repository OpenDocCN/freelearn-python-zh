- en: Chapter 1. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 入门
- en: Python comes on some computers as part of the OS. On other computers, we'll
    need to add the Python program and related tools. The installation is pretty simple,
    but we'll review the details to be sure that everyone has a common foundation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python在某些计算机上作为操作系统的一部分提供。在其他计算机上，我们需要添加Python程序和相关工具。安装相当简单，但我们仍将回顾细节，以确保每个人都有一个共同的基础。
- en: Once we have Python, we'll need to confirm that Python is present. In some cases,
    we'll have more than one version of Python available. We need to be sure that
    we're using Python 3.4 or newer. To confirm that Python's available, we'll do
    a few interactions at Python's `>>>` prompt.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了Python，我们需要确认Python确实存在。在某些情况下，我们将有多个Python版本可用。我们需要确保我们使用的是Python 3.4或更新的版本。为了确认Python可用，我们将在Python的`>>>`提示符下进行一些交互。
- en: To extend our foundation for the remaining chapters, we'll look at a few essential
    rules of Python syntax. This isn't complete, but it will help us write scripts
    and learn the language. After we've had more chances to work with simple and compound
    statements, the detailed syntax rules will make sense.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了扩展剩余章节的基础，我们将查看一些Python语法的必要规则。这并不是完整的，但它将帮助我们编写脚本和学习语言。在我们有更多机会处理简单和复合语句之后，详细的语法规则将变得有意义。
- en: We'll also look at the Python "ecosystem", starting with the built-in standard
    library. We'll emphasize the standard library throughout this book for two reasons.
    First, it's immense—much of what we need is already on our computer. Second, and
    more important, studying this library is the best way to learn the finer points
    of Python programming.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将查看Python“生态系统”，从内置的标准库开始。本书中我们将强调标准库，有两个原因。首先，它非常庞大——我们需要的很多东西已经在我们的电脑上了。其次，更重要的是，研究这个库是学习Python编程细节的最佳方式。
- en: Beyond the built-in library, we'll take a look at the **Python Package Index**
    (**PyPI**). If we can't find the right module in the standard library, the second
    place to look for extensions is PyPI—[https://pypi.python.org](https://pypi.python.org).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内置库之外，我们将查看**Python包索引**（**PyPI**）。如果我们无法在标准库中找到合适的模块，第二个地方寻找扩展的地方是PyPI—[https://pypi.python.org](https://pypi.python.org)。
- en: Installation or upgrade
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装或升级
- en: To work with Python on Windows, we must install Python. For Mac OS X and Linux,
    a version of Python is already present; we'll often want to add a newer version
    to the preinstalled Python.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上使用Python，我们必须安装Python。对于Mac OS X和Linux，Python版本已经存在；我们通常会想要添加一个更新的版本到预装的Python中。
- en: 'There are two significantly different flavors of Python available:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的Python有两个显著不同的版本：
- en: Python 2.x
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.x
- en: Python 3.x
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.x
- en: This book is about Python 3.4\. We won't cover Python 2.x at all. There are
    several visible differences. What's important is that Python 2.x is a bit of a
    mess under the hood. Python 3 reflects some fundamental improvements. The improvements
    came at the cost of a few areas where the two versions of the language had to
    be made incompatible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书关于Python 3.4。我们不会涉及Python 2.x。有几个明显的差异。重要的是Python 2.x在底层有点混乱。Python 3反映了某些基本改进。这些改进是以牺牲两个版本的语言在几个领域必须不兼容为代价的。
- en: The Python community is continuing to keep Python 2.x around. Doing this is
    a help to people who are stuck with old software. For the most part, developers
    are moving forward with Python 3 because it's a clear improvement.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python社区正在继续保留Python 2.x。这样做对那些被旧软件困住的人来说是一种帮助。大多数开发者正在向前推进使用Python 3，因为它是一个明显的改进。
- en: 'Before we get started, it''s important to know if Python is already installed.
    The general test to see if Python is already installed is to get an OS command
    prompt. For Windows, use Command Prompt; for Mac OS X or Linux, use the Terminal
    tool. We''ll show Mac OS X prompts from the Mac OS X Terminal. It looks like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，了解Python是否已经安装是很重要的。检查Python是否已经安装的一般测试是获取一个操作系统命令提示符。对于Windows，使用命令提示符；对于Mac
    OS X或Linux，使用终端工具。我们将展示Mac OS X终端的提示。它看起来像这样：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We've shown the OS prompt `MacBookPro-SLott:~ slott$`. We entered the `python3`
    command, which is typical for Linux and Mac OS X. In Windows, we'll often enter
    just `python`. The response was three lines of introduction followed by the `>>>`
    prompt. Enter `exit` and hit *return* to get some useful advice on how to leave
    Python. This example showed Python 3.3, which is a little out of date. An upgrade
    isn't required.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经展示了OS提示符`MacBookPro-SLott:~ slott$`。我们输入了`python3`命令，这在Linux和Mac OS X中很常见。在Windows中，我们通常会输入`python`。响应是三行介绍，然后是`>>>`提示符。输入`exit`并按*回车*键以获取有关如何退出Python的一些有用建议。这个例子展示了Python
    3.3，这有点过时了。不需要升级。
- en: Some kind of "command not found" error from the OS means we don't have any Python,
    so we'll need to do an install.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 来自操作系统的某种“命令未找到”错误意味着我们没有Python，因此我们需要进行安装。
- en: If we get a Python message that starts with something like "Python 2.7.6", we'll
    need to do an upgrade.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们收到一条以类似“Python 2.7.6”开头的Python消息，我们就需要进行升级。
- en: The next section covers Windows installations. After that, we'll look at Mac
    OS X and then we will see Linux upgrades. In some cases, we may develop software
    on Windows desktop computers, but the ultimate destination is a large, centralized
    Linux server. The Python files can be the same between these two environments,
    so having Python on multiple platforms won't be very complex or confusing.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将介绍Windows安装。之后，我们将查看Mac OS X，然后我们将看到Linux升级。在某些情况下，我们可能在Windows桌面上开发软件，但最终目标是大型集中式Linux服务器。这两个环境中的Python文件可以相同，因此Python在多个平台上的使用不会非常复杂或令人困惑。
- en: Installing Python on Windows
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上安装Python
- en: Python runs on many versions of Windows. There are some older, less-widely-used
    versions of Windows without an actively supported version of Python. For example,
    Windows 2000 is not supported.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python可以在许多Windows版本上运行。有一些较旧的、使用较少的Windows版本没有活跃支持的Python版本。例如，Windows 2000不受支持。
- en: The general procedure for installing Python is quite simple. We'll download
    an installer and do some preparation. Then we'll start the installer. Once that's
    finished, we'll be up and running.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Python的一般步骤相当简单。我们将下载一个安装程序并做一些准备工作。然后我们将启动安装程序。一旦完成，我们就可以开始运行了。
- en: 'To find the installer, start here:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到安装程序，从这里开始：
- en: '[https://www.python.org/downloads/](https://www.python.org/downloads/)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.python.org/downloads/](https://www.python.org/downloads/)'
- en: The web server should detect your OS and provide a big button with some variation
    of "Download Python 3.4.x" on it. Click on this button to start the download.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 网络服务器应该检测到您的操作系统，并提供一个带有“下载Python 3.4.x”等变体的按钮。点击此按钮开始下载。
- en: 'To look at the choices available, the [https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)
    path provides all of the actively-supported versions of Python. This will show
    a long list of older versions. There are two installers available:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可用的选项，[https://www.python.org/downloads/windows/](https://www.python.org/downloads/windows/)路径提供了所有活跃支持的Python版本。这将显示一个较旧版本的列表。有两个安装程序可用：
- en: The Windows x86 MSI installer
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows x86 MSI安装程序
- en: The Windows x86-64 MSI installer
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows x86-64 MSI安装程序
- en: If we have a very old computer, we might need the 32-bit version. Most modern
    computers will have a 64-bit CPU. When in doubt, 64-bit is the assumption to make.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一台非常旧的电脑，我们可能需要32位版本。大多数现代电脑都将有64位CPU。如果有疑问，64位是默认选择。
- en: Double-click the `.msi` file to start running the installer. This starts with
    a question about installing Python for yourself or for all users. If you have
    appropriate privileges, the all users option is appropriate. On a shared computer,
    without appropriate privileges, you'll have to install it for yourself only.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 双击`.msi`文件以启动安装程序。这将从询问是为您自己安装Python还是为所有用户安装Python的问题开始。如果您有适当的权限，所有用户选项是合适的。在共享电脑上，如果没有适当的权限，您只能为自己安装。
- en: '![Installing Python on Windows](img/B03671_01_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![在Windows上安装Python](img/B03671_01_01.jpg)'
- en: The second page will ask for an installation directory. Be careful about the
    path that you choose for the installation, and avoid spaces in filenames.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第二页将要求输入安装目录。请小心选择安装路径，并避免在文件名中使用空格。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Do not install Python into directories with spaces in their names. Avoid names
    such as "Program Files" and "My Documents". The space may cause problems that
    are difficult to diagnose.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将Python安装到名称中包含空格的目录中。避免使用“程序文件”和“我的文档”等名称。空格可能会引起难以诊断的问题。
- en: Install Python into a simple directory with a short, space-free name like `C:\python34`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将Python安装到具有简短、无空格名称的简单目录中，如`C:\python34`。
- en: '![Installing Python on Windows](img/B03671_01_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![在Windows上安装Python](img/B03671_01_02.jpg)'
- en: Spaces in filenames is not a general problem, but it is awkward when first starting.
    There are many ways to cope with spaces in filenames. When learning a new programming
    language, however, it's important to minimize the awkward problems so that we
    can focus on the important topics.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名中的空格不是一般问题，但在开始时可能会有些尴尬。有许多方法可以处理文件名中的空格。然而，在学习一门新的编程语言时，减少这些尴尬的问题很重要，这样我们就可以专注于重要的话题。
- en: The next page will also show a menu of components that can be installed; it's
    easiest to request everything. There's no compelling reason to turn off any of
    the optional components. We'll be looking at the IDLE development tool, which
    requires the **Tcl/Tk** package, so it's important to be sure that this is part
    of the installation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下一页还将显示一个可以安装的组件菜单；请求所有内容是最简单的。没有充分的理由关闭任何可选组件。我们将查看需要**Tcl/Tk**包的IDLE开发工具，因此确保它是安装的一部分很重要。
- en: In many cases, the final option on this list updates the system environment
    variables to include Python on the `PATH` variable. This isn't enabled by default,
    but it can be helpful if you're going to write BAT files in Windows.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，此列表中的最后一个选项会将系统环境变量更新为包括`PATH`变量中的Python。这默认是禁用的，但如果您打算在Windows中编写BAT文件，这可能很有帮助。
- en: '![Installing Python on Windows](img/B03671_01_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![在Windows上安装Python](img/B03671_01_03.jpg)'
- en: In addition to the basic Python interpreter, the Windows help installer is very
    helpful. This is a separate download and requires a quick installation. After
    we've installed this, we can use the *F1* key to bring up all of the Python documentation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的Python解释器外，Windows帮助安装程序非常有用。这是一个单独的下载，需要快速安装。安装完成后，我们可以使用*F1*键调出所有的Python文档。
- en: Once Python is installed, the *Using the Read-Evaluate-Print Loop (REPL)* section
    will show how to start interacting with Python.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Python安装完成后，*使用读取-评估-打印循环（REPL）*部分将展示如何开始与Python交互。
- en: Considering some alternatives
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 考虑一些替代方案
- en: We'll focus on a particular implementation of Python called **CPython**. The
    distinction we're making here is that Python—the abstract language—can be processed
    by a variety of concrete Python runtimes or implementations. The CPython implementation
    is written in portable C and can be recompiled for many operating systems. This
    implementation tends to be extremely fast.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将关注Python的一个特定实现，称为**CPython**。我们在这里所做的区分是，Python（抽象语言）可以被各种具体的Python运行时或实现处理。CPython实现是用可移植的C编写的，并且可以重新编译用于许多操作系统。这种实现通常非常快。
- en: For Windows developers, there's an alternative implementation called **Iron
    Python**. This is tightly integrated with the Windows .NET development environment.
    It has the advantage of working with Visual Studio. It has the disadvantage of
    being based on the Python 2.7 language.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows开发者来说，还有一个名为**Iron Python**的替代实现。它与Windows .NET开发环境紧密集成。它具有与Visual
    Studio一起工作的优势。它的缺点是基于Python 2.7语言。
- en: Another choice Windows users have is to use **Python Tools for Visual Studio**
    (**PTVS**). This will allow you to use Python 3.4 from within Visual Studio. For
    developers who are used to Visual Studio, this might prove helpful.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户还有另一个选择，即使用**Python Tools for Visual Studio**（**PTVS**）。这将允许你在Visual
    Studio中使用Python 3.4。对于习惯于Visual Studio的开发者来说，这可能很有帮助。
- en: Other Python implementations include Jython, Stackless Python, and PyPy. These
    alternatives are available for all operating systems, so we'll address these in
    the *Looking at other Python interpreters* section later.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其他Python实现包括Jython、Stackless Python和PyPy。这些替代方案适用于所有操作系统，因此我们将在*查看其他Python解释器*部分稍后讨论这些。
- en: Upgrading to Python 3.4 in Mac OS X
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Mac OS X上升级到Python 3.4
- en: Python runs on all versions of Mac OS X. It turns out that Mac OS X relies on
    Python. However, it relies on Python 2.7, so we'll need to add Python 3.4.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Python在所有版本的Mac OS X上运行。结果是Mac OS X依赖于Python。然而，它依赖于Python 2.7，因此我们需要添加Python
    3.4。
- en: The general procedure for installing Python on Mac OS X is quite simple. We'll
    download a disk image (`.dmg`) installer and do some preparation. Then we'll start
    the installer that's in the disk image. Once that's finished, we'll be up and
    running.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac OS X上安装Python的一般步骤相当简单。我们将下载一个磁盘镜像（`.dmg`）安装程序并进行一些准备。然后我们将启动磁盘镜像中的安装程序。一旦完成，我们就可以开始使用了。
- en: 'To find an installer, start here:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找安装程序，请从这里开始：
- en: '[https://www.python.org/downloads/](https://www.python.org/downloads/)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.python.org/downloads/](https://www.python.org/downloads/)'
- en: The web server should detect your OS and provide a big button with some variation
    of "Download Python 3.4.x" on it. Click on this and download the `.dmg` file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 网络服务器应检测您的操作系统，并提供一个带有“下载 Python 3.4.x”变体的按钮。点击此按钮并下载 `.dmg` 文件。
- en: To look at the choices available, the [https://www.python.org/downloads/mac-osx/](https://www.python.org/downloads/mac-osx/)
    path provides all of the actively-supported versions of Python for Mac OS X. This
    will show alternatives for older versions of Python.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可用的选项，[https://www.python.org/downloads/mac-osx/](https://www.python.org/downloads/mac-osx/)
    路径提供了 Mac OS X 所支持的所有活跃版本的 Python。这将显示 Python 旧版本的替代方案。
- en: When the `.dmg` device becomes available after the download, double-click on
    the `.mpkg` installer file to start running the installer.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，`.dmg` 设备可用后，双击 `.mpkg` 安装程序文件以启动安装程序。
- en: '![Upgrading to Python 3.4 in Mac OS X](img/B03671_01_04.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![在 Mac OS X 中升级到 Python 3.4](img/B03671_01_04.jpg)'
- en: Clicking on **Continue** will step through the **Read Me**, **License**, **Destination
    Select**, and **Installation Type** windows. There's a **Customize** button that
    allows us to turn options on and off. We won't need to do this—the default installation
    is ideal.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **继续** 将会依次进入 **阅读我**、**许可协议**、**目标选择** 和 **安装类型** 窗口。有一个 **自定义** 按钮允许我们打开或关闭选项。我们不需要这样做——默认安装是理想的。
- en: We'll need to provide the username and password of a user who's authorized to
    administer this computer. This will not remove the existing Python that Mac OS
    X uses. It will add another version of Python. This means that we'll have at least
    two copies of Python. We'll focus on using Python 3, ignoring the built-in Python,
    which is Python 2.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要提供有权管理此计算机的用户的用户名和密码。这不会删除 Mac OS X 使用的现有 Python。它将添加另一个 Python 版本。这意味着我们将至少有两个
    Python 版本。我们将专注于使用 Python 3，忽略内置的 Python，即 Python 2。
- en: To use Python 3, we have to enter `python3` at the OS prompt in the Terminal
    window. If we have *both* Python 3.3 and Python 3.4, we can enter the even more
    specific `python3.4` at the command prompt to specify which version of Python
    3 we're using. Generally, the `python3` command will be the latest-and-greatest
    version of Python 3\. The `python` command—unadorned with a version number—will
    be the Python 2.x that Mac OS X requires.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Python 3，我们必须在终端窗口的操作系统提示符中输入 `python3`。如果我们有 *两个* Python 3.3 和 Python 3.4，我们可以在命令提示符中输入更具体的
    `python3.4` 来指定我们正在使用 Python 3 的哪个版本。通常，`python3` 命令将是 Python 3 的最新版本。不带版本号的 `python`
    命令将是 Mac OS X 所需的 Python 2.x。
- en: Adding the Tkinter package
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 Tkinter 包
- en: 'Python relies on a library named Tkinter to provide support for writing programs
    with a GUI. This package relies on Tcl/Tk. The details can be found here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Python 依赖于名为 Tkinter 的库来提供编写具有 GUI 的程序的支持。此包依赖于 Tcl/Tk。详细信息请见以下链接：
- en: '[https://www.python.org/download/mac/tcltk/](https://www.python.org/download/mac/tcltk/)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.python.org/download/mac/tcltk/](https://www.python.org/download/mac/tcltk/)'
- en: The summary of this is that we need to install version 8.5.17 or newer. See
    [https://www.python.org/download/mac/tcltk/#activetcl-8-5-17-0](https://www.python.org/download/mac/tcltk/#activetcl-8-5-17-0).
    This will provide a graphic environment that Python will use. We must install
    Tcl/Tk in order for the `tkinter` package to work.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们需要安装版本 8.5.17 或更高版本。请参阅 [https://www.python.org/download/mac/tcltk/#activetcl-8-5-17-0](https://www.python.org/download/mac/tcltk/#activetcl-8-5-17-0)。这将提供
    Python 将使用的图形环境。我们必须安装 Tcl/Tk，以便 `tkinter` 包能够工作。
- en: 'After we download the `.dmg` file and open the `.pkg` file, we''ll see this
    window:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 `.dmg` 文件并打开 `.pkg` 文件后，我们将看到此窗口：
- en: '![Adding the Tkinter package](img/B03671_01_05.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![添加 Tkinter 包](img/B03671_01_05.jpg)'
- en: We'll be looking at the IDLE development tool, which requires `tkinter`. Consequently,
    this additional installation is essential.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看需要 `tkinter` 的 IDLE 开发工具，因此这个额外的安装是必不可少的。
- en: We can avoid this extra download if we avoid using `tkinter`. Some developers
    prefer to use the Active State Komodo editor as their development tool; this does
    not require Tcl/Tk. Also, there are numerous add-on GUI frameworks that don't
    require `tkinter`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们避免使用 `tkinter`，就可以避免这个额外的下载。一些开发者更喜欢使用 Active State Komodo 编辑器作为他们的开发工具；这不需要
    Tcl/Tk。此外，还有许多不需要 `tkinter` 的附加 GUI 框架。
- en: Upgrading to Python 3.4 in Linux
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Linux 中升级到 Python 3.4
- en: For Linux, the latest Python may already be installed. When we enter `python3`,
    we may see that we already have a useful version available. In this case, we're
    ready to roll. In some cases, the OS will only have an older Python (perhaps older
    than 2.7) installed. In this case, we'll need to upgrade.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux，最新的Python可能已经安装。当我们输入`python3`时，我们可能会看到已经有一个有用的版本可用。在这种情况下，我们已经准备好开始。在某些情况下，操作系统可能只安装了较旧的Python（可能比2.7旧）。在这种情况下，我们需要升级。
- en: 'For Linux distributions, there are two paths for upgrading Python:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux发行版，升级Python有两条路径：
- en: 'Installing prebuilt packages: Many distributions have appropriate packages
    already available. We can use a package manager (such as `yum` or `RPM`) to locate
    and install the necessary Python package. In some cases, there will be additional
    dependencies, leading to a cascade of downloads and installs. Since Python 3.4
    is relatively new, there may not be very many prebuilt packages for your particular
    Linux distribution. Details are available at [https://docs.python.org/3/using/unix.html#on-linux](https://docs.python.org/3/using/unix.html#on-linux).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装预构建的包：许多发行版已经提供了适当的包。我们可以使用包管理器（如`yum`或`RPM`）来定位和安装必要的Python包。在某些情况下，可能会有额外的依赖项，导致一系列的下载和安装。由于Python
    3.4相对较新，可能没有很多针对您特定Linux分发的预构建包。详细信息请参阅[https://docs.python.org/3/using/unix.html#on-linux](https://docs.python.org/3/using/unix.html#on-linux)。
- en: 'Building from source: Most Linux distributions include the GNU C compiler.
    We can download the Python source, configure the build script, and use `make`
    and `make install` to build Python. This may require upgrading some Linux libraries
    to assure that your Linux installation has the required support for Python 3.4\.
    The installation steps are summarized as `./configure`, `make`, and `sudo make
    altinstall`. Details are available at [https://docs.python.org/3/using/unix.html#building-python](https://docs.python.org/3/using/unix.html#building-python).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源代码构建：大多数Linux发行版都包含了GNU C编译器。我们可以下载Python源代码，配置构建脚本，并使用`make`和`make install`来构建Python。这可能需要升级一些Linux库，以确保您的Linux安装具有对Python
    3.4所需的支持。安装步骤总结为`./configure`、`make`和`sudo make altinstall`。详细信息请参阅[https://docs.python.org/3/using/unix.html#building-python](https://docs.python.org/3/using/unix.html#building-python)。
- en: When we use `altinstall`, we'll end up with two Pythons installed. We'll have
    an older Python, which we can run using the `python` command. The `python3` command
    will, generally, be linked to the latest version of Python 3\. If we need to be
    explicit, we can use the `python3.4` command to select a specific version.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`altinstall`时，最终会安装两个Python版本。我们将有一个较旧的Python版本，可以使用`python`命令来运行。通常，`python3`命令会链接到Python
    3的最新版本。如果我们需要明确指定，可以使用`python3.4`命令来选择特定的版本。
- en: As with the Mac OS X installation, adding the Python `tkinter` package is important.
    Sometimes, this is separate from the basic package. This may lead to upgrading
    Tcl/Tk, which may lead to some more downloads and installs. At other times, the
    Linux distribution has an up-to-date Tcl/Tk environment and nothing more needs
    to be done.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与Mac OS X安装类似，添加Python `tkinter`包很重要。有时，这可能是基本包之外的。这可能会导致升级Tcl/Tk，进而导致更多的下载和安装。在其他时候，Linux发行版可能已经有一个最新的Tcl/Tk环境，无需做更多操作。
- en: We can avoid the extra Tcl/Tk download if we avoid using `tkinter`. As mentioned
    earlier, many developers prefer to use the Active State Komodo editor as their
    development tool; this does not require `tkinter`. Also, there are numerous GUI
    frameworks that aren't based on `tkinter`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们避免使用`tkinter`，就可以避免额外的Tcl/Tk下载。如前所述，许多开发者更喜欢使用Active State Komodo编辑器作为他们的开发工具；这不需要`tkinter`。此外，还有许多不以`tkinter`为基础的GUI框架。
- en: Using the Read-Evaluate-Print Loop (REPL)
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用读取-评估-打印循环（REPL）
- en: Once we have installed Python 3, we can do some minimal interaction with Python
    to assure ourselves that things are working. In the long run, we'll use a number
    of other tools to create Python programs. To start out, we'll interact directly
    on the command line.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了Python 3，我们可以通过一些基本的Python交互来确保一切正常工作。从长远来看，我们将使用其他工具来创建Python程序。一开始，我们将直接在命令行上进行交互。
- en: 'Python''s **Read-Evaluate-Print Loop** (**REPL**) is the foundation for Python
    programming. More sophisticated things—such as writing application scripts or
    web servers—are essentially the same as interaction with the REPL: the Python
    program reads statements from our application script file or web server script
    file and evaluates those statements.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的**读取-评估-打印循环**（**REPL**）是 Python 编程的基础。更复杂的事情——比如编写应用程序脚本或网络服务器——本质上与与
    REPL 的交互相同：Python 程序从我们的应用程序脚本文件或网络服务器脚本文件中读取语句并评估这些语句。
- en: This fundamental rule is one of the very appealing features of Python. We can
    write sophisticated scripts, or we can interact with the language in the REPL;
    the language is the same.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这条基本规则是 Python 非常吸引人的特性之一。我们可以编写复杂的脚本，或者我们可以通过交互式解释器（REPL）与语言交互；语言是相同的。
- en: Confirming that things are working
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确认一切正常
- en: 'To confirm that things are working, we''ll start the Python interpreter from
    a command-line prompt. It might similar to like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认一切正常，我们将从命令行提示符启动 Python 解释器。它可能看起来像这样：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The details of getting to a command prompt vary from OS to OS. We've shown the
    Mac OS X Terminal tool in this example. We entered the `python3` command to be
    sure we ran our new version of Python, not the built-in Python 2.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 获取命令提示符的细节因操作系统而异。在这个示例中，我们展示了 Mac OS X 终端工具。我们输入了 `python3` 命令，以确保我们运行的是新的
    Python 版本，而不是内置的 Python 2。
- en: The introductory message lists four special-purpose objects that are incorporated
    into the interactive Python environment. There are two more, `quit` and `exit`,
    which are also available. These are only present in the REPL interactive environment;
    they cannot be used in programs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍信息列出了四个被纳入交互式 Python 环境的特殊用途对象。还有两个，`quit` 和 `exit`，也是可用的。这些只在 REPL 交互式环境中存在；它们不能在程序中使用。
- en: We'll look at how we get help later in a separate section, *Interacting with
    the help subsystem*. The other objects, however, produce useful tidbits of information
    and are the ideal way to be sure things are working. Enter `copyright`, `credits`,
    or `license` at the `>>>` prompt to confirm that Python is working.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后的单独部分查看如何获取帮助，即 *与帮助子系统交互*。然而，其他对象会产生有用的信息片段，并且是确保一切正常工作的理想方式。在 `>>>`
    提示符下输入 `copyright`、`credits` 或 `license` 以确认 Python 正在运行。
- en: Doing simple arithmetic
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行简单的算术运算
- en: The REPL loop prints the results of each statement, allowing us to work with
    Python interactively. To be clear on what this means, we should define what constitutes
    a **statement** in the language. We'll avoid the strict formality of the Python
    language definition and provide a quick, informal definition of the relevant statement
    type.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: REPL 循环打印每个语句的结果，允许我们以交互方式使用 Python。为了清楚地了解这意味着什么，我们应该定义构成语言中的**语句**的内容。我们将避免
    Python 语言定义的严格形式，并提供一个快速的非正式定义相关语句类型。
- en: The Python language has 20 or so kinds of statements. An expression—by itself—is
    a statement. Unless the value of the expression is `None`, the REPL will show
    the value of the expression. We'll often use an expression statement to evaluate
    functions that perform input and output.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Python 语言有大约 20 种语句。一个表达式——本身就是一个语句。除非表达式的值为 `None`，否则 REPL 会显示表达式的值。我们经常使用表达式语句来评估执行输入和输出的函数。
- en: 'This simple expression statement allows us to do things such as the following
    at the Python `>>>` prompt:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的表达式语句允许我们在 Python `>>>` 提示符下执行以下操作：
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can enter any arithmetic expression. Python evaluates the expression, and
    if the result isn't `None`, we'll see the result. We've shown the true division
    operator, `/`, in this example.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以输入任何算术表达式。Python 会评估该表达式，如果结果不是 `None`，我们就会看到结果。在这个例子中，我们展示了真正的除法运算符 `/`。
- en: 'We''ll look at the various data types and operators in [Chapter 2](ch02.html
    "Chapter 2. Simple Data Types"), *Simple Data Types*. For the moment, we''ll identify
    a few features of Python. We have numbers in a variety of flavors, including integers,
    floating point, and complex values. Most values will be properly coerced to add
    precision. Have a look at these examples:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 2 章](ch02.html "第 2 章。简单数据类型")*简单数据类型*中查看各种数据类型和运算符。目前，我们将识别 Python 的几个特性。Python
    有各种类型的数字，包括整数、浮点数和复数。大多数值都会被正确地强制转换为具有更高精度的值。看看这些例子：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first expression computed a value that includes an integer, `2`; a floating
    point value, `3.14`; and a complex value, `8j`. We used the `*` operator for multiplication.
    The result is complex, `50.24j`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个表达式计算了一个包含整数 `2`、浮点数 `3.14` 和复数 `8j` 的值。我们使用了 `*` 运算符进行乘法。结果是复数，`50.24j`。
- en: The second expression uses the `_` variable. This is a handy feature that's
    unique to the REPL. The result of each expression is implicitly assigned to this
    variable. We can use `_` in an expression to refer to the result of the previous
    expression. This only works in the REPL; it's never a part of a script.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个表达式使用了 `_` 变量。这是一个独特的功能，仅限于 REPL。每个表达式的结果都隐式地分配给这个变量。我们可以在表达式中使用 `_` 来引用上一个表达式的结果。这仅在
    REPL 中有效；它永远不会是脚本的一部分。
- en: When we computed `_ **2`, we squared `50.24j`. This is -2524.0576\. Since the
    source value was a complex number, the result is also a complex value even though
    the imaginary component of that complex value is zero. This is typical of Python—the
    data types of the operand values generally dictate the data types of the result
    of the operator. When there are different kinds of numbers, values are coerced
    according to the rules we'll look at in [Chapter 2](ch02.html "Chapter 2. Simple
    Data Types"), *Simple Data Types*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们计算 `_ **2` 时，我们平方了 `50.24j`。这是 -2524.0576。由于源值是一个复数，结果也是一个复数，即使该复数的虚部为零。这在
    Python 中很典型——操作数值的数据类型通常决定了运算符的结果的数据类型。当存在不同类型的数字时，值会根据我们在第 2 章中将要看到的规则进行强制转换，*简单数据类型*。
- en: 'There''s one notable exception to the rule that the types of the operands match
    the type of the result. The true division operator, `/`, produces floating point
    results from integer operands. The floor division operator, `//`, on the other
    hand, reflects the types of the operands. For example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个值得注意的例外是操作数的类型与结果的类型相匹配的规则。真正的除法运算符 `/` 从整数操作数产生浮点结果。另一方面，整除运算符 `//` 反映了操作数的类型。例如：
- en: '[PRE4]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We have these two division operators so that we can unambiguously specify what
    kind of division we'd like to perform. It saves us from having to write extra
    code to explicitly coerce results.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有这两个除法运算符，这样我们就可以明确指定我们想要执行哪种除法。这使我们免去了编写额外代码来显式强制转换结果的需要。
- en: Assigning results to variables
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将结果分配给变量
- en: 'The simple assignment statement produces no visible output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的赋值语句不会产生可见的输出：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will create the variable `v` and assign the value of 23 to it. We can
    check this by using a very small expression statement. The expression is just
    the variable name:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建变量 `v` 并将其值设为 23。我们可以通过使用一个非常小的表达式语句来检查这一点。该表达式只是变量名：
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When we evaluate a very simple expression, such as `v`, we see the value of
    the variable.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们评估一个非常简单的表达式，例如 `v`，我们看到变量的值。
- en: Python's REPL has far-reaching consequences. Perhaps the most important consequence
    is that almost all examples of Python programming are provided as if we're entering
    the code at the `>>>` prompt. The documentation for very complex and sophisticated
    packages will be written as though we're going to use that package interactively.
    In most cases, we'll be writing application programs; we won't really do very
    much at the `>>>` prompt. But the idea of cutting through the complexity to arrive
    at something that can be done interactively is pervasive throughout the Python
    community.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的交互式解释器（REPL）有着深远的影响。也许最重要的后果是，几乎所有 Python 编程的例子都像是我们在 `>>>` 提示符下输入代码一样提供的。对于非常复杂和高级的包的文档，会写成我们打算交互式使用该包的样子。在大多数情况下，我们将编写应用程序；我们实际上在
    `>>>` 提示符下不会做很多。但通过简化复杂性以到达可以交互式执行的内容的想法在 Python 社区中无处不在。
- en: Using import to add features
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用导入添加功能
- en: One significant part of Python is the presence of a vast library of additional
    features. Using an external library means that the core language can be kept quite
    simple. We can import any additional features we need, avoiding the clutter and
    complication of unused features.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的重要部分之一是存在一个庞大的附加功能库。使用外部库意味着核心语言可以保持相当简单。我们可以导入我们需要的任何附加功能，避免未使用功能的杂乱和复杂性。
- en: 'The `import` statement is used to incorporate additional functions, classes,
    and objects into a program or the interactive environment. There are a number
    of variations of this statement. For example, we might want to use some of the
    more sophisticated math functions. We can search the Python documentation and
    discover that these are defined in the `math` library. We can include and use
    them like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`语句用于将额外的函数、类和对象合并到程序或交互式环境中。这个语句有多种变体。例如，我们可能想使用一些更复杂的数学函数。我们可以在Python文档中搜索并发现这些函数定义在`math`库中。我们可以像这样包含并使用它们：'
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we imported the `math` library. We evaluated `math.pi` to see
    one of the constants defined in this library. We evaluated ![Using import to add
    features](img/B03671_01_06.jpg).The result was almost (but not exactly) 1/2.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们导入了`math`库。我们评估了`math.pi`来查看这个库中定义的一个常量。我们评估了![使用import添加功能](img/B03671_01_06.jpg)。结果是几乎（但不完全）是1/2。
- en: This also shows us an important thing about floating point numbers—they're just
    an approximation. This has nothing to do with Python specifically—it's a general
    feature of digital computing. It's very important to emphasize this fact about
    floating point numbers.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这也向我们展示了一个关于浮点数的重要事实——它们只是近似值。这与Python本身无关——这是数字计算的一般特性。强调这一点关于浮点数的事实非常重要。
- en: Tip
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Floating point numbers are only an approximation. They're not exact. They are
    not the abstract mathematical ideal of an irrational number with infinite precision.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数只是近似值。它们不是精确的。它们不是具有无限精度的无理数的抽象数学理想。
- en: We'll return to the topic of floating point numbers in [Chapter 2](ch02.html
    "Chapter 2. Simple Data Types"), *Simple Data Types*. For now, we want to focus
    on external libraries.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第2章](ch02.html "第2章。简单数据类型")“简单数据类型”中回到浮点数的话题。现在，我们想专注于外部库。
- en: 'One important library module that is part of Python is named `this`. To see
    the `this` module, enter `import this` at the `>>>` prompt, like so:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Python中有一个重要的库模块，名为`this`。要查看`this`模块，请在`>>>`提示符下输入`import this`，如下所示：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Another equally important module is `antigravity`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个同样重要的模块是`antigravity`。
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We'll leave the exploration of these modules as exercises for the reader. We
    don't want to spoil the fun! More handwaving explanation isn't as helpful as hands-on
    experience. See [http://xkcd.com/413/](http://xkcd.com/413/) for more on this
    topic.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这些模块的探索留给读者作为练习。我们不想破坏乐趣！更多的手舞足蹈的解释不如亲身体验有帮助。有关此主题的更多信息，请参阅[http://xkcd.com/413/](http://xkcd.com/413/)。
- en: We'll summarize by noting that the name "Python" has much to do with Monty Python
    and nothing to do with serpents.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总结一下，指出“Python”这个名字与蒙提·派森（Monty Python）有很大关系，与蛇无关。
- en: Interacting with the help subsystem
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与帮助子系统交互
- en: Python's interactive help utility provides a great deal of useful information
    about modules, classes, functions, and objects. The help system is an environment
    that is distinct from Python's REPL; it provides distinct prompts to make this
    clear.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Python的交互式帮助工具提供了大量关于模块、类、函数和对象的有用信息。帮助系统是一个与Python的REPL（交互式解释器）不同的环境；它提供独特的提示来明确这一点。
- en: 'There are three help modes, each with its unique prompt:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种帮助模式，每种模式都有其独特的提示：
- en: We'll see the `help>` prompt from the Python help environment. When we evaluate
    the `help()` function with no argument value, we'll enter Python's help environment.
    We can enter different subjects and read about various Python features. When we
    enter `quit` as a topic, we'll return to the REPL.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将看到Python帮助环境的`help>`提示符。当我们不带参数值评估`help()`函数时，我们将进入Python的帮助环境。我们可以输入不同的主题，了解各种Python特性。当我们输入`quit`作为主题时，我们将返回到REPL。
- en: 'Using Windows, we''ll see the `-- More --` prompt: When we evaluate something
    like `help(int)` in a Windows environment, the output will be displayed using
    the MS-DOS **more** command. For more information, enter `?` for help on how to
    page through the `help()` output. At the Windows command line, entering `more
    /?` will provide additional information on how the **more** command helps you
    page through a long file.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows环境下，我们会看到`-- More --`提示：当我们在一个Windows环境中评估类似`help(int)`的内容时，输出将使用MS-DOS的**more**命令来显示。要获取更多信息，请输入`?`以获取关于如何翻页`help()`输出的帮助。在Windows命令行中，输入`more
    /?`将提供关于**more**命令如何帮助您翻页长文件的其他信息。
- en: Using Mac OS X and Linux, we'll see the `:` prompt. When we evaluate the `help()`
    function with a specific argument value—for example, `help(float)`—in Mac OS X
    or Linux, we'll get output that's displayed using the **less** program. For more
    information on this, enter `h` for help while viewing the `help()` output. At
    the command prompt, enter `less -?` for more information on how the **less** program
    works.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Mac OS X 和 Linux 中，我们会看到 `:` 提示符。当我们使用特定的参数值评估 `help()` 函数——例如，`help(float)`——在
    Mac OS X 或 Linux 中，我们会得到使用 **less** 程序显示的输出。有关更多信息，请在查看 `help()` 输出时输入 `h` 以获取帮助。在命令提示符中，输入
    `less -?` 以获取有关 **less** 程序如何工作的更多信息。
- en: There are additional ways to view the documentation available with Python modules.
    In IDLE, for example, there's a class browser and path browser that will show
    documentation about modules and files. This is based on the built-in `help()`
    function, but it's displayed in a separate window.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Python 模块还有其他方法可以查看文档。例如，在 IDLE 中，有一个类浏览器和路径浏览器，可以显示有关模块和文件的文档。这是基于内置的 `help()`
    函数，但它是在一个单独的窗口中显示的。
- en: Using the pydoc program
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 pydoc 程序
- en: Python includes the pydoc application that we use to view documentation. This
    application is something that we run from the OS command prompt. We do not use
    this from the Python `>>>` prompt; we use it from the OS prompt. While developing,
    we might want to leave a Terminal window open just to display module documentation.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Python 包含了 pydoc 应用程序，我们用它来查看文档。这个应用程序是我们从操作系统命令提示符中运行的。我们不会从 Python `>>>` 提示符中使用它；我们是从操作系统提示符中使用它。在开发过程中，我们可能希望只保留一个终端窗口来显示模块文档。
- en: 'The `pydoc` program has two operating modes:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`pydoc` 程序有两种操作模式：'
- en: 'It can show some documentation about a specific package or module. This will
    use an appropriate program (**more** on Windows, but otherwise **less**) to display
    documentation for the given object. Here''s how we can display documentation on
    the `math` module:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以显示有关特定包或模块的一些文档。这将使用适当的程序（在 Windows 上是 **more**，在其他情况下是 **less**）来显示给定对象的文档。以下是如何显示
    `math` 模块的文档：
- en: '[PRE10]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It can start a documentation web server. This will start a server (and also
    start a browser) to look at Python module documentation. When we use it, we''ll
    have a session that looks like this:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以启动一个文档网络服务器。这将启动一个服务器（并启动一个浏览器）来查看 Python 模块文档。当我们使用它时，我们将有一个看起来像这样的会话：
- en: '[PRE11]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The second example will start a web server as well as a browser. The browser
    will show the pydoc-produced documentation. This is derived from the module and
    package structure as well as the documentation strings embedded in the Python
    code. When we were done reading the documentation, we entered `q` to quit the
    web server.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例将启动一个网络服务器以及一个浏览器。浏览器将显示 pydoc 生成的文档。这是从模块和包结构以及嵌入在 Python 代码中的文档字符串中派生出来的。当我们完成阅读文档后，我们输入
    `q` 来退出网络服务器。
- en: When we write Python packages, modules, classes, and functions, we can (and
    should) provide the content for `pydoc`/`help()` documentation. These documentation
    strings are part of our programming, and are as important as having programs that
    work correctly. We'll look at this embedded documentation in [Chapter 14](ch14.html
    "Chapter 14. Fit and Finish – Unit Testing, Packaging, and Documentation"), *Fit
    and Finish – Unit Testing, Packaging, and Documentation*.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写 Python 包、模块、类和函数时，我们可以（并且应该）为 `pydoc`/`help()` 文档提供内容。这些文档字符串是我们编程的一部分，与拥有正确工作的程序一样重要。我们将在
    [第 14 章](ch14.html "第 14 章。完善——单元测试、打包和文档") *完善——单元测试、打包和文档* 中查看这些嵌入的文档。
- en: Creating simple script files
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单的脚本文件
- en: While we can use all of Python from the REPL, this is not a good way to produce
    a final application. Most of what we do with Python will be done via script files.
    We'll look at script files in detail in [Chapter 12](ch12.html "Chapter 12. Scripts,
    Modules, Packages, Libraries, and Applications"), *Scripts, Modules, Packages,
    Libraries, and Applications*. For now, we'll look at a few features.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以从 REPL 使用所有 Python，但这并不是生成最终应用程序的好方法。我们用 Python 做的大部分工作将通过脚本文件完成。我们将在
    [第 12 章](ch12.html "第 12 章。脚本、模块、包、库和应用") *脚本、模块、包、库和应用* 中详细查看脚本文件。现在，我们将查看一些功能。
- en: 'A script file has to follow a few rules:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本文件必须遵循一些规则：
- en: The content must be plain text. While ASCII encoding is preferred by some, Python
    3 can easily handle UTF-8 and most OS-specific variations such as Mac OS Roman
    or Windows CP-1252\. A portable encoding like UTF-8 is strongly suggested.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容必须是纯文本。虽然有些人更喜欢 ASCII 编码，但 Python 3 可以轻松处理 UTF-8 以及大多数操作系统特定的变体，如 Mac OS Roman
    或 Windows CP-1252。强烈建议使用可移植的编码 UTF-8。
- en: Python can cope with Mac OS X, Linux newline (`\n`), as well as Windows CR-LF
    (`\r\n`). Only a few Windows tools, such as Notepad, insist on CR-LF line endings;
    most other programming editors discern the line endings flexibly. Unless you really
    must use Notepad, it's often best to use Unix-style newline line endings.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 可以处理 Mac OS X、Linux 换行符 (`\n`)，以及 Windows CR-LF (`\r\n`)。只有少数 Windows
    工具，如记事本，坚持使用 CR-LF 行结束符；大多数其他编程编辑器可以灵活地识别行结束符。除非你真的必须使用记事本，否则通常最好使用 Unix 风格的换行符行结束符。
- en: The filename should be a legal Python identifier. This is not a requirement,
    but it gives us considerable flexibility if we follow this suggestion. The Language
    Reference Manual, section 2.3, provides the details of what constitutes an identifier.
    A summary of these rules is that identifiers must begin with a letter (or a Unicode
    character that normalizes to a letter) or `_`. It continues with letters, digits,
    and the `_` character. What's important is that we should avoid characters that
    are Python operators or delimiters in filenames. In particular, we should avoid
    the hyphen (`-`), which can become a problem in some Python contexts. OS filenames
    have much more flexible rules than Python identifiers, and the OS has ways to
    escape the meaning of OS-related punctuation; we are happiest when we limit our
    filenames to valid Python identifiers – letters, digits, and `_`.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件名应该是合法的 Python 标识符。这不是一个要求，但如果我们遵循这个建议，它将给我们带来相当大的灵活性。语言参考手册的第 2.3 节提供了构成标识符的详细规则。这些规则的总结是，标识符必须以字母（或规范化为字母的
    Unicode 字符）或 `_` 开头。接着是字母、数字和 `_` 字符。重要的是我们应该避免在文件名中使用 Python 操作符或分隔符。特别是，我们应该避免使用连字符（`-`），这在某些
    Python 环境中可能会成为问题。操作系统文件名比 Python 标识符有更灵活的规则，操作系统有方法来转义与操作系统相关的标点符号；当我们限制文件名为有效的
    Python 标识符——字母、数字和 `_` 时，我们会感到最满意。
- en: The filename extension should be `.py`. Again, this is not required, but it
    is very helpful to follow this rule.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件扩展名应该是 `.py`。同样，这也不是必需的，但遵循这个规则非常有帮助。
- en: For example, we'll try to focus on names such as `test_1_2.py`. We can't as
    easily use a file named `test-1.2.py`; the base name isn't a valid identifier—this
    name looks like a Python expression. While the second name is acceptable for a
    top-level script, it won't work as a module or package.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将尝试关注像 `test_1_2.py` 这样的名称。我们不太容易使用名为 `test-1.2.py` 的文件；基本名称不是一个有效的标识符——这个名字看起来像是一个
    Python 表达式。虽然第二个名称对于顶层脚本来说是可接受的，但它不能作为一个模块或包使用。
- en: 'We''ll look at some Python syntax rules in the next section. For now, we can
    create a simple script file named `ex_1.py` that has one line:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨一些 Python 语法规则。现在，我们可以创建一个名为 `ex_1.py` 的简单脚本文件，它只有一行：
- en: '[PRE12]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can also use `"\u03c0\u2248"` instead of `"π≈"`. The string `"\N{GREEK SMALL
    LETTER PI}\N{ALMOST EQUAL TO}"` will also work.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用 `"\u03c0\u2248"` 来代替 `"π≈"`。字符串 `"\N{GREEK SMALL LETTER PI}\N{ALMOST
    EQUAL TO}"` 也会起作用。
- en: 'Once we have this file, we can have Python execute the file as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了这个文件，我们就可以按照以下方式让 Python 执行该文件：
- en: '[PRE13]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We've provided a filename, `ex_1.py`, as the positional argument to the `python3`
    program. Python reads the file and executes each line. The output that we see
    is the text printed to the console by the `print()` function.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提供了一个文件名，`ex_1.py`，作为 `python3` 程序的位置参数。Python 读取文件并执行每一行。我们看到的输出是 `print()`
    函数打印到控制台的文字。
- en: The file is found by Python using ordinary OS rules for locating files, starting
    with the current working directory. This will work with any kind of filename.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Python 会使用普通的操作系统规则来定位文件，从当前工作目录开始查找文件。这适用于任何类型的文件名。
- en: 'If we followed the naming rules for our file—the filename is an identifier
    and the extension is `.py`—we can also use the following command to execute a
    Python module:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们遵循了文件的命名规则——文件名是一个标识符，扩展名是 `.py`——我们也可以使用以下命令来执行一个 Python 模块：
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `-m ex_1` option forces Python to search for a module named `ex_1`. The
    file associated with this module is named `ex_1.py`. Python has a search path
    that it uses to find the requested module. Unless special arrangements are made,
    Python will search the local directory first, and then will search the library
    directories. This allows us to run our scripts and Python's built-in applications
    with a simple, uniform syntax. It also allows us to add our own applications and
    modules by modifying the `PYTHONPATH` environment variable.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`-m ex_1` 选项强制 Python 搜索名为 `ex_1` 的模块。与此模块关联的文件名为 `ex_1.py`。Python 有一个用于查找请求模块的搜索路径。除非做出特殊安排，Python
    将首先搜索本地目录，然后搜索库目录。这允许我们使用简单、统一的语法运行我们的脚本和 Python 的内置应用。它还允许我们通过修改 `PYTHONPATH`
    环境变量来添加我们自己的应用和模块。'
- en: We'll look at the search path in [Chapter 12](ch12.html "Chapter 12. Scripts,
    Modules, Packages, Libraries, and Applications"), *Scripts, Modules, Packages,
    Libraries, and Applications*. The detailed documentation for the search path is
    part of the `site` package.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [第 12 章](ch12.html "第 12 章。脚本、模块、包、库和应用") *脚本、模块、包、库和应用* 中查看搜索路径。搜索路径的详细文档是
    `site` 包的一部分。
- en: Simplified syntax rules
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简化的语法规则
- en: The syntax rules for Python are defined in section 2 of the *Python Language
    Reference* manual. We'll look at the rules in detail in [Chapter 3](ch03.html
    "Chapter 3. Expressions and Output"), *Expressions and Output*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的语法规则在 *Python 语言参考* 手册的第 2 节中定义。我们将在 [第 3 章](ch03.html "第 3 章。表达式和输出")
    *表达式和输出* 中详细讨论这些规则。
- en: 'Python has about 20 kinds of statements. Here''s a quick summary of the rules:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有大约 20 种语句。以下是对规则的快速总结：
- en: Almost all statements begin with a Python keyword such as `pass`, `if`, and
    `def`. The expression statement and the assignment statement are the exceptions.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几乎所有语句都以 Python 关键字开头，如 `pass`、`if` 和 `def`。表达式语句和赋值语句是例外。
- en: Python has two kinds of statements—one-line **simple** statements and multiline
    **compound** statements.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 有两种语句类型——单行 **简单** 语句和多行 **复合** 语句。
- en: Simple statements must be complete within a single line. An assignment statement
    is a simple statement. It begins with one or more user-provided identifiers and
    includes the `=` assignment symbol or an augmented variant like `+=`. An expression
    statement is also simple.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单语句必须在单行内完成。赋值语句是简单语句。它以一个或多个用户提供的标识符开始，包括 `=` 赋值符号或类似 `+=` 的增强变体。表达式语句也是简单的。
- en: Compound statements use indentation to show the suite of statements embedded
    within the overall statement. The standard indentation is four spaces. Most developers
    set their editor to replace tabs with four spaces. Inconsistent use of spaces
    and tabs will lead to syntax errors that can be hard to see because tabs and spaces
    are both invisible by default. Avoiding tab characters in general makes it easier
    to debug problems.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复合语句使用缩进来表示嵌入在整体语句中的语句序列。标准缩进是四个空格。大多数开发者将他们的编辑器设置为将制表符替换为四个空格。不一致地使用空格和制表符会导致难以看到的语法错误，因为默认情况下制表符和空格都是不可见的。避免使用制表符通常更容易调试问题。
- en: Compound statements include class and function definitions—the body of the definition
    is indented. If statements and for and while loops are examples of compound statements
    that contain an indented suite of statements that are executed conditionally or
    repeatedly.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复合语句包括类和函数定义——定义体的内容是缩进的。if 语句和 for 以及 while 循环是包含条件或重复执行缩进语句序列的复合语句的例子。
- en: The `(` and `)` characters must match. A single statement on a logical line
    may span multiple physical lines until the `(` and `)` characters match.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 括号 `(` 和 `)` 必须匹配。一个逻辑行上的单个语句可以跨越多个物理行，直到括号 `(` 和 `)` 匹配。
- en: In effect, Python programs consist of one-statement-one-line. The end of a line
    is the statement terminator. We have a few techniques for extending a statement.
    The most common technique is based on Python's requirement that the `(` and `)`
    characters must balance.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Python 程序由一行一条语句组成。行的末尾是语句的终止符。我们有几种扩展语句的技术。最常见的技术是基于 Python 的要求，即括号 `(`
    和 `)` 必须匹配。
- en: 'We can, for example, write code like this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以编写如下代码：
- en: '[PRE15]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)下载您购买的所有Packt出版物的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: We've spread a single logical line to four physical lines using `(` and `)`.
    One consequence of this is that a simple statement that we enter at the REPL must
    not be indented. A leading space will cause problems because leading spaces are
    used to show which statements are inside a compound statement.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`(`和`)`将单个逻辑行扩展到四行物理行。一个后果是，我们在REPL中输入的简单语句不得缩进。前导空格会导致问题，因为前导空格用于显示哪些语句在复合语句内部。
- en: Another consequence of this is less direct. Python executes a script file one
    statement at a time from start to finish. This means that complex Python programs
    will have a number of definitions first, and the "main" part of the processing
    will generally be last.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这的另一个后果是间接的。Python从开始到结束逐行执行脚本文件。这意味着复杂的Python程序将首先有一系列定义，而“主要”的处理部分通常在最后。
- en: A Python comment starts with `#` and ends at the end of the line. This follows
    the same rules as the various Linux shells. Because of the way Python documentation
    strings are processed by `pydoc` and `help()`, most documentation is actually
    presented in separate string literals at the start of a package, module, class,
    or function definition. We'll look at these documentation strings in [Chapter
    14](ch14.html "Chapter 14. Fit and Finish – Unit Testing, Packaging, and Documentation"),
    *Fit and Finish – Unit Testing, Packaging, and Documentation*. The `#` comment
    is used sparingly.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Python的注释以`#`开头，并在行尾结束。这遵循了各种Linux壳的相同规则。由于Python文档字符串是通过`pydoc`和`help()`处理的，因此大多数文档实际上是在包、模块、类或函数定义的开始处以单独的字符串字面量呈现。我们将在[第14章](ch14.html
    "第14章。完善 - 单元测试、打包和文档")*完善 - 单元测试、打包和文档*中查看这些文档字符串。`#`注释使用得很少。
- en: The Python ecosystem
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python生态系统
- en: 'The Python programming environment has two broad subject areas:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Python编程环境有两个广泛的主题领域：
- en: The language itself
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言本身
- en: 'The extension packages. We can further subdivide the extension packages into:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展包。我们可以进一步将扩展包细分为：
- en: The standard library of packages
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准库包
- en: The Python ecosystem of yet more extension packages
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多的扩展包的Python生态系统
- en: When we install Python, we install the language plus several hundred extension
    packages in the standard library. We'll return to the standard library in [Chapter
    12](ch12.html "Chapter 12. Scripts, Modules, Packages, Libraries, and Applications"),
    *Scripts, Modules, Packages, Libraries, and Applications*. The Python ecosystem
    is potentially infinite. The good news is that PyPI makes it relatively easy to
    locate packages.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们安装Python时，我们安装了语言以及标准库中的数百个扩展包。我们将在[第12章](ch12.html "第12章。脚本、模块、包、库和应用")*脚本、模块、包、库和应用*中回到标准库。Python生态系统是无限的。好消息是PyPI使得查找包相对容易。
- en: The idea of extensibility via add-ons
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过附加组件进行扩展的想法
- en: Python's design includes a small core language that can be extended by importing
    additional features. The Language Reference Manual describes 20 statements; there
    are only 19 operators. The idea is that we can have a great deal of confidence
    that a small language is correctly implemented, complete, and consistent.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Python的设计包括一个小核心语言，可以通过导入额外的功能来扩展。语言参考手册描述了20个语句；只有19个运算符。我们的想法是，我们可以对一个小语言被正确实现、完整和一致有很大的信心。
- en: The standard library documentation contains 37 chapters, and describes hundreds
    of extension packages. There are a lot of features available to help us solve
    our unique problem. It's typical to see Python programs that import numerous packages
    from the standard library.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库文档包含37章，并描述了数百个扩展包。有许多功能可以帮助我们解决独特的问题。通常可以看到导入大量标准库包的Python程序。
- en: 'We''ll see two common variations of the `import` statement:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到`import`语句的两种常见变体：
- en: '`import math`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import math`'
- en: '`from math import sqrt, sin`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from math import sqrt, sin`'
- en: The first version imports the entire `math` module and creates the module as
    an object in the global namespace. The various classes and function names within
    that module must be properly qualified with the namespace to be used. A qualified
    name will look similar to `math.sqrt()` or `math.sin()`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个版本导入了整个 `math` 模块，并在全局命名空间中创建了一个模块对象。该模块中的各种类和函数名称必须使用正确的命名空间进行限定。限定名称看起来类似于
    `math.sqrt()` 或 `math.sin()`。
- en: While the second version also imports the `math` module, it only introduces
    the given names into the global namespace. These names do not require qualifiers.
    We can use `sqrt()` and `sin()` as if they were built-in functions. The `math`
    module object, however, is not available, since it was not introduced into the
    global namespace.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然第二个版本也导入了 `math` 模块，但它只将给定的名称引入到全局命名空间中。这些名称不需要限定符。我们可以像使用内置函数一样使用 `sqrt()`
    和 `sin()`。然而，`math` 模块对象不可用，因为它没有被引入到全局命名空间中。
- en: An import happens exactly once. Python tracks the imported modules and will
    not import a module a second time. This allows us to freely import modules as
    needed without worrying about the order or other obscure dependencies among modules.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 导入只发生一次。Python 跟踪导入的模块，并且不会再次导入一个模块。这允许我们自由地按需导入模块，而不用担心模块之间的顺序或其他隐晦的依赖关系。
- en: 'For confirmation of this one-time-only rule for imports, try the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认这个一次性导入规则，尝试以下操作：
- en: '[PRE16]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The behavior the second time is different because the module has already been
    imported once.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次的行为不同，因为模块已经被导入了一次。
- en: Using the Python Package Index – PyPI
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 包索引 – PyPI
- en: Many developers of Python modules will register their work with the PyPI. This
    is located at [http://pypi.python.org/](http://pypi.python.org/). This is the
    second place to look for a module that might help solve a particular problem.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 Python 模块的开发者会将他们的作品注册到 PyPI 上。这个网站位于 [http://pypi.python.org/](http://pypi.python.org/)。这是寻找可能帮助解决特定问题的模块的第二个地方。
- en: The first place to look is always the standard library.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要查找的地方总是标准库。
- en: 'The PyPI web page has a handy search form as well as a browser that shows packages
    organized under nine different metadata variables. In many cases, a book or blog
    post may provide a direct path like this: [https://pypi.python.org/pypi/Sphinx/1.3b2](https://pypi.python.org/pypi/Sphinx/1.3b2).
    This ensures that the proper version can be downloaded and installed.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: PyPI 网页提供了一个方便的搜索表单，以及一个浏览器，可以显示按照九个不同的元数据变量组织的软件包。在许多情况下，一本书或博客文章可能会提供一个直接路径，例如：[https://pypi.python.org/pypi/Sphinx/1.3b2](https://pypi.python.org/pypi/Sphinx/1.3b2)。这确保了可以下载和安装正确的版本。
- en: 'There are three common ways to download and install software from the PyPI:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 从 PyPI 下载和安装软件有三种常见方式：
- en: Using `pip`
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pip`
- en: Using `easy_install`
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `easy_install`
- en: Manually
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动
- en: Generally, we'll use tools such as `pip` or `easy_install` for almost all of
    our installations. Once in a while, however, we may need to resort to a manual
    installation.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们会使用 `pip` 或 `easy_install` 等工具来安装几乎所有软件。然而，偶尔我们也可能需要手动安装。
- en: Some modules may involve binary extensions to Python. These are generally C-language-sources,
    so they must be compiled to be useful. For Windows—where C compilers are rare—it's
    often necessary to find an `.msi` installer that includes prebuilt binaries. For
    Mac OS X and Linux, the C source may be compiled as part of the installation process.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一些模块可能涉及 Python 的二进制扩展。这些通常是 C 语言源代码，因此必须编译才能使用。对于 Windows（C 编译器很少见），通常需要找到一个包含预构建二进制的
    `.msi` 安装程序。对于 Mac OS X 和 Linux，C 源代码可以作为安装过程的一部分进行编译。
- en: 'In the case of large, complex numeric and scientific packages—specifically,
    `numpy` and `scipy`—the build process can become quite complex: generally, more
    complex than `pip` or `easy_install` can handle. There are many additional high-performance
    libraries for these packages; the builds include modules in FORTRAN as well as
    C. In this case, a prebuilt OS-specific distribution is used; `pip` isn''t part
    of the process.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型、复杂的数值和科学软件包的情况下——特别是 `numpy` 和 `scipy`——构建过程可能变得相当复杂：通常比 `pip` 或 `easy_install`
    能够处理的更复杂。这些软件包有许多额外的性能库；构建包括 FORTRAN 和 C 的模块。在这种情况下，使用预构建的特定于操作系统的分发；`pip` 不是这个过程的一部分。
- en: Installing additional packages will require administrator privileges. Consequently,
    we'll show the `sudo` command as a reminder that this is required for Mac OS X
    and Linux. Windows users can simply ignore the presence of the `sudo` command.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 安装额外的包将需要管理员权限。因此，我们将展示 `sudo` 命令作为提醒，说明在 Mac OS X 和 Linux 上这是必需的。Windows 用户可以简单地忽略
    `sudo` 命令的存在。
- en: Using pip to gather modules
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 pip 收集模块
- en: 'The `pip` program is part of Python 3.4\. It''s an add-on for Python3\. To
    use `pip` to install a package, we generally use a command such as the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip` 程序是 Python 3.4 的一部分。它是 Python3 的附加组件。要使用 `pip` 安装一个包，我们通常使用以下命令之一：'
- en: '[PRE17]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For Mac OS X or Linux, we need to use the `sudo` command so that we have administrator
    privileges. Windows users will leave this off.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac OS X 或 Linux，我们需要使用 `sudo` 命令以便拥有管理员权限。Windows 用户可以省略这一步。
- en: The `pip` program will search PyPI for the package named `some-package`. The
    installed Python version and OS information will be used to locate the latest-and-greatest
    version that's appropriate for the platform. The files will be downloaded, and
    the Python `setup.py` file that comes with the package will be run automatically
    to install it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip` 程序将在 PyPI 上搜索名为 `some-package` 的包。将使用已安装的 Python 版本和操作系统信息来定位适合该平台的最新和最佳版本。文件将被下载，并自动运行包中包含的
    Python `setup.py` 文件来安装它。'
- en: For Mac OS X and Linux users, it's helpful to note that the version of Python
    that is required by the OS doesn't usually have `pip` configured. A Mac OS X user
    with the built-in Python 2.7 and Python 3.4 can generally use the default `pip`
    command without any problems because there won't be a version of `pip` configured
    for Python 2.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac OS X 和 Linux 用户，值得注意的是，操作系统所需的 Python 版本通常没有配置 `pip`。拥有内置 Python 2.7
    和 Python 3.4 的 Mac OS X 用户通常可以使用默认的 `pip` 命令而没有任何问题，因为不会为 Python 2 配置 `pip`。
- en: In the case where someone has Python 3.3 and Python 3.4, and has installed `pip`
    for Python 3.3, they will have to choose which version they want to work with.
    Using the commands `pip3.3` or `pip3.4` will use one of the `pip` commands configured
    for the given version of Python. The default `pip` command may link to whichever
    version was installed last-something we shouldn't guess at.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人同时安装了 Python 3.3 和 Python 3.4，并且为 Python 3.3 安装了 `pip`，他们必须选择他们想要使用的版本。使用
    `pip3.3` 或 `pip3.4` 命令将使用为给定 Python 版本配置的 `pip` 命令之一。默认的 `pip` 命令可能链接到最后安装的版本——这是我们不应该猜测的。
- en: The `pip` program has a number of additional features to uninstall packages
    and track which packages have been added to the initial Python installation. The
    `pip` program can also create installable packages of your new creation.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip` 程序具有许多其他功能，可以卸载包并跟踪哪些包被添加到初始 Python 安装中。`pip` 程序还可以创建您新创建的可安装包。'
- en: Using easy_install to add modules
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 easy_install 添加模块
- en: 'The `easy_install` package is also part of Python 3.4\. It''s a part of the
    `setuptools` package. We use `easy_install` like this to install a package:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`easy_install` 包也是 Python 3.4 的一部分。它是 `setuptools` 包的一部分。我们使用 `easy_install`
    如下安装一个包：'
- en: '[PRE18]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: For Mac OS X or Linux, we need to use the `sudo` command so that we have administrator
    privileges. Windows users will leave this off.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac OS X 或 Linux，我们需要使用 `sudo` 命令以便拥有管理员权限。Windows 用户可以省略这一步。
- en: The `easy_install` program is similar to `pip`—it will search PyPI for the package
    named `some-package`. The installed Python version and OS information will be
    used to locate a version that's appropriate for the platform. The files will be
    downloaded. One of these files is the `setup.py` script; this will be run automatically
    to finish the installation.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`easy_install` 程序与 `pip` 类似——它将在 PyPI 上搜索名为 `some-package` 的包。将使用已安装的 Python
    版本和操作系统信息来定位适合该平台的版本。文件将被下载。其中之一是 `setup.py` 脚本；这将自动运行以完成安装。'
- en: Installing modules manually
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动安装模块
- en: 'In rare cases, we may have a package that isn''t in the PyPI and can''t be
    located by `pip` or `easy_install`. In this case, we generally have a two- or
    three-step installation process:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在罕见的情况下，我们可能有一个不在 PyPI 上的包，无法通过 `pip` 或 `easy_install` 定位。在这种情况下，我们通常有两个或三个步骤的安装过程：
- en: '**Download**: We need to securely download the package. In many cases, we can
    use `https` or `ftps` so that secure sockets are used. In case we can''t secure
    the connection, we may have to check md5 signatures on the files to be sure that
    our download is complete and unaltered.'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**下载**：我们需要安全地下载该软件包。在许多情况下，我们可以使用 `https` 或 `ftps` 以确保使用安全的套接字。如果我们无法确保连接的安全性，我们可能需要检查文件的
    md5 签名，以确保我们的下载完整且未被篡改。'
- en: '**Unpack**: If the Python packages are compressed into a single ZIP or TAR
    file, we need to unzip or untar the downloaded file into a temporary directory.'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**解压**：如果 Python 软件包被压缩成单个 ZIP 或 TAR 文件，我们需要将下载的文件解压或解包到临时目录中。'
- en: '**Set up**: Many Python packages designed for manual installation include a
    `setup.py` file that will do the final installation. We''ll need to run a command
    like this:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置**：许多为手动安装设计的 Python 包都包含一个 `setup.py` 文件，它将执行最终的安装。我们需要运行类似以下的命令：'
- en: '[PRE19]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This sequence of steps, including the final command, is what is automated by
    `pip` and `easy_install`. We've shown the Mac OS X and Linux use of the `sudo`
    command to assure that administrator privileges are available. Windows users will
    simply leave this off.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包括最终命令在内的步骤序列是由 `pip` 和 `easy_install` 自动化的。我们已经展示了在 Mac OS X 和 Linux 上使用
    `sudo` 命令来确保管理员权限可用。Windows 用户只需简单地去掉这个命令即可。
- en: The `setup.py` script uses Python's `distutils` package to define what must
    be installed into the Python library directory structure. The `install` option
    states what we want to do with the package we downloaded. Most of the time, we're
    going to install, so this is one of the most common options.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup.py` 脚本使用 Python 的 `distutils` 包来定义必须安装到 Python 库目录结构中的内容。`install` 选项说明了我们对下载的软件包要做什么。大多数时候，我们会安装，所以这是最常见的选项之一。'
- en: In rare exceptions, a package may consist of a single module file. There may
    not be a `setup.py` file. In this case, we will manually copy the file to our
    own `site-packages` directory.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在罕见的情况下，一个包可能只包含一个模块文件。可能没有 `setup.py` 文件。在这种情况下，我们将手动将文件复制到我们自己的 `site-packages`
    目录中。
- en: Looking at other Python interpreters
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看其他 Python 解释器
- en: This book will focus on a particular implementation of Python called the CPython.
    What this means is that Python—the abstract language—can be processed by a variety
    of concrete Python runtimes or implementations. The CPython implementation is
    written in portable C and can be recompiled for many operating systems.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将专注于一种称为 CPython 的特定 Python 实现。这意味着 Python（抽象语言）可以被各种具体的 Python 运行时或实现处理。CPython
    实现是用可移植的 C 编写的，并且可以重新编译以适应许多操作系统。
- en: Python can be embedded into an application. This means that a complex application
    can include the entire Python language as a way to write scripts that customize
    the given application. One example of this is the Ganglia monitoring system ([http://ganglia.sourceforge.net](http://ganglia.sourceforge.net)).
    Python is part of the system; we can customize the behavior using Python scripts
    that will interact with Ganglia components. We won't be looking more deeply into
    these kinds of applications in this book; we'll focus on standalone implementations
    of Python.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可以嵌入到应用程序中。这意味着一个复杂的应用程序可以包含整个 Python 语言，作为编写脚本来定制给定应用程序的一种方式。一个例子是 Ganglia
    监控系统 ([http://ganglia.sourceforge.net](http://ganglia.sourceforge.net))。Python
    是系统的一部分；我们可以使用与 Ganglia 组件交互的 Python 脚本来定制其行为。在这本书中，我们不会深入探讨这类应用程序；我们将专注于独立的 Python
    实现。
- en: There are several alternative Python implementations. In the *Installing Python
    on Windows* section in this chapter, we noted that Iron Python ([http://ironpython.net](http://ironpython.net))
    and PTVS ([http://pytools.codeplex.com](http://pytools.codeplex.com)) are available.
    These provide tighter integration with the .NET framework.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种替代的 Python 实现。在本章的 *在 Windows 上安装 Python* 部分中，我们提到 IronPython ([http://ironpython.net](http://ironpython.net))
    和 PTVS ([http://pytools.codeplex.com](http://pytools.codeplex.com)) 可用。这些提供了与
    .NET 框架更紧密的集成。
- en: 'There are still more implementations that we might encounter:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还会遇到更多的实现：
- en: '**Jython**: This is a version of the Python interpreter that is written in
    Java and runs on the Java Virtual Machine (JVM). See [http://www.jython.org](http://www.jython.org).
    This project focuses on Python 2.7.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jython**：这是用 Java 编写的 Python 解释器版本，它在 Java 虚拟机 (JVM) 上运行。请参阅 [http://www.jython.org](http://www.jython.org)。该项目专注于
    Python 2.7。'
- en: '**PyPy**: This is a version of the Python interpreter written in Python. See
    [http://pypy.org](http://pypy.org). The circularity of "Python written in Python"
    is broken by the RPython translation toolchain, which creates a very sophisticated
    implementation of Python programs. This can provide significant performance improvements
    for a variety of long-running applications, such as web servers.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyPy**：这是一个用 Python 编写的 Python 解释器版本。请参阅[http://pypy.org](http://pypy.org)。通过
    RPython 转换工具链打破了“Python 写在 Python 中”的循环，它创建了一个非常复杂的 Python 程序实现。这可以为各种长时间运行的应用程序，如
    Web 服务器，提供显著的性能提升。'
- en: '**Stackless**: This version of Python has a different threading model from
    CPython. See [http://www.stackless.com](http://www.stackless.com). This version
    can provide dramatic performance improvements for multithreaded servers.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无栈**：这个版本的 Python 与 CPython 的线程模型不同。请参阅[http://www.stackless.com](http://www.stackless.com)。这个版本可以为多线程服务器提供显著的性能提升。'
- en: Since the Python source is readily available, it's quite easy to look for optimization
    opportunities. The language is relatively simple, allowing experimentation to
    see what effect changes in implementation may have.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Python 源代码易于获取，寻找优化机会相当容易。这种语言相对简单，允许实验以查看实现中的变化可能产生的影响。
- en: Summary
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We've looked at installing or upgrading Python so that we can work with version
    3.3 or 3.4, and we've looked briefly at the minor differences between Windows,
    Mac OS X, and Linux. The principle difference among the OS variants is that Windows
    lacks Python, whereas Mac OS X and Linux generally have a version of Python already
    installed. There are few other differences among the operating systems.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了安装或升级 Python，以便我们可以使用 3.3 或 3.4 版本，并且我们简要地探讨了 Windows、Mac OS X 和 Linux
    之间的细微差别。操作系统变体之间的主要差异是 Windows 缺乏 Python，而 Mac OS X 和 Linux 通常已经预装了 Python 版本。操作系统之间几乎没有其他差异。
- en: We've looked at some basic interactions using the REPL. We looked at some simple
    expressions and the built-in `help()` subsystem.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了使用 REPL 进行的一些基本交互。我们查看了一些简单的表达式和内置的 `help()` 子系统。
- en: We've looked at some ways that the `import` statement extends the basic capabilities
    of our Python runtime environment, and we've also introduced the larger Python
    ecosystem. We can add to our Python library using the `pip` (and `easy_install`)
    tool. The PyPI is the central repository for most of the Python extension modules.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了 `import` 语句如何扩展我们的 Python 运行时环境的基本功能，并且我们也介绍了更大的 Python 生态系统。我们可以使用
    `pip`（和 `easy_install`）工具来扩展我们的 Python 库。PyPI 是大多数 Python 扩展模块的中心仓库。
- en: In the next chapter, we'll look at Python's numeric types in detail. Python
    numbers form a kind of "tower" that follows the mathematical notions of integer,
    rational, real, and complex numbers. We'll look at the mathematical operators
    and some of the standard libraries for working with numbers.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细探讨 Python 的数值类型。Python 的数字构成了一种遵循数学中整数、有理数、实数和复数概念的“塔”。我们将探讨数学运算符以及一些用于处理数字的标准库。
- en: We'll also look at some of the more complex data types available, including/alongside
    specific tuples, strings, and frozensets. These are relatively simple because
    they are immutable. As is the case with ordinary numbers, the values of these
    more complex objects don't change either.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将探讨一些更复杂的数据类型，包括特定的元组、字符串和冻结集合。这些相对简单，因为它们是不可变的。正如普通数字的情况一样，这些更复杂对象的值也不会改变。
