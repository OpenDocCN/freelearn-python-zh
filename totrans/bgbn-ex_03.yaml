- en: Chapter 3. Introduction to Physical Computing Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。物理计算系统简介
- en: This chapter will focus on giving you an introduction to what physical computing
    systems are, what they are composed of, how they work and where they are used.
    First, we will get started with a brief introduction to physical computing systems,
    which will give you a basic idea about the basic composition of physical computing
    systems with an example followed by its application areas, and at the end we will
    see how we can build our own physical computing system using BeagleBone Black
    with a push button and LED using Python programming to change the LED state based
    on the push button press input.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍物理计算系统是什么，它们由什么组成，它们如何工作以及它们在哪里使用。首先，我们将从物理计算系统的简要介绍开始，通过一个示例及其应用领域，让您对物理计算系统的基本组成有一个基本的概念，最后我们将看到如何使用BeagleBone
    Black、推杆和LED以及Python编程来构建自己的物理计算系统，根据推杆按下输入来改变LED的状态。
- en: 'The contents of the chapter are divided into the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容分为以下主题：
- en: Prerequisites
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前置条件
- en: Introduction to physical computing systems
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理计算系统简介
- en: Basic elements of physical computing systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理计算系统的基本元素
- en: Application areas
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用领域
- en: 'Simple project: Push button input triggers event on Python code to toggle LED
    on and off'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单项目：推杆输入触发Python代码中的事件，切换LED的开关
- en: Prerequisites
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前置条件
- en: 'This topic will cover what parts you need in this chapter. These can be purchased
    from your favorite electrical hobby store or can simply be ordered online. We
    will need the following materials:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本主题将涵盖本章所需的部分。这些可以从您最喜欢的电子爱好商店购买，或者简单地在线订购。我们需要以下材料：
- en: 1 x BeagleBone Black
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x BeagleBone Black
- en: 1 x microSD Card with latest version of Debian flashed on it to boot the BeagleBone
    board from the microSD Card
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x 带有最新版本Debian的microSD卡，用于从microSD卡启动BeagleBone板
- en: 1 x 5V DC, 2A power supply
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x 5V直流，2A电源
- en: 1 x Ethernet cable
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x 以太网线
- en: 1 x Breadboard
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x 面板
- en: 1 x push button switch
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x 推杆开关
- en: 1 x LED
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x LED
- en: 1 x 470-ohm resistor
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x 470欧姆电阻
- en: 1 x 4.7 Kilo ohm resistor
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x 4.7千欧姆电阻
- en: Introducing physical computing systems
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理计算系统介绍
- en: This section will give you a basic overview of physical computing systems. Physical
    computing systems are electronic systems that use software and hardware together
    to get input from the physical world using the hardware and respond to it by providing
    an output based on the software running on the hardware. These systems are also
    called embedded systems in different applications. In general terms, any system
    that interacts with the analog world using hardware sensors and senses the input
    obtained and responds accordingly based on the software programmed for it is called
    a physical computing system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将为您提供一个物理计算系统的基本概述。物理计算系统是电子系统，它们结合软件和硬件来从物理世界获取输入，并通过在硬件上运行的软件提供输出以响应它。这些系统在不同的应用中也被称为嵌入式系统。一般来说，任何通过硬件传感器与模拟世界交互、获取输入并基于为其编写的软件相应地做出反应的系统，都被称为物理计算系统。
- en: Right from your music player, washing machine, automatic door opener, and mobile
    phone, everything that takes input from the physical world using sensors and buttons
    and responds to it by making a change in the physical world with its output is
    a physical computing system.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从您的音乐播放器、洗衣机、自动门开启器和手机，所有使用传感器和按钮从物理世界获取输入并通过改变其物理世界的输出以响应的系统，都是物理计算系统。
- en: Take, for example, your washing machine. Based on the input you provide by clicking
    on the buttons available on it, which is a physical input from the world to the
    washing machine system, it washes your clothes and dries them, which is again
    an output on the physical world; it is changing the physical things, the clothes,
    using air and water. So it is basically creating a change in the physical, analog
    world with its output, which is based on the software running on the hardware
    on the washing machine system with the sensors and actuators available on it.
    We will look at this in detail with block diagrams and more examples with explanations
    in the next section of this chapter, which looks at the basic components comprising
    a physical computing system and how they work.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以你的洗衣机为例。根据你通过点击其上的按钮提供的输入，这是一个从世界到洗衣机系统的物理输入，它清洗你的衣物并使其干燥，这又是对物理世界的输出；它使用空气和水改变物理事物，即衣物。因此，它基本上通过其输出在物理、模拟世界中创造变化，其输出基于洗衣机系统上的硬件上运行的软件，以及该系统上可用的传感器和执行器。我们将在本章下一节中详细探讨这一点，该节将探讨构成物理计算系统的基本组件以及它们的工作原理。
- en: Basic elements of physical computing systems
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理计算系统的基本元素
- en: In this section, you will learn what physical computing systems are composed
    of. First, we will see the basic structure of input and output elements and how
    to act and react, followed by the structure of it based on the electrical, electronic,
    and software aspects, including the input and output of the system. At the end,
    we will try to get a much clearer picture of the same concepts with examples.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解物理计算系统由什么组成。首先，我们将看到输入和输出元素的基本结构以及如何行动和反应，然后是它的电气、电子和软件方面的结构，包括系统的输入和输出。最后，我们将通过示例尝试以更清晰的方式了解相同的概念。
- en: 'The basic structure of a physical computing system comprises sensors, which
    can be either analog or digital, that will take input from the physical world
    using input sensors that are connected to the hardware of the physical computing
    system, as shown in the following diagram:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 物理计算系统的基本结构包括传感器，这些传感器可以是模拟的或数字的，它们将使用连接到物理计算系统硬件的输入传感器从物理世界获取输入，如下面的图所示：
- en: '![Basic elements of physical computing systems](img/4602_03_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![物理计算系统的基本元素](img/4602_03_01.jpg)'
- en: These inputs will be read by the software running on the electronic microprocessors
    and controllers on the physical computing system. Based on that software, a decision
    will be taken to provide the output and this output is converted from digital
    to analog form or makes a change in the physical world depending on the type of
    the actuators. So, basically, an action is being carried out based on the senses
    just like a human reflex actions and how they react to different senses. So the
    microcontroller or the computer chip that runs the software together acts as a
    brain and takes decisions based on the senses using the sensors connected to the
    hardware.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些输入将由物理计算系统上的电子微处理器和控制器上运行的软件读取。基于该软件，将做出决策以提供输出，该输出从数字形式转换为模拟形式，或者根据执行器的类型在物理世界中产生变化。因此，基本上，一个动作是根据感觉执行的，就像人类的反射动作以及它们如何对不同感觉做出反应一样。因此，运行软件的微控制器或计算机芯片一起充当大脑，根据连接到硬件的传感器使用感觉做出决策。
- en: 'Let''s look at a basic real-time example as discussed earlier to get a clear
    understanding of how the system works. A treadmill is a device people generally
    use for walking or running while staying in the same place, to do workouts in
    the gym, or some people even have them in their homes. These are powered by electric
    motors and have a sensor to read the speed at which the motor is running and a
    microcontroller unit / computer system with displays and buttons which runs a
    special software which reads these inputs from the sensor to measure speed as
    well as get input from the user to make the treadmill work at a particular speed.
    Shown in the following figure is a basic treadmill and below that you can see
    a basic block diagram as well:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下之前讨论的基本实时示例，以清晰地了解系统的工作原理。跑步机是一种人们通常用于在原地行走或跑步的设备，用于健身房锻炼，或者有些人甚至在他们的家中安装跑步机。这些设备由电动机驱动，并配备一个传感器来读取电动机的运行速度，以及一个带有显示屏和按钮的微控制器单元/计算机系统，该系统运行特殊软件，从传感器读取这些输入以测量速度，并从用户那里获取输入以使跑步机以特定速度运行。以下图示了一个基本的跑步机，下面你可以看到一个基本的框图：
- en: '![Basic elements of physical computing systems](img/4602_03_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![物理计算系统的基本元素](img/4602_03_02.jpg)'
- en: 'So, basically, as you see in the preceding figure, the treadmill has a HiTech
    computer console with buttons and a basic display for the user to select the speed
    at which he wants to run. The computer is connected to the motor controller to
    operate the motor at that particular speed by reading the speed sensor to measure
    the speed and regulate it using the algorithms running on the computer and the
    output from the computer controls to the motor controller maintain the speed of
    the motor. If you have a look at the following figure, you will understand better,
    as the block diagram shows the operation clearly:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，基本上，正如你在前面的图中看到的，跑步机有一个HiTech电脑控制台，带有按钮和基本显示屏，用户可以通过它选择自己想要的跑步速度。电脑连接到电机控制器，通过读取速度传感器来测量速度，并使用电脑上运行的算法来调节它，电脑的输出控制到电机控制器以维持电机的速度。如果你看一下下面的图，你会理解得更好，因为方块图清楚地显示了操作过程：
- en: '![Basic elements of physical computing systems](img/4602_03_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![物理计算系统的基本元素](img/4602_03_03.jpg)'
- en: Looking at the treadmill example will have given you a clear idea about the
    basic structure of physical computing systems and their operation. Let's go ahead
    and look in detail at the electronics in the total hardware of the system, followed
    by how the software works with this hardware to make decisions and give input.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看跑步机示例，你应该已经对物理计算系统的基本结构和它们的操作有了清晰的认识。让我们继续深入了解系统硬件中的电子部分，然后看看软件是如何与硬件协同工作以做出决策和提供输入的。
- en: 'Before we discuss the hardware structure of physical computing systems, let''s
    have a quick look at basic computer structure, as shown in the following diagram,
    as physical computing systems have evolved from computing systems basically; the
    structure of physical computing systems includes basic computing systems with
    added interfaces:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论物理计算系统的硬件结构之前，让我们快速看一下基本的计算机结构，如图所示，因为物理计算系统基本上是从计算系统演变而来的；物理计算系统的结构包括基本的计算系统，并增加了接口：
- en: '![Basic elements of physical computing systems](img/4602_03_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![物理计算系统的基本元素](img/4602_03_04.jpg)'
- en: 'Shown above is the block diagram of a basic computer which contains the **central
    processing unit** (**CPU**) which stores data in the memory unit and processes
    it in the arithmetic and logic unit, and the control unit basically performs the
    data transfer between all the other units to make them work together. To the CPU
    we the Input and Output are interfaced. If you look at the following image of
    a basic computer, you can see that the system unit is the CPU, the monitor and
    speakers are output devices, and, similarly, the keyboard and mouse are input
    devices:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上图是基本计算机的方块图，它包含**中央处理单元**（**CPU**），它将数据存储在内存单元中，并在算术逻辑单元中处理它，控制单元基本上执行所有其他单元之间的数据传输，使它们协同工作。输入和输出都连接到CPU。如果你看一下下面基本计算机的图像，你可以看到系统单元是CPU，显示器和扬声器是输出设备，同样，键盘和鼠标是输入设备：
- en: '![Basic elements of physical computing systems](img/4602_03_05.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![物理计算系统的基本元素](img/4602_03_05.jpg)'
- en: 'Based on the software running on the CPU, the input from keyboard and mouse
    carry out the process on the hardware and we can see the output in the monitor
    as well as hear via the speaker. The computers are advanced physical computing
    systems which have dedicated software, the operating systems running on them,
    and various protocols for communication. Now that we have clarity on how the computing
    system is structured, let''s have a look at the structure of embedded hardware
    systems such as BeagleBone Black. We will look into the basic structure first,
    followed by a detailed hardware block diagram specific to BeagleBone Black:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 基于运行在CPU上的软件，键盘和鼠标的输入在硬件上执行处理，我们可以在显示器上看到输出，也可以通过扬声器听到。计算机是高级物理计算系统，它们具有专用软件，运行的操作系统，以及各种通信协议。现在我们已经清楚了解计算系统的结构，让我们看看嵌入式硬件系统（如BeagleBone
    Black）的结构。我们首先将查看基本结构，然后是针对BeagleBone Black的详细硬件方块图：
- en: '![Basic elements of physical computing systems](img/4602_03_06.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![物理计算系统的基本元素](img/4602_03_06.jpg)'
- en: Shown in the preceding diagram is the fundamental block diagram of any physical
    computing embedded hardware system, in other words, embedded systems with microcontrollers
    and microprocessers. Comparing the preceding block diagram and the basic block
    diagram of the computer, you can see that the input and output ports are elaborated
    and explained well in the preceding block diagram, where you can see digital and
    analog input ports are interfaced with the CPU and, similarly, we have the output
    ports with Analog and Digital outputs. We also have the communication ports such
    as UART, I2C, SPI, and so on.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中展示了任何物理计算嵌入式硬件系统的基本框图，换句话说，就是带有微控制器和微处理器的嵌入式系统。将前面的框图与计算机的基本框图进行比较，你可以看到输入和输出端口在前面的框图中得到了详细的阐述和解释，其中你可以看到数字和模拟输入端口与CPU相连，同样地，我们还有具有模拟和数字输出的输出端口。我们还有如UART、I2C、SPI等通信端口。
- en: 'In basic terms, Digital input ports are capable of reading a particular DC
    voltage or a range of DC voltages between two set limits as HIGH and similarly
    as set limit as LOW value, in other words, the `1` and `0` we use in computer
    language called digital HIGH and digital LOW respectively. An example of a digital
    input can be the press of a switch: when it''s closed, it''s HIGH, in other words,
    `1`, and when it''s open, it''s LOW, in other words, `0`. Analog input ports are
    those which take in Analog voltage between a range of values and convert them
    to digital output form to make it understandable to the CPU by converting it to
    0s and 1s or digital HIGHs and LOWs. An example of an Analog input could be an
    analog temperature sensor which senses temperature around it and provides a voltage
    in the range from minimum value to maximum value corresponding to the temperature
    around the sensor. Converters that convert Analog voltage values to digital values
    are called **Analog to Digital converters** (**ADCs**). Similarly, there are Digital
    output ports that provide HIGH and LOW values only and there are Analog output
    ports that convert digital values to Analog Outputs. An example of Analog output
    could be the audio output you get from phones and music players or video through
    an Analog signal. And we also have the communication ports, which include different
    protocol-based communication ports such as UART, I2C, SPI, and so on. The availability
    of input, output, and communication ports varies from one device to another, depending
    on what microcontrollers or microprocessors they use and the architecture of the
    system.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 用基本术语来说，数字输入端口能够读取特定的直流电压或两个设定极限之间的直流电压范围，将其作为高电平，同样地，将其作为低电平，换句话说，就是我们计算机语言中使用的数字高电平和数字低电平。一个数字输入的例子可以是开关的按下：当它闭合时，它是高电平，换句话说，是`1`，而当它打开时，它是低电平，换句话说，是`0`。模拟输入端口是那些接收一定范围内的模拟电压并将其转换为数字输出形式的端口，以便通过将其转换为0s和1s或数字高电平和低电平来使CPU能够理解。一个模拟输入的例子可以是模拟温度传感器，它感知周围的温度并提供一个从最小值到最大值的电压，这个电压对应于传感器周围的温度。将模拟电压值转换为数字值的转换器被称为**模数转换器**（**ADCs**）。同样地，还有只提供高电平和低电平的数字输出端口，以及将数字值转换为模拟输出的模拟输出端口。一个模拟输出的例子可以是来自手机和音乐播放器的音频输出或通过模拟信号的视频。我们还有通信端口，包括基于不同协议的通信端口，如UART、I2C、SPI等。输入、输出和通信端口的可用性因设备而异，这取决于它们使用的微控制器或微处理器以及系统的架构。
- en: 'Now, let''s look in detail at what the hardware structure of BeagleBone Black
    looks like, as shown in the following diagram:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细看看BeagleBone Black的硬件结构，如下面的图所示：
- en: '![Basic elements of physical computing systems](img/4602_03_07.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![物理计算系统的基本元素](img/4602_03_07.jpg)'
- en: So, as you can see in the preceding block diagram, the CPU consists of a Sitara
    AM3358BZCZ processor, with 2 GB of eMMC storage as **Read Only Memory** (**ROM**)
    and 512 MB of **Random Access Memory** (**RAM**) with different external ports
    for interfaces such as HDMI for video, USB client for USB communication, RJ45
    ports for Internet access, and so on. The structure is similar to a basic computer,
    just as we know that the BeagleBone board is nothing but a single board computer
    with GPIOs. The expansion header block contains the GPIOs, which can made to act
    as digital input or digital output depending on how we desire it to work for us
    based on the software running on the processor. The expansion headers also include
    analog inputs to read analog values. I believe that this section might have given
    you a clear idea about the basic structure of physical computing systems and how
    our BeagleBone board is also structured in a similar way.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，正如你在前面的框图中所看到的，CPU由Sitara AM3358BZCZ处理器组成，拥有2 GB的eMMC存储作为**只读存储器**（**ROM**）和512
    MB的**随机存取存储器**（**RAM**），以及不同的外部端口用于接口，如HDMI用于视频、USB客户端用于USB通信、RJ45端口用于互联网接入等。其结构类似于我们熟知的基本计算机，正如我们所知，BeagleBone板不过是一个带有GPIO的单板计算机。扩展头块包含GPIO，可以根据我们基于处理器上运行的软件如何希望它为我们工作而将其设置为数字输入或数字输出。扩展头还包括模拟输入以读取模拟值。我相信这一部分可能已经给你一个关于物理计算系统基本结构的清晰概念，以及我们的BeagleBone板也是以类似的方式构建的。
- en: Application areas
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用领域
- en: A few of the application areas where physical computing systems are used include
    almost all of modern-day technology gadgets and machines, from your mobile phones,
    fire alarms, and baby monitors, to home automation and industrial automation electronic
    systems, as well as the robotic systems used in homes and industries.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 几个物理计算系统应用领域包括几乎所有现代科技小工具和机器，从你的手机、火灾报警器和婴儿监视器，到家庭自动化和工业自动化电子系统，以及家庭和工业中使用的机器人系统。
- en: For example, what fire alarms with sprinkler systems in malls do is, basically,
    sense the temperature and smoke using sensors and whenever a event of fire is
    detected, they start the sprinkler system to sprinkle water from the tanks via
    the pipes and pumps using a control system that is continuously running the dedicated
    software that was written to do this operation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，商场中带有喷淋系统的火灾报警器基本上是通过传感器感应温度和烟雾，一旦检测到火灾事件，它们就会启动喷淋系统，通过管道和泵从水箱中喷水，使用的是持续运行专门编写软件的控制系统来完成这一操作。
- en: Similarly, home automation systems, baby monitors that are connected to the
    Internet help you connect your home electronic devices to the Internet and dedicated
    artificial intelligence software programs running on the servers operate your
    air conditioning or lighting and heating, and so on, to make your life better.
    Similar applications are also seen in industry, where robots are making a huge
    difference in manufacturing industries and nowadays many robot bartender systems
    are in use.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，家庭自动化系统、连接到互联网的婴儿监视器可以帮助你将家庭电子设备连接到互联网，运行在服务器上的专用人工智能软件程序操作空调、照明和供暖等，从而让你的生活更加便利。类似的用途在工业领域也很常见，其中机器人正在制造业中产生巨大影响，如今许多机器人调酒系统正在使用中。
- en: So, I hope now you should be able to imagine a clear picture of the existence
    of physical computing systems around us and how they work.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我希望你现在应该能够清晰地想象出我们周围物理计算系统的存在以及它们是如何工作的。
- en: In the sections and chapters coming after this, we will look into the building
    of different projects and use of these ports available on the expansion headers,
    including the digital inputs and outputs and Analog inputs to sense the input
    given from the physical world and build software by writing code on Python to
    make the system respond and act by providing output depending on the sensed input
    based on the software.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨不同项目的构建以及使用这些扩展头上的端口，包括数字输入和输出以及模拟输入，以感应来自物理世界的输入，并通过在Python上编写代码来构建软件，使系统能够根据感应到的输入提供相应的输出。
- en: Project – toggle LED using a push button
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目 – 使用按钮切换LED
- en: Now that we have a clear idea about what physical computing systems are and
    how they work, let's go ahead and build our own physical computing system using
    BeagleBone Black by connecting a push button switch to act as a input to the system
    and an LED which will act as the output. How we write the software program will
    decide what the LED does based on the input from the push button switch.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经清楚地了解了物理计算系统是什么以及它们是如何工作的，让我们继续使用BeagleBone Black构建自己的物理计算系统，通过将按钮开关连接到系统作为输入，并将LED作为输出。我们编写的软件程序将决定LED根据按钮开关的输入做什么。
- en: We already know how to connect an LED to the BeagleBone board and also how to
    program in Python to turn on and turn off the LED just as we experimented in the
    project of the last chapter. In this project, we will use the knowledge we gained
    and what we are going to learn now before we go ahead and build the physical computing
    system. Now that we know how to interface an LED, let's learn how to interface
    a push button and read input value from the push button connected to the BeagleBone
    board using Python.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道如何将LED连接到BeagleBone板，也知道如何用Python编程来打开和关闭LED，就像我们在上一章的项目中实验的那样。在这个项目中，我们将使用我们获得的知识以及我们现在将要学习的内容，在继续构建物理计算系统之前。现在我们知道如何接口LED，让我们学习如何接口按钮，并使用Python从连接到BeagleBone板的按钮读取输入值。
- en: 'First, connect the push button to BeagleBone Black, as shown in the following
    figure:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将按钮连接到BeagleBone Black，如图所示：
- en: '![Project – toggle LED using a push button](img/4602_03_08.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_08.jpg)'
- en: Once you have connected the push button switch to BeagleBone Black as shown
    in the preceding figure to the GPIO_115 / P9_27 pin on the GPIO header through
    the switch and resistor to pull down the state to LOW when the push button is
    not pressed, let's go ahead and read the input from the switch via the python
    interactive shell.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将按钮开关连接到BeagleBone Black，如图所示，通过开关和电阻将状态拉低到LOW，当按钮未按下时，让我们继续通过Python交互式shell读取开关的输入。
- en: Pull-down and pull-up resistors are used to keep the input state with either
    low or high input supplied as input to the GPIO pin. You can do your own research
    on the Web to learn more about pull-down and pull-up resistors.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 拉下和拉上电阻用于保持输入状态，无论是低电平还是高电平输入都作为GPIO引脚的输入。您可以在网上进行自己的研究，了解更多关于下拉和上拉电阻的信息。
- en: 'Open the Python interactive shell:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Python交互式shell：
- en: '![Project – toggle LED using a push button](img/4602_03_09.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_09.jpg)'
- en: 'Import the GPIO library using the following line of code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码行导入GPIO库：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Project – toggle LED using a push button](img/4602_03_10.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_10.jpg)'
- en: 'Then let''s define GPIO `P9_27` of BeagleBone Black as the input pin to which
    we have connected the switch using the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们使用以下命令将BeagleBone Black的GPIO `P9_27`定义为输入引脚，我们将使用该引脚连接开关：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Project – toggle LED using a push button](img/4602_03_11.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_11.jpg)'
- en: 'Next, read the current status of the GPIO using the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令读取GPIO的当前状态：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Project – toggle LED using a push button](img/4602_03_12.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_12.jpg)'
- en: 'That should print out the current status of GPIO P9_27; in the output shown
    in the preceding screenshot, it is `0`. Now the setup is as shown in the following
    image, where the button is not pressed; that is the reason the reading value of
    P9_27 GPIO is `0`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会打印出GPIO P9_27的当前状态；在前面截图的输出中，它是`0`。现在设置如图所示，按钮没有被按下；这就是为什么P9_27 GPIO的读取值为`0`的原因：
- en: '![Project – toggle LED using a push button](img/4602_03_13.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_13.jpg)'
- en: 'When you press the push button and hold it and then read the input, you will
    get the input value as `1`, as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当您按下按钮并保持它，然后读取输入时，您将得到`1`的输入值，如图所示：
- en: '![Project – toggle LED using a push button](img/4602_03_14.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_14.jpg)'
- en: 'So, as shown in the preceding screenshot, when the button is pressed, the value
    that will be read is `1`, as shown in the preceding screenshot on the python console:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如图所示，当按钮被按下时，将读取的值是`1`，如图所示在Python控制台上：
- en: '![Project – toggle LED using a push button](img/4602_03_15.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_15.jpg)'
- en: Now that we know the basic functions using which we can read the input status
    of the push button, let's go ahead and write the python program which will read
    the push button status in real time and print it every half a second.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了使用哪些基本功能可以读取按钮的输入状态，让我们继续编写Python程序，该程序将实时读取按钮状态并每半秒打印一次。
- en: 'First, let''s create the python file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个Python文件：
- en: '![Project – toggle LED using a push button](img/4602_03_16.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_16.jpg)'
- en: 'Then, let us type the program as shown in the following screenshot and save
    it:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们按照以下截图所示输入程序并保存：
- en: '![Project – toggle LED using a push button](img/4602_03_17.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_17.jpg)'
- en: 'Next we will run the Python code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将运行Python代码：
- en: '![Project – toggle LED using a push button](img/4602_03_18.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_18.jpg)'
- en: When you run the python code, the output will be as shown in the preceding screenshot
    when you don't press the push button.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行Python代码时，如果你没有按下按钮，输出将如前一个截图所示。
- en: 'And when you press and hold it, the output will be as shown in the following
    screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下并保持时，输出将如下截图所示：
- en: '![Project – toggle LED using a push button](img/4602_03_19.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_19.jpg)'
- en: 'When you leave the button again and leave it to come back to its previous position,
    the output will be as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次释放按钮并让它回到原来的位置时，输出将如下截图所示：
- en: '![Project – toggle LED using a push button](img/4602_03_20.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_20.jpg)'
- en: 'Now let''s go ahead and modify the code in such a way that, instead of printing
    the current status of the switch, the python program prints that the button was
    pressed every time you press it and leave it. Save the python code with the name
    `ButtonPress.py`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改代码，使其在每次按下按钮并释放时打印按钮被按下，而不是打印开关的当前状态。将Python代码保存为`ButtonPress.py`：
- en: '![Project – toggle LED using a push button](img/4602_03_21.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_21.jpg)'
- en: 'When you run the code and press the button, you will get the output as shown
    in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行代码并按下按钮时，你将得到如下截图所示的输出：
- en: '![Project – toggle LED using a push button](img/4602_03_22.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_22.jpg)'
- en: Every time you press the push button switch and leave it, you will get the text
    **Button pressed!** printed on the shell.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你按下按钮并释放时，你将在shell上得到**按钮被按下**的文本输出。
- en: Now that we have the basic logic figured out to print the button press event,
    we will go ahead and modify this code to toggle the LED to on and off every time
    the button is pressed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经找到了打印按钮按下事件的逻辑，我们将继续修改这段代码，以便每次按下按钮时都能切换LED的开和关状态。
- en: 'Before we move on to programming BeagleBone Black to toggle the LED, let''s
    connect the LED to BeagleBone Black, as shown in the following circuit diagram
    with the push button switch as well:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续编程BeagleBone Black以切换LED之前，让我们将LED连接到BeagleBone Black，如下所示，包括按钮开关电路图：
- en: '![Project – toggle LED using a push button](img/4602_03_23.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_23.jpg)'
- en: 'Now, write the program to toggle the LED to the On and Off state alternatively
    for every press of the button, as shown in the following screenshot, and save
    the file with the name `ButtonLEDToggle.py` or a name of your choice:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，编写程序以在每次按下按钮时交替将LED切换到开和关状态，如下截图所示，并将文件保存为`ButtonLEDToggle.py`或你选择的名称：
- en: '![Project – toggle LED using a push button](img/4602_03_24.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_24.jpg)'
- en: 'Then, when you run the code and then press the button, you can see that the
    LED goes On and Off alternatively every time you press the push button. The output
    will be as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当你运行代码并按下按钮时，你可以看到每次按下按钮时LED都会交替开启和关闭。输出将如下截图所示：
- en: '![Project – toggle LED using a push button](img/4602_03_25.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_25.jpg)'
- en: 'When the LED is off as shown in the following image:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当LED关闭，如下所示：
- en: '![Project – toggle LED using a push button](img/4602_03_26.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_26.jpg)'
- en: 'When you press the button and leave it, the LED will turn on, as shown in the
    following image:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下按钮并释放时，LED将点亮，如下所示：
- en: '![Project – toggle LED using a push button](img/4602_03_27.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_27.jpg)'
- en: 'Again, when you press the button, the LED will toggle back to the Off state:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 再次按下按钮时，LED将切换回关闭状态：
- en: '![Project – toggle LED using a push button](img/4602_03_28.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![项目 – 使用按钮切换LED](img/4602_03_28.jpg)'
- en: This will happen alternatively every time when you press the push button, the
    led will toggle to HIGH and LOW state.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你按下按钮时，这将会交替发生，LED将切换到高电平和低电平状态。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Here we are at the end of the chapter where we learnt the fundamental concept
    of how a physical computing system works with the help of the basic structure
    of these systems with BeagleBone Black as an example. We also discussed a few
    application areas in the real world. Then, we saw how to interface a push button
    switch with a BeagleBone board and write python code to read its status by accessing
    the GPIO pin as an input from python. At the end, we worked on a very basic project
    to understand how we can build our own physical computing system that senses and
    reacts to the physical world using a push button and LED to toggle the LED from
    On to Off every time you push the button.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了本章的结尾，我们学习了物理计算系统如何工作的基本概念，这是通过这些系统的基本结构以及以BeagleBone Black为例来实现的。我们还讨论了现实世界中的几个应用领域。然后，我们看到了如何将按钮开关与BeagleBone板连接，并编写Python代码通过访问GPIO引脚作为Python的输入来读取其状态。最后，我们进行了一个非常基础的项目，以了解我们如何构建自己的物理计算系统，该系统能够感知并响应物理世界，使用按钮和LED在每次按下按钮时将LED从开启切换到关闭状态。
- en: In the next chapter, we will see how we can build a much more complex physical
    computing system with an Analog temperature sensor, unlike a digital input reading
    from the input from the push button we read. But before you go to the next chapter,
    I would suggest you write different programs to make the LED do whatever you like
    using the button press event; for example, you can count how many button presses
    have to be made and, based on that, you can make the led blink for that many times
    and then get back to the mode where it will wait for the next number of clicks.
    Try anything that comes in your mind and play with the hardware and coding.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用模拟温度传感器构建一个更复杂的物理计算系统，这与从按钮输入读取的数字输入不同。但在你进入下一章之前，我建议你编写不同的程序，利用按钮按下事件让LED执行你喜欢的任何操作；例如，你可以计算需要按下多少次按钮，然后根据这个数量，让LED闪烁那么多次，然后回到等待下一次点击数量的模式。尝试你脑海中出现的任何想法，并与硬件和编码进行互动。
