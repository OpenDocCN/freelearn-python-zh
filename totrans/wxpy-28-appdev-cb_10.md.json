["```py\nclass TangoArtProvider(wx.ArtProvider):\n    def __init__(self):\n        super(TangoArtProvider, self).__init__()\n\n        # Attributes\n        self.bmps = [bmp.replace('.png', '')\n                     for bmp in os.listdir('tango')\n                     if bmp.endswith('.png')]\n\n    def CreateBitmap(self, id,\n                     client=wx.ART_OTHER,\n                     size=wx.DefaultSize):\n\n        # Return NullBitmap on GTK to allow\n        # the default artprovider to get the\n        # system theme bitmap.\n        if wx.Platform == '__WXGTK__':\n            return wx.NullBitmap\n\n        # Non GTK Platform get custom resource\n        # when one is available.\n        bmp = wx.NullBitmap\n        if client == wx.ART_MENU or size == (16,16):\n            if id in self.bmps:\n                path = os.path.join('tango', id+'.png')\n                bmp = wx.Bitmap(path)\n        else:\n            # TODO add support for other bitmap sizes\n            pass\n\n        return bmp\n\n```", "```py\nclass ArtProviderApp(wx.App):\n    def OnInit(self):\n        # Push our custom ArtProvider on to\n        # the provider stack.\n        wx.ArtProvider.PushProvider(TangoArtProvider())\n        title = â€œTango ArtProvider\"\n        self.frame = ArtProviderFrame(None,\n                                      title=title)\n        self.frame.Show()\n        return True\n\n```", "```py\nclass ProgressStatusBar(wx.StatusBar):\n    \"\"\"Custom StatusBar with a built-in progress bar\"\"\"\n    def __init__(self, parent, id_=wx.ID_ANY,\n                 style=wx.SB_FLAT,\n                 name=\"ProgressStatusBar\"):\n        super(ProgressStatusBar, self).__init__(parent,\n                                                id_,\n                                                style,\n                                                name)\n\n        # Attributes\n        self._changed = False   # position has changed ?\n        self.busy = False       # Bar in busy mode ?\n        self.timer = wx.Timer(self)\n        self.prog = wx.Gauge(self, style=wx.GA_HORIZONTAL)\n        self.prog.Hide() # Hide on init\n\n        # Layout\n        self.SetFieldsCount(2)\n        self.SetStatusWidths([-1, 155])\n\n        # Event Handlers\n        self.Bind(wx.EVT_IDLE, \n                  lambda evt: self.__Reposition())\n        self.Bind(wx.EVT_TIMER, self.OnTimer)\n        self.Bind(wx.EVT_SIZE, self.OnSize)\n\n    def __del__(self):\n        if self.timer.IsRunning():\n            self.timer.Stop()\n\n```", "```py\n    def __Reposition(self):\n        \"\"\"Repositions the gauge as necessary\"\"\"\n        if self._changed:\n            lfield = self.GetFieldsCount() - 1\n            rect = self.GetFieldRect(lfield)\n            prog_pos = (rect.x + 2, rect.y + 2)\n            self.prog.SetPosition(prog_pos)\n            prog_size = (rect.width - 8, rect.height - 4)\n            self.prog.SetSize(prog_size)\n        self._changed = False\n\n    def OnSize(self, evt):\n        self._changed = True\n        self.__Reposition()\n        evt.Skip()\n\n```", "```py\n    def OnTimer(self, evt):\n        if not self.prog.IsShown():\n            self.Stop()\n\n        if self.busy:\n            # In busy (indeterminate) mode\n            self.prog.Pulse()\n\n```", "```py\n    def Run(self, rate=100):\n        if not self.timer.IsRunning():\n            self.timer.Start(rate)\n\n    def GetProgress(self):\n        return self.prog.GetValue()\n\n    def SetProgress(self, val):\n        if not self.prog.IsShown():\n            self.ShowProgress(True)\n\n        # Check if we are finished\n        if val == self.prog.GetRange():\n            self.prog.SetValue(0)\n            self.ShowProgress(False)\n        else:\n            self.prog.SetValue(val)\n\n    def SetRange(self, val):\n        if val != self.prog.GetRange():\n            self.prog.SetRange(val)\n\n    def ShowProgress(self, show=True):\n        self.__Reposition()\n        self.prog.Show(show)\n\n    def StartBusy(self, rate=100):\n        self.busy = True\n        self.__Reposition()\n        self.ShowProgress(True)\n        if not self.timer.IsRunning():\n            self.timer.Start(rate)\n\n    def StopBusy(self):\n        self.timer.Stop()\n        self.ShowProgress(False)\n        self.prog.SetValue(0)   # Reset progress value\n        self.busy = False\n\n    def IsBusy(self):\n        \"\"\"Is the gauge busy?\"\"\"\n        return self.busy\n\n```", "```py\nimport wx\nimport wx.lib.pubsub as pubsub\n\n# message data will be tool id\nMSG_TOOL_CLICKED = ('toolwin', 'clicked')\n\nclass ToolWindow(wx.MiniFrame):\n    def __init__(self, parent, rows=1, columns=0, title=''):\n        style = wx.CAPTION|wx.SYSTEM_MENU|\\\n                wx.SIMPLE_BORDER|wx.CLOSE_BOX\n        super(ToolWindow, self).__init__(parent,\n                                         title=title,\n                                         style=style)\n\n        # Attributes\n        self.panel = ToolPanel(self, rows, columns)\n\n        # Layout\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.panel, 1, wx.EXPAND)\n        self.SetSizer(sizer)\n\n    def AddTool(self, id, bmp, helplbl=''):\n        \"\"\"Add a tool to the window\"\"\"\n        self.panel.AddTool(id, bmp, helplbl)\n        self.Fit()\n\n```", "```py\nclass ToolPanel(wx.Panel):\n    \"\"\"Panel to hold the tools\"\"\"\n    def __init__(self, parent, rows, columns):\n        super(ToolPanel, self).__init__(parent)\n\n        # Attributes\n        self.sizer = wx.FlexGridSizer(rows, columns, 5, 5)\n\n        # Setup\n        self.SetSizer(self.sizer)\n\n        # Event Handlers\n        self.Bind(wx.EVT_BUTTON, self.OnButton)\n\n```", "```py\n    def AddTool(self, id, bmp, helplbl=''):\n        tool = wx.BitmapButton(self, id, bmp)\n        tool.SetToolTipString(helplbl)\n        self.sizer.Add(tool)\n        self.Layout()\n\n```", "```py\n    def OnButton(self, event):\n        \"\"\"Notify clients when tool is clicked\"\"\"\n        pubsub.Publisher.sendMessage(MSG_TOOL_CLICKED,\n                                     event.GetId())\n\n```", "```py\nclass SearchBar(wx.Panel):\n    def __init__(self, parent):\n        style = wx.BORDER_RAISED\n        super(SearchBar, self).__init__(parent,\n                                        style=style)\n\n        # Attributes\n        self.search = wx.SearchCtrl(self,\n                                    size=(250, -1),\n                                    style=wx.TE_PROCESS_ENTER)\n        self.lastfind = ''\n\n        # Layout\n        self.__DoLayout()\n\n        # Event Handlers\n        if wx.Platform in ['__WXMSW__', '__WXGTK__']:\n            # Workaround for composite control on msw/gtk\n            for child in self.search.GetChildren():\n                if isinstance(child, wx.TextCtrl):\n                    child.Bind(wx.EVT_KEY_UP, self.OnEnter)\n                    break\n        else:\n            self.search.Bind(wx.EVT_KEY_UP, self.OnEnter)\n        self.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, self.OnCancel)\n\n    def __DoLayout(self):\n        sizer = wx.BoxSizer(wx.HORIZONTAL)\n        sizer.Add(self.search, 0, wx.ALL, 2)\n        self.SetSizer(sizer)\n\n```", "```py\n    def OnCancel(self, event):\n        self.search.SetValue(\"\")\n        self.search.ShowCancelButton(False)\n\n```", "```py\n    def OnEnter(self, event):\n        \"\"\"Send a search event\"\"\"\n        code = event.GetKeyCode()\n        val = self.search.GetValue()\n        if code == wx.WXK_RETURN and val:\n            if val == self.lastfind:\n                etype = wx.wxEVT_COMMAND_FIND\n            else:\n                etype = wx.wxEVT_COMMAND_FIND_NEXT\n            fevent = wx.FindDialogEvent(etype)\n            fevent.SetFindString(val)\n            self.ProcessEvent(fevent)\n            self.lastfind = val\n        else:\n            show = bool(val)\n            self.search.ShowCancelButton(show)\n\n```", "```py\nimport wx\nimport wx.lib.mixins.listctrl as listmix\n\nclass CheckListCtrl(wx.ListCtrl,\n                    listmix.CheckListCtrlMixin,\n                    listmix.ListRowHighlighter,\n                    listmix.ListCtrlAutoWidthMixin):\n    def __init__(self, *args, **kwargs):\n        wx.ListCtrl.__init__(self, *args, **kwargs)\n        listmix.CheckListCtrlMixin.__init__(self)\n        listmix.ListRowHighlighter.__init__(self)\n        listmix.ListCtrlAutoWidthMixin.__init__(self)\n\n        # Attributes\n        self._observers = list()\n\n```", "```py\n    def OnCheckItem(self, index, flag):\n        \"\"\"Overrides CheckListCtrlMixin.OnCheckItem \n        callback\"\"\"\n        # Notify observers that a checkbox was \n        # checked/unchecked\n        for observer in self._observers:\n            observer(index, flag)\n\n```", "```py\n    def GetItems(self, checked=True):\n        \"\"\"Gets a list of all the (un)checked items\"\"\"\n        indexes = list()\n        for index in range(self.GetItemCount()):\n            if self.IsChecked(index) == checked:\n                indexes.append(index)\n        return indexes\n\n    def RegisterObserver(self, callback):\n        \"\"\"Register OnCheckItem callback\n        @param callaback: callable(index, checked)\n        \"\"\"\n        self._observers.append(callback)\n\n```", "```py\nimport wx\nimport wx.stc\n\nclass BaseLexer(object):\n    \"\"\"Defines simple interface for custom lexer objects\"\"\"\n    def __init__(self):\n        super(BaseLexer, self).__init__()\n\n    def StyleText(self, event):\n        raise NotImplementedError\n\n```", "```py\nclass VowelLexer(BaseLexer):\n    \"\"\"Simple lexer to highlight vowels\"\"\"\n    # Define some style IDs\n    STC_STYLE_VOWEL_DEFAULT, \\\n    STC_STYLE_VOWEL_KW = range(2)\n    def __init__(self):\n        super(VowelLexer, self).__init__()\n\n        # Attributes\n        self.vowels = [ord(char) for char in \"aeiouAEIOU\"] \n\n```", "```py\n    def StyleText(self, event):\n        \"\"\"Handle the EVT_STC_STYLENEEDED event\"\"\"\n        stc = event.GetEventObject()\n        # Last correctly styled character\n        last_styled_pos = stc.GetEndStyled()\n        # Get styling range for this call\n        line = stc.LineFromPosition(last_styled_pos)\n        start_pos = stc.PositionFromLine(line)\n        end_pos = event.GetPosition()\n        # Walk the line and find all the vowels to style\n        # Note: little inefficient doing one char at a time\n        #       but just to illustrate the process.\n        while start_pos < end_pos:\n            stc.StartStyling(start_pos, 0x1f)\n            char = stc.GetCharAt(start_pos)\n            if char in self.vowels:\n                # Set Vowel Keyword style\n                style = VowelLexer.STC_STYLE_VOWEL_KW\n            else:\n                # Set Default style\n                style = VowelLexer.STC_STYLE_VOWEL_DEFAULT\n            # Set the styling byte information for 1 char from\n            # current styling position (start_pos) with the\n            # given style.\n            stc.SetStyling(1, style)\n            start_pos += 1\n\n```", "```py\nclass CustomSTC(wx.stc.StyledTextCtrl):\n    def __init__(self, *args, **kwargs):\n        super(CustomSTC, self).__init__(*args, **kwargs)\n\n        # Attributes\n        self.custlex = None\n\n        # Event Handlers\n        self.Bind(wx.stc.EVT_STC_STYLENEEDED, self.OnStyle)\n\n    def OnStyle(self, event):\n        # Delegate to custom lexer object if one exists\n        if self.custlex:\n            self.custlex.StyleText(event)\n        else:\n            event.Skip()\n\n    def SetLexer(self, lexerid, lexer=None):\n        \"\"\"Overrides StyledTextCtrl.SetLexer\n        Adds optional param to pass in custom container\n        lexer object.\n        \"\"\"\n        self.custlex = lexer\n        super(CustomSTC, self).SetLexer(lexerid)\n\n```", "```py\nclass CustomCheckBox(wx.PyControl):\n    \"\"\"Custom CheckBox implementation where label is\n    below the CheckBox.\n    \"\"\"\n    def __init__(self, parent, id_=wx.ID_ANY, label=\"\"):\n        style = wx.BORDER_NONE\n        super(CustomCheckBox, self).__init__(parent,\n                                             id_,\n                                             style=style)\n\n        # Attributes\n        self.InheritAttributes()\n        self._hstate = 0\n        self._checked = False\n        self._ldown = False\n        self.SetLabel(label)\n\n        # Event Handlers\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n        self.Bind(wx.EVT_ERASE_BACKGROUND, self.OnErase)\n        self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)\n        self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)\n        self.Bind(wx.EVT_ENTER_WINDOW,\n                  lambda event:\n                  self._SetState(wx.CONTROL_CURRENT))\n        self.Bind(wx.EVT_LEAVE_WINDOW,\n                  lambda event: self._SetState(0))\n\n```", "```py\n    def _SetState(self, state):\n        if self._hstate != state:\n            if state == 0:\n                self._ldown = False\n            self._hstate = state\n            self.Refresh()\n\n    #-- Implementation --#\n\n```", "```py\n    def DoGetBestSize(self):\n        lblsz = self.GetTextExtent(self.GetLabel())\n        width = max(lblsz[0], 16) + 4 # 2px padding l/r\n        height = lblsz[1] + 16 + 6\n        best_sz = wx.Size(width, height)\n        self.CacheBestSize(best_sz)\n        return best_sz\n\n    #-- Event Handlers --#\n\n```", "```py\n    def OnPaint(self, event):\n        dc = wx.AutoBufferedPaintDCFactory(self)\n        gc = wx.GCDC(dc)\n        renderer = wx.RendererNative.Get()\n\n        # Setup GCDC\n        rect = self.GetClientRect()\n        bcolour = self.GetBackgroundColour()\n        brush = wx.Brush(bcolour)\n        gc.SetBackground(brush)\n        gc.Clear()\n\n        # Center checkbox\n        cb_x = (rect.width - 16) / 2\n        cb_y = 2 # padding from top\n        cb_rect = wx.Rect(cb_x, cb_y, 16, 16)\n\n        # Draw the checkbox\n        state = 0\n        if self._checked:\n            state = wx.CONTROL_CHECKED\n        if not self.IsEnabled():\n            state |= wx.CONTROL_DISABLED\n        renderer.DrawCheckBox(self, dc, cb_rect,\n                              state|self._hstate)\n\n        # Draw the label\n        lbl_rect = wx.Rect(0, cb_rect.bottom, rect.width,\n                           rect.height - cb_rect.height)\n        gc.DrawLabel(self.GetLabel(),\n                     lbl_rect,\n                     wx.ALIGN_CENTER)\n\n    def OnErase(self, event):\n        pass # do nothing\n\n```", "```py\n    def OnLeftDown(self, event):\n        self._ldown = True\n        event.Skip()\n\n    def OnLeftUp(self, event):\n        if self._ldown:\n            self._ldown = False\n            self._checked = not self._checked\n            self.Refresh()\n            # Generate EVT_CHECKBOX event\n            etype = wx.wxEVT_COMMAND_CHECKBOX_CLICKED\n            chevent = wx.CommandEvent(etype, self.GetId())\n            chevent.SetEventObject(self)\n            self.ProcessEvent(chevent)\n        event.Skip()\n\n```", "```py\n    #---- Public Api ----#\n\n    def SetValue(self, state):\n        self._checked = state\n        self.Refresh()\n\n    def GetValue(self):\n        return self._checked\n\n    def IsChecked(self):\n        return self.GetValue()\n\n```"]