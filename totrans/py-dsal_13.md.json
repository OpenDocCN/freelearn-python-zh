["```py\n% pip install numpy\n% pip install scikit-learn\n% pip install matplotlib\n% pip install pandas\n% pip install textblob  \n\n```", "```py\n    import numpy as np \n    data = pandas.DataFrame([ \n        [4., 45., 984.], \n        [np.NAN, np.NAN, 5.], \n        [94., 23., 55.], \n    ]) \n\n```", "```py\n    print(data.fillna(0.1)) \n\n```", "```py\n0     1      2\n0   4.0  45.0  984.0\n1   0.1   0.1    5.0\n2  94.0  23.0   55.0\n\n```", "```py\n    print(data.fillna(data.mean())) \n\n```", "```py\n0     1      2\n0   4.0  45.0  984.0\n1  49.0  34.0    5.0\n2  94.0  23.0   55.0\n\n```", "```py\n[[  58\\.    1\\.   43.]\n [  10\\.  200\\.   65.]\n [  20\\.   75\\.    7.]]\n\n```", "```py\n    scaled_values = preprocessing.MinMaxScaler(feature_range=(0,1)) \n    results = scaled_values.fit(data).transform(data) \n    print(results) \n\n```", "```py\n[[ 1\\.          0\\.          0.62068966]\n [ 0\\.          1\\.          1\\.        ]\n [ 0.20833333  0.3718593   0\\.        ]]\n\n```", "```py\n    stand_scalar =  preprocessing.StandardScaler().fit(data) \n    results = stand_scalar.transform(data) \n    print(results)\n\n```", "```py\n[[ 1.38637564 -1.10805456  0.19519899]\n [-0.93499753  1.31505377  1.11542277]\n [-0.45137812 -0.2069992  -1.31062176]]\n\n```", "```py\n    results = preprocessing.Binarizer(50.0).fit(data).transform(data) \n    print(results) \n\n```", "```py\n[[ 1\\.  0\\.  0.]\n [ 0\\.  1\\.  1.]\n [ 0\\.  1\\.  0.]] \n\n```", "```py\n    from textblob.classifiers import NaiveBayesClassifier \n    train = [ \n        ('I love this sandwich.', 'pos'), \n        ('This is an amazing shop!', 'pos'), \n        ('We feel very good about these beers.', 'pos'), \n        ('That is my best sword.', 'pos'), \n        ('This is an awesome post', 'pos'), \n        ('I do not like this cafe', 'neg'), \n        ('I am tired of this bed.', 'neg'), \n        (\"I can't deal with this\", 'neg'), \n        ('She is my sworn enemy!', 'neg'), \n        ('I never had a caring mom.', 'neg') \n    ] \n\n```", "```py\n    cl = NaiveBayesClassifier(train) \n\n```", "```py\n    print(cl.classify(\"I just love breakfast\")) \n    print(cl.classify(\"Yesterday was Sunday\")) \n    print(cl.classify(\"Why can't he pay my bills\")) \n    print(cl.classify(\"They want to kill the president of Bantu\")) \n\n```", "```py\npos \npos \nneg \nneg \n\n```", "```py\n    from sklearn.datasets import fetch_20newsgroups \n    training_data = fetch_20newsgroups(subset='train',     \n        categories=categories, shuffle=True, random_state=42) \n\n```", "```py\n    categories = ['alt.atheism', \n                  'soc.religion.christian','comp.graphics', 'sci.med'] \n\n```", "```py\n    print(len(training_data)) \n\n```", "```py\n    print(set(training_data.target)) \n\n```", "```py\n    sentence_1 = \"As fit as a fiddle\"\n    sentence_2 = \"As you like it\"\n\n```", "```py\n    set((sentence_1 + sentence_2).split(\" \")) \n\n```", "```py\n    from sklearn.feature_extraction.text import CountVectorizer \n    from sklearn.feature_extraction.text import TfidfTransformer \n    from sklearn.naive_bayes import MultinomialNB \n    count_vect = CountVectorizer() \n    training_matrix = count_vect.fit_transform(training_data.data) \n\n```", "```py\n    matrix_transformer = TfidfTransformer() \n    tfidf_data = matrix_transformer.fit_transform(training_matrix) \n\n    print(tfidf_data[1:4].todense()) \n\n```", "```py\n    model = MultinomialNB().fit(tfidf_data, training_data.target) \n\n```", "```py\n    test_data = [\"My God is good\", \"Arm chip set will rival intel\"] \n    test_counts = count_vect.transform(test_data) \n    new_tfidf = matrix_transformer.transform(test_counts) \n\n```", "```py\n    prediction = model.predict(new_tfidf)  \n\n```", "```py\n    for doc, category in zip(test_data, prediction): \n        print('%r => %s' % (doc, training_data.target_names[category])) \n\n```", "```py\n'My God is good' => soc.religion.christian\n'Arm chip set will rival intel' => comp.graphics\n\n```", "```py\n    import numpy as np \n    import matplotlib.pyplot as plt \n    original_set = -2 * np.random.rand(100, 2) \n    second_set = 1 + 2 * np.random.rand(50, 2) \n    original_set[50: 100, :] = second_set \n\n```", "```py\n    from sklearn.cluster import KMeans \n    kmean = KMeans(n_clusters=2) \n\n    kmean.fit(original_set) \n\n    print(kmean.cluster_centers_) \n\n    print(kmean.labels_) \n\n```", "```py\n[[ 2.03838197  2.06567568]\n [-0.89358725 -0.84121101]]\n\n```", "```py\n    print(kmean.labels_) \n\n```", "```py\n[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  \n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n\n```", "```py\n    import matplotlib.pyplot as plt \n    for i in set(kmean.labels_): \n        index = kmean.labels_ == i \n        plt.plot(original_set[index,0], original_set[index,1], 'o') \n\n```", "```py\n    plt.plot(kmean.cluster_centers_[0][0],kmean.cluster_centers_[0][1], \n             '*', c='r', ms=10) \n    plt.plot(kmean.cluster_centers_[1][0],kmean.cluster_centers_[1][1], \n             '*', c='r', ms=10) \n\n```", "```py\n    plt.show()\n\n```", "```py\n    sample = np.array([[-1.4, -1.4]]) \n    print(kmean.predict(sample)) \n\n    another_sample = np.array([[2.5, 2.5]]) \n    print(kmean.predict(another_sample)) \n\n```", "```py\n[1]\n[0] \n\n```", "```py\n    import matplotlib.pyplot as plt \n\n    data = [25., 5., 150., 100.] \n    x_values = range(len(data)) \n    plt.bar(x_values, data) \n\n    plt.show() \n\n```", "```py\n    plt.bar(x_values, data, width=1.)  \n\n```", "```py\n    data = [ \n            [8., 57., 22., 10.], \n            [16., 7., 32., 40.],\n           ] \n\n    import numpy as np \n    x_values = np.arange(4) \n    plt.bar(x_values + 0.00, data[0], color='r', width=0.30) \n    plt.bar(x_values + 0.30, data[1], color='y', width=0.30) \n\n    plt.show() \n\n```", "```py\n    import numpy as np \n    import matplotlib.pyplot as plt \n\n    data = np.random.randn(50) \n\n    plt.boxplot(data) \n    plt.show() \n\n```", "```py\n    import matplotlib.pyplot as plt \n    data = [500, 200, 250] \n\n    labels = [\"Agriculture\", \"Aide\", \"News\"] \n\n    plt.pie(data, labels=labels,autopct='%1.1f%%') \n    plt.show() \n\n```", "```py\n    import numpy as np \n    import matplotlib.pyplot as plt \n\n    n = 10 \n    x = np.random.rand(n) \n    y = np.random.rand(n) \n    colors = np.random.rand(n) \n    area = np.pi * (60 * np.random.rand(n))**2 \n\n    plt.scatter(x, y, s=area, c=colors, alpha=0.5) \n    plt.show() \n\n```"]