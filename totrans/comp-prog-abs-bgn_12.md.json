["```py\n\tmov eax,3 \tjump exit \tmov eax,123  ; <- not executed!exit:\tret\n```", "```py\n\tint x = 3;\n\tgoto quit;\n\tx = 123;\t   // <- not executed!\nquit:\n\treturn x;\n```", "```py\nclass Person\n\tname\n\tage\nend_class\n```", "```py\np1 = Person(\"Dipika\", 34)\np2 = Person(\"Manfred\", 58)\n```", "```py\np1 = Person(\"Dipika\", 34)\np2 = Person(\"Manfred\", 58)\nprint p1.name\nprint p1.age\nprint p2.name\nprint p2.age\n```", "```py\nDipika\n34\nManfred\n58\n```", "```py\nclass Person\n\tprivate name\n\tprivate age\nend_class\n```", "```py\nclass Person\n\tprivate name\n\tprivate age\n\tpublic function get_name()\n\t\treturn name\n\tend_function\n\tpublic function set_name(new_name)\n\t\tname = new_name\n\tend_function\n\tpublic function get_age()\n\t\treturn age\n\tend_function\n\tpublic function set_age(new_age)\n\t\tage = new_age\n\tend_function\nend_class\n```", "```py\np1 = Person(\"Dipika\", 34)\np2 = Person(\"Manfred\", 58)\nprint p1.get_name() + \" is \" + p1.get_age() + \" year old\"\np1.set_age(35)\nprint p1.get_name() + \" is \" + p1.get_age() + \" year old\"\n```", "```py\nDipika is 34 years old\nDipika is 35 years old\n```", "```py\npublic function set_age(new_age)\n    if age < 0 or age > 130 then\n       throw ValueError(\"Error. Age must be between 0 and 130\")\n    end_if\n    age = new_age\nend_function\n```", "```py\nclass Person\n\tprivate name\n\tprivate age\n\tpublic function birthday()\n\t\tage = age + 1\n\tend_function\n\t// Getters and setters as before are defined here\nend_class\n```", "```py\np1 = Person(\"Dipika\", 34)\nprint p1.get_name() + \" is \" + p1.get_age() + \" year old\"\np1.birthday()\nprint p1.get_name() + \" is \" + p1.get_age() + \" year old\"\n```", "```py\nDipika is 34 years old\nDipika is 35 years old\n```", "```py\nclass Person\n\tprivate name\n\tprivate date_of_birth\n\tprivate gender\n\tprivate address\n\tprivate nationality\n\tprivate phone_number\n\tprivate email_address\n\tpublic function get_name()\n\t\treturn name\n\tend_function\n\tpublic function set_name(new_name)\n\t\tname = new_name\n\tend_function\n\n     // Getters and setters for all the other \n     // variables are implemented here\nend_class\n```", "```py\nclass Employee inherit Person\n\tprivate salary\n\tprivate department\n\tpublic function get_salary()\n\t\treturn salary\n\tend_function\n\tpublic function set_salary(new_salary)\n\t\tsalary = new_salary\n\tend_function\n\tpublic function get_department()\n\t\treturn department\n\tend_function\n\tpublic function set_department(new_department)\n\t\tdepartment = new_department\n\tend_function\nend_class\n```", "```py\nfunction add(a, b)\n    return a + b\nend_function\n```", "```py\nprint add(2, 3)\n```", "```py\n5\n```", "```py\nprint Math.random()\nprint Math.random()\n```", "```py\n0.34\n0.75\n```", "```py\nx = 10\ny = 20\nx = y\n```", "```py\nx = 10\ny = 20\n```", "```py\ny = 22\n```", "```py\nprint x\n```", "```py\n22\n```", "```py\nx = 0\nfunction some_func(value)\n    x = x + value\n    return x + 3\nend_function\n```", "```py\n x = x + value\n```", "```py\nprint some_func(10)\nprint some_func(10)\n```", "```py\n13\n23\n```", "```py\nSELECT firstName, lastName FROM customers;\n```", "```py\nstrings = ['06', '68', '00', '30']\nnumbers = []\nfor value in strings:\n    if int(value) != 0:\n        numbers.append(int(value))\nprint(numbers)\n```", "```py\n    [6, 68, 30]\n    ```", "```py\nstrings = ['06', '68', '00', '30']\nnumbers = [int(value) for value in strings if int(value) != 0]\nprint(numbers)\n```", "```py\nfunction formal_greeter(name)\n    return \"Dear, \" + name\nend_function\nfunction informal_greeter(name)\n    return \"Yo, \" + name\nend_function\nfunction greeter(greeter_func, name)\n    greeter_func(name)\nend_function\ngreeter(formal_greeter, \"Bob\")\ngreeter(informal_greeter, \"Bob\")\n```", "```py\nDear, Bob\nYo, Bob\n```", "```py\np1 = Person(\"Dipika\", 34)\np2 = Person(\"Manfred\", 58)\np3 = Person(\"Ahmed\", 38)\np4 = Person(\"Rita\", 39)\npersons = [p1, p2, p3, p4]\n```", "```py\nfunction compare(person1, person2)\n    return person1.get_age() > person2.get_age()\nend_function\nsorted_persons = sort(compare, persons)\n```", "```py\nDipika, 34\nAhmed, 38\nRita, 39\nManfred, 58\n```", "```py\nAhmed, 38\nDipika, 34\nManfred, 58\nRita, 39\n```", "```py\nmother(anna,lisa).\nmother(lisa,karen).\nmother(sue,john).\nfather(bob,lisa).\nfather(fred,karen).\nfather(fred,john).\n```", "```py\ngrandparent(X,Z) :- parent(X,Y), parent(Y,Z).\nparent(X,Y) :- father(X,Y).\nparent(X,Y) :- mother(X,Y).\n```", "```py\ngrandparent(anna, karen).\n```", "```py\nyes\n```", "```py\ngrandparent(Q, karen).\n```", "```py\nbob\nanna\n```", "```py\ngrandparent(anna, Q).\n```", "```py\nkaren\n```"]