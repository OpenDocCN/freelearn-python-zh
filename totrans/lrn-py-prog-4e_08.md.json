["```py\n# files/open_try.py\nfh = open(\"fear.txt\", \"rt\")  # r: read, t: text\nfor line in fh.readlines():\n    print(line.strip())  # remove whitespace and print\nfh.close() \n```", "```py\n# files/open_try.py\nfh = open(\"fear.txt\", \"rt\")\ntry:\n    for line in fh.readlines():\n        print(line.strip())\nfinally:\n    fh.close() \n```", "```py\n# files/open_try.py\nfh = open(\"fear.txt\")  # rt is default\ntry:\n    for line in fh:  # we can iterate directly on fh\n        print(line.strip())\nfinally:\n    fh.close() \n```", "```py\nAn excerpt from Fear - By Thich Nhat Hanh\nThe Present Is Free from Fear\nWhen we are not fully present, we are not really living. We are not\nreally there, either for our loved ones or for ourselves. If we are\nnot there, then where are we? We are running, running, running,\neven during our sleep. We run because we are trying to escape from\nour fear. […] \n```", "```py\n# files/open_with.py\nwith open(\"fear.txt\") as fh:\n    for line in fh:\n        print(line.strip()) \n```", "```py\n# files/print_file.py\nwith open(\"print_example.txt\", \"w\") as fw:\n    print(\"Hey I am printing into a file!!!\", file=fw) \n```", "```py\n# files/read_write.py\nwith open(\"fear.txt\") as f:\n    lines = [line.rstrip() for line in f]\nwith open(\"fear_copy.txt\", \"w\") as fw:  # w - write\n    fw.write(\"\\n\".join(lines)) \n```", "```py\n# files/read_write_bin.py\nwith open(\"example.bin\", \"wb\") as fw:\n    fw.write(b\"This is binary data...\")\nwith open(\"example.bin\", \"rb\") as f:\n    print(f.read())  # prints: b'This is binary data...' \n```", "```py\n# files/write_not_exists.py\nwith open(\"write_x.txt\", \"x\") as fw:  # this succeeds\n    fw.write(\"Writing line 1\")\nwith open(\"write_x.txt\", \"x\") as fw:  # this fails\n    fw.write(\"Writing line 2\") \n```", "```py\n$ python write_not_exists.py\nTraceback (most recent call last):\n  File \"write_not_exists.py\", line 6, in <module>\n    with open(\"write_x.txt\", \"x\") as fw:  # this fails\n         ^^^^^^^^^^^^^^^^^^^^^^^^\nFileExistsError: [Errno 17] File exists: 'write_x.txt' \n```", "```py\n# files/existence.py\nfrom pathlib import Path\np = Path(\"fear.txt\")\npath = p.parent.absolute()\nprint(p.is_file())  # True\nprint(path)  # /Users/fab/code/lpp4ed/ch08/files\nprint(path.is_dir())  # True\nq = Path(\"/Users/fab/code/lpp4ed/ch08/files\")\nprint(q.is_dir())  # True \n```", "```py\n# files/manipulation.py\nfrom collections import Counter\nfrom string import ascii_letters\nchars = ascii_letters + \" \"\ndef sanitize(s, chars):\n    return \"\".join(c for c in s if c in chars)\ndef reverse(s):\n    return s[::-1]\nwith open(\"fear.txt\") as stream:\n    lines = [line.rstrip() for line in stream]\n# let us write the mirrored version of the file\nwith open(\"raef.txt\", \"w\") as stream:\n    stream.write(\"\\n\".join(reverse(line) for line in lines))\n# now we can calculate some statistics\nlines = [sanitize(line, chars) for line in lines]\nwhole = \" \".join(lines)\n# we perform comparisons on the lowercased version of `whole`\ncnt = Counter(whole.lower().split())\n# we can print the N most common words\nprint(cnt.most_common(3)) # [('we', 17), ('the', 13), ('were', 7)] \n```", "```py\n$ python manipulation.py\n[('we', 17), ('the', 13), ('were', 7)] \n```", "```py\n# files/ops_create.py\nimport shutil\nfrom pathlib import Path\nbase_path = Path(\"ops_example\")\n# let us perform an initial cleanup just in case\nif base_path.exists() and base_path.is_dir():\n    shutil.rmtree(base_path)\n# now we create the directory\nbase_path.mkdir()\npath_b = base_path / \"A\" / \"B\"\npath_c = base_path / \"A\" / \"C\"\npath_d = base_path / \"A\" / \"D\"\npath_b.mkdir(parents=True)\npath_c.mkdir()  # no need for parents now, as 'A' has been created\n# we add three files in `ops_example/A/B`\nfor filename in (\"ex1.txt\", \"ex2.txt\", \"ex3.txt\"):\n    with open(path_b / filename, \"w\") as stream:\n        stream.write(f\"Some content here in {filename}\\n\")\nshutil.move(path_b, path_d)\n# we can also rename files\nex1 = path_d / \"ex1.txt\"\nex1.rename(ex1.parent / \"ex1.renamed.txt\") \n```", "```py\n$ tree ops_example\nops_example\n└── A\n    ├── C\n    └── D\n        ├── ex1.renamed.txt\n        ├── ex2.txt\n        └── ex3.txt \n```", "```py\n# files/paths.py\nfrom pathlib import Path\np = Path(\"fear.txt\")\nprint(p.absolute())\nprint(p.name)\nprint(p.parent.absolute())\nprint(p.suffix)\nprint(p.parts)\nprint(p.absolute().parts)\nreadme_path = p.parent / \"..\" / \"..\" / \"README.rst\"\nprint(readme_path.absolute())\nprint(readme_path.resolve()) \n```", "```py\n$ python paths.py\n/Users/fab/code/lpp4ed/ch08/files/fear.txt\nfear.txt\n/Users/fab/code/lpp4ed/ch08/files\n.txt\n('fear.txt',)\n(\n    '/', 'Users', 'fab', 'code', 'lpp4ed',\n    'ch08', 'files', 'fear.txt'\n)\n/Users/fab/code/lpp4ed/ch08/files/../../README.rst\n/Users/fab/code/lpp4ed/README.rst \n```", "```py\n# files/tmp.py\nfrom tempfile import NamedTemporaryFile, TemporaryDirectory\nwith TemporaryDirectory(dir=\".\") as td:\n    print(\"Temp directory:\", td)\n    with NamedTemporaryFile(dir=td) as t:\n        name = t.name\n        print(name) \n```", "```py\n$ python tmp.py\nTemp directory: /Users/fab/code/lpp4ed/ch08/files/tmpqq4quhbc\n/Users/fab/code/lpp4ed/ch08/files/tmpqq4quhbc/tmpypwwhpwq \n```", "```py\n# files/listing.py\nfrom pathlib import Path\np = Path(\".\")\nfor entry in p.glob(\"*\"):\n    print(\"File:\" if entry.is_file() else \"Folder:\", entry) \n```", "```py\n$ python listing.py\nFile: existence.py\nFile: manipulation.py\n…\nFile: open_try.py\nFile: walking.pathlib.py \n```", "```py\n# files/walking.pathlib.py\nfrom pathlib import Path\np = Path(\".\")\nfor root, dirs, files in p.walk():\n    print(f\"{root=}\")\n    if dirs:\n        print(\"Directories:\")\n        for dir_ in dirs:\n            print(dir_)\n        print()\n    if files:\n        print(\"Files:\")\n        for filename in files:\n            print(filename)\n        print() \n```", "```py\n# files/compression/zip.py\nfrom zipfile import ZipFile\nwith ZipFile(\"example.zip\", \"w\") as zp:\n    zp.write(\"content1.txt\")\n    zp.write(\"content2.txt\")\n    zp.write(\"subfolder/content3.txt\")\n    zp.write(\"subfolder/content4.txt\")\nwith ZipFile(\"example.zip\") as zp:\n    zp.extract(\"content1.txt\", \"extract_zip\")\n    zp.extract(\"subfolder/content3.txt\", \"extract_zip\") \n```", "```py\n# json_examples/json_basic.py\nimport sys\nimport json\ndata = {\n    \"big_number\": 2**3141,\n    \"max_float\": sys.float_info.max,\n    \"a_list\": [2, 3, 5, 7],\n}\njson_data = json.dumps(data)\ndata_out = json.loads(json_data)\nassert data == data_out  # json and back, data matches \n```", "```py\n# json_examples/json_basic.py\ninfo = {\n    \"full_name\": \"Sherlock Holmes\",\n    \"address\": {\n        \"street\": \"221B Baker St\",\n        \"zip\": \"NW1 6XE\",\n        \"city\": \"London\",\n        \"country\": \"UK\",\n    },\n}\nprint(json.dumps(info, indent=2, sort_keys=True)) \n```", "```py\n$ python json_basic.py\n{\n  \"address\": {\n    \"city\": \"London\",\n    \"country\": \"UK\",\n    \"street\": \"221B Baker St\",\n    \"zip\": \"NW1 6XE\"\n  },\n  \"full_name\": \"Sherlock Holmes\"\n} \n```", "```py\n# json_examples/json_tuple.py\nimport json\ndata_in = {\n    \"a_tuple\": (1, 2, 3, 4, 5),\n}\njson_data = json.dumps(data_in)\nprint(json_data)  # {\"a_tuple\": [1, 2, 3, 4, 5]}\ndata_out = json.loads(json_data)\nprint(data_out)  # {'a_tuple': [1, 2, 3, 4, 5]} \n```", "```py\n# json_examples/json_cplx.py\nimport json\nclass ComplexEncoder(json.JSONEncoder):\n    def default(self, obj):\n        print(f\"ComplexEncoder.default: {obj=}\")\n        if isinstance(obj, complex):\n            return {\n                \"_meta\": \"complex\",\n                \"num\": [obj.real, obj.imag],\n            }\n        return super().default(obj)\ndata = {\n    \"an_int\": 42,\n    \"a_float\": 3.14159265,\n    \"a_complex\": 3 + 4j,\n}\njson_data = json.dumps(data, cls=ComplexEncoder)\nprint(json_data)\ndef object_hook(obj):\n    print(f\"object_hook: {obj=}\")\n    try:\n        if obj[\"_meta\"] == \"complex\":\n            return complex(*obj[\"num\"])\n    except KeyError:\n        return obj\ndata_out = json.loads(json_data, object_hook=object_hook)\nprint(data_out) \n```", "```py\n$ python json_cplx.py\nComplexEncoder.default: obj=(3+4j)\n{\n    \"an_int\": 42, \"a_float\": 3.14159265,\n    \"a_complex\": {\"_meta\": \"complex\", \"num\": [3.0, 4.0]}\n} \n```", "```py\nobject_hook:\n  obj={'_meta': 'complex', 'num': [3.0, 4.0]}\nobject_hook:\n  obj={'an_int': 42, 'a_float': 3.14159265, 'a_complex': (3+4j)}\n{'an_int': 42, 'a_float': 3.14159265, 'a_complex': (3+4j)} \n```", "```py\n# json_examples/json_datetime.py\nimport json\nfrom datetime import datetime, timedelta, timezone\nnow = datetime.now()\nnow_tz = datetime.now(tz=timezone(timedelta(hours=1)))\nclass DatetimeEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            try:\n                off = obj.utcoffset().seconds\n            except AttributeError:\n                off = None\n            return {\n                \"_meta\": \"datetime\",\n                \"data\": obj.timetuple()[:6] + (obj.microsecond,),\n                \"utcoffset\": off,\n            }\n        return super().default(obj)\ndata = {\n    \"an_int\": 42,\n    \"a_float\": 3.14159265,\n    \"a_datetime\": now,\n    \"a_datetime_tz\": now_tz,\n}\njson_data = json.dumps(data, cls=DatetimeEncoder)\nprint(json_data) \n```", "```py\n$ python json_datetime.py\n{\n    \"an_int\": 42,\n    \"a_float\": 3.14159265,\n    \"a_datetime\": {\n        \"_meta\": \"datetime\",\n        \"data\": [2024, 3, 29, 23, 24, 22, 232302],\n        \"utcoffset\": null,\n    },\n    \"a_datetime_tz\": {\n        \"_meta\": \"datetime\",\n        \"data\": [2024, 3, 30, 0, 24, 22, 232316],\n        \"utcoffset\": 3600,\n    },\n} \n```", "```py\n# json_examples/json_datetime.py\ndef object_hook(obj):\n    try:\n        if obj[\"_meta\"] == \"datetime\":\n            if obj[\"utcoffset\"] is None:\n                tz = None\n            else:\n                tz = timezone(timedelta(seconds=obj[\"utcoffset\"]))\n            return datetime(*obj[\"data\"], tzinfo=tz)\n    except KeyError:\n        return obj\ndata_out = json.loads(json_data, object_hook=object_hook)\nprint(data_out) \n```", "```py\n{\n    \"an_int\": 42,\n    \"a_float\": 3.14159265,\n    \"a_datetime\": datetime.datetime(\n        2024, 3, 29, 23, 24, 22, 232302\n    ),\n    \"a_datetime_tz\": datetime.datetime(\n        2024, 3, 30, 0, 24, 22, 232316,\n        tzinfo=datetime.timezone(\n            datetime.timedelta(seconds=3600)\n        ),\n    ),\n} \n```", "```py\n# io_examples/string_io.py\nimport io\nstream = io.StringIO()\nstream.write(\"Learning Python Programming.\\n\")\nprint(\"Become a Python ninja!\", file=stream)\ncontents = stream.getvalue()\nprint(contents)\nstream.close() \n```", "```py\n# io_examples/string_io.py\nwith io.StringIO() as stream:\n    stream.write(\"Learning Python Programming.\\n\")\n    print(\"Become a Python ninja!\", file=stream)\n    contents = stream.getvalue()\n    print(contents) \n```", "```py\n$ python string_io.py\nLearning Python Programming.\nBecome a Python ninja! \n```", "```py\n# io_examples/reqs.py\nimport requests\nurls = {\n    \"get\": \"https://httpbin.org/get?t=learn+python+programming\",\n    \"headers\": \"https://httpbin.org/headers\",\n    \"ip\": \"https://httpbin.org/ip\",\n    \"user-agent\": \"https://httpbin.org/user-agent\",\n    \"UUID\": \"https://httpbin.org/uuid\",\n    \"JSON\": \"https://httpbin.org/json\",\n}\ndef get_content(title, url):\n    resp = requests.get(url)\n    print(f\"Response for {title}\")\n    print(resp.json())\nfor title, url in urls.items():\n    get_content(title, url)\n    print(\"-\" * 40) \n```", "```py\n$ python reqs.py\nResponse for get\n{\n    \"args\": {\"t\": \"learn python programming\"},\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"python-requests/2.31.0\",\n        \"X-Amzn-Trace-Id\": \"Root=1-123abc-123abc\",\n    },\n    \"origin\": \"86.14.44.233\",\n    \"url\": \"https://httpbin.org/get?t=learn+python+programming\",\n}\n… rest of the output omitted … \n```", "```py\n# io_examples/reqs_post.py\nimport requests\nurl = \"https://httpbin.org/post\"\ndata = dict(title=\"Learn Python Programming\")\nresp = requests.post(url, data=data)\nprint(\"Response for POST\")\nprint(resp.json()) \n```", "```py\n$ python reqs_post.py\nResponse for POST\n{\n    \"args\": {},\n    \"data\": \"\",\n    \"files\": {},\n    \"form\": {\"title\": \"Learn Python Programming\"},\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Content-Length\": \"30\",\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"python-requests/2.31.0\",\n        \"X-Amzn-Trace-Id\": \"Root=1-123abc-123abc\",\n    },\n    \"json\": None,\n    \"origin\": \"86.14.44.233\",\n    \"url\": \"https://httpbin.org/post\",\n} \n```", "```py\n# persistence/pickler.py\nimport pickle\nfrom dataclasses import dataclass\n@dataclass\nclass Person:\n    first_name: str\n    last_name: str\n    id: int\n    def greet(self):\n        print(\n            f\"Hi, I am {self.first_name} {self.last_name}\"\n            f\" and my ID is {self.id}\"\n        )\npeople = [\n    Person(\"Obi-Wan\", \"Kenobi\", 123),\n    Person(\"Anakin\", \"Skywalker\", 456),\n]\n# save data in binary format to a file\nwith open(\"data.pickle\", \"wb\") as stream:\n    pickle.dump(people, stream)\n# load data from a file\nwith open(\"data.pickle\", \"rb\") as stream:\n    peeps = pickle.load(stream)\nfor person in peeps:\n    person.greet() \n```", "```py\n$ python pickler.py\nHi, I am Obi-Wan Kenobi and my ID is 123\nHi, I am Anakin Skywalker and my ID is 456 \n```", "```py\n# persistence/shelf.py\nimport shelve\nclass Person:\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\nwith shelve.open(\"shelf1.shelve\") as db:\n    db[\"obi1\"] = Person(\"Obi-Wan\", 123)\n    db[\"ani\"] = Person(\"Anakin\", 456)\n    db[\"a_list\"] = [2, 3, 5]\n    db[\"delete_me\"] = \"we will have to delete this one...\"\n    print(\n        list(db.keys())\n    )  # ['ani', 'delete_me', 'a_list', 'obi1']\n    del db[\"delete_me\"]  # gone!\n    print(list(db.keys()))  # ['ani', 'a_list', 'obi1']\n    print(\"delete_me\" in db)  # False\n    print(\"ani\" in db)  # True\n    a_list = db[\"a_list\"]\n    a_list.append(7)\n    db[\"a_list\"] = a_list\n    print(db[\"a_list\"])  # [2, 3, 5, 7] \n```", "```py\n# persistence/shelf.py\nwith shelve.open(\"shelf2.shelve\", writeback=True) as db:\n    db[\"a_list\"] = [11, 13, 17]\n    db[\"a_list\"].append(19)  # in-place append!\n    print(db[\"a_list\"])  # [11, 13, 17, 19] \n```", "```py\n# persistence/alchemy_models.py\nfrom sqlalchemy import ForeignKey, String, Integer\nfrom sqlalchemy.orm import (\n    DeclarativeBase,\n    mapped_column,\n    relationship,\n) \n```", "```py\n# persistence/alchemy_models.py\nclass Base(DeclarativeBase):\n    pass\nclass Person(Base):\n    __tablename__ = \"person\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n    age = mapped_column(Integer)\n    emails = relationship(\n        \"Email\",\n        back_populates=\"person\",\n        order_by=\"Email.email\",\n        cascade=\"all, delete-orphan\",\n    )\n    def __repr__(self):\n        return f\"{self.name}(id={self.id})\"\nclass Email(Base):\n    __tablename__ = \"email\"\n    id = mapped_column(Integer, primary_key=True)\n    email = mapped_column(String)\n    person_id = mapped_column(ForeignKey(\"person.id\"))\n    person = relationship(\"Person\", back_populates=\"emails\")\n    def __str__(self):\n        return self.email\n    __repr__ = __str__ \n```", "```py\n# persistence/alchemy.py\nfrom sqlalchemy import create_engine, select, func\nfrom sqlalchemy.orm import Session\nfrom alchemy_models import Person, Email, Base\n# swap these lines to work with an actual DB file\n# engine = create_engine('sqlite:///example.db')\nengine = create_engine(\"sqlite:///:memory:\")\nBase.metadata.create_all(engine) \n```", "```py\nwith Session(engine) as session:\n    anakin = Person(name=\"Anakin Skywalker\", age=32)\n    obione = Person(name=\"Obi-Wan Kenobi\", age=40) \n```", "```py\n obione.emails = [\n        Email(email=\"obi1@example.com\"),\n        Email(email=\"wanwan@example.com\"),\n    ]\n    anakin.emails.append(Email(email=\"ani@example.com\"))\n    anakin.emails.append(Email(email=\"evil.dart@example.com\"))\n    anakin.emails.append(Email(email=\"vader@example.com\")) \n```", "```py\n session.add(anakin)\n    session.add(obione)\n    session.commit() \n```", "```py\n obione = session.scalar(\n        select(Person).where(Person.name.like(\"Obi%\"))\n    )\n    print(obione, obione.emails) \n```", "```py\n anakin = session.scalar(\n        select(Person).where(Person.name == \"Anakin Skywalker\")\n    )\n    print(anakin, anakin.emails) \n```", "```py\n anakin_id = anakin.id\n    del anakin \n```", "```py\ndef display_info(session):\n    # get all emails first\n    emails = select(Email)\n    # display results\n    print(\"All emails:\")\n    for email in session.scalars(emails):\n        print(f\" - {email.person.name} <{email.email}>\")\n    # display how many objects we have in total\n    people = session.scalar(\n        select(func.count()).select_from(Person)\n    )\n    emails = session.scalar(\n        select(func.count()).select_from(Email)\n    )\n    print(\"Summary:\")\n    print(f\" {people=}, {emails=}\") \n```", "```py\n display_info(session)\n    anakin = session.get(Person, anakin_id)\n    session.delete(anakin)\n    session.commit()\n    display_info(session) \n```", "```py\n$ python alchemy.py\nObi-Wan Kenobi(id=2) [obi1@example.com, wanwan@example.com]\nAnakin Skywalker(id=1) [\n    ani@example.com, evil.dart@example.com, vader@example.com\n]\nAll emails:\n - Anakin Skywalker <ani@example.com>\n - Anakin Skywalker <evil.dart@example.com>\n - Anakin Skywalker <vader@example.com>\n - Obi-Wan Kenobi <obi1@example.com>\n - Obi-Wan Kenobi <wanwan@example.com>\nSummary:\n people=2, emails=5\nAll emails:\n - Obi-Wan Kenobi <obi1@example.com>\n - Obi-Wan Kenobi <wanwan@example.com>\nSummary:\n people=1, emails=2 \n```", "```py\n# config_files/config.ini\n[owner]\nname = Fabrizio Romano\ndob = 1975-12-29T11:50:00Z\n[DEFAULT]\ntitle = Config INI example\nhost = 192.168.1.1\n[database]\nhost = 192.168.1.255\nuser = redis\npassword = redis-password\ndb_range = [0, 32]\n[database.primary]\nport = 6379\nconnection_max = 5000\n[database.secondary]\nport = 6380\nconnection_max = 4000 \n```", "```py\n# config_files/config-ini.txt\n>>> import configparser\n>>> config = configparser.ConfigParser()\n>>> config.read(\"config.ini\")\n['config.ini']\n>>> config.sections()\n['owner', 'database', 'database.primary', 'database.secondary']\n>>> config.items(\"database\")\n[\n    ('title', 'Config INI example'), ('host', '192.168.1.255'),\n    ('user', 'redis'), ('password', 'redis-password'),\n    ('db_range', '[0, 32]')\n]\n>>> config[\"database\"]\n<Section: database>\n>>> dict(config[\"database\"])\n{\n    'host': '192.168.1.255', 'user': 'redis',\n    'password': 'redis-password', 'db_range': '[0, 32]',\n    'title': 'Config INI example'\n}\n>>> config[\"DEFAULT\"][\"host\"]\n'192.168.1.1'\n>>> dict(config[\"database.secondary\"])\n{\n    'port': '6380', 'connection_max': '4000',\n    'title': 'Config INI example', 'host': '192.168.1.1'\n}\n>>> config.getint(\"database.primary\", \"port\")\n6379 \n```", "```py\n# config_file/config.toml\ntitle = \"Config Example\"\n[owner]\nname = \"Fabrizio Romano\"\ndob = 1975-12-29T11:50:00Z\n[database]\nhost = \"192.168.1.255\"\nuser = \"redis\"\npassword = \"redis-password\"\ndb_range = [0, 32]\n[database.primary]\nport = 6379\nconnection_max = 5000\n[database.secondary]\nport = 6380\nconnection_max = 4000 \n```", "```py\n# config_files/config-toml.txt\n>>> import tomllib\n>>> with open(\"config.toml\", \"rb\") as f:\n...     config = tomllib.load(f)\n...\n>>> config\n{\n    'title': 'Config Example',\n    'owner': {\n        'name': 'Fabrizio Romano',\n        'dob': datetime.datetime(\n            1975, 12, 29, 11, 50, tzinfo=datetime.timezone.utc\n        )\n    },\n    'database': {\n        'host': '192.168.1.255',\n        'user': 'redis',\n        'password': 'redis-password',\n        'db_range': [0, 32],\n        'primary': {'port': 6379, 'connection_max': 5000},\n        'secondary': {'port': 6380, 'connection_max': 4000}\n    }\n}\n>>> config[\"title\"]\n'Config Example'\n>>> config[\"owner\"]\n{\n    'name': 'Fabrizio Romano',\n    'dob': datetime.datetime(\n        1975, 12, 29, 11, 50, tzinfo=datetime.timezone.utc\n    )\n}\n>>> config[\"database\"][\"primary\"]\n{'port': 6379, 'connection_max': 5000}\n>>> config[\"database\"][\"db_range\"]\n[0, 32] \n```"]