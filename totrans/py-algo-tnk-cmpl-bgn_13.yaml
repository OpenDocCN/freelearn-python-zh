- en: Chapter 7
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第七章
- en: Operators
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符
- en: 7.1 The Value Assignment Operator
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.1 值赋值运算符
- en: The most commonly used operator in Python is the value assignment operator (
    = ). For example, the following Python statement assigns a value of 5 to variable
    x.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python中最常用的运算符是值赋值运算符（=）。例如，以下Python语句将值5赋给变量x。
- en: x = 5
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: x = 5
- en: As you read in [Chapter 5](chapter05.html), this is equivalent to the left arrow
    used in flowcharts.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第五章](chapter05.html)中读到的，这相当于流程图中使用的左箭头。
- en: .![Image](img/chapter07-01.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter07-01.png)
- en: Probably the left arrow used in a flowchart is more convenient and clearer than
    the ( = ) sign because it visually illustrates that the value or the result of
    an expression on the right is assigned to a variable on the left.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可能流程图中使用的左箭头比（=）符号更方便、更清晰，因为它直观地说明了右侧表达式或结果的值被赋值给左侧的变量。
- en: It's important to note that the ( = ) sign is not equivalent to the one used
    in mathematics. In mathematics, the expression x = 5 is read as “x is equal to
    5”. However, in Python the expression x = 5 is read as “assign the value 5 to
    x” or “set x equal to 5”. They look the same but they act differently!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，（=）符号在数学中并不等同于Python中的使用。在数学中，表达式x = 5读作“x等于5”。然而，在Python中，表达式x = 5读作“将值5赋给x”或“将x设置为5”。它们看起来一样，但作用不同！
- en: For instance, in mathematics, the following two lines are equivalent. The first
    one can be read as “x is equal to the sum of y and z” and the second one as “the
    sum of y and z is equal to x”.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在数学中，以下两行是等价的。第一行可以读作“x等于y和z的和”，第二行可以读作“y和z的和等于x”。
- en: x = y + z
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: x = y + z
- en: y + z = x
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: y + z = x
- en: On the other hand, in Python, these two statements are definitely not equivalent.
    The first statement is a valid Python statement, conveying “Assign the sum of
    y and z to x”. The second statement, however, is invalid, as it attempts to assign
    the value of x to y + z , which is not permissible in Python!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在Python中，这两个语句绝对不等价。第一个语句是一个有效的Python语句，表示“将y和z的和赋值给x”。然而，第二个语句是无效的，因为它试图将x的值赋给y
    + z，这在Python中是不允许的！
- en: '![](img/remember.jpg)In Python, the variable on the left side of the ( = )
    sign represents a region in main memory (RAM) where a value can be stored.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)在Python中，（=）符号左侧的变量代表主内存（RAM）中的一个区域，可以存储值。'
- en: '![](img/remember.jpg)On the left side of the ( = ) sign only variables can
    exist, whereas on the right side there can be a number, a variable, a string,
    or even a complex mathematical expression.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)在（=）符号的左侧只能存在变量，而在右侧则可以是数字、变量、字符串，甚至是复杂的数学表达式。'
- en: In Table 7-1 you can find some examples of value assignments.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在表7-1中，你可以找到一些值赋值的例子。
- en: '| Examples | Description |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述 |'
- en: '| a = 9 | Assign a value of 9 to variable a. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| a = 9 | 将值9赋给变量a。 |'
- en: '| b = c | Assign the content of variable c to variable b. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| b = c | 将变量c的内容赋值给变量b。 |'
- en: '| d = "Hello Zeus" | Assign the string Hello Zeus to variable d. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| d = "Hello Zeus" | 将字符串Hello Zeus赋值给变量d。 |'
- en: '| d = a + b | Calculate the sum of the contents of variables a and b and assign
    the result to variable d. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| d = a + b | 计算变量a和b的内容之和，并将结果赋值给变量d。 |'
- en: '| b = x + 1 | Calculate the sum of the content of variable x and 1 and assign
    the result to variable b. Please note that the content of variable x is not altered.
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| b = x + 1 | 计算变量x的内容和1的和，并将结果赋值给变量b。请注意，变量x的内容没有被改变。 |'
- en: '| x = x + 1 | Calculate the sum of the content of variable x and 1 and assign
    the result back to variable x. In other words, increase variable x by one. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| x = x + 1 | 计算变量x的内容和1的和，并将结果重新赋值给变量x。换句话说，将变量x增加1。 |'
- en: Table 7-1 Examples of value assignments
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 表7-1 值赋值例子
- en: Confused about the last one? Are you thinking about your math teachers right
    now? What would their reaction be if you had written x = x + 1 on the blackboard?
    Can you personally imagine a number that equals itself plus one? This statement
    suggests that 5 is equal to 6 and 10 is equal to 11, which is, of course, incorrect!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最后一个例子感到困惑吗？你现在在想你的数学老师吗？如果你在黑板上写下x = x + 1，他们会怎么反应？你能想象一个等于自己加一的数字吗？这个语句暗示5等于6，10等于11，这当然是错误的！
- en: Obviously, things are different in computer science. The statement x = x + 1
    is absolutely valid! It instructs the CPU to retrieve the value of variable x
    from main memory (RAM), to add 1 to that value, and to assign the result back
    to variable x. The old value of variable x is replaced by the new one.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，在计算机科学中事情是不同的。语句x = x + 1是完全有效的！它指示CPU从主存（RAM）中检索变量x的值，将1加到该值上，并将结果重新赋值给变量x。变量x的旧值被新值所取代。
- en: Still don't get it? Let's take a look at how the CPU and main memory (RAM) cooperate
    with each other in order to execute the statement x = x + 1.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然不明白？让我们看看CPU和主存（RAM）是如何相互协作以执行语句x = x + 1的。
- en: Let's say that there is a region in memory, named x and it contains the number
    13.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设内存中有一个名为x的区域，它包含数字13。
- en: '![Image](img/chapter07-02.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter07-02.png)'
- en: 'When a program instructs the CPU to execute the statement:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个程序指示CPU执行以下语句时：
- en: x = x + 1
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: x = x + 1
- en: 'the following procedure is carried out:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序被执行：
- en: ►the number 13 is transferred from the RAM's region named x to the CPU;
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ►数字13从RAM中名为x的区域传输到CPU；
- en: ►the CPU calculates the sum of 13 and 1; and
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ►CPU计算13和1的和；并且
- en: ►the result, 14, is transferred from the CPU to the RAM's region x replacing
    the existing number, 13.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ►结果，14，从CPU传输到RAM的x区域，替换现有的数字13。
- en: After execution, the RAM looks like this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，RAM看起来是这样的。
- en: .![Image](img/chapter07-03.png)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter07-03.png)
- en: 'Now that you have understood everything, let''s delve into some final details.
    In Python, you can assign a single value to multiple variables with one single
    statement. The following statement:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了一切，让我们深入探讨一些最终细节。在Python中，你可以用一条语句将单个值赋给多个变量。以下语句：
- en: a = b = c = 4
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: a = b = c = 4
- en: assigns the value of 4 to all three variables a, b, and c.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将4的值赋给所有三个变量a、b和c。
- en: In Python, you can also assign multiple values to multiple variables with one
    single statement. This is called simultaneous assignment. The following statement
    assigns the value of 2 to variable a, the value of 10 to variable b, and the value
    of 3 to variable c.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，你还可以用一条语句将多个值赋给多个变量。这被称为同时赋值。以下语句将2的值赋给变量a，10的值赋给变量b，3的值赋给变量c。
- en: a, b, c = 2, 10, 3
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: a, b, c = 2, 10, 3
- en: 7.2 Arithmetic Operators
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.2 算术运算符
- en: Just like every high-level programming language, Python supports almost all
    types of arithmetic operators, as presented in the table that follows.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就像每种高级编程语言一样，Python支持几乎所有类型的算术运算符，如下表所示。
- en: '| Arithmetic Operator | Description |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 算术运算符 | 描述 |'
- en: '| + | Addition |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| + | 加法 |'
- en: '| − | Subtraction |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| − | 减法 |'
- en: '| * | Multiplication |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| * | 乘法 |'
- en: '| / | Division |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| / | 除法 |'
- en: '| // | Quotient after integer division |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| // | 整数除法后的商 |'
- en: '| % | Remainder after integer division (Modulus) |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| % | 整数除法后的余数（模数） |'
- en: '| ** | Exponentiation |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| ** | 幂运算 |'
- en: The first two operators are straightforward and need no further explanation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个运算符很简单，不需要进一步解释。
- en: If you need to multiply two numbers or the content of two variables you have
    to use the asterisk ( * ) symbol. For example, if you want to multiply 2 times
    y, you must write 2 * y.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要乘以两个数字或两个变量的内容，你必须使用星号（*）符号。例如，如果你想乘以2乘以y，你必须写2 * y。
- en: '![](img/notice.jpg)In mathematics it is legal to skip the multiplication operator
    and write 3x, meaning “3 times x”. In Python, however, you must always use an
    asterisk anywhere a multiplication operation exists. This is one of the most common
    mistakes novice programmers make when they write mathematical expressions in Python.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在数学中，可以省略乘法运算符并写3x，表示“3乘以x”。然而，在Python中，你必须始终在任何存在乘法操作的地方使用星号（*）。这是新手程序员在Python中编写数学表达式时最常见的错误之一。'
- en: To perform a division, you must use the slash ( / ) symbol. For example, if
    you want to divide 10 by 2, you must write 10 / 2.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 进行除法时，必须使用斜杠（/）符号。例如，如果你想将10除以2，你必须写10 / 2。
- en: The integer division operator ( // ) returns the quotient of an integer division,
    which means that
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 整数除法运算符（//）返回整数除法的商，这意味着
- en: a = 13 // 3
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: a = 13 // 3
- en: assigns a value of 4 to variable a.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将4的值赋给变量a。
- en: The ( // ) operator can be used with floating-point numbers as well. For example,
    the operation
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: （//）运算符也可以用于浮点数。例如，操作
- en: b = 14.4 // 3
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: b = 14.4 // 3
- en: assigns a value of 4 to variable b.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将4的值赋给变量b。
- en: Correspondingly, the modulus operator ( % ) returns the remainder of an integer
    division, which means that
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 相应地，取模运算符（%）返回整数除法的余数，这意味着
- en: c = 13 % 3
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: c = 13 % 3
- en: assigns a value of 1 to variable c.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将值1赋给变量c。
- en: The modulus operator ( % ) can be used with floating-point numbers as well,
    but the result is a real (float). For example, the operation
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 取模运算符（%）也可以与浮点数一起使用，但结果是实数（float）。例如，操作
- en: d = 14.4 % 3
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: d = 14.4 % 3
- en: assigns a value of 2.4 (and not 2, as you may mistakenly expect) to variable
    d.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将2.4（而不是您可能错误地期望的2）的值赋给变量d。
- en: '![](img/notice.jpg)Keep in mind that flowcharts are a loose method used to
    represent an algorithm. Although the use of the integer quotient ( // ) and the
    integer remainder ( % ) operators is allowed in flowcharts, this book uses the
    commonly accepted DIV and MOD operators instead! For example, the Python statements
    x = 13 // 3 and y = 13 % 3 are represented in a flowchart as'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)请记住，流程图是用来表示算法的一种松散方法。尽管在流程图中允许使用整数商（//）和整数余数（%）运算符，但本书使用的是普遍接受的DIV和MOD运算符！例如，Python语句x
    = 13 // 3和y = 13 % 3在流程图中表示为'
- en: .![Image](img/chapter07-04.png)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter07-04.png)
- en: The exponentiation operator ( ** ) raises the number on the left of the operator
    to the power of the number on the right. For example, the operation
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 指数运算符（**）将运算符左侧的数提升到运算符右侧的数的幂。例如，操作
- en: f = 2 ** 3
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: f = 2 ** 3
- en: calculates 2 to the power of 3 (2³) and assigns a value of 8 to variable f.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 计算2的3次幂（2³）并将值8赋给变量f。
- en: '![](img/notice.jpg)The exponentiation operator ( ** ) serves a dual role. Apart
    from being used to calculate the power of a value raised to another value, it
    is also used to compute any root of a number using the known mathematical formula
    ![Image](img/chapter07-05.png). For example, you can write y = x ** (1 / 2) to
    calculate the square root of x or y = x ** (1 / 3) to calculate the cubic root
    of x.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)指数运算符（**）具有双重作用。除了用于计算一个值被另一个值提升的幂之外，它还用于使用已知的数学公式 ![Image](img/chapter07-05.png)
    计算一个数的任何根。例如，您可以编写y = x ** (1 / 2)来计算x的平方根或y = x ** (1 / 3)来计算x的立方根。'
- en: In mathematics, as you may already know, you are allowed to use parentheses
    (round brackets) as well as braces (curly brackets) and square brackets , as presented
    in the following expression.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，如您可能已经知道的，您可以使用括号（圆括号）以及花括号（花括号）和方括号，如下面的表达式所示。
- en: .![Image](img/chapter07-06.png)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter07-06.png)
- en: However, in Python there is no such thing as braces and brackets. Parentheses
    are all you have; therefore, the same expression must be written using parentheses
    instead of braces or brackets.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在Python中，没有括号和方括号这样的东西。只有括号；因此，必须使用括号而不是花括号或方括号来编写相同的表达式。
- en: y = 5 / 2 * (3 + 2 * (4 + 7 * (6 − 4 / 3)))
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: y = 5 / 2 * (3 + 2 * (4 + 7 * (6 − 4 / 3)))
- en: 7.3 What is the Precedence of Arithmetic Operators?
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.3 算术运算符的优先级是什么？
- en: 'Arithmetic operators follow the same precedence rules as in mathematics, and
    these are: exponentiation is performed first, multiplication and division are
    performed next, and addition and subtraction are performed last.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 算术运算符遵循与数学中相同的优先级规则，这些规则是：首先执行指数运算，然后执行乘法和除法，最后执行加法和减法。
- en: '| Higher Precedence ![Image](img/arrow_up.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '| 高优先级 ![Image](img/arrow_up.jpg)'
- en: Lower precedence | Arithmetic Operators |
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 优先级较低 | 算术运算符 |
- en: '| ** |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| ** |'
- en: '| *, /, //, % |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| *, /, //, % |'
- en: '| +, − |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| +, − |'
- en: When multiplication and division exist in the same expression, and since both
    are of the same precedence, they are performed left to right (the same way as
    you read), which means that the expression
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当乘法和除法存在于同一个表达式中，并且由于它们具有相同的优先级，它们将按从左到右的顺序执行（与阅读方式相同），这意味着表达式
- en: y = 6 / 3 * 2
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: y = 6 / 3 * 2
- en: is equivalent to ![Image](img/chapter07-07.png), and assigns a value of 4 to
    variable y, (division is performed before multiplication).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 等价于 ![Image](img/chapter07-07.png)，并将值4赋给变量y，（除法在乘法之前执行）。
- en: If you want, however, the multiplication to be performed before the division,
    you can use parentheses to change the precedence. This means that
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望乘法在除法之前执行，则可以使用括号来改变优先级。这意味着
- en: y = 6 / (3 * 2)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: y = 6 / (3 * 2)
- en: is equivalent to ![Image](img/chapter07-08.png), and assigns a value of 1 to
    variable y (multiplication is performed before division).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 等价于 ![Image](img/chapter07-08.png)，并将值1赋给变量y（乘法在除法之前执行）。
- en: '![](img/notice.jpg)Keep in mind that it is not possible in Python to write
    fractions in the form of ![Image](img/chapter07-09.png) or ![Image](img/chapter07-10.png).
    Forget it! There is no equation editor in Visual Studio Code, or in any IDE. All
    fractions must be written on one single line. For example, ![Image](img/chapter07-09.png)
    must be written as 6 / 3, and ![Image](img/chapter07-10.png) must be written as
    (4 * x + 5) / 6.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)请记住，在 Python 中无法以 ![Image](img/chapter07-09.png) 或 ![Image](img/chapter07-10.png)
    的形式写入分数。别想了！Visual Studio Code 或任何 IDE 中都没有方程式编辑器。所有分数都必须写在一行上。例如，![Image](img/chapter07-09.png)
    必须写成 6 / 3，而 ![Image](img/chapter07-10.png) 必须写成 (4 * x + 5) / 6。'
- en: 'The order of operations can be summarized as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 运算顺序可以总结如下：
- en: 1)Any operations enclosed in parentheses are performed first.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 1)首先执行括号内的任何运算。
- en: 2)Any exponentiations are performed next.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 2)接下来执行任何指数运算。
- en: 3)Then, any multiplication and division operations are performed from left to
    right.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 3)然后，从左到右执行任何乘法和除法运算。
- en: 4)In the end, any addition and subtraction operations are performed from left
    to right.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 4)最后，任何加法和减法运算都是从左到右执行的。
- en: So, in the next example
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在下一个示例中
- en: y = 12 + (20 + 3) - 2 ** 3 / 4 * 3
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: y = 12 + (20 + 3) - 2 ** 3 / 4 * 3
- en: 'the operations are performed as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 操作的执行顺序如下：
- en: '![Image](img/chapter07-11.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter07-11.png)'
- en: 7.4 Compound Assignment Operators
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.4 复合赋值运算符
- en: Python offers a special set of operators known as compound assignment operators,
    which can help you write code faster. These operators are comprehensively detailed
    in the table below. An example for each operator is provided, while the “Equivalent
    to” column shows the corresponding statement without using a compound assignment
    operator.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了一组称为复合赋值运算符的特殊运算符，这可以帮助你更快地编写代码。这些运算符在下面的表格中进行了全面详细的说明。每个运算符都提供了一个示例，而“等价于”列显示了不使用复合赋值运算符的相应语句。
- en: '| Operator | Description | Example | Equivalent to |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 | 示例 | 等价于 |'
- en: '| += | Addition assignment | a += b | a = a + b |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| += | 加法赋值 | a += b | a = a + b |'
- en: '| −= | Subtraction assignment | a ‑= b | a = a ‑ b |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| −= | 减法赋值 | a ‑= b | a = a ‑ b |'
- en: '| *= | Multiplication assignment | a *= b | a = a * b |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| *= | 乘法赋值 | a *= b | a = a * b |'
- en: '| /= | Division assignment | a /= b | a = a / b |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| /= | 除法赋值 | a /= b | a = a / b |'
- en: '| //= | Integer division assignment | a //= b | a = a // b |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| //= | 整数除法赋值 | a //= b | a = a // b |'
- en: '| %= | Modulus assignment | a %= b | a = a % b |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| %= | 取模赋值 | a %= b | a = a % b |'
- en: '| **= | Exponentiation assignment | a **= b | a = a ** b |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| **= | 幂赋值 | a **= b | a = a ** b |'
- en: '![](img/notice.jpg)Bear in mind that in flowcharts, this book only uses the
    commonly accepted operators shown in the “Equivalent to” column. For example,
    the Python statement a += b is represented in a flowchart as'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)请注意，在流程图中，本书只使用了“等价于”列中显示的普遍接受的运算符。例如，Python 语句 a += b 在流程图中表示为'
- en: .![Image](img/chapter07-12.png)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter07-12.png)
- en: Exercise 7.4-1 Which Python Statements are Syntactically Correct?
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 7.4-1 哪些 Python 语句在语法上是正确的？
- en: Which of the following Python assignment statements are syntactically correct?
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪个 Python 赋值语句在语法上是正确的？
- en: i)a = −10
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: i) a = −10
- en: ii)10 = b
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ii)10 = b
- en: iii)aB = aB + 1
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: iii)aB = aB + 1
- en: iv)a = "COWS"
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: iv)a = "COWS"
- en: v)a = COWS
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: v)a = COWS
- en: vi)a + b = 40
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: vi)a + b = 40
- en: vii)a = 3 b
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: vii) a = 3 b
- en: viii)a = "True"
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: viii)a = "True"
- en: ix)a = True
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ix)a = True
- en: x)a //= 2
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: x)a //= 2
- en: xi)a += 1
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: xi)a += 1
- en: xii)a =* 2
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: xii)a =* 2
- en: Solution
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: i)Correct. It assigns the integer value −10 to variable a.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: i) 正确。它将整数值 −10 赋值给变量 a。
- en: ii)Wrong. On the left side of the value assignment operator, only variables
    can exist.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ii) 错误。在值赋值运算符的左侧只能存在变量。
- en: iii)Correct. It increases variable aB by one.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: iii) 正确。它将变量 aB 的值增加一。
- en: iv)Correct. It assigns the string “COWS” (without the double quotes) to variable
    a.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: iv) 正确。它将字符串“COWS”（不带双引号）赋值给变量 a。
- en: v)Correct. It assigns the content of variable COWS to variable a.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: v) 正确。它将变量 COWS 的内容赋值给变量 a。
- en: vi)Wrong. On the left side of the value assignment operator, only variables
    (not expressions) can exist.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: vi) 错误。在值赋值运算符的左侧只能存在变量（不是表达式）。
- en: vii)Wrong. It should have been written as a = 3 * b.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: vii) 错误。它应该写成 a = 3 * b。
- en: viii)Correct. It assigns the string “True” (without the double quotes) to variable
    a.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: viii) 正确。它将字符串“True”（不带双引号）赋值给变量 a。
- en: ix)Correct. It assigns the value True to variable a.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ix) 正确。它将值 True 赋值给变量 a。
- en: x)Correct. This is equivalent to a = a // 2.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: x) 正确。这相当于 a = a // 2。
- en: xi)Correct. This is equivalent to a = a + 1.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: xi) 正确。这相当于 a = a + 1。
- en: xii)Wrong. It should have been written as a *= 2 (which is equivalent to a =
    a * 2).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: xii)错误。它应该写成a *= 2（等价于a = a * 2）。
- en: Exercise 7.4-2 Finding Variable Types
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习7.4-2 查找变量类型
- en: What is the type of each of the following variables?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下每个变量的类型是什么？
- en: i)a = 15
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: i)a = 15
- en: ii)width = "10 meters"
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: ii)width = "10 meters"
- en: iii)b = "15"
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: iii)b = "15"
- en: iv)temp = 13.5
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: iv)temp = 13.5
- en: v)b = True
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: v)b = True
- en: vi)b = "True"
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: vi)b = "True"
- en: Solution
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: i)The value 15 belongs to the set of integers, thus the variable a is an integer.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: i)值15属于整数的集合，因此变量a是整数。
- en: ii)The value “10 meters” is a text, thus the width variable is a string.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: ii)值“10 meters”是文本，因此宽度变量是字符串。
- en: iii)The value “15” is a text, thus the b variable is a string.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: iii)值“15”是一个文本，因此变量b是一个字符串。
- en: iv)The value 13.5 belongs to the set of real numbers, thus the variable temp
    is real (float).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: iv)值13.5属于实数集合，因此变量temp是实数（浮点数）。
- en: v)The value True is Boolean, thus the variable b is a Boolean.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: v)值True是布尔值，因此变量b是布尔值。
- en: vi)The value “True” is a text, thus the variable b is a string.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: vi)值“True”是文本，因此变量b是字符串。
- en: 7.5 String Operators
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.5 字符串运算符
- en: Joining two separate strings into a single one is called concatenation. There
    are two operators that you can use to concatenate (join) strings as shown in the
    table that follows.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将两个独立的字符串连接成一个字符串称为连接。你可以使用以下表格中显示的两个运算符来连接（连接）字符串。
- en: '| Operator | Description | Example | Equivalent to |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 | 示例 | 等价于 |'
- en: '| + | Concatenation | a = "Hi" + " there" |   |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| + | 连接 | a = "Hi" + " there" |   |'
- en: '| += | Concatenation assignment | a += "Hello" | a = a + "Hello" |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| += | 连接赋值 | a += "Hello" | a = a + "Hello" |'
- en: The following example displays “What's up, dude?”
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示“What's up, dude？”
- en: a = "What's "
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: a = "What's "
- en: b = "up, "
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: b = "up, "
- en: c = a + b
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: c = a + b
- en: c += "dude?"
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: c += "dude?"
- en: print(c)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: print(c)
- en: Last but not least, there are two more string operators that can be used for
    string repetition, as shown in the following table.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，还有两个可以用于字符串重复的字符串运算符，如下表所示。
- en: '| Operator | Description | Example | Equivalent to |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 | 示例 | 等价于 |'
- en: '| * | Repetition | a = "Hi" * 3 | a = "HiHiHi" |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| * | 重复 | a = "Hi" * 3 | a = "HiHiHi" |'
- en: '| *= | Repetition assignment | a *= 5 | a = a * 5 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| *= | 重复赋值 | a *= 5 | a = a * 5 |'
- en: The following example displays “catcat” and then “catcatcatcat”.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例首先显示“catcat”，然后显示“catcatcatcat”。
- en: a = "cat" * 2
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: a = "cat" * 2
- en: 'print(a)   #It displays: catcat'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a)   #它显示：catcat'
- en: a *= 2
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: a *= 2
- en: 'print(a)   #It displays: catcatcatcat'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a)   #它显示：catcatcatcat'
- en: Exercise 7.5-1 Concatenating Names
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习7.5-1 连接名字
- en: Write a Python program that prompts the user to enter their first and last name
    (assigned to two different variables). It then joins them in a single string (concatenation)
    and displays them on the user's screen.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入他们的名字（分配给两个不同的变量）。然后它们将它们连接成一个字符串（连接）并在用户的屏幕上显示。
- en: Solution
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The Python program is shown here.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序如下所示。
- en: 'firstName = input("Enter first name: ")'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 'firstName = input("Enter first name: ")'
- en: 'lastName = input("Enter last name: ")'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 'lastName = input("Enter last name: ")'
- en: fullName = firstName + " " + lastName
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: fullName = firstName + " " + lastName
- en: print(fullName)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: print(fullName)
- en: '![](img/notice.jpg)Note the extra space character added between the first and
    last name.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意在名字的首尾之间添加了额外的空格字符。'
- en: '7.6 Review Questions: True/False'
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.6 复习问题：正确/错误
- en: Choose true or false for each of the following statements.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择正确或错误。
- en: 1)The statement x = 5 can be read as “Variable x is equal to 5”.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 1)语句x = 5可以读作“变量x等于5”。
- en: 2)The value assignment operator assigns the result of an expression to a variable.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 2)值赋值运算符将表达式的结果赋给变量。
- en: 3)A string can be assigned to a variable only by using the input() statement.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 3)只能通过使用input()语句将字符串赋值给变量。
- en: 4)The statement 5 = y assigns value 5 to variable y.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 4)语句5 = y 将值5赋给变量y。
- en: 5)On the right side of a value assignment operator an arithmetic operator must
    always exist.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 5)在值赋值运算符的右边必须始终存在算术运算符。
- en: 6)In Python, on the right side of a value assignment operator only variables
    can exist.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 6)在Python中，值赋值运算符的右边只能存在变量。
- en: 7)You cannot use the same variable on both sides of a value assignment operator.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 7)在值赋值运算符的两边不能使用相同的变量。
- en: 8)The statement a = a + 1 decrements variable a by one.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 8)语句a = a + 1 减少了变量a的值。
- en: 9)The statement a = a + (−1) decrements variable a by one.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 9)语句a = a + (−1) 减少了变量a的值。
- en: 10)In Python, the word DIV is a reserved word.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 10)在Python中，单词DIV是一个保留字。
- en: 11)The statement x = 0 % 5 assigns a value of 5 to variable x.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 11)语句x = 0 % 5 将值5赋给变量x。
- en: 12)The operation 5 % 0 is not possible.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 12)操作5 % 0是不可能的。
- en: 13)Addition and subtraction have the higher precedence among the arithmetic
    operators.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 13)加法和减法在算术运算符中具有更高的优先级。
- en: 14)When division and multiplication operators co-exist in an expression, multiplication
    operations are performed before division.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 14)当表达式中存在除法和乘法运算符时，乘法运算先于除法运算执行。
- en: 15)The statement 2 ** 3 returns a result of 6.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 15)语句2 ** 3返回结果6。
- en: 16)The statement 2 ** 3 returns a result of 9.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 16)语句2 ** 3返回结果9。
- en: 17)The expression 8 / 4 * 2 is equal to 1.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 17)表达式8 / 4 * 2等于1。
- en: 18)The expression 4 + 6 / 6 + 4 is equal to 9.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 18)表达式4 + 6 / 6 + 4等于9。
- en: 19)The expression a + b + c / 3.0 calculates the average value of three numbers.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 19)表达式a + b + c / 3.0计算三个数的平均值。
- en: 20)The statement a += 1 is equivalent to a = a + 1
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 20)语句a += 1等价于a = a + 1
- en: 21)The statement a = "True" assigns a Boolean value to variable a.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 21)语句a = "True"将布尔值赋给变量a。
- en: 22)The statement a = 2·a doubles the content of variable a.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 22)语句a = 2·a使变量a的内容加倍。
- en: 23)The statements a += 2 and a = a − (−2) are not equivalent.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 23)语句a += 2和a = a − (−2)不等价。
- en: 24)The statement a −= a + 1 always assigns a value of  −1 to variable a.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 24)语句a −= a + 1总是将变量a的值赋为-1。
- en: 25)The statement a = "George" + " Malkovich" assigns the value “GeorgeMalkovich”
    (without the double quotes) to the variable a.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 25)语句a = "George" + " Malkovich"将值“GeorgeMalkovich”（不带双引号）赋给变量a。
- en: 26)The following Python program satisfies the property of definiteness.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 26)以下Python程序满足确定性的性质。
- en: a = float(input())
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: b = float(input())
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: b = float(input())
- en: x = a / (b - 7)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: x = a / (b - 7)
- en: print(x)
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: print(x)
- en: '7.7 Review Questions: Multiple Choice'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.7 复习题：多项选择题
- en: Select the correct answer for each of the following statements.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 为以下每个陈述选择正确的答案。
- en: 1)Which of the following Python statements assigns a value of 10.0 to variable
    a?
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 1)以下哪个Python赋值语句将10.0的值赋给变量a？
- en: a)10.0 = a
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: a)10.0 = a
- en: b)a ← 10.0
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: b)a ← 10.0
- en: c)a = 100.0 / 10.0
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: c)a = 100.0 / 10.0
- en: d)none of the above
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 2)The statement a = b can be read as
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 2)以下语句可以读作
- en: a)assign the content of variable a to variable b.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: a)将变量a的内容赋给变量b。
- en: b)variable b is equal to variable a.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: b)变量b等于变量a。
- en: c)assign the content of variable b to variable a.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: c)将变量b的内容赋给变量a。
- en: d)none of the above
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 3)Which of the following calculates the result of the variable a raised to the
    power of 2?
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 3)以下哪个计算变量a的平方？
- en: a)y = a * a
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: a)y = a * a
- en: b)y = a ** 2
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: b)y = a ** 2
- en: c)y = a * a / a * a
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: c)y = a * a / a * a
- en: d)all of the above
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: d)全部正确
- en: 4)The expression 0 % 10 + 2 is equal to
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 4)表达式0 % 10 + 2等于
- en: a)7.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: a)7.
- en: b)2.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: b)2.
- en: c)12.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: c)12.
- en: d)none of the above
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 5)Which of the following Python statements is syntactically correct?
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 5)以下哪个Python语句是语法正确的？
- en: a)a = 4 * 2y − 8 / (4 * q)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: a)a = 4 * 2y − 8 / (4 * q)
- en: b)a = 4 * 2 * y − 8 /> 4 * q)
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: b)a = 4 * 2 * y − 8 /> 4 * q)
- en: c)a = 4 * 2 * y − 8 / (4 */ q)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: c)a = 4 * 2 * y − 8 /> 4 * q)
- en: d)none of the above
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 6)Which of the following Python statements is syntactically correct?
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 6)以下哪个Python语句是语法正确的？
- en: a)a ** 5 = b
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: a)a ** 5 = b
- en: b)b = a ** 5
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: b)b = a ** 5
- en: c)a =** 5
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: c)a =** 5
- en: d)none of the above
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 7)Which of the following Python statements assigns the value “George Malkovich”
    (without the double quotes) to the variable a?
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 7)以下哪个Python语句将值“George Malkovich”（不带双引号）赋给变量a？
- en: a)a = "George" + " " + "Malkovich"
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: a)a = "George" + " " + "Malkovich"
- en: b)a = "George" + " Malkovich"
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: b)a = "George" + " Malkovich"
- en: c)a = "George " + "Malkovich"
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: c)a = "George " + "Malkovich"
- en: d)all of the above
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 8)The following code fragment
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 8)以下代码片段
- en: x = 2
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: x = 2
- en: x += 1
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: x += 1
- en: does not satisfy the property of
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 不满足
- en: a)finiteness.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: a)确定性。
- en: b)definiteness.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: b)确定性。
- en: c)effectiveness.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: c)有效性。
- en: d)none of the above
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 9)The following code fragment
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 9)以下代码片段
- en: a = float(input())
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: x = 1 / a
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: x = 1 / a
- en: does not satisfy the property of
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 不满足
- en: a)finiteness.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: a)确定性。
- en: b)input.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: b)输入。
- en: c)definiteness.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: c)确定性。
- en: d)none of the above
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 7.8 Review Exercises
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7.8 复习题
- en: Complete the following exercises.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Which of the following Python assignment statements are syntactically correct?
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 1)以下哪个Python赋值语句是语法正确的？
- en: i)a ← a + 1
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: i)a ← a + 1
- en: ii)a += b
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: ii)a += b
- en: iii)a  b = a  b + 1
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: iii)a  b = a  b + 1
- en: iv)a = a + 1
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: iv)a = a + 1
- en: v)a = hello
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: v)a = hello
- en: vi)a = 40"
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: vi)a = 40"
- en: vii)a = b · 5
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: vii)a = b · 5
- en: viii)a =+ "True"
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: viii)a =+ "True"
- en: ix)fdadstwsdgfgw = 1
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: ix)fdadstwsdgfgw = 1
- en: x)a = a ** 5
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: x)a = a ** 5
- en: 2)What is the type of each of the following variables?
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 2)以下每个变量的类型是什么？
- en: i)a = "False"
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: i)a = "False"
- en: ii)w = False
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: ii)w = False
- en: iii)b = "15 meters"
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: iii)b = "15 meters"
- en: iv)weight = "40"
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: iv)weight = "40"
- en: v)b = 13.0
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: v)b = 13.0
- en: vi)b = 13
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: vi)b = 13
- en: 3)Match each element from the first column with one element from the second
    column.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 3)将第一列的每个元素与第二列的每个元素匹配。
- en: '| Operation | Result |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 结果 |'
- en: '| i) 1 / 2.0 | a) 100 |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| i) 1 / 2.0 | a) 100 |'
- en: '| ii) 1.0 / 2 * 2 | b) 0.25 |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| ii) 1.0 / 2 * 2 | b) 0.25 |'
- en: '| iii) 0 % 10 * 10 | c) 0 |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| iii) 0 % 10 * 10 | c) 0 |'
- en: '| iv) 10 % 2 + 7 | d) 0.5 |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| iv) 10 % 2 + 7 | d) 0.5 |'
- en: '|   | e) 7 |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '|   | e) 7 |'
- en: '|   | f) 1.0 |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '|   | f) 1.0 |'
- en: 4)What displays on the screen after executing each of the following code fragments?
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 4)执行以下代码片段后，屏幕上显示什么？
- en: i)
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: i)
- en: a = 5
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: a = 5
- en: b = a * a + 1
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: b = a * a + 1
- en: print(b)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(b)
- en: b += 1
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: b += 1
- en: ii)
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: ii)
- en: a = 9
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: a = 9
- en: b = a / 3 * a
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: b = a / 3 * a
- en: print(b + 1)
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(b + 1)
- en: 5)What displays on the screen after executing each of the following code fragments?
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 5)执行以下代码片段后，屏幕上显示什么？
- en: i)
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: i)
- en: a = 5
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: a = 5
- en: a += a - 5
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: a += a - 5
- en: print(a)
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(a)
- en: ii)
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: ii)
- en: a = 5
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: a = 5
- en: a = a + 1
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: a = a + 1
- en: print(a)
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(a)
- en: 6)What is the result of each of the following operations?
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 6)以下每个操作的运算结果是什么？
- en: i)21 % 5
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: i)21 % 5
- en: ii)10 % 2
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: ii)10 % 2
- en: iii)11 % 2
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: iii)11 % 2
- en: iv)10 % 6 % 3
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: iv)10 % 6 % 3
- en: v)0 % 3
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: v)0 % 3
- en: vi)100 / 10 % 3
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: vi)100 / 10 % 3
- en: 7)What displays on screen after executing each of the following code fragments?
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 7)执行以下代码片段后，屏幕上显示什么？
- en: i)
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: i)
- en: a = 5
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: a = 5
- en: b = 2
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: b = 2
- en: c = a % (b + 1)
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: c = a % (b + 1)
- en: d = (b + 1) % (a + b)
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: d = (b + 1) % (a + b)
- en: print(c, "*", d)
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(c, "*", d)
- en: ii)
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: ii)
- en: a = 4
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: a = 4
- en: b = 8
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: b = 8
- en: a += 1
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: a += 1
- en: c = a * b / 10 % b
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: c = a * b / 10 % b
- en: print(c)
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(c)
- en: 8)Calculate the result of the expression a % b for the following cases.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 8)计算以下情况下a % b的结果。
- en: i)a = 20, b = 3
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: i)a = 20, b = 3
- en: ii)a = 15, b = 3
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: ii)a = 15, b = 3
- en: iii)a = 22, b = 3
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: iii)a = 22, b = 3
- en: iv)a = 0, b = 3
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: iv)a = 0, b = 3
- en: v)a = 3, b = 1
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: v)a = 3, b = 1
- en: vi)a = 2, b = 2
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: vi)a = 2, b = 2
- en: 9)Calculate the result of the expression
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 9)计算以下表达式的结果
- en: b * (a % b) + a / b
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: b * (a % b) + a / b
- en: for each of the following cases.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每种情况。
- en: i)a = 10, b = 5
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: i)a = 10, b = 5
- en: ii)a = 10, b = 2
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: ii)a = 10, b = 2
- en: 10)What displays on the screen after executing the following code fragment?
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 10)执行以下代码片段后，屏幕上显示什么？
- en: a = "My name is"
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: a = "My name is"
- en: a += " "
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: a += " "
- en: a = a + "George Malkovich"
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: a = a + "George Malkovich"
- en: print(a)
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(a)
- en: 11)Fill in the gaps in each of the following code fragments so that they both
    display a value of 5.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 11)在以下代码片段中填入空缺，以便它们都显示值为5。
- en: i)
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: i)
- en: a = 2
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: a = 2
- en: a = a - ……
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: a = a - ……
- en: print(a)
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(a)
- en: ii)
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: ii)
- en: a = 4
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: a = 4
- en: b = a * 0.5
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: b = a * 0.5
- en: b += a
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: b += a
- en: a = b - ……
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: a = b - ……
- en: print(a)
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(a)
- en: 12)What displays on the screen after executing the following code fragment?
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 12)执行以下代码片段后，屏幕上显示什么？
- en: city = "California"
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: city = "California"
- en: California = city
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: California = city
- en: print(city, California, "California")
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(city, California, "California")
