- en: Chapter 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Operators
  prefs: []
  type: TYPE_NORMAL
- en: 7.1 The Value Assignment Operator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most commonly used operator in Python is the value assignment operator (
    = ). For example, the following Python statement assigns a value of 5 to variable
    x.
  prefs: []
  type: TYPE_NORMAL
- en: x = 5
  prefs: []
  type: TYPE_NORMAL
- en: As you read in [Chapter 5](chapter05.html), this is equivalent to the left arrow
    used in flowcharts.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter07-01.png)
  prefs: []
  type: TYPE_NORMAL
- en: Probably the left arrow used in a flowchart is more convenient and clearer than
    the ( = ) sign because it visually illustrates that the value or the result of
    an expression on the right is assigned to a variable on the left.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that the ( = ) sign is not equivalent to the one used
    in mathematics. In mathematics, the expression x = 5 is read as “x is equal to
    5”. However, in Python the expression x = 5 is read as “assign the value 5 to
    x” or “set x equal to 5”. They look the same but they act differently!
  prefs: []
  type: TYPE_NORMAL
- en: For instance, in mathematics, the following two lines are equivalent. The first
    one can be read as “x is equal to the sum of y and z” and the second one as “the
    sum of y and z is equal to x”.
  prefs: []
  type: TYPE_NORMAL
- en: x = y + z
  prefs: []
  type: TYPE_NORMAL
- en: y + z = x
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, in Python, these two statements are definitely not equivalent.
    The first statement is a valid Python statement, conveying “Assign the sum of
    y and z to x”. The second statement, however, is invalid, as it attempts to assign
    the value of x to y + z , which is not permissible in Python!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)In Python, the variable on the left side of the ( = )
    sign represents a region in main memory (RAM) where a value can be stored.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)On the left side of the ( = ) sign only variables can
    exist, whereas on the right side there can be a number, a variable, a string,
    or even a complex mathematical expression.'
  prefs: []
  type: TYPE_NORMAL
- en: In Table 7-1 you can find some examples of value assignments.
  prefs: []
  type: TYPE_NORMAL
- en: '| Examples | Description |'
  prefs: []
  type: TYPE_TB
- en: '| a = 9 | Assign a value of 9 to variable a. |'
  prefs: []
  type: TYPE_TB
- en: '| b = c | Assign the content of variable c to variable b. |'
  prefs: []
  type: TYPE_TB
- en: '| d = "Hello Zeus" | Assign the string Hello Zeus to variable d. |'
  prefs: []
  type: TYPE_TB
- en: '| d = a + b | Calculate the sum of the contents of variables a and b and assign
    the result to variable d. |'
  prefs: []
  type: TYPE_TB
- en: '| b = x + 1 | Calculate the sum of the content of variable x and 1 and assign
    the result to variable b. Please note that the content of variable x is not altered.
    |'
  prefs: []
  type: TYPE_TB
- en: '| x = x + 1 | Calculate the sum of the content of variable x and 1 and assign
    the result back to variable x. In other words, increase variable x by one. |'
  prefs: []
  type: TYPE_TB
- en: Table 7-1 Examples of value assignments
  prefs: []
  type: TYPE_NORMAL
- en: Confused about the last one? Are you thinking about your math teachers right
    now? What would their reaction be if you had written x = x + 1 on the blackboard?
    Can you personally imagine a number that equals itself plus one? This statement
    suggests that 5 is equal to 6 and 10 is equal to 11, which is, of course, incorrect!
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, things are different in computer science. The statement x = x + 1
    is absolutely valid! It instructs the CPU to retrieve the value of variable x
    from main memory (RAM), to add 1 to that value, and to assign the result back
    to variable x. The old value of variable x is replaced by the new one.
  prefs: []
  type: TYPE_NORMAL
- en: Still don't get it? Let's take a look at how the CPU and main memory (RAM) cooperate
    with each other in order to execute the statement x = x + 1.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that there is a region in memory, named x and it contains the number
    13.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter07-02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When a program instructs the CPU to execute the statement:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x + 1
  prefs: []
  type: TYPE_NORMAL
- en: 'the following procedure is carried out:'
  prefs: []
  type: TYPE_NORMAL
- en: ►the number 13 is transferred from the RAM's region named x to the CPU;
  prefs: []
  type: TYPE_NORMAL
- en: ►the CPU calculates the sum of 13 and 1; and
  prefs: []
  type: TYPE_NORMAL
- en: ►the result, 14, is transferred from the CPU to the RAM's region x replacing
    the existing number, 13.
  prefs: []
  type: TYPE_NORMAL
- en: After execution, the RAM looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter07-03.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have understood everything, let''s delve into some final details.
    In Python, you can assign a single value to multiple variables with one single
    statement. The following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: a = b = c = 4
  prefs: []
  type: TYPE_NORMAL
- en: assigns the value of 4 to all three variables a, b, and c.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, you can also assign multiple values to multiple variables with one
    single statement. This is called simultaneous assignment. The following statement
    assigns the value of 2 to variable a, the value of 10 to variable b, and the value
    of 3 to variable c.
  prefs: []
  type: TYPE_NORMAL
- en: a, b, c = 2, 10, 3
  prefs: []
  type: TYPE_NORMAL
- en: 7.2 Arithmetic Operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like every high-level programming language, Python supports almost all
    types of arithmetic operators, as presented in the table that follows.
  prefs: []
  type: TYPE_NORMAL
- en: '| Arithmetic Operator | Description |'
  prefs: []
  type: TYPE_TB
- en: '| + | Addition |'
  prefs: []
  type: TYPE_TB
- en: '| − | Subtraction |'
  prefs: []
  type: TYPE_TB
- en: '| * | Multiplication |'
  prefs: []
  type: TYPE_TB
- en: '| / | Division |'
  prefs: []
  type: TYPE_TB
- en: '| // | Quotient after integer division |'
  prefs: []
  type: TYPE_TB
- en: '| % | Remainder after integer division (Modulus) |'
  prefs: []
  type: TYPE_TB
- en: '| ** | Exponentiation |'
  prefs: []
  type: TYPE_TB
- en: The first two operators are straightforward and need no further explanation.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to multiply two numbers or the content of two variables you have
    to use the asterisk ( * ) symbol. For example, if you want to multiply 2 times
    y, you must write 2 * y.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In mathematics it is legal to skip the multiplication operator
    and write 3x, meaning “3 times x”. In Python, however, you must always use an
    asterisk anywhere a multiplication operation exists. This is one of the most common
    mistakes novice programmers make when they write mathematical expressions in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: To perform a division, you must use the slash ( / ) symbol. For example, if
    you want to divide 10 by 2, you must write 10 / 2.
  prefs: []
  type: TYPE_NORMAL
- en: The integer division operator ( // ) returns the quotient of an integer division,
    which means that
  prefs: []
  type: TYPE_NORMAL
- en: a = 13 // 3
  prefs: []
  type: TYPE_NORMAL
- en: assigns a value of 4 to variable a.
  prefs: []
  type: TYPE_NORMAL
- en: The ( // ) operator can be used with floating-point numbers as well. For example,
    the operation
  prefs: []
  type: TYPE_NORMAL
- en: b = 14.4 // 3
  prefs: []
  type: TYPE_NORMAL
- en: assigns a value of 4 to variable b.
  prefs: []
  type: TYPE_NORMAL
- en: Correspondingly, the modulus operator ( % ) returns the remainder of an integer
    division, which means that
  prefs: []
  type: TYPE_NORMAL
- en: c = 13 % 3
  prefs: []
  type: TYPE_NORMAL
- en: assigns a value of 1 to variable c.
  prefs: []
  type: TYPE_NORMAL
- en: The modulus operator ( % ) can be used with floating-point numbers as well,
    but the result is a real (float). For example, the operation
  prefs: []
  type: TYPE_NORMAL
- en: d = 14.4 % 3
  prefs: []
  type: TYPE_NORMAL
- en: assigns a value of 2.4 (and not 2, as you may mistakenly expect) to variable
    d.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Keep in mind that flowcharts are a loose method used to
    represent an algorithm. Although the use of the integer quotient ( // ) and the
    integer remainder ( % ) operators is allowed in flowcharts, this book uses the
    commonly accepted DIV and MOD operators instead! For example, the Python statements
    x = 13 // 3 and y = 13 % 3 are represented in a flowchart as'
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter07-04.png)
  prefs: []
  type: TYPE_NORMAL
- en: The exponentiation operator ( ** ) raises the number on the left of the operator
    to the power of the number on the right. For example, the operation
  prefs: []
  type: TYPE_NORMAL
- en: f = 2 ** 3
  prefs: []
  type: TYPE_NORMAL
- en: calculates 2 to the power of 3 (2³) and assigns a value of 8 to variable f.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The exponentiation operator ( ** ) serves a dual role. Apart
    from being used to calculate the power of a value raised to another value, it
    is also used to compute any root of a number using the known mathematical formula
    ![Image](img/chapter07-05.png). For example, you can write y = x ** (1 / 2) to
    calculate the square root of x or y = x ** (1 / 3) to calculate the cubic root
    of x.'
  prefs: []
  type: TYPE_NORMAL
- en: In mathematics, as you may already know, you are allowed to use parentheses
    (round brackets) as well as braces (curly brackets) and square brackets , as presented
    in the following expression.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter07-06.png)
  prefs: []
  type: TYPE_NORMAL
- en: However, in Python there is no such thing as braces and brackets. Parentheses
    are all you have; therefore, the same expression must be written using parentheses
    instead of braces or brackets.
  prefs: []
  type: TYPE_NORMAL
- en: y = 5 / 2 * (3 + 2 * (4 + 7 * (6 − 4 / 3)))
  prefs: []
  type: TYPE_NORMAL
- en: 7.3 What is the Precedence of Arithmetic Operators?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Arithmetic operators follow the same precedence rules as in mathematics, and
    these are: exponentiation is performed first, multiplication and division are
    performed next, and addition and subtraction are performed last.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Higher Precedence ![Image](img/arrow_up.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Lower precedence | Arithmetic Operators |
  prefs: []
  type: TYPE_NORMAL
- en: '| ** |'
  prefs: []
  type: TYPE_TB
- en: '| *, /, //, % |'
  prefs: []
  type: TYPE_TB
- en: '| +, − |'
  prefs: []
  type: TYPE_TB
- en: When multiplication and division exist in the same expression, and since both
    are of the same precedence, they are performed left to right (the same way as
    you read), which means that the expression
  prefs: []
  type: TYPE_NORMAL
- en: y = 6 / 3 * 2
  prefs: []
  type: TYPE_NORMAL
- en: is equivalent to ![Image](img/chapter07-07.png), and assigns a value of 4 to
    variable y, (division is performed before multiplication).
  prefs: []
  type: TYPE_NORMAL
- en: If you want, however, the multiplication to be performed before the division,
    you can use parentheses to change the precedence. This means that
  prefs: []
  type: TYPE_NORMAL
- en: y = 6 / (3 * 2)
  prefs: []
  type: TYPE_NORMAL
- en: is equivalent to ![Image](img/chapter07-08.png), and assigns a value of 1 to
    variable y (multiplication is performed before division).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Keep in mind that it is not possible in Python to write
    fractions in the form of ![Image](img/chapter07-09.png) or ![Image](img/chapter07-10.png).
    Forget it! There is no equation editor in Visual Studio Code, or in any IDE. All
    fractions must be written on one single line. For example, ![Image](img/chapter07-09.png)
    must be written as 6 / 3, and ![Image](img/chapter07-10.png) must be written as
    (4 * x + 5) / 6.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The order of operations can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 1)Any operations enclosed in parentheses are performed first.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Any exponentiations are performed next.
  prefs: []
  type: TYPE_NORMAL
- en: 3)Then, any multiplication and division operations are performed from left to
    right.
  prefs: []
  type: TYPE_NORMAL
- en: 4)In the end, any addition and subtraction operations are performed from left
    to right.
  prefs: []
  type: TYPE_NORMAL
- en: So, in the next example
  prefs: []
  type: TYPE_NORMAL
- en: y = 12 + (20 + 3) - 2 ** 3 / 4 * 3
  prefs: []
  type: TYPE_NORMAL
- en: 'the operations are performed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter07-11.png)'
  prefs: []
  type: TYPE_IMG
- en: 7.4 Compound Assignment Operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python offers a special set of operators known as compound assignment operators,
    which can help you write code faster. These operators are comprehensively detailed
    in the table below. An example for each operator is provided, while the “Equivalent
    to” column shows the corresponding statement without using a compound assignment
    operator.
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description | Example | Equivalent to |'
  prefs: []
  type: TYPE_TB
- en: '| += | Addition assignment | a += b | a = a + b |'
  prefs: []
  type: TYPE_TB
- en: '| −= | Subtraction assignment | a ‑= b | a = a ‑ b |'
  prefs: []
  type: TYPE_TB
- en: '| *= | Multiplication assignment | a *= b | a = a * b |'
  prefs: []
  type: TYPE_TB
- en: '| /= | Division assignment | a /= b | a = a / b |'
  prefs: []
  type: TYPE_TB
- en: '| //= | Integer division assignment | a //= b | a = a // b |'
  prefs: []
  type: TYPE_TB
- en: '| %= | Modulus assignment | a %= b | a = a % b |'
  prefs: []
  type: TYPE_TB
- en: '| **= | Exponentiation assignment | a **= b | a = a ** b |'
  prefs: []
  type: TYPE_TB
- en: '![](img/notice.jpg)Bear in mind that in flowcharts, this book only uses the
    commonly accepted operators shown in the “Equivalent to” column. For example,
    the Python statement a += b is represented in a flowchart as'
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter07-12.png)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.4-1 Which Python Statements are Syntactically Correct?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Which of the following Python assignment statements are syntactically correct?
  prefs: []
  type: TYPE_NORMAL
- en: i)a = −10
  prefs: []
  type: TYPE_NORMAL
- en: ii)10 = b
  prefs: []
  type: TYPE_NORMAL
- en: iii)aB = aB + 1
  prefs: []
  type: TYPE_NORMAL
- en: iv)a = "COWS"
  prefs: []
  type: TYPE_NORMAL
- en: v)a = COWS
  prefs: []
  type: TYPE_NORMAL
- en: vi)a + b = 40
  prefs: []
  type: TYPE_NORMAL
- en: vii)a = 3 b
  prefs: []
  type: TYPE_NORMAL
- en: viii)a = "True"
  prefs: []
  type: TYPE_NORMAL
- en: ix)a = True
  prefs: []
  type: TYPE_NORMAL
- en: x)a //= 2
  prefs: []
  type: TYPE_NORMAL
- en: xi)a += 1
  prefs: []
  type: TYPE_NORMAL
- en: xii)a =* 2
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: i)Correct. It assigns the integer value −10 to variable a.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Wrong. On the left side of the value assignment operator, only variables
    can exist.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Correct. It increases variable aB by one.
  prefs: []
  type: TYPE_NORMAL
- en: iv)Correct. It assigns the string “COWS” (without the double quotes) to variable
    a.
  prefs: []
  type: TYPE_NORMAL
- en: v)Correct. It assigns the content of variable COWS to variable a.
  prefs: []
  type: TYPE_NORMAL
- en: vi)Wrong. On the left side of the value assignment operator, only variables
    (not expressions) can exist.
  prefs: []
  type: TYPE_NORMAL
- en: vii)Wrong. It should have been written as a = 3 * b.
  prefs: []
  type: TYPE_NORMAL
- en: viii)Correct. It assigns the string “True” (without the double quotes) to variable
    a.
  prefs: []
  type: TYPE_NORMAL
- en: ix)Correct. It assigns the value True to variable a.
  prefs: []
  type: TYPE_NORMAL
- en: x)Correct. This is equivalent to a = a // 2.
  prefs: []
  type: TYPE_NORMAL
- en: xi)Correct. This is equivalent to a = a + 1.
  prefs: []
  type: TYPE_NORMAL
- en: xii)Wrong. It should have been written as a *= 2 (which is equivalent to a =
    a * 2).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.4-2 Finding Variable Types
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: What is the type of each of the following variables?
  prefs: []
  type: TYPE_NORMAL
- en: i)a = 15
  prefs: []
  type: TYPE_NORMAL
- en: ii)width = "10 meters"
  prefs: []
  type: TYPE_NORMAL
- en: iii)b = "15"
  prefs: []
  type: TYPE_NORMAL
- en: iv)temp = 13.5
  prefs: []
  type: TYPE_NORMAL
- en: v)b = True
  prefs: []
  type: TYPE_NORMAL
- en: vi)b = "True"
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: i)The value 15 belongs to the set of integers, thus the variable a is an integer.
  prefs: []
  type: TYPE_NORMAL
- en: ii)The value “10 meters” is a text, thus the width variable is a string.
  prefs: []
  type: TYPE_NORMAL
- en: iii)The value “15” is a text, thus the b variable is a string.
  prefs: []
  type: TYPE_NORMAL
- en: iv)The value 13.5 belongs to the set of real numbers, thus the variable temp
    is real (float).
  prefs: []
  type: TYPE_NORMAL
- en: v)The value True is Boolean, thus the variable b is a Boolean.
  prefs: []
  type: TYPE_NORMAL
- en: vi)The value “True” is a text, thus the variable b is a string.
  prefs: []
  type: TYPE_NORMAL
- en: 7.5 String Operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Joining two separate strings into a single one is called concatenation. There
    are two operators that you can use to concatenate (join) strings as shown in the
    table that follows.
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description | Example | Equivalent to |'
  prefs: []
  type: TYPE_TB
- en: '| + | Concatenation | a = "Hi" + " there" |   |'
  prefs: []
  type: TYPE_TB
- en: '| += | Concatenation assignment | a += "Hello" | a = a + "Hello" |'
  prefs: []
  type: TYPE_TB
- en: The following example displays “What's up, dude?”
  prefs: []
  type: TYPE_NORMAL
- en: a = "What's "
  prefs: []
  type: TYPE_NORMAL
- en: b = "up, "
  prefs: []
  type: TYPE_NORMAL
- en: c = a + b
  prefs: []
  type: TYPE_NORMAL
- en: c += "dude?"
  prefs: []
  type: TYPE_NORMAL
- en: print(c)
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, there are two more string operators that can be used for
    string repetition, as shown in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description | Example | Equivalent to |'
  prefs: []
  type: TYPE_TB
- en: '| * | Repetition | a = "Hi" * 3 | a = "HiHiHi" |'
  prefs: []
  type: TYPE_TB
- en: '| *= | Repetition assignment | a *= 5 | a = a * 5 |'
  prefs: []
  type: TYPE_TB
- en: The following example displays “catcat” and then “catcatcatcat”.
  prefs: []
  type: TYPE_NORMAL
- en: a = "cat" * 2
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a)   #It displays: catcat'
  prefs: []
  type: TYPE_NORMAL
- en: a *= 2
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a)   #It displays: catcatcatcat'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.5-1 Concatenating Names
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter their first and last name
    (assigned to two different variables). It then joins them in a single string (concatenation)
    and displays them on the user's screen.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'firstName = input("Enter first name: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'lastName = input("Enter last name: ")'
  prefs: []
  type: TYPE_NORMAL
- en: fullName = firstName + " " + lastName
  prefs: []
  type: TYPE_NORMAL
- en: print(fullName)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note the extra space character added between the first and
    last name.'
  prefs: []
  type: TYPE_NORMAL
- en: '7.6 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)The statement x = 5 can be read as “Variable x is equal to 5”.
  prefs: []
  type: TYPE_NORMAL
- en: 2)The value assignment operator assigns the result of an expression to a variable.
  prefs: []
  type: TYPE_NORMAL
- en: 3)A string can be assigned to a variable only by using the input() statement.
  prefs: []
  type: TYPE_NORMAL
- en: 4)The statement 5 = y assigns value 5 to variable y.
  prefs: []
  type: TYPE_NORMAL
- en: 5)On the right side of a value assignment operator an arithmetic operator must
    always exist.
  prefs: []
  type: TYPE_NORMAL
- en: 6)In Python, on the right side of a value assignment operator only variables
    can exist.
  prefs: []
  type: TYPE_NORMAL
- en: 7)You cannot use the same variable on both sides of a value assignment operator.
  prefs: []
  type: TYPE_NORMAL
- en: 8)The statement a = a + 1 decrements variable a by one.
  prefs: []
  type: TYPE_NORMAL
- en: 9)The statement a = a + (−1) decrements variable a by one.
  prefs: []
  type: TYPE_NORMAL
- en: 10)In Python, the word DIV is a reserved word.
  prefs: []
  type: TYPE_NORMAL
- en: 11)The statement x = 0 % 5 assigns a value of 5 to variable x.
  prefs: []
  type: TYPE_NORMAL
- en: 12)The operation 5 % 0 is not possible.
  prefs: []
  type: TYPE_NORMAL
- en: 13)Addition and subtraction have the higher precedence among the arithmetic
    operators.
  prefs: []
  type: TYPE_NORMAL
- en: 14)When division and multiplication operators co-exist in an expression, multiplication
    operations are performed before division.
  prefs: []
  type: TYPE_NORMAL
- en: 15)The statement 2 ** 3 returns a result of 6.
  prefs: []
  type: TYPE_NORMAL
- en: 16)The statement 2 ** 3 returns a result of 9.
  prefs: []
  type: TYPE_NORMAL
- en: 17)The expression 8 / 4 * 2 is equal to 1.
  prefs: []
  type: TYPE_NORMAL
- en: 18)The expression 4 + 6 / 6 + 4 is equal to 9.
  prefs: []
  type: TYPE_NORMAL
- en: 19)The expression a + b + c / 3.0 calculates the average value of three numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 20)The statement a += 1 is equivalent to a = a + 1
  prefs: []
  type: TYPE_NORMAL
- en: 21)The statement a = "True" assigns a Boolean value to variable a.
  prefs: []
  type: TYPE_NORMAL
- en: 22)The statement a = 2·a doubles the content of variable a.
  prefs: []
  type: TYPE_NORMAL
- en: 23)The statements a += 2 and a = a − (−2) are not equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 24)The statement a −= a + 1 always assigns a value of  −1 to variable a.
  prefs: []
  type: TYPE_NORMAL
- en: 25)The statement a = "George" + " Malkovich" assigns the value “GeorgeMalkovich”
    (without the double quotes) to the variable a.
  prefs: []
  type: TYPE_NORMAL
- en: 26)The following Python program satisfies the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: x = a / (b - 7)
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  prefs: []
  type: TYPE_NORMAL
- en: '7.7 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Which of the following Python statements assigns a value of 10.0 to variable
    a?
  prefs: []
  type: TYPE_NORMAL
- en: a)10.0 = a
  prefs: []
  type: TYPE_NORMAL
- en: b)a ← 10.0
  prefs: []
  type: TYPE_NORMAL
- en: c)a = 100.0 / 10.0
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 2)The statement a = b can be read as
  prefs: []
  type: TYPE_NORMAL
- en: a)assign the content of variable a to variable b.
  prefs: []
  type: TYPE_NORMAL
- en: b)variable b is equal to variable a.
  prefs: []
  type: TYPE_NORMAL
- en: c)assign the content of variable b to variable a.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 3)Which of the following calculates the result of the variable a raised to the
    power of 2?
  prefs: []
  type: TYPE_NORMAL
- en: a)y = a * a
  prefs: []
  type: TYPE_NORMAL
- en: b)y = a ** 2
  prefs: []
  type: TYPE_NORMAL
- en: c)y = a * a / a * a
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: 4)The expression 0 % 10 + 2 is equal to
  prefs: []
  type: TYPE_NORMAL
- en: a)7.
  prefs: []
  type: TYPE_NORMAL
- en: b)2.
  prefs: []
  type: TYPE_NORMAL
- en: c)12.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 5)Which of the following Python statements is syntactically correct?
  prefs: []
  type: TYPE_NORMAL
- en: a)a = 4 * 2y − 8 / (4 * q)
  prefs: []
  type: TYPE_NORMAL
- en: b)a = 4 * 2 * y − 8 /> 4 * q)
  prefs: []
  type: TYPE_NORMAL
- en: c)a = 4 * 2 * y − 8 / (4 */ q)
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 6)Which of the following Python statements is syntactically correct?
  prefs: []
  type: TYPE_NORMAL
- en: a)a ** 5 = b
  prefs: []
  type: TYPE_NORMAL
- en: b)b = a ** 5
  prefs: []
  type: TYPE_NORMAL
- en: c)a =** 5
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 7)Which of the following Python statements assigns the value “George Malkovich”
    (without the double quotes) to the variable a?
  prefs: []
  type: TYPE_NORMAL
- en: a)a = "George" + " " + "Malkovich"
  prefs: []
  type: TYPE_NORMAL
- en: b)a = "George" + " Malkovich"
  prefs: []
  type: TYPE_NORMAL
- en: c)a = "George " + "Malkovich"
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: 8)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: x = 2
  prefs: []
  type: TYPE_NORMAL
- en: x += 1
  prefs: []
  type: TYPE_NORMAL
- en: does not satisfy the property of
  prefs: []
  type: TYPE_NORMAL
- en: a)finiteness.
  prefs: []
  type: TYPE_NORMAL
- en: b)definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: c)effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 9)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: x = 1 / a
  prefs: []
  type: TYPE_NORMAL
- en: does not satisfy the property of
  prefs: []
  type: TYPE_NORMAL
- en: a)finiteness.
  prefs: []
  type: TYPE_NORMAL
- en: b)input.
  prefs: []
  type: TYPE_NORMAL
- en: c)definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 7.8 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Which of the following Python assignment statements are syntactically correct?
  prefs: []
  type: TYPE_NORMAL
- en: i)a ← a + 1
  prefs: []
  type: TYPE_NORMAL
- en: ii)a += b
  prefs: []
  type: TYPE_NORMAL
- en: iii)a  b = a  b + 1
  prefs: []
  type: TYPE_NORMAL
- en: iv)a = a + 1
  prefs: []
  type: TYPE_NORMAL
- en: v)a = hello
  prefs: []
  type: TYPE_NORMAL
- en: vi)a = 40"
  prefs: []
  type: TYPE_NORMAL
- en: vii)a = b · 5
  prefs: []
  type: TYPE_NORMAL
- en: viii)a =+ "True"
  prefs: []
  type: TYPE_NORMAL
- en: ix)fdadstwsdgfgw = 1
  prefs: []
  type: TYPE_NORMAL
- en: x)a = a ** 5
  prefs: []
  type: TYPE_NORMAL
- en: 2)What is the type of each of the following variables?
  prefs: []
  type: TYPE_NORMAL
- en: i)a = "False"
  prefs: []
  type: TYPE_NORMAL
- en: ii)w = False
  prefs: []
  type: TYPE_NORMAL
- en: iii)b = "15 meters"
  prefs: []
  type: TYPE_NORMAL
- en: iv)weight = "40"
  prefs: []
  type: TYPE_NORMAL
- en: v)b = 13.0
  prefs: []
  type: TYPE_NORMAL
- en: vi)b = 13
  prefs: []
  type: TYPE_NORMAL
- en: 3)Match each element from the first column with one element from the second
    column.
  prefs: []
  type: TYPE_NORMAL
- en: '| Operation | Result |'
  prefs: []
  type: TYPE_TB
- en: '| i) 1 / 2.0 | a) 100 |'
  prefs: []
  type: TYPE_TB
- en: '| ii) 1.0 / 2 * 2 | b) 0.25 |'
  prefs: []
  type: TYPE_TB
- en: '| iii) 0 % 10 * 10 | c) 0 |'
  prefs: []
  type: TYPE_TB
- en: '| iv) 10 % 2 + 7 | d) 0.5 |'
  prefs: []
  type: TYPE_TB
- en: '|   | e) 7 |'
  prefs: []
  type: TYPE_TB
- en: '|   | f) 1.0 |'
  prefs: []
  type: TYPE_TB
- en: 4)What displays on the screen after executing each of the following code fragments?
  prefs: []
  type: TYPE_NORMAL
- en: i)
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: b = a * a + 1
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  prefs: []
  type: TYPE_NORMAL
- en: b += 1
  prefs: []
  type: TYPE_NORMAL
- en: ii)
  prefs: []
  type: TYPE_NORMAL
- en: a = 9
  prefs: []
  type: TYPE_NORMAL
- en: b = a / 3 * a
  prefs: []
  type: TYPE_NORMAL
- en: print(b + 1)
  prefs: []
  type: TYPE_NORMAL
- en: 5)What displays on the screen after executing each of the following code fragments?
  prefs: []
  type: TYPE_NORMAL
- en: i)
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: a += a - 5
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: ii)
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: a = a + 1
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: 6)What is the result of each of the following operations?
  prefs: []
  type: TYPE_NORMAL
- en: i)21 % 5
  prefs: []
  type: TYPE_NORMAL
- en: ii)10 % 2
  prefs: []
  type: TYPE_NORMAL
- en: iii)11 % 2
  prefs: []
  type: TYPE_NORMAL
- en: iv)10 % 6 % 3
  prefs: []
  type: TYPE_NORMAL
- en: v)0 % 3
  prefs: []
  type: TYPE_NORMAL
- en: vi)100 / 10 % 3
  prefs: []
  type: TYPE_NORMAL
- en: 7)What displays on screen after executing each of the following code fragments?
  prefs: []
  type: TYPE_NORMAL
- en: i)
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: b = 2
  prefs: []
  type: TYPE_NORMAL
- en: c = a % (b + 1)
  prefs: []
  type: TYPE_NORMAL
- en: d = (b + 1) % (a + b)
  prefs: []
  type: TYPE_NORMAL
- en: print(c, "*", d)
  prefs: []
  type: TYPE_NORMAL
- en: ii)
  prefs: []
  type: TYPE_NORMAL
- en: a = 4
  prefs: []
  type: TYPE_NORMAL
- en: b = 8
  prefs: []
  type: TYPE_NORMAL
- en: a += 1
  prefs: []
  type: TYPE_NORMAL
- en: c = a * b / 10 % b
  prefs: []
  type: TYPE_NORMAL
- en: print(c)
  prefs: []
  type: TYPE_NORMAL
- en: 8)Calculate the result of the expression a % b for the following cases.
  prefs: []
  type: TYPE_NORMAL
- en: i)a = 20, b = 3
  prefs: []
  type: TYPE_NORMAL
- en: ii)a = 15, b = 3
  prefs: []
  type: TYPE_NORMAL
- en: iii)a = 22, b = 3
  prefs: []
  type: TYPE_NORMAL
- en: iv)a = 0, b = 3
  prefs: []
  type: TYPE_NORMAL
- en: v)a = 3, b = 1
  prefs: []
  type: TYPE_NORMAL
- en: vi)a = 2, b = 2
  prefs: []
  type: TYPE_NORMAL
- en: 9)Calculate the result of the expression
  prefs: []
  type: TYPE_NORMAL
- en: b * (a % b) + a / b
  prefs: []
  type: TYPE_NORMAL
- en: for each of the following cases.
  prefs: []
  type: TYPE_NORMAL
- en: i)a = 10, b = 5
  prefs: []
  type: TYPE_NORMAL
- en: ii)a = 10, b = 2
  prefs: []
  type: TYPE_NORMAL
- en: 10)What displays on the screen after executing the following code fragment?
  prefs: []
  type: TYPE_NORMAL
- en: a = "My name is"
  prefs: []
  type: TYPE_NORMAL
- en: a += " "
  prefs: []
  type: TYPE_NORMAL
- en: a = a + "George Malkovich"
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: 11)Fill in the gaps in each of the following code fragments so that they both
    display a value of 5.
  prefs: []
  type: TYPE_NORMAL
- en: i)
  prefs: []
  type: TYPE_NORMAL
- en: a = 2
  prefs: []
  type: TYPE_NORMAL
- en: a = a - ……
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: ii)
  prefs: []
  type: TYPE_NORMAL
- en: a = 4
  prefs: []
  type: TYPE_NORMAL
- en: b = a * 0.5
  prefs: []
  type: TYPE_NORMAL
- en: b += a
  prefs: []
  type: TYPE_NORMAL
- en: a = b - ……
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: 12)What displays on the screen after executing the following code fragment?
  prefs: []
  type: TYPE_NORMAL
- en: city = "California"
  prefs: []
  type: TYPE_NORMAL
- en: California = city
  prefs: []
  type: TYPE_NORMAL
- en: print(city, California, "California")
  prefs: []
  type: TYPE_NORMAL
