- en: Installing the Required Software and Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will start our journey towards creating RESTful Web Services
    with Python and its most popular web framework: Django. Python is one of the most
    popular and versatile programming languages. There are thousands of Python packages,
    which allow you to extend Python capabilities to any kind of domain you can imagine.
    You can work with Django and packages to easily build simple and complex RESTful
    Web Services with Python that can run on your favorite platform.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will leverage your existing knowledge of Python and all of its packages
    to code the different pieces of your RESTful Web Services and their ecosystem.
    We will use object-oriented features to create code that is easier to maintain,
    understand, and reuse. We don''t need to learn another programming language, we
    can use the one we already know and love: Python.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will install and configure the environments and the required
    software and tools to create RESTful Web Services with Django and Django REST
    framework. We will learn the necessary steps in Linux, macOS, and Windows. We
    will gain an understanding of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a virtual environment with Python 3.x and PEP 405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the directory structure for a virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating the virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deactivating the virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Django and Django REST framework in an isolated environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an app with Django
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Django folders, files, and configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Curl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing HTTPie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Postman REST client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Stoplight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing iCurlHTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a virtual environment with Python 3.x and PEP 405
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this book, we will be working with different packages and libraries
    to create RESTful Web Services, and therefore it is convenient to work with Python
    virtual environments. Python 3.3 introduced lightweight virtual environments and
    they were improved in Python 3.4\. We will work with these virtual environments,
    and therefore you will need Python 3.4 or greater. You can read more information
    about PEP 405 Python Virtual Environment, that introduced the `venv` module, here:
    [https://www.python.org/dev/peps/pep-0405](https://www.python.org/dev/peps/pep-0405).
    All the examples in this book were tested on Python 3.6.2 on Linux, macOS, and
    Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: In case you decide to use the popular `virtualenv` ([https://pypi.python.org/pypi/virtualenv](https://pypi.python.org/pypi/virtualenv))
    third-party virtual environment builder or the virtual environment options provided
    by your Python IDE, you just have to make sure that you activate your virtual
    environment with the appropriate mechanism whenever it is necessary to do so,
    instead of following the step explained to activate the virtual environment generated
    with the `venv` module integrated in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Each virtual environment we create with `venv` is an isolated environment and
    it will have its own independent set of installed Python packages in its site
    directories (folders). When we create a virtual environment with `venv` in Python
    3.4 and greater, `pip` is included in the new virtual environment. In Python 3.3,
    it was necessary to manually install `pip` after creating the virtual environment.
    Note that the instructions provided are compatible with Python 3.4 or greater,
    including Python 3.6.2.
  prefs: []
  type: TYPE_NORMAL
- en: In order to create a lightweight virtual environment, the first step is to select
    the target folder or directory for it. The following is the path we will use in
    the example for Linux and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The target folder for the virtual environment will be the `HillarDjangoREST/01`
    folder within our home directory. For example, if our home directory in macOS
    or Linux is `/Users/gaston`, the virtual environment will be created within `/Users/gaston/HillarDjangoREST/01`.
    You can replace the specified path with your desired path in each command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the path we will use in the example for Windows. The target
    folder for the virtual environment will be the `HillarDjangoREST\01` folder within
    our user profile folder. For example, if our user profile folder is `C:\Users\gaston`,
    the virtual environment will be created within `C:\Users\gaston\HillarDjangoREST\01`.
    You can replace the specified path with your desired path in each command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In Windows PowerShell, the previous path would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will create a new virtual environment with `venv`. In order to do so,
    we have to use the `-m` option followed by the `venv` module name and the desired
    path to make Python run this module as a script and create a virtual environment
    in the specified path. The instructions are different depending on the platform
    in which we are creating the virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Terminal in Linux or macOS and execute the following command to create
    a virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In Windows, in Command Prompt, execute the following command to create a virtual
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to work with Windows PowerShell, execute the following command
    to create a virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: None of the previous commands produce any output. The script created the specified
    target folder and installed `pip` by invoking `ensurepip` because we didn't specify
    the `--without-pip` option.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the directory structure for a virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The specified target folder has a new directory tree that contains Python executable
    files and other files that indicate it is a PEP405 virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the root directory for the virtual environment, the `pyenv.cfg` configuration
    file specifies different options for the virtual environment and its existence
    is an indicator that we are in the root folder for a virtual environment. In Linux
    and macOS, the folder will have the following main subfolders: `bin`, `include`,
    `lib`, `lib/python3.6`, and `lib/python3.6/site-packages`. In Windows, the folder
    will have the following main subfolders: `Include`, `Lib`, `Lib\site-packages`,
    and `Scripts`. The directory trees for the virtual environment in each platform
    are the same as the layout of the Python installation on these platforms.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the folders and files in the directory trees generated
    for the `01` virtual environments in macOS and Linux platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/adb56dfb-d546-43cc-998a-5c3e5ebadb48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following diagram shows the main folders in the directory trees generated
    for the virtual environment in Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db27a46c-37e9-4d31-961d-b4dc277c4309.png)'
  prefs: []
  type: TYPE_IMG
- en: After we activate the virtual environment, we will install third-party packages
    into the virtual environment and the modules will be located in the `lib/python3.6/site-packages`
    or `Lib\site-packages` folder, based on the platform. The executables will be
    copied in the `bin` or `Scripts` folder, based on the platform. The packages we
    install won't make changes to other virtual environments or our base Python environment.
  prefs: []
  type: TYPE_NORMAL
- en: Activating the virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created a virtual environment, we will run a platform-specific
    script to activate it. After we activate the virtual environment, we will install
    packages that will only be available in this virtual environment. This way, we
    will work with an isolated environment in which all the packages we install won't
    affect our main Python environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the results of this command will be accurate if you don''t start
    a different shell than the default shell in the terminal session. If you have
    doubts, check your terminal configuration and preferences. Run the following command
    in the Terminal in Linux or macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The command will display the name of the shell you are using in the Terminal.
    In macOS, the default is `/bin/bash` and this means you are working with the `bash`
    shell. Depending on the shell, you must run a different command to activate the
    virtual environment in Linux or macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your Terminal is configured to use the `bash` shell in Linux or macOS, run
    the following command to activate the virtual environment. The command also works
    for the `zsh` shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If your Terminal is configured to use either the `csh` or `tcsh` shell, run
    the following command to activate the virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If your Terminal is configured to use the `fish` shell, run the following command
    to activate the virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: After you activate the virtual environment, Command Prompt will display the
    virtual environment root folder name enclosed in parentheses as a prefix of the
    default prompt to remind us that we are working in the virtual environment. In
    this case, we will see `(01)` as a prefix for the Command Prompt because the root
    folder for the activated virtual environment is `01`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the virtual environment activated in a macOS
    Sierra Terminal with a `bash` shell, after executing the previously shown commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2094777-2d2d-48f6-b5e0-cba910fdd930.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the previous screenshot, the prompt changed from
  prefs: []
  type: TYPE_NORMAL
- en: '`Gastons-MacBook-Pro:~ gaston$` to `(01) Gastons-MacBook-Pro:~ gaston$` after
    the activation of the virtual environment.'
  prefs: []
  type: TYPE_NORMAL
- en: In Windows, you can run either a batch file in the Command Prompt or a Windows
    PowerShell script to activate the virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer Command Prompt, run the following command in the Windows command
    line to activate the virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the virtual environment activated in Windows
    10 Command Prompt, after executing the previously shown commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93c26d61-1f5e-4faf-9260-00016fd07ced.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the previous screenshot, the prompt changed from `C:\Users\gaston`
    to `(01) C:\Users\gaston` after the activation of the virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer Windows PowerShell, launch it and run the following commands
    to activate the virtual environment. Note that you must have scripts execution
    enabled in Windows PowerShell to be able to run the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you receive an error similar to the following lines, it means that you don''t
    have scripts execution enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The Windows PowerShell default execution policy is `Restricted`. This policy
    allows the execution of individual commands but it doesn''t run scripts. Thus,
    in case you want to work with Windows PowerShell, you will have to change the
    policy to allow the execution of scripts. It is very important to make sure that
    you understand the risks of the Windows PowerShell execution policies that allow
    you to run unsigned scripts. For more information about the different policies,
    check the following web page: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-6](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-6).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the virtual environment activated in a Windows
    10 PowerShell, after executing the previously shown commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3dd7d8f8-489c-482e-a002-13da5795fafd.png)'
  prefs: []
  type: TYPE_IMG
- en: Deactivating the virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is extremely easy to deactivate a virtual environment generated by the previously
    explained process. The deactivation will remove all the changes made in the environment
    variables and will change the prompt back to its default message. Once you deactivate
    a virtual environment, you will go back to the default Python environment.
  prefs: []
  type: TYPE_NORMAL
- en: In macOS or Linux, just type `deactivate` and press *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: In a Windows Command Prompt, you have to run the `deactivate.bat` batch file
    included in the `Scripts` folder. In our example, the full path for this file
    is `%USERPROFILE%\HillarDjangoREST\01\Scripts\deactivate.bat`.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows PowerShell, you have to run the `Deactivate.ps1` script in the `Scripts`
    folder. In our example, the full path for this file is `$env:userprofile\HillarDjangoREST\01\Scripts\Deactivate.ps1`.
    Remember that you must have scripts execution enabled in Windows PowerShell to
    be able to run the script.
  prefs: []
  type: TYPE_NORMAL
- en: The instructions in the next sections assume that the virtual environment we
    have created is activated.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Django and Django REST frameworks in an isolated environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created and activated a lightweight virtual environment. It is time
    to run many commands that will be the same for either Linux, macOS, or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, run the following command to install the Django web framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The last lines of the output will indicate that the `django` package has been
    successfully installed. The process will also install the `pytz` package that
    provides world time zone definitions. Take into account that you may also see
    a notice to upgrade `pip`. The next lines show a sample of the four last lines
    of the output generated by a successful `pip` installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have installed the Django web framework, we can install Django
    REST framework. Django REST framework works on top of Django and provides us with
    a powerful and flexible toolkit to build RESTful Web Services. We just need to
    run the following command to install this package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The last lines for the output will indicate that the `djangorestframework`
    package has been successfully installed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: After following the previous steps, we will have Django REST framework 3.6.4
    and Django 1.11.5 installed in our virtual environment. We will install additional
    packages as we need them in the forthcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an app with Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will create our first app with Django and we will analyze the directory
    structure that Django creates. First, go to the root folder for the virtual environment:
    `01`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Linux or macOS, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer Command Prompt, run the following command in the Windows command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer Windows PowerShell, run the following command in Windows PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In Linux or macOS, run the following command to create a new Django project
    named `restful01`. The command won''t produce any output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In Windows, in either Command Prompt or PowerShell, run the following command
    to create a new Django project named `restful01`. The command won''t produce any
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command creates a `restful01` folder with other subfolders and
    Python files. Now, go to the recently created `restful01` folder. Just execute
    the following command on any platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the following command to create a new Django app named `toys` within
    the `restful01` Django project. The command won''t produce any output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command creates a new `restful01/toys` subfolder, with the following
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`views.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tests.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`models.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`apps.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__init__.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, the `restful01/toys` folder will have a `migrations` subfolder
    with an `__init__.py` Python script. The following diagram shows the folders and
    files in the directory tree, starting at the `restful01` folder with two subfolders
    - `toys` and `restful01`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ffe5724-1e14-40ed-a07f-4c877261ddf4.png)'
  prefs: []
  type: TYPE_IMG
- en: Understanding Django folders, files, and configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we create our first Django project and then a Django app, there are many
    new folders and files. First, use your favorite editor or IDE to check the Python
    code in the `apps.py` file within the `restful01/toys` folder (`restful01\toys`
    in Windows). The following lines show the code for this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The code declares the `ToysConfig` class as a subclass of the `django.apps.AppConfig`
    class that represents a Django application and its configuration. The `ToysConfig`
    class just defines the `name` class attribute and sets its value to `'toys'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have to add `toys.apps.ToysConfig` as one of the installed apps in
    the `restful01/settings.py` file that configures settings for the `restful01`
    Django project. I built the previous string by concatenating many values as follows:
    app name + `.apps.` + class name, which is, `toys` + `.apps.` + `ToysConfig`.
    In addition, we have to add the `rest_framework` app to make it possible for us
    to use Django REST framework.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `restful01/settings.py` file is a Python module with module-level variables
    that define the configuration of Django for the `restful01` project. We will make
    some changes to this Django settings file. Open the `restful01/settings.py` file
    and locate the highlighted lines that specify the strings list that declares the
    installed apps. The following code shows the first lines for the `settings.py`
    file. Note that the file has more code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following two strings to the `INSTALLED_APPS` strings list and save
    the changes to the `restful01/settings.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`''rest_framework''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''toys.apps.ToysConfig''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following lines show the new code that declares the `INSTALLED_APPS` string
    list with the added lines highlighted and with comments to understand what each
    added string means. The code file for the sample is included in the `hillar_django_restful_01`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This way, we have added Django REST framework and the `toys` application to
    our initial Django project named `restful01`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will leave Django for a while and we will install many tools that we
    will use to interact with the RESTful Web Services that we will develop throughout
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the following different kinds of tools to compose and send HTTP
    requests and visualize the responses throughout our book:'
  prefs: []
  type: TYPE_NORMAL
- en: Command-line tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GUI tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use any other application that allows you to compose and send HTTP requests.
    There are many apps that run on tablets and smartphones that allow you to accomplish
    this task. However, we will focus our attention on the most useful tools when
    building RESTful Web Services with Django.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Curl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start installing command-line tools. One of the key advantages of command-line
    tools is that you can easily run again the HTTP requests again after we have built
    them for the first time, and we don't need to use the mouse or tap the screen
    to run requests. We can also easily build a script with batch requests and run
    them.
  prefs: []
  type: TYPE_NORMAL
- en: As happens with any command-line tool, it can take more time to perform the
    first requests compared with GUI tools, but it becomes easier once we have performed
    many requests and we can easily reuse the commands we have written in the past
    to compose new requests.
  prefs: []
  type: TYPE_NORMAL
- en: '**Curl**, also known as **cURL**, is a very popular open source command-line
    tool and library that allows us to easily transfer data. We can use the `curl`
    command-line tool to easily compose and send HTTP requests and check their responses.'
  prefs: []
  type: TYPE_NORMAL
- en: In Linux or macOS, you can open a Terminal and start using `curl` from the command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows, you have two options. You can work with `curl` in Command Prompt
    or you can decide to install curl as part of the Cygwin package installation option
    and execute it from the Cygwin terminal. You can read more about the Cygwin terminal
    and its installation procedure at: [http://cygwin.com/install.html](http://cygwin.com/install.html).
    Windows Powershell includes a `curl` alias that calls the `Invoke-WebRequest`
    command, and therefore, if you want to work with Windows Powershell with curl,
    it is necessary to remove the `curl` alias.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use the `curl` command within Command Prompt, you just need
    to download and unzip the latest version of the `curl` download page: [https://curl.haxx.se/download.html](https://curl.haxx.se/download.html).
    Make sure you download the version that includes SSL and SSH.'
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the available downloads for Windows. The Win64
    - Generic section includes the versions that we can run in Command Prompt or Windows
    Powershell.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Win64 x86_64.7zip` file provides the binary version for `curl` version
    7.55.1 with SSL and SSH support:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b75bdad-8f18-46d8-b055-8eddcb2b3945.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you unzip the `.7zip` or `.zip` file you have downloaded, you can include
    the folder in which `curl.exe` is included in your path. For example, if you unzip
    the `Win64 x86_64.7zip` file, you will find `curl.exe` in the `bin` folder. The
    following screenshot shows the results of executing `curl --version` on  Command
    Prompt in Windows 10\. The `--version` option makes curl display its version and
    all the libraries, protocols, and features it supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da309c94-a87d-40b1-a0fb-4a283c0ecce4.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing HTTPie
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will install HTTPie, a command-line HTTP client written in Python that
    makes it easy to send HTTP requests and uses a syntax that is easier than curl.
    By default, HTTPie displays colorized output and uses multiple lines to display
    the response details. In some cases, HTTPie makes it easier to understand the
    responses than the curl utility. However, one of the great disadvantages of HTTPie
    as a command-line utility is that it takes more time to load than curl, and therefore,
    if you want to code scripts with too many commands, you have to evaluate whether
    it makes sense to use HTTPie.
  prefs: []
  type: TYPE_NORMAL
- en: We just need to make sure we run the following command in the virtual environment
    we have just created and activated. This way, we will install HTTPie only for
    our virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in the terminal, Command Prompt, or Windows PowerShell
    to install the `httpie` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The last lines of the output will indicate that the `httpie` package has been
    successfully installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If you don't remember how to activate the virtual environment that we created
    for this example, read the *Activating the virtual environment *section in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will be able to use the `http` command to easily compose and send HTTP
    requests to our future RESTful Web Services build with Django. The following screenshot
    shows the results of executing `http` on Command Prompt in Windows 10\. HTTPie
    displays the valid options and indicates that a URL is required:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc8d1e4b-c580-42c4-8f5d-c2427b7a3be1.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing the Postman REST client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have installed two terminal-based or command-line tools to compose
    and send HTTP requests to our Django development server: cURL and HTTPie. Now,
    we will start installing **G****raphical User Interface** (**GUI**) tools.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Postman is a very popular API testing suite GUI tool that allows us to easily
    compose and send HTTP requests, among other features. Postman is available as
    a standalone app in Linux, macOS, and Windows. You can download the versions of
    the *Postman* app from the following URL: [https://www.getpostman.com](https://www.getpostman.com).'
  prefs: []
  type: TYPE_NORMAL
- en: You can download and install Postman for free to compose and send HTTP requests
    to the RESTful Web Services we will build throughout this book. You just need
    to sign up to Postman. We won't be using any of the paid features provided by
    either Postman Pro or Postman Enterprise in our examples. All the instructions
    work with Postman 5.2.1 or greater.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the HTTP GET request builder in Postman:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53e39c1f-b5ff-4bbf-a2e0-730fcfc612c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Stoplight
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stoplight is a very useful GUI tool that focuses on helping architects and developers
    to model complex APIs. If we need to consume our RESTful Web Service in many different
    programming languages, we will find Stoplight extremely helpful. Stoplight provides
    an HTTP request maker that allows us to compose and send requests and generate
    the necessary code to make them in different programming languages, such as JavaScript,
    Swift, C#, PHP, Node, and Go, among others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stoplight provides a web version and is also available as a standalone app
    in Linux, macOS, and Windows. You can download the versions of Stoplight from
    the following URL: [http://stoplight.io/](http://stoplight.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the HTTP GET request builder in Stoplight with
    the code generation at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca260d76-d5cb-4e56-a3ce-da8b5442d520.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing iCurlHTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also use apps that can compose and send HTTP requests from mobile devices
    to work with our RESTful Web Services. For example, we can work with the iCurlHTTP
    app on iOS devices such as iPad and iPhone: [https://itunes.apple.com/us/app/icurlhttp/id611943891](https://itunes.apple.com/us/app/icurlhttp/id611943891).
    On Android devices, we can work with the *HTTP Request* app: [https://play.google.com/store/apps/details?id=air.http.request&hl=en](https://play.google.com/store/apps/details?id=air.http.request&hl=en).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the UI for the iCurlHTTP app running on an iPad
    Pro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a662bfeb-ec5f-4569-b27b-c39761955882.png)'
  prefs: []
  type: TYPE_IMG
- en: At the time of writing, the mobile apps that allow you to compose and send HTTP
    requests do not provide all the features you can find in Postman or command-line
    utilities.
  prefs: []
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see whether you can answer the following questions correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we activate a virtual environment, all the packages we install with `pip`
    are available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For all the virtual environments available in the computer or device that is
    running Python
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Only for the activated virtual environment
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For all the virtual environments created by the current user
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'HTTPie is a:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Command-line HTTP server written in Python that makes it easy to create a RESTful
    Web Server
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Command-line utility that allows us to run queries against an SQLite database
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Command-line HTTP client written in Python that makes it easy to compose and
    send HTTP requests
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following commands creates a new app named `books` in Django?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`django startapp books`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`python django.py startapp books`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`python manage.py startapp books`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In Django, a subclass of which of the following classes represents a Django
    application and its configuration?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`django.apps.AppConfig`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`django.application.configuration`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`django.config.App`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following strings must be added to the `INSTALLED_APPS` string
    list in the `settings.py` file to enable Django REST framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`''rest_framework''`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`''django_rest_framework''`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`''Django_REST_framework''`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The rights answers are included in the [Appendix](dj-rst-websvc_ch19.html),
    *Solutions*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the advantages of working with lightweight virtual
    environments in Python and we set up a virtual environment with Django and Django
    REST framework. We created an app with Django, we took a first look at the Django
    folders, files, and configurations, and we made the necessary changes to activate
    Django REST framework.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we introduced and installed command-line and GUI tools that we will use
    to interact with the RESTful Web Services that we will design, code, test, and
    run in the forthcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our environment ready to start working with Django REST framework,
    we will define the requirements for our first RESTful Web Service and we will
    work with models, migrations, serialization, and deserialization, which are the
    topics that we are going to discuss in the next chapter.
  prefs: []
  type: TYPE_NORMAL
