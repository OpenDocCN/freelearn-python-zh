["```py\npython setup.py install\n\n```", "```py\n>>>import pyglet\n\n```", "```py\nwin = pyglet.window.Window()\n\n```", "```py\npyglet.gl.glClearColor(1, 1, 1, 1)\n\n```", "```py\npyglet.gl.glClearColor(0.5, 0.5, 0.5, 1)\n\n```", "```py\nimg = pyglet.image.load('my_image.bmp')\nx, y, z = 0, 0, 0\nimg.blit(x, y, z)\n\n```", "```py\nanimation = pyglet.image.Animation(anim_frames)\n\n```", "```py\npyglet.clock.schedule_interval(moveObjects, 1.0/10)\n\n```", "```py\n1 import pyglet\n2\n3 car_img= pyglet.image.load('images/car.png')\n4 carSprite = pyglet.sprite.Sprite(car_img)\n5 window = pyglet.window.Window()\n6 pyglet.gl.glClearColor(1, 1, 1, 1)\n7\n8 @window.event\n9 def on_draw():\n10 window.clear()\n11 carSprite.draw()\n12\n13 pyglet.app.run()\n\n```", "```py\n1 background_sound = pyglet.media.load(\n2 'C:/AudioFiles/background.mp3',\n3 streaming=False)\n4 background_sound.play()\n\n```", "```py\n    1 import pyglet\n    2\n    3 animation = pyglet.image.load_animation(\n    4 \"images/SimpleAnimation.gif\")\n    5\n    6 # Create a sprite object as an instance of this animation.\n    7 animSprite = pyglet.sprite.Sprite(animation)\n    8\n    9 # The main pyglet window with OpenGL context\n    10 w = animSprite.width\n    11 h = animSprite.height\n    12 win = pyglet.window.Window(width=w, height=h)\n    13\n    14 # r,g b, color values and transparency for the background\n    15 r, g, b, alpha = 0.5, 0.5, 0.8, 0.5\n    16\n    17 # OpenGL method for setting the background.\n    18 pyglet.gl.glClearColor(r, g, b, alpha)\n    19\n    20 # Draw the sprite in the API method on_draw of\n    21 # pyglet.Window\n    22 @win.event\n    23 def on_draw():\n    24 win.clear()\n    25 animSprite.draw()\n    26\n    27 pyglet.app.run()\n\n    ```", "```py\n    $python SimpleAnimation.py\n\n    ```", "```py\n    1 import pyglet\n    2\n    3 image_frames = ('images/clock1.png',\n    4 'images/clock2.png',\n    5 'images/clock3.png')\n    6\n    7 # Create the list of pyglet images\n    8 images = map(lambda img: pyglet.image.load(img),\n    9 image_frames)\n    10\n    11 # Each of the image frames will be displayed for 0.33\n    12 # seconds\n    13 # 0.33 seconds chosen so that the 'pendulam in the clock\n    14 # animation completes one oscillation in ~ 1 second !\n    15\n    16 animation = pyglet.image.Animation.from_image_sequence(\n    17 images, 0.33)\n    18 # Create a sprite instance.\n    19 animSprite = pyglet.sprite.Sprite(animation)\n    20\n    21 # The main pyglet window with OpenGL context\n    22 w = animSprite.width\n    23 h = animSprite.height\n    24 win = pyglet.window.Window(width=w, height=h)\n    25\n    26 # Set window background color to white.\n    27 pyglet.gl.glClearColor(1, 1, 1, 1)\n    28\n    29 # The @win.event is a decorator that helps modify the API\n    30 # methods such as\n    31 # on_draw called when draw event occurs.\n    32 @win.event\n    33 def on_draw():\n    34 win.clear()\n    35 animSprite.draw()\n    36\n    37 pyglet.app.run()\n\n    ```", "```py\n    $python ImageSequenceAnimation.py\n\n    ```", "```py\n    1 import pyglet\n    2 import time\n    3\n    4 class SingleImageAnimation(pyglet.window.Window):\n    5 def __init__(self, width=600, height=600):\n    6 pass\n    7 def createDrawableObjects(self):\n    8 pass\n    9 def adjustWindowSize(self):\n    10 pass\n    11 def moveObjects(self, t):\n    12 pass\n    13 def on_draw(self):\n    14 pass\n    15 win = SingleImageAnimation()\n    16 # Set window background color to gray.\n    17 pyglet.gl.glClearColor(0.5, 0.5, 0.5, 1)\n    18\n    19 pyglet.clock.schedule_interval(win.moveObjects, 1.0/20)\n    20\n    21 pyglet.app.run()\n\n    ```", "```py\n    1 def __init__(self, width=None, height=None):\n    2 pyglet.window.Window.__init__(self,\n    3 width=width,\n    4 height=height,\n    5 resizable = True)\n    6 self.drawableObjects = []\n    7 self.rising = False\n    8 self.ballSprite = None\n    9 self.createDrawableObjects()\n    10 self.adjustWindowSize()\n\n    ```", "```py\n    1 def createDrawableObjects(self):\n    2 \"\"\"\n    3 Create sprite objects that will be drawn within the\n    4 window.\n    5 \"\"\"\n    6 ball_img= pyglet.image.load('images/ball.png')\n    7 ball_img.anchor_x = ball_img.width / 2\n    8 ball_img.anchor_y = ball_img.height / 2\n    9\n    10 self.ballSprite = pyglet.sprite.Sprite(ball_img)\n    11 self.ballSprite.position = (\n    12 self.ballSprite.width + 100,\n    13 self.ballSprite.height*2 - 50)\n    14 self.drawableObjects.append(self.ballSprite)\n\n    ```", "```py\n    def on_draw(self):\n    self.clear()\n    for d in self.drawableObjects:\n    d.draw()\n\n    ```", "```py\n    def adjustWindowSize(self):\n    w = self.ballSprite.width * 3\n    h = self.ballSprite.height * 3\n    self.width = w\n    self.height = h\n\n    ```", "```py\n    1 def moveObjects(self, t):\n    2 if self.ballSprite.y - 100 < 0:\n    3 self.rising = True\n    4 elif self.ballSprite.y > self.ballSprite.height*2 - 50:\n    5 self.rising = False\n    6\n    7 if not self.rising:\n    8 self.ballSprite.y -= 5\n    9 self.ballSprite.rotation -= 6\n    10 else:\n    11 self.ballSprite.y += 5\n    12 self.ballSprite.rotation += 5\n\n    ```", "```py\n    pyglet.clock.schedule_interval(win.moveObjects, 1.0/20)\n\n    ```", "```py\n    $python SingleImageAnimation.py\n\n    ```", "```py\n    self.paused = False\n    self.pinHorizontal = False\n\n    ```", "```py\n    1 def createDrawableObjects(self):\n    2 ball_img= pyglet.image.load('images/ball.png')\n    3 ball_img.anchor_x = ball_img.width / 2\n    4 ball_img.anchor_y = ball_img.height / 2\n    5\n    6 pin_img = pyglet.image.load('images/pin.png')\n    7 pin_img.anchor_x = pin_img.width / 2\n    8 pin_img.anchor_y = pin_img.height / 2\n    9\n    10 self.ballSprite = pyglet.sprite.Sprite(ball_img)\n    11 self.ballSprite.position = (0 + 100,\n    12 self.ballSprite.height)\n    13\n    14 self.pinSprite = pyglet.sprite.Sprite(pin_img)\n    15 self.pinSprite.position = (\n    16 (self.ballSprite.width*2 + 100,\n    17 self.ballSprite.height) )\n    18\n    19 # Add these sprites to the list of drawables\n    20 self.drawableObjects.append(self.ballSprite)\n    21 self.drawableObjects.append(self.pinSprite)\n\n    ```", "```py\n    1 def moveObjects(self, t):\n    2 if self.pinHorizontal:\n    3 self.ballSprite.x = 100\n    4 self.pinSprite.x -= 100\n    5\n    6 if self.ballSprite.x < self.ballSprite.width*2:\n    7 if self.ballSprite.x == 100:\n    8 time.sleep(1)\n    9 self.pinSprite.rotation = 0\n    10 self.pinHorizontal = False\n    11\n    12 self.ballSprite.x += 5\n    13 self.ballSprite.rotation += 5\n    14\n    15 if self.ballSprite.x >= self.ballSprite.width*2:\n    16 self.pinSprite.rotation = 90\n    17 self.pinSprite.x += 100\n    18 self.pinHorizontal = True\n\n    ```", "```py\n    1 def on_key_press(self, key, modifiers):\n    2 if key == pyglet.window.key.P and not self.paused:\n    3 pyglet.clock.unschedule(self.moveObjects)\n    4 self.paused = True\n    5 elif key == pyglet.window.key.R and self.paused:\n    6 pyglet.clock.schedule_interval(\n    7 self.moveObjects, 1.0/20)\n    8 self.paused = False\n\n    ```", "```py\n    $python BowlingAnimation.py\n\n    ```", "```py\n    1 def __init__(self, width=None, height=None):\n    2 pyglet.window.Window.__init__(self,\n    3 width=width,\n    4 height=height)\n    5 self.drawableObjects = []\n    6 self.createDrawableObjects()\n\n    ```", "```py\n    1 def createDrawableObjects(self):\n    2 num_rows = 4\n    3 num_columns = 1\n    4 droplet = 'images/droplet.png'\n    5 animation = self.setup_animation(droplet,\n    6 num_rows,\n    7 num_columns)\n    8\n    9 self.dropletSprite = pyglet.sprite.Sprite(animation)\n    10 self.dropletSprite.position = (0,0)\n    11\n    12 # Add these sprites to the list of drawables\n    13 self.drawableObjects.append(self.dropletSprite)\n\n    ```", "```py\n    1 def setup_animation(self, img, num_rows, num_columns):\n    2 base_image = pyglet.image.load(img)\n    3 animation_grid = pyglet.image.ImageGrid(base_image,\n    4 num_rows,\n    5 num_columns)\n    6 image_frames = []\n    7\n    8 for i in range(num_rows*num_columns, 0, -1):\n    9 frame = animation_grid[i-1]\n    10 animation_frame = (\n    11 pyglet.image.AnimationFrame(frame,\n    12 0.2))\n    13 image_frames.append(animation_frame)\n    14\n    15 animation = pyglet.image.Animation(image_frames)\n    16 return animation\n\n    ```", "```py\n    $python RainDropsAnimation.py\n\n    ```", "```py\n    1 def __init__(self, width=None, height=None):\n    2 pyglet.window.Window.__init__(self,\n    3 width=width,\n    4 height=height,\n    5 resizable=True)\n    6 self.drawableObjects = []\n    7 self.paused = False\n    8\n    9\n    10 self.createDrawableObjects()\n    11 self.adjustWindowSize()\n    12 # Make sure to replace the following media path to\n    13 # with an appropriate path on your computer.\n    14 self.horn_sound = (\n    15 pyglet.media.load('C:/AudioFiles/horn.wav',\n    16 streaming=False) )\n\n    ```", "```py\n    1 def createDrawableObjects(self):\n    2\n    3 num_rows = 4\n    4 num_columns = 1\n    5 droplet = 'images/droplet.png'\n    6 animation = self.setup_animation(droplet,\n    7 num_rows,\n    8 num_columns)\n    9\n    10 self.dropletSprite = pyglet.sprite.Sprite(animation)\n    11 self.dropletSprite.position = (0,200)\n    12\n    13 cloud = pyglet.image.load('images/cloud.png')\n    14 self.cloudSprite = pyglet.sprite.Sprite(cloud)\n    15 self.cloudSprite.y = 100\n    16\n    17 lightening = pyglet.image.load('images/lightening.png')\n    18 self.lSprite = pyglet.sprite.Sprite(lightening)\n    19 self.lSprite.y = 200\n    20\n    21 car = pyglet.image.load('images/car.png')\n    22 self.carSprite = pyglet.sprite.Sprite(car, -500, 0)\n    23\n    24 # Add these sprites to the list of drawables\n    25 self.drawableObjects.append(self.cloudSprite)\n    26 self.drawableObjects.append(self.lSprite)\n    27 self.drawableObjects.append(self.dropletSprite)\n    28 self.drawableObjects.append(self.carSprite)\n\n    ```", "```py\n    # Schedule the method RainyDayAnimation.moveObjects to be\n    # called every 0.05 seconds.\n    pyglet.clock.schedule_interval(win.moveObjects, 1.0/20)\n    # Show the lightening every 1 second\n    pyglet.clock.schedule_interval(win.show_lightening, 1.0)\n\n    ```", "```py\n    1 def show_lightening(self, t):\n    2 if self.lSprite.visible:\n    3 self.lSprite.visible = False\n    4 else:\n    5 if(self.lSprite.x == 100):\n    6 self.lSprite.x += 200\n    7 else:\n    8 self.lSprite.x = 100\n    9\n    10 self.lSprite.visible = True\n\n    ```", "```py\n    1 def moveObjects(self, t):\n    2 if self.carSprite.x <= self.cloudSprite.width:\n    3 self.carSprite.x += 10\n    4 else:\n    5 self.carSprite.x = -500\n    6 self.horn_sound.play()\n\n    ```", "```py\n    $python RainyDayAnimation.py\n\n    ```"]