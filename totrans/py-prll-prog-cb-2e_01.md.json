["```py\n>>> help(0)\nHelp on int object:\n\nclass int(object)\n | int(x=0) -> integer\n | int(x, base=10) -> integer\n | \n | Convert a number or string to an integer, or return 0 if no \n | arguments are given. If x is a number, return x.__int__(). For \n | floating point numbers, this truncates towards zero.\n | \n | If x is not a number or if base is given, then x must be a string,\n | bytes, or bytearray instance representing an integer literal in the\n | given base. The literal can be preceded by '+' or '-' and be\n | surrounded by whitespace. The base defaults to 10\\. Valid bases are 0 \n | and 2-36.\n | Base 0 means to interpret the base from the string as an integer \n | literal.\n>>> int('0b100', base=0)\n```", "```py\n | Methods defined here:\n | \n | __abs__(self, /)\n | abs(self)\n | \n | __add__(self, value, /)\n | Return self+value.\n | \n | __and__(self, value, /)\n | Return self&value.\n | \n | __bool__(self, /)\n | self != 0\n | \n | __ceil__(...)\n | Ceiling of an Integral returns itself.\n```", "```py\n>>> dir(float)\n['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']\n```", "```py\n>>> abs.__doc__\n'Return the absolute value of the argument.'\n```", "```py\nprint(\"first print\")\nif condition:\n    print(“second print”)\nprint(“third print”)\n```", "```py\n# single line comment\n```", "```py\n\"\"\" first line of a multi-line comment\nsecond line of a multi-line comment.\"\"\"\n```", "```py\n>>> variable = 3\n>>> variable += 2\n>>> variable\n5\n>>> variable -= 1\n>>> variable\n4\n\n>>> _string_ = \"Hello\"\n>>> _string_ += \" Parallel Programming CookBook Second Edition!\"\n>>> print (_string_) \nHello Parallel Programming CookBook Second Edition!\n```", "```py\n#let's play with lists\nlist_1 = [1, [\"item_1\", \"item_1\"], (\"a\", \"tuple\")]\nlist_2 = [\"item_1\", -10000, 5.01]\n\n>>> list_1\n[1, ['item_1', 'item_1'], ('a', 'tuple')]\n\n>>> list_2\n['item_1', -10000, 5.01]\n\n>>> list_1[2]\n('a', 'tuple')\n\n>>>list_1[1][0]\n['item_1', 'item_1']\n\n>>> list_2[0]\nitem_1\n\n>>> list_2[-1]\n5.01\n\n#build a dictionary \ndictionary = {\"Key 1\": \"item A\", \"Key 2\": \"item B\", 3: 1000}\n>>> dictionary \n{'Key 1': 'item A', 'Key 2': 'item B', 3: 1000} \n\n>>> dictionary[\"Key 1\"] \nitem A\n\n>>> dictionary[\"Key 2\"]\n-1\n\n>>> dictionary[3]\n1000\n```", "```py\nlist_3 = [\"Hello\", \"Ruvika\", \"how\" , \"are\" , \"you?\"] \n>>> list_3[0:6] \n['Hello', 'Ruvika', 'how', 'are', 'you?'] \n\n>>> list_3[0:1]\n['Hello']\n\n>>> list_3[2:6]\n['how', 'are', 'you?']\n```", "```py\n>>> example = \"she loves ' giancarlo\"\n>>> example\n\"she loves ' giancarlo\"\n```", "```py\n>>> _string_='''I am a \nmulti-line \nstring'''\n>>> _string_\n'I am a \\nmulti-line\\nstring'\n```", "```py\n>>> ustring = u\"I am unicode string\"\n>>> ustring\n'I am unicode string'\n```", "```py\n>>> print (\"My name is %s !\" % ('Mr. Wolf'))\nMy name is Mr. Wolf!\n```", "```py\nnum = 1\n\nif num > 0:\n    print(\"Positive number\")\nelif num == 0:\n    print(\"Zero\")\nelse:\n    print(\"Negative number\")\n```", "```py\nnumbers = [6, 6, 3, 8, -3, 2, 5, 44, 12]\nsum = 0\nfor val in numbers:\n    sum = sum+val\nprint(\"The sum is\", sum)\n```", "```py\nn = 10\n# initialize sum and counter\nsum = 0\ni = 1\nwhile i <= n:\n    sum = sum + i\n    i = i+1 # update counter\n\n# print the sum\nprint(\"The sum is\", sum)\n```", "```py\nPositive number\nThe sum is 83\nThe sum is 55\n>>>\n```", "```py\ndef my_function():\n    print(\"this is a function\")\n```", "```py\n>>> my_function()\nthis is a function\n```", "```py\ndef my_function(x):\n    print(x * 1234)\n\n>>> my_function(7)\n8638\n```", "```py\ndef my_function(x,y):\n    print(x*5+ 2*y)\n\n>>> my_function(7,9)\n53\n```", "```py\ndef my_function(x,y=10):\n    print(x*5+ 2*y)\n\n>>> my_function(1)\n25\n\n>>> my_function(1,100)\n205\n```", "```py\ndef my_function(cities):\n    for x in cities:\n        print(x)\n\n>>> lcities=[\"Napoli\",\"Mumbai\",\"Amsterdam\"]\n>>> my_function(lcities)\nNapoli\nMumbai\nAmsterdam\n```", "```py\ndef my_function(x,y):\n    return x*y >>> my_function(6,29)\n174 \n```", "```py\n# lambda definition equivalent to def f(x): return x + 1\n\nfunctionvar = lambda x: x * 5\n>>> print(functionvar(10))\n50\n```", "```py\nclass FirstClass:\n    common_value = 10\n    def __init__ (self):\n        self.my_value = 100\n    def my_func (self, arg1, arg2):\n        return self.my_value*arg1*arg2\n\n# Build a first instance\n>>> first_instance = FirstClass()\n>>> first_instance.my_func(1, 2)\n200\n\n# Build a second instance of FirstClass\n>>> second_instance = FirstClass()\n\n#check the common values for both the instances\n>>> first_instance.common_value\n10\n\n>>> second_instance.common_value\n10\n\n#Change common_value for the first_instance\n>>> first_instance.common_value = 1500\n>>> first_instance.common_value\n1500\n\n#As you can note the common_value for second_instance is not changed\n>>> second_instance.common_value\n10\n\n# SecondClass inherits from FirstClass. \n# multiple inheritance is declared as follows:\n# class SecondClass (FirstClass1, FirstClass2, FirstClassN)\n\nclass SecondClass (FirstClass):\n    # The \"self\" argument is passed automatically\n    # and refers to the class's instance\n    def __init__ (self, arg1):\n        self.my_value = 764\n        print (arg1)\n\n>>> first_instance = SecondClass (\"hello PACKT!!!!\")\nhello PACKT!!!!\n\n>>> first_instance.my_func (1, 2)\n1528\n```", "```py\ndef one_function():\n     try:\n         # Division by zero causes one exception\n         10/0\n     except ZeroDivisionError:\n         print(\"Oops, error.\")\n     else:\n         # There was no exception, we can continue.\n         pass\n     finally:\n         # This code is executed when the block\n         # try..except is already executed and all exceptions\n         # have been managed, even if a new one occurs\n         # exception directly in the block.\n         print(\"We finished.\")\n\n>>> one_function()\nOops, error.\nWe finished\n```", "```py\nimport random\nrandomint = random.randint(1, 101)\n\n>>> print(randomint)\n65\n\nfrom random import randint\nrandomint = random.randint(1, 102)\n\n>>> print(randomint)\n46\n```", "```py\n>>> f = open ('test.txt', 'w') # open the file for writing\n>>> f.write ('first line of file \\ n') # write a line in file\n>>> f.write ('second line of file \\ n') # write another line in file\n>>> f.close () # we close the file\n>>> f = open ('test.txt') # reopen the file for reading\n>>> content = f.read () # read all the contents of the file\n>>> print (content)\nfirst line of the file\nsecond line of the file\n>>> f.close () # close the file\n```", "```py\n[expression for item in list]\n```", "```py\n#list comprehensions using strings\n>>> list_comprehension_1 = [ x for x in 'python parallel programming cookbook!' ]\n>>> print( list_comprehension_1)\n\n['p', 'y', 't', 'h', 'o', 'n', ' ', 'p', 'a', 'r', 'a', 'l', 'l', 'e', 'l', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g', ' ', 'c', 'o', 'o', 'k', 'b', 'o', 'o', 'k', '!']\n\n#list comprehensions using numbers\n>>> l1 = [1,2,3,4,5,6,7,8,9,10]\n>>> list_comprehension_2 = [ x*10 for x in l1 ]\n>>> print( list_comprehension_2)\n\n[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n```", "```py\n> python my_pythonscript.py \n```", "```py\nC:\\>pip\n```", "```py\n C:\\>pip install -U pip\n```", "```py\nC:\\>pip install PACKAGE \n```", "```py\nimport random\n\ndef do_something(count, out_list):\n  for i in range(count):\n    out_list.append(random.random())\n```", "```py\nfrom do_something import *\nimport time \n```", "```py\nif __name__ == \"__main__\":\n    start_time = time.time()\n    size = 10000000 \n    n_exec = 10\n    for i in range(0, exec):\n        out_list = list()\n        do_something(size, out_list)\n\n    print (\"List processing complete.\")\n    end_time = time.time()\n    print(\"serial time=\", end_time - start_time)   \n```", "```py\nfrom do_something import *\nimport time\nimport threading\n```", "```py\nif __name__ == \"__main__\":\n    start_time = time.time()\n    size = 10000000\n    threads = 10 \n    jobs = []\n    for i in range(0, threads):\n```", "```py\nout_list = list()\nthread = threading.Thread(target=list_append(size,out_list))\njobs.append(thread)\n```", "```py\n    for j in jobs:\n        j.start()\n    for j in jobs:\n        j.join()\n\n    print (\"List processing complete.\")\n    end_time = time.time()\n    print(\"multithreading time=\", end_time - start_time)\n```", "```py\nfrom do_something import *\nimport time\nimport multiprocessing\n```", "```py\nif __name__ == \"__main__\":\n    start_time = time.time()\n    size = 10000000 \n    procs = 10 \n    jobs = []\n    for i in range(0, procs):\n        out_list = list()\n```", "```py\n        process = multiprocessing.Process\\\n                  (target=do_something,args=(size,out_list))\n        jobs.append(process)\n```", "```py\n    for j in jobs:\n        j.start()\n\n    for j in jobs:\n        j.join()\n\n    print (\"List processing complete.\")\n    end_time = time.time()\n    print(\"multiprocesses time=\", end_time - start_time)\n```", "```py\n> python serial_test.py\n```", "```py\nList processing complete.\nserial time= 25.428767204284668\n```", "```py\n> python multithreading_test.py\n```", "```py\nList processing complete.\nmultithreading time= 26.168917179107666\n```", "```py\n> python multiprocessing_test.py\n```", "```py\nList processing complete.\nmultiprocesses time= 18.929869890213013\n```"]