["```py\nimport wx\n\nclass MyApp(wx.App):\n    def OnInit(self):\n        wx.MessageBox(\"Hello wxPython\", \"wxApp\") \n        return True\n\nif __name__ == \"__main__\":\n    app = MyApp(False)\n    app.MainLoop()\n\n```", "```py\nwWx.App((redirect=True, filename=None, \n       useBestVisual=False,clearSigInt=True))\n\n```", "```py\nimport wx\n\nclass MyApp(wx.App):\n    def OnInit(self):\n        self.frame = MyFrame(None, title=\"The Main Frame\")\n        self.SetTopWindow(self.frame)\n        self.frame.Show()\n\n        return True\n\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, id=wx.ID_ANY, title=\"\", \n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n                 style=wx.DEFAULT_FRAME_STYLE,\n                 name=\"MyFrame\"):\n        super(MyFrame, self).__init__(parent, id, title,\n                                      pos, size, style, name)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n\nif __name__ == \"__main__\":\n    app = MyApp(False)\n    app.MainLoop()\n\n```", "```py\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, id=wx.ID_ANY, title=\"\", \n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n                 style=wx.DEFAULT_FRAME_STYLE,\n                 name=\"MyFrame\"):\n        super(MyFrame, self).__init__(parent, id, title,\n                                      pos, size, style, name)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n        self.panel.SetBackgroundColour(wx.BLACK)\n        self.button = wx.Button(self.panel,\n                                label=\"Push Me\",\n                                pos=(50, 50))\n\n```", "```py\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, id=wx.ID_ANY, title=\"\", \n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n                 style=wx.DEFAULT_FRAME_STYLE,\n                 name=\"MyFrame\"):\n        super(MyFrame, self).__init__(parent, id, title,\n                                      pos, size, style, name)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n        self.panel.SetBackgroundColour(wx.BLACK)\n        button = wx.Button(self.panel,\n                           label=\"Get Children\",\n                           pos=(50, 50))\n        self.btnId = button.GetId()\n\n        # Event Handlers\n        self.Bind(wx.EVT_BUTTON, self.OnButton, button)\n\n    def OnButton(self, event):\n        \"\"\"Called when the Button is clicked\"\"\"\n        print \"\\nFrame GetChildren:\"\n        for child in self.GetChildren():\n            print \"%s\" % repr(child)\n\n        print \"\\nPanel FindWindowById:\"\n        button = self.panel.FindWindowById(self.btnId)\n        print \"%s\" % repr(button)\n        # Change the Button's label\n        button.SetLabel(\"Changed Label\")\n\n        print \"\\nButton GetParent:\"\n        panel = button.GetParent()\n        print \"%s\" % repr(panel)\n\n        print \"\\nGet the Application Object:\"\n        app = wx.GetApp()\n        print \"%s\" % repr(app)\n\n        print \"\\nGet the Frame from the App:\"\n        frame = app.GetTopWindow()\n        print \"%s\" % repr(frame)\n\n```", "```py\nimport os\nimport wx\n\nclass MyApp(wx.App):\n    def OnInit(self):\n        self.frame = MyFrame(None, title=\"Bitmaps\")\n        self.SetTopWindow(self.frame)\n        self.frame.Show()\n\n        return True\n\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, id=wx.ID_ANY, title=\"\", \n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n                 style=wx.DEFAULT_FRAME_STYLE,  \n                 name=\"MyFrame\"):\n        super(MyFrame, self).__init__(parent, id, title,\n                                      pos, size, style, name)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n\n        img_path = os.path.abspath(\"./face-grin.png\")\n        bitmap = wx.Bitmap(img_path, type=wx.BITMAP_TYPE_PNG)\n        self.bitmap = wx.StaticBitmap(self.panel, \n                                      bitmap=bitmap)\n\nif __name__ == \"__main__\":\n    app = MyApp(False)\n    app.MainLoop()\n\n```", "```py\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, id=wx.ID_ANY, title=\"\", \n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n                 style=wx.DEFAULT_FRAME_STYLE,\n                 name=\"MyFrame\"):\n        super(MyFrame, self).__init__(parent, id, title, pos,\n                                      size, style, name)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n\n        # Setup\n        path = os.path.abspath(\"./face-monkey.png\")\n        icon = wx.Icon(path, wx.BITMAP_TYPE_PNG)\n        self.SetIcon(icon)\n\n```", "```py\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, id=wx.ID_ANY, title=\"\", \n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n                 style=wx.DEFAULT_FRAME_STYLE,\n                 name=\"MyFrame\"):\n        super(MyFrame, self).__init__(parent, id, title, \n                                      pos, size, style, name)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n\n        # Setup\n        ok_btn = wx.Button(self.panel, wx.ID_OK)\n        cancel_btn = wx.Button(self.panel, wx.ID_CANCEL,\n                               pos=(100, 0))\n\n        menu_bar = wx.MenuBar()\n        edit_menu = wx.Menu()\n        edit_menu.Append(wx.NewId(), \"Test\")\n        edit_menu.Append(wx.ID_PREFERENCES)\n        menu_bar.Append(edit_menu, \"Edit\")\n        self.SetMenuBar(menu_bar)\n\n```", "```py\ndef SetClipboardText(text):\n    \"\"\"Put text in the clipboard\n    @param text: string\n    \"\"\"\n    data_o = wx.TextDataObject()\n    data_o.SetText(text)\n    if wx.TheClipboard.IsOpened() or wx.TheClipboard.Open():\n        wx.TheClipboard.SetData(data_o)\n        wx.TheClipboard.Close()\n\ndef GetClipboardText():\n    \"\"\"Get text from the clipboard\n    @return: string\n    \"\"\"\n    text_obj = wx.TextDataObject()\n    rtext = \"\"\n    if wx.TheClipboard.IsOpened() or wx.TheClipboard.Open():\n        if wx.TheClipboard.GetData(text_obj):\n            rtext = text_obj.GetText()\n        wx.TheClipboard.Close()\n    return rtext\n\n```", "```py\nclass FileAndTextDropTarget(wx.PyDropTarget):\n    \"\"\"Drop target capable of accepting dropped \n    files and text\n    \"\"\"\n    def __init__(self, file_callback, text_callback):\n        assert callable(file_callback)\n        assert callable(text_callback)\n        super(FileAndTextDropTarget, self).__init__()wx.PyDropTarget.__init__(self)\n\n        # Attributes\n        self.fcallback = file_callback # Drop File Callback\n        self.tcallback = text_callback # Drop Text Callback\n        self._data = None\n        self.txtdo = None\n        self.filedo = None\n\n        # Setup\n        self.InitObjects()\n\n    def InitObjects(self):\n        \"\"\"Initializes the text and file data objects\"\"\"\n        self._data = wx.DataObjectComposite()\n        self.txtdo = wx.TextDataObject()\n        self.filedo = wx.FileDataObject()\n        self._data.Add(self.txtdo, False)\n        self._data.Add(self.filedo, True)\n        self.SetDataObject(self._data)\n\n    def OnData(self, x_cord, y_cord, drag_result):\n        \"\"\"Called by the framework when data is dropped \n        on the target\n        \"\"\"\n        if self.GetData():\n            data_format = self._data.GetReceivedFormat()\n            if data_format.GetType() == wx.DF_FILENAME:\n                self.fcallback(self.filedo.GetFilenames())\n            else:\n                self.tcallback(self.txtdo.GetText())\n\n        return drag_result\n\n```", "```py\nclass DropTargetFrame(wx.Frame):\n    def __init__(self, parent, id=wx.ID_ANY, title=\"\", \n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n                 style=wx.DEFAULT_FRAME_STYLE,\n                 name=\"DropTargetFrame\"):\n        super(DropTargetFrame, self).__init__(parent, id,\n                                              title, pos,\n                                              size, style,\n                                              name)\n\n        # Attributes\n        choices = [\"Drag and Drop Text or Files here\",]\n        self.list = wx.ListBox(self, \n                               choices=choices)\n        self.dt = FileAndTextDropTarget(self.OnFileDrop,\n                                        self.OnTextDrop)\n        self.list.SetDropTarget(self.dt)\n\n        # Setup\n        self.CreateStatusBar()\n\n    def OnFileDrop(self, files):\n        self.PushStatusText(\"Files Dropped\")\n        for f in files:\n            self.list.Append(f)\n\n    def OnTextDrop(self, text):\n        self.PushStatusText(\"Text Dropped\")\n        self.list.Append(text)\n\n```", "```py\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        pre = wx.PreFrame()\n        pre.SetExtraStyle(wx.FRAME_EX_CONTEXTHELP)\n        pre.Create(parent, *args, **kwargs)\n        self.PostCreate(pre)\n\n```", "```py\nimport wx\n\nclass MyPanel(wx.Panel):\n    def __init__(self, parent):\n        super(MyPanel, self).__init__(parent)\n\n        sizer = wx.BoxSizer()\n        self.SetSizer(sizer)\n\n    def AddChild(self, child):\n        sizer = self.GetSizer()\n        sizer.Add(child, 0, wx.ALIGN_LEFT|wx.ALL, 8)\n        return super(MyPanel, self).AddChild(child)\n\n```", "```py\nclass MyVirtualPanel(wx.PyPanel):\n    \"\"\"Class that automatically adds children\n    controls to sizer layout.\n    \"\"\"\n    def __init__(self, parent):\n        super(MyVirtualPanel, self).__init__(parent)\n\n        sizer = wx.BoxSizer()\n        self.SetSizer(sizer)\n\n    def AddChild(self, child):\n        sizer = self.GetSizer()\n        sizer.Add(child, 0, wx.ALIGN_LEFT|wx.ALL, 8)\n        return super(MyVirtualPanel, self).AddChild(child)\n\n```", "```py\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        super(MyFrame, self).__init__(parent,\n                                      *args, **kwargs)\n\n        # Attributes\n        self.mypanel = MyPanel(self)\n        self.mypanel.SetBackgroundColour(wx.BLACK)\n        self.virtpanel = MyVirtualPanel(self)\n        self.virtpanel.SetBackgroundColour(wx.WHITE)\n\n        # Setup\n        self.__DoLayout()\n\n    def __DoLayout(self):\n        \"\"\"Layout the window\"\"\"\n        # Layout the controls using a sizer\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.mypanel, 1, wx.EXPAND)\n        sizer.Add(self.virtpanel, 1, wx.EXPAND)\n        self.SetSizer(sizer)\n\n        # Create 3 children for the top panel\n        for x in range(3):\n            wx.Button(self.mypanel,\n                      label=\"MyPanel %d\" % x)\n        # Create 3 children for the bottom panel\n        for x in range(3):\n            wx.Button(self.virtpanel,\n                      label=\"VirtPanel %d\" % x)\n\n        self.SetInitialSize(size=(300, 200))\n\nclass MyApp(wx.App):\n    def OnInit(self):\n        self.frame = MyFrame(None,\n                             title=\"Virtualized Methods\")\n        self.SetTopWindow(self.frame)\n        self.frame.Show()\n\n        return True\n\nif __name__ == \"__main__\":\n    app = MyApp(False)\n    app.MainLoop()\n\n```", "```py\nimport wx\nfor method in dir(wx.PyPanel):\n    if method.startswith('base_'):\n        print method\n\n```"]