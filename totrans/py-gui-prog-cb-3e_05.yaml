- en: Matplotlib Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create beautiful charts that visually represent data.
    Depending on the format of the data source, we can plot one or more columns of
    data in the same chart.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the Python `Matplotlib` module to create our charts.
  prefs: []
  type: TYPE_NORMAL
- en: In a company I worked for, we had an existing program that collected data for
    analysis. It was a manual process to load the data into Excel and then generate
    charts within Excel.
  prefs: []
  type: TYPE_NORMAL
- en: I automated the entire process using Python and `Matplotlib`. With only one
    click of the mouse, the data got backed up to a network drive and, with another
    click, the charts got automatically created.
  prefs: []
  type: TYPE_NORMAL
- en: In order to create these graphical charts, we need to download additional Python
    modules, and there are several ways to install them.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will explain how to download the `Matplotlib` Python module along
    with all the other requisite Python modules and the ways in which to do this.
    After we install the required modules, we will then create our own Pythonic charts.
  prefs: []
  type: TYPE_NORMAL
- en: Visually representing data makes our GUI very useful and great looking and greatly
    enhances your coding skills. It is also very useful for your management team to
    represent data visually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an overview of the Python modules for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d8ad072-47b8-4b60-b14a-0f730fd2fbb6.png)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, we will create beautiful charts using Python 3.7 and above
    with the `Matplotlib` module.
  prefs: []
  type: TYPE_NORMAL
- en: The following URL, [http://matplotlib.org/users/screenshots.html](http://matplotlib.org/users/screenshots.html),
    is a great place to begin exploring the world of `Matplotlib`, and it teaches
    us how to create many charts that are not presented in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Matplotlib using pip with the .whl extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing labels on charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to give the chart a legend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting the scale of charts dynamically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Matplotlib using pip with the .whl extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The usual way to download additional Python modules is by using `pip`. The `pip`
    module comes pre-installed with the latest version of Python (3.7 and above).
  prefs: []
  type: TYPE_NORMAL
- en: If you are using an older version of Python, you may have to download both `pip`
    and `setuptools` by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show how to successfully install `Matplotlib` using `pip`.
    We will be using the `.whl` extension for this installation, so this recipe will
    also show you how to install the `wheel` module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let's find out whether you have the `wheel` module already installed.
    The `wheel` module is necessary to download and install Python packages that have
    the `.whl` extension.
  prefs: []
  type: TYPE_NORMAL
- en: We can find out what modules we have currently installed using `pip`.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Windows Command Prompt, run the `pip list` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8eb31279-9941-480b-b6f8-9a00087e4fa0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you get an error running this command, you might want to check whether Python
    is on your environmental path. If it currently isn''t, add it to System variables
    | Path (bottom-left) by clicking the Edit... button. Then, click the New button
    (top-right) and type in the path to your Python installation. Also, add the `C:\Python37\Scripts`
    directory, as the `pip.exe` file is located there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6120db72-3fad-4835-866b-88e7b0bf6aeb.png)'
  prefs: []
  type: TYPE_IMG
- en: If you have more than one version of Python installed, it is a good idea to
    move Python 3.7 to the top of the list. When we type `pip install <module>`, the
    first version found in *System variables* | **Path** might be used and you might
    get some unexpected errors if an older version of Python is located above Python
    3.7.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run `pip install wheel` and then verify whether it has been installed
    successfully using `pip list`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/163c5d66-8a7f-4dad-baa7-99007b896036.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If running `pip list` does not show `wheel`, try to simply type `wheel` at
    Command Prompt. This assumes that you have set up your Python path correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfe1f45d-3b26-4da7-ad36-375570e911ea.png)'
  prefs: []
  type: TYPE_IMG
- en: If you are really very used to Python 2.7 and insist on running the code in
    Python 2.7, you can try this trick. After everything is working with Python 3.7,
    you can rename the 3.7 `python.exe` to `python3.exe` and then have fun using both
    2.7 and 3.7 by typing `python.exe` or `python3.exe` in a command window to run
    the different Python executables. It is a hack.
  prefs: []
  type: TYPE_NORMAL
- en: If you really wish to go on this road, you are on your own, but it can work.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the `wheel` module installed, we can now proceed with downloading and installing
    `Matplotlib` from [http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the matching `Matplotlib` wheel to your hard drive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7b2c4d90-4e51-4238-a326-46e00a7c5891.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open Command Prompt and run `pip install <matplotlib wheel>` as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5cbe9be6-80b7-48e5-9815-18eb2e71c0da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you run into the preceding error, download Microsoft Visual C++ Build Tools
    and install them from [https://visualstudio.microsoft.com/visual-cpp-build-tools/](https://visualstudio.microsoft.com/visual-cpp-build-tools/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/74119fb3-5c2c-4c19-a019-b1944f695208.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Starting the installation of Microsoft Visual C++ Build Tools appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1be50d1a-40bb-408e-9fd2-02a255f87ae5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you ran into the preceding error, rerun the `Matplotlib` installation using
    `pip install`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d60c3915-f840-4017-ab62-bab9c3335abf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify successful installation by looking into the `site-packages` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cf04f852-0cce-4b0a-a4f6-b444507a5279.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's now go behind the scenes to understand the installation better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After downloading the wheel installer, we can now use `pip` to install the `Matplotlib`
    wheel.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 1*, make sure you download and install the `Matplotlib` version that
    matches the Python version you are using. For example, download and install `matplotlib-3.1.0-cp37-cp37m-win_amd64.whl`
    if you have Python 3.7 installed on a 64-bit OS, such as Microsoft Windows 10.
  prefs: []
  type: TYPE_NORMAL
- en: '`amd64` in the middle of the executable name means you are installing the 64-bit
    version. If you are using a 32-bit x86 system, then installing `amd64` will not
    work. Similar problems can occur if you have installed a 32-bit version of Python
    and download 64-bit Python modules.'
  prefs: []
  type: TYPE_NORMAL
- en: Depending upon what you have already installed on your system, running the `pip
    install matplotlib-3.1.0-cp37-cp37m-win_amd64.whl` command might start fine, but
    then it might not run to completion. Refer to the preceding screenshot during
    *Step 2* of what might happen during the installation. The installation ran into
    an error. The way to resolve this is to download and install **Microsoft Visual
    C++ Build Tools**, and we do this in *Step 3* from the website that is mentioned
    in the error for *Step 2* ([https://visualstudio.microsoft.com/visual-cpp-build-tools/](https://visualstudio.microsoft.com/visual-cpp-build-tools/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run into any issues installing Microsoft Visual C++ Build Tools, here
    is a helpful answer from Stack Overflow: [https://stackoverflow.com/a/54136652](https://stackoverflow.com/a/54136652).
    And here is a link to MS: [https://devblogs.microsoft.com/cppblog/announcing-visual-c-build-tools-2015-standalone-c-tools-for-build-environments/](https://devblogs.microsoft.com/cppblog/announcing-visual-c-build-tools-2015-standalone-c-tools-for-build-environments/).'
  prefs: []
  type: TYPE_NORMAL
- en: After we have successfully installed the build tools, we can now rerun our `Matplotlib`
    installation to completion in *Step 4*. Just type in the same `pip install` command
    we have used previously in *Step 2*.
  prefs: []
  type: TYPE_NORMAL
- en: We can verify that we have successfully installed `Matplotlib` by looking at
    our Python installation directory, which we do in *Step 5*. After successful installation,
    the `Matplotlib` folder is added to `site-packages`. Depending upon where we installed
    Python, the full path to the `site-packages` folder on Windows can be `..\Python37\Lib\site-packages`.
  prefs: []
  type: TYPE_NORMAL
- en: If you see the `matplotlib` folder added to the `site-packages` folder in your
    Python installation, then you have successfully installed `Matplotlib`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python modules using `pip` is usually very easy, although you might
    run into some unexpected troubles. Follow the preceding steps and your installation
    will succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have all the required Python modules installed, we can create our
    own charts using `Matplotlib`.
  prefs: []
  type: TYPE_NORMAL
- en: We can create charts with only a few lines of Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Successfully installing `Matplotlib`, as shown in the previous recipe, is a
    requirement for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the minimum amount of code, we can create our first `Matplotlib` chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the first chart, the steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Python module and save it as `Matplotlib_our_first_chart.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code into the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code to see the following chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/58189be7-be8e-4607-9da4-0d39f0f08481.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's now go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we are importing `matplotlib.pyplot` and we alias it as `plt`. We then
    create two lists for our *x* and *y* values. We then pass the two lists into the
    `plt` or `plot` function.
  prefs: []
  type: TYPE_NORMAL
- en: We also import `show` from `pylab` and call it to display our chart.
  prefs: []
  type: TYPE_NORMAL
- en: Notice how this automatically creates a GUI for us that even comes with a number
    of buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Play around with the buttons in the bottom-left corner because they are fully
    functional.
  prefs: []
  type: TYPE_NORMAL
- en: Also notice how the *x* and *y* axes scale automatically to display the data
    range of our *x* and *y* values.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python `Matplotlib` module, combined with add-ons such as `numpy`, creates
    a very rich programming environment that enables us to perform mathematical computations
    and plot them in visual charts with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Placing labels on charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have used the default `Matplotlib` GUI. Now, we will create some
    `tkinter` GUIs from which we will be using `Matplotlib`.
  prefs: []
  type: TYPE_NORMAL
- en: This will require a few more lines of Python code and the importing of some
    more libraries, and it is well worth the effort, because we are gaining control
    of our paintings using canvases.
  prefs: []
  type: TYPE_NORMAL
- en: We will position labels onto both the horizontal and the vertical axes, that
    is, *x* and *y*. We will do this by creating a `Matplotlib` figure that we will
    draw on.
  prefs: []
  type: TYPE_NORMAL
- en: You will also learn how to use subplots, which will enable you to draw more
    than one graph in the same GUI window.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the necessary Python modules installed and knowing where to find the official
    online documentation and tutorials, we can now carry on with our creation of `Matplotlib`
    charts.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While `plot` is the easiest way to create a `Matplotlib` chart, using `Figure`
    in combination with `Canvas` creates a more custom-made graph, which looks much
    better and also enables us to add buttons and other widgets to it:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Python module and save it as `Matplotlib_labels.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code into the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code under the preceding code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following code under the preceding code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following code under the preceding code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code results in the following chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd630210-d864-4899-bb09-5b6cbe13c628.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s deal with a new module:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and save it as `Matplotlib_labels_four.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following new code into the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the code results in the following chart being created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef5965cf-9ea4-4534-9d9d-00d9661cfce9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can add more subplots by assigning them to the second position using `add_subplot(212)`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and save it as `Matplotlib_labels_two_charts.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code into the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code to see the following chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/856d6f6a-1406-4cb7-bf67-4ef317088f08.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's now go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first line of code in `Matplotlib_labels.py`, in *Step 2*, after the
    import statements, we create an instance of a `Figure` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a link to the official documentation: [https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure.add_subplot](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure.add_subplot).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we add subplots to this figure by calling `add_subplot(211)`.
  prefs: []
  type: TYPE_NORMAL
- en: The first number in `211` tells the figure *how many plots* to add, the second
    number determines *the number of columns*, and the third tells the figure *the
    order in which to display* the plots.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 3*, we create values, plot them, and we also add a grid and change
    its default line style.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we only display one plot in the chart, by choosing `2` for the number
    of subplots, we are moving the plot up, which results in extra white space at
    the bottom of the chart. This first plot now only occupies 50% of the screen,
    which affects how large the grid lines of this plot are when being displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the code by uncommenting the code for `axis =` and `axis.grid()`
    to see the different effects. You also have to comment out the original line below
    each of them.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 4*, we create a callback function that correctly exits the `tkinter`
    GUI when the red X button gets clicked. We create an instance of `tkinter` and
    assign the callback to the `root` variable.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 5*, we create a canvas and use the `pack` geometry manager and, after
    that, we start the main windows GUI event loop.
  prefs: []
  type: TYPE_NORMAL
- en: Running the entire code in S*tep 6* then creates the chart.
  prefs: []
  type: TYPE_NORMAL
- en: We can place more than one chart onto the same canvas. In `Matplotlib_labels_four.py`,
    most of the code is the same as in `Matplotlib_labels.py`. We are creating four
    axes and positioning them in two rows.
  prefs: []
  type: TYPE_NORMAL
- en: The important thing to observe is that we create one axis, which is then used
    as the shared *x* and *y* axes for the other graphs within the chart. In this
    way, we can achieve a database-like layout of the chart.
  prefs: []
  type: TYPE_NORMAL
- en: In `Matplotlib_labels_two_charts.py`, running the code now adds `axis1` to the
    chart. For the grid of the bottom plot, we left the line style at its default.
    The main difference compared with the previous charts is that we assigned the
    second chart to the second position using `add_subplot(212).`
  prefs: []
  type: TYPE_NORMAL
- en: 'This means: 2 rows, 1 column, position 2 for this chart, which places it in
    the second row as there is only one column.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to give the chart a legend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we start plotting more than one line of data points, things might become
    a little bit unclear. By adding a legend to our graphs, we can identify data,
    and tell what it actually means.
  prefs: []
  type: TYPE_NORMAL
- en: We do not have to choose different colors to represent the different data. `Matplotlib`
    automatically assigns a different color to each line of the data points.
  prefs: []
  type: TYPE_NORMAL
- en: All we have to do is create the chart and add a legend to it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will enhance the chart from the previous recipe, *Placing
    labels on charts*. We will only plot one chart.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will plot more lines of data on the same chart, and then we will add
    a legend to the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and save it as `Matplotlib_chart_with_legend.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code into the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code under the preceding code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following code under the preceding code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the code creates the following chart, which has a legend in the upper-right
    corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af0808b8-0a4f-49ce-8650-be346694ba03.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we change the default colors of the lines in the legend.
  prefs: []
  type: TYPE_NORMAL
- en: Open `Matplotlib_chart_with_legend.py` and save it as `Matplotlib_chart_with_legend_colors.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following colors to each plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the modified code and observe the different colors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5e1e7a77-b045-4f1d-834f-af33e7352622.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's have a closer look at the correct syntax when assigning the plots
    to variables.
  prefs: []
  type: TYPE_NORMAL
- en: Open `Matplotlib_chart_with_legend.py` and save it as `Matplotlib_chart_with_legend_missing_comma.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the comma after `t0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice how `First line` no longer appears in the top-right legend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e0228643-47c9-444e-a23b-d394c6468a2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's now go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In `Matplotlib_chart_with_legend.py`, we are only plotting one graph in this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: For *Step 2*, refer to the explanation from the previous recipe, *Placing labels
    on charts,* as the code is the same except that we are slightly modifying the
    size of the figure via the `figsize` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 3*, we change `fig.add_subplot(111)` to use `111`. Next, we create
    three Python lists that contain the values to be plotted. When we plot the data,
    we save the references to the plots in local variables.
  prefs: []
  type: TYPE_NORMAL
- en: We create the legend by passing it in a tuple with the references to the three
    plots, and then pass it in another tuple that contains the strings that are then
    displayed in the legend, and, in the third argument, we position the legend within
    the chart.
  prefs: []
  type: TYPE_NORMAL
- en: For *Step* *4*, refer to the explanation from the previous recipe, *Placing
    labels on charts,* as the code is the same*.*
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the official documentation for the `tkinter` protocol at this
    link: [https://www.tcl.tk/man/tcl8.4/TkCmd/wm.htm#M39](https://www.tcl.tk/man/tcl8.4/TkCmd/wm.htm#M39).'
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 5*, when running the code, we can see that our chart now has a legend
    for each of the three lines of data.
  prefs: []
  type: TYPE_NORMAL
- en: The default settings of `Matplotlib` assign a color scheme to the lines being
    plotted. In `Matplotlib_chart_with_legend_colors.py`, we can easily change this
    default setting of colors to the colors we prefer by setting an attribute when
    we plot each axis.
  prefs: []
  type: TYPE_NORMAL
- en: We do this in *Step 2* by using the `color` attribute and assigning it an available
    color value. Running the code in *Step 3* now shows different colors than the
    default colors.
  prefs: []
  type: TYPE_NORMAL
- en: In `Matplotlib_chart_with_legend_missing_comma.py`, we intentionally remove
    the comma after `t0` to see what effect this has.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the comma after the variable assignments of `t0`, `t1`, and `t2` is
    not a mistake. It is required in order to create the legend.
  prefs: []
  type: TYPE_NORMAL
- en: The comma after each variable **unpacks** the list value into the variable.
    This value is a `Line2D` object of `Matplotlib`. If we leave the comma out, our
    legend will not be displayed because the `Line2D` object is embedded in a list
    and we have to unpack it out of the list.
  prefs: []
  type: TYPE_NORMAL
- en: When we remove the comma after the `t0` assignment, we get an error, and the
    first line no longer appears in the figure. The chart and legend still get created,
    but without the first line appearing in the legend.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipes, while creating our first charts and enhancing them,
    we hardcoded the scaling of how those values are visually represented.
  prefs: []
  type: TYPE_NORMAL
- en: While this served us well for the values we were using, we might have to plot
    charts from large databases.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the range of that data, our hardcoded values for the vertical *y*-dimension
    might not always be the best solution, and may make it hard to see the lines in
    our charts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will improve our code from the previous recipe, *How to give the chart a
    legend*. If you have not typed in all of the code from the previous recipes, just
    download the code for this chapter from the Packt website, and it will get you
    started (and then you can have a lot of fun creating GUIs, charts, and so on using
    Python).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will modify the `yValues1` line of code from the previous recipe to use
    `50` as the third value:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Matplotlib_chart_with_legend.py` and save it as `Matplotlib_labels_two_charts_not_scaled.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the third value in the list of `yValues1` to `50`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code to see the following chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e69cde2-2fad-4bc4-81d6-18ff14e04dc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Open `Matplotlib_labels_two_charts_not_scaled.py` and save it as `Matplotlib_labels_two_charts_scaled.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `axis.set_ylim(5, 8)` under the value code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the code, the following chart appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f32d6e68-8f4b-4aed-802d-6f37c6329d73.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's now go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In `Matplotlib_labels_two_charts_not_scaled.py`, the only difference to the
    code that created the chart in the previous recipe is a single data value.
  prefs: []
  type: TYPE_NORMAL
- en: By changing one value that is not close to the average range of all the other
    values for all plotted lines, the visual representation of the data has dramatically
    changed. We lost a lot of detail regarding the overall data, and we now mainly
    see one high spike.
  prefs: []
  type: TYPE_NORMAL
- en: So far, our charts have adjusted themselves according to the data they visually
    represent.
  prefs: []
  type: TYPE_NORMAL
- en: While this is a practical feature of `Matplotlib`, this is not always what we
    want. We can restrict the scale of the chart being represented by limiting the
    vertical *y*-dimension.
  prefs: []
  type: TYPE_NORMAL
- en: In `Matplotlib_labels_two_charts_scaled.py`, the `axis.set_ylim(5, 8)` line
    of code now limits the start value to `5` and the end value of the vertical display
    to `8`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we create our chart, the high value peak no longer has the impact
    it had before.
  prefs: []
  type: TYPE_NORMAL
- en: We increased one value in the data, which resulted in a dramatic effect. By
    setting limits to the vertical and horizontal displays of the chart, we can see
    the data we are most interested in.
  prefs: []
  type: TYPE_NORMAL
- en: Spikes, like the ones just shown, can be of great interest too. It all depends
    on what we are looking for. The visual representation of the data is of great
    value.
  prefs: []
  type: TYPE_NORMAL
- en: A picture is worth a thousand words.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the scale of charts dynamically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learned how we can limit the scaling of our charts.
    In this recipe, we will go one step further by dynamically adjusting the scaling
    by both setting a limit and analyzing our data before we represent it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will enhance the code from the previous recipe, *Scaling charts*, by reading
    in the data we are plotting dynamically, averaging it, and then adjusting our
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: While we would typically read in the data from an external source, in this recipe,
    we'll create the data we are plotting using Python lists, as can be seen in the
    code in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are creating our own data in our Python module by assigning lists with data
    to the `xValues` and `yValues` variables. Let's now modify the code to set limits
    on both the *x* and *y* dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Open `Matplotlib_labels_two_charts_scaled.py` and save it as `Matplotlib_labels_two_charts_scaled_dynamic_spike.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add/adjust the `set_ylim` and `set_xlim` code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the modified code, we get the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab29f9a2-dc7e-4407-b769-d942dfbe5a2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Modify the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Matplotlib_labels_two_charts_scaled_dynamic_spike.py` and save it as `Matplotlib_labels_two_charts_scaled_dynamic.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following new code starting with `yAll`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the code results in the following chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a866a99a-8574-4a85-983b-7ba1da5f6a9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's now go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many graphs, the beginning of the *x* and *y* coordinate system starts at
    (0, 0). This is usually a good idea, so we adjusted our chart coordinate code
    accordingly. In `Matplotlib_labels_two_charts_scaled_dynamic_spike.py`, we have
    set the same limits for *x* and *y*, hoping that our chart might look more balanced.
    Looking at the result, this is not the case.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe starting at (0, 0) was not such a great idea after all.
  prefs: []
  type: TYPE_NORMAL
- en: What we really want to do is to adjust our chart dynamically according to the
    range of the data, while, at the same time, restricting the values that are too
    high or too low.
  prefs: []
  type: TYPE_NORMAL
- en: We can do this by parsing all the data to be represented in the chart while,
    at the same time, setting some explicit limits. In `Matplotlib_labels_two_charts_scaled_dynamic.py`,
    we adjusted both its *x* and *y* dimensions dynamically. Note how the *y*-dimension
    starts at 5.5\. The chart also no longer starts at **(0, 0)**, giving us more
    valuable information about our data.
  prefs: []
  type: TYPE_NORMAL
- en: We are creating a list of lists for the *y*-dimension data and then using a
    list comprehension wrapped into a call to Python's `min()` and `max()` functions.
  prefs: []
  type: TYPE_NORMAL
- en: If list comprehensions seem to be a little bit advanced, what they basically
    are is a very compressed loop. They are also designed to be faster than a regular
    programming loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Python code, we created three lists that hold the *y*-dimensional data
    to be plotted. We then created another list that holds those three lists, which
    creates a list of lists, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We are interested in getting both the minimum value of all of the *y*-dimensional
    data as well as the maximum value contained within these three lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do this via a Python list comprehension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: After running the list comprehension, `minY` is `5.5`.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding line of code is the list comprehension that runs through all the
    values of all the data contained within the three lists and finds the minimum
    value using the Python `min` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the very same pattern, we find the maximum value contained in the data we
    wish to plot. This time, we''ll also set a limit within our list comprehension,
    which ignores all the values that exceed the limit we specified, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: After running the preceding code with our chosen restriction, `maxY` has the
    value of `8` (not 50).
  prefs: []
  type: TYPE_NORMAL
- en: We applied a restriction to the max value, according to a predefined condition,
    choosing `20` as the maximum value to be displayed in the chart.
  prefs: []
  type: TYPE_NORMAL
- en: For the *x*-dimension, we simply called `min()` and `max()` in the `Matplotlib`
    method to scale the limits of the chart dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we have created several `Matplotlib` charts and adjusted some
    of the many available attributes. We also used core Python to control the scaling
    of the charts dynamically.
  prefs: []
  type: TYPE_NORMAL
