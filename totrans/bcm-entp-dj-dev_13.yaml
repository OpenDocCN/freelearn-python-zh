- en: '*Chapter 10*: Database Management'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 10 章*：数据库管理'
- en: In programming, the subject of database management encompasses a broad spectrum
    of subcategories. Many of those categories were already introduced in earlier
    chapters, such as in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037), *Project
    Configuration*, when we discussed the concept of using a database management tool,
    or in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations,
    and Inheritance*, when we explored the concept of model managers. While these
    subjects can be considered topics of this chapter, they were introduced in earlier
    chapters to better fit what that chapter's subject matter was discussing or to
    serve as a tool that was suited to the exercises in those earlier chapters. The
    Django fixtures that were introduced and used in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*, can also be considered a database management
    tool and will finally be covered in more depth in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，数据库管理的主题涵盖了广泛的各种子类别。其中许多类别在早期的章节中已经介绍过，例如在 [*第 2 章*](B17243_02_ePub.xhtml#_idTextAnchor037)
    *项目配置* 中，我们讨论了使用数据库管理工具的概念，或者在 [*第 3 章*](B17243_03_ePub.xhtml#_idTextAnchor077)
    *模型、关系和继承* 中，我们探讨了模型管理器的概念。虽然这些主题可以被认为是本章的主题，但它们在早期章节中被引入，是为了更好地适应该章节的主题讨论，或者作为适合早期章节练习的工具。在
    [*第 3 章*](B17243_03_ePub.xhtml#_idTextAnchor077) *模型、关系和继承* 中介绍并使用的 Django 固定文件也可以被视为数据库管理工具，并将在本章中更深入地探讨。
- en: Django fixtures are used to import and export data found in a database that
    is connected to a Django project. The `chapter_3` data fixture that was provided
    and used throughout every chapter prior to this chapter helped to demonstrate
    those exercises by providing the necessary test/dummy data for you. We will cover
    how to export data, creating our own data fixtures for projects and developers
    to use. We will also explain in a little more depth the import process that we
    have been using and the options that are available.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Django 固定文件用于导入和导出与 Django 项目连接的数据库中的数据。在本章之前提供的 `chapter_3` 数据固定文件，在每一章中都得到了使用，它通过提供必要的测试/虚拟数据来帮助演示这些练习。我们将介绍如何导出数据，为项目和开发者创建自己的数据固定文件。我们还将更深入地解释我们一直在使用的导入过程以及可用的选项。
- en: In this chapter, we will explore other methods of executing queries that enhance
    the overall performance of your system. The two methods commonly used are `select_related()`
    and `prefetch_related()`, which are known in Django as `Vehicle` and `Seller`
    model class data that exists in our database. We will use the **Django Debug Toolbar**
    (**DjDT**) introduced in [*Chapter 9*](B17243_09_ePub.xhtml#_idTextAnchor272),
    *Django Testing*, to monitor how the performance changes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨其他执行查询的方法，这些方法可以增强您系统的整体性能。常用的两种方法是 `select_related()` 和 `prefetch_related()`，在
    Django 中分别被称为 `Vehicle` 和 `Seller` 模型类数据，这些数据存在于我们的数据库中。我们将使用在 [*第 9 章*](B17243_09_ePub.xhtml#_idTextAnchor272)
    *Django 测试* 中介绍的 **Django Debug Toolbar** (**DjDT**) 来监控性能的变化。
- en: 'In this chapter, we will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Exporting data into a data fixture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据导出到数据固定文件
- en: Importing data from a data fixture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据固定文件导入数据
- en: Boosting query performance using the `select_related()` method
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `select_related()` 方法提升查询性能
- en: Boosting query performance using the `prefetch_related()` method
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `prefetch_related()` 方法提升查询性能
- en: Boosting query performance using the `Prefetch()` class
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Prefetch()` 类提升查询性能
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To work with the code in this chapter, the following tools will need to be
    installed on your local machine:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要在此章节中与代码一起工作，您需要在本地机器上安装以下工具：
- en: Python version 3.9 – used as the underlying programming language for the project
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 版本 3.9 – 作为项目的底层编程语言
- en: Django version 4.0 – used as the backend framework of the project
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 版本 4.0 – 作为项目的后端框架
- en: pip package manager – used to manage third-party Python/Django packages
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pip 包管理器 – 用于管理第三方 Python/Django 包
- en: We will continue to work with the solution created in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037),
    *Project Configuration*. However, it is not necessary to use the Visual Studio
    IDE. The main project itself can be run using another IDE or run independently
    using a terminal or command-line window from within the project root folder, which
    is where the `manage.py` file resides. Whatever editor or IDE you are using, a
    virtual environment will also be needed to work with the Django project. Instructions
    for how to create a project and virtual environment can be found in [*Chapter
    2*](B17243_02_ePub.xhtml#_idTextAnchor037), *Project Configuration*. You will
    need a database to store the data contained in your project. PostgreSQL was chosen
    for the examples in the previous chapter; however, any database type that you
    choose for your project can be used to work with the examples in this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用[*第2章*](B17243_02_ePub.xhtml#_idTextAnchor037)中 *Project Configuration*
    部分创建的解决方案。然而，没有必要使用 Visual Studio IDE。主要项目本身可以使用其他 IDE 运行，或者从项目根目录（其中包含 `manage.py`
    文件）独立使用终端或命令行窗口运行。无论你使用什么编辑器或 IDE，都需要一个虚拟环境来与 Django 项目一起工作。有关如何创建项目和虚拟环境的说明可以在[*第2章*](B17243_02_ePub.xhtml#_idTextAnchor037)
    *Project Configuration* 中找到。你需要一个数据库来存储项目中的数据。在上一章的示例中选择了 PostgreSQL；然而，你可以为你的项目选择任何数据库类型来与本章的示例一起工作。
- en: 'We will also be using data that is in the form of a Django fixture, provided
    in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations, and
    Inheritance*, in the subsection titled *Loading the chapter_3 data fixture*. Make
    sure the `chapter_3` fixture is loaded into your database. If this has already
    been done, then you may skip the next command. If you have already created the
    tables found in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models,
    Relations, and Inheritance*, and have not loaded that fixture yet, then run the
    following command, after activating your virtual environment:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用[*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)中提供的 Django fixture 格式的数据，该章节标题为
    *Models, Relations, and Inheritance*，子标题为 *Loading the chapter_3 data fixture*。确保
    `chapter_3` fixture 已加载到你的数据库中。如果这已经完成，则可以跳过下一个命令。如果你已经创建了[*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)中
    *Models, Relations, and Inheritance* 部分提到的表，并且尚未加载该 fixture，那么在激活你的虚拟环境后，运行以下命令：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'All of the code created in this chapter can be found in the GitHub repository
    for this book: [https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer](https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer).
    The bulk of the code depicted in this chapter can be found in the `/becoming_a_django_entdev/becoming_a_django_entdev/chapter_10/`
    directory.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章创建的所有代码都可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer](https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer)。本章中展示的大部分代码可以在
    `/becoming_a_django_entdev/becoming_a_django_entdev/chapter_10/` 目录中找到。
- en: 'Check out the following video to see the *Code in Action*: [https://bit.ly/3zYgbqd](https://bit.ly/3zYgbqd).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看 *Code in Action*：[https://bit.ly/3zYgbqd](https://bit.ly/3zYgbqd)。
- en: Preparing for this chapter
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备本章内容
- en: Start by creating a new app in your project called `chapter_10` by following
    the steps discussed in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037), *Project
    Configuration*, in the subsection titled *Creating a Django app*. As discussed
    in that section, don't forget to change the value of the `name =` variable for
    your app class found in the `/becoming_a_django_entdev/becoming_a_django_entdev/chapter_10/apps.py`
    file to now point to the path where you installed your app. Be sure to also include
    this app in the `INSTALLED_APPS` variable found in the `settings.py` file as well.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照[*第2章*](B17243_02_ePub.xhtml#_idTextAnchor037)中讨论的步骤，在你的项目中创建一个名为 `chapter_10`
    的新应用。正如该部分所述，不要忘记将 `/becoming_a_django_entdev/becoming_a_django_entdev/chapter_10/apps.py`
    文件中你的应用类中 `name =` 变量的值更改为指向你安装应用的位置。务必还将此应用包含在 `settings.py` 文件中的 `INSTALLED_APPS`
    变量中。
- en: 'In the main `urls.py` file of the site, add the following path, which points
    to the URL patterns of this chapter that we will be creating:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站的主要 `urls.py` 文件中，添加以下路径，该路径指向我们将要创建的本章 URL 模式：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, copy the `/chapter_10/urls.py` file from the code provided with this book
    into your project in the same directory.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将本书提供的代码中的 `/chapter_10/urls.py` 文件复制到你的项目中同一目录下。
- en: In the following exercises, we will use the DjDT that was introduced in [*Chapter
    9*](B17243_09_ePub.xhtml#_idTextAnchor272), *Django Testing*, to monitor performance.
    Please make sure that you have installed the DjDT in your project before proceeding.
    Instructions can be found in the subsection titled *Installing the DjDT* of that
    chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下练习中，我们将使用在 [*第 9 章*](B17243_09_ePub.xhtml#_idTextAnchor272) 中介绍的 DjDT，即 *Django
    测试*，来监控性能。请确保在继续之前，您已经在项目中安装了 DjDT。说明可以在该章节的标题为 *安装 DjDT* 的子节中找到。
- en: Now that we have created the app for this chapter, let's start by creating our
    own data fixtures.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经为这一章创建了应用程序，让我们首先创建我们自己的数据固定文件。
- en: Exporting data into a data fixture
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据导出到数据固定文件
- en: A `fixtures` folder found in every Django app. This directory can also be changed
    by modifying the `settings.py` variable called `FIXTURE_DIRS`, but this is not
    necessary if you intend to use the default directory and behavior. Django fixture
    files can be written in JSON, JSONL, XML, or YAML file formats. This means you
    can easily export data from other systems if that data is exported into one of
    these formats, even if that other system is not a Django project. Keep in mind
    that the table structure of the objects must match exactly if you wish to do a
    clean export from an old system and import into a new system.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Django 应用程序中都有一个名为 `fixtures` 的文件夹。此目录也可以通过修改名为 `FIXTURE_DIRS` 的 `settings.py`
    变量来更改，但如果您打算使用默认目录和行为，则这不是必需的。Django 固定文件可以编写为 JSON、JSONL、XML 或 YAML 文件格式。这意味着如果您可以将数据导出为这些格式之一，即使该系统不是
    Django 项目，您也可以轻松地从其他系统导出数据。请记住，如果要从旧系统进行干净的导出并将其导入到新系统，对象的表结构必须完全匹配。
- en: Usually, there is a great deal of data parsing involved when exporting from
    an older legacy system and importing into the newly updated system. The other
    option is to use one or a combination of many command options when exporting or
    importing data to prevent errors when data structures do not align. Sometimes,
    using the options provided is not enough to accomplish what needs to be done to
    your data. **Parsing data** is the process of transforming data from one format
    or data type to another. We sometimes have to parse data because a newer system
    changes the data structure and/or constraints that were set on the old data structures.
    When that happens, we sometimes get errors during the import. Sometimes, data
    imports fine but at runtime, your users experience odd behavior as a result of
    improperly formatted data found within your database. We will only cover using
    the options provided in this chapter; if data in your system is so complex that
    it needs to be parsed, you will have to look into writing your own Python script
    to transform your data as needed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在从旧版遗留系统导出并导入到新更新的系统时，涉及大量的数据处理。另一种选择是在导出或导入数据时使用一个或多个命令选项的组合，以防止数据结构不匹配时出现错误。有时，使用提供的选项可能不足以完成对数据进行所需的所有操作。**数据处理**是将数据从一种格式或数据类型转换为另一种格式的过程。有时我们必须处理数据，因为较新的系统改变了旧数据结构及其/或对旧数据结构设置的约束。当这种情况发生时，我们有时会在导入过程中遇到错误。有时，数据导入没有问题，但在运行时，由于数据库中找到的不正确格式的数据，您的用户可能会遇到奇怪的行为。在本章中，我们将仅介绍使用提供的选项；如果您的系统中的数据如此复杂，以至于需要处理，您将不得不查找编写自己的
    Python 脚本来根据需要转换数据。
- en: Let's practice using the Django `dumpdata` management command next.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们练习使用 Django 的 `dumpdata` 管理命令。
- en: Using the dumpdata command
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 dumpdata 命令
- en: The `dumpdata` management command is the opposite of the `loaddata` command
    that we have been using to import the `chapter_3` fixture data. It is used to
    export data from a database connected to your Django project into a data fixture.
    By default, Django will export data fixtures into JSON format, but you can specify
    a different format by using the `--format` option when running the `dumpdata`
    command.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`dumpdata` 管理命令是我们在导入 `chapter_3` 固定数据时使用的 `loaddata` 命令的反义词。它用于将连接到您的 Django
    项目的数据库中的数据导出到数据固定文件中。默认情况下，Django 会将数据固定文件导出为 JSON 格式，但您可以在运行 `dumpdata` 命令时使用
    `--format` 选项指定不同的格式。'
- en: We will start by just dumping the tables of all applications in our project
    using the `-o` or `--output` option to place a fixture in the `chapter_10` app
    directory, in order to keep the chapter exercises nicely organized. Every `dumpdata`
    exercise in this chapter will use the `--output` option for this reason; it is
    not a required option.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用`-o`或`--output`选项将所有应用的表导出到我们的项目中的`chapter_10`应用目录，以保持章节练习的整洁组织。本章中的每个`dumpdata`练习都将使用`--output`选项，因为这个选项不是必需的。
- en: 'More information about these options and other options that are not covered
    can be found here: [https://docs.djangoproject.com/en/4.0/ref/django-admin/#dumpdata](https://docs.djangoproject.com/en/4.0/ref/django-admin/#dumpdata).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些选项以及其他未涵盖的选项的更多信息，可以在此处找到：[https://docs.djangoproject.com/en/4.0/ref/django-admin/#dumpdata](https://docs.djangoproject.com/en/4.0/ref/django-admin/#dumpdata)。
- en: 'Before proceeding with this exercise, make sure you have data in your database,
    whether you added it manually or imported it from the `chapter_3` app. We will
    export all existing data into a `chapter_10` data fixture folder for practice,
    by following these steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行此练习之前，请确保你的数据库中有数据，无论是手动添加的还是从`chapter_3`应用导入的。我们将通过以下步骤将所有现有数据导出到`chapter_10`数据固定文件夹以进行练习：
- en: Make sure you are inside your project's root directory, the same folder where
    your `manage.py` file is located. Then, open your command-line window or terminal
    and activate your virtual environment, but do not run your project at this time.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你位于你的项目根目录中，即你的`manage.py`文件所在的同一个文件夹。然后，打开你的命令行窗口或终端，激活你的虚拟环境，但在此时不运行你的项目。
- en: 'Create a new folder called `fixtures` in your `/becoming_a_django_entdev/chapter_10/`
    directory using the following command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在你的`/becoming_a_django_entdev/chapter_10/`目录中创建一个名为`fixtures`的新文件夹：
- en: '[PRE11]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Execute the `dumpdata` command using the `-o` output option to place the dumped
    data into a file called `chapter_10.json` inside the folder we just created:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`-o`或`--output`输出选项执行`dumpdata`命令，将导出的数据放入我们刚刚创建的文件夹中的`chapter_10.json`文件中：
- en: '[PRE12]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you were successful, you should now see a new file called `chapter_10.json`
    in your `/becoming_a_django_entdev/chapter_10/fixtures/` folder, as shown in the
    following screenshot, using the **Solution Explorer** in the Visual Studio IDE:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你操作成功，你现在应该能在你的`/becoming_a_django_entdev/chapter_10/fixtures/`文件夹中看到一个名为`chapter_10.json`的新文件，如下面的截图所示，使用Visual
    Studio IDE中的**解决方案资源管理器**：
- en: '![Figure 10.1 – Dumping all data with the dumpdata command'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.1 – 使用`dumpdata`命令导出所有数据'
- en: '](img/Figure_10.01_B17243.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.01_B17243.jpg)'
- en: Figure 10.1 – Dumping all data with the dumpdata command
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 使用`dumpdata`命令导出所有数据
- en: The reason we had to create the `fixtures` folder first is that the `dumpdata`
    command will fail if we specify a folder that does not exist. The actual `.json`
    file doesn't have to exist, Django will create that file for you. Keep in mind
    that if your `.json` file does already exist and you run the `dumpdata` command
    specifying that file as the output option, then all the data in your existing
    fixture file will be overwritten and lost.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之所以必须首先创建`fixtures`文件夹，是因为如果我们指定了一个不存在的文件夹，`dumpdata`命令将会失败。实际上，`.json`文件不必存在，Django会为你创建该文件。请记住，如果你的`.json`文件已经存在，并且你运行`dumpdata`命令指定该文件作为输出选项，那么你现有的所有数据都将被覆盖并丢失。
- en: Inside the `chapter_10.json` file that was created, you will notice that it
    is in minified file format. You are welcome to format that document into something
    readable. In Visual Studio, you can right-click inside your document and select
    **Format Document** to do that. You can also copy and paste that data into an
    online formatting tool, such as my favorite, [https://jsonlint.com/](https://jsonlint.com/).
    Formatting the document is not necessary but it is helpful if you want to read
    the data objects and/or edit them directly in that file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建的`chapter_10.json`文件中，你会注意到它是以压缩文件格式存在的。你可以将这份文档格式化成可读的形式。在Visual Studio中，你可以在文档内右键点击并选择**格式化文档**来完成此操作。你还可以将数据复制粘贴到在线格式化工具中，例如我最喜欢的[https://jsonlint.com/](https://jsonlint.com/)。格式化文档不是必需的，但如果你想直接在该文件中读取数据对象或编辑它们，这将很有帮助。
- en: You'll also notice that inside the `chapter_10.json` file that was created,
    you will have data for every app of your project, including the `auth`, `authtoken`,
    and `chapter_3` data tables and any Django-related data tables, such as the `admin`
    and `contenttypes` tables. This is far more information than what was provided
    to you in the `chapter_3.json` data fixture. Odds are, you won't need to include
    information such as the `admin.logentry` and `contenttypes.contenttype` objects,
    as they usually cause conflicts when importing that data into a different system.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: In the next subsection, we will practice exporting only the tables found in
    a specific application of a project by specifying the `app_name` and/or `model_name`
    of what data we want to include.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a specific application
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using the `dumpdata` command without specifying any application, just like
    we did in the previous exercise, Django will export data from all tables in all
    applications of a project. There is no option syntax for doing this; if there
    was, it would be in `dumpdata {{ app_name }}` or `dumpdata {{ app_name.model_name
    }}` format, without the curly brackets of course.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify an app or table, follow these steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you are inside your project's root directory, the same folder where
    your `manage.py` file is located. Then, open a command-line window or terminal
    and activate your virtual environment, but do not run your project at this time.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following `dumpdata` command, which will specify all of the tables
    found only in the `chapter_3` application:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, what should have been created for us is a single file called `chapter_3_models.json`
    in the `/chapter_10/fixtures/` folder. It should contain data for only the `vehiclemodel`,
    `engine`, `vehicle`, and `seller` tables. All of the other data that we saw in
    the previous fixture file will no longer be found in this new file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside that file, format the data so that you can read what is found in it.
    If you are using Visual Studio, right-click inside your document and select **Format
    Document** or copy and paste the data into the online tool found at [https://jsonlint.com/](https://jsonlint.com/).
    Your data should look similar to that in the following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Dump chapter_3 app dumpdata command'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.02_B17243.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – Dump chapter_3 app dumpdata command
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: By default, all related objects are displayed using the foreign key of that
    related object. We can see this with all seven of the related `Vehicle` objects,
    represented as a list of the numbers `1` through `7` in the preceding screenshot.
    The order depends on the default ordering of that model.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: JSON exports don't always follow the same or logical order. Your results may
    vary. In the preceding screenshot, each object that was exported includes its
    original primary key, represented as the `"pk"` field. We can remove this using
    the `--natural-primary` option, which we will soon discuss.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'To practice exporting only a specific table, use the following command to export
    the `Seller` model data, by specifying `chapter_3.seller` as the source:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要练习仅导出特定表，请使用以下命令导出`Seller`模型数据，通过指定`chapter_3.seller`作为源：
- en: '[PRE14]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Use the same dot notation to specify other models and/or other applications
    if you want extra practice.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想进行额外的练习，可以使用相同的点表示法来指定其他模型和/或应用程序。
- en: Next, let's practice exporting everything again, as we did in the first exercise.
    This time, we will use the `--exclude` option to exclude apps that we do not want
    to be included.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们再次练习导出所有内容，就像我们在第一个练习中所做的那样。这次，我们将使用`--exclude`选项来排除我们不想包含的应用程序。
- en: Using the --exclude option
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`--exclude`选项
- en: The `--exclude` or `-e` option is used to tell Django to exclude a particular
    app or model from the given inclusion of a `dumpdata` command. In this exercise,
    we will perform the same dump-everything operation that we performed earlier in
    the subsection titled *Using the dumpdata command* of this chapter and exclude
    all of the Django-related tables. We want to produce the same results as in the
    *Exporting a specific application* subsection, by using the `--exclude` option
    rather than telling Django what to include.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`--exclude`或`-e`选项用于告诉Django在`dumpdata`命令的给定包含中排除特定的应用程序或模型。在本练习中，我们将执行与本章标题为*使用dumpdata命令*的子节中早些时候执行相同的导出所有内容操作，并排除所有与Django相关的表。我们希望通过使用`--exclude`选项而不是告诉Django包含什么来产生与*导出特定应用程序*子节中相同的输出结果。'
- en: 'Follow these steps to perform your `--exclude` operation:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤执行您的`--exclude`操作：
- en: Make sure you are inside your project's root directory, the same folder where
    your `manage.py` file is located. Then, open a command-line window or terminal
    and activate your virtual environment, but do not run your project at this time.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您位于项目根目录内，即与您的`manage.py`文件相同的文件夹。然后，打开命令行窗口或终端并激活您的虚拟环境，但在此阶段不要运行您的项目。
- en: 'Execute the following `dumpdata` command, which excludes the following applications:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下`dumpdata`命令，该命令排除以下应用程序：
- en: '[PRE15]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Options can also be written using an equals character, such as `-e=app_name`
    or `--exclude=app_name`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 选项也可以使用等号字符来编写，例如`-e=app_name`或`--exclude=app_name`。
- en: The contents of the newly created `chapter_10_exclude.json` file should match
    the contents of the `chapter_3_models.json` file that we created in the previous
    subsection, titled *Exporting a specific application*. This is because we technically
    performed the same action, except the first time we told Django what to include,
    and the second time, we told Django what to exclude. Compare your files' output
    to see the results.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的`chapter_10_exclude.json`文件的内容应与我们在上一节标题为*导出特定应用程序*中创建的`chapter_3_models.json`文件的内容相匹配。这是因为我们在技术上执行了相同的行为，第一次我们告诉Django包含什么，第二次我们告诉Django排除什么。比较您文件的输出以查看结果。
- en: Next, let's practice exporting data as something other than the default JSON
    format.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们练习将数据导出为除默认JSON格式之外的其他格式。
- en: Using the --format option
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`--format`选项
- en: The `--format` option is used to tell Django to output the data into the format
    specified. The four types that we can specify when exporting data are JSON, JSONL,
    XML, and YAML. The default is JSON if this option is not specified.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--format`选项来告诉Django将数据输出到指定的格式。在导出数据时，我们可以指定的四种格式是JSON、JSONL、XML和YAML。如果没有指定此选项，默认为JSON。
- en: 'Follow these steps to export your data in every format type possible, one format
    for each step:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤以可能的每种格式类型导出您的数据，每一步一个格式：
- en: Make sure you are inside your project's root directory, the same folder where
    your `manage.py` file is located. Then, open a command-line window or terminal
    and activate your virtual environment, but do not run your project at this time.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您位于项目根目录内，即与您的`manage.py`文件相同的文件夹。然后，打开命令行窗口或终端并激活您的虚拟环境，但在此阶段不要运行您的项目。
- en: 'Execute the following `dumpdata` command, which dumps the `Sellers` objects
    as XML:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下`dumpdata`命令，该命令将`Sellers`对象以XML格式导出：
- en: '[PRE16]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Execute the following `dumpdata` command, which dumps the `Sellers` objects
    as JSONL:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下`dumpdata`命令，该命令将`Sellers`对象以JSONL格式导出：
- en: '[PRE17]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To work with YAML formats, you need to install the `pip` package called `pyyaml`.
    Add this package to your `requirements.txt` file and install it from that file
    or run the following command to install this package manually into your virtual
    environment:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用YAML格式，您需要安装名为`pyyaml`的`pip`包。将此包添加到您的`requirements.txt`文件中，并从该文件安装它或运行以下命令将此包手动安装到您的虚拟环境中：
- en: '[PRE18]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Execute the following `dumpdata` command, which dumps the `Sellers` objects
    as YAML:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 `dumpdata` 命令，该命令将 `Sellers` 对象作为 YAML 导出：
- en: '[PRE19]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You should now have three more `chapter_3_sellers` files, one in each format:
    `.xml`, `.jsonl`, and `.yaml`. Open each of these documents to view how the data
    is represented in each format and how they differ from the default `.json` format.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该有三个额外的 `chapter_3_sellers` 文件，每个格式一个：`.xml`、`.jsonl` 和 `.yaml`。打开这些文档，查看数据在每个格式中的表示方式以及它们与默认的
    `.json` 格式的区别。
- en: Next, let's practice removing the primary key, the `"pk"` field, when exporting
    data into a fixture using the `--natural-primary` option.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们练习在导出数据到 fixture 时使用 `--natural-primary` 选项删除主键，即 `"pk"` 字段。
- en: Using the --natural-primary option
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 --natural-primary 选项
- en: The `--natural-primary` option is used to generate a fixture that does not include
    the `"pk"` field for each object that is exported. This is helpful if you have
    a system that already has data and you need to append data to the existing data.
    Say the primary key was included; it could conflict with an existing object that
    has that same primary key but is not the same object. This could potentially result
    in lost or changed data that produces undesirable results.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `--natural-primary` 选项，该选项用于生成一个不包含每个导出对象的 `"pk"` 字段的 fixture。如果你有一个已经包含数据的系统，并且需要将数据追加到现有数据中，这将非常有用。假设主键被包含在内，它可能与具有相同主键但不是同一对象的现有对象冲突。这可能导致丢失或更改数据，从而产生不理想的结果。
- en: 'Follow these steps to use the `--natural-primary` option:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 `--natural-primary` 选项：
- en: Make sure you are inside your project's root directory, the same folder where
    your `manage.py` file is located. Then, open a command-line window or terminal
    and activate your virtual environment, but do not run your project at this time.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你位于项目的根目录中，即你的 `manage.py` 文件所在的文件夹。然后，打开命令行窗口或终端，激活你的虚拟环境，但在此时不运行你的项目。
- en: 'Execute the following `dumpdata` command, specifying the `seller` table found
    in the `chapter_3` application:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 `dumpdata` 命令，指定 `chapter_3` 应用程序中找到的 `seller` 表：
- en: '[PRE20]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A new file called `chapter_3_sellers_natural_primary.json` should have been
    created in your `/chapter_10/fixtures/` folder.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 应该在你的 `/chapter_10/fixtures/` 文件夹中创建一个名为 `chapter_3_sellers_natural_primary.json`
    的新文件。
- en: 'Inside that file, format the data so that you can read what is found in it.
    If you are using Visual Studio, right-click inside your document and select **Format
    Document** or copy and paste the data into the online tool found here: [https://jsonlint.com/](https://jsonlint.com/).'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该文件中，格式化数据，以便你可以阅读其中的内容。如果你正在使用 Visual Studio，请在文档内部右键单击并选择 **格式化文档**，或者将数据复制并粘贴到此处找到的在线工具中：[https://jsonlint.com/](https://jsonlint.com/)。
- en: 'Now, what you should see is the same exact data as in the previous subsection
    except all of the `"pk"` fields have been removed from your data, as shown:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该看到与上一个子节完全相同的数据，只是所有 `"pk"` 字段都已从你的数据中删除，如下所示：
- en: '![Figure 10.3 – dumpdata --natural-primary option'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.3 – `dumpdata --natural-primary` 选项'
- en: '](img/Figure_10.03_B17243.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.03_B17243.jpg)'
- en: Figure 10.3 – dumpdata --natural-primary option
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – `dumpdata --natural-primary` 选项
- en: You should also still be seeing the numeric foreign key values for all `Vehicles`
    of your `Sellers`, as shown earlier in *Figure 10.2*. This could prove problematic
    if we are dumping all data using the `--natural-primary` option. What could happen
    is a vehicle gets created in your new database with its own primary key that doesn't
    equal the foreign key specified. To overcome that problem, we should also use
    the `--natural-foreign` option, which we will discuss next.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你也应该仍然看到所有 `Vehicles` 的数值外键值，如之前在 *图 10.2* 中所示。如果我们使用 `--natural-primary` 选项导出所有数据，这可能会引起问题。可能发生的情况是，在新数据库中创建了一个具有自己的主键的车辆，该主键与指定的外键不匹配。为了克服这个问题，我们还应该使用
    `--natural-foreign` 选项，我们将在下一节中讨论。
- en: Using the --natural-foreign option
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 --natural-foreign 选项
- en: The `--natural-foreign` option will print out a string representation of all
    related objects rather than the numeric foreign key value of that object. We also
    need to write a new model class method on all of our related objects in order
    to format and structure the string representation of that object when used in
    this way. The output can differ from the `__str__()` method that we covered in
    [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations, and
    Inheritance*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`--natural-foreign` 选项将打印出所有相关对象的字符串表示形式，而不是该对象的数字外键值。我们还需要为所有相关对象编写一个新的模型类方法，以便在以这种方式使用时格式化和结构化该对象的字符串表示形式。输出可能与我们之前在
    [*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)，*模型、关系和继承* 中讨论的 `__str__()` 方法不同。'
- en: 'Follow these steps to add a new model method to your `Vehicle` model and then
    export your `Seller` data again using the `--natural-foreign` option:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将新的模型方法添加到你的 `Vehicle` 模型中，然后再次使用 `--natural-foreign` 选项导出 `Seller` 数据：
- en: 'Inside your existing `/chapter_3/models.py` file, in the existing `Vehicle`
    model class, add the following `natural_key()` method:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你现有的 `/chapter_3/models.py` 文件中，在现有的 `Vehicle` 模型类中，添加以下 `natural_key()` 方法：
- en: '[PRE21]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This method is reliant on the existing `full_vehicle_name()` method created
    in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations, and
    Inheritance*, in the subsection titled *Custom model method*. Please make sure
    that method exists in your `Vehicle` model class before proceeding with the next
    steps.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法依赖于在 [*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)，*模型、关系和继承* 中创建的现有 `full_vehicle_name()`
    方法，在标题为 *自定义模型方法* 的子节中。请确保在继续下一步之前，该方法存在于你的 `Vehicle` 模型类中。
- en: Make sure you are in your project root directory, the same folder where your
    `manage.py` file is located. Then, open a command-line window or terminal and
    activate your virtual environment, but do not run your project at this time.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你位于项目根目录中，即你的 `manage.py` 文件所在的文件夹。然后，打开一个命令行窗口或终端，激活你的虚拟环境，但在此时尚未运行你的项目。
- en: 'Execute the following `dumpdata` command, specifying all of the tables found
    in the `chapter_3` application:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 `dumpdata` 命令，指定 `chapter_3` 应用程序中找到的所有表：
- en: '[PRE22]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A new file called `chapter_3_sellers_natural_foreign.json` should have been
    created in your `/chapter_10/fixtures/` folder.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 应该在你的 `/chapter_10/fixtures/` 文件夹中创建一个名为 `chapter_3_sellers_natural_foreign.json`
    的新文件。
- en: 'Inside that file, format the data so that you can read what is found in it.
    If you are using Visual Studio, right-click inside your document and select **Format
    Document** or copy and paste the data into the online tool found here: [https://jsonlint.com/](https://jsonlint.com/).'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该文件中，格式化数据，以便你可以阅读其中的内容。如果你使用 Visual Studio，在文档中右键单击并选择 **格式化文档**，或者将数据复制并粘贴到此处找到的在线工具中：[https://jsonlint.com/](https://jsonlint.com/)。
- en: 'What you should see now is something similar to the following screenshot, where
    the vehicles list is no longer represented by numbers; it now shows the string
    returned by the `natural_key()` method that we created:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到类似于以下截图的内容，其中车辆列表不再由数字表示；现在它显示了由我们创建的 `natural_key()` 方法返回的字符串：
- en: '![Figure 10.4 – dumpdata --natural-foreign option'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.4 – `dumpdata` 的 `--natural-foreign` 选项'
- en: '](img/Figure_10.04_B17243.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.04_B17243.jpg)'
- en: Figure 10.4 – dumpdata --natural-foreign option
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – `dumpdata` 的 `--natural-foreign` 选项
- en: If you see duplicate string entries, as you do in the proceeding screenshot,
    this is because the natural key string representation uses data from models that
    happen to have the exact same value in this case, even though they're different
    objects. You may want to go back and configure the `natural_key()` method to return
    something more unique.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到重复的字符串条目，就像你在前面的截图中所看到的那样，这是因为自然键字符串表示形式使用了在这种情况下恰好具有相同值的数据模型，尽管它们是不同的对象。你可能想回去配置
    `natural_key()` 方法，使其返回更独特的内容。
- en: You are welcome to create a `natural_key()` method for every model that exists
    in the `chapter_3` app and then rerun any combination of these commands over again
    for practice. Inside the `/chapter_10/fixtures/` folder of the code provided with
    this book are many different fixture documents that have been pre-generated for
    you, all using the initial data provided in the `chapter_3.json` fixture file.
    Inside the `/chapter_10/readme.md` file, you can find a list of commands that
    extend the examples provided in this chapter. Each of the commands provided generates
    a different `chapter_10` fixture file.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: You can combine options, such as combining `--natural-foreign --natural-primary`
    within a single command. Doing so would produce the results found in *Figure 10.4*
    without the `"pk"` field present.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's practice importing data with the `loaddata` Django management command.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Importing data from a data fixture
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Importing data from a fixture is done using the `loaddata` Django management
    command. As long as data exists in one of the four file formats, JSON, JSONL,
    XML, or YAML, it can be imported using this command. Data can be imported even
    if it was not exported from a Django project. The `loaddata` management command
    does not have as many options as the `dumpdata` command uses but they do share
    most of the same options.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: We have been using this command throughout most of this book to ensure that
    we have test data available when working with the exercises of previous chapters.
    Instead of going through examples of how to use this command in depth, we will
    briefly remind ourselves how it is used and then describe each of the options
    that are available and what they are used for.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Using the importdata command
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to practice loading the `/chapter_10/fixtures/chapter_3_sellers.json`
    fixture file that we created earlier in this chapter. If we are successful, we
    should see no change in our data because we are importing the same data, overwriting
    itself. You can practice changing field values and/or adding new objects to your
    file before importing if you wish to see data change in your database management
    tool:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you are inside your project's root directory, the same folder where
    your `manage.py` file is located. Then, open a command-line window or terminal
    and activate your virtual environment, but do not run your project at this time.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following `loaddata` command, telling Django to load only the `chapter_3_sellers.json`
    fixture:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Each of the options available and what they are used for are listed here:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '`--app` – used to tell Django to search for the fixture file in only the app
    directory specified using this option, versus having Django search in every app
    directory. This is sometimes important if you have two fixture files with the
    same name that exist in two different Django app directories.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--database` – tells Django to use a database that is configured in your `settings.py`
    file that is not the default database specified. Django uses the name you provide
    to identify that database in your `settings.py` file. This can also be used with
    the `dumpdata` command.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--format` – used to tell Django to use a format other than the default JSON
    format when importing the data file provided.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--exclude`, `-e` – used to tell Django to omit the `app_name` or `model_name`
    provided from the data that you are importing.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--ignorenonexistent`, `-i` – used to omit specific fields or models that may
    have been removed since the time the fixture file was created.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's begin working with performance boosters next.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Using the select_related() method
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `select_related()` method is used as a performance booster on queries pertaining
    to all related `ForeignKey` and `OneToOneField` relationships. This method is
    primarily used for obtaining the data of single objects that relate to a parent
    object. This method will not work on `ManyToManyField` relationships. On the SQL
    level, this method generally uses a left outer join to look up related data. To
    learn more about the `select_related()` method in its entirety, visit [https://docs.djangoproject.com/en/4.0/ref/models/querysets/#select-related](https://docs.djangoproject.com/en/4.0/ref/models/querysets/#select-related).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will monitor the performance of a page that displays a list of vehicles
    and the details about each vehicle, including related field data. Use the following
    subsections to create the required view class, template, and URL pattern to demonstrate
    this concept in action.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Creating the view
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create your `VehicleView` class:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `/chapter_10/views.py` file, add the following `VehiclesView` class
    and `import` statements:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this view class, we are telling Django to use the `/chapter_10/vehicles.html`
    file as the template, which we will create soon.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `get()` method to your `VehiclesView` class:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: To explain what this `get()` method is doing, we are performing an `all()` query
    on the `Vehicle` model object. If no vehicles are found, we then raise an `Http404`
    not-found response. If vehicles are found, we then return a `TemplateResponse`
    with the vehicles QuerySet provided as context into the template that is rendered.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: The query performed in the `get()` method is not currently performance boosted.
    Jump ahead to the subsection titled *First demo* of this chapter to see the performance-boosted
    query.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Let's build the template next.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Building the template
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create your vehicles list template file:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `vehicles.html` in the `/chapter_10/templates/chapter_10/`
    directory. Inside this file, add the following code:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `{% load %}` tag imports the `templatetags` file that we created in [*Chapter
    4*](B17243_04_ePub.xhtml#_idTextAnchor116), *URLs, Views, and Templates*, in the
    subsection titled *Custom tags and filters*. If you do not have the `chapter_4.py`
    file created at this time, just remove `chapter_4` from the `{% load %}` tag in
    the preceding code block and remove `|vehicle_make` shown in the code block in
    *step 2*.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'In that same file, just before the closing `</body>` tag, add the following
    conditional and `for` loop, which will populate your page with the information
    shown for each `vehicle` in the `vehicles` QuerySet:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding conditional statement will check to see whether there are any
    vehicles in the `vehicles` QuerySet object. Even though we are doing this with
    the try/except statement in the view class, it is still good practice to do this
    in the template just in case there are no exception handlers set in the view class/method
    to check for when an object is not found. We are displaying all of the field data
    that exists for each object. The `Engine` and `VehicleModel` data shown in the
    preceding code block are the related objects that we will monitor our performance
    on.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Let's map the URL pattern that we need next.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Mapping the URL pattern
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these step to map the URL pattern that we will be using to access this
    test page:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `/chapter_10/urls.py` file, add the following path to the `urlpatterns`
    list:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The path that we just mapped to the `VehiclesView` class will point to the URL
    http://localhost:8000/all-vehicles/.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's inspect the performance of the vehicles listing page with the DjDT.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: First demo
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to view the vehicles listing page and inspect its database
    query performance with the DjDT:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Make sure your project is running in your virtual environment and navigate to
    the URL `http://localhost:8000/all-vehicles/`. If you are using the data provided
    with the `chapter_3` app fixture, you should see at least seven sets of vehicles,
    each separated by a solid horizontal line.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the DjDT and look at the **SQL** section. You should see at least **15
    queries**, as shown in the following screenshot:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Query without the select_related() method'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.05_B17243.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.5 – Query without the select_related() method
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in your `/chapter_10/views.py` file, under the `get()` method of the `VehiclesView`
    class, change your query to the one highlighted in the following snippet,where
    we are adding the `select_related()` method to the query that we last used:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Inside the `select_related()` method, we are telling Django to grab the related
    `vehicle_model` and `engine` field data.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'Refresh the page at http://localhost:8000/all-vehicles/ and inspect the **SQL**
    section of the DjDT one more time. This time, you should only see at least **1
    query**, as shown in the following screenshot:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Query with the select_related() method'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.06_B17243.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.6 – Query with the select_related() method
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, with this particular set of data, we were able to shave about
    14 SQL query operations off of this search task. This also shaved off 10.16 ms
    from the original time that it took. While 10.16 ms may seem very small, remember,
    we only have about a dozen records that pertain to this particular dataset; imagine
    the difference in a dataset with a few hundred thousand records. The time adds
    up.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: When we open the `LEFT OUTER JOIN` operations to obtain all related objects.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Inspecting the select_related() query'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.07_B17243.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.7 – Inspecting the select_related() query
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what the `prefetch_related()` method does next.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Using the prefetch_related() method
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `prefetch_related()` method is used as a performance booster on queries
    pertaining to `ManyToManyField` relationships. This method can also be used for
    `ForeignKey` and `OneToOneField` relationships and allows for forward and backward
    lookups, as we will soon practice doing. On the SQL level, this method will generally
    use a WHERE or INNER JOIN statement to perform lookup operations. Unlike the `select_related()`
    method, the `prefetch_related()` method will perform a separate SQL query for
    each of the related sets of objects. For example, if we looked up a `Seller` and
    wanted the related `Vehicles` and their related `VehicleModel` and `Engine` objects,
    then Django would perform four separate queries to look up all the related data.
    To learn more about the `prefetch_related()` method in its entirety, visit [https://docs.djangoproject.com/en/4.0/ref/models/querysets/#prefetch-related](https://docs.djangoproject.com/en/4.0/ref/models/querysets/#prefetch-related).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: The following are two exercises, related to the *vehicles view* and the *sellers
    view*, to practice using the `prefetch_related()` method in different ways.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Vehicles view
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will modify the existing `VehiclesView` class that we created
    in the *Using the select_related() method* section of this chapter. What we did
    in that exercise was created a page that displayed all of the vehicles that are
    in our system and then performance boosted how we looked up the related `VehicleModel`
    and `Engine` objects. Using the `prefetch_related()` method, we will look up the
    related `Seller` object to display who is selling that particular vehicle.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Use the following subsections to prepare your template for this demonstration.
    The view and URL pattern will remain the same as before.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Checking the view
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Leave your existing `VehiclesView` class the same as before, where it is using
    the performance-boosted query from the last demonstration, as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We will modify this soon, but we first want to monitor how displaying the `seller`
    object in the template will change the performance-boosted query that we have
    now.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the template
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to modify your vehicles list template:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `/chapter_10/vehicles.html` file, add the following highlighted code,
    just above the `<br /><hr />` line and below your last `vehicle` detail item:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'It is important to note that the name used to access a `seller`, as in `vehicle_sellers`
    in `vehicle.vehicle_sellers.all`, is set on the `vehicles` field of the `Seller`
    model class, using the `related_name` argument. Make sure, in your `/chapter_3/models.py`
    file, under the `Seller` model class, that the `vehicles` field is using the arguments
    and values highlighted in the following snippet:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Let's see how this changes our performance now.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Second demo
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to see how these changes affect the output of the **SQL**
    tab in the DjDT:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Make sure your project is running in your virtual environment and navigate to
    or refresh the URL `http://localhost:8000/all-vehicles/` one more time.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inspect the `select_related()` method. Instead, we are now seeing at least
    **8 queries**, as shown in the following screenshot:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Query with the select_related() method showing related seller'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.08_B17243.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.8 – Query with the select_related() method showing related seller
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: We are seeing seven extra queries in our search now, one extra for each seller
    that relates to all seven of the vehicles found.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `/chapter_10/views.py` file, in the same `VehiclesView` class, change
    the query to the one shown in the following code snippet:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We just added the `prefetch_related('vehicle_sellers')` method to the query
    that we had before, keeping the previous `select_related()` operation. Make sure
    you are following proper Python indentation where this is used. There is limited
    room to display this properly in the preceding example.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'Refresh the URL `http://localhost:8000/all-vehicles/` one more time and inspect
    the **SQL** section of the DjDT one more time. You should now see at least **2
    queries**, as shown in the following screenshot:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Query using both the select_related() and prefetch_related()
    methods'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.09_B17243.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.9 – Query using both the select_related() and prefetch_related() methods
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 'If we inspect the `prefetch_related()` method added the **INNER JOIN** and
    **WHERE** lookup, as shown in the following screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Inspecting both the select_related() and prefetch_related()
    queries'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.10_B17243.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.10 – Inspecting both the select_related() and prefetch_related() queries
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: We can see from before that Django was performing an additional lookup for each
    of the `vehicle_sellers` objects that it was seeking to display the username of,
    on your page. That was how we wound up with eight queries after adding the `{%
    for seller in vehicle.vehicle_sellers.all %}` loop to the `/chapter_10/vehicles.html`
    template file. When we added the `prefetch_related()` method to the query operation
    in the `VehiclesView` class, it just added one extra lookup operation that retrieved
    all seven of the `vehicle_sellers` objects that pertain to this dataset, resulting
    in the two queries that we have now and reducing the excess. Adding more field
    lookups and using context in multiple places within your template file can sometimes
    increase your query count.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's apply the `prefetch_related()` method to a sellers listing page
    and see how it behaves following a lookup in the opposite direction of how we
    used it here.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Sellers view
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will create a new URL pattern, view class, and template
    that will display a list of sellers and the related vehicles that they are selling.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Use the following subsections to create the required view class, template, and
    URL pattern needed to build the sellers listing page.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Creating the view
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to create your `SellersView` class:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `/chapter_10/views.py` file, add the following `SellersView` class
    and `import` statements:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In this view class, we are telling Django to use the `/chapter_10/sellers.html`
    file as the template, which we will create soon. We are also using the same imports
    as before and then adding the `Seller` model class as a new import.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `get()` method to your `SellersView` class:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `get()` method is structured the same as the `VehiclesView` class. The only
    difference is that we are using the `Seller` model class to perform a query on.
    Again, this query is not currently performance boosted; we will do that after
    we take a measurement of this query operation.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Let's build the template next.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Building the template
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to build the sellers listing page template:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `sellers.html` in the `/chapter_10/templates/chapter_10/`
    directory. Inside this file, add the following code:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `{% load %}` tag imports the `templatetags` file that we created in [*Chapter*
    *4*](B17243_04_ePub.xhtml#_idTextAnchor116), *URLs, Views, and Templates* in the
    subsection titled *Custom tags and filters*. If you do not have the `chapter_4.py`
    file created at this time, just remove `chapter_4` from the `{% load %}` tag in
    the preceding code block and remove `|vehicle_make` where it is shown in *step
    3*.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: The code of this book also provides additional CSS class styles. You can find
    those styles in the same file found with the code of this book and copy and paste
    them into your document to view these objects in a more organized way. This is
    not a necessary step to proceed.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'Just before the closing `</body>` tag, add the following conditional and `for`
    loop, which will populate your page with the information for each `seller` in
    the `sellers` QuerySet:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Just after the `<br /><hr /><br />` code snippet line, insert the following
    conditional and `for` loop:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The logic here is pretty much the same as the vehicles listing page that we
    previously built. We added an additional layer of looping inside the `sellers`
    loop that loops through the `vehicles` related to each `seller`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Let's map the URL pattern that we will need next.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Mapping the URL pattern
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take the following step to map the URL pattern that we will be using to access
    this listing page.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `/chapter_10/urls.py` file, add the following path to your `urlpatterns`
    list:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The path that we just mapped to the `SellersView` class will point to the URL
    http://localhost:8000/all-sellers/.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Let's inspect the performance of the sellers listing page with the DjDT next.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Third demo
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to view the sellers listing page and inspect its database
    query performance with the DjDT:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Make sure your project is running in your virtual environment and navigate to
    the URL http://localhost:8000/all-sellers/. If you are using the data provided
    with the `chapter_3` app fixture, you should see at least one set of `seller`
    data and seven `vehicles` for the first `seller`.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have been following along with this book, you should have about three
    `sellers` in your database as a result of the exercises performed in previous
    chapters. Only one seller was provided in the `chapter_3` fixture. For the performance
    results shown in the following steps, assume that you have three `sellers` and
    seven `vehicles`, as your actual data may vary.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the DjDT and look at the **SQL** tab. You should see at least **19 queries**,
    as shown in the following screenshot:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.11 – Sellers list page not performance boosted'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.11_B17243.png)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.11 – Sellers list page not performance boosted
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: There are so many queries being executed because Django is looking up each vehicle
    and each related `vehicle_model` and `engine` over and over again. The conditional
    that we wrote `{% if seller.vehicles.all %}`, checking if `vehicles` exist, and
    also added a single query to the page performance.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in your `/chapter_10/views.py` file, under the `get()` method of the `SellersView`
    class, change the query to the one highlighted in the following code snippet,
    where we are adding the `prefetch_related()` method to what we had before:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Inside the `prefetch_related()` method, we are telling Django to grab the related
    `vehicles` and then, in a separate action, the related `vehicle_model` and `engine`
    of each `vehicle` object. Whenever we need to specify other related fields, as
    we are doing in the preceding code block, we use a double underscore, `__`, to
    navigate up or down in a set of relationships. Please make sure you are following
    proper Python indentation where this is used. There is limited room to display
    this properly in the example shown previously.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'Refresh the URL http://localhost:8000/all-sellers/ one more time and inspect
    the **SQL** tab of the DjDT one more time. You should now see at least **4 queries**,
    as shown in the following screenshot:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Sellers list page performance boosted'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.12_B17243.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.12 – Sellers list page performance boosted
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: We also saved 6.95 ms of time using the performance-boosted method with this
    query lookup task. If we inspect the `Seller` objects, one for the `Vehicle` objects,
    one for the `VehicleModel` objects, and the last for the `Engine` objects. Django
    used a combination of `WHERE` clauses and `INNER JOIN` operations to retrieve
    the related data.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.13 – Inspecting the Sellers list page queries'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.13_B17243.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.13 – Inspecting the Sellers list page queries
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Django also provides a `Prefetch()` class that can be used to perform even more
    complex queries with performance-boosted capabilities. Next, let's use this class
    to perform advanced filtering of the `vehicles` that relate to a `seller`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Using the Prefetch() class
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Prefetch()` class that is provided in the `django.db.models` library is
    used to control how a `prefetch_related()` operation is performed. For instance,
    we will use it to filter and show only `vehicles` that are of the `VehicleModel`
    that equals `"Blazer LT"`. We can also prefetch all related objects when performing
    filters in this way. To learn about how to use this class in depth, visit [https://docs.djangoproject.com/en/4.0/ref/models/querysets/#prefetch-objects](https://docs.djangoproject.com/en/4.0/ref/models/querysets/#prefetch-objects).
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Use the following subsections to prepare your view class and template for this
    demonstration. The URL pattern will remain the same as the demonstration found
    in the *Sellers view* subsection of this chapter.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the view
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to modify your existing `SellersView` class for this next
    exercise:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `/chapter_10/views.py` file, add the following `import` statement,
    preferably before the existing `import` statements:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In the `SellersView` class found inside this file, change your query statement
    to the one shown in the following code snippet:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Please make sure you are following proper Python indentation where this is used.
    There is limited room to display this properly in the preceding example.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: We are writing our query statement similar to what we wrote before. What we
    did differently this time is placed the `Prefetch()` class inside the `prefetch_related()`
    method, as the first argument of that method. The `Prefetch()` class accepts three
    arguments itself. The first is the lookup argument, which is usually a field but
    it can also be used to traverse relationships upstream and downstream using the
    double underscore, `__`, in the string. The second and third arguments are optional
    and do not have to be in the exact order. The `to_attr` argument is used to store
    the resulting QuerySet as a list of objects with the name specified as its value.
    The QuerySet argument is used to perform a specific query on the subset of those
    items. In the preceding example, we performed the `filter()` operation, searching
    only for vehicles with a `vehicle_model__name` of `"Blazer LT"`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: After the `Prefetch()` class, in the same `prefetch_related()` method that we
    are using previously, we added two more field lookups, those being the `filtered_vehicles__vehicle_model`
    and `filtered_vehicles__engine` objects. This will prefetch the related objects
    pertaining to the custom filtered list that we just created.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to modify our existing template file in order to work with the
    `filtered_vehicles` list of objects.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the template
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these step to modify your existing sellers listing template file to
    work with the `filtered_vehicles` list that was created:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: 'In your existing `/chapter_10/sellers.html` file, change the two lines where
    `seller.vehicles.all` is used to now say `seller.filtered_vehicles`, as shown:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: That's all that we need to modify. Let's see how this affected our performance
    next.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Fourth demo
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to view the sellers listing page and inspect its database
    query performance using the `Prefetch()` class approach to how a query operation
    is performed:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Refresh the URL http://localhost:8000/all-sellers/ in your browser.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the DjDT and look at the **SQL** tab. You should see at least **4 queries**,
    as shown in the following screenshot:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Sellers list page using the Prefetch class'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.14_B17243.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.14 – Sellers list page using the Prefetch class
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: 'This should also be the same number of queries that we saw in our previous
    example, shown in *Figure 10.12*. The only difference in this dataset is that
    we see five `vehicles` under the first `seller` on the page, whereas before, we
    had seven `vehicles` shown. The results only display the **Blazer LT** vehicles
    now, as shown in the following screenshot:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.15 – Sellers list page using the Prefetch class results'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.15_B17243.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.15 – Sellers list page using the Prefetch class results
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: While the number of results may differ, the number of queries that are executed
    remains the same. With this approach, we can define a very granular search query
    that is performance boosted.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We were able to conclude our journey in how to use Django to build enterprise-level
    systems by learning how to import and export data and apply performance-boosting
    tricks to all query operations. Knowing how to work with data is just as important
    as building the data siloes that they reside in. When you are working with existing
    systems, there is always the need to export the existing data from an old system
    and import that data into your new system. We now know how that is done. We can
    also combine this knowledge with the skills learned in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037),
    *Project Configuration*, in the subsection titled *Heroku database push/pull operations*
    to work with data in your remote testing and production environments as well.
    Use each tool as needed to perform different tasks throughout your project's life
    cycle.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: The performance-boosting methods that were introduced in this chapter are intended
    to be applied to any query operation. Refer to the topics discussed throughout
    [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations, and
    Inheritance*, to learn more about how to structure your data and perform other
    query operations. In that same chapter, you can also apply performance boosters
    where queries are made inside of model managers.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: There is a wealth of knowledge, tips, and tricks that relate to the world of
    Django that were not covered in this book. I hope you enjoyed learning what you
    have read and practiced so far and I hope that you continue on your journey to
    learn even more. Use the links, resources, and references to packages and tools
    scattered throughout this book to expand your learning beyond what has been given
    to you. Feel free to reach out to me via any of the contact methods provided if
    you have questions, would like to point out an error in this book, or share a
    compliment. While I dedicated a lot of time and energy to writing this book and
    checking and then re-checking my work, we are all human and mistakes are bound
    to slip through the cracks. I would also love to hear about what marvels you created
    as a result of reading this book. Thank you all for taking the time to read this!
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
