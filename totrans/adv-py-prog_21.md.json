["```py\n    import copy\n    ```", "```py\nfor key in kwargs:\n    setattr(self, key, kwargs[key])\n```", "```py\nclass Website: \n    def __init__(self, name, domain, description, \\\n      author, **kwargs): \n        '''Examples of optional attributes (kwargs): \n           category, creation_date, technologies, \\\n             keywords.\n        ''' \n        self.name = name \n        self.domain = domain \n        self.description = description\n        self.author = author\n\n        for key in kwargs:\n            setattr(self, key, kwargs[key])\n\n    def __str__(self): \n        summary = [f'Website \"{self.name}\"\\n',] \n\n        infos = vars(self).items()\n        ordered_infos = sorted(infos)\n        for attr, val in ordered_infos:\n            if attr == 'name':\n                continue\n            summary.append(f'{attr}: {val}\\n')\n\n        return ''.join(summary)\n```", "```py\nclass Prototype: \n    def __init__(self): \n        self.objects = dict() \n\n    def register(self, identifier, obj): \n        self.objects[identifier] = obj \n\n    def unregister(self, identifier): \n        del self.objects[identifier] \n\n    def clone(self, identifier, **attrs): \n        found = self.objects.get(identifier) \n        if not found: \n            raise ValueError(f'Incorrect object \\\n              identifier:{identifier}') \n        obj = copy.deepcopy(found) \n        for key in attrs:\n            setattr(obj, key, attrs[key])\n        return obj\n```", "```py\n    def main(): \n        keywords = ('python', 'data', 'apis', \\\n          'automation')\n        site1 = Website('ContentGardening', \n                domain='contentgardening.com', \n                description='Automation and data-driven \\\n                  apps', \n                author='Kamon Ayeva',\n                category='Blog',\n                keywords=keywords)\n\n        prototype = Prototype() \n        identifier = 'ka-cg-1' \n        prototype.register(identifier, site1)\n\n        site2 = prototype.clone(identifier, \n                name='ContentGardeningPlayground',\n                domain='play.contentgardening.com', \n                description='Experimentation for \\\n                  techniques featured on the blog', \n                category='Membership site',\n                creation_date='2018-08-01')    \n    ```", "```py\n        for site in (site1, site2): \n            print(site)\n        print(f'ID site1 : {id(site1)} != ID site2 : \\\n          {id(site2)}')\n    ```", "```py\nWebsite \"ContentGardening\"\nauthor: Kamon Ayeva\ncategory: Blog\ndescription: Automation and data-driven apps\ndomain: contentgardening.com\nkeywords: ('python', 'data', 'apis', 'automation')\nWebsite \"ContentGardeningPlayground\"\nauthor: Kamon Ayeva\ncategory: Membership site\ncreation_date: 2018-08-01\ndescription: Experimentation for techniques featured on the \nblog\ndomain: play.contentgardening.com\nkeywords: ('python', 'data', 'apis', 'automation')\nID site1 : 140263689073376 != ID site2 : 140263689058816\n```", "```py\n    import urllib.parse\n    import urllib.request\n    class URLFetcher:\n        def __init__(self):\n            self.urls = []\n\n        def fetch(self, url):\n            req = urllib.request.Request(url)\n            with urllib.request.urlopen(req) as response:\n                if response.code == 200:\n                    the_page = response.read()\n                    print(the_page)\n\n                    urls = self.urls\n                    urls.append(url)\n                    self.urls = urls\n    ```", "```py\nf1 = URLFetcher()\nf2 = URLFetcher()\nprint(f1 is f2)\n```", "```py\nprint(URLFetcher() is URLFetcher())\n```", "```py\nclass SingletonType(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super \\\n              (SingletonType,cls).__call__(*args, \\\n                 **kwargs)\n        return cls._instances[cls]\n```", "```py\n    class URLFetcher(metaclass=SingletonType):\n        def fetch(self, url):\n            req = urllib.request.Request(url)\n            with urllib.request.urlopen(req) as response:\n                if response.code == 200:\n                    the_page = response.read()\n                    print(the_page)\n\n                    urls = self.urls\n                    urls.append(url)\n                    self.urls = urls\n        def dump_url_registry(self):\n            return ', '.join(self.urls)\n    if __name__ == '__main__':\n        print(URLFetcher() is URLFetcher())\n    ```", "```py\n    def main():\n        MY_URLS = ['http://google.com', \n                   'http://python.org',\n                   'https://www.python.org/error',\n                   ]\n        print(URLFetcher() is URLFetcher())\n        fetcher = URLFetcher()\n        for url in MY_URLS:\n            try:\n                fetcher.fetch(url)\n            except Exception as e:\n                print(e)\n\n        print('-------')\n        done_urls = fetcher.dump_url_registry()\n        print(f'Done URLs: {done_urls}')\n    ```", "```py\n[output truncated]\n</script>\\n    <script>window.jQuery || \ndocument.write(\\'<script src=\"/static/js/libs/jquery-\n1.8.2.min.js\"><\\\\/script>\\')</script>\\n    <script \nsrc=\"//ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery\n-ui.min.js\"></script>\\n    <script>window.jQuery || \ndocument.write(\\'<script src=\"/static/js/libs/jquery-ui-\n1.12.1.min.js\"><\\\\/script>\\')</script>\\n\\n    <script \nsrc=\"img/masonry.pkgd.min.js\"></script>\\n    \n<script src=\"/static/js/libs/html-\nincludes.js\"></script>\\n\\n    <script \ntype=\"text/javascript\" src=\"/static/js/main-\nmin.dd72c1659644.js\" charset=\"utf-8\"></script>\\n    \\n\\n    \n<!--[if lte IE 7]>\\n    <script type=\"text/javascript\" \nsrc=\"img/IE8-min.8af6e26c7a3b.js\" \ncharset=\"utf-8\"></script>\\n    \\n    \\n    <![endif]--\n>\\n\\n    \n<!--[if lte IE 8]>\\n    <script type=\"text/javascript\" \nsrc=\"/static/js/plugins/getComputedStyle-\nmin.d41d8cd98f00.js\" charset=\"utf-8\"></script>\\n    \\n    \n\\n    <![endif]-->\\n\\n    \\n\\n    \\n    \n\\n\\n</body>\\n</html>\\n'\nHTTP Error 404: Not Found\n-------\nDone URLs: http://google.com, http://python.org\n```"]