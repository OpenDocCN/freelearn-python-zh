- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python’s Integration with Blender
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Blender accepts code instructions in the same way as it interacts: via a graphical
    user interface.. That allows artists and studios to implement their own features
    and automation.'
  prefs: []
  type: TYPE_NORMAL
- en: Python, a highly extensible programming language with low barriers to entry,
    is widely used in computer graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Though Blender’s core is written in C and C++, menus and graphic elements use
    Python. That allows custom and factory functionalities to share the same look
    and feel.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll learn how to run Python commands in Blender and where
    to look for their outcome. We will also see where a history of past instructions
    is found and how to use that to our advantage. Lastly, we will introduce a code
    editor and a version control system and see how they help make our work easier.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand how a programmer works and why
    it is not so different from using software in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The scripting workspace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides Blender 3.3+ or in this case, Blender 3.3 ([https://www.blender.org/download/lts/3-3](https://www.blender.org/download/lts/3-3)),
    you will require the following free tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code, available at [https://code.visualstudio.com/Download](https://code.visualstudio.com/Download).
    Version 1.66 is used in this book, and is available at [https://code.visualstudio.com/updates/v1_66](https://code.visualstudio.com/updates/v1_66)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git (optional), found at [https://git-scm.com/downloads](https://git-scm.com/downloads)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You are encouraged to write your own code; the examples for this chapter can
    be found at the following URL: [https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch1](https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch1).'
  prefs: []
  type: TYPE_NORMAL
- en: Since it is a free, open source software, there are plenty of ways to install
    Blender. We are going to look at the most common install solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Blender
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The procedure for installing Blender varies with the operating system. Like
    most applications, installers for *Microsoft Windows* and *Apple macOS* are provided.
    Also, portable versions, such as archives that can be uncompressed and executed
    everywhere in the system, are available for *Linux* and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: The version of Blender used in this book, 3.3, might differ from other versions
    already installed on the system. In that case, we can install different versions
    of Blender on the same machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Blender on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are more ways to install a program on Microsoft Windows: Windows Installer,
    *Microsoft Store*, and *using a portable archive*. While most application publishers
    choose one of those options, all of them are available for Blender.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing multiple versions via Windows Installer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most common way to install Blender on Windows is to download `.msi` file
    installs Blender. Before Blender 3.4, only one of the multiple installed versions
    was available in the **Start** menu.
  prefs: []
  type: TYPE_NORMAL
- en: If that is the case for you, the other versions can be accessed by navigating
    to the `Program Files` folder, usually `C:\Program Files\Blender Foundation`,
    using Windows Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can execute `blender.exe` directly from the `Blender 3.3` folder or use
    right-click > **New** > **Shortcut** in Windows Explorer and create a shortcut
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1: Multiple versions of Blender in Program Files](img/Figure_1.1_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: Multiple versions of Blender in Program Files'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, since version 3.3 is a *Long-term Support* version, it is also
    available in the Microsoft Store.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Blender from the Microsoft Store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The download page of Blender 3.3 provides a link to the Microsoft Store installer.
    Alternatively, we can start `blender` in the top bar. Once we get to the **Blender**
    page, we make sure that it’s published by **Blender Foundation** and click the
    **Get** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2: Installing Blender from the Microsoft Store](img/Figure_1.02_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2: Installing Blender from the Microsoft Store'
  prefs: []
  type: TYPE_NORMAL
- en: 'That will add a Blender 3.3 entry in the **Start** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3: Multiple versions in the Start menu](img/Figure_1.03_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: Multiple versions in the Start menu'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Store gives the advantage of always adding a shortcut for the installed
    version. If, for some reason, Microsoft Store is not an option, we can download
    a portable archive.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading a portable archive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid any application packaging, we can download a Windows portable `.zip`
    file, or a Linux `.``tar.xz` archive.
  prefs: []
  type: TYPE_NORMAL
- en: Portable versions can be used from any location of the system, even removable
    drives. We only need to extract the archive in a directory of choice via right-clicking
    -> `blender.exe` or `blender` executable in the unpacked folder.
  prefs: []
  type: TYPE_NORMAL
- en: Installing multiple versions on macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can download the `.dmg` packages for *Apple Intel* or *Apple Silicon* computers.
    Once downloaded, double-clicking the file will open the installer window. If another
    version of Blender is already present in the system, a prompt dialog will ask
    whether we want to keep both or replace the installed version with the new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting `Blender 3.3` using right-click -> **Rename** on the **Application**
    entry in the file manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4: Installing an additional version of Blender on macOS](img/Figure_1.4_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.4: Installing an additional version of Blender on macOS'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many other ways to install Blender: a link to stores such as *Steam*
    (Windows, macOS, or Linux) or *Snapcraft* (Linux only) is provided on the download
    page, not to mention the package manager of Linux distribution (*apt* on *Ubuntu*,
    *yum* on *CentOS*, and so on). It is worth mentioning that it is possible to build
    Blender from the source code, but that’s an advanced topic beyond the scope of
    this book.'
  prefs: []
  type: TYPE_NORMAL
- en: While this book sticks to version 3.3, the examples should work on future releases
    of the 3.x series with minor corrections at worst.
  prefs: []
  type: TYPE_NORMAL
- en: A future major release, such as Blender 4 or 5, is almost guaranteed to break
    compatibility with past scripts. Still, the knowledge from this book about best
    practices and thought patterns will stand the test of time.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have installed Blender on our system, we can dive into its scripting
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: The Scripting workspace – first steps with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A sequence of Python instructions is often referred to as a **script**. Likewise,
    the activity of producing Python code is usually called **Scripting**.
  prefs: []
  type: TYPE_NORMAL
- en: Blender’s interface consists of different **workspaces**. Each of them is a
    tab meant for a different activity. At the time of writing, the **Scripting**
    tab is the last on the right side of the screen. Clicking on it switches to the
    interface designed for Python users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most significant elements are the **Python console**, the **Info Log**,
    and the **Text Editor**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5: Blender scripting interface](img/Figure_1.05_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5: Blender scripting interface'
  prefs: []
  type: TYPE_NORMAL
- en: We will start our journey in Python by typing commands in the Python console.
  prefs: []
  type: TYPE_NORMAL
- en: The Python console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The console is an interactive terminal with a header that displays the current
    version of Python (`3.10.2`, at the time of writing) and a `>>>` prompt sign to
    advertise that it’s waiting for interactive text. All we need to do is hover the
    cursor on it and type an instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6: The Python console](img/Figure_1.6_B18375_New.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.6: The Python console'
  prefs: []
  type: TYPE_NORMAL
- en: “Hello World!” from the console
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The practice called *Hello World!* is a way to familiarize yourself with a new
    programming language. It’s about displaying the titular phrase using a command.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `print` function for that. Example code for the interactive
    console starts with the `>>>` prompt symbol. We don’t need to type that as well
    in the console: it is already there. We click on the console area and type `print("Hello
    World")`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then press *Enter*. The console output is displayed in a different color and
    doesn’t start with the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7: Displaying our output on the console](img/Figure_1.7_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.7: Displaying our output on the console'
  prefs: []
  type: TYPE_NORMAL
- en: We can use the Python console to query information about the Python version.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the Python release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The current version of Python can be displayed anytime using the `sys` module.
    We need to import this module and look for its `version` attribute. That takes
    the following two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The console prints out verbose information about the version in use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The three digits of the version number stand for *major*, *minor*, and *micro*
    versions. A different major release number implies heavy changes in the language
    syntax: *Python 3.0* is very different from any Python 2.x releases. A minor release
    introduces new features but doesn’t break compatibility with older code. A micro
    release doesn’t bring changes to the language; it consists of bug fixes and other
    forms of maintenance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes brought with each new Python version are available as *Release
    Notes* on the download page of the **Python** **Software Foundation**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.python.org/downloads/](https://www.python.org/downloads/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If our script relies on a feature introduced with a minor release, we can check
    the version numbers individually using `version_info`, as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Compared with other software, Blender follows the Python release cycle very
    tightly. This is done mostly to take advantage of the latest improvements in terms
    of performance and bug fixes.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the Blender release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The current Blender release can be checked in the graphical user interface or
    in Python scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the Blender release in the interface
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Starting from version 3.0, the most immediate place to check for the version
    number of Blender is in the lower-right corner of the window. In version 3.3,
    the version number is followed by the current time and frame set for the scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8: Blender version number in the status bar](img/Figure_1.08_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.8: Blender version number in the status bar'
  prefs: []
  type: TYPE_NORMAL
- en: Another way to display the version number is by clicking the Blender icon in
    the top-right corner of the menu bar and then selecting **About Blender** from
    the menu.
  prefs: []
  type: TYPE_NORMAL
- en: We can also get Blender’s version number via Python scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the Blender release in Python scripts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If our scripts rely on features from a specific version, they must be able
    to determine on which release of Blender it is running. That information is contained
    in the `bpy.app` module. We can display the current version by typing these lines
    in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In *Blender 3.3.2*, the console returns the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike `sys.version_info`, `bpy.app.version` doesn’t contain names, just numbers.
    Nevertheless, we can store them in variables using the Python syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can use `print` to display the single version numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A new major release of Blender brings drastic changes to the interface and workflow,
    while a minor release introduces new tools for animation or for generating images.
  prefs: []
  type: TYPE_NORMAL
- en: To display the information, we have used the `print` function. Since functions
    are the first step toward structured programming, we will have a better look at
    how they work and how we can change the `"Hello World!"` message to something
    else.
  prefs: []
  type: TYPE_NORMAL
- en: Invoking functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we use a *function*, we say that we *call* or *invoke* that function.
    To do that, we type its name, followed by parentheses. Between parentheses, there
    is the function’s *argument*, such as the input on which it operates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9: Function and argument in a Python script](img/Figure_1.09_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.9: Function and argument in a Python script'
  prefs: []
  type: TYPE_NORMAL
- en: When invoked, the `print` function reads the argument and displays it on a new
    line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `"Hello World!"` argument is a *string literal*: it can be any sequence
    of characters enclosed between quotation marks (`""`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can feed any other message to `print`; the output will vary accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10: Printing text in the Blender Python console](img/Figure_1.10_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.10: Printing text in the Blender Python console'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have gained confidence, we will look at some Blender commands.
  prefs: []
  type: TYPE_NORMAL
- en: The Info Log
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The user activity is displayed as Python commands in the log area, at the bottom
    left of the **Scripting** workspace. We can open Blender and perform the following
    operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the default cube in the Viewport via right-click -> **Delete**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Viewport top bar, click **Add** -> **Mesh** -> **Cylinder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Viewport top bar, click **Add** -> **Mesh** -> **UV Sphere**. We will
    find these three lines in the Info Log area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.11: History of actions in the Info Log area](img/Figure_1.11_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.11: History of actions in the Info Log area'
  prefs: []
  type: TYPE_NORMAL
- en: The entries of the Info Log are the Python commands triggered by our recent
    activity. We can copy those lines and use them in our scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Using the lines from the log
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Clicking or dragging with the left mouse button selects the log lines. We can
    copy them to the clipboard via right-click -> **Copy**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12: Copying Python commands from the Info Log](img/Figure_1.12_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.12: Copying Python commands from the Info Log'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can go back to the startup scene and paste them into the console:'
  prefs: []
  type: TYPE_NORMAL
- en: Restart Blender or click **File** -> **New** -> **General**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Scripting** workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Python console, right-click -> **Paste**, and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Executing those lines will delete the initial cube, then add two objects: the
    same steps run manually earlier. We will see how we can change their content and
    affect the outcome.'
  prefs: []
  type: TYPE_NORMAL
- en: Changing parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s not focus too much on the code for now: it will be clearer in the next
    chapter. Anyway, we might recognize a pattern from the `"Hello` `World!"` example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And at least one argument is self-explanatory in its purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`location=(x, y, z)` represents the 3D coordinates where a new object is added.
    We can change the last line and create our sphere just above the cylinder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s revert to the startup scene once more and paste our lines again, but
    before we press *Enter*, this time, we change the last zero to `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We have just run our first script. It deletes the selected objects and stacks
    two new shapes on top of each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13: Cylinder and Sphere primitives, created via Python](img/Figure_1.13_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.13: Cylinder and Sphere primitives, created via Python'
  prefs: []
  type: TYPE_NORMAL
- en: The Python console can execute code with immediacy but is not very practical
    for more than a few lines. We will now see how to run Python scripts as documents.
  prefs: []
  type: TYPE_NORMAL
- en: The Text Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the largest element in the **Scripting** workspace. It can be used for
    writing text and scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a new script, we click the **+ New** button in the top bar and create
    a new text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14: Creating a new text object in the Text Editor](img/Figure_1.14_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.14: Creating a new text object in the Text Editor'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s type some words, for instance, a more verbose version of *“Hello World!”*.
    Like many programmer editors, Blender displays the line numbers on the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.15_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.15: Writing scripts in the Text Editor'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the words have different colors according to their Python meaning: white
    for the function, yellow for the string, and red for the parenthesis. This feature
    is called **syntax highlighting** and gives useful visual feedback: the color
    of the words depends on their role in the programming language.'
  prefs: []
  type: TYPE_NORMAL
- en: Running text documents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the current text is a Python script, we can execute it from the Text Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Run Script** from the **Text** menu in the Text Editor menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look for the execution outcome info in the Info Log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.16: Executing scripts in the Text Editor](img/Figure_1.16_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.16: Executing scripts in the Text Editor'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Info Log confirms that something has happened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.17: The script execution mentioned in the Info Log](img/Figure_1.17_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.17: The script execution mentioned in the Info Log'
  prefs: []
  type: TYPE_NORMAL
- en: But we might be disappointed, as the printout text is apparently nowhere to
    be found!
  prefs: []
  type: TYPE_NORMAL
- en: The reason is that the output of the Text Editor goes straight to the **System
    Console**, the *operating system’s* command line.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, we can display it using **Window** ->**Toggle System Console** from
    Blender’s top bar. To read system messages on a Unix-based system (Linux or macOS),
    we must start Blender from a command line in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once brought up, **System Console** displays the output printed by the Text
    Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18: Displaying the System Console on Windows](img/Figure_1.18_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.18: Displaying the System Console on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default name for our text block is `Text`. It can be renamed by clicking
    on it. We’ll better add the `.py` suffix as an extension to make it clear that
    it’s a Python script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.19: Renaming text blocks in Blender](img/Figure_1.19_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.19: Renaming text blocks in Blender'
  prefs: []
  type: TYPE_NORMAL
- en: Copying the Python console as script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember the lines we entered in the Python console earlier? If we haven’t closed
    Blender or loaded a new scene, we can copy them to the *clipboard* at once.
  prefs: []
  type: TYPE_NORMAL
- en: From the **Console** menu in the Python console top bar, select **Copy** **as
    Script**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another text block using **Text** > **New** from the Text Editor menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the text a new name, such as `OurFirstScript.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the lines from the clipboard via right-click -> **Paste** in the text
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Looking at the Text Editor, it turns out that the full version of the script
    is a little bit longer than our three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.20: The Python console input copied to the Text Editor](img/Figure_1.20_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.20: The Python console input copied to the Text Editor'
  prefs: []
  type: TYPE_NORMAL
- en: The first five rows set up the console environment. They are executed behind
    the scenes when Blender starts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lines starting with a hash (`#`) are *comments*: they are ignored by Python
    and contain reminders or explanations meant for human readers.'
  prefs: []
  type: TYPE_NORMAL
- en: Our own instructions are respectively at lines **13**, **17**, and **21**. This
    script can be executed via **Text** -> **Run Script** as we did before or via
    the *Alt* + *P* keys combination.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting text files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The notepad icon lets us switch between different text blocks via a drop-down
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.21: Switching between text blocks in Blender](img/Figure_1.21_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.21: Switching between text blocks in Blender'
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting **Text** | **Save As…** from the editor menu bar saves the current
    text to disk. A new window lets us select a folder and confirm the filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.22: Saving the content of the Text Editor to file](img/Figure_1.22_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.22: Saving the content of the Text Editor to file'
  prefs: []
  type: TYPE_NORMAL
- en: Blender’s Text Editor is great for quick tests, but a programmer text editor
    is usually preferred for more serious tasks. We are going to use *Visual Studio
    Code* in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: External editor – Visual Studio Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Visual Studio Code** (**VS Code**), is a fast, multiplatform, free editor
    from Microsoft, available for Windows, macOS, and Linux. Using an external editor
    makes our code independent from a session of Blender. Also, a programmer text
    editor offers many utilities besides syntax highlighting.'
  prefs: []
  type: TYPE_NORMAL
- en: 'VS Code 1.66 is used in this book. It is a fast, lightweight editor available
    for most platforms, but there are plenty of alternatives – most notably, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Notepad++**: This is a fast but powerful editor for Windows, available at
    [https://notepad-plus-plus.org.](https://notepad-plus-plus.org%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyCharm**: This is a Python **integrated development environment** (**IDE**)
    by **JetBrains**. A free community version can be found at [https://www.jetbrains.com/pycharm.](https://www.jetbrains.com/pycharm%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LightTable**: This is an interesting open source editor, available at [http://lighttable.com.](http://lighttable.com%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sublime**: This is a commercial text editor, found at [https://www.sublimetext.com.](https://www.sublimetext.com%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most Linux distributions come with at least one decent, ready-to-use, text editor.
    We encourage you to experiment and find the text editor of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will set up VS Code for Python scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Pick the right studio!
  prefs: []
  type: TYPE_NORMAL
- en: '*VS Code* and *Visual Studio* have a similar name but are two different products
    from Microsoft. While VS Code is a programmer text editor, Visual Studio is a
    full development environment for advanced languages such as *C++*. While C++ projects
    may require a specific version of the building environment, it is safe to use
    any version of VS Code as long as Python is a supported language.'
  prefs: []
  type: TYPE_NORMAL
- en: Loading our scripts folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can load the folder that contains our script files using the `.py` file opens
    the script for editing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional Python support can be installed by clicking **Install** on the bottom-right
    notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.23: Our Python script in VS Code](img/Figure_1.23_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.23: Our Python script in VS Code'
  prefs: []
  type: TYPE_NORMAL
- en: Keeping Blender’s text blocks in sync
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a text file open in Blender is changed by another application, a red question
    mark appears to the left of the filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.24: Blender detects changes in a saved script](img/Figure_1.24_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.24: Blender detects changes in a saved script'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking the question mark displays the viable actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reload from disk**: This loads and displays the up-to-date file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Make text internal (separate copy)**: The displayed text is now part of the
    Blender session, no longer tied to any text file on disk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ignore**: Changes are ignored; Blender will still display the old text and
    keep reporting that it’s out of sync with the text saved on disk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To have additional help, we can add versioning to our files. That allows us
    to make changes without worrying about breaking things or losing our work.
  prefs: []
  type: TYPE_NORMAL
- en: Version control and backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Version control** helps to keep track of file changes, save snapshots of
    the code, and roll back to older versions if necessary. **Git** is the most used
    versioning system at present; it is free and integrated into most editors. In
    this section, we will use version control in combination with VS Code.'
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once Git is installed, it can be used from VS Code, by activating the **Source
    Control** tab using the *branch* icon on the left column bar. The **Initialize
    Repository** button adds versioning to our folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.25: Adding version control in VS Code](img/Figure_1.25_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.25: Adding version control in VS Code'
  prefs: []
  type: TYPE_NORMAL
- en: 'The icon will change and warn us about the presence of files. We click the
    **+** icon next to the filename to add them to versioning. In Git terminology,
    we are going to **Stage** the current changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.26: Staging changes in VS Code](img/Figure_1.26_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.26: Staging changes in VS Code'
  prefs: []
  type: TYPE_NORMAL
- en: 'The editor shows the before/after conditions of our files. We can add a message
    in the text field on the top left and click the *tick* icon. This will **Commit**
    our changes to the project history:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.27: Commit changes in VS Code](img/Figure_1.27_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.27: Commit changes in VS Code'
  prefs: []
  type: TYPE_NORMAL
- en: Making changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say we don’t want our script to delete the current objects. To do that,
    we delete line number **13**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When the file is saved, version control detects this change. We can stage that
    by clicking the `OurFirstScript.py` in the left column, VS Code highlights the
    current changes. We add a message for this new commit and click the **tick** button
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.28: Displaying changes in VS Code](img/Figure_1.28_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.28: Displaying changes in VS Code'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go back to the **Explorer** tab and select our script, we will see that
    a section called **Timeline** can be expanded: it contains a list of our commit
    messages. Selecting a commit displays the related changes, allowing us to restore
    old lines of code. Every change that is not committed can be easily undone using
    the *Revert* function.'
  prefs: []
  type: TYPE_NORMAL
- en: Reverting uncommitted changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s add some incorrect text at line **7** and save. If, for any reason, we
    cannot undo that, we can right-click our file in the **Version Control** tab and
    select **Discard Changes**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.29: Discarding uncommitted changes in VS Code](img/Figure_1.29_B18375.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.29: Discarding uncommitted changes in VS Code'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of version control can be underestimated at first but becomes
    vital in more complex projects. It’s a wide topic that goes beyond the scope of
    this book, but it’s important to grasp at least the basics of it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we gained confidence with *scripting* and introduced the fundamental
    tools for Python programming. You learned how to look for Python commands in the
    Blender log and execute them in different contexts, and how to set up a coding
    environment. We also learned how to keep track of our code and edits.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B18375_02.xhtml#_idTextAnchor033), we will refine our knowledge
    of Python. We will meet the most common entities and learn how to use the programming
    logic to write more useful scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do we display the sections of Blender that accept Python input?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we read the output and printout from Python execution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does Blender use Python to carry on the user actions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we look at Blender’s Python activity log?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we write scripts in Blender? Can we edit them in other applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How and in which tab can we initialize version control in VS Code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we access a script’s timeline in VS Code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
