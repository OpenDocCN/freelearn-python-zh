["```py\nimport mymesh\n```", "```py\nDraw = Blender.Draw\nTHORAXSEGMENTS = Draw.Create(3)\nTAILSEGMENTS = Draw.Create(5)\nLEGSEGMENTS = Draw.Create(2)\nWINGSEGMENTS = Draw.Create(2)\nEYESIZE = Draw.Create(1.0)\nTAILTAPER = Draw.Create(0.9)\n\nif not Draw.PupBlock('Add CreepyCrawly', [\n('Thorax segments:' , THORAXSEGMENTS, 2, 50,'Number of thorax segments'),\n('Tail segments:' , TAILSEGMENTS, 0, 50, 'Number of tail segments'),\n('Leg segments:' , LEGSEGMENTS, 2, 10, 'Number of thorax segments with legs'),\n('Wing segments:' , WINGSEGMENTS, 0, 10, 'Number of thorax segments with wings'),\n('Eye size:' , EYESIZE, 0.1,10, 'Size of the eyes'),\n('Tail taper:' , TAILTAPER, 0.1,10, 'Taper fraction of each tail segment'),]):\n   return\n```", "```py\nreg = Blender.Registry.GetKey('CreepyCrawlies',True)\ntry:\n   nthorax=reg['ThoraxSegments']\nexcept:\n   nthorax=3\ntry:\n   ntail=reg['TailSegments']\nexcept:\n   ntail=5\n... <similar code for other parameters> ...\n\nDraw = Blender.Draw\nTHORAXSEGMENTS = Draw.Create(nthorax)\nTAILSEGMENTS = Draw.Create(ntail)\nLEGSEGMENTS = Draw.Create(nleg)\nWINGSEGMENTS = Draw.Create(nwing)\nEYESIZE = Draw.Create(eye)\nTAILTAPER = Draw.Create(taper)\n\nif not Draw.PupBlock('Add CreepyCrawly', [\\\n... <identical code as in previous example> ...\nreturn\nreg={'ThoraxSegments':THORAXSEGMENTS.val,\n\t 'TailSegments' :TAILSEGMENTS.val,\n\t 'LegSegments' :LEGSEGMENTS.val,\n\t 'WingSegments' :WINGSEGMENTS.val,\n\t 'EyeSize' :EYESIZE.val,\n\t 'TailTaper':TAILTAPER.val}\nBlender.Registry.SetKey('CreepyCrawlies',reg,True)\n\n```", "```py\nfrom Blender import Window,Draw,BGL\n\ndef event(evt, val):\n    if evt == Draw.ESCKEY:\n       Draw.Exit() # exit when user presses ESC\n    return\n\ndef button_event(evt):\n    if evt == 1:\n       Draw.Exit() \n    return\n\ndef msg(text):\n    w = Draw.GetStringWidth(text)+20\n    wb= Draw.GetStringWidth('Ok')+8\n    BGL.glClearColor(0.6, 0.6, 0.6, 1.0)\n    BGL.glClear(BGL.GL_COLOR_BUFFER_BIT)\n    BGL.glColor3f(0.75, 0.75, 0.75)\n    BGL.glRecti(3,30,w+wb,3)\n    Draw.Button(\"Ok\",1,4,4,wb,28)\n    Draw.Label(text,4+wb,4,w,28)\n\ndef error(text):\n   Draw.Register(lambda:msg(text), event, button_event)\n```", "```py\nme=Blender.Mesh.New('Bug')\nme.verts.extend(verts)\nme.faces.extend(faces)\nscn=Blender.Scene.GetCurrent()\nob=scn.objects.new(me,'Bug')\nscn.objects.active=ob\n\nme.remDoubles(0.001)\nme.recalcNormals()\n```", "```py\ndef bridge_edgeloops(e1,e2,verts):\n\n    e1 = e1[:]\n    e2 = e2[:]\n    faces=[]\n\nif len(e1) == len(e2) and len(e1) > 0 :\n```", "```py\nfor a in e1:\n    distance = None\n    best = None\n    enot = []\n```", "```py\nwhile len(e2):\n    b = e2.pop(0)\n```", "```py\nd1 = (vec(verts[a[0]]) - vec(verts[b[0]])).length + \\\n(vec(verts[a[1]]) – vec(verts[b[1]])).length\n```", "```py\nd2 = (vec(verts[a[0]]) - vec(verts[b[1]])).length + \\\n(vec(verts[a[1]]) - vec(verts[b[0]])).length\nif d2<d1 :\n    b =(b[1],b[0])\n    d1 = d2\n```", "```py\nif distance == None or d1<distance :\n    if best != None:\n       enot.append(best)\n       best = b\n       distance = d1\n    else:\n       enot.append(b)\n       e2 = enot\n       faces.append((a,best))\n```", "```py\nreturn [(a[0],b[0],b[1],a[1]) for a,b in faces]\n```", "```py\nblender -P /full/path/to/barchart.py\n```", "```py\nblender barchart.blend -P barchart.py\n\n```", "```py\nimport sys\nprint sys.argv\n```", "```py\nblender -b barchart.blend -P barchart.py –- data.csv\n\n```", "```py\nif __name__ == '__main__':\n    w=World.New('BarWorld')\n    w.setHor([1,1,1])\n    w.setZen([1,1,1])\n\n```", "```py\ncsv = sys.argv[-1]\nif csv.endswith('.csv'):\n```", "```py\nsc=Scene.New('BarScene')\nsc.world=w\nsc.makeCurrent()\n```", "```py\ncenter = barchart(sys.argv[-1])\naddcamera(center)\naddlamp()\n```", "```py\ncontext=sc.getRenderingContext()\ncontext.setImageType(Scene.Render.PNG)\ncontext.render()\n```", "```py\ncontext.setRenderPath('')\ncontext.saveRenderedImage(csv[:-4]+'.png')\n```", "```py\ndef addlamp(loc=(0.0,0.0,10.0)):\n    sc = Scene.GetCurrent()\n    la = Lamp.New('Lamp')\n    ob = sc.objects.new(la)\n    ob.setLocation(*loc)\n\n```", "```py\ndef addcamera(center):\n    sc = Scene.GetCurrent()\n    ca = Camera.New('persp','Camera')\n    ca.angle=75.0\n    ob = sc.objects.new(ca)\n    ob.setLocation(center[0],center[1],center[2]+12.0)\n    sc.objects.camera=ob\n```", "```py\nfrom csv import DictReader\n\ndef barchart(filename): \n    csv = open(filename)\n    data = DictReader(csv)\n    xlabel = data.fieldnames[0]\n    rows = [d for d in data]\n```", "```py\nmaximum = max([float(r[n]) for n in data.fieldnames[1:] for r in rows])\nminimum = min([float(r[n]) for n in data.fieldnames[1:] for r in rows])\n```", "```py\nfor x,row in enumerate(rows):\n    lastx=x\n    label(row[xlabel],(x,10,0))\nfor y,ylabel in enumerate(data.fieldnames[1:]):\n    bar(10.0*(float(row[ylabel])-minimum)/maximum,(x,0,y+1))\n    x = lastx+1\n```", "```py\nfor y,ylabel in enumerate(data.fieldnames[1:]):\n    label(ylabel,(x,0,y+0.5),'x')\n    return (lastx/2.0,5.0,0.0)\n```", "```py\ndef warpselect(me,maxangle=5.0):\n\tfor face in me.faces:\n\t\tif len(face.verts) == 4:\n\t\t\tn1 = ( face.verts[0].co - face.verts[1].co ).cross(\n\t\t\tface.verts[2].co - face.verts[1].co )\n\t\t\tn2 = ( face.verts[1].co - face.verts[2].co ).cross(\n\t\t\tface.verts[3].co - face.verts[2].co )\n\t\t\ta = AngleBetweenVecs(n1,n2)\n\t\t\tif a > maxangle :\n\t\t\t\tface.sel = 1\n```", "```py\nselectmode = Blender.Mesh.Mode()\nBlender.Mesh.Mode(selectmode | Blender.Mesh.SelectModes.FACE)\n```", "```py\ndef sharpfaces(me,minimum_angle):\n   for face in me.faces:\n      n = len(face.verts)\n      edges = [face.verts[(i+1)%n].co - face.verts[i].co for i in range(n)]\n      for i in range(n):\n         a = AngleBetweenVecs(-edges[i],edges[(i+1)%n])\n         if a < minimum_angle :\n            face.sel = 1\n            break\n```", "```py\ndef poleselect1(me,n=5):\n   for v in me.verts:\n      n_edges=0\n      for e in me.edges:\n         if e.v1.index == v.index or e.v2.index == v.index:\n            n_edges+=1\n            if n_edges >= n:\n               v.sel = 1\n               break\n```", "```py\nedgecount[edge.v1.index] = edgecount[edge.v1.index] + 1\n```", "```py\nfrom collections import defaultdict\n\ndef poleselect(me,n=5):\n   n_edges = defaultdict(int)\n   for e in me.edges:\n      n_edges[e.v1.index]+=1\n      n_edges[e.v2.index]+=1\n   for v in (v for v,c in n_edges.items() if c>=n ):\n      me.verts[v].sel=1\n```", "```py\ndef meshvolume(me):\n   volume = 0.0\n   for f in me.faces:\n      xy_area = Mathutils.TriangleArea(vec(f.v[0].co[:2]),vec(f.v[1].co[:2]),vec(f.v[2].co[:2]))\n      Nz = f.no[2]\n      avg_z = sum([f.v[i].co[2] for i in range(3)])/3.0\n      partial_volume = avg_z * xy_area \n      if Nz < 0: volume -= partial_volume\n      if Nz > 0: volume += partial_volume\n   return volume\n```", "```py\ndef meshvolume(me):\n   volume = 0.0\n   cm = vec((0,0,0))\n   for f in me.faces:\n      xy_area = Mathutils.TriangleArea(vec(f.v[0].co[:2]),vec(f.v[1].co[:2]),vec(f.v[2].co[:2]))\n      Nz = f.no[2]\n      avg_z = sum([f.v[i].co[2] for i in range(3)])/3.0\n      partial_volume = avg_z * xy_area \n      if Nz < 0: volume -= partial_volume\n      if Nz > 0: volume += partial_volume\n      avg_x = sum([f.v[i].co[0] for i in range(3)])/3.0\n      avg_y = sum([f.v[i].co[1] for i in range(3)])/3.0\n      centroid = vec((avg_x,avg_y,avg_z/2))\n      if Nz < 0: cm -= partial_volume * centroid\n      if Nz > 0: cm += partial_volume * centroid\n   return volume,cm/volume\n```", "```py\ndef sunflower(scene,nseeds=100,npetals=50):\n   pos = kernelpositions(nseeds)\n```", "```py\n   headverts=pos2verts(pos)\n   faces=[(v,v+1,v+2) for v in range(0,len(headverts),3)]\n   head=Tools.addmeshobject(scene,headverts,faces,name='head')\n\n```", "```py\n   kernelverts,kernelfaces=kernel(radius=1.5,scale=(1.0,1.0,0.3))\n   kernelmesh = Tools.newmesh(kernelverts,kernelfaces,name='kernel')\n   kernels = [Tools.addmeshduplicate(scene,kernelmesh,name='kernel')for i in range(nseeds)]\n\n```", "```py\n   for i in range(nseeds):\n      loc = Tools.center(head.data.verts[i*3:(i+1)*3])\n      kernels[i].setLocation(loc)\n      head.makeParentVertex([kernels[i]],tuple([v.index for v in head.data.verts[i*3:(i+1)*3]]))\n```", "```py\n   petalverts,petalfaces=petal((2.0,1.0,1.0))\n   petalmesh = Tools.newmesh(petalverts,petalfaces,name='petal')\n   r = sqrt(nseeds)\n   petals = [Tools.addmeshduplicate(scene,petalmesh,name='petal') for i in range(npetals)]\n```", "```py\n   for i,p in enumerate(petals):\n      a=float(i)*2*pi/npetals\n      p.setLocation(r*cos(a),r*sin(a),0)\n      e=p.getEuler('localspace')\n      e.z=a\n      p.setEuler(e)\n      head.makeParent(petals)\n```", "```py\n   # add stalk (parent head to stalk)\n   stalkverts,stalkfaces=stalk()\n   stalkob = Tools.addmeshobject(scene,stalkverts,stalkfaces,name='stalk')\n   stalkob.makeParent([head])\n```", "```py\n   kernelgroup = Blender.Group.New('kernels')\n   kernelgroup.objects=kernels\n   petalgroup = Blender.Group.New('petals')\n   petalgroup.objects=petals\n   all = Blender.Group.New('sunflower')\n   all.objects=sum([kernels,petals],[head,stalkob])\n```", "```py\ndef addmeshduplicate(scn,me,name=None): \n   ob=scn.objects.new(me)\n   if name : ob.setName(name)\n   scn.objects.active=ob\n   me.remDoubles(0.001)\n   me.recalcNormals()\n   for f in me.faces: f.smooth = 1\n      me.update()\n   Blender.Window.RedrawAll()\n   return ob\n```"]