["```py\n(virtual_env) PS > python manage.py loaddata chapter_3\n```", "```py\n# /becoming_a_django_entdev/urls.py\n```", "```py\n...\n```", "```py\nurlpatterns = [\n```", "```py\n    path(\n```", "```py\n        '',   \n```", "```py\n        include(\n```", "```py\n            'becoming_a_django_entdev.chapter_5.urls'\n```", "```py\n        )\n```", "```py\n    ),\n```", "```py\n]\n```", "```py\n    # /becoming_a_django_entdev/chapter_5/forms.py\n    from django.forms \n    import Form\n    class ContactForm(Form):\n        pass\n    ```", "```py\n# /becoming_a_django_entdev/chapter_5/forms.py\n```", "```py\nfrom django.forms \n```", "```py\nimport Form, ModelForm\n```", "```py\nclass VehicleForm(ModelForm):\n```", "```py\n    pass\n```", "```py\n# /becoming_a_django_entdev/chapter_5/forms.py\n```", "```py\nfrom django \n```", "```py\nimport forms\n```", "```py\nfrom django.forms \n```", "```py\nimport Form, ModelForm\n```", "```py\nclass ContactForm(Form):\n```", "```py\n    full_name = forms.CharField(\n```", "```py\n        label = 'Full Name',\n```", "```py\n        help_text = 'Enter your full name, first and last   name please',\n```", "```py\n        min_length = 2,\n```", "```py\n        max_length = 300,\n```", "```py\n        required = True,\n```", "```py\n        error_messages = {\n```", "```py\n            'required': 'Please provide us with a name to address you as',\n```", "```py\n            'min_length': 'Please lengthen your name, min 2 characters',\n```", "```py\n            'max_length': 'Please shorten your name, max 300 characters'\n```", "```py\n        }\n```", "```py\n    )\n```", "```py\n# Demo Code\n```", "```py\n<input type=\"text\" name=\"full_name\" id=\"full-name\" class=\"form-input-class\" placeholder=\"Your Name, Written By...\">\n```", "```py\n# /becoming_a_django_entdev/chapter_5/forms.py\n```", "```py\nfrom django \n```", "```py\nimport forms\n```", "```py\nfrom django.forms \n```", "```py\nimport Form, ModelForm\n```", "```py\nclass ContactForm(Form):\n```", "```py\n    full_name = forms.CharField(\n```", "```py\n        ...,\n```", "```py\n        widget = forms.TextInput(\n```", "```py\n            attrs = {\n```", "```py\n                'id': 'full-name',\n```", "```py\n                'class': 'form-input-class',\n```", "```py\n                'placeholder': 'Your Name, Written By...'\n```", "```py\n            }\n```", "```py\n        ),\n```", "```py\n    ),\n```", "```py\n    # /becoming_a_django_entdev/chapter_5/forms.py\n    ...\n    from django \n    import forms\n    from django.forms \n    import Form, ModelForm\n    from django.core.validators \n    import EmailValidator\n    class ContactForm(Form):\n        ...\n        email_1 = forms.CharField(\n            label = 'email_1 Field',\n            min_length = 5,\n            max_length = 254,\n            required = False,\n            help_text = 'Email address in example@example.com format.',\n            validators = [\n                EmailValidator(\n                    'Please enter a valid email address'\n                ),\n            ],\n            error_messages = {\n                'min_length': 'Please lengthen your name, min 5 characters',\n                'max_length': 'Please shorten your name, max 254 characters'\n            }\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/forms.py\n    from django \n    import forms\n    from django.forms \n    import Form, ModelForm\n    ...\n    class ContactForm(Form):\n        ...\n        email_2 = forms.EmailField(\n            label = 'email_2 Field',\n            min_length = 5,\n            max_length = 254,\n            required = True,\n            help_text = 'Email address in example@example.com format for contacting you should we have questions about your message.',\n            error_messages = {\n                'required': 'Please provide us an email address should we need to reach you',\n                'email': 'Please enter a valid email address',\n                'min_length': 'Please lengthen your name, min 5 characters',\n                'max_length': 'Please shorten your name, max 254 characters'\n            }\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/forms.py\n    from django \n    import forms\n    from django.forms \n    import Form, ModelForm\n    ...\n    class ContactForm(Form):\n        email_3 = forms.CharField(\n            label = 'Email Using CharField and Using Clean Method',\n            required = False,\n            help_text = 'Email address in example@example.com format for contacting you should we have questions about your message.',\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/forms.py\n    ...\n    from django.core.exceptions \n    import ValidationError\n    from django.core.validators \n    import (\n        EmailValidator,\n        validate_email\n    )\n    class ContactForm(Form):\n        ...\n        def clean_email_3(self):\n            email = self.cleaned_data['email_3']\n            if email != '':\n                try:\n                    validate_email(email)\n                except ValidationError:\n                    self.add_error(\n                        'email_3', \n                        f'The following is not a valid email address: {email}'\n                    )\n            else:\n                self.add_error(\n                    'email_3', \n                    'This field is required'\n                )\n            return email\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/forms.py\n    from django \n    import forms\n    from django.forms \n    import Form, ModelForm\n    ...\n    class ContactForm(Form):\n        conditional_required = forms.CharField(\n            label = 'Required only if field labeled \"email_3\" has a value',\n            help_text = 'This field is only required if the field labeled \"email_3 Field\" has a value',\n            required = False,\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/forms.py\n    from django \n    import forms\n    from django.forms \n    import Form, ModelForm\n    ...\n    class ContactForm(Form):\n        ...\n        def clean(self):\n            email = self.cleaned_data['email_3']\n            text_field = self.cleaned_data[\n                'conditional_required'\n            ]\n            if email and not text_field:\n                self.add_error(\n                    'conditional_required', \n                    'If there is a value in the field labeled \"email_3\" then this field is required'\n                )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/fields.py\n    from django.core.exceptions \n    import ValidationError\n    from django.core.validators \n    import validate_email\n    from django.forms.fields \n    import Field\n    from django.forms.widgets \n    import TextInput\n    class MultipleEmailField(Field):\n        widget = TextInput\n        default_validators = []\n        default_error_messages = {\n            'required': 'Default Required Error Message',\n            'email': 'Please enter a valid email address or addresses separated by a comma with NO spaces'\n        }\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/fields.py\n    ...\n    class MultipleEmailField(Field):\n        ...\n        def to_python(self, value):\n            if not value:\n                return []\n            value = value.replace(' ', '')\n            return value.split(',')\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/fields.py\n    ...\n    class MultipleEmailField(Field):\n        ...\n        def validate(self, value):\n            super().validate(value)\n            for email in value:\n                try:\n                    validate_email(email)\n                except ValidationError:\n                    raise ValidationError(\n                        self.error_messages['email'], \n                        code = 'email'\n                    )\n    ```", "```py\n# /becoming_a_django_entdev/chapter_5/forms.py\n```", "```py\n...\n```", "```py\nfrom django.forms \n```", "```py\nimport Form, ModelForm\n```", "```py\nfrom .fields \n```", "```py\nimport MultipleEmailField\n```", "```py\nclass ContactForm(Form):\n```", "```py\n    ...\n```", "```py\n    multiple_emails = MultipleEmailField(\n```", "```py\n        label = 'Multiple Email Field',\n```", "```py\n        help_text = 'Please enter one or more email addresses, each separated by a comma and no spaces',\n```", "```py\n        required = True,\n```", "```py\n    )\n```", "```py\n    ...\n```", "```py\n# Dummy Code\n```", "```py\nfrom django.forms.fields \n```", "```py\nimport Field, CharField\n```", "```py\nclass MultipleEmailField(CharField):\n```", "```py\n    # /becoming_a_django_entdev/chapter_5/views.py\n    from django.views.generic.edit \n    import FormView\n    from .forms \n    import ContactForm\n    class FormClassView(FormView):\n        template_name = 'chapter_5/form-class.html'\n        form_class = ContactForm\n        success_url = '/chapter-5/contact-form-success/'\n    ```", "```py\n# Dummy Code\nfrom django.urls \nimport reverse\nfrom django.views.generic.edit \nimport FormView\nclass FormClassView(FormView):\n    ...\n    def get_success_url(self, **kwargs):\n        return reverse('pattern_name', args=(value,))\n```", "```py\n    # /becoming_a_django_entdev/chapter_5/urls.py\n    from django.urls \n    import re_path\n    from django.views.generic \n    import (\n        TemplateView\n    )\n    from .views \n    import FormClassView\n    urlpatterns = [ \n        re_path(\n            r'^chapter-5/form-class/?$', \n            FormClassView.as_view()\n        ),\n    ]\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/urls.py\n    ...\n    urlpatterns = [\n        ...,\n        re_path(\n            r'^chapter-5/contact-form-success/?$', \n            TemplateView.as_view(\n                template_name = 'chapter_5/contact-success.html'\n            ),\n            kwargs = {\n                'title': 'FormClassView Success Page',\n                'page_id': 'form-class-success',\n                'page_class': 'form-class-success-page',\n                'h1_tag': 'This is the FormClassView Success Page Using ContactForm',\n            }\n        ),\n    ]\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/views.py\n    ...\n    from django.views.generic.edit \n    import FormView\n    from django.template.response \n    import (\n        TemplateResponse\n    )\n    class FormClassView(FormView):\n        ...\n        def get(self, request, *args, **kwargs):\n            return TemplateResponse(\n                request,\n                self.template_name, \n                {\n                    'title': 'FormClassView Page',\n                    'page_id': 'form-class-id',\n                    'page_class': 'form-class-page',\n                    'h1_tag': 'This is the FormClassView Page Using ContactForm',\n                    'form': self.form_class,\n                }\n            )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/views.py\n    ...\n    class FormClassView(FormView):\n        def get(self, request, *args, **kwargs):\n            initial = {\n                'full_name': 'FirstName LastName',\n                'email_1': 'example1@example.com',\n                # Add A Value For Every Field...\n            }\n            return TemplateResponse(\n                request, self.template_name, {\n                    ...\n                    'form': self.form_class(initial),\n                }\n            )\n    ```", "```py\n# /becoming_a_django_entdev/chapter_5/views.py\n```", "```py\n...\n```", "```py\nfrom django.views.generic.edit \n```", "```py\nimport FormView\n```", "```py\nfrom django.http \n```", "```py\nimport HttpResponseRedirect\n```", "```py\nfrom django.template.response \n```", "```py\nimport (\n```", "```py\n    TemplateResponse\n```", "```py\n)\n```", "```py\nclass FormClassView(FormView):\n```", "```py\n    ...\n```", "```py\n    def post(self, request, *args, **kwargs):\n```", "```py\n        form = self.form_class(request.POST)\n```", "```py\n        if form.is_valid():\n```", "```py\n            return HttpResponseRedirect(\n```", "```py\n                self.success_url\n```", "```py\n            )\n```", "```py\n        else:\n```", "```py\n            return TemplateResponse(\n```", "```py\n                request, \n```", "```py\n                self.template_name, \n```", "```py\n                {\n```", "```py\n                    'title': 'FormClassView Page - Please Correct The Errors Below',\n```", "```py\n                    'page_id': 'form-class-id',\n```", "```py\n                    'page_class': 'form-class-page errors-found',\n```", "```py\n                    'h1_tag': 'This is the FormClassView Page Using ContactForm<br /><small class=\"error-msg\">Errors Found</small>',\n```", "```py\n                    'form': form,\n```", "```py\n                }\n```", "```py\n            )\n```", "```py\n    # /becoming_a_django_entdev/chapter_5/templates/chapter_5/form-class.html\n    {% extends 'chapter_5/base/base_template_1.html' %}\n    {% load static %}\n    {% block page_title %}{{ title }}{% endblock %}\n    {% block head_stylesheets %}{% endblock %}\n    {% block js_scripts %}{% endblock %}\n    {% block page_id %}{{ page_id }}{% endblock %}\n    {% block page_class %}{{ block.super }} {{ page_class }}{% endblock %}\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/templates/chapter_5/form-class.html\n    ...\n    {% block body_content %}\n        ...\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form }}\n            <input type=\"submit\" value=\"Send Message\">\n        </form>\n    {% endblock %}\n    ```", "```py\n# Dummy code rendered, for first_name field\n```", "```py\n<ul class=\"errorlist\">\n```", "```py\n    <li>Please provide us with a name to address you as</li>\n```", "```py\n</ul>\n```", "```py\n<p>\n```", "```py\n    <label for=\"full-name\">Full Name:</label>\n```", "```py\n    <input type=\"text\" name=\"full_name\" id=\"full-name\" class=\"form-input-class field-error\" placeholder=\"Your Name, Written By...\" maxlength=\"300\" minlength=\"2\" required=\"\">\n```", "```py\n    <span class=\"helptext\">Enter your full name, first and last name please</span>\n```", "```py\n</p>\n```", "```py\n# /becoming_a_django_entdev/chapter_5/templates/chapter_5/form-class.html\n```", "```py\n...\n```", "```py\n        <table>\n```", "```py\n            {{ form.as_table }}\n```", "```py\n        </table>\n```", "```py\n...\n```", "```py\n# /becoming_a_django_entdev/chapter_5/templates/chapter_5/form-class.html\n```", "```py\n...\n```", "```py\n        <ul>\n```", "```py\n            {{ form.as_ul }}\n```", "```py\n        </ul>\n```", "```py\n...\n```", "```py\n    /chapter_5/form-class.html file, you render your form using only the basic {{ form }} tag and not any of the other preconfigured form rendering methods.\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/templates/chapter_5/forms/custom-forms.html\n    {% load static %}\n    {% for field, errors in fields %}\n        <div class=\"field-box{% if errors %} error{% endif %}\">\n            <label for=\"{{ field.id_for_label }}\">\n                {% if field.field.required %}<span class=\"required\">*</span>{% endif %}{{ field.label|safe }}\n            </label>\n            <div class=\"form-group\">\n                {{ field }}\n                {{ errors|safe }}\n                {% if field.help_text and field.help_text != '' %}\n                    <span class=\"help-text\">\n                        {{ field.help_text|safe }}\n                    </span>\n                {% endif %}\n            </div>\n        </div>\n    {% endfor %}\n    ```", "```py\n# /becoming_a_django_entdev/chapter_5/forms.py\n```", "```py\n...\n```", "```py\nfrom django.forms \n```", "```py\nimport Form, ModelForm\n```", "```py\nfrom ..chapter_3.models \n```", "```py\nimport Vehicle\n```", "```py\nclass VehicleForm(ModelForm):\n```", "```py\n    class Meta:\n```", "```py\n        model = Vehicle\n```", "```py\n        fields = [\n```", "```py\n            'vin', \n```", "```py\n            'sold', \n```", "```py\n            'price', \n```", "```py\n            'make', \n```", "```py\n            'vehicle_model', \n```", "```py\n            'engine',\n```", "```py\n        ]\n```", "```py\n    # /becoming_a_django_entdev/chapter_5/views.py\n    ...\n    from django.http \n    import HttpResponseRedirect\n    from django.views.generic.edit \n    import (\n        ..., \n        CreateView\n    )\n    from django.template.response \n    import (\n        TemplateResponse\n    )\n    from .forms \n    import ContactForm, VehicleForm\n    class ModelFormClassCreateView(CreateView):\n        template_name = 'chapter_5/model-form-class.html'\n        form_class = VehicleForm\n        success_url = '/chapter-5/vehicle-form-success/'\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/views.py\n    ...\n    class ModelFormClassCreateView(CreateView):\n        ...\n        def get(self, request, *args, **kwargs):\n            return TemplateResponse(\n                request, \n                self.template_name, \n                {\n                    'title': 'ModelFormClassCreateView Page',\n                    'page_id': 'model-form-class-id',\n                    'page_class': 'model-form-class-page',\n                    'h1_tag': 'This is the ModelFormClassCreateView Class Page Using VehicleForm',\n                    'form': self.form_class(),\n                }\n            )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/views.py\n    ...\n    class ModelFormClassCreateView(CreateView):\n        ...\n        def post(self, request, *args, **kwargs):\n            form = self.form_class(request.POST)\n            if form.is_valid():\n                vehicle = form.instance\n                vehicle.save()\n                return HttpResponseRedirect(\n                    self.success_url\n                )\n            else:\n                return TemplateResponse(\n                    request, \n                    self.template_name, \n                    {\n                        'title': 'ModelFormClassCreateView Page - Please Correct The Errors Below',\n                        'page_id': 'model-form-class-id',\n                        'page_class': 'model-form-class-page errors-found',\n                        'h1_tag': 'This is the ModelFormClassCreateView Page Using VehicleForm<br /><small class=\"error-msg\">Errors Found</small>',\n                        'form': form,\n                    }\n                )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/urls.py\n    from django.urls \n    import re_path\n    from django.views.generic \n    import (\n        TemplateView\n    )\n    from .views \n    import (\n        FormClassView,\n        ModelFormClassCreateView\n    )\n    urlpatterns = [\n        ...,\n        re_path(\n            r'^chapter-5/model-form-class/?$', \n            ModelFormClassCreateView.as_view()\n        ),\n    ]\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/urls.py\n    ...\n    urlpatterns = [\n        ...,\n        re_path(\n            r'^chapter-5/vehicle-form-success/?$', \n            TemplateView.as_view(\n                template_name = 'chapter_5/vehicle-success.html'\n            ), \n            kwargs = {\n                'title': 'ModelFormClass Success Page',\n                'page_id': 'model-form-class-success',\n                'page_class': 'model-form-class-success-page',\n                'h1_tag': 'This is the ModelFormClass Success Page Using VehicleForm',\n            }\n        ),\n    ]\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/urls.py\n    from django.urls \n    import re_path\n    from .views \n    import (\n        ...,\n        ModelFormClassUpdateView\n    )\n    ...\n    urlpatterns = [\n        ...,\n        re_path(\n            'chapter-5/model-form-class/(?P<id>[0-9])/?$', \n            ModelFormClassUpdateView.as_view(), \n            name = 'vehicle_detail'\n        ),\n    ]\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/views.py\n    ...\n    from django.http \n    import HttpResponseRedirect\n    from django.template.response \n    import (\n        TemplateResponse\n    )\n    from django.views.generic.edit \n    import (\n        ..., \n        UpdateView\n    )\n    from .forms \n    import VehicleForm\n    from ..chapter_3.models \n    import Vehicle\n    class ModelFormClassUpdateView(UpdateView):\n        template_name = 'chapter_5/model-form-class.html'\n        form_class = VehicleForm\n        success_url = '/chapter-5/vehicle-form-success/'\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/views.py\n    from django.template.response \n    import (\n        TemplateResponse\n    )\n    from django.views.generic.edit \n    import (\n        ...,\n        UpdateView\n    )\n    from ..chapter_3.models \n    import Vehicle\n    ...\n    class ModelFormClassUpdateView(UpdateView):\n        ...\n        def get(self, request, id, *args, **kwargs):\n            try:\n                vehicle = Vehicle.objects.get(pk=id)\n            except Vehicle.DoesNotExist:\n                form = self.form_class()\n            else:\n                form = self.form_class(instance=vehicle)\n            return TemplateResponse(\n                request, \n                self.template_name, \n                {\n                    'title': 'ModelFormClassUpdateView Page',\n                    'page_id': 'model-form-class-id',\n                    'page_class': 'model-form-class-page',\n                    'h1_tag': 'This is the ModelFormClassUpdateView Class Page Using VehicleForm',\n                    'form': form,\n                }\n            )\n        def post(self, request, id, *args, **kwargs):\n            # Use the same code as we did for the ModelFormClassCreateView class\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/forms.py\n    from django \n    import forms\n    from django.forms \n    import Form, ModelForm\n    ...\n    class ProspectiveBuyerForm(Form):\n        first_name = forms.CharField(\n            label = 'First Name',\n            help_text = 'Enter your first name only',\n            required = True,\n            error_messages = {\n                'required': 'Please provide us with a first name',\n            }\n        )\n        last_name = forms.CharField(\n            label = 'Last Name',\n            help_text = 'Enter your last name only',\n            required = True,\n            error_messages = {\n                'required': 'Please provide us with a last name',\n            }\n        )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/forms.py\n    ...\n    from django.forms \n    import (\n        ...,\n        formset_factory\n    )\n    ...\n    ProspectiveBuyerFormSet = formset_factory(\n        ProspectiveBuyerForm,\n        extra = 1\n    )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/views.py\n    ...\n    from django.http \n    import HttpResponseRedirect\n    from django.template.response \n    import (\n        TemplateResponse\n    )\n    from django.views.generic.edit \n    import (\n        ..., \n        CreateView\n    )\n    from .forms \n    import ..., ProspectiveBuyerFormSet\n    from ..chapter_3.models \n    import Vehicle\n    class ModelFormClassCreateView(CreateView):\n        ...\n        def get(self, request, *args, **kwargs):\n            buyer_formset = ProspectiveBuyerFormSet()\n            return TemplateResponse(\n                request, \n                self.template_name, \n                {\n                    ...\n                    'form': self.form_class(),\n                    'buyer_formset': buyer_formset,\n                }\n            )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/views.py\n    ...\n    class ModelFormClassCreateView(CreateView):\n        ...\n        def post(self, request, *args, **kwargs):\n            form = self.form_class(request.POST)\n            buyer_formset = ProspectiveBuyerFormSet(\n                request.POST\n            )\n            if form.is_valid():\n                ...\n            else:\n                return TemplateResponse(\n                    request, \n                    self.template_name, \n                    {\n                        ...\n                        'form': form,\n                        'buyer_formset': buyer_formset,\n                    }\n                )\n    ```", "```py\n# /becoming_a_django_entdev/chapter_5/templates/chapter_5/model-form-class.html\n```", "```py\n...\n```", "```py\n{% extends 'chapter_5/base/base_template_1.html' %}\n```", "```py\n{% load static %}\n```", "```py\n...\n```", "```py\n{% block body_content %}\n```", "```py\n    ...\n```", "```py\n    <form method=\"post\" id=\"form\">\n```", "```py\n        {% csrf_token %}\n```", "```py\n        {{ form }}\n```", "```py\n        {% if buyer_formset %}\n```", "```py\n            <h3>Prospective Buyers</h3>\n```", "```py\n            {{ buyer_formset.non_form_errors }}\n```", "```py\n            {{ buyer_formset.management_form }}\n```", "```py\n            {% for form in buyer_formset %}\n```", "```py\n                <div class=\"formset-container {{ buyer_formset.prefix }}\">\n```", "```py\n                    <div class=\"first-name\">\n```", "```py\n                        {{ form.first_name.label }}: {{ form.first_name }}\n```", "```py\n                    </div>\n```", "```py\n                    <div class=\"last-name\">\n```", "```py\n                        {{ form.last_name.label }}: {{ form.last_name }}\n```", "```py\n                    </div>\n```", "```py\n                </div>\n```", "```py\n            {% endfor %}\n```", "```py\n        {% endif %}\n```", "```py\n        <button id=\"add-formset\" type=\"button\">Add Another Prospective Buyer</button>\n```", "```py\n        <input type=\"submit\" value=\"Save Vehicle\">\n```", "```py\n    </form>\n```", "```py\n{% endblock %}\n```", "```py\n    # /becoming_a_django_entdev/chapter_5/templates/chapter_5/base/base_template_1.html\n    ...\n    <html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\">\n        <head>\n            ...\n            <script defer type=\"text/javascript\" src=\"img/site-js.js' %}\"></script>\n        </head>\n        ...\n    </html>\n    ```", "```py\n    (virtual_env) PS > mkdir becoming_a_django_entdev/chapter_5/static/chapter_5\n    (virtual_env) PS > mkdir becoming_a_django_entdev/chapter_5/static/chapter_5/js\n    (virtual_env) PS > cd becoming_a_django_entdev/chapter_5/static/chapter_5/js\n    (virtual_env) PS > touch site-js.js\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/static/chapter_5/js/site-js.js\n    let formsetContainer = document.querySelectorAll(\n            '.formset-container'\n        ),\n        form = document.querySelector('#form'),\n        addFormsetButton = document.querySelector(\n            '#add-formset'\n        ),\n        totalForms = document.querySelector(\n            '#id_form-TOTAL_FORMS'\n        ),\n        formsetNum = formsetContainer.length - 1;\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/static/chapter_5/js/site-js.js\n    ...\n    addFormsetButton.addEventListener(\n        'click', \n        $addFormset\n    );\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_5/static/chapter_5/js/site-js.js\n    ...\n    function $addFormset(e) {\n        e.preventDefault();\n        let newForm = formsetContainer[0].cloneNode(true),\n            formRegex = RegExp(`form-(\\\\d){1}-`,'g');\n        formsetNum++\n        newForm.innerHTML = newForm.innerHTML.replace(\n            formRegex, \n            'form-${formsetNum}-'\n        );\n        form.insertBefore(newForm, addFormsetButton);\n        totalForms.setAttribute(\n            'value', \n            '${formsetNum + 1}'\n        );\n    }\n    ```"]