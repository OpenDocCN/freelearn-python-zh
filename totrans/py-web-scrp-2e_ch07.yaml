- en: Solving CAPTCHA
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决 CAPTCHA
- en: '**CAPTCHA** stands for **Completely Automated Public Turing test to tell Computers
    and Humans Apart**. As the acronym suggests, it is a test to determine whether
    the user is human or not. A typical CAPTCHA consists of distorted text, which
    a computer program will find difficult to interpret but a human can (hopefully)
    still read.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**CAPTCHA** 代表 **Completely Automated Public Turing test to tell Computers
    and Humans Apart**。正如缩写所暗示的，这是一个测试，用来确定用户是否为人类。典型的 CAPTCHA 由扭曲的文本组成，计算机程序将难以解释，但人类（希望）仍然可以阅读。'
- en: Many websites use CAPTCHA to prevent bots from interacting with their website.
    For example, my bank website forces me to pass a CAPTCHA everytime I log in, which
    is a pain. This chapter will cover how to solve CAPTCHAs automatically, first
    through **Optical Character Recognition** (**OCR**) and then with a CAPTCHA solving
    API.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站使用 CAPTCHA 来防止机器人与其网站交互。例如，我的银行网站每次我登录时都强制我通过 CAPTCHA，这很麻烦。本章将介绍如何自动解决 CAPTCHA，首先是通过**光学字符识别**（**OCR**），然后是通过
    CAPTCHA 解决 API。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Solving CAPTCHAs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决 CAPTCHA
- en: Using a CAPTCHA service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CAPTCHA 服务
- en: Machine learning and CAPTCHAs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习和 CAPTCHA
- en: Reporting errors
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告错误
- en: Registering an account
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册账户
- en: 'In [chapter 6](py-web-scrp-2e_ch06.html), *Interacting with forms*, we logged
    in to the example website using a manually created account, but we skipped the
    account creation part because the registration form requires passing a CAPTCHA:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 6 章](py-web-scrp-2e_ch06.html)“与表单交互”中，我们使用手动创建的账户登录了示例网站，但跳过了账户创建部分，因为注册表单需要通过
    CAPTCHA：
- en: '![](img/5679_07_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5679_07_01.jpg)'
- en: Note that each time the form is loaded, a different CAPTCHA image will be shown.
    To understand what the form requires, we can reuse the `parse_form()` function
    developed in the preceding chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每次加载表单时，都会显示不同的 CAPTCHA 图像。为了理解表单的要求，我们可以重用前一章中开发的 `parse_form()` 函数。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All of the fields shown in the preceding code are straightforward, except for
    `recaptcha_response_field`, which, in this case, requires extracting strange from
    the image shown in our initial page view.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码中显示的所有字段都很直接，除了 `recaptcha_response_field`，在这种情况下，需要从我们的初始页面视图中显示的图像中提取奇怪的文本。
- en: Loading the CAPTCHA image
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载 CAPTCHA 图像
- en: 'Before the CAPTCHA image can be analyzed, it needs to be extracted from the
    form. Our browser developer tools show that the data for this image is embedded
    in the web page rather than being loaded from a separate URL:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析 CAPTCHA 图像之前，需要从表单中提取它。我们的浏览器开发者工具显示，该图像的数据嵌入在网页中，而不是从单独的 URL 加载：
- en: '![](img/5679_07_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5679_07_02.jpg)'
- en: 'To work with images in Python, we will use the `Pillow` package, which can
    be installed via `pip` using this command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Python 中处理图像，我们将使用 `Pillow` 包，可以通过 `pip` 使用以下命令安装：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Alternative ways to install `Pillow` are covered at [http://pillow.readthedocs.io/en/latest/installation.html](http://pillow.readthedocs.io/en/latest/installation.html).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 `Pillow` 的其他方法在[http://pillow.readthedocs.io/en/latest/installation.html](http://pillow.readthedocs.io/en/latest/installation.html)中介绍。
- en: '`Pillow` provides a convenient `Image` class with a number of high-level methods,
    which can be used to manipulate the CAPTCHA images. Here''s a function that takes
    the HTML of the registration page and returns the CAPTCHA image in an `Image`
    object:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pillow` 提供了一个方便的 `Image` 类，包含许多高级方法，可以用来操作 CAPTCHA 图像。以下是一个函数，它接受注册页面的 HTML
    并返回一个 `Image` 对象中的 CAPTCHA 图像：'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first few lines here use `lxml` to extract the image data from the form.
    This image data is prepended with a header defining the data type. In this case,
    it is a PNG image encoded in Base64, which is a format used to represent binary
    data in ASCII. This header is removed by partitioning on the first comma. Then
    the image data needs to be decoded from Base64 into the original binary format.
    To load an image, `PIL` expects a file-like interface, so this binary data is
    wrapped with `BytesIO` and then passed to the `Image` class.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里前几行使用 `lxml` 从表单中提取图像数据。这些图像数据以一个定义数据类型的头信息开头。在这种情况下，它是一个 Base64 编码的 PNG 图像，Base64
    是一种用于在 ASCII 中表示二进制数据的格式。这个头信息通过在第一个逗号处分割来移除。然后需要将图像数据从 Base64 解码回原始的二进制格式。为了加载图像，`PIL`
    预期一个文件-like 接口，因此这些二进制数据被 `BytesIO` 包装，然后传递给 `Image` 类。
- en: Now that we have the CAPTCHA image in a more useful format, we are ready to
    attempt extracting the text.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经以更有用的格式获得了 CAPTCHA 图像，我们准备尝试提取文本。
- en: Pillow vs PIL
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Pillow 与 PIL
- en: '`Pillow` is a fork of the better known **Python Image Library** (**PIL**),
    which hasn''t been updated since 2009\. It uses the same interface as the original
    `PIL` package and is well documented at [http://pillow.readthedocs.org](http://pillow.readthedocs.org). `Pillow`
    supports Python3 (unlike `PIL`), so we will focus on using it in this book.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pillow`是更知名的**Python图像库**（**PIL**）的一个分支，自2009年以来就没有更新过。它使用与原始`PIL`包相同的接口，并在[http://pillow.readthedocs.org](http://pillow.readthedocs.org)上有良好的文档。`Pillow`支持Python3（与`PIL`不同），因此我们将专注于在这本书中使用它。'
- en: Optical character recognition
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 光学字符识别
- en: '**Optical character recognition** (**OCR**) is a process to extract text from
    images. In this section, we will use the open source Tesseract OCR engine, which
    was originally developed at HP and now primarily at Google. Installation instructions
    for Tesseract are available at [https://github.com/tesseract-ocr/tesseract/wiki](https://github.com/tesseract-ocr/tesseract/wiki).
    The `pytesseract` Python wrapper can be installed with `pip`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**光学字符识别**（**OCR**）是从图像中提取文本的过程。在本节中，我们将使用开源的Tesseract OCR引擎，它最初由HP开发，现在主要在Google开发。Tesseract的安装说明可在[https://github.com/tesseract-ocr/tesseract/wiki](https://github.com/tesseract-ocr/tesseract/wiki)找到。`pytesseract`
    Python包装器可以使用`pip`安装：'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If the original CAPTCHA image is passed to `pytesseract`, the results are terrible:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将原始CAPTCHA图像传递给`pytesseract`，结果会很糟糕：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: An empty string was returned, which means Tesseract failed to extract any characters
    from the input image. Tesseract was designed to extract more typical text, such
    as book pages with a consistent background. If we want to use Tesseract effectively,
    we will need to first modify the CAPTCHA images to remove the background noise
    and isolate the text.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 返回了一个空字符串，这意味着Tesseract未能从输入图像中提取任何字符。Tesseract被设计用来提取更典型的文本，例如具有一致背景的书籍页面。如果我们想有效地使用Tesseract，我们首先需要修改CAPTCHA图像以去除背景噪声并隔离文本。
- en: 'To better understand the CAPTCHA system we are dealing with, here are some
    more samples:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解我们正在处理的CAPTCHA系统，这里有一些更多的示例：
- en: '![](img/image_07_001.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_001.jpg)'
- en: 'The samples in the previous image show that the CAPTCHA text is always black
    while the background is lighter, so this text can be isolated by checking each
    pixel and only keeping the black ones, a process known as **thresholding**. This
    process is straightforward to achieve with `Pillow`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图像中的示例表明，CAPTCHA文本总是黑色，而背景较亮，因此可以通过检查每个像素并只保留黑色像素来隔离这个文本，这个过程称为**阈值化**。使用`Pillow`实现这个过程很简单：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: First, we converted the image to grayscale using the `convert` method. Then,
    we mapped the image over a `lambda`function using the `point` command, which will
    iterate over every pixel in the image. In the `lambda` function, a threshold of
    less than `1` is used, which will only keep completely black pixels. This snippet
    saved three images--the original CAPTCHA image, the image in grayscale, and the
    image after thresholding.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`convert`方法将图像转换为灰度。然后，我们使用`point`命令将图像映射到一个`lambda`函数上，这将遍历图像中的每个像素。在`lambda`函数中，使用小于`1`的阈值，这将只保留完全黑色的像素。这个片段保存了三张图像——原始CAPTCHA图像、灰度图像和阈值后的图像。
- en: 'The text in the final image is much clearer and is ready to be passed to Tesseract:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最终图像中的文本更清晰，并准备好传递给Tesseract：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Success! The CAPTCHA text has been successfully extracted. In my test of 100
    images, this approach correctly interpreted the CAPTCHA image 82 times.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！CAPTCHA文本已成功提取。在我的100张图像测试中，这种方法正确解释了82张CAPTCHA图像。
- en: 'Since the sample text is always lowercase ASCII characters, the performance
    can be improved further by restricting the result to these characters:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于样本文本总是小写ASCII字符，可以通过将这些字符限制为结果来进一步提高性能：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In my test on the same sample images, this improved the performance to 88 times
    out of 100.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我对相同样本图像的测试中，这提高了性能，100次中有88次有效。
- en: 'Here is the full code of the registration script so far:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是迄今为止注册脚本的完整代码：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `register()` function downloads the registration page and scrapes the form
    as usual, where the desired name, e-mail, and password for the new account are
    set. The CAPTCHA image is then extracted, passed to the OCR function, and the
    result is added to the form. This form data is then submitted, and the response
    URL is checked to see whether the registration was successful.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`register()`函数下载注册页面并像往常一样抓取表单，其中设置了新账户所需的名字、电子邮件和密码。然后提取CAPTCHA图像，传递给OCR函数，并将结果添加到表单中。随后提交这些表单数据，并检查响应URL以查看注册是否成功。'
- en: If it fails (by not being properly redirected to the homepage), the form errors
    are printed as we may need to use a longer password, a different e-mail, or the
    CAPTCHA might have been unsuccessful. We also print out characters we removed
    in order to help debug how to make our CAPTCHA parser even better. These logs
    may help us identify common OCR errors, such as mistaking l for 1, and similar
    errors, which require fine distinction between similarly drawn characters.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果失败（没有正确重定向到主页），则打印出表单错误，因为我们可能需要使用更长的密码、不同的电子邮件，或者 CAPTCHA 可能没有成功。我们还打印出我们移除的字符，以帮助调试如何使我们的
    CAPTCHA 解析器更好。这些日志可能有助于我们识别常见的 OCR 错误，例如将 l 错误地误认为是 1，以及类似的错误，这些错误需要在不同绘制的字符之间进行精细区分。
- en: 'Now, to register an account, we simply need to call the `register()` function
    with the new account details:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要注册账户，我们只需调用 `register()` 函数并传入新的账户详细信息：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Further improvements
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步改进
- en: 'To improve the CAPTCHA OCR performance further, there are a number of possibilities,
    as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步提高 CAPTCHA OCR 性能，有几种可能性，如下所示：
- en: Experimenting with different threshold levels
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试不同的阈值水平
- en: Eroding the thresholded text to emphasize the shape of characters
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过侵蚀阈值文本来强调字符的形状
- en: Resizing the image (sometimes increasing the image size helps)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整图像大小（有时增加图像大小有帮助）
- en: Training the OCR tool on the CAPTCHA font
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CAPTCHA 字体上训练 OCR 工具
- en: Restricting results to dictionary words
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制结果为词典单词
- en: If you are interested in experimenting to improve performance, the sample data
    used is available at [http://github.com/kjam/wswp/blob/master/data/captcha_samples](http://github.com/kjam/wswp/blob/master/data/captcha_samples).
    There is also a script to test the accuracy at [http://github.com/kjam/wswp/blob/master/code/chp7/test_samples.py](http://github.com/kjam/wswp/blob/master/code/chp7/test_samples.py).
    However, the current 88 percent accuracy is sufficient for our purposes of registering
    an account because actual users will also make mistakes when entering CAPTCHA
    text. Even 10 per cent accuracy would be sufficient because the script could be
    run many times until successful, though this would be rather impolite to the server
    and may lead to your IP being blocked.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣，想尝试提高性能，所使用的样本数据可以在 [http://github.com/kjam/wswp/blob/master/data/captcha_samples](http://github.com/kjam/wswp/blob/master/data/captcha_samples)
    找到。还有一个脚本来测试准确性，在 [http://github.com/kjam/wswp/blob/master/code/chp7/test_samples.py](http://github.com/kjam/wswp/blob/master/code/chp7/test_samples.py)。然而，当前的
    88% 准确率对于我们的注册账户目的已经足够，因为实际用户在输入 CAPTCHA 文本时也会犯错。即使 10% 的准确率也足够，因为脚本可以多次运行直到成功，尽管这对服务器来说可能不太礼貌，可能会导致你的
    IP 被封锁。
- en: Solving complex CAPTCHAs
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决复杂的 CAPTCHA
- en: The CAPTCHA system tested so far was relatively straightforward to solve --
    the black font color meant that the text could easily be distinguished from the
    background, and additionally, the text was level and did not need to be rotated
    for Tesseract to interpret it accurately. Often, you will find websites using
    simple custom CAPTCHA systems similar to this, and in these cases, an OCR solution
    is practical. However, if a website uses a more complex system, such as Google's
    reCAPTCHA, OCR will take a lot more effort and may become impractical.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止测试过的 CAPTCHA 系统相对容易解决——黑色字体颜色意味着文本可以很容易地与背景区分开来，此外，文本是水平的，不需要旋转以便 Tesseract
    准确解释。通常，你会发现在使用类似这种简单自定义 CAPTCHA 系统的网站上，在这种情况下，OCR 解决方案是实用的。然而，如果网站使用更复杂的系统，例如
    Google 的 reCAPTCHA，OCR 将需要更多的努力，可能变得不切实际。
- en: In these examples, the text is placed at different angles and with different
    fonts and colors, so plenty more work needs to be done to clean and preprocess
    the image before OCR is accurate. These advanced CAPTCHAs can sometimes even be difficult
    for people to interpret, making it that much more difficult to do so with a simple
    script.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些例子中，文本放置在不同的角度，使用不同的字体和颜色，因此在进行 OCR 之前，需要做更多的工作来清理和预处理图像。这些高级 CAPTCHA 有时甚至对人们来说也很难理解，这使得用简单的脚本来完成这项任务变得更加困难。
- en: Using a CAPTCHA solving service
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CAPTCHA 解决服务
- en: To solve for these more complex images, we will make use of a CAPTCHA solving
    service. There are many CAPTCHA solving services available, such as [2captcha.com](https://2captcha.com)
    and [https://de-captcher.com/](https://de-captcher.com/), and the rates vary from
    $0.50 to $2 for around 1000 CAPTCHAs. When a CAPTCHA image is passed to a CAPTCHA-solving
    API, a person will then manually examine the image and provide the parsed text
    in an HTTP response, typically within 30 seconds.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这些更复杂的图像，我们将使用 CAPTCHA 解决服务。有许多 CAPTCHA 解决服务可供选择，例如 [2captcha.com](https://2captcha.com)
    和 [https://de-captcher.com/](https://de-captcher.com/)，价格从大约 1000 个 CAPTCHA 的
    0.50 美元到 2 美元不等。当一个 CAPTCHA 图像传递给 CAPTCHA 解决 API 时，一个人将手动检查图像，并在 HTTP 响应中提供解析后的文本，通常在
    30 秒内完成。
- en: For the examples in this section, we will use the service at [9kw.eu](https://9kw.eu),
    which does not provide the cheapest per CAPTCHA rate or the best designed API.
    However, on the positive side, it is possible to use the API without spending
    money. This is because [9kw.eu](https://9kw.eu) allows users to manually solve
    CAPTCHAs to build up credit, which can then be spent on testing the API with our
    own CAPTCHAs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节中的示例，我们将使用 [9kw.eu](https://9kw.eu) 的服务，它不是最便宜的每个 CAPTCHA 价格或最佳设计的 API。然而，从积极的一面来看，您可以在不花钱的情况下使用
    API。这是因为 [9kw.eu](https://9kw.eu) 允许用户手动解决 CAPTCHA 以积累信用，然后可以用这些信用来测试我们自己的 CAPTCHA。
- en: Getting started with 9kw
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 9kw
- en: To start using 9kw, you will need to first create an account at [https://www.9kw.eu/register.html](https://www.9kw.eu/register.html).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 9kw，您需要首先在 [https://www.9kw.eu/register.html](https://www.9kw.eu/register.html)
    创建账户。
- en: Then, follow the account confirmation instructions, and when logged in, navigate
    to [https://www.9kw.eu/usercaptcha.html](https://www.9kw.eu/usercaptcha.html).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按照账户确认说明操作，登录后，导航至 [https://www.9kw.eu/usercaptcha.html](https://www.9kw.eu/usercaptcha.html)。
- en: On this page, you can solve other people's CAPTCHAs to build up credit to use
    later on API calls. After solving a few CAPTCHAs, navigate to [https://www.9kw.eu/index.cgi?action=userapinew&source=api](https://www.9kw.eu/index.cgi?action=userapinew&source=api)
    to create an API key.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面上，您可以解决他人的 CAPTCHA 以积累信用，以便以后在 API 调用中使用。解决几个 CAPTCHA 后，导航至 [https://www.9kw.eu/index.cgi?action=userapinew&source=api](https://www.9kw.eu/index.cgi?action=userapinew&source=api)
    以创建 API 密钥。
- en: The 9kw CAPTCHA API
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9kw CAPTCHA API
- en: 'The 9kw API is documented at [https://www.9kw.eu/api.html#apisubmit-tab](https://www.9kw.eu/api.html#apisubmit-tab).
    The important parts for our purpose to submit a CAPTCHA and check the result are
    summarized here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 9kw API 的文档位于 [https://www.9kw.eu/api.html#apisubmit-tab](https://www.9kw.eu/api.html#apisubmit-tab)。为了提交
    CAPTCHA 并检查结果，以下是我们需要的重要部分总结：
- en: 'To submit a CAPTCHA to solve, you can use this API method and parameters:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要提交 CAPTCHA 以解决，您可以使用此 API 方法及参数：
- en: '**URL**: https://www.9kw.eu/index.cgi (POST)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL**: https://www.9kw.eu/index.cgi (POST)'
- en: '**    apikey**: your API key'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**apikey**: 您的 API 密钥'
- en: '**    action**: must be set to "usercaptchaupload"'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**action**: 必须设置为 "usercaptchaupload"'
- en: '**    file-upload-01**: the image to solve (either a file, url or string)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**file-upload-01**: 要解决的图像（可以是文件、URL 或字符串）'
- en: '**    base64**: set to "1" if the input is Base64 encoded'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**base64**: 如果输入是 Base64 编码，则设置为 "1"'
- en: '**    maxtimeout**: the maximum time to wait for a solution (must be between
    60 - 3999 seconds)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**maxtimeout**: 等待解决方案的最大时间（必须在 60 - 3999 秒之间）'
- en: '**    selfsolve**: set to "1" to solve this CAPTCHA yourself'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**selfsolve**: 设置为 "1" 以自行解决此 CAPTCHA'
- en: '**    json:** set to "1" to receive responses in JSON format'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**json:** 设置为 "1" 以接收 JSON 格式的响应'
- en: '**API return value**: ID of this CAPTCHA'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**API 返回值**: 此 CAPTCHA 的 ID'
- en: 'To request the result of submitted captcha, you need to use a different API
    method with different parameters:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要请求提交的 captcha 的结果，您需要使用不同的 API 方法及不同的参数：
- en: '**URL**: https://www.9kw.eu/index.cgi (GET)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL**: https://www.9kw.eu/index.cgi (GET)'
- en: '**    apikey**: your API key'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**apikey**: 您的 API 密钥'
- en: '**    action**: must be set to "usercaptchacorrectdata"'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**action**: 必须设置为 "usercaptchacorrectdata"'
- en: '**    id**: ID of CAPTCHA to check'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**id**: 要检查的 CAPTCHA ID'
- en: '**    info**: set to "1" to return "NO DATA" when there is not yet a solution
    (by default, returns nothing)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**info**: 设置为 "1" 以在尚未找到解决方案时返回 "NO DATA"（默认情况下不返回任何内容）'
- en: '**    json:** set to "1" to receive responses in JSON format'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**json:** 设置为 "1" 以接收 JSON 格式的响应'
- en: '**API return value**: Text of the solved CAPTCHA or an error code'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**API 返回值**: 解决的 CAPTCHA 文本或错误代码'
- en: 'The API also has several error codes:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: API 还有一些错误代码：
- en: '**0001** API key doesn''t exist'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**0001** API 密钥不存在'
- en: '**0002** API key not found'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**0002** API 密钥不存在'
- en: '**0003** Active API key not found'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**0003** 未找到活动 API 密钥'
- en: '...'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '**0031** An account is not yet 24 hours in the system.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**0031** 账户在系统中尚未满 24 小时。'
- en: '**0032** An account does not have the full rights.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**0032** 账户没有完整的权限。'
- en: '**0033** Plugin needs an update.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**0033** 插件需要更新。'
- en: 'Here is an initial implementation to send a CAPTCHA image to this API:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是将 CAPTCHA 图像发送到该 API 的初始实现：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This structure should hopefully be looking familiar by now -- first, build
    a dictionary with the required parameters, encode them, and then submit the data
    in the body of your request. Note that the `selfsolve` option is set to `''1''`:
    this means that if we are currently solving CAPTCHAs at the 9kw web interface,
    this CAPTCHA image will be passed to us to solve, which saves us credit. If not
    logged in, the CAPTCHA image is passed to another user to solve.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，这个结构应该看起来很熟悉了——首先，创建一个包含所需参数的字典，对它们进行编码，然后将数据提交到请求的主体中。请注意，`selfsolve`
    选项设置为 `'1'`：这意味着如果我们目前在 9kw 网络界面解决 CAPTCHA，此 CAPTCHA 图像将被传递给我们解决，这可以节省我们的信用。如果没有登录，CAPTCHA
    图像将被传递给另一个用户解决。
- en: 'Here is the code to fetch the result of a solved CAPTCHA image:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是获取已解决 CAPTCHA 图像结果的代码：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: One drawback with the 9kw API is that the error messages are sent in the same JSON
    field as the results, which makes distinguishing them more complex. For example,
    if no user is available to solve the CAPTCHA image in time, the `ERROR NO USER`
    string is returned. Hopefully, the CAPTCHA image we submit never includes this
    text!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 9kw API 的一个缺点是错误信息与结果发送在同一个 JSON 字段中，这使得区分它们变得更加复杂。例如，如果没有人及时解决 CAPTCHA 图像，将返回
    `ERROR NO USER` 字符串。希望我们提交的 CAPTCHA 图像永远不会包含此文本！
- en: Another difficulty is the `get_captcha_text()` function will return error messages
    until another user has had the time to manually examine the CAPTCHA image, as
    mentioned earlier, typically 30 seconds later.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个困难是，`get_captcha_text()` 函数将返回错误信息，直到另一个用户有时间手动检查 CAPTCHA 图像，正如之前提到的，通常在
    30 秒后。
- en: 'To make our implementation friendlier, we will add a wrapper function to submit
    the CAPTCHA image and wait until the result is ready. Here is an expanded version
    that wraps this functionality in a reusable class, as well as checking for error
    messages:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的实现更加友好，我们将添加一个包装函数来提交 CAPTCHA 图像并等待结果准备就绪。以下是扩展此功能并包装在可重用类中的版本，以及检查错误信息：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The source for the `CaptchaAPI` class is also available at [http://github.com/kjam/wswp/blob/master/code/chp7/captcha_api.py](http://github.com/kjam/wswp/blob/master/code/chp7/captcha_api.py),
    which will be kept updated if 9kw.eu modifies their API. This class is instantiated
    with your API key and a timeout, by default, set to 120 seconds. The `solve()`
    method then submits a CAPTCHA image to the API and keeps requesting the solution
    until either the CAPTCHA image is solved or a timeout is reached.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`CaptchaAPI` 类的源代码也可在 [http://github.com/kjam/wswp/blob/master/code/chp7/captcha_api.py](http://github.com/kjam/wswp/blob/master/code/chp7/captcha_api.py)
    找到，如果 9kw.eu 修改了他们的 API，此代码将保持更新。该类通过您的 API 密钥和一个默认设置为 120 秒的超时时间进行实例化。然后 `solve()`
    方法将 CAPTCHA 图像提交到 API，并持续请求解决方案，直到 CAPTCHA 图像被解决或达到超时。'
- en: To check for error messages in the API response, the `check()` method examines
    whether the initial characters follow the expected format of four digits for the
    error code before the error message. For more robust use of this API, this method
    could be expanded to cover each of the 34 error types.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 API 响应中的错误信息，`check()` 方法会检查初始字符是否遵循错误代码在错误信息之前的预期格式，即四位数字。为了更稳健地使用此 API，此方法可以扩展以涵盖
    34 种错误类型中的每一种。
- en: 'Here is an example of solving a CAPTCHA image with the `CaptchaAPI` class:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用 `CaptchaAPI` 类解决 CAPTCHA 图像的一个示例：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is the correct solution for the first complex CAPTCHA image shown earlier
    in this chapter. If the same CAPTCHA image is submitted again soon after, the
    cached result is returned immediately, and no additional credit is used:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章前面展示的第一个复杂 CAPTCHA 图像的正确解决方案。如果在此之后不久再次提交相同的 CAPTCHA 图像，将立即返回缓存的解决方案，并且不会使用额外的信用：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Reporting errors
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告错误
- en: Most CAPTCHA-solving services, such as 9kw.eu, offer the ability to report issues
    with solved CAPTCHAs and give feedback as to whether the text worked properly
    on the site or not. You may have already noticed that we have a `report` method
    on our `CaptchaAPI` class, which allows us to pass the CAPTCHA ID along with a
    boolean to determine whether the CAPTCHA was correct or not. It will then send
    the data to an endpoint used just for reporting CAPTCHA correctness. For our use
    case, we can determine if the CAPTCHA was correct by determining if our registration
    form succeeds or fails.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数CAPTCHA解决服务，如9kw.eu，都提供报告已解决CAPTCHA问题的能力，并提供有关文本是否在网站上正确工作的反馈。您可能已经注意到，我们`CaptchaAPI`类中有一个`report`方法，允许我们传递CAPTCHA
    ID以及一个布尔值来确定CAPTCHA是否正确。然后它将数据发送到仅用于报告CAPTCHA正确性的端点。对于我们的用例，我们可以通过确定我们的注册表单是否成功来确定CAPTCHA是否正确。
- en: Depending on what API you use, you may get returned credits when you report
    incorrect CAPTCHAs, which is useful if you are paying for the service. Of course,
    this could also be abused, so there is usually an upper limit on error reports
    for each day. Regardless of the return, reporting both correct and incorrect CAPTCHA
    solutions can help improve the service and allow you to not pay extra for invalid
    solutions.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您使用的API，当您报告错误的CAPTCHA时，您可能会获得一些积分，如果您为该服务付费，这很有用。当然，这也可能被滥用，因此通常对每天的错误报告有一个上限。无论回报如何，报告正确和错误的CAPTCHA解决方案都可以帮助改进服务，并让您不必为无效的解决方案支付额外费用。
- en: Integrating with registration
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成注册
- en: 'Now that we have a working CAPTCHA API solution, we can integrate it with the
    previous form. Here is a modified version of the `register` function, which now utilizes
    the `CaptchaAPI` class:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个工作的CAPTCHA API解决方案，我们可以将其与之前的表单集成。以下是修改后的`register`函数版本，它现在使用`CaptchaAPI`类：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see from the preceding code, we are utilizing the new `CaptchaAPI`
    and ensuring we are reporting errors and success to the API. We also utilize `ConfigParser`,
    so our API key is never saved in the repository and is, instead, referenced in
    a config file. To see an example of the configuration file, check the repository
    ([http://github.com/kjam/wswp/blob/master/code/example_config.cfg](http://github.com/kjam/wswp/blob/master/code/example_config.cfg)).
    You could also store the API key in the environment variables or a safe storage
    on your computer or server.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的代码中可以看到，我们正在使用新的`CaptchaAPI`，并确保我们向API报告错误和成功。我们还使用了`ConfigParser`，因此我们的API密钥永远不会保存在仓库中，而是通过配置文件进行引用。要查看配置文件的示例，请检查仓库（[http://github.com/kjam/wswp/blob/master/code/example_config.cfg](http://github.com/kjam/wswp/blob/master/code/example_config.cfg)）。您也可以将API密钥存储在环境变量中或您计算机或服务器上的安全存储中。
- en: 'We can now try our new register function:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以尝试我们的新注册功能：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It worked! The CAPTCHA image was successfully extracted from the form, submitted
    to the 9kw API, solved manually by another user, and the result was successfully
    submitted to the web server to register a new account.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 它成功了！CAPTCHA图像已成功从表单中提取出来，提交给了9kw API，由另一位用户手动解决，并将结果成功提交到网络服务器以注册新账户。
- en: CAPTCHAs and machine learning
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CAPTCHA和机器学习
- en: With advances in deep learning and image recognition, computers are getting
    better at properly identifying text and objects in images. There have been several
    interesting papers and projects applying these deep learning image recognition
    methods to CAPTCHAs. One Python-based project ([https://github.com/arunpatala/captcha](https://github.com/arunpatala/captcha))
    uses PyTorch to train a solver model on a large dataset of CAPTCHAs. In June 2012,
    Claudia Cruz, Fernando Uceda, and Leobardo Reyes (a group of students from Mexico)
    published a paper with an 82% solving accuracy on reCAPTCHA images ([http://dl.acm.org/citation.cfm?id=2367894](http://dl.acm.org/citation.cfm?id=2367894)).
    There have been several other research and hacking attempts, especially those
    targeting the often-included audio components of the CAPTCHA images (which are
    included for accessibility purposes).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 随着深度学习和图像识别的进步，计算机在正确识别图像中的文本和对象方面变得越来越擅长。已经有一些有趣的论文和项目将深度学习图像识别方法应用于CAPTCHA。一个基于Python的项目（[https://github.com/arunpatala/captcha](https://github.com/arunpatala/captcha)）使用PyTorch在大量的CAPTCHA数据集上训练了解决器模型。2012年6月，墨西哥的一组学生Claudia
    Cruz、Fernando Uceda和Leobardo Reyes发表了一篇论文，该论文在reCAPTCHA图像上的解决准确率达到82% ([http://dl.acm.org/citation.cfm?id=2367894](http://dl.acm.org/citation.cfm?id=2367894))。还有其他一些研究和破解尝试，特别是针对CAPTCHA图像中经常包含的音频组件（这些音频组件是为了可访问性目的而包含的）。
- en: It's unlikely that you'll need more than your OCR or API-based CAPTCHA-service
    to solve CAPTCHAs for the web scraping you encounter, but if you are curious to
    try and train your own model for fun, you will first need to find or create a
    large dataset of properly decoded CAPTCHAs. Deep learning and computer vision
    are rapidly-advancing fields, and it's likely that even more research and projects
    have been published since this book has been written!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不需要比你基于 OCR 或 API 的 CAPTCHA 服务更多的东西来解决你在网络爬取中遇到的 CAPTCHA，但如果你好奇想尝试并训练自己的模型以供娱乐，你首先需要找到或创建一个包含正确解码的
    CAPTCHA 的大量数据集。深度学习和计算机视觉是快速发展的领域，自本书编写以来，很可能还有更多的研究和项目被发表出来！
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter showed how to solve CAPTCHAs, first by using OCR, and then with
    an external API. For simple CAPTCHAs, or for when you need to solve a large amount
    of CAPTCHAs, investing time in an OCR solution can be worthwhile. Otherwise, using
    a CAPTCHA-solving API can prove to be a cost-effective alternative.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了如何解决 CAPTCHA，首先是通过使用 OCR，然后是使用外部 API。对于简单的 CAPTCHA 或者当你需要解决大量 CAPTCHA 时，投入时间在
    OCR 解决方案上可能是值得的。否则，使用 CAPTCHA 解决 API 可能会证明是一个成本效益高的替代方案。
- en: In the next chapter, we will introduce Scrapy, which is a popular high-level
    framework used to build scraping applications.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍 Scrapy，这是一个用于构建爬取应用程序的流行的高级框架。
