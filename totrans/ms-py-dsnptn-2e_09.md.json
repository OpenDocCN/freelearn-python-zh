["```py\nfrom flask import Flask\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\n```", "```py\napp = Flask(__name__)\n```", "```py\nlimiter = Limiter(\n    get_remote_address,\n    app=app,\n    default_limits=[\"100 per day\", \"10 per hour\"],\n    storage_uri=\"memory://\",\n    strategy=\"fixed-window\",\n)\n```", "```py\n@app.route(\"/limited\")\ndef limited_api():\n    return \"Welcome to our API!\"\n```", "```py\n@app.route(\"/more_limited\")\n@limiter.limit(\"2/minute\")\ndef more_limited_api():\n    return \"Welcome to our expensive, thus very limited, API!\"\n```", "```py\nif __name__ == \"__main__\":\n    app.run(debug=True)\n```", "```py\nimport logging\nimport random\nimport time\n```", "```py\nlogging.basicConfig(level=logging.DEBUG)\n```", "```py\ndef retry(attempts):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(attempts):\n                try:\n                    logging.info(\"Retry happening\")\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    time.sleep(1)\n                    logging.debug(e)\n            return \"Failure after all attempts\"\n        return wrapper\n    return decorator\n```", "```py\n@retry(attempts=3)\ndef connect_to_database():\n    if random.randint(0, 1):\n        raise Exception(\"Temporary Database Error\")\n    return \"Connected to Database\"\n```", "```py\nif __name__ == \"__main__\":\n    for i in range(1, 6):\n        logging.info(f\"Connection attempt #{i}\")\n        print(f\"--> {connect_to_database()}\")\n```", "```py\npython ch09/retry/retry_database_connection.py\n```", "```py\nINFO:root:Connection attempt #1\nINFO:root:Retry happening\n--> Connected to Database\nINFO:root:Connection attempt #2\nINFO:root:Retry happening\nDEBUG:root:Temporary Database Error\nINFO:root:Retry happening\nDEBUG:root:Temporary Database Error\nINFO:root:Retry happening\nDEBUG:root:Temporary Database Error\n--> Failure after all attempts\nINFO:root:Connection attempt #3\nINFO:root:Retry happening\n--> Connected to Database\nINFO:root:Connection attempt #4\nINFO:root:Retry happening\n--> Connected to Database\nINFO:root:Connection attempt #5\nINFO:root:Retry happening\nDEBUG:root:Temporary Database Error\nINFO:root:Retry happening\nDEBUG:root:Temporary Database Error\nINFO:root:Retry happening\nDEBUG:root:Temporary Database Error\n--> Failure after all attempts\n```", "```py\nimport pybreaker\nfrom datetime import datetime\nimport random\nfrom time import sleep\n```", "```py\nbreaker = pybreaker.CircuitBreaker(fail_max=2, reset_timeout=5)\n```", "```py\n@breaker\ndef fragile_function():\n    if not random.choice([True, False]):\n        print(\" / OK\", end=\"\")\n    else:\n        print(\" / FAIL\", end=\"\")\n        raise Exception(\"This is a sample Exception\")\n```", "```py\ndef main():\n    while True:\n        print(datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"), end=\"\")\n        try:\n            fragile_function()\n        except Exception as e:\n            print(\" / {} {}\".format(type(e), e), end=\"\")\n        finally:\n            print(\"\")\n            sleep(1)\n```"]