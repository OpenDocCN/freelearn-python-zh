["```py\n$ jupyter notebook \n```", "```py\n$ jupyter lab \n```", "```py\n#1\nimport json\nimport random\nfrom datetime import date, timedelta\nimport faker \n```", "```py\n#2\nfake = faker.Faker() \n```", "```py\n#3\ndef get_users(no_of_users):\n    usernames = (\n        fake.unique.user_name() for i in range(usernames_no)\n    )\n    genders = random.choices(\n        [\"M\", \"F\", \"O\"], weights=[0.43, 0.47, 0.1], k=no_of_users\n    )\n    for username, gender in zip(usernames, genders):\n        name = get_random_name(gender)\n        user = {\n            \"username\": username,\n            \"name\": name,\n            \"gender\": gender,\n            \"email\": fake.email(),\n            \"age\": fake.random_int(min=18, max=90),\n            \"address\": fake.address(),\n        }\n        yield json.dumps(user)\ndef get_random_name(gender):\n    match gender:\n        case \"F\":\n            name = fake.name_female()\n        case \"M\":\n            name = fake.name_male()\n        case _:\n            name = fake.name_nonbinary()\n    return name\nusers = get_users(1000)\nusers[:3] \n```", "```py\n ['{\"username\": \"epennington\", \"name\": \"Stephanie Gonzalez\", ...}',\n '{\"username\": \"joshua61\", \"name\": \"Diana Richards\", ...}',\n '{\"username\": \"dmoore\", \"name\": \"Erin Rose\", \"gender\": \"F\",...}'] \n```", "```py\n#4\n# campaign name format:\n# InternalType_StartDate_EndDate_TargetAge_TargetGender_Currency\ndef get_type():\n    # just some meaningless example codes\n    types = [\"AKX\", \"BYU\", \"GRZ\", \"KTR\"]\n    return random.choice(types)\ndef get_start_end_dates():\n    duration = random.randint(1, 2 * 365)\n    offset = random.randint(-365, 365)\n    start = date.today() - timedelta(days=offset)\n    end = start + timedelta(days=duration)\n\n    def _format_date(date_):\n        return date_.strftime(\"%Y%m%d\")\n    return _format_date(start), _format_date(end)\ndef get_age_range():\n    age = random.randrange(20, 46, 5)\n    diff = random.randrange(5, 26, 5)\n    return \"{}-{}\".format(age, age + diff)\ndef get_gender():\n    return random.choice((\"M\", \"F\", \"A\"))\ndef get_currency():\n    return random.choice((\"GBP\", \"EUR\", \"USD\"))\ndef get_campaign_name():\n    separator = \"_\"\n    type_ = get_type()\n    start, end = get_start_end_dates()\n    age_range = get_age_range()\n    gender = get_gender()\n    currency = get_currency()\n    return separator.join(\n        (type_, start, end, age_range, gender, currency)\n    ) \n```", "```py\n#5\n# campaign data:\n# name, budget, spent, clicks, impressions\ndef get_campaign_data():\n    name = get_campaign_name()\n    budget = random.randint(10**3, 10**6)\n    spent = random.randint(10**2, budget)\n    clicks = int(random.triangular(10**2, 10**5, 0.2 * 10**5))\n    impressions = int(random.gauss(0.5 * 10**6, 2))\n    return {\n        \"cmp_name\": name,\n        \"cmp_bgt\": budget,\n        \"cmp_spent\": spent,\n        \"cmp_clicks\": clicks,\n        \"cmp_impr\": impressions,\n    } \n```", "```py\n#6\ndef get_data(users):\n    data = []\n    for user in users:\n        campaigns = [\n            get_campaign_data()\n            for _ in range(random.randint(2, 8))\n        ]\n        data.append({\"user\": user, \"campaigns\": campaigns})\n    return data \n```", "```py\n#7\nrough_data = get_data(users)\nrough_data[:2]  # let us take a peek \n```", "```py\n {'user': '{\"username\": \"epennington\", \"name\": ...}',\n  'campaigns': [{'cmp_name': 'KTR_20250404_20250916_35-50_A_EUR',\n    'cmp_bgt': 964496,\n    'cmp_spent': 29586,\n    'cmp_clicks': 36632,\n    'cmp_impr': 500001},\n   {'cmp_name': 'AKX_20240130_20241017_20-25_M_GBP',\n    'cmp_bgt': 344739,\n    'cmp_spent': 166010,\n    'cmp_clicks': 67325,\n    'cmp_impr': 499999}]} \n```", "```py\n#8\ndata = []\nfor datum in rough_data:\n    for campaign in datum[\"campaigns\"]:\n        campaign.update({\"user\": datum[\"user\"]})\n        data.append(campaign)\ndata[:2]  # let us take another peek \n```", "```py\n {'cmp_name': 'KTR_20250404_20250916_35-50_A_EUR',\n 'cmp_bgt': 964496,\n 'cmp_spent': 29586,\n 'cmp_clicks': 36632,\n 'cmp_impr': 500001,\n 'user': '{\"username\": \"epennington\", ...}'}, \n```", "```py\n#9\nwith open(\"data.json\", \"w\") as stream:\n    stream.write(json.dumps(data)) \n```", "```py\n#1\nimport json\nimport arrow\nimport pandas as pd\nfrom pandas import DataFrame \n```", "```py\n#2\ndf = pd.read_json(\"data.json\")\ndf.head() \n```", "```py\n#3\ndf.count() \n```", "```py\n#4\ndf.describe() \n```", "```py\n#5\ndf.sort_values(by=[\"cmp_bgt\"], ascending=False).head(3) \n```", "```py\n#6\ndf.sort_values(by=[\"cmp_bgt\"], ascending=False).tail(3) \n```", "```py\n#7\ndef unpack_campaign_name(name):\n    # very optimistic method, assumes data in campaign name\n    # is always in good state\n    type_, start, end, age, gender, currency = name.split(\"_\")\n    start = arrow.get(start, \"YYYYMMDD\").date()\n    end = arrow.get(end, \"YYYYMMDD\").date()\n    return type_, start, end, age, gender, currency \n```", "```py\n#8\ncampaign_data = df[\"cmp_name\"].apply(unpack_campaign_name) \n```", "```py\n#9\ncampaign_cols = [\n    \"Type\",\n    \"Start\",\n    \"End\",\n    \"Target Age\",\n    \"Target Gender\",\n    \"Currency\",\n]\ncampaign_df = DataFrame.from_records(\n    campaign_data, columns=campaign_cols, index=df.index\n)\ncampaign_df.head(3) \n```", "```py\n#10\ndf = df.join(campaign_df) \n```", "```py\n#11\ndf[[\"cmp_name\"] + campaign_cols].head(3) \n```", "```py\n#12\ndef unpack_user_json(user):\n    # very optimistic as well, expects user objects\n    # to have all attributes\n    user = json.loads(user.strip())\n    return [\n        user[\"username\"],\n        user[\"email\"],\n        user[\"name\"],\n        user[\"gender\"],\n        user[\"age\"],\n        user[\"address\"],\n    ]\nuser_data = df[\"user\"].apply(unpack_user_json)\nuser_cols = [\n    \"username\",\n    \"email\",\n    \"name\",\n    \"gender\",\n    \"age\",\n    \"address\",\n]\nuser_df = DataFrame.from_records(\n    user_data, columns=user_cols, index=df.index\n) \n```", "```py\n#13\ndf = df.join(user_df)\ndf[[\"user\"] + user_cols].head(2) \n```", "```py\n#14\nnew_column_names = {\n    \"cmp_bgt\": \"Budget\",\n    \"cmp_spent\": \"Spent\",\n    \"cmp_clicks\": \"Clicks\",\n    \"cmp_impr\": \"Impressions\",\n}\ndf.rename(columns=new_column_names, inplace=True) \n```", "```py\n#15\ndef calculate_metrics(df):\n    # Click Through Rate\n    df[\"CTR\"] = df[\"Clicks\"] / df[\"Impressions\"]\n    # Cost Per Click\n    df[\"CPC\"] = df[\"Spent\"] / df[\"Clicks\"]\n    # Cost Per Impression\n    df[\"CPI\"] = df[\"Spent\"] / df[\"Impressions\"]\ncalculate_metrics(df) \n```", "```py\n#16\ndf[[\"Spent\", \"Clicks\", \"Impressions\", \"CTR\", \"CPC\", \"CPI\"]].head(\n    3\n) \n```", "```py\n#17\nclicks = df[\"Clicks\"][0]\nimpressions = df[\"Impressions\"][0]\nspent = df[\"Spent\"][0]\nCTR = df[\"CTR\"][0]\nCPC = df[\"CPC\"][0]\nCPI = df[\"CPI\"][0]\nprint(\"CTR:\", CTR, clicks / impressions)\nprint(\"CPC:\", CPC, spent / clicks)\nprint(\"CPI:\", CPI, spent / impressions) \n```", "```py\nCTR: 0.07326385347229306 0.07326385347229306\nCPC: 0.8076545097182791 0.8076545097182791\nCPI: 0.059171881656236686 0.059171881656236686 \n```", "```py\n#18\ndef get_day_of_the_week(day):\n    return day.strftime(\"%A\")\ndef get_duration(row):\n    return (row[\"End\"] - row[\"Start\"]).days\ndf[\"Day of Week\"] = df[\"Start\"].apply(get_day_of_the_week)\ndf[\"Duration\"] = df.apply(get_duration, axis=\"columns\") \n```", "```py\n#19\ndf[[\"Start\", \"End\", \"Duration\", \"Day of Week\"]].head(3) \n```", "```py\n#19\nfinal_columns = [\n    \"Type\",\n    \"Start\",\n    \"End\",\n    \"Duration\",\n    \"Day of Week\",\n    \"Budget\",\n    \"Currency\",\n    \"Clicks\",\n    \"Impressions\",\n    \"Spent\",\n    \"CTR\",\n    \"CPC\",\n    \"CPI\",\n    \"Target Age\",\n    \"Target Gender\",\n    \"Username\",\n    \"Email\",\n    \"Name\",\n    \"Gender\",\n    \"Age\",\n]\ndf = df[final_columns] \n```", "```py\n#20\ndf.to_csv(\"df.csv\") \n```", "```py\n#21\ndf.to_json(\"df.json\") \n```", "```py\n#22\ndf.to_excel(\"df.xlsx\") \n```", "```py\n#23\n%matplotlib widget \n```", "```py\n#24\nimport matplotlib.pyplot as plt\nplt.style.use([\"classic\", \"ggplot\"])\nplt.rc(\"font\", family=\"serif\"})\nplt.rc(\"savefig\", dpi=300) \n```", "```py\n#27\ndf[[\"Budget\", \"Spent\", \"Clicks\", \"Impressions\"]].hist(\n    bins=16, figsize=(16, 6)\n)\nplt.savefig(\"Figure13.4.png\") \n```", "```py\n#28\ndf[[\"CTR\", \"CPC\", \"CPI\"]].hist(bins=20, figsize=(16, 6))\nplt.savefig(\"Figure13.5.png\") \n```", "```py\n#29\nselector = df.Spent > df.Budget * 0.75\ndf[selector][[\"Budget\", \"Spent\", \"Clicks\", \"Impressions\"]].hist(\n    bins=15, figsize=(16, 6), color=\"green\"\n)\nplt.savefig(\"Figure13.6.png\") \n```", "```py\n#30\ndf_weekday = df.groupby([\"Day of Week\"]).sum(numeric_only=True)\ndf_weekday[[\"Impressions\", \"Spent\", \"Clicks\"]].plot(\n    figsize=(16, 6), subplots=True\n)\nplt.savefig(\"Figure13.7.png\") \n```", "```py\n#31\nagg_config = {\n    \"Impressions\": [\"mean\", \"std\"],\n    \"Spent\": [\"mean\", \"std\"],\n}\ndf.groupby([\"Target Gender\", \"Target Age\"]).agg(agg_config) \n```", "```py\n#31\ndf.pivot_table(\n    values=[\"Impressions\", \"Clicks\", \"Spent\"],\n    index=[\"Target Age\"],\n    columns=[\"Target Gender\"],\n    aggfunc=\"sum\"\n) \n```"]