- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating an API in AWS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to create an **application programming
    interface** (**API**) via **API Gateway**. API Gateway is an AWS service that
    allows you to create and maintain an API. With the API Gateway service, you don’t
    need to provision a server; AWS manages it in the backend. In addition to that,
    API Gateway helps you to monitor incoming and outgoing requests. Another advantage
    of API Gateway is to scale up your API services when there is a huge request from
    users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: What is API Gateway?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an API using API Gateway
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is API Gateway?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**API Gateway** is an AWS service that is used to create, maintain, and publish
    an API. API Gateway supports multiple API protocols, such as **RESTful** (also
    known as the REST API) and **WebSocket**.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'API Gateway is a single point of entry for the backend services. As you can
    see in the following architecture, API Gateway gets a request from a client and
    integrates the incoming request with microservices, databases, AWS Lambda, or
    another AWS service:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_9.01_B19195.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Architecture of API Gateway
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a good idea of what API Gateway is, let’s have a look at its
    features.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Features of API Gateway
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'The features of API Gateway are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: It supports different protocols, such as RESTful and WebSocket.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can monitor incoming and outgoing API requests, which enhances the visibility
    of the service.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can easily create and maintain the API. It can be created either in AWS
    Management Console or the AWS CLI.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security is important for cloud services, as well as the API. You can create
    a key to enable secure access to the API. In addition to that, you can add an
    SSL certificate to verify the request.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has built-in integration with AWS services. When you implement an API, you
    can easily integrate it with AWS services.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a scalable service that adds more resources when you have more requests.
    For example, on Black Friday, there is more load on e-commerce websites. In these
    cases, API Gateway automatically scales your API requests. In this case, you can
    also define a **Cross-Origin Resource Sharing** (**CORS**) policy as a security
    feature that controls the HTTP request.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we have looked at the basic features of API Gateway, and now
    we will start to implement sample API applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Creating an API using API Gateway
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to create a simple API that accepts a request from a client. The
    API accepts two numbers, sums up two numbers in a Lambda function, and returns
    the calculated values. AWS Lambda is going to be implemented via Python. You can
    see the high-level flow in the following architecture:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_9.02_B19195.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Data flow
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: We are going to start with the Lambda function creation. After the Lambda function
    creation, API Gateway is going to be set up with Lambda integration.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create the Lambda function step by step:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the console and navigate to the **AWS** **Lambda** page:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.03_B19195.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Lambda function
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Lambda function. Let’s name it `SumUpLambda`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.04_B19195.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Creating a new Lambda function
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Create function** and wait a few seconds while the function is created:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.05_B19195.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Clicking Create function
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'A few seconds later, you will see the Lambda function has been created with
    the template code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_9.06_B19195.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Lambda template
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a Lambda function that sums up two values:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code snippet takes two numbers as parameters, such as `Number1` and `Number2`.
    The Lambda function calculates the sum of two values and returns a status code
    and the value of the sum. When we call this function from the API, it returns
    the sum value as well as `statusCode`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s paste this code block into the Lambda function:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_9.07_B19195.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Actual Lambda code
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s follow these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Test**. A new panel opens in which Lambda asks for a test parameter:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.08_B19195.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – Test event
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'As can be seen in the preceding figure, you can paste the following JSON to
    see whether the Lambda function is running properly before integrating with the
    API:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Click **Save**, which is under the **Event** **JSON** panel:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.09_B19195.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – Clicking on the Save button
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy the changes by clicking **Deploy**:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.10_B19195.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 – Deploying Lambda
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: After the Lambda deployment, we are going to integrate API Gateway with AWS
    Lambda. Lambda will be used as the backend for API Gateway.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create an API step by step:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the console and search for `api gateway`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.11_B19195.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: Figure 9.11 – The console
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'On the main screen, select **REST API**, and click **Build**:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.12_B19195.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: Figure 9.12 – REST API
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now see a new screen to be filled out. We will select **New API**
    in the **Create new API** section. Other options in this section allow you to
    create an example API or import a predefined API. In the **Settings** section,
    we will add the **API name** and **Description** details. In the **Endpoint Type**
    drop-down list, we will select **Regional**, which is used to create an API that
    is accessible from the same region:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.13_B19195.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: Figure 9.13 – Form for API creation
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click **Create API** (as depicted in the preceding figure), you will
    be taken to a new page that allows you to define the details for a custom SumUp
    API:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.14_B19195.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: Figure 9.14 – API form
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to define the API details. Click on the **Actions** dropdown
    and select **Create Method**:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.15_B19195.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: Figure 9.15 – Create Method
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'When we create a method, we select **POST** as the API type:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.16_B19195.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: Figure 9.16 – Selecting POST
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'While you implement an API, you can select API types. The following are the
    most used API types:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '**GET** is used to retrieve data from a source.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SumUp` from Lambda.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PUT** is used to update the data in a source.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DELETE** is used to delete the data in a source.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you select **POST**, you need to choose the integration type. For this
    example, we are going to select the **Lambda Function** integration type:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.17_B19195.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: Figure 9.17 – Setting up the integration type
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **SumUpLambda** function that is implemented, and click **Save**,
    which is not depicted in the following figure but is situated at the bottom of
    the page:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.18_B19195.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: Figure 9.18 – Selecting Lambda
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click **Save**, it asks for confirmation to allow the required permissions.
    Click **OK** and it will create the permissions:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.19_B19195.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: Figure 9.19 – Permissions
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'After setting the permissions, you can see the data flow for the API:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_9.20_B19195.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: Figure 9.20 – The API flow
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to add a CORS policy. CORS is a security policy that allows a
    particular origin (domain or port) to browse your resource. Let’s enable a CORS
    policy:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Actions** drop-down button to list the available actions, and then
    click **Enable CORS**:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.21_B19195.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: Figure 9.21 – List of actions
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill out the form and click **Enable CORS and replace existing CORS headers**.
    You can retain the form details as is. The form defines the following:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which methods are allowed access to the API by selecting **Methods**
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which request header is required via **Access-Control-Allow-Headers**
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which origins are able to call the API via **Access-Control-Allow-Origin**
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Gateway response types by selecting the **DEFAULT 4XX** or **DEFAULT 5XX**
    port. You can see the list here: [https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.xhtml](https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.xhtml).'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.22_B19195.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: Figure 9.22 – Enable CORS
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Congrats! You have successfully created the Lambda function and an API gateway.
    The next step is to test the API.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s test the SumUp API:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Test** button in the flow:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.23_B19195.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: Figure 9.23 – Testing the API
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code in the **Request Body** field to add a parameter for
    Lambda:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Click **Test** and see the results:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_9.24_B19195.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: Figure 9.24 – Adding a parameter
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the results:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_9.25_B19195.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: Figure 9.25 – The result of the API response
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: When you check the logs, you can see the results of the API response. As you
    can see, the sum of the values is `25`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: In this topic, we implemented an API that used Python in the Lambda code. As
    you saw, creating an API is an easy solution in AWS. This way, you can focus on
    the backend implementation instead of focusing on the infrastructure.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use the AWS API Gateway service and how to
    create an API gateway that has a backend service with Python Lambda. API Gateway
    is useful when you need to implement an API service with backend support via Python.
    It comes with scalability, logging, and monitoring advantages. In the next chapter,
    we will take a look at the basics of DynamoDB and NoSQL.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 AWS API Gateway 服务以及如何创建一个后端服务为 Python Lambda 的 API 网关。当您需要通过
    Python 实现带有后端支持的 API 服务时，API Gateway 非常有用。它具有可扩展性、日志记录和监控优势。在下一章中，我们将探讨 DynamoDB
    和 NoSQL 的基础知识。
