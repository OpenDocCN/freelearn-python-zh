["```py\n>>> cards = list(product(range(1, 14), ’♣♢♡♠’)) \n>>> cards[:4] \n[(1, ’♣’), (1, ’♢’), (1, ’♡’), (1, ’♠’)] \n>>> cards[4:8] \n[(2, ’♣’), (2, ’♢’), (2, ’♡’), (2, ’♠’)] \n>>> cards[-4:] \n[(13, ’♣’), (13, ’♢’), (13, ’♡’), (13, ’♠’)]\n```", "```py\nfrom collections.abc import Iterable, Iterator, Callable \nfrom itertools import product \nfrom typing import TypeVar \n\nJTL = TypeVar(\"JTL\") \nJTR = TypeVar(\"JTR\") \n\ndef join( \n    t1: Iterable[JTL], \n    t2: Iterable[JTR], \n    where: Callable[[tuple[JTL, JTR]], bool] \n) -> Iterable[tuple[JTL, JTR]]: \n    return filter(where, product(t1, t2))\n```", "```py\nfrom typing import NamedTuple \nclass Color(NamedTuple): \n    rgb: tuple[int, int, int] \n    name: str\n```", "```py\n>>> palette = [Color(rgb=(239, 222, 205), name=’Almond’), \n...  Color(rgb=(255, 255, 153), name=’Canary’), \n...  Color(rgb=(28, 172, 120), name=’Green’), \n...  Color(rgb=(255, 174, 66), name=’Yellow Orange’) \n... ]\n```", "```py\npixels = [(r, g, b), (r, g, b), (r, g, b), ...]\n```", "```py\nfrom collections.abc import Iterator \nfrom typing import TypeAlias \nfrom PIL import Image  # type: ignore[import] \n\nPoint: TypeAlias = tuple[int, int] \nRGB: TypeAlias = tuple[int, int, int] \nPixel: TypeAlias = tuple[Point, RGB] \n\ndef pixel_iter(img: Image) -> Iterator[Pixel]: \n    w, h = img.size \n    return ( \n        (c, img.getpixel(c)) \n        for c in product(range(w), range(h)) \n    )\n```", "```py\nimport math \ndef euclidean(pixel: RGB, color: Color) -> float: \n    return math.sqrt( \n        sum(map( \n            lambda x_1, x_2: (x_1 - x_2) ** 2, \n            pixel, \n            color.rgb)) \n        ) \n\ndef manhattan(pixel: RGB, color: Color) -> float: \n    return sum(map( \n        lambda x_1, x_2: abs(x_1 - x_2), \n        pixel, \n        color.rgb))\n```", "```py\n[((0, 0), \n  (92, 139, 195), \n  Color(rgb=(239, 222, 205), name=’Almond’), \n  169.10943202553784), \n ((0, 0), \n  (92, 139, 195), \n  Color(rgb=(255, 255, 153), name=’Canary’), \n  204.42357985320578), \n ((0, 0), \n  (92, 139, 195), \n  Color(rgb=(28, 172, 120), name=’Green’), \n  103.97114984456024), \n ((0, 0), \n  (92, 139, 195), \n  Color(rgb=(48, 186, 143), name=’Mountain Meadow’), \n  82.75868534480233),\n```", "```py\nmin(choices, key=lambda xypcd: xypcd[3])\n```", "```py\nfrom collections.abc import Iterable \nfrom itertools import groupby \n\ndef matching_1( \n        pixels: Iterable[Pixel], \n        colors: Iterable[Color] \n    ) -> Iterator[tuple[Point, RGB, Color, float]]: \n\n    distances = ( \n        (pixel[0], pixel[1], color, euclidean(pixel[1], color)) \n        for pixel, color in product(pixels, colors) \n    ) \n    for _, choices in groupby(distances, key=lambda xy_p_c_d: xy_p_c_d[0]): \n        yield min(choices, key=lambda xypcd: xypcd[3])\n```", "```py\n>>> r = 15 \n>>> r_f = 15/256 \n>>> r_f \n0.05859375 \n>>> r_f + 1/100 - 1/100 \n0.05859374999999999\n```", "```py\nfrom collections import defaultdict, Counter \ndef gather_colors() -> defaultdict[RGB, list[Point]]: \n    img = Image.open(\"IMG_2705.jpg\") \n\n    palette = defaultdict(list) \n    for xy, rgb in pixel_iter(img): \n        palette[rgb].append(xy) \n\n    w, h = img.size \n    print(f\"total pixels {w*h}\") \n    print(f\"total colors {len(palette)}\") \n    return palette\n```", "```py\n>>> bin(200) \n’0b11001000’ \n>>> 200 & 0b11100000 \n192 \n>>> bin(192) \n’0b11000000’\n```", "```py\nmasked_color = tuple(map(lambda x: x & 0b11100000, c))\n```", "```py\n    product(range(0, 256, 32), range(0, 256, 32), range(0, 256, 32))\n    ```", "```py\nfrom collections.abc import Sequence \ndef make_color_map(colors: Sequence[Color]) -> dict[RGB, Color]: \n    bit3 = range(0, 256, 0b0010_0000) \n\n    best_iter = ( \n        min((euclidean(rgb, c), rgb, c) for c in colors) \n        for rgb in product(bit3, bit3, bit3) \n    ) \n    color_map = dict((b[1], b[2]) for b in best_iter) \n    return color_map\n```", "```py\ndef clone_picture( \n    color_map: dict[RGB, Color], \n    filename: str = \"IMG_2705.jpg\" \n) -> None: \n    mask = 0b1110_0000 \n    img = Image.open(filename) \n    clone = img.copy() \n    for xy, rgb in pixel_iter(img): \n        r, g, b = rgb \n        repl = color_map[(mask & r, mask & g, mask & b)] \n        clone.putpixel(xy, repl.rgb) \n    clone.show()\n```", "```py\nfrom itertools import permutations \n\ndef assignment(cost: list[tuple[int, ...]]) -> list[tuple[int, ...]]: \n    n_tasks = len(cost) \n    perms = permutations(range(n_tasks)) \n    alt = [ \n        ( \n            sum( \n                cost[task][agent] for agent, task in enumerate(perm) \n            ), \n            perm \n        ) \n        for perm in perms \n    ] \n    m = min(alt)[0] \n    return [ans for s, ans in alt if s == m]\n```", "```py\n>>> from itertools import combinations, product \n\n>>> hands = list( \n...     combinations( \n...         tuple( \n...             product(range(13), ’♠♡♢♣’) \n...         ), 5 \n...     ) \n... )\n```", "```py\n>>> combinations(range(v), 2)\n```", "```py\n[(’year’, ’Per capita consumption of cheese (US)Pounds (USDA)’, \n’Number of people who died by becoming tangled in their \nbedsheets Deaths (US) (CDC)’, \n’year’, ’Per capita consumption of mozzarella cheese (US)Pounds \n(USDA)’, ’Civil engineering doctorates awarded (US) Degrees awarded \n(National Science Foundation)’, \n’year’, ’US crude oil imports from Venezuela Millions of barrels \n(Dept. of Energy)’, ’Per capita consumption of high fructose corn \nsyrup (US) Pounds (USDA)’), \n\n(2000, 29.8, 327, 2000, 9.3, 480, 2000, 446, 62.6), \n(2001, 30.1, 456, 2001, 9.7, 501, 2001, 471, 62.5), \n(2002, 30.5, 509, 2002, 9.7, 540, 2002, 438, 62.8), \n(2003, 30.6, 497, 2003, 9.7, 552, 2003, 436, 60.9), \n(2004, 31.3, 596, 2004, 9.9, 547, 2004, 473, 59.8), \n(2005, 31.7, 573, 2005, 10.2, 622, 2005, 449, 59.1), \n(2006, 32.6, 661, 2006, 10.5, 655, 2006, 416, 58.2), \n(2007, 33.1, 741, 2007, 11, 701, 2007, 420, 56.1), \n(2008, 32.7, 809, 2008, 10.6, 712, 2008, 381, 53), \n(2009, 32.8, 717, 2009, 10.6, 708, 2009, 352, 50.1)]\n```", "```py\n>>> combinations(range(9), 2)\n```", "```py\nfrom typing import TypeVar \nfrom collections.abc import Iterator, Iterable \nT = TypeVar(\"T\") \n\ndef column(source: Iterable[list[T]], x: int) -> Iterator[T]: \n    for row in source: \n        yield row[x]\n```", "```py\nfrom collections.abc import Iterator \nfrom itertools import * \nfrom Chapter04.ch04_ex4 import corr \n\ndef multi_corr( \n        source: list[list[float]] \n    ) -> Iterator[tuple[float, float, float]]: \n    n = len(source[0]) \n    for p, q in combinations(range(n), 2): \n        header_p, *data_p = list(column(source, p)) \n        header_q, *data_q = list(column(source, q)) \n        if header_p == header_q: \n            continue \n        r_pq = corr(data_p, data_q) \n        yield header_p, header_q, r_pq\n```", "```py\n0.96: year vs Per capita consumption of cheese (US) Pounds (USDA) \n\n0.95: year vs Number of people who died by becoming tangled in their \nbedsheets Deaths (US) (CDC) \n\n0.92: year vs Per capita consumption of mozzarella cheese (US) Pounds \n(USDA) \n\n0.98: year vs Civil engineering doctorates awarded (US) Degrees awarded \n(National Science Foundation) \n\n-0.80: year vs US crude oil imports from Venezuela Millions of barrels \n(Dept. of Energy) \n\n-0.95: year vs Per capita consumption of high fructose corn syrup (US) \nPounds (USDA) \n\n0.95: Per capita consumption of cheese (US) Pounds (USDA) vs Number of \npeople who died by becoming tangled in their bedsheets Deaths (US) (CDC) \n\n0.96: Per capita consumption of cheese (US)Pounds (USDA) vs year \n\n0.98: Per capita consumption of cheese (US)Pounds (USDA) vs Per capita \nconsumption of mozzarella cheese (US)Pounds (USDA) \n\n... \n\n0.88: US crude oil imports from Venezuela Millions of barrels (Dept. of \nEnergy) vs Per capita consumption of high fructose corn syrup (US)Pounds \n(USDA)\n```", "```py\n>>> import itertools \n>>> from pprint import pprint \n>>> pprint( \n... list(itertools.combinations([1,2,3,4,5,6], 2)) \n... ) \n[(1, 2), \n (1, 3), \n (1, 4), \n... \n (4, 6), \n (5, 6)] \n>>> pprint( \n... list(itertools.combinations_with_replacement([1,2,3,4,5,6], 2)) \n... ) \n[(1, 1), \n (1, 2), \n (1, 3), \n... \n (5, 5), \n (5, 6), \n (6, 6)]\n```", "```py\ndef make_color_map(colors: Sequence[Color], distance: Callable[[RGB, Color], float]) -> dict[RGB, Color]:\n```"]