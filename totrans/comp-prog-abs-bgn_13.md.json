["```py\nfunction add(a, b)\n    return a + b\n```", "```py\ngit init\n```", "```py\ngit add calc.code\n```", "```py\ngit commit -m \"Initial Commit\"\n```", "```py\ngit branch subtract\n```", "```py\ngit checkout subtract\n```", "```py\nfunction add(a, b)\n    return a + b\nfunction subtract(a, b)\n    return a - b\n```", "```py\ngit add calc.code\ngit commit -m \"Added the subtract function.\"\n```", "```py\ngit checkout master\n```", "```py\nfunction add(a, b)\n    return a + b\n```", "```py\ngit checkout subtract\n```", "```py\nfunction add(a, b)\n    return a + b\nfunction subtract(a, b)\n    return a - b\n```", "```py\ngit checkout master\n```", "```py\ngit merge subtract\n```", "```py\nfunction add(a, b)\n    return a + b\nfunction subtract(a, b)\n    return a - b\n```", "```py\n    origin points out the central repository, and master is the branch she wants to pull down. \n    ```", "```py\n    git branch multiply\n    ```", "```py\n    git checkout multiply\n    ```", "```py\n    function add(a, b)\n        return a + b\n    function subtract(a, b)\n        return a – b\n    function multiply(a, b)\n        return a * b\n    ```", "```py\n    function add(a, b)\n        return a + b\n    function subtract(a, b)\n        return a – b\n    function divide(a, b)\n        return a / b\n    ```", "```py\n    git pull origin master\n    ```", "```py\n    git push origin master\n    ```", "```py\n    git pull origin master\n    ```", "```py\n    function add(a, b)\n      return a + b\n    function subtract(a, b)\n      return a - b\n    <<<<<<< HEAD\n    function multiply(a, b)\n      return a * b  \n    =======\n    function divide(a, b)\n      return a / b\n    >>>>>>> div\n    ```", "```py\n    function add(a, b)\n      return a + b\n    function subtract(a, b)\n      return a - b\n    function multiply(a, b)\n      return a * b  \n    function divide(a, b)\n      return a / b\n    ```", "```py\nfunction test_add_one()\n  result = add(2, 3)\n  assert.equal(5, result)\n```", "```py\nfunction test_add_two()\n  result = add(0, 10)\n  assert.equal(10, result)\nfunction test_subtract_one()\n  result = subtract(2, 3)\n  assert.equal(-1, result)\nfunction test_subtract_two()\n  result = subtract(7, 4)\n  assert.equal(3, result)\n```", "```py\nresult = divide(10, 0)\n```"]