- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Creating a Django Project
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Django项目
- en: '**Django** is one of the most famous backend frameworks written in Python and
    is often used to build simple or complex web applications. As for **React**, it’s
    one of the most widely used JavaScript libraries to create reactive and powerful
    user interfaces. In this chapter, we’ll focus on Django first.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Django**是使用Python编写的最著名的后端框架之一，常用于构建简单或复杂的Web应用程序。至于**React**，它是创建反应性和强大用户界面的最广泛使用的JavaScript库之一。在本章中，我们将首先关注Django。'
- en: 'In this chapter, we’ll briefly explain **software development** and, in particular,
    **backend development** in the context of what we’ll be building: a social network
    web application with Django and React. We’ll also talk about the most common tools
    used for backend development in **Python** – here in Django. Then, we will create
    a Django project and explain the most important parts of a Django project. After
    that, we’ll connect **PostgreSQL** to the Django project.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍**软件开发**，特别是我们将在Django和React的背景下构建的社交网络Web应用程序中的**后端开发**。我们还将讨论在**Python**中用于后端开发的常见工具——在这里是Django。然后，我们将创建一个Django项目，并解释Django项目最重要的部分。之后，我们将**PostgreSQL**连接到Django项目。
- en: By the end of this chapter, you’ll understand concepts such as software development,
    frontend development, and backend development. You’ll also learn how to create
    a project in Django and start a server.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将理解软件开发、前端开发和后端开发的概念。你还将学习如何在Django中创建项目并启动服务器。
- en: 'In this chapter, we’ll be covering the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: An overview of software development
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件开发概述
- en: Understanding backend development
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解后端开发
- en: What is an API?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是API？
- en: What is Django?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Django？
- en: Setting up the work environment
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置工作环境
- en: Configuring the database
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置数据库
- en: An overview of software development
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发概述
- en: Software development is a complex process full of many steps and many components.
    These components ensure that conceiving, specifying, designing, programming, documenting,
    and testing an application, a framework, or software is respected and well applied.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发是一个复杂的过程，包含许多步骤和许多组件。这些组件确保在构思、指定、设计、编程、文档化和测试应用程序、框架或软件时得到尊重并得到良好的应用。
- en: 'Generally, the software is made of the following two components:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，软件由以下两个组件组成：
- en: 'The **backend**: This represents what the user can’t see; it’s composed of
    the business logic and data manipulation from a database'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后端**：这代表用户看不到的部分；它由业务逻辑和从数据库中进行的数据操作组成'
- en: 'The **frontend**: This represents the interface provided to the user to interact
    with the whole application'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前端**：这代表提供给用户与整个应用程序交互的界面'
- en: The term frontend refers to the elements of a site or application that users
    see onscreen and with which they will interact. For example, all internet users
    will see a combination of HTML, CSS, and JavaScript on a website. It is these
    frontend programming languages that will be interpreted by the browser.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 前端这个术语指的是用户在屏幕上看到的网站或应用程序的元素，以及他们将与它们交互的元素。例如，所有互联网用户都会在网站上看到HTML、CSS和JavaScript的组合。是这些前端编程语言将被浏览器解释。
- en: Typically, the frontend consists of HTML, CSS, JavaScript, and jQuery (or other
    UI libraries or frameworks) used to replicate a design. The design is created
    by the web designer who will create graphic models with dedicated tools, such
    as Photoshop or Figma.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，前端由HTML、CSS、JavaScript和jQuery（或其他UI库或框架）组成，用于复制设计。设计是由网页设计师创建的，他们使用专门的工具，如Photoshop或Figma，来创建图形模型。
- en: Here, we’ll focus on web development. Web development is the part of software
    development focused on building websites and web applications, and the notion
    of web development relies on a client-server architecture.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将专注于Web开发。Web开发是软件开发的一部分，专注于构建网站和Web应用程序，而Web开发的理念依赖于客户端-服务器架构。
- en: The client-server architecture represents an environment in which applications
    running on a client machine can communicate with other applications installed
    on a server machine, which provides services or data from a database.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端-服务器架构代表一个环境，其中运行在客户端机器上的应用程序可以与安装在服务器机器上的其他应用程序通信，这些应用程序提供来自数据库的服务或数据。
- en: On the web, the client will simply be a browser used to request a page or a
    resource from a server.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络上，客户端将只是一个浏览器，用于从服务器请求页面或资源。
- en: 'Here’s a simple diagram demonstrating this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的图表来展示这一点：
- en: '![Figure 1.1 – Client-server architecture](img/Figure_1.1_B18221.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 客户端-服务器架构](img/Figure_1.1_B18221.jpg)'
- en: Figure 1.1 – Client-server architecture
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 客户端-服务器架构
- en: 'Now that we have a better understanding of software development, particularly
    web development, let’s move on to a component of it: backend development.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对软件开发，尤其是Web开发有了更好的理解，让我们继续讨论其一个组成部分：后端开发。
- en: Understanding backend development
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解后端开发
- en: Backend development handles the behind-the-scenes of modern applications. Most
    of the time, it’s made of code that connects to the database, manages user connections,
    and also powers web applications or the **API**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 后端开发处理现代应用程序的后台部分。大多数时候，它由连接到数据库、管理用户连接以及为Web应用程序或**API**提供动力的代码组成。
- en: The focus of backend development code is more on the business logic. It primarily
    focuses on how an application works and the functionality and logic powering the
    application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 后端开发代码的焦点更多地在于业务逻辑。它主要关注应用程序的工作方式以及支持应用程序的功能和逻辑。
- en: For example, let’s talk about a web application built to manage books. Let’s
    suppose that the application is connected to an SQL database.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们讨论一个用于管理书籍的Web应用程序。假设该应用程序连接到一个SQL数据库。
- en: 'Whatever language is used to build the application and the structure, here
    are some requirements that represent the business logic and that primarily depend
    on the backend rather than the frontend:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用什么语言构建应用程序和结构，以下是一些代表业务逻辑的要求，这些要求主要依赖于后端而不是前端：
- en: '**Adding a book (only for admin)**: This supposes that the client (frontend)
    should be able to make a request to an API powered using whatever language is
    built for the backend, containing the data needed to create a new entry in the
    database that represents a book. This action is only available to admins.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加书籍（仅限管理员）**：这假设客户端（前端）应该能够向使用为后端构建的任何语言构建的API发出请求，包含在数据库中创建新条目所需的数据。此操作仅限于管理员。'
- en: '**Listing all books**: This supposes that the client should also be able to
    make a request to the API, and this API should send as a response a list of all
    the books in JSON/XML format.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列出所有书籍**：这假设客户端也应该能够向API发出请求，并且这个API应该以JSON/XML格式作为响应发送所有书籍的列表。'
- en: Just by taking a look at these two requirements, we can quickly understand that
    the frontend will just be the interface through which to request these actions.
    However, the backend will (taking the first requirement as an example) make sure
    that the incoming request is possible (checking for permissions such as whether
    the user making the request is really an admin) and that the data in the request
    is valid – only after that can data be safely registered in the database. Backend
    developers use programming languages such as Python, PHP, and Ruby to set up and
    configure the server. These tools will allow them to store, process, and modify
    information. To make these programming languages even more practical, developers
    will improve them with frameworks such as Symfony, Ruby on Rails, CakePHP, or
    CodeIgniter. These tools will make development faster and more secure. They must
    then ensure that these tools are always up to date and facilitate the maintenance
    required.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 只需看一下这两个要求，我们就可以快速理解，前端将只是请求这些操作的界面。然而，后端将（以第一个要求为例）确保传入的请求是可能的（检查权限，例如请求用户是否真的是管理员）以及请求中的数据是有效的——只有在这之后，数据才能安全地注册到数据库中。后端开发者使用Python、PHP和Ruby等编程语言来设置和配置服务器。这些工具将允许他们存储、处理和修改信息。为了使这些编程语言更加实用，开发者将通过框架如Symfony、Ruby
    on Rails、CakePHP或CodeIgniter来改进它们。这些工具将使开发更快、更安全。然后他们必须确保这些工具始终保持最新，并便于维护。
- en: A backend developer is therefore responsible for creating and managing all the
    elements invisible to the end user. It is therefore they who are responsible for
    all the functionalities of the site or the application. They are also responsible
    for creating the database which will allow, among other things, the information
    provided by users to be retained. For example, the backend developer will use
    the databases to find the usernames and passwords that customers have used to
    connect. It is possible to train for this profession by training in web development
    or even training in Python.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，后端开发者负责创建和管理所有对最终用户不可见元素。因此，他们负责网站或应用程序的所有功能。他们还负责创建数据库，这将允许用户提供的信息得到保留。例如，后端开发者将使用数据库来查找客户使用的用于连接的用户名和密码。可以通过学习网络开发或甚至学习Python来培养这一职业。
- en: Responsibilities of backend developers
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后端开发者的职责
- en: 'The backend is typically made of three major parts:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 后端通常由三个主要部分组成：
- en: '**Server**: A machine or an application (NGINX) that receives requests'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器**：接收请求的机器或应用程序（NGINX）'
- en: '**Application**: A running application on the server that receives the requests,
    validates these requests, and sends an appropriate response'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序**：在服务器上运行的应用程序，它接收请求，验证这些请求，并发送适当的响应'
- en: '**Database**: Used to store data'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**：用于存储数据'
- en: Thus, the responsibilities of backend programmers could easily involve writing
    APIs, writing code to interact with a database, creating modules or libraries,
    also working on business data and architecture, and much more.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，后端程序员的职责可能很容易包括编写API、编写与数据库交互的代码、创建模块或库、处理业务数据和架构，以及更多。
- en: 'They also have to do the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 他们还必须做以下事情：
- en: Coordinate and communicate with frontend developers to transfer data efficiently
    to the client side of the application
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协调并与前端开发者沟通，以高效地将数据传输到应用程序的客户端
- en: Collaborate with quality assurance engineers to optimize the server-side processes
    and also pass some security checks
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与质量保证工程师合作，优化服务器端流程，并通过一些安全检查
- en: Optimize the application when the number of requests or users scales as well
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当请求数量或用户数量扩展时，优化应用程序
- en: Analyze the requirements of the project and create a simple structure to handle
    bugs and errors
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析项目需求并创建一个简单的结构来处理错误和异常
- en: Propose efficient solutions for cloud hosting but also build CI/CD pipelines
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提出高效的云托管解决方案，并构建CI/CD管道
- en: 'The backend architecture actually helps build one of the most common interfaces
    for consuming data in the software industry: an **Application Programming Interface**
    (**API**). Let’s learn more about the term.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 后端架构实际上有助于构建软件行业中消费数据最常见接口之一：**应用程序编程接口**（**API**）。让我们更深入地了解这个术语。
- en: What is an API?
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是API？
- en: In this book, we’ll primarily be building an API – so, what is an API?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将主要构建一个API——那么，什么是API？
- en: 'Before answering this question, just remember that most of the internet is
    powered by **Representational State Transfer** (**REST**) or **RESTful APIs**.
    An API simplifies the way data is exchanged between applications or machines.
    It consists mainly of two components:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在回答这个问题之前，只需记住，互联网的大部分是由**表示状态转移**（**REST**）或**RESTful API**驱动的。API简化了应用程序或机器之间数据交换的方式。它主要由两个组件组成：
- en: The technical specification, which describes the data exchange options between
    the parties, with the specification made in the form of a request for data delivery
    protocols and data processing
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术规范，它描述了各方之间的数据交换选项，规范以数据交付协议和数据处理的请求形式制定
- en: The software interface (the programming code), which is written to the specification
    that represents it
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件接口（编程代码），它是根据其表示的规范编写的
- en: For example, if the client side of your application is written in JavaScript
    and the server side is written in PHP, you’ll need to create a web API with PHP
    (as data comes from the database), which will help you write the rules and routes
    that will be used to access data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的应用程序客户端是用JavaScript编写的，而服务器端是用PHP编写的，你需要创建一个PHP（因为数据来自数据库）的Web API，这将帮助你编写用于访问数据的规则和路由。
- en: 'Web APIs are relatively common and there are different specifications and protocols.
    The goal of API specification is to standardize—because of different programming
    languages and different **Operating Systems** (**OSs**)—exchanges between two
    or more web services. For example, you’ll find the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Web API 相对常见，有不同的规范和协议。API 规范的目标是为了标准化——由于不同的编程语言和不同的 **操作系统**（**OSs**）——两个或多个
    Web 服务之间的交换。例如，你会找到以下内容：
- en: '**Remote Procedure Call** (**RPC**): A protocol that can be used by a program
    to request a service from a program on another computer on a network that it does
    not need to know the details of. This is sometimes called a function or subroutine
    call.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程过程调用**（**RPC**）：一种协议，程序可以使用它从网络上另一台计算机上的程序请求服务，而无需了解其细节。这有时被称为函数或子程序调用。'
- en: '**Simple Object Access Protocol** (**SOAP**): An XML-based communication protocol
    that allows applications to exchange information with each other over HTTP. It
    therefore allows access to web services and the interoperability of applications
    across the web. SOAP is a simple and lightweight protocol that relies entirely
    on established standards such as HTTP and XML. It is portable and therefore independent
    of any OS and type of computer. SOAP is a non-proprietary specification.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单对象访问协议**（**SOAP**）：一种基于 XML 的通信协议，允许应用程序通过 HTTP 交换信息。因此，它允许访问 Web 服务以及
    Web 上应用程序的互操作性。SOAP 是一种简单且轻量级的协议，完全依赖于已建立的标准，如 HTTP 和 XML。它是可移植的，因此独立于任何操作系统和计算机类型。SOAP
    是一种非专有规范。'
- en: '**REST/RESTful**: A style of architecture for building applications (web, intranet,
    or web service). This is a set of conventions and best practices to be observed,
    not a technology in its own right. The REST architecture uses the original specifications
    of the HTTP protocol, rather than reinventing an overlay (as SOAP or XML-RPC do,
    for example):'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**REST/RESTful**：一种用于构建应用程序（Web、内部网或 Web 服务）的架构风格。这是一组需要遵守的约定和最佳实践，而不是一种独立的技术。REST
    架构使用 HTTP 协议的原始规范，而不是重新发明一个覆盖层（例如 SOAP 或 XML-RPC 所做的那样）：'
- en: '**Rule 1**: The URL is a resource identifier'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则 1**：URL 是资源标识符'
- en: '**Rule 2**: HTTP verbs are identifiers of operations'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则 2**：HTTP 动词是操作的标识符'
- en: '**Rule 3**: HTTP responses are representations of resources'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则 3**：HTTP 响应是资源的表示'
- en: '**Rule 4**: Links are relations between resources'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则 4**：链接是资源之间的关系'
- en: '**Rule 5**: A parameter is an authentication token'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则 5**：参数是一个认证令牌'
- en: In this book, we’ll be building REST APIs using Django and **Django REST**,
    so let’s get to know REST a bit better.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用 Django 和 **Django REST** 构建 REST API，因此让我们更好地了解 REST。
- en: Understanding REST APIs
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 REST API
- en: REST is usually the way to go when developers want to build an API. REST is
    a simple alternative to SOAP and RPC, as it makes it easier to write the logic
    to access resources; resources here are represented by a unique URL available
    with one request to this URL.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者想要构建一个 API 时，通常会选择 REST。REST 相比于 SOAP 和 RPC 是一个简单的替代方案，因为它使得编写访问资源的逻辑更加容易；这里的资源通过一个唯一的
    URL 表示，通过对这个 URL 的一次请求即可获取。
- en: 'RESTful APIs use HTTP requests (or methods) to interact with resources:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API 使用 HTTP 请求（或方法）与资源进行交互：
- en: '`GET`: The most commonly used method in APIs and websites. This method is used
    to retrieve data from a server at a specified resource. This resource is an endpoint
    returning an object or a list of objects in JSON or XML most of the time.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`：API 和网站中最常用的方法。此方法用于从服务器获取指定资源的数据。这个资源通常是一个端点，返回一个对象或对象列表，通常是 JSON 或
    XML 格式。'
- en: '`POST`: The `POST` method is a basic method for requesting information processing
    from the server. These requests are supposed to bring mechanisms specific to the
    server into play and cause communications with other modules, or even other servers,
    to process said data. Therefore, it is quite likely that two identical `POST`
    requests will receive different or even semantically opposite responses. The data
    to be processed is specified in the body of the request. The document designated
    by the request via the page is the resource that must process the data and generate
    the response.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`：`POST` 方法是请求服务器进行信息处理的基本方法。这些请求应该激活服务器特定的机制，并导致与其他模块或甚至其他服务器的通信来处理这些数据。因此，两个相同的
    `POST` 请求可能会收到不同甚至语义相反的响应。要处理的数据指定在请求体中。通过页面指定的请求文档是必须处理数据并生成响应的资源。'
- en: '`HEAD`: The `HEAD` method is used to query the header of the response, without
    the file being sent to you immediately. This is useful, for example, if large
    files need to be transferred: thanks to the `HEAD` request, the client can be
    informed of the size of the file first and only then decide whether to receive
    the file.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD`: `HEAD` 方法用于查询响应的头部，而无需立即将文件发送给您。这在需要传输大文件时很有用：由于 `HEAD` 请求，客户端可以先了解文件的大小，然后再决定是否接收文件。'
- en: '`OPTIONS`: This is a diagnostic method, which returns a message that is useful
    primarily for debugging and the like. This message basically indicates, surprisingly,
    which HTTP methods are active on the web server. In reality, it’s rarely used
    for legitimate purposes these days, but it does give potential attackers a bit
    of help – it can be seen as a shortcut to finding another hole.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS`: 这是一个诊断方法，主要用于调试等目的，它返回的消息基本上表明了在Web服务器上哪些HTTP方法是激活的。实际上，如今它很少用于合法目的，但它确实给潜在的攻击者提供了一些帮助——它可以被视为找到另一个漏洞的捷径。'
- en: '`DELETE` and `PUT`: These methods are supposed to allow a document to be uploaded
    (to the server) or deleted without going through an **File Transfer Protocol**
    (**FTP**) server or the like. Obviously, this can cause file replacements, and
    therefore very large security breaches on a server. Therefore, most web servers
    require a special configuration with a resource or a document responsible for
    processing these requests. The document referred to by the request is the one
    to be replaced (or created), and the content of the document is in the body of
    the request. In theory, URL parameters and the fragment identifier should be prohibited
    or ignored by the server. In practice, they are generally transmitted to the resource
    responsible for processing the request.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE` 和 `PUT`: 这些方法本应允许上传（到服务器）或删除文档，而无需通过文件传输协议（**FTP**）服务器或类似的服务器。显然，这可能导致文件替换，因此可能导致服务器上非常大的安全漏洞。因此，大多数Web服务器都需要对资源或文档进行特殊配置，以处理这些请求。请求中引用的文档是要替换（或创建）的文档，而文档的内容在请求体中。理论上，服务器应禁止或忽略URL参数和片段标识符。在实践中，它们通常被传输到处理请求的资源。'
- en: '`PATCH`: The `PATCH` method of an HTTP request applies partial changes to a
    resource.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATCH`: HTTP请求的 `PATCH` 方法对资源应用部分更改。'
- en: '`TRACE`: The `TRACE` method can be used to trace the path that an HTTP request
    takes to the server and then to the client.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRACE`: `TRACE` 方法可用于跟踪HTTP请求从服务器到客户端的路径。'
- en: '`CONNECT`: This method is supposed to be used to request the use of the server
    as a proxy. Not all servers necessarily implement them.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONNECT`: 这个方法本应用于请求将服务器用作代理。并非所有服务器都必然实现它们。'
- en: One interesting benefit is that RESTful systems support different data formats,
    such as plain text, HTML, YAML, JSON, and XML.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的好处是，RESTful系统支持不同的数据格式，如纯文本、HTML、YAML、JSON和XML。
- en: As mentioned previously, in this book, we’ll be building REST APIs using Django
    and Django REST.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在这本书中，我们将使用 Django 和 Django REST 构建REST API。
- en: What is Django?
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Django？
- en: 'Django is an advanced web framework that was first released in 2005\. It is
    written in Python and makes use of the **Model-View-Controller** (**MVC**) architectural
    pattern. This pattern is commonly defined as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Django是一个高级Web框架，它首次于2005年发布。它用Python编写，并使用**模型-视图-控制器**（**MVC**）架构模式。这种模式通常被定义为如下：
- en: '**Model**: Corresponds to all the data-related logic. It’s deeply connected
    to the database, as it provides the shape of the data but also methods and functions
    for **Create, Read, Update, and Delete** (**CRUD**) operations.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**: 对应所有与数据相关的逻辑。它与数据库深度连接，因为它提供了数据的形状，同时也提供了创建、读取、更新和删除（**CRUD**）操作的方法和函数。'
- en: '**View**: Handles the UI logic of the application.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**: 处理应用程序的UI逻辑。'
- en: '**Controller**: Represents a layer between the model and view. Most of the
    time, controllers interpret the incoming requests from the view, manipulate the
    data provided by the model component, and interact with the view again to render
    the final output.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**: 代表模型和视图之间的一个层。大多数时候，控制器解释来自视图的传入请求，操作模型组件提供的数据，并与视图再次交互以渲染最终输出。'
- en: 'In Django, this will be referred to as the **Model-View-Template** (**MVT**)
    architecture with the template corresponding to the view and the view here represented
    by the controller. Here’s a simple representation of the MVT architecture:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django中，这将被称为**模型-视图-模板**（**MVT**）架构，其中模板对应于视图，而在这里视图由控制器表示。以下是MVT架构的简单表示：
- en: '![Figure 1.2 – MVT architecture](img/Figure_1.2_B18221.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – MVT架构](img/Figure_1.2_B18221.jpg)'
- en: Figure 1.2 – MVT architecture
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – MVT架构
- en: Django is a web framework that adopts the *Batteries included* approach. When
    developing a custom web application, Django provides the tools required to speed
    up the development process. It provides code and tools for common operations such
    as database manipulation, HTML templates, URL routing, session management, and
    security.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Django是一个采用“包含电池”方法的Web框架。在开发自定义Web应用程序时，Django提供了加快开发进程所需的工具。它提供了用于常见操作（如数据库操作、HTML模板、URL路由、会话管理和安全）的代码和工具。
- en: Django allows developers to build all kinds of web applications (social networks,
    news sites, and wikis) with all the necessary basics, such as application security,
    made available from the start to allow developers to fully concentrate on most
    of their projects. Django provides protection against commons attacks – cross-site
    scripting, SQL injection, and much more.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Django允许开发者使用所有必要的功能（如应用安全）从头开始构建各种类型的Web应用程序（社交网络、新闻网站和维基），从而让开发者能够专注于他们的项目的大部分工作。Django提供了对常见攻击的保护——跨站脚本、SQL注入等等。
- en: Here, we’ll also be using **Django REST Framework** (**DRF**). It’s the most
    mature, testable, well-documented, and easily extendable framework, which will
    help create powerful RESTful APIs when coupled with Django. The combination of
    Django and the DRF is used by large companies such as Instagram, Mozilla, and
    even Pinterest.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还将使用**Django REST框架**（**DRF**）。它是最成熟、可测试、文档完善且易于扩展的框架，与Django结合使用时，将有助于创建强大的RESTful
    API。Django和DRF的组合被Instagram、Mozilla甚至Pinterest等大型公司所采用。
- en: When this framework is coupled with Django, the view will be replaced by routes
    or endpoints. We’ll discuss this concept later in the book – but why build an
    API with Django?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个框架与Django结合使用时，视图将被路由或端点所取代。我们将在本书的后续部分讨论这个概念——但为什么要用Django构建API？
- en: It’s true that traditional Django supports client languages such as HTML, CSS,
    and JavaScript. This helps build user interfaces that are served by the server
    and the performance is always impressive.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，传统的Django支持HTML、CSS和JavaScript等客户端语言。这有助于构建由服务器提供服务的用户界面，并且性能始终令人印象深刻。
- en: However, what if you have many machines that’ll access resources on the Django
    server? It’s true that if these machines are running applications based on JavaScript,
    we can always use the traditional Django way.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您有多个机器将访问Django服务器上的资源呢？如果这些机器运行基于JavaScript的应用程序，我们始终可以使用传统的Django方式。
- en: What if it’s a mobile application? What if it’s a service written with PHP?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它是一个移动应用程序呢？如果它是一个用PHP编写的服务呢？
- en: That’s where an API can really be useful. You can have as many machines as you
    want requesting data from your API without issue, irrespective of the technology
    or the language used to build the applications that these machines are running.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是API真正有用之处。您可以使用任意数量的机器请求您的API数据，而不会出现问题，无论这些机器运行的应用程序使用的技术或语言如何。
- en: Now that you have an idea about what Django is, let’s set up the working environment
    and create our first server in Django.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 既然您已经对Django有了了解，让我们设置工作环境并在Django中创建我们的第一个服务器。
- en: Setting up the work environment
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置工作环境
- en: Before starting to work with Django, we must make sure you have a great environment,
    whatever OS you are using right now.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用Django之前，我们必须确保您现在使用的操作系统下有一个优秀的环境。
- en: First of all, make sure you have the latest version of Python installed. For
    this book, we’ll be working with Python 3.10.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请确保您已安装最新版本的Python。对于本书，我们将使用Python 3.10。
- en: If you are using a Windows machine, go to the official download page at [https://www.python.org/downloads/](https://www.python.org/downloads/)
    and download the relevant version.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows机器，请访问[https://www.python.org/downloads/](https://www.python.org/downloads/)的官方下载页面并下载相关版本。
- en: For Linux users, you can download it using the default repository package download
    manager.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux用户，您可以使用默认的仓库包下载管理器下载。
- en: Creating a virtual environment
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建虚拟环境
- en: 'Now that we have Python installed, we have to ensure that we have `virtualenv`
    installed:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Python，我们必须确保已经安装了 `virtualenv`：
- en: '[PRE0]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'See the following for Windows users:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 Windows 用户说明：
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once this is done, we can now create a virtual environment – but why?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们现在可以创建一个虚拟环境——但为什么要这样做呢？
- en: 'There are two types of environments when developing with Python: the global
    environment and the local environment.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Python 进行开发时，有两种环境类型：全局环境和本地环境。
- en: 'If you just enter `pip` install requests randomly in the terminal, the package
    will be installed and can be accessed globally: this means accessed anywhere on
    your machine. Sometimes, you want to isolate the working environment to avoid
    version conflicts. For example, globally you may be working with Python 3.5, which
    supports Django 2.x versions. However, for this project, you want to use Python
    3.10 and the latest version of Django – here, 4.0\. Creating a `virtualenv` environment
    helps you with that.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是在终端中随机输入 `pip install requests`，该包将被安装并可以在全局范围内访问：这意味着可以在你的机器上的任何地方访问。有时，你可能想要隔离工作环境以避免版本冲突。例如，全局上你可能正在使用支持
    Django 2.x 版本的 Python 3.5。然而，对于这个项目，你希望使用 Python 3.10 和 Django 的最新版本——这里，4.0。创建一个
    `virtualenv` 环境可以帮助你做到这一点。
- en: Now that we have `virutalenv` installed, we can create and activate the `virtualenv`
    environment – but before that, create a directory called `django-api`. We’ll be
    building the Python project here.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 `virutalenv`，我们可以创建并激活 `virtualenv` 环境——但在那之前，创建一个名为 `django-api`
    的目录。我们将在这里构建 Python 项目。
- en: 'See the following for Unix or macOS:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 Unix 或 macOS 的说明：
- en: '[PRE2]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'See the following for Windows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 Windows 的说明：
- en: '[PRE3]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These preceding commands will create the `venv` directory containing the installed
    Python packages and the necessary configuration to access these packages when
    the virtual environment is activated. The next step is to activate the virtual
    environment. This will help us install the packages we need to start working on.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将创建包含已安装 Python 包和必要配置的 `venv` 目录，以便在激活虚拟环境时访问这些包。下一步是激活虚拟环境。这将帮助我们安装开始工作所需的包。
- en: 'See the following for Unix or macOS:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 Unix 或 macOS 的说明：
- en: '[PRE4]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'See the following for Windows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 Windows 的说明：
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Great! Next, let’s install the Django package.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！接下来，让我们安装 Django 包。
- en: Installing Django
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Django
- en: There are two ways to install packages in Python. You can easily just run `pip`
    `install package_name`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中安装包有两种方式。你可以简单地运行 `pip install package_name`。
- en: Alternatively, you can write the package name with the version in a text file.
    I’ll go with the latter but feel free to use whatever version works for you.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以将包名及其版本写入一个文本文件中。我将选择后者，但你可以自由选择对你来说适用的任何版本。
- en: Just understand that there can be some changes between the version and it can
    affect your project. For more similarities with what we’ll be using here, you
    can also use the latter option.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 只需理解版本之间可能会有一些变化，这可能会影响你的项目。为了与这里将要使用的相似，你也可以使用后面的选项。
- en: 'Great – let’s create a file named `requirements.txt` at the root of the `django-api`
    directory and add the Django package name:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了——让我们在 `django-api` 目录的根目录下创建一个名为 `requirements.txt` 的文件，并添加 Django 包名：
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Great! Now, run `pip install -r requirements.txt` to install Django.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在，运行 `pip install -r requirements.txt` 来安装 Django。
- en: To make sure everything is working, we’ll quickly create a simple project.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保一切正常工作，我们将快速创建一个简单的项目。
- en: Creating a sample project
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建示例项目
- en: 'To create a new project, we’ll use the `django-admin` command. It comes with
    options we can use to create projects in Django:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的项目，我们将使用 `django-admin` 命令。它包含我们可以用来在 Django 中创建项目的选项：
- en: '[PRE7]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Don’t forget to add the `.` dot at the end of this command. This will actually
    generate all the files in the current directory instead of creating another directory
    to put all the files in.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在这个命令的末尾添加 `.` 点。这实际上会在当前目录中生成所有文件，而不是创建另一个目录来放置所有文件。
- en: 'You should have a structure of a file such as this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该有一个类似以下的结构：
- en: '![Figure 1.3 – File structure](img/Figure_1.3_B18221.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 文件结构](img/Figure_1.3_B18221.jpg)'
- en: Figure 1.3 – File structure
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 文件结构
- en: 'Before starting the server, let’s run the migrations:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动服务器之前，让我们运行迁移：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You’ll have a similar output:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到类似的输出：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Migrations are just a way to propagate changes made to the model in the database
    schema. As Django also comes with some models (such as the `User` model you can
    use for authentication), we need to apply these migrations. When we write our
    own models, we’ll also be creating migrations files and migrating them. Django
    has **object-relational mapping** (**ORM**) that automatically handles the interaction
    with the database for you.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移只是将数据库模式中对模型所做的更改传播出去的一种方式。由于 Django 也自带一些模型（例如，你可以用于身份验证的 `User` 模型），我们需要应用这些迁移。当我们编写自己的模型时，我们也会创建迁移文件并将它们迁移。Django
    有 **对象关系映射**（**ORM**），它可以自动为你处理与数据库的交互。
- en: Learning SQL and writing your own queries is quite difficult and demanding when
    you are new to it. It takes a long time and is quite off-putting. Fortunately,
    Django provides a system to take advantage of the benefits of an SQL database
    without having to write even a single SQL query!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当你对 SQL 和编写自己的查询还不太熟悉时，学习 SQL 和编写自己的查询相当困难且要求很高。这需要很长时间，而且相当令人望而却步。幸运的是，Django
    提供了一个系统，让你能够利用 SQL 数据库的好处，而无需编写哪怕一个 SQL 查询！
- en: This type of system is called ORM. Behind this somewhat barbaric-sounding name
    hides a simple and very useful operation. When you create a model in your Django
    application, the framework will automatically create a suitable table in the database
    that will save the data relating to the model.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的系统被称为 ORM。在这个听起来有些野蛮的名字背后隐藏着一个简单而非常实用的操作。当你你在 Django 应用程序中创建一个模型时，框架会自动在数据库中创建一个合适的表来保存与模型相关的数据。
- en: No need to write SQL commands here – we’ll just write code in Python that will
    be directly translated into SQL. `python manage.py migrate` will then apply these
    changes to the database.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这里不需要编写 SQL 命令 – 我们将只编写 Python 代码，这些代码将被直接转换为 SQL。然后 `python manage.py migrate`
    将将这些更改应用到数据库中。
- en: Now, run `python manage.py runserver`. You’ll see a similar output, and you’ll
    also have your server running at [https://localhost:8000](https://localhost:8000).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行 `python manage.py runserver`。你会看到类似的输出，并且你的服务器也会在 [https://localhost:8000](https://localhost:8000)
    上运行。
- en: 'Just hit this URL in your browser and you will see something such as this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在你的浏览器中输入这个 URL，你将看到如下内容：
- en: '![Figure 1.4 – Welcome page of the Django running server](img/Figure_1.4_B18221.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – Django 运行服务器的欢迎页面](img/Figure_1.4_B18221.jpg)'
- en: Figure 1.4 – Welcome page of the Django running server
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – Django 运行服务器的欢迎页面
- en: Great – we’ve just installed Django and started a Django server. Let’s talk
    about the structure of the project.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了 – 我们刚刚安装了 Django 并启动了 Django 服务器。让我们谈谈项目的结构。
- en: Discussing the sample project
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论示例项目
- en: In the last part, we’ve briefly talked about how to create a `virtualenv` environment
    with Python. We’ve also created a Django project and made it run.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一部分，我们简要地讨论了如何使用 Python 创建 `virtualenv` 环境。我们还创建了一个 Django 项目并使其运行。
- en: Let’s talk quickly about the project.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速谈谈这个项目。
- en: 'You may have noticed some files and directories in the `django-api` directory.
    Well, let’s quickly talk about these:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到了 `django-api` 目录中的一些文件和目录。好吧，让我们快速谈谈这些：
- en: '`manage.py`: This is a utility provided by Django for many different needs.
    It’ll help you create projects and applications, run migrations, start a server,
    and so on.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manage.py`：这是 Django 为许多不同需求提供的一个实用工具。它将帮助你创建项目和应用程序、运行迁移、启动服务器等等。'
- en: '`CoreRoot`: This is the name of the project we’ve created with the `django-admin`
    command. It contains files such as the following:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CoreRoot`：这是使用 `django-admin` 命令创建的项目名称。它包含以下文件等：'
- en: '`urls.py`: This contains all the URLs that will be used to access resources
    in the project:'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urls.py`：这个文件包含了将用于访问项目中资源的所有 URL：'
- en: '[PRE10]'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`wsgi.py`: This file is basically used for deployment but also as the default
    development environment in Django.'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wsgi.py`：这个文件基本上用于部署，但在 Django 中也用作默认的开发环境。'
- en: '`asgi.py`: Django also supports running asynchronous codes as an ASGI application.'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asgi.py`：Django 还支持以 ASGI 应用程序运行异步代码。'
- en: '`settings.py`: This contains all the configurations for your Django projects.
    You can find `SECRET_KEY`, the `INSTALLED_APPS` list, `ALLOWED_HOST`, and so on.'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settings.py`：这个文件包含了你 Django 项目的所有配置。你可以找到 `SECRET_KEY`、`INSTALLED_APPS` 列表、`ALLOWED_HOST`
    等等。'
- en: Now that you are familiar with the structure of a Django project, let’s see
    how to configure the project to connect to a database.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了 Django 项目的结构，让我们看看如何配置项目以连接到数据库。
- en: Configuring the database
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置数据库
- en: Django, by default, uses **sqlite3** as a database, which is an in-process library
    that implements a fast self-contained, zero-configuration, serverless, transactional
    SQL database engine. It’s very compact and easy to use and set up. It’s ideal
    if you are looking to quickly save data or for testing. However, it comes with
    some disadvantages.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django 使用 **sqlite3** 作为数据库，这是一个进程内库，实现了快速自包含、零配置、无服务器、事务性的 SQL 数据库引擎。它非常紧凑且易于使用和设置。如果你希望快速保存数据或进行测试，它非常理想。然而，它也有一些缺点。
- en: First of all, there are no multi-user capabilities, which means that it comes
    with a lack of granular access control and some security capabilities. This is
    due to the fact that SQLite reads and writes directly to an ordinary disk file.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它没有多用户功能，这意味着它缺乏细粒度的访问控制和一些安全功能。这是由于 SQLite 直接读取和写入普通磁盘文件的事实。
- en: For example, in our project, after running the migrations, you’ll notice the
    creation of a new file, `db.sqlite3`. Well, this is our database actually.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们的项目中，运行迁移后，你会注意到新文件的创建，名为 `db.sqlite3`。嗯，实际上这就是我们的数据库。
- en: We will be replacing it with a more powerful SMDB called **Postgres**.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用更强大的 SMDB，称为 **Postgres** 来替换它。
- en: Postgres configuration
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Postgres 配置
- en: 'PostgreSQL is one of the world’s most advanced enterprise-class open source
    database management systems, developed and maintained by the PostgreSQL global
    development group. It’s a powerful and highly extensible object-relational SQL
    database system that comes with interesting features such as the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 是世界上最先进的企业级开源数据库管理系统之一，由 PostgreSQL 全球开发组开发和维护。它是一个功能强大且高度可扩展的对象关系型
    SQL 数据库系统，具有以下有趣的功能：
- en: User-defined types
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义的类型
- en: Table inheritance
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表继承
- en: Asynchronous replication
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步复制
- en: Multi-user capabilities
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多用户功能
- en: These are the features you will be looking for in a database, mostly when working
    in a development or production environment.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是在数据库中寻找的功能，尤其是在开发或生产环境中工作时。
- en: According to your OS, you can download Postgres versions at [https://www.postgresql.org/download/](https://www.postgresql.org/download/).
    In this book, we are working with PostgreSQL 14.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的操作系统，你可以在 [https://www.postgresql.org/download/](https://www.postgresql.org/download/)
    下载 Postgres 版本。在这本书中，我们使用的是 PostgreSQL 14。
- en: 'Once it’s done, we’ll install a PostgreSQL adapter for Python, **psycopg**:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，我们将为 Python 安装一个 PostgreSQL 适配器，**psycopg**：
- en: '[PRE15]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Don’t forget to add this to the `requirements.txt` file:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将其添加到 `requirements.txt` 文件中：
- en: '[PRE16]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Great – now that we have the adapter installed, let’s quickly create the database
    we’ll use for this project.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了——现在我们已经安装了适配器，让我们快速创建我们将用于此项目的数据库。
- en: For that, we need to connect as a Postgres user in the terminal and then access
    the `psql` terminal. In that terminal, we can enter SQL commands.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要在终端中以 Postgres 用户身份连接，然后访问 `psql` 终端。在那个终端中，我们可以输入 SQL 命令。
- en: 'For Linux users, you can log in as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux 用户，你可以按以下方式登录：
- en: '[PRE17]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, enter `psql`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输入 `psql`。
- en: 'Great – let’s create the database:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了——让我们创建数据库：
- en: '[PRE18]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To connect to the database, we need `USER` with a password:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到数据库，我们需要 `USER` 和密码：
- en: '[PRE19]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'It’s always a good habit to use strong passwords. You can generate strong passwords
    at https://passwordsgenerator.net/ – and the next step is to grant access to our
    database to the new user:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 总是使用强密码是一个好习惯。你可以在 https://passwordsgenerator.net/ 生成强密码——接下来的步骤是授予新用户对数据库的访问权限：
- en: '[PRE20]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We are nearly done. We also need to make sure this user can create a database.
    This will be helpful when we can run tests. To run tests, Django will configure
    a full environment but will also use a database:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了。我们还需要确保这个用户可以创建数据库。当我们能够运行测试时，这将非常有帮助。要运行测试，Django 将配置完整的环境，但也会使用数据库：
- en: '[PRE21]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With that, we are done with the creation of the database. Let’s connect this
    database to our Django project.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就完成了数据库的创建。让我们将此数据库连接到我们的 Django 项目。
- en: Connecting the database
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接数据库
- en: Connecting the database to Django requires some configurations. Then, we have
    to open the `settings.py` file, look for a database configuration, and then modify
    it.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据库连接到 Django 需要进行一些配置。然后，我们必须打开 `settings.py` 文件，查找数据库配置，然后进行修改。
- en: 'In the `settings.py` file, you’ll find a similar line:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `settings.py` 文件中，你会找到一个类似的行：
- en: '[PRE22]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Great – as you can see, the project is still running on the SQLite3 engine.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了——正如你所见，项目仍在 SQLite3 引擎上运行。
- en: 'Remove this content and replace it with this:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 删除此内容，并用以下内容替换：
- en: '[PRE23]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We’ve just modified the database engine but also filled in information such
    as the name of the database, the user, the password, the host, and the port.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚修改了数据库引擎，同时也填写了诸如数据库名称、用户、密码、主机和端口号等信息。
- en: 'The `ENGINE` key for the MySQL database varies. Besides that, there are a few
    additional keys, such as `USER`, `PASSWORD`, `HOST`, and `PORT`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL数据库的`ENGINE`键可能不同。除此之外，还有一些额外的键，例如`USER`、`PASSWORD`、`HOST`和`PORT`：
- en: '`NAME`: This key stores the name of your MySQL database'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NAME`：此键存储您的MySQL数据库名称'
- en: '`USER`: This key stores the username of the MySQL account to which the MySQL
    database will be connected'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USER`：此键存储MySQL数据库将连接到的MySQL账户的用户名'
- en: '`PASSWORD`: This key stores the password for this MySQL account'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PASSWORD`：此键存储此MySQL账户的密码'
- en: '`HOST`: This key stores the IP address at which your MySQL database is hosted'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOST`：此键存储您的MySQL数据库托管在其上的IP地址'
- en: '`PORT`: This key stores the port number on which your MySQL database is hosted'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PORT`：此键存储您的MySQL数据库托管在其上的端口号'
- en: 'The configuration is done. Let’s run the migrations and see whether everything
    works okay:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 配置已完成。让我们运行迁移并查看一切是否正常工作：
- en: '[PRE24]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You will get a similar output in the terminal:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在终端中获得类似的输出：
- en: '[PRE25]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Great! We’ve just configured Django with PostgreSQL.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们刚刚用PostgreSQL配置了Django。
- en: Installing an HTTP request client
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装HTTP请求客户端
- en: When developing an API as a backend developer, it’s a good habit to have an
    API client to test your API and make sure it behaves as you needed. API clients
    are packages, or libraries to send HTTP requests to an API. A great majority supports
    features such as SSL checking, authentication, and header modification. In this
    book, we’ll be working with Insomnia. It’s lightweight and simple to use and customize.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为后端开发者开发API时，拥有一个API客户端来测试您的API并确保其按预期行为是一个好习惯。API客户端是发送HTTP请求到API的包或库。绝大多数支持SSL检查、身份验证和头部修改等功能。在本章中，我们将使用Insomnia。它轻量级，易于使用和定制。
- en: 'To download a version of Insomnia that suits your OS, go to the following page:
    [https://insomnia.rest/download](https://insomnia.rest/download).'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载适合您操作系统的Insomnia版本，请访问以下页面：[https://insomnia.rest/download](https://insomnia.rest/download)。
- en: Summary
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the world of backend development to clarify the
    roles and responsibilities of a backend developer. We also talked about APIs,
    mostly REST APIs, which will be built in this book. We’ve also had a brief introduction
    to Django, the MVT architecture used by the framework, and connected a PostgreSQL
    database to the Django project.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探索了后端开发的世界，以阐明后端开发者的角色和职责。我们还讨论了API，主要是REST API，这些API将在本书中构建。我们还简要介绍了Django，该框架使用的MVT架构，以及将PostgreSQL数据库连接到Django项目。
- en: In the next chapter, we will dig deeper into Django by creating our first models,
    tests, and endpoints.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过创建我们的第一个模型、测试和端点来深入了解Django。
- en: Questions
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a REST API?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是REST API？
- en: What is Django?
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Django？
- en: How to create a Django project?
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何创建Django项目？
- en: What are migrations?
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是迁移？
- en: What is a virtual environment in Python?
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python中的虚拟环境是什么？
