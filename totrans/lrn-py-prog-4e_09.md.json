["```py\n# hlib.txt\n>>> import hashlib\n>>> hashlib.algorithms_available\n{'sha3_256', 'sha224', 'blake2b', 'sha512_224', 'ripemd160',\n 'sha1', 'sha512_256', 'sha3_512', 'sha512', 'sha384', 'sha3_384',\n'sha3_224', 'shake_256', 'shake_128', 'sm3', 'md5-sha1', 'sha256',\n'md5', 'blake2s'}\n>>> hashlib.algorithms_guaranteed\n{'sha512', 'sha3_256', 'shake_128', 'sha224', 'blake2b',\n 'shake_256', 'sha384', 'sha1', 'sha3_512', 'sha3_384', 'sha256',\n 'sha3_224', 'md5', 'blake2s'} \n```", "```py\n>>> h = hashlib.blake2b()\n>>> h.update(b\"Hash me\")\n>>> h.update(b\" now!\")\n>>> h.hexdigest()\n'56441b566db9aafcf8cdad3a4729fa4b2bfaab0ada36155ece29f52ff70e1e9d'\n'7f54cacfe44bc97c7e904cf79944357d023877929430bc58eb2dae168e73cedf'\n>>> h.digest()\nb'VD\\x1bVm\\xb9\\xaa\\xfc\\xf8\\xcd\\xad:G)\\xfaK+\\xfa\\xab\\n\\xda6\\x15^'\nb'\\xce)\\xf5/\\xf7\\x0e\\x1e\\x9d\\x7fT\\xca\\xcf\\xe4K\\xc9|~\\x90L\\xf7'\nb'\\x99D5}\\x028w\\x92\\x940\\xbcX\\xeb-\\xae\\x16\\x8es\\xce\\xdf'\n>>> h.block_size\n128\n>>> h.digest_size\n64\n>>> h.name\n'blake2b' \n```", "```py\n>>> hashlib.sha512(b\"Hash me too!\").hexdigest()\n'a0d169ac9487fc6c78c7db64b54aefd01bd245bbd1b90b6fe5648c3c4eb0ea7d'\n'93e1be50127164f21bc8ddb3dd45a6b4306dfe9209f2677518259502fed27686' \n```", "```py\n>>> import hashlib\n>>> h1 = hashlib.blake2b(\n...    b\"Important data\", digest_size=16, person=b\"part-1\")\n>>> h2 = hashlib.blake2b(\n...    b\"Important data\", digest_size=16, person=b\"part-2\")\n>>> h3 = hashlib.blake2b(\n...    b\"Important data\", digest_size=16)\n>>> h1.hexdigest()\n'c06b9af95d5aa6307e7e3fd025a15646'\n>>> h2.hexdigest()\n'9cb03be8f3114d0f06bddaedce2079c4'\n>>> h3.hexdigest()\n'7d35308ca3b042b5184728d2b1283d0d' \n```", "```py\n>>> import os\n>>> dk = hashlib.pbkdf2_hmac(\"sha256\", b\"password123\",\n...     salt=os.urandom(16), iterations=200000)\n>>> dk.hex()\n'ac34579350cf6d05e01e745eb403fc50ac0e62fbeb553cbb895e834a77c37aed' \n```", "```py\n# hmc.py\nimport hmac\nimport hashlib\ndef calc_digest(key, message):\n    key = bytes(key, \"utf-8\")\n    message = bytes(message, \"utf-8\")\n    dig = hmac.new(key, message, hashlib.sha256)\n    return dig.hexdigest()\nmac = calc_digest(\"secret-key\", \"Important Message\") \n```", "```py\n# secrs/secr_rand.py\nimport secrets\nprint(secrets.choice(\"Choose one of these words\".split()))\nprint(secrets.randbelow(10**6))\nprint(secrets.randbits(32)) \n```", "```py\n$ python secr_rand.py\none\n133025\n1509555468 \n```", "```py\n# secrs/secr_rand.py\nimport secrets\nprint(secrets.token_bytes(16))\nprint(secrets.token_hex(32))\nprint(secrets.token_urlsafe(32)) \n```", "```py\nb'\\x0f\\x8b\\x8f\\x0f\\xe3\\xceJ\\xbc\\x18\\xf2\\x1e\\xe0i\\xee1\\x99'\n98e80cddf6c371811318045672399b0950b8e3207d18b50d99d724d31d17f0a7\n63eNkRalj8dgZqmkezjbEYoGddVcutgvwJthSLf5kho \n```", "```py\n# secrs/secr_gen.py\nimport secrets\nfrom string import digits, ascii_letters\ndef generate_pwd(length=8):\n    chars = digits + ascii_letters\n    return \"\".join(secrets.choice(chars) for c in range(length))\ndef generate_secure_pwd(length=16, upper=3, digits=3):\n    if length < upper + digits + 1:\n        raise ValueError(\"Nice try!\")\n    while True:\n        pwd = generate_pwd(length)\n        if (\n            any(c.islower() for c in pwd)\n            and sum(c.isupper() for c in pwd) >= upper\n            and sum(c.isdigit() for c in pwd) >= digits\n        ):\n            return pwd\nprint(generate_secure_pwd())\nprint(generate_secure_pwd(length=3, upper=1, digits=1)) \n```", "```py\n$ python secr_gen.py\nmgQ3Hj57KjD1LI7M\nb8G \n```", "```py\n# secrs/secr_reset.py\nimport secrets\ndef get_reset_pwd_url(token_length=16):\n    token = secrets.token_urlsafe(token_length)\n    return f\"https://example.com/reset-pwd/{token}\"\nprint(get_reset_pwd_url()) \n```", "```py\n$ python secr_reset.py\nhttps://example.com/reset-pwd/ML_6_2wxDpXmDJLHrDnrRA \n```", "```py\n# jwt/tok.py\nimport jwt\ndata = {\"payload\": \"data\", \"id\": 123456789}\nalgs = [\"HS256\", \"HS512\"]\ntoken = jwt.encode(data, \"secret-key\")\ndata_out = jwt.decode(token, \"secret-key\", algorithms=algs)\nprint(token)\nprint(data_out) \n```", "```py\n$ python jwt/tok.py\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjoiZGF0YSIsIm...\n{'payload': 'data', 'id': 123456789} \n```", "```py\n# jwt/tok.py\njwt.decode(token, options={\"verify_signature\": False}) \n```", "```py\n# jwt/tok.py\ntoken512 = jwt.encode(data, \"secret-key\", algorithm=\"HS512\")\ndata_out = jwt.decode(\n    token512, \"secret-key\", algorithms=[\"HS512\"]\n)\nprint(data_out) \n```", "```py\n# jwt/claims_time.py\nfrom datetime import datetime, timedelta, UTC\nfrom time import sleep, time\nimport jwt\niat = datetime.now(tz=UTC)\nnfb = iat + timedelta(seconds=1)\nexp = iat + timedelta(seconds=3)\ndata = {\"payload\": \"data\", \"nbf\": nfb, \"exp\": exp, \"iat\": iat}\ndef decode(token, secret):\n    print(f\"{time():.2f}\")\n    try:\n        print(jwt.decode(token, secret, algorithms=[\"HS256\"]))\n    except (\n        jwt.ImmatureSignatureError,\n        jwt.ExpiredSignatureError,\n    ) as err:\n        print(err)\n        print(type(err))\nsecret = \"secret-key\"\ntoken = jwt.encode(data, secret)\ndecode(token, secret)\nsleep(2)\ndecode(token, secret)\nsleep(2)\ndecode(token, secret) \n```", "```py\n$ python jwt/claims_time.py\n1716674892.39\nThe token is not yet valid (nbf)\n<class 'jwt.exceptions.ImmatureSignatureError'>\n1716674894.39\n{'payload': 'data', 'nbf': 1716674893, 'exp': 1716674895, 'iat': 1716674892}\n1716674896.39\nSignature has expired\n<class 'jwt.exceptions.ExpiredSignatureError'> \n```", "```py\n# jwt/claims_auth.py\nimport jwt\ndata = {\"payload\": \"data\", \"iss\": \"hein\", \"aud\": \"learn-python\"}\nsecret = \"secret-key\"\ntoken = jwt.encode(data, secret)\ndef decode(token, secret, issuer=None, audience=None):\n    try:\n        print(\n            jwt.decode(\n                token,\n                secret,\n                issuer=issuer,\n                audience=audience,\n                algorithms=[\"HS256\"],\n            )\n        )\n    except (\n        jwt.InvalidIssuerError,\n        jwt.InvalidAudienceError,\n    ) as err:\n        print(err)\n        print(type(err))\n# Not providing both the audience and issuer will fail\ndecode(token, secret)\n# Not providing the issuer will succeed\ndecode(token, secret, audience=\"learn-python\")\n# Not providing the audience will fail\ndecode(token, secret, issuer=\"hein\")\n# Both will fail\ndecode(token, secret, issuer=\"wrong\", audience=\"learn-python\")\ndecode(token, secret, issuer=\"hein\", audience=\"wrong\")\n# This will succeed\ndecode(token, secret, issuer=\"hein\", audience=\"learn-python\") \n```", "```py\n$ python jwt/claims_time.py\nInvalid audience\n<class 'jwt.exceptions.InvalidAudienceError'>\n{'payload': 'data', 'iss': 'hein', 'aud': 'learn-python'}\nInvalid audience\n<class 'jwt.exceptions.InvalidAudienceError'>\nInvalid issuer\n<class 'jwt.exceptions.InvalidIssuerError'>\nAudience doesn't match\n<class 'jwt.exceptions.InvalidAudienceError'>\n{'payload': 'data', 'iss': 'hein', 'aud': 'learn-python'} \n```", "```py\n$ ssh-keygen -t rsa â€“m PEM \n```", "```py\n# jwt/token_rsa.py\nimport jwt\ndata = {\"payload\": \"data\"}\ndef encode(data, priv_filename, algorithm=\"RS256\"):\n    with open(priv_filename, \"rb\") as key:\n        private_key = key.read()\n    return jwt.encode(data, private_key, algorithm=algorithm)\ndef decode(data, pub_filename, algorithm=\"RS256\"):\n    with open(pub_filename, \"rb\") as key:\n        public_key = key.read()\n    return jwt.decode(data, public_key, algorithms=[algorithm])\ntoken = encode(data, \"jwt/rsa/key\")\ndata_out = decode(token, \"jwt/rsa/key.pub\")\nprint(data_out)  # {'payload': 'data'} \n```"]