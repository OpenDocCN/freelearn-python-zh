["```py\n>>> print(\"hello world\") \n\nhello world\n```", "```py\n>>> quotient, remainder = divmod(355, 113)\n```", "```py\n    #!/usr/bin/env python3\n    ```", "```py\n    \"\"\" \n\n    A summary of this script. \n\n    \"\"\"\n    ```", "```py\n    print(’hello world’)\n    ```", "```py\n#!/usr/bin/env python3 \n\n\"\"\" \n\nMy First Script: Calculate an important value. \n\n\"\"\" \n\nprint(355 / 113)\n```", "```py\n = 355/113 \n\nprint()\n```", "```py\n# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n```", "```py\n>>> import math\n>>> example_value = (63/25) * (17+15*math.sqrt(5)) / (7+15*math.sqrt(5))\n>>> mantissa_fraction, exponent = math.frexp(example_value)\n>>> mantissa_whole = int(mantissa_fraction*2**53)\n>>> message_text = f’the internal representation is {mantissa_whole:d}/2**53*2**{exponent:d}’\n>>> print(message_text) \n\nthe internal representation is 7074237752514592/2**53*2**2\n```", "```py\n    >>> message_text = f’the internal representation is \\ \n\n    ... {mantissa_whole:d}/2**53*2**{exponent:d}’\n    ```", "```py\n    >>> import math  >>> example_value1 = (63/25) * (17+15*math.sqrt(5)) / (7+15*math.sqrt(5))\n    ```", "```py\n    >>> example_value2 = (63/25) * ( (17+15*math.sqrt(5)) / (7+15*math.sqrt(5)) )  >>> example_value2 == example_value1 \n\n    True\n    ```", "```py\n    >>> example_value3 = (63/25) * ( \n\n    ...     (17+15*math.sqrt(5)) \n\n    ...     / (7+15*math.sqrt(5)) \n\n    ... ) \n\n    >>> example_value3 == example_value1 \n\n    True\n    ```", "```py\n    >>> message_text = ( \n\n    ... f’the internal representation ’ \n\n    ... f’is {mantissa_whole:d}/2**53*2**{exponent:d}’ \n\n    ... ) \n\n    >>> message_text \n\n    ’the internal representation is 7074237752514592/2**53*2**2’\n    ```", "```py\n>>> import math\n>>> example_value = (63/25) * (17+15*math.sqrt(5)) / (7+15*math.sqrt(5)) \n```", "```py\n    >>> a = (63/25) \n\n    >>> b = (17+15*math.sqrt(5)) \n\n    >>> c = (7+15*math.sqrt(5))\n    ```", "```py\n    >>> example_value = a * b / c\n    ```", "```py\n>>> from math import ( \n\n...     sin, cos, tan, \n\n...     sqrt, log, frexp)\n```", "```py\n\"\"\" \n\nDownloads and decodes the current Special Marine Warning (SMW) \n\nfor the area ’AKQ’. \n\n\"\"\"\n```", "```py\n\"\"\" \n\nDownloads and decodes the current Special Marine Warning (SMW) \n\nfor the area \\textquotesingle AKQ\\textquotesingle{} \n\nSYNOPSIS \n\n======== \n\n:: \n\n    python3 akq_weather.py \n\nDESCRIPTION \n\n=========== \n\nDownloads the Special Marine Warnings \n\nFiles \n\n===== \n\nWrites a file, ’’AKW.html’’. \n\nEXAMPLES \n\n======== \n\nHere’s an example:: \n\n    slott\\$ python3 akq_weather.py \n\n    None issued by this office recently.\n```", "```py\n    Topic \n\n    =====\n    ```", "```py\nTITLE \n\n===== \n\nSOMETHING \n\n---------- \n\nMORE \n\n^^^^^ \n\nEXTRA \n\n^^^^^ \n\nLEVEL 2 \n\n------- \n\nLEVEL 3 \n\n^^^^^^^^\n```", "```py\n    It helps to have bullets because: \n\n    -  They can help clarify \n\n    -  They can help organize\n    ```", "```py\n    ..  important:: \n\n        Do not flip the bozo bit.\n    ```", "```py\n if weather == Weather.RAIN and plan == Plan.GO_OUT: \n\n    bring(\"umbrella\") \n\nelse: \n\n    bring(\"sunglasses\")\n```", "```py\n     dice = die_1 + die_2 \n\n    if dice in (2, 3, 12): \n\n        game.craps() \n\n    elif dice in (7, 11): \n\n        game.winner() \n\n    elif dice in (4, 5, 6, 8, 9, 10): \n\n        game.point(dice) \n    ```", "```py\n     else: \n\n        raise Exception(’Design Problem’)\n    ```", "```py\n# do something \n\nassert (m == a or m == b) and m >= a and m >= b\n```", "```py\nif a >= b: \n\n    m = a \n\nelif b >= a: \n\n    m = b \n\nelse: \n\n    raise Exception(’Design Problem’) \n\nassert (m == a or m == b) and m >= a and m >= b\n```", "```py\n>>> s = sum((1 / (2 * n + 1)) ** 2 for n in range(0, 20_000))\n```", "```py\n>>> b = 0 \n\n>>> for n in range(0, 20_000): \n\n...     if (1 / ( 2 * n + 1)) ** 2 >= 0.000_000_001: \n\n...         b = b + (1 / (2 * n + 1)) ** 2\n```", "```py\n    >>> p = 0 \n\n    >>> for n in range(0, 20_000): \n\n    ...     term = (1 / (2 * n + 1)) ** 2 \n\n    ...     if term >= 0.000_000_001: \n\n    ...         p = p + term\n    ```", "```py\n    >>> q = 0 \n\n    >>> for n in range(0, 20_000): \n\n    ...     if (term := (1 / (2 * n + 1)) ** 2) >= 0.000_000_001: \n\n    ...         q = q + term \n\n    ...     else: \n\n    ...         break\n    ```", "```py\n >>> r = 0 \n\n>>> n = 0 \n\n>>> while (term := (1 / (2 * n + 1)) ** 2) >= 0.000_000_001: \n\n...     r += term \n\n...     n += 1\n```", "```py\n>>> data = [11, 13, 17, 19, 23, 29] \n\n>>> total = 0 \n\n>>> running_sum = [(total := total + d) for d in data] \n\n>>> total \n\n112 \n\n>>> running_sum \n\n[11, 24, 41, 60, 83, 112]\n```", "```py\n>>> sample_1 = \"some_name = the_value\"\n```", "```py\n>>> for position in  range(len(sample_1)): \n\n...     if sample_1[position] in ’=:’: \n\n...         break \n\n>>> print(f\"name={sample_1[:position]!r}\", \n\n...     f\"value={sample_1[position+1:]!r}\") \n\nname=’some_name ’ value=’ the_value’\n```", "```py\n>>> sample_2 = \"name_only\" \n\n>>> for position in range(len(sample_2)): \n\n...     if sample_2[position] in ’=:’: \n\n...         break \n\n>>> print(f\"name={sample_2[:position]!r}\", \n\n...     f\"value={sample_2[position+1:]!r}\") \n\nname=’name_onl’ value=’’\n```", "```py\n    assert text[position] in ’=:’  # We found a = or :\n    ```", "```py\n    >>> position = -1 \n\n    >>> for position in range(len(sample_2)): \n\n    ...     if sample_2[position] in ’=:’: \n\n    ...         break \n\n    ... \n\n    >>> if position == -1: \n\n    ...     print(f\"name=None value=None\") \n\n    ... elif not(sample_2[position] == ’:’ or sample_2[position] == ’=’): \n\n    ...     print(f\"name={sample_2!r} value=None\") \n\n    ... else: \n\n    ...     print(f\"name={sample_2[:position]!r}\", \n\n    ...         f\"value={sample_2[position+1:]!r}\") \n\n    name=’name_only’ value=None\n    ```", "```py\n>>> for position in  range(len(sample_2)): \n\n...     if sample_2[position] in ’=:’: \n\n...         name, value = sample_2[:position], sample_2[position+1:] \n\n...         break \n\n... else: \n\n...     if len(sample_2) > 0: \n\n...         name, value = sample_2, None \n\n...     else: \n\n...         name, value = None, None \n\n>>> print(f\"{name=!r} {value=!r}\") \n\nname=’name_only’ value=None\n```", "```py\n>>> from pathlib import Path \n\n>>> import shutil \n\n>>> source_dir = Path.cwd()/\"data\" \n\n>>> target_dir = Path.cwd()/\"backup\" \n\n>>> for source_path in source_dir.glob(’**/*.csv’): \n\n...     source_name = source_path.relative_to(source_dir) \n\n...     target_path = target_dir / source_name \n\n...     shutil.copy(source_path, target_path)\n```", "```py\nTraceback (most recent call last): \n\n... \n\nFileNotFoundError: [Errno 2] No such file or directory: ...\n```", "```py\n    >>> try: \n\n    ...     shutil.copy(source_path, target_path)\n    ```", "```py\n    >>> try: \n\n    ...     target = shutil.copy(source_path, target_path) \n\n    ... except FileNotFoundError: \n\n    ...     target_path.parent.mkdir(exist_ok=True, parents=True) \n\n    ...     target = shutil.copy(source_path, target_path) \n\n    ... except OSError as ex: \n\n    ...     print(f\"Copy {source_path} to {target_path} error {ex}\")\n    ```", "```py\n... except FileNotFoundError: \n\n...     target_path.parent.mkdir(exist_ok=True, parents=True) \n\n...     target = shutil.copy(source_path, target_path)\n```", "```py\n>>> try: \n\n...     target = shutil.copy(source_path, target_path ) \n\n... except FileNotFoundError: \n\n...     try: \n\n...         target_path.parent.mkdir(exist_ok=True, parents=True) \n\n...         target = shutil.copy(source_path, target_path) \n\n...     except OSError as ex2: \n\n...         print(f\"{target_path.parent} problem: {ex2}\") \n\n... except OSError as ex: \n\n...     print(f\"Copy {source_path} to {target_path} error {ex}\")\n```", "```py\n    >>> class MyAppError(Exception): \n\n    ...     pass\n    ```", "```py\n    >>> try: \n\n    ...     None.some_method(42)  # Raises an exception \n\n    ... except AttributeError as exception: \n\n    ...     raise MyAppError(\"Some Known Problem\") from None\n    ```", "```py\n>>> try: \n\n...     None.some_method(42) \n\n... except AttributeError as exception: \n\n...     raise MyAppError(\"Some Known Problem\") from None \n\nTraceback (most recent call last): \n\n... \n\nMyAppError: Some Known Problem\n```", "```py\nTraceback (most recent call last): \n\n  File \"<doctest recipe_09.txt[3]>\", line 2, in <module> \n\n    None.some_method(42) \n\n    ^^^^^^^^^^^^^^^^ \n\nAttributeError: ’NoneType’ object has no attribute ’some_method’ \n\nDuring handling of the above exception, another exception occurred: \n\nTraceback (most recent call last): \n\n  File ... \n\n    exec... \n\n  File ... \n\n    raise... \n\nMyAppError: Some Known Problem\n```", "```py\n>>> import csv\n```", "```py\n>>> from pathlib import Path\n```", "```py\n>>> some_source = [ \n\n...     [2,3,5], \n\n...     [7,11,13], \n\n...     [17,19,23]]\n```", "```py\n\n>>> Path.cwd().mkdir(\"data\", exists=ok=True)\n```", "```py\n    >>> target_path = Path.cwd() / \"data\" / \"test.csv\" \n\n    >>> with target_path.open(’w’, newline=’’) as target_file:\n    ```", "```py\n    >>> target_path = Path.cwd() / \"data\" / \"test.csv\" \n\n    >>> with target_path.open(’w’, newline=’’) as target_file: \n\n    ...     writer = csv.writer(target_file) \n\n    ...     writer.writerow([’column’, ’data’, ’heading’]) \n\n    ...     writer.writerows(some_source)\n    ```", "```py\n    >>> target_path = Path.cwd() / \"data\" / \"test.csv\" \n\n    >>> with target_path.open(’w’, newline=’’) as target_file: \n\n    ...     writer = csv.writer(target_file) \n\n    ...     _ = writer.writerow([’column’, ’data’, ’heading’]) \n\n    ...     writer.writerows(some_source) \n\n    >>> print(f’finished writing {target_path.name}’) \n\n    finished writing test.csv\n    ```", "```py\n>>> try: \n\n...     with target_path.open(’w’, newline=’’) as target_file: \n\n...         writer = csv.writer(target_file) \n\n...         _ = writer.writerow([’column’, ’data’, ’heading’]) \n\n...         _ = writer.writerow(some_source[0]) \n\n...         raise Exception(\"Testing\") \n\n... except Exception as exc: \n\n...     print(f\"{target_file.closed=}\") \n\n...     print(f\"{exc=}\") \n\ntarget_file.closed=True \n\nexc=Exception(’Testing’) \n\n>>> print(f\"finished writing {target_path.name}\") \n\nfinished writing test.csv\n```", "```py\ntarget_file.closed=True \n\nexc=Exception(’Testing’)\n```"]