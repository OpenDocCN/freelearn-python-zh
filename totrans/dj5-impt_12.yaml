- en: <st c="0">12</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3">Implementing the Purchase and Orders Pages</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="46">During the previous chapter, we implemented the models required to
    store the purchase information.</st> <st c="146">In this chapter, we will implement
    the purchase functionality and finalize the Movies Store project with an orders
    page.</st> <st c="267">Users will be able to check their placed orders.</st> <st
    c="316">Later, we will recap the Movies Store MVT architecture to check the consistency
    between the Python code and the</st> <st c="428">architecture diagram.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="449">In this chapter, we will be covering the</st> <st c="491">following
    topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="508">Creating the</st> <st c="522">purchase page</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="535">Creating the</st> <st c="549">orders page</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="560">Recapping the Movies Store</st> <st c="588">MVT architecture</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="604">By the end of the chapter, we will have the complete code for our
    Movies Store project.</st> <st c="693">We will also be capable of relating architecture
    diagrams to the actual</st> <st c="765">implemented code.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="782">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="805">In this chapter, we will be using Python 3.10+.</st> <st c="854">Additionally,
    we will be using the</st> **<st c="889">VS Code</st>** <st c="896">editor in this
    book, which you can download</st> <st c="941">from</st> [<st c="946">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="976">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="977">The code for this chapter is located</st> <st c="1015">at</st> [<st
    c="1018">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter12/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter12/moviesstore)<st
    c="1126">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1127">The CiA video for this chapter can be found</st> <st c="1172">at</st>
    [<st c="1175">https://packt.link/4NyAv</st>](https://packt.link/4NyAv)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1199">Creating the purchase page</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1226">Let’s improve our shopping cart page</st> <st c="1263">and include
    some functionalities to allow users to make purchases.</st> <st c="1331">To achieve
    that, we need to follow</st> <st c="1366">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1378">Configuring the</st> <st c="1395">purchase URL.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="1408">Defining the</st> `<st c="1422">purchase</st>` <st c="1430">function.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="1440">Updating the</st> `<st c="1454">cart.index</st>` <st c="1464">template.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="1474">Creating the</st> `<st c="1488">cart.purchase</st>` <st c="1501">template.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="1511">Configuring the purchase URL</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="1540">In</st> `<st c="1544">/cart/urls.py</st>`<st c="1557">, add the
    next</st> <st c="1571">path as shown</st> <st c="1586">in</st> **<st c="1589">bold</st>**<st
    c="1593">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="1860">We defined a</st> `<st c="1873">cart/purchase/</st>` <st c="1887">path
    that will execute the</st> `<st c="1915">purchase</st>` <st c="1923">function
    defined in the</st> `<st c="1948">views</st>` <st c="1953">file.</st> <st c="1960">We
    will implement the</st> `<st c="1982">purchase</st>` <st c="1990">function later.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2006">Defining the purchase function</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="2037">In</st> `<st c="2041">/cart/views.py</st>`<st c="2055">, add the</st>
    <st c="2065">following lines</st> <st c="2081">of code</st> <st c="2089">in</st>
    **<st c="2092">bold</st>**<st c="2096">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**<st c="2981">The previous function is the largest one</st> <st c="3023">we
    have implemented in</st> <st c="3045">this book.</st> <st c="3057">Let’s explain
    this function by breaking it down</st> <st c="3105">into parts:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="3116">from .models import</st>` `<st c="3137">Order, Item</st>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3148">from django.contrib.auth.decorators</st>` `<st c="3185">import
    login_required</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="3206">Let’s analyze this piece</st> <st c="3232">of code:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="3240">We import the</st> `<st c="3255">Order</st>` <st c="3260">and</st>
    `<st c="3265">Item</st>` <st c="3269">models from the current</st> <st c="3294">app
    directory.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3308">We import the</st> `<st c="3323">login_required</st>` <st c="3337">decorator.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3348">@</st>``<st c="3350">login_required</st>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3364">def purchase(request):</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="3387">cart =</st>` `<st c="3395">request.session.get(''cart'', {})</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="3426">movie_ids =</st>` `<st c="3439">list(cart.keys())</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="3456">if (movie_ids == []):</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**<st c="3478">return redirect(''cart.index'')</st>**`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="3508">Let’s analyze this piece</st> <st c="3534">of code:</st>**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="3542">We use the</st> `<st c="3554">login_required</st>` <st c="3568">decorator
    to</st> <st c="3582">ensure that the user must be logged in to access the</st>
    `<st c="3635">purchase</st>` <st c="3643">function.</st>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3653">We define the</st> `<st c="3668">purchase</st>` <st c="3676">function,
    which will handle the</st> <st c="3709">purchase process.</st>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3726">We retrieve the cart data from the user’s session.</st> <st
    c="3778">The</st> `<st c="3782">cart</st>` <st c="3786">variable will contain
    a dictionary with</st> <st c="3827">movie IDs as keys and quantities</st> <st
    c="3860">as values.</st>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3870">We retrieve the movie IDs stored in the</st> `<st c="3911">cart</st>`
    <st c="3915">dict and convert them into a list</st> <st c="3950">named</st> `<st
    c="3956">movie_ids</st>`<st c="3965">.</st>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3966">We check if the</st> `<st c="3983">movie_ids</st>` <st c="3992">list
    is empty (which indicates the cart is empty).</st> <st c="4044">In this case,
    the user is redirected to the</st> `<st c="4088">cart.index</st>` <st c="4098">page
    (here, the</st> `<st c="4115">purchase</st>` <st c="4123">function finalizes</st>
    <st c="4143">its execution).</st>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '***   `<st c="4158">movies_in_cart =</st>` `<st c="4176">Movie.objects.filter(id__in=movie_ids)</st>`'
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="4214">cart_total =</st>` `<st c="4228">calculate_cart_total(cart, movies_in_cart)</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="4270">order =</st>` `<st c="4279">Order()</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="4286">order.user =</st>` `<st c="4300">request.user</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="4312">order.total =</st>` `<st c="4327">cart_total</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**<st c="4337">order.save()</st>**`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**`<st c="4350">for movie</st>` `<st c="4361">in movies_in_cart:</st>`**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**`<st c="4379">item =</st>` `<st c="4387">Item()</st>`**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**`<st c="4393">item.movie =</st>` `<st c="4407">movie</st>`**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**`<st c="4412">item.price =</st>` `<st c="4426">movie.price</st>`**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**`<st c="4437">item.order =</st>` `<st c="4451">order</st>`**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**`<st c="4456">item.quantity =</st>` `<st c="4473">cart[str(movie.id)]</st>`**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**`**<st c="4492">item.save()</st>**`**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '****<st c="4504">Let’s analyze this piece</st> <st c="4530">of code:</st>****'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '****<st c="4538">If the cart is not empty, we</st> <st c="4567">continue the</st>
    <st c="4581">purchase process.</st>****'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '****<st c="4598">We retrieve movie objects from the database based on the IDs
    stored in the cart</st> <st c="4679">using</st> `<st c="4685">Movie.objects.filter(id__in=movie_ids</st>`<st
    c="4722">.</st>****'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '****<st c="4723">We calculate the total cost of the movies in the cart using
    the</st> `<st c="4788">calculate_cart_total()</st>` <st c="4810">function.</st>****'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '****<st c="4820">We create a new</st> `<st c="4837">Order</st>` <st c="4842">object.</st>
    <st c="4851">We set its attributes such as</st> `<st c="4881">user</st>` <st c="4885">(the
    logged-in user) and</st> `<st c="4911">total</st>` <st c="4916">(the cart total),
    and save it to</st> <st c="4950">the database.</st>****'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '****<st c="4963">We iterate over the movies in the cart.</st> <st c="5004">We
    create an</st> `<st c="5017">Item</st>` <st c="5021">object for each movie in
    the cart.</st> <st c="5057">For each</st> `<st c="5066">Item</st>`<st c="5070">,
    we set its</st> `<st c="5083">price</st>` <st c="5088">and</st> `<st c="5093">quantity</st>`<st
    c="5101">, link the corresponding</st> `<st c="5126">movie</st>` <st c="5131">and</st>
    `<st c="5136">order</st>`<st c="5141">, and save it to</st> <st c="5158">the database.</st>*********   `<st
    c="5171">request.session[''cart''] = {}</st>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="5200">template_data = {}</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="5219">template_data[''title''] = ''</st>``<st c="5246">Purchase confirmation''</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="5269">template_data[''order_id''] =</st>` `<st c="5298">order.id</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="5306">return render(request, ''cart/purchase.html'', {''</st>``<st
    c="5354">template_data'': template_data})</st>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="5386">Let’s analyze this piece</st> <st c="5412">of code:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="5420">After the purchase is completed, we clear the cart in the user’s
    session by setting</st> `<st c="5505">request.session['cart']</st>` <st c="5528">to
    an</st> <st c="5535">empty dictionary.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5552">We prepare the data to be</st> <st c="5579">sent to the purchase
    confirmation template.</st> <st c="5623">This data includes the title of the page
    and the ID of the</st> <st c="5681">created order.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5696">Finally, we render the</st> `<st c="5720">cart/purchase.html</st>`
    <st c="5738">template.</st>******
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '******<st c="5748">Now that we have finished the purchase function, let’s include
    a button that links to</st> <st c="5835">this function.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5849">Updating cart.index template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="5878">In the</st> `<st c="5886">/cart/templates/cart/index.html</st>`
    <st c="5917">file, add</st> <st c="5928">the following lines</st> <st c="5948">in</st>
    **<st c="5951">bold</st>**<st c="5955">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6321">We have added a button that links the shopping cart page with the
    purchase function.</st> <st c="6407">This button will be only displayed if</st>
    <st c="6444">there are movies added</st> <st c="6468">to</st> <st c="6471">the
    cart.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6480">Creating cart.purchase template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6512">Now, in</st> `<st c="6521">/cart/templates/cart/</st>`<st c="6542">,
    create a new file,</st> `<st c="6563">purchase.html</st>`<st c="6576">. For now,
    fill it with</st> <st c="6600">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6941">We have created a simple template that extends the</st> `<st c="6993">base.html</st>`
    <st c="7002">template and shows a congratulations message to the user, including
    the order number of the</st> <st c="7095">current purchase.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7112">Now, save those files, run the server, go to</st> `<st c="7158">http://localhost:8000/movies</st>`<st
    c="7186">, click on a couple of movies, and add them to the cart.</st> <st c="7243">Then,
    go to the</st> **<st c="7259">Cart</st>** <st c="7263">section and click</st>
    **<st c="7282">Purchase</st>** <st c="7290">(you will need to</st> <st c="7308">be
    logged in to execute the purchase action).</st> <st c="7355">Then, you will see
    a purchase confirmation message (</st>*<st c="7407">Figure 12</st>**<st c="7417">.1</st>*<st
    c="7419">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Purchase page](img/B22457_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7512">Figure 12.1 – Purchase page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7539">If you navigate to the admin panel, you will see a new order registered
    (linked to the user who made the purchase) and a couple of items (linked to the
    previous order), as shown in</st> *<st c="7721">Figure 12</st>**<st c="7730">.2</st>*<st
    c="7732">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Order and items in the admin panel](img/B22457_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7915">Figure 12.2 – Order and items in the admin panel</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7963">At this point, we are able to create</st> <st c="8000">orders and
    register the corresponding information into the database.</st> <st c="8070">Now,
    let’s implement a page to see</st> <st c="8105">the orders.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8116">Creating the orders page</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="8141">Let’s finalize our Movies Store</st> <st c="8173">by allowing users
    to see their orders.</st> <st c="8213">To achieve that, we need to follow</st>
    <st c="8248">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8260">Configuring the</st> <st c="8277">orders URL.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="8288">Defining the</st> `<st c="8302">orders</st>` <st c="8308">function.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="8318">Creating the</st> `<st c="8332">accounts.orders</st>` <st c="8347">template.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="8357">Adding a link to the</st> <st c="8379">base template.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="8393">Configuring the orders URL</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="8420">An order belongs to a</st> <st c="8442">specific user.</st> <st
    c="8458">Because of this, we will add the orders functionality inside the</st>
    `<st c="8523">accounts</st>` <st c="8531">app.</st> <st c="8537">In</st> `<st
    c="8540">/accounts/urls.py</st>`<st c="8557">, add the next path</st> <st c="8577">in</st>
    **<st c="8580">bold</st>**<st c="8584">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8869">We defined an</st> `<st c="8883">accounts/orders/</st>` <st c="8899">path,
    which will execute the</st> `<st c="8929">orders</st>` <st c="8935">function defined
    in the</st> `<st c="8960">views</st>` <st c="8965">file.</st> <st c="8972">We</st>
    <st c="8975">will implement the</st> `<st c="8994">orders</st>` <st c="9000">function
    later.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9016">Defining the orders function</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9045">In</st> `<st c="9049">/accounts/views.py</st>`<st c="9067">, add
    the</st> <st c="9076">following</st> <st c="9087">lines</st> <st c="9093">in</st>
    **<st c="9096">bold</st>**<st c="9100">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**<st c="9470">Let’s explain the</st> <st c="9489">previous code:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9503">We import the</st> `<st c="9518">User</st>` <st c="9522">model</st>
    <st c="9528">from Django’s</st> <st c="9543">authentication system.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="9565">We use the</st> `<st c="9577">login_required</st>` <st c="9591">decorator
    to ensure that the user must be logged in to access the</st> `<st c="9658">orders</st>`
    <st c="9664">function.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="9674">We define the</st> `<st c="9689">orders</st>` <st c="9695">function,
    which</st> <st c="9711">takes a</st> `<st c="9720">request</st>` <st c="9727">object
    as</st> <st c="9738">a parameter.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="9750">We define the</st> `<st c="9765">template_data</st>` <st c="9778">variable
    and assign it</st> <st c="9802">a</st> `<st c="9804">title</st>`<st c="9809">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="9810">We retrieve all orders belonging to the currently logged-in user
    (</st>`<st c="9877">request.user</st>`<st c="9890">).</st> <st c="9894">The</st>
    `<st c="9898">order_set</st>` <st c="9907">attribute is used to access the related
    orders associated with the user through their relationship (you can learn more
    about this type of relationship here</st> [<st c="10064">https://docs.djangoproject.com/en/5.0/topics/db/examples/many_to_one/</st>](https://docs.djangoproject.com/en/5.0/topics/db/examples/many_to_one/)<st
    c="10133">).</st> <st c="10137">Remember that there is a</st> `<st c="10162">ForeignKey</st>`
    <st c="10172">relationship between the</st> `<st c="10198">User</st>` <st c="10202">model
    and the</st> `<st c="10217">Order</st>` <st c="10222">model.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="10229">Finally, we pass the orders to the template and</st> <st c="10278">render
    it.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="10288">Creating accounts.orders template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="10322">Now, in</st> `<st c="10331">/accounts/templates/accounts/</st>`<st
    c="10360">, create a</st> <st c="10371">new file,</st> `<st c="10381">orders.html</st>`<st
    c="10392">. For now, fill it with</st> <st c="10415">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11389">Let’s explain the</st> <st c="11408">previous</st> <st c="11417">code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11422">We extend the</st> `<st c="11437">base.html</st>` <st c="11446">template.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11456">We iterate over each order object stored in</st> `<st c="11501">template_data.orders</st>`<st
    c="11521">. For each order, we display its</st> `<st c="11554">date</st>` <st
    c="11558">and</st> `<st c="11563">total</st>`<st c="11568">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11569">Then, we iterate we iterate over each item in the current order.</st>
    <st c="11635">The</st> `<st c="11639">order.item_set.all</st>` <st c="11657">retrieves
    all related items associated with the current order.</st> <st c="11721">For each
    of those items, we display its</st> `<st c="11761">price</st>` <st c="11766">and</st>
    `<st c="11771">quantity</st>`<st c="11779">, and the corresponding movie</st>
    <st c="11808">id</st> <st c="11812">and name.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11821">Adding a link in the base template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="11856">Let’s add the orders link in the</st> <st c="11889">base template.</st>
    <st c="11905">In</st> `<st c="11908">/moviesstore/templates/base.html</st>`<st
    c="11940">, in the header section, add the following lines</st> <st c="11989">in</st>
    **<st c="11992">bold</st>**<st c="11996">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <st c="12344">Now, save those files, run the server, and go to</st> `<st c="12394">http://localhost:8000/accounts/orders</st>`<st
    c="12431">. If you made a purchase, you would see your corresponding orders (</st>*<st
    c="12498">Figure 12</st>**<st c="12508">.3</st>*<st c="12510">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Orders page](img/B22457_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12761">Figure 12.3 – Orders page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12786">We have completed the</st> <st c="12809">Movies Store project
    code.</st> <st c="12836">We have implemented all the functionalities planned in</st>
    [*<st c="12891">Chapter 1</st>*](B22457_01.xhtml#_idTextAnchor014)<st c="12900">.
    Now, let’s compare the implemented code with the</st> <st c="12951">architecture
    diagram.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12972">Recapping the Movies Store MVT architecture</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="13016">The architecture diagram of the Movies Store that we designed
    in</st> [*<st c="13082">Chapter 1</st>*](B22457_01.xhtml#_idTextAnchor014) <st
    c="13091">served as a blueprint for designing the</st> <st c="13131">applications,
    layers, and code of the Movies Store.</st> <st c="13184">We have already implemented
    all the applications and elements described in that diagram.</st> <st c="13273">So,
    let’s quickly recap what we have accomplished</st> <st c="13323">so far.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="13330">Figure 12</st>**<st c="13340">.4</st>* <st c="13342">displays
    the complete project tree directory structure and compares it with a simple version
    of the project architecture.</st> <st c="13465">We have successfully implemented
    four apps (</st>`<st c="13509">accounts</st>`<st c="13518">,</st> `<st c="13520">cart</st>`<st
    c="13524">,</st> `<st c="13526">home</st>`<st c="13530">, and</st> `<st c="13536">movies</st>`<st
    c="13542">), which contain most of the</st> <st c="13572">project’s functionalities.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Project tree directory compared with simplified architecture](img/B22457_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="13801">Figure 12.4 – Project tree directory compared with simplified
    architecture</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="13875">Figure 12</st>**<st c="13885">.5</st>* <st c="13887">displays
    the complete</st> <st c="13910">architecture.</st> <st c="13924">We hope you understand
    each of the architectural elements better and how they relate to</st> <st c="14012">each
    other.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Movies Store architecture](img/B22457_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="14401">Figure 12.5 – Movies Store architecture</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14440">Let’s make a last</st> <st c="14459">quick analysis:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14474">We implemented a project-level folder named</st> `<st c="14519">moviesstore</st>`<st
    c="14530">. This folder contained the project-level URL file, which connected
    with app-level</st> <st c="14613">URL files.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '<st c="14623">We implemented four</st> <st c="14643">Django apps.</st> <st
    c="14657">For each of those apps, we illustrated the communication between the
    three main layers: models, views,</st> <st c="14760">and templates.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14774">We learned how to divide the code across multiple apps to improve
    maintainability and</st> <st c="14861">separate responsibilities.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14887">We practiced the implementation of those files and layers by implementing
    a set of functionalities for our Movies</st> <st c="15002">Store project.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="15016">What a journey!</st> <st c="15033">We’ve utilized numerous Django
    modules, libraries, functions, concepts, and elements to</st> <st c="15120">implement</st>
    <st c="15131">this project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15144">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="15152">In this chapter, we completed the Movies Store project.</st> <st
    c="15209">We implemented purchase functionality, which took advantage of the</st>
    `<st c="15276">Order</st>` <st c="15281">and</st> `<st c="15286">Item</st>` <st
    c="15290">models.</st> <st c="15299">We created an orders page to allow users
    to view their orders.</st> <st c="15362">We recapped our Movies Store architecture
    diagram and engaged in comparisons and discussions with the actual project code.</st>
    <st c="15485">We have learned a lot since we started.</st> <st c="15525">Now,
    it’s time for the final chapter.</st> <st c="15563">Let’s learn how to deploy
    our Movies Store project to</st> <st c="15617">the cloud.</st>**********
  prefs: []
  type: TYPE_NORMAL
