["```py\n# demo_app/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import python_2_unicode_compatible\nfrom utils.models import UrlMixin\nfrom utils.models import CreationModificationMixin\nfrom utils.models import MetaTagsMixin\n\n@python_2_unicode_compatible\nclass Idea(UrlMixin, CreationModificationMixin, MetaTagsMixin):\n  title = models.CharField(_(\"Title\"), max_length=200)\n  content = models.TextField(_(\"Content\"))\n\n  class Meta:\n    verbose_name = _(\"Idea\")\n    verbose_name_plural = _(\"Ideas\")\n\n  def __str__(self):\n    return self.title\n```", "```py\n    # utils/models.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import urlparse\n    from django.db import models\n    from django.contrib.sites.models import Site\n    from django.conf import settings\n\n    class UrlMixin(models.Model):\n        \"\"\"\n        A replacement for get_absolute_url()\n        Models extending this mixin should have \n        either get_url or get_url_path implemented.\n        \"\"\"\n        class Meta:\n            abstract = True\n\n        def get_url(self):\n            if hasattr(self.get_url_path, \"dont_recurse\"):\n                raise NotImplementedError\n            try:\n                path = self.get_url_path()\n            except NotImplementedError:\n                raise\n            website_url = getattr(\n                settings, \"DEFAULT_WEBSITE_URL\",\n     \"http://127.0.0.1:8000\"\n            )\n            return website_url + path\n        get_url.dont_recurse = True\n\n        def get_url_path(self):\n            if hasattr(self.get_url, \"dont_recurse\"):\n                raise NotImplementedError\n            try:\n                url = self.get_url()\n            except NotImplementedError:\n                raise\n            bits = urlparse.urlparse(url)\n            return urlparse.urlunparse((\"\", \"\") + bits[2:])\n        get_url_path.dont_recurse = True\n\n        def get_absolute_url(self):\n            return self.get_url_path()\n    ```", "```py\n    # demo_app/models.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from django.core.urlresolvers import reverse\n    from django.utils.encoding import \\\n        python_2_unicode_compatible\n\n    from utils.models import UrlMixin\n\n    @python_2_unicode_compatible\n    class Idea(UrlMixin):\n        title = models.CharField(_(\"Title\"), max_length=200)\n\n        # …\n\n        get_url_path(self):\n            return reverse(\"idea_details\", kwargs={\n                \"idea_id\": str(self.pk),\n            })\n    ```", "```py\n    # settings.py\n    # …\n    DEFAULT_WEBSITE_URL = \"http://www.example.com\"\n    ```", "```py\n# utils/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.timezone import now as timezone_now\n\nclass CreationModificationDateMixin(models.Model):\n  \"\"\"\n  Abstract base class with a creation and modification\n  date and time\n  \"\"\"\n\n  created = models.DateTimeField(\n    _(\"creation date and time\"),\n    editable=False,\n  )\n\n  modified = models.DateTimeField(\n    _(\"modification date and time\"),\n    null=True,\n    editable=False,\n  )\n\n  def save(self, *args, **kwargs):\n    if not self.pk:\n      self.created = timezone_now()\n    else:\n      # To ensure that we have a creation data always,\n      # we add this one\n    if not self.created:\n      self.created = timezone_now()\n\n      self.modified = timezone_now()\n\n      super(CreationModificationDateMixin, self).\\\n      save(*args, **kwargs)\n    save.alters_data = True\n\n  class Meta:\n    abstract = True\n```", "```py\n# utils/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.template.defaultfilters import escape\nfrom django.utils.safestring import mark_safe\n\nclass MetaTagsMixin(models.Model):\n  \"\"\"\n  Abstract base class for meta tags in the <head> section\n  \"\"\"\n  meta_keywords = models.CharField(\n    _(\"Keywords\"),\n    max_length=255,\n    blank=True,\n    help_text=_(\"Separate keywords by comma.\"),\n  )\n  meta_description = models.CharField(\n    _(\"Description\"),\n    max_length=255,\n    blank=True,\n  )\n  meta_author = models.CharField(\n    _(\"Author\"),\n    max_length=255,\n    blank=True,\n  )\n  meta_copyright = models.CharField(\n    _(\"Copyright\"),\n    max_length=255,\n    blank=True,\n  )\n\n  class Meta:\n    abstract = True\n\n    def get_meta_keywords(self):\n      tag = \"\"\n      if self.meta_keywords:\n        tag = '<meta name=\"keywords\" content=\"%s\" />\\n' %\\\n          escape(self.meta_keywords)\n      return mark_safe(tag)\n\n    def get_meta_description(self):\n      tag = \"\"\n      if self.meta_description:\n        tag = '<meta name=\"description\" content=\"%s\" />\\n' %\\\n          escape(self.meta_description)\n      return mark_safe(tag)\n\n    def get_meta_author(self):\n      tag = \"\"\n      if self.meta_author:\n        tag = '<meta name=\"author\" content=\"%s\" />\\n' %\\\n          escape(self.meta_author)\n      return mark_safe(tag)\n\n    def get_meta_copyright(self):\n      tag = \"\"\n      if self.meta_copyright:\n        tag = '<meta name=\"copyright\" content=\"%s\" />\\n' %\\\n          escape(self.meta_copyright)\n      return mark_safe(tag)\n\n    def get_meta_tags(self):\n      return mark_safe(\"\".join((\n        self.get_meta_keywords(),\n        self.get_meta_description(),\n        self.get_meta_author(),\n        self.get_meta_copyright(),\n      )))\n```", "```py\n{{ idea.get_meta_tags }}\n```", "```py\n{{ idea.get_meta_description }}\n```", "```py\n# settings.py\nINSTALLED_APPS = (\n    # …\n    \"django.contrib.contenttypes\",\n)\n```", "```py\n    # utils/models.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from django.contrib.contenttypes.models import ContentType\n    from django.contrib.contenttypes import generic\n    from django.core.exceptions import FieldError\n\n    def object_relation_mixin_factory(\n      prefix=None,\n      prefix_verbose=None,\n      add_related_name=False,\n      limit_content_type_choices_to={},\n      limit_object_choices_to={},\n      is_required=False,\n    ):\n      \"\"\"\n        returns a mixin class for generic foreign keys using\n        \"Content type - object Id\" with dynamic field names.\n        This function is just a class generator\n\n        Parameters:\n        prefix : a prefix, which is added in front of the fields\n        prefix_verbose :    a verbose name of the prefix, used to\n                            generate a title for the field column\n                            of the content object in the Admin.\n        add_related_name :  a boolean value indicating, that a\n                            related name for the generated content\n                            type foreign key should be added. This\n                            value should be true, if you use more\n                            than one ObjectRelationMixin in your model.\n\n        The model fields are created like this:\n\n        <<prefix>>_content_type :   Field name for the \"content type\"\n        <<prefix>>_object_id :      Field name for the \"object Id\"\n        <<prefix>>_content_object : Field name for the \"content object\"\n\n        \"\"\"\n        p = \"\"\n        if prefix:\n          p = \"%s_\" % prefix\n\n        content_type_field = \"%scontent_type\" % p\n        object_id_field = \"%sobject_id\" % p\n        content_object_field = \"%scontent_object\" % p\n\n        class TheClass(models.Model):\n          class Meta:\n            abstract = True\n\n        if add_related_name:\n          if not prefix:\n            raise FieldError(\"if add_related_name is set to True,\"\n              \"a prefix must be given\")\n            related_name = prefix\n        else:\n          related_name = None\n\n        optional = not is_required\n\n        ct_verbose_name = (\n          _(\"%s's type (model)\") % prefix_verbose\n          if prefix_verbose\n          else _(\"Related object's type (model)\")\n        )\n\n        content_type = models.ForeignKey(\n          ContentType,\n          verbose_name=ct_verbose_name,\n          related_name=related_name,\n          blank=optional,\n          null=optional,\n          help_text=_(\"Please select the type (model) for the relation, you want to build.\"),\n          limit_choices_to=limit_content_type_choices_to,\n        )\n\n        fk_verbose_name = (prefix_verbose or _(\"Related object\"))\n\n        object_id = models.CharField(\n          fk_verbose_name,\n          blank=optional,\n          null=False,\n          help_text=_(\"Please enter the ID of the related object.\"),\n          max_length=255,\n          default=\"\",  # for south migrations\n        )\n        object_id.limit_choices_to = limit_object_choices_to\n        # can be retrieved by \n        # MyModel._meta.get_field(\"object_id\").limit_choices_to\n\n        content_object = generic.GenericForeignKey(\n          ct_field=content_type_field,\n          fk_field=object_id_field,\n        )\n\n        TheClass.add_to_class(content_type_field, content_type)\n        TheClass.add_to_class(object_id_field, object_id)\n        TheClass.add_to_class(content_object_field, content_object)\n\n        return TheClass\n    ```", "```py\n    # demo_app/models.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import nicode_literals\n    from django.db import models\n    from utils.models import object_relation_mixin_factory\n    from django.utils.encoding import python_2_unicode_compatible\n\n    FavoriteObjectMixin = object_relation_mixin_factory(\n        is_required=True,\n    )\n\n    OwnerMixin = object_relation_mixin_factory(\n        prefix=\"owner\",\n        prefix_verbose=_(\"Owner\"),\n        add_related_name=True,\n        limit_content_type_choices_to={\n            'model__in': ('user', 'institution')\n        },\n        is_required=True,\n    )\n\n    @python_2_unicode_compatible\n    class Like(FavoriteObjectMixin, OwnerMixin):\n        class Meta:\n            verbose_name = _(\"Like\")\n            verbose_name_plural = _(\"Likes\")\n\n        def __str__(self):\n            return _(\"%(owner)s likes %(obj)s\") % {\n                \"owner\": self.owner_content_object,\n                \"obj\": self.content_object,\n            }\n    ```", "```py\n    # utils/fields.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf import settings\n    from django.db import models\n    from django.utils.translation import get_language\n    from django.utils.translation import string_concat\n\n    class MultilingualCharField(models.CharField):\n\n      def __init__(self, verbose_name=None, **kwargs):\n\n        self._blank = kwargs.get(\"blank\", False)\n        self._editable = kwargs.get(\"editable\", True)\n\n        super(MultilingualCharField, self).\\\n          __init__(verbose_name, **kwargs)\n\n      def contribute_to_class(self, cls, name,\n        virtual_only=False):\n        # generate language specific fields dynamically\n        if not cls._meta.abstract:\n          for lang_code, lang_name in settings.LANGUAGES:\n            if lang_code == settings.LANGUAGE_CODE:\n              _blank = self._blank\n            else:\n              _blank = True\n\n            localized_field = models.CharField(\n              string_concat(self.verbose_name, \n                \" (%s)\" % lang_code),\n                  name=self.name,\n                    primary_key=self.primary_key,\n                    max_length=self.max_length,\n                    unique=self.unique,\n                    blank=_blank,\n                    null=False,\n                    # we ignore the null argument!\n                    db_index=self.db_index,\n                    rel=self.rel,\n                    default=self.default or \"\",\n                    editable=self._editable,\n                    serialize=self.serialize,\n                    choices=self.choices,\n                    help_text=self.help_text,\n                    db_column=None,\n                    db_tablespace=self.db_tablespace\n            )\n            localized_field.contribute_to_class(\n              cls,\n              \"%s_%s\" % (name, lang_code),\n            )\n\n            def translated_value(self):\n              language = get_language()\n              val = self.__dict__[\"%s_%s\" % (name, language)]\n              if not val:\n                val = self.__dict__[\"%s_%s\" % \\\n                  (name, settings.LANGUAGE_CODE)]\n                  return val\n\n          setattr(cls, name, property(translated_value))\n    ```", "```py\n    class MultilingualTextField(models.TextField):\n\n      def __init__(self, verbose_name=None, **kwargs):\n\n        self._blank = kwargs.get(\"blank\", False)\n        self._editable = kwargs.get(\"editable\", True)\n\n        super(MultilingualTextField, self).\\\n          __init__(verbose_name, **kwargs)\n\n        def contribute_to_class(self, cls, name, virtual_only=False):\n          # generate language specific fields dynamically\n          if not cls._meta.abstract:\n            for lang_code, lang_name in settings.LANGUAGES:\n              if lang_code == settings.LANGUAGE_CODE:\n                _blank = self._blank\n              else:\n                _blank = True\n\n                localized_field = models.TextField(\n                  string_concat(self.verbose_name, \n                    \" (%s)\" % lang_code),\n                  name=self.name,\n                  primary_key=self.primary_key,\n                  max_length=self.max_length,\n                  unique=self.unique,\n                  blank=_blank,\n                  null=False,\n                  # we ignore the null argument!\n                  db_index=self.db_index,\n                  rel=self.rel,\n                  default=self.default or \"\",\n                  editable=self._editable,\n                  serialize=self.serialize,\n                  choices=self.choices,\n                  help_text=self.help_text,\n                  db_column=None,\n                  db_tablespace=self.db_tablespace\n                )\n                localized_field.contribute_to_class(\n                  cls,\n                    \"%s_%s\" % (name, lang_code),\n                )\n\n            def translated_value(self):\n              language = get_language()\n              val = self.__dict__[\"%s_%s\" % (name, language)]\n              if not val:\n                val = self.__dict__[\"%s_%s\" % \\\n                  (name, settings.LANGUAGE_CODE)]\n                return val\n\n            setattr(cls, name, property(translated_value))\n    ```", "```py\n    # myproject/settings.py\n    # -*- coding: UTF-8 -*-\n    # …\n    LANGUAGE_CODE = \"en\"\n\n    LANGUAGES = (\n        (\"en\", \"English\"),\n        (\"de\", \"Deutsch\"),\n        (\"fr\", \"Français\"),\n        (\"lt\", \"Lietuvi kalba\"),\n    )\n    ```", "```py\n    # demo_app/models.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from django.utils.encoding import \\\n        python_2_unicode_compatible\n\n    from utils.fields import MultilingualCharField\n    from utils.fields import MultilingualTextField\n\n    @python_2_unicode_compatible\n    class Idea(models.Model):\n     title = MultilingualCharField(\n     _(\"Title\"),\n     max_length=200,\n     )\n     description = MultilingualTextField(\n     _(\"Description\"),\n     blank=True,\n     )\n\n        class Meta:\n            verbose_name = _(\"Idea\")\n            verbose_name_plural = _(\"Ideas\")\n\n        def __str__(self):\n            return self.title\n    ```", "```py\nclass Idea(models.Model):\n  title_en = models.CharField(\n    _(\"Title (en)\"),\n    max_length=200,\n  )\n  title_de = models.CharField(\n    _(\"Title (de)\"),\n    max_length=200,\n    blank=True,\n  )\n  title_fr = models.CharField(\n    _(\"Title (fr)\"),\n    max_length=200,\n    blank=True,\n  )\n  title_lt = models.CharField(\n    _(\"Title (lt)\"),\n    max_length=200,\n    blank=True,\n  )\n  description_en = models.TextField(\n    _(\"Description (en)\"),\n    blank=True,\n  )\n  description_de = models.TextField(\n    _(\"Description (de)\"),\n    blank=True,\n  )\n  description_fr = models.TextField(\n    _(\"Description (fr)\"),\n    blank=True,\n  )\n  description_lt = models.TextField(\n    _(\"Description (lt)\"),\n    blank=True,\n  )\n```", "```py\n<h1>{{ idea.title }}</h1>\n<div>{{ idea.description|urlize|linebreaks }}</div>\n```", "```py\nqs = Idea.objects.order_by(\"title_%s\" % request.LANGUAGE_CODE)\n```", "```py\n    (myproject_env)$ python manage.py makemigrations demo_app\n\n    ```", "```py\n    (myproject_env)$ python manage.py migrate\n\n    ```", "```py\n    (myproject_env)$ python manage.py migrate demo_app\n\n    ```", "```py\n    (myproject_env)$ python manage.py makemigrations --name \\\n    subtitle_added demo_app\n\n    ```", "```py\n    (myproject_env)$ python manage.py makemigrations --empty \\ --name populate_subtitle demo_app\n\n    ```", "```py\n    (myproject_env)$ python manage.py migrate --list\n\n    ```", "```py\n    (myproject_env)$ python manage.py migrate --list demo_app\n\n    ```", "```py\n(myproject_env)$ python manage.py migrate demo_app 0002\n\n```", "```py\n(myproject_env)$ python manage.py migrate demo_app zero\n\n```", "```py\n    (myproject_env)$ python manage.py migrate\n\n    ```", "```py\n    (my_project)$ python manage.py makemigrations\n\n    ```", "```py\n    (my_project)$ python manage.py migrate --fake-initial\n\n    ```", "```py\n    (my_project)$ python manage.py migrate --fake-initial demo_app\n\n    ```", "```py\n# demo_app/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import python_2_unicode_compatible\n\n@python_2_unicode_compatible\nclass Category(models.Model):\n    title = models.CharField(_(\"Title\"), max_length=200)\n\n    def __str__(self):\n        return self.title\n\n@python_2_unicode_compatible\nclass Idea(models.Model):\n    title = model.CharField(_(\"Title\"), max_length=200)\n category = models.ForeignKey(Category,\n verbose_name=_(\"Category\"), null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n```", "```py\n(myproject_env)$ python manage.py makemigrations demo_app\n(myproject_env)$ python manage.py migrate demo_app\n\n```", "```py\n    # demo_app/models.py\n    @python_2_unicode_compatible\n    class Idea(models.Model):\n        title = model.CharField(_(\"Title\"), max_length=200)\n        category = models.ForeignKey(Category,\n            verbose_name=_(\"Category\"),\n            null=True,\n            blank=True,\n        )\n     categories = models.ManyToManyField(Category, \n     verbose_name=_(\"Categories\"),\n     blank=True, \n     related_name=\"ideas\",\n     )\n\n    ```", "```py\n    (myproject_env)$ python manage.py makemigrations demo_app \\\n    --name categories_added\n    (myproject_env)$ python manage.py migrate demo_app\n\n    ```", "```py\n    (myproject_env)$ python manage.py makemigrations --empty \\\n    --name copy_categories demo_app\n\n    ```", "```py\n    # demo_app/migrations/0003_copy_categories.py\n    # -*- coding: utf-8 -*-\n    from __future__ import unicode_literals\n    from django.db import models, migrations\n\n    def copy_categories(apps, schema_editor):\n        Idea = apps.get_model(\"demo_app\", \"Idea\")\n        for idea in Idea.objects.all():\n            if idea.category:\n                idea.categories.add(idea.category)\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('demo_app', '0002_categories_added'),\n        ]\n\n        operations = [\n            migrations.RunPython(copy_categories),\n        ]\n    ```", "```py\n    (myproject_env)$ python manage.py migrate demo_app\n\n    ```", "```py\n    # demo_app/models.py\n    @python_2_unicode_compatible\n    class Idea(models.Model):\n        title = model.CharField(_(\"Title\"), max_length=200)\n        categories = models.ManyToManyField(Category,\n            verbose_name=_(\"Categories\"),\n            blank=True,\n            related_name=\"ideas\",\n        )\n    ```", "```py\n    (myproject_env)$ python manage.py schemamigration \\\n    --name delete_category demo_app\n    (myproject_env)$ python manage.py migrate demo_app\n\n    ```"]