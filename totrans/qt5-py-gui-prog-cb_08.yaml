- en: Chapter 8. Internationalization and Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will internationalize and test our Python GUI covering
    the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying widget text in different languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the entire GUI language all at once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Localizing the GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the GUI for internationalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to design a GUI in an agile fashion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we need to test the GUI code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting debug watches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring different debug output levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating self-testing code using Python's __main__ section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating robust GUIs using unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write unit tests using the Eclipse PyDev IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will internationalize our GUI by displaying text on labels,
    buttons, tabs, and other widgets, in different languages.
  prefs: []
  type: TYPE_NORMAL
- en: We will start simply and then explore how we can prepare our GUI for internationalization
    at the design level.
  prefs: []
  type: TYPE_NORMAL
- en: We will also localize the GUI, which is slightly different from internationalization.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As these words are long, they have been abbreviated to use the first character
    of the word, followed by the total number of characters in between the first and
    last character, followed by the last character of the word.
  prefs: []
  type: TYPE_NORMAL
- en: So, internationalization becomes I18N and localization becomes L10N.
  prefs: []
  type: TYPE_NORMAL
- en: We will also test our GUI code and write unit tests and explore the value unit
    tests can provide in our development efforts which will lead us to the best practice
    of *refactoring* our code.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying widget text in different languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to internationalize text strings in Python is by moving them
    into a separate Python module and then selecting the language to be displayed
    in our GUI by passing in a parameter to this module.
  prefs: []
  type: TYPE_NORMAL
- en: While this approach is not highly recommended, according to online search results,
    depending on the specific requirements of the application you are developing,
    this approach might still be the most pragmatic and fastest to implement.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will reuse the Python GUI we created earlier. We have commented out one line
    of Python code that creates the MySQL tab because we do not talk to a MySQL database
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will start to I18N our GUI by changing the Windows title
    from English to another language.
  prefs: []
  type: TYPE_NORMAL
- en: As the name "GUI" is the same in other languages, we will first expand the name
    that enables us to see the visual effects of our changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change our previous line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code change results in the following title for our GUI program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we will use English and German to exemplify the principle of
    internationalizing our Python GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Hard-coding strings into code is never too good an idea, so the first step we
    can do to improve our code is to separate all the strings that are visible in
    our GUI into a Python module of their own. This is the beginning of internationalizing
    the visible aspects of our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While we are into I18N, we will do this very positive refactoring and the language
    translation all in one step.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new Python module and name it `Resources.py`. Let's next move
    the English string of our GUI title into this module and then import this module
    into our GUI code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are separating the GUI from the languages it displays, which is an OOP design
    principle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our new Python module, containing internationalized strings, now looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We import this new Python module into our main Python GUI code, and then use
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Depending on which language we pass into the I18N class, our GUI will be displayed
    in that language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the preceding code gives us the following internationalized result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are breaking out the hard-coded strings that are part of our GUI into their
    own separate modules. We do this by creating a class, and within the class's `__init__()`
    method, we select which language our GUI will display, depending on the passed
    in language argument.
  prefs: []
  type: TYPE_NORMAL
- en: This works.
  prefs: []
  type: TYPE_NORMAL
- en: We can further modularize our code by separating the internationalized strings
    into separate files, potentially in XML or another format. We could also read
    them in from a MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a "Separation of Concerns" coding approach, which is at the heart of
    OOP programming.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the entire GUI language all at once
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will change the entire GUI display names all at once by refactoring
    all the previously hard-coded English strings into a separate Python module and
    then internationalizing those strings.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows that it is a good design principle to avoid hard-coding any
    strings that our GUI displays but to separate the GUI code from the text that
    the GUI displays.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Designing our GUI in a modular way makes internationalizing it much easier.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue to use the GUI from the previous recipe. In that recipe, we
    had already internationalized the title of the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to internationalize the text being displayed in all of our GUI widgets,
    we have to move all hard-coded strings into a separate Python module, and this
    is what we do next.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, strings of words that our GUI displayed were scattered all over
    our Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Here is what our GUI looked like without I18N.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Every single string of every widget, including the title of our GUI, the tab
    control names, and so on, were all hard-coded and intermixed with the code that
    creates the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is a good idea to think about how we can best internationalize our GUI at
    the design phase of our GUI software development process.
  prefs: []
  type: TYPE_NORMAL
- en: The following is an excerpt of what our code looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, we are internationalizing all strings displayed in our GUI widgets.
    We are not internationalizing the text *entered* into our GUI, because this depends
    on the local settings on your PC.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code for the English internationalized strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In our Python GUI module, all previously hard-coded strings are now replaced
    by an instance of our new I18N class, which resides in the `Resources.py` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example from our refactored `GUI.py` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note how all of the previously hard-coded English strings have been replaced
    by calls to the instance of our new I18N class.
  prefs: []
  type: TYPE_NORMAL
- en: An example is `self.win.title(self.i18n.title)`.
  prefs: []
  type: TYPE_NORMAL
- en: What this gives us is the ability to internationalize our GUI. We simply have
    to use the same variable names and combine them by passing in a parameter to select
    the language we wish to display.
  prefs: []
  type: TYPE_NORMAL
- en: We could change languages on the fly as part of the GUI as well, or we could
    read the local PC settings and decide which language our GUI text should display
    according to those settings.
  prefs: []
  type: TYPE_NORMAL
- en: We can now implement the translation to German by simply filling in the variable
    names with the corresponding words.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In our GUI code, we can now change the entire GUI display language in one line
    of Python code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code creates the following internationalized GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to internationalize our GUI, we refactored hard-coded strings into
    a separate module and then used the same class members to internationalize our
    GUI by passing in a string as the initializer of our I18N class, effectively controlling
    the language our GUI displays.
  prefs: []
  type: TYPE_NORMAL
- en: Localizing the GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the first step of internationalizing our GUI, the next step is to localize
    it. Why would we wish to do this?
  prefs: []
  type: TYPE_NORMAL
- en: Well, here in the United States of America, we are all cowboys and we live in
    different time zones.
  prefs: []
  type: TYPE_NORMAL
- en: So while we are "internationalized" to the USA, our horses do wake up in different
    time zones (and do expect to be fed according to their own inner horse time zone
    schedule).
  prefs: []
  type: TYPE_NORMAL
- en: This is where localization comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are extending the GUI we developed in the previous recipe by localizing it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by first installing the Python pytz time zone module, using pip. We
    type the following command in a command processor prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this book, we are using Python 3.4, which comes with the `pip` module built-in.
    If you are using an older version of Python, then you might have to install the
    `pip` module first.
  prefs: []
  type: TYPE_NORMAL
- en: When successful, we get the following result.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The screenshot shows that the command downloaded the `.whl` format. If you have
    not done so, you might have to install the Python `wheel` module first.
  prefs: []
  type: TYPE_NORMAL
- en: This installed the Python `pytz` module into the `site-packages` folder, so
    now we can import this module from our Python GUI code.
  prefs: []
  type: TYPE_NORMAL
- en: We can list all the existing time zones by running the following code, which
    will display the time zones in our `ScrolledText` widget. First we add a new `Button`
    widget to our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Clicking our new `Button` widget results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After we install the tzlocal Python module, we can print our current locale
    by running the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We have internationalized the strings of our two new action `Buttons` in `Resources.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'English version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'German version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Clicking our new button now tells us which time zone we are in (hey, we didn't
    know that, didn't we…).
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can now translate our local time to a different time zone. Let's use USA
    Eastern Standard Time as an example.
  prefs: []
  type: TYPE_NORMAL
- en: We display our current local time in our unused Label 2 by improving our existing
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: When we run the code, our internationalized Label 2 (displayed as `Etikette
    2` in German) will display the current local time.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can now change our local time to US EST by first converting it to **Coordinated
    Universal Time** (**UTC**) and then applying the `timezone` function from the
    imported `pytz` module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Clicking the button now renamed as New York results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our Label 2 got updated with the current time in New York and we are printing
    the UTC times of the cities Los Angeles and New York with their respective time
    zone conversions, relative to UTC time to the Eclipse console, using a US date
    formatting string.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: UTC never observes Daylight Saving Time. During **Eastern Daylight Time** (**EDT**)
    UTC is four hours ahead and during **Standard Time** (**EST**) it is five hours
    ahead of the local time.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to localize date and time information, we first need to convert our
    local time to UTC time. We then apply `timezone` information and use the `astimezone`
    function from the `pytz` Python time zone module to convert to any time zone in
    the entire world!
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we have converted the local time of the USA west coast to UTC
    and then displayed the USA east coast time in Label 2 of our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the GUI for internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will prepare our GUI for internationalization by realizing
    that not all is as easy as could be expected when translating English into foreign
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: We still have one problem to solve and that is how to properly display non-English
    Unicode characters from foreign languages.
  prefs: []
  type: TYPE_NORMAL
- en: One might expect that displaying the German ä, ö, and ü Unicode umlaut characters
    would be handled by Python 3 automatically, but this is not the case.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue to use the Python GUI we developed in recent chapters. First,
    we will change the default language to German in the `GUI.py` initialization code.
  prefs: []
  type: TYPE_NORMAL
- en: We do this by uncommenting the line `self.i18n = I18N('de')`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we change the word `Ueber` to the correct German `Űber` using the umlaut
    character, the Eclipse PyDev plugin is not too happy.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We get an error message, which is a little bit confusing, because when we run
    the same line of code from within the Eclipse PyDev Console, we get the expected
    result.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we ask for the Python default encoding, we get the expected result, which
    is UTF-8.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can, of course, always resort to the direct representation of Unicode.
  prefs: []
  type: TYPE_NORMAL
- en: Using Windows' built-in character map, we can find the Unicode representation
    of the umlaut character, which is U+00DC for the capital U with an umlaut.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While this workaround is truly ugly, it does the trick. Instead of typing in
    the literal character Ü, we can pass in the Unicode of \u00DC to get this character
    correctly displayed in our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also just accept the change in the default encoding from Cp1252 to UTF-8
    using PyDev with Eclipse, but we might not always get the prompt to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we might see the following error message displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The way to solve this problem is to change the PyDev project's **Text file encoding**
    property to UTF-8.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After changing the PyDev default encoding, we now can display those German umlaut
    characters. We also updated the title to use the correct German ä character.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internationalization and working with foreign language Unicode characters is
    often not as straightforward as we would wish. Sometimes, we have to find workarounds
    and expressing Unicode characters via Python by using the direct representation
    by prepending `\u` can do the trick.
  prefs: []
  type: TYPE_NORMAL
- en: At other times, we just have to find the settings of our development environment
    to adjust.
  prefs: []
  type: TYPE_NORMAL
- en: How to design a GUI in an agile fashion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The modern agile software development approach to design and coding came out
    of the lessons learned by software professionals. This method applies to a GUI
    as much as to any other code. One of the main keys of agile software development
    is the continuously applied process of refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: One practical example of how refactoring our code can help us in our software
    development work is by first implementing some simple functionality using functions.
  prefs: []
  type: TYPE_NORMAL
- en: As our code grows in complexity, we might want to refactor our functions into
    methods of a class. This approach would enable us to remove global variables and
    also be more flexible about where inside the class we place methods.
  prefs: []
  type: TYPE_NORMAL
- en: While the functionality of our code has not changed, the structure has.
  prefs: []
  type: TYPE_NORMAL
- en: In this process, we code, test, refactor, and then test again. We do this in
    short cycles and often start with the minimum code required to get some functionality
    to work.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Test-driven software development is one particular style of the agile development
    methodology.
  prefs: []
  type: TYPE_NORMAL
- en: While our GUI is working nicely, our main `GUI.py` code has been ever increasing
    in complexity and it has started to get a little bit harder to maintain an overview
    of our code.
  prefs: []
  type: TYPE_NORMAL
- en: This means we need to refactor our code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will refactor the GUI we created in previous chapters. We will use the English
    version of the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already broken out all names our GUI displays when we internationalized
    it in the previous recipe. That was an excellent start to refactoring our code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refactoring is the process of improving the structure, readability, and maintainability
    of existing code. We are not adding new functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapters and recipes, we have been extending our GUI in a "Top-to-bottom"
    waterfall development approach, adding `import` to the top and code towards the
    bottom of the existing code.
  prefs: []
  type: TYPE_NORMAL
- en: While this was useful when looking at the code it now looks a little bit messy
    and we can improve this to help our future development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us first clean up our `import` statement section, which currently looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: By simply grouping related imports, we can reduce the number of lines of code,
    which improves the readability of our imports, making them appear less overwhelming.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We can further refactor our code by breaking out the callback methods into their
    own modules. This improves readability by separating the different import statements
    into the modules they are required in.
  prefs: []
  type: TYPE_NORMAL
- en: Let us rename our `GUI.py` as `GUI_Refactored.py` and create a new module, which
    we name `Callbacks_Refactored.py`.
  prefs: []
  type: TYPE_NORMAL
- en: This gives us this new architecture.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note how we are passing in an instance of our own GUI class (`self`) when calling
    the `Callbacks` initializer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our new `Callbacks` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the initializer of our new class, the passed-in GUI instance is saved under
    the name `self.oop` and used throughout this new Python class module.
  prefs: []
  type: TYPE_NORMAL
- en: Running the refactored GUI code still works. We have only increased readability
    and reduced the complexity of our code in preparation for further development
    work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have first improved the readability of our code by grouping related import
    statements. We next broke out the callback methods into their own class and module
    in order to further reduce the complexity of our code.
  prefs: []
  type: TYPE_NORMAL
- en: We had already taken the same OOP approach by having the `ToolTip` class reside
    in its own module and by internationalizing all GUI strings in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we went one step further in refactoring by passing our own instance
    into the callback method's class our GUI relies upon.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we better understand the value of a modular approach to software development,
    we will most likely start with this approach in our future software designs.
  prefs: []
  type: TYPE_NORMAL
- en: Do we need to test the GUI code?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing our software is an important activity during the coding phase, as well
    as when releasing service packs or bug fixes.
  prefs: []
  type: TYPE_NORMAL
- en: There are different levels of testing. The first level is developer testing,
    which often starts with the compiler or interpreter not letting us run our buggy
    code forcing us to test small parts of our code on the level of individual methods.
  prefs: []
  type: TYPE_NORMAL
- en: This is the first level of defense.
  prefs: []
  type: TYPE_NORMAL
- en: A second level of coding defensively is when our source code control system
    tells us about some conflicts to be resolved and does not let us check in our
    modified code.
  prefs: []
  type: TYPE_NORMAL
- en: This is very useful and absolutely necessary when we work professionally in
    a team of developers. The source code control system is our friend and points
    out changes that have been committed to a particular branch or top-of-tree either
    by ourselves or by our other developers, and tells us that our local version of
    the code is both outdated and has some conflicts that need to be resolved before
    we can submit our code into the repository.
  prefs: []
  type: TYPE_NORMAL
- en: This part assumes you use a source control system to manage and store your code.
    Examples include git, mercurial, svn, and several others. Git is a very popular
    source control and it is free for a single user.
  prefs: []
  type: TYPE_NORMAL
- en: A third level is the level of APIs where we encapsulate potential future changes
    to our code by only allowing interactions with our code via published interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please refer to "Program to an Interface, never an Implementation", *Design
    Patterns*, Page 17.
  prefs: []
  type: TYPE_NORMAL
- en: Another level of testing is integration testing, when half of the bridge we
    finally built meets the other half that the other development teams created and
    the two don't meet at the same height (say, one half ended up two meters or yards
    higher than the other half…).
  prefs: []
  type: TYPE_NORMAL
- en: Then, there is end user testing. While we built what they specified, it is not
    really what they wanted.
  prefs: []
  type: TYPE_NORMAL
- en: Oh well…I guess all of the preceding examples are valid reasons why we need
    to test our code both in the design and implementation stages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will test the GUI we have created in recent recipes and chapters. We will
    also show some simple examples of what can go wrong and why we need to keep testing
    our code and code we do call via APIs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While many experienced developers grew up sprinkling `printf()` statements all
    over their code while debugging, many developers in the 21st century are accustomed
    to modern IDE development environments that efficiently speed up development time.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we are using the PyDev Python plug-in for the Eclipse IDE.
  prefs: []
  type: TYPE_NORMAL
- en: If you are just starting using an IDE like Eclipse with the PyDev plug-in, it
    might be a little bit overwhelming at first. The Python IDLE tool that ships with
    Python 3 also has a simpler debugger and you might wish to explore that first.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever something goes wrong in our code, we have to debug it. The first step
    in doing this is to set break points and then step through our code, line by line,
    or method by method.
  prefs: []
  type: TYPE_NORMAL
- en: Stepping in and out of our code is a daily activity until the code runs smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: In Python GUI programming, one of the first things that can go wrong is missing
    out on importing the required modules or importing existing modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are trying to create an instance of the tkinter class but things don't work
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Well, we simply forgot to import the module and we can fix this by adding a
    line of Python code above our class creation, where the import statements live.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This is an example in which our development environment does the testing for
    us. We just have to do the debugging and code fixing.
  prefs: []
  type: TYPE_NORMAL
- en: Another example more closely related to developer testing is when we code conditionals
    and, during our regular development, do not exercise all branches of logic.
  prefs: []
  type: TYPE_NORMAL
- en: Using an example from the previous chapter, let's say we click on the **Get
    Quotes** button and this works, but we never clicked on the **Mody Quote** button.
    The first button click creates the desired result, but the second throws an exception
    (because we had not yet implemented this code and probably forgot all about it).
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking the **Mody Quote** button creates the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another potential area of bugs is when a function or method suddenly no longer
    returns the expected result. Let's say we are calling the following function,
    which returns the expected result.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, someone makes a mistake, and we no longer get the previous results.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Instead of multiplying, we are raising by the power of the passed in number,
    and the result is no longer what it used to be.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In software testing, this sort of bug is called regression.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we emphasized the importance of software testing during several
    phases of the software development life cycle by showing several examples of where
    code can go wrong and introduce software defects (aka bugs).
  prefs: []
  type: TYPE_NORMAL
- en: Setting debug watches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In modern **Integrated Development Environments** (**IDEs**) like the PyDev
    plugin in Eclipse or another IDE such as NetBeans, we can set debug watches to
    monitor the state of our GUI during the execution of our code.
  prefs: []
  type: TYPE_NORMAL
- en: This is very similar to the Microsoft IDEs of Visual Studio and the more recent
    versions of Visual Studio.NET.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting debug watches is a very convenient way to help our development efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will reuse the Python GUI we developed in earlier recipes.
    We are stepping through the code we previously developed and setting debug watches.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While this recipe applies to the PyDev plugin in the Java-based Eclipse IDE,
    its principles also apply to many modern IDEs.
  prefs: []
  type: TYPE_NORMAL
- en: The first position where we might wish to place a breakpoint is at the place
    where we make our GUI visible by calling the tkinter main event loop.
  prefs: []
  type: TYPE_NORMAL
- en: The green balloon symbol on the left is a breakpoint in PyDev/Eclipse. When
    we execute our code in debug mode, once the execution reaches the breakpoint,
    the execution of the code will be halted. At this point, we can see the values
    of all variables that are currently in scope. We can also type expressions into
    one of the debugger windows which will execute them, showing us the results. If
    the result is what we want, we might decide to change our code using what we have
    just learned.
  prefs: []
  type: TYPE_NORMAL
- en: We normally step through the code by either clicking an icon in the toolbar
    of our IDE or by using a keyboard shortcut (like pressing *F5* to step into code,
    *F6* to step over, and *F7* to step out of the current method).
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Placing the breakpoint where we did and then stepping into this code turns out
    to be a problem because we end up in some low-level tkinter code we really do
    not wish to debug right now. We get out of the low-level tkinter code by clicking
    the Step-Out toolbar icon (which is the third yellow arrow on the right below
    the project menu) or by pressing *F7* (assuming we are using PyDev in Eclipse).
  prefs: []
  type: TYPE_NORMAL
- en: We started the debugging session by clicking the bug toolbar icon towards the
    right of the screenshot. If we execute without debugging, we click the green circle
    with the white triangle inside it, which is the icon to the right of the bug icon.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A better idea is to place our breakpoint closer to our own code in order to
    watch the values of some of our own Python variables.
  prefs: []
  type: TYPE_NORMAL
- en: In the event-driven world of modern GUIs, we have to place our breakpoints at
    code that gets invoked during events, for example button clicks.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, one of our main functionalities resides in a button click event.
    When we click the button labeled **New York**, we create an event that then results
    in something happening in our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Let's place a breakpoint at the **New York** button callback method, which we
    named `getDateTime()`.
  prefs: []
  type: TYPE_NORMAL
- en: When we now run a debug session, we will stop at the breakpoint and then we
    can enable watches of variables that are in scope.
  prefs: []
  type: TYPE_NORMAL
- en: Using PyDev in Eclipse, we can right-click a variable and then select the watch
    command from the pop-up menu. The name of the variable, its type, and current
    value will be displayed in the expressions debug window shown in the next screenshot.
    We can also directly type into the expressions window.
  prefs: []
  type: TYPE_NORMAL
- en: The variables we are watching are not limited to simple data types. We can watch
    class instances, lists, dictionaries, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: When watching these more complex objects, we can expand them in the expressions
    window and drill down into all of the values of the class instances, dictionaries,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We do this by clicking on the triangle to the left of our watched variable that
    appears left-most under the **Name** column next to each variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While we are printing out the values of the different time zone locations, in
    the long term, it is much more convenient and efficient to set debug watches.
    We do not have to clutter our code with old-fashioned C-style `printf()` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in learning how to install Eclipse with the PyDev plugin
    for Python, there is a great tutorial that will get you started installing all
    the necessary free software and then introduce you to PyDev within Eclipse by
    creating a simple, working Python program. [http://www.vogella.com/tutorials/Python/article.html](http://www.vogella.com/tutorials/Python/article.html)
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use modern Integrated Development Environments (IDEs) in the 21st century
    that are freely available to help us to create solid code.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe showed how to set debug watches, which is a fundamental tool in
    every developer's skill set. Stepping through our own code even when not hunting
    down bugs ensures that we understand our code and can lead to improving our code
    via refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: The following is a quote from the first programming book I read, *Thinking in
    Java*, written by Bruce Eckel.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Resist the urge to hurry, it will only slow you down."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Bruce Eckel* |'
  prefs: []
  type: TYPE_TB
- en: Almost two decades later, this advice has passed the test of time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Debug watches help us to create solid code and are not a waste of time.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring different debug output levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will configure different debug levels that we can select
    and change at runtime. This allows us to control how much we want to drill down
    into our code when debugging our code.
  prefs: []
  type: TYPE_NORMAL
- en: We will create two new Python classes and place both of them into the same module.
  prefs: []
  type: TYPE_NORMAL
- en: We will use four different logging levels and we will write our debugging output
    to a log file we will create. If the log folder does not exist, we will create
    it automatically as well.
  prefs: []
  type: TYPE_NORMAL
- en: The name of the log file is the name of the executing script which is our refactored
    `GUI.py`. We can also choose other names for our log files by passing in the full
    path to the initializer of our logger class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue to use our refactored `GUI.py` code from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we create a new Python module into which we place two new `classes`.
    The first `class` is very simple and defines the logging levels. This is basically
    an `enumeration`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The second `class` creates a log file by using the passed in full path of the
    file name and places this into a `logs` folder. On first run, the `logs` folder
    might not exist so the code automatically creates the folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In order to write to our log file, we use the `writeToLog()` method. Inside
    the method, the first thing we do is check if the message has a logging level
    higher than the limit we set our desired logging output to. If the message has
    a lower level, we discard it and immediately return from the method.
  prefs: []
  type: TYPE_NORMAL
- en: If the message has a logging level that we want to display, we then check if
    it starts with a newline character, and if it does, we discard the newline by
    slicing the method starting at index 1, using Python's slice operator (`msg =
    msg[1:]`).
  prefs: []
  type: TYPE_NORMAL
- en: We then write one line to our log file consisting of the current date timestamp,
    two tab spaces, our message, and ending in a newline character.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We can now import our new Python module, and inside the `__init__` section of
    our GUI code, we can create an instance of the `Logger` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We are retrieving the full path to our running GUI script via `path.realpath(__file__)`
    and passing this into the initializer of the `Logger` class. If the `logs` folder
    does not exist, it will automatically get created by our Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This creates the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows that we created an instance of our new `Logger`
    class and the screenshot below shows that both the `logs` folder as well as the
    log were created.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we open up the log, we can see that the current date and time as well as
    a default string have been written into the log.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created our own logging class. While Python ships with a
    Logging module, it is very easy to create our own, which gives us absolute control
    over our logging format. This is very useful when we combine our own logging output
    with MS Excel or the Matplotlib we explored in previous recipes in a previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we will use Python's built-in `__main__` functionality to
    use the four different logging levels we have just created.
  prefs: []
  type: TYPE_NORMAL
- en: Creating self-testing code using Python's __main__ section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python comes with a very nice feature that enables each module to self-test.
    Making use of this feature is a great way of making sure that changes to our code
    do not break existing code and, additionally, the `__main__` self-testing section
    can serve as documentation for how each module works.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After a few months or years, we sometimes forget what our code is doing, so
    having an explanation written in the code itself is indeed a great help.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good idea to always add a self-testing section to every Python module,
    when possible. It is sometimes not possible, but, in most modules, it is possible
    to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will extend the previous recipe, so, in order to understand what the code
    in this recipe is doing, we have to first read and understand the code of the
    previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will explore the power of the Python `__main__` self-testing section
    by adding this self-testing section to our `Resources.py` module. Whenever we
    run a module that has this self-testing section located at the bottom of the module,
    when the module is executed by itself, this code will run.
  prefs: []
  type: TYPE_NORMAL
- en: When the module is imported and used from other modules, the code in the `__main__`
    self-testing section will not be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the code that is also shown in the screenshot that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: After adding the self-testing section, we now can run this module by itself
    and it creates useful output, while, at the same time, showing us that our code
    works as intended.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are first passing in English as the language to be displayed in our GUI,
    and then we pass in German as the language that our GUI will display.
  prefs: []
  type: TYPE_NORMAL
- en: We are printing out the title of our GUI to show that our Python module works
    as we intended it to work.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step is to use our logging capabilities which we created in the previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We do this by first adding a `__main__` self-testing section to our refactored
    `GUI.py` module and we then verify that we created an instance of our `Logger`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We next write to our log file by using the command shown. We have designed our
    logging level to default to log every message, which is the DEBUG level and, because
    of this, we do not have to change anything. We just pass in the message to be
    logged to the `writeToLog` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This gets written to our log file, as can be seen in the following screenshot
    of the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can control the logging by adding logging levels to our logging statements
    and set the level we wish to output. Let's add this capability to our New York
    button callback method in the `Callbacks.py` module which is the `getDateTime`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: We change the previous `print` statements to `log` statements using different
    debug levels.
  prefs: []
  type: TYPE_NORMAL
- en: In the `GUI.py`, we import both new classes from our logger module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Next, we create local instances of those classes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As we are passing in an instance of the GUI class to the `Callbacks.py` initializer,
    we can use logging level constraints according to the `LogLevel` class we have
    created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: When we now click our New York button, depending upon the selected logging level,
    we get different output written to our log file. The default logging level is
    `DEBUG`, which means everything gets written to our log.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we change the logging level, we control what gets written to our log. We
    do this by calling the `setLoggingLevel` method of the `Logger` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the `__main__` section of our GUI, we change the logging level to `MINIMUM`,
    which results in reduced output written to our log file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now, our log file no longer shows the `Test Message` and only shows messages
    that meet the set logging level.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we are making good use of Python's built-in `__main__` self-testing
    section. We introduced our own logging file and, at the same time, how to create
    different logging levels.
  prefs: []
  type: TYPE_NORMAL
- en: By doing this, we have full control over what gets written to our log files.
  prefs: []
  type: TYPE_NORMAL
- en: Creating robust GUIs using unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python comes with a built-in unit testing framework and, in this recipe, we
    will start to use this framework to test our Python GUI code.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start to write unit tests, we want to design our testing strategy.
    We could easily intermix the unit tests with the code they are testing, but a
    better strategy is to separate the application code from the unit test code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PyUnit has been designed according to the principles of all the other xUnit
    testing Frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will test the internationalized GUI we created earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to use Python's built-in unit testing framework, we have to import
    the Python `unittest` module. Let's create a new module and name it `UnitTests.py`.
  prefs: []
  type: TYPE_NORMAL
- en: We first import the `unittest` module, then we create our own class and within
    this class we inherit and extend the `unittest.TestCase` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest code to do it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The code isn't doing much yet, but when we run it, we do not get any errors,
    which is a good sign.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We actually do get an output written to the console stating that we successfully
    ran zero tests…
  prefs: []
  type: TYPE_NORMAL
- en: Hmm, that output is a bit misleading as all we have done so far is create a
    class that contains no actual testing methods.
  prefs: []
  type: TYPE_NORMAL
- en: We add testing methods that do the actual unit testing by following the default
    naming for all test methods to start with the word "test". This is an option that
    can be changed but it seems to be much easier and clearer to stick to this naming
    convention.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a test method that will test the title of our GUI. This will verify
    that, by passing in the expected arguments, we get the expected result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We are importing our `I18N` class from our `Resources.py` module, passing in
    English as the language to be displayed in our GUI. As this is our first unit
    test, we are printing out the Title result as well, just to make sure we know
    what we are getting back. We next use the `unittest assertEqual` method to verify
    that our title is correct.
  prefs: []
  type: TYPE_NORMAL
- en: Running this code gives us an **OK**, which means that the unit test passed.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The unit test runs and succeeds, which is indicated by one dot and the word
    "OK". If it had failed or gotten an error we would not have got the dot but an
    "F" or "E" as the output.
  prefs: []
  type: TYPE_NORMAL
- en: We can now do the same automated unit testing check by verifying the title for
    the German version of our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: We simply copy, paste, and modify our code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are testing our internationalized GUI title in two languages and getting
    the following result when running the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We ran two unit tests but, instead of an OK, we got a failure. What happened?
  prefs: []
  type: TYPE_NORMAL
- en: Our `assertion` failed for the German version of our GUI…
  prefs: []
  type: TYPE_NORMAL
- en: While debugging our code, it turns out that in the copy, paste, and modify approach
    of our unit test code, we forgot to pass in German as the language. We can easily
    fix this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: When we rerun our unit tests, we again get the expected result of all tests
    passing.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unit testing code is code and can have bugs too.
  prefs: []
  type: TYPE_NORMAL
- en: While the purpose of writing unit tests is really to test our application code,
    we have to make sure that our tests are written correctly. One approach from the
    **Test-Driven-Development** (**TDD**) methodology might help us.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In TDD, we develop the unit tests before we actually write the application code.
    Now, if a test passes for a method that does not even exist, something is wrong.
    The next step is to create the non-existing method and make sure it will fail.
    After that, we can write the minimum amount of code necessary to make the unit
    test pass.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we have begun to test our Python GUI, writing unit tests in
    Python. We have seen that Python unit test code is just code and can contain mistakes
    that need to be corrected. In the next recipe, we will extend this recipe's code
    and use the graphical unit test runner that comes with the PyDev plugin for the
    Eclipse IDE.
  prefs: []
  type: TYPE_NORMAL
- en: How to write unit tests using the Eclipse PyDev IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we started to use Python's unit testing capabilities,
    and in this recipe, we will ensure the quality of our GUI code by further using
    this capability.
  prefs: []
  type: TYPE_NORMAL
- en: We will unit test our GUI in order to make sure that the internationalized strings
    our GUI displays are as expected.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous recipe, we encountered some bugs in our unit testing code but,
    typically, our unit tests will find regression bugs that are caused by modifying
    existing application code, not the unit test code. Once we have verified that
    our unit testing code is correct, we do not usually change it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our unit tests also serve as documentation of what we expect our code to do.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Python's unit tests are executed with a textural unit test runner
    and we can run this in the PyDev plug-in from within the Eclipse IDE. We can also
    run the very same unit tests from a console window.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the text runner in this recipe, we will explore PyDev's graphical
    unit test feature that can be used from within the Eclipse IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are extending the previous recipe, in which we began to use Python unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Python unit testing framework comes with what are called fixtures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following URLs for a description of what a test fixture is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3.4/library/unittest.html](https://docs.python.org/3.4/library/unittest.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Test_fixture](https://en.wikipedia.org/wiki/Test_fixture)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.boost.org/doc/libs/1_51_0/libs/test/doc/html/utf/user-guide/fixture.html](http://www.boost.org/doc/libs/1_51_0/libs/test/doc/html/utf/user-guide/fixture.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What this means is that we can create `setup()` and `teardown()` unit testing
    methods so that the `setup()` method is called at the beginning before any single
    test is executed, and at the end of every single unit test, the `teardown()` method
    is called.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This fixture capability provides us with a very controlled environment in which
    we can run our unit tests. It is similar to using pre- and post-conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's set up our unit testing environment. We will create a new testing class
    which focuses on the previously mentioned correctness of code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`unittest.main()` runs any method that starts with the prefix "test", no matter
    how many classes we create within a given Python module.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding unit testing code shows that we can create several unit testing
    classes and they can all be run in the same module by calling `unittest.main`.
  prefs: []
  type: TYPE_NORMAL
- en: It also shows that the `setup()` method does not count as a test in the output
    of the unit test report (the count of tests is 3) while, at the same time, it
    did its intended job as we can now access our class instance variable `self.gui`
    from within the unit test method.
  prefs: []
  type: TYPE_NORMAL
- en: We are interested in testing the correctness of all of our labels and especially
    catching bugs when we make changes to our code.
  prefs: []
  type: TYPE_NORMAL
- en: If we have copied and pasted strings from our application code to the testing
    code, it will catch any unintended changes with the click of a unit testing framework
    button.
  prefs: []
  type: TYPE_NORMAL
- en: We also want to test that invoking any of our `Radiobutton` widgets in any language
    results in the `labelframe` widget `text` being updated. In order to automatically
    test this, we have to do two things.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to retrieve the value of the `labelframe text` widget and assign
    the value to a variable we name `labelFrameText`. We have to use the following
    syntax because the properties of this widget are being passed in and retrieved
    via a dictionary data type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: We can now verify the default text and then the internationalized versions after
    clicking one of the Radiobutton widgets programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: After verifying the default `labelFrameText` we programmatically set the radio
    button to index 1 and then programmatically invoke the radio button's callback
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is basically the same action as clicking the radio button in the GUI but
    we do this button click event via code in the unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Then we verify that our text in the `labelframe` widget has changed as intended.
  prefs: []
  type: TYPE_NORMAL
- en: When we run the unit tests from within Eclipse with the Python PyDev plugin,
    we get the following output written to the Eclipse console.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Run from a command prompt, we get similar output once we navigate to the folder
    where our code currently resides.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using Eclipse, we can also choose to run our unit tests, not as a simple Python
    script, but as a Python unit test script, which gives us some colorful output
    instead of the black and white world of the old DOS prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The unit testing result bar is green, which means that all our unit tests have
    passed. The preceding screenshot also shows that the GUI test runner is much slower
    than the textual test runner: 1.01 seconds compared to 0.466 seconds in Eclipse.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have extended our unit testing code by testing `labels`, programmatically
    invoking a `Radiobutton` and then verifying in our unit tests that the corresponding
    `text` property of the `labelframe` widget has changed as expected. We have tested
    two different languages.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to use the built-in Eclipse/PyDev graphical unit test runner.
  prefs: []
  type: TYPE_NORMAL
