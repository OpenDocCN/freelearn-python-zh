- en: Chapter 8. Internationalization and Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 国际化和测试
- en: 'In this chapter, we will internationalize and test our Python GUI covering
    the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将国际化并测试我们的Python GUI，涵盖以下菜谱：
- en: Displaying widget text in different languages
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同语言中显示小部件文本
- en: Changing the entire GUI language all at once
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次性更改整个GUI语言
- en: Localizing the GUI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地化GUI
- en: Preparing the GUI for internationalization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备GUI进行国际化
- en: How to design a GUI in an agile fashion
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何以敏捷的方式设计GUI
- en: Do we need to test the GUI code?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要测试GUI代码吗？
- en: Setting debug watches
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置调试监视器
- en: Configuring different debug output levels
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置不同的调试输出级别
- en: Creating self-testing code using Python's __main__ section
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 的 __main__ 部分 创建自测代码
- en: Creating robust GUIs using unit tests
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单元测试创建健壮的GUI
- en: How to write unit tests using the Eclipse PyDev IDE
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Eclipse PyDev IDE 编写单元测试
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will internationalize our GUI by displaying text on labels,
    buttons, tabs, and other widgets, in different languages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过在标签、按钮、选项卡和其他小部件上显示文本，以不同的语言国际化我们的图形用户界面。
- en: We will start simply and then explore how we can prepare our GUI for internationalization
    at the design level.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简单开始，然后探讨如何在设计层面为我们的GUI进行国际化准备。
- en: We will also localize the GUI, which is slightly different from internationalization.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将本地化GUI，这与国际化略有不同。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: As these words are long, they have been abbreviated to use the first character
    of the word, followed by the total number of characters in between the first and
    last character, followed by the last character of the word.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些单词较长，它们已被缩写为使用单词的首字母，接着是首字母和最后一个字母之间的总字符数，最后是单词的最后一个字母。
- en: So, internationalization becomes I18N and localization becomes L10N.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，国际化变为 I18N，而本地化变为 L10N。
- en: We will also test our GUI code and write unit tests and explore the value unit
    tests can provide in our development efforts which will lead us to the best practice
    of *refactoring* our code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将测试我们的GUI代码，编写单元测试，并探索单元测试在我们开发努力中可以提供的价值，这将引导我们走向**重构**代码的最佳实践。
- en: Displaying widget text in different languages
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不同语言中显示小部件文本
- en: The easiest way to internationalize text strings in Python is by moving them
    into a separate Python module and then selecting the language to be displayed
    in our GUI by passing in a parameter to this module.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中将文本字符串国际化最简单的方法是将它们移动到一个单独的Python模块中，然后通过向该模块传递一个参数来选择在GUI中显示的语言。
- en: While this approach is not highly recommended, according to online search results,
    depending on the specific requirements of the application you are developing,
    this approach might still be the most pragmatic and fastest to implement.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法并不特别推荐，但根据在线搜索结果，根据您正在开发的特定应用需求，这种方法可能仍然是实现起来最实用和最快的方法。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will reuse the Python GUI we created earlier. We have commented out one line
    of Python code that creates the MySQL tab because we do not talk to a MySQL database
    in this chapter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用之前创建的 Python GUI。我们注释掉了一行创建 MySQL 选项卡的 Python 代码，因为在本章中我们不与 MySQL 数据库进行交互。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: In this recipe, we will start to I18N our GUI by changing the Windows title
    from English to another language.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将开始通过将窗口标题从英语更改为其他语言来国际化我们的GUI。
- en: As the name "GUI" is the same in other languages, we will first expand the name
    that enables us to see the visual effects of our changes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于“GUI”这个名称在其它语言中也是相同的，我们首先扩展这个名称，以便我们能够看到我们更改的视觉效果。
- en: 'Let''s change our previous line of code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改之前的代码行：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'to:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code change results in the following title for our GUI program:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码更改导致我们的GUI程序出现以下标题：
- en: '![How to do it...](img/B04829_08_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_01.jpg)'
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: In this chapter, we will use English and German to exemplify the principle of
    internationalizing our Python GUI.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用英语和德语来举例说明国际化我们的 Python 图形用户界面（GUI）的原则。
- en: Hard-coding strings into code is never too good an idea, so the first step we
    can do to improve our code is to separate all the strings that are visible in
    our GUI into a Python module of their own. This is the beginning of internationalizing
    the visible aspects of our GUI.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串硬编码到代码中从来不是一个好主意，因此我们可以采取的第一步是，将我们GUI中可见的所有字符串分离到一个独立的Python模块中。这是开始国际化我们GUI可见方面的第一步。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: While we are into I18N, we will do this very positive refactoring and the language
    translation all in one step.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行国际化（I18N）时，我们将一次性完成这个非常积极的重构和语言翻译。
- en: Let's create a new Python module and name it `Resources.py`. Let's next move
    the English string of our GUI title into this module and then import this module
    into our GUI code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的 Python 模块，并将其命名为 `Resources.py`。接下来，我们将我们的 GUI 标题的英文字符串移动到这个模块中，然后将其导入到我们的
    GUI 代码中。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: We are separating the GUI from the languages it displays, which is an OOP design
    principle.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在将GUI与其显示的语言分离，这是一个面向对象设计原则。
- en: 'Our new Python module, containing internationalized strings, now looks like
    this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新Python模块，包含国际化字符串，现在看起来是这样的：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We import this new Python module into our main Python GUI code, and then use
    it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这个新的 Python 模块导入到我们的主要 Python GUI 代码中，然后使用它。
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Depending on which language we pass into the I18N class, our GUI will be displayed
    in that language.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们传递给 I18N 类的语言，我们的 GUI 将以该语言显示。
- en: 'Running the preceding code gives us the following internationalized result:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码，我们得到以下国际化结果：
- en: '![How to do it...](img/B04829_08_02.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_02.jpg)'
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We are breaking out the hard-coded strings that are part of our GUI into their
    own separate modules. We do this by creating a class, and within the class's `__init__()`
    method, we select which language our GUI will display, depending on the passed
    in language argument.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在将作为我们GUI一部分的硬编码字符串拆分到它们自己的独立模块中。我们通过创建一个类来实现这一点，并在类的`__init__()`方法中，根据传入的语言参数选择我们的GUI将显示哪种语言。
- en: This works.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这有效。
- en: We can further modularize our code by separating the internationalized strings
    into separate files, potentially in XML or another format. We could also read
    them in from a MySQL database.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将国际化字符串分离到单独的文件中进一步模块化我们的代码，这些文件可能是XML格式或其他格式。我们还可以从MySQL数据库中读取它们。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: This is a "Separation of Concerns" coding approach, which is at the heart of
    OOP programming.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个“关注点分离”的编码方法，它是面向对象编程的核心。
- en: Changing the entire GUI language all at once
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一次性更改整个GUI语言
- en: In this recipe, we will change the entire GUI display names all at once by refactoring
    all the previously hard-coded English strings into a separate Python module and
    then internationalizing those strings.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将通过重构之前所有硬编码的英文字符串到一个单独的Python模块中，然后对这些字符串进行国际化，一次性更改整个GUI显示名称。
- en: This recipe shows that it is a good design principle to avoid hard-coding any
    strings that our GUI displays but to separate the GUI code from the text that
    the GUI displays.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例表明，避免在GUI显示的字符串中硬编码，而是将GUI代码与GUI显示的文本分离，是一个良好的设计原则。
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Designing our GUI in a modular way makes internationalizing it much easier.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以模块化方式设计我们的GUI使得国际化它变得更加容易。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will continue to use the GUI from the previous recipe. In that recipe, we
    had already internationalized the title of the GUI.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用之前菜谱中的GUI。在那个菜谱中，我们已将GUI的标题进行了国际化。
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: In order to internationalize the text being displayed in all of our GUI widgets,
    we have to move all hard-coded strings into a separate Python module, and this
    is what we do next.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了国际化我们所有GUI小部件中显示的文本，我们必须将所有硬编码的字符串移动到一个单独的Python模块中，这就是我们接下来要做的。
- en: Previously, strings of words that our GUI displayed were scattered all over
    our Python code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们GUI显示的单词字符串散布在我们的Python代码中。
- en: Here is what our GUI looked like without I18N.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们未进行国际化（I18N）的图形用户界面（GUI）的样子。
- en: '![How to do it...](img/B04829_08_03.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_03.jpg)'
- en: Every single string of every widget, including the title of our GUI, the tab
    control names, and so on, were all hard-coded and intermixed with the code that
    creates the GUI.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每个小部件的每一行字符串，包括我们GUI的标题、标签控制名称等等，都是硬编码的，并且与创建GUI的代码混合在一起。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: It is a good idea to think about how we can best internationalize our GUI at
    the design phase of our GUI software development process.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们GUI软件开发过程的设计阶段，考虑如何最好地国际化我们的GUI是一个好主意。
- en: The following is an excerpt of what our code looks like.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们代码的摘录。
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this recipe, we are internationalizing all strings displayed in our GUI widgets.
    We are not internationalizing the text *entered* into our GUI, because this depends
    on the local settings on your PC.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们正在国际化我们GUI小部件中显示的所有字符串。我们不会国际化输入到我们的GUI中的文本*输入*，因为这取决于您电脑上的本地设置。
- en: 'The following is the code for the English internationalized strings:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为英文国际化字符串的代码：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In our Python GUI module, all previously hard-coded strings are now replaced
    by an instance of our new I18N class, which resides in the `Resources.py` module.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Python GUI 模块中，所有之前硬编码的字符串现在都已被我们新的 I18N 类实例所替换，该类位于 `Resources.py` 模块中。
- en: 'Here is an example from our refactored `GUI.py` module:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们重构的 `GUI.py` 模块的一个示例：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note how all of the previously hard-coded English strings have been replaced
    by calls to the instance of our new I18N class.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到之前所有硬编码的英文字符串都已替换为对我们新I18N类实例的调用。
- en: An example is `self.win.title(self.i18n.title)`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是 `self.win.title(self.i18n.title)`。
- en: What this gives us is the ability to internationalize our GUI. We simply have
    to use the same variable names and combine them by passing in a parameter to select
    the language we wish to display.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了国际化GUI的能力。我们只需使用相同的变量名，并通过传递一个参数来组合它们，以选择我们希望显示的语言。
- en: We could change languages on the fly as part of the GUI as well, or we could
    read the local PC settings and decide which language our GUI text should display
    according to those settings.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在GUI中动态更改语言，或者我们可以读取本地PC设置，并根据这些设置决定我们的GUI文本应该显示哪种语言。
- en: We can now implement the translation to German by simply filling in the variable
    names with the corresponding words.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过简单地用相应的单词填充变量名来实现对德语的翻译。
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In our GUI code, we can now change the entire GUI display language in one line
    of Python code.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的GUI代码中，现在我们可以通过一行Python代码来更改整个GUI显示语言。
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Running the preceding code creates the following internationalized GUI:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码将创建以下国际化GUI：
- en: '![How to do it...](img/B04829_08_04.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_04.jpg)'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to internationalize our GUI, we refactored hard-coded strings into
    a separate module and then used the same class members to internationalize our
    GUI by passing in a string as the initializer of our I18N class, effectively controlling
    the language our GUI displays.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了国际化我们的图形用户界面，我们将硬编码的字符串重构为一个独立的模块，然后通过传递一个字符串作为我们的I18N类初始化器，使用相同的类成员来国际化我们的GUI，从而有效控制GUI显示的语言。
- en: Localizing the GUI
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地化GUI
- en: After the first step of internationalizing our GUI, the next step is to localize
    it. Why would we wish to do this?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成我们GUI国际化的第一步之后，下一步就是本地化它。我们为什么要这样做呢？
- en: Well, here in the United States of America, we are all cowboys and we live in
    different time zones.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，在美国，我们都是牛仔，我们生活在不同的时区。
- en: So while we are "internationalized" to the USA, our horses do wake up in different
    time zones (and do expect to be fed according to their own inner horse time zone
    schedule).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所以虽然我们“国际化”到了美国，但我们的马儿还是会根据不同的时区醒来（并且会期待按照它们自己内在的马儿时区时间表被喂食）。
- en: This is where localization comes in.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本地化的作用所在。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are extending the GUI we developed in the previous recipe by localizing it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过本地化扩展了在上一道菜谱中开发的图形用户界面。
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We start by first installing the Python pytz time zone module, using pip. We
    type the following command in a command processor prompt:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过使用pip安装Python的pytz时区模块。我们在命令处理器提示符中输入以下命令：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: In this book, we are using Python 3.4, which comes with the `pip` module built-in.
    If you are using an older version of Python, then you might have to install the
    `pip` module first.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们使用的是 Python 3.4 版本，该版本内置了 `pip` 模块。如果你使用的是较旧版本的 Python，那么你可能需要先安装 `pip`
    模块。
- en: When successful, we get the following result.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当成功时，我们得到以下结果。
- en: '![How to do it...](img/B04829_08_05.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_05.jpg)'
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The screenshot shows that the command downloaded the `.whl` format. If you have
    not done so, you might have to install the Python `wheel` module first.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 截图显示命令已下载`.whl`格式的文件。如果您尚未这样做，可能需要先安装Python的`wheel`模块。
- en: This installed the Python `pytz` module into the `site-packages` folder, so
    now we can import this module from our Python GUI code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 Python 的 `pytz` 模块安装到了 `site-packages` 文件夹中，因此现在我们可以从我们的 Python GUI 代码中导入此模块。
- en: We can list all the existing time zones by running the following code, which
    will display the time zones in our `ScrolledText` widget. First we add a new `Button`
    widget to our GUI.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下代码列出所有现有的时区，该代码将在我们的`ScrolledText`小部件中显示时区。首先，我们在GUI中添加一个新的`Button`小部件。
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Clicking our new `Button` widget results in the following output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 点击我们新的`按钮`小部件将产生以下输出：
- en: '![How to do it...](img/B04829_08_06.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_06.jpg)'
- en: 'After we install the tzlocal Python module, we can print our current locale
    by running the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们安装了 tzlocal Python 模块之后，我们可以通过运行以下代码来打印我们的当前区域设置：
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We have internationalized the strings of our two new action `Buttons` in `Resources.py`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将`Resources.py`中两个新动作`Buttons`的字符串进行了国际化处理。
- en: 'English version:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'German version:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Clicking our new button now tells us which time zone we are in (hey, we didn't
    know that, didn't we…).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 点击我们新的按钮现在会告诉我们我们所在的时区（嘿，我们不知道这个，不是吗……）。
- en: '![How to do it...](img/B04829_08_07.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_07.jpg)'
- en: We can now translate our local time to a different time zone. Let's use USA
    Eastern Standard Time as an example.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将本地时间转换为不同的时区。让我们以美国东部标准时间为例。
- en: We display our current local time in our unused Label 2 by improving our existing
    code.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过改进现有代码，在未使用的标签2中显示我们当前的本地时间。
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When we run the code, our internationalized Label 2 (displayed as `Etikette
    2` in German) will display the current local time.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行代码时，我们的国际化标签2（在德语中显示为`Etikette 2`）将显示当前本地时间。
- en: '![How to do it...](img/B04829_08_08.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_08.jpg)'
- en: We can now change our local time to US EST by first converting it to **Coordinated
    Universal Time** (**UTC**) and then applying the `timezone` function from the
    imported `pytz` module.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过先将本地时间转换为**协调世界时**（**UTC**），然后应用从导入的`pytz`模块中的`timezone`函数来更改我们的本地时间为美国东部标准时间（US
    EST）。
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Clicking the button now renamed as New York results in the following output:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 点击现在重命名为“纽约”的按钮将产生以下输出：
- en: '![How to do it...](img/B04829_08_09.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_09.jpg)'
- en: Our Label 2 got updated with the current time in New York and we are printing
    the UTC times of the cities Los Angeles and New York with their respective time
    zone conversions, relative to UTC time to the Eclipse console, using a US date
    formatting string.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将标签2更新为纽约的当前时间，并且正在使用美国日期格式化字符串，将洛杉矶和纽约的UTC时间及其相对于UTC时间的时区转换打印到Eclipse控制台。
- en: '![How to do it...](img/B04829_08_10.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_10.jpg)'
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: UTC never observes Daylight Saving Time. During **Eastern Daylight Time** (**EDT**)
    UTC is four hours ahead and during **Standard Time** (**EST**) it is five hours
    ahead of the local time.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: UTC（协调世界时）从不观察夏令时。在**东部夏令时**（**EDT**）UTC比当地时间快四小时，而在**标准时间**（**EST**）UTC比当地时间快五小时。
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to localize date and time information, we first need to convert our
    local time to UTC time. We then apply `timezone` information and use the `astimezone`
    function from the `pytz` Python time zone module to convert to any time zone in
    the entire world!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本地化日期和时间信息，我们首先需要将我们的本地时间转换为协调世界时（UTC）。然后，我们应用`timezone`信息，并使用`pytz` Python时区模块中的`astimezone`函数将时间转换为世界上任何时区！
- en: In this recipe, we have converted the local time of the USA west coast to UTC
    and then displayed the USA east coast time in Label 2 of our GUI.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将美国西海岸的当地时间转换成了协调世界时（UTC），然后在我们的图形用户界面（GUI）的标签2中显示了美国东海岸的时间。
- en: Preparing the GUI for internationalization
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备GUI进行国际化
- en: In this recipe, we will prepare our GUI for internationalization by realizing
    that not all is as easy as could be expected when translating English into foreign
    languages.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将通过实现认识到，将英语翻译成外语并不像预期的那样事事都那么简单，来为我们的GUI国际化做准备。
- en: We still have one problem to solve and that is how to properly display non-English
    Unicode characters from foreign languages.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然有一个问题需要解决，那就是如何正确显示来自外语的非英语Unicode字符。
- en: One might expect that displaying the German ä, ö, and ü Unicode umlaut characters
    would be handled by Python 3 automatically, but this is not the case.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可能预期Python 3会自动处理显示德语的ä、ö和ü Unicode 重音字符，但实际上并非如此。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will continue to use the Python GUI we developed in recent chapters. First,
    we will change the default language to German in the `GUI.py` initialization code.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用我们在最近章节中开发的 Python GUI。首先，我们将把 `GUI.py` 初始化代码中的默认语言更改为德语。
- en: We do this by uncommenting the line `self.i18n = I18N('de')`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过取消注释行`self.i18n = I18N('de')`来实现这一点。
- en: How to do it...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: When we change the word `Ueber` to the correct German `Űber` using the umlaut
    character, the Eclipse PyDev plugin is not too happy.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将单词 `Ueber` 改为正确的德语 `Űber` 并使用重音符号时，Eclipse PyDev 插件不太高兴。
- en: '![How to do it...](img/B04829_08_11.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_11.jpg)'
- en: We get an error message, which is a little bit confusing, because when we run
    the same line of code from within the Eclipse PyDev Console, we get the expected
    result.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了一条错误信息，这有点令人困惑，因为我们从 Eclipse PyDev 控制台中运行相同的代码行时，得到了预期的结果。
- en: '![How to do it...](img/B04829_08_12.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_12.jpg)'
- en: When we ask for the Python default encoding, we get the expected result, which
    is UTF-8.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们请求 Python 的默认编码时，我们得到预期的结果，即 UTF-8。
- en: '![How to do it...](img/B04829_08_13.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_13.jpg)'
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: We can, of course, always resort to the direct representation of Unicode.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然可以始终求助于Unicode的直接表示。
- en: Using Windows' built-in character map, we can find the Unicode representation
    of the umlaut character, which is U+00DC for the capital U with an umlaut.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_14.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: While this workaround is truly ugly, it does the trick. Instead of typing in
    the literal character Ü, we can pass in the Unicode of \u00DC to get this character
    correctly displayed in our GUI.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个解决方案确实很丑陋，但它确实有效。我们不需要直接输入字符Ü，而是可以传递Unicode编码\u00DC来正确地在我们的GUI中显示这个字符。
- en: '![How to do it...](img/B04829_08_15.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_08_15.jpg)'
- en: We can also just accept the change in the default encoding from Cp1252 to UTF-8
    using PyDev with Eclipse, but we might not always get the prompt to do so.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we might see the following error message displayed:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_16.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: The way to solve this problem is to change the PyDev project's **Text file encoding**
    property to UTF-8.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_17.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
- en: After changing the PyDev default encoding, we now can display those German umlaut
    characters. We also updated the title to use the correct German ä character.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_18.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internationalization and working with foreign language Unicode characters is
    often not as straightforward as we would wish. Sometimes, we have to find workarounds
    and expressing Unicode characters via Python by using the direct representation
    by prepending `\u` can do the trick.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: At other times, we just have to find the settings of our development environment
    to adjust.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: How to design a GUI in an agile fashion
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The modern agile software development approach to design and coding came out
    of the lessons learned by software professionals. This method applies to a GUI
    as much as to any other code. One of the main keys of agile software development
    is the continuously applied process of refactoring.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: One practical example of how refactoring our code can help us in our software
    development work is by first implementing some simple functionality using functions.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: As our code grows in complexity, we might want to refactor our functions into
    methods of a class. This approach would enable us to remove global variables and
    also be more flexible about where inside the class we place methods.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: While the functionality of our code has not changed, the structure has.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: In this process, we code, test, refactor, and then test again. We do this in
    short cycles and often start with the minimum code required to get some functionality
    to work.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Test-driven software development is one particular style of the agile development
    methodology.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: While our GUI is working nicely, our main `GUI.py` code has been ever increasing
    in complexity and it has started to get a little bit harder to maintain an overview
    of our code.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: This means we need to refactor our code.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will refactor the GUI we created in previous chapters. We will use the English
    version of the GUI.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already broken out all names our GUI displays when we internationalized
    it in the previous recipe. That was an excellent start to refactoring our code.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refactoring is the process of improving the structure, readability, and maintainability
    of existing code. We are not adding new functionality.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapters and recipes, we have been extending our GUI in a "Top-to-bottom"
    waterfall development approach, adding `import` to the top and code towards the
    bottom of the existing code.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: While this was useful when looking at the code it now looks a little bit messy
    and we can improve this to help our future development.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us first clean up our `import` statement section, which currently looks
    like this:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: By simply grouping related imports, we can reduce the number of lines of code,
    which improves the readability of our imports, making them appear less overwhelming.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We can further refactor our code by breaking out the callback methods into their
    own modules. This improves readability by separating the different import statements
    into the modules they are required in.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Let us rename our `GUI.py` as `GUI_Refactored.py` and create a new module, which
    we name `Callbacks_Refactored.py`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: This gives us this new architecture.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note how we are passing in an instance of our own GUI class (`self`) when calling
    the `Callbacks` initializer.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'Our new `Callbacks` class is as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the initializer of our new class, the passed-in GUI instance is saved under
    the name `self.oop` and used throughout this new Python class module.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Running the refactored GUI code still works. We have only increased readability
    and reduced the complexity of our code in preparation for further development
    work.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have first improved the readability of our code by grouping related import
    statements. We next broke out the callback methods into their own class and module
    in order to further reduce the complexity of our code.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: We had already taken the same OOP approach by having the `ToolTip` class reside
    in its own module and by internationalizing all GUI strings in the previous recipes.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we went one step further in refactoring by passing our own instance
    into the callback method's class our GUI relies upon.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we better understand the value of a modular approach to software development,
    we will most likely start with this approach in our future software designs.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Do we need to test the GUI code?
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing our software is an important activity during the coding phase, as well
    as when releasing service packs or bug fixes.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: There are different levels of testing. The first level is developer testing,
    which often starts with the compiler or interpreter not letting us run our buggy
    code forcing us to test small parts of our code on the level of individual methods.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: This is the first level of defense.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: A second level of coding defensively is when our source code control system
    tells us about some conflicts to be resolved and does not let us check in our
    modified code.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: This is very useful and absolutely necessary when we work professionally in
    a team of developers. The source code control system is our friend and points
    out changes that have been committed to a particular branch or top-of-tree either
    by ourselves or by our other developers, and tells us that our local version of
    the code is both outdated and has some conflicts that need to be resolved before
    we can submit our code into the repository.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: This part assumes you use a source control system to manage and store your code.
    Examples include git, mercurial, svn, and several others. Git is a very popular
    source control and it is free for a single user.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: A third level is the level of APIs where we encapsulate potential future changes
    to our code by only allowing interactions with our code via published interfaces.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please refer to "Program to an Interface, never an Implementation", *Design
    Patterns*, Page 17.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Another level of testing is integration testing, when half of the bridge we
    finally built meets the other half that the other development teams created and
    the two don't meet at the same height (say, one half ended up two meters or yards
    higher than the other half…).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Then, there is end user testing. While we built what they specified, it is not
    really what they wanted.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Oh well…I guess all of the preceding examples are valid reasons why we need
    to test our code both in the design and implementation stages.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will test the GUI we have created in recent recipes and chapters. We will
    also show some simple examples of what can go wrong and why we need to keep testing
    our code and code we do call via APIs.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While many experienced developers grew up sprinkling `printf()` statements all
    over their code while debugging, many developers in the 21st century are accustomed
    to modern IDE development environments that efficiently speed up development time.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we are using the PyDev Python plug-in for the Eclipse IDE.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: If you are just starting using an IDE like Eclipse with the PyDev plug-in, it
    might be a little bit overwhelming at first. The Python IDLE tool that ships with
    Python 3 also has a simpler debugger and you might wish to explore that first.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Whenever something goes wrong in our code, we have to debug it. The first step
    in doing this is to set break points and then step through our code, line by line,
    or method by method.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Stepping in and out of our code is a daily activity until the code runs smoothly.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: In Python GUI programming, one of the first things that can go wrong is missing
    out on importing the required modules or importing existing modules.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_19.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: We are trying to create an instance of the tkinter class but things don't work
    as expected.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Well, we simply forgot to import the module and we can fix this by adding a
    line of Python code above our class creation, where the import statements live.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is an example in which our development environment does the testing for
    us. We just have to do the debugging and code fixing.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Another example more closely related to developer testing is when we code conditionals
    and, during our regular development, do not exercise all branches of logic.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Using an example from the previous chapter, let's say we click on the **Get
    Quotes** button and this works, but we never clicked on the **Mody Quote** button.
    The first button click creates the desired result, but the second throws an exception
    (because we had not yet implemented this code and probably forgot all about it).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_20.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
- en: 'Clicking the **Mody Quote** button creates the following result:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_21.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: Another potential area of bugs is when a function or method suddenly no longer
    returns the expected result. Let's say we are calling the following function,
    which returns the expected result.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_22.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: Then, someone makes a mistake, and we no longer get the previous results.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_23.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: Instead of multiplying, we are raising by the power of the passed in number,
    and the result is no longer what it used to be.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In software testing, this sort of bug is called regression.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we emphasized the importance of software testing during several
    phases of the software development life cycle by showing several examples of where
    code can go wrong and introduce software defects (aka bugs).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Setting debug watches
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In modern **Integrated Development Environments** (**IDEs**) like the PyDev
    plugin in Eclipse or another IDE such as NetBeans, we can set debug watches to
    monitor the state of our GUI during the execution of our code.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: This is very similar to the Microsoft IDEs of Visual Studio and the more recent
    versions of Visual Studio.NET.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting debug watches is a very convenient way to help our development efforts.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will reuse the Python GUI we developed in earlier recipes.
    We are stepping through the code we previously developed and setting debug watches.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While this recipe applies to the PyDev plugin in the Java-based Eclipse IDE,
    its principles also apply to many modern IDEs.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: The first position where we might wish to place a breakpoint is at the place
    where we make our GUI visible by calling the tkinter main event loop.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: The green balloon symbol on the left is a breakpoint in PyDev/Eclipse. When
    we execute our code in debug mode, once the execution reaches the breakpoint,
    the execution of the code will be halted. At this point, we can see the values
    of all variables that are currently in scope. We can also type expressions into
    one of the debugger windows which will execute them, showing us the results. If
    the result is what we want, we might decide to change our code using what we have
    just learned.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: We normally step through the code by either clicking an icon in the toolbar
    of our IDE or by using a keyboard shortcut (like pressing *F5* to step into code,
    *F6* to step over, and *F7* to step out of the current method).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_24.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
- en: Placing the breakpoint where we did and then stepping into this code turns out
    to be a problem because we end up in some low-level tkinter code we really do
    not wish to debug right now. We get out of the low-level tkinter code by clicking
    the Step-Out toolbar icon (which is the third yellow arrow on the right below
    the project menu) or by pressing *F7* (assuming we are using PyDev in Eclipse).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: We started the debugging session by clicking the bug toolbar icon towards the
    right of the screenshot. If we execute without debugging, we click the green circle
    with the white triangle inside it, which is the icon to the right of the bug icon.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_25.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
- en: A better idea is to place our breakpoint closer to our own code in order to
    watch the values of some of our own Python variables.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: In the event-driven world of modern GUIs, we have to place our breakpoints at
    code that gets invoked during events, for example button clicks.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Currently, one of our main functionalities resides in a button click event.
    When we click the button labeled **New York**, we create an event that then results
    in something happening in our GUI.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Let's place a breakpoint at the **New York** button callback method, which we
    named `getDateTime()`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: When we now run a debug session, we will stop at the breakpoint and then we
    can enable watches of variables that are in scope.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Using PyDev in Eclipse, we can right-click a variable and then select the watch
    command from the pop-up menu. The name of the variable, its type, and current
    value will be displayed in the expressions debug window shown in the next screenshot.
    We can also directly type into the expressions window.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: The variables we are watching are not limited to simple data types. We can watch
    class instances, lists, dictionaries, and so on.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: When watching these more complex objects, we can expand them in the expressions
    window and drill down into all of the values of the class instances, dictionaries,
    and so on.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: We do this by clicking on the triangle to the left of our watched variable that
    appears left-most under the **Name** column next to each variable.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_26.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
- en: While we are printing out the values of the different time zone locations, in
    the long term, it is much more convenient and efficient to set debug watches.
    We do not have to clutter our code with old-fashioned C-style `printf()` statements.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in learning how to install Eclipse with the PyDev plugin
    for Python, there is a great tutorial that will get you started installing all
    the necessary free software and then introduce you to PyDev within Eclipse by
    creating a simple, working Python program. [http://www.vogella.com/tutorials/Python/article.html](http://www.vogella.com/tutorials/Python/article.html)
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use modern Integrated Development Environments (IDEs) in the 21st century
    that are freely available to help us to create solid code.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: This recipe showed how to set debug watches, which is a fundamental tool in
    every developer's skill set. Stepping through our own code even when not hunting
    down bugs ensures that we understand our code and can lead to improving our code
    via refactoring.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: The following is a quote from the first programming book I read, *Thinking in
    Java*, written by Bruce Eckel.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Resist the urge to hurry, it will only slow you down."* |   |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
- en: '|   | --*Bruce Eckel* |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
- en: Almost two decades later, this advice has passed the test of time.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Debug watches help us to create solid code and are not a waste of time.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Configuring different debug output levels
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will configure different debug levels that we can select
    and change at runtime. This allows us to control how much we want to drill down
    into our code when debugging our code.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: We will create two new Python classes and place both of them into the same module.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: We will use four different logging levels and we will write our debugging output
    to a log file we will create. If the log folder does not exist, we will create
    it automatically as well.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: The name of the log file is the name of the executing script which is our refactored
    `GUI.py`. We can also choose other names for our log files by passing in the full
    path to the initializer of our logger class.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue to use our refactored `GUI.py` code from the previous recipe.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we create a new Python module into which we place two new `classes`.
    The first `class` is very simple and defines the logging levels. This is basically
    an `enumeration`.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The second `class` creates a log file by using the passed in full path of the
    file name and places this into a `logs` folder. On first run, the `logs` folder
    might not exist so the code automatically creates the folder.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In order to write to our log file, we use the `writeToLog()` method. Inside
    the method, the first thing we do is check if the message has a logging level
    higher than the limit we set our desired logging output to. If the message has
    a lower level, we discard it and immediately return from the method.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: If the message has a logging level that we want to display, we then check if
    it starts with a newline character, and if it does, we discard the newline by
    slicing the method starting at index 1, using Python's slice operator (`msg =
    msg[1:]`).
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: We then write one line to our log file consisting of the current date timestamp,
    two tab spaces, our message, and ending in a newline character.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We can now import our new Python module, and inside the `__init__` section of
    our GUI code, we can create an instance of the `Logger` class.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We are retrieving the full path to our running GUI script via `path.realpath(__file__)`
    and passing this into the initializer of the `Logger` class. If the `logs` folder
    does not exist, it will automatically get created by our Python code.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: 'This creates the following results:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_27.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows that we created an instance of our new `Logger`
    class and the screenshot below shows that both the `logs` folder as well as the
    log were created.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_28.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
- en: When we open up the log, we can see that the current date and time as well as
    a default string have been written into the log.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_29.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created our own logging class. While Python ships with a
    Logging module, it is very easy to create our own, which gives us absolute control
    over our logging format. This is very useful when we combine our own logging output
    with MS Excel or the Matplotlib we explored in previous recipes in a previous
    chapter.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we will use Python's built-in `__main__` functionality to
    use the four different logging levels we have just created.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Creating self-testing code using Python's __main__ section
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python comes with a very nice feature that enables each module to self-test.
    Making use of this feature is a great way of making sure that changes to our code
    do not break existing code and, additionally, the `__main__` self-testing section
    can serve as documentation for how each module works.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After a few months or years, we sometimes forget what our code is doing, so
    having an explanation written in the code itself is indeed a great help.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: It is a good idea to always add a self-testing section to every Python module,
    when possible. It is sometimes not possible, but, in most modules, it is possible
    to do so.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will extend the previous recipe, so, in order to understand what the code
    in this recipe is doing, we have to first read and understand the code of the
    previous recipe.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will explore the power of the Python `__main__` self-testing section
    by adding this self-testing section to our `Resources.py` module. Whenever we
    run a module that has this self-testing section located at the bottom of the module,
    when the module is executed by itself, this code will run.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: When the module is imported and used from other modules, the code in the `__main__`
    self-testing section will not be executed.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the code that is also shown in the screenshot that follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: After adding the self-testing section, we now can run this module by itself
    and it creates useful output, while, at the same time, showing us that our code
    works as intended.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_30.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
- en: We are first passing in English as the language to be displayed in our GUI,
    and then we pass in German as the language that our GUI will display.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: We are printing out the title of our GUI to show that our Python module works
    as we intended it to work.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step is to use our logging capabilities which we created in the previous
    recipe.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: We do this by first adding a `__main__` self-testing section to our refactored
    `GUI.py` module and we then verify that we created an instance of our `Logger`
    class.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_31.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
- en: We next write to our log file by using the command shown. We have designed our
    logging level to default to log every message, which is the DEBUG level and, because
    of this, we do not have to change anything. We just pass in the message to be
    logged to the `writeToLog` method.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This gets written to our log file, as can be seen in the following screenshot
    of the log:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_32.jpg)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
- en: Now we can control the logging by adding logging levels to our logging statements
    and set the level we wish to output. Let's add this capability to our New York
    button callback method in the `Callbacks.py` module which is the `getDateTime`
    method.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: We change the previous `print` statements to `log` statements using different
    debug levels.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: In the `GUI.py`, we import both new classes from our logger module.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Next, we create local instances of those classes.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As we are passing in an instance of the GUI class to the `Callbacks.py` initializer,
    we can use logging level constraints according to the `LogLevel` class we have
    created.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: When we now click our New York button, depending upon the selected logging level,
    we get different output written to our log file. The default logging level is
    `DEBUG`, which means everything gets written to our log.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_33.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
- en: When we change the logging level, we control what gets written to our log. We
    do this by calling the `setLoggingLevel` method of the `Logger` class.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the `__main__` section of our GUI, we change the logging level to `MINIMUM`,
    which results in reduced output written to our log file.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now, our log file no longer shows the `Test Message` and only shows messages
    that meet the set logging level.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_34.jpg)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we are making good use of Python's built-in `__main__` self-testing
    section. We introduced our own logging file and, at the same time, how to create
    different logging levels.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: By doing this, we have full control over what gets written to our log files.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Creating robust GUIs using unit tests
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python comes with a built-in unit testing framework and, in this recipe, we
    will start to use this framework to test our Python GUI code.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: Before we start to write unit tests, we want to design our testing strategy.
    We could easily intermix the unit tests with the code they are testing, but a
    better strategy is to separate the application code from the unit test code.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PyUnit has been designed according to the principles of all the other xUnit
    testing Frameworks.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will test the internationalized GUI we created earlier in this chapter.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to use Python's built-in unit testing framework, we have to import
    the Python `unittest` module. Let's create a new module and name it `UnitTests.py`.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: We first import the `unittest` module, then we create our own class and within
    this class we inherit and extend the `unittest.TestCase` class.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest code to do it looks like this:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The code isn't doing much yet, but when we run it, we do not get any errors,
    which is a good sign.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_35.jpg)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
- en: We actually do get an output written to the console stating that we successfully
    ran zero tests…
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Hmm, that output is a bit misleading as all we have done so far is create a
    class that contains no actual testing methods.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: We add testing methods that do the actual unit testing by following the default
    naming for all test methods to start with the word "test". This is an option that
    can be changed but it seems to be much easier and clearer to stick to this naming
    convention.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a test method that will test the title of our GUI. This will verify
    that, by passing in the expected arguments, we get the expected result.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We are importing our `I18N` class from our `Resources.py` module, passing in
    English as the language to be displayed in our GUI. As this is our first unit
    test, we are printing out the Title result as well, just to make sure we know
    what we are getting back. We next use the `unittest assertEqual` method to verify
    that our title is correct.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: Running this code gives us an **OK**, which means that the unit test passed.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_36.jpg)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
- en: The unit test runs and succeeds, which is indicated by one dot and the word
    "OK". If it had failed or gotten an error we would not have got the dot but an
    "F" or "E" as the output.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: We can now do the same automated unit testing check by verifying the title for
    the German version of our GUI.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: We simply copy, paste, and modify our code.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now we are testing our internationalized GUI title in two languages and getting
    the following result when running the code:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_37.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
- en: We ran two unit tests but, instead of an OK, we got a failure. What happened?
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Our `assertion` failed for the German version of our GUI…
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: While debugging our code, it turns out that in the copy, paste, and modify approach
    of our unit test code, we forgot to pass in German as the language. We can easily
    fix this.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: When we rerun our unit tests, we again get the expected result of all tests
    passing.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_38.jpg)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unit testing code is code and can have bugs too.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: While the purpose of writing unit tests is really to test our application code,
    we have to make sure that our tests are written correctly. One approach from the
    **Test-Driven-Development** (**TDD**) methodology might help us.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In TDD, we develop the unit tests before we actually write the application code.
    Now, if a test passes for a method that does not even exist, something is wrong.
    The next step is to create the non-existing method and make sure it will fail.
    After that, we can write the minimum amount of code necessary to make the unit
    test pass.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we have begun to test our Python GUI, writing unit tests in
    Python. We have seen that Python unit test code is just code and can contain mistakes
    that need to be corrected. In the next recipe, we will extend this recipe's code
    and use the graphical unit test runner that comes with the PyDev plugin for the
    Eclipse IDE.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: How to write unit tests using the Eclipse PyDev IDE
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we started to use Python's unit testing capabilities,
    and in this recipe, we will ensure the quality of our GUI code by further using
    this capability.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: We will unit test our GUI in order to make sure that the internationalized strings
    our GUI displays are as expected.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: In the previous recipe, we encountered some bugs in our unit testing code but,
    typically, our unit tests will find regression bugs that are caused by modifying
    existing application code, not the unit test code. Once we have verified that
    our unit testing code is correct, we do not usually change it.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our unit tests also serve as documentation of what we expect our code to do.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: By default, Python's unit tests are executed with a textural unit test runner
    and we can run this in the PyDev plug-in from within the Eclipse IDE. We can also
    run the very same unit tests from a console window.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the text runner in this recipe, we will explore PyDev's graphical
    unit test feature that can be used from within the Eclipse IDE.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are extending the previous recipe, in which we began to use Python unit tests.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Python unit testing framework comes with what are called fixtures.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following URLs for a description of what a test fixture is:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3.4/library/unittest.html](https://docs.python.org/3.4/library/unittest.html)'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Test_fixture](https://en.wikipedia.org/wiki/Test_fixture)'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.boost.org/doc/libs/1_51_0/libs/test/doc/html/utf/user-guide/fixture.html](http://www.boost.org/doc/libs/1_51_0/libs/test/doc/html/utf/user-guide/fixture.html)'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What this means is that we can create `setup()` and `teardown()` unit testing
    methods so that the `setup()` method is called at the beginning before any single
    test is executed, and at the end of every single unit test, the `teardown()` method
    is called.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This fixture capability provides us with a very controlled environment in which
    we can run our unit tests. It is similar to using pre- and post-conditions.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: Let's set up our unit testing environment. We will create a new testing class
    which focuses on the previously mentioned correctness of code.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`unittest.main()` runs any method that starts with the prefix "test", no matter
    how many classes we create within a given Python module.'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This creates the following output:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_39.jpg)'
  id: totrans-421
  prefs: []
  type: TYPE_IMG
- en: The preceding unit testing code shows that we can create several unit testing
    classes and they can all be run in the same module by calling `unittest.main`.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: It also shows that the `setup()` method does not count as a test in the output
    of the unit test report (the count of tests is 3) while, at the same time, it
    did its intended job as we can now access our class instance variable `self.gui`
    from within the unit test method.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: We are interested in testing the correctness of all of our labels and especially
    catching bugs when we make changes to our code.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: If we have copied and pasted strings from our application code to the testing
    code, it will catch any unintended changes with the click of a unit testing framework
    button.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: We also want to test that invoking any of our `Radiobutton` widgets in any language
    results in the `labelframe` widget `text` being updated. In order to automatically
    test this, we have to do two things.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to retrieve the value of the `labelframe text` widget and assign
    the value to a variable we name `labelFrameText`. We have to use the following
    syntax because the properties of this widget are being passed in and retrieved
    via a dictionary data type:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We can now verify the default text and then the internationalized versions after
    clicking one of the Radiobutton widgets programmatically.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: After verifying the default `labelFrameText` we programmatically set the radio
    button to index 1 and then programmatically invoke the radio button's callback
    method.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Note
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is basically the same action as clicking the radio button in the GUI but
    we do this button click event via code in the unit tests.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: Then we verify that our text in the `labelframe` widget has changed as intended.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: When we run the unit tests from within Eclipse with the Python PyDev plugin,
    we get the following output written to the Eclipse console.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_40.jpg)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
- en: Run from a command prompt, we get similar output once we navigate to the folder
    where our code currently resides.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_41.jpg)'
  id: totrans-439
  prefs: []
  type: TYPE_IMG
- en: Using Eclipse, we can also choose to run our unit tests, not as a simple Python
    script, but as a Python unit test script, which gives us some colorful output
    instead of the black and white world of the old DOS prompt.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_08_42.jpg)'
  id: totrans-441
  prefs: []
  type: TYPE_IMG
- en: 'The unit testing result bar is green, which means that all our unit tests have
    passed. The preceding screenshot also shows that the GUI test runner is much slower
    than the textual test runner: 1.01 seconds compared to 0.466 seconds in Eclipse.'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have extended our unit testing code by testing `labels`, programmatically
    invoking a `Radiobutton` and then verifying in our unit tests that the corresponding
    `text` property of the `labelframe` widget has changed as expected. We have tested
    two different languages.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to use the built-in Eclipse/PyDev graphical unit test runner.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
