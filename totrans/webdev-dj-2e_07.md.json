["```py\nfrom django.core.exceptions import ValidationError\ndef validate_lowercase(value):\n  if value.lower() != value:\n    raise ValidationError(\"{} is not lowercase.\"\\\n                          .format(value))\n```", "```py\nclass ExampleForm(forms.Form):\n  text_input = forms.CharField(validators=[validate_lowercase])\n```", "```py\nclass ExampleForm(forms.Form):\n   text_input = forms.CharField()\n  …\n  def clean_text_input(self):\n    value = self.cleaned_data['text_input']\n    if value.lower() != value:\n      raise ValidationError(\"{} is not lowercase.\"\\\n                            .format(value))\\\n    return value\n```", "```py\nclass ExampleForm(forms.Form):\n  text_input = forms.CharField()\n  …\n  def clean_text_input(self):\n    value = self.cleaned_data['text_input']\n    return value.lower()\n```", "```py\nclass NewsletterSignupForm(forms.Form):\n  signup = forms.BooleanField\\\n           (label=\"Sign up to newsletter?\", required=False)\n  email = forms.EmailField\\\n          (help_text=\"Enter your email address to subscribe\", \\\n           required=False)\n```", "```py\nclass NewsletterSignupForm(forms.Form):\n  …\n  def clean(self):\n    cleaned_data = super().clean()\n    if cleaned_data[\"signup\"] and not cleaned_data.get(\"email\"):\n    self.add_error\\\n    (\"email\", \\\n     \"Your email address is required if signing up for the newsletter.\")\n```", "```py\nclass OrderForm(forms.Form):\n  item_a = forms.IntegerField(min_value=0, max_value=100)\n  item_b = forms.IntegerField(min_value=0, max_value=100)\\\n  def clean(self):\n    cleaned_data = super().clean()\n    if cleaned_data.get(\"item_a\", 0) + cleaned_data.get\\\n                                       (\"item_b\", 0) > 100:\n      self.add_error\\\n      (None, \\\n       \"The total number of items must be 100 or less.\")\n```", "```py\nself.add_error(None, \\\n               \"The total number of items must be 100 or less.\")\n```", "```py\n    class OrderForm(forms.Form):\n    ```", "```py\n        class OrderForm(forms.Form):\n          magazine_count = forms.IntegerField\\\n                           (min_value=0, max_value=80)\n          book_count = forms.IntegerField\\\n                       (min_value=0, max_value=50)\n          send_confirmation = forms.BooleanField\\\n                              (required=False)\n          email = forms.EmailField(required=False)\n        ```", "```py\n    from django.core.exceptions import ValidationError\n    ```", "```py\n    def validate_email_domain(value):\n      if value.split(\"@\")[-1].lower()!= \"example.com\":\\\n          raise ValidationError\\\n          (\"The email address must be on the domain example.com.\")\n    ```", "```py\n    class OrderForm(forms.Form):\n      …\n      email = forms.EmailField\\\n              (required=False, \\\n               validators=[validate_email_domain])\n    ```", "```py\n    class OrderForm(forms.Form):\n      # truncated for brevity\n      def clean_email(self):\n      return self.cleaned_data['email'].lower()\n    ```", "```py\n    class OrderForm(forms.Form):\n      # truncated for brevity\n    email field if Send confirmation is checked but no email address is added: ![Figure 7.8: Error if Send confirmation is checked but no email address is added\n    ](img/B15509_07_08.jpg)Figure 7.8: Error if Send confirmation is checked but no email address is addedSimilarly, an error will be added to `email` if an email address is entered but `Send confirmation` is not checked:![Figure 7.9: Error because an email has been entered but the user \n    has not chosen to receive confirmation\n    ](img/B15509_07_09.jpg)Figure 7.9: Error because an email has been entered but the user has not chosen to receive confirmation\n    ```", "```py\n    class OrderForm(forms.Form):\n      …\n      def clean(self):\n        …\n        None as the first argument to the add_error call.NoteRefer to [http://packt.live/3nMP3R7](http://packt.live/3nMP3R7) for the complete code.Save `forms.py`.\n    ```", "```py\n    from .forms import ExampleForm, SearchForm\n    ```", "```py\n    from .forms import OrderForm, SearchForm\n    ```", "```py\n    form = ExampleForm(request.POST)\n    ```", "```py\n    form = OrderForm(request.POST)\n    ```", "```py\n    form = ExampleForm()\n    ```", "```py\n    form = OrderForm()\n    ```", "```py\nclass ExampleForm(forms.Form):\n  text_field = forms.CharField\\\n               (widget=forms.TextInput\\\n               (attrs={\"placeholder\": \"Text Placeholder\"}))\n  password_field = forms.CharField(\\\n    widget=forms.PasswordInput\\\n           (attrs={\"placeholder\": \"Password Placeholder\"}))\n  email_field = forms.EmailField\\\n                (widget=forms.EmailInput\\\n                 (attrs={\"placeholder\": \"Email Placeholder\"}))\n  text_area = forms.CharField\\\n              (widget=forms.Textarea\\\n              (attrs={\"placeholder\": \"Text Area Placeholder\"}))\n```", "```py\ntext_field = forms.CharField(initial=\"Initial Value\", …)\n```", "```py\ninitial = {\"text_field\": \"Text Value\", \\\n           \"email_field\": \"user@example.com\"}\nform = ExampleForm(initial=initial)\n```", "```py\ninitial = {\"text_field\": \"Text Value\", \\\n           \"email_field\": \"user@example.com\"}\nform = ExampleForm(request.POST, initial=initial)\n```", "```py\n    magazine_count = forms.IntegerField\\\n                     (min_value=0, max_value=80,\\\n                      widget=forms.NumberInput\\\n                      (attrs={\"placeholder\": \"Number of Magazines\"}))\n    ```", "```py\n    book_count = forms.IntegerField\\\n                 (min_value=0, max_value=50,\\\n                  widget=forms.NumberInput\\\n                  (attrs={\"placeholder\": \"Number of Books\"}))\n    ```", "```py\n    email = forms.EmailField\\\n            (required=False, validators=[validate_email_domain],\\\n             widget=forms.EmailInput\\\n             (attrs={\"placeholder\": \"Your company email address\"}))\n    ```", "```py\n    initial = {\"email\": \"user@example.com\"}\n    ```", "```py\n    form = OrderForm(request.POST, initial=initial)\n    ```", "```py\n    form = OrderForm(initial=initial)\n    ```", "```py\n    class PublisherForm(forms.Form):\n      name = forms.CharField(max_length=50)\n      website = forms.URLField()\n      …\n    ```", "```py\n    if create:\n      initial = {}\n    else:\n      publisher = Publisher.objects.get(pk=pk)\n      initial = {\"name\": publisher.name, \\\n                 \"website\": publisher.website, …}\n    form = PublisherForm(initial=initial)\n    ```", "```py\n    form = PublisherForm(request.POST, initial=initial)\n    if create:\n      publisher = Publisher()\n    else:\n      publisher = Publisher.objects.get(pk=pk)\n    publisher.name = form.cleaned_data['name']\n    publisher.website = forms.cleaned_data['website']\n    …\n    publisher.save()\n    ```", "```py\nfrom .models import Publisher\n```", "```py\nclass PublisherForm(forms.ModelForm):\n  class Meta:\n    model = Publisher\n    fields = (\"name\", \"website\", \"email\")\n```", "```py\nclass PublisherForm(forms.ModelForm):\n  class Meta:\n    model = Publisher\n    fields = \"__all__\"\n```", "```py\nclass PublisherForm(forms.ModelForm):\n  class Meta:\n    model = Publisher\n    exclude = ()\n```", "```py\nif is_create:\n  instance = None\nelse:\n  instance = get_object_or_404(Publisher, pk=pk)\nif request.method == \"POST\":\n  form = PublisherForm(request.POST, instance=instance)\n  if form.is_valid():\n    # we'll cover this branch soon\nelse:\n  form = PublisherForm(instance=instance)\n```", "```py\nif form.is_valid():\n  form.save()\n  return redirect(success_url)\n```", "```py\nif form.is_valid():\n  new_user = form.save(False)\n  new_user.is_admin = False\n  new_user.save()\n  return redirect(success_url)\n```", "```py\nclass PublisherForm(forms.ModelForm):\n  class Meta:\n    model = Publisher\n    fields = \"__all__\"\n    widgets = {\"name\": forms.TextInput\\\n               (attrs={\"placeholder\": \"The publisher's name.\"})}\n```", "```py\nwidgets = {\"password\": forms.PasswordInput}\n```", "```py\nclass PublisherForm(forms.ModelForm):\n  email_on_save = forms.BooleanField\\\n                  (required=False, \\\n                   help_text=\"Send notification email on save\")\n  class Meta:\n    model = Publisher\n    fields = \"__all__\"\n```", "```py\nif form.is_valid():\n  if form.cleaned_data.get(\"email_on_save\"):\n    send_email()\n      # assume this function is defined elsewhere\n  # save the instance regardless of sending the email or not\n  form.save()  \n  return redirect(success_url)\n```", "```py\n    from .models import Publisher\n    ```", "```py\n    class PublisherForm(forms.ModelForm):\n    ```", "```py\n    class PublisherForm(forms.ModelForm):\n      class Meta:\n        model = Publisher\n        fields = \"__all__\"\n    ```", "```py\n    from .forms import PublisherForm, SearchForm\n    ```", "```py\n    from django.shortcuts import render, get_object_or_404, redirect\n    ```", "```py\n    from .models import Book, Contributor, Publisher\n    ```", "```py\n    from django.contrib import messages\n    ```", "```py\n    def publisher_edit(request, pk=None):\n    ```", "```py\n    def publisher_edit(request, pk=None):\n      if pk is not None:\n        publisher = get_object_or_404(Publisher, pk=pk)\n      else:\n        publisher = None\n    ```", "```py\n    def publisher_edit(request, pk=None):\n      …\n      if request.method == \"POST\":\n        form = PublisherForm(request.POST, instance=publisher)\n        if form.is_valid():\n        updated_publisher = form.save()\n          if publisher is None:\n            messages.success\\\n            (request, \"Publisher \\\"{}\\\" was created.\"\\\n                      .format(updated_publisher))\n          else:\n            messages.success\\\n            (request, \"Publisher \\\"{}\\\" was updated.\"\\\n                      .format(updated_publisher))\\\n          return redirect(\"publisher_edit\", updated_publisher.pk)\n    ```", "```py\n    def publisher_edit(request, pk=None):\n      …\n      if request.method == \"POST\":\n        …\n      else:\n        form = PublisherForm(instance=publisher)\n    ```", "```py\n    def publisher_edit(request, pk=None):\n      …\n      return render(request, \"form-example.html\", \\\n                    {\"method\": request.method, \"form\": form}) \n    ```", "```py\n    urlpatterns = [\n      …\n      path('publishers/<int:pk>/',views.publisher_edit, \\\n            name='publisher_edit'),\\\n      path('publishers/new/',views.publisher_edit, \\\n            name='publisher_create')]\n    ```", "```py\n    {% for message in messages %}\n    <p><em>{{ message.level_tag|title }}:</em> {{ message }}</p>\n    {% endfor %}\n    ```", "```py\n    <form method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <p>\n        <input type=\"submit\" value=\"Submit\">\n      </p>\n    </form>\n    ```", "```py\n    <div class=\"alert alert-{% if message.level_tag   == 'error' %}danger{% else %}{    {message.level_tag }}{% endif %}\"\n        role=\"alert\">\n      {{ message }}\n    </div>\n    ```"]