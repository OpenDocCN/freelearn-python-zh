- en: Chapter 6. Presentations and More
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Oh, one more presentation to the boss today! Can I simply not run a program
    and generate a presentation instead of doing it manually all over again? Worry
    no more; this chapter might just resolve all your worries. We look at various
    ways you can create presentations of your own in an automated way using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading PowerPoint presentations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and updating presentations, and adding slides
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing with layouts, placeholders, and textboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with different shapes and adding tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual treat with pictures and charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating weekly sales reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to reporting data or work management status or presenting an idea,
    PowerPoint presentations are one of your best bets. PowerPoint allows you to make
    interactive multimedia slides to present information. Ask a few of your friends
    from the business world; professionals almost think in presentations, meaning that
    the thought process gets structured around the slides of **PowerPoint** presentation
    (in short, **PPT**).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we discuss the generation of custom PowerPoint presentations
    with Python. You learn about reading, writing, and manipulating PPT files. PPTs
    offer capabilities of adding tables, hosting images, and presenting charts, among
    others; we will learn to work with all these interesting features using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout the chapter, we will work with a binary file format: `.pptx`. PPTX
    presentations are different from PPT versions, in that they use Microsoft Open
    XML format that was introduced in Microsoft Office 2007.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The recipes in this chapter will focus on Python modules that help us perform
    multiple operations on PPTX files; specifically, we will focus on the following
    Python modules in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`python-pptx` ([https://python-pptx.readthedocs.io/en/latest/index.html](https://python-pptx.readthedocs.io/en/latest/index.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas` ([http://pandas.pydata.org/](http://pandas.pydata.org/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that while we try to cover all the major operations that can be done with
    respect to PowerPoint presentations, there is always the possibility to do more.
    So, I highly encourage playing around and learning multiple tricks with Python.
  prefs: []
  type: TYPE_NORMAL
- en: You could also use Win32 COM APIs from Windows to work on PPTs in the Windows
    operating system instead of using the `python-pptx` module (which we will use
    in this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Reading PowerPoint presentations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Based on our experience with PowerPoint presentations, we know a PPT file contains
    slides, with each slide containing details that need to be presented to the audience.
    This recipe will show you how to extract information from PPTX files with the
    `python-pptx` module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To step through this recipe, we will need to install the `python-pptx` module.
    Let''s install the module with Python `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installed the module, already? Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by creating a PPTX file with Microsoft PowerPoint 2013\. We'll use
    this file as a sample to learn how to read and extract data from the presentations.
    You'll also get the file if you download the code samples for this book. We call
    this file as `myprofile.pptx`; it contains information about the author of the
    book with two slides in it. The following screenshot shows the file contents:![How
    to do it...](img/image_07_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you look at the presentation, the first slide has two text items: the headline
    item is **Chetan Giridhar** and the subtitle is **World is full of knowledge..**..
    The second slide has more data; it has a different layout, and the title of the
    slide is **He wishes to**, containing all the four wishes of the author and a
    circular shape with the content, **This is circle of life**. Interesting!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On your computer, go to Terminal and use `vim` or choose your favorite editor.
    To read the PPT file, let''s first use Python code to create a presentation object
    for `myprofile.pptx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code snippet is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s good; now that we have the presentation object, let''s use it to get
    the slide objects. We know the presentation has two slides. The following code
    gets us the slide objects. Slides are represented as a Python list in the `slide`
    object and can be iterated over in a for loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code snippet uses the presentation object, `prs`, to retrieve
    the slide objects. The output of the code snippet is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'OK, that''s neat! Let''s go one level deeper and look at some of the attributes
    of the `slides` object. The following code prints a few attributes of the `slide`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe that the first slide''s layout is **Title Slide** and the next slide
    is **Title and Content**, which is indeed the case. We also print the `Slide Ids`
    and the `Open XML elements`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, every slide contains a few shapes. For instance, the first slide has two
    text placeholders, the title and the subtitle. In the second slide, we have two
    placeholders but have a circular shape as well. The following code prints this
    information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code snippet is as follows. You can observe that
    the first slide contains text frames, but the second slide also has an auto shape:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'OK, so now we have the slides, the slide layout, and the slide shapes. Let''s
    try to get the text content from both the slides and all the shapes. The following
    code does exactly what we need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the code example is as follows. It contains all the text from
    both the slides. These are termed as **text runs** in the `python-pptx` world:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we read the complete presentation and got the contents of both
    the slides.
  prefs: []
  type: TYPE_NORMAL
- en: We started by manually creating a PPTX file with Microsoft PowerPoint 2013 and
    used the `Presentation` class from the PPTX module to create an object of the
    `myprofilepptx` file, `prs`. Using this object, we got access to both the slides
    with the `prs.slides` method of the `presentation` object.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we used the `slides` object to get all the available shapes in both the
    slides with `slides.shapes`. Iterating over this object helped us to get the shapes
    such as `PLACEHOLDER` and `AUTO_SHAPE` from the slides. We will learn more about
    slides and shapes in the latter part of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We then used the `shape.has_text_frame` attribute to check whether the shape
    has a text frame and, if available, has got the `paragraphs` object from the text
    frame. The paragraph object's `runs` attribute contained the list of the actual
    text data, which was then stored in the array, `text_runs`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cool! So, we learnt many things in one recipe: presentation object, slides,
    layouts, shapes, text frames, and paragraphs. With this, we're in a great position
    to read the PPTX files.
  prefs: []
  type: TYPE_NORMAL
- en: All this is great, but hey, we'd like to create new PPTX files, right? And hopefully
    automate creating presentations? So, let's go ahead and see how that can be achieved
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and updating presentations, and adding slides
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We continue using the `python-pptx` module for the recipes in this section.
    So, we don't have to install any new modules. We will learn how to create a blank
    presentation and add slides to it and, of course, some content on it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with a very simple example of creating a new PPT with **Yo! Python**
    written on it. The following code helps us create the presentation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we run the preceding piece of code, it will create a PPTX file with the
    title as **Yo, Python!** and sub title as **Yes it is really awesome**. The following
    screenshot shows the contents of the slide:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Also, observe that the slide layout is that of the **Title Slide**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can also create a new presentation from an existing presentation. In the
    next code example, we take a PowerPoint template, create a new PPT, and add a
    slide to it with text content. We use the following template for this example:![How
    to do it...](img/image_07_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we run the following program on the template presentation, we get a new
    PPT, as shown in the next screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Slide one is updated with a title text, **Hello!**, and a new slide with the
    layout, title, and content is added with the text, **This is a paragraph**. The
    following screenshot shows the newly created presentation, `new_ppt.pptx`:![How
    to do it...](img/image_07_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learnt how to create presentations with Python. We achieved
    three different things in the preceding code snippets.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we used the default template to create a **Title Slide** and added title
    text and subtitle text to it. We achieved this with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Created a presentation object, `prs`, using the `Presentation` class of the
    `pptx` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `prs` object was then utilized to add a new slide with the help of the `add_slide()`
    method. Layout `0` was passed as an argument to `add_slide()`, which indicated
    that the new slide was of type `Title` and was referenced by variable `slide`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Title layout typically contains a title and subtitle. The contents of the title
    text were added with the `slide.shape.title.text` attribute, while the contents
    of the subtitle were added with the help of `slide.placeholders.text` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we created a new presentation from an existing PPT template. The template
    was stored in the `sample_ppt.pptx` file and already contained a blank layout
    slide. This is what we achieved in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a presentation object `prs` from the template PPT. We then used the
    presentation object to reference the first slide, `prs.slides[0]`, which was stored
    in the variable, `first_slide`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `first_slide` object was then used to access the first shape, which is the
    title text. Title text was then updated to content **Hello!**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Later, we added a new slide with **Layout** one (**Title and Content**) and
    referenced it with the `slide` variable. The newly created slide's first shape
    was a text frame to which the content **This is a paragraph** was added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the end, we saved the newly created presentation under the name `new_ppt.pptx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cool! So, we learnt how to create new presentations from scratch, update an
    existing template, add new content to it and create a presentation, and lastly,
    create presentations with different types of layout and bullet data. In the next
    recipe, let's look at what else we can do with presentations using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Playing with layouts, placeholders, and textboxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's move on to do some interesting operations on PPTs. Importantly, we'll
    discuss operations that are most frequently used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No specific modules are required for this recipe; we would use the `python-pptx`
    module that was installed for the earlier recipes. In this recipe, we will work
    with different slide layouts and play with shapes and text.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go further and use a different type of slide layout, along with bulleted
    content in it. The following code snippet does what we need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we run the preceding Python code, we get a new PPT with a *two content*
    slide with bulleted content added to it. The following screenshot shows the output
    of the new presentation that was created. Nice, right? We can add bulleted content
    to the placeholders on the left-hand side of the slide:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_006.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now, let''s get creative and add another type of shape to our slide, that is,
    the textbox. The following code snippet adds a textbox to our slide:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following screenshot shows how the newly created PPTX file looks. If you
    carefully look at it, you'll notice that we added a text box and the second text
    inside the textbox is in bold, italics, and the font size is 30.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_007.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we used the blank template to add a two-content layout slide.
    Let''s see what else we did on top of it:'
  prefs: []
  type: TYPE_NORMAL
- en: In the code, we used `prs.slide_layouts[3]` to convey the presentation object,
    `prs`, to add a slide with the two content layout. The two-content layout also
    has a title text, which was updated to **Adding a Two Content Slide** by using
    the `shapes.title` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we looked at the *placeholders*. A placeholder is a preformatted container
    to which content can be added. Placeholders are categories of shape, which means
    multiple shapes can have placeholders. For instance, an autoshape (circle, as
    seen in the first recipe) is a placeholder; a picture or graphic frame can be
    a placeholder. We have two placeholders, one on the left and one on the right,
    in a two-content slide. We targeted the left one with `shapes.placeholders[1]`
    and added a first line **This is line 1.** to the text frame referenced by `shapes.placeholders[1].text_frame`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then added bulleted lines by adding a paragraph to `text_frame` with the
    `add_paragraph()` method and added the text **Again a line 2...** at level one
    and **And this is line 3...** at level two.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Basically, not all shapes contain text, but finding if a shape supports text
    can be done using the `shape.has_text_frame` attribute. In this recipe, we know
    our shape contains a placeholder that can handle text content. So, we used the
    `text_frame` attribute to add the first line of text. Similarly, we used the `add_paragraph()`
    method to add the subsequent lines in bulleted fashion using the `level` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the end, we saved the new presentation under the name, `two_content.pptx`.
    If you look at the screenshot, we see the bulleted look on the text added to the
    left text frame on the slide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we added a textbox to our presentation. Textboxes are very commonly used
    in presentations. People use textboxes to highlight points and use the resizing
    and moving capabilities of textboxes to good effect. Here''s what we did in our
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: We first created a blank slide with layout six and added it to the presentation
    with the `add_slide()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we created a textbox with the appropriate dimensions. We used `Inches(2)`
    for the left and top coordinates and then managed the width and height with `Inches(5)`
    and `Inches(1)` respectively. Inches here map to the same real world entity where
    *1 inch = 2.54 cm*. We added this textbox to the slide with the `add_textbox()`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the textbox object, we added a text frame object `tf` with the `text_frame`
    attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As seen in the previous recipe also, we added the text **Wow! I'm inside a textbox**
    to the text frame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We followed it up by adding a paragraph with the `add_paragraph()` method and
    adding the text **Adding a new text** to this paragraph and making the text bold,
    italics, and increasing its font to `30`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the end, we saved the file as `textBox.pptx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You learned about placeholders and text frames. You learnt how to add text to
    our slides using text frames and paragraphs. You also learnt about adding a textbox
    of the required dimensions to our slide deck.
  prefs: []
  type: TYPE_NORMAL
- en: Working with different shapes and adding tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OK, let's go ahead and make our presentations more interesting by adding different
    shapes, tables, or even pictures! Why wait? Let's quickly get into action.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No specific modules are required for this recipe; we will use the `python-pptx`
    module that was installed for the earlier recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will add a few shapes to our presentation. Shapes are very
    useful in presentations as they can represent real world objects, can indicate
    relations, and provide great visual feedback to the audience (who are listening
    to the presentation). In this recipe, we add a **Home** button and then a **Rectangular
    Callout** to show where our **Home** button is. We''ll also fill custom color
    into our `Callout` element. The following code adds the shapes to the presentation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After running the preceding code, we get a new presentation, `shapes.pptx`,
    which looks like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_008.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'That was neat! Now let''s see if we can add a table to our presentation. Again,
    tables are used in presentations to manifest data and make informed decisions.
    Speakers (persons responsible for making the presentation) often bring out facts
    about certain projects through tables and solicit discussions or feedback from
    audiences. Adding tables in presentations is trivial with Python; refer to the
    following code. In this, we add a table containing the student information for
    three students:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we run this code snippet, you''ll see a table generated in the presentation
    containing all the student data. Refer to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the first code snippet, we added a couple of shapes to our presentation
    by performing the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: We added shapes with the help of the `add_shapes()` method, which takes the
    type of shape as input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our code, we take the help of the `MSO_SHAPE` enumeration (this has all the
    shapes listed) and pick up two shapes, namely, `MSO_SHAPE.RECTANGULAR_CALLOUT`
    and `MSO_SHAPE.ACTION_BUTTON_HOME`. Just like in the case of a textbox, the `add_shapes()`
    method also needs the size of the shape defined with the `Inches()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also managed to define the custom color for the callout shape with the help
    of the `fill` method from the `SlideShape` class. The `shape.fill.fore_color.rgb`
    attribute was used to set the color of the callout shape. The RGB color used was
    `1E90FF`, which is light blue color, as seen in the screenshot. We also set the
    color brightness with the help of the `shape.fill.fore_color.brightness` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Of course, we added text to both the shapes by setting the `shape.text` attribute.
    In the end, we saved the file as `shapes.pptx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the second example, we added a nice table to our presentation with the help
    of Python code. This is how we did it:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a presentation with **Title only** layout and added a single slide
    to it using the `add_slide()` method. We also defined the title of the slide as
    **Students Data**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the table is as simple as adding shapes. We used the method `add_table()`
    to add a table to the presentation. As expected, the `add_table()` method expects
    a number of rows and columns as input, and at the same time, expects the size
    of the table. In our example, we have set the rows to `4` and columns to be `3`
    and the size of the table with coordinates `Inches(2)`, `Inches(2)`, `Inches(6)`,
    and `Inches(8)`, which means the table is located 2 inches from the left, 2 inches
    below the top of slide, the width of the table is 6 inches, and the height is
    1.2 inches (15.3cm x 3.1cm).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined our table to have three columns; the width of each of those is set
    to 2 inches. We set that using the `table.columns.width` attribute. We also set
    the text of the column headings to **Sr. No**, **Student Name**, and **Student
    Id**, with the help of `table.cell(row, column).text` attribute. Note that here,
    the row value is always `0`, which indicates the first row or the title row, and
    the column varies from `0` to `2`, indicating three columns.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the purpose of this example, we used a predefined dictionary, `students`,
    which has information such as student name and student ID. We iterate through
    all the student information and update the cells of the table to fill in the table
    with the appropriate information, hence the table with all the student data, as
    observed in the screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the end, we saved the presentation as `table.pptx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nice! What else can we do with presentations using Python, you'd ask? Or a few
    of you are already expecting me to get graphical and talk about charts or pictures,
    aren't you? Oh yes, we'll get that covered as well. Let's get graphical, so to
    speak!
  prefs: []
  type: TYPE_NORMAL
- en: Visual treat with pictures and charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes, it's time. In this section, we will look at adding pictures and charts
    to your presentations. They say that a picture speaks a thousand words, and truly,
    you must have seen presentations with a lot of pictures and graphs in them. They
    are there for a reason. You can convey as much information as possible in one
    slide. Both charts and pictures have this power, and without learning about them,
    this chapter remains incomplete. So, let's jump in!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No specific modules are required for this recipe; we will use the `python-pptx`
    module that was installed for the earlier recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We divide this recipe into two parts. First, we will cover the adding of pictures
    to our slide, and in the next, we'll deal with charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet helps us add pictures to our slide:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we run the preceding program, we get a slide with two pictures on it,
    as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_010.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now let''s see if we can write Python code to add a chart to our slide. The
    `python-pptx` module supports multiple types of charts, such as line chart, bar
    chart, and bubble chart, but my favorite chart always has been a pie chart. How
    about adding one in our recipe? Yes, the following code adds a pie chart to the
    presentation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding program is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_011.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the first code snippet, we added two images to the slide. And how did we
    do it? As logical as it sounds, we used the `add_picture()` method. Isn''t the
    library nice? Add a textbox with `add_textbox()`, add a slide with `add_slide()`
    and now add a picture with `add_picture()`. Let''s take a deeper look at what
    we did in the first part of the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: As expected, `add_picture()` expects the path from where the image needs to
    be added to the presentation, and just like other methods, the coordinates and
    size of the picture. In our example, we added two pictures. The first picture
    is `python.org` and we configured it to show up 2 inches from the left and 2 inches
    from the top. We also configured the size of the picture to have a width of 3
    inches and height of 2 inches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second picture we added was `learn_python.jpeg`; it was configured to be
    2 inches from left, 5 inches from the top, with a height of 2 inches and width
    to be same as the width of the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our example, we created a new slide with a blank slide layout and added both
    the pictures, and in the end, we saved the file as `picture.pptx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the second part, we added a pie chart to our slide deck. We did this in
    the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: We added a slide and set the title text to **Data based on regions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then created an object of the class, `ChartData()`, and named it `chart_data`.
    We defined the categories for our pie chart with the `chart_data.categories` attribute
    and set it to an array of regions `['West', 'East', 'North', 'South']`. We also
    configured the `chart_data` object with data for all the regions; we did that
    with the `add_series()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'How did we add this chart on the presentation slide? Yes, you guessed it: the
    `add_chart()` method does that for us. The `add_chart()` method expects the type
    of chart as one of the arguments, and like other methods, it expects the dimensions.
    In our code, we also set the attributes `has_legend`, `number_format`, and data
    labels to make the pie chart look great!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cool! So we learnt many interesting things in this chapter. But what better
    fun than applying this knowledge to solve a real world use case. Did you hear
    Alex has some issues with his weekly sales report?
  prefs: []
  type: TYPE_NORMAL
- en: Automating weekly sales reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alex is the director of sales at Innova 8 Inc that sells laptops and business
    software. He has a bunch of sales managers reporting to him. He is responsible
    for measuring the success of his subordinates and reporting this to the VP of
    sales on a weekly basis. Alex''s boss is majorly interested in two things: the
    revenue generated from business accounts and the performance of his sales managers.
    Alex needs to report these numbers in the weekly staff meeting. He uses PowerPoint
    as a tool to collate and represent the data to the VP of sales on a weekly basis.'
  prefs: []
  type: TYPE_NORMAL
- en: However, Alex has a few problems. The data that he gets from his sales managers
    is often in an Excel sheet. Also, the data is so dynamic that it changes till
    the last moment based on whether the customer paid just before the meeting. It
    becomes difficult for Alex to create the presentation in advance for the meeting
    due to this variability. Also, it is tedious for Alex to analyze the data and
    come up with charts--a completely manual process.
  prefs: []
  type: TYPE_NORMAL
- en: Can you help Alex with what you learnt in this chapter?
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you analyze the problems, we can automate the complete process for Alex.
    Alex's data is in an Excel sheet; we can easily read this data with the `pandas`
    module of Python. Also, we can create a new presentation with the `python-pptx`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps can help solve Alex''s problem:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the contents of the Excel sheet and get the required data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new PowerPoint presentation and add two slides to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the first slide, create a pie chart that shows the revenue figures for different
    accounts and compare them based on percentages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the second slide, add a bar chart comparing the performance of sales managers
    based on revenue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this recipe, let''s install the `pandas` module. We do that with our favorite
    utility Python `pip`. We use the following command for installing `pandas`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a trivial example of working with Excel sheets using `pandas`. The `pandas`
    module has comprehensive set of APIs that can be used for data analysis, filtering,
    and aggregation. We talk about all this and much more in the chapter that deals
    with data analysis and visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we're ready, let's look at the code that will help Alex automate this
    process.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by looking at the Excel sheet that has the weekly sales data. We
    call this file as `Sales_Data.xlsx` and it looks like the following screenshot:![How
    to do it...](img/image_07_012.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s look at the code snippet that will help Alex read this data and
    generate the exact presentation he needs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, if we run the preceding piece of code, we get a PowerPoint presentation
    with all the necessary charts and data points that Alex needs in his weekly sales
    report. Look at the screenshots for all the slides of the presentation. Exactly
    what the doctor ordered for Alex! The first slide is the title slide of the presentation
    and is titled as **Weekly Sales Report <Date>**. It also mentions Alex's name
    and e-mail address as the author of this presentation:![How to do it...](img/image_07_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The second slide shows the revenue distribution across accounts with the help
    of a pie chart:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_014.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: And finally, the last slide compares the performance of all sales managers with
    the help of a bar chart. Cool, huh?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_015.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding example, we started by creating a reader object for the Excel
    sheet, `Sales_Data.xlsx` containing all the sales data. We achieved this by using
    the `ExcelFile()` method of the `pandas` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we created a new presentation by utilizing the `sample_ppt.pptx` file.
    If you recollect, our sample presentation has a title slide without any text on
    it. So, in our code snippet, we updated this title slide by setting the title
    to **Weekly Status Report <YYYY** **-** **MM** **-** **YY>**. We also added a
    subtitle that contained the name of the author, in this case **Author: Alex alex@innova8**.
    We set these titles with the help of placeholders on the text frame.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we added a new blank slide with layout six to our new presentation. We
    used this slide to add the revenue data for the accounts. We achieved this with
    the help of the `prs.slides.add_slide()` method. However, our data is in an Excel
    sheet, and hence, we use the `reader` object of the Excel sheet to read the **Sales**
    worksheet. The **Sales** worksheet has all the data Alex uses for his analysis.
    The pandas module reads Excel data in the form of a data frame (data stored in
    the matrix format). If you look at the Excel sheet screenshot, we have two columns,
    `Price` and `Quantity`, which indicates the quantity of laptops or software licenses
    sold and the price per unit. So, in our code, we first multiply these values to
    get the revenue for each entry in the Excel record and store it in the data frame
    with the column name `total`. Now, we don't just need the total revenue figure;
    we also need to categorize it based on the account. With data frames, getting
    this information is really trivial; it's like running an SQL query. If you look
    at the code, we have grouped the data frame by `Account` and summed all the `total`
    data (obtained from quantity * price) and used these data points to plot a pie
    chart so that its easier for Alex to compare the revenue for every account as
    a percentage of the total revenue. For grouping the data, we used the `groupby()`
    method and then totaled the revenue with the `sum()` method and plotted the pie
    chart with the `plot()` method. Again, it's not useful if the chart is available
    in `pandas` and not in PowerPoint, so we save the chart as a PNG file in `result.png`;
    we did that with the `savefig()` method of `pandas`. In the end, we added this
    picture file to our presentation using the `add_picture()` method and managed
    the coordinates and size of the picture so that it is visible and looks great.
  prefs: []
  type: TYPE_NORMAL
- en: Alex also needs to plot the performance of all his sales managers. For this,
    we used the same method to read the Excel sheet data and stored it in the form
    of data frames. For this problem though, we grouped the data by sales managers
    and got the total revenue attributed to each of them. Here too, we used the `groupby()`
    method but on the `Manager` column of the Excel data. We stored the names of all
    the sales managers in the array `managers`, iterated through all the records for
    each sales manager, got the sales figures for each of them, and added it to a
    list, `sales`. We then converted this list to a tuple to be used later. Just like
    we saw in the previous recipe, we created a chart data object using the `ChartData()`
    method, created a clustered bar chart with the 'sales' tuple as input, and added
    the chart to the second slide of the presentation with the `add_chart()` method.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we saved this newly created presentation as `sales.pptx`, which
    acts as a weekly sales report for Alex. That's it!
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed the recipes in this chapter, the examples and the use cases
    we discussed. I'm sure your hands are itching to automate your presentations as
    well. When do I drop by your desk to appreciate your work?
  prefs: []
  type: TYPE_NORMAL
