- en: Chapter 6. Presentations and More
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 演示文稿及其他
- en: Oh, one more presentation to the boss today! Can I simply not run a program
    and generate a presentation instead of doing it manually all over again? Worry
    no more; this chapter might just resolve all your worries. We look at various
    ways you can create presentations of your own in an automated way using Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，今天还要给老板做一个演示文稿！我能不能简单地运行一个程序生成演示文稿，而不是手动从头再来？别再担心了；这一章可能正是解决您所有担忧的方法。我们将探讨您可以使用Python以自动化方式创建自己演示文稿的各种方法。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下菜谱：
- en: Reading PowerPoint presentations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取PowerPoint演示文稿
- en: Creating and updating presentations, and adding slides
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和更新演示文稿，以及添加幻灯片
- en: Playing with layouts, placeholders, and textboxes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩转布局、占位符和文本框
- en: Working with different shapes and adding tables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同形状和添加表格
- en: Visual treat with pictures and charts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片和图表的视觉盛宴
- en: Automating weekly sales reports
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化每周销售报告
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: When it comes to reporting data or work management status or presenting an idea,
    PowerPoint presentations are one of your best bets. PowerPoint allows you to make
    interactive multimedia slides to present information. Ask a few of your friends
    from the business world; professionals almost think in presentations, meaning that
    the thought process gets structured around the slides of **PowerPoint** presentation
    (in short, **PPT**).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到报告数据或工作管理状态或展示一个想法时，PowerPoint演示文稿是您最好的选择之一。PowerPoint允许您制作交互式多媒体幻灯片来展示信息。问问您商业界的几位朋友；专业人士几乎都是在演示文稿中思考，这意味着思维过程是围绕**PowerPoint**演示文稿的幻灯片结构化的（简称为**PPT**）。
- en: In this chapter, we discuss the generation of custom PowerPoint presentations
    with Python. You learn about reading, writing, and manipulating PPT files. PPTs
    offer capabilities of adding tables, hosting images, and presenting charts, among
    others; we will learn to work with all these interesting features using Python.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论使用Python生成自定义PowerPoint演示文稿。您将了解如何读取、写入和操作PPT文件。PPT提供了添加表格、托管图像和展示图表等功能；我们将学习如何使用Python来操作所有这些有趣的功能。
- en: 'Throughout the chapter, we will work with a binary file format: `.pptx`. PPTX
    presentations are different from PPT versions, in that they use Microsoft Open
    XML format that was introduced in Microsoft Office 2007.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用二进制文件格式：`.pptx`。与PPT版本不同，PPTX演示文稿使用的是自Microsoft Office 2007引入的Microsoft
    Open XML格式。
- en: 'The recipes in this chapter will focus on Python modules that help us perform
    multiple operations on PPTX files; specifically, we will focus on the following
    Python modules in this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的菜谱将专注于帮助我们执行多个PPTX文件操作的Python模块；具体来说，我们将在本章中关注以下Python模块：
- en: '`python-pptx` ([https://python-pptx.readthedocs.io/en/latest/index.html](https://python-pptx.readthedocs.io/en/latest/index.html))'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python-pptx` ([https://python-pptx.readthedocs.io/en/latest/index.html](https://python-pptx.readthedocs.io/en/latest/index.html))'
- en: '`pandas` ([http://pandas.pydata.org/](http://pandas.pydata.org/))'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas` ([http://pandas.pydata.org/](http://pandas.pydata.org/))'
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that while we try to cover all the major operations that can be done with
    respect to PowerPoint presentations, there is always the possibility to do more.
    So, I highly encourage playing around and learning multiple tricks with Python.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管我们试图涵盖与PowerPoint演示文稿相关的所有主要操作，但总是有可能做更多。因此，我强烈建议您尝试多种技巧，并用Python进行实践。
- en: You could also use Win32 COM APIs from Windows to work on PPTs in the Windows
    operating system instead of using the `python-pptx` module (which we will use
    in this chapter).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用Windows的Win32 COM API在Windows操作系统中处理PPT，而不是使用`python-pptx`模块（我们将在本章中使用）。
- en: Reading PowerPoint presentations
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取PowerPoint演示文稿
- en: Based on our experience with PowerPoint presentations, we know a PPT file contains
    slides, with each slide containing details that need to be presented to the audience.
    This recipe will show you how to extract information from PPTX files with the
    `python-pptx` module.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 基于我们对PowerPoint演示文稿的经验，我们知道PPT文件包含幻灯片，每张幻灯片都包含需要向观众展示的详细信息。这个菜谱将向您展示如何使用`python-pptx`模块从PPTX文件中提取信息。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To step through this recipe, we will need to install the `python-pptx` module.
    Let''s install the module with Python `pip`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要逐步完成这个菜谱，我们需要安装`python-pptx`模块。让我们使用Python的`pip`来安装这个模块：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installed the module, already? Let's get started!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 已经安装了模块吗？让我们开始吧！
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We start by creating a PPTX file with Microsoft PowerPoint 2013\. We'll use
    this file as a sample to learn how to read and extract data from the presentations.
    You'll also get the file if you download the code samples for this book. We call
    this file as `myprofile.pptx`; it contains information about the author of the
    book with two slides in it. The following screenshot shows the file contents:![How
    to do it...](img/image_07_001.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先使用 Microsoft PowerPoint 2013 创建一个 PPTX 文件。我们将使用这个文件作为样本来学习如何从演示文稿中读取和提取数据。如果你下载了这本书的代码示例，你也会得到这个文件。我们称这个文件为`myprofile.pptx`；它包含有关本书作者的信息，其中包含两张幻灯片。以下截图显示了文件内容：![如何做...](img/image_07_001.jpg)
- en: 'If you look at the presentation, the first slide has two text items: the headline
    item is **Chetan Giridhar** and the subtitle is **World is full of knowledge..**..
    The second slide has more data; it has a different layout, and the title of the
    slide is **He wishes to**, containing all the four wishes of the author and a
    circular shape with the content, **This is circle of life**. Interesting!'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你查看演示文稿，第一张幻灯片有两个文本项：标题项是**Chetan Giridhar**，副标题是**世界充满知识..**.. 第二张幻灯片有更多数据；它有不同的布局，幻灯片的标题是**他希望**，包含作者的所有四个愿望和一个圆形内容，**这是生命的循环**。很有趣！
- en: 'On your computer, go to Terminal and use `vim` or choose your favorite editor.
    To read the PPT file, let''s first use Python code to create a presentation object
    for `myprofile.pptx`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的电脑上，转到终端并使用 `vim` 或选择你喜欢的编辑器。为了读取 PPT 文件，让我们首先使用 Python 代码为 `myprofile.pptx`
    创建一个演示文稿对象：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the preceding code snippet is as follows:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码片段的输出如下：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That''s good; now that we have the presentation object, let''s use it to get
    the slide objects. We know the presentation has two slides. The following code
    gets us the slide objects. Slides are represented as a Python list in the `slide`
    object and can be iterated over in a for loop:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的；现在我们有了演示文稿对象，让我们使用它来获取幻灯片对象。我们知道演示文稿有两张幻灯片。以下代码获取了幻灯片对象。幻灯片在`slide`对象中以 Python
    列表的形式表示，并且可以在 for 循环中迭代：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code snippet uses the presentation object, `prs`, to retrieve
    the slide objects. The output of the code snippet is as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述代码片段使用演示文稿对象`prs`来检索幻灯片对象。代码片段的输出如下：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'OK, that''s neat! Let''s go one level deeper and look at some of the attributes
    of the `slides` object. The following code prints a few attributes of the `slide`
    object:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，这很整洁！让我们再深入一层，看看`slides`对象的一些属性。以下代码打印了`slide`对象的一些属性：
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Observe that the first slide''s layout is **Title Slide** and the next slide
    is **Title and Content**, which is indeed the case. We also print the `Slide Ids`
    and the `Open XML elements`:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意到第一张幻灯片的布局是**标题幻灯片**，下一张幻灯片是**标题和内容**，这确实是如此。我们还打印了`幻灯片 ID`和`Open XML 元素`：
- en: '[PRE6]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, every slide contains a few shapes. For instance, the first slide has two
    text placeholders, the title and the subtitle. In the second slide, we have two
    placeholders but have a circular shape as well. The following code prints this
    information:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，每个幻灯片都包含一些形状。例如，第一张幻灯片有两个文本占位符，标题和副标题。在第二张幻灯片中，我们有两个占位符，但还有一个圆形形状。以下代码打印了这些信息：
- en: '[PRE7]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of the preceding code snippet is as follows. You can observe that
    the first slide contains text frames, but the second slide also has an auto shape:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码片段的输出如下。你可以观察到第一张幻灯片包含文本框，但第二张幻灯片也有一个自动形状：
- en: '[PRE8]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'OK, so now we have the slides, the slide layout, and the slide shapes. Let''s
    try to get the text content from both the slides and all the shapes. The following
    code does exactly what we need:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，所以现在我们有了幻灯片、幻灯片布局和幻灯片形状。让我们尝试从两张幻灯片和所有形状中获取文本内容。以下代码正好做到了这一点：
- en: '[PRE9]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the code example is as follows. It contains all the text from
    both the slides. These are termed as **text runs** in the `python-pptx` world:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例的输出如下。它包含了两张幻灯片上的所有文本。在`python-pptx`的世界里，这些被称为**文本运行**：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we read the complete presentation and got the contents of both
    the slides.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们读取了整个演示文稿，并获取了两张幻灯片的内容。
- en: We started by manually creating a PPTX file with Microsoft PowerPoint 2013 and
    used the `Presentation` class from the PPTX module to create an object of the
    `myprofilepptx` file, `prs`. Using this object, we got access to both the slides
    with the `prs.slides` method of the `presentation` object.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用 Microsoft PowerPoint 2013 手动创建了一个 PPTX 文件，并使用 PPTX 模块的 `Presentation`
    类创建了一个 `myprofilepptx` 文件的 `prs` 对象。使用此对象，我们通过 `presentation` 对象的 `prs.slides`
    方法获得了对幻灯片的访问权限。
- en: Next, we used the `slides` object to get all the available shapes in both the
    slides with `slides.shapes`. Iterating over this object helped us to get the shapes
    such as `PLACEHOLDER` and `AUTO_SHAPE` from the slides. We will learn more about
    slides and shapes in the latter part of the chapter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用了 `slides` 对象来获取所有可用的形状，包括 `slides.shapes` 中的幻灯片。遍历此对象帮助我们获取幻灯片中的形状，如
    `PLACEHOLDER` 和 `AUTO_SHAPE`。我们将在本章的后续部分学习更多关于幻灯片和形状的内容。
- en: We then used the `shape.has_text_frame` attribute to check whether the shape
    has a text frame and, if available, has got the `paragraphs` object from the text
    frame. The paragraph object's `runs` attribute contained the list of the actual
    text data, which was then stored in the array, `text_runs`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用了 `shape.has_text_frame` 属性来检查形状是否有文本框架，如果有，则从文本框架中获取 `paragraphs` 对象。段落对象的
    `runs` 属性包含了实际的文本数据列表，然后这些数据被存储在数组 `text_runs` 中。
- en: There's more...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Cool! So, we learnt many things in one recipe: presentation object, slides,
    layouts, shapes, text frames, and paragraphs. With this, we're in a great position
    to read the PPTX files.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！所以，我们在一个菜谱中学习了很多东西：演示文稿对象、幻灯片、布局、形状、文本框架和段落。有了这些，我们处于一个很好的位置来读取 PPTX 文件。
- en: All this is great, but hey, we'd like to create new PPTX files, right? And hopefully
    automate creating presentations? So, let's go ahead and see how that can be achieved
    in Python.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都很棒，但是嘿，我们想要创建新的 PPTX 文件，对吧？并且希望自动化创建演示文稿？那么，让我们继续看看如何在 Python 中实现这一点。
- en: Creating and updating presentations, and adding slides
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和更新演示文稿，以及添加幻灯片
- en: We continue using the `python-pptx` module for the recipes in this section.
    So, we don't have to install any new modules. We will learn how to create a blank
    presentation and add slides to it and, of course, some content on it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们继续使用 `python-pptx` 模块。因此，我们不需要安装任何新的模块。我们将学习如何创建一个空白演示文稿并将其添加到幻灯片中，当然，还有一些内容。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s start with a very simple example of creating a new PPT with **Yo! Python**
    written on it. The following code helps us create the presentation:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从创建一个带有**Yo! Python**字样的非常简单的示例 PPT 开始。以下代码帮助我们创建演示文稿：
- en: '[PRE11]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we run the preceding piece of code, it will create a PPTX file with the
    title as **Yo, Python!** and sub title as **Yes it is really awesome**. The following
    screenshot shows the contents of the slide:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们运行前面的代码片段，它将创建一个标题为**Yo, Python!**，副标题为**是的，它真的很棒**的 PPTX 文件。以下截图显示了幻灯片的内容：
- en: '![How to do it...](img/image_07_003.jpg)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_07_003.jpg)'
- en: Also, observe that the slide layout is that of the **Title Slide**.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，请注意幻灯片布局是**标题幻灯片**的布局。
- en: We can also create a new presentation from an existing presentation. In the
    next code example, we take a PowerPoint template, create a new PPT, and add a
    slide to it with text content. We use the following template for this example:![How
    to do it...](img/image_07_004.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也可以从一个现有的演示文稿中创建一个新的演示文稿。在下一个代码示例中，我们使用 PowerPoint 模板创建一个新的 PPT，并向其中添加了一个带有文本内容的幻灯片。我们使用以下模板进行此示例：![如何操作...](img/image_07_004.jpg)
- en: 'If we run the following program on the template presentation, we get a new
    PPT, as shown in the next screenshot:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们在模板演示文稿上运行以下程序，我们将得到一个新的 PPT，如下一张截图所示：
- en: '[PRE12]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Slide one is updated with a title text, **Hello!**, and a new slide with the
    layout, title, and content is added with the text, **This is a paragraph**. The
    following screenshot shows the newly created presentation, `new_ppt.pptx`:![How
    to do it...](img/image_07_005.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一张幻灯片更新了标题文本**Hello!**，并添加了一个带有布局、标题和内容的新的幻灯片，文本为**这是一个段落**。以下截图显示了新创建的演示文稿`new_ppt.pptx`：![如何操作...](img/image_07_005.jpg)
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this section, we learnt how to create presentations with Python. We achieved
    three different things in the preceding code snippets.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用 Python 创建演示文稿。在前面的代码片段中，我们实现了三个不同的功能。
- en: 'First, we used the default template to create a **Title Slide** and added title
    text and subtitle text to it. We achieved this with the following steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用默认模板创建了一个**标题幻灯片**，并向其中添加了标题文本和副标题文本。我们通过以下步骤实现了这一点：
- en: Created a presentation object, `prs`, using the `Presentation` class of the
    `pptx` module.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `pptx` 模块的 `Presentation` 类创建了一个演示文稿对象 `prs`。
- en: The `prs` object was then utilized to add a new slide with the help of the `add_slide()`
    method. Layout `0` was passed as an argument to `add_slide()`, which indicated
    that the new slide was of type `Title` and was referenced by variable `slide`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用 `prs` 对象通过 `add_slide()` 方法添加了一个新的幻灯片。将布局 `0` 作为参数传递给 `add_slide()`，这表示新幻灯片是类型
    `Title`，并由变量 `slide` 引用。
- en: Title layout typically contains a title and subtitle. The contents of the title
    text were added with the `slide.shape.title.text` attribute, while the contents
    of the subtitle were added with the help of `slide.placeholders.text` attribute.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标题布局通常包含一个标题和副标题。标题文本的内容是通过 `slide.shape.title.text` 属性添加的，而副标题的内容是通过 `slide.placeholders.text`
    属性添加的。
- en: 'Next, we created a new presentation from an existing PPT template. The template
    was stored in the `sample_ppt.pptx` file and already contained a blank layout
    slide. This is what we achieved in this recipe:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从一个现有的 PPT 模板中创建了一个新的演示文稿。该模板存储在 `sample_ppt.pptx` 文件中，并且已经包含了一个空白布局幻灯片。这是我们在这个菜谱中实现的内容：
- en: We created a presentation object `prs` from the template PPT. We then used the
    presentation object to reference the first slide, `prs.slides[0]`, which was stored
    in the variable, `first_slide`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从模板 PPT 中创建了一个演示文稿对象 `prs`。然后我们使用演示文稿对象来引用第一个幻灯片，`prs.slides[0]`，它存储在变量 `first_slide`
    中。
- en: The `first_slide` object was then used to access the first shape, which is the
    title text. Title text was then updated to content **Hello!**
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用 `first_slide` 对象访问第一个形状，即标题文本。标题文本随后更新为内容 **Hello!**
- en: Later, we added a new slide with **Layout** one (**Title and Content**) and
    referenced it with the `slide` variable. The newly created slide's first shape
    was a text frame to which the content **This is a paragraph** was added.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们添加了一个新的幻灯片，其布局为 **Layout** 一个（**标题和内容**），并用 `slide` 变量引用它。新创建的幻灯片的第一个形状是一个文本框，其中添加了内容
    **这是一个段落**。
- en: In the end, we saved the newly created presentation under the name `new_ppt.pptx`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将新创建的演示文稿以 `new_ppt.pptx` 的名称保存。
- en: There's more...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Cool! So, we learnt how to create new presentations from scratch, update an
    existing template, add new content to it and create a presentation, and lastly,
    create presentations with different types of layout and bullet data. In the next
    recipe, let's look at what else we can do with presentations using Python.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！所以，我们学习了如何从头创建新的演示文稿，更新现有的模板，向其中添加新内容并创建演示文稿，最后，创建具有不同类型布局和项目符号数据的演示文稿。在下一个菜谱中，让我们看看我们可以使用
    Python 做些什么其他的事情。
- en: Playing with layouts, placeholders, and textboxes
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩转布局、占位符和文本框
- en: Now, let's move on to do some interesting operations on PPTs. Importantly, we'll
    discuss operations that are most frequently used.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续做一些有趣的 PPT 操作。重要的是，我们将讨论最常用的操作。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: No specific modules are required for this recipe; we would use the `python-pptx`
    module that was installed for the earlier recipes. In this recipe, we will work
    with different slide layouts and play with shapes and text.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱不需要特定的模块；我们将使用为早期菜谱安装的 `python-pptx` 模块。在这个菜谱中，我们将使用不同的幻灯片布局，并玩转形状和文本。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s go further and use a different type of slide layout, along with bulleted
    content in it. The following code snippet does what we need:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们更进一步，使用不同类型的幻灯片布局，并在其中添加项目符号内容。以下代码片段完成了我们所需的工作：
- en: '[PRE13]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When we run the preceding Python code, we get a new PPT with a *two content*
    slide with bulleted content added to it. The following screenshot shows the output
    of the new presentation that was created. Nice, right? We can add bulleted content
    to the placeholders on the left-hand side of the slide:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们运行前面的 Python 代码时，我们得到一个新的 PPT，它包含了一个带有添加的项目符号内容的 *两内容* 幻灯片。以下截图显示了创建的新演示文稿的输出。不错，对吧？我们可以将项目符号内容添加到幻灯片左侧的占位符中：
- en: '![How to do it...](img/image_07_006.jpg)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_07_006.jpg)'
- en: 'Now, let''s get creative and add another type of shape to our slide, that is,
    the textbox. The following code snippet adds a textbox to our slide:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们发挥创意，在我们的幻灯片中添加另一种类型的形状，即文本框。以下代码片段向我们的幻灯片中添加了一个文本框：
- en: '[PRE14]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The following screenshot shows how the newly created PPTX file looks. If you
    carefully look at it, you'll notice that we added a text box and the second text
    inside the textbox is in bold, italics, and the font size is 30.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了新创建的PPTX文件的外观。如果你仔细观察，你会注意到我们添加了一个文本框，并且文本框内的第二行文本是粗体、斜体，字体大小为30。
- en: '![How to do it...](img/image_07_007.jpg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image_07_007.jpg)'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we used the blank template to add a two-content layout slide.
    Let''s see what else we did on top of it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用了空白模板来添加一个双内容布局幻灯片。让我们看看我们还做了些什么：
- en: In the code, we used `prs.slide_layouts[3]` to convey the presentation object,
    `prs`, to add a slide with the two content layout. The two-content layout also
    has a title text, which was updated to **Adding a Two Content Slide** by using
    the `shapes.title` attribute.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码中，我们使用`prs.slide_layouts[3]`将演示文稿对象`prs`传递给添加具有双内容布局的幻灯片。双内容布局还有一个标题文本，它通过使用`shapes.title`属性更新为**添加双内容幻灯片**。
- en: Next, we looked at the *placeholders*. A placeholder is a preformatted container
    to which content can be added. Placeholders are categories of shape, which means
    multiple shapes can have placeholders. For instance, an autoshape (circle, as
    seen in the first recipe) is a placeholder; a picture or graphic frame can be
    a placeholder. We have two placeholders, one on the left and one on the right,
    in a two-content slide. We targeted the left one with `shapes.placeholders[1]`
    and added a first line **This is line 1.** to the text frame referenced by `shapes.placeholders[1].text_frame`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们查看**占位符**。占位符是一个预先格式化的容器，可以向其中添加内容。占位符是形状的类别，这意味着多个形状可以有占位符。例如，一个自动形状（如第一个示例中的圆形）是一个占位符；图片或图形框架也可以是占位符。在一个双内容幻灯片中，我们有两个占位符，一个在左侧，一个在右侧。我们使用`shapes.placeholders[1]`定位左侧的占位符，并将第一行文本**这是第一行。**添加到由`shapes.placeholders[1].text_frame`引用的文本框架中。
- en: We then added bulleted lines by adding a paragraph to `text_frame` with the
    `add_paragraph()` method and added the text **Again a line 2...** at level one
    and **And this is line 3...** at level two.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过向`text_frame`添加一个段落并使用`add_paragraph()`方法添加文本**再次是第二行...**在一级和**这是第三行...**在二级。
- en: Basically, not all shapes contain text, but finding if a shape supports text
    can be done using the `shape.has_text_frame` attribute. In this recipe, we know
    our shape contains a placeholder that can handle text content. So, we used the
    `text_frame` attribute to add the first line of text. Similarly, we used the `add_paragraph()`
    method to add the subsequent lines in bulleted fashion using the `level` attribute.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基本上，并非所有形状都包含文本，但可以通过使用`shape.has_text_frame`属性来检查一个形状是否支持文本。在这个示例中，我们知道我们的形状包含一个可以处理文本内容的占位符。因此，我们使用`text_frame`属性添加了第一行文本。同样，我们使用`add_paragraph()`方法添加后续的文本，使用`level`属性以项目符号的形式添加。
- en: In the end, we saved the new presentation under the name, `two_content.pptx`.
    If you look at the screenshot, we see the bulleted look on the text added to the
    left text frame on the slide.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将新的演示文稿以`two_content.pptx`为名保存。如果你查看截图，你会看到文本被添加到幻灯片左侧文本框上的项目符号样式。
- en: 'Next, we added a textbox to our presentation. Textboxes are very commonly used
    in presentations. People use textboxes to highlight points and use the resizing
    and moving capabilities of textboxes to good effect. Here''s what we did in our
    recipe:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在演示文稿中添加了一个文本框。文本框在演示文稿中非常常用。人们使用文本框来突出重点，并利用文本框的调整大小和移动功能。以下是我们示例中做了什么：
- en: We first created a blank slide with layout six and added it to the presentation
    with the `add_slide()` method.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先创建了一个布局为六的空白幻灯片，并使用`add_slide()`方法将其添加到演示文稿中。
- en: Next, we created a textbox with the appropriate dimensions. We used `Inches(2)`
    for the left and top coordinates and then managed the width and height with `Inches(5)`
    and `Inches(1)` respectively. Inches here map to the same real world entity where
    *1 inch = 2.54 cm*. We added this textbox to the slide with the `add_textbox()`
    method.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建了一个具有适当尺寸的文本框。我们使用`Inches(2)`作为左上角坐标，然后分别使用`Inches(5)`和`Inches(1)`来管理宽度和高度。在这里，英寸映射到相同的现实世界实体，即*1英寸=2.54厘米*。我们使用`add_textbox()`方法将这个文本框添加到幻灯片中。
- en: Using the textbox object, we added a text frame object `tf` with the `text_frame`
    attribute.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本框对象，我们通过`text_frame`属性添加了一个文本框架对象`tf`。
- en: As seen in the previous recipe also, we added the text **Wow! I'm inside a textbox**
    to the text frame.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一个示例所示，我们在文本框架中添加了文本**哇！我就在文本框里面**。
- en: We followed it up by adding a paragraph with the `add_paragraph()` method and
    adding the text **Adding a new text** to this paragraph and making the text bold,
    italics, and increasing its font to `30`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过使用`add_paragraph()`方法添加一个段落，并将文本**添加新文本**添加到这个段落中，使文本加粗、斜体，并将字体大小增加到`30`。
- en: In the end, we saved the file as `textBox.pptx`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将文件保存为`textBox.pptx`。
- en: You learned about placeholders and text frames. You learnt how to add text to
    our slides using text frames and paragraphs. You also learnt about adding a textbox
    of the required dimensions to our slide deck.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了关于占位符和文本框的内容。你学习了如何使用文本框和段落向我们的幻灯片添加文本。你还学习了如何向我们的幻灯片添加所需尺寸的文本框。
- en: Working with different shapes and adding tables
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同形状和添加表格
- en: OK, let's go ahead and make our presentations more interesting by adding different
    shapes, tables, or even pictures! Why wait? Let's quickly get into action.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们继续前进，通过添加不同的形状、表格甚至图片来使我们的演示文稿更有趣！为什么等待？让我们迅速采取行动。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: No specific modules are required for this recipe; we will use the `python-pptx`
    module that was installed for the earlier recipes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，不需要特定的模块；我们将使用为早期食谱安装的`python-pptx`模块。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In this recipe, we will add a few shapes to our presentation. Shapes are very
    useful in presentations as they can represent real world objects, can indicate
    relations, and provide great visual feedback to the audience (who are listening
    to the presentation). In this recipe, we add a **Home** button and then a **Rectangular
    Callout** to show where our **Home** button is. We''ll also fill custom color
    into our `Callout` element. The following code adds the shapes to the presentation:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将向我们的演示文稿添加一些形状。形状在演示文稿中非常有用，因为它们可以代表现实世界中的对象，可以指示关系，并为听众（正在听演示的人）提供很好的视觉反馈。在这个食谱中，我们添加了一个**主页**按钮，然后添加了一个**矩形标注**来显示我们的**主页**按钮的位置。我们还将自定义颜色填充到我们的`Callout`元素中。以下代码将形状添加到演示文稿中：
- en: '[PRE15]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After running the preceding code, we get a new presentation, `shapes.pptx`,
    which looks like the following screenshot:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在运行前面的代码后，我们得到了一个新的演示文稿，`shapes.pptx`，其外观如下所示：
- en: '![How to do it...](img/image_07_008.jpg)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image_07_008.jpg)'
- en: 'That was neat! Now let''s see if we can add a table to our presentation. Again,
    tables are used in presentations to manifest data and make informed decisions.
    Speakers (persons responsible for making the presentation) often bring out facts
    about certain projects through tables and solicit discussions or feedback from
    audiences. Adding tables in presentations is trivial with Python; refer to the
    following code. In this, we add a table containing the student information for
    three students:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真是 neat！现在让我们看看我们是否可以向我们的演示文稿添加一个表格。同样，表格在演示文稿中用于展示数据和做出明智的决策。演讲者（负责制作演示的人）经常通过表格展示某些项目的相关事实，并从观众那里征求讨论或反馈。使用
    Python 在演示文稿中添加表格是微不足道的；请参考以下代码。在这个例子中，我们添加了一个包含三名学生信息的表格：
- en: '[PRE16]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If we run this code snippet, you''ll see a table generated in the presentation
    containing all the student data. Refer to the following screenshot:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们运行这个代码片段，你将在演示文稿中看到一个包含所有学生数据的表格。请参考以下截图：
- en: '![How to do it...](img/image_07_009.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image_07_009.jpg)'
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the first code snippet, we added a couple of shapes to our presentation
    by performing the following operations:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个代码片段中，我们通过以下操作向我们的演示文稿添加了一些形状：
- en: We added shapes with the help of the `add_shapes()` method, which takes the
    type of shape as input.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过使用`add_shapes()`方法添加形状，该方法接受形状类型作为输入。
- en: In our code, we take the help of the `MSO_SHAPE` enumeration (this has all the
    shapes listed) and pick up two shapes, namely, `MSO_SHAPE.RECTANGULAR_CALLOUT`
    and `MSO_SHAPE.ACTION_BUTTON_HOME`. Just like in the case of a textbox, the `add_shapes()`
    method also needs the size of the shape defined with the `Inches()` method.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们使用了`MSO_SHAPE`枚举（其中列出了所有形状）并选择了两个形状，即`MSO_SHAPE.RECTANGULAR_CALLOUT`和`MSO_SHAPE.ACTION_BUTTON_HOME`。就像在文本框的情况下，`add_shapes()`方法也需要使用`Inches()`方法定义形状的大小。
- en: We also managed to define the custom color for the callout shape with the help
    of the `fill` method from the `SlideShape` class. The `shape.fill.fore_color.rgb`
    attribute was used to set the color of the callout shape. The RGB color used was
    `1E90FF`, which is light blue color, as seen in the screenshot. We also set the
    color brightness with the help of the `shape.fill.fore_color.brightness` attribute.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还成功地使用`SlideShape`类的`fill`方法定义了调用形状的自定义颜色。我们使用`shape.fill.fore_color.rgb`属性设置了调用形状的颜色。使用的RGB颜色是`1E90FF`，这是一种浅蓝色，如截图所示。我们还使用`shape.fill.fore_color.brightness`属性设置了颜色亮度。
- en: Of course, we added text to both the shapes by setting the `shape.text` attribute.
    In the end, we saved the file as `shapes.pptx`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当然，我们通过设置`shape.text`属性在形状中添加了文本。最后，我们将文件保存为`shapes.pptx`。
- en: 'In the second example, we added a nice table to our presentation with the help
    of Python code. This is how we did it:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个例子中，我们使用Python代码的帮助在演示文稿中添加了一个漂亮的表格。这是我们的做法：
- en: We created a presentation with **Title only** layout and added a single slide
    to it using the `add_slide()` method. We also defined the title of the slide as
    **Students Data**.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`add_slide()`方法创建了一个仅包含**标题**布局的演示文稿，并添加了一个幻灯片。我们还定义了幻灯片的标题为**学生数据**。
- en: Adding the table is as simple as adding shapes. We used the method `add_table()`
    to add a table to the presentation. As expected, the `add_table()` method expects
    a number of rows and columns as input, and at the same time, expects the size
    of the table. In our example, we have set the rows to `4` and columns to be `3`
    and the size of the table with coordinates `Inches(2)`, `Inches(2)`, `Inches(6)`,
    and `Inches(8)`, which means the table is located 2 inches from the left, 2 inches
    below the top of slide, the width of the table is 6 inches, and the height is
    1.2 inches (15.3cm x 3.1cm).
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加表格就像添加形状一样简单。我们使用`add_table()`方法将表格添加到演示文稿中。正如预期的那样，`add_table()`方法期望输入行数和列数，同时期望表格的大小。在我们的例子中，我们将行数设置为`4`，列数设置为`3`，表格的大小为坐标`Inches(2)`、`Inches(2)`、`Inches(6)`和`Inches(8)`，这意味着表格距离左侧2英寸，距离幻灯片顶部2英寸以下，表格宽度为6英寸，高度为1.2英寸（15.3cm
    x 3.1cm）。
- en: We defined our table to have three columns; the width of each of those is set
    to 2 inches. We set that using the `table.columns.width` attribute. We also set
    the text of the column headings to **Sr. No**, **Student Name**, and **Student
    Id**, with the help of `table.cell(row, column).text` attribute. Note that here,
    the row value is always `0`, which indicates the first row or the title row, and
    the column varies from `0` to `2`, indicating three columns.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了表格具有三个列；每个列的宽度设置为2英寸。我们使用`table.columns.width`属性来设置这一点。我们还使用`table.cell(row,
    column).text`属性设置了列标题的文本为**序号**、**学生姓名**和**学生ID**。请注意，在这里，行值始终为`0`，表示第一行或标题行，而列从`0`到`2`变化，表示三个列。
- en: For the purpose of this example, we used a predefined dictionary, `students`,
    which has information such as student name and student ID. We iterate through
    all the student information and update the cells of the table to fill in the table
    with the appropriate information, hence the table with all the student data, as
    observed in the screenshot.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了本例的目的，我们使用了一个预定义的字典`students`，其中包含学生姓名和学生ID等信息。我们遍历所有学生信息，并更新表格的单元格以填充适当的信息，因此表格中包含了所有学生数据，如截图所示。
- en: In the end, we saved the presentation as `table.pptx`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将演示文稿保存为`table.pptx`。
- en: There's more...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Nice! What else can we do with presentations using Python, you'd ask? Or a few
    of you are already expecting me to get graphical and talk about charts or pictures,
    aren't you? Oh yes, we'll get that covered as well. Let's get graphical, so to
    speak!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！使用Python制作演示文稿我们还能做什么呢？或者你们中的一些人已经期待我谈论图表或图片了，不是吗？哦，是的，我们也会涵盖这一点。让我们来点图形的，换句话说！
- en: Visual treat with pictures and charts
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视觉盛宴：图片和图表
- en: Yes, it's time. In this section, we will look at adding pictures and charts
    to your presentations. They say that a picture speaks a thousand words, and truly,
    you must have seen presentations with a lot of pictures and graphs in them. They
    are there for a reason. You can convey as much information as possible in one
    slide. Both charts and pictures have this power, and without learning about them,
    this chapter remains incomplete. So, let's jump in!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候了。在本节中，我们将探讨如何向您的演示文稿添加图片和图表。他们说“一图胜千言”，确实，您一定见过包含大量图片和图表的演示文稿。它们的存在是有原因的。您可以在一张幻灯片中传达尽可能多的信息。图表和图片都具有这种力量，如果不了解它们，本章就不完整。所以，让我们开始吧！
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: No specific modules are required for this recipe; we will use the `python-pptx`
    module that was installed for the earlier recipes.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱不需要特定的模块；我们将使用为早期菜谱安装的`python-pptx`模块。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We divide this recipe into two parts. First, we will cover the adding of pictures
    to our slide, and in the next, we'll deal with charts.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这个菜谱分为两部分。首先，我们将介绍如何向幻灯片添加图片，在下一部分，我们将处理图表。
- en: 'The following code snippet helps us add pictures to our slide:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段帮助我们向幻灯片添加图片：
- en: '[PRE17]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When we run the preceding program, we get a slide with two pictures on it,
    as shown in the following screenshot:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们运行上述程序时，我们得到一个包含两张图片的幻灯片，如下面的截图所示：
- en: '![How to do it...](img/image_07_010.jpg)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_07_010.jpg)'
- en: 'Now let''s see if we can write Python code to add a chart to our slide. The
    `python-pptx` module supports multiple types of charts, such as line chart, bar
    chart, and bubble chart, but my favorite chart always has been a pie chart. How
    about adding one in our recipe? Yes, the following code adds a pie chart to the
    presentation:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们是否可以用Python代码向幻灯片添加图表。`python-pptx`模块支持多种类型的图表，如折线图、柱状图和气泡图，但我的最爱一直是饼图。在我们的菜谱中添加一个如何？是的，以下代码向演示文稿添加了一个饼图：
- en: '[PRE18]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述程序输出的结果如下：
- en: '![How to do it...](img/image_07_011.jpg)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_07_011.jpg)'
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the first code snippet, we added two images to the slide. And how did we
    do it? As logical as it sounds, we used the `add_picture()` method. Isn''t the
    library nice? Add a textbox with `add_textbox()`, add a slide with `add_slide()`
    and now add a picture with `add_picture()`. Let''s take a deeper look at what
    we did in the first part of the recipe:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个代码片段中，我们向幻灯片添加了两张图片。我们是如何做到的？听起来就像逻辑一样，我们使用了`add_picture()`方法。这个库不是很好吗？使用`add_textbox()`添加文本框，使用`add_slide()`添加幻灯片，现在使用`add_picture()`添加图片。让我们更深入地看看我们在菜谱的第一部分中做了什么：
- en: As expected, `add_picture()` expects the path from where the image needs to
    be added to the presentation, and just like other methods, the coordinates and
    size of the picture. In our example, we added two pictures. The first picture
    is `python.org` and we configured it to show up 2 inches from the left and 2 inches
    from the top. We also configured the size of the picture to have a width of 3
    inches and height of 2 inches.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如预期的那样，`add_picture()`期望从图像需要添加到演示文稿的路径，就像其他方法一样，图片的坐标和大小。在我们的例子中，我们添加了两张图片。第一张图片是`python.org`，我们将其配置为从左侧2英寸和从顶部2英寸处显示。我们还配置了图片的大小，使其宽度为3英寸，高度为2英寸。
- en: The second picture we added was `learn_python.jpeg`; it was configured to be
    2 inches from left, 5 inches from the top, with a height of 2 inches and width
    to be same as the width of the image.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加的第二张图片是`learn_python.jpeg`；它被配置为从左侧2英寸，从顶部5英寸处显示，高度为2英寸，宽度与图片宽度相同。
- en: In our example, we created a new slide with a blank slide layout and added both
    the pictures, and in the end, we saved the file as `picture.pptx`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们创建了一个新的幻灯片，使用了空白幻灯片布局，并添加了这两张图片，最后将文件保存为`picture.pptx`。
- en: 'In the second part, we added a pie chart to our slide deck. We did this in
    the following way:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二部分，我们在幻灯片演示文稿中添加了一个饼图。我们这样做：
- en: We added a slide and set the title text to **Data based on regions**.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了一个幻灯片，并将标题文本设置为**基于区域的数据**。
- en: We then created an object of the class, `ChartData()`, and named it `chart_data`.
    We defined the categories for our pie chart with the `chart_data.categories` attribute
    and set it to an array of regions `['West', 'East', 'North', 'South']`. We also
    configured the `chart_data` object with data for all the regions; we did that
    with the `add_series()` method.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建了一个`ChartData()`类的对象，并将其命名为`chart_data`。我们使用`chart_data.categories`属性定义了饼图的类别，并将其设置为区域数组`['西',
    '东', '北', '南']`。我们还使用`add_series()`方法为所有区域配置了`chart_data`对象的数据。
- en: 'How did we add this chart on the presentation slide? Yes, you guessed it: the
    `add_chart()` method does that for us. The `add_chart()` method expects the type
    of chart as one of the arguments, and like other methods, it expects the dimensions.
    In our code, we also set the attributes `has_legend`, `number_format`, and data
    labels to make the pie chart look great!'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们是如何在演示文稿幻灯片上添加这个图表的？是的，你猜对了：`add_chart()`方法为我们做到了这一点。`add_chart()`方法期望图表类型作为其中一个参数，并且像其他方法一样，它期望维度。在我们的代码中，我们还设置了`has_legend`、`number_format`和数据标签的属性，使饼图看起来很棒！
- en: There's more...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Cool! So we learnt many interesting things in this chapter. But what better
    fun than applying this knowledge to solve a real world use case. Did you hear
    Alex has some issues with his weekly sales report?
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！所以我们在这个章节中学到了很多有趣的东西。但将知识应用于解决现实世界的用例不是更有趣吗？你听说过亚历克斯在每周销售报告中遇到的问题吗？
- en: Automating weekly sales reports
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化每周销售报告
- en: 'Alex is the director of sales at Innova 8 Inc that sells laptops and business
    software. He has a bunch of sales managers reporting to him. He is responsible
    for measuring the success of his subordinates and reporting this to the VP of
    sales on a weekly basis. Alex''s boss is majorly interested in two things: the
    revenue generated from business accounts and the performance of his sales managers.
    Alex needs to report these numbers in the weekly staff meeting. He uses PowerPoint
    as a tool to collate and represent the data to the VP of sales on a weekly basis.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 亚历克斯是Innova 8 Inc公司的销售总监，该公司销售笔记本电脑和商业软件。他有一群销售经理向他汇报。他负责衡量下属的成功，并每周向销售副总裁汇报。亚历克斯的老板主要对两件事感兴趣：来自商业账户产生的收入以及销售经理的业绩。亚历克斯需要在每周的员工会议上报告这些数字。他使用PowerPoint作为工具，每周将数据汇总并展示给销售副总裁。
- en: However, Alex has a few problems. The data that he gets from his sales managers
    is often in an Excel sheet. Also, the data is so dynamic that it changes till
    the last moment based on whether the customer paid just before the meeting. It
    becomes difficult for Alex to create the presentation in advance for the meeting
    due to this variability. Also, it is tedious for Alex to analyze the data and
    come up with charts--a completely manual process.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，亚历克斯有一些问题。他从销售经理那里得到的数据通常在Excel表格中。此外，数据非常动态，根据客户是否在会议前付款，数据会一直变化到最后一刻。由于这种变化，亚历克斯很难提前为会议制作演示文稿。此外，亚历克斯分析数据并生成图表的过程非常繁琐——这是一个完全手动的过程。
- en: Can you help Alex with what you learnt in this chapter?
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你能帮助亚历克斯用你在本章中学到的知识吗？
- en: Getting ready
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you analyze the problems, we can automate the complete process for Alex.
    Alex's data is in an Excel sheet; we can easily read this data with the `pandas`
    module of Python. Also, we can create a new presentation with the `python-pptx`
    module.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果分析这些问题，我们可以为亚历克斯自动化整个流程。亚历克斯的数据在Excel表格中；我们可以使用Python的`pandas`模块轻松读取这些数据。此外，我们可以使用`python-pptx`模块创建一个新的演示文稿。
- en: 'The following steps can help solve Alex''s problem:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤可以帮助解决亚历克斯的问题：
- en: Read the contents of the Excel sheet and get the required data.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取Excel表格的内容并获取所需数据。
- en: Create a new PowerPoint presentation and add two slides to it.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的PowerPoint演示文稿，并向其中添加两张幻灯片。
- en: On the first slide, create a pie chart that shows the revenue figures for different
    accounts and compare them based on percentages.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一张幻灯片上，创建一个饼图来展示不同账户的收入数据，并根据百分比进行比较。
- en: On the second slide, add a bar chart comparing the performance of sales managers
    based on revenue.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二张幻灯片上，添加一个柱状图来比较销售经理基于收入的业绩。
- en: 'For this recipe, let''s install the `pandas` module. We do that with our favorite
    utility Python `pip`. We use the following command for installing `pandas`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，让我们安装`pandas`模块。我们使用我们最喜欢的Python实用工具`pip`来安装`pandas`。我们使用以下命令来安装`pandas`：
- en: '[PRE19]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is a trivial example of working with Excel sheets using `pandas`. The `pandas`
    module has comprehensive set of APIs that can be used for data analysis, filtering,
    and aggregation. We talk about all this and much more in the chapter that deals
    with data analysis and visualizations.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个使用`pandas`处理Excel表格的简单示例。`pandas`模块有一套全面的API，可用于数据分析、过滤和聚合。我们在处理数据分析和可视化的章节中讨论了所有这些以及更多内容。
- en: Now that we're ready, let's look at the code that will help Alex automate this
    process.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好了，让我们看看帮助Alex自动化这个过程的代码。
- en: How to do it...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's start by looking at the Excel sheet that has the weekly sales data. We
    call this file as `Sales_Data.xlsx` and it looks like the following screenshot:![How
    to do it...](img/image_07_012.jpg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先看看包含每周销售数据的Excel表格。我们称这个文件为`Sales_Data.xlsx`，它看起来如下截图所示：![如何操作...](img/image_07_012.jpg)
- en: 'Now, let''s look at the code snippet that will help Alex read this data and
    generate the exact presentation he needs:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看看代码片段，这将帮助Alex读取这些数据并生成他需要的精确演示文稿：
- en: '[PRE20]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, if we run the preceding piece of code, we get a PowerPoint presentation
    with all the necessary charts and data points that Alex needs in his weekly sales
    report. Look at the screenshots for all the slides of the presentation. Exactly
    what the doctor ordered for Alex! The first slide is the title slide of the presentation
    and is titled as **Weekly Sales Report <Date>**. It also mentions Alex's name
    and e-mail address as the author of this presentation:![How to do it...](img/image_07_013.jpg)
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们运行前面的代码片段，我们将得到一个包含所有必要图表和数据点的PowerPoint演示文稿，这正是Alex每周销售报告中需要的。看看演示文稿的所有幻灯片的截图。这正是Alex所需要的！第一张幻灯片是演示文稿的标题幻灯片，标题为**每周销售报告
    <日期>**。它还提到了Alex的名字和电子邮件地址，作为本演示文稿的作者：![如何操作...](img/image_07_013.jpg)
- en: 'The second slide shows the revenue distribution across accounts with the help
    of a pie chart:'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二张幻灯片展示了通过饼图帮助展示账户间的收入分布：
- en: '![How to do it...](img/image_07_014.jpg)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_07_014.jpg)'
- en: And finally, the last slide compares the performance of all sales managers with
    the help of a bar chart. Cool, huh?
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，最后一张幻灯片通过柱状图比较了所有销售经理的表现。酷吧？
- en: '![How to do it...](img/image_07_015.jpg)'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_07_015.jpg)'
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the preceding example, we started by creating a reader object for the Excel
    sheet, `Sales_Data.xlsx` containing all the sales data. We achieved this by using
    the `ExcelFile()` method of the `pandas` module.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们首先为包含所有销售数据的Excel表格`Sales_Data.xlsx`创建了一个读取对象。我们通过使用`pandas`模块的`ExcelFile()`方法实现了这一点。
- en: 'Next, we created a new presentation by utilizing the `sample_ppt.pptx` file.
    If you recollect, our sample presentation has a title slide without any text on
    it. So, in our code snippet, we updated this title slide by setting the title
    to **Weekly Status Report <YYYY** **-** **MM** **-** **YY>**. We also added a
    subtitle that contained the name of the author, in this case **Author: Alex alex@innova8**.
    We set these titles with the help of placeholders on the text frame.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过使用`sample_ppt.pptx`文件创建了一个新的演示文稿。如果你还记得，我们的示例演示文稿有一个没有任何文本的标题幻灯片。因此，在我们的代码片段中，我们通过设置标题为**每周状态报告
    <YYYY** **-** **MM** **-** **YY>**来更新了这个标题幻灯片。我们还添加了一个包含作者名字的副标题，在这个例子中是**作者：Alex
    alex@innova8**。我们通过文本框中的占位符来设置这些标题。
- en: Next, we added a new blank slide with layout six to our new presentation. We
    used this slide to add the revenue data for the accounts. We achieved this with
    the help of the `prs.slides.add_slide()` method. However, our data is in an Excel
    sheet, and hence, we use the `reader` object of the Excel sheet to read the **Sales**
    worksheet. The **Sales** worksheet has all the data Alex uses for his analysis.
    The pandas module reads Excel data in the form of a data frame (data stored in
    the matrix format). If you look at the Excel sheet screenshot, we have two columns,
    `Price` and `Quantity`, which indicates the quantity of laptops or software licenses
    sold and the price per unit. So, in our code, we first multiply these values to
    get the revenue for each entry in the Excel record and store it in the data frame
    with the column name `total`. Now, we don't just need the total revenue figure;
    we also need to categorize it based on the account. With data frames, getting
    this information is really trivial; it's like running an SQL query. If you look
    at the code, we have grouped the data frame by `Account` and summed all the `total`
    data (obtained from quantity * price) and used these data points to plot a pie
    chart so that its easier for Alex to compare the revenue for every account as
    a percentage of the total revenue. For grouping the data, we used the `groupby()`
    method and then totaled the revenue with the `sum()` method and plotted the pie
    chart with the `plot()` method. Again, it's not useful if the chart is available
    in `pandas` and not in PowerPoint, so we save the chart as a PNG file in `result.png`;
    we did that with the `savefig()` method of `pandas`. In the end, we added this
    picture file to our presentation using the `add_picture()` method and managed
    the coordinates and size of the picture so that it is visible and looks great.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在新的演示文稿中添加了一个新的空白幻灯片，布局为六。我们使用这个幻灯片来添加账户的营收数据。我们通过`prs.slides.add_slide()`方法实现了这一点。然而，我们的数据存储在Excel表格中，因此我们使用Excel表格的`reader`对象来读取**销售**工作表。**销售**工作表包含了亚历克斯用于分析的所有数据。pandas模块以数据框的形式读取Excel数据（以矩阵格式存储的数据）。如果你查看Excel表格的截图，我们可以看到两列，`价格`和`数量`，这表示了销售的笔记本电脑或软件许可证的数量以及每单位的价格。因此，在我们的代码中，我们首先将这些值相乘以获取Excel记录中每个条目的收入，并将其存储在以`total`为列名的数据框中。现在，我们不仅需要总收入数字；还需要根据账户对其进行分类。使用数据框，获取这些信息非常简单；就像运行一个SQL查询一样。如果你查看代码，我们已经通过`Account`对数据框进行了分组，并汇总了所有的`total`数据（通过数量乘以价格获得）并使用这些数据点绘制饼图，这样亚历克斯就可以更容易地比较每个账户的收入占总收入的比例。对于数据分组，我们使用了`groupby()`方法，然后使用`sum()`方法汇总了收入，并使用`plot()`方法绘制饼图。再次强调，如果图表在`pandas`中可用但不在PowerPoint中，那么它就没有用了，所以我们使用`pandas`的`savefig()`方法将图表保存为`result.png`文件；我们就是这样做的。最后，我们使用`add_picture()`方法将这张图片文件添加到我们的演示文稿中，并管理了图片的坐标和大小，以确保其可见且看起来很棒。
- en: Alex also needs to plot the performance of all his sales managers. For this,
    we used the same method to read the Excel sheet data and stored it in the form
    of data frames. For this problem though, we grouped the data by sales managers
    and got the total revenue attributed to each of them. Here too, we used the `groupby()`
    method but on the `Manager` column of the Excel data. We stored the names of all
    the sales managers in the array `managers`, iterated through all the records for
    each sales manager, got the sales figures for each of them, and added it to a
    list, `sales`. We then converted this list to a tuple to be used later. Just like
    we saw in the previous recipe, we created a chart data object using the `ChartData()`
    method, created a clustered bar chart with the 'sales' tuple as input, and added
    the chart to the second slide of the presentation with the `add_chart()` method.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 亚历克斯还需要绘制所有销售经理的表现。为此，我们使用了相同的方法来读取Excel表格数据，并以数据框的形式存储。对于这个问题，我们通过销售经理对数据进行了分组，并获取了每个销售经理分配的总收入。在这里，我们也使用了`groupby()`方法，但是在Excel数据的`Manager`列上。我们将所有销售经理的姓名存储在数组`managers`中，遍历每个销售经理的所有记录，获取他们的销售数据，并将其添加到列表`sales`中。然后我们将这个列表转换为元组以供以后使用。就像我们在前面的菜谱中看到的那样，我们使用`ChartData()`方法创建了一个图表数据对象，使用`sales`元组作为输入创建了一个簇状柱形图，并使用`add_chart()`方法将其添加到演示文稿的第二张幻灯片中。
- en: In the end, we saved this newly created presentation as `sales.pptx`, which
    acts as a weekly sales report for Alex. That's it!
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将这个新创建的演示文稿保存为`sales.pptx`，这作为亚历克斯的每周销售报告。就这样了！
- en: I hope you enjoyed the recipes in this chapter, the examples and the use cases
    we discussed. I'm sure your hands are itching to automate your presentations as
    well. When do I drop by your desk to appreciate your work?
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您喜欢本章中的食谱、我们讨论的示例和用例。我相信您也迫不及待地想要自动化您的演示文稿。我什么时候去您的办公桌欣赏您的工作呢？
