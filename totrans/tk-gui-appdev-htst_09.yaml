- en: Appendix B. Quick Reference Sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Large portions of the appendix have been generated from the built-in Tkinter
    documentation, and are accordingly copyright of Python Software Foundation (Copyright
    © 2001-2013 Python Software Foundation; All Rights Reserved).
  prefs: []
  type: TYPE_NORMAL
- en: Options common to widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following table consists options common to most of the widgets their functionalities
    and the list of widgets to which the options are not applicable:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Widget option | Function | Not applicable to widgets |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `background` (`bg`) | Picks background color. |   |'
  prefs: []
  type: TYPE_TB
- en: '| `borderwidth` (`bd`) | Defines width of border in pixel. |   |'
  prefs: []
  type: TYPE_TB
- en: '| `cursor` | It is the mouse cursor to be used for the widget. |   |'
  prefs: []
  type: TYPE_TB
- en: '| `relief` | It specifies the border style for a widget. |   |'
  prefs: []
  type: TYPE_TB
- en: '| `takefocus` | If window accepts focus during keyboard traversal. |   |'
  prefs: []
  type: TYPE_TB
- en: '| `width` | An integer specifying the relative width of a widget. | Menu |'
  prefs: []
  type: TYPE_TB
- en: '| `font` | It specifies font family and font size. | Toplevel, Canvas, Frame,
    and Scrollbar |'
  prefs: []
  type: TYPE_TB
- en: '| `foreground` (`fg`) | It specifies foreground color. | Toplevel, Canvas,
    Frame, and Scrollbar |'
  prefs: []
  type: TYPE_TB
- en: '| `highlightbackground` | color | Menu |'
  prefs: []
  type: TYPE_TB
- en: '| `highlightcolor` | color | Menu |'
  prefs: []
  type: TYPE_TB
- en: '| `highlightthickness` | It is measured in pixels. | Menu |'
  prefs: []
  type: TYPE_TB
- en: '| `relief` | Specifies the 3D effect to be applied to a given widget. Valid
    values are `RAISED`, `SUNKEN`, `FLAT`, `RIDGE`, `SOLID`, and `GROOVE`. |   |'
  prefs: []
  type: TYPE_TB
- en: '| `takefocus` | Specified as `1` or `0` representing whether or not a widget
    takes focus during keyboard tab-based traversal. |   |'
  prefs: []
  type: TYPE_TB
- en: '| `width` | Integer specifying the width of a widget. | Menu |'
  prefs: []
  type: TYPE_TB
- en: 'The following table consists options common to most of the widgets their functionalities
    and the list of widgets to which the options are applicable:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Widget Option | Function | Applicable to |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `activebackground` | Color of background when widget is active. | Menu, Menubutton,
    Button, Checkbutton, Radiobutton, Scale, and Scrollbar |'
  prefs: []
  type: TYPE_TB
- en: '| `activeforeground` | Color of foreground when widget is active. | Menu, Menubutton,
    Button, Checkbutton, and Radiobutton |'
  prefs: []
  type: TYPE_TB
- en: '| `anchor` | Indicates where text or a bitmap would be displayed on a widget.
    Valid values are `n`, `ne`, `e`, `se`, `s`, `sw`, `w`, `nw`, or `center`. | Menubutton,
    Button, Checkbutton, Radiobutton, Label, and Message |'
  prefs: []
  type: TYPE_TB
- en: '| `bitmap` | Indicates a bitmap to display in the widget. | Menubutton, Button,
    Checkbutton, Radiobutton, and Label |'
  prefs: []
  type: TYPE_TB
- en: '| `command` | Indicates a command callback to associate with the widget, which
    would be normally invoked on mouse button 1 release over the widget. | Button,
    Checkbutton, Radiobutton, Scale, and Scrollbar |'
  prefs: []
  type: TYPE_TB
- en: '| `disabledforeground` | Indicates the foreground color to display when a widget
    is in disabled state. | Menu, Menubutton, Button, Checkbutton, and Radiobutton
    |'
  prefs: []
  type: TYPE_TB
- en: '| `height` | Indicates height of widget, in units in which the font has been
    specified for the given widget. | Toplevel, Menubutton, Button, Checkbutton, Radiobutton,
    Label, Frame, Listbox, and Canvas |'
  prefs: []
  type: TYPE_TB
- en: '| `image` | Indicates an image to display in the widget. | Menubutton, Button,
    Checkbutton, Radiobutton, and Label |'
  prefs: []
  type: TYPE_TB
- en: '| `justify` | Applicable when multiple lines of text are displayed in a widget.
    This determines how the text lines line up with each other. Must be one of LEFT,
    CENTER, or RIGHT. | Menubutton, Button, Checkbutton, Radiobutton, Label, Entry,
    and Message |'
  prefs: []
  type: TYPE_TB
- en: '| `selectbackground` | Indicates the background color to show when displaying
    selected items. | Text, Listbox, Entry, and Canvas |'
  prefs: []
  type: TYPE_TB
- en: '| `selectborderwidth` | Indicates the border width to show when displaying
    selected items. | Text, Listbox, Entry, and Canvas |'
  prefs: []
  type: TYPE_TB
- en: '| `selectforeground` | Indicates the foreground color to show when displaying
    selected items. | Text, Listbox, Entry, and Canvas |'
  prefs: []
  type: TYPE_TB
- en: '| `state` | Indicates one of two or three states that a widget may be under.
    Valid values `normal`, `active`, or `disabled`. | Menubutton, Button, Checkbutton,
    Radiobutton, Text, Entry, and Scale |'
  prefs: []
  type: TYPE_TB
- en: '| `text` | Indicates a string to be displayed inside the widget. | Menubutton,
    Button, Checkbutton, Radiobutton, Label, and Message |'
  prefs: []
  type: TYPE_TB
- en: '| `textvariable` | Indicates the name of a variable. The value of the variable
    is changed to string in order to be displayed in the widget. The widget automatically
    updates as and when the variable value changes. | Menubutton, Button, Checkbutton,
    Radiobutton, Label, Entry, and Message |'
  prefs: []
  type: TYPE_TB
- en: '| `underline` | Indicates the integer index of a character to underline in
    the widget. | Menubutton, Button, Checkbutton, Radiobutton, and Label |'
  prefs: []
  type: TYPE_TB
- en: '| `wraplength` | Indicates the maximum line length for widgets that have word
    wrapping. | Menubutton, Button, Checkbutton, Radiobutton, and Label |'
  prefs: []
  type: TYPE_TB
- en: Widget-specific options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We do not reproduce all widget-specific options. You can obtain all available
    options for a given widget in the Python interactive shell using the help command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain help on any `Tkinter` class, you first import Tkinter into the namespace
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following commands can then be used to get information on a particular
    widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Widget Name | Getting Help |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Label | `help(Tkinter.Label)` |'
  prefs: []
  type: TYPE_TB
- en: '| Button | `help(Tkinter.Button)` |'
  prefs: []
  type: TYPE_TB
- en: '| Canvas | `help(Tkinter.Canvas)` |'
  prefs: []
  type: TYPE_TB
- en: '| CheckButton | `help(Tkinter.Checkbutton)` |'
  prefs: []
  type: TYPE_TB
- en: '| Entry | `help(Tkinter.Entry)` |'
  prefs: []
  type: TYPE_TB
- en: '| Frame | `help(Tkinter.Frame)` |'
  prefs: []
  type: TYPE_TB
- en: '| LabelFrame | `help(Tkinter.LabelFrame)` |'
  prefs: []
  type: TYPE_TB
- en: '| Listbox | `help(Tkinter.Listbox)` |'
  prefs: []
  type: TYPE_TB
- en: '| Menu | `help(Tkinter.Menu)` |'
  prefs: []
  type: TYPE_TB
- en: '| Menubutton | `help(Tkinter.Menubutton)` |'
  prefs: []
  type: TYPE_TB
- en: '| Message | `help(Tkinter.Message)` |'
  prefs: []
  type: TYPE_TB
- en: '| OptionMenu | `help(Tkinter.OptionMenu)` |'
  prefs: []
  type: TYPE_TB
- en: '| PanedWindow | `help(Tkinter.PanedWindow)` |'
  prefs: []
  type: TYPE_TB
- en: '| RadioButton | `help(Tkinter.Radiobutton)` |'
  prefs: []
  type: TYPE_TB
- en: '| Scale | `help(Tkinter.Scale)` |'
  prefs: []
  type: TYPE_TB
- en: '| Scrollbar | `help(Tkinter.Scrollbar)` |'
  prefs: []
  type: TYPE_TB
- en: '| Spinbox | `help(Tkinter.Spinbox)` |'
  prefs: []
  type: TYPE_TB
- en: '| Text | `help(Tkinter.Text)` |'
  prefs: []
  type: TYPE_TB
- en: '| Bitmap Class | `help(Tkinter.BitmapImage)` |'
  prefs: []
  type: TYPE_TB
- en: '| Image Class | `help(Tkinter.Image)` |'
  prefs: []
  type: TYPE_TB
- en: The pack manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The pack geometry manager is the oldest geometry manager available with Tk
    and Tkinter. The pack geometry manager places slave widgets in a master widget,
    adding them one at a time in the order in which slaves are introduced. Following
    table shows the available `pack()` methods and options:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Methods | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `config = configure = pack_configure(self, cnf={}, **kw)` | Pack a widget
    in the parent widget. Use as options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`after=widget`: pack it after you have packed widget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`anchor=NSEW` (or subset): position widget according to given direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`before=widget`: pack it before you will pack widget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expand=bool`: expand widget if parent size grows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fill=NONE` (or `X` or `Y` or `BOTH`): fill widget if widget grows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in=master`: use master to contain this widget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_=master`: see ''in'' option description'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipadx=amount`: add internal padding in x direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipady=amount`: add internal padding in y direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padx=amount`: add padding in x direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pady=amount`: add padding in y direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`side=TOP` (or `BOTTOM` or `LEFT` or `RIGHT`): where to add this widget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `forget = pack_forget(self)` | Unmap this widget and do not use it for the
    packing order. |'
  prefs: []
  type: TYPE_TB
- en: '| `info = pack_info(self)` | Return information about the packing options for
    this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `propagate =pack_propagate(self, flag=[''_noarg_'']) from Tkinter.Misc` |
    Set or get the status for propagation of geometry information.A Boolean argument
    specifies whether the geometry information of the slaves will determine the size
    of this widget. If no argument is given, the current setting will be returned.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `slaves = pack_slaves(self) from Tkinter.Misc` | Return a list of all slaves
    of this widget in its packing order. |'
  prefs: []
  type: TYPE_TB
- en: The grid manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The grid is easy to implement and equally easy to modify, making it the most
    popular choice for most use cases. Following is a list of methods and options
    available for layout management with the `grid()` geometry manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Methods defined here | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None) from
    Tkinter.Misc` | Return a tuple of integer coordinates for the bounding box of
    this widget controlled by the geometry manager grid.If `column`, `row` is given,
    the bounding box applies from the cell with row and column 0 to the specified
    cell. If `col2` and `row2` are given, the bounding box starts at that cell.The
    returned integers specify the offset of the upper left corner in the master widget
    and the width and height. |'
  prefs: []
  type: TYPE_TB
- en: '| `columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw) from Tkinter.Misc`
    | Configures column `index` of a grid.Valid resources are minsize (minimum size
    of the column),weight (how much does additional space propagate to this column),
    and pad (how much space to let additionally). |'
  prefs: []
  type: TYPE_TB
- en: '| `grid = config = configure = grid_configure(self, cnf={}, **kw)` | Position
    a widget in the parent widget in a grid. Use as options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column=number`: use cell identified with given column (starting with 0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`columnspan=number`: this widget will span several columns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in=master`: use master to contain this widget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_=master`: see ''in'' option description'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipadx=amount`: add internal padding in x direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ipady=amount`: add internal padding in y direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padx=amount`: add padding in x direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pady=amount`: add padding in y direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`row=number`: use cell identified with given row (starting with 0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rowspan=number`: this widget will span several rows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sticky=NSEW`: if cell is larger on which sides will this widget stick to the
    cell boundary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `forget = grid_forget(self)` | Un-map this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `info = grid_info(self)` | Return information about the options for positioning
    this widget in a grid. |'
  prefs: []
  type: TYPE_TB
- en: '| `grid_location(self, x, y) from Tkinter.Misc` | Return a tuple of column
    and row which identify the cell at which the pixel at position X and Y inside
    the master widget is located. |'
  prefs: []
  type: TYPE_TB
- en: '| `grid_propagate(self, flag=[''_noarg_'']) from Tkinter.Misc` | Set or get
    the status for propagation of geometry information.A Boolean argument specifies
    whether the geometry information of the slaves will determine the size of this
    widget. If no argument is given, the current setting will be returned. |'
  prefs: []
  type: TYPE_TB
- en: '| `grid_remove(self)` | Un-map this widget, but remember the grid options.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `grid_rowconfigure(self, index, cnf={}, **kw) from Tkinter.Misc` | Configure
    row `index` of a grid.Valid resources are minsize (minimum size of the row),weight
    (how much does additional space propagate to this row), and pad (how much space
    to let additionally). |'
  prefs: []
  type: TYPE_TB
- en: '| `size = grid_size(self) from Tkinter.Misc` | Return a tuple of the number
    of column and rows in the grid. |'
  prefs: []
  type: TYPE_TB
- en: '| `slaves = grid_slaves(self, row=None, column=None) from Tkinter.Misc` | Return
    a list of all slaves of this widget in its packing order. |'
  prefs: []
  type: TYPE_TB
- en: '| `location = grid_location(self, x, y) from Tkinter.Misc` | Return a tuple
    of column and row which identify the cell at which the pixel at position X and
    Y inside the master widget is located. |'
  prefs: []
  type: TYPE_TB
- en: '| `propagate = grid_propagate(self, flag=[''_noarg_'']) from Tkinter.Misc`
    | Set or get the status for propagation of geometry information.A Boolean argument
    specifies whether the geometry information of the slaves will determine the size
    of this widget. If no argument is given, the current setting will be returned.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw) from Tkinter.Misc`
    | Configure row `INDEX` of a grid.Valid resources are minsize (minimum size of
    the row),weight (how much does additional space propagate to this row), and pad
    (how much space to let additionally). |'
  prefs: []
  type: TYPE_TB
- en: The place manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `place()` geometry manager allows for precise positioning of widgets based
    on absolute or relative coordinates for a given window. The following table lists
    methods and options available under place geometry manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Methods defined here | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `config = configure = place_configure(self, cnf={}, **kw)` | Place a widget
    in the parent widget. Use as options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`in=master`: master relative to which the widget is placed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_=master`: see ''in'' option description'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x=amount`: locate anchor of this widget at position x of master'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y=amount`: locate anchor of this widget at position y of master'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`relx=amount`: locate anchor of this widget between 0.0 and 1.0 relative to
    width of master (1.0 is right edge)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'rely=amount: locate anchor of this widget between 0.0 and 1.0 relative to height
    of master (1.0 is bottom edge)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`anchor=NSEW` (or subset):position anchor according to given direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width=amount`: width of this widget in pixel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`height=amount`: height of this widget in pixel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`relwidth=amount`: width of this widget between 0.0 and 1.0 relative to width
    of master (1.0 is the same width as the master)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`relheight=amount`: height of this widget between 0.0 and 1.0 relative to height
    of master (1.0 is the same height as the master)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bordermode="inside"` (or `"outside"`): whether to take border width of master
    widget into account'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `forget = place_forget(self)` | Un-map this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `info = place_info(self)` | Return information about the placing options
    for this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `slaves = place_slaves(self) from Tkinter.Misc` | Return a list of all slaves
    of this widget in its packing order. |'
  prefs: []
  type: TYPE_TB
- en: The event types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The general format for representing an event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It is compulsory to specify the event types for any event binding. Also note
    that event types, event modifier, and event details vary across platforms. The
    following table represents event types with their description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Event type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Activate | Change in the state option of a widget from inactive (grayed out)
    to active. |'
  prefs: []
  type: TYPE_TB
- en: '| Button | Press of a mouse button. The event detail part specifies which button.
    |'
  prefs: []
  type: TYPE_TB
- en: '| ButtonRelease | Release of a pressed mouse button. |'
  prefs: []
  type: TYPE_TB
- en: '| Configure | Change of size of a widget. |'
  prefs: []
  type: TYPE_TB
- en: '| Deactivate | Change in the state option of a widget from active to inactive
    (grayed out). |'
  prefs: []
  type: TYPE_TB
- en: '| Destroy | Destruction of a widget using the `widget.destroy` method. |'
  prefs: []
  type: TYPE_TB
- en: '| Enter | Mouse pointer enters a visible part of a widget. |'
  prefs: []
  type: TYPE_TB
- en: '| Expose | At least some part of widget becomes visible after remaining covered
    by another window. |'
  prefs: []
  type: TYPE_TB
- en: '| FocusIn | Widget gets input focus either due to a user event (like using
    the *Tab* key or mouse click) or on call of `.focus_set()` on a widget |'
  prefs: []
  type: TYPE_TB
- en: '| FocusOut | Focus moved out of a widget. |'
  prefs: []
  type: TYPE_TB
- en: '| KeyPress/Key | Press of a key on the keyboard. The event-detail part specifies
    which key. |'
  prefs: []
  type: TYPE_TB
- en: '| KeyRelease | Release of a pressed key. |'
  prefs: []
  type: TYPE_TB
- en: '| Leave | Mouse pointer moves out of a widget. |'
  prefs: []
  type: TYPE_TB
- en: '| Map | Widget is mapped (made visible). Occurs say when you call a geometry
    manager on a widget. |'
  prefs: []
  type: TYPE_TB
- en: '| Motion | Mouse pointer moves entirely within a widget. |'
  prefs: []
  type: TYPE_TB
- en: '| Un-map | Widget is unmapped (made invisible). For example, when you use the
    `remove()` method. |'
  prefs: []
  type: TYPE_TB
- en: '| Visibility | At least a part of the window becomes visible. |'
  prefs: []
  type: TYPE_TB
- en: The event modifiers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The event modifiers are an optional component for creating an event binding.
    A list of event modifiers is listed as follows. However, note that most of the
    event modifiers are platform-specific and may not work across all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: '| Modifier | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Alt | True when *Alt* key is pressed. |'
  prefs: []
  type: TYPE_TB
- en: '| Any | Generalizes an event type. For example `<Any-KeyPress>` is True when
    any key is pressed. |'
  prefs: []
  type: TYPE_TB
- en: '| Control | True when *Ctrl* (Control) key is pressed. |'
  prefs: []
  type: TYPE_TB
- en: '| Double | Specifies two events occurring in rapid succession. For example,
    `<Double-Button-1>`is double-click of mouse button 1. |'
  prefs: []
  type: TYPE_TB
- en: '| Lock | True if *Caps Lock*/*Shift* lock is pressed |'
  prefs: []
  type: TYPE_TB
- en: '| Shift | True if *Shift* key is pressed |'
  prefs: []
  type: TYPE_TB
- en: '| Triple | Similar to Double (three events occurring in rapid succession) |'
  prefs: []
  type: TYPE_TB
- en: The event details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Event details are optional components for creating an event binding. They generally
    denote the mouse button or details of a key stroke on the keyboard using a key
    symbol abbreviated as **keysym**.
  prefs: []
  type: TYPE_NORMAL
- en: '| List of all available event details is as follows:.keysym | .keycode | .keysym_num
    | Key |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Alt_L` | 64 | 65513 | Left *Alt* key |'
  prefs: []
  type: TYPE_TB
- en: '| `Alt_R` | 113 | 65514 | Right *Alt* key |'
  prefs: []
  type: TYPE_TB
- en: '| `BackSpace` | 22 | 65288 | *Backspace* |'
  prefs: []
  type: TYPE_TB
- en: '| `Cancel` | 110 | 65387 | Break |'
  prefs: []
  type: TYPE_TB
- en: '| `Caps_Lock` | 66 | 65549 | *CapsLock* |'
  prefs: []
  type: TYPE_TB
- en: '| `Control_L` | 37 | 65507 | Left *Ctrl* key |'
  prefs: []
  type: TYPE_TB
- en: '| `Control_R` | 109 | 65508 | Right *Ctrl* key |'
  prefs: []
  type: TYPE_TB
- en: '| `Delete` | 107 | 65535 | *Delete* |'
  prefs: []
  type: TYPE_TB
- en: '| `Down` | 104 | 65364 | Down arrow key |'
  prefs: []
  type: TYPE_TB
- en: '| `End` | 103 | 65367 | *End* |'
  prefs: []
  type: TYPE_TB
- en: '| `Escape` | 9 | 65307 | *Esc* |'
  prefs: []
  type: TYPE_TB
- en: '| `Execute` | 111 | 65378 | *SysRq* |'
  prefs: []
  type: TYPE_TB
- en: '| `F1 – F11` | 67 to 95 | 65470 to 65480 | Function key *F1* to *F11* |'
  prefs: []
  type: TYPE_TB
- en: '| `F12` | 96 | 65481 | Function key *F12* |'
  prefs: []
  type: TYPE_TB
- en: '| `Home` | 97 | 65360 | *Home* |'
  prefs: []
  type: TYPE_TB
- en: '| `Insert` | 106 | 65379 | *Insert* |'
  prefs: []
  type: TYPE_TB
- en: '| `Left` | 100 | 65361 | Left side arrow key |'
  prefs: []
  type: TYPE_TB
- en: '| `Linefeed` | 54 | 106 | Linefeed/*Ctrl* + *J* |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_0` | 90 | 65438 | *0* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_1` | 87 | 65436 | *1* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_2` | 88 | 65433 | *2* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_3` | 89 | 65435 | *3* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_4` | 83 | 65430 | *4* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_5` | 84 | 65437 | *5* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_6` | 85 | 65432 | *6* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_7` | 79 | 65429 | *7* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_8` | 80 | 65431 | *8* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_9` | 81 | 65434 | *9* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Add` | 86 | 65451 | *+* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Begin` | 84 | 65437 | Center key on keypad (same as key *5*) |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Decimal` | 91 | 65439 | Decimal (*.*) key on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Delete` | 91 | 65439 | Delete (*Del*) key on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Divide` | 112 | 65455 | */* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Down` | 88 | 65433 | Down arrow key on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_End` | 87 | 65436 | *End* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Enter` | 108 | 65421 | *Enter* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Home` | 79 | 65429 | *Home* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Insert` | 90 | 65438 | *Insert* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Left` | 83 | 65430 | Left arrow key on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Multiply` | 63 | 65450 | *** on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Next` | 89 | 65435 | *Page Down* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Prior` | 81 | 65434 | *Page Up* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Right` | 85 | 65432 | Right arrow key on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Subtract` | 82 | 65453 | *-* on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `KP_Up` | 80 | 65431 | Up arrow key on keypad |'
  prefs: []
  type: TYPE_TB
- en: '| `Next` | 105 | 65366 | *Page Down* |'
  prefs: []
  type: TYPE_TB
- en: '| `Num_Lock` | 77 | 65407 | *Num Lock* |'
  prefs: []
  type: TYPE_TB
- en: '| `Pause` | 110 | 65299 | *Pause* |'
  prefs: []
  type: TYPE_TB
- en: '| `Print` | 111 | 65377 | *Prt Scr* |'
  prefs: []
  type: TYPE_TB
- en: '| `Prior` | 99 | 65365 | *Page Up* |'
  prefs: []
  type: TYPE_TB
- en: '| `Return` | 36 | 65293 | *Enter* key / *Ctrl* + *M* |'
  prefs: []
  type: TYPE_TB
- en: '| `Right` | 102 | 65363 | Right arrow key |'
  prefs: []
  type: TYPE_TB
- en: '| `Scroll_Lock` | 78 | 65300 | *Scroll Lock* |'
  prefs: []
  type: TYPE_TB
- en: '| `Shift_L` | 50 | 65505 | Left *Shift* key |'
  prefs: []
  type: TYPE_TB
- en: '| `Shift_R` | 62 | 65506 | Right *Shift* key |'
  prefs: []
  type: TYPE_TB
- en: '| `Tab` | 23 | 65289 | *Tab* key |'
  prefs: []
  type: TYPE_TB
- en: '| `Up` | 98 | 65362 | Up arrow key |'
  prefs: []
  type: TYPE_TB
- en: Other event-related methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Binding of a handler to an event can happen at various levels using `bind`,
    `bind_all`, `bind_class`, and `tag_bind`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If an event binding is registered to a callback function, the callback function
    is called with an Event as its first argument. The event argument has the following
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Attribute | Description | Valid for event types |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `event.serial` | Serial number of event. | All |'
  prefs: []
  type: TYPE_TB
- en: '| `event.num` | Mouse button pressed. | `ButtonPress` and `ButtonRelease` |'
  prefs: []
  type: TYPE_TB
- en: '| `event.focus` | Whether the window has the focus. | `Enter` and `Leave` |'
  prefs: []
  type: TYPE_TB
- en: '| `event.height` | Height of the exposed window. | `Configure` and `Expose`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `event.width` | Width of the exposed window. | `Configure` and `Expose` |'
  prefs: []
  type: TYPE_TB
- en: '| `event.keycode` | Keycode of the pressed key. | `KeyPress` and `KeyRelease`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `event.state` | State of the event as a number. | `ButtonPress`, `ButtonRelease`,
    `Enter`, `KeyPress`, `KeyRelease`, `Leave`, and `Motion` |'
  prefs: []
  type: TYPE_TB
- en: '| `event.state` | State as a string. | `Visibility` |'
  prefs: []
  type: TYPE_TB
- en: '| `event.time` | When the event occurred. | All |'
  prefs: []
  type: TYPE_TB
- en: '| `event.x` | It gives the x-position of the mouse. | All |'
  prefs: []
  type: TYPE_TB
- en: '| `event.y` | It gives the y-position of the mouse. | All |'
  prefs: []
  type: TYPE_TB
- en: '| `event.x_root` | It gives the x-position of the mouse on the screen. | `ButtonPress`,
    `ButtonRelease`, `KeyPress`, `KeyRelease`, and `Motion` |'
  prefs: []
  type: TYPE_TB
- en: '| `event.y_root` | It gives the y-position of the mouse on the screen. | `ButtonPress`,
    `ButtonRelease`, `KeyPress`, `KeyRelease`, and `Motion` |'
  prefs: []
  type: TYPE_TB
- en: '| `event.char` | It gives the pressed character. | `KeyPress` and `KeyRelease`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `event.keysym` | It gives the `keysym` of the event as a string. | `KeyPress`
    and `KeyRelease` |'
  prefs: []
  type: TYPE_TB
- en: '| `event.keysym_num` | It gives the `keysym` of the event as a number. | `KeyPress`
    and `KeyRelease` |'
  prefs: []
  type: TYPE_TB
- en: '| `event.type` | Type of the event as a number. | All |'
  prefs: []
  type: TYPE_TB
- en: '| `event.widget` | Widget in which the event occurred. | All |'
  prefs: []
  type: TYPE_TB
- en: '| `event.delta` | Delta of wheel movement. | `MouseWheel` |'
  prefs: []
  type: TYPE_TB
- en: List of available cursor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The cursor widget option allows a Tk programmer to change the mouse cursor
    for a particular widget. The cursor names recognized by Tk on all platforms are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `X_cursor` | `arrow` | `based_arrow_down` | `based_arrow_up` | `boat` | `bogosity`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bottom_left_corner` | `bottom_right_corner` | `bottom_side` | `box_spiral`
    | `center_ptr` | `circle` |'
  prefs: []
  type: TYPE_TB
- en: '| `clock` | `coffee_mug` | `cross` | `cross_reverse` | `crosshair` | `diamond_cross`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `dot` | `dotbox` | `double_arrow` | `draft_large` | `draft_small` | `draped_box`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `exchange` | `fleur` | `gobbler` | `gumby` | `hand1` | `hand2` |'
  prefs: []
  type: TYPE_TB
- en: '| `heart` | `icon` | `iron_cross` | `left_ptr` | `left_side` | `left_tee` |'
  prefs: []
  type: TYPE_TB
- en: '| `leftbutton` | `ll_angle` | `lr_angle` | `man` | `bottom_tee` | `middlebutton`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `mouse` | `pencil` | `pirate` | `plus` | `question_arrow` | `right_ptr` |'
  prefs: []
  type: TYPE_TB
- en: '| `right_side` | `right_tee` | `rightbutton` | `rtl_logo` | `sailboat` | `sb_down_arrow`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sb_h_double_arrow` | `sb_left_arrow` | `sb_right_arrow` | `sb_up_arrow`
    | `sb_v_double_arrow` | `shuttle` |'
  prefs: []
  type: TYPE_TB
- en: '| `sizing` | `spider` | `spraycan` | `star` | `target` | `tcross` |'
  prefs: []
  type: TYPE_TB
- en: '| `top_left_arrow` | `top_left_corner` | `top_right_corner` | `top_side` |
    `top_tee` | `trek` |'
  prefs: []
  type: TYPE_TB
- en: '| `ul_angle` | `umbrella` | `ur_angle` | `watch` | `xterm` |   |'
  prefs: []
  type: TYPE_TB
- en: '*See 9.01 all cursor demo.py* for a demonstration of all cross platform cursors.'
  prefs: []
  type: TYPE_NORMAL
- en: Potability issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Windows: The cursors that have native mapping on Windows are, `arrow`, `center_ptr`,
    `crosshair`, `fleur`, `ibeam`, `icon`, `sb_h_double_arrow`, `sb_v_double_arrow`,
    `watch`, and `xterm`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And the following additional cursors available are, `no`, `starting`, `size`,
    `size_ne_sw`, `size_ns`, `size_nw_se`, `size_we`, `uparrow`, `wait`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `no` cursor can be specified to eliminate the cursor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Mac OS X: The cursors that have native mapping on Mac OS X systems are, `arrow`,
    `cross`, `crosshair`, `ibeam`, `plus`, `watch`, `xterm`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And the following additional native cursors available are, `copyarrow`, `aliasarrow`,
    `contextualmenuarrow`, `text`, `cross-hair`, `closedhand`, `openhand`, `pointinghand`,
    `resizeleft`, `resizeright`, `resizeleftright`, `resizeup`, `resizedown`, `resizeupdown`,
    `none`, `notallowed`, `poof`, `countinguphand`, `countingdownhand`, `countingupanddownhand`,
    `spinning`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The basic widget methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These methods are provided under class Widget in module Tkinter. You can view
    the documentation for these methods in your interactive shell using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A list of available methods under Widgets class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `after(self, ms, func=None, *args)` | Calls function once after given time.
    MS specifies the time in milliseconds. `FUNC` gives the function, which shall
    be called. Additional parameters are given as parameters to the function call.
    Return: identifier to cancel scheduling with `after_cancel`. |'
  prefs: []
  type: TYPE_TB
- en: '| `after_cancel(self, id)` | Cancel scheduling of function identified with
    ID. Identifier returned by after or `after_idle` must be given as first parameter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `after_idle(self, func, *args)` | Call FUNC once if the Tcl main loop has
    no event to process. Return an identifier to cancel the scheduling with `after_cancel`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)` | Return
    a tuple of integer coordinates for the bounding box of this widget controlled
    by the geometry manager grid. If `COLUMN`, `ROW` are given, the bounding box applies
    from the cell with row and column 0 to the specified cell. If `COL2` and `ROW2`
    are given, the bounding box starts at that cell. The returned integers specify
    the offset of the upper left corner in the master widget and the width and height.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bind(self, sequence=None, func=None, add=None)` | Bind to this widget at
    event `SEQUENCE` a call to function `FUNC`. `SEQUENCE` is a string of concatenated
    event patterns. An event pattern is of the form `<MODIFIER-MODIFIER-TYPE-DETAIL>`.
    An event pattern can also be a virtual event of the form `<<AString>>` where `AString`
    can be arbitrary. This event can be generated by `event_generate`. If events are
    concatenated, they must appear shortly after each other.`FUNC` will be called
    if the event sequence occurs with an instance of Event as argument. If the return
    value of `FUNC` is "break", no further bound function is invoked.An additional
    Boolean parameter `ADD` specifies whether `FUNC` will be called additionally to
    the other bound function or whether it will replace the previous function. Bind
    will return an identifier to allow deletion of the bound function with unbind
    without memory leak.If `FUNC` or `SEQUENCE` is omitted, the bound function or
    list of bound events are returned. |'
  prefs: []
  type: TYPE_TB
- en: '| `bind_all(self, sequence=None, func=None, add=None)` | Bind to all widgets
    at an event `SEQUENCE` a call to function `FUNC`. An additional Boolean parameter
    `ADD` specifies whether `FUNC` will be called additionally to the other bound
    function, or whether it will replace the previous function. See bind for the return
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| `bind_class(self, className, sequence=None, func=None, add=None)` | Bind
    to widgets with bind tag `CLASSNAME` at event `SEQUENCE` a call of function `FUNC`.
    An additional Boolean parameter `ADD` specifies whether `FUNC` will be called
    additionally to the other bound function or whether it will replace the previous
    function. See bind for the return value. |'
  prefs: []
  type: TYPE_TB
- en: '| `bindtags(self, tagList=None)` | Set or get the list of bindtags for this
    widget. With no argument, return the list of all bindtags associated with this
    widget. With a list of strings as argument the bindtags are set to this list.
    The bindtags determine in which order events are processed (see bind). |'
  prefs: []
  type: TYPE_TB
- en: '| `cget(self, key)` | Return the resource value for a `Key` given as string.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `clipboard_append(self, string, **kw)` | Append `String` to the `Tk` clipboard.
    A widget specified at the optional display of keyword argument specifies the target
    display. The clipboard can be retrieved with `selection_get`. |'
  prefs: []
  type: TYPE_TB
- en: '| `clipboard_clear(self, **kw)` | Clear the data in the Tk clipboard. A widget
    specified for the optional display of keyword argument specifies the target display.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `clipboard_get(self, **kw)` | Retrieve data from the clipboard on window''s
    display. The window keyword defaults to the root window of the Tkinter application.
    The type keyword specifies the form in which the data is to be returned, and should
    be an atom name, such as STRING or FILE_NAME. Type defaults to `String`. This
    command is equivalent to: `selection_get(CLIPBOARD)`. |'
  prefs: []
  type: TYPE_TB
- en: '| `columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)` | Configure
    column `Index` of a grid. Valid resources are minsize (minimum size of the column),weight
    (how much does additional space propagate to this column), and pad (how much space
    to let additionally). |'
  prefs: []
  type: TYPE_TB
- en: '| `config = configure(self, cnf=None, **kw)` | Configure resources of a widget.
    The values for resources are specified as keyword arguments. To get an overview
    about the allowed keyword arguments, call the method keys. |'
  prefs: []
  type: TYPE_TB
- en: '| `event_add(self, virtual, *sequences)` | Bind a virtual event `virtual` (of
    the form `<<Name>>`) to an event `sequence` such that the virtual event is triggered
    whenever SEQUENCE occurs. |'
  prefs: []
  type: TYPE_TB
- en: '| `event_delete(self, virtual, *sequences)` | Unbind a virtual event `virtual`
    from `sequence`. |'
  prefs: []
  type: TYPE_TB
- en: '| `event_generate(self, sequence, **kw)` | Generate an event `sequence`. Additional
    keyword arguments specify parameter of the event(for example, x, y, rootx, and
    rooty). |'
  prefs: []
  type: TYPE_TB
- en: '| `event_info(self, virtual=None)` | Return a list of all virtual events or
    the informationabout the `sequence` bound to the virtual event `virtual`. |'
  prefs: []
  type: TYPE_TB
- en: '| `focus = focus_set(self)` | Direct input focus to this widget. If the application
    currently does not have the focus, this widget will get the focus if the application
    gets the focus through the window manager. |'
  prefs: []
  type: TYPE_TB
- en: '| `focus_displayof(self)` | Return the widget which has currently the focus
    on the display where this widget is located. Return None if the application does
    not have the focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `focus_force(self)` | Direct input focus to this widget even if the application
    does not have the focus. Use with caution! |'
  prefs: []
  type: TYPE_TB
- en: '| `focus_get(self)` | Return the widget which has currently the focus in the
    application. Use `focus_displayof` to allow working with several displays. Return
    None if application does not have the focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `focus_lastfor(self)` | Return the widget which would have the focus if top
    level for this widget gets the focus from the window manager. |'
  prefs: []
  type: TYPE_TB
- en: '| `focus_set(self)` | Direct input focus to this widget. If the application
    currently does not have the focus this widget will get the focus if the application
    gets the focus through the window manager. |'
  prefs: []
  type: TYPE_TB
- en: '| `getboolean(self, s)` | Return a Boolean value for Tclboolean values true
    and false given as parameter. |'
  prefs: []
  type: TYPE_TB
- en: '| `getvar(self, name=''PY_VAR'')` | Return value of Tcl variable `name`. |'
  prefs: []
  type: TYPE_TB
- en: '| `grab_current(self)` | Return widget which has currently the grab in this
    application or None. |'
  prefs: []
  type: TYPE_TB
- en: '| `grab_release(self)` `)` | Release grab for this widget if currently set.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `grab_set(self)` | Set grab for this widget. A grab directs all events to
    this and descendant widgets in the application. |'
  prefs: []
  type: TYPE_TB
- en: '| `grab_set_global(self)` | Set global grab for this widget. A global grab
    directs all events to this and descendant widgets on the display. Use with caution
    - other applications do not get events anymore. |'
  prefs: []
  type: TYPE_TB
- en: '| `grab_status(self)` | Return None, "local" or "global" if this widget has
    no, a local or a global grab. |'
  prefs: []
  type: TYPE_TB
- en: '| `grid_bbox(self, column=None, row=None, col2=None, row2=None)` | Return a
    tuple of integer coordinates for the bounding box of this widget controlled by
    the geometry manager grid. If `column`, `row` is given, the bounding box applies
    from the cell with row and column 0 to the specified cell. If `col2` and `row2`
    are given, the bounding box starts at that cell. The returned integers specify
    the offset of the upper left corner in the master widget and the width and height.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `grid_columnconfigure(self, index, cnf={}, **kw)` | Configure column `index`
    of a grid. Valid resources are minsize (minimum size of the column), weight (how
    much does additional space propagate to this column), and pad (how much space
    to let additionally). |'
  prefs: []
  type: TYPE_TB
- en: '| `grid_location(self, x, y)` | Return a tuple of column and row which identify
    the cell at which the pixel at position `x` and `y` inside the master widget is
    located. |'
  prefs: []
  type: TYPE_TB
- en: '| `grid_propagate(self, flag=[''_noarg_''])` | Set or get the status for propagation
    of geometry information. A Boolean argument specifies whether the geometry information
    of the slaves will determine the size of this widget. If no argument is given,
    the current setting will be returned. |'
  prefs: []
  type: TYPE_TB
- en: '| `grid_rowconfigure(self, index, cnf={}, **kw)` | Configure row `index` of
    a grid. Valid resources are minsize (minimum size of the row),weight (how much
    does additional space propagate to this row), and pad (how much space to let additionally).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `grid_size(self)` | Return a tuple of the number of column and rows in the
    grid. |'
  prefs: []
  type: TYPE_TB
- en: '| `grid_slaves(self, row=None, column=None)` | Return a list of all slaves
    of this widget in its packing order. |'
  prefs: []
  type: TYPE_TB
- en: '| `image_names(self)` | Return a list of all existing image names. |'
  prefs: []
  type: TYPE_TB
- en: '| `image_types(self)` | Return a list of all available image types (e.g. photo
    bitmap). |'
  prefs: []
  type: TYPE_TB
- en: '| `keys(self)` | Return a list of all resource names of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `lift = tkraise(self, aboveThis=None)` | Raise this widget in the stacking
    order. |'
  prefs: []
  type: TYPE_TB
- en: '| `lower(self, belowThis=None)` | Lower this widget in the stacking order.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `mainloop(self, n=0)` | Call the `mainloop` of Tk. |'
  prefs: []
  type: TYPE_TB
- en: '| `nametowidget(self, name)` | Return the Tkinter instance of a widget identified
    by its Tcl name NAME. |'
  prefs: []
  type: TYPE_TB
- en: '| `option_add(self, pattern, value, priority=None)` | Set a `value` (second
    parameter) for an option PATTERN (first parameter). An optional third parameter
    gives the numeric priority (defaults to 80). |'
  prefs: []
  type: TYPE_TB
- en: '| `option_clear(self)` | Clear the option database. It will be reloaded if
    option_add is called. |'
  prefs: []
  type: TYPE_TB
- en: '| `option_get(self, name, className)` | Return the value for an option NAME
    for this widget with `classname`. Values with higher priority override lower values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `option_readfile(self, fileName, priority=None)` | Read file `filename` into
    the option database. An optional second parameter gives the numeric priority.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `propagate =pack_propagate(self, flag=[''_noarg_''])` | Set or get the status
    for propagation of geometry information. A Boolean argument specifies whether
    the geometry information of the slaves will determine the size of this widget.
    If no argument is given, the current setting will be returned. |'
  prefs: []
  type: TYPE_TB
- en: '| `pack_slaves(self)` | Return a list of all slaves of this widget in its packing
    order. |'
  prefs: []
  type: TYPE_TB
- en: '| `quit(self)` | Quit the Tcl interpreter. All widgets will be destroyed. |'
  prefs: []
  type: TYPE_TB
- en: '| `register = _register(self, func, subst=None, needcleanup=1)` | Return a
    newly created Tcl function. If this function is called, the Python function `func`
    will be executed. An optional function `subst` can be given, which will be executed
    before `func`. |'
  prefs: []
  type: TYPE_TB
- en: '| `rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)` | Configure
    row `index` of a grid. Valid resources are minsize (minimum size of the row),
    weight (how much does additional space propagate to this row), and pad (how much
    space to let additionally). |'
  prefs: []
  type: TYPE_TB
- en: '| `selection_clear(self, **kw)''` | Clear the current X selection. |'
  prefs: []
  type: TYPE_TB
- en: '| `selection_get(self, **kw)` | Return the contents of the current X selection.
    A keyword parameter selection specifies the name of the selection and defaults
    to PRIMARY. A keyword parameter display of specifies a widget on the display to
    use. |'
  prefs: []
  type: TYPE_TB
- en: '| `selection_handle(self, command, **kw)` | Specify a function `command` to
    call if the X selection owned by this widget is queried by another application.
    This function must return the contents of the selection. The function will be
    called with the arguments OFFSET and LENGTH, which allows the chunking of very
    long selections. The following keyword parameters can be provided: selection -
    name of the selection (default PRIMARY), type - type of the selection (for example,
    `string`, FILE_NAME). |'
  prefs: []
  type: TYPE_TB
- en: '| `selection_own(self, **kw)` | Become owner of X selection. A keyword parameter
    selection specifies the name of the selection (default PRIMARY). |'
  prefs: []
  type: TYPE_TB
- en: '| `selection_own_get(self, **kw)` | Return owner of X selection. The following
    keyword parameter can be provided: selection - name of the selection (default
    PRIMARY), type - type of the selection (e.g. STRING, FILE_NAME). |'
  prefs: []
  type: TYPE_TB
- en: '| `send(self, interp, cmd, *args)` | Send Tcl command CMD to different interpreter
    INTERP to be executed. |'
  prefs: []
  type: TYPE_TB
- en: '| `setvar(self, name=''PY_VAR'', value=''1'')` | Set Tcl variable NAME to VALUE.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `size = grid_size(self)` | Return a tuple of the number of column and rows
    in the grid. |'
  prefs: []
  type: TYPE_TB
- en: '| `slaves = pack_slaves(self)` | Return a list of all slaves of this widget
    in its packing order. |'
  prefs: []
  type: TYPE_TB
- en: '| `tk_focusFollowsMouse(self)` | The widget under mouse will get automatically
    focus. Cannot be disabled easily. |'
  prefs: []
  type: TYPE_TB
- en: '| `tk_focusNext(self)` | Return the next widget in the focus order which follows
    widget which has currently the focus. The focus order first goes to the next child,
    then to the children of the child recursively and then to the next sibling which
    is higher in the stacking order. A widget is omitted if it has the takefocus resource
    set to 0. |'
  prefs: []
  type: TYPE_TB
- en: '| `tk_focusPrev(self)` | Return previous widget in the focus order. See `tk_focusNext`
    for details. |'
  prefs: []
  type: TYPE_TB
- en: '| `tk_setPalette(self, *args, **kw)` | Set a new color scheme for all widget
    elements. A single color as argument will cause that all colors of Tk widget elements
    are derived from this. Alternatively, several keyword parameters and its associated
    colors can be given. The following keywords are valid: `activeBackground`, `foreground`,
    `selectColor`, `activeForeground`, `highlightBackground`, `selectBackground`,
    `background`, `highlightColor`, `selectForeground`, `disabledForeground`, `insertBackground`,
    and `troughColor`. |'
  prefs: []
  type: TYPE_TB
- en: '| `tkraise(self, aboveThis=None)` | Raise this widget in the stacking order.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `unbind(self, sequence, funcid=None)` | Unbind for this widget for event
    SEQUENCE the function identified with FUNCID. |'
  prefs: []
  type: TYPE_TB
- en: '| `unbind_all(self, sequence)''` | Unbind for all widgets for event SEQUENCE
    all functions. |'
  prefs: []
  type: TYPE_TB
- en: '| `unbind_class(self, className, sequence)` | Unbind all widgets with bindtag
    `classname` for event `sequence` all functions. |'
  prefs: []
  type: TYPE_TB
- en: '| `update(self)` | Enter event loop until all pending events have been processed
    by Tcl. |'
  prefs: []
  type: TYPE_TB
- en: '| `update_idletasks(self)` | Enter event loop until all idle callbacks have
    been called. This will update the display of windows, but not process events caused
    by the user. |'
  prefs: []
  type: TYPE_TB
- en: '| `wait_variable(self, name=''PY_VAR'')` | Wait until the variable is modified.
    A parameter of type `IntVar`, `StringVar`, `DoubleVar`, or `BooleanVar` must be
    given. |'
  prefs: []
  type: TYPE_TB
- en: '| `wait_visibility(self, window=None)` | Wait until the visibility of a Widget
    changes(for example, it appears).If no parameter is given self is used. |'
  prefs: []
  type: TYPE_TB
- en: '| `wait_window(self, window=None)` | Wait until a Widget is destroyed. If no
    parameter is given, self is used. |'
  prefs: []
  type: TYPE_TB
- en: '| `waitvar = wait_variable(self, name=''PY_VAR'')` | Wait until the variable
    is modified. A parameter of type `IntVar`, `StringVar`, `DoubleVar`, or `BooleanVar`
    must be given. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_atom(self, name, displayof=0)` | Return integer which represents atom
    name. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_atomname(self, id, displayof=0)` | Return name of atom with identifier
    ID. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_cells(self)` | Return number of cells in the colormap for this widget.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_children(self)` | Return a list of all widgets which are children
    of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_class(self)` | Return window class name of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_colormapfull(self)` | Return true if at the last color request the
    `colormap` was full. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_containing(self, rootX, rootY, displayof=0)` | Return the widget which
    is at the root coordinates root`X`, `rootY`. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_depth(self)` | Return the number of bits per pixel. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_exists(self)` | Return true if this widget exists. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_fpixels(self, number)` | Return the number of pixels for the given
    distance NUMBER (e.g. "3c") as float. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_geometry(self)` | Return geometry string for this widget in the form
    "widthxheight+X+Y". |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_height(self)` | Return height of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_id(self)` | Return identifier ID for this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_interps(self, displayof=0)` | Return the name of all Tcl interpreters
    for this display. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_ismapped(self)` | Return true if this widget is mapped. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_manager(self)` | Return the window manager name for this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_name(self)` | Return the name of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_parent(self)` | Return the name of the parent of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_pathname(self, id, displayof=0)` | Return the pathname of the widget
    given by ID. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_pixels(self, num)` | Rounded integer value of winfo_fpixels. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_pointerx(self)` | Return the x coordinate of the pointer on the root
    window. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_pointerxy(self)` | Return a tuple of x and y coordinates of the pointer
    on the root window. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_pointery(self)` | Return the y coordinate of the pointer on the root
    window. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_reqheight(self)` | Return requested height of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_reqwidth(self)` | Return requested width of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_rgb(self, color)` | Return tuple of decimal values for red, green,
    blue for `color` in this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_rootx(self)` `/ winfo_rooty(self)` | Return x/y coordinate of upper
    left corner of this widget on the root window. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_screen(self)` | Return the screen name of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_screencells(self)` | Return the number of the cells in the colormap
    of the screen of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_screendepth(self)` | Return the number of bits per pixel of the root
    window of the screen of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_screenheight(self)` | Return the number of pixels of the height of
    the screen of this widget in pixel. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_screenmmheight(self)` | Return the number of pixels of the height
    of the screen of this widget in mm. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_screenmmwidth``(self)` | Return the number of pixels of the width
    of the screen of this widget in mm. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_screenwidth(self)` | Return the number of pixels of the width of the
    screen of this widget in pixel. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_toplevel(self)` | Return the Toplevel widget of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_viewable(self)` | Return true if the widget and all its higher ancestors
    are mapped. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_visual(self) = winfo_screenvisual(self)` | Return one of the strings
    `directcolor`, `grayscale`, `pseudocolor`, `staticcolor`, `staticgray`, or `truecolor`
    for the `colormodel` of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_visualid(self)` | Return the X identifier for the visual for this
    widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_visualsavailable(self, includeids=0)` | Return a list of all visuals
    available for the screen of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_vrootheight(self)` | Return the height of the virtual root window
    associated with this widget in pixels. If there is no virtual root window, return
    the height of the screen. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_vrootwidth(self)` | Return the width of the virtual root window associated
    with this widget in pixel. If there is no virtual root window, return the width
    of the screen. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_vrootx(self)` | Return the x offset of the virtual root relative to
    the root window of the screen of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_vrooty(self)` | Return the y offset of the virtual root relative to
    the root window of the screen of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_width(self)` | Return the width of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_x(self)` | Return the x coordinate of the upper left corner of this
    widget in the parent. |'
  prefs: []
  type: TYPE_TB
- en: '| `winfo_y(self)` | Return the y coordinate of the upper left corner of this
    widget in the parent. |'
  prefs: []
  type: TYPE_TB
- en: ttk widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ttk widget is based on a revised and enhanced version of TIP #48 ([http://tip.tcl.tk/48](http://tip.tcl.tk/48))
    specified style engine.'
  prefs: []
  type: TYPE_NORMAL
- en: 'FILE: `path\to\python27\\lib\lib-tk\ttk.py`'
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea is to separate, to the extent possible, the code implementing
    a widget's behavior from the code implementing its appearance. Widget class bindings
    are primarily responsible for maintaining the widget state and invoking callbacks,
    and all aspects of the widgets appearance lies under themes.
  prefs: []
  type: TYPE_NORMAL
- en: You can substitute some Tkinter widgets with their corresponding ttk widgets
    (Button, Checkbutton, Entry, Frame, Label, LabelFrame, Menubutton, PanedWindow,
    Radiobutton, Scale, and Scrollbar).
  prefs: []
  type: TYPE_NORMAL
- en: However, Tkinter and ttk widgets are not completely compatible. The main difference
    is that Tkinter widget styling options like `fg`, `bg`, `relief`, and others are
    not supported options for ttk widgets. These styling options are instead moved
    to `ttk.Style()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a small Tkinter code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s its equivalent code in ttk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: ttk also provides six new widget classes which are not available in Tkinter.
    These are `Combob` `ox`, `Notebo` `ok`, `Progressb` `ar`, `Separator`, `Sizegrip`,
    and `Treevi` `ew`.
  prefs: []
  type: TYPE_NORMAL
- en: 'ttk style names are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Widget class | Style name |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Button` | `TButton` |'
  prefs: []
  type: TYPE_TB
- en: '| `Checkbutto` `n` | `TCheckbutton` |'
  prefs: []
  type: TYPE_TB
- en: '| `Combobox` | `TCombobox` |'
  prefs: []
  type: TYPE_TB
- en: '| `Entry` | `TEntry` |'
  prefs: []
  type: TYPE_TB
- en: '| `Frame` | `TFrame` |'
  prefs: []
  type: TYPE_TB
- en: '| `Label` | `TLabel` |'
  prefs: []
  type: TYPE_TB
- en: '| `LabelFrame` | `TLabelFrame` |'
  prefs: []
  type: TYPE_TB
- en: '| `Menubutton` | `TMenubutton` |'
  prefs: []
  type: TYPE_TB
- en: '| `Notebook` | `TNotebook` |'
  prefs: []
  type: TYPE_TB
- en: '| `PanedWindow` | `TPanedwindow` (note window is not capitalized!) |'
  prefs: []
  type: TYPE_TB
- en: '| `Progressbar` | `Horizontal.TProgressbar` or `Vertical.TProgressbar`, based
    on the orient option. |'
  prefs: []
  type: TYPE_TB
- en: '| `Radiobutton` | `TRadiobutton` |'
  prefs: []
  type: TYPE_TB
- en: '| `Scale` | `Horizontal.TScale` or `Vertical.TScale`, based on the orient option.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Scrollbar` | `Horizontal.TScrollbar` or `Vertical.TScrollbar`, based on
    the orient option. |'
  prefs: []
  type: TYPE_TB
- en: '| `Separator` | `TSeparator` |'
  prefs: []
  type: TYPE_TB
- en: '| `Sizegrip` | `TSizegrip` |'
  prefs: []
  type: TYPE_TB
- en: '| `Treeview` | `Treeview` (note only single ''T'' meaning notTTreview!) |'
  prefs: []
  type: TYPE_TB
- en: 'Options available to all ttk widgets are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `class` | Specifies the window class. The class is used when querying the
    option database for the window''s other options, to determine the default bindtags
    for the window, and to select the widget''s default layout and style. This is
    a read-only option which may only be specified when the window is created. |'
  prefs: []
  type: TYPE_TB
- en: '| `cursor` | specifies mouse cursor to be displayed for the widget |'
  prefs: []
  type: TYPE_TB
- en: '| `takefocus` | Determines whether the window accepts the focus during keyboard
    traversal. 0, 1 or an empty string is returned. If 0, the window should be skipped
    entirely during keyboard traversal. If 1, the window should receive the input
    focus as long as it is viewable. An empty string means that the traversal scripts
    make the decision about whether or not to focus on the window. |'
  prefs: []
  type: TYPE_TB
- en: '| `style` | May be used to specify a custom widget style. |'
  prefs: []
  type: TYPE_TB
- en: 'Options accepted by all scrollable ttk widgets are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `xscrollcommand` | Used to communicate with horizontal scrollbars. When the
    view in the widget''s window changes, the widget will generate a Tcl command based
    on the scrollcommand. Usually, this option consists of the Scrollbar.set() method
    of some scrollbar. This will cause the scrollbar to be updated whenever the view
    in the window changes. |'
  prefs: []
  type: TYPE_TB
- en: '| `yscrollcommand` | Command for vertical scrollbars. |'
  prefs: []
  type: TYPE_TB
- en: 'Methods from ttk.Widget class with their description are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `identify(self, x, y)` | Returns the name of the element at position x, y,
    or the empty string if the point does not lie within any element. x and y are
    pixel coordinates relative to the widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `instate(self, statespec, callback=None, *args, **kw)` | Test the widget''s
    state. If callback is not specified, returns True if the widget state matches
    statespec and False otherwise. If callback is specified, then it will be invoked
    with `*args`, `**kw` if the widget state matches `statespec`. `statespec` is expected
    to be a sequence. |'
  prefs: []
  type: TYPE_TB
- en: '| `state(self, statespec=None)` | Modify or inquire widget state. Widget state
    is returned if statespec is None, otherwise it is set according to the `statespec`
    flags, and then a new state spec is returned, indicating which flags were changed.
    `statespec` is expected to be a sequence. |'
  prefs: []
  type: TYPE_TB
- en: We will not show all ttk widget specific options here. To obtain a list of available
    options for a ttk widget, use the help command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain help on any ttk widget/class, import ttk into the namespace using
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following commands can then be used to get information on a particular
    widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Widget Name | Getting Help |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Label | `help(ttk.Label)` |'
  prefs: []
  type: TYPE_TB
- en: '| Button | `help(ttk.Button)` |'
  prefs: []
  type: TYPE_TB
- en: '| CheckButton | `help(ttk.Checkbutton)` |'
  prefs: []
  type: TYPE_TB
- en: '| Entry | `help(ttk.Entry)` |'
  prefs: []
  type: TYPE_TB
- en: '| Frame | `help(ttk.Frame)` |'
  prefs: []
  type: TYPE_TB
- en: '| LabelFrame | `help(ttk.LabelFrame)` |'
  prefs: []
  type: TYPE_TB
- en: '| Menubutton | `help(ttk.Menubutton)` |'
  prefs: []
  type: TYPE_TB
- en: '| OptionMenu | `help(ttk.OptionMenu)` |'
  prefs: []
  type: TYPE_TB
- en: '| PanedWindow | `help(ttk.PanedWindow)` |'
  prefs: []
  type: TYPE_TB
- en: '| RadioButton | `help(ttk.Radiobutton)` |'
  prefs: []
  type: TYPE_TB
- en: '| Scale | `help(ttk.Scale)` |'
  prefs: []
  type: TYPE_TB
- en: '| Scrollbar | `help(ttk.Scrollbar)` |'
  prefs: []
  type: TYPE_TB
- en: '| Combobox | `help(ttk.Combobox)` |'
  prefs: []
  type: TYPE_TB
- en: '| Notebook | `help(ttk.Notebook)` |'
  prefs: []
  type: TYPE_TB
- en: '| Progressbar | `help(ttk.Progressbar)` |'
  prefs: []
  type: TYPE_TB
- en: '| Separator | `help(ttk.Separator)` |'
  prefs: []
  type: TYPE_TB
- en: '| Sizegrip | `help(ttk.Sizegrip)` |'
  prefs: []
  type: TYPE_TB
- en: '| Treeview | `help(ttk.Treeview)` |'
  prefs: []
  type: TYPE_TB
- en: 'The following given are some ttkVirtual events and situation when they are
    triggered:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Virtual Event | Triggered when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `<<ComboboxSelected>>` | The user selects an element from the list of values
    in the Combobox widget |'
  prefs: []
  type: TYPE_TB
- en: '| `<<NotebookTabChanged>>` | A new tab is selected in the Notebook widget |'
  prefs: []
  type: TYPE_TB
- en: '| `<<TreeviewSelect>>` | Selection changes in the Treeview widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `<<TreeviewOpen>>` | Just before settings the focus item to open = True.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `<<TreeviewClose>>` | Just after setting the focus item to open = False.
    |'
  prefs: []
  type: TYPE_TB
- en: Each widget in ttk is assigned a style, which specifies the set of elements
    making up the widget and how they are arranged, along with dynamic and default
    settings for element options.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the style name is the same as the widget''s class name, but it
    may be overridden by the widget''s style option. If the class name of a widget
    is unknown, use the method `Misc.winfo_class()` (`somewidget.winfo_class()`).
    Following given are few methods with their description of ttk styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `configure(self, style, query_opt=None, **kw)` | Query or sets the default
    value of the specified option(s) in style. Each key in `kw` is an option, and
    each value is either a string or a sequence identifying the value for that option.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `element_create(self, elementname, etype, *args, **kw)` | Create a new element
    in the current theme of given `etype`. |'
  prefs: []
  type: TYPE_TB
- en: '| `element_names(self)` | Returns the list of elements defined in the current
    theme. |'
  prefs: []
  type: TYPE_TB
- en: '| `element_options(self, elementname)` | Return the list of `elementname` options.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `layout(self, style, layoutspec=None)` | Define the widget layout for given
    style. If `layoutspec` is omitted, return the layout specification for given style.`layoutspec`
    is expected to be a list or an object different than None that evaluates to False
    if you want to "turn off" that style. If it is a list (or tuple, or something
    else), each item should be a tuple, where the first item is the layout name, and
    the second item should have the format described below |'
  prefs: []
  type: TYPE_TB
- en: 'A layout can be just `None`, if it takes no options, or a dictionary of options
    specifying how to arrange the element. The layout mechanism uses a simplified
    version of the pack geometry manager: given an initial cavity, each element is
    allocated a parcel.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Valid options: Values | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `side: whichside` | Specifies which side of the cavity to place the element;
    one of top, right, bottom or left. If omitted, the element occupies the entire
    cavity. |'
  prefs: []
  type: TYPE_TB
- en: '| `sticky: nswe` | Specifies where the element is placed inside its allocated
    parcel. |'
  prefs: []
  type: TYPE_TB
- en: '| `children: [sublayout... ]` | Specifies a list of elements to place inside
    the element. Each element is a tuple (or other sequence) where the first item
    is the layout name, and the other is a layout. |'
  prefs: []
  type: TYPE_TB
- en: '| `lookup(self, style, option, state=None, default=None)` | Returns the value
    specified for option in style. If state is specified, it is expected to be a sequence
    of one or more states. If the default argument is set, it is used as a fallback
    value in case no specification for option is found. |'
  prefs: []
  type: TYPE_TB
- en: '| `map(self, style, query_opt=None, **kw)` | Query or sets dynamic values of
    the specified option(s) in style. Each key in kw is an option, and each value
    should be a list or a tuple (usually) containing `statespecs` grouped in tuples,
    or list, or something else of your preference. A `statespec` is compound of one
    or more states, and then a value. |'
  prefs: []
  type: TYPE_TB
- en: '| `theme_create(self, themename, parent=None, settings=None)` | Creates a new
    theme. It is an error if themename already exists. If parent is specified, the
    new theme will inherit styles, elements and layouts from the specified parent
    theme. If settings are present, they are expected to have the same syntax used
    for `theme_settings`. |'
  prefs: []
  type: TYPE_TB
- en: '| `theme_names(self)` | Returns a list of all known themes. |'
  prefs: []
  type: TYPE_TB
- en: '| `theme_settings(self, themename, settings)` | Temporarily sets the current
    theme to `themename`, apply specified settings, and then restores the previous
    theme. Each key in settings is a style and each value may contain the keys `configure`,
    `map`, `layout`, and `element create` and they are expected to have the same format
    as specified by the methods `configure`, `map`, `layout`, and `element_create`
    respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| `theme_use(self, themename=None)` | If `themename` is None, returns the theme
    in use; otherwise, set the current theme to `themename`, refreshes all widgets
    and emits a `<<ThemeChanged>>` event. |'
  prefs: []
  type: TYPE_TB
- en: The Toplevel window methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These methods enable communication with the window manager. They are available
    on the root window (Tk), and also on Toplevel instances.
  prefs: []
  type: TYPE_NORMAL
- en: Note that different window managers behave in different ways. For example, some
    window managers don't support icon windows; some don't support window groups,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '| `aspect = wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)`
    | Instruct the window manager to set the aspect ratio (width/height) of this widget
    to be between `minNumer`/`minDenom` and `maxNumer`/`maxDenom`. Return a tuple
    of the actual values if no argument is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `attributes = wm_attributes(self, *args)` | This subcommand returns or sets
    platform-specific attributes. The first form returns a list of the platform specific
    flags and their values. The second form returns the value for the specific option.
    The third form sets one or more of the values. The values are as follows:On Windows,
    -disabled gets or sets whether the window is in a disabled state. -toolwindow
    gets or sets the style of the windowtotoolwindow (as defined in the MSDN). -topmost
    gets or sets whether this is a topmost window (displays above all other windows).On
    Macintosh, `XXXXX`On Unix, there are currently no special attribute values. |'
  prefs: []
  type: TYPE_TB
- en: '| `client = wm_client(self, name=None)` | Store name in `WM_CLIENT_MACHINE`
    property of this widget. Return current value. |'
  prefs: []
  type: TYPE_TB
- en: '| `colormapwindows = wm_colormapwindows(self, *wlist)` | Store list of window
    names (wlist) into `WM_COLORMAPWINDOWS` property of this widget. This list contains
    windows whose `colormaps` differ from their parents. Return current list of widgets
    if wlist is empty. |'
  prefs: []
  type: TYPE_TB
- en: '| `command = wm_command(self, value=None)` | Store `value` in `WM_COMMAND`
    property. It is the command which shall be used to invoke the application. Return
    current command if `value` is None. |'
  prefs: []
  type: TYPE_TB
- en: '| `deiconify = wm_deiconify(self)` | `deiconify` this widget. If it was never
    mapped, it will not be mapped. On Windows, it will raise this widget and give
    it the focus. |'
  prefs: []
  type: TYPE_TB
- en: '| `focusmodel = wm_focusmodel(self, model=None)` | Set focus model to `model`,
    "active" means that this widget will claim the focus itself, "passive" means that
    the window manager shall give the focus. Return current focus model if `model`
    is None. |'
  prefs: []
  type: TYPE_TB
- en: '| `frame = wm_frame(self)` | Return identifier for decorative frame of this
    widget if present. |'
  prefs: []
  type: TYPE_TB
- en: '| `geometry = wm_geometry(self, newGeometry=None)` | Set `geometry` to `newgeometry`
    of the form `=widthxheight+x+y`. Return current value if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `grid = wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)`
    | Instruct the window manager that this widget shall only be resized on grid boundaries.
    `widthInc` and `heightInc` are the width and height of a grid unit in pixels.
    `baseWidth` and `baseHeight` are the number of grid units requested in `Tk_GeometryRequest`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `group = wm_group(self, pathName=None)` | Set the group leader widgets for
    related widgets to `pathName`. Return the group leader of this widget if None
    is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `iconbitmap = wm_iconbitmap(self, bitmap=None, default=None)` | Set bitmap
    for the iconified widget to BITMAP. Return the bitmap if None is given. Under
    Windows, the DEFAULT parameter can be used to set the icon for the widget and
    any descendants that don''t have an icon set explicitly. DEFAULT can be the relative
    path to a `.ico` file (example: `root.iconbitmap(default=''myicon.ico'')`). See
    Tkdocumentation for more information. |'
  prefs: []
  type: TYPE_TB
- en: '| `iconify = wm_iconify(self)` | Display widget as icon. |'
  prefs: []
  type: TYPE_TB
- en: '| `iconmask = wm_iconmask(self, bitmap=None)` | Set mask for the icon bitmap
    of this widget. Return the mask if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `iconname = wm_iconname(self, newName=None)` | Set the name of the icon for
    this widget. Return the name if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `iconposition = wm_iconposition(self, x=None, y=None)` | Set the position
    of the icon of this widget to X and Y. Return a tuple of the current values of
    X and Y if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `iconwindow = wm_iconwindow(self, pathName=None)` | Set widget `pathName`
    to be displayed instead of icon. Return the current value if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `maxsize = wm_maxsize(self, width=None, height=None)` | Set max `width` and
    `height` for this widget. If the window is gridded, the values are given in grid
    units. Return the current values if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `minsize = wm_minsize(self, width=None, height=None)` | Set min `width` and
    `height` for this widget. If the window is gridded, the values are given in grid
    units. Return the current values if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `overrideredirect = wm_overrideredirect(self, boolean=None)` | Instruct the
    window manager to ignore this widget if Boolean is given with 1\. Return the current
    value if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `positionfrom = wm_positionfrom(self, who=None)` | Instruct the window manager
    that the position of this widget shall be defined by the user if `who` is "user",
    and by its own policy if `who` is "program". |'
  prefs: []
  type: TYPE_TB
- en: '| `protocol = wm_protocol(self, name=None, func=None)` | Bind function `func`
    to command `name` for this widget. Return the function bound to `name` if None
    is given. `name` could be for example, `WM_SAVE_YOURSELF` or `WM_DELETE_WINDOW`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `resizable = wm_resizable(self, width=None, height=None)` | Instruct the
    window manager whether this width can be resized in `width` or `height`. Both
    values are Boolean values. |'
  prefs: []
  type: TYPE_TB
- en: '| `sizefrom = wm_sizefrom(self, who=None)` | Instruct the window manager that
    the size of this widget shall be defined by the user if `who` is "user", and by
    its own policy if `who` is "program". |'
  prefs: []
  type: TYPE_TB
- en: '| `state = wm_state(self, newstate=None)` | Query or set the state of this
    widget as one of normal, icon, iconic (see `wm_iconwindow`), withdrawn, or zoomed
    (Windows only). |'
  prefs: []
  type: TYPE_TB
- en: '| `title = wm_title(self, string=None)` | Set the title of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `transient = wm_transient(self, master=None)` | Instruct the window manager
    that this widget is transient with regard to widget `master`. |'
  prefs: []
  type: TYPE_TB
- en: '| `withdraw = wm_withdraw(self)` | Withdraw this widget from the screen such
    that it is unmapped and forgotten by the window manager. Re-draw it with `wm_deiconify`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)`
    | Instruct the window manager to set the aspect ratio (width/height) of this widget
    to be between `minNumer`/`minDenom` and `maxNumer`/`maxDenom`. Return a tuple
    of the actual values if no argument is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_attributes(self, *args)` | This subcommand returns or sets platform-specific
    attributes. The first form returns a list of the platform specific flags and their
    values. The second form returns the value for the specific option. The third form
    sets one or more of the values. The values are as follows:On Windows, `-disabled`
    gets or sets whether the window is in a disabled state. `-toolwindow` gets or
    sets the style of the windowtotoolwindow (as defined in the MSDN). `-topmost`
    gets or sets whether this is a topmost window (displays above all other windows).On
    Macintosh, `XXXXX`On Unix, there are currently no special attribute values. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_client(self, name=None)` | Store `name` in `WM_CLIENT_MACHINE` property
    of this widget. Return current value. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_colormapwindows(self, *wlist)` | Store list of window names (wlist) into
    `WM_COLORMAPWINDOWS` property of this widget. This list contains windows whose
    `colormaps` differ from their parents. Return current list of widgets if wlist
    is empty. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_command(self, value=None)` | Store `value` in `WM_COMMAND` property.
    It is the command which shall be used to invoke the application. Return current
    command if `value` is None. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_deiconify(self)` | Deiconify this widget. If it was never mapped, it
    will not be mapped. On Windows, it will raise this widget and give it the focus.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_focusmodel(self, model=None)` | Set focus model to model. "active" means
    that this widget will claim the focus itself, "passive" means that the window
    manager shall give the focus. Return current focus model if `model` is None. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_frame(self)` | Return identifier for decorative frame of this widget
    if present. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_geometry(self, newGeometry=None)` | Set `geometry` to `newgeometry` of
    the form `=widthxheight+x+y`. Return current value if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)`
    | Instruct the window manager that this widget shall only be resized on grid boundaries.
    `widthInc` and `heightInc` are the width and height of a grid unit in pixels.
    `baseWidth` and `baseHeight` are the number of grid units requested in `Tk_GeometryRequest`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_group(self, pathName=None)` | Set the group leader widgets for related
    widgets to `pathname`. Return the group leader of this widget if None is given.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_iconbitmap(self, bitmap=None, default=None)` | Set bitmap for the iconified
    widget to `bitmap`. Return the bitmap if None is given.Under Windows, the `default`
    parameter can be used to set the icon for the widget and any descendants that
    don''t have an icon set explicitly. DEFAULT can be the relative path to a `.ico`
    file (example: `root.iconbitmap(default=''myicon.ico'')`). See Tkdocumentation
    for more information. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_iconify(self)` | Display widget as icon. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_iconmask(self, bitmap=None)` | Set mask for the icon bitmap of this widget.
    Return the mask if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_iconname(self, newName=None)` | Set the name of the icon for this widget.
    Return the name if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_iconposition(self, x=None, y=None)` | Set the position of the icon of
    this widget to X and Y. Return a tuple of the current values of X and X if None
    is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_iconwindow(self, pathName=None)` | Set widget `pathname` to be displayed
    instead of icon. Return the current value if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_maxsize(self, width=None, height=None)` | Set max `width` and `height`
    for this widget. If the window is gridded, the values are given in grid units.
    Return the current values if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_minsize(self, width=None, height=None)` | Set min `width` and `height`
    for this widget. If the window is gridded the values are given in grid units.
    Return the current values if None is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_overrideredirect(self, boolean=None)` | Instruct the window manager to
    ignore this widget if Boolean is given with 1\. Return the current value if None
    is given. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_positionfrom(self, who=None)` | Instruct the window manager that the
    position of this widget shall be defined by the user if `who` is "user", and by
    its own policy if `who` is "program". |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_protocol(self, name=None, func=None)` | Bind function `func` to command
    `name` for this widget. Return the function bound to name if None is given. Name
    could be for example, `WM_SAVE_YOURSELF` or `WM_DELETE_WINDOW`. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_resizable(self, width=None, height=None)` | Instruct the window manager
    whether this width can be resized in `width` or `height`. Both values are Boolean
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_sizefrom(self, who=None)` | Instruct the window manager that the size
    of this widget shall be defined by the user if `who` is "user", and by its own
    policy if `who` is "program". |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_state(self, newstate=None)` | Query or set the state of this widget as
    one of `normal`, `icon`, `iconic` (see `wm_iconwindow`), `withdrawn`, or `zoomed`
    (Windows only). |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_title(self, string=None)` | Set the title of this widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_transient(self, master=None)` | Instruct the window manager that this
    widget is transient with regard to widget `master`. |'
  prefs: []
  type: TYPE_TB
- en: '| `wm_withdraw(self)` | Withdraw this widget from the screen such that it is
    unmapped and forgotten by the window manager. Re-draw it with `wm_deiconify`.
    |'
  prefs: []
  type: TYPE_TB
