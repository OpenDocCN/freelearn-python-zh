- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building an E-Learning Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned the basics of the internationalization
    and localization of Django projects, adapting your project to meet the local formats
    and languages for your users.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will start a new Django project that will consist of an
    e-learning platform with your own **content management system** (**CMS**). Online
    learning platforms are a great example of applications that require tools for
    advanced content handling. You will learn how to create flexible data models that
    accommodate diverse data types and discover how to implement custom model functionalities
    that you can apply to your future Django projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create models for the CMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create fixtures for your models and apply them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use model inheritance to create data models for polymorphic content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create custom model fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order course contents and modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build authentication views for the CMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, diagrams at the start represented views, templates, and
    end-to-end functionalities. This chapter, however, shifts the focus to implementing
    model inheritance and creating custom model fields, topics not easily captured
    in our usual diagrams. Instead, you will see specific diagrams to illustrate these
    concepts throughout the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12).
  prefs: []
  type: TYPE_NORMAL
- en: All the Python modules used in this chapter are included in the `requirements.txt`
    file in the source code that comes with this chapter. You can follow the instructions
    to install each Python module below, or you can install all the requirements at
    once with the command `python` `-m` `pip` `install` `-r requirements.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the e-learning project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your final practical project will be an e-learning platform. First, create
    a virtual environment for your new project within the `env/` directory with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Linux or macOS, run the following command to activate your
    virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Windows, use the following command instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Django in your virtual environment with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You are going to manage image uploads in your project, so you also need to
    install `Pillow` with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new project using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the new `educa` directory and create a new application using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `settings.py` file of the `educa` project and add `courses` to the
    `INSTALLED_APPS` setting, as follows. The new line is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `courses` application is now active for the project. Next, we are going
    to prepare our project to serve media files and we will define the models for
    the courses and course contents.
  prefs: []
  type: TYPE_NORMAL
- en: Serving media files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before creating the models for courses and course contents, we will prepare
    the project to serve media files. Course instructors will be able to upload media
    files to course content using the CMS that we will build. Therefore, we will configure
    the project to serve media files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings.py` file of the project and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will enable Django to manage file uploads and serve media files. `MEDIA_URL`
    is the base URL used to serve the media files uploaded by users. `MEDIA_ROOT`
    is the local path where they reside. Paths and URLs for files are built dynamically
    by prepending the project path or the media URL to them for portability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, edit the main `urls.py` file of the `educa` project and modify the code,
    as follows. New lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We have added the `static()` helper function to serve media files with the Django
    development server during development (that is, when the `DEBUG` setting is set
    to `True`).
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the `static()` helper function is suitable for development but
    not for production use. Django is inefficient at serving static files. Never serve
    your static files with the Django development server in a production environment.
    You will learn how to serve static files in a production environment in *Chapter
    17*, *Going Live*.
  prefs: []
  type: TYPE_NORMAL
- en: The project is now ready to serve media files. Let’s create the models for the
    courses and course contents.
  prefs: []
  type: TYPE_NORMAL
- en: Building the course models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your e-learning platform will offer courses on various subjects. Each course
    will be divided into a configurable number of modules, and each module will contain
    a configurable number of contents. The contents will be of various types: text,
    files, images, or videos. The following example shows what the data structure
    of your course catalog will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s build the course models. Edit the `models.py` file of the `courses` application
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the initial `Subject`, `Course`, and `Module` models. The `Course`
    model fields are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`owner`: The instructor who created this course.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subject`: The subject that this course belongs to. It is a `ForeignKey` field
    that points to the `Subject` model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: The title of the course.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slug`: The slug of the course. This will be used in URLs later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overview`: A `TextField` column to store an overview of the course.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created`: The date and time when the course was created. It will be automatically
    set by Django when creating new objects because of `auto_now_add=True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each course is divided into several modules. Therefore, the `Module` model contains
    a `ForeignKey` field that points to the `Course` model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell and run the following command to create the initial migration
    for this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the following command to apply all migrations to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see output that includes all applied migrations, including those
    of Django. The output will contain the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The models of your `courses` application have been synced with the database.
    Next, we are going to add the course models to the administration site.
  prefs: []
  type: TYPE_NORMAL
- en: Registering the models in the administration site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s register the course models on the administration site so that we can
    manage the data easily. Edit the `admin.py` file inside the `courses` application
    directory and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The models for the `courses` application are now registered on the administration
    site. Remember that you use the `@admin.register()` decorator to register models
    on the administration site.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to create initial data to populate your
    models.
  prefs: []
  type: TYPE_NORMAL
- en: Using fixtures to provide initial data for models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, you might want to prepopulate your database with hardcoded data.
    This is useful for automatically including initial data in the project setup,
    instead of having to add it manually. Django comes with a simple way to load and
    dump data from the database into files that are called **fixtures**. Django supports
    fixtures in JSON, XML, or YAML formats. The structure of a fixture closely resembles
    the API representation of a model, making it straightforward to translate data
    between internal database formats and external applications. You are going to
    create a fixture to include several initial `Subject` objects for your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a superuser using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the development server using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/admin/courses/subject/` in your browser. Create
    several subjects using the administration site. The change list page should look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: The subject change list view on the administration site'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command from the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `dumpdata` command dumps data from the database into the standard output,
    serialized in JSON format by default. The resulting data structure includes information
    about the model and its fields for Django to be able to load it into the database.
  prefs: []
  type: TYPE_NORMAL
- en: You can limit the output to the models of an application by providing the application
    names to the command or specifying single models for outputting data using the
    `app.Model` format.
  prefs: []
  type: TYPE_NORMAL
- en: You can also specify the format using the `--format` flag. By default, `dumpdata`
    outputs the serialized data to the standard output. However, you can indicate
    an output file using the `--output` flag, which allows you to store the output.
    The `--indent` flag allows you to specify indentations. For more information on
    `dumpdata` parameters, run `python manage.py dumpdata --help`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save this dump to a fixtures file in a new `fixtures/` directory in the `courses`
    application using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the development server and use the administration site to remove the subjects
    you created, as shown in *Figure 12.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Deleting all existing subjects'
  prefs: []
  type: TYPE_NORMAL
- en: 'After deleting all subjects, load the fixture into the database using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'All `Subject` objects included in the fixture are loaded into the database
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Subjects from the fixture are now loaded into the database'
  prefs: []
  type: TYPE_NORMAL
- en: By default, Django looks for files in the `fixtures/` directory of each application,
    but you can specify the complete path to the fixture file for the `loaddata` command.
    You can also use the `FIXTURE_DIRS` setting to tell Django about additional directories
    to look in for fixtures.
  prefs: []
  type: TYPE_NORMAL
- en: Fixtures are not only useful for setting up initial data but also for providing
    sample data for your application or data required for your tests. You can also
    use fixtures to populate necessary data for production environments.
  prefs: []
  type: TYPE_NORMAL
- en: You can read about how to use fixtures for testing at [https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading](https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to load fixtures in model migrations, look at Django’s documentation
    about data migrations. You can find the documentation for migrating data at [https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations](https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations).
  prefs: []
  type: TYPE_NORMAL
- en: You have created the models to manage course subjects, courses, and course modules.
    Next, you will create models to manage different types of module content.
  prefs: []
  type: TYPE_NORMAL
- en: Creating models for polymorphic content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You plan to add different types of content to the course modules, such as text,
    images, files, and videos. **Polymorphism** is the provision of a single interface
    to entities of different types. You need a versatile data model that allows you
    to store diverse content that is accessible through a single interface. In *Chapter
    7*, *Tracking User Actions*, you learned about the convenience of using generic
    relations to create foreign keys that can point to the objects of any model. You
    are going to create a `Content` model that represents the modules’ contents and
    define a generic relation to associate any object with the content object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of the `courses` application and add the following
    imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following code to the end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the `Content` model. A module contains multiple contents, so you define
    a `ForeignKey` field that points to the `Module` model. You can also set up a
    generic relation to associate objects from different models that represent different
    types of content. Remember that you need three different fields to set up a generic
    relation. In your `Content` model, these are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`content_type`: A `ForeignKey` field to the `ContentType` model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object_id`: A `PositiveIntegerField` to store the primary key of the related
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item`: A `GenericForeignKey` field to the related object combining the two
    previous fields'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only the `content_type` and `object_id` fields have a corresponding column in
    the database table of this model. The `item` field allows you to retrieve or set
    the related object directly, and its functionality is built on top of the other
    two fields.
  prefs: []
  type: TYPE_NORMAL
- en: You are going to use a distinct model for each type of content; text, image,
    video, and document. Your `Content` models will share some common fields but they
    will vary in the specific data that they store. For example, for text content,
    you will store the actual text, but for video content, you will store the video
    URL. To accomplish this, you will need to employ model inheritance. We will dive
    into the options that Django offers for model inheritance before building our
    `Content` models.
  prefs: []
  type: TYPE_NORMAL
- en: Using model inheritance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django supports model inheritance. It works in a similar way to standard class
    inheritance in Python. If you are not familiar with class inheritance, it involves
    defining a new class that inherits methods and properties from an existing class.
    This facilitates code reusability and can simplify the creation of related classes.
    You can read more about class inheritance at [https://docs.python.org/3/tutorial/classes.html#inheritance](https://docs.python.org/3/tutorial/classes.html#inheritance).
  prefs: []
  type: TYPE_NORMAL
- en: 'Django offers the following three options to use model inheritance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Abstract models**: Useful when you want to put some common information into
    several models'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-table model inheritance**: Applicable when each model in the hierarchy
    is considered a complete model by itself'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proxy models**: Useful when you need to change the behavior of a model, for
    example, by including additional methods, changing the default manager, or using
    different meta options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take a closer look at each of them.
  prefs: []
  type: TYPE_NORMAL
- en: Abstract models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An abstract model is a base class in which you define the fields you want to
    include in all child models. Django doesn’t create any database tables for abstract
    models. A database table is created for each child model, including the fields
    inherited from the abstract class and the ones defined in the child model.
  prefs: []
  type: TYPE_NORMAL
- en: To mark a model as abstract, you need to include `abstract=True` in its `Meta`
    class. Django will recognize that it is an abstract model and will not create
    a database table for it. To create child models, you just need to subclass the
    abstract model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows an abstract `BaseContent` model and a child `Text`
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In this case, Django would create a table for the `Text` model only, including
    the `title`, `created`, and `body` fields.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12.4* shows the models and associated database tables for the code
    example provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_12_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Sample models and database tables for inheritance using abstract
    models'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to learn about a different model inheritance approach, where
    multiple database tables are created.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-table model inheritance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In multi-table inheritance, each model corresponds to a database table. Django
    creates a `OneToOneField` field for the relationship between the child model and
    its parent model. To use multi-table inheritance, you have to subclass an existing
    model. Django will create a database table for both the original model and the
    sub-model. The following example shows multi-table inheritance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Django will include an automatically generated `OneToOneField` field in the
    `Text` model that points to the `BaseContent` model. The name for this field is
    `basecontent_ptr`, where `ptr` stands for *pointer*. A database table is created
    for each model.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12.5* shows the models and associated database tables for the multi-table
    model inheritance code example provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_12_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Sample models and database tables for multi-table model inheritance'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to learn about another model inheritance approach, where
    multiple models serve as a proxy to a single database table.
  prefs: []
  type: TYPE_NORMAL
- en: Proxy models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A proxy model changes the behavior of a model. Both models operate on the database
    table of the original model. This allows you to customize behavior for different
    models without creating a new database table, creating different versions of the
    same model that are tailored for different purposes. To create a proxy model,
    add `proxy=True` to the `Meta` class of the model. The following example illustrates
    how to create a proxy model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here, you define an `OrderedContent` model that is a proxy model for the `Content`
    model. This model provides a default ordering for QuerySets and an additional
    `created_delta()` method. Both models, `Content` and `OrderedContent`, operate
    on the same database table, and objects are accessible via the ORM through either
    model.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12.6* shows the models and associated database tables for the proxy
    model inheritance code example provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_12_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: Sample models and database tables for inheritance using proxy
    models'
  prefs: []
  type: TYPE_NORMAL
- en: You have now become familiar with the three types of model inheritance. For
    additional information on model inheritance, you can visit [https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance](https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance).
    Now, we will apply model inheritance in practice by using a base abstract model
    to develop models for various content types.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Content models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s use model inheritance to implement polymorphic models. You will create
    a versatile data model that enables storing diverse content accessible through
    a unified interface. The ideal approach for this use case is to create an abstract
    base model that is then extended by models – each designed to store a particular
    type of data: text, image, video, and file. This flexible approach will equip
    you with the tools needed for scenarios where polymorphism is required.'
  prefs: []
  type: TYPE_NORMAL
- en: The `Content` model of your `courses` application contains a generic relation
    to associate different types of content with it. You will create a different model
    for each type of content. All `Content` models will have some fields in common
    and additional fields to store custom data. You are going to create an abstract
    model that provides the common fields for all `Content` models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of the `courses` application and add the following
    code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In this code, you define an abstract model named `ItemBase`. Therefore, you
    set `abstract=True` in its `Meta` class.
  prefs: []
  type: TYPE_NORMAL
- en: In this model, you define the `owner`, `title`, `created`, and `updated` fields.
    These common fields will be used for all types of content.
  prefs: []
  type: TYPE_NORMAL
- en: The `owner` field allows you to store which user created the content. Since
    this field is defined in an abstract class, you need a different `related_name`
    for each sub-model. Django allows you to specify a placeholder for the model class
    name in the `related_name` attribute as `%(class)s`. By doing so, the `related_name`
    for each child model will be generated automatically. Since you are using `'%(class)s_related'`
    as the `related_name`, the reverse relationship for child models will be `text_related`,
    `file_related`, `image_related`, and `video_related`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have defined four different `Content` models that inherit from the `ItemBase`
    abstract model. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Text`: To store text content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`File`: To store files, such as PDFs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Image`: To store image files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Video`: To store videos; you use a `URLField` field to provide a video URL
    in order to embed it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each child model contains the fields defined in the `ItemBase` class in addition
    to its own fields. A database table will be created for the `Text`, `File`, `Image`,
    and `Video` models, respectively. There will be no database table associated with
    the `ItemBase` model since it is an abstract model.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12.7* shows the `Content` models and the associated database tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_12_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7: Content models and associated database tables'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `Content` model you created previously and modify its `content_type`
    field, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: You add a `limit_choices_to` argument to limit the `ContentType` objects that
    can be used for the generic relation. You use the `model__in` field lookup to
    filter the query to the `ContentType` objects with a `model` attribute that is
    `'text'`, `'video'`, `'image'`, or `'file'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a migration to include the new models you have added. Run the
    following command from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the following command to apply the new migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output you see should end with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You have created models that are suitable for adding diverse content to the
    course modules. However, there is still something missing in your models: the
    course modules and contents should follow a particular order. You need a field
    that allows you to order them easily.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom model fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django comes with a complete collection of model fields that you can use to
    build your models. However, you can also create your own model fields to store
    custom data or alter the behavior of existing fields. Custom fields allow you
    to store unique data types, implement custom validations, encapsulate complex
    data logic related to the field, or define specific rendering forms using custom
    widgets.
  prefs: []
  type: TYPE_NORMAL
- en: You need a field that allows you to define an order for the objects. An easy
    way to specify an order for objects using existing Django fields is by adding
    a `PositiveIntegerField` to your models. Using integers, you can easily specify
    the order of the objects. You can create a custom order field that inherits from
    `PositiveIntegerField` and provides additional behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two relevant functionalities that you will build into your order
    field:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automatically assign an order value when no specific order is provided**:
    When saving a new object with no specific order, your field should automatically
    assign the number that comes after the last existing ordered object. If there
    are two objects with orders `1` and `2` respectively, when saving a third object,
    you should automatically assign order `3` to it if no specific order has been
    provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Order objects with respect to other fields**: Course modules will be ordered
    with respect to the course they belong to and module contents with respect to
    the module they belong to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a new `fields.py` file inside the `courses` application directory and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This is the custom `OrderField`. It inherits from the `PositiveIntegerField`
    field provided by Django. Your `OrderField` field takes an optional `for_fields`
    parameter, which allows you to indicate the fields used to order the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your field overrides the `pre_save()` method of the `PositiveIntegerField`
    field, which is executed before saving the field to the database. In this method,
    you perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You check whether a value already exists for this field in the model instance.
    You use `self.attname`, which is the attribute name given to the field in the
    model. If the attribute’s value is different from `None`, you calculate the order
    you should give it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You build a QuerySet to retrieve all objects for the field’s model. You retrieve
    the model class the field belongs to by accessing `self.model`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If there are any field names in the `for_fields` attribute of the field, you
    filter the QuerySet by the current value of the model fields in `for_fields`.
    By doing so, you calculate the order with respect to the given fields.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You retrieve the object with the highest order with `last_item = qs.latest(self.attname)`
    from the database. If no object is found, you assume this object is the first
    one and assign order `0` to it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If an object is found, you add `1` to the highest order found.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You assign the calculated order to the field’s value in the model instance using
    `setattr()` and return it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the model instance has a value for the current field, you use it instead
    of calculating it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you create custom model fields, make them generic. Avoid hardcoding data
    that depends on a specific model or field. Your field should work in any model.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about writing custom model fields at [https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/](https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to use the custom field we have created.
  prefs: []
  type: TYPE_NORMAL
- en: Adding ordering to Module and Content objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s add the new field to your models. Edit the `models.py` file of the `courses`
    application, and import the `OrderField` class and a field to the `Module` model,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: You name the new field `order` and specify that the ordering is calculated with
    respect to the course by setting `for_fields=['course']`. This means that the
    order for a new module will be assigned by adding `1` to the last module of the
    same `Course` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can edit the `__str__()` method of the `Module` model to include its
    order, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Module contents also need to follow a particular order. Add an `OrderField`
    field to the `Content` model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This time, you specify that the order is calculated with respect to the `module`
    field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let’s add a default ordering for both models. Add the following `Meta`
    class to the `Module` and `Content` models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Module` and `Content` models should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s create a new model migration that reflects the new `order` fields. Open
    the shell and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Django is telling you that you have to provide a default value for the new `order`
    field for existing rows in the database. If the field includes `null=True`, it
    accepts null values and Django creates the migration automatically instead of
    asking for a default value. You can specify a default value or cancel the migration
    and add a `default` attribute to the `order` field in the `models.py` file before
    creating the migration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter `1` and press *Enter* to provide a default value for existing records.
    You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter `0` so that this is the default value for existing records and press
    *Enter*. Django will ask you for a default value for the `Module` model, too.
    Choose the first option and enter `0` as the default value again. Finally, you
    will see an output similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, apply the new migrations with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command will inform you that the migration was successfully
    applied, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s test your new field. Open the shell with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new course, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You have created a course in the database. Now, you will add modules to the
    course and see how their order is automatically calculated. You create an initial
    module and check its order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '`OrderField` sets its value to `0` since this is the first `Module` object
    created for the given course. You can create a second module for the same course:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '`OrderField` calculates the next order value, adding `1` to the highest order
    for existing objects. Let’s create a third module, forcing a specific order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: If you provide a custom order when creating or saving an object, `OrderField`
    will use that value instead of calculating the order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add a fourth module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The order for this module has been automatically set. Your `OrderField` field
    does not guarantee that all order values are consecutive. However, it respects
    existing order values and always assigns the next order based on the highest existing
    order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a second course and add a module to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: To calculate the new module’s order, the field only takes into consideration
    existing modules that belong to the same course. Since this is the first module
    of the second course, the resulting order is `0`. This is because you specified
    `for_fields=['course']` in the `order` field of the `Module` model.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully created your first custom model field.
    Next, you are going to create an authentication system for the CMS.
  prefs: []
  type: TYPE_NORMAL
- en: Adding authentication views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have created a polymorphic data model, you are going to build a
    CMS to manage the courses and their contents. The first step is to add an authentication
    system for the CMS.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an authentication system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are going to use Django’s authentication framework for users to authenticate
    to the e-learning platform. You learned how to use the Django authentication views
    in *Chapter 4, Building a Social Website*.
  prefs: []
  type: TYPE_NORMAL
- en: Both instructors and students will be instances of Django’s `User` model, so
    they will be able to log in to the site using the authentication views of `django.contrib.auth`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the main `urls.py` file of the `educa` project and include the `login`
    and `logout` views of Django’s authentication framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Next, we are going to create the authentication templates for the Django authentication
    views.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the authentication templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the following file structure inside the `courses` application directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Before building the authentication templates, you need to prepare the base
    template for your project. Edit the `base.html` template file and add the following
    content to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the base template that will be extended by the rest of the templates.
    In this template, you define the following blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`title`: The block for other templates to add a custom title for each page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content`: The main block for content. All templates that extend the base template
    should add content to this block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`domready`: Located inside the JavaScript event listener for the `DOMContentLoaded`
    event. This allows you to execute code when the **Document Object Model** (**DOM**)
    has finished loading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CSS styles used in this template are located in the `static/` directory
    of the `courses` application in the code that comes with this chapter. Copy the
    `static/` directory into the same directory of your project to use them. You can
    find the contents of the directory at [https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static).
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `registration/login.html` template and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This is a standard login template for Django’s `login` view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `registration/logged_out.html` template and add the following code
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the template that will be displayed to the user after logging out.
    Run the development server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/accounts/login/` in your browser. You should see
    the login page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_12_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.8: The account login page'
  prefs: []
  type: TYPE_NORMAL
- en: Log in with the superuser credentials. You will be redirected to the URL `http://127.0.0.1:8000/accounts/profile/`,
    which is the default redirect URL for the `auth` module. You will get an HTTP
    `404` response because the given URL doesn’t exist yet. The URL to redirect users
    after a successful login is defined in the setting `LOGIN_REDIRECT_URL`. You will
    define a custom redirect URL in *Chapter 14, Rendering and Caching Content*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/accounts/login/` again in your browser. Now, you
    should see the **Sign out** button in the header of the page. Click on the **Sign
    out** button. You should see the **Logged out** page now, as shown in *Figure
    12.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B21088_12_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.9: The account Logged out page'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully created an authentication system for the CMS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use fixtures to provide initial data for
    models. By using model inheritance, you created a flexible system to manage different
    types of content for the course modules. You also implemented a custom model field
    on order objects and created an authentication system for the e-learning platform.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will implement the CMS functionality to manage course
    contents using class-based views. You will use the Django groups and permissions
    system to restrict access to views, and you will implement formsets to edit the
    content of courses. You will also create a drag-and-drop functionality to reorder
    course modules and their content using JavaScript and Django.
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using Django fixtures for testing: [https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading](https://docs.djangoproject.com/en/5.0/topics/testing/tools/#fixture-loading)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data migrations: [https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations](https://docs.djangoproject.com/en/5.0/topics/migrations/#data-migrations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Class inheritance in Python: [https://docs.python.org/3/tutorial/classes.html#inheritance](https://docs.python.org/3/tutorial/classes.html#inheritance
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django model inheritance: [https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance](https://docs.djangoproject.com/en/5.0/topics/db/models/#model-inheritance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating custom model fields: [https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/](https://docs.djangoproject.com/en/5.0/howto/custom-model-fields/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Static directory for the e-learning project: [https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter12/educa/courses/static
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, Django development experts, and the author
    himself. Ask questions, provide solutions to other readers, chat with the author
    via Ask Me Anything sessions, and much more.Scan the QR code or visit the link
    to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/Django5ByExample](https://packt.link/Django5ByExample)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code287089408934129031.png)'
  prefs: []
  type: TYPE_IMG
