["```py\nimport random\nimport time\ndef update():\n    global counter\n    current_counter = counter # reading in shared resource\n    time.sleep(random.randint(0, 1)) # simulating heavy \n    calculations\n    counter = current_counter + 1 # updating shared \n    resource\n```", "```py\nimport threading\ncounter = 0\nthreads = [threading.Thread(target=update) for i in \\\n  range(20)]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\nprint(f'Final counter: {counter}.')\nprint('Finished.')\n```", "```py\n> python3 example1.py\nFinal counter: 9.\nFinished.\n```", "```py\n> python3 example1.py\nFinal counter: 9.\nFinished.\n```", "```py\n> python3 example1.py\nFinal counter: 12.\nFinished.\n```", "```py\n> python3 example1.py\nFinal counter: 5.\nFinished.\n```", "```py\nimport random\nimport time\ndef update():\n    global counter\n    with count_lock:\n        current_counter = counter # reading in shared \n        resource\n        time.sleep(random.randint(0, 1)) # simulating heavy \n        calculations\n        counter = current_counter + 1\n```", "```py\nimport threading\ncounter = 0\ncount_lock = threading.Lock()\nthreads = [threading.Thread(target=update) for i in \\\n  range(20)]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\nprint(f'Final counter: {counter}.')\nprint('Finished.')\n```", "```py\n> python3 example2.py\nFinal counter: 20.\nFinished.\n```", "```py\nimport threading\nimport random; random.seed(0)\nimport time\ndef update(pause_period):\n    global counter\n    with count_lock:\n        current_counter = counter # reading in shared \n        resource\n        time.sleep(pause_period) # simulating heavy \n        calculations\n        counter = current_counter + 1 # updating shared \n        resource\npause_periods = [random.randint(0, 1) for i in range(20)]\n###############################################################\ncounter = 0\ncount_lock = threading.Lock()\nstart = time.perf_counter()\nfor i in range(20):\n    update(pause_periods[i])\nprint('--Sequential version--')\nprint(f'Final counter: {counter}.')\nprint(f'Took {time.perf_counter() - start : .2f} seconds.')\n###############################################################\ncounter = 0\nthreads = [threading.Thread(target=update, \\\n  args=(pause_periods[i],)) for i in range(20)]\nstart = time.perf_counter()\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\nprint('--Concurrent version--')\nprint(f'Final counter: {counter}.')\nprint(f'Took {time.perf_counter() - start : .2f} seconds.')\n###############################################################\nprint('Finished.')\n```", "```py\npause_periods = [random.randint(0, 1) for i in range(20)]\n```", "```py\ncounter = 0\ncount_lock = threading.Lock()\nstart = time.perf_counter()\nfor i in range(20):\n    update(pause_periods[i])\nprint('--Sequential version--')\nprint(f'Final counter: {counter}.')\nprint(f'Took {time.perf_counter() - start : .2f} seconds.')\n```", "```py\ncounter = 0\nthreads = [threading.Thread(target=update, \\\nargs=(pause_periods[i],)) for i in range(20)]\nstart = time.perf_counter()\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\nprint('--Concurrent version--')\nprint(f'Final counter: {counter}.')\nprint(f'Took {time.perf_counter() - start : .2f} seconds.')\n```", "```py\n> python3 example3.py\n--Sequential version--\nFinal counter: 20.\nTook 12.03 seconds.\n--Concurrent version--\nFinal counter: 20.\nTook 12.03 seconds.\nFinished.\n```"]