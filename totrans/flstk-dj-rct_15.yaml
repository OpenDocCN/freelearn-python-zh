- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying Our React App on AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we automated the deployment of the Django application
    using GitHub Actions and by making some configurations on the AWS EC2 instance.
    The Postagram API is live and now we must deploy the React application to have
    the full Postagram application available on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will deploy the React application using AWS **Simple Storage
    Service** (**S3**) and automate the deployment using GitHub Actions. We will cover
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment of React applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on AWS S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating deployment with GitHub Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need to have an account on AWS. You will also need
    to create an **Identity and Access Management** (**IAM**) user and save the credentials.
    You can do this by following the official documentation at [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html#id_users_create_cliwpsapi](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html#id_users_create_cliwpsapi).
    You can find the code for this chapter at [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap15](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap15).
  prefs: []
  type: TYPE_NORMAL
- en: Deployment of React applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A React application is built using JavaScript and JSX. However, to make the
    application accessible on the internet, we need a version of the application that
    a browser can interpret and understand, basically having an application with HTML,
    CSS, and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: In development mode, React provides an environment for detecting warnings and
    tools to detect and fix problems in the application and eliminate potential issues.
    This adds extra code to the project, increasing the bundle size and resulting
    in a bigger and slower application.
  prefs: []
  type: TYPE_NORMAL
- en: It is crucial to only deploy production-built applications on the internet because
    of the **user experience** (**UX**). According to Google studies, *53% of users
    leave a website if it takes more than 3 seconds to load*. Thus, we must build
    the React application we created and deploy the production version.
  prefs: []
  type: TYPE_NORMAL
- en: What is a production build?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In development, the React application runs in development mode or local mode.
    This is where you can see all the warnings and the traceback in case your code
    crashes. The production mode requires the developers to build the application.
    This build minifies the code, optimizes the assets (image, CSS files, and so on),
    produces lighter source maps, and suppresses the warning messages displayed in
    development mode.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the bundle size of the application is drastically reduced, and this
    improves page load speed. In this chapter, we will build a production-ready application
    and deploy it on AWS S3 as a static website.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on AWS S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**AWS S3** is one of the most popular services of AWS. It is a cloud-based
    storage service providing high performance, availability, reliability, security,
    and a ridiculous potential for scaling. AWS S3 is mostly used to store static
    assets so that they are effectively distributed to the internet, and because of
    the distribution characteristic, AWS S3 is suitable for hosting static websites.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will create an S3 bucket, upload the content of the built
    React application, and allow public access from the internet. An **S3 bucket**
    is just a public storage resource available in AWS that is like an online folder
    where you can store objects (like a folder on your Google Drive). In the next
    section, we will create a production-ready version of the React application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a build of Postagram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can create a build of the React application with just one command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `yarn build` command creates a bundle of static files of a React application.
    This bundle is optimized enough to go into production. The production Postagram
    application will use the online version of the API. This means we need to make
    some readjustments in the React code, mainly concerning the API URLs used in the
    code.
  prefs: []
  type: TYPE_NORMAL
- en: In *Part 2* of this book, *Build Reactive UI with React*, we built the React
    application using data from the localhost server at port `8000`. In this chapter,
    it won’t be the case, and we will take the occasion to add environment variables
    to the React application. Integrating environment variables into a React application
    is straightforward. Let’s configure the environment variables in the Postagram
    React application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding environment variables and building the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: According to the documentation of *Create React App* regarding environment variables
    ([https://create-react-app.dev/docs/adding-custom-environment-variables/](https://create-react-app.dev/docs/adding-custom-environment-variables/)),
  prefs: []
  type: TYPE_NORMAL
- en: “Your project can consume variables declared in your environment as if they
    were declared locally in your JS files. By default, you will have NODE_ENV defined
    for you, and any other environment variables starting with REACT_APP_”.
  prefs: []
  type: TYPE_NORMAL
- en: To access the values of the environment variables, we will use `process.env.REACT_APP_VALUE`
    syntax because these environment variables are defined on `process.env`.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the root of the React project, create a file called `.env`. Inside this
    file, add the following content and the name of the API URL you have deployed
    on the EC2 AWS server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You then need to modify some pieces of code at `src/helpers/axios.js` and `src/hooks/user.actions.js`.
    We must update the `baseURL` variable to read the values from the `.``env` file:'
  prefs: []
  type: TYPE_NORMAL
- en: src/hooks/user.actions.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And we do the same on the `axios.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: src/helpers/axios.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! The application can be built now. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You will have a similar result to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – Output of yarn build command](img/Figure_15.01_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – Output of yarn build command
  prefs: []
  type: TYPE_NORMAL
- en: 'The build is available in the newly created `build` directory, where you will
    find the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 15.2 – build direc\uFEFFtory](img/Figure_15.02_B18221.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – build directory
  prefs: []
  type: TYPE_NORMAL
- en: With a production-ready React application, we can then deploy the application
    on S3\. Next, let’s create an S3 bucket and upload the files and folders.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the React application on S3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have a build-ready version of the application and an optimized version for
    production. Before deploying on S3, we need to make some configurations on AWS
    S3 by creating a bucket and telling AWS that we are going to serve a static website.
    In the AWS console menu, choose the S3 service and create a bucket. Follow these
    steps to deploy a React application on AWS using the S3 service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to enter some configurations such as the **Bucket name** value
    and others, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.3 – General configuration for AWS S3 bucket](img/Figure_15.03_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – General configuration for AWS S3 bucket
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you need to disable the **Block all public access** settings so
    that the React application is visible to the public:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Public access configuration](img/Figure_15.04_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Public access configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'With the basic configurations now done, you can proceed to create the S3 bucket.
    Access the newly created bucket, select the **Properties** tab, and go to **Static
    website hosting**. On the page, enable **Static** **web hosting**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Static website hosting configuration](img/Figure_15.05_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 – Static website hosting configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also fill in the **Index document** and **Error document** fields.
    This will help with routing in the React application. Save the change, and you
    will see the bucket website endpoint, which will be the URL of your website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.6 – Static website hosting configuration done](img/Figure_15.06_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – Static website hosting configuration done
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, select the **Permissions** tab and select **Bucket Policy**. We will
    add a policy to grant public access to the bucket, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In your case, replace Postagram with the name of your React application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the changes. You will notice that a piece of new information will appear
    next to the name of the bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.7 – Publicly accessible badge](img/Figure_15.07_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.7 – Publicly accessible badge
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the `build` directory of the React application. After the upload
    is finished, you will have a similar result to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.8 – Bucket content](img/Figure_15.08_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.8 – Bucket content
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the bucket website endpoint, and you will access the Postagram React
    application in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.9 – Deployed React application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.09_B18221.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.9 – Deployed React application
  prefs: []
  type: TYPE_NORMAL
- en: 'Great! We have deployed a React application on AWS using the S3 service. You
    will surely encounter `CORS_ALLOW_ORIGINS` environment variables in the `.env`
    file of the Django application on the AWS EC2 instance. The following is an example
    of how you can define the environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: .env
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `settings.py` file of the Django project, replace the line where
    you define `CORS_ALLOW_ORIGINS` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: CoreRoot/settings.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We have learned how to configure a bucket, change the policies for public access,
    and activate the website hosting feature of AWS S3\. However, the deployment was
    done manually and, in the future, if you are pushing regularly, it might be a
    hassle to upload the change manually every time. In the next section, we will
    explore how to automate the deployment of a React application using GitHub Actions.
  prefs: []
  type: TYPE_NORMAL
- en: Automating deployment with GitHub Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we explored how GitHub Actions make the flow of deployment
    easier, more secure, and more reliable for developers. That is why in this chapter,
    we are also using GitHub Actions to automate the deployment of the React application.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a GitHub action for AWS called `configure-aws-credentials`. We will
    use this action to configure AWS credentials in the workflow to execute a command
    to upload the content of the `build` folder in the S3 bucket created earlier.
    But before that, we will follow the same workflow of CI/CD:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run tests to make sure the application won’t break in production and to ensure
    there are no regressions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `build` command to have a production-ready application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy on AWS S3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s add a new workflow file in the repository for the deployment of the React
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For this book, the Django application and the React application are in the same
    repository. The choice was made to make it easier for you to go through the code
    and the project. Thus, you will find two workflows in the `.github/workflows`
    directory. If you have split the code of the Django application and the React
    project into different repositories, make sure to not mix the GitHub Actions files.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the workflow file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inside the `.github/workflows` directory, create a file called `deploy-frontend.yml`.
    The first step, as usual, when writing a GitHub Actions file is to define the
    name of the workflow and the condition that will trigger this workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: .github/workflows/deploy-frontend.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s then create a job called `build-test-deploy`. Inside this job, we will
    write the commands to install the React dependencies, run the tests, build the
    project, and deploy the application to S3\. Let’s start by injecting the environment
    variables:'
  prefs: []
  type: TYPE_NORMAL
- en: .github/workflows/deploy-frontend.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now add the commands to install the dependencies, run the tests, and
    build the application:'
  prefs: []
  type: TYPE_NORMAL
- en: .github/workflows/deploy-frontend.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And we can add the AWS credentials action to configure the AWS credentials
    in the workflow and run the command to deploy to S3:'
  prefs: []
  type: TYPE_NORMAL
- en: .github/workflows/deploy-frontend.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the last command, we are uploading the content of the `build` directory to
    the Postagram bucket. While using this configuration, ensure to use the name of
    your S3 bucket. The GitHub actions file is written and can be deployed. Commit
    the changes and push them to the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have deployed a React application to AWS S3 using GitHub
    Actions.
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully deployed the full-stack application we have been building
    in this book. We have deployed the Django API application on an AWS instance,
    deployed the React frontend on AWS S3, and automated CI/CD pipelines using GitHub
    Actions. However, before going fully live, we need to make some optimization on
    the backend and the frontend, secure the deployed version of the applications
    on AWS using HTTPS, and talk more about caching and SQL query optimization.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have deployed the frontend React application on AWS. We
    have explored the AWS S3 service created and developed by AWS for storing objects
    on the internet. We have learned how to add environment variables to a React application
    but also how to have a production-ready bundle by building the application.
  prefs: []
  type: TYPE_NORMAL
- en: The production bundle has been used for deployment on AWS S3 using a bucket
    and configuring the bucket for static website hosting. And to make the deployment
    process smooth, we have created a GitHub action to automate the CI/CD pipeline
    for the React frontend project from building and testing to deploying the application
    on AWS S3.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on the optimization of the Django API and
    the React frontend by optimizing queries, adding caching, adding a logout endpoint,
    and securing the communication between servers and the client using HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is AWS S3?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to create an IAM user on AWS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the command used to build a React application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where are the environment variables in a Node.js project retrieved from?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
