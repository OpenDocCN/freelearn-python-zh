- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Deploying Our React App on AWS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上部署我们的React应用程序
- en: In the previous chapter, we automated the deployment of the Django application
    using GitHub Actions and by making some configurations on the AWS EC2 instance.
    The Postagram API is live and now we must deploy the React application to have
    the full Postagram application available on the internet.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用GitHub Actions和AWS EC2实例的一些配置自动化了Django应用程序的部署。Postagram API现在是实时状态，现在我们必须部署React应用程序，以便在互联网上提供完整的Postagram应用程序。
- en: 'In this chapter, we will deploy the React application using AWS **Simple Storage
    Service** (**S3**) and automate the deployment using GitHub Actions. We will cover
    the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用AWS **简单存储服务**（**S3**）部署React应用程序，并使用GitHub Actions自动化部署。我们将涵盖以下主题：
- en: Deployment of React applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React应用程序的部署
- en: Deploying on AWS S3
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS S3上部署
- en: Automating deployment with GitHub Actions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GitHub Actions自动化部署
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need to have an account on AWS. You will also need
    to create an **Identity and Access Management** (**IAM**) user and save the credentials.
    You can do this by following the official documentation at [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html#id_users_create_cliwpsapi](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html#id_users_create_cliwpsapi).
    You can find the code for this chapter at [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap15](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap15).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要在AWS上有一个账户。您还需要创建一个**身份和访问管理**（**IAM**）用户并保存凭证。您可以通过遵循官方文档[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html#id_users_create_cliwpsapi](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html#id_users_create_cliwpsapi)来完成此操作。您可以在[https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap15](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap15)找到本章的代码。
- en: Deployment of React applications
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React应用程序的部署
- en: A React application is built using JavaScript and JSX. However, to make the
    application accessible on the internet, we need a version of the application that
    a browser can interpret and understand, basically having an application with HTML,
    CSS, and JavaScript.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript和JSX构建React应用程序。然而，为了让应用程序在互联网上可访问，我们需要一个浏览器可以解释和理解的应用程序版本，基本上是一个具有HTML、CSS和JavaScript的应用程序。
- en: In development mode, React provides an environment for detecting warnings and
    tools to detect and fix problems in the application and eliminate potential issues.
    This adds extra code to the project, increasing the bundle size and resulting
    in a bigger and slower application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模式下，React提供了一个环境来检测警告，并提供检测和修复应用程序中问题的工具，以消除潜在的问题。这会给项目添加额外的代码，增加包的大小，导致应用程序更大、更慢。
- en: It is crucial to only deploy production-built applications on the internet because
    of the **user experience** (**UX**). According to Google studies, *53% of users
    leave a website if it takes more than 3 seconds to load*. Thus, we must build
    the React application we created and deploy the production version.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户体验（**UX**）的原因，仅在互联网上部署生产构建的应用程序至关重要。根据谷歌的研究，*53%的用户如果网站加载时间超过3秒就会离开网站*。因此，我们必须构建我们创建的React应用程序并部署生产版本。
- en: What is a production build?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是生产构建？
- en: In development, the React application runs in development mode or local mode.
    This is where you can see all the warnings and the traceback in case your code
    crashes. The production mode requires the developers to build the application.
    This build minifies the code, optimizes the assets (image, CSS files, and so on),
    produces lighter source maps, and suppresses the warning messages displayed in
    development mode.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，React应用程序以开发模式或本地模式运行。这是您可以查看所有警告和跟踪记录的地方，以防您的代码崩溃。生产模式要求开发者构建应用程序。此构建会压缩代码，优化资源（图像、CSS文件等），生成更轻的源映射，并抑制开发模式中显示的警告消息。
- en: Therefore, the bundle size of the application is drastically reduced, and this
    improves page load speed. In this chapter, we will build a production-ready application
    and deploy it on AWS S3 as a static website.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，应用程序的包大小大幅减少，这提高了页面加载速度。在本章中，我们将构建一个可用于生产的应用程序，并将其部署到AWS S3作为静态网站。
- en: Deploying on AWS S3
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS S3上部署
- en: '**AWS S3** is one of the most popular services of AWS. It is a cloud-based
    storage service providing high performance, availability, reliability, security,
    and a ridiculous potential for scaling. AWS S3 is mostly used to store static
    assets so that they are effectively distributed to the internet, and because of
    the distribution characteristic, AWS S3 is suitable for hosting static websites.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS S3** 是 AWS 最受欢迎的服务之一。它是一个基于云的存储服务，提供高性能、可用性、可靠性、安全性和令人难以置信的可扩展性潜力。AWS
    S3 主要用于存储静态资产，以便它们能够有效地分发到互联网上，由于其分发特性，AWS S3 适合托管静态网站。'
- en: In this chapter, we will create an S3 bucket, upload the content of the built
    React application, and allow public access from the internet. An **S3 bucket**
    is just a public storage resource available in AWS that is like an online folder
    where you can store objects (like a folder on your Google Drive). In the next
    section, we will create a production-ready version of the React application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个 S3 存储桶，上传构建好的 React 应用程序的内容，并允许从互联网上公开访问。**S3 存储桶**是 AWS 中可用的一个公共存储资源，就像一个在线文件夹，你可以在这里存储对象（就像
    Google Drive 上的文件夹一样）。在下一节中，我们将创建一个生产就绪版本的 React 应用程序。
- en: Creating a build of Postagram
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Postagram 的构建版本
- en: 'We can create a build of the React application with just one command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一条命令创建 React 应用的构建版本：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `yarn build` command creates a bundle of static files of a React application.
    This bundle is optimized enough to go into production. The production Postagram
    application will use the online version of the API. This means we need to make
    some readjustments in the React code, mainly concerning the API URLs used in the
    code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`yarn build` 命令创建了一个 React 应用程序的静态文件包。这个包已经足够优化，可以用于生产。生产版本的 Postagram 应用程序将使用在线版本的
    API。这意味着我们需要在 React 代码中进行一些调整，主要涉及代码中使用的 API URL。'
- en: In *Part 2* of this book, *Build Reactive UI with React*, we built the React
    application using data from the localhost server at port `8000`. In this chapter,
    it won’t be the case, and we will take the occasion to add environment variables
    to the React application. Integrating environment variables into a React application
    is straightforward. Let’s configure the environment variables in the Postagram
    React application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的 *第 2 部分*，即 *使用 React 构建响应式 UI* 中，我们使用本地主机服务器在端口 `8000` 上的数据构建了 React 应用程序。在本章中，情况将有所不同，我们将借此机会向
    React 应用程序添加环境变量。将环境变量集成到 React 应用程序中非常简单。让我们在 Postagram React 应用程序中配置环境变量。
- en: Adding environment variables and building the application
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加环境变量并构建应用程序
- en: According to the documentation of *Create React App* regarding environment variables
    ([https://create-react-app.dev/docs/adding-custom-environment-variables/](https://create-react-app.dev/docs/adding-custom-environment-variables/)),
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 *Create React App* 的文档关于环境变量的说明 ([https://create-react-app.dev/docs/adding-custom-environment-variables/](https://create-react-app.dev/docs/adding-custom-environment-variables/))，
- en: “Your project can consume variables declared in your environment as if they
    were declared locally in your JS files. By default, you will have NODE_ENV defined
    for you, and any other environment variables starting with REACT_APP_”.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: “你的项目可以消费在环境中声明的变量，就像它们在本地 JS 文件中声明一样。默认情况下，你将有一个 NODE_ENV 被定义，以及任何以 REACT_APP_
    开头的其他环境变量”。
- en: To access the values of the environment variables, we will use `process.env.REACT_APP_VALUE`
    syntax because these environment variables are defined on `process.env`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问环境变量的值，我们将使用 `process.env.REACT_APP_VALUE` 语法，因为这些环境变量是在 `process.env` 上定义的。
- en: 'At the root of the React project, create a file called `.env`. Inside this
    file, add the following content and the name of the API URL you have deployed
    on the EC2 AWS server:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 项目的根目录下创建一个名为 `.env` 的文件。在这个文件中，添加以下内容以及你在 EC2 AWS 服务器上部署的 API URL 的名称：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You then need to modify some pieces of code at `src/helpers/axios.js` and `src/hooks/user.actions.js`.
    We must update the `baseURL` variable to read the values from the `.``env` file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要修改 `src/helpers/axios.js` 和 `src/hooks/user.actions.js` 中的某些代码片段。我们必须更新
    `baseURL` 变量，使其从 `.env` 文件中读取值：
- en: src/hooks/user.actions.js
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: src/hooks/user.actions.js
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And we do the same on the `axios.js` file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们同样在 `axios.js` 文件上执行相同的操作：
- en: src/helpers/axios.js
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: src/helpers/axios.js
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Great! The application can be built now. Run the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在可以构建应用程序了。运行以下命令：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will have a similar result to this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到类似的结果：
- en: '![Figure 15.1 – Output of yarn build command](img/Figure_15.01_B18221.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.1 – yarn build 命令的输出](img/Figure_15.01_B18221.jpg)'
- en: Figure 15.1 – Output of yarn build command
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'The build is available in the newly created `build` directory, where you will
    find the following content:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 15.2 – build direc\uFEFFtory](img/Figure_15.02_B18221.jpg)"
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – build directory
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: With a production-ready React application, we can then deploy the application
    on S3\. Next, let’s create an S3 bucket and upload the files and folders.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the React application on S3
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have a build-ready version of the application and an optimized version for
    production. Before deploying on S3, we need to make some configurations on AWS
    S3 by creating a bucket and telling AWS that we are going to serve a static website.
    In the AWS console menu, choose the S3 service and create a bucket. Follow these
    steps to deploy a React application on AWS using the S3 service:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to enter some configurations such as the **Bucket name** value
    and others, as shown in the following figure:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.3 – General configuration for AWS S3 bucket](img/Figure_15.03_B18221.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – General configuration for AWS S3 bucket
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you need to disable the **Block all public access** settings so
    that the React application is visible to the public:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Public access configuration](img/Figure_15.04_B18221.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Public access configuration
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'With the basic configurations now done, you can proceed to create the S3 bucket.
    Access the newly created bucket, select the **Properties** tab, and go to **Static
    website hosting**. On the page, enable **Static** **web hosting**:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Static website hosting configuration](img/Figure_15.05_B18221.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 – Static website hosting configuration
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also fill in the **Index document** and **Error document** fields.
    This will help with routing in the React application. Save the change, and you
    will see the bucket website endpoint, which will be the URL of your website:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.6 – Static website hosting configuration done](img/Figure_15.06_B18221.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – Static website hosting configuration done
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, select the **Permissions** tab and select **Bucket Policy**. We will
    add a policy to grant public access to the bucket, like so:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In your case, replace Postagram with the name of your React application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the changes. You will notice that a piece of new information will appear
    next to the name of the bucket:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.7 – Publicly accessible badge](img/Figure_15.07_B18221.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: Figure 15.7 – Publicly accessible badge
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the `build` directory of the React application. After the upload
    is finished, you will have a similar result to this:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.8 – Bucket content](img/Figure_15.08_B18221.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: Figure 15.8 – Bucket content
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the bucket website endpoint, and you will access the Postagram React
    application in your browser:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.9 – Deployed React application'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.09_B18221.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.9 – Deployed React application
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Great! We have deployed a React application on AWS using the S3 service. You
    will surely encounter `CORS_ALLOW_ORIGINS` environment variables in the `.env`
    file of the Django application on the AWS EC2 instance. The following is an example
    of how you can define the environment variable:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们已经使用 S3 服务在 AWS 上部署了一个 React 应用程序。你肯定会在 AWS EC2 实例上 Django 应用程序的 `.env`
    文件中遇到 `CORS_ALLOW_ORIGINS` 环境变量。以下是如何定义环境变量的示例：
- en: .env
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: .env
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, in the `settings.py` file of the Django project, replace the line where
    you define `CORS_ALLOW_ORIGINS` with the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 Django 项目的 `settings.py` 文件中，将定义 `CORS_ALLOW_ORIGINS` 的行替换为以下内容：
- en: CoreRoot/settings.py
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: CoreRoot/settings.py
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We have learned how to configure a bucket, change the policies for public access,
    and activate the website hosting feature of AWS S3\. However, the deployment was
    done manually and, in the future, if you are pushing regularly, it might be a
    hassle to upload the change manually every time. In the next section, we will
    explore how to automate the deployment of a React application using GitHub Actions.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何配置存储桶，更改公共访问策略，并激活 AWS S3 的网站托管功能。然而，部署是手动完成的，并且在未来，如果您经常推送，每次手动上传更改可能会很麻烦。在下一节中，我们将探讨如何使用
    GitHub Actions 自动化 React 应用程序的部署。
- en: Automating deployment with GitHub Actions
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 自动化部署
- en: In the previous chapter, we explored how GitHub Actions make the flow of deployment
    easier, more secure, and more reliable for developers. That is why in this chapter,
    we are also using GitHub Actions to automate the deployment of the React application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了 GitHub Actions 如何使部署流程对开发者来说更容易、更安全、更可靠。这就是为什么在本章中，我们也在使用 GitHub
    Actions 来自动化 React 应用程序的部署。
- en: 'There is a GitHub action for AWS called `configure-aws-credentials`. We will
    use this action to configure AWS credentials in the workflow to execute a command
    to upload the content of the `build` folder in the S3 bucket created earlier.
    But before that, we will follow the same workflow of CI/CD:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为 `configure-aws-credentials` 的 GitHub Action，用于 AWS。我们将使用此操作在工作流程中配置 AWS
    凭据，以执行命令将 `build` 文件夹的内容上传到之前创建的 S3 桶。但在那之前，我们将遵循相同的 CI/CD 工作流程：
- en: Install the dependencies of the project.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装项目的依赖项。
- en: Run tests to make sure the application won’t break in production and to ensure
    there are no regressions.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试以确保应用程序在生产环境中不会崩溃，并确保没有回归。
- en: Run the `build` command to have a production-ready application.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `build` 命令以获得一个生产就绪的应用程序。
- en: Deploy on AWS S3.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS S3 上部署。
- en: Let’s add a new workflow file in the repository for the deployment of the React
    application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在存储库中添加一个新的工作流程文件，用于部署 React 应用程序。
- en: Important note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For this book, the Django application and the React application are in the same
    repository. The choice was made to make it easier for you to go through the code
    and the project. Thus, you will find two workflows in the `.github/workflows`
    directory. If you have split the code of the Django application and the React
    project into different repositories, make sure to not mix the GitHub Actions files.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，Django 应用程序和 React 应用程序位于同一个存储库中。这个选择是为了让您更容易地浏览代码和项目。因此，您将在 `.github/workflows`
    目录中找到两个工作流程。如果您已经将 Django 应用程序的代码和 React 项目的代码拆分到不同的存储库中，请确保不要混合 GitHub Actions
    文件。
- en: Writing the workflow file
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写工作流程文件
- en: 'Inside the `.github/workflows` directory, create a file called `deploy-frontend.yml`.
    The first step, as usual, when writing a GitHub Actions file is to define the
    name of the workflow and the condition that will trigger this workflow:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `.github/workflows` 目录中，创建一个名为 `deploy-frontend.yml` 的文件。像往常一样，编写 GitHub Actions
    文件的第一步是定义工作流程的名称和将触发此工作流程的条件：
- en: .github/workflows/deploy-frontend.yml
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: .github/workflows/deploy-frontend.yml
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let’s then create a job called `build-test-deploy`. Inside this job, we will
    write the commands to install the React dependencies, run the tests, build the
    project, and deploy the application to S3\. Let’s start by injecting the environment
    variables:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个名为 `build-test-deploy` 的工作任务。在这个工作任务中，我们将编写命令来安装 React 依赖项，运行测试，构建项目，并将应用程序部署到
    S3。让我们首先注入环境变量：
- en: .github/workflows/deploy-frontend.yml
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: .github/workflows/deploy-frontend.yml
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can now add the commands to install the dependencies, run the tests, and
    build the application:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以添加安装依赖项、运行测试和构建应用程序的命令：
- en: .github/workflows/deploy-frontend.yml
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: .github/workflows/deploy-frontend.yml
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And we can add the AWS credentials action to configure the AWS credentials
    in the workflow and run the command to deploy to S3:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加AWS凭证操作来配置工作流程中的AWS凭证并运行命令以部署到S3：
- en: .github/workflows/deploy-frontend.yml
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: .github/workflows/deploy-frontend.yml
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the last command, we are uploading the content of the `build` directory to
    the Postagram bucket. While using this configuration, ensure to use the name of
    your S3 bucket. The GitHub actions file is written and can be deployed. Commit
    the changes and push them to the GitHub repository.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个命令中，我们正在将`build`目录的内容上传到Postagram存储桶。在使用此配置时，请确保使用您自己的S3存储桶名称。GitHub操作文件已编写并可部署。提交更改并将它们推送到GitHub仓库。
- en: Congratulations! You have deployed a React application to AWS S3 using GitHub
    Actions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已使用GitHub Actions将React应用程序部署到AWS S3。
- en: We have successfully deployed the full-stack application we have been building
    in this book. We have deployed the Django API application on an AWS instance,
    deployed the React frontend on AWS S3, and automated CI/CD pipelines using GitHub
    Actions. However, before going fully live, we need to make some optimization on
    the backend and the frontend, secure the deployed version of the applications
    on AWS using HTTPS, and talk more about caching and SQL query optimization.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功部署了在本书中构建的全栈应用程序。我们在AWS实例上部署了Django API应用程序，在AWS S3上部署了React前端，并使用GitHub
    Actions自动化了CI/CD管道。然而，在完全上线之前，我们需要对后端和前端进行一些优化，使用HTTPS确保在AWS上部署的应用程序版本的安全，并更多讨论缓存和SQL查询优化。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have deployed the frontend React application on AWS. We
    have explored the AWS S3 service created and developed by AWS for storing objects
    on the internet. We have learned how to add environment variables to a React application
    but also how to have a production-ready bundle by building the application.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已在AWS上部署了前端React应用程序。我们探讨了AWS S3服务，这是AWS为在互联网上存储对象而创建和开发的。我们学习了如何向React应用程序添加环境变量，以及如何通过构建应用程序来拥有一个生产就绪的捆绑包。
- en: The production bundle has been used for deployment on AWS S3 using a bucket
    and configuring the bucket for static website hosting. And to make the deployment
    process smooth, we have created a GitHub action to automate the CI/CD pipeline
    for the React frontend project from building and testing to deploying the application
    on AWS S3.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 生产捆绑包已用于在AWS S3上部署，使用存储桶并配置存储桶以进行静态网站托管。为了使部署过程顺利，我们已创建GitHub操作来自动化React前端项目的CI/CD管道，从构建和测试到在AWS
    S3上部署应用程序。
- en: In the next chapter, we will focus on the optimization of the Django API and
    the React frontend by optimizing queries, adding caching, adding a logout endpoint,
    and securing the communication between servers and the client using HTTPS.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于通过优化查询、添加缓存、添加登出端点以及使用HTTPS确保服务器与客户端之间的通信来优化Django API和React前端。
- en: Questions
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is AWS S3?
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是AWS S3？
- en: How to create an IAM user on AWS?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在AWS上创建IAM用户？
- en: What is the command used to build a React application?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建React应用程序使用的命令是什么？
- en: Where are the environment variables in a Node.js project retrieved from?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Node.js项目中的环境变量是从哪里检索的？
