["```py\n    $ python setup.py install \n\n    ```", "```py\n    $ python setup.py install --user\n\n    ```", "```py\n    >>> from mocker import Mocker\n    >>> import operations\n    ```", "```py\n    We're going to test out the constructor for the multiply operation, first. Since all that the constructor has to do is record all of the operands, this is straightforward.\n\n    >>> mocker = Mocker()\n    >>> p1 = mocker.mock()\n    >>> p2 = mocker.mock()\n    >>> mocker.replay()\n    >>> m = operations.multiply(p1, p2)\n    >>> m.operands == (p1, p2)\n    True\n    >>> mocker.restore()\n    >>> mocker.verify()\n    ```", "```py\n    Now we're going to check the evaluate method for the multiply operation. It should raise a ValueError if there are less than two operands, it should call the evaluate methods of all operations that are operands of the multiply, and of course it should return the correct value.\n\n    >>> mocker = Mocker()\n    >>> p1 = mocker.mock()\n    >>> p1.evaluate({}) #doctest: +ELLIPSIS\n    <mocker.Mock object at ...>\n    >>> mocker.result(97.43)\n\n    >>> mocker.replay()\n\n    >>> m = operations.multiply(p1)\n    >>> m.evaluate({})\n    Traceback (most recent call last):\n    ValueError: multiply without at least two operands is meaningless\n\n    >>> mocker.restore()\n    >>> mocker.verify()\n\n    >>> mocker = Mocker()\n    >>> p1 = mocker.mock()\n\n    >>> p1.evaluate({}) #doctest: +ELLIPSIS\n    <mocker.Mock object at ...>\n    >>> mocker.result(97.43)\n    >>> p2 = mocker.mock()\n    >>> p2.evaluate({}) #doctest: +ELLIPSIS\n    <mocker.Mock object at ...>\n    >>> mocker.result(-16.25)\n\n    >>> mocker.replay()\n\n    >>> m = operations.multiply(p1, p2)\n    >>> round(m.evaluate({}), 2)\n    -1583.24\n\n    >>> mocker.restore()\n    >>> mocker.verify()\n    ```", "```py\n    class multiply:\n        def __init__(self, *operands):\n            self.operands = operands\n\n        def evaluate(self, bindings):\n            vals = [x.evaluate(bindings) for x in self.operands]\n            if len(vals) < 2:\n                raise ValueError('multiply without at least two '                     \n                                 'operands is meaningless')\n\n            result = 1.0\n            for val in vals:\n                result *= val\n            return result\n    ```", "```py\n>>> from mocker import Mocker\n>>> mocker = Mocker()\n>>> func = mocker.mock()\n>>> func(56, \"hello\") # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(11)\n\n>>> mocker.replay()\n>>> func(56, \"hello\")\n11\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n>>> from mocker import Mocker\n\n>>> mocker = Mocker()\n>>> container = mocker.mock()\n\n>>> container['hi'] = 18\n\n>>> container['hi'] # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(18)\n\n>>> len(container)\n0\n>>> mocker.result(1)\n\n>>> 'hi' in container # doctest: +SKIP\nTrue\n>>> mocker.result(True)\n\n>>> iter(container) # doctest: +ELLIPSIS\n<...>\n>>> mocker.result(None)\n\n>>> del container['hi']\n>>> mocker.result(None)\n\n>>> mocker.replay()\n\n>>> container['hi'] = 18\n\n>>> container['hi']\n18\n\n>>> len(container)\n1\n\n>>> 'hi' in container # doctest: +SKIP\nTrue\n\n>>> for key in container:\n...     print key\nTraceback (most recent call last):\nTypeError: iter() returned non-iterator of type 'NoneType'\n\n>>> del container['hi']\n\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n\n>>> from mocker import Mocker, ANY\n>>> mocker = Mocker()\n>>> func = mocker.mock()\n>>> func(7, ANY) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> mocker.replay()\n>>> func(7, 'this could be anything')\n5\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n>>> from mocker import Mocker, ARGS\n>>> mocker = Mocker()\n>>> func = mocker.mock()\n>>> func(7, ARGS) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> mocker.replay()\n>>> func(7, 'this could be anything', 'so could this', 99.2)\n5\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n>>> from mocker import Mocker, KWARGS\n>>> mocker = Mocker()\n>>> func = mocker.mock()\n>>> func(7, KWARGS) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> mocker.replay()\n>>> func(7, a='this could be anything', b='so could this')\n5\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n>>> from mocker import Mocker, IS\n>>> mocker = Mocker()\n>>> param = [1, 2, 3]\n>>> func = mocker.mock()\n>>> func(7, IS(param)) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> mocker.replay()\n>>> func(7, param) # func(7, [1, 2, 3]) would fail\n5\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n\n>>> from mocker import Mocker, IN\n>>> mocker = Mocker()\n>>> func = mocker.mock()\n>>> func(7, IN([45, 68, 19])) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> func(7, IN([45, 68, 19])) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> func(7, IN([45, 68, 19])) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> mocker.replay()\n>>> func(7, 19)\n5\n>>> func(7, 19)\n5\n>>> func(7, 45)\n5\n>>> mocker.restore()\n>>> mocker.verify()\n\n```", "```py\n>>> from mocker import Mocker, CONTAINS\n>>> mocker = Mocker()\n>>> func = mocker.mock()\n>>> func(7, CONTAINS(45)) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> mocker.replay()\n>>> func(7, [12, 31, 45, 18])\n5\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n>>> from mocker import Mocker, MATCH\n>>> def is_odd(val):\n...     return val % 2 == 1\n>>> mocker = Mocker()\n>>> func = mocker.mock()\n>>> func(7, MATCH(is_odd)) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> mocker.replay()\n>>> func(7, 1001)\n5\n>>> mocker.restore()\n>>> mocker.verify()\n\n```", "```py\n>>> from mocker import Mocker\n>>> from itertools import islice\n>>> mocker = Mocker()\n>>> generator = mocker.mock()\n>>> generator(12) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.generate([16, 31, 24, 'hike'])\n\n>>> mocker.replay()\n>>> tuple(islice(generator(12), 1, 2))\n(31,)\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n>>> from mocker import Mocker\n>>> mocker = Mocker()\n>>> obj = mocker.mock()\n>>> obj.thingy # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.throw(AttributeError('thingy does not exist'))\n\n>>> mocker.replay()\n>>> obj.thingy\nTraceback (most recent call last):\nAttributeError: thingy does not exist\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n>>> from mocker import Mocker\n>>> from sys import stdout\n>>> mocker = Mocker()\n>>> obj = mocker.mock()\n>>> obj.method() # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.call((lambda: stdout.write('hi')))\n>>> mocker.call((lambda: stdout.write('yo\\n')))\n>>> mocker.result(5)\n\n>>> mocker.replay()\n\n>>> obj.method()\nhiyo\n5\n\n>>> mocker.restore()\n>>> mocker.verify()\n\n```", "```py\n>>> from mocker import Mocker, IN\n>>> mocker = Mocker()\n>>> func = mocker.mock()\n>>> func(7, IN([45, 68, 19])) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> mocker.count(3)\n\n>>> mocker.replay()\n>>> func(7, 19)\n5\n>>> func(7, 19)\n5\n>>> func(7, 45)\n5\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n>>> from mocker import Mocker, IN\n>>> mocker = Mocker()\n>>> func = mocker.mock()\n>>> func(7, IN([45, 68, 19])) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> mocker.count(1, 3)\n\n>>> mocker.replay()\n>>> func(7, 19)\n5\n>>> func(7, 45)\n5\n>>> func(7, 19)\n5\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n>>> from mocker import Mocker, IN\n>>> mocker = Mocker()\n>>> func = mocker.mock()\n>>> func(7, IN([45, 68, 19])) # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(5)\n>>> mocker.count(1, None)\n\n>>> mocker.replay()\n>>> [func(7, 19) for x in range(50)] == [5] * 50\nTrue\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n>>> from time import time\n>>> from mocker import Mocker\n\n>>> mocker = Mocker()\n>>> mock_time = mocker.replace('time.time')\n\n>>> mock_time() # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(1.3)\n\n>>> mock_time() # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(2.7)\n\n>>> mock_time() # doctest: +ELLIPSIS\n<mocker.Mock object at ...>\n>>> mocker.result(3.12)\n\n>>> mocker.replay()\n>>> '%1.3g' % time()\n'1.3'\n>>> '%1.3g' % time()\n'2.7'\n>>> '%1.3g' % time()\n'3.12'\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n>>> from datetime import datetime\n>>> from mocker import Mocker\n>>> mocker = Mocker()\n\nHere's where your Mocker demonstrations should go.\n\n>>> mocker.replay()\n>>> now = datetime.now()\n>>> then = now.replace(hour = 12)\n>>> then.isocalendar()\n(2009, 24, 3)\n>>> then.isoformat()\n'2009-06-10T12:30:39.812555'\n>>> mocker.restore()\n>>> mocker.verify()\n```", "```py\n    class testable:\n        def method1(self, number):\n            number += 4\n            number **= 0.5\n            number *= 7\n            return number\n\n        def method2(self, number):\n            return ((number * 2) ** 1.27) * 0.3\n\n        def method3(self, number):\n            return self.method1(number) + self.method2(number)\n\n        def method4(self):\n            return self.method3(id(self))\n    ```", "```py\n    >>> from testable import testable\n    >>> from mocker import Mocker\n    >>> mocker = Mocker()\n\n    >>> target = mocker.mock()\n    >>> target.method1(12) # doctest: +ELLIPSIS\n    <mocker.Mock object at ...>\n    >>> mocker.result(5)\n    >>> target.method2(12) # doctest: +ELLIPSIS\n    <mocker.Mock object at ...>\n    >>> mocker.result(7)\n    ```", "```py\n    >>> mocker.replay()\n    >>> testable.method3.im_func(target, 12)\n    12\n    ```"]