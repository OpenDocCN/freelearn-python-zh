["```py\n    $ pip install openai\n    ```", "```py\n    <!-- Group with other CSS files -—>\n    ```", "```py\n    <link href=\"https://cdnjs.cloudflare.com/\n    ```", "```py\n    ajax/libs/awesomplete/1.1.5/awesomplete.min.css\"\n    ```", "```py\n    rel=\"stylesheet\">\n    ```", "```py\n    <!-- Group with other JS files -—>\n    ```", "```py\n    <script src=\"img/pre>\n\n    ```", "```py\n\n    ```", "```py\n\n    ```", "```py\n    app.config['OPENAI_KEY'] = 'Your own API Key'\n    ```", "```py\n    import openai\n    ```", "```py\n    @catalog.route('/product-search-\n    ```", "```py\n      gpt',methods=['GET','POST'])\n    ```", "```py\n    def product_search_gpt():\n    ```", "```py\n     if request.method == 'POST':\n    ```", "```py\n      query = request.form.get('query')\n    ```", "```py\n      openai.api_key = app.config['OPENAI_KEY']\n    ```", "```py\n      prompt = \"\"\"Context: Ecommerce electronics website\\n\n    ```", "```py\n      Operation: Create search queries for a product\\n\n    ```", "```py\n                Product: \"\"\" + query\n    ```", "```py\n            response = openai.Completion.create(\n    ```", "```py\n                model=\"text-davinci-003\",\n    ```", "```py\n                prompt=prompt,\n    ```", "```py\n                temperature=0.2,\n    ```", "```py\n                max_tokens=60,\n    ```", "```py\n                top_p=1.0,\n    ```", "```py\n                frequency_penalty=0.5,\n    ```", "```py\n                presence_penalty=0.0\n    ```", "```py\n            )\n    ```", "```py\n            return response['choices'][0][\n    ```", "```py\n                'text'].strip('\\n').split('\\n')[1:]\n    ```", "```py\n    return render_template('product-search-gpt-demo.html')\n    ```", "```py\n    {% extends 'home.html' %}\n    ```", "```py\n    {% block container %}\n    ```", "```py\n      <div class=\"top-pad\">\n    ```", "```py\n        <form\n    ```", "```py\n            class=\"form-horizontal\"\n    ```", "```py\n            role=\"form\">\n    ```", "```py\n          <div class=\"form-group\">\n    ```", "```py\n            <label for=\"name\" class=\"col-sm-2 control-\n    ```", "```py\n              label\">Query</label>\n    ```", "```py\n            <div class=\"col-sm-10\">\n    ```", "```py\n              <input type=\"text\" class=\"form-control\n    ```", "```py\n                awesomplete\" id=\"query\" name=\"query\">\n    ```", "```py\n            </div>\n    ```", "```py\n          </div>\n    ```", "```py\n        </form>\n    ```", "```py\n      </div>\n    ```", "```py\n    {% endblock %}\n    ```", "```py\n    {% block scripts %}\n    ```", "```py\n    <script>\n    ```", "```py\n    $(document).ready(function(){\n    ```", "```py\n      const input = document.querySelector(\n    ```", "```py\n        'input[name=\"query\"]' );\n    ```", "```py\n      const awesomplete = new Awesomplete( input, {\n    ```", "```py\n        tabSelect: true, minChars: 5 } );\n    ```", "```py\n    function ajaxResults() {\n    ```", "```py\n      $.ajax({\n    ```", "```py\n       url: '{{ url_for(\"catalog.product_search_gpt\") }}',\n    ```", "```py\n            type: 'POST',\n    ```", "```py\n            dataType: \"json\",\n    ```", "```py\n            data: {\n    ```", "```py\n                query: input.value\n    ```", "```py\n            }\n    ```", "```py\n        })\n    ```", "```py\n        .done(function(data) {\n    ```", "```py\n            awesomplete.list = data;\n    ```", "```py\n        });\n    ```", "```py\n      };\n    ```", "```py\n      input.addEventListener( 'keyup', ajaxResults );\n    ```", "```py\n    });\n    ```", "```py\n    </script>\n    ```", "```py\n    {% endblock %}\n    ```", "```py\n    @catalog.route('/chat-gpt', methods=['GET', 'POST'])\n    ```", "```py\n    def chat_gpt():\n    ```", "```py\n      if request.method == 'POST':\n    ```", "```py\n          msg = request.form.get('msg')\n    ```", "```py\n          openai.api_key = app.config['OPENAI_KEY']\n    ```", "```py\n          messages = [\n    ```", "```py\n              {\n    ```", "```py\n                  \"role\": \"system\",\n    ```", "```py\n                  \"content\": \"You are a helpful chat\n    ```", "```py\n                    assistant for a generic electronics\n    ```", "```py\n                    Ecommerce website\"\n    ```", "```py\n                },\n    ```", "```py\n                {\"role\": \"user\", \"content\": msg}\n    ```", "```py\n            ]\n    ```", "```py\n            response = openai.ChatCompletion.create(\n    ```", "```py\n                model=\"gpt-3.5-turbo\",\n    ```", "```py\n                messages=messages\n    ```", "```py\n            )\n    ```", "```py\n            return jsonify(\n    ```", "```py\n                message=response[\n    ```", "```py\n                    'choices'][0]['message']['content']\n    ```", "```py\n            )\n    ```", "```py\n        return render_template('chatgpt-demo.html')\n    ```", "```py\n    {% extends 'home.html' %}\n    ```", "```py\n    {% block container %}\n    ```", "```py\n      <div class=\"top-pad\">\n    ```", "```py\n        <ul class=\"list-group\" id=\"chat-list\">\n    ```", "```py\n          <li class=\"list-group-item\">\n    ```", "```py\n            <span class=\"badge\">GPT</span>\n    ```", "```py\n            How can I help you?\n    ```", "```py\n          </li>\n    ```", "```py\n        </ul>\n    ```", "```py\n        <div class=\"input-group\">\n    ```", "```py\n          <input type=\"text\" class=\"form-control\"\n    ```", "```py\n            name=\"message\" placeholder=\"Enter your\n    ```", "```py\n            message\" aria-describedby=\"chat-input\">\n    ```", "```py\n          <span class=\"input-group-btn\">\n    ```", "```py\n            <button class=\"btn btn-success\" type=\"button\"\n    ```", "```py\n              data-loading-text=\"Loading...\" id=\"send-\n    ```", "```py\n              message\">Send</button>\n    ```", "```py\n          </span>\n    ```", "```py\n        </div>\n    ```", "```py\n      </div>\n    ```", "```py\n    {% endblock %}\n    ```", "```py\n    {% block scripts %}\n    ```", "```py\n    <script>\n    ```", "```py\n    function appendToChatList(mode, message) {\n    ```", "```py\n      $( \"#chat-list\" ).append( '<li class=\"list-\n    ```", "```py\n        group-item\"><span class=\"badge\">' + mode +\n    ```", "```py\n        '</span>' + message + '</li>' );\n    ```", "```py\n    }\n    ```", "```py\n    $(document).ready(function(){\n    ```", "```py\n      $('button#send-message').click(function() {\n    ```", "```py\n        var send_btn = $(this).button('loading');\n    ```", "```py\n        const inputChat = document.querySelector\n    ```", "```py\n          ( 'input[name=\"message\"]' );\n    ```", "```py\n        var message = inputChat.value;\n    ```", "```py\n        appendToChatList('Human', message);\n    ```", "```py\n        inputChat.value = '';\n    ```", "```py\n        $.ajax({\n    ```", "```py\n          url: '{{ url_for(\"catalog.chat_gpt\") }}',\n    ```", "```py\n          type: 'POST',\n    ```", "```py\n          dataType: \"json\",\n    ```", "```py\n          data: {\n    ```", "```py\n              msg: message\n    ```", "```py\n          }\n    ```", "```py\n        })\n    ```", "```py\n        .done(function(data) {\n    ```", "```py\n          appendToChatList('GPT', data.message);\n    ```", "```py\n          send_btn.button('reset');\n    ```", "```py\n        });\n    ```", "```py\n      });\n    ```", "```py\n    });\n    ```", "```py\n    </script>\n    ```", "```py\n    {% endblock %}\n    ```", "```py\n$ pip install requests\n```", "```py\n    class ProductGPTForm(NameForm):\n    ```", "```py\n        price = DecimalField('Price', validators=[\n    ```", "```py\n            InputRequired(),\n    ```", "```py\n              NumberRange(min=Decimal('0.0'))\n    ```", "```py\n      ])\n    ```", "```py\n      category = CategoryField(\n    ```", "```py\n      'Category', validators=[InputRequired()], coerce=int\n    ```", "```py\n        )\n    ```", "```py\n    import openai\n    ```", "```py\n    import requests\n    ```", "```py\n    from my_app.catalog.models import ProductGPTForm\n    ```", "```py\n    @catalog.route('/product-create-\n    ```", "```py\n      gpt',methods=['GET','POST'])\n    ```", "```py\n    def create_product_gpt():\n    ```", "```py\n        form = ProductGPTForm()\n    ```", "```py\n        if form.validate_on_submit():\n    ```", "```py\n            name = form.name.data\n    ```", "```py\n            price = form.price.data\n    ```", "```py\n            category = Category.query.get_or_404(\n    ```", "```py\n                form.category.data\n    ```", "```py\n            )\n    ```", "```py\n            openai.api_key = app.config['OPENAI_KEY']\n    ```", "```py\n            prompt = \"Generate an image for a \" + name + \\\n    ```", "```py\n                \" on a white background for a classy\n    ```", "```py\n                  e-commerce store listing\"\n    ```", "```py\n            response = openai.Image.create(\n    ```", "```py\n                prompt=prompt,\n    ```", "```py\n                n=1,\n    ```", "```py\n                size=\"512x512\"\n    ```", "```py\n            )\n    ```", "```py\n            image_url = response['data'][0]['url']\n    ```", "```py\n            filename = secure_filename(name + '.png')\n    ```", "```py\n            response = requests.get(image_url)\n    ```", "```py\n            open(os.path.join(\n    ```", "```py\n                app.config['UPLOAD_FOLDER'], filename\n    ```", "```py\n                ), \"wb\").write(response.content)\n    ```", "```py\n            product = Product(name, price, category,\n    ```", "```py\n              filename)\n    ```", "```py\n            db.session.add(product)\n    ```", "```py\n            db.session.commit()\n    ```", "```py\n            flash('The product %s has been created' %\n    ```", "```py\n              name, 'success')\n    ```", "```py\n            return redirect(url_for('catalog.product',\n    ```", "```py\n              id=product.id))\n    ```", "```py\n        if form.errors:\n    ```", "```py\n            flash(form.errors, 'danger')\n    ```", "```py\n        return render_template('product-create-gpt.html',\n    ```", "```py\n          form=form)\n    ```", "```py\n    {% extends 'home.html' %}\n    ```", "```py\n    {% block container %}\n    ```", "```py\n      <div class=\"top-pad\">\n    ```", "```py\n        <form method=\"POST\"\n    ```", "```py\n            action=\"{{\n    ```", "```py\n              url_for('catalog.create_product_gpt') }}\"\n    ```", "```py\n            role=\"form\"\n    ```", "```py\n            enctype=\"multipart/form-data\">\n    ```", "```py\n          {{ form.csrf_token }}\n    ```", "```py\n          <div class=\"form-group\">{{ form.name.label }}:\n    ```", "```py\n            {{ form.name() }}</div>\n    ```", "```py\n          <div class=\"form-group\">{{ form.price.label }}:\n    ```", "```py\n            {{ form.price() }}</div>\n    ```", "```py\n          <div class=\"form-group\">{{ form.category.label\n    ```", "```py\n            }}: {{ form.category() }}</div>\n    ```", "```py\n          <button type=\"submit\" class=\"btn btn-\n    ```", "```py\n            default\">Submit</button>\n    ```", "```py\n        </form>\n    ```", "```py\n      </div>\n    ```", "```py\n    {% endblock %}\n    ```"]