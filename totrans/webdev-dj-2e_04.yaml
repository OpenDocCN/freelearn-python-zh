- en: 4\. Introduction to Django Admin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces you to the basic functionality of the Django admin app.
    You will start by creating superuser accounts for the Bookr app, before moving
    on to executing `ForeignKeys` in the admin app. At the end of this chapter, you
    will see how you can customize the admin app according to a unique set of preferences
    by sub-classing the `AdminSite` and `ModelAdmin` classes, to make its interface
    more intuitive and user-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing an app, there is often a need to populate it with data and then
    alter that data. We have already seen in *Chapter 2*, *Models and Migrations*,
    how this can be done on the command line using the Python `manage.py` shell. In
    *Chapter 3*, *URL Mapping, Views, and Templates*, we learned how to develop a
    web form interface to our model using Django's views and templates. But neither
    of these approaches is ideal for administering the data from the classes in `reviews/models.py`.
    Using the shell to manage data is too technical for non-programmers and building
    individual web pages would be a laborious process as it would see us repeating
    the same view logic and very similar template features for each table in the model.
    Fortunately, a solution to this problem was devised in the early days of Django
    when it was still being developed.
  prefs: []
  type: TYPE_NORMAL
- en: Django admin is actually written as a Django app. It offers an intuitively rendered
    web interface to give administrative access to the model data. The admin interface
    is designed to be used by the administrators of the website. It is not intended
    to be used by non-privileged users who interact with the site. In our case of
    a book review system, the general population of book reviewers will never encounter
    the admin app. They will see the app pages, like those that we built with views
    and templates in *Chapter 3*, *URL Mapping, Views, and Templates*, and will write
    their reviews on the pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, while developers put in a lot of effort to create a simple and inviting
    web interface for general users, the admin interface, being aimed at administrative
    users, maintains a utilitarian feel that typically displays the intricacies of
    the model. It may have escaped your attention, but you already have an admin app
    in your Bookr project. Look at the list of installed apps in `bookr/settings.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, look at the URL patterns in `bookr/urls.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If we put this path into our browser, we can see the link to the admin app on
    the development server is `http://127.0.0.1:8000/admin/`. Before we make use of
    it though, we need to create a superuser through the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Superuser Account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our Bookr application has just found a new user. Her name is Alice, and she
    wants to start adding her reviews right away. Bob, who is already using Bookr,
    has just informed us that his profile seems incomplete and needs to be updated.
    David no longer wants to use the application and wants his account to be deleted.
    For security reasons, we do not want just any user performing these tasks for
    us. That's why we need to create a **superuser** with elevated privileges. Let's
    start by doing just that.
  prefs: []
  type: TYPE_NORMAL
- en: In Django's authorization model, a superuser is one with the `Staff` attribute
    set. We will examine this later in the chapter and learn more about this authorization
    model in *Chapter 9*, *Sessions and Authentication*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create a superuser by using the `manage.py` script that we have explored
    in earlier chapters. Again, we need to be in the project directory when we enter
    it. We will use the `createsuperuser` subcommand by entering the following command
    in the command line (you will need to write `python` instead of `python3` if you''re
    using Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let's go ahead and create our superuser.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use email addresses that fall under the *example.com*
    domain. This follows an established convention to use this reserved domain for
    testing and documentation. You could use your own email addresses if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.01: Creating a Superuser Account'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will create a superuser account that lets the user log
    into the admin site. This functionality will be used in the upcoming exercises
    as well, to implement changes that only a superuser can. The following steps will
    help you complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following command to create a superuser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On executing this command, you will be prompted to create a superuser. This
    command will prompt you for a superuser name, an optional email address, and a
    password.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the username and email for the superuser as follows. Here, we are entering
    `bookradmin` (highlighted) at the prompt and pressing the *Enter* key. Similarly,
    at the next prompt, which asks you to enter your email address, you can add `bookradmin@example.com`
    (highlighted). Press the *Enter* key to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next prompt in the shell is for your password. Add a strong password and
    press the *Enter* key to confirm it once again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following message on your screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note that the password is validated according to the following criteria:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It cannot be among the 20,000 most common passwords.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It should have a minimum of eight characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It cannot be only numerical characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It cannot be derived from the username, first name, last name, or email address
    of the user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With this, you have created a superuser named `bookradmin` who can log in to
    the admin app. *Figure 4.1* shows how this looks in the shell:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.1: Creating a superuser'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_04_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.1: Creating a superuser'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Visit the admin app at `http://127.0.0.1:8000/admin` and log in with the superuser
    account that you have created:![ Figure 4.2 The Django administration login form
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.2 The Django administration login form
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you created a superuser account that we will be using for
    the rest of this chapter, to assign or remove privileges as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The codes for all the exercises and activities used in this chapter can be found
    on the book's GitHub repository at [http://packt.live/3pC5CRr](http://packt.live/3pC5CRr).
  prefs: []
  type: TYPE_NORMAL
- en: CRUD Operations Using the Django Admin App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get back to the requests we got from Bob, Alice, and David. As a superuser,
    your tasks will involve creating, updating, retrieving, and deleting various user
    accounts, reviews, and title names. This set of activities is collectively termed
    CRUD. CRUD operations are central to the behavior of the admin app. It turns out
    that the admin app is already aware of the models from another Django app, `Authentication
    and Authorization` – referenced in `INSTALLED_APPS` as `''django.contrib.auth''`.
    When logging into `http://127.0.0.1:8000/admin/`, we are presented with the models
    from the authorization application, as shown in *Figure 4.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3: The Django administration window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.3: The Django administration window'
  prefs: []
  type: TYPE_NORMAL
- en: When the admin app is initialized, it calls its `autodiscover()` method to detect
    whether any other installed apps contain an admin module. If so, these admin models
    are imported. In our case, it has discovered `'django.contrib.auth.admin'`. Now
    that the modules are imported and our superuser account is ready, let's start
    by working on the requests from Bob, Alice, and David.
  prefs: []
  type: TYPE_NORMAL
- en: Create
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before Alice starts writing her reviews, we need to create an account for her
    through the admin app. Once that is done, we can then look at the levels of administrative
    access that we can assign to her. To `+ Add` link next to `Users` (refer to *Figure
    4.3*), and fill out the form, as shown in *Figure 4.4*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We don't want any random user to have access to the Bookr users' accounts. Therefore,
    it is imperative that we choose strong, secure passwords.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4: The Add user page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.4: The Add user page'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three buttons at the bottom of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Save and add another` creates the user and renders the same `Add user` page
    again, with blank fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Save and continue editing` creates the user and loads the `Change user` page.
    The `Change user` page lets you add additional information that wasn''t present
    on the `Add user` page, such as `First name`, `Last name`, and more (see *Figure
    4.5*). Note that `Password` does not have an editable field on the form. Instead,
    it shows information about the hashing technique that it is stored with, in addition
    to a link to a separate *change password* form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SAVE` creates the user and lets the user navigate to the `Select user to change`
    list page, as depicted in *Figure 4.6*.![Figure 4.5: The Change user page presented
    after clicking Save and continue editing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '](img/B15509_04_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.5: The Change user page presented after clicking Save and continue
    editing'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The administrative tasks need to be divided among some users, and for this,
    the admin (the person with the superuser account) would like to view those users
    whose email addresses end with *n@example.com* and assign the tasks to these users.
    This is where the `SAVE` button on the `Add user` page (refer to *Figure 4.4*),
    we are taken to the `Select user to change` list page (as shown in *Figure 4.6*),
    which carries out the `Create` form is also reachable by clicking on the `ADD
    USER` button on the `Select user to change` list page. So, after we have added
    a few more users, the change list will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6: The Select user to change page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.6: The Select user to change page'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the form is a `Search` bar that searches the contents of the
    username, email address, and first and last names of users. On the right-hand
    side is a `FILTER` panel that narrows down the selection based on the values of
    `staff status`, `superuser status`, and `active`. In *Figure 4.7*, we will see
    what happens when we search the string `n@example.com` and see the results. This
    will return only the names of the users whose email addresses consist of a username
    ending in *n* and a domain starting with *example.com*. We will only see three
    users with email addresses matching this requirement – `bookradmin@example.com`,
    `carol.brown@example.com`, and `david.green@example.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7: Searching for users by a portion of their email address'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.7: Searching for users by a portion of their email address'
  prefs: []
  type: TYPE_NORMAL
- en: Update
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember that Bob wanted his profile to be updated. Let''s `bob` username link
    in the `Select user to change` list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8: Selecting bob from the Select user to change list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.8: Selecting bob from the Select user to change list'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will take us back to the `Change user` form where the values for `First
    name`, `Last name`, and `Email address` can be entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9: Adding personal info'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.9: Adding personal info'
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen from *Figure 4.9*, we are adding personal information about Bob
    here – his name, surname, and email address, specifically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another type of update operation is "soft deleting." The `Active` Boolean property
    allows us to deactivate a user rather than deleting the entire record and losing
    all the data that has dependencies on the account. This practice of using a Boolean
    flag to denote a record as inactive or removed (and subsequently filtering these
    flagged records out of queries) is referred to as a `Staff status` or `Superuser
    status` by ticking the respective checkboxes for those:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10: Active, Staff status, and Superuser status Booleans'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.10: Active, Staff status, and Superuser status Booleans'
  prefs: []
  type: TYPE_NORMAL
- en: Delete
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'David no longer wants to use the Bookr application and has requested that we
    delete his account. The auth admin caters to this too. Select a user or user records
    on the `Select user to change` list page and choose the `Delete selected users`
    option from the `Action` dropdown. Then hit the `Go` button (*Figure 4.11*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11: Deleting from the Select user to change list page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.11: Deleting from the Select user to change list page'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be presented with a confirmation screen and taken back to the `Select
    user to change` list once you have deleted the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12: User deletion confirmation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.12: User deletion confirmation'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following message once the user is deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13: User deletion notification'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.13: User deletion notification'
  prefs: []
  type: TYPE_NORMAL
- en: After that confirmation, you will find that David's account no longer exists.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have learned how we can add a new user, get the details of another
    user, make changes to the data for a user, and delete a user. These skills helped
    us cater to Alice, Bob, and David's requests. As the number of users of our app
    grows, managing requests from hundreds of users will eventually become quite difficult.
    One way around this problem would be to delegate some of the administrative responsibilities
    to a selected set of users. We'll learn how to do that in the section that follows.
  prefs: []
  type: TYPE_NORMAL
- en: Users and Groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django's authentication model consists of users, groups, and permissions. Users
    can belong to many groups and this is a way of categorizing users. It also streamlines
    the implementation of permissions by allowing permissions to be assigned to collections
    of users as well as individuals.
  prefs: []
  type: TYPE_NORMAL
- en: In *Exercise 4.01*, *Creating a Superuser Account*, we saw how we could cater
    to Alice, David, and Bob's requests to make modifications to their profiles. It
    was quite easy to do and our application seems well-equipped to handle their requests.
  prefs: []
  type: TYPE_NORMAL
- en: What will happen when the number of users grows? Will the admin user be able
    to manage 100 or 150 users at once? As you can imagine, this can be quite a complicated
    task. To overcome this, we can give elevated permissions to a certain set of users
    and they can help ease the admin's tasks. And that's where groups come in handy.
    Though we'll learn more about users, groups, and permissions in *Chapter 9*, *Sessions
    and Authentication*, we can start understanding groups and their functionality
    by creating a `Help Desk user group` that contains accounts having access to the
    admin interface but lacking many powerful features, such as the ability to add,
    edit, or delete groups or to add or delete users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.02: Adding and Modifying Users and Groups through the Admin app'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will grant a certain level of administrative access to
    one of our Bookr users, Carol. First, we will define the level of access for a
    group, and then we will add Carol to the group. This will allow Carol to update
    user profiles and check user logs. The following steps will help you implement
    this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the admin interface at `http://127.0.0.1:8000/admin/` and log in as `bookradmin`
    using the account set up with the superuser command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the admin interface, follow the links to `Home` › `Authentication and Authorization`
    › `Groups`:![Figure 4.14: The Groups and Users options on the Authentication AND
    Authorization page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.14: The Groups and Users options on the Authentication AND Authorization
    page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use `ADD GROUP +` in the top right-hand corner to add a new group:![Figure
    4.15: Adding a new group'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.15: Adding a new group'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Name the group `Help Desk User` and give it the following permissions, as shown
    in *Figure 4.16*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Can view log entry`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Can view permission`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Can change user`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Can view user`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.16: Selecting the permissions'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_04_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.16: Selecting the permissions'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This can be done by selecting the permissions from `Available permissions`
    and clicking the right arrow in the middle so that they appear under `Chosen permissions`.
    Note that to add multiple permissions at a time, you can hold down the *Ctrl*
    key (or *Command* for Mac) to select more than one:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.17: Adding selected permissions into Chosen permissions'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_04_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.17: Adding selected permissions into Chosen permissions'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you click the `SAVE` button, you will see a confirmation message, stating
    that the group `Help Desk User` was added successfully:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.18: Message confirming that the group Help Desk User was added'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_04_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.18: Message confirming that the group Help Desk User was added'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, navigate to `Home` › `Authentication and Authorization` › `Users` and
    click the link of the user with the first name `carol`:![Figure 4.19: Clicking
    on the username carol'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.19: Clicking on the username carol'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Scroll down to the `Permissions` fields set and select the `Staff status` checkbox.
    This is required for Carol to be able to log in to the admin app:![Figure 4.20:
    Clicking the Staff status checkbox'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.20: Clicking the Staff status checkbox'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add Carol to the `Help Desk User` group that we created in the previous steps
    by selecting it from the `Available groups` selection box (refer *Figure 4.20*)
    and clicking the right arrow to shift it into her list of `Chosen groups` (as
    shown in *Figure 4.21*). Note that unless you do this, Carol won''t be able to
    log in to the admin interface using her credentials:![Figure 4.21: Shifting the
    Help Desk User group into the list of Chosen groups for Carol'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.21: Shifting the Help Desk User group into the list of Chosen groups
    for Carol'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s test whether what we''ve done up till now has yielded the right outcome.
    To do this, log out of the admin site and log in again as `carol`. Upon logging
    out, you should see the following on your screen:![Figure 4.22: Logout screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.22: Logout screen'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you don't recall the password that you initially gave her, you can change
    the password at the command line by typing `python3 manage.py changepassword carol`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon successful login, on the admin dashboard, you can see that there is no
    link to `Groups`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.23: Admin dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.23: Admin dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: As we did not assign any group permissions, not even `auth | group | Can view
    group`, to the `Help Desk User` group, when Carol logs in, the `Groups` admin
    interface is not available to her. Similarly, navigate to `Home › Authentication
    and Authorization › Users`. Clicking a user link, you will see that there are
    no options to edit or delete the user. This is because of the permissions that
    were granted to the Help Desk User group, of which Carol is a member. The members
    of the group can view and edit users but cannot add or delete any user.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we learned how we can grant a certain amount of administrative
    privileges to users of our Django app.
  prefs: []
  type: TYPE_NORMAL
- en: Registering the Reviews Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say that Carol is tasked with improving the Reviews section in Bookr;
    that is, only the most relevant and comprehensive reviews should be shown, and
    duplicate or spammy entries should be removed. For this, she will need access
    to the `reviews` model. As we have seen above with our investigation of groups
    and users, the admin app already contains admin pages for the models from the
    authentication and authorization app, but it does not yet reference the models
    in our Reviews app.
  prefs: []
  type: TYPE_NORMAL
- en: To make the admin app aware of the models, we need to explicitly register them
    with the admin app. Fortunately, we don't need to modify the admin app's code
    to do so as we can instead import the admin app into our project and use its API
    to register our models. This has already been done in the authentication and authorization
    app, so let's try it with our Reviews app. Our aim is to be able to use the admin
    app to edit the data in our `reviews` model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the `reviews/admin.py` file. It is a placeholder file that was
    generated with the `startapp` subcommand that we used in *Chapter 1*, *Introduction
    to Django*, and currently contains these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can try to expand this. To make the admin app aware of our models, we
    can modify the `reviews/admin.py` file and import the models. Then we could register
    the models with the `AdminSite` object, `admin.site`. The `AdminSite` object contains
    the instance of the Django admin application (later, we will learn how to subclass
    this `AdminSite` and override many of its properties). Then, our `reviews/admin.py`
    will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `admin.site.register` method makes the models available to the admin app
    by adding it to a registry of classes contained in `admin.site._registry`. If
    we chose not to make a model accessible through the admin interface, we would
    simply not register it. When you reload `http://127.0.0.1:8000/admin/` in your
    browser, you will see the following on the admin app landing page. Note the change
    in the appearance of the admin page after the `reviews` model has been imported:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.24: Admin app landing page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.24: Admin app landing page'
  prefs: []
  type: TYPE_NORMAL
- en: Change Lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have change lists populated for our models. If we click the `Publishers`
    link, we will be taken to `http://127.0.0.1:8000/admin/reviews/publisher` and
    see a change list containing links to the publishers. These links are designated
    by the `id` field of the `Publisher` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your database has been populated with the script in *Chapter 3*, *URL Mapping,
    Views, and Templates*, you will see a list with seven publishers that looks like
    *Figure 4.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the state of your database and based on the activities you have
    completed, the object IDs, URLs, and links in these examples may be numbered differently
    from those listed here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.25: Select publisher to change list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.25: Select publisher to change list'
  prefs: []
  type: TYPE_NORMAL
- en: The Publisher Change Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The publisher change page at `http://127.0.0.1:8000/admin/reviews/publisher/1`
    contains what we might expect (see *Figure 4.26*). There is a form for editing
    the publisher''s details. These details have been derived from the `reviews.models.Publisher`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.26: Publisher change page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.26: Publisher change page'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we had clicked the `ADD PUBLISHER` button, the admin app would have returned
    a similar form for adding a publisher. The beauty of the admin app is that it
    gives us all of this CRUD functionality with just one line of coding – `admin.site.register(Publisher)`
    – using the definition of the `reviews.models.Publisher` attributes as a schema
    for the page content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The publisher `Name` field is constrained to 50 characters as specified in the
    model. The help text that appears in gray below each field is derived from the
    `help_text` attributes specified on the model. We can see that `models.CharField`,
    `models.URLField`, and `models.EmailField` are rendered in HTML as input elements
    of type `text`, `url`, and `email` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fields in the form come with validation where appropriate. Unless model
    fields are set to `blank=True` or `null=True`, the form will throw an error if
    the field is left blank, as is the case for the `Publisher.name` field. Similarly,
    as `Publisher.website` and `Publisher.email` are respectively defined as instances
    of `models.URLField` and `models.EmailField`, they are validated accordingly.
    In *Figure 4.27*, we can see validation of `Name` as a required field, validation
    of `Website` as a URL, and validation of `Email` as an email address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.27: Field validation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.27: Field validation'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is useful to examine how the admin app renders elements of the models to
    understand how it functions. In your browser, right-click `View Page Source` and
    examine the HTML that has been rendered for this form. You will see a browser
    tab displaying something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The form has an ID of `publisher_form` and it contains a fieldset with HTML
    elements corresponding to the data structure of the `Publisher` model in `reviews/models.py`,
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that for the name, the input field is rendered like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'It is a required field, and it has a type of `text` and a `maxlength` of 50,
    as defined by the `max_length` parameter in the model definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we can see the website and email being defined in the model as `URLField`
    and `EmailField` are rendered in HTML as input elements of type `url` and `email`
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We have learned that this Django admin app derives sensible HTML representations
    of Django models based on the model definitions that we have provided.
  prefs: []
  type: TYPE_NORMAL
- en: The Book Change Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similarly, there is a change page that can be reached by selecting `Books`
    from the `Site administration` page and then selecting a specific book in the
    change list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.28: Selecting Books from the Site administration page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.28: Selecting Books from the Site administration page'
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking `Books` as shown in the preceding screenshot, you will see the
    following on your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.29: The book change page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.29: The book change page'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this instance, selecting the book *Architects of Intelligence* will take
    us to the URL `http://127.0.0.1:8000/admin/reviews/book/3/change/`. In the previous
    example, all the model fields were rendered as simple HTML text widgets. The rendering
    of some other subclasses of `django.db.models.Field` used in `models.Book` are
    worthy of closer examination:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.30: The Change book page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.30: The Change book page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, `publication_date` is defined using `models.DateField`. It is rendered
    using a date selection widget. The visual representation of the widgets will vary
    amongst operating systems and choice of browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.31: Date selection widget'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.31: Date selection widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'As `Publisher` is defined as a foreign key relation, it is rendered by a `Publisher`
    dropdown with a list of `Publisher` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.32: Publisher dropdown'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.32: Publisher dropdown'
  prefs: []
  type: TYPE_NORMAL
- en: 'This brings us to how the admin app handles deletion. The admin app takes its
    cue from the models'' foreign key constraints when determining how to implement
    deletion functionality. In the `BookContributor` model, `Contributor` is defined
    as a foreign key. The code in `reviews/models.py` looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: By setting `on_delete=CASCADE` on a foreign key, the model is specifying the
    database behavior required when a record is deleted; the deletion is cascaded
    to other objects that are referenced by the foreign key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.03: Foreign Keys and Deletion Behavior in the Admin App'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present, all `ForeignKey` relations in the `reviews` models are defined
    with an `on_delete=CASCADE` behavior. For instance, think of a case wherein an
    admin deletes one of the publishers. This would delete all the books that are
    associated with the publisher. We do not want that to happen, and that is precisely
    the behavior that we will be changing in this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the `Contributors` change list at `http://127.0.0.1:8000/admin/reviews/contributor/`
    and select a contributor to delete. Make sure that the contributor is the author
    of a book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the `Delete` button, but don''t click `Yes, I''m sure` on the confirmation
    dialog. You will see a message like the one in *Figure 4.33*:![Figure 4.33: Cascading
    delete confirmation dialog'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_33.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.33: Cascading delete confirmation dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In accordance with the `on_delete=CASCADE` argument to the foreign key, we are
    warned that deleting this Contributor object will have a cascading effect on a
    `BookContributor` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `reviews/models.py` file, modify the `Contributor` attribute of `BookContributor`
    to the following and save the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, try deleting the `Contributor` object again. You will see a message similar
    to the one in *Figure 4.34*:![Figure 4.34: Foreign key protection error'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.34: Foreign key protection error'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Because the `on_delete` argument is `PROTECT`, our attempt to delete the object
    with dependencies will throw an error. If we used this approach in our model,
    we would need to delete objects in the `ForeignKey` relation before we deleted
    the original object. In this case, it would mean deleting the `BookContributor`
    object before deleting the `Contributor` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we have learned about how the admin app handles `ForeignKey` relations,
    let''s revert the `ForeignKey` definition in the `BookContributor` class to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have examined how the admin app's behavior adapts to the `ForeignKey` constraints
    that are expressed in model definitions. If the `on_delete` behavior is set to
    `models.PROTECT`, the admin app returns an error explaining why a protected object
    is blocking the deletion. This functionality can come in handy while building
    real-world apps, as there is often a chance of a manual error inadvertently leading
    to the deletion of important records. In the next section, we will look at how
    we can customize our admin app interface for a smoother user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the Admin Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When first developing an application, the convenience of the default admin interface
    is excellent for building a rapid prototype of the app. Indeed, for many simpler
    applications or projects that require minimal data maintenance, this default admin
    interface may be entirely adequate. However, as the application matures to the
    point of release, the admin interface will generally need to be customized to
    facilitate more intuitive use and to robustly control data, subject to user permissions.
    You might want to retain certain aspects of the default admin interface, and at
    the same time, make some tweaks to certain features to better suit your purposes.
    For example, you would want the publisher list to show the complete names of the
    publishing houses, instead of "`Publisher(1)`, `Publisher(2)`…" and so on. In
    addition to the aesthetic appeal, this makes it easier to use and navigate through
    the app.
  prefs: []
  type: TYPE_NORMAL
- en: Site-Wide Django Admin Customizations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have seen a page titled `Log in | Django site admin` containing a `Django
    Administration` form. However, an administrative user of the Bookr application
    may be somewhat perplexed by all this Django jargon, and it would be very confusing
    and a recipe for error if they had to deal with multiple Django apps that all
    had identical admin apps. As a developer of an intuitive and user-friendly application,
    you would want to customize this. Global properties like these are specified as
    attributes of the `AdminSite` object. The following table details some of the
    simplest customizations to improve the usability of your app''s admin interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.35: Important AdminSite attributes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_35.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.35: Important AdminSite attributes'
  prefs: []
  type: TYPE_NORMAL
- en: Examining the AdminSite object from the Python Shell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a deeper look at the `AdminSite` class. We have already encountered
    an object of class `AdminSite`. It is the `admin.site` object that we used in
    the previous section, *Registering the Reviews Model*. If the development server
    is not running, start it now with the `runserver` subcommand, as follows (use
    `python` instead of `python3` for Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can examine the `admin.site` object by importing the admin app in the Django
    shell, using the `manage.py` script again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can interactively examine the default values of `site_title`, `site_header`,
    and `index_title` and see that they match the expected values of `''Django site
    admin''`, `''Django administration''`, and `''Site administration''` that we have
    already observed on the rendered web pages of the Django admin app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `AdminSite` class also specifies which forms and views are used to render
    the admin interface and determine its global behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Subclassing AdminSite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can make some modifications to the `reviews/admin.py` file. Instead of importing
    the `django.contrib.admin` module and using its site object, we will import `AdminSite`,
    subclass it, and instantiate our customized `admin_site` object. Consider the
    following code snippet. Here, `BookrAdminSite` is a subclass of `AdminSite` that
    contains custom values for `site_title`, `site_header`, and `index_title`; `admin_site`
    is an instance of `BookrAdminSite`; and we can use this instead of the default
    `admin.site` object, to register our models. The `reviews/admin.py` file will
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have now created our own `admin_site` object that overrides the behavior
    of the `admin.site` object, we need to remove the existing references in our code
    to the `admin.site` object. In `bookr/urls.py`, we need to point admin to the
    new `admin_site` object and update our URL patterns. Otherwise, we would still
    be using the default admin site and our customizations would be ignored. The change
    will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the expected results on the login screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.36: Customizing the login screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_36.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.36: Customizing the login screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, now there is a problem; that is, we have lost the interface for auth
    objects. Previously, the admin app was discovering the models registered in `reviews/admin.py`
    and in `django.contrib.auth.admin` through the auto-discovery process, but now
    we have overridden this behavior by creating a new `AdminSite`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.37: Customized AdminSite is missing Authentication and Authorization'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_37.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.37: Customized AdminSite is missing Authentication and Authorization'
  prefs: []
  type: TYPE_NORMAL
- en: 'We could go down the path of referencing both `AdminSite` objects to URL patterns
    in `bookr/urls.py`, but this approach would mean that we would end up with two
    separate admin apps for authentication and reviews. So, the URL `http://127.0.0.1:8000/admin`
    will take you to the original admin app derived from the `admin.site` object,
    while `http://127.0.0.1:8000/bookradmin` will take you to our `BookrAdminSite`
    `admin_site`. This is not what we want to do, as we are still left with the admin
    app without the customizations that we added when we sub-classed `BookrAdminSite`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This has been a clumsy problem with the Django admin interface that has led
    to a lot of ad hoc solutions in earlier versions. Since Django 2.1 came out, there
    is a simple way of integrating a customized interface for the admin app without
    breaking auto-discovery or any of its other default features. As `BookrAdminSite`
    is project-specific, the code does not really belong under our `reviews` folder.
    We should move `BookrAdminSite` to a new file called `admin.py` at the top level
    of the `Bookr` project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The URL settings path in `bookr/urls.py` changes to `path(''admin/'', admin.site.urls)`
    and we define our `ReviewsAdminConfig`. The `reviews/apps.py` file will contain
    these additional lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace `django.contrib.admin` with `reviews.apps.ReviewsAdminConfig`, so that
    `INSTALLED_APPS` in the `bookr/settings.py` file will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `ReviewsAdminConfig` specification of `default_site`, we no longer
    need to replace references to `admin.site` with a custom `AdminSite` object, `admin_site`.
    We can replace those `admin_site` calls with the `admin.site` calls that we had
    originally. Now, `reviews/admin.py` reverts to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: There are other aspects of `AdminSite` that we can customize, but we will revisit
    these in *Chapter 9*, *Sessions and Authentication* once we have a fuller understanding
    of Django's templates and forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 4.01: Customizing the SiteAdmin'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have learned how to modify attributes of the `AdminSite` object in a Django
    project. This activity will challenge you to use these skills to customize a new
    project and override its site title, site header, and index header. Also, you
    will replace the logout message by creating a project-specific template and setting
    it in our custom `SiteAdmin` object. You are developing a Django project that
    implements a message board, called *Comment8or*. *Comment8or* is geared toward
    a technical demographic, so you need to make the phraseology succinct and abbreviated:'
  prefs: []
  type: TYPE_NORMAL
- en: The *Comment8or* admin site will be referred to as `c8admin`. This will appear
    on the site header and index title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the title header, it will say `c8 site admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default Django admin logout message is `Thanks for spending some quality
    time with the Web site today.` In Comment8or, it will say `Bye from c8admin.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These are the steps that you need to follow to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Following the process that you learned in *Chapter 1*, *Introduction to Django*,
    create a new Django project called `comment8or`, an app called `messageboard`,
    and run the migrations. Create a superuser called `c8admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Django source code, there is a template for the logout page located in
    `django/contrib/admin/templates/registration/logged_out.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a copy of it in your project's directory under `comment8or/templates/comment8or`.
    Modify the message in the template following the requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the project, create an `admin.py` file that implements a custom `SiteAdmin`
    object. Set the appropriate values for the attributes `index_title`, `title_header`,
    `site_header`, and `logout_template`, based on the requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a custom `AdminConfig` subclass to `messageboard/apps.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the admin app with the custom `AdminConfig` subclass in `comment8or/settings.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the `TEMPLATES` setting so that the project's template is discoverable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the project is first created, the login, app index, and logout pages will
    look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.38: Login page for the project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_04_38.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.38: Login page for the project'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.39: App index page for the project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.39: App index page for the project'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.40: Logout page for the project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.40: Logout page for the project'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have completed this activity, the login, app index, and logout pages
    will appear with the following customizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.41: Login page after customization'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.41: Login page after customization'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.42: App index page after customization'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.42: App index page after customization'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.43: Logout page after customization'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.43: Logout page after customization'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully customized the admin app by sub-classing `AdminSite`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found at [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ).
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the ModelAdmin Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we've learned how a sub-classed `AdminSite` can be used to customize
    the global appearance of the admin app, we will look at how to customize the admin
    app's interface to individual models. Owing to the admin interface being generated
    automatically from the models' structure, it has an overly generic appearance
    and needs to be customized for the sake of aesthetics and usability. Click one
    of the `Books` links in the admin app and compare it to the `Users` link. Both
    links take you to change list pages. These are the pages that a Bookr administrator
    visits when they want to add new books or add or alter the privileges of a user.
    As explained above, a change list page presents a list of model objects with the
    option of selecting a group of them for bulk deletion (or other bulk activity),
    examining an individual object with a view to editing it, or adding a new object.
    Notice the difference between the two change list pages with a view to making
    our vanilla `Books` page as fully featured as the `Users` page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot from the `Authentication and Authorization` app contains
    useful features such as a search bar, sortable column headers for important user
    fields, and a result filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.44: The Users change list contains customized ModelAdmin features'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_44.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.44: The Users change list contains customized ModelAdmin features'
  prefs: []
  type: TYPE_NORMAL
- en: The List Display Fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the `Users` change list page, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: There is a list of user objects presented, summarized by their `USERNAME`, `EMAIL
    ADDRESS`, `FIRST NAME`, `LAST NAME`, and `STAFF STATUS` attributes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These individual attributes are sortable. The sorting order can be changed by
    clicking the headers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a search bar at the top of the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the right-hand column, there is a selection filter that allows the selection
    of several user fields, including some not appearing in the list display.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, the behavior for the `Books` change list page is a lot less helpful.
    The books are listed by their titles but not in alphabetical order. The title
    column is not sortable and there are no filter or search options present:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.45: The Books change list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_45.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.45: The Books change list'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall from *Chapter 2*, *Models and Migrations*, that we defined `__str__`
    methods on the `Publisher`, `Book`, and `Contributor` classes. In the case of
    the `Book` class, it had a `__str__()` representation that returns the book object''s
    title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If we had not defined the `__str__()` method on the `Book` class, it would have
    inherited it from the base `Model` class, `django.db.models.Model`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This base class provides an abstract way to give a string representation of
    an object. When we have `Book` with a primary key, in this case, the `id` field,
    with a value of `17`, then we will end up with a string representation of `Book
    object (17)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.46: The Books change list using the Model __str__ representation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.46: The Books change list using the Model __str__ representation'
  prefs: []
  type: TYPE_NORMAL
- en: 'It could be useful in our application to represent a `Book` object as a composite
    of several fields. For example, if we wanted the books to be represented as `Title
    (ISBN)`, the following code snippet would produce the desired results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a useful change in and of itself as it makes the representation of
    the object more intuitive in the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.47: A portion of the Books change list with the custom string representation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_47.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.47: A portion of the Books change list with the custom string representation'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are not limited to using the `__str__` representation of the object in the
    `list_display` field. The columns that appear in the list display are determined
    by the `ModelAdmin` class of the Django admin app. At the Django shell, we can
    import the `ModelAdmin` class and examine its `list_display` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This explains why the default behavior of `list_display` is to display a single-columned
    table of the objects'' `__str__` representations, so that we can customize the
    list display by overriding this value. The best practice is to subclass `ModelAdmin`
    for each object. If we wanted the `Book` list display to contain two separate
    columns for `Title` and `ISBN`, rather than having a single column containing
    both values as in *Figure 4.47*, we would subclass `ModelAdmin` as `BookAdmin`
    and specify the custom `list_display`. The benefit of doing this is that we are
    now able to sort books by `Title` and by `ISBN`. We can add this class to `reviews/admin.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we''ve created a `BookAdmin` class, we should reference it when we
    register our `reviews.models.Book` class with the admin site. In the same file,
    we also need to modify the model registration to use `BookAdmin` instead of the
    default value of `admin.ModelAdmin`, so the `admin.site.register` call now becomes
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Once these two changes have been made to the `reviews/admin.py` file, we will
    get a `Books` change list page that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.48: A portion of the Books change list with a two-column list display'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_48.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.48: A portion of the Books change list with a two-column list display'
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us a hint as to how flexible `list_display` is. It can take four
    types of values:'
  prefs: []
  type: TYPE_NORMAL
- en: It takes field names from the model, such as `title` or `isbn`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It takes a function that takes the model instance as an argument, such as this
    function that gives an initialized version of a person''s name:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It takes a method from the `ModelAdmin` subclass that takes the model object
    as a single argument. Note that this needs to be specified as a string argument
    as it would be out of scope and undefined within the class:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It takes a method (or a non-field attribute) of the model class, such as `__str__`,
    as long as it accepts the model object as an argument. For example, we could convert
    `isbn13` to a method on the `Book` model class:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now when viewing the `Books` change list at `http://127.0.0.1:8000/admin/reviews/book`,
    we can see the hyphenated `ISBN13` field:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.49: A portion of the Books change list with the hyphenated ISBN13'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_49.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.49: A portion of the Books change list with the hyphenated ISBN13'
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that computed fields such as `__str__` or our `isbn13` methods
    do not make for sortable fields on the summary page. Also, we cannot include fields
    of type `ManyToManyField` in `display_list`.
  prefs: []
  type: TYPE_NORMAL
- en: The Filter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the admin interface needs to deal with a significant number of records,
    it is convenient to narrow down the results that appear on change list pages.
    The simplest filters select individual values. For example, the user filter depicted
    in *Figure 4.6* allows the selection of users by `staff status`, by `superuser
    status`, and `active`. We''ve seen on the user filter that `BooleanField` can
    be used as a filter. We can also implement filters on `CharField`, `DateField`,
    `DateTimeField`, `IntegerField`, `ForeignKey`, and `ManyToManyField`. In this
    case, adding `publisher` as a `ForeignKey` of `Book`, it is defined on the `Book`
    class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Filters are implemented using the `list_filter` attribute of a `ModelAdmin`
    subclass. In our Bookr app, filtering by book title or ISBN would be impractical
    as it would produce a large list of filter options that return only one record.
    The filter that would occupy the right-hand side of the page would take up more
    space than the actual change list. A practical option would be to filter books
    by publisher. We defined a custom `__str__` method for the `Publisher` model that
    returns the publisher's `name` attribute, so our filter options will be listed
    as publisher names.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can specify our change list filter in `reviews/admin.py` in the `BookAdmin` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the `Books` change page should look now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.50: The Books change page with the publisher filter'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_50.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.50: The Books change page with the publisher filter'
  prefs: []
  type: TYPE_NORMAL
- en: With that line of code, we have implemented a useful publisher filter on the
    `Books` change list page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.04: Adding a Date list_filter and date_hierarchy'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have seen that the `admin.ModelAdmin` class provides useful attributes to
    customize filters on change list pages. For example, filtering by date is crucial
    functionality for many applications and can also help us make our app more user-friendly.
    In this exercise, we will examine how date filtering can be implemented by including
    a date field in the filter and look at the `date_hierarchy` filter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `reviews/admin.py` file and modify the `list_filter` attribute in
    the `BookAdmin` class to include `''publication_date''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `Books` change page and confirm that the filter now includes date settings:![Figure
    4.51: Confirming that the Books change page includes date settings'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_51.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.51: Confirming that the Books change page includes date settings'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This publication date filter would be convenient if the Bookr project was receiving
    a lot of new releases, and we wanted to filter books by what was published in
    the last 7 days or a month. Sometimes though, we might like to filter by a specific
    year or a specific month in a specific year. Fortunately, the `admin.ModelAdmin`
    class comes with a custom filter attribute that is geared towards navigating hierarchies
    of temporal information. It is called `date_hierarchy`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a `date_hierarchy` attribute to `BookAdmin` and set its value to `publication_date`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `Books` change page and confirm that the date hierarchy appears
    above the `Action` dropdown:![Figure 4.52: Confirming that the date hierarchy
    appears above the Action dropdown'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_52.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.52: Confirming that the date hierarchy appears above the Action dropdown'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select a year from the date hierarchy and confirm that it contains a list of
    months in that year containing book titles and a total list of books:![Figure
    4.53: Confirming that the selection of a year from the date hierarchy shows the
    books published that year'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_53.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.53: Confirming that the selection of a year from the date hierarchy
    shows the books published that year'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Confirm that selecting one of these months further filters down to days in
    the month:![Figure 4.54: Filtering months down to days in the month'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_54.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.54: Filtering months down to days in the month'
  prefs: []
  type: TYPE_NORMAL
- en: The `date_hierarchy` filter is a convenient way of customizing a change list
    that contains a large set of time-sortable data in order to facilitate faster
    record selection, as we saw in this exercise. Let's now look at the implementation
    of a search bar in our app.
  prefs: []
  type: TYPE_NORMAL
- en: The Search Bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This brings us to the remaining piece of functionality that we wanted to implement
    – the search bar. Like filters, a basic search bar is quite simple to implement.
    We only need to add the `search_fields` attribute to the `ModelAdmin` class. The
    obvious character fields in our `Book` class to search on are `title` and `isbn`.
    At present, the `Books` change list appears with a date hierarchy across the top
    of the change list. The search bar will appear above this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.55: Books change list before the search bar is added'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_55.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.55: Books change list before the search bar is added'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start by adding this attribute to `BookAdmin` in `reviews/admin.py`
    and examine the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The result would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.56: Books change list with the search bar'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_56.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.56: Books change list with the search bar'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can perform a simple text search on fields that match the title field
    or ISBN. This search requires precise string matches, so "color" won''t match
    "colour." It also lacks the deep semantic processing that we expect from more
    sophisticated search facilities such as `Books` model is quite restrictive. We
    might want to search by publisher name too. Fortunately, `search_fields` is flexible
    enough to accomplish this. To search on `ForeignKeyField` or `ManyToManyField`,
    we just need to specify the field name on the current model and the field on the
    related model separated by two underscores. In this case, `Book` has a foreign
    key, `publisher`, and we want to search on the `Publisher.name` field so it can
    be specified as `''publisher__name''` on `BookAdmin.search_fields`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: If we wanted to restrict a search field to an exact match rather than return
    results that contain the search string, then the field can be suffixed with `'__exact'`.
    So, replacing `'isbn'` with `'isbn__exact'` will require the complete ISBN to
    be matched, and we won't be able to get a match using a portion of the ISBN.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we constrain the search field to only return results that start with
    the search string by using the `'__startswith'` suffix. Qualifying the publisher
    name search field as `'publisher__name__startswith'` means that we will get results
    searching for "pack" but not for "ackt."
  prefs: []
  type: TYPE_NORMAL
- en: Excluding and Grouping Fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are occasions when it is appropriate to restrict the visibility of some
    of the fields in the model in the admin interface. This can be achieved with the
    `exclude` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the review form screen with the `Date edited` field visible. Note that
    the `Date created` field does not appear – it is already a hidden view because
    `date_created` is defined on the model with the `auto_now_add` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.57: The review form'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_57.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.57: The review form'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we wanted to exclude the `Date edited` field from the review form, we would
    do this in the `ReviewAdmin` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the review form would appear without `Date edited`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.58: The review form with the Date edited field excluded'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_58.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.58: The review form with the Date edited field excluded'
  prefs: []
  type: TYPE_NORMAL
- en: 'Conversely, it might be more prudent to restrict the admin fields to those
    that have been explicitly permitted. This is achieved with the `fields` attribute.
    The advantage of this approach is that if new fields are added in the model, they
    won''t be available in the admin form unless they have been added to the `fields`
    tuple in the `ModelAdmin` subclass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This will give us the same result that we saw earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option is to use the `fieldsets` attribute of the `ModelAdmin` subclass
    to specify the form layout as a series of grouped fields. Each grouping in `fieldsets`
    consists of a title followed by a dictionary containing a `''fields''` key pointing
    to a list of field name strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The review form should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.59: The review form with fieldsets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_59.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.59: The review form with fieldsets'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to omit the title on a fieldset, we can do so by assigning the value
    `None` to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the review form should appear as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.60: The review form with the first fieldset untitled'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_60.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.60: The review form with the first fieldset untitled'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 4.02: Customizing the Model Admins'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our data model, the `Contributor` class is used to store data for book contributors
    -- they can be authors, contributors, or editors. This activity focuses on modifying
    the `Contributor` class and adding a `ContributorAdmin` class to improve the user-friendliness
    of the admin app. At present, the `Contributor` change list defaults to a single
    column, `FirstNames`, based on the `__str__` method created in *Chapter 2*, *Models
    and Migrations*. We will investigate some alternative ways of representing this.
    These steps will help you complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit `reviews/models.py` to add additional functionality to the `Contributor`
    model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `initialled_name` method to `Contributor` that takes no arguments (like
    the `Book.isbn13` method).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `initialled_name` method will return a string containing `Contributor.last_names`
    followed by a comma and the initials of the given names. For example, for a `Contributor`
    object with `first_names` of `Jerome David` and `last_names` of `Salinger`, `initialled_name`
    will return `Salinger, JD`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the `__str__` method for `Contributor` with one that calls `initialled_name()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, the `Contributors` display list will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.61: Contributors display list'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_04_61.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.61: Contributors display list'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add a `ContributorAdmin` class in `reviews/admin.py`. It should inherit from
    `admin.ModelAdmin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify it so that on the `Contributors` change list, records are displayed with
    two sortable columns – `Last Names` and `First Names`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a search bar that searches on `Last Names` and `First Names`. Modify it
    so that it only matches the start of `Last Names`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a filter on `Last Names`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By completing the activity, you should be able to see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.62: Expected output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_62.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.62: Expected output'
  prefs: []
  type: TYPE_NORMAL
- en: Changes such as these can be made to improve the functionality of the admin
    user interface. By implementing `First Names` and `Last Names` columns as separate
    columns in the `Contributors` change list, we are giving the user an option to
    sort on either of the fields. By considering what columns are most useful in search
    retrieval and filter selections, we can improve the efficient retrieval of records.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found at [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to create superusers through the Django command
    line and how to use them to access the admin app. After a brief tour of the admin
    app's basic functionality, we examined how to register our models with it to produce
    a CRUD interface for our data.
  prefs: []
  type: TYPE_NORMAL
- en: Then we learned how to refine this interface by modifying site-wide features.
    We altered how the admin app presents model data to the user by registering custom
    model admin classes with the admin site. This allowed us to make fine-grained
    changes to the representation of our models' interfaces. These modifications included
    customizing change list pages by adding additional columns, filters, date hierarchies,
    and search bars. We also modified the layout of the model admin pages by grouping
    and excluding fields.
  prefs: []
  type: TYPE_NORMAL
- en: This was only a very shallow dive into the functionality of the admin app. We
    will revisit the rich functionality of `AdminSite` and `ModelAdmin` in *Chapter
    10*, *Advanced Django Admin and Customization*. But first, we need to learn some
    more intermediate features of Django. In the next chapter, we will learn how to
    organize and serve static content, such as CSS, JavaScript, and images, from a
    Django app.
  prefs: []
  type: TYPE_NORMAL
