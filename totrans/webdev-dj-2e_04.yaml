- en: 4\. Introduction to Django Admin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. Django 管理简介
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter introduces you to the basic functionality of the Django admin app.
    You will start by creating superuser accounts for the Bookr app, before moving
    on to executing `ForeignKeys` in the admin app. At the end of this chapter, you
    will see how you can customize the admin app according to a unique set of preferences
    by sub-classing the `AdminSite` and `ModelAdmin` classes, to make its interface
    more intuitive and user-friendly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍 Django 管理应用的基本功能。您将首先为 Bookr 应用创建超级用户账户，然后继续在管理应用中执行 `ForeignKeys`。在本章结束时，您将看到如何通过子类化
    `AdminSite` 和 `ModelAdmin` 类来根据一组独特的偏好定制管理应用，使其界面更加直观和用户友好。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: When developing an app, there is often a need to populate it with data and then
    alter that data. We have already seen in *Chapter 2*, *Models and Migrations*,
    how this can be done on the command line using the Python `manage.py` shell. In
    *Chapter 3*, *URL Mapping, Views, and Templates*, we learned how to develop a
    web form interface to our model using Django's views and templates. But neither
    of these approaches is ideal for administering the data from the classes in `reviews/models.py`.
    Using the shell to manage data is too technical for non-programmers and building
    individual web pages would be a laborious process as it would see us repeating
    the same view logic and very similar template features for each table in the model.
    Fortunately, a solution to this problem was devised in the early days of Django
    when it was still being developed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发一个应用时，通常需要填充数据，然后修改这些数据。我们已经在 *第 2 章*，*模型和迁移* 中看到，如何使用 Python 的 `manage.py`
    命令行界面来执行这一操作。在 *第 3 章*，*URL 映射、视图和模板* 中，我们学习了如何使用 Django 的视图和模板开发一个面向模型的网页表单界面。但上述两种方法都不适用于管理
    `reviews/models.py` 中的类数据。使用命令行管理数据对于非程序员来说过于技术性，而构建单个网页将是一个费力的过程，因为它将使我们重复相同的视图逻辑和非常相似的模板功能，每个模型中的每个表都需要这样做。幸运的是，在
    Django 早期开发阶段，就为解决这个问题想出了一个解决方案。
- en: Django admin is actually written as a Django app. It offers an intuitively rendered
    web interface to give administrative access to the model data. The admin interface
    is designed to be used by the administrators of the website. It is not intended
    to be used by non-privileged users who interact with the site. In our case of
    a book review system, the general population of book reviewers will never encounter
    the admin app. They will see the app pages, like those that we built with views
    and templates in *Chapter 3*, *URL Mapping, Views, and Templates*, and will write
    their reviews on the pages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Django 管理界面实际上是一个 Django 应用。它提供了一个直观的网页界面，以便对模型数据进行管理访问。管理界面是为网站管理员设计的，并不打算供没有特权的用户使用，这些用户与网站进行交互。在我们的书评系统案例中，普通的书评者永远不会遇到管理应用。他们将看到应用页面，就像我们在
    *第 3 章*，*URL 映射、视图和模板* 中使用视图和模板构建的页面一样，并在这些页面上撰写他们的评论。
- en: 'Also, while developers put in a lot of effort to create a simple and inviting
    web interface for general users, the admin interface, being aimed at administrative
    users, maintains a utilitarian feel that typically displays the intricacies of
    the model. It may have escaped your attention, but you already have an admin app
    in your Bookr project. Look at the list of installed apps in `bookr/settings.py`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然开发人员投入了大量精力为普通用户创建一个简单且吸引人的网页界面，但针对管理用户的行政界面，仍然保持着实用主义的感觉，通常显示模型的复杂性。可能你已经注意到了，但你已经在你的
    Bookr 项目中有一个管理应用。看看 `bookr/settings.py` 中安装的应用列表：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, look at the URL patterns in `bookr/urls.py`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看看 `bookr/urls.py` 中的 URL 模式：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we put this path into our browser, we can see the link to the admin app on
    the development server is `http://127.0.0.1:8000/admin/`. Before we make use of
    it though, we need to create a superuser through the command line.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将此路径输入到我们的浏览器中，我们可以看到开发服务器上管理应用的链接是 `http://127.0.0.1:8000/admin/`。但在使用它之前，我们需要通过命令行创建一个超级用户。
- en: Creating a Superuser Account
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建超级用户账户
- en: Our Bookr application has just found a new user. Her name is Alice, and she
    wants to start adding her reviews right away. Bob, who is already using Bookr,
    has just informed us that his profile seems incomplete and needs to be updated.
    David no longer wants to use the application and wants his account to be deleted.
    For security reasons, we do not want just any user performing these tasks for
    us. That's why we need to create a **superuser** with elevated privileges. Let's
    start by doing just that.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的书评应用Bookr刚刚发现了一个新用户。她的名字是Alice，她想要立即开始添加她的评论。已经使用Bookr的Bob刚刚告诉我们，他的个人资料似乎不完整，需要更新。David不再想使用这个应用，并希望删除他的账户。出于安全考虑，我们不希望任何用户为我们执行这些任务。这就是为什么我们需要创建一个具有提升权限的
    **超级用户**。让我们先做这件事。
- en: In Django's authorization model, a superuser is one with the `Staff` attribute
    set. We will examine this later in the chapter and learn more about this authorization
    model in *Chapter 9*, *Sessions and Authentication*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django的授权模型中，超级用户是指将 `Staff` 属性设置为 `True` 的用户。我们将在本章后面探讨这一点，并在第9章 *会话和认证* 中了解更多关于这个授权模型的信息。
- en: 'We can create a superuser by using the `manage.py` script that we have explored
    in earlier chapters. Again, we need to be in the project directory when we enter
    it. We will use the `createsuperuser` subcommand by entering the following command
    in the command line (you will need to write `python` instead of `python3` if you''re
    using Windows):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用我们在前面章节中探索过的 `manage.py` 脚本来创建超级用户。同样，当我们输入它时，我们需要在项目目录中。我们将通过在命令行中输入以下命令来使用
    `createsuperuser` 子命令（如果你使用的是Windows，你需要将 `python` 替换为 `python3`）：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's go ahead and create our superuser.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建我们的超级用户。
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In this chapter, we will use email addresses that fall under the *example.com*
    domain. This follows an established convention to use this reserved domain for
    testing and documentation. You could use your own email addresses if you prefer.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用属于 *example.com* 域的电子邮件地址。这遵循了一个既定的惯例，即使用这个保留域进行测试和文档。如果你愿意，可以使用你自己的电子邮件地址。
- en: 'Exercise 4.01: Creating a Superuser Account'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.01：创建超级用户账户
- en: 'In this exercise, you will create a superuser account that lets the user log
    into the admin site. This functionality will be used in the upcoming exercises
    as well, to implement changes that only a superuser can. The following steps will
    help you complete this exercise:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将创建一个超级用户账户，允许用户登录到管理站点。这个功能将在接下来的练习中也被使用，以实现只有超级用户才能执行的改变。以下步骤将帮助你完成这个练习：
- en: 'Enter the following command to create a superuser:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令来创建超级用户：
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: On executing this command, you will be prompted to create a superuser. This
    command will prompt you for a superuser name, an optional email address, and a
    password.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令后，系统将提示你创建一个超级用户。此命令将提示你输入超级用户名、可选的电子邮件地址和密码。
- en: 'Add the username and email for the superuser as follows. Here, we are entering
    `bookradmin` (highlighted) at the prompt and pressing the *Enter* key. Similarly,
    at the next prompt, which asks you to enter your email address, you can add `bookradmin@example.com`
    (highlighted). Press the *Enter* key to continue:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式添加超级用户的用户名和电子邮件。在这里，我们在提示符下输入 `bookradmin`（高亮显示）并按 *Enter* 键。同样，在下一个提示符，要求你输入电子邮件地址时，你可以添加
    `bookradmin@example.com`（高亮显示）。按 *Enter* 键继续：
- en: '[PRE4]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next prompt in the shell is for your password. Add a strong password and
    press the *Enter* key to confirm it once again:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在shell中的下一个提示是要求你的密码。添加一个强大的密码，然后按 *Enter* 键再次确认：
- en: '[PRE5]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should see the following message on your screen:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在屏幕上看到以下信息：
- en: '[PRE6]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that the password is validated according to the following criteria:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，密码的验证是根据以下标准进行的：
- en: It cannot be among the 20,000 most common passwords.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它不能是前20,000个最常见的密码之一。
- en: It should have a minimum of eight characters.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它应该至少有八个字符。
- en: It cannot be only numerical characters.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它不能只包含数字字符。
- en: It cannot be derived from the username, first name, last name, or email address
    of the user.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它不能从用户名、名字、姓氏或电子邮件地址中派生出来。
- en: 'With this, you have created a superuser named `bookradmin` who can log in to
    the admin app. *Figure 4.1* shows how this looks in the shell:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过这种方式，你已经创建了一个名为 `bookradmin` 的超级用户，他可以登录到管理应用。*图4.1* 展示了在shell中的样子：
- en: '![Figure 4.1: Creating a superuser'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图4.1：创建超级用户'
- en: '](img/B15509_04_01.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15509_04_01.jpg]'
- en: 'Figure 4.1: Creating a superuser'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.1：创建超级用户
- en: Visit the admin app at `http://127.0.0.1:8000/admin` and log in with the superuser
    account that you have created:![ Figure 4.2 The Django administration login form
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 `http://127.0.0.1:8000/admin` 上的管理应用，并使用你创建的超级用户账户登录：![图 4.2 Django 管理登录表单
- en: '](img/B15509_04_02.jpg)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_04_02.jpg)'
- en: Figure 4.2 The Django administration login form
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 Django 管理登录表单
- en: In this exercise, you created a superuser account that we will be using for
    the rest of this chapter, to assign or remove privileges as needed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你创建了一个超级用户账户，我们将在这个章节的剩余部分使用它，根据需要分配或删除权限。
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The codes for all the exercises and activities used in this chapter can be found
    on the book's GitHub repository at [http://packt.live/3pC5CRr](http://packt.live/3pC5CRr).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有练习和活动的代码可以在本书的 GitHub 仓库中找到，网址为 [http://packt.live/3pC5CRr](http://packt.live/3pC5CRr)。
- en: CRUD Operations Using the Django Admin App
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Django 管理应用进行 CRUD 操作
- en: 'Let''s get back to the requests we got from Bob, Alice, and David. As a superuser,
    your tasks will involve creating, updating, retrieving, and deleting various user
    accounts, reviews, and title names. This set of activities is collectively termed
    CRUD. CRUD operations are central to the behavior of the admin app. It turns out
    that the admin app is already aware of the models from another Django app, `Authentication
    and Authorization` – referenced in `INSTALLED_APPS` as `''django.contrib.auth''`.
    When logging into `http://127.0.0.1:8000/admin/`, we are presented with the models
    from the authorization application, as shown in *Figure 4.3*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们从鲍勃、爱丽丝和戴维那里收到的请求。作为超级用户，你的任务将涉及创建、更新、检索和删除各种用户账户、评论和标题名称。这些活动统称为 CRUD。CRUD
    操作是管理应用行为的核心。结果是，管理应用已经知道来自另一个 Django 应用 `Authentication and Authorization` 的模型，在
    `INSTALLED_APPS` 中被引用为 `'django.contrib.auth'`。当我们登录到 `http://127.0.0.1:8000/admin/`
    时，我们看到了授权应用的模型，如图 *4.3* 所示：
- en: '![Figure 4.3: The Django administration window'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.3：Django 管理窗口'
- en: '](img/B15509_04_03.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_04_03.jpg)'
- en: 'Figure 4.3: The Django administration window'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3：Django 管理窗口
- en: When the admin app is initialized, it calls its `autodiscover()` method to detect
    whether any other installed apps contain an admin module. If so, these admin models
    are imported. In our case, it has discovered `'django.contrib.auth.admin'`. Now
    that the modules are imported and our superuser account is ready, let's start
    by working on the requests from Bob, Alice, and David.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当管理应用初始化时，它会调用其 `autodiscover()` 方法来检测是否有其他已安装的应用包含管理模块。如果有，这些管理模型将被导入。在我们的例子中，它发现了
    `'django.contrib.auth.admin'`。现在模块已导入，我们的超级用户账户已准备就绪，让我们先从鲍勃、爱丽丝和戴维的请求开始工作。
- en: Create
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建
- en: Before Alice starts writing her reviews, we need to create an account for her
    through the admin app. Once that is done, we can then look at the levels of administrative
    access that we can assign to her. To `+ Add` link next to `Users` (refer to *Figure
    4.3*), and fill out the form, as shown in *Figure 4.4*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在爱丽丝开始撰写她的评论之前，我们需要通过管理应用为她创建一个账户。一旦完成，我们就可以查看我们可以分配给她的管理访问级别。点击 `用户` 旁边的 `+
    添加` 链接（参见图 *4.3*），并填写表单，如图 *4.4* 所示。
- en: Note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We don't want any random user to have access to the Bookr users' accounts. Therefore,
    it is imperative that we choose strong, secure passwords.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望任何随机用户都能访问 Bookr 用户的账户。因此，选择强大、安全的密码至关重要。
- en: '![Figure 4.4: The Add user page'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.4：添加用户页面'
- en: '](img/B15509_04_04.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_04_04.jpg)'
- en: 'Figure 4.4: The Add user page'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4：添加用户页面
- en: 'There are three buttons at the bottom of the form:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 表单底部有三个按钮：
- en: '`Save and add another` creates the user and renders the same `Add user` page
    again, with blank fields.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`保存并添加另一个` 创建用户并再次渲染相同的 `添加用户` 页面，字段为空。'
- en: '`Save and continue editing` creates the user and loads the `Change user` page.
    The `Change user` page lets you add additional information that wasn''t present
    on the `Add user` page, such as `First name`, `Last name`, and more (see *Figure
    4.5*). Note that `Password` does not have an editable field on the form. Instead,
    it shows information about the hashing technique that it is stored with, in addition
    to a link to a separate *change password* form.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`保存并继续编辑` 创建用户并加载 `更改用户` 页面。`更改用户` 页面允许你添加在 `添加用户` 页面上未出现的信息，例如 `名字`、`姓氏` 等（见图
    *4.5*）。请注意，`密码` 在表单中没有可编辑字段。相反，它显示了存储时使用的哈希技术信息，以及一个链接到单独的 *更改密码* 表单。'
- en: '`SAVE` creates the user and lets the user navigate to the `Select user to change`
    list page, as depicted in *Figure 4.6*.![Figure 4.5: The Change user page presented
    after clicking Save and continue editing'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`保存` 创建用户并允许用户导航到 `选择用户以更改` 列表页面，如图 4.6 所示。![图 4.5：点击保存并继续编辑后显示的更改用户页面]'
- en: '](img/B15509_04_05.jpg)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B15509_04_05.jpg](img/B15509_04_05.jpg)'
- en: 'Figure 4.5: The Change user page presented after clicking Save and continue
    editing'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5：点击保存并继续编辑后显示的更改用户页面
- en: Retrieve
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检索
- en: 'The administrative tasks need to be divided among some users, and for this,
    the admin (the person with the superuser account) would like to view those users
    whose email addresses end with *n@example.com* and assign the tasks to these users.
    This is where the `SAVE` button on the `Add user` page (refer to *Figure 4.4*),
    we are taken to the `Select user to change` list page (as shown in *Figure 4.6*),
    which carries out the `Create` form is also reachable by clicking on the `ADD
    USER` button on the `Select user to change` list page. So, after we have added
    a few more users, the change list will look something like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 管理任务需要分配给一些用户，为此，管理员（拥有超级用户账户的人）希望查看电子邮件地址以 *n@example.com* 结尾的用户并将任务分配给这些用户。这就是在
    `添加用户` 页面上的 `保存` 按钮（参见图 4.4*），我们将被带到 `选择用户以更改` 列表页面（如图 4.6 所示），执行 `创建` 表单也可以通过点击
    `选择用户以更改` 列表页面上的 `添加用户` 按钮来访问。因此，在我们添加了更多用户之后，更改列表将看起来像这样：
- en: '![Figure 4.6: The Select user to change page'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.6：选择用户以更改页面]'
- en: '](img/B15509_04_06.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15509_04_06.jpg](img/B15509_04_06.jpg)'
- en: 'Figure 4.6: The Select user to change page'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.6：选择用户以更改页面]'
- en: 'At the top of the form is a `Search` bar that searches the contents of the
    username, email address, and first and last names of users. On the right-hand
    side is a `FILTER` panel that narrows down the selection based on the values of
    `staff status`, `superuser status`, and `active`. In *Figure 4.7*, we will see
    what happens when we search the string `n@example.com` and see the results. This
    will return only the names of the users whose email addresses consist of a username
    ending in *n* and a domain starting with *example.com*. We will only see three
    users with email addresses matching this requirement – `bookradmin@example.com`,
    `carol.brown@example.com`, and `david.green@example.com`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 表单顶部有一个 `搜索` 栏，用于搜索用户的用户名、电子邮件地址以及名和姓。右侧是一个 `筛选` 面板，根据 `员工状态`、`超级用户状态` 和 `活跃状态`
    的值来缩小选择范围。在 *图 4.7* 中，我们将看到当我们搜索字符串 `n@example.com` 并查看结果时会发生什么。这将只返回电子邮件地址以 *n*
    结尾且域名以 *example.com* 开头的用户名称。我们将只看到三个符合此要求的电子邮件地址的用户 – `bookradmin@example.com`、`carol.brown@example.com`
    和 `david.green@example.com`：
- en: '![Figure 4.7: Searching for users by a portion of their email address'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.7：通过电子邮件地址的一部分搜索用户]'
- en: '](img/B15509_04_07.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15509_04_07.jpg](img/B15509_04_07.jpg)'
- en: 'Figure 4.7: Searching for users by a portion of their email address'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.7：通过电子邮件地址的一部分搜索用户]'
- en: Update
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新
- en: 'Remember that Bob wanted his profile to be updated. Let''s `bob` username link
    in the `Select user to change` list:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 Bob 想要更新他的个人资料。让我们在 `选择用户以更改` 列表中的 `bob` 用户名链接：
- en: '![Figure 4.8: Selecting bob from the Select user to change list'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.8：从“选择用户以更改”列表中选择 bob]'
- en: '](img/B15509_04_08.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15509_04_08.jpg](img/B15509_04_08.jpg)'
- en: 'Figure 4.8: Selecting bob from the Select user to change list'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.8：从选择用户以更改列表中选择 bob]'
- en: 'This will take us back to the `Change user` form where the values for `First
    name`, `Last name`, and `Email address` can be entered:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带我们回到 `更改用户` 表单，可以在其中输入 `名`、`姓` 和 `电子邮件地址` 的值：
- en: '![Figure 4.9: Adding personal info'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.9：添加个人信息]'
- en: '](img/B15509_04_09.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15509_04_09.jpg](img/B15509_04_09.jpg)'
- en: 'Figure 4.9: Adding personal info'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.9：添加个人信息]'
- en: As can be seen from *Figure 4.9*, we are adding personal information about Bob
    here – his name, surname, and email address, specifically.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 4.9* 所示，我们在这里添加关于 Bob 的个人信息 – 他的名字、姓氏和电子邮件地址，具体而言。
- en: 'Another type of update operation is "soft deleting." The `Active` Boolean property
    allows us to deactivate a user rather than deleting the entire record and losing
    all the data that has dependencies on the account. This practice of using a Boolean
    flag to denote a record as inactive or removed (and subsequently filtering these
    flagged records out of queries) is referred to as a `Staff status` or `Superuser
    status` by ticking the respective checkboxes for those:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种更新操作是“软删除”。`Active` 布尔属性允许我们停用用户，而不是删除整个记录并丢失所有依赖于该账户的数据。这种使用布尔标志来表示记录为非活动或已删除（并随后从查询中过滤掉这些标记的记录）的做法被称为通过勾选相应的复选框来表示的`Staff
    状态`或`Superuser 状态`：
- en: '![Figure 4.10: Active, Staff status, and Superuser status Booleans'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.10：Active、Staff 状态和 Superuser 状态布尔值'
- en: '](img/B15509_04_10.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_04_10.jpg)'
- en: 'Figure 4.10: Active, Staff status, and Superuser status Booleans'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10：Active、Staff 状态和 Superuser 状态布尔值
- en: Delete
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除
- en: 'David no longer wants to use the Bookr application and has requested that we
    delete his account. The auth admin caters to this too. Select a user or user records
    on the `Select user to change` list page and choose the `Delete selected users`
    option from the `Action` dropdown. Then hit the `Go` button (*Figure 4.11*):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: David 不再想使用 Bookr 应用程序，并要求我们删除他的账户。auth admin 也支持这一点。在“选择要更改的用户”列表页面上选择用户或用户记录，并从“操作”下拉菜单中选择“删除选定的用户”选项。然后点击“Go”按钮（*图
    4.11*）：
- en: '![Figure 4.11: Deleting from the Select user to change list page'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.11：从选择要更改的用户列表页面上删除'
- en: '](img/B15509_04_11.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_04_11.jpg)'
- en: 'Figure 4.11: Deleting from the Select user to change list page'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11：从选择要更改的用户列表页面上删除
- en: 'You will be presented with a confirmation screen and taken back to the `Select
    user to change` list once you have deleted the object:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 删除对象后，您将看到一个确认屏幕，并被带回到“选择要更改的用户”列表：
- en: '![Figure 4.12: User deletion confirmation'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.12：用户删除确认'
- en: '](img/B15509_04_12.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_04_12.jpg)'
- en: 'Figure 4.12: User deletion confirmation'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12：用户删除确认
- en: 'You will see the following message once the user is deleted:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 用户被删除后，您将看到以下消息：
- en: '![Figure 4.13: User deletion notification'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.13：用户删除通知'
- en: '](img/B15509_04_13.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_04_13.jpg)'
- en: 'Figure 4.13: User deletion notification'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13：用户删除通知
- en: After that confirmation, you will find that David's account no longer exists.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认之后，你会发现 David 的账户已不再存在。
- en: So far, we have learned how we can add a new user, get the details of another
    user, make changes to the data for a user, and delete a user. These skills helped
    us cater to Alice, Bob, and David's requests. As the number of users of our app
    grows, managing requests from hundreds of users will eventually become quite difficult.
    One way around this problem would be to delegate some of the administrative responsibilities
    to a selected set of users. We'll learn how to do that in the section that follows.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何添加新用户、获取另一个用户的详细信息、更改用户的资料数据以及删除用户。这些技能帮助我们满足了 Alice、Bob 和 David
    的请求。随着我们应用用户数量的增长，管理来自数百名用户的请求最终将变得相当困难。解决这个问题的方法之一是将一些管理职责委托给一组选定的用户。我们将在接下来的部分中学习如何做到这一点。
- en: Users and Groups
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户和组
- en: Django's authentication model consists of users, groups, and permissions. Users
    can belong to many groups and this is a way of categorizing users. It also streamlines
    the implementation of permissions by allowing permissions to be assigned to collections
    of users as well as individuals.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Django 的认证模型由用户、组和权限组成。用户可以属于多个组，这是对用户进行分类的一种方式。它还通过允许将权限分配给用户集合以及个人来简化权限的实现。
- en: In *Exercise 4.01*, *Creating a Superuser Account*, we saw how we could cater
    to Alice, David, and Bob's requests to make modifications to their profiles. It
    was quite easy to do and our application seems well-equipped to handle their requests.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *练习 4.01*，*创建 Superuser 账户* 中，我们看到了如何满足 Alice、David 和 Bob 修改其个人资料的需求。这做起来相当容易，我们的应用程序似乎已经准备好处理他们的请求。
- en: What will happen when the number of users grows? Will the admin user be able
    to manage 100 or 150 users at once? As you can imagine, this can be quite a complicated
    task. To overcome this, we can give elevated permissions to a certain set of users
    and they can help ease the admin's tasks. And that's where groups come in handy.
    Though we'll learn more about users, groups, and permissions in *Chapter 9*, *Sessions
    and Authentication*, we can start understanding groups and their functionality
    by creating a `Help Desk user group` that contains accounts having access to the
    admin interface but lacking many powerful features, such as the ability to add,
    edit, or delete groups or to add or delete users.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.02: Adding and Modifying Users and Groups through the Admin app'
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will grant a certain level of administrative access to
    one of our Bookr users, Carol. First, we will define the level of access for a
    group, and then we will add Carol to the group. This will allow Carol to update
    user profiles and check user logs. The following steps will help you implement
    this exercise:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Visit the admin interface at `http://127.0.0.1:8000/admin/` and log in as `bookradmin`
    using the account set up with the superuser command.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the admin interface, follow the links to `Home` › `Authentication and Authorization`
    › `Groups`:![Figure 4.14: The Groups and Users options on the Authentication AND
    Authorization page'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_14.jpg)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.14: The Groups and Users options on the Authentication AND Authorization
    page'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use `ADD GROUP +` in the top right-hand corner to add a new group:![Figure
    4.15: Adding a new group'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_15.jpg)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.15: Adding a new group'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Name the group `Help Desk User` and give it the following permissions, as shown
    in *Figure 4.16*:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Can view log entry`'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Can view permission`'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Can change user`'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Can view user`'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.16: Selecting the permissions'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_04_16.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.16: Selecting the permissions'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This can be done by selecting the permissions from `Available permissions`
    and clicking the right arrow in the middle so that they appear under `Chosen permissions`.
    Note that to add multiple permissions at a time, you can hold down the *Ctrl*
    key (or *Command* for Mac) to select more than one:'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.17: Adding selected permissions into Chosen permissions'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_04_17.jpg)'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.17: Adding selected permissions into Chosen permissions'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you click the `SAVE` button, you will see a confirmation message, stating
    that the group `Help Desk User` was added successfully:'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.18: Message confirming that the group Help Desk User was added'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_04_18.jpg)'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.18: Message confirming that the group Help Desk User was added'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, navigate to `Home` › `Authentication and Authorization` › `Users` and
    click the link of the user with the first name `carol`:![Figure 4.19: Clicking
    on the username carol'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_19.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.19: Clicking on the username carol'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Scroll down to the `Permissions` fields set and select the `Staff status` checkbox.
    This is required for Carol to be able to log in to the admin app:![Figure 4.20:
    Clicking the Staff status checkbox'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到“权限”字段设置，并选择“员工状态”复选框。这是Carol能够登录到管理应用所必需的：![图4.20：点击员工状态复选框
- en: '](img/B15509_04_20.jpg)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_04_20.jpg)'
- en: 'Figure 4.20: Clicking the Staff status checkbox'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.20：点击员工状态复选框
- en: 'Add Carol to the `Help Desk User` group that we created in the previous steps
    by selecting it from the `Available groups` selection box (refer *Figure 4.20*)
    and clicking the right arrow to shift it into her list of `Chosen groups` (as
    shown in *Figure 4.21*). Note that unless you do this, Carol won''t be able to
    log in to the admin interface using her credentials:![Figure 4.21: Shifting the
    Help Desk User group into the list of Chosen groups for Carol'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从“可用组”选择框中选择它（参见图4.20）并点击右箭头将其移至她的“选择组”列表中（如图4.21所示），将Carol添加到我们在上一步骤中创建的“帮助台用户”组中。请注意，除非你这样做，否则Carol将无法使用她的凭据登录到管理界面：![图4.21：将帮助台用户组移至Carol选择的组列表中
- en: '](img/B15509_04_21.jpg)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_04_21.jpg)'
- en: 'Figure 4.21: Shifting the Help Desk User group into the list of Chosen groups
    for Carol'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.21：将帮助台用户组移至Carol选择的组列表中
- en: 'Let''s test whether what we''ve done up till now has yielded the right outcome.
    To do this, log out of the admin site and log in again as `carol`. Upon logging
    out, you should see the following on your screen:![Figure 4.22: Logout screen'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们测试一下到目前为止我们所做的是否得到了正确的结果。为此，从管理员站点注销并再次以`carol`身份登录。注销后，你应该在屏幕上看到以下内容：![图4.22：注销屏幕
- en: '](img/B15509_04_22.jpg)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_04_22.jpg)'
- en: 'Figure 4.22: Logout screen'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.22：注销屏幕
- en: Note
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't recall the password that you initially gave her, you can change
    the password at the command line by typing `python3 manage.py changepassword carol`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记不起你最初给她设置的密码，你可以在命令行中通过输入`python3 manage.py changepassword carol`来更改密码。
- en: 'Upon successful login, on the admin dashboard, you can see that there is no
    link to `Groups`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 登录成功后，在管理员仪表板上，你可以看到没有指向“组”的链接：
- en: '![Figure 4.23: Admin dashboard'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.23：管理员仪表板'
- en: '](img/B15509_04_23.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_04_23.jpg)'
- en: 'Figure 4.23: Admin dashboard'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.23：管理员仪表板
- en: As we did not assign any group permissions, not even `auth | group | Can view
    group`, to the `Help Desk User` group, when Carol logs in, the `Groups` admin
    interface is not available to her. Similarly, navigate to `Home › Authentication
    and Authorization › Users`. Clicking a user link, you will see that there are
    no options to edit or delete the user. This is because of the permissions that
    were granted to the Help Desk User group, of which Carol is a member. The members
    of the group can view and edit users but cannot add or delete any user.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有将任何组权限，甚至“auth | group | Can view group”，分配给“帮助台用户”组，当Carol登录时，她无法访问“组”管理界面。同样，导航到“首页
    › 认证和授权 › 用户”。点击用户链接，你会看到没有编辑或删除用户的选项。这是因为授予了帮助台用户组的权限，而Carol是该组成员。该组成员可以查看和编辑用户，但不能添加或删除任何用户。
- en: In this exercise, we learned how we can grant a certain amount of administrative
    privileges to users of our Django app.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们学习了如何授予我们Django应用用户一定量的管理权限。
- en: Registering the Reviews Model
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册评论模型
- en: Let's say that Carol is tasked with improving the Reviews section in Bookr;
    that is, only the most relevant and comprehensive reviews should be shown, and
    duplicate or spammy entries should be removed. For this, she will need access
    to the `reviews` model. As we have seen above with our investigation of groups
    and users, the admin app already contains admin pages for the models from the
    authentication and authorization app, but it does not yet reference the models
    in our Reviews app.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 假设Carol的任务是改进Bookr中的评论部分；也就是说，只有最相关和最全面的评论应该显示，而重复或垃圾信息应该被删除。为此，她将需要访问“reviews”模型。正如我们通过调查组和用户所看到的那样，管理员应用已经包含了来自认证和授权应用的模型的管理页面，但它还没有引用我们的Reviews应用中的模型。
- en: To make the admin app aware of the models, we need to explicitly register them
    with the admin app. Fortunately, we don't need to modify the admin app's code
    to do so as we can instead import the admin app into our project and use its API
    to register our models. This has already been done in the authentication and authorization
    app, so let's try it with our Reviews app. Our aim is to be able to use the admin
    app to edit the data in our `reviews` model.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让管理应用知道我们的模型，我们需要明确地将它们注册到管理应用中。幸运的是，我们不需要修改管理应用的代码来做这件事，因为我们可以将管理应用导入到我们的项目中，并使用它的API来注册我们的模型。这已经在认证和授权应用中完成了，所以让我们用我们的“评论”应用试一试。我们的目标是能够使用管理应用来编辑我们的`reviews`模型中的数据。
- en: 'Take a look at the `reviews/admin.py` file. It is a placeholder file that was
    generated with the `startapp` subcommand that we used in *Chapter 1*, *Introduction
    to Django*, and currently contains these lines:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 查看一下`reviews/admin.py`文件。这是一个占位符文件，它是通过我们在*第1章*，*Django简介*中使用的`startapp`子命令生成的，目前包含以下行：
- en: '[PRE7]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we can try to expand this. To make the admin app aware of our models, we
    can modify the `reviews/admin.py` file and import the models. Then we could register
    the models with the `AdminSite` object, `admin.site`. The `AdminSite` object contains
    the instance of the Django admin application (later, we will learn how to subclass
    this `AdminSite` and override many of its properties). Then, our `reviews/admin.py`
    will look as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以尝试扩展这个功能。为了让管理应用知道我们的模型，我们可以修改`reviews/admin.py`文件并导入模型。然后我们可以使用`AdminSite`对象，`admin.site`，来注册模型。`AdminSite`对象包含Django管理应用的实例（稍后我们将学习如何子类化这个`AdminSite`并覆盖其许多属性）。然后，我们的`reviews/admin.py`将看起来如下：
- en: '[PRE8]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `admin.site.register` method makes the models available to the admin app
    by adding it to a registry of classes contained in `admin.site._registry`. If
    we chose not to make a model accessible through the admin interface, we would
    simply not register it. When you reload `http://127.0.0.1:8000/admin/` in your
    browser, you will see the following on the admin app landing page. Note the change
    in the appearance of the admin page after the `reviews` model has been imported:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`admin.site.register`方法通过将其添加到`admin.site._registry`中包含的类注册表中，使模型对管理应用可用。如果我们选择不通过管理界面使模型可访问，我们只需不注册它即可。当你刷新浏览器中的`http://127.0.0.1:8000/admin/`时，你将在管理应用首页看到以下内容。注意在导入`reviews`模型后管理页面的外观变化：'
- en: '![Figure 4.24: Admin app landing page'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.24：管理应用首页](img/B15509_04_24.jpg)'
- en: '](img/B15509_04_24.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_04_24.jpg)'
- en: 'Figure 4.24: Admin app landing page'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.24：管理应用首页
- en: Change Lists
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更列表
- en: We now have change lists populated for our models. If we click the `Publishers`
    link, we will be taken to `http://127.0.0.1:8000/admin/reviews/publisher` and
    see a change list containing links to the publishers. These links are designated
    by the `id` field of the `Publisher` objects.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在为我们的模型创建了变更列表。如果我们点击“发布者”链接，我们将被带到`http://127.0.0.1:8000/admin/reviews/publisher`并看到包含指向发布者链接的变更列表。这些链接由“发布者”对象的`id`字段指定。
- en: 'If your database has been populated with the script in *Chapter 3*, *URL Mapping,
    Views, and Templates*, you will see a list with seven publishers that looks like
    *Figure 4.25*:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的数据库已经通过*第3章*中的脚本填充，你将看到一个包含七个发布者的列表，看起来像*图4.25*：
- en: Note
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Depending on the state of your database and based on the activities you have
    completed, the object IDs, URLs, and links in these examples may be numbered differently
    from those listed here.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的数据库状态和已完成的活动，这些示例中的对象ID、URL和链接可能与这里列出的不同。
- en: '![Figure 4.25: Select publisher to change list'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.25：选择要更改的发布者列表](img/B15509_04_25.jpg)'
- en: '](img/B15509_04_25.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_04_25.jpg)'
- en: 'Figure 4.25: Select publisher to change list'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.25：选择要更改的发布者列表
- en: The Publisher Change Page
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布者变更页面
- en: 'The publisher change page at `http://127.0.0.1:8000/admin/reviews/publisher/1`
    contains what we might expect (see *Figure 4.26*). There is a form for editing
    the publisher''s details. These details have been derived from the `reviews.models.Publisher`
    class:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在`http://127.0.0.1:8000/admin/reviews/publisher/1`的发布者变更页面包含我们可能预期的内容（见*图4.26*）。这里有一个用于编辑发布者详情的表单。这些详情是从`reviews.models.Publisher`类派生出来的：
- en: '![Figure 4.26: Publisher change page'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.26：发布者变更页面](img/B15509_04_26.jpg)'
- en: '](img/B15509_04_26.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_04_26.jpg)'
- en: 'Figure 4.26: Publisher change page'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.26：发布者变更页面
- en: 'If we had clicked the `ADD PUBLISHER` button, the admin app would have returned
    a similar form for adding a publisher. The beauty of the admin app is that it
    gives us all of this CRUD functionality with just one line of coding – `admin.site.register(Publisher)`
    – using the definition of the `reviews.models.Publisher` attributes as a schema
    for the page content:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The publisher `Name` field is constrained to 50 characters as specified in the
    model. The help text that appears in gray below each field is derived from the
    `help_text` attributes specified on the model. We can see that `models.CharField`,
    `models.URLField`, and `models.EmailField` are rendered in HTML as input elements
    of type `text`, `url`, and `email` respectively.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'The fields in the form come with validation where appropriate. Unless model
    fields are set to `blank=True` or `null=True`, the form will throw an error if
    the field is left blank, as is the case for the `Publisher.name` field. Similarly,
    as `Publisher.website` and `Publisher.email` are respectively defined as instances
    of `models.URLField` and `models.EmailField`, they are validated accordingly.
    In *Figure 4.27*, we can see validation of `Name` as a required field, validation
    of `Website` as a URL, and validation of `Email` as an email address:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.27: Field validation'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_27.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.27: Field validation'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'It is useful to examine how the admin app renders elements of the models to
    understand how it functions. In your browser, right-click `View Page Source` and
    examine the HTML that has been rendered for this form. You will see a browser
    tab displaying something like this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The form has an ID of `publisher_form` and it contains a fieldset with HTML
    elements corresponding to the data structure of the `Publisher` model in `reviews/models.py`,
    shown as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note that for the name, the input field is rendered like this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It is a required field, and it has a type of `text` and a `maxlength` of 50,
    as defined by the `max_length` parameter in the model definition:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Similarly, we can see the website and email being defined in the model as `URLField`
    and `EmailField` are rendered in HTML as input elements of type `url` and `email`
    respectively:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We have learned that this Django admin app derives sensible HTML representations
    of Django models based on the model definitions that we have provided.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: The Book Change Page
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similarly, there is a change page that can be reached by selecting `Books`
    from the `Site administration` page and then selecting a specific book in the
    change list:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.28: Selecting Books from the Site administration page'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_28.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.28: Selecting Books from the Site administration page'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking `Books` as shown in the preceding screenshot, you will see the
    following on your screen:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.29: The book change page'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_29.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.29: The book change page'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'In this instance, selecting the book *Architects of Intelligence* will take
    us to the URL `http://127.0.0.1:8000/admin/reviews/book/3/change/`. In the previous
    example, all the model fields were rendered as simple HTML text widgets. The rendering
    of some other subclasses of `django.db.models.Field` used in `models.Book` are
    worthy of closer examination:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.30: The Change book page'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_30.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.30: The Change book page'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, `publication_date` is defined using `models.DateField`. It is rendered
    using a date selection widget. The visual representation of the widgets will vary
    amongst operating systems and choice of browser:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.31: Date selection widget'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_31.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.31: Date selection widget'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: 'As `Publisher` is defined as a foreign key relation, it is rendered by a `Publisher`
    dropdown with a list of `Publisher` objects:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.32: Publisher dropdown'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_32.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.32: Publisher dropdown'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'This brings us to how the admin app handles deletion. The admin app takes its
    cue from the models'' foreign key constraints when determining how to implement
    deletion functionality. In the `BookContributor` model, `Contributor` is defined
    as a foreign key. The code in `reviews/models.py` looks as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: By setting `on_delete=CASCADE` on a foreign key, the model is specifying the
    database behavior required when a record is deleted; the deletion is cascaded
    to other objects that are referenced by the foreign key.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.03: Foreign Keys and Deletion Behavior in the Admin App'
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present, all `ForeignKey` relations in the `reviews` models are defined
    with an `on_delete=CASCADE` behavior. For instance, think of a case wherein an
    admin deletes one of the publishers. This would delete all the books that are
    associated with the publisher. We do not want that to happen, and that is precisely
    the behavior that we will be changing in this exercise:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Visit the `Contributors` change list at `http://127.0.0.1:8000/admin/reviews/contributor/`
    and select a contributor to delete. Make sure that the contributor is the author
    of a book.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the `Delete` button, but don''t click `Yes, I''m sure` on the confirmation
    dialog. You will see a message like the one in *Figure 4.33*:![Figure 4.33: Cascading
    delete confirmation dialog'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_33.jpg)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.33: Cascading delete confirmation dialog'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In accordance with the `on_delete=CASCADE` argument to the foreign key, we are
    warned that deleting this Contributor object will have a cascading effect on a
    `BookContributor` object.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `reviews/models.py` file, modify the `Contributor` attribute of `BookContributor`
    to the following and save the file:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, try deleting the `Contributor` object again. You will see a message similar
    to the one in *Figure 4.34*:![Figure 4.34: Foreign key protection error'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_34.jpg)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.34: Foreign key protection error'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Because the `on_delete` argument is `PROTECT`, our attempt to delete the object
    with dependencies will throw an error. If we used this approach in our model,
    we would need to delete objects in the `ForeignKey` relation before we deleted
    the original object. In this case, it would mean deleting the `BookContributor`
    object before deleting the `Contributor` object.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we have learned about how the admin app handles `ForeignKey` relations,
    let''s revert the `ForeignKey` definition in the `BookContributor` class to this:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We have examined how the admin app's behavior adapts to the `ForeignKey` constraints
    that are expressed in model definitions. If the `on_delete` behavior is set to
    `models.PROTECT`, the admin app returns an error explaining why a protected object
    is blocking the deletion. This functionality can come in handy while building
    real-world apps, as there is often a chance of a manual error inadvertently leading
    to the deletion of important records. In the next section, we will look at how
    we can customize our admin app interface for a smoother user experience.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the Admin Interface
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When first developing an application, the convenience of the default admin interface
    is excellent for building a rapid prototype of the app. Indeed, for many simpler
    applications or projects that require minimal data maintenance, this default admin
    interface may be entirely adequate. However, as the application matures to the
    point of release, the admin interface will generally need to be customized to
    facilitate more intuitive use and to robustly control data, subject to user permissions.
    You might want to retain certain aspects of the default admin interface, and at
    the same time, make some tweaks to certain features to better suit your purposes.
    For example, you would want the publisher list to show the complete names of the
    publishing houses, instead of "`Publisher(1)`, `Publisher(2)`…" and so on. In
    addition to the aesthetic appeal, this makes it easier to use and navigate through
    the app.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Site-Wide Django Admin Customizations
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have seen a page titled `Log in | Django site admin` containing a `Django
    Administration` form. However, an administrative user of the Bookr application
    may be somewhat perplexed by all this Django jargon, and it would be very confusing
    and a recipe for error if they had to deal with multiple Django apps that all
    had identical admin apps. As a developer of an intuitive and user-friendly application,
    you would want to customize this. Global properties like these are specified as
    attributes of the `AdminSite` object. The following table details some of the
    simplest customizations to improve the usability of your app''s admin interface:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.35: Important AdminSite attributes'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_35.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.35: Important AdminSite attributes'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Examining the AdminSite object from the Python Shell
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a deeper look at the `AdminSite` class. We have already encountered
    an object of class `AdminSite`. It is the `admin.site` object that we used in
    the previous section, *Registering the Reviews Model*. If the development server
    is not running, start it now with the `runserver` subcommand, as follows (use
    `python` instead of `python3` for Windows):'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can examine the `admin.site` object by importing the admin app in the Django
    shell, using the `manage.py` script again:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can interactively examine the default values of `site_title`, `site_header`,
    and `index_title` and see that they match the expected values of `''Django site
    admin''`, `''Django administration''`, and `''Site administration''` that we have
    already observed on the rendered web pages of the Django admin app:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `AdminSite` class also specifies which forms and views are used to render
    the admin interface and determine its global behavior.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Subclassing AdminSite
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can make some modifications to the `reviews/admin.py` file. Instead of importing
    the `django.contrib.admin` module and using its site object, we will import `AdminSite`,
    subclass it, and instantiate our customized `admin_site` object. Consider the
    following code snippet. Here, `BookrAdminSite` is a subclass of `AdminSite` that
    contains custom values for `site_title`, `site_header`, and `index_title`; `admin_site`
    is an instance of `BookrAdminSite`; and we can use this instead of the default
    `admin.site` object, to register our models. The `reviews/admin.py` file will
    look as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As we have now created our own `admin_site` object that overrides the behavior
    of the `admin.site` object, we need to remove the existing references in our code
    to the `admin.site` object. In `bookr/urls.py`, we need to point admin to the
    new `admin_site` object and update our URL patterns. Otherwise, we would still
    be using the default admin site and our customizations would be ignored. The change
    will look as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This produces the expected results on the login screen:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.36: Customizing the login screen'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_36.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.36: Customizing the login screen'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'However, now there is a problem; that is, we have lost the interface for auth
    objects. Previously, the admin app was discovering the models registered in `reviews/admin.py`
    and in `django.contrib.auth.admin` through the auto-discovery process, but now
    we have overridden this behavior by creating a new `AdminSite`:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.37: Customized AdminSite is missing Authentication and Authorization'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_37.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.37: Customized AdminSite is missing Authentication and Authorization'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'We could go down the path of referencing both `AdminSite` objects to URL patterns
    in `bookr/urls.py`, but this approach would mean that we would end up with two
    separate admin apps for authentication and reviews. So, the URL `http://127.0.0.1:8000/admin`
    will take you to the original admin app derived from the `admin.site` object,
    while `http://127.0.0.1:8000/bookradmin` will take you to our `BookrAdminSite`
    `admin_site`. This is not what we want to do, as we are still left with the admin
    app without the customizations that we added when we sub-classed `BookrAdminSite`:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This has been a clumsy problem with the Django admin interface that has led
    to a lot of ad hoc solutions in earlier versions. Since Django 2.1 came out, there
    is a simple way of integrating a customized interface for the admin app without
    breaking auto-discovery or any of its other default features. As `BookrAdminSite`
    is project-specific, the code does not really belong under our `reviews` folder.
    We should move `BookrAdminSite` to a new file called `admin.py` at the top level
    of the `Bookr` project directory:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The URL settings path in `bookr/urls.py` changes to `path(''admin/'', admin.site.urls)`
    and we define our `ReviewsAdminConfig`. The `reviews/apps.py` file will contain
    these additional lines:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Replace `django.contrib.admin` with `reviews.apps.ReviewsAdminConfig`, so that
    `INSTALLED_APPS` in the `bookr/settings.py` file will look as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With the `ReviewsAdminConfig` specification of `default_site`, we no longer
    need to replace references to `admin.site` with a custom `AdminSite` object, `admin_site`.
    We can replace those `admin_site` calls with the `admin.site` calls that we had
    originally. Now, `reviews/admin.py` reverts to the following:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: There are other aspects of `AdminSite` that we can customize, but we will revisit
    these in *Chapter 9*, *Sessions and Authentication* once we have a fuller understanding
    of Django's templates and forms.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 4.01: Customizing the SiteAdmin'
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have learned how to modify attributes of the `AdminSite` object in a Django
    project. This activity will challenge you to use these skills to customize a new
    project and override its site title, site header, and index header. Also, you
    will replace the logout message by creating a project-specific template and setting
    it in our custom `SiteAdmin` object. You are developing a Django project that
    implements a message board, called *Comment8or*. *Comment8or* is geared toward
    a technical demographic, so you need to make the phraseology succinct and abbreviated:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: The *Comment8or* admin site will be referred to as `c8admin`. This will appear
    on the site header and index title.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the title header, it will say `c8 site admin`.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default Django admin logout message is `Thanks for spending some quality
    time with the Web site today.` In Comment8or, it will say `Bye from c8admin.`
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These are the steps that you need to follow to complete this activity:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Following the process that you learned in *Chapter 1*, *Introduction to Django*,
    create a new Django project called `comment8or`, an app called `messageboard`,
    and run the migrations. Create a superuser called `c8admin`.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Django source code, there is a template for the logout page located in
    `django/contrib/admin/templates/registration/logged_out.html`.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a copy of it in your project's directory under `comment8or/templates/comment8or`.
    Modify the message in the template following the requirements.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the project, create an `admin.py` file that implements a custom `SiteAdmin`
    object. Set the appropriate values for the attributes `index_title`, `title_header`,
    `site_header`, and `logout_template`, based on the requirements.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a custom `AdminConfig` subclass to `messageboard/apps.py`.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the admin app with the custom `AdminConfig` subclass in `comment8or/settings.py`.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the `TEMPLATES` setting so that the project's template is discoverable.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the project is first created, the login, app index, and logout pages will
    look as follows:'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.38: Login page for the project'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_04_38.jpg)'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.38: Login page for the project'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.39: App index page for the project'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_39.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.39: App index page for the project'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.40: Logout page for the project'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_40.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.40: Logout page for the project'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have completed this activity, the login, app index, and logout pages
    will appear with the following customizations:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.41: Login page after customization'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_41.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.41: Login page after customization'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.42: App index page after customization'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_42.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.42: App index page after customization'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.43: Logout page after customization'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_43.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.43: Logout page after customization'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully customized the admin app by sub-classing `AdminSite`.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found at [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the ModelAdmin Classes
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we've learned how a sub-classed `AdminSite` can be used to customize
    the global appearance of the admin app, we will look at how to customize the admin
    app's interface to individual models. Owing to the admin interface being generated
    automatically from the models' structure, it has an overly generic appearance
    and needs to be customized for the sake of aesthetics and usability. Click one
    of the `Books` links in the admin app and compare it to the `Users` link. Both
    links take you to change list pages. These are the pages that a Bookr administrator
    visits when they want to add new books or add or alter the privileges of a user.
    As explained above, a change list page presents a list of model objects with the
    option of selecting a group of them for bulk deletion (or other bulk activity),
    examining an individual object with a view to editing it, or adding a new object.
    Notice the difference between the two change list pages with a view to making
    our vanilla `Books` page as fully featured as the `Users` page.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot from the `Authentication and Authorization` app contains
    useful features such as a search bar, sortable column headers for important user
    fields, and a result filter:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.44: The Users change list contains customized ModelAdmin features'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_44.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.44: The Users change list contains customized ModelAdmin features'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: The List Display Fields
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the `Users` change list page, you will see the following:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: There is a list of user objects presented, summarized by their `USERNAME`, `EMAIL
    ADDRESS`, `FIRST NAME`, `LAST NAME`, and `STAFF STATUS` attributes.
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These individual attributes are sortable. The sorting order can be changed by
    clicking the headers.
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a search bar at the top of the page.
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the right-hand column, there is a selection filter that allows the selection
    of several user fields, including some not appearing in the list display.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, the behavior for the `Books` change list page is a lot less helpful.
    The books are listed by their titles but not in alphabetical order. The title
    column is not sortable and there are no filter or search options present:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.45: The Books change list'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_45.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.45: The Books change list'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall from *Chapter 2*, *Models and Migrations*, that we defined `__str__`
    methods on the `Publisher`, `Book`, and `Contributor` classes. In the case of
    the `Book` class, it had a `__str__()` representation that returns the book object''s
    title:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If we had not defined the `__str__()` method on the `Book` class, it would have
    inherited it from the base `Model` class, `django.db.models.Model`.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: 'This base class provides an abstract way to give a string representation of
    an object. When we have `Book` with a primary key, in this case, the `id` field,
    with a value of `17`, then we will end up with a string representation of `Book
    object (17)`:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.46: The Books change list using the Model __str__ representation'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_46.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.46: The Books change list using the Model __str__ representation'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: 'It could be useful in our application to represent a `Book` object as a composite
    of several fields. For example, if we wanted the books to be represented as `Title
    (ISBN)`, the following code snippet would produce the desired results:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This is a useful change in and of itself as it makes the representation of
    the object more intuitive in the app:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.47: A portion of the Books change list with the custom string representation'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_47.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.47: A portion of the Books change list with the custom string representation'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: 'We are not limited to using the `__str__` representation of the object in the
    `list_display` field. The columns that appear in the list display are determined
    by the `ModelAdmin` class of the Django admin app. At the Django shell, we can
    import the `ModelAdmin` class and examine its `list_display` attribute:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This explains why the default behavior of `list_display` is to display a single-columned
    table of the objects'' `__str__` representations, so that we can customize the
    list display by overriding this value. The best practice is to subclass `ModelAdmin`
    for each object. If we wanted the `Book` list display to contain two separate
    columns for `Title` and `ISBN`, rather than having a single column containing
    both values as in *Figure 4.47*, we would subclass `ModelAdmin` as `BookAdmin`
    and specify the custom `list_display`. The benefit of doing this is that we are
    now able to sort books by `Title` and by `ISBN`. We can add this class to `reviews/admin.py`:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now that we''ve created a `BookAdmin` class, we should reference it when we
    register our `reviews.models.Book` class with the admin site. In the same file,
    we also need to modify the model registration to use `BookAdmin` instead of the
    default value of `admin.ModelAdmin`, so the `admin.site.register` call now becomes
    the following:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Once these two changes have been made to the `reviews/admin.py` file, we will
    get a `Books` change list page that looks like this:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.48: A portion of the Books change list with a two-column list display'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_48.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.48: A portion of the Books change list with a two-column list display'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us a hint as to how flexible `list_display` is. It can take four
    types of values:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: It takes field names from the model, such as `title` or `isbn`.
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It takes a function that takes the model instance as an argument, such as this
    function that gives an initialized version of a person''s name:'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'It takes a method from the `ModelAdmin` subclass that takes the model object
    as a single argument. Note that this needs to be specified as a string argument
    as it would be out of scope and undefined within the class:'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'It takes a method (or a non-field attribute) of the model class, such as `__str__`,
    as long as it accepts the model object as an argument. For example, we could convert
    `isbn13` to a method on the `Book` model class:'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now when viewing the `Books` change list at `http://127.0.0.1:8000/admin/reviews/book`,
    we can see the hyphenated `ISBN13` field:'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.49: A portion of the Books change list with the hyphenated ISBN13'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_49.jpg)'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.49: A portion of the Books change list with the hyphenated ISBN13'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that computed fields such as `__str__` or our `isbn13` methods
    do not make for sortable fields on the summary page. Also, we cannot include fields
    of type `ManyToManyField` in `display_list`.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: The Filter
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the admin interface needs to deal with a significant number of records,
    it is convenient to narrow down the results that appear on change list pages.
    The simplest filters select individual values. For example, the user filter depicted
    in *Figure 4.6* allows the selection of users by `staff status`, by `superuser
    status`, and `active`. We''ve seen on the user filter that `BooleanField` can
    be used as a filter. We can also implement filters on `CharField`, `DateField`,
    `DateTimeField`, `IntegerField`, `ForeignKey`, and `ManyToManyField`. In this
    case, adding `publisher` as a `ForeignKey` of `Book`, it is defined on the `Book`
    class as follows:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Filters are implemented using the `list_filter` attribute of a `ModelAdmin`
    subclass. In our Bookr app, filtering by book title or ISBN would be impractical
    as it would produce a large list of filter options that return only one record.
    The filter that would occupy the right-hand side of the page would take up more
    space than the actual change list. A practical option would be to filter books
    by publisher. We defined a custom `__str__` method for the `Publisher` model that
    returns the publisher's `name` attribute, so our filter options will be listed
    as publisher names.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: 'We can specify our change list filter in `reviews/admin.py` in the `BookAdmin` class:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Here is how the `Books` change page should look now:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.50: The Books change page with the publisher filter'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_50.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.50: The Books change page with the publisher filter'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: With that line of code, we have implemented a useful publisher filter on the
    `Books` change list page.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.04: Adding a Date list_filter and date_hierarchy'
  id: totrans-371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have seen that the `admin.ModelAdmin` class provides useful attributes to
    customize filters on change list pages. For example, filtering by date is crucial
    functionality for many applications and can also help us make our app more user-friendly.
    In this exercise, we will examine how date filtering can be implemented by including
    a date field in the filter and look at the `date_hierarchy` filter:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `reviews/admin.py` file and modify the `list_filter` attribute in
    the `BookAdmin` class to include `''publication_date''`:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Reload the `Books` change page and confirm that the filter now includes date settings:![Figure
    4.51: Confirming that the Books change page includes date settings'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_51.jpg)'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.51: Confirming that the Books change page includes date settings'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This publication date filter would be convenient if the Bookr project was receiving
    a lot of new releases, and we wanted to filter books by what was published in
    the last 7 days or a month. Sometimes though, we might like to filter by a specific
    year or a specific month in a specific year. Fortunately, the `admin.ModelAdmin`
    class comes with a custom filter attribute that is geared towards navigating hierarchies
    of temporal information. It is called `date_hierarchy`.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a `date_hierarchy` attribute to `BookAdmin` and set its value to `publication_date`:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Reload the `Books` change page and confirm that the date hierarchy appears
    above the `Action` dropdown:![Figure 4.52: Confirming that the date hierarchy
    appears above the Action dropdown'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_52.jpg)'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.52: Confirming that the date hierarchy appears above the Action dropdown'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select a year from the date hierarchy and confirm that it contains a list of
    months in that year containing book titles and a total list of books:![Figure
    4.53: Confirming that the selection of a year from the date hierarchy shows the
    books published that year'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_53.jpg)'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.53: Confirming that the selection of a year from the date hierarchy
    shows the books published that year'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Confirm that selecting one of these months further filters down to days in
    the month:![Figure 4.54: Filtering months down to days in the month'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_04_54.jpg)'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.54: Filtering months down to days in the month'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: The `date_hierarchy` filter is a convenient way of customizing a change list
    that contains a large set of time-sortable data in order to facilitate faster
    record selection, as we saw in this exercise. Let's now look at the implementation
    of a search bar in our app.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: The Search Bar
  id: totrans-391
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This brings us to the remaining piece of functionality that we wanted to implement
    – the search bar. Like filters, a basic search bar is quite simple to implement.
    We only need to add the `search_fields` attribute to the `ModelAdmin` class. The
    obvious character fields in our `Book` class to search on are `title` and `isbn`.
    At present, the `Books` change list appears with a date hierarchy across the top
    of the change list. The search bar will appear above this:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.55: Books change list before the search bar is added'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_55.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.55: Books change list before the search bar is added'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start by adding this attribute to `BookAdmin` in `reviews/admin.py`
    and examine the result:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The result would look like this:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.56: Books change list with the search bar'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_56.jpg)'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.56: Books change list with the search bar'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can perform a simple text search on fields that match the title field
    or ISBN. This search requires precise string matches, so "color" won''t match
    "colour." It also lacks the deep semantic processing that we expect from more
    sophisticated search facilities such as `Books` model is quite restrictive. We
    might want to search by publisher name too. Fortunately, `search_fields` is flexible
    enough to accomplish this. To search on `ForeignKeyField` or `ManyToManyField`,
    we just need to specify the field name on the current model and the field on the
    related model separated by two underscores. In this case, `Book` has a foreign
    key, `publisher`, and we want to search on the `Publisher.name` field so it can
    be specified as `''publisher__name''` on `BookAdmin.search_fields`:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If we wanted to restrict a search field to an exact match rather than return
    results that contain the search string, then the field can be suffixed with `'__exact'`.
    So, replacing `'isbn'` with `'isbn__exact'` will require the complete ISBN to
    be matched, and we won't be able to get a match using a portion of the ISBN.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we constrain the search field to only return results that start with
    the search string by using the `'__startswith'` suffix. Qualifying the publisher
    name search field as `'publisher__name__startswith'` means that we will get results
    searching for "pack" but not for "ackt."
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: Excluding and Grouping Fields
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are occasions when it is appropriate to restrict the visibility of some
    of the fields in the model in the admin interface. This can be achieved with the
    `exclude` attribute.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the review form screen with the `Date edited` field visible. Note that
    the `Date created` field does not appear – it is already a hidden view because
    `date_created` is defined on the model with the `auto_now_add` parameter:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.57: The review form'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_57.jpg)'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.57: The review form'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: 'If we wanted to exclude the `Date edited` field from the review form, we would
    do this in the `ReviewAdmin` class:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Then the review form would appear without `Date edited`:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.58: The review form with the Date edited field excluded'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_58.jpg)'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.58: The review form with the Date edited field excluded'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: 'Conversely, it might be more prudent to restrict the admin fields to those
    that have been explicitly permitted. This is achieved with the `fields` attribute.
    The advantage of this approach is that if new fields are added in the model, they
    won''t be available in the admin form unless they have been added to the `fields`
    tuple in the `ModelAdmin` subclass:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This will give us the same result that we saw earlier.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option is to use the `fieldsets` attribute of the `ModelAdmin` subclass
    to specify the form layout as a series of grouped fields. Each grouping in `fieldsets`
    consists of a title followed by a dictionary containing a `''fields''` key pointing
    to a list of field name strings:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The review form should look as follows:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.59: The review form with fieldsets'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_59.jpg)'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.59: The review form with fieldsets'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to omit the title on a fieldset, we can do so by assigning the value
    `None` to it:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, the review form should appear as shown in the following screenshot:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.60: The review form with the first fieldset untitled'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_60.jpg)'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.60: The review form with the first fieldset untitled'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 4.02: Customizing the Model Admins'
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our data model, the `Contributor` class is used to store data for book contributors
    -- they can be authors, contributors, or editors. This activity focuses on modifying
    the `Contributor` class and adding a `ContributorAdmin` class to improve the user-friendliness
    of the admin app. At present, the `Contributor` change list defaults to a single
    column, `FirstNames`, based on the `__str__` method created in *Chapter 2*, *Models
    and Migrations*. We will investigate some alternative ways of representing this.
    These steps will help you complete the activity:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: Edit `reviews/models.py` to add additional functionality to the `Contributor`
    model.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `initialled_name` method to `Contributor` that takes no arguments (like
    the `Book.isbn13` method).
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `initialled_name` method will return a string containing `Contributor.last_names`
    followed by a comma and the initials of the given names. For example, for a `Contributor`
    object with `first_names` of `Jerome David` and `last_names` of `Salinger`, `initialled_name`
    will return `Salinger, JD`.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the `__str__` method for `Contributor` with one that calls `initialled_name()`.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, the `Contributors` display list will look like this:'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.61: Contributors display list'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_04_61.jpg)'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.61: Contributors display list'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add a `ContributorAdmin` class in `reviews/admin.py`. It should inherit from
    `admin.ModelAdmin`.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify it so that on the `Contributors` change list, records are displayed with
    two sortable columns – `Last Names` and `First Names`.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a search bar that searches on `Last Names` and `First Names`. Modify it
    so that it only matches the start of `Last Names`.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a filter on `Last Names`.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By completing the activity, you should be able to see something like this:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.62: Expected output'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_04_62.jpg)'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.62: Expected output'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: Changes such as these can be made to improve the functionality of the admin
    user interface. By implementing `First Names` and `Last Names` columns as separate
    columns in the `Contributors` change list, we are giving the user an option to
    sort on either of the fields. By considering what columns are most useful in search
    retrieval and filter selections, we can improve the efficient retrieval of records.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found at [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ).
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-454
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to create superusers through the Django command
    line and how to use them to access the admin app. After a brief tour of the admin
    app's basic functionality, we examined how to register our models with it to produce
    a CRUD interface for our data.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: Then we learned how to refine this interface by modifying site-wide features.
    We altered how the admin app presents model data to the user by registering custom
    model admin classes with the admin site. This allowed us to make fine-grained
    changes to the representation of our models' interfaces. These modifications included
    customizing change list pages by adding additional columns, filters, date hierarchies,
    and search bars. We also modified the layout of the model admin pages by grouping
    and excluding fields.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: This was only a very shallow dive into the functionality of the admin app. We
    will revisit the rich functionality of `AdminSite` and `ModelAdmin` in *Chapter
    10*, *Advanced Django Admin and Customization*. But first, we need to learn some
    more intermediate features of Django. In the next chapter, we will learn how to
    organize and serve static content, such as CSS, JavaScript, and images, from a
    Django app.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
