["```py\npip install virtualenv\n```", "```py\npip install starlette-exporter\n```", "```py\nfrom starlette_exporter import PrometheusMiddleware, \n         handle_metrics\napp = FastAPI()\napp.add_middleware(PrometheusMiddleware, app_name=”osms”) \napp.add_route(“/metrics”, handle_metrics)\n```", "```py\npip install opentelemetry-exporter-jaeger\n```", "```py\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.jaeger.thrift import \n          JaegerExporter\nfrom opentelemetry.sdk.resources import SERVICE_NAME, \n          Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import \n          BatchSpanProcessor\nfrom opentelemetry.instrumentation.fastapi import \n          FastAPIInstrumentor\nfrom opentelemetry.instrumentation.logging import \n         LoggingInstrumentor\napp = FastAPI()\nresource=Resource.create(\n        {SERVICE_NAME: “online-sports-tracer”})\ntracer = TracerProvider(resource=resource)\ntrace.set_tracer_provider(tracer)\njaeger_exporter = JaegerExporter(\n    # configure client / agent\n    agent_host_name=’localhost’,\n    agent_port=6831,\n    # optional: configure also collector\n    # collector_endpoint=\n    #     ‘http://localhost:14268/api/traces?\n    #            format=jaeger.thrift’,\n    # username=xxxx, # optional\n    # password=xxxx, # optional\n    # max_tag_value_length=None # optional\n)\nspan_processor = BatchSpanProcessor(jaeger_exporter)\ntracer.add_span_processor(span_processor)\nFastAPIInstrumentor.instrument_app(app, \n          tracer_provider=tracer)\nLoggingInstrumentor().instrument(set_logging_format=True)\n```", "```py\npip install opentelemetry-instrumentation-fastapi\n```", "```py\npip install py_eureka_client\n```", "```py\nfrom py_eureka_client.eureka_client import EurekaClient\napp = FastAPI()\n@app.on_event(“startup”)\nasync def init():\n    create_async_db() \n    global client\n    client = EurekaClient(\n     eureka_server=”http://DESKTOP-56HNGC9:8761/eureka”, \n     app_name=”sports_service”, instance_port=8000, \n     instance_host=”192.XXX.XXX.XXX”)\n    await client.start()\n@app.on_event(“shutdown”)\nasync def destroy():\n    close_async_db() \n    await client.stop()\n```", "```py\n<dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>\n       spring-cloud-starter-netflix-eureka-server\n     </artifactId>\n</dependency>\n```", "```py\npip freeze > requirements.txt \n```", "```py\nFROM python:3.9\nWORKDIR /code\nCOPY ./requirements.txt /code/requirements.txt\nRUN pip install --no-cache-dir --upgrade -r \n                /code/requirements.txt\nCOPY ./ch11 /code\nEXPOSE 8000\nCMD [“uvicorn”, “main:app”, “--host=0.0.0.0” , “--reload” ,\n     “--port”, “8000”]\n```", "```py\npip install -r requirements.txt \n```", "```py\ndocker build -t ch11-app .\n```", "```py\ndocker pull mongo:latest\n```", "```py\ndocker network create ch11-network\n```", "```py\ndocker run --name=mongo --rm -p 27017:27017 -d                 --network=ch11-network mongo\n```", "```py\ndocker run --name=ch11-app --rm -p 8000:8000-d             --network=ch11-network ch11-app\n```", "```py\nversion: “3”\nservices: \n    ch11-mongo:\n        image: “mongo”\n        ports:\n            - 27017:27017\n        expose:\n            - 27017\n        networks:\n            - ch11-network\n\n    ch11-app:\n        build: .     # requires the Dockerfile\n        depends_on: \n            - ch11-mongo\n        ports:\n            - 8000:8000\n        networks:\n            - ch11-network\nnetworks:\n    ch11-network:\n      driver: bridge \n```", "```py\ndef create_async_db():\n    global client\n    client = AsyncIOMotorClient(str(“ch11-mongo:27017”))\n```", "```py\nFROM nginx:latest\nCOPY ./nginx_config.conf /etc/nginx/conf.d/default.conf\n```", "```py\nserver {\n    listen 8080;\n    location / {\n        proxy_pass http://192.168.1.7:8000;\n    }\n} \n```", "```py\nfrom ch11_flask.app import app as flask_app\nfrom fastapi.middleware.wsgi import WSGIMiddleware\napp.mount(“/ch11/flask”, WSGIMiddleware(flask_app))\n```", "```py\nimport os\nfrom django.core.wsgi import get_wsgi_application\nfrom importlib.util import find_spec\nfrom fastapi.staticfiles import StaticFiles\nos.environ.setdefault(‘DJANGO_SETTINGS_MODULE’, \n           ‘ch11_django.settings’)\ndjango_app = get_wsgi_application()\napp = FastAPI()\napp.mount(‘/static’,\n    StaticFiles(\n         directory=os.path.normpath(\n              os.path.join(\n           find_spec(‘django.contrib.admin’).origin, \n                  ‘..’, ‘static’)\n         )\n   ),\n   name=’static’,\n)\napp.mount(‘/ch11/django’, WSGIMiddleware(django_app))\n```"]