["```py\n{\n    \"name\": \"Library Members\",\n    \"license\": \"AGPL-3\",\n    \"description\": \"Manage members borrowing books.\",\n    \"author\": \"Daniel Reis\",\n    \"depends\": [\"library_app\"],\n    \"application\": False,\n}\n```", "```py\n    from . import models\n    ```", "```py\n    from . import library_book\n    ```", "```py\n    from odoo import fields, models\n\n    class Book(models.Model): \n        _inherit = \"library.book\" \n        is_available = fields.Boolean(\"Is Available?\")\n    ```", "```py\n<odoo>\n  <record id=\"view_form_book_extend\" model=\"ir.ui.view\">\n    <field name=\"name\">Book: add Is Available? \n      field</field>\n    <field name=\"model\">library.book</field>\n    <field name=\"inherit_id\" ref=\n      \"library_app.view_form_book\"/>\n    <field name=\"arch\" type=\"xml\">\n      <field name=\"isbn\" position=\"after\">\n        <field name=\"is_available\" />\n      </field>\n    </field>\n  </record>\n</odoo>\n```", "```py\n# class Book(models.Model): \n    isbn = fields.Char(help=\"Use a valid ISBN-13 or \n      ISBN-10.\")\n    publisher_id = fields.Many2one(index=True)\n```", "```py\n# class Book(models.Model):\n    def _check_isbn(self):\n        self.ensure_one()\n        digits = [int(x) for x in self.isbn if x.isdigit()]\n        if len(digits) == 10:\n            ponderators = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n            total = sum(\n                a * b for a, b in zip(digits[:9], \n                ponderators)\n            )\n            check = total % 11\n            return digits[-1] == check\n        else:\n            return super()._check_isbn()\n```", "```py\n    from . import library_book\n    from . import library_member\n    ```", "```py\n    from odoo import fields, models\n    class Member(models.Model): \n        _name = \"library.member\"\n        _description = \"Library Member\"\n        card_number = fields.Char()\n        partner_id = fields.Many2one(\n            \"res.partner\",\n    library.member model embeds the inherited model, res.partner, so that when a new Member record is created, a related Partner is automatically created and referenced in the partner_id field.Through the delegation mechanism, all the fields of the embedded model are automatically made available as if they were fields of the parent model fields. In this case, the Library Member model has all of the Partner fields available for use, such as `name`, `address`, and `email`, plus the ones specific to members, such as `card_number`. Behind the scenes, the Partner fields are stored in the linked Partner record, and no data structure duplication occurs.Delegation inheritance works only at the data level, not at the logic level. No methods from the inherited model are inherited. They are still accessible using the `partner_id.open_parent()` runs the `open_parent()` method of the embedded Partner record.There is an alternative syntax for delegation inheritance that's available through the `_inherits` model attribute. It comes from the pre-Odoo 8 old API, and it is still widely used. The Library Model example with the same effect as earlier looks like this:\n\n    ```", "```py\n\n    To finish adding this new model, a few additional steps are needed – add the security ACLs, a menu item, and some view3.\n    ```", "```py\n    id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\n    access_member_user,Member User Access,model_library_member,library_app.library_group_user,1,1,1,0\n    access_member_manager,Member Manager Access,model_library_member,library_app.library_group_manager,1,1,1,4\n    ```", "```py\n    <odoo>\n        <act_window id=\"action_library_member\"\n          name=\"Library Members\"\n          res_model=\"library.member\"\n          view_mode=\"tree,form\" />\n        <menuitem id=\"menu_library_member\"\n          name=\"Members\"\n          action=\"action_library_member\"\n          parent=\"library_app.menu_library\" />\n    </odoo5\n    ```", "```py\n    <odoo>\n      <record id=\"view_form_member\" model=\"ir.ui.view\">\n        <field name=\"name\">Library Member Form \n          View</field>\n        <field name=\"model\">library.member</field>\n        <field name=\"arch\" type=\"xml\">\n          <form>\n            <group>\n              <field name=\"name\" />\n              <field name=\"email\" />\n              <field name=\"card_number\" />\n            </group>\n          </form>\n        </field>\n      </record>\n      <record id=\"view_tree_member\" model=\"ir.ui.view\">\n        <field name=\"name\">Library Member List \n          View</field>\n        <field name=\"model\">library.member</field>\n        <field name=\"arch\" type=\"xml\">\n          <tree>\n              <field name=\"name\" />\n              <field name=\"card_number\" />\n          </tree>\n        </field>\n      </record>\n    </odoo6\n    ```", "```py\n    \"data\": [\n        \"security/ir.model.access.csv\",\n        \"views/book_view.xml\",\n        \"views/member_view.xml\",\n        \"views/library_menu.xml\",\n    ],\n    ```", "```py\n        \"depends\": [\"library_app\", \"mail\"], \n    ```", "```py\n    class Member(models.Model): \n        _name = \"library.member\"\n        _description = \"Library Member\"\n        _inherits = {\"res.partner\": \"partner_id\"}\n    _inherit = [\"library.member\", \"mail.thread\", \"mail.activity.mixin\"].\n    ```", "```py\n      <record id=\"view_form_member\" model=\"ir.ui.view\">\n        <field name=\"name\">Library Member Form \n          View</field>\n        <field name=\"model\">library.member</field>\n        <field name=\"arch\" type=\"xml\">\n          <form>\n            <group>\n              <field name=\"name\" />\n              <field name=\"email\" />\n              <field name=\"card_number\" />\n            </group>\n            <!-- mail mixin fields -->\n            <div class=\"oe_chatter\">\n                <field name=\"message_follower_ids\"\n                       widget=\"mail_followers\"/>\n                <field name=\"activity_ids\"\n                       widget=\"mail_activity\"/>\n                <field name=\"message_ids\"\n                       widget=\"mail_thread\"/>\n    </div>\n          </form>\n        </field>\n      </record>\n    ```", "```py\n      <field name=\"isbn\" position=\"after\">\n        <!-- Changed content goes here -->\n      </field>\n```", "```py\n<field name=\"target_field\" position=\"after\">\n    <field name=\"my_field\" position=\"move\"/>\n</field>\n```", "```py\n<xpath expr=\"//field[@name='isbn']\" position=\"after\">\n    <field name=\"is_available\" />\n</xpath>\n```", "```py\n<odoo>\n  <!-- Modify Group name -->\n<record id=\"library_app.library_group_user\" \nmodel=\"res.groups\"> \n    <field name=\"name\">Librarian</field>\n  </record>\n</odoo>\n```", "```py\nfrom odoo import http \nfrom odoo.addons.library_app.controllers.main import Books \nclass BooksExtended(Books):\n    @http.route()\n    def list(self, **kwargs):\n        response = super().list(**kwargs)\n        if kwargs.get(\"available\"):\n            all_books = response.qcontext[\"books\"]\n            available_books = all_books.filtered(\n              \"is_available\")\n            response.qcontext[\"books\"] = available_books\n        return response\n```", "```py\n    from . import models\n    from . import controllers\n    ```", "```py\n    from . import main \n    ```", "```py\n    <odoo>\n      <template id=\"book_list_extended\"\n                name=\"Extended Book List\"\n                inherit_id=\n                  \"library_app.book_list_template\">\n    xpath notation. Note that in this case, we could have also used the equivalent simplified notation; that is, <span t-field=\"book.publisher_id\" position=after>.\n    ```", "```py\n    \"data\": [\n        \"security/library_security.xml\",\n        \"security/ir.model.access.csv\",\n        \"views/book_view.xml\",\n        \"views/member_view.xml\",\n        \"views/library_menu.xml\",\n        \"views/book_list_template.xml\",\n    ],\n    ```"]