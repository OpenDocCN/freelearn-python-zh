- en: Chapter 7. Combining Raster and Vector Pictures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple animation of a GIF beach ball
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The vector walking creature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bird with shoes walking in the karroo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a partially transparent image with Gimp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diplomat walking at the palace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spider in the forest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving band of images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous band of images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Endless background a passing cloudscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vector graphics as seen in [Chapter 2](ch02.html "Chapter 2. Drawing Fundamental
    Shapes"), *Drawing Fundamental Shapes* and [Chapter 3](ch03.html "Chapter 3. Handling
    Text"), *Handling Text* can be shrunk and expanded to any size and in any direction
    using simple algebra. They can be animated with rotations using basic trigonometry.
    Raster graphics are limited. They cannot be resized or rotated dynamically while
    the code is executing. They are more cumbersome. However, we can get tremendous
    effects when we combine both vector and raster graphics together. The one thing
    that Python cannot do is to rotate a `GIF` image by itself. There are ways of
    mimicking rotation reasonably but there are limitations you will appreciate after
    trying out some of these recipes. PIL can rotate them, but not dynamically on
    a Tkinter canvas. We explore some possibilities and workarounds here.
  prefs: []
  type: TYPE_NORMAL
- en: Because we are not altering and manipulating the actual properties of the images
    we do not need the Python Imaging Library (PIL) in this chapter. We need to work
    exclusively with `GIF` format images because that is what Tkinter deals with.
  prefs: []
  type: TYPE_NORMAL
- en: We will also see how to use "The GIMP" as a tool to prepare images suitable
    for animation.
  prefs: []
  type: TYPE_NORMAL
- en: Simple animation of a GIF beach ball
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to animate a raster image, derived from a photograph.
  prefs: []
  type: TYPE_NORMAL
- en: To keep things simple and clear we are just going to move a photographic image
    (in `GIF` format) of a beach ball across a black background.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a suitable `GIF` image of an object that we want to animate. An example
    of one, named `beachball.gif` has been provided.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy a `.gif` file from somewhere and paste it into a directory where you want
    to keep your work-in-progress pictures.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that the path in our computer's file system leads to the image to be
    used. In the example below the instruction `ball = PhotoImage(file = "constr/pics2/beachball.gif")`
    says that the image to be used will be found in a directory (folder) called `pics2`,
    which is a sub-folder of another folder called `constr`.
  prefs: []
  type: TYPE_NORMAL
- en: Then execute the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The image of the beach ball is shifted across a canvas in exactly the same manner
    that was used in [Chapter 4](ch04.html "Chapter 4. Animation Principles"), *Animation
    Principles*. The difference now is that the photo type images always occupy a
    rectangular area of screen. The size of this box, called the bounding box, is
    the size of the image. We have used a black background so the black corners on
    the image of our beach ball cannot be seen.
  prefs: []
  type: TYPE_NORMAL
- en: The vector walking creature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We make a pair of walking legs using the vector graphics of [Chapter 2](ch02.html
    "Chapter 2. Drawing Fundamental Shapes"), *Drawing Fundamental Shapes* and [Chapter
    4](ch04.html "Chapter 4. Animation Principles"), *Animation Principles, Handling
    Text*. We want to use these legs together with pieces of raster images and see
    how far we can go in making appealing animations. We import Tkinter, math, and
    time modules. The math is needed to provide the trigonometry that sustains the
    geometric relations that move the parts of the leg in relation to each other.
  prefs: []
  type: TYPE_NORMAL
- en: '![The vector walking creature](img/3845_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using Tkinter and time modules as was done in [Chapter 4](ch04.html
    "Chapter 4. Animation Principles"), again to animate the movement of lines and
    circles. You will see some trigonometry in the code. If you do not like mathematics
    you can just cut and paste the code without the need to understand exactly how
    the maths works. However, if you are a friend of mathematics it is fun to watch
    sine, cosine, and tangent working together to make a child smile.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Execute the program as shown in the previous image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without getting bogged down in detail, the strategy in the program consists
    of defining the motion of a foot while walking one stride. This motion is defined
    by eight relative positions given by the two lists `step_x (horizontal)` and `step_y
    (vertical)`. The motion of the hips is given by a separate pair of x- and y-positions
    `hip_x` and `hip_y`.
  prefs: []
  type: TYPE_NORMAL
- en: Trigonometry is used to work out the position of the knee on the assumption
    that the thigh and lower leg are the same length. The calculation is based on
    the sine rule taught in high school. Yes, we do learn useful things at school!
  prefs: []
  type: TYPE_NORMAL
- en: The *time-animation regulation* instructions are assembled together as a function
    `animdelay()`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Python `math` module, two arc-tangent functions are available for calculating
    angles given the lengths of two adjacent sides. `atan2(y,x)` is the best because
    it takes care of the crazy things a tangent does on its way around a circle -
    tangent flicks from minus infinity to plus infinity as it passes through 90 degrees
    and any multiples thereof.
  prefs: []
  type: TYPE_NORMAL
- en: A mathematical knee is quite happy to bend forward or backward in satisfying
    its equations. We make the sign of the angle negative for a backward-bending bird
    knee and positive for a forward bending mammalian knee.
  prefs: []
  type: TYPE_NORMAL
- en: More Info Section 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This animated walking hips-and-legs is used in the recipes that follow this
    to make a bird walk in the desert, a diplomat in palace grounds, and a spider
    in a forest.
  prefs: []
  type: TYPE_NORMAL
- en: Bird with shoes walking in the Karroo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now coordinate the movement of four `GIF` images and the striding legs to
    make an Apteryx (a flightless bird like the kiwi) that walks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Bird with shoes walking in the Karroo](img/3845_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need the following `GIF` images:'
  prefs: []
  type: TYPE_NORMAL
- en: A background picture of a suitable landscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bird body without legs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pair of garish-colored shoes to make the viewer smile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The walking avian legs of the previous recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The images used are `karroo.gif, apteryx1.gif`, and `shoe1.gif`. Note that the
    images of the bird and the shoe have transparent backgrounds which means there
    is no rectangular background to be seen surrounding the bird or the shoe. In the
    recipe following this one, we will see the simplest way to achieve the necessary
    transparency.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Execute the program shown in the usual way.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same remarks concerning the trigonometry made in the previous recipe apply
    here. What we see here now is the ease with which vector objects and raster images
    can be combined once suitable `GIF` images have been prepared.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For teachers and their students who want to make lessons on a computer, these
    techniques offer all kinds of possibilities like history tours and re-enactments,
    geography tours, and, science experiments. Get the students to do projects telling
    stories. Animated year books?
  prefs: []
  type: TYPE_NORMAL
- en: Making GIF images with transparent backgrounds using GIMP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We make an image with an opaque background into one with a transparent background
    using the free and open-source GIMP image editor.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can get **GIMP** (**GNU Image Manipulation Program**) at [http://www.gimp.org/](http://www.gimp.org/).
    There are versions that can be installed on Windows and Linux. GIMP is an excellent
    package and well-worth the effort of learning to use. It can be frustrating when
    you are not used to it so this particular recipe is devoted to describing the
    steps that will transform a `.png` image with an opaque background into a `.gif`
    image with a transparent background.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows, you simply go to the website and click the **Download** button and
    it will install and can be used immediately. With Linux, it is often already installed.
    With any Debian-based Linux `sudo apt-get install gimp` should get it installed
    and you are ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe does not involve running Python code. Instead, it is a list of actions
    to perform with your mouse on the Gimp GUI. In the following instructions, click
    **Select** | **Invert** is the short-form for "Left-click on, select, then left-click
    on Invert".
  prefs: []
  type: TYPE_NORMAL
- en: Open GIMP and open the file `apteryx1.png`. This is a cartoon bird that has
    been drawn.![How to do it...](img/3845_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Windows** | **Dockable dialogs** | **Layers**. This will open up a display
    panel that shows all the layers making up the image we are working on. Watching
    what is going on with the layers is the secret to using GIMP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Select** | **By color**, and then place the cursor arrow anywhere on
    the black portion of the image and click. You will see a shimmering dotted line
    around the outline of the bird. What we have done is to select for alteration
    only the black portions of the picture.![How to do it...](img/3845_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Select** | **Invert**. What this does is it changes the selection to
    everything except the black portion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Edit** | **Copy**. This picks up a copy of the selected portion (everything
    not black) and places it onto an invisible clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Edit** | **Paste**. This takes a copy from the clipboard and potentially
    pastes it onto our existing image. But until you have completed the next step,
    the pasted image is held in a kind of no-man's land.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Layer** | **New**. This firmly places the pasted portion of the image
    onto its own separate layer. The layers are like sheets of clear glass with portions
    of a composite picture on it. When you work on them and change one layer, the
    others are unaltered.![How to do it...](img/3845_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the **Backdrop layer** as shown, then click **Delete Layer**. This
    discards the Backdrop layer that consists of the original image. You will see
    there is only one layer left. It contains the bird image placed on a transparent
    background.![How to do it...](img/3845_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **File** | **Save as**. In the save window, type in `apteryx1.gif` for
    the file name.![How to do it...](img/3845_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close GIMP. You will find your new `GIF` image with a transparent background
    in whatever folder you sent it to. In Linux systems, transparent areas are shown
    as a gray checker-board pattern.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All images used in this chapter that have areas which are transparent were prepared
    using GIMP this way. There are other ways to achieve this but this is possibly
    the most readily available one. The animations in this chapter consist of a smaller,
    partially transparent image moving across a larger opaque image.
  prefs: []
  type: TYPE_NORMAL
- en: Diplomat walking at the palace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now animate a dignified man using the same legs as before, appropriately
    colored. For the human style walk, we need to select the correct mammalian knee-bend
    angle option chosen in the code prior to interpreting.
  prefs: []
  type: TYPE_NORMAL
- en: '![Diplomat walking at the palace](img/3845_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need the following `GIF` images:'
  prefs: []
  type: TYPE_NORMAL
- en: A background picture of a suitable landscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A human body without legs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pair of sober shoes for dignity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The walking mammal legs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The images used are `palace.gif, ambassador.gif`, and `ambassador_shoe1.gif`.
    As before, the images of the man and the shoe have transparent backgrounds.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Execute the program shown as before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The great possibilities offered through the use of image combining using the
    transparent channel in `GIF` images allows us to create studio-quality cartoon
    animations. The same remarks concerning the trigonometry made in the previous
    recipe apply here.
  prefs: []
  type: TYPE_NORMAL
- en: Spider in the forest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now combine both mammal and bird leg motions to create a sinister-looking
    spider. We also introduce a moving background for the first time. No transparent
    images are used here as the entire spider is made of animated vector lines and
    ovals.
  prefs: []
  type: TYPE_NORMAL
- en: '![Spider in the forest](img/3845_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we need one long narrow strip image that is substantially wider than the
    Tkinter canvas provided. This not a problem and aids us in creating the illusion
    of a spider walking through an endless forest.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Execute the program shown as before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The essential art in making the spider walk acceptably is to adjust the length
    of stride, height of body above the ground, and thigh (leg segment) length to
    be consistent with each other. With slightly wrong adjustments, the legs roll
    over or appear made of very stretchy material.
  prefs: []
  type: TYPE_NORMAL
- en: There is also the issue of how the spider's leg movements should be synchronized.
    In this recipe, we have opted to make the limbs move in paired sequences.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Real spiders have eight legs, not six as in this example. You could try to add
    the extra pair of legs as a challenge. Real spiders also have an extra pair of
    segments in each leg. Getting the leg trigonometry to work is an excellent challenge
    for the mathematically talented ones.
  prefs: []
  type: TYPE_NORMAL
- en: Moving band of images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We make a moving band of images like a slideshow. This differs from the typical
    slideshow by showing the images as a continuously moving strip with the images
    placed end to end.
  prefs: []
  type: TYPE_NORMAL
- en: '![Moving band of images](img/3845_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need a set of four images, all of the same size. If they were not the same
    size, the program would still work but would not look well designed. The images
    provided for this code are: `brass_vase.gif, red_vase.gif, blue_vase.gif`, and
    `glass_vase.gif` and are 200 pixels high and 100 wide.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Execute the program shown as before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each image has its own x position coordinate posn_x1, posn_x2 etc. A 'for' loop
    adjusts these positions by one pixel each time the loop is executed, causing the
    images to progressively shift to the left.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous band of images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe extends the position-adjusting mechanism used in the previous example
    to sustain a continuous strip of images.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use the same set of four images that were used in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Execute the program shown in exactly the same way as before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The trick with this program is to reset the x position coordinates, `posn_1`,
    and so on, which control the position of each image on the canvas after the image
    has exited the canvas on the left. The position coordinates get reset to a position
    200 pixels off to the right of the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Endless background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next thing to achieve is to create what appears to be one practically infinitely
    wide panorama. We extend the technique used in the previous example and make a
    background image that appears to be endless.
  prefs: []
  type: TYPE_NORMAL
- en: '![Endless background](img/3845_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have provided a single image that has been doctored so that the right-hand
    edge fits exactly onto the left-hand edge to create an endless and continuous
    image if they are placed side by side. The GIMP image manipulation program was
    used to do this editing. In a very condensed explanation, we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We copy a portion of the image that does not have too much detail vertically
    where we make the cut.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is then pasted onto one end so that there is substantial overlap of the
    two images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then the top layer, containing the copy-and-pasted portion, has the eraser tool
    with a fuzzy edge applied so that we cannot see the transition from one image
    to the next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Execute the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use the same x coordinate position adjustment technique as we did in the
    previous recipe. This time we choose the position for readjustment to be a multiple
    of 574 which is the width, in pixels, of the cloudscape image. We also use the
    image of an airplane, on a transparent background. The airplane is kept stationary.
  prefs: []
  type: TYPE_NORMAL
