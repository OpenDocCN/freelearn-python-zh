- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Odoo Add-On Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a development environment and know how to manage Odoo server
    instances and databases, we will learn how to create Odoo add-on modules.
  prefs: []
  type: TYPE_NORMAL
- en: Our main goal in this chapter is to understand how an add-on module is structured
    and the typical incremental workflow to add components to it. The various components
    mentioned in this chapter’s recipe names will be covered extensively in subsequent
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'An Odoo module can contain several elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Business objects**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declared as Python classes, these resources are automatically persisted by Odoo
    based on their configuration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object views**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A definition of business objects’ UI display
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data files (XML or CSV files declaring the** **model metadata)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views or reports
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration data (module parametrization and security rules)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Demonstration data and more
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web controllers**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle requests from web browsers, static web data images, or CSS or JavaScript
    files used by the web interface or website
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and installing a new add-on module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Completing the add-on module manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing the add-on module file structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding menu items and views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding access security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `scaffold` command to create a module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you are expected to have Odoo installed, and you are also
    expected to have followed the recipes in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo Development Environment*. You are also expected to be comfortable
    in discovering and installing extra add-on modules, as described in [*Chapter
    2*](B20997_02.xhtml#_idTextAnchor051), *Managing Odoo* *Server Instances*.
  prefs: []
  type: TYPE_NORMAL
- en: All the code used in this chapter can be downloaded from the GitHub repository
    at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter03).
  prefs: []
  type: TYPE_NORMAL
- en: What is an Odoo add-on module?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Except for the framework code, all of the code bases of Odoo are packed in the
    form of modules. These modules can be installed or uninstalled at any time from
    the database. There are two main purposes for these modules. You can either add
    new apps/business logic, or you can modify an existing application. Put simply,
    in Odoo, everything starts and ends with modules.
  prefs: []
  type: TYPE_NORMAL
- en: Odoo offers various business solutions such as Sales, Purchase, POS, Accounting,
    Manufacturing, Project, and Inventory. Creating a new module involves adding new
    features to a business or upgrading the existing ones.
  prefs: []
  type: TYPE_NORMAL
- en: The latest version of Odoo introduces numerous new modules in both the Community
    and Enterprise editions. These include Meeting Rooms, To-Do, and several WhatsApp-related
    integration modules.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, this version comes packed with exciting new features such as a
    redesigned user interface, improved search functionality, and new features for
    CRM, manufacturing, and e-commerce. The new version also includes several other
    improvements, such as enhanced performance, improved security, and more integrations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Odoo is used by companies of all sizes; each company has a different business
    flow and requirements. To deal with this issue, Odoo splits the features of the
    application into different modules. These modules can be loaded into the database
    on demand. Basically, the administrator can enable/disable these features at any
    time. Consequently, the same software can be adjusted for different requirements.
    Check out the following screenshot of Odoo modules; the first module in the column
    is the main application, and others are designed to add extra features to that
    app. To get a modules list grouped by the application’s category, go to the **Apps**
    menu and apply grouping by category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Grouping apps by category](img/B20997_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Grouping apps by category
  prefs: []
  type: TYPE_NORMAL
- en: If you plan on developing a new application in Odoo, you should create boundaries
    for various features. This will be very helpful to divide your application into
    different add-on modules. Now that you know the purpose of the add-on module in
    Odoo, we can start building our own one.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and installing a new add-on module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a new module, make it available in our Odoo instance,
    and install it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, we will need an Odoo instance that’s ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: If you followed the *Easy installation of Odoo from the source* recipe in [*Chapter
    1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development Environment*,
    Odoo should be available at `~/odoo-dev/odoo`. For explanation purposes, we will
    assume this location for Odoo, although you can use any other location of your
    preference.
  prefs: []
  type: TYPE_NORMAL
- en: We will also need a location to add our own Odoo modules. For the purpose of
    this recipe, we will use a `local-addons` directory alongside the `odoo` directory,
    at `~/odoo-dev/local-addons`.
  prefs: []
  type: TYPE_NORMAL
- en: You can upload your own Odoo modules on GitHub and clone them on your local
    system for development purposes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As an example, for this chapter, we will create a small add-on module to manage
    a hostel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will create and install a new add-on module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the working directory in which we will work and create the add-ons directory
    where our custom module will be placed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '__init__.py file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{''name'': ''Hostel Management''}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start your Odoo instance, including the module directory, in the add-on path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the new module available in your Odoo instance. Log in to Odoo using **admin**,
    enable **Developer Mode** in the **About** box, and in the **Apps** top menu,
    select **Update Apps List**. Now, Odoo should know about our Odoo module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – The dialog to update the app list](img/B20997_03_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – The dialog to update the app list
  prefs: []
  type: TYPE_NORMAL
- en: Select the `my_hostel`. Click on the **Activate** button, and the installation
    will finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An Odoo module is a directory that contains code files and other assets. The
    directory name that’s used is the module’s technical name. The `name` key in the
    module manifest is its title.
  prefs: []
  type: TYPE_NORMAL
- en: The `__manifest__.py` file is the module manifest. This contains a Python dictionary
    with module metadata, including category, version, the modules it depends on,
    and a list of the data files that it will load. It contains important metadata
    about the add-on module and declares the data files that should be loaded.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we used a minimal manifest file, but in real modules, we will
    need other important keys. These are discussed in the next recipe, *Completing
    the add-on* *module manifest*.
  prefs: []
  type: TYPE_NORMAL
- en: The module directory must be Python-importable, so it also needs to have an
    `__init__.py` file, even if it’s empty. To load a module, the Odoo server will
    import it. This will cause the code in the `__init__.py` file to be executed,
    so it works as an entry point to run the module Python code. Due to this, it will
    usually contain import statements to load the module Python files and submodules.
  prefs: []
  type: TYPE_NORMAL
- en: Known modules can be installed directly from the command line using the `--init`
    or `my_hostel` app, you can use `my_hostel`. This list is initially set when you
    create a new database from the modules found on the add-on path provided at that
    time. It can be updated in an existing database with the **Update Module** **List**
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: Completing the add-on module manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The manifest is an important piece for Odoo modules.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We should have a module to work with, already containing a `__manifest__.py`
    manifest file. You may want to follow the previous recipe to provide such a module
    to work with.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a manifest file and an icon to our add-on module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a manifest file with the most relevant keys, edit the module’s `__manifest__.py`
    file so that it looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To add an icon for the module, choose a PNG image to use and copy it to `static/description/icon.png`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The content in the manifest file is a regular Python dictionary, with keys
    and values. The example manifest we used contains the most relevant keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the title of the module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`summary`: This is the subtitle with a one-line description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: This is a long description written in plaintext or **ReStructuredText
    (RST)** format. It is usually surrounded by triple quotes and is used in Python
    to delimit multiline texts. For an RST quick-start reference, visit [http://docutils.sourceforge.net/docs/user/rst/quickstart.html](http://docutils.sourceforge.net/docs/user/rst/quickstart.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author`: This is a string with the name of the authors. When there is more
    than one, it is common practice to use a comma to separate their names, but note
    that it should still be a string, not a Python list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`website`: This is a URL people should visit to learn more about the module
    or the authors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`category`: This is used to organize modules by areas of interest. The list
    of the standard category names available can be seen at [https://github.com/odoo/odoo/blob/17.0/odoo/addons/base/data/ir_module_category_data.xml](https://github.com/odoo/odoo/blob/17.0/odoo/addons/base/data/ir_module_category_data.xml).
    However, it’s also possible to define other new category names here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: This is the module’s version number. It can be used by the Odoo
    app store to detect newer versions of installed modules. If the version number
    does not begin with the Odoo target version (for example, `17.0`), it will be
    automatically added. Nevertheless, it will be more informative if you explicitly
    state the Odoo target version – for example, by using `17.0.1.0.0` or `17.0.1.0`,
    instead of `1.0.0` or `1.0`, respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`depends`: This is a list with the technical names of the modules it directly
    depends on. If your module does not depend on any other add-on module, then you
    should at least add a `base` module. Don’t forget to include any module defining
    XML IDs, views, or models that are referenced by this module. That will ensure
    that they all load in the correct order, avoiding hard-to-debug errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: This is a list of relative paths for the data files to load during
    module installation or upgrade. The paths are relative to the module `root` directory.
    Usually, these are XML and CSV files, but it’s also possible to have YAML data
    files. These are discussed in depth in [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319),
    *Managing* *Module Data*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`demo`: This is the list of relative paths to the files with demonstration
    data to load. These will only be loaded if the database was created with the `Demo
    Data` flag enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The image that is used as the module icon is the PNG file at `static/description/icon.png`.
  prefs: []
  type: TYPE_NORMAL
- en: Odoo is expected to have significant changes between major versions, so modules
    that have been built for one major version are not likely to be compatible with
    the next version without conversion and migration work. For this reason, it’s
    important to be sure about a module’s Odoo target version before installing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure compatibility, we need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, check whether the installation is successful. If it is, then proceed
    to check whether the module’s functionality works properly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, if the installation is not successful, you will then need to adjust
    the code and functional logic based on the errors you are receiving.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of having a long description in the module manifest, it’s possible to
    have a separate description file. Since version 8.0, it can be replaced by a `README`
    file, with either a `.txt`, `.rst`, or a `.md` (markdown) extension. Otherwise,
    include a `description/index.html` file in the module.
  prefs: []
  type: TYPE_NORMAL
- en: This HTML description will override the description that’s defined in the manifest
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few more keys that are frequently used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`licence`: The default value is `LGPL-3`. This identifier is used for a license
    under the module that is made available. Other license possibilities include `AGPL-3`,
    `Odoo Proprietary License v1.0` (mostly used in paid apps), and `Other OSI` `Approved
    Licence`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application`: If this is `True`, the module is listed as an application. Usually,
    this is used for the central module of a functional area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto_install`: If this is `True`, it indicates that this is a *glue* module,
    which is automatically installed when all of its dependencies are installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`installable`: If this is `True` (the default value), it indicates that the
    module is available for installation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`external_dependencies`: Some Odoo modules internally use `Python/bin` libraries.
    If your modules are using such libraries, you need to put them here. This will
    stop users from installing the module if the listed modules are not installed
    on the host machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{pre_init, post_init, uninstall}_hook`: This is a Python function hook that’s
    called during installation/uninstallation. For a more detailed example, refer
    to [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388), *Advanced Server-Side* *Development
    Techniques.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Assets`: A definition of how all static files are loaded in various asset
    bundles. Odoo assets are grouped by bundles. Each bundle (a list of file paths
    of specific types – `xml`, `js`, `css`, or `scss`) is listed in the module manifest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are a number of special keys that are used for app store listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '`price`: This key is used to set the price for your add-on module. The value
    of this key should be an integer value. If a price is not set, this means your
    app is free.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`currency`: This is the currency for the price. Possible values are `USD` and
    `EUR`. The default value for this key is `EUR`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`live_test_url`: If you want to provide a live test URL for your app, you can
    use this key to show the `Live Preview` button on the app store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iap`: Set your IAP developer key if the module is used to provide an IAP service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`images`: This gives the path of images. This image will be used as a cover
    image in Odoo’s app store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing the add-on module file structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An add-on module contains code files and other assets, such as XML files and
    images. For most of these files, we are free to choose where to place them inside
    the module directory.
  prefs: []
  type: TYPE_NORMAL
- en: However, Odoo uses some conventions on the module structure, so it is advisable
    to follow them. Proper code improves readability, eases maintenance, helps debugging,
    lowers complexity, and promotes reliability. These apply to every new module and
    all new developments.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are expected to have an add-on module directory with only the `__init__.py`
    and `__manifest__.py` files. In this recipe, we assume this is `local-addons/my_hostel`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a basic skeleton for the add-on module, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create directories for the code files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: from . import models
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from . import controllers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from . import wizards
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should get us started with a structure containing the most frequently
    used directories, similar to this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To provide some context, an Odoo add-on module can have three types of files:'
  prefs: []
  type: TYPE_NORMAL
- en: The *Python code* is loaded by the `__init__.py` files, where the `.py` files
    and code subdirectories are imported. Subdirectories containing Python code, in
    turn, need their own `__init__.py` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data files* that are to be declared in the `data` and `demo` keys of the `__manifest__.py`
    module manifest in order to be loaded are usually XML and CSV files for the user
    interface, fixture data, and demonstration data. There may also be YAML files,
    which can include some procedural instructions that are run when the module is
    loaded – for instance, to generate or update records programmatically rather than
    statically in an XML file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Web assets*, such as JavaScript code and libraries, CSS, SASS, and QWeb/HTML
    templates, are files that are used to build UI parts and manage user actions in
    those UI elements. These are declared through a manifest on assets key that includes
    new files with existing files, which adds these assets to the web client, widgets,
    or website pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The add-on files are organized into the following directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`models/` contains the backend code files, thus creating the models and their
    business logic. One file per model is recommended with the same name as the model
    – for example, `hostel.py` for the `hostel.hostel` model. These are addressed
    in depth in [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118), *Application Models*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views/` contains the XML files for the user interface, with the actions, forms,
    lists, and so on. Like models, it is advised to have one file per model. Filenames
    for website templates are expected to end with the `_template` suffix. Backend
    views are explained in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend
    Views*, and website views are addressed in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734),
    *CMS* *Website Development*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data/` contains other data files with the module’s initial data. Data files
    are explained in [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing* *Module
    Data*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`demo/` contains data files with demonstration data, which is useful for tests,
    training, or module evaluation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`i18n/` is where Odoo will look for the translation `.pot` and `.po` files.
    Refer to [*Chapter 11*](B20997_11.xhtml#_idTextAnchor595), *Internationalization*,
    for further details. These files don’t need to be mentioned in the manifest file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`security/` contains the data files that define access control lists, which
    is usually an `ir.model.access.csv` file and, possibly, an XML file to define
    access *groups and record rules* for row-level security. Take a look at [*Chapter
    10*](B20997_10.xhtml#_idTextAnchor549), *Security Access*, for more details on
    this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`controllers/` contains the code files for the website controllers and for
    modules providing that kind of feature. Web controllers are covered in [*Chapter
    13*](B20997_13.xhtml#_idTextAnchor697), *Web* *Server Development*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static/` is where all web assets are expected to be placed. Unlike other directories,
    this directory name is not just a convention. The files inside this directory
    are public and can be accessed without a user login. This directory mostly contains
    files such as JavaScript, style sheets, and images. They don’t need to be mentioned
    in the module manifest but will have to be referred to in the web template. This
    is discussed in detail in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734), *CMS*
    *Website Development*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wizards/` contains all of the files related to wizards. In Odoo, wizards are
    used to hold intermediate data. We learn more about wizards in [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388),
    *Advanced Server-Side* *Development Techniques*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reports/`: Odoo provides a feature to generate PDF documents such as sales
    orders and invoices. This directory holds all the files related to PDF reports.
    We will learn more about PDF reports in [*Chapter 12*](B20997_12.xhtml#_idTextAnchor628),
    *Automation, Workflows, Emails,* *and Printing*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When adding new files to a module, don’t forget to declare them either in the
    `__manifest__.py` file (for data files) or `__init__.py` file (for code files);
    otherwise, those files will be ignored and won’t be loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Adding models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Models define the data structures that will be used by our business applications.
    This recipe shows you how to add a basic model to a module. Models determine the
    logical structure of a database and how data is stored, organized, and manipulated.
    In other words, a model is a table of information that can be linked with other
    tables. A model usually represents a business concept, such as a sales order,
    contact, or product.
  prefs: []
  type: TYPE_NORMAL
- en: Modules contain various elements, such as models, views, data files, web controllers,
    and static web data.
  prefs: []
  type: TYPE_NORMAL
- en: To create a hostel module, we need to develop a model that represents the hostel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We should have a module to work with. If you followed the first recipe in this
    chapter, *Creating and installing a new add-on module*, you will have an empty
    module called `my_hostel`. We will use that for our explanation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a new `Model`, we need to add a Python file describing it and then upgrade
    the add-on module (or install it, if this has not already been done). The paths
    that are used are relative to our add-on module’s location (for example, `~/odoo-dev/local-addons/my_hostel/`):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a Python file to the `models/hostel.py` module with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a Python initialization file with code files to be loaded by the `models/__init__.py`
    module with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the module’s Python initialization file to have the module load the `models/`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upgrade the Odoo module from the command line or the **Apps** menu in the user
    interface. If you look closely at the server log while upgrading the module, you
    should see the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After this, the new `hostel.hostel` model should be available in our Odoo instance.
    There are two ways to check whether our model has been added to the database.
  prefs: []
  type: TYPE_NORMAL
- en: First, you can check it in the Odoo user interface. Activate the developer tools
    and open the menu at `hostel.hostel` model here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second way is to check the table entry in your PostgreSQL database. You
    can search for the `hostel_hostel` table in the database. In the following code
    example, we used `test-17.0` as our database. However, you can replace your database
    name with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first step was to create a Python file where our new module was created.
  prefs: []
  type: TYPE_NORMAL
- en: The Odoo framework has its own `ORM` framework provides an abstraction over
    the PostgreSQL database. By inheriting the Odoo Python `Model` class, we can create
    our own model (table). When a new model is defined, it is also added to a central
    model registry. This makes it easier for other modules to make modifications to
    it later.
  prefs: []
  type: TYPE_NORMAL
- en: Models have a few generic attributes prefixed with an underscore. The most important
    one is `_name`, which provides a unique internal identifier that will be used
    throughout the Odoo instance. The ORM framework will generate the database table
    based on this attribute. In our recipe, we used `_name = 'hostel.hostel'`. Based
    on this attribute, the ORM framework will create a new table called `hostel_hostel`.
    Note that the ORM framework will create a table name by replacing it. with `_`
    in the value of the `_name` attribute. `_description` which provides a model’s
    informal name, we used `_name = 'hostel.hostel'` and `_description='Information
    about hostel'`, and `_description='Information about hostel'` only starts with
    an alphabetical character we can’t start with a number or special symbol character.
  prefs: []
  type: TYPE_NORMAL
- en: The `model` fields are defined as class attributes. We began by defining the
    `name` field of the `Char` type. It is convenient for models to have this field
    because, by default, it is used as the record description when referenced by other
    models.
  prefs: []
  type: TYPE_NORMAL
- en: We also used an example of a relational field – `state_id`. This defines a many-to-one
    relationship between `Hostel` and `State`.
  prefs: []
  type: TYPE_NORMAL
- en: There’s much more to say about models, and they will be covered in depth in
    [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118), *Application Models*.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we must make our module aware of this new Python file. This is done by
    the `__init__.py` files. Since we placed the code inside the `models/` subdirectory,
    we need the previous `__init__` file to import that directory, which should, in
    turn, contain another `__init__` file, importing each of the code files there
    (just one, in our case).
  prefs: []
  type: TYPE_NORMAL
- en: Changes to Odoo models are activated by upgrading the module. The Odoo server
    will handle the translation of the `model` class into database structure changes.
  prefs: []
  type: TYPE_NORMAL
- en: Although no example is provided here, business logic can also be added to these
    Python files, either by adding new methods to the model’s class or by extending
    the existing methods, such as `create()` or `write()`. This is addressed in [*Chapter
    5*](B20997_05.xhtml#_idTextAnchor238), *Basic* *Server-Side Development*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding access security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When adding a new data model, you need to define who can create, read, update,
    and delete records. When creating a totally new application, this can involve
    defining new user groups. Consequently, if a user doesn’t have these access rights,
    then Odoo will not display your menus and views. In the previous recipe, we accessed
    our menu by converting an `admin` user into a superuser. After completing this
    recipe, you will be able to access menus and views for the `Hostel` module directly
    as an `admin` user.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe builds on the `Hostel` model from the previous recipes and defines
    a new security group of users to control who can access or modify the records
    of `Hostel`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The add-on module that implements the `hostel.hostel` model, which was provided
    in the previous recipe, is needed because, in this recipe, we will add the security
    rules for it. The paths that are used are relative to our add-on module location
    (for example, `~/odoo-dev/local-addons/my_hostel/`).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The security rules we want to add to this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Everyone will be able to read hostel records.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new group of users called **Hostel Manager** will have the right to create,
    read, update, and delete hostel records.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To implement this, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `security/hostel_security.xml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a file called `security/ir.model.access.csv` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add both files to the `data` entry of `__manifest__.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The newly defined security rules will be in place once you update the add-on
    in your instance.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We provide two new data files that we add to the add-on module’s manifest so
    that installing or updating the module will load them in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: The `security/hostel_security.xml` file defines a new security group by creating
    a `res.groups` record. We also gave Hostel Manager rights to the `admin` user
    by using its reference ID, `base.user_admin`, so that the admin user will have
    rights to the `hostel.hostel` model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ir.model.access.csv` file associates permissions on models with groups.
    The first line has an empty `group_id:id` column, which means that the rule applies
    to everyone. The last line gives all privileges to members of the group we just
    created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order of the files in the data section of the manifest is important. The
    file for creating the security groups must be loaded before the file listing the
    access rights, as the access rights definition depends on the existence of the
    groups. Since the views can be specific to a security group, we recommend putting
    the group’s definition file in the list to be on the safe side.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book has a chapter dedicated to security. For more information on security,
    refer to *Chapter 10*, *Security Access*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding menu items and views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have models for our data structure needs, we want a user interface so
    that our users can interact with them. Menus and views play a crucial role in
    structuring and enhancing the user experience. Menus, from a technical perspective,
    are dynamic user interface components that present a structured set of options
    or links, typically allowing users to access various features, functions, or content
    areas within an application. This recipe builds on the `Hostel` model from the
    previous recipe and adds a menu item to display a user interface, featuring list
    and form views.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The add-on module to implement the `hostel.hostel` model, which was provided
    in the previous recipe, is needed. The paths that will be used are relative to
    our add-on module location (for example, `~/odoo-dev/local-addons/my_hostel/`).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add a view, we will add an XML file with its definition to the module. Since
    it is a new model, we must also add a menu option for the user to be able to access
    it.
  prefs: []
  type: TYPE_NORMAL
- en: For models, XML files adding views folder to create a view, action, and menu
    item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Be aware that the sequence of the following steps is relevant, since some of
    them use references to IDs that were defined in the preceding steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the XML file to add the data records describing the user interface,
    `views/hostel.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new data file to the add-on module manifest, `__manifest__.py`, by
    adding it to `views/hostel.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the action that opens the views in the `hostel.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the menu items to the `hostel.xml` file, making it visible to users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a custom form view to the hostel.xml file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a custom tree (list) view to the `hostel.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add custom `hostel.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When a new model is added in Odoo, the user doesn’t have any access rights by
    default. We must define access rights for the new model in order to get access.
    In our example, we haven’t defined any access rights, so the user doesn’t have
    access to our new model. Without access, our menus and views are not visible either.
    Luckily, there is one shortcut! By switching to superuser mode, you can see menus
    for our app without having access rights.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Odoo as a superuser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By converting the `admin` user into a `superuser` type, you can bypass the access
    rights and, therefore, access menus and views without giving default access rights.
    To convert the `admin` user into a superuser, activate **Developer Mode**. After
    doing this, from the developer tool options, click on the **Become** **Superuser**
    option.
  prefs: []
  type: TYPE_NORMAL
- en: As a developer preference, try everything without becoming a superuser; it will
    be very helpful to learn Odoo in depth. By becoming a Superuser, all security
    access and record rule checks will be bypassed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot has been provided as a reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – The option to activate superuser mode](img/B20997_03_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – The option to activate superuser mode
  prefs: []
  type: TYPE_NORMAL
- en: 'After becoming a superuser, your menu will have a striped background, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Superuser mode activated](img/B20997_03_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Superuser mode activated
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try and upgrade the module now, you should be able to see a new menu
    option (you might need to refresh your web browser). Clicking on the **Hostel**
    menu will open a list view for hostel models, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The menu to access Hostel](img/B20997_03_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – The menu to access Hostel
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At a low level, the user interface is defined by records stored in special models.
    The first two steps create an empty XML file to define the records to be loaded,
    and then we add them to the module’s list of data files to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Data files can be placed anywhere inside the module directory, but the convention
    is for the user interface to be defined inside a `views/` subdirectory. Usually,
    the name of these files is based on the name of the model. In our case, we create
    the user interface for the `hostel.hostel` model, so we created the `views/hostel.xml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to define a window action to display the user interface in
    the main area of the web client. The action has a target model defined by `res_model`,
    and the `name` attribute is used to display the title to the user when the user
    opens the action. These are just the basic attributes. The window action supports
    additional attributes, giving much more control over how the views are rendered,
    such as what views are to be displayed, adding filters on the records that are
    available, or setting default values. These are discussed in detail in [*Chapter
    9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*.
  prefs: []
  type: TYPE_NORMAL
- en: In general, data records are defined using a `<record>` tag, and we created
    a record for the `ir.actions.act_window` model in our example. This will create
    the window actions.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, menu items are stored in the `ir.ui.menu` model, and we can create
    these with the `<record>` tag. However, there is a shortcut tag called `<menuitem>`
    available in Odoo, so we used this in our example.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the menu item’s main attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the menu item text to be displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action`: This is the identifier of the action to be executed. We use the ID
    of the window action we created in the previous step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sequence`: This is used to set the order in which the menu items of the same
    level are presented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent`: This is the identifier for the parent menu item. Our example menu
    item had no parent, meaning that it would be displayed at the top of the menu.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web_icon`: This attribute is used to show the icon for the menu. This icon
    is only displayed in the Odoo Enterprise edition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point, we haven’t defined any of the views in our module. However, if
    you upgrade your module at this stage, Odoo will automatically create them on
    the fly. Nevertheless, we will surely want to control how our views look, so in
    the next two steps, a form and a tree view are created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both views are defined with a record on the `ir.ui.view` model. The attributes
    we used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is a title identifying the view. In the source code of Odoo, you
    will find the XML ID repeated here, but if you want, you can add a more human-readable
    title as a name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the `name` field is omitted, Odoo will generate one using the model name
    and the type of view. This is perfectly fine for the standard view of a new model.
    It is recommended to have a more explicit name when you extend a view, as this
    will make your life easier when you look for a specific view in the user interface
    of Odoo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model`: This is the internal identifier of the target model, as defined in
    its `_name` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arch`: This is the view architecture, where its structure is actually defined.
    This is where different types of views differ from each other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form views are defined with a top `<form>` element, and its canvas is a two-column
    grid. Inside the form, `<group>` elements are used to vertically compose fields.
    Two groups result in two columns with fields, which are added using the `<field>`
    element. Fields use a default widget according to their data type, but a specific
    widget can be used with the help of the `widget` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Tree views are simpler; they are defined with a top `<tree>` element that contains
    `<field>` elements for the columns to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added a `<search>` top-level tag, we can have the `<field>` and
    `<filter>` elements. Field elements are additional fields that can be searched
    from the input given in the search view. Filter elements are predefined filter
    conditions that can be activated with a click. These subjects are discussed in
    detail in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*.
  prefs: []
  type: TYPE_NORMAL
- en: Using the scaffold command to create a module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating a new Odoo module, there is some boilerplate code that needs to
    be set up. To help quick-start new modules, Odoo provides the `scaffold` command.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to create a new module using the `scaffold` command,
    which will put in place a skeleton of the file for directories to use.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create the new add-on module in a custom module directory, so we need
    Odoo installed and a directory for our custom modules. We will assume that Odoo
    is installed at `~/odoo-dev/odoo` and that our custom modules will be placed in
    the `~/``odoo-dev/local-addons` directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the `scaffold` command to create boilerplate code. Perform the
    following steps to create new a module using the `scaffold` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the working directory to where we will want our module to be. This can
    be whatever directory you choose, but it needs to be within an add-on path to
    be useful. Following the directory choices that we used in the previous recipe,
    this should be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: __manifest__.py default module manifest provided and change the relevant values.
    You will surely want to at least change the module title in the name key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is what the generated add-on module should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You should now edit the various generated files and adapt them to the purpose
    of your new module.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `scaffold` command creates the skeleton for a new module based on a template.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the new module is created in the current working directory, but
    we can provide a specific directory to create the module, passing it as an additional
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: A `default` template is used, but a `theme` template is also available for website
    theme authoring. To choose a specific template, the `-t` option can be used. We
    are also allowed to use a path for a directory with a template.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that we can use our own templates with the `scaffold` command. The
    built-in templates can be found in the `/odoo/cli/templates` Odoo subdirectory.
    To use our own template, we can use something like the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: By default, Odoo has two templates in the `/odoo/cli/templates` directory. One
    is the `default` template, and the second is the `theme` template. However, you
    can create your own templates or use them with `-t`, as shown in the preceding
    command.
  prefs: []
  type: TYPE_NORMAL
