- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Creating Odoo Add-On Modules
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Odoo附加模块
- en: Now that we have a development environment and know how to manage Odoo server
    instances and databases, we will learn how to create Odoo add-on modules.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了开发环境，并且知道如何管理Odoo服务器实例和数据库，我们将学习如何创建Odoo附加模块。
- en: Our main goal in this chapter is to understand how an add-on module is structured
    and the typical incremental workflow to add components to it. The various components
    mentioned in this chapter’s recipe names will be covered extensively in subsequent
    chapters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是理解附加模块的结构以及向其中添加组件的典型增量工作流程。本章食谱名称中提到的各种组件将在后续章节中详细介绍。
- en: 'An Odoo module can contain several elements:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo模块可以包含多个元素：
- en: '**Business objects**:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务对象**：'
- en: Declared as Python classes, these resources are automatically persisted by Odoo
    based on their configuration
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明为Python类，这些资源根据其配置自动由Odoo持久化
- en: '**Object views**:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象视图**：'
- en: A definition of business objects’ UI display
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务对象UI显示的定义
- en: '**Data files (XML or CSV files declaring the** **model metadata)**:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据文件（声明模型元数据的XML或CSV文件）**：'
- en: Views or reports
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图或报告
- en: Configuration data (module parametrization and security rules)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置数据（模块参数化和安全规则）
- en: Demonstration data and more
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例数据和更多内容
- en: '**Web controllers**:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web控制器**：'
- en: Handle requests from web browsers, static web data images, or CSS or JavaScript
    files used by the web interface or website
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理来自网络浏览器、静态网络数据图像、或由Web界面或网站使用的CSS或JavaScript文件的请求
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将涵盖以下食谱：
- en: Creating and installing a new add-on module
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和安装新的附加模块
- en: Completing the add-on module manifest
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成附加模块清单
- en: Organizing the add-on module file structure
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织附加模块的文件结构
- en: Adding models
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加模型
- en: Adding menu items and views
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加菜单项和视图
- en: Adding access security
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加访问安全
- en: Using the `scaffold` command to create a module
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`scaffold`命令创建模块
- en: Technical requirements
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you are expected to have Odoo installed, and you are also
    expected to have followed the recipes in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo Development Environment*. You are also expected to be comfortable
    in discovering and installing extra add-on modules, as described in [*Chapter
    2*](B20997_02.xhtml#_idTextAnchor051), *Managing Odoo* *Server Instances*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你应已安装Odoo，并且应已遵循[*第1章*](B20997_01.xhtml#_idTextAnchor020)，*安装Odoo开发环境*中的食谱。你还应熟悉发现和安装额外附加模块，如[*第2章*](B20997_02.xhtml#_idTextAnchor051)，*管理Odoo服务器实例*中所述。
- en: All the code used in this chapter can be downloaded from the GitHub repository
    at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter03).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以从GitHub仓库[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter03)下载。
- en: What is an Odoo add-on module?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Odoo附加模块？
- en: Except for the framework code, all of the code bases of Odoo are packed in the
    form of modules. These modules can be installed or uninstalled at any time from
    the database. There are two main purposes for these modules. You can either add
    new apps/business logic, or you can modify an existing application. Put simply,
    in Odoo, everything starts and ends with modules.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了框架代码外，Odoo的所有代码库都以模块的形式打包。这些模块可以从数据库中随时安装或卸载。这些模块有两个主要目的。你可以添加新的应用程序/业务逻辑，或者你可以修改现有的应用程序。简单来说，在Odoo中，一切从模块开始，到模块结束。
- en: Odoo offers various business solutions such as Sales, Purchase, POS, Accounting,
    Manufacturing, Project, and Inventory. Creating a new module involves adding new
    features to a business or upgrading the existing ones.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo提供各种业务解决方案，如销售、采购、POS、会计、制造、项目和库存。创建新模块涉及向业务添加新功能或升级现有功能。
- en: The latest version of Odoo introduces numerous new modules in both the Community
    and Enterprise editions. These include Meeting Rooms, To-Do, and several WhatsApp-related
    integration modules.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo的最新版本在社区和商业版中都引入了众多新模块。这些包括会议室、待办事项以及几个与WhatsApp相关的集成模块。
- en: In addition, this version comes packed with exciting new features such as a
    redesigned user interface, improved search functionality, and new features for
    CRM, manufacturing, and e-commerce. The new version also includes several other
    improvements, such as enhanced performance, improved security, and more integrations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这个版本还包含了许多令人兴奋的新功能，如重新设计的用户界面、改进的搜索功能以及CRM、制造和电子商务的新功能。新版本还包括其他一些改进，如增强的性能、改进的安全性和更多集成。
- en: 'Odoo is used by companies of all sizes; each company has a different business
    flow and requirements. To deal with this issue, Odoo splits the features of the
    application into different modules. These modules can be loaded into the database
    on demand. Basically, the administrator can enable/disable these features at any
    time. Consequently, the same software can be adjusted for different requirements.
    Check out the following screenshot of Odoo modules; the first module in the column
    is the main application, and others are designed to add extra features to that
    app. To get a modules list grouped by the application’s category, go to the **Apps**
    menu and apply grouping by category:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo被各种规模的公司使用；每个公司都有不同的业务流程和需求。为了处理这个问题，Odoo将应用程序的功能划分为不同的模块。这些模块可以根据需要加载到数据库中。基本上，管理员可以在任何时候启用/禁用这些功能。因此，相同的软件可以根据不同的需求进行调整。查看以下Odoo模块的截图；列中的第一个模块是主应用程序，其他模块旨在为该应用程序添加额外功能。要按应用程序的类别分组获取模块列表，请转到**应用**菜单并按类别分组：
- en: '![Figure 3.1 – Grouping apps by category](img/B20997_03_1.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1 – 按类别分组应用程序](img/B20997_03_1.jpg)'
- en: Figure 3.1 – Grouping apps by category
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 按类别分组应用程序
- en: If you plan on developing a new application in Odoo, you should create boundaries
    for various features. This will be very helpful to divide your application into
    different add-on modules. Now that you know the purpose of the add-on module in
    Odoo, we can start building our own one.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划在Odoo中开发新的应用程序，您应该为各种功能创建边界。这将非常有帮助，可以将您的应用程序划分为不同的附加模块。现在您已经知道了Odoo中附加模块的目的，我们可以开始构建自己的模块。
- en: Creating and installing a new add-on module
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和安装新的附加模块
- en: In this recipe, we will create a new module, make it available in our Odoo instance,
    and install it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将创建一个新的模块，使其在我们的Odoo实例中可用，并安装它。
- en: Getting ready
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To begin, we will need an Odoo instance that’s ready to use.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个准备就绪的Odoo实例。
- en: If you followed the *Easy installation of Odoo from the source* recipe in [*Chapter
    1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development Environment*,
    Odoo should be available at `~/odoo-dev/odoo`. For explanation purposes, we will
    assume this location for Odoo, although you can use any other location of your
    preference.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遵循了[*第1章*](B20997_01.xhtml#_idTextAnchor020)中“从源代码轻松安装Odoo”食谱的*安装Odoo开发环境*，Odoo应该位于`~/odoo-dev/odoo`。为了解释的目的，我们将假设这个位置是Odoo，尽管您可以使用任何其他您偏好的位置。
- en: We will also need a location to add our own Odoo modules. For the purpose of
    this recipe, we will use a `local-addons` directory alongside the `odoo` directory,
    at `~/odoo-dev/local-addons`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个位置来添加我们自己的Odoo模块。为了本食谱的目的，我们将在`odoo`目录旁边使用`local-addons`目录，位于`~/odoo-dev/local-addons`。
- en: You can upload your own Odoo modules on GitHub and clone them on your local
    system for development purposes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上上传自己的Odoo模块，并在本地系统上克隆它们以进行开发。
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: As an example, for this chapter, we will create a small add-on module to manage
    a hostel.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将为这一章创建一个小型附加模块来管理宿舍。
- en: 'The following steps will create and install a new add-on module:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将创建并安装一个新的附加模块：
- en: 'Change the working directory in which we will work and create the add-ons directory
    where our custom module will be placed:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改我们将工作的工作目录，并创建放置自定义模块的附加目录：
- en: '[PRE0]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '__init__.py file:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: __init__.py文件：
- en: '[PRE1]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '{''name'': ''Hostel Management''}'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{''name'': ''Hostel Management''}'
- en: '[PRE2]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Start your Odoo instance, including the module directory, in the add-on path:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在附加路径中启动您的Odoo实例，包括模块目录：
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Make the new module available in your Odoo instance. Log in to Odoo using **admin**,
    enable **Developer Mode** in the **About** box, and in the **Apps** top menu,
    select **Update Apps List**. Now, Odoo should know about our Odoo module:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Odoo实例中启用新模块。使用**admin**登录Odoo，在**关于**框中启用**开发者模式**，然后在**应用**顶部菜单中选择**更新应用列表**。现在，Odoo应该知道我们的Odoo模块：
- en: '![Figure 3.2 – The dialog to update the app list](img/B20997_03_2.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2 – 更新应用列表的对话框](img/B20997_03_2.jpg)'
- en: Figure 3.2 – The dialog to update the app list
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 更新应用列表的对话框
- en: Select the `my_hostel`. Click on the **Activate** button, and the installation
    will finish.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`my_hostel`。点击**激活**按钮，安装将完成。
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: An Odoo module is a directory that contains code files and other assets. The
    directory name that’s used is the module’s technical name. The `name` key in the
    module manifest is its title.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo模块是一个包含代码文件和其他资产的目录。所使用的目录名是该模块的技术名称。模块清单中的`name`键是其标题。
- en: The `__manifest__.py` file is the module manifest. This contains a Python dictionary
    with module metadata, including category, version, the modules it depends on,
    and a list of the data files that it will load. It contains important metadata
    about the add-on module and declares the data files that should be loaded.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`__manifest__.py`文件是模块清单。它包含一个包含模块元数据的Python字典，包括类别、版本、它所依赖的模块以及它将加载的数据文件列表。它包含有关附加模块的重要元数据并声明应加载的数据文件。'
- en: In this recipe, we used a minimal manifest file, but in real modules, we will
    need other important keys. These are discussed in the next recipe, *Completing
    the add-on* *module manifest*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们使用了最小的清单文件，但在实际模块中，我们需要其他重要的键。这些将在下一个食谱*完成附加模块清单*中讨论。
- en: The module directory must be Python-importable, so it also needs to have an
    `__init__.py` file, even if it’s empty. To load a module, the Odoo server will
    import it. This will cause the code in the `__init__.py` file to be executed,
    so it works as an entry point to run the module Python code. Due to this, it will
    usually contain import statements to load the module Python files and submodules.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 模块目录必须是Python可导入的，因此它还需要有一个`__init__.py`文件，即使它是空的。要加载一个模块，Odoo服务器将导入它。这将导致`__init__.py`文件中的代码被执行，因此它作为运行模块Python代码的入口点。因此，它通常包含导入语句来加载模块Python文件和子模块。
- en: Known modules can be installed directly from the command line using the `--init`
    or `my_hostel` app, you can use `my_hostel`. This list is initially set when you
    create a new database from the modules found on the add-on path provided at that
    time. It can be updated in an existing database with the **Update Module** **List**
    menu.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 已知的模块可以直接从命令行使用`--init`或`my_hostel`应用程序安装，你可以使用`my_hostel`。此列表是在你从当时提供的附加路径上找到的模块创建新数据库时设置的。它可以通过**更新模块**
    **列表**菜单在现有数据库中更新。
- en: Completing the add-on module manifest
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成附加模块清单
- en: The manifest is an important piece for Odoo modules.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 清单是Odoo模块的一个重要组成部分。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We should have a module to work with, already containing a `__manifest__.py`
    manifest file. You may want to follow the previous recipe to provide such a module
    to work with.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个模块来工作，它已经包含一个`__manifest__.py`清单文件。你可能想遵循前面的食谱来提供这样一个模块来工作。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will add a manifest file and an icon to our add-on module:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的附加模块中添加一个清单文件和一个图标：
- en: 'To create a manifest file with the most relevant keys, edit the module’s `__manifest__.py`
    file so that it looks like this:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建包含最相关键的清单文件，编辑模块的`__manifest__.py`文件，使其看起来像这样：
- en: '[PRE5]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To add an icon for the module, choose a PNG image to use and copy it to `static/description/icon.png`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为模块添加图标，选择一个PNG图像并复制到`static/description/icon.png`。
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The content in the manifest file is a regular Python dictionary, with keys
    and values. The example manifest we used contains the most relevant keys:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件中的内容是一个常规Python字典，具有键和值。我们使用的示例清单包含最相关的键：
- en: '`name`: This is the title of the module.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是模块的标题。'
- en: '`summary`: This is the subtitle with a one-line description.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`summary`：这是带有单行描述的副标题。'
- en: '`description`: This is a long description written in plaintext or **ReStructuredText
    (RST)** format. It is usually surrounded by triple quotes and is used in Python
    to delimit multiline texts. For an RST quick-start reference, visit [http://docutils.sourceforge.net/docs/user/rst/quickstart.html](http://docutils.sourceforge.net/docs/user/rst/quickstart.html).'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：这是一个以纯文本或**ReStructuredText (RST)**格式编写的长描述。它通常被三重引号包围，并在Python中用于界定多行文本。有关RST快速入门参考，请访问[http://docutils.sourceforge.net/docs/user/rst/quickstart.html](http://docutils.sourceforge.net/docs/user/rst/quickstart.html)。'
- en: '`author`: This is a string with the name of the authors. When there is more
    than one, it is common practice to use a comma to separate their names, but note
    that it should still be a string, not a Python list.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`author`：这是一个包含作者名称的字符串。当有多个作者时，通常使用逗号分隔他们的名字，但请注意，它仍然是一个字符串，而不是Python列表。'
- en: '`website`: This is a URL people should visit to learn more about the module
    or the authors.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`website`：这是人们应该访问的 URL，以了解更多关于模块或作者的信息。'
- en: '`category`: This is used to organize modules by areas of interest. The list
    of the standard category names available can be seen at [https://github.com/odoo/odoo/blob/17.0/odoo/addons/base/data/ir_module_category_data.xml](https://github.com/odoo/odoo/blob/17.0/odoo/addons/base/data/ir_module_category_data.xml).
    However, it’s also possible to define other new category names here.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`category`：这是根据兴趣领域组织模块。可以在 [https://github.com/odoo/odoo/blob/17.0/odoo/addons/base/data/ir_module_category_data.xml](https://github.com/odoo/odoo/blob/17.0/odoo/addons/base/data/ir_module_category_data.xml)
    中看到可用的标准类别名称列表。然而，也可以在这里定义其他新的类别名称。'
- en: '`version`: This is the module’s version number. It can be used by the Odoo
    app store to detect newer versions of installed modules. If the version number
    does not begin with the Odoo target version (for example, `17.0`), it will be
    automatically added. Nevertheless, it will be more informative if you explicitly
    state the Odoo target version – for example, by using `17.0.1.0.0` or `17.0.1.0`,
    instead of `1.0.0` or `1.0`, respectively.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`：这是模块的版本号。Odoo 应用商店可以使用它来检测已安装模块的新版本。如果版本号不以 Odoo 目标版本开头（例如，`17.0`），它将被自动添加。不过，如果您明确地声明
    Odoo 目标版本会更具有信息量——例如，使用 `17.0.1.0.0` 或 `17.0.1.0`，而不是分别使用 `1.0.0` 或 `1.0`。'
- en: '`depends`: This is a list with the technical names of the modules it directly
    depends on. If your module does not depend on any other add-on module, then you
    should at least add a `base` module. Don’t forget to include any module defining
    XML IDs, views, or models that are referenced by this module. That will ensure
    that they all load in the correct order, avoiding hard-to-debug errors.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`depends`：这是一个包含它直接依赖的模块的技术名称列表。如果您的模块不依赖于任何其他附加模块，那么您至少应该添加一个 `base` 模块。不要忘记包括任何定义
    XML IDs、视图或模型并在此模块中引用的模块。这将确保它们按正确顺序加载，避免难以调试的错误。'
- en: '`data`: This is a list of relative paths for the data files to load during
    module installation or upgrade. The paths are relative to the module `root` directory.
    Usually, these are XML and CSV files, but it’s also possible to have YAML data
    files. These are discussed in depth in [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319),
    *Managing* *Module Data*.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：这是在模块安装或升级期间要加载的数据文件的相对路径列表。路径相对于模块 `root` 目录。通常，这些是 XML 和 CSV 文件，但也可能有
    YAML 数据文件。这些在 [*第 6 章*](B20997_06.xhtml#_idTextAnchor319)，*管理模块数据* 中进行了深入讨论。'
- en: '`demo`: This is the list of relative paths to the files with demonstration
    data to load. These will only be loaded if the database was created with the `Demo
    Data` flag enabled.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`demo`：这是包含演示数据的文件的相对路径列表，用于加载。只有在数据库创建时启用了 `Demo Data` 标志的情况下，才会加载这些文件。'
- en: The image that is used as the module icon is the PNG file at `static/description/icon.png`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 用作模块图标的图像是位于 `static/description/icon.png` 的 PNG 文件。
- en: Odoo is expected to have significant changes between major versions, so modules
    that have been built for one major version are not likely to be compatible with
    the next version without conversion and migration work. For this reason, it’s
    important to be sure about a module’s Odoo target version before installing it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 预计在主要版本之间会有显著的变化，因此为某个主要版本构建的模块很可能在没有转换和迁移工作的情况下与下一个版本不兼容。因此，在安装模块之前，确保了解模块的
    Odoo 目标版本非常重要。
- en: 'To ensure compatibility, we need to follow these steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保兼容性，我们需要遵循以下步骤：
- en: Firstly, check whether the installation is successful. If it is, then proceed
    to check whether the module’s functionality works properly.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，检查安装是否成功。如果成功了，然后继续检查模块的功能是否正常工作。
- en: However, if the installation is not successful, you will then need to adjust
    the code and functional logic based on the errors you are receiving.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，如果安装不成功，您将需要根据您收到的错误调整代码和功能逻辑。
- en: There’s more…
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Instead of having a long description in the module manifest, it’s possible to
    have a separate description file. Since version 8.0, it can be replaced by a `README`
    file, with either a `.txt`, `.rst`, or a `.md` (markdown) extension. Otherwise,
    include a `description/index.html` file in the module.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块清单中，除了有长描述外，还可以有单独的描述文件。自 8.0 版本以来，它可以由一个 `README` 文件替换，该文件具有 `.txt`、`.rst`
    或 `.md`（Markdown）扩展名。否则，在模块中包含一个 `description/index.html` 文件。
- en: This HTML description will override the description that’s defined in the manifest
    file.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此 HTML 描述将覆盖在清单文件中定义的描述。
- en: 'There are a few more keys that are frequently used:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还有几个常用的键：
- en: '`licence`: The default value is `LGPL-3`. This identifier is used for a license
    under the module that is made available. Other license possibilities include `AGPL-3`,
    `Odoo Proprietary License v1.0` (mostly used in paid apps), and `Other OSI` `Approved
    Licence`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`licence`：默认值是`LGPL-3`。此标识符用于在模块中提供的许可证下。其他许可证可能性包括`AGPL-3`、`Odoo Proprietary
    License v1.0`（主要用于付费应用）和`Other OSI Approved Licence`。'
- en: '`application`: If this is `True`, the module is listed as an application. Usually,
    this is used for the central module of a functional area.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application`：如果这是`True`，则模块被列为应用程序。通常，这用于功能区域的中心模块。'
- en: '`auto_install`: If this is `True`, it indicates that this is a *glue* module,
    which is automatically installed when all of its dependencies are installed.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto_install`：如果这是`True`，则表示这是一个*粘合*模块，当所有依赖项都安装时，它会自动安装。'
- en: '`installable`: If this is `True` (the default value), it indicates that the
    module is available for installation.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`installable`：如果这是`True`（默认值），则表示该模块可供安装。'
- en: '`external_dependencies`: Some Odoo modules internally use `Python/bin` libraries.
    If your modules are using such libraries, you need to put them here. This will
    stop users from installing the module if the listed modules are not installed
    on the host machine.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`external_dependencies`：一些Odoo模块内部使用`Python/bin`库。如果您的模块使用此类库，您需要将它们放在这里。这将阻止用户在主机机器上未安装列出的模块时安装模块。'
- en: '`{pre_init, post_init, uninstall}_hook`: This is a Python function hook that’s
    called during installation/uninstallation. For a more detailed example, refer
    to [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388), *Advanced Server-Side* *Development
    Techniques.*'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{pre_init, post_init, uninstall}_hook`：这是一个在安装/卸载期间调用的Python函数钩子。有关更详细的示例，请参阅[*第8章*](B20997_08.xhtml#_idTextAnchor388)，*高级服务器端开发技术*。'
- en: '`Assets`: A definition of how all static files are loaded in various asset
    bundles. Odoo assets are grouped by bundles. Each bundle (a list of file paths
    of specific types – `xml`, `js`, `css`, or `scss`) is listed in the module manifest.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Assets`：定义了所有静态文件如何在各种资产包中加载。Odoo资产按包分组。每个包（特定类型的文件路径列表 - `xml`、`js`、`css`或`scss`）在模块清单中列出。'
- en: 'There are a number of special keys that are used for app store listing:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多特殊键用于应用商店列表：
- en: '`price`: This key is used to set the price for your add-on module. The value
    of this key should be an integer value. If a price is not set, this means your
    app is free.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price`：此键用于设置您的附加模块的价格。此键的值应该是一个整数值。如果没有设置价格，这意味着您的应用是免费的。'
- en: '`currency`: This is the currency for the price. Possible values are `USD` and
    `EUR`. The default value for this key is `EUR`.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`currency`：这是价格所用的货币。可能的值是`USD`和`EUR`。此键的默认值是`EUR`。'
- en: '`live_test_url`: If you want to provide a live test URL for your app, you can
    use this key to show the `Live Preview` button on the app store.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`live_test_url`：如果您想为您的应用提供一个实时测试URL，您可以使用此键在应用商店上显示“实时预览”按钮。'
- en: '`iap`: Set your IAP developer key if the module is used to provide an IAP service.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`iap`：如果模块用于提供IAP服务，请设置您的IAP开发者密钥。'
- en: '`images`: This gives the path of images. This image will be used as a cover
    image in Odoo’s app store.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images`：这给出了图像的路径。这张图片将被用作Odoo应用商店的封面图片。'
- en: Organizing the add-on module file structure
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织附加模块文件结构
- en: An add-on module contains code files and other assets, such as XML files and
    images. For most of these files, we are free to choose where to place them inside
    the module directory.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 附加模块包含代码文件和其他资产，如XML文件和图像。对于这些文件中的大多数，我们可以在模块目录内部自由选择放置位置。
- en: However, Odoo uses some conventions on the module structure, so it is advisable
    to follow them. Proper code improves readability, eases maintenance, helps debugging,
    lowers complexity, and promotes reliability. These apply to every new module and
    all new developments.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Odoo在模块结构上使用了一些约定，因此建议遵循它们。适当的代码提高了可读性，简化了维护，有助于调试，降低了复杂性，并促进了可靠性。这些适用于每个新模块和所有新开发。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are expected to have an add-on module directory with only the `__init__.py`
    and `__manifest__.py` files. In this recipe, we assume this is `local-addons/my_hostel`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望有一个附加模块目录，其中只包含`__init__.py`和`__manifest__.py`文件。在这个菜谱中，我们假设这是`local-addons/my_hostel`。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a basic skeleton for the add-on module, perform the following steps:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要为附加模块创建基本骨架，请执行以下步骤：
- en: 'Create directories for the code files:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为代码文件创建目录：
- en: '[PRE6]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: from . import models
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`. import models`导入
- en: from . import controllers
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`controllers`模块导入
- en: from . import wizards
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`. import wizards`导入
- en: '[PRE7]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This should get us started with a structure containing the most frequently
    used directories, similar to this one:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会让我们开始一个包含最常用目录的结构，类似于这个：
- en: '[PRE8]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To provide some context, an Odoo add-on module can have three types of files:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供一些背景信息，一个Odoo扩展模块可以有三类文件：
- en: The *Python code* is loaded by the `__init__.py` files, where the `.py` files
    and code subdirectories are imported. Subdirectories containing Python code, in
    turn, need their own `__init__.py` file.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Python代码*由`__init__.py`文件加载，其中`.py`文件和代码子目录被导入。包含Python代码的子目录，反过来，需要它们自己的`__init__.py`文件。'
- en: '*Data files* that are to be declared in the `data` and `demo` keys of the `__manifest__.py`
    module manifest in order to be loaded are usually XML and CSV files for the user
    interface, fixture data, and demonstration data. There may also be YAML files,
    which can include some procedural instructions that are run when the module is
    loaded – for instance, to generate or update records programmatically rather than
    statically in an XML file.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要在`__manifest__.py`模块清单的`data`和`demo`键中声明的*数据文件*，以便加载，通常是用于用户界面的XML和CSV文件、固定数据以及演示数据。也可能有YAML文件，这些文件可以包含一些在模块加载时运行的程序性指令——例如，用于在XML文件中以编程方式生成或更新记录，而不是静态地。
- en: '*Web assets*, such as JavaScript code and libraries, CSS, SASS, and QWeb/HTML
    templates, are files that are used to build UI parts and manage user actions in
    those UI elements. These are declared through a manifest on assets key that includes
    new files with existing files, which adds these assets to the web client, widgets,
    or website pages.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Web资源*，例如JavaScript代码和库、CSS、SASS以及QWeb/HTML模板，是用于构建UI部分和管理这些UI元素中用户动作的文件。这些文件通过在`assets`键上的清单声明，包括新文件和现有文件，将这些资源添加到Web客户端、小部件或网站页面上。'
- en: 'The add-on files are organized into the following directories:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展文件组织在以下目录中：
- en: '`models/` contains the backend code files, thus creating the models and their
    business logic. One file per model is recommended with the same name as the model
    – for example, `hostel.py` for the `hostel.hostel` model. These are addressed
    in depth in [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118), *Application Models*.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models/`目录包含后端代码文件，从而创建模型及其业务逻辑。建议每个模型一个文件，文件名与模型同名——例如，`hostel.py`用于`hostel.hostel`模型。这些在[*第4章*](B20997_04.xhtml#_idTextAnchor118)，*应用模型*中有详细说明。'
- en: '`views/` contains the XML files for the user interface, with the actions, forms,
    lists, and so on. Like models, it is advised to have one file per model. Filenames
    for website templates are expected to end with the `_template` suffix. Backend
    views are explained in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend
    Views*, and website views are addressed in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734),
    *CMS* *Website Development*.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views/`目录包含用户界面的XML文件，包括动作、表单、列表等。与模型一样，建议每个模型一个文件。网站模板的文件名预期以`_template`后缀结尾。后端视图在[*第9章*](B20997_09.xhtml#_idTextAnchor446)，*后端视图*中有所解释，网站视图在[*第14章*](B20997_14.xhtml#_idTextAnchor734)，*CMS网站开发*中有所说明。'
- en: '`data/` contains other data files with the module’s initial data. Data files
    are explained in [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing* *Module
    Data*.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data/`目录包含包含模块初始数据的其他数据文件。数据文件在[*第6章*](B20997_06.xhtml#_idTextAnchor319)，*管理模块数据*中有所解释。'
- en: '`demo/` contains data files with demonstration data, which is useful for tests,
    training, or module evaluation.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`demo/`目录包含带有演示数据的文件，这对于测试、培训或模块评估很有用。'
- en: '`i18n/` is where Odoo will look for the translation `.pot` and `.po` files.
    Refer to [*Chapter 11*](B20997_11.xhtml#_idTextAnchor595), *Internationalization*,
    for further details. These files don’t need to be mentioned in the manifest file.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i18n/`是Odoo查找翻译`.pot`和`.po`文件的位置。有关更多详细信息，请参阅[*第11章*](B20997_11.xhtml#_idTextAnchor595)，*国际化*。这些文件不需要在清单文件中提及。'
- en: '`security/` contains the data files that define access control lists, which
    is usually an `ir.model.access.csv` file and, possibly, an XML file to define
    access *groups and record rules* for row-level security. Take a look at [*Chapter
    10*](B20997_10.xhtml#_idTextAnchor549), *Security Access*, for more details on
    this.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`security/`目录包含定义访问控制列表的数据文件，通常是一个`ir.model.access.csv`文件，以及可能的一个XML文件，用于定义行级安全的*访问组*和*记录规则*。更多关于这方面的信息，请参阅[*第10章*](B20997_10.xhtml#_idTextAnchor549)，*安全访问*。'
- en: '`controllers/` contains the code files for the website controllers and for
    modules providing that kind of feature. Web controllers are covered in [*Chapter
    13*](B20997_13.xhtml#_idTextAnchor697), *Web* *Server Development*.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controllers/` 包含网站控制器和提供此类功能的模块的代码文件。网络控制器在 [*第 13 章*](B20997_13.xhtml#_idTextAnchor697)
    *网络服务器开发* 中有介绍。'
- en: '`static/` is where all web assets are expected to be placed. Unlike other directories,
    this directory name is not just a convention. The files inside this directory
    are public and can be accessed without a user login. This directory mostly contains
    files such as JavaScript, style sheets, and images. They don’t need to be mentioned
    in the module manifest but will have to be referred to in the web template. This
    is discussed in detail in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734), *CMS*
    *Website Development*.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static/` 是所有网络资产预期放置的位置。与其他目录不同，此目录名称不仅仅是一个约定。此目录中的文件是公开的，并且可以在不登录用户的情况下访问。此目录主要包含
    JavaScript、样式表和图像等文件。它们不需要在模块清单中提及，但必须在网络模板中引用。这在 [*第 14 章*](B20997_14.xhtml#_idTextAnchor734)
    *CMS 网站开发* 中有详细讨论。'
- en: '`wizards/` contains all of the files related to wizards. In Odoo, wizards are
    used to hold intermediate data. We learn more about wizards in [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388),
    *Advanced Server-Side* *Development Techniques*.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wizards/` 包含所有与向导相关的文件。在 Odoo 中，向导用于存储中间数据。我们可以在 [*第 8 章*](B20997_08.xhtml#_idTextAnchor388)
    *高级服务器端开发技术* 中了解更多关于向导的信息。'
- en: '`reports/`: Odoo provides a feature to generate PDF documents such as sales
    orders and invoices. This directory holds all the files related to PDF reports.
    We will learn more about PDF reports in [*Chapter 12*](B20997_12.xhtml#_idTextAnchor628),
    *Automation, Workflows, Emails,* *and Printing*.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reports/`：Odoo 提供了一个生成 PDF 文档的功能，例如销售订单和发票。此目录包含所有与 PDF 报告相关的文件。我们将在 [*第 12
    章*](B20997_12.xhtml#_idTextAnchor628) *自动化、工作流程、电子邮件和打印* 中了解更多关于 PDF 报告的信息。'
- en: When adding new files to a module, don’t forget to declare them either in the
    `__manifest__.py` file (for data files) or `__init__.py` file (for code files);
    otherwise, those files will be ignored and won’t be loaded.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当向模块添加新文件时，不要忘记在 `__manifest__.py` 文件（对于数据文件）或 `__init__.py` 文件（对于代码文件）中声明它们；否则，这些文件将被忽略且不会被加载。
- en: Adding models
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加模型
- en: Models define the data structures that will be used by our business applications.
    This recipe shows you how to add a basic model to a module. Models determine the
    logical structure of a database and how data is stored, organized, and manipulated.
    In other words, a model is a table of information that can be linked with other
    tables. A model usually represents a business concept, such as a sales order,
    contact, or product.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 模型定义了我们的业务应用程序将使用的数据结构。这个食谱展示了如何向模块添加一个基本模型。模型决定了数据库的逻辑结构和数据如何存储、组织和管理。换句话说，模型是一个可以与其他表链接的信息表。模型通常代表一个业务概念，例如销售订单、联系人或产品。
- en: Modules contain various elements, such as models, views, data files, web controllers,
    and static web data.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 模块包含各种元素，例如模型、视图、数据文件、网络控制器和静态网络数据。
- en: To create a hostel module, we need to develop a model that represents the hostel.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个宿舍模块，我们需要开发一个代表宿舍的模型。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We should have a module to work with. If you followed the first recipe in this
    chapter, *Creating and installing a new add-on module*, you will have an empty
    module called `my_hostel`. We will use that for our explanation.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个模块来工作。如果你遵循了本章的第一个食谱，*创建和安装新的附加模块*，你将有一个名为 `my_hostel` 的空模块。我们将用它来解释。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To add a new `Model`, we need to add a Python file describing it and then upgrade
    the add-on module (or install it, if this has not already been done). The paths
    that are used are relative to our add-on module’s location (for example, `~/odoo-dev/local-addons/my_hostel/`):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个新的 `模型`，我们需要添加一个描述它的 Python 文件，然后升级附加模块（或者如果尚未完成，则安装它）。所使用的路径相对于我们的附加模块位置（例如，`~/odoo-dev/local-addons/my_hostel/`）：
- en: 'Add a Python file to the `models/hostel.py` module with the following code:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `models/hostel.py` 模块中添加一个 Python 文件，以下代码：
- en: '[PRE9]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add a Python initialization file with code files to be loaded by the `models/__init__.py`
    module with the following code:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 Python 初始化文件，包含要由 `models/__init__.py` 模块加载的代码文件，以下代码：
- en: '[PRE10]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Edit the module’s Python initialization file to have the module load the `models/`
    directory:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑模块的 Python 初始化文件，以便模块加载 `models/` 目录：
- en: '[PRE11]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Upgrade the Odoo module from the command line or the **Apps** menu in the user
    interface. If you look closely at the server log while upgrading the module, you
    should see the following line:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过命令行或用户界面中的**应用**菜单升级Odoo模块。在升级模块时，如果你仔细查看服务器日志，你应该会看到以下行：
- en: '[PRE12]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After this, the new `hostel.hostel` model should be available in our Odoo instance.
    There are two ways to check whether our model has been added to the database.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，新的`hostel.hostel`模型应该在我们的Odoo实例中可用。有两种方法可以检查我们的模型是否已添加到数据库中。
- en: First, you can check it in the Odoo user interface. Activate the developer tools
    and open the menu at `hostel.hostel` model here.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以在Odoo用户界面中检查它。激活开发者工具并在这里打开`hostel.hostel`模型菜单。
- en: 'The second way is to check the table entry in your PostgreSQL database. You
    can search for the `hostel_hostel` table in the database. In the following code
    example, we used `test-17.0` as our database. However, you can replace your database
    name with the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是检查你的PostgreSQL数据库中的表条目。你可以在数据库中搜索`hostel_hostel`表。在以下代码示例中，我们使用了`test-17.0`作为我们的数据库。然而，你可以用以下命令替换你的数据库名称：
- en: '[PRE13]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our first step was to create a Python file where our new module was created.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是创建一个Python文件，在其中创建我们的新模块。
- en: The Odoo framework has its own `ORM` framework provides an abstraction over
    the PostgreSQL database. By inheriting the Odoo Python `Model` class, we can create
    our own model (table). When a new model is defined, it is also added to a central
    model registry. This makes it easier for other modules to make modifications to
    it later.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo框架有自己的`ORM`框架，它提供了对PostgreSQL数据库的抽象。通过继承Odoo Python `Model`类，我们可以创建自己的模型（表）。当定义一个新的模型时，它也会被添加到一个中央模型注册表中。这使得其他模块稍后对其进行修改变得更容易。
- en: Models have a few generic attributes prefixed with an underscore. The most important
    one is `_name`, which provides a unique internal identifier that will be used
    throughout the Odoo instance. The ORM framework will generate the database table
    based on this attribute. In our recipe, we used `_name = 'hostel.hostel'`. Based
    on this attribute, the ORM framework will create a new table called `hostel_hostel`.
    Note that the ORM framework will create a table name by replacing it. with `_`
    in the value of the `_name` attribute. `_description` which provides a model’s
    informal name, we used `_name = 'hostel.hostel'` and `_description='Information
    about hostel'`, and `_description='Information about hostel'` only starts with
    an alphabetical character we can’t start with a number or special symbol character.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 模型有一些以下划线为前缀的通用属性。其中最重要的是`_name`，它提供了一个在整个Odoo实例中使用的唯一内部标识符。ORM框架将根据此属性生成数据库表。在我们的配方中，我们使用了`_name
    = 'hostel.hostel'`。基于此属性，ORM框架将创建一个名为`hostel_hostel`的新表。请注意，ORM框架将通过替换`_`来创建表名。`_description`提供了模型的非正式名称，我们使用了`_name
    = 'hostel.hostel'`和`_description='Information about hostel'`，并且`_description='Information
    about hostel'`只能以字母字符开头，我们不能以数字或特殊符号字符开头。
- en: The `model` fields are defined as class attributes. We began by defining the
    `name` field of the `Char` type. It is convenient for models to have this field
    because, by default, it is used as the record description when referenced by other
    models.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`model`字段被定义为类属性。我们首先定义了`name`字段，它是`Char`类型。对于模型来说，有这个字段很方便，因为默认情况下，当其他模型引用它时，它被用作记录描述。'
- en: We also used an example of a relational field – `state_id`. This defines a many-to-one
    relationship between `Hostel` and `State`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了一个关系字段的例子——`state_id`。这定义了`Hostel`和`State`之间的多对一关系。
- en: There’s much more to say about models, and they will be covered in depth in
    [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118), *Application Models*.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 关于模型还有很多要说的，它们将在[*第4章*](B20997_04.xhtml#_idTextAnchor118)，*应用模型*中深入探讨。
- en: Next, we must make our module aware of this new Python file. This is done by
    the `__init__.py` files. Since we placed the code inside the `models/` subdirectory,
    we need the previous `__init__` file to import that directory, which should, in
    turn, contain another `__init__` file, importing each of the code files there
    (just one, in our case).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须让我们的模块知道这个新的Python文件。这是通过`__init__.py`文件来完成的。由于我们将代码放在了`models/`子目录中，我们需要上一个`__init__`文件来导入该目录，该目录应该反过来包含另一个`__init__`文件，导入那里的每个代码文件（在我们的情况下只有一个）。
- en: Changes to Odoo models are activated by upgrading the module. The Odoo server
    will handle the translation of the `model` class into database structure changes.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 通过升级模块激活Odoo模型的变化。Odoo服务器将处理将`model`类转换为数据库结构变化。
- en: Although no example is provided here, business logic can also be added to these
    Python files, either by adding new methods to the model’s class or by extending
    the existing methods, such as `create()` or `write()`. This is addressed in [*Chapter
    5*](B20997_05.xhtml#_idTextAnchor238), *Basic* *Server-Side Development*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这里没有提供示例，但也可以将这些Python文件添加业务逻辑，无论是通过向模型的类中添加新方法，还是通过扩展现有方法，如`create()`或`write()`。这将在[*第5章*](B20997_05.xhtml#_idTextAnchor238)，*基本*
    *服务器端开发*中讨论。
- en: Adding access security
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加访问安全
- en: When adding a new data model, you need to define who can create, read, update,
    and delete records. When creating a totally new application, this can involve
    defining new user groups. Consequently, if a user doesn’t have these access rights,
    then Odoo will not display your menus and views. In the previous recipe, we accessed
    our menu by converting an `admin` user into a superuser. After completing this
    recipe, you will be able to access menus and views for the `Hostel` module directly
    as an `admin` user.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加新的数据模型时，您需要定义谁可以创建、读取、更新和删除记录。当创建全新的应用程序时，这可能涉及定义新的用户组。因此，如果用户没有这些访问权限，那么Odoo将不会显示您的菜单和视图。在前一个配方中，我们通过将`admin`用户转换为超级用户来访问我们的菜单。完成此配方后，您将能够直接作为`admin`用户访问`Hostel`模块的菜单和视图。
- en: This recipe builds on the `Hostel` model from the previous recipes and defines
    a new security group of users to control who can access or modify the records
    of `Hostel`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方基于前一个配方中的`Hostel`模型，并定义了一个新的用户安全组，以控制谁可以访问或修改`Hostel`的记录。
- en: Getting ready
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The add-on module that implements the `hostel.hostel` model, which was provided
    in the previous recipe, is needed because, in this recipe, we will add the security
    rules for it. The paths that are used are relative to our add-on module location
    (for example, `~/odoo-dev/local-addons/my_hostel/`).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了`hostel.hostel`模型的附加模块，在先前的配方中提供，在本配方中，我们将为它添加安全规则。所使用的路径相对于我们的附加模块位置（例如，`~/odoo-dev/local-addons/my_hostel/`）。
- en: How to do it...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The security rules we want to add to this recipe are as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要添加到这个配方中的安全规则如下：
- en: Everyone will be able to read hostel records.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人都将能够阅读宿舍记录。
- en: A new group of users called **Hostel Manager** will have the right to create,
    read, update, and delete hostel records.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为**宿舍管理员**的新用户组将有权创建、读取、更新和删除宿舍记录。
- en: 'To implement this, you need to perform the following steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，您需要执行以下步骤：
- en: 'Create a file called `security/hostel_security.xml` with the following content:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`security/hostel_security.xml`的文件，内容如下：
- en: '[PRE14]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add a file called `security/ir.model.access.csv` with the following content:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`security/ir.model.access.csv`的文件，内容如下：
- en: '[PRE15]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add both files to the `data` entry of `__manifest__.py`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这两个文件添加到`__manifest__.py`的`data`条目中：
- en: '[PRE16]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The newly defined security rules will be in place once you update the add-on
    in your instance.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您更新实例中的附加组件，新定义的安全规则将生效。
- en: How it works…
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We provide two new data files that we add to the add-on module’s manifest so
    that installing or updating the module will load them in the database:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了两个新的数据文件，我们将它们添加到附加模块的清单中，以便安装或更新模块时在数据库中加载它们：
- en: The `security/hostel_security.xml` file defines a new security group by creating
    a `res.groups` record. We also gave Hostel Manager rights to the `admin` user
    by using its reference ID, `base.user_admin`, so that the admin user will have
    rights to the `hostel.hostel` model.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`security/hostel_security.xml`文件通过创建一个`res.groups`记录来定义一个新的安全组。我们还通过使用其引用ID，`base.user_admin`，赋予宿舍管理员对`admin`用户的权限，这样管理员用户将有权访问`hostel.hostel`模型。'
- en: The `ir.model.access.csv` file associates permissions on models with groups.
    The first line has an empty `group_id:id` column, which means that the rule applies
    to everyone. The last line gives all privileges to members of the group we just
    created.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ir.model.access.csv`文件将模型上的权限与组关联。第一行有一个空的`group_id:id`列，这意味着该规则适用于所有人。最后一行将所有权限授予我们刚刚创建的组的成员。'
- en: The order of the files in the data section of the manifest is important. The
    file for creating the security groups must be loaded before the file listing the
    access rights, as the access rights definition depends on the existence of the
    groups. Since the views can be specific to a security group, we recommend putting
    the group’s definition file in the list to be on the safe side.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件数据部分的文件顺序很重要。创建安全组的文件必须在列出访问权限的文件之前加载，因为访问权限定义依赖于组的存在。由于视图可以是特定于安全组的，我们建议将组的定义文件放在列表中以确保安全。
- en: See also
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: This book has a chapter dedicated to security. For more information on security,
    refer to *Chapter 10*, *Security Access*.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书有一个章节专门介绍安全。有关安全的信息，请参阅第 10 章，*安全访问*。
- en: Adding menu items and views
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加菜单项和视图
- en: Once we have models for our data structure needs, we want a user interface so
    that our users can interact with them. Menus and views play a crucial role in
    structuring and enhancing the user experience. Menus, from a technical perspective,
    are dynamic user interface components that present a structured set of options
    or links, typically allowing users to access various features, functions, or content
    areas within an application. This recipe builds on the `Hostel` model from the
    previous recipe and adds a menu item to display a user interface, featuring list
    and form views.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了满足数据结构需求的数据模型，我们希望有一个用户界面，以便我们的用户可以与之交互。菜单和视图在结构化和增强用户体验方面发挥着至关重要的作用。从技术角度来看，菜单是动态的用户界面组件，它呈现一组结构化的选项或链接，通常允许用户访问应用程序中的各种功能、功能或内容区域。这个菜谱基于前一个菜谱中的
    `Hostel` 模型，并添加了一个菜单项来显示用户界面，包括列表和表单视图。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The add-on module to implement the `hostel.hostel` model, which was provided
    in the previous recipe, is needed. The paths that will be used are relative to
    our add-on module location (for example, `~/odoo-dev/local-addons/my_hostel/`).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 实现之前菜谱中提供的 `hostel.hostel` 模型的附加模块是必需的。我们将使用的路径相对于我们的附加模块位置（例如，`~/odoo-dev/local-addons/my_hostel/`）。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To add a view, we will add an XML file with its definition to the module. Since
    it is a new model, we must also add a menu option for the user to be able to access
    it.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个视图，我们将添加一个包含其定义的 XML 文件到模块中。由于这是一个新模型，我们还必须添加一个菜单选项，以便用户能够访问它。
- en: For models, XML files adding views folder to create a view, action, and menu
    item.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 对于模型，XML 文件添加视图文件夹以创建视图、操作和菜单项。
- en: 'Be aware that the sequence of the following steps is relevant, since some of
    them use references to IDs that were defined in the preceding steps:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下步骤的顺序很重要，因为其中一些步骤使用了对前一步骤中定义的 ID 的引用：
- en: 'Create the XML file to add the data records describing the user interface,
    `views/hostel.xml`:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 XML 文件以添加描述用户界面的数据记录，`views/hostel.xml`：
- en: '[PRE17]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the new data file to the add-on module manifest, `__manifest__.py`, by
    adding it to `views/hostel.xml`:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的数据文件添加到附加模块的清单文件 `__manifest__.py` 中，通过将其添加到 `views/hostel.xml`：
- en: '[PRE18]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the action that opens the views in the `hostel.xml` file:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `hostel.xml` 文件中添加打开视图的操作：
- en: '[PRE19]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the menu items to the `hostel.xml` file, making it visible to users:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将菜单项添加到 `hostel.xml` 文件中，使其对用户可见：
- en: '[PRE20]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add a custom form view to the hostel.xml file:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将自定义表单视图添加到 `hostel.xml` 文件中：
- en: '[PRE21]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add a custom tree (list) view to the `hostel.xml` file:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将自定义树（列表）视图添加到 `hostel.xml` 文件中：
- en: '[PRE22]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add custom `hostel.xml` file:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加自定义的 `hostel.xml` 文件：
- en: '[PRE23]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When a new model is added in Odoo, the user doesn’t have any access rights by
    default. We must define access rights for the new model in order to get access.
    In our example, we haven’t defined any access rights, so the user doesn’t have
    access to our new model. Without access, our menus and views are not visible either.
    Luckily, there is one shortcut! By switching to superuser mode, you can see menus
    for our app without having access rights.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Odoo 中添加新模型时，用户默认没有任何访问权限。我们必须为新模型定义访问权限才能获得访问权限。在我们的例子中，我们没有定义任何访问权限，因此用户无法访问我们的新模型。没有访问权限，我们的菜单和视图也不会可见。幸运的是，有一个快捷方式！通过切换到超级用户模式，您可以在没有访问权限的情况下查看我们的应用程序的菜单。
- en: Accessing Odoo as a superuser
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以超级用户身份访问 Odoo
- en: By converting the `admin` user into a `superuser` type, you can bypass the access
    rights and, therefore, access menus and views without giving default access rights.
    To convert the `admin` user into a superuser, activate **Developer Mode**. After
    doing this, from the developer tool options, click on the **Become** **Superuser**
    option.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`admin`用户转换为`superuser`类型，您可以绕过访问权限，因此可以在不提供默认访问权限的情况下访问菜单和视图。要将`admin`用户转换为超级用户，请激活**开发者模式**。完成此操作后，从开发者工具选项中，点击**成为超级用户**选项。
- en: As a developer preference, try everything without becoming a superuser; it will
    be very helpful to learn Odoo in depth. By becoming a Superuser, all security
    access and record rule checks will be bypassed.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者偏好，尝试在不成为超级用户的情况下做所有事情；这将非常有助于深入学习Odoo。通过成为超级用户，所有安全访问和记录规则检查都将被绕过。
- en: 'The following screenshot has been provided as a reference:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图已提供作为参考：
- en: '![Figure 3.3 – The option to activate superuser mode](img/B20997_03_3.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图3.3 – 激活超级用户模式的选项](img/B20997_03_3.jpg)'
- en: Figure 3.3 – The option to activate superuser mode
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – 激活超级用户模式的选项
- en: 'After becoming a superuser, your menu will have a striped background, as shown
    in the following screenshot:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 成为超级用户后，您的菜单将具有条纹背景，如下面的截图所示：
- en: '![Figure 3.4 – Superuser mode activated](img/B20997_03_4.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图3.4 – 激活超级用户模式](img/B20997_03_4.jpg)'
- en: Figure 3.4 – Superuser mode activated
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 激活超级用户模式
- en: 'If you try and upgrade the module now, you should be able to see a new menu
    option (you might need to refresh your web browser). Clicking on the **Hostel**
    menu will open a list view for hostel models, as shown in the following screenshot:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在尝试升级模块，您应该能够看到一个新的菜单选项（您可能需要刷新您的网络浏览器）。点击**宿舍**菜单将打开宿舍模型的列表视图，如下面的截图所示：
- en: '![Figure 3.5 – The menu to access Hostel](img/B20997_03_5.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5 – 访问宿舍的菜单](img/B20997_03_5.jpg)'
- en: Figure 3.5 – The menu to access Hostel
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 访问宿舍的菜单
- en: How it works...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: At a low level, the user interface is defined by records stored in special models.
    The first two steps create an empty XML file to define the records to be loaded,
    and then we add them to the module’s list of data files to be installed.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在较低级别，用户界面由存储在特殊模型中的记录定义。前两个步骤创建了一个空的XML文件来定义要加载的记录，然后我们将它们添加到模块的数据文件列表中，以便安装。
- en: Data files can be placed anywhere inside the module directory, but the convention
    is for the user interface to be defined inside a `views/` subdirectory. Usually,
    the name of these files is based on the name of the model. In our case, we create
    the user interface for the `hostel.hostel` model, so we created the `views/hostel.xml`
    file.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 数据文件可以放置在模块目录的任何位置，但惯例是在`views/`子目录内定义用户界面。通常，这些文件的名称基于模型的名称。在我们的例子中，我们为`hostel.hostel`模型创建了用户界面，因此我们创建了`views/hostel.xml`文件。
- en: The next step is to define a window action to display the user interface in
    the main area of the web client. The action has a target model defined by `res_model`,
    and the `name` attribute is used to display the title to the user when the user
    opens the action. These are just the basic attributes. The window action supports
    additional attributes, giving much more control over how the views are rendered,
    such as what views are to be displayed, adding filters on the records that are
    available, or setting default values. These are discussed in detail in [*Chapter
    9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是定义一个窗口操作，以在Web客户端的主区域显示用户界面。该操作由`res_model`定义的目标模型，并且`name`属性用于在用户打开操作时向用户显示标题。这些只是基本属性。窗口操作支持其他属性，提供了更多控制视图渲染方式的能力，例如显示哪些视图，对可用的记录添加过滤器，或设置默认值。这些内容在[*第9章*](B20997_09.xhtml#_idTextAnchor446)，*后端视图*中详细讨论。
- en: In general, data records are defined using a `<record>` tag, and we created
    a record for the `ir.actions.act_window` model in our example. This will create
    the window actions.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，数据记录使用`<record>`标签定义，我们在我们的例子中为`ir.actions.act_window`模型创建了一个记录。这将创建窗口操作。
- en: Similarly, menu items are stored in the `ir.ui.menu` model, and we can create
    these with the `<record>` tag. However, there is a shortcut tag called `<menuitem>`
    available in Odoo, so we used this in our example.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，菜单项存储在`ir.ui.menu`模型中，我们可以使用`<record>`标签创建这些。然而，Odoo中有一个名为`<menuitem>`的快捷标签，因此我们在我们的例子中使用了这个标签。
- en: 'These are the menu item’s main attributes:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是菜单项的主要属性：
- en: '`name`: This is the menu item text to be displayed.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是要显示的菜单项文本。'
- en: '`action`: This is the identifier of the action to be executed. We use the ID
    of the window action we created in the previous step.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`：这是要执行的操作的标识符。我们使用上一步中创建的窗口操作的 ID。'
- en: '`sequence`: This is used to set the order in which the menu items of the same
    level are presented.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sequence`：用于设置同一级别菜单项的显示顺序。'
- en: '`parent`: This is the identifier for the parent menu item. Our example menu
    item had no parent, meaning that it would be displayed at the top of the menu.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent`：这是父菜单项的标识符。在我们的示例菜单项中没有父项，这意味着它将显示在菜单的顶部。'
- en: '`web_icon`: This attribute is used to show the icon for the menu. This icon
    is only displayed in the Odoo Enterprise edition.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web_icon`：此属性用于显示菜单的图标。此图标仅在 Odoo 企业版中显示。'
- en: At this point, we haven’t defined any of the views in our module. However, if
    you upgrade your module at this stage, Odoo will automatically create them on
    the fly. Nevertheless, we will surely want to control how our views look, so in
    the next two steps, a form and a tree view are created.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们还没有在我们的模块中定义任何视图。然而，如果你在这个阶段升级你的模块，Odoo 将会自动动态创建它们。尽管如此，我们肯定希望控制我们的视图外观，所以接下来两个步骤将创建一个表单视图和一个树形视图。
- en: 'Both views are defined with a record on the `ir.ui.view` model. The attributes
    we used are as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个视图都是通过 `ir.ui.view` 模型上的记录定义的。我们使用的属性如下：
- en: '`name`: This is a title identifying the view. In the source code of Odoo, you
    will find the XML ID repeated here, but if you want, you can add a more human-readable
    title as a name.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是一个标识视图的标题。在 Odoo 的源代码中，你将在这里找到重复的 XML ID，但如果你愿意，你可以添加一个更易读的标题作为名称。'
- en: If the `name` field is omitted, Odoo will generate one using the model name
    and the type of view. This is perfectly fine for the standard view of a new model.
    It is recommended to have a more explicit name when you extend a view, as this
    will make your life easier when you look for a specific view in the user interface
    of Odoo.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果省略了 `name` 字段，Odoo 将使用模型名称和视图类型生成一个。这对于新模型的常规视图来说完全没问题。当你扩展视图时，建议有一个更明确的名称，因为这将在你在
    Odoo 用户界面中查找特定视图时使你的生活更容易。
- en: '`model`: This is the internal identifier of the target model, as defined in
    its `_name` attribute.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model`：这是目标模型的内部标识符，如在其 `_name` 属性中定义的那样。'
- en: '`arch`: This is the view architecture, where its structure is actually defined.
    This is where different types of views differ from each other.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arch`：这是视图架构，其中其结构实际上被定义。这是不同类型的视图彼此区分的地方。'
- en: Form views are defined with a top `<form>` element, and its canvas is a two-column
    grid. Inside the form, `<group>` elements are used to vertically compose fields.
    Two groups result in two columns with fields, which are added using the `<field>`
    element. Fields use a default widget according to their data type, but a specific
    widget can be used with the help of the `widget` attribute.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 表单视图通过顶部的 `<form>` 元素定义，其画布是一个两列网格。在表单内部，使用 `<group>` 元素垂直组合字段。两个组产生两个带有字段的列，这些字段是通过
    `<field>` 元素添加的。字段使用默认的小部件根据其数据类型，但可以使用 `widget` 属性使用特定的小部件。
- en: Tree views are simpler; they are defined with a top `<tree>` element that contains
    `<field>` elements for the columns to be displayed.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 树形视图更简单；它们通过包含要显示的列的 `<field>` 元素的顶部 `<tree>` 元素定义。
- en: Finally, we added a `<search>` top-level tag, we can have the `<field>` and
    `<filter>` elements. Field elements are additional fields that can be searched
    from the input given in the search view. Filter elements are predefined filter
    conditions that can be activated with a click. These subjects are discussed in
    detail in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加了一个 `<search>` 最高级标签，我们可以有 `<field>` 和 `<filter>` 元素。字段元素是可以从搜索视图中输入的额外字段，而过滤器元素是预定义的过滤器条件，可以通过点击激活。这些主题在[*第
    9 章*](B20997_09.xhtml#_idTextAnchor446)，“后端视图”中详细讨论。
- en: Using the scaffold command to create a module
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `scaffold` 命令创建模块
- en: When creating a new Odoo module, there is some boilerplate code that needs to
    be set up. To help quick-start new modules, Odoo provides the `scaffold` command.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个新的 Odoo 模块时，有一些样板代码需要设置。为了帮助快速启动新模块，Odoo 提供了 `scaffold` 命令。
- en: This recipe shows you how to create a new module using the `scaffold` command,
    which will put in place a skeleton of the file for directories to use.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何使用 `scaffold` 命令创建一个新的模块，这将为目录放置文件框架。
- en: Getting ready
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will create the new add-on module in a custom module directory, so we need
    Odoo installed and a directory for our custom modules. We will assume that Odoo
    is installed at `~/odoo-dev/odoo` and that our custom modules will be placed in
    the `~/``odoo-dev/local-addons` directory.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在自定义模块目录中创建新的附加模块，因此我们需要安装Odoo并创建一个自定义模块的目录。我们将假设Odoo安装于`~/odoo-dev/odoo`，并且我们的自定义模块将被放置在`~/odoo-dev/local-addons`目录中。
- en: How to do it...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will use the `scaffold` command to create boilerplate code. Perform the
    following steps to create new a module using the `scaffold` command:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`scaffold`命令来创建样板代码。按照以下步骤使用`scaffold`命令创建新模块：
- en: 'Change the working directory to where we will want our module to be. This can
    be whatever directory you choose, but it needs to be within an add-on path to
    be useful. Following the directory choices that we used in the previous recipe,
    this should be as follows:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工作目录更改为我们希望模块所在的位置。这可以是您选择的任何目录，但它需要位于附加路径内才有用。根据我们在上一个菜谱中使用的目录选择，这应该是以下内容：
- en: '[PRE24]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: __manifest__.py default module manifest provided and change the relevant values.
    You will surely want to at least change the module title in the name key.
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`__manifest__.py`默认模块清单提供并更改相关值。您肯定至少想要更改名称键中的模块标题。'
- en: '[PRE25]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is what the generated add-on module should look like:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是生成的附加模块应该看起来像什么：
- en: '[PRE26]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You should now edit the various generated files and adapt them to the purpose
    of your new module.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该编辑各种生成的文件，并将它们适应您新模块的目的。
- en: How it works...
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `scaffold` command creates the skeleton for a new module based on a template.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaffold`命令根据模板创建新模块的骨架。'
- en: By default, the new module is created in the current working directory, but
    we can provide a specific directory to create the module, passing it as an additional
    parameter.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，新模块将在当前工作目录中创建，但我们可以提供一个特定的目录来创建模块，通过传递一个额外的参数来实现。
- en: 'Consider the following example:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE27]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: A `default` template is used, but a `theme` template is also available for website
    theme authoring. To choose a specific template, the `-t` option can be used. We
    are also allowed to use a path for a directory with a template.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 使用了一个`default`模板，但还有一个用于网站主题编写的`theme`模板可用。要选择特定的模板，可以使用`-t`选项。我们还可以使用一个包含模板的目录的路径。
- en: 'This means that we can use our own templates with the `scaffold` command. The
    built-in templates can be found in the `/odoo/cli/templates` Odoo subdirectory.
    To use our own template, we can use something like the following command:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以使用自己的模板与`scaffold`命令一起使用。内置模板可以在`/odoo/cli/templates` Odoo子目录中找到。要使用自己的模板，我们可以使用以下类似命令：
- en: '[PRE28]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: By default, Odoo has two templates in the `/odoo/cli/templates` directory. One
    is the `default` template, and the second is the `theme` template. However, you
    can create your own templates or use them with `-t`, as shown in the preceding
    command.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Odoo在`/odoo/cli/templates`目录中有两个模板。一个是`default`模板，另一个是`theme`模板。然而，您可以创建自己的模板或使用`-t`选项，如前述命令所示。
