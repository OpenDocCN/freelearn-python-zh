["```py\n$ python setup.py install --user \n\n```", "```py\n    from unittest import TestCase\n    import toy\n\n    class test_global_function(TestCase):\n        def test_positive(self):\n            self.assertEqual(toy.global_function(3), 4)\n\n        def test_negative(self):\n            self.assertEqual(toy.global_function(-3), -2)\n\n        def test_large(self):\n            self.assertEqual(toy.global_function(2**13), 2**13 + 1)\n\n    class test_example_class(TestCase):\n        def test_timestwo(self):\n            example = toy.example_class(5)\n            self.assertEqual(example.timestwo(), 10)\n\n        def test_repr(self):\n            example = toy.example_class(7)\n            self.assertEqual(repr(example), '<example param=\"7\">')\n    ```", "```py\n    def global_function(x):\n        r\"\"\"\n        >>> global_function(5)\n        6\n        \"\"\"\n        return x + 1\n\n    class example_class:\n        def __init__(self, param):\n            self.param = param\n\n        def timestwo(self):\n            return self.param * 2\n\n        def __repr__(self):\n            return '<example param=\"%s\">' % self.param\n    if __name__ == '__main__':\n        import doctest\n        doctest.testmod()\n    ```", "```py\n    $ nosetests --with-coverage --cover-erase \n\n    ```", "```py\n    from bzrlib import branch\n    from os.path import join, sep\n    from os import chdir\n    from subprocess import call\n\n    def run_nose(local, master, old_num, old_id, new_num, new_id):\n        try:\n            base = local.base\n        except AttributeError:\n            base = master.base\n\n        if not base.startswith('file://'):\n            return\n        try:\n            chdir(join(sep, *base[7:].split('/')))\n        except OSError:\n            return\n\n        call(['nosetests'])\n\n    branch.Branch.hooks.install_named_hook('post_commit',\n                                           run_nose,\n                                           'Runs Nose after eachcommit')\n    ```", "```py\n    from unittest import TestCase\n\n    class test_simple(TestCase):\n        def test_one(self):\n            self.assertNotEqual(\"Testing\", \"Hooks\")\n\n        def test_two(self):\n            self.assertEqual(\"Same\", \"Same\")\n    ```", "```py\n    $ bzr init\n    $ bzr add\n    $ bzr commit\n\n    ```", "```py\n    $ hg init\n\n    ```", "```py\n    [hooks]\n    commit = nosetests\n    ```", "```py\n    from unittest import TestCase\n\n    class test_simple(TestCase):\n        def test_one(self):\n            self.assertNotEqual(\"Testing\", \"Hooks\")\n\n        def test_two(self):\n            self.assertEqual(\"Same\", \"Same\")\n    ```", "```py\n\n    $ hg add\n    $ hg commit\n\n    ```", "```py\n    $ git init\n\n    ```", "```py\n    #!/bin/sh\n    nosetests\n    ```", "```py\n    @echo off\n    nosetests\n    ```", "```py\n    from unittest import TestCase\n\n    class test_simple(TestCase):\n        def test_one(self):\n            self.assertNotEqual(\"Testing\", \"Hooks\")\n\n        def test_two(self):\n            self.assertEqual(\"Same\", \"Same\")\n    ```", "```py\n    $ git add test_simple.py\n    $ git commit -a\n\n    ```", "```py\n    $ darcs initialize\n\n    ```", "```py\n    from unittest import TestCase\n\n    class test_simple(TestCase):\n        def test_one(self):\n            self.assertNotEqual(\"Testing\", \"Hooks\")\n\n        def test_two(self):\n            self.assertEqual(\"Same\", \"Same\")\n    ```", "```py\n    $ darcs add test_simple.py\n\n    ```", "```py\n\n    $ darcs record --posthook=nosetests\n\n    ```", "```py\n    record posthook nosetests\n    ```", "```py\n    from unittest import TestCase\n\n    class test_simple(TestCase):\n        def test_one(self):\n            self.assertNotEqual(\"Testing\", \"Hooks\")\n\n        def test_two(self):\n            self.assertEqual(\"Same\", \"Same!\")\n    ```", "```py\n    darcs record\n\n    ```", "```py\n    $ svnadmin create svnrepo/\n\n    ```", "```py\n    testuser = testpass\n    ```", "```py\n    svnserve -d -r ..\n\n    ```", "```py\n    from unittest import TestCase\n\n    class test_simple(TestCase):\n        def test_one(self):\n            self.assertNotEqual(\"Testing\", \"Hooks\")\n\n        def test_two(self):\n            self.assertEqual(\"Same\", \"Same\")\n    ```", "```py\n    $ svn import --username=testuser --password=testpass svn://localhost/svnrepo/\n\n    ```", "```py\n    $ svn checkout --username=testuser --password=testpass svn://localhost/svnrepo/ svn\n\n    ```", "```py\n    #!/bin/sh\n    REPO=\"$1\"\n\n    if /usr/bin/test -e \"$REPO/working\"; then\n        /usr/bin/svn update --username=testuser --password=testpass \"$REPO/working/\";\n    else\n        /usr/bin/svn checkout --username=testuser --password=testpass svn://localhost/svnrepo/ \"$REPO/working/\";\n    fi\n\n    cd \"$REPO/working/\"\n\n    exec /usr/bin/nosetests\n    ```", "```py\n    from unittest import TestCase\n\n    class test_simple(TestCase):\n        def test_one(self):\n            self.assertNotEqual(\"Testing\", \"Hooks\")\n\n        def test_two(self):\n            self.assertEqual(\"Same\", \"Same!\")\n    ```", "```py\n    $ svn commit --username=testuser --password=testpass\n\n    ```", "```py\n    $ buildbot create-master <directory>\n\n    ```", "```py\n    $ buildbot create-slave <directory> <host:port> <name> <password>\n\n    ```", "```py\n    $ buildbot start <directory>\n\n    ```", "```py\n    # -*- python -*-\n    # ex: set syntax=python:\n\n    c = BuildmasterConfig = {}\n\n    c['projectName'] = \"<replace with project name>\"\n    c['projectURL'] = \"<replace with project url>\"\n    c['buildbotURL'] = \"http://<replace with master url>:8010/\"\n\n    c['status'] = []\n    from buildbot.status import html\n    c['status'].append(html.WebStatus(http_port=8010,\n                                      allowForce=True))\n\n    c['slavePortnum'] = 9989\n\n    from buildbot.buildslave import BuildSlave\n    c['slaves'] = [\n        BuildSlave(\"bot1name\", \"bot1passwd\"),\n        ]\n\n    from buildbot.changes.pb import PBChangeSource\n    c['change_source'] = PBChangeSource()\n\n    from buildbot.scheduler import Scheduler\n    c['schedulers'] = []\n    c['schedulers'].append(Scheduler(name=\"all\", branch=None,\n                                     treeStableTimer=2 * 60,\n                                     builderNames=[\"buildbot-full\"]))\n\n    from buildbot.process import factory\n    from buildbot.steps.source import Bzr\n    from buildbot.steps.shell import Test\n    f1 = factory.BuildFactory()\n    f1.addStep(Bzr(repourl=\"<replace with repository url>\"))\n    f1.addStep(Test(command = 'nosetests'))\n\n    b1 = {'name': \"buildbot-full\",\n          'slavename': \"bot1name\",\n          'builddir': \"full\",\n          'factory': f1,\n          }\n    c['builders'] = [b1]\n    ```", "```py\n    [<your repository path>]\n    buildbot_on = change\n    buildbot_server = <internet address of your buildmaster>\n    buildbot_port = 9989\n    ```", "```py\nf1.addStep(Test(command = 'nosetests'))\n```", "```py\nc['schedulers'].append(Scheduler(name=\"all\", branch=None,\n                                 treeStableTimer=2 * 60,\n                                 builderNames=[\"buildbot-full\"]))\n```"]