- en: '*Chapter 6*: Implementing Reflection on Python Objects'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：在Python对象上实现反射'
- en: In this chapter, we will look at reflection in Python 3 and understand how it
    is useful in metaprogramming. **Reflection** is a continuation of introspection,
    or it can be looked upon as a concept where we can make use of the information
    we learn from the introspection of properties or attributes of objects in Python
    and apply them to manipulate the objects, and so perform metaprogramming.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Python 3中的反射，并了解它在元编程中的有用性。**反射**是内省的延续，或者可以将其视为一个概念，我们可以利用从Python对象的属性或属性的内省中学习到的信息来操纵对象，从而进行元编程。
- en: Why reflection? As we know from the previous chapter, introspection is an information-gathering
    process for Python objects. Reflection is the process of utilizing the information
    gathered from objects through introspection, and in turn, performing generic operations
    on them by manipulating them externally to perform metaprogramming.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么需要反射？正如我们从上一章所知，内省是Python对象的收集信息过程。反射是通过内省从对象中获取信息的过程，然后通过外部操作它们来执行通用操作，从而进行元编程。
- en: Throughout this chapter, we will look at implementing reflection using each
    function that helped us introspect objects in the previous chapter and perform
    metaprogramming on the objects we use in our programs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将查看使用每个在上一章帮助我们内省对象的函数来实现反射，并在我们的程序中使用的对象上进行元编程。
- en: 'In this chapter, we will take a look at the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主要主题：
- en: Introducing built-in functions used in reflection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍在反射中使用的内置函数
- en: Using `id` to delete duplicates
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用id删除重复项
- en: Using `callable` to dynamically check and generate methods
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `callable` 动态检查和生成方法
- en: Using `hasattr` to set values
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `hasattr` 设置值
- en: Using `isinstance` to modify an object
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `isinstance` 修改一个对象
- en: Using `issubclass` to modify a class
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `issubclass` 修改一个类
- en: Applying `property` on a coupon
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在优惠券上应用 `property`
- en: By the end of this chapter, you should be able to apply built-in functions to
    reflect on Python objects, apply them to examples, and use them to generate or
    modify code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够应用内置函数来反射Python对象，将它们应用于示例，并使用它们来生成或修改代码。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code examples shared in this chapter are available on GitHub for this chapter
    here: [https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter06](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter06).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中分享的代码示例可在GitHub上找到：[https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter06](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter06).
- en: Introducing built-in functions used in reflection
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍在反射中使用的内置函数
- en: To understand reflection and the usage of Python’s built-in functions to perform
    reflection, we will continue making use of our core example of *ABC Megamart*
    throughout this chapter. We will be specifically looking at the concept and examples
    based on coupons in a retail store throughout this chapter. Coupons are a technique
    used by retail stores or manufacturers to promote their products among consumers.
    Coupons are generated and posted through various modes of advertisements, and
    they are used to attract customers to a specific store or product.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解反射以及使用Python的内置函数进行反射的使用，我们将继续在本章中使用我们的核心示例 *ABC Megamart*。我们将具体探讨本章中基于零售店优惠券的概念和示例。优惠券是零售店或制造商用来在消费者中推广其产品的技术。优惠券通过各种广告方式生成和发布，并用于吸引顾客到特定的商店或产品。
- en: 'We will make use of the same set of built-in functions as in introspection,
    to apply reflection on Python objects:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与内省相同的内置函数集，以对Python对象进行反射：
- en: '`id()`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id()`'
- en: '`eval()`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eval()`'
- en: '`callable()`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable()`'
- en: '`hastattr()`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hastattr()`'
- en: '`getattr()`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getattr()`'
- en: '`isinstance()`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isinstance()`'
- en: '`issubclass()`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`issubclass()`'
- en: '`property()`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`property()`'
- en: Reflection on Python objects helps in the metaprogramming of these objects using
    the built-in functions that can introspect Python objects, and we will look at
    some examples for these in this chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对Python对象的反射有助于使用内置函数进行元编程，这些函数可以内省Python对象，我们将在本章中查看一些示例。
- en: Using id to delete duplicates
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用id删除重复项
- en: We reviewed the `id` function in the previous chapter, which covered introspection.
    In Python 3, `id` is used to identify an object using the object’s memory address.
    Identifying `id` of an object can be used to reflect on an object and avoid redundancies
    or errors that can possibly occur while using an object throughout a program.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中回顾了 `id` 函数，它涵盖了内省。在 Python 3 中，`id` 用于通过对象的内存地址来识别对象。识别对象的 `id` 可以用来反思对象，并避免在使用对象时可能发生的冗余或错误。
- en: 'To understand this further, we will be creating a class named `Coupon`, which
    generates a unique random coupon ID and prints a coupon for any product that is
    provided as input. In the following code, we will start with creating a class
    named `Coupon` and will be adding the coupon details as attributes. We will also
    create a method named `generate_coupon` to print five coupons for a product along
    with its unique random coupon ID:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步理解这一点，我们将创建一个名为 `Coupon` 的类，该类生成唯一的随机优惠券 ID，并打印出任何作为输入提供的产品优惠券。在下面的代码中，我们将从创建一个名为
    `Coupon` 的类开始，并将添加优惠券详情作为属性。我们还将创建一个名为 `generate_coupon` 的方法，用于打印产品的五个优惠券及其唯一的随机优惠券
    ID：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let’s now create a `Coupon1` variable and assign the `Coupon` class to it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个 `Coupon1` 变量并将 `Coupon` 类分配给它：
- en: '[PRE23]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this case, we are intentionally assigning the `Coupon` class to a variable
    to demonstrate the usage of the `id` function. Ideally, this function will come
    in handy to debug and ensure when the class is actually assigned unintentionally
    and thus leading to issues later on in the code. At this point in time, let’s
    assume that the assignment of the `Coupon` class to a variable is unintentional.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们有意将 `Coupon` 类分配给一个变量以演示 `id` 函数的使用。理想情况下，这个函数将非常有用，用于调试并确保类实际上被无意中分配，从而在代码的后续部分导致问题。到目前为止，让我们假设将
    `Coupon` 类分配给变量的操作是无意的。
- en: Let’s look at how to identify and resolve such unintentional assignments of
    a class and review the coupon generation results if `Coupon1` was called by some
    other object when `Coupon` was the only class that should have been available
    to generate the coupons.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何识别和解决这种无意中的类分配，并回顾如果 `Coupon` 是唯一应该可用于生成优惠券的类时，当调用 `Coupon1` 时优惠券生成结果。
- en: 'In the preceding `Coupon` class, the expectation was to generate only five
    coupons for a product with unique random coupon identifiers. Since we have assigned
    the class to a variable, the class identifier is also assigned to the variable:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 `Coupon` 类中，预期只为具有唯一随机优惠券标识符的产品生成五个优惠券。由于我们已经将类分配给了一个变量，类标识符也被分配给了该变量：
- en: '[PRE24]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let’s now call the `generate_coupon` method of the `Coupon` class along with
    its attributes and look at the results:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们调用 `Coupon` 类的 `generate_coupon` 方法及其属性，并查看结果：
- en: '[PRE28]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output for coupon 1 is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券 1 的输出如下：
- en: '[PRE29]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The output for coupon 2 is as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券 2 的输出如下：
- en: '[PRE38]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The output for coupon 3 is as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券 3 的输出如下：
- en: '[PRE47]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The output for coupon 4 is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券 4 的输出如下：
- en: '[PRE56]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The output for coupon 5 is as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券 5 的输出如下：
- en: '[PRE65]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Calling the preceding method resulted in the generation of five unique coupons
    for the potato chips product. Coupon identifiers are unique and should not be
    regenerated at any other part of the code in the future; therefore, the preceding
    method will be called only once in the code. Since we have already assigned the
    `Coupon` class to another variable named `Coupon1`, let’s look at what will happen
    if `Coupon1` is called in some other part of the code unintentionally:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 调用前面的方法生成了薯片产品的五个独特优惠券。优惠券标识符是唯一的，未来代码的任何其他部分都不应重新生成；因此，前面的方法在代码中只调用一次。由于我们已经将
    `Coupon` 类分配给另一个名为 `Coupon1` 的变量，让我们看看如果无意中在代码的其他部分调用 `Coupon1` 会发生什么：
- en: '[PRE74]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The output for coupon 1 is as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券 1 的输出如下：
- en: '[PRE75]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The output for coupon 2 is as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券 2 的输出如下：
- en: '[PRE84]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The output for coupon 3 is as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券 3 的输出如下：
- en: '[PRE93]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'The output for coupon 4 is as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券 4 的输出如下：
- en: '[PRE102]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'The output for coupon 5 is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券 5 的输出如下：
- en: '[PRE111]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: In this example, `Coupon1` should not be called in the code since calling it
    would generate duplicate coupons, possibly with the same IDs. This might lead
    to the creation of five more coupons for the same product, which is not required;
    among these, two of them would be duplicates with coupon identifiers `1` and `8`.
    This leads to making coupons `1` and `8` void when distributed to consumers since
    each coupon is expected to have one unique identifier to redeem it.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，代码中不应调用`Coupon1`，因为调用它将生成重复的优惠券，可能具有相同的ID。这可能导致为同一产品创建五个额外的优惠券，这是不必要的；在这些优惠券中，有两个将是重复的，具有优惠券标识符`1`和`8`。这导致在分发给消费者时使优惠券`1`和`8`失效，因为每个优惠券都应有一个唯一的标识符以供兑换。
- en: 'Let’s now look at how to resolve this issue by developing a function named
    `delete_duplicates` that checks and deletes such duplicate assignments of the
    `Coupon` class. This function looks at the list of Python objects in the directory
    that has duplicates and deletes the duplicates of classes. Refer to the following
    code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何通过开发一个名为`delete_duplicates`的函数来解决这个问题，该函数检查并删除此类重复分配。该函数查看目录中具有重复项的Python对象列表，并删除类的重复项。请参考以下代码：
- en: '[PRE120]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: The first three `for` loops in the preceding code were previously discussed
    in the *Debug unintentional assignments using id* section in the previous chapter,
    which covered introspection. The last `for` loop checks whether duplicate items
    are present in the dictionary named `dupe_set`, and deletes the duplicate variables
    only and not the actual classes.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码中的前三个`for`循环在上一章的*使用id调试意外分配*部分已有讨论，该部分涵盖了内省。最后一个`for`循环检查名为`dupe_set`的字典中是否存在重复项，并且只删除重复变量，而不是实际的类。
- en: 'Calling the preceding function results in the deletion of the duplicate `Coupon1`
    variable:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 调用前面的函数会导致删除重复的`Coupon1`变量：
- en: '[PRE147]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Checking whether `Coupon1` still exists results in the following error:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`Coupon1`是否仍然存在会导致以下错误：
- en: '![Figure 6.1 – Error on calling Coupon1 after it is deleted ](img/Figure_6.1_B13426.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – 删除`Coupon1`后调用错误](img/Figure_6.1_B13426.jpg)'
- en: Figure 6.1 – Error on calling Coupon1 after it is deleted
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 删除`Coupon1`后调用错误
- en: The preceding error confirms that the duplicate variable was deleted by the
    `delete_duplicates` function. In the following section, we will look at applying
    reflection using the function named `callable`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的错误确认了重复变量已被`delete_duplicates`函数删除。在下一节中，我们将探讨使用名为`callable`的函数应用反射。
- en: Using callable to dynamically check and generate methods
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`callable`动态检查和生成方法
- en: We will now look into another familiar function named `callable` to check on
    how it can be used to perform reflection on an object.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将探讨另一个熟悉的功能`callable`，看看它如何被用来对一个对象进行反射。
- en: Note
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A class, method, or a function is callable in Python, while class objects or
    variables are not callable.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，类、方法或函数是可调用的，而类对象或变量不是可调用的。
- en: 'In this example, we will check whether a class is callable, and if it returns
    `true`, we will dynamically add a method to the class. To test the usage of the
    `callable` function, we will first create a coupon class and name it `SimpleCoupon`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将检查一个类是否可调用，如果返回`true`，我们将动态地向该类添加一个方法。为了测试`callable`函数的用法，我们将首先创建一个优惠券类，并将其命名为`SimpleCoupon`：
- en: '[PRE153]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Let’s check whether the preceding class is callable:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查前面的类是否可调用：
- en: '[PRE155]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'In the following code, we will create a function that generates another function
    if called. We will create a `create_coupon` function that, in turn, creates a
    `generate_coupon` function or method when called:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们将创建一个函数，如果被调用，将生成另一个函数。我们将创建一个`create_coupon`函数，当被调用时，它将创建一个`generate_coupon`函数或方法：
- en: '[PRE157]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'Let’s now check whether the `SimpleCoupon` class is callable and if it is callable,
    we will add a `coupon_details` variable to provide all the required input parameters
    to initialize the call:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在检查`SimpleCoupon`类是否可调用，如果它是可调用的，我们将添加一个`coupon_details`变量，以提供所有必要的输入参数来初始化调用：
- en: '[PRE175]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'In the next step, let’s check on how to create a method dynamically and add
    it to the class if the class is callable. To add the `generate_coupon` method
    to the `SimpleCoupon` class, let’s call the `create_coupon` function:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，让我们检查如何动态创建一个方法并将其添加到类中，如果该类是可调用的。为了将`generate_coupon`方法添加到`SimpleCoupon`类中，让我们调用`create_coupon`函数：
- en: '[PRE183]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'After adding the `generate_coupon` method, we can run the method as follows
    and check the results:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了`generate_coupon`方法之后，我们可以按照以下方式运行该方法并检查结果：
- en: '[PRE185]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'The output for coupon 1 is as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券1的输出如下：
- en: '[PRE186]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'The output for coupon 2 is as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券2的输出如下：
- en: '[PRE195]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'The output for coupon 3 is as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 优惠券3的输出如下：
- en: '[PRE204]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: In this section, we have looked at how to make use of `callable` to modify a
    class and add attributes and methods to a class by externally verifying whether
    the class is callable. We have successfully verified whether the `SimpleCoupon`
    class is callable and then we have also added a `coupon_details` list and a `generate_coupon`
    method to the class. This explains the use of `callable` as a built-in function
    in handling reflection on Python objects.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用`callable`来修改一个类，并通过外部验证类是否可调用来向类添加属性和方法。我们已经成功验证了`SimpleCoupon`类是否可调用的，并且我们还向该类添加了一个`coupon_details`列表和一个`generate_coupon`方法。这解释了`callable`作为处理Python对象反射的内置函数的使用。
- en: With this understanding, we will look at how the `hasattr` function helps in
    applying reflection on Python objects.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种理解，我们将探讨`hasattr`函数如何帮助在Python对象上应用反射。
- en: Using hasattr to set values
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`hasattr`设置值
- en: We will now look into the `hasattr` function, which can be used to check whether
    a Python object has attributes. Using this function as a condition to test the
    objects, we can apply reflection on objects externally.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将深入研究`hasattr`函数，该函数可以用来检查Python对象是否具有属性。使用这个函数作为条件来测试对象，我们可以对外部应用反射。
- en: 'In this example, we will look at creating custom coupons by changing one of
    its variables using the `hasattr` function. The classes and methods throughout
    this chapter are used to understand reflection with relevant examples explained
    under each section. We will now create another class named `CustomCoupon`. We
    will add and define class attributes to this class within the class itself and
    we will be adding a method to generate coupons:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将通过使用`hasattr`函数更改其中一个变量来创建自定义优惠券。本章中的类和方法用于通过相关示例来理解反射。现在我们将创建另一个名为`CustomCoupon`的类。我们将在类内部添加并定义这个类的属性，并且我们将添加一个生成优惠券的方法：
- en: '[PRE213]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'Look at three attributes of the preceding class – `source`, `manufacturer`,
    and `store`. If we want to change the behavior of these attributes from outside
    the class, we can do so by first checking whether the class has these attributes,
    and when the attributes are present, we can then modify the behavior of these
    attributes. Let’s look at how to perform this using the `hasattr` function. We
    will first start with creating an object for the class:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下前面类中的三个属性——`source`、`manufacturer`和`store`。如果我们想从类外部改变这些属性的行为，我们可以通过首先检查类是否具有这些属性来实现，当属性存在时，我们可以修改这些属性的行为。让我们看看如何使用`hasattr`函数来完成这个操作。我们首先为这个类创建一个对象：
- en: '[PRE241]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'Let’s check whether the object coupon has an attribute named `source`, and
    if it is present, then we will get the value of the attribute:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查对象优惠券是否有一个名为`source`的属性，如果存在，我们将获取该属性的值：
- en: '[PRE242]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'Let’s now proceed with calling the method to generate the coupon:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们继续调用生成优惠券的方法：
- en: '[PRE244]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'The implementation of reflection on the object coupon will start in the following
    code. We will create a `check_attribute` function that takes in three parameters.
    The first parameter is the class object’s name followed by the `store` attribute
    and then the `manufacturer` attribute. This function checks whether the given
    input object has the attribute named `source` with a `Store` value, and when it
    returns `true`, it sets a value for the attribute store, and when it returns `false`,
    it sets `None` as the value for the attribute store. Similarly, when the `source`
    attribute has a `Manufacturer` value, then the value is set for another attribute
    manufacturer, as follows:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 对象优惠券的反射实现将从以下代码开始。我们将创建一个名为`check_attribute`的函数，它接受三个参数。第一个参数是类对象的名称，然后是`store`属性和`manufacturer`属性。这个函数检查给定的输入对象是否具有名为`source`的属性，并且当它返回`true`时，为属性`store`设置一个值，当它返回`false`时，为属性`store`设置`None`作为值。同样，当`source`属性具有`Manufacturer`值时，则将值设置为另一个属性`manufacturer`，如下所示：
- en: '[PRE245]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Let’s now check the value of the `source` attribute:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们检查`source`属性的值：
- en: '[PRE257]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'We can now call `check_attribute` to add a store and let’s also add a manufacturer.
    Since the source has been set to `Store`, the function should set the value for
    the `store` variable and not for the `manufacturer` variable:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以调用`check_attribute`来添加一个商店，并也添加一个制造商。由于`source`已被设置为`Store`，函数应该设置`store`变量的值，而不是`manufacturer`变量的值：
- en: '[PRE258]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'Let’s now reset the `source` value to `Manufacturer` and run `check_attribute`
    again:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将`source`值重置为`Manufacturer`并再次运行`check_attribute`：
- en: '[PRE260]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'Let’s now check what has happened to the `store` variable:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们检查`store`变量发生了什么：
- en: '[PRE263]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: 'It returns no value. Resetting the source to `Store` again sets the `store`
    value and resets `manufacturer` as follows:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 它不返回任何值。再次将源重置为`Store`将设置`store`值并将`manufacturer`重置如下：
- en: '[PRE264]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: In this example, we looked at implementing the `hasattr` function on *ABC Megamart*
    coupon information. This example explains reflection using the `hasattr` function.
    With this understanding, let’s proceed further to look at `isinstance`.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们查看在*ABC Megamart*优惠券信息上实现`hasattr`函数。这个例子通过使用`hasattr`函数解释了反射。有了这个理解，让我们进一步看看`isinstance`。
- en: Using isinstance to modify an object
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`isinstance`修改对象
- en: We will now look at another built-in function named `isinstance`. This function
    is used to identify whether an object is an instance of a class. We will be implementing
    reflection on class objects by checking whether they are instances of a specific
    class and then customizing the object of the class accordingly. This example uses
    the same attributes (`source`, `store`, and `manufacturer`) as in the preceding
    example of the `hasattr` function.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将查看另一个名为`isinstance`的内置函数。这个函数用于确定一个对象是否是类的实例。我们将通过检查它们是否是特定类的实例来实现对类对象的反射，并相应地定制类的对象。这个例子使用了与前面`hasattr`函数示例中相同的属性（`source`、`store`和`manufacturer`）。
- en: 'To begin with, let’s create two objects for two different classes and apply
    the `isinstance` function to the objects of the classes to understand how this
    function can help in changing the behavior of Python objects. We will be reusing
    the `CustomCoupon` class from the preceding section and we will also be creating
    another `SimpleCoupon` class. We will then add two objects, `coupon1` and `coupon2`,
    as follows:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为两个不同的类创建两个对象，并将`isinstance`函数应用于这些类的对象，以了解这个函数如何帮助改变Python对象的行为。我们将重用上一节中的`CustomCoupon`类，并创建另一个`SimpleCoupon`类。然后，我们将添加两个对象，`coupon1`和`coupon2`，如下所示：
- en: '[PRE277]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'In the following figure, let’s look at the attributes of each object:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，让我们看看每个对象的属性：
- en: '![Figure 6.2 – Attributes of the coupon 1 and coupon 2 objects ](img/Figure_6.2_B13426.jpg)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – coupon 1和coupon 2对象的属性](img/Figure_6.2_B13426.jpg)'
- en: Figure 6.2 – Attributes of the coupon 1 and coupon 2 objects
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – coupon 1和coupon 2对象的属性
- en: 'Let’s now check whether the objects are instances of a specific class using
    the `isinstance` function:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用`isinstance`函数检查对象是否是特定类的实例：
- en: '[PRE286]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: 'We will now define a function named `check_instance`, which makes use of `isinstance`
    to implement reflection that customizes the object externally. This function takes
    an object, a class name, a `store` value, and a `manufacturer` value as input
    parameters and checks whether the object is an instance of a specific coupon class,
    and also checks whether it has the attribute named `source` and updates the `store`
    or `manufacturer` values accordingly. If none of these conditions are met, it
    returns a message that the object cannot be customized:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在定义一个名为`check_instance`的函数，该函数使用`isinstance`来实现外部定制的反射。这个函数接受一个对象、一个类名、一个`store`值和一个`manufacturer`值作为输入参数，并检查对象是否是特定优惠券类的实例，并检查它是否有名为`source`的属性，并相应地更新`store`或`manufacturer`值。如果没有满足这些条件之一，它将返回一个消息，表明对象无法被定制：
- en: '[PRE288]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: 'Let’s now call `check_instance` on the `coupon1` object and see whether the
    `store` value is updated in the object:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们调用`coupon1`对象上的`check_instance`并查看对象的`store`值是否已更新：
- en: '[PRE304]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: 'Let’s further call `check_instance` on the `coupon2` object and check whether
    the object is customized:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们进一步在`coupon2`对象上调用`check_instance`并检查该对象是否被定制：
- en: '[PRE318]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: In the preceding object, the conditions specified in `check_instance` were not
    met and so the object could not be customized.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的对象中，`check_instance`中指定的条件没有满足，因此对象无法被定制。
- en: This example explains reflection using the `isinstance` function. With this
    understanding, let’s proceed further to look at `issubclass`.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子通过使用`isinstance`函数解释了反射。有了这个理解，让我们进一步看看`issubclass`。
- en: Using issubclass to modify a class
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`issubclass`修改类
- en: In this section, we will look at the `issubclass` built-in function. This function
    can be used to apply reflection on classes that are inherited by one or more parent
    classes or superclasses. This function is used to verify whether a class is a
    subclass of a specific parent and then modify the class accordingly.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨`issubclass`内置函数。此函数可用于对继承自一个或多个父类或超类的类进行反射。此函数用于验证一个类是否是特定父类的子类，然后相应地修改该类。
- en: 'Let’s begin by creating two classes with a simple set of variables. The classes
    will be named `StoreCoupon` and `ManufacturerCoupon`:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建两个具有简单变量集的类开始。这些类将被命名为`StoreCoupon`和`ManufacturerCoupon`：
- en: '[PRE320]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: 'We will also create two functions that in turn create new functions to generate
    `store coupon` and `manufacturer coupon`, respectively:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建两个函数，这两个函数依次创建新的函数来生成`store coupon`和`manufacturer coupon`：
- en: '[PRE334]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: 'We will further create a new class named `IceCreamCoupon`, which inherits `StoreCoupon`
    as the parent:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将进一步创建一个名为`IceCreamCoupon`的新类，将其作为`StoreCoupon`的父类：
- en: '[PRE368]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: 'Let’s now define a function to check whether a specific class is the parent
    class of `IceCreamCoupon`. If the subclass has `StoreCoupon` as a parent class,
    a function to generate `StoreCoupon` should be created, and if it has `ManufacturerCoupon`
    as a parent class, then a function to generate `ManufacturerCoupon` should be
    created:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义一个函数来检查一个特定类是否是`IceCreamCoupon`的父类。如果子类以`StoreCoupon`作为父类，则应创建一个生成`StoreCoupon`的函数；如果它以`ManufacturerCoupon`作为父类，则应创建一个生成`ManufacturerCoupon`的函数：
- en: '[PRE370]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: 'Running `check_parent` will now add `generate_store_coupon` to the `IceCreamCoupon`
    class, as follows:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`check_parent`现在将`generate_store_coupon`添加到`IceCreamCoupon`类中，如下所示：
- en: '[PRE375]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: In this example, we looked at how to make use of the `issubclass` function to
    implement reflection on Python classes and, in turn, modify the classes from a
    metaprogram rather than directly changing the function definition. With this understanding,
    we will look at the last section of this chapter on implementing property on a
    class.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们探讨了如何利用`issubclass`函数来实现对Python类的反射，并通过元编程而不是直接更改函数定义来修改类。有了这个理解，我们将查看本章的最后一节，关于在类上实现属性的实现。
- en: Applying property on a class
  id: totrans-501
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在类上应用属性
- en: In this section, we will look at the usage of `property`, which is another built-in
    function that can be added as a decorator in a class and can update the properties
    of the methods of the class by implementing the `getter`, `setter`, and `delete`
    methods on a class method. In [*Chapter 5*](B13426_05_Final_PG_epub.xhtml#_idTextAnchor068),
    we looked at the usage of `property` as a function. In this section, we will implement
    `property` in an example to check how it works on reflection. We will be looking
    at the same coupon example to understand this.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨`property`的用法，这是另一个可以作为类装饰器添加的内置函数，可以通过在类方法上实现`getter`、`setter`和`delete`方法来更新类的属性。在[*第五章*](B13426_05_Final_PG_epub.xhtml#_idTextAnchor068)中，我们探讨了`property`作为函数的用法。在本节中，我们将通过一个示例来实现`property`，以检查它在反射中的工作方式。我们将查看相同的优惠券示例来理解这一点。
- en: 'Let’s now create a new class and name it `CouponwithProperty`, initialize the
    class with a `_coupon_details` variable, and set it to `none`. We will then add
    `property` as a decorator and define a `coupon_details` method and add `getter`,
    `setter`, and `delete` to get, set, and delete values for the coupon details.
    In this example, we will define `getter` to get coupon details and `setter` to
    set coupon details, but we will define `deleter` in such a way that `coupon_details`
    can never be deleted. This is possible through reflection:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个新的类，并将其命名为`CouponwithProperty`，用`_coupon_details`变量初始化该类，并将其设置为`none`。然后我们将添加`property`作为装饰器，并定义一个`coupon_details`方法，并添加`getter`、`setter`和`delete`来获取、设置和删除优惠券详情的值。在这个例子中，我们将定义`getter`来获取优惠券详情，`setter`来设置优惠券详情，但我们将`deleter`定义为`coupon_details`永远不会被删除。这是通过反射实现的：
- en: '[PRE399]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: 'Let’s now create an object for the preceding class:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为前面的类创建一个对象：
- en: '[PRE417]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: 'We can test whether `getter` is working by calling the `coupon_details` attribute:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用`coupon_details`属性来测试`getter`是否工作：
- en: '[PRE418]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: 'Similarly, we can check whether `setter` is working by setting a value for
    the `coupon_details` attribute:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以通过为`coupon_details`属性设置一个值来测试`setter`是否工作：
- en: '[PRE420]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: 'Calling `getter` again after setting the values will result in the following:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置值之后再次调用`getter`将导致以下结果：
- en: '[PRE430]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: 'The most important change we made on the attribute was disabling the `delete`
    operation from happening by setting `deleter`. Let’s check whether it is working
    as expected:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在属性上所做的最重要的更改是，通过设置`deleter`来禁用`delete`操作。让我们检查它是否按预期工作：
- en: '[PRE439]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: When we call `del` on an attribute, it deletes the attribute but, in this case,
    `del` is unable to delete the attribute because we have programmed `deleter` to
    disable deletion.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在属性上调用`del`时，它会删除该属性，但在这个情况下，`del`无法删除该属性，因为我们已经编程`deleter`来禁用删除。
- en: These are some of the examples of how reflection can be applied to Python objects
    using Python’s built-in functions.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些如何使用Python的内置函数将反射应用于Python对象的例子。
- en: Summary
  id: totrans-562
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to examine function objects in Python using
    the concept of reflection and the corresponding applications of reflection, in
    which we saw how to implement reflection using built-in functions such as `id`,
    `callable`, `hasattr`, `isinstance`, `issubclass`, and `property` on various Python
    objects, and we also learned how to apply them to our core example. From all of
    these concepts, we learned how to examine Python objects such as classes, methods,
    and functions. From the examples covered under each topic, we also learned how
    to apply reflection in practical use cases.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用反射的概念及其相应应用来检查Python中的函数对象，其中我们看到了如何使用内置函数如`id`、`callable`、`hasattr`、`isinstance`、`issubclass`和`property`在各种Python对象上实现反射，我们还学习了如何将它们应用于我们的核心示例。从所有这些概念中，我们学习了如何检查Python对象，如类、方法和函数。从每个主题下的例子中，我们还学习了如何在实际用例中应用反射。
- en: Similar to other chapters covered in this book, this chapter, which covered
    the concept of reflection, also covered changing the behavior of Python objects
    externally using metaprogramming.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中涵盖的其他章节类似，本章涵盖了反射的概念，也涵盖了使用元编程在外部更改Python对象的行为。
- en: In the next chapter, we will be looking at the concept of *generics* with some
    interesting examples.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过一些有趣的例子来探讨*泛型*的概念。
