- en: '*Chapter 6*: Implementing Reflection on Python Objects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at reflection in Python 3 and understand how it
    is useful in metaprogramming. **Reflection** is a continuation of introspection,
    or it can be looked upon as a concept where we can make use of the information
    we learn from the introspection of properties or attributes of objects in Python
    and apply them to manipulate the objects, and so perform metaprogramming.
  prefs: []
  type: TYPE_NORMAL
- en: Why reflection? As we know from the previous chapter, introspection is an information-gathering
    process for Python objects. Reflection is the process of utilizing the information
    gathered from objects through introspection, and in turn, performing generic operations
    on them by manipulating them externally to perform metaprogramming.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we will look at implementing reflection using each
    function that helped us introspect objects in the previous chapter and perform
    metaprogramming on the objects we use in our programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing built-in functions used in reflection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `id` to delete duplicates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `callable` to dynamically check and generate methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `hasattr` to set values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `isinstance` to modify an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `issubclass` to modify a class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying `property` on a coupon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to apply built-in functions to
    reflect on Python objects, apply them to examples, and use them to generate or
    modify code.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code examples shared in this chapter are available on GitHub for this chapter
    here: [https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter06](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter06).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing built-in functions used in reflection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand reflection and the usage of Python’s built-in functions to perform
    reflection, we will continue making use of our core example of *ABC Megamart*
    throughout this chapter. We will be specifically looking at the concept and examples
    based on coupons in a retail store throughout this chapter. Coupons are a technique
    used by retail stores or manufacturers to promote their products among consumers.
    Coupons are generated and posted through various modes of advertisements, and
    they are used to attract customers to a specific store or product.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will make use of the same set of built-in functions as in introspection,
    to apply reflection on Python objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eval()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callable()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hastattr()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getattr()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isinstance()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`issubclass()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`property()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflection on Python objects helps in the metaprogramming of these objects using
    the built-in functions that can introspect Python objects, and we will look at
    some examples for these in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using id to delete duplicates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We reviewed the `id` function in the previous chapter, which covered introspection.
    In Python 3, `id` is used to identify an object using the object’s memory address.
    Identifying `id` of an object can be used to reflect on an object and avoid redundancies
    or errors that can possibly occur while using an object throughout a program.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand this further, we will be creating a class named `Coupon`, which
    generates a unique random coupon ID and prints a coupon for any product that is
    provided as input. In the following code, we will start with creating a class
    named `Coupon` and will be adding the coupon details as attributes. We will also
    create a method named `generate_coupon` to print five coupons for a product along
    with its unique random coupon ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now create a `Coupon1` variable and assign the `Coupon` class to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we are intentionally assigning the `Coupon` class to a variable
    to demonstrate the usage of the `id` function. Ideally, this function will come
    in handy to debug and ensure when the class is actually assigned unintentionally
    and thus leading to issues later on in the code. At this point in time, let’s
    assume that the assignment of the `Coupon` class to a variable is unintentional.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at how to identify and resolve such unintentional assignments of
    a class and review the coupon generation results if `Coupon1` was called by some
    other object when `Coupon` was the only class that should have been available
    to generate the coupons.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding `Coupon` class, the expectation was to generate only five
    coupons for a product with unique random coupon identifiers. Since we have assigned
    the class to a variable, the class identifier is also assigned to the variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now call the `generate_coupon` method of the `Coupon` class along with
    its attributes and look at the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 1 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 2 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 3 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 4 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 5 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling the preceding method resulted in the generation of five unique coupons
    for the potato chips product. Coupon identifiers are unique and should not be
    regenerated at any other part of the code in the future; therefore, the preceding
    method will be called only once in the code. Since we have already assigned the
    `Coupon` class to another variable named `Coupon1`, let’s look at what will happen
    if `Coupon1` is called in some other part of the code unintentionally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 1 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 2 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 3 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 4 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 5 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `Coupon1` should not be called in the code since calling it
    would generate duplicate coupons, possibly with the same IDs. This might lead
    to the creation of five more coupons for the same product, which is not required;
    among these, two of them would be duplicates with coupon identifiers `1` and `8`.
    This leads to making coupons `1` and `8` void when distributed to consumers since
    each coupon is expected to have one unique identifier to redeem it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now look at how to resolve this issue by developing a function named
    `delete_duplicates` that checks and deletes such duplicate assignments of the
    `Coupon` class. This function looks at the list of Python objects in the directory
    that has duplicates and deletes the duplicates of classes. Refer to the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: The first three `for` loops in the preceding code were previously discussed
    in the *Debug unintentional assignments using id* section in the previous chapter,
    which covered introspection. The last `for` loop checks whether duplicate items
    are present in the dictionary named `dupe_set`, and deletes the duplicate variables
    only and not the actual classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calling the preceding function results in the deletion of the duplicate `Coupon1`
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'Checking whether `Coupon1` still exists results in the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Error on calling Coupon1 after it is deleted ](img/Figure_6.1_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Error on calling Coupon1 after it is deleted
  prefs: []
  type: TYPE_NORMAL
- en: The preceding error confirms that the duplicate variable was deleted by the
    `delete_duplicates` function. In the following section, we will look at applying
    reflection using the function named `callable`.
  prefs: []
  type: TYPE_NORMAL
- en: Using callable to dynamically check and generate methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now look into another familiar function named `callable` to check on
    how it can be used to perform reflection on an object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A class, method, or a function is callable in Python, while class objects or
    variables are not callable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will check whether a class is callable, and if it returns
    `true`, we will dynamically add a method to the class. To test the usage of the
    `callable` function, we will first create a coupon class and name it `SimpleCoupon`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s check whether the preceding class is callable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following code, we will create a function that generates another function
    if called. We will create a `create_coupon` function that, in turn, creates a
    `generate_coupon` function or method when called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now check whether the `SimpleCoupon` class is callable and if it is callable,
    we will add a `coupon_details` variable to provide all the required input parameters
    to initialize the call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next step, let’s check on how to create a method dynamically and add
    it to the class if the class is callable. To add the `generate_coupon` method
    to the `SimpleCoupon` class, let’s call the `create_coupon` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the `generate_coupon` method, we can run the method as follows
    and check the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 1 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 2 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for coupon 3 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we have looked at how to make use of `callable` to modify a
    class and add attributes and methods to a class by externally verifying whether
    the class is callable. We have successfully verified whether the `SimpleCoupon`
    class is callable and then we have also added a `coupon_details` list and a `generate_coupon`
    method to the class. This explains the use of `callable` as a built-in function
    in handling reflection on Python objects.
  prefs: []
  type: TYPE_NORMAL
- en: With this understanding, we will look at how the `hasattr` function helps in
    applying reflection on Python objects.
  prefs: []
  type: TYPE_NORMAL
- en: Using hasattr to set values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now look into the `hasattr` function, which can be used to check whether
    a Python object has attributes. Using this function as a condition to test the
    objects, we can apply reflection on objects externally.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will look at creating custom coupons by changing one of
    its variables using the `hasattr` function. The classes and methods throughout
    this chapter are used to understand reflection with relevant examples explained
    under each section. We will now create another class named `CustomCoupon`. We
    will add and define class attributes to this class within the class itself and
    we will be adding a method to generate coupons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: 'Look at three attributes of the preceding class – `source`, `manufacturer`,
    and `store`. If we want to change the behavior of these attributes from outside
    the class, we can do so by first checking whether the class has these attributes,
    and when the attributes are present, we can then modify the behavior of these
    attributes. Let’s look at how to perform this using the `hasattr` function. We
    will first start with creating an object for the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s check whether the object coupon has an attribute named `source`, and
    if it is present, then we will get the value of the attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now proceed with calling the method to generate the coupon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: 'The implementation of reflection on the object coupon will start in the following
    code. We will create a `check_attribute` function that takes in three parameters.
    The first parameter is the class object’s name followed by the `store` attribute
    and then the `manufacturer` attribute. This function checks whether the given
    input object has the attribute named `source` with a `Store` value, and when it
    returns `true`, it sets a value for the attribute store, and when it returns `false`,
    it sets `None` as the value for the attribute store. Similarly, when the `source`
    attribute has a `Manufacturer` value, then the value is set for another attribute
    manufacturer, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now check the value of the `source` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now call `check_attribute` to add a store and let’s also add a manufacturer.
    Since the source has been set to `Store`, the function should set the value for
    the `store` variable and not for the `manufacturer` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now reset the `source` value to `Manufacturer` and run `check_attribute`
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now check what has happened to the `store` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: 'It returns no value. Resetting the source to `Store` again sets the `store`
    value and resets `manufacturer` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we looked at implementing the `hasattr` function on *ABC Megamart*
    coupon information. This example explains reflection using the `hasattr` function.
    With this understanding, let’s proceed further to look at `isinstance`.
  prefs: []
  type: TYPE_NORMAL
- en: Using isinstance to modify an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now look at another built-in function named `isinstance`. This function
    is used to identify whether an object is an instance of a class. We will be implementing
    reflection on class objects by checking whether they are instances of a specific
    class and then customizing the object of the class accordingly. This example uses
    the same attributes (`source`, `store`, and `manufacturer`) as in the preceding
    example of the `hasattr` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, let’s create two objects for two different classes and apply
    the `isinstance` function to the objects of the classes to understand how this
    function can help in changing the behavior of Python objects. We will be reusing
    the `CustomCoupon` class from the preceding section and we will also be creating
    another `SimpleCoupon` class. We will then add two objects, `coupon1` and `coupon2`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following figure, let’s look at the attributes of each object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Attributes of the coupon 1 and coupon 2 objects ](img/Figure_6.2_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Attributes of the coupon 1 and coupon 2 objects
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now check whether the objects are instances of a specific class using
    the `isinstance` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now define a function named `check_instance`, which makes use of `isinstance`
    to implement reflection that customizes the object externally. This function takes
    an object, a class name, a `store` value, and a `manufacturer` value as input
    parameters and checks whether the object is an instance of a specific coupon class,
    and also checks whether it has the attribute named `source` and updates the `store`
    or `manufacturer` values accordingly. If none of these conditions are met, it
    returns a message that the object cannot be customized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now call `check_instance` on the `coupon1` object and see whether the
    `store` value is updated in the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s further call `check_instance` on the `coupon2` object and check whether
    the object is customized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding object, the conditions specified in `check_instance` were not
    met and so the object could not be customized.
  prefs: []
  type: TYPE_NORMAL
- en: This example explains reflection using the `isinstance` function. With this
    understanding, let’s proceed further to look at `issubclass`.
  prefs: []
  type: TYPE_NORMAL
- en: Using issubclass to modify a class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the `issubclass` built-in function. This function
    can be used to apply reflection on classes that are inherited by one or more parent
    classes or superclasses. This function is used to verify whether a class is a
    subclass of a specific parent and then modify the class accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by creating two classes with a simple set of variables. The classes
    will be named `StoreCoupon` and `ManufacturerCoupon`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also create two functions that in turn create new functions to generate
    `store coupon` and `manufacturer coupon`, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: 'We will further create a new class named `IceCreamCoupon`, which inherits `StoreCoupon`
    as the parent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now define a function to check whether a specific class is the parent
    class of `IceCreamCoupon`. If the subclass has `StoreCoupon` as a parent class,
    a function to generate `StoreCoupon` should be created, and if it has `ManufacturerCoupon`
    as a parent class, then a function to generate `ManufacturerCoupon` should be
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: 'Running `check_parent` will now add `generate_store_coupon` to the `IceCreamCoupon`
    class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we looked at how to make use of the `issubclass` function to
    implement reflection on Python classes and, in turn, modify the classes from a
    metaprogram rather than directly changing the function definition. With this understanding,
    we will look at the last section of this chapter on implementing property on a
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Applying property on a class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the usage of `property`, which is another built-in
    function that can be added as a decorator in a class and can update the properties
    of the methods of the class by implementing the `getter`, `setter`, and `delete`
    methods on a class method. In [*Chapter 5*](B13426_05_Final_PG_epub.xhtml#_idTextAnchor068),
    we looked at the usage of `property` as a function. In this section, we will implement
    `property` in an example to check how it works on reflection. We will be looking
    at the same coupon example to understand this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now create a new class and name it `CouponwithProperty`, initialize the
    class with a `_coupon_details` variable, and set it to `none`. We will then add
    `property` as a decorator and define a `coupon_details` method and add `getter`,
    `setter`, and `delete` to get, set, and delete values for the coupon details.
    In this example, we will define `getter` to get coupon details and `setter` to
    set coupon details, but we will define `deleter` in such a way that `coupon_details`
    can never be deleted. This is possible through reflection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now create an object for the preceding class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test whether `getter` is working by calling the `coupon_details` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we can check whether `setter` is working by setting a value for
    the `coupon_details` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling `getter` again after setting the values will result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: 'The most important change we made on the attribute was disabling the `delete`
    operation from happening by setting `deleter`. Let’s check whether it is working
    as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: When we call `del` on an attribute, it deletes the attribute but, in this case,
    `del` is unable to delete the attribute because we have programmed `deleter` to
    disable deletion.
  prefs: []
  type: TYPE_NORMAL
- en: These are some of the examples of how reflection can be applied to Python objects
    using Python’s built-in functions.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to examine function objects in Python using
    the concept of reflection and the corresponding applications of reflection, in
    which we saw how to implement reflection using built-in functions such as `id`,
    `callable`, `hasattr`, `isinstance`, `issubclass`, and `property` on various Python
    objects, and we also learned how to apply them to our core example. From all of
    these concepts, we learned how to examine Python objects such as classes, methods,
    and functions. From the examples covered under each topic, we also learned how
    to apply reflection in practical use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to other chapters covered in this book, this chapter, which covered
    the concept of reflection, also covered changing the behavior of Python objects
    externally using metaprogramming.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be looking at the concept of *generics* with some
    interesting examples.
  prefs: []
  type: TYPE_NORMAL
