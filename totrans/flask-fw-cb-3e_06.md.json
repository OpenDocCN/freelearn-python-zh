["```py\n    from werkzeug.security import generate_password_hash, check_password_hash\n    ```", "```py\n    from flask_wtf import FlaskForm\n    ```", "```py\n    from wtforms import StringField, PasswordField\n    ```", "```py\n    from wtforms.validators import InputRequired, EqualTo\n    ```", "```py\n    from my_app import db\n    ```", "```py\n    class User(db.Model):\n    ```", "```py\n        id = db.Column(db.Integer, primary_key=True)\n    ```", "```py\n        username = db.Column(db.String(100))\n    ```", "```py\n        pwdhash = db.Column(db.String())\n    ```", "```py\n        def __init__(self, username, password):\n    ```", "```py\n            self.username = username\n    ```", "```py\n            self.pwdhash = generate_password_hash(password)\n    ```", "```py\n        def check_password(self, password):\n    ```", "```py\n            return check_password_hash(self.pwdhash, password)\n    ```", "```py\n    class RegistrationForm(FlaskForm):\n    ```", "```py\n        username = StringField('Username', [InputRequired()])\n    ```", "```py\n        password = PasswordField(\n    ```", "```py\n            'Password', [\n    ```", "```py\n                InputRequired(), EqualTo('confirm', \n    ```", "```py\n                message='Passwords must match')\n    ```", "```py\n            ]\n    ```", "```py\n        )\n    ```", "```py\n        confirm = PasswordField('Confirm Password', \n    ```", "```py\n          [InputRequired()])\n    ```", "```py\n    class LoginForm(FlaskForm):\n    ```", "```py\n        username = StringField('Username', [InputRequired()])\n    ```", "```py\n        password = PasswordField('Password', [InputRequired()])\n    ```", "```py\n    from flask import request, render_template, flash, redirect, url_for, session, Blueprint\n    ```", "```py\n    from my_app import app, db\n    ```", "```py\n    from my_app.auth.models import User, RegistrationForm, LoginForm\n    ```", "```py\n    auth = Blueprint('auth', __name__)\n    ```", "```py\n    @auth.route('/')\n    ```", "```py\n    @auth.route('/home')\n    ```", "```py\n    def home():\n    ```", "```py\n        return render_template('home.html')\n    ```", "```py\n    @auth.route('/register', methods=['GET', 'POST'])\n    ```", "```py\n    def register():\n    ```", "```py\n        if session.get('username'):\n    ```", "```py\n            flash('Your are already logged in.', 'info')\n    ```", "```py\n            return redirect(url_for('auth.home'))\n    ```", "```py\n        form = RegistrationForm()\n    ```", "```py\n        if form.validate_on_submit():\n    ```", "```py\n            username = request.form.get('username')\n    ```", "```py\n            password = request.form.get('password')\n    ```", "```py\n            existing_username = User.query.filter(\n    ```", "```py\n                User.username.like('%' + username + '%')\n    ```", "```py\n            ).first()\n    ```", "```py\n            if existing_username:\n    ```", "```py\n                flash(\n    ```", "```py\n                    'This username has been already taken. Try \n    ```", "```py\n                    another one.',\n    ```", "```py\n                    'warning'\n    ```", "```py\n                )\n    ```", "```py\n                return render_template('register.html', form=form)\n    ```", "```py\n            user = User(username, password)\n    ```", "```py\n            db.session.add(user)\n    ```", "```py\n            db.session.commit()\n    ```", "```py\n            flash('You are now registered. Please login.', \n    ```", "```py\n            'success')\n    ```", "```py\n            return redirect(url_for('auth.login'))\n    ```", "```py\n        if form.errors:\n    ```", "```py\n            flash(form.errors, 'danger')\n    ```", "```py\n        return render_template('register.html', form=form)\n    ```", "```py\n@auth.route('/login', methods=['GET', 'POST'])\ndef login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        username = request.form.get('username')\n        password = request.form.get('password')\n        existing_user = User.query.filter_by(username=username).\n        first()\n        if not (existing_user and existing_user.check_\n        password(password)):\n            flash('Invalid username or password. Please try again.', \n            'danger')\n            return render_template('login.html', form=form)\n        session['username'] = username\n        flash('You have successfully logged in.', 'success')\n        return redirect(url_for('auth.home'))\n    if form.errors:\n        flash(form.errors, 'danger')\n    return render_template('login.html', form=form)\n```", "```py\n@auth.route('/logout')\ndef logout():\n    if 'username' in session:\n        session.pop('username')\n        flash('You have successfully logged out.', 'success')\n    return redirect(url_for('auth.home'))\n```", "```py\n{% extends 'base.html' %}\n{% block container %}\n  <h1>Welcome to the Authentication Demo</h1>\n  {% if session.username %}\n    <h3>Hey {{ session.username }}!!</h3>\n    <a href=\"{{ url_for('auth.logout') }}\">Click here to logout</a>\n  {% else %}\n  Click here to <a href=\"{{ url_for('auth.login') }}\">login</a> or <a \n  href=\"{{ url_for('auth.register') }}\">register</a>\n  {% endif %}\n{% endblock %}\n```", "```py\n{% extends 'home.html' %}\n{% block container %}\n  <div class=\"top-pad\">\n    <form\n        method=\"POST\"\n        action=\"{{ url_for('auth.register') }}\"\n        role=\"form\">\n      {{ form.csrf_token }}\n      <div class=\"form-group\">{{ form.username.label }}: {{ form.\n      username() }}</div>\n      <div class=\"form-group\">{{ form.password.label }}: {{ form.\n      password() }}</div>\n      <div class=\"form-group\">{{ form.confirm.label }}: {{ form.\n      confirm() }}</div>\n      <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n    </form>\n  </div>\n{% endblock %}\n```", "```py\n{% extends 'home.html' %}\n{% block container %}\n  <div class=\"top-pad\">\n    <form\n        method=\"POST\"\n        action=\"{{ url_for('auth.login') }}\"\n        role=\"form\">\n      {{ form.csrf_token }}\n      <div class=\"form-group\">{{ form.username.label }}: {{ form.\n      username() }}</div>\n      <div class=\"form-group\">{{ form.password.label }}: {{ form.\n      password() }}</div>\n      <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n    </form>\n  </div>\n{% endblock %}\n```", "```py\n$ pip install Flask-Login\n```", "```py\n    from flask_login import LoginManager\n    ```", "```py\n    #\n    ```", "```py\n    # Do other application configurations\n    ```", "```py\n    #\n    ```", "```py\n    login_manager = LoginManager()\n    ```", "```py\n    login_manager.init_app(app)\n    ```", "```py\n    login_manager.login_view = 'auth.login'\n    ```", "```py\n        @property\n    ```", "```py\n        def is_authenticated(self):\n    ```", "```py\n            return True\n    ```", "```py\n        @property\n    ```", "```py\n        def is_active(self):\n    ```", "```py\n            return True\n    ```", "```py\n        @property\n    ```", "```py\n        def is_anonymous(self):\n    ```", "```py\n            return False\n    ```", "```py\n        def get_id(self):\n    ```", "```py\n            return str(self.id)\n    ```", "```py\n    from flask import g\n    ```", "```py\n    from flask_login import current_user, login_user, logout_user, \\\n    ```", "```py\n        login_required\n    ```", "```py\n    from my_app import login_manager\n    ```", "```py\n    @login_manager.user_loader\n    ```", "```py\n    def load_user(id):\n    ```", "```py\n        return User.query.get(int(id))\n    ```", "```py\n    @auth.before_request\n    ```", "```py\n    def get_current_user():\n    ```", "```py\n        g.user = current_user\n    ```", "```py\n    @auth.route('/login', methods=['GET', 'POST'])\n    ```", "```py\n    def login():\n    ```", "```py\n        if current_user.is_authenticated:\n    ```", "```py\n            flash('You are already logged in.', 'info')\n    ```", "```py\n            return redirect(url_for('auth.home'))\n    ```", "```py\n        form = LoginForm()\n    ```", "```py\n        if form.validate_on_submit():\n    ```", "```py\n            username = request.form.get('username')\n    ```", "```py\n            password = request.form.get('password')\n    ```", "```py\n            existing_user = User.query.filter_by(username=username).\n    ```", "```py\n            first()\n    ```", "```py\n            if not (existing_user and existing_user.check_\n    ```", "```py\n            password(password)):\n    ```", "```py\n                flash('Invalid username or password. Please try \n    ```", "```py\n                again.', 'danger')\n    ```", "```py\n                return render_template('login.html', form=form)\n    ```", "```py\n            login_user(existing_user)\n    ```", "```py\n            flash('You have successfully logged in.', 'success')\n    ```", "```py\n            return redirect(url_for('auth.home'))\n    ```", "```py\n        if form.errors:\n    ```", "```py\n            flash(form.errors, 'danger')\n    ```", "```py\n        return render_template('login.html', form=form)\n    ```", "```py\n    @auth.route('/logout')\n    ```", "```py\n    @login_required\n    ```", "```py\n    def logout():\n    ```", "```py\n        logout_user()\n    ```", "```py\n        return redirect(url_for('auth.home'))\n    ```", "```py\n{% if current_user.is_authenticated %}\n...do something...\n{% endif %}\n```", "```py\n    $ pip3 install Flask-Dance\n    ```", "```py\n    app.config[\"FACEBOOK_OAUTH_CLIENT_ID\"] = 'my facebook APP ID'\n    ```", "```py\n    app.config[\"FACEBOOK_OAUTH_CLIENT_SECRET\"] = 'my facebook app secret'\n    ```", "```py\n    from my_app.auth.views import facebook_blueprint\n    ```", "```py\n    app.register_blueprint(auth)\n    ```", "```py\n    app.register_blueprint(facebook_blueprint)\n    ```", "```py\n        from flask_dance.contrib.facebook import\n    ```", "```py\n          make_facebook_blueprint, facebook\n    ```", "```py\n        facebook_blueprint =\n    ```", "```py\n          make_facebook_blueprint(scope='email',\n    ```", "```py\n          redirect_to='auth.facebook_login')\n    ```", "```py\n    @auth.route(\"/facebook-login\")\n    ```", "```py\n    def facebook_login():\n    ```", "```py\n        if not facebook.authorized:\n    ```", "```py\n            return redirect(url_for(\"facebook.login\"))\n    ```", "```py\n        resp = facebook.get(\"/me?fields=name,email\")\n    ```", "```py\n        user = User.query.filter_by(username\n    ```", "```py\n          =resp.json()[\"email\"]).first()\n    ```", "```py\n        if not user:\n    ```", "```py\n            user = User(resp.json()[\"email\"], '')\n    ```", "```py\n            db.session.add(user)\n    ```", "```py\n            db.session.commit()\n    ```", "```py\n        login_user(user)\n    ```", "```py\n        flash(\n    ```", "```py\n            'Logged in as name=%s using Facebook login' % (\n    ```", "```py\n                resp.json()['name']), 'success' )\n    ```", "```py\n        return redirect(request.args.get('next',\n    ```", "```py\n          url_for('auth.home')))\n    ```", "```py\n        {% extends 'home.html' %}\n    ```", "```py\n    {% block container %}\n    ```", "```py\n      <div class=\"top-pad\">\n    ```", "```py\n        <ul class=\"nav nav-tabs\">\n    ```", "```py\n         <li class=\"active\"><a href=\"#simple-form\" data-\n    ```", "```py\n           toggle=\"tab\">Old Style Login</a></li>\n    ```", "```py\n         <li><a href=\"#social-logins\" data-\n    ```", "```py\n           toggle=\"tab\">Social Logins</a></li>\n    ```", "```py\n        </ul>\n    ```", "```py\n        <div class=\"tab-content\">\n    ```", "```py\n          <div class=\"tab-pane active\" id=\"simple-form\">\n    ```", "```py\n            <form\n    ```", "```py\n                method=\"POST\"\n    ```", "```py\n                action=\"{{ url_for('auth.login') }}\"\n    ```", "```py\n                role=\"form\">\n    ```", "```py\n              {{ form.csrf_token }}\n    ```", "```py\n              <div class=\"form-group\">{{ form.username\n    ```", "```py\n                .label }}: {{ form.username() }}</div>\n    ```", "```py\n              <div class=\"form-group\">{{ form.password\n    ```", "```py\n                .label }}: {{ form.password() }}</div>\n    ```", "```py\n              <button type=\"submit\" class=\"btn btn-\n    ```", "```py\n                default\">Submit</button>\n    ```", "```py\n            </form>\n    ```", "```py\n          </div>\n    ```", "```py\n          <div class=\"tab-pane\" id=\"social-logins\">\n    ```", "```py\n            <a href=\"{{ url_for('auth.facebook_login',\n    ```", "```py\n              next=url_for('auth.home')) }}\"\n    ```", "```py\n              >Login via Facebook</a>\n    ```", "```py\n          </div>\n    ```", "```py\n        </div>\n    ```", "```py\n      </div>\n    ```", "```py\n    {% endblock %}\n    ```", "```py\n    app.config[\"GOOGLE_OAUTH_CLIENT_ID\"] = \"my Google\n    ```", "```py\n      OAuth client ID\"\n    ```", "```py\n    app.config[\"GOOGLE_OAUTH_CLIENT_SECRET\"] = \"my Google\n    ```", "```py\n      OAuth client secret\"\n    ```", "```py\n    app.config[\"OAUTHLIB_RELAX_TOKEN_SCOPE\"] = True\n    ```", "```py\n    from my_app.auth.views import auth,\n    ```", "```py\n      facebook_blueprint, google_blueprint\n    ```", "```py\n    app.register_blueprint(google_blueprint)\n    ```", "```py\n    from flask_dance.contrib.google import\n    ```", "```py\n      make_google_blueprint, google\n    ```", "```py\n    google_blueprint = make_google_blueprint(\n    ```", "```py\n        scope=[\n    ```", "```py\n            \"openid\",\n    ```", "```py\n            \"https://www.googleapis.com\n    ```", "```py\n              /auth/userinfo.email\",\n    ```", "```py\n            \"https://www.googleapis.com\n    ```", "```py\n              /auth/userinfo.profile\"],\n    ```", "```py\n        redirect_to='auth.google_login')\n    ```", "```py\n    @auth.route(\"/google-login\")\n    ```", "```py\n    def google_login():\n    ```", "```py\n        if not google.authorized:\n    ```", "```py\n            return redirect(url_for(\"google.login\"))\n    ```", "```py\n        resp = google.get(\"/oauth2/v1/userinfo\")\n    ```", "```py\n        user = User.query.filter_by(username=resp.json()\n    ```", "```py\n          [\"email\"]).first()\n    ```", "```py\n        if not user:\n    ```", "```py\n            user = User(resp.json()[\"email\"], '')\n    ```", "```py\n            db.session.add(user)\n    ```", "```py\n            db.session.commit()\n    ```", "```py\n        login_user(user)\n    ```", "```py\n        flash(\n    ```", "```py\n            'Logged in as name=%s using Google login' % (\n    ```", "```py\n                resp.json()['name']), 'success' )\n    ```", "```py\n        return redirect(request.args.get('next',\n    ```", "```py\n          url_for('auth.home')))\n    ```", "```py\n    <a href=\"{{ url_for('auth.google_login',\n    ```", "```py\n      next=url_for('auth.home'))\n    ```", "```py\n    }}\">Login via Google</a>\n    ```", "```py\n    app.config[\"TWITTER_OAUTH_CLIENT_KEY\"] = \"my Twitter\n    ```", "```py\n      app ID\"\n    ```", "```py\n    app.config[\"TWITTER_OAUTH_CLIENT_SECRET\"] = \"my\n    ```", "```py\n      Twitter app secret\"\n    ```", "```py\n    from my_app.auth.views import twitter_blueprint\n    ```", "```py\n    app.register_blueprint(twitter_blueprint)\n    ```", "```py\n    from flask_dance.contrib.twitter import\n    ```", "```py\n      make_twitter_blueprint, twitter\n    ```", "```py\n    twitter_blueprint = make_twitter_blueprint\n    ```", "```py\n      (redirect_to='auth.twitter_login')\n    ```", "```py\n    @auth.route(\"/twitter-login\")\n    ```", "```py\n    def twitter_login():\n    ```", "```py\n        if not twitter.authorized:\n    ```", "```py\n            return redirect(url_for(\"twitter.login\"))\n    ```", "```py\n        resp = twitter.get(\"account/verify_credentials\n    ```", "```py\n          .json\")\n    ```", "```py\n        user = User.query.filter_by(username=resp\n    ```", "```py\n          .json()[\"screen_name\"]).first()\n    ```", "```py\n        if not user:\n    ```", "```py\n            user = User(resp.json()[\"screen_name\"], '')\n    ```", "```py\n            db.session.add(user)\n    ```", "```py\n            db.session.commit()\n    ```", "```py\n        login_user(user)\n    ```", "```py\n        flash(\n    ```", "```py\n            'Logged in as name=%s using Twitter login' % (\n    ```", "```py\n                resp.json()['name']), 'success' )\n    ```", "```py\n        return redirect(request.args.get('next',\n    ```", "```py\n          url_for('auth.home')))\n    ```", "```py\n    <a href=\"{{ url_for('auth.twitter_login',\n    ```", "```py\n    next=url_for('auth.home')) }}\">Login via Twitter</a>\n    ```", "```py\n$ docker run -p 389:389 -p 636:636 --name my-openldap-container --detach osixia/openldap:1.5.0\n```", "```py\n$ docker exec my-openldap-container ldapsearch -x -H ldap://localhost -b dc=example,dc=org -D \"cn=admin,dc=example,dc=org\" -w admin\n```", "```py\n    $ pip install python-ldap\n```", "```py\n    import ldap\n    ```", "```py\n    app.config['LDAP_PROVIDER_URL'] = 'ldap://localhost'\n    ```", "```py\n    def get_ldap_connection():\n    ```", "```py\n        conn = ldap.initialize(app.config\n    ```", "```py\n          ['LDAP_PROVIDER_URL'])\n    ```", "```py\n        return conn\n    ```", "```py\n    import ldap\n    ```", "```py\n    from my_app import db, login_manager,\n    ```", "```py\n      get_ldap_connection\n    ```", "```py\n    @auth.route(\"/ldap-login\", methods=['GET', 'POST'])\n    ```", "```py\n    def ldap_login():\n    ```", "```py\n        if current_user.is_authenticated:\n    ```", "```py\n            flash('Your are already logged in.', 'info')\n    ```", "```py\n            return redirect(url_for('auth.home'))\n    ```", "```py\n        form = LoginForm()\n    ```", "```py\n        if form.validate_on_submit():\n    ```", "```py\n            username = request.form.get('username')\n    ```", "```py\n            password = request.form.get('password')\n    ```", "```py\n            try:\n    ```", "```py\n                conn = get_ldap_connection()\n    ```", "```py\n                conn.simple_bind_s(\n    ```", "```py\n                    'cn=%s,dc=example,dc=org' % username,\n    ```", "```py\n                    password\n    ```", "```py\n                )\n    ```", "```py\n            except ldap.INVALID_CREDENTIALS:\n    ```", "```py\n                flash('Invalid username or password.\n    ```", "```py\n                  Please try again.', 'danger')\n    ```", "```py\n                return render_template('login.html',\n    ```", "```py\n                  form=form)\n    ```", "```py\n            user = User.query.filter_by(username=username)\n    ```", "```py\n              .first()\n    ```", "```py\n            if not user:\n    ```", "```py\n                user = User(username, password)\n    ```", "```py\n                db.session.add(user)\n    ```", "```py\n                db.session.commit()\n    ```", "```py\n            login_user(user)\n    ```", "```py\n            flash('You have successfully logged in.',\n    ```", "```py\n              'success')\n    ```", "```py\n            return redirect(url_for('auth.home'))\n    ```", "```py\n        if form.errors:\n    ```", "```py\n            flash(form.errors, 'danger')\n    ```", "```py\n        return render_template('login.html', form=form)\n    ```", "```py\n    {% extends 'home.html' %}\n    ```", "```py\n    {% block container %}\n    ```", "```py\n      <div class=\"top-pad\">\n    ```", "```py\n        <ul class=\"nav nav-tabs\">\n    ```", "```py\n         <li class=\"active\"><a href=\"#simple-form\" data-\n    ```", "```py\n           toggle=\"tab\">Old Style Login</a></li>\n    ```", "```py\n         <li><a href=\"#social-logins\" data-\n    ```", "```py\n           toggle=\"tab\">Social Logins</a></li>\n    ```", "```py\n         <li><a href=\"#ldap-form\" data-toggle=\"tab\">LDAP\n    ```", "```py\n           Login</a></li>\n    ```", "```py\n        </ul>\n    ```", "```py\n        <div class=\"tab-content\">\n    ```", "```py\n          <div class=\"tab-pane active\" id=\"simple-form\">\n    ```", "```py\n            <br/>\n    ```", "```py\n            <form\n    ```", "```py\n                method=\"POST\"\n    ```", "```py\n                action=\"{{ url_for('auth.login') }}\"\n    ```", "```py\n                role=\"form\">\n    ```", "```py\n              {{ form.csrf_token }}\n    ```", "```py\n              <div class=\"form-group\">{{ form.username\n    ```", "```py\n                .label }}: {{ form.username() }}</div>\n    ```", "```py\n              <div class=\"form-group\">{{ form.password\n    ```", "```py\n                .label }}: {{ form.password() }}</div>\n    ```", "```py\n              <button type=\"submit\" class=\"btn btn-\n    ```", "```py\n                default\">Submit</button>\n    ```", "```py\n            </form>\n    ```", "```py\n          </div>\n    ```", "```py\n          <div class=\"tab-pane\" id=\"social-logins\">\n    ```", "```py\n            <a href=\"{{ url_for('auth.facebook_login',\n    ```", "```py\n              next=url_for('auth.home')) }}\"\n    ```", "```py\n              >Login via Facebook</a>\n    ```", "```py\n            <br/>\n    ```", "```py\n            <a href=\"{{ url_for('auth.google_login',\n    ```", "```py\n              next=url_for('auth.home')) }}\"\n    ```", "```py\n              >Login via Google</a>\n    ```", "```py\n            <br/>\n    ```", "```py\n            <a href=\"{{ url_for('auth.twitter_login',\n    ```", "```py\n              next=url_for('auth.home')) }}\"\n    ```", "```py\n              >Login via Twitter</a>\n    ```", "```py\n          </div>\n    ```", "```py\n          <div class=\"tab-pane\" id=\"ldap-form\">\n    ```", "```py\n            <br/>\n    ```", "```py\n            <form\n    ```", "```py\n                method=\"POST\"\n    ```", "```py\n                action=\"{{ url_for('auth.ldap_login') }}\"\n    ```", "```py\n                role=\"form\">\n    ```", "```py\n              {{ form.csrf_token }}\n    ```", "```py\n              <div class=\"form-group\">{{ form.username\n    ```", "```py\n                .label }}: {{ form.username() }}</div>\n    ```", "```py\n              <div class=\"form-group\">{{ form.password\n    ```", "```py\n                .label }}: {{ form.password() }}</div>\n    ```", "```py\n              <button type=\"submit\" class=\"btn btn-\n    ```", "```py\n                default\">Submit</button>\n    ```", "```py\n            </form>\n    ```", "```py\n          </div>\n    ```", "```py\n        </div>\n    ```", "```py\n      </div>\n    ```", "```py\n    {% endblock %}\n    ```"]