- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing Odoo Server Instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development
    Environment*, we looked at how to set up an Odoo instance using only the standard
    core add-ons that are shipped with the source. As a standard practice to customize
    Odoo default features, we create a separate module and keep it in a different
    repository so that you can later upgrade Odoo default and your own repository
    to keep it clean. This chapter focuses on adding non-core or custom add-ons to
    an Odoo instance. In Odoo, you can load add-ons from multiple directories. In
    addition, it is recommended that you load your third-party add-ons or your own
    custom add-ons from separate folders to avoid conflicts with Odoo core modules.
    Even Odoo Enterprise Edition is a type of add-ons directory, and you need to load
    this just like a normal add-ons directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the add-ons path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standardizing your instance directory layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and upgrading local add-on modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing add-on modules from GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying changes to add-ons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying and trying proposed **pull** **requests** (**PRs**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About the terminology
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will use the terms **module** interchangeably. All of them
    refer to the Odoo app or extension app that can be installed in Odoo from the
    user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the add-ons path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the help of the `addons_path` parameter, you can load your own add-on modules
    into Odoo. When Odoo initializes a new database, it will search for add-on modules
    within directories that have been provided in the `addons_path` configuration
    parameter. Odoo will search in these directories for the potential add-on module.
  prefs: []
  type: TYPE_NORMAL
- en: Directories listed in `addons_path` are expected to contain subdirectories,
    each of which is an add-on module. Following the initialization of the database,
    you will be able to install modules that are given in these directories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes that you have an instance ready with a configuration file
    generated, as described in the *Storing the instance configuration in a file*
    recipe in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo
    Development Environment*. Note that the source code of Odoo is available in `~/odoo-dev/odoo`,
    and the configuration file in `~/odoo-dev/odoo/myodoo.cfg`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add the `~/odoo-dev/local-addons` directory to the `addons_path` parameter
    of the instance, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the configuration file for your instance; that is, `~/odoo-dev/myodoo.cfg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the line starting with `addons_path=`. By default, this should look
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the line by appending a comma, followed by the name of the directory
    you want to add to `addons_path`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart your instance from the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Odoo is restarted, the configuration file is read. The value of the `addons_path`
    variable is expected to be a comma-separated list of directories. Relative paths
    are accepted, but they are relative to the current working directory and therefore
    should be avoided in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have only listed the add-ons directory in Odoo, but no add-on
    modules are present in `~/odoo-dev/local-addons`. And even if you add a new add-on
    module to this directory, Odoo does not show this module in the user interface.
    For this, you need to perform an extra operation, as explained in the previous
    chapter’s *Updating the add-on modules* *list* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The reason behind this is that when you initialize a new database, Odoo automatically
    lists your custom modules in available modules, but if you add new modules following
    database initialization, you then need to manually update the list of available
    modules, as shown in the *Updating the add-on modules list* recipe in [*Chapter
    1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo* *Development Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you call the `odoo-bin` script for the first time to initialize a new database,
    you can pass the `--addons-path` command-line argument with a comma-separated
    list of directories. This will initialize the list of available add-on modules
    with all of the add-ons found in the supplied add-ons path. When you do this,
    you have to explicitly include the base add-ons directory (`odoo/odoo/addons`)
    as well as the core add-ons directory (`odoo/addons`). A small difference with
    the preceding recipe is that the local add-ons must not be empty; they must contain
    at least one subdirectory, which has the minimal structure of an add-on module.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083), *Creating Odoo Add-on Modules*,
    we will look at how to write your own modules. In the meantime, here’s a quick
    hack to produce something that will make Odoo happy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `--save` option to save the path to the configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this case, using relative paths is OK since they will be converted into absolute
    paths in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Since Odoo only checks directories in the add-ons path for the presence of add-ons
    when the path is set from the command line, not when the path is loaded from a
    configuration file, the dummy module is no longer necessary. You may, therefore,
    remove it (or keep it until you’re sure that you won’t need to create a new configuration
    file).
  prefs: []
  type: TYPE_NORMAL
- en: Standardizing your instance directory layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We recommend that your development and production environments all use a similar
    directory layout. This standardization will prove helpful when you have to perform
    maintenance operations, and it will also ease your day-to-day work.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe creates a directory structure that groups files with similar life
    cycles or similar purposes in standardized subdirectories.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is only useful if you want to manage similar folder structure development
    and production environments. If you do not want this, you can skip this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Also, it is not compulsory to observe the same folder structure as in this recipe.
    Feel free to alter this structure to suit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We generate a clean directory structure with clearly labeled directories and
    dedicated roles. We are using different directories to store the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Code maintained by other people (in `src/`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local-specific code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file store of the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the proposed instance layout, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create one directory per instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ python3 -m venv env
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create some subdirectories, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`local/`: This is used to save your instance-specific add-ons'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`bin/`: This includes various helper executable shell scripts'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`filestore/`: This is used as a file store'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`logs/` (*optional*): This is used to store the server log files'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone Odoo and install the requirements (refer to [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo Development Environment*, for details on this):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '#!/bin/sh ROOT=$(dirname $0)/..'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PYTHON=$ROOT/env/bin/python3 ODOO=$ROOT/src/odoo/odoo-bin
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $PYTHON $ODOO -c $ROOT/projectname.cfg "$@" exit $?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the script executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an empty dummy local module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a configuration file for your instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'dotfiles, with exceptions:'
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: .*
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '!.gitignore'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: python compiled files
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '*.py[co]'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: emacs backup files
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '*~'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: not tracked subdirectories
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: /env/
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /src/
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /filestore/
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /logs/
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a Git repository for this instance and add the files you’ve added to
    Git:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By having one `virtualenv` environment per project, we are sure that the project’s
    dependencies will not interfere with the dependencies of other projects that may
    be running a different version of Odoo or will use different third-party add-on
    modules that require different versions of Python dependencies. This comes at
    the cost of a little disk space.
  prefs: []
  type: TYPE_NORMAL
- en: In a similar way, by using separate clones of Odoo and third-party add-on modules
    for our different projects, we are able to let each of these evolve independently
    and only install updates on instances that need them, hence reducing the risk
    of introducing regressions.
  prefs: []
  type: TYPE_NORMAL
- en: The `bin/odoo` script allows us to run the server without having to remember
    the various paths or activate the `virtualenv` environment. This also sets the
    configuration file for us. You can add extra scripts in there to help you in your
    day-to-day work. For instance, you can add a script to check out the different
    third-party projects that you need to run your instance.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding the configuration file, we have only demonstrated the bare minimum
    options to set up here, but you can obviously set up more, such as the database
    name, the database filter, or the port on which the project listens. Refer to
    [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development
    Environment*, for more information on this topic.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, by managing all of this in a Git repository, it becomes quite easy
    to replicate the setup on a different computer and share the development among
    a team.
  prefs: []
  type: TYPE_NORMAL
- en: Speedup tip
  prefs: []
  type: TYPE_NORMAL
- en: To facilitate project creation, you can create a template repository containing
    the empty structure and fork that repository for each new project. This will save
    you from retyping the `bin/odoo` script, the `.gitignore` file, and any other
    template file you need (`README.md`, changelog, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The development of complex modules requires various configuration options,
    which leads to updating the configuration file whenever you want to try any configuration
    option. Updating the configuration file frequently can be a headache, and to avoid
    this, an alternative way is to pass all configuration options from the command
    line, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activate `virtualenv` manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the Odoo source directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In *step 3*, we passed a few configuration options directly from the command
    line. The first is `--addons-path`, which loads Odoo’s core add-ons directory,
    `addons`, and your add-ons directory, `local`, in which you will put your own
    add-on modules. The `-d` option will use the `test-16` database or create a new
    database if it isn’t present. The `-i` option will install the `account`, `sale`,
    and `purchase` modules. Next, we passed the `log-level` option and increased the
    log level to `debug` so that it would display more information in the log.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: By using the command line, you can quickly change the configuration options.
    You can also see live logs in the terminal. For all available options, refer to
    [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development
    Environment*, or use the `--help` command to view a list of all options and a
    description of each option.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and upgrading local add-on modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The core functionality of Odoo comes from its add-on modules. You have a wealth
    of add-ons available as part of Odoo itself, as well as add-on modules that you
    can download from the app store or that have been written by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will demonstrate how to install and upgrade add-on modules
    through the web interface and from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: The main benefits of using the command line for these operations include being
    able to act on more than one add-on at a time and having a clear view of the server
    logs as the installation or update progresses, which is very useful when in development
    mode or when scripting the installation of an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that you have a running Odoo instance with its database initialized
    and the add-ons path properly set. In this recipe, we will install/upgrade a few
    add-on modules.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two possible methods to install or update add-ons—you can use the
    web interface or the command line.
  prefs: []
  type: TYPE_NORMAL
- en: From the web interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install a new add-on module in your database using the web interface, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to the instance using the **Administrator** account and open the **Apps**
    menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.1 – List of Odoo apps](img/B20997_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – List of Odoo apps
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the search box to locate the add-on you want to install. Here are a few
    instructions to help you with this task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the **Not** **Installed** filter.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If you’re looking for a specific functionality add-on rather than a broad functionality
    add-on, remove the **Apps** filter.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Type a part of the module name in the search box and use this as a **Module**
    filter.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You may find that using the list view gives something more readable.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Install** button under the module name on the card.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that some Odoo add-on modules have external Python dependencies. If Python
    dependencies are not installed in your system, then Odoo will abort the installation,
    and it will show the following dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Warning for external library dependency](img/B20997_02_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Warning for external library dependency
  prefs: []
  type: TYPE_NORMAL
- en: To fix this, just install the relevant Python dependencies on your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update a pre-installed module in your database, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to the instance using the **Administrator** account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Apps** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Apps**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Odoo apps list](img/B20997_02_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Odoo apps list
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the search box to locate the add-on you want to install. Here are a few
    tips:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the `crm` and press *Enter* to search CRM apps.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You may find that using the list view gives you something more readable.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the three dots in the top-right corner of the card and click on the
    **Upgrade** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Drop-down link for upgrading the module](img/B20997_02_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Drop-down link for upgrading the module
  prefs: []
  type: TYPE_NORMAL
- en: 'Activate **Developer** mode to see the technical name of the module. See [*Chapter
    1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development Environment*,
    if you don’t know how to activate developer mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Application’s technical names](img/B20997_02_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Application’s technical names
  prefs: []
  type: TYPE_NORMAL
- en: After activating developer mode, it will show the module’s technical name in
    red. If you are using Odoo Community Edition, you will see some extra apps with
    the **Upgrade** button. Those apps are Odoo Enterprise Edition apps, and in order
    to install/use them, you need to purchase a license.
  prefs: []
  type: TYPE_NORMAL
- en: From the command line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install new add-ons in your database, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the names of the add-ons. This is the name of the directory containing
    the `__manifest__.py` file, without the leading path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop the instance. If you are working on a production database, make a backup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may omit `-d dbname` if this is set in your configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Restart the instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To update an already installed add-on module in your database, perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the name of the add-on module to update; this is the name of the directory
    containing the `__manifest__.py` file, without the leading path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop the instance. If you are working on a production database, make a backup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may omit `-d dbname` if this is set in your configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Restart the instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The add-on module installation and update are two closely related processes,
    but there are some important differences, as highlighted in the following two
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Add-on installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you install an add-on, Odoo checks its list of available add-ons for an
    uninstalled add-on with the supplied name. It also checks for the dependencies
    of that add-on and, if there are any, it will recursively install them before
    installing the add-on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation process of a single module consists of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If there are any dependencies, run the `preinit` add-on hook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the model definitions from the Python source code and update the database
    structure, if necessary (refer to [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118),
    *Application Models*, for details).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the data files of the add-on and update the database contents, if necessary
    (refer to [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing Module Data*,
    for details).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the add-on demo data if demo data has been enabled in the instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there are any dependencies, run the add-on `postinit` hook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run a validation of the view definitions of the add-on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If demo data is enabled and a test is enabled, run the tests of the add-on (refer
    to [*Chapter 18*](B20997_18.xhtml#_idTextAnchor990), *Automated Test Cases*, for
    details).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the module state in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the translations in the database from the add-on’s translations (refer
    to [*Chapter 11*](B20997_11.xhtml#_idTextAnchor595), *Internationalization*, for
    details).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `preinit` and `postinit` hooks are defined in the `__manifest__.py` file
    using the `pre_init_hook` and `post_init_hook` keys, respectively. These hooks
    are used to invoke Python functions before and after the installation of an add-on
    module. To learn more about `init` hooks, refer to [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo* *Add-on Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: Add-on update
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you update an add-on, Odoo checks in its list of available add-on modules
    for an installed add-on with the given name. It also checks for the reverse dependencies
    of that add-on (these are add-ons that depend on the updated add-on). If any,
    it will recursively update them, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'The update process of a single add-on module consists of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the add-on module’s pre-migration steps, if any (refer to [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319),
    *Managing Module Data*, for details).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the model definitions from the Python source code and update the database
    structure if necessary (refer to [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118),
    *Application Models*, for details).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the data files of the add-on and update the database’s contents if necessary
    (refer to [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing Module Data*,
    for details).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the add-on’s demo data if demo data is enabled in the instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your module has any migration methods, run the add-on post-migration steps
    (refer to [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing Module Data*,
    for details).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run a validation of the view definitions of the add-on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If demo data is enabled and a test is enabled, run the tests of the add-on (refer
    to [*Chapter 18*](B20997_18.xhtml#_idTextAnchor990), *Automated Test Cases*, for
    details).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the module state in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the translations in the database from the add-on’s translations (refer
    to [*Chapter 11*](B20997_11.xhtml#_idTextAnchor595), *Internationalization*, for
    details).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that updating an add-on module that is not installed does nothing at all.
    However, installing an add-on module that is already installed reinstalls the
    add-on, which can have some unintended effects on some data files that contain
    data that is supposed to be updated by the user and not updated during the normal
    module update process (refer to the *Using the noupdate and forcecreate flags*
    recipe in [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing Module Data*).
    There is no risk of error from the user interface, but this can happen from the
    command line.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Be careful with dependency handling. Consider an instance where you want to
    have the `sale`, `sale_stock`, and `sale_specific` add-ons installed, with `sale_specific`
    depending on `sale_stock`, and `sale_stock` depending on `sale`. To install all
    three, you only need to install `sale_specific`, as it will recursively install
    the `sale_stock` and `sale` dependencies. To update all three, you need to update
    `sale` as this will recursively update the reverse dependencies, `sale_stock`
    and `sale_specific`.
  prefs: []
  type: TYPE_NORMAL
- en: Another tricky part with managing dependencies is when you add a dependency
    to an add-on that already has a version installed. Let’s understand this by continuing
    with the previous example. Imagine that you add a dependency on `stock_dropshipping`
    in `sale_specific`. Updating the `sale_specific` add-on will not automatically
    install the new dependency, and neither will requesting the installation of `sale_specific`.
    In this situation, you can get very nasty error messages because the Python code
    of the add-on is not successfully loaded, but the data of the add-on and the models’
    tables in the database are present. To resolve this, you need to stop the instance
    and manually install the new dependency.
  prefs: []
  type: TYPE_NORMAL
- en: Installing add-on modules from GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub is a great source of third-party add-ons. A lot of Odoo partners use
    GitHub to share the add-ons they maintain internally, and the **Odoo Community
    Association** (**OCA**) collectively maintains several hundred add-ons on GitHub.
    Before you start writing your own add-on, ensure you check that nothing already
    exists that you can use as is or as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to clone the `partner-contact` project of the
    OCA from GitHub and make the add-on modules it contains available in your instance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you want to add new fields to the customer (partner) form. By default,
    the Odoo customer model doesn’t have a `gender` field. If you want to add a `gender`
    field, you need to create a new module. Fortunately, someone on a mailing list
    tells you about the `partner_contact_gender` add-on module, which is maintained
    by the OCA as part of the `partner-contact` project.
  prefs: []
  type: TYPE_NORMAL
- en: The paths that are used in this recipe reflect the layout that was proposed
    in the *Standardizing your instance directory* *layout* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install `partner_contact_gender`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to your project’s directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ git clone --branch 17.0 \
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'add-ons_path line of instance.cfg should look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install the `partner_contact_gender` add-on (if you don’t know how to install
    the module, take a look at the previous recipe, *Installing and upgrading local*
    *add-on modules*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All OCA code repositories have their add-ons contained in separate subdirectories,
    which is coherent per what is expected by Odoo regarding the directories in the
    add-ons path. Consequently, just cloning the repository somewhere and adding that
    location in the add-ons path is enough.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some maintainers follow a different approach and have one add-on module per
    repository, living at the root of the repository. In that case, you need to create
    a new directory, which you will add to the add-ons path, and clone all of the
    add-ons from the maintainer you need in this directory. Remember to update the
    add-on modules list each time you add a new repository clone.
  prefs: []
  type: TYPE_NORMAL
- en: Applying changes to add-ons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most add-ons that are available on GitHub are subject to change and do not follow
    the rules that Odoo enforces for its stable release. They may receive bug fixes
    or enhancements, including issues or feature requests that you have submitted,
    and these changes may introduce database schema changes or updates in data files
    and views. This recipe explains how to install the updated versions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you reported an issue with `partner_contact_gender` and received a notification
    that the issue was solved in the last revision of the `17.0` branch of the `partner-contact`
    project. In this case, you would want to update your instance with this latest
    version.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To apply a source modification to your add-on from GitHub, you need to perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Stop the instance using that add-on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a backup if it is a production instance (refer to the *Managing Odoo server
    databases* recipe in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing
    the Odoo* *Development Environment*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the directory where `partner-contact` was cloned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a local tag for the project so that you can revert to that version in
    case things break:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the latest version of the source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Restart the instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Usually, the developer of the add-on module occasionally releases the newest
    version of the add-on. This update typically contains bug fixes and new features.
    Here, we will get a new version of the add-on and update it in our instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `git pull --ff-only` fails, you can revert to the previous version using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Then, you can try `git pull` (without `--ff-only`), which will cause a merge,
    but this means that you have local changes on the add-on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the update step breaks, refer to the *Updating Odoo from source* recipe in
    [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development
    Environment*, for recovery instructions. Remember to always test an update on
    a copy of a database production first.
  prefs: []
  type: TYPE_NORMAL
- en: Applying and trying proposed PRs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the GitHub world, a PR is a request that’s made by a developer so that the
    maintainers of a project can include some new developments. Such a PR may contain
    a bug fix or a new feature. These requests are reviewed and tested before being
    pulled into the `main` branch.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to apply a PR to your Odoo project in order to test
    an improvement or a bug fix.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As in the previous recipe, suppose you reported an issue with `partner_address_street3`
    and received a notification that the issue was solved in a PR, which hasn’t been
    merged in the `17.0` branch of the project. The developer asks you to validate
    the fix in PR *#123*. You need to update a test instance with this branch.
  prefs: []
  type: TYPE_NORMAL
- en: You should not try out such branches directly on a production database, so first
    create a test environment with a copy of the production database (refer to [*Chapter
    1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo* *Development Environment*).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To apply and try out a GitHub PR for an add-on, you need to perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Stop the instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the directory where `partner-contact` was cloned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a local tag for the project so that you can revert to that version in
    case things break:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: partner_contact_gender1 add-on module in your database and restart the instance
    (refer to the *Installing and upgrading local add-on modules* recipe if you don’t
    know how to update the module).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Test the update—try to reproduce your issue, or try out the feature you wanted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this doesn’t work, comment on the PR page of GitHub, explaining what you
    did and what didn’t work so that the developer can update the PR.
  prefs: []
  type: TYPE_NORMAL
- en: If it works, say so on the PR page too; this is an essential part of the PR
    validation process, and it will speed up merging in the `main` branch.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are using a GitHub feature that enables PRs to be pulled by number using
    the `pull/nnnn/head` branch name, where `nnnn` is the number of the PR. The `git
    pull` command will merge the remote branch in ours, applying the changes in our
    code base. After this, we update the add-on module, test it, and report back to
    the author of the change with regard to any failures or successes.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can repeat *step 4* of this recipe for different PRs in the same repository
    if you want to test them simultaneously. If you are really happy with the result,
    you can create a branch to keep a reference to the result of the applied changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Using a different branch will help you remember that you are not using the version
    from GitHub, but a custom one.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `git branch` command can be used to list all local branches you have in
    your repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'From then on, if you need to apply the latest revision of the `17.0` branch
    from GitHub, you will need to pull it without using `--ff-only`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
