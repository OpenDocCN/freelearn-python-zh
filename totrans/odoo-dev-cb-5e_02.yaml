- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Managing Odoo Server Instances
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理Odoo服务器实例
- en: In [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development
    Environment*, we looked at how to set up an Odoo instance using only the standard
    core add-ons that are shipped with the source. As a standard practice to customize
    Odoo default features, we create a separate module and keep it in a different
    repository so that you can later upgrade Odoo default and your own repository
    to keep it clean. This chapter focuses on adding non-core or custom add-ons to
    an Odoo instance. In Odoo, you can load add-ons from multiple directories. In
    addition, it is recommended that you load your third-party add-ons or your own
    custom add-ons from separate folders to avoid conflicts with Odoo core modules.
    Even Odoo Enterprise Edition is a type of add-ons directory, and you need to load
    this just like a normal add-ons directory.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第1章*](B20997_01.xhtml#_idTextAnchor020)中，*安装Odoo开发环境*，我们探讨了如何仅使用源代码中提供的标准核心附加模块来设置Odoo实例。作为自定义Odoo默认功能的常规做法，我们创建一个单独的模块并将其保存在不同的存储库中，以便您可以稍后升级Odoo默认功能和您的存储库以保持其整洁。本章重点介绍向Odoo实例添加非核心或自定义附加模块。在Odoo中，您可以从多个目录加载附加模块。此外，建议您从单独的文件夹中加载第三方附加模块或您自己的自定义附加模块，以避免与Odoo核心模块冲突。即使是Odoo企业版也是一个附加模块目录，您需要像正常附加模块目录一样加载它。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Configuring the add-ons path
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置附加模块路径
- en: Standardizing your instance directory layout
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准化实例目录布局
- en: Installing and upgrading local add-on modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和升级本地附加模块
- en: Installing add-on modules from GitHub
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从GitHub安装附加模块
- en: Applying changes to add-ons
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用附加模块的更改
- en: Applying and trying proposed **pull** **requests** (**PRs**)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用和尝试提出的**拉取请求**（**PRs**）
- en: About the terminology
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 关于术语
- en: In this book, we will use the terms **module** interchangeably. All of them
    refer to the Odoo app or extension app that can be installed in Odoo from the
    user interface.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用**模块**一词互换。所有这些都指的是可以从用户界面安装到Odoo的应用程序或扩展应用程序。
- en: Configuring the add-ons path
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置附加模块路径
- en: With the help of the `addons_path` parameter, you can load your own add-on modules
    into Odoo. When Odoo initializes a new database, it will search for add-on modules
    within directories that have been provided in the `addons_path` configuration
    parameter. Odoo will search in these directories for the potential add-on module.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`addons_path`参数的帮助，您可以将自己的附加模块加载到Odoo中。当Odoo初始化一个新的数据库时，它将在`addons_path`配置参数中提供的目录内搜索附加模块。Odoo将在这些目录中搜索潜在的附加模块。
- en: Directories listed in `addons_path` are expected to contain subdirectories,
    each of which is an add-on module. Following the initialization of the database,
    you will be able to install modules that are given in these directories.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在`addons_path`中列出的目录应包含子目录，每个子目录都是一个附加模块。在数据库初始化之后，您将能够安装这些目录中给出的模块。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you have an instance ready with a configuration file
    generated, as described in the *Storing the instance configuration in a file*
    recipe in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo
    Development Environment*. Note that the source code of Odoo is available in `~/odoo-dev/odoo`,
    and the configuration file in `~/odoo-dev/odoo/myodoo.cfg`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经准备好一个实例，并生成了一个配置文件，如[*第1章*](B20997_01.xhtml#_idTextAnchor020)中“将实例配置存储在文件中”食谱所述，*安装Odoo开发环境*。请注意，Odoo的源代码位于`~/odoo-dev/odoo`，配置文件位于`~/odoo-dev/odoo/myodoo.cfg`。
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To add the `~/odoo-dev/local-addons` directory to the `addons_path` parameter
    of the instance, perform the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`~/odoo-dev/local-addons`目录添加到实例的`addons_path`参数中，请执行以下步骤：
- en: Edit the configuration file for your instance; that is, `~/odoo-dev/myodoo.cfg`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑您实例的配置文件；即`~/odoo-dev/myodoo.cfg`。
- en: 'Locate the line starting with `addons_path=`. By default, this should look
    like the following:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位以`addons_path=`开头的行。默认情况下，它应该看起来像以下这样：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Modify the line by appending a comma, followed by the name of the directory
    you want to add to `addons_path`, as shown in the following code:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在后面添加逗号，然后是您想要添加到`addons_path`中的目录名称，来修改该行，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Restart your instance from the terminal:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端重启您的实例：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When Odoo is restarted, the configuration file is read. The value of the `addons_path`
    variable is expected to be a comma-separated list of directories. Relative paths
    are accepted, but they are relative to the current working directory and therefore
    should be avoided in the configuration file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当Odoo重新启动时，会读取配置文件。期望`addons_path`变量的值是一个逗号分隔的目录列表。接受相对路径，但它们相对于当前工作目录，因此在配置文件中应避免使用。
- en: At this point, we have only listed the add-ons directory in Odoo, but no add-on
    modules are present in `~/odoo-dev/local-addons`. And even if you add a new add-on
    module to this directory, Odoo does not show this module in the user interface.
    For this, you need to perform an extra operation, as explained in the previous
    chapter’s *Updating the add-on modules* *list* recipe.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只在Odoo中列出了附加组件目录，但在`~/odoo-dev/local-addons`中没有任何附加组件模块。即使您将新的附加组件模块添加到此目录，Odoo也不会在用户界面中显示此模块。为此，您需要执行额外操作，如前一章中“更新附加组件模块列表”食谱中所述。
- en: Note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The reason behind this is that when you initialize a new database, Odoo automatically
    lists your custom modules in available modules, but if you add new modules following
    database initialization, you then need to manually update the list of available
    modules, as shown in the *Updating the add-on modules list* recipe in [*Chapter
    1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo* *Development Environment*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 原因在于，当您初始化新数据库时，Odoo会自动将您的自定义模块列在可用模块中，但如果您在数据库初始化后添加新模块，那么您就需要手动更新可用模块列表，如[*第1章*](B20997_01.xhtml#_idTextAnchor020)，“安装Odoo开发环境”中“更新附加组件模块列表”食谱所示。
- en: There’s more…
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When you call the `odoo-bin` script for the first time to initialize a new database,
    you can pass the `--addons-path` command-line argument with a comma-separated
    list of directories. This will initialize the list of available add-on modules
    with all of the add-ons found in the supplied add-ons path. When you do this,
    you have to explicitly include the base add-ons directory (`odoo/odoo/addons`)
    as well as the core add-ons directory (`odoo/addons`). A small difference with
    the preceding recipe is that the local add-ons must not be empty; they must contain
    at least one subdirectory, which has the minimal structure of an add-on module.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当您第一次调用`odoo-bin`脚本以初始化新数据库时，您可以使用逗号分隔的目录列表传递`--addons-path`命令行参数。这将初始化包含在提供的附加组件路径中找到的所有附加组件的可用模块列表。当您这样做时，您必须明确包含基本附加组件目录（`odoo/odoo/addons`）以及核心附加组件目录（`odoo/addons`）。与前面的食谱略有不同的是，本地附加组件不能为空；它们必须包含至少一个子目录，该子目录具有附加模块的最小结构。
- en: 'In [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083), *Creating Odoo Add-on Modules*,
    we will look at how to write your own modules. In the meantime, here’s a quick
    hack to produce something that will make Odoo happy:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B20997_03.xhtml#_idTextAnchor083)，“创建Odoo附加组件模块”中，我们将探讨如何编写您自己的模块。在此期间，这里有一个快速技巧来生成Odoo会高兴的东西：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can use the `--save` option to save the path to the configuration file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`--save`选项来保存配置文件的路径：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this case, using relative paths is OK since they will be converted into absolute
    paths in the configuration file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用相对路径是可以的，因为它们将在配置文件中转换为绝对路径。
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Since Odoo only checks directories in the add-ons path for the presence of add-ons
    when the path is set from the command line, not when the path is loaded from a
    configuration file, the dummy module is no longer necessary. You may, therefore,
    remove it (or keep it until you’re sure that you won’t need to create a new configuration
    file).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Odoo仅在从命令行设置路径时检查附加路径中的目录以查找附加组件，而不是在从配置文件加载路径时检查，因此虚拟模块不再必要。因此，您可以将其删除（或者保留，直到您确信您不需要创建新的配置文件）。
- en: Standardizing your instance directory layout
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准化实例目录布局
- en: We recommend that your development and production environments all use a similar
    directory layout. This standardization will prove helpful when you have to perform
    maintenance operations, and it will also ease your day-to-day work.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您的开发和生产环境都使用类似的目录布局。这种标准化将在您必须执行维护操作时非常有用，它还将使您日常工作更加轻松。
- en: This recipe creates a directory structure that groups files with similar life
    cycles or similar purposes in standardized subdirectories.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱创建了一个目录结构，将具有相似生命周期或类似目的的文件分组到标准子目录中。
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This recipe is only useful if you want to manage similar folder structure development
    and production environments. If you do not want this, you can skip this recipe.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方仅在你想要管理类似的结构化开发和生产环境时有用。如果你不希望这样做，你可以跳过此配方。
- en: Also, it is not compulsory to observe the same folder structure as in this recipe.
    Feel free to alter this structure to suit your needs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，没有必要遵循此配方中相同的文件夹结构。请随意更改此结构以适应你的需求。
- en: 'We generate a clean directory structure with clearly labeled directories and
    dedicated roles. We are using different directories to store the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生成一个干净的目录结构，具有清晰标记的目录和专用角色。我们使用不同的目录来存储以下内容：
- en: Code maintained by other people (in `src/`)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由其他人维护的代码（在`src/`中）
- en: Local-specific code
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地特定代码
- en: The file store of the instance
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例的文件存储
- en: How to do it…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'To create the proposed instance layout, you need to perform the following steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建建议的实例布局，你需要执行以下步骤：
- en: 'Create one directory per instance:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个实例创建一个目录：
- en: '[PRE5]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: $ python3 -m venv env
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ python3 -m venv env
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create some subdirectories, as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一些子目录，如下所示：
- en: '[PRE7]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`local/`: This is used to save your instance-specific add-ons'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`local/`：这用于保存你的实例特定附加组件'
- en: '`bin/`: This includes various helper executable shell scripts'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bin/`：这包括各种辅助可执行 shell 脚本'
- en: '`filestore/`: This is used as a file store'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`filestore/`：这被用作文件存储'
- en: '`logs/` (*optional*): This is used to store the server log files'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`logs/`（*可选*）：这用于存储服务器日志文件'
- en: 'Clone Odoo and install the requirements (refer to [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo Development Environment*, for details on this):'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆 Odoo 并安装需求（有关此操作的详细信息，请参阅[*第1章*](B20997_01.xhtml#_idTextAnchor020)，*安装 Odoo
    开发环境*）：
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '#!/bin/sh ROOT=$(dirname $0)/..'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#!/bin/sh ROOT=$(dirname $0)/..'
- en: PYTHON=$ROOT/env/bin/python3 ODOO=$ROOT/src/odoo/odoo-bin
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PYTHON=$ROOT/env/bin/python3 ODOO=$ROOT/src/odoo/odoo-bin
- en: $PYTHON $ODOO -c $ROOT/projectname.cfg "$@" exit $?
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $PYTHON $ODOO -c $ROOT/projectname.cfg "$@" exit $?
- en: '[PRE9]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Make the script executable:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使脚本可执行：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create an empty dummy local module:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空的虚拟本地模块：
- en: '[PRE11]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Generate a configuration file for your instance:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的实例生成一个配置文件：
- en: '[PRE12]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'dotfiles, with exceptions:'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: dotfiles，但有例外：
- en: .*
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .*
- en: '!.gitignore'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '!.gitignore'
- en: python compiled files
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: python 编译文件
- en: '*.py[co]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*.py[co]'
- en: emacs backup files
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: emacs 备份文件
- en: '*~'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*~'
- en: not tracked subdirectories
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未跟踪的子目录
- en: /env/
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /env/
- en: /src/
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /src/
- en: /filestore/
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /filestore/
- en: /logs/
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /logs/
- en: '[PRE13]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a Git repository for this instance and add the files you’ve added to
    Git:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此实例创建一个 Git 仓库，并将你添加到 Git 的文件：
- en: '[PRE14]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: By having one `virtualenv` environment per project, we are sure that the project’s
    dependencies will not interfere with the dependencies of other projects that may
    be running a different version of Odoo or will use different third-party add-on
    modules that require different versions of Python dependencies. This comes at
    the cost of a little disk space.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为每个项目使用一个 `virtualenv` 环境，我们确保项目的依赖项不会与其他项目的依赖项冲突，这些项目可能运行不同版本的 Odoo 或将使用需要不同
    Python 依赖项版本的第三方附加模块。这以牺牲少量磁盘空间为代价。
- en: In a similar way, by using separate clones of Odoo and third-party add-on modules
    for our different projects, we are able to let each of these evolve independently
    and only install updates on instances that need them, hence reducing the risk
    of introducing regressions.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，通过使用针对我们不同项目的单独克隆的 Odoo 和第三方附加模块，我们能够让每个项目独立发展，并且只在需要它们的实例上安装更新，从而降低引入回归的风险。
- en: The `bin/odoo` script allows us to run the server without having to remember
    the various paths or activate the `virtualenv` environment. This also sets the
    configuration file for us. You can add extra scripts in there to help you in your
    day-to-day work. For instance, you can add a script to check out the different
    third-party projects that you need to run your instance.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`bin/odoo` 脚本允许我们运行服务器而无需记住各种路径或激活 `virtualenv` 环境。这也为我们设置了配置文件。你可以在其中添加额外的脚本以帮助你在日常工作中。例如，你可以添加一个脚本来检出你需要运行实例的不同第三方项目。'
- en: Regarding the configuration file, we have only demonstrated the bare minimum
    options to set up here, but you can obviously set up more, such as the database
    name, the database filter, or the port on which the project listens. Refer to
    [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development
    Environment*, for more information on this topic.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 关于配置文件，我们在这里只演示了设置的基本选项，但你可以显然设置更多，例如数据库名称、数据库过滤器或项目监听的端口。有关此主题的更多信息，请参阅[*第1章*](B20997_01.xhtml#_idTextAnchor020)，*安装Odoo开发环境*。
- en: Finally, by managing all of this in a Git repository, it becomes quite easy
    to replicate the setup on a different computer and share the development among
    a team.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过在Git仓库中管理所有这些，使得在不同的计算机上复制设置变得非常容易，并且可以在团队间共享开发。
- en: Speedup tip
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 加速技巧
- en: To facilitate project creation, you can create a template repository containing
    the empty structure and fork that repository for each new project. This will save
    you from retyping the `bin/odoo` script, the `.gitignore` file, and any other
    template file you need (`README.md`, changelog, and so on).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便项目创建，你可以创建一个包含空结构的模板仓库，并为每个新项目分叉该仓库。这将帮助你避免重复输入`bin/odoo`脚本、`.gitignore`文件以及任何其他需要的模板文件（如`README.md`、变更日志等）。
- en: There’s more...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'The development of complex modules requires various configuration options,
    which leads to updating the configuration file whenever you want to try any configuration
    option. Updating the configuration file frequently can be a headache, and to avoid
    this, an alternative way is to pass all configuration options from the command
    line, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂模块的开发需要各种配置选项，这导致每次想要尝试任何配置选项时都需要更新配置文件。频繁更新配置文件可能会让人头疼，为了避免这种情况，一种替代方法是直接从命令行传递所有配置选项，如下所示：
- en: 'Activate `virtualenv` manually:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 手动激活`virtualenv`：
- en: '[PRE15]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Go to the Odoo source directory:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入Odoo源目录：
- en: '[PRE16]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the server:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行服务器：
- en: '[PRE17]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In *step 3*, we passed a few configuration options directly from the command
    line. The first is `--addons-path`, which loads Odoo’s core add-ons directory,
    `addons`, and your add-ons directory, `local`, in which you will put your own
    add-on modules. The `-d` option will use the `test-16` database or create a new
    database if it isn’t present. The `-i` option will install the `account`, `sale`,
    and `purchase` modules. Next, we passed the `log-level` option and increased the
    log level to `debug` so that it would display more information in the log.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，我们直接从命令行传递了一些配置选项。第一个是`--addons-path`，它加载Odoo的核心附加模块目录`addons`和你的附加模块目录`local`，你将在其中放置自己的附加模块。`-d`选项将使用`test-16`数据库或如果没有则创建一个新的数据库。`-i`选项将安装`account`、`sale`和`purchase`模块。接下来，我们传递了`log-level`选项并将日志级别增加到`debug`，以便在日志中显示更多信息。
- en: Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: By using the command line, you can quickly change the configuration options.
    You can also see live logs in the terminal. For all available options, refer to
    [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development
    Environment*, or use the `--help` command to view a list of all options and a
    description of each option.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用命令行，你可以快速更改配置选项。你还可以在终端中查看实时日志。有关所有可用选项，请参阅[*第1章*](B20997_01.xhtml#_idTextAnchor020)，*安装Odoo开发环境*，或使用`--help`命令查看所有选项及其描述。
- en: Installing and upgrading local add-on modules
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和升级本地附加模块
- en: The core functionality of Odoo comes from its add-on modules. You have a wealth
    of add-ons available as part of Odoo itself, as well as add-on modules that you
    can download from the app store or that have been written by yourself.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo的核心功能来自于其附加模块。Odoo本身提供了丰富的附加模块，同时你也可以从应用商店下载附加模块，或者自己编写附加模块。
- en: In this recipe, we will demonstrate how to install and upgrade add-on modules
    through the web interface and from the command line.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将演示如何通过Web界面和命令行安装和升级附加模块。
- en: The main benefits of using the command line for these operations include being
    able to act on more than one add-on at a time and having a clear view of the server
    logs as the installation or update progresses, which is very useful when in development
    mode or when scripting the installation of an instance.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行进行这些操作的主要好处包括能够同时操作多个附加模块，以及在安装或更新过程中清晰地查看服务器日志，这在开发模式或编写实例安装脚本时非常有用。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that you have a running Odoo instance with its database initialized
    and the add-ons path properly set. In this recipe, we will install/upgrade a few
    add-on modules.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您有一个正在运行的Odoo实例，其数据库已初始化，并且插件路径已正确设置。在本食谱中，我们将安装/升级几个插件模块。
- en: How to do it…
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: There are two possible methods to install or update add-ons—you can use the
    web interface or the command line.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 安装或更新插件有两种可能的方法——您可以使用Web界面或命令行。
- en: From the web interface
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Web界面
- en: 'To install a new add-on module in your database using the web interface, perform
    the following steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Web界面在您的数据库中安装新的插件模块，请执行以下步骤：
- en: 'Connect to the instance using the **Administrator** account and open the **Apps**
    menu:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**管理员**账户连接到实例并打开**应用**菜单：
- en: '![Figure 2.1 – List of Odoo apps](img/B20997_02_1.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – Odoo应用列表](img/B20997_02_1.jpg)'
- en: Figure 2.1 – List of Odoo apps
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – Odoo应用列表
- en: 'Use the search box to locate the add-on you want to install. Here are a few
    instructions to help you with this task:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用搜索框定位您想要安装的插件。以下是一些帮助您完成此任务的说明：
- en: Activate the **Not** **Installed** filter.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活**未安装**过滤器。
- en: If you’re looking for a specific functionality add-on rather than a broad functionality
    add-on, remove the **Apps** filter.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在寻找特定功能的插件而不是广泛功能的插件，请移除**应用**过滤器。
- en: Type a part of the module name in the search box and use this as a **Module**
    filter.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入模块名称的一部分，并将其用作**模块**过滤器。
- en: You may find that using the list view gives something more readable.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能会发现使用列表视图更易于阅读。
- en: Click on the **Install** button under the module name on the card.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在卡片下模块名称下点击**安装**按钮。
- en: 'Note that some Odoo add-on modules have external Python dependencies. If Python
    dependencies are not installed in your system, then Odoo will abort the installation,
    and it will show the following dialog:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一些Odoo插件模块有外部Python依赖项。如果系统上未安装Python依赖项，则Odoo将中止安装，并显示以下对话框：
- en: '![Figure 2.2 – Warning for external library dependency](img/B20997_02_2.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2 – 外部库依赖警告](img/B20997_02_2.jpg)'
- en: Figure 2.2 – Warning for external library dependency
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – 外部库依赖警告
- en: To fix this, just install the relevant Python dependencies on your system.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，只需在您的系统上安装相关的Python依赖项。
- en: 'To update a pre-installed module in your database, perform the following steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新数据库中预安装的模块，请执行以下步骤：
- en: Connect to the instance using the **Administrator** account.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**管理员**账户连接到实例。
- en: Open the **Apps** menu.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**应用**菜单。
- en: 'Click on **Apps**:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**应用**：
- en: '![Figure 2.3 – Odoo apps list](img/B20997_02_3.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图2.3 – Odoo应用列表](img/B20997_02_3.jpg)'
- en: Figure 2.3 – Odoo apps list
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – Odoo应用列表
- en: 'Use the search box to locate the add-on you want to install. Here are a few
    tips:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用搜索框定位您想要安装的插件。以下是一些建议：
- en: Activate the `crm` and press *Enter* to search CRM apps.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活`crm`并按*Enter*键搜索CRM应用。
- en: You may find that using the list view gives you something more readable.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能会发现使用列表视图更易于阅读。
- en: 'Click on the three dots in the top-right corner of the card and click on the
    **Upgrade** option:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在卡片右上角的三点处点击，然后点击**升级**选项：
- en: '![Figure 2.4 – Drop-down link for upgrading the module](img/B20997_02_4.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图2.4 – 升级模块的下拉链接](img/B20997_02_4.jpg)'
- en: Figure 2.4 – Drop-down link for upgrading the module
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – 升级模块的下拉链接
- en: 'Activate **Developer** mode to see the technical name of the module. See [*Chapter
    1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development Environment*,
    if you don’t know how to activate developer mode:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 激活**开发者**模式以查看模块的技术名称。如果您不知道如何激活开发者模式，请参阅[*第1章*](B20997_01.xhtml#_idTextAnchor020)，*安装Odoo开发环境*：
- en: '![Figure 2.5 – Application’s technical names](img/B20997_02_5.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图2.5 – 应用程序的技术名称](img/B20997_02_5.jpg)'
- en: Figure 2.5 – Application’s technical names
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 – 应用程序的技术名称
- en: After activating developer mode, it will show the module’s technical name in
    red. If you are using Odoo Community Edition, you will see some extra apps with
    the **Upgrade** button. Those apps are Odoo Enterprise Edition apps, and in order
    to install/use them, you need to purchase a license.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 激活开发者模式后，它将以红色显示模块的技术名称。如果您使用的是Odoo社区版，您将看到一些带有**升级**按钮的额外应用。这些应用是Odoo企业版应用，为了安装/使用它们，您需要购买许可证。
- en: From the command line
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从命令行
- en: 'To install new add-ons in your database, perform the following steps:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的数据库中安装新插件，请执行以下步骤：
- en: Find the names of the add-ons. This is the name of the directory containing
    the `__manifest__.py` file, without the leading path.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到扩展的名称。这是包含`__manifest__.py`文件的目录名称，不包括前导路径。
- en: Stop the instance. If you are working on a production database, make a backup.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止实例。如果您正在处理生产数据库，请进行备份。
- en: 'Run the following command:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE18]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You may omit `-d dbname` if this is set in your configuration file.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在配置文件中已设置，则可以省略`-d dbname`。
- en: Restart the instance.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动实例。
- en: 'To update an already installed add-on module in your database, perform the
    following steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新数据库中已安装的扩展模块，请执行以下步骤：
- en: Find the name of the add-on module to update; this is the name of the directory
    containing the `__manifest__.py` file, without the leading path.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到要更新的扩展模块名称；这是包含`__manifest__.py`文件的目录名称，不包括前导路径。
- en: Stop the instance. If you are working on a production database, make a backup.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止实例。如果您正在处理生产数据库，请进行备份。
- en: 'Run the following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE19]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You may omit `-d dbname` if this is set in your configuration file.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在配置文件中已设置，则可以省略`-d dbname`。
- en: Restart the instance.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动实例。
- en: How it works…
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The add-on module installation and update are two closely related processes,
    but there are some important differences, as highlighted in the following two
    sections.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展模块的安装和更新是两个密切相关的过程，但有一些重要区别，如下两个部分所强调的。
- en: Add-on installation
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展安装
- en: When you install an add-on, Odoo checks its list of available add-ons for an
    uninstalled add-on with the supplied name. It also checks for the dependencies
    of that add-on and, if there are any, it will recursively install them before
    installing the add-on.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装扩展时，Odoo会检查其可用的扩展列表，以查找具有提供名称未安装的扩展。它还会检查该扩展的依赖项，如果有，它会在安装扩展之前递归地安装它们。
- en: 'The installation process of a single module consists of the following steps:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 单个模块的安装过程包括以下步骤：
- en: If there are any dependencies, run the `preinit` add-on hook.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有任何依赖项，运行`preinit`扩展钩子。
- en: Load the model definitions from the Python source code and update the database
    structure, if necessary (refer to [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118),
    *Application Models*, for details).
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Python源代码加载模型定义，并根据需要更新数据库结构（有关详细信息，请参阅[*第4章*](B20997_04.xhtml#_idTextAnchor118)，*应用模型*）。
- en: Load the data files of the add-on and update the database contents, if necessary
    (refer to [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing Module Data*,
    for details).
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载扩展的数据文件，并根据需要更新数据库内容（有关详细信息，请参阅[*第6章*](B20997_06.xhtml#_idTextAnchor319)，*管理模块数据*）。
- en: Install the add-on demo data if demo data has been enabled in the instance.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在实例中启用了演示数据，则安装扩展的演示数据。
- en: If there are any dependencies, run the add-on `postinit` hook.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有任何依赖项，运行扩展的`postinit`钩子。
- en: Run a validation of the view definitions of the add-on.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行扩展视图定义的验证。
- en: If demo data is enabled and a test is enabled, run the tests of the add-on (refer
    to [*Chapter 18*](B20997_18.xhtml#_idTextAnchor990), *Automated Test Cases*, for
    details).
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果启用了演示数据和测试，则运行扩展的测试（有关详细信息，请参阅[*第18章*](B20997_18.xhtml#_idTextAnchor990)，*自动化测试用例*）。
- en: Update the module state in the database.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新数据库中的模块状态。
- en: Update the translations in the database from the add-on’s translations (refer
    to [*Chapter 11*](B20997_11.xhtml#_idTextAnchor595), *Internationalization*, for
    details).
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从扩展的翻译中更新数据库中的翻译（有关详细信息，请参阅[*第11章*](B20997_11.xhtml#_idTextAnchor595)，*国际化*）。
- en: Note
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `preinit` and `postinit` hooks are defined in the `__manifest__.py` file
    using the `pre_init_hook` and `post_init_hook` keys, respectively. These hooks
    are used to invoke Python functions before and after the installation of an add-on
    module. To learn more about `init` hooks, refer to [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo* *Add-on Modules*.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`preinit`和`postinit`钩子分别使用`pre_init_hook`和`post_init_hook`键在`__manifest__.py`文件中定义。这些钩子用于在安装扩展模块之前和之后调用Python函数。要了解更多关于`init`钩子的信息，请参阅[*第3章*](B20997_03.xhtml#_idTextAnchor083)，*创建Odoo扩展模块*。'
- en: Add-on update
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展更新
- en: When you update an add-on, Odoo checks in its list of available add-on modules
    for an installed add-on with the given name. It also checks for the reverse dependencies
    of that add-on (these are add-ons that depend on the updated add-on). If any,
    it will recursively update them, too.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当您更新扩展时，Odoo会检查其可用的扩展模块列表，以查找具有给定名称已安装的扩展。它还会检查该扩展的逆向依赖项（这些是依赖于更新扩展的扩展）。如果有，它也会递归地更新它们。
- en: 'The update process of a single add-on module consists of the following steps:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 单个附加组件模块的更新过程包括以下步骤：
- en: Run the add-on module’s pre-migration steps, if any (refer to [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319),
    *Managing Module Data*, for details).
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有，运行附加组件模块的预迁移步骤（有关详细信息，请参阅[*第6章*](B20997_06.xhtml#_idTextAnchor319)，*管理模块数据*）。
- en: Load the model definitions from the Python source code and update the database
    structure if necessary (refer to [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118),
    *Application Models*, for details).
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Python源代码加载模型定义，并在必要时更新数据库结构（有关详细信息，请参阅[*第4章*](B20997_04.xhtml#_idTextAnchor118)，*应用模型*）。
- en: Load the data files of the add-on and update the database’s contents if necessary
    (refer to [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing Module Data*,
    for details).
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载附加组件的数据文件，并在必要时更新数据库内容（有关详细信息，请参阅[*第6章*](B20997_06.xhtml#_idTextAnchor319)，*管理模块数据*）。
- en: Update the add-on’s demo data if demo data is enabled in the instance.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果实例中启用了演示数据，则更新附加组件的演示数据。
- en: If your module has any migration methods, run the add-on post-migration steps
    (refer to [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing Module Data*,
    for details).
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的模块有任何迁移方法，运行附加组件的后期迁移步骤（有关详细信息，请参阅[*第6章*](B20997_06.xhtml#_idTextAnchor319)，*管理模块数据*）。
- en: Run a validation of the view definitions of the add-on.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行附加组件视图定义的验证。
- en: If demo data is enabled and a test is enabled, run the tests of the add-on (refer
    to [*Chapter 18*](B20997_18.xhtml#_idTextAnchor990), *Automated Test Cases*, for
    details).
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果启用了演示数据和测试，则运行附加组件的测试（有关详细信息，请参阅[*第18章*](B20997_18.xhtml#_idTextAnchor990)，*自动化测试用例*）。
- en: Update the module state in the database.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新数据库中的模块状态。
- en: Update the translations in the database from the add-on’s translations (refer
    to [*Chapter 11*](B20997_11.xhtml#_idTextAnchor595), *Internationalization*, for
    details).
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从附加组件的翻译中更新数据库中的翻译（有关详细信息，请参阅[*第11章*](B20997_11.xhtml#_idTextAnchor595)，*国际化*）。
- en: Note
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that updating an add-on module that is not installed does nothing at all.
    However, installing an add-on module that is already installed reinstalls the
    add-on, which can have some unintended effects on some data files that contain
    data that is supposed to be updated by the user and not updated during the normal
    module update process (refer to the *Using the noupdate and forcecreate flags*
    recipe in [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing Module Data*).
    There is no risk of error from the user interface, but this can happen from the
    command line.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，更新尚未安装的附加组件模块没有任何作用。然而，安装已安装的附加组件模块会重新安装该附加组件，这可能会对某些数据文件产生一些意外影响，这些数据文件包含应由用户更新但在正常模块更新过程中未更新的数据（请参阅[*第6章*](B20997_06.xhtml#_idTextAnchor319)，*管理模块数据*中的*使用noupdate和forcecreate标志*配方）。用户界面没有错误风险，但这种情况可能会在命令行中发生。
- en: There’s more…
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Be careful with dependency handling. Consider an instance where you want to
    have the `sale`, `sale_stock`, and `sale_specific` add-ons installed, with `sale_specific`
    depending on `sale_stock`, and `sale_stock` depending on `sale`. To install all
    three, you only need to install `sale_specific`, as it will recursively install
    the `sale_stock` and `sale` dependencies. To update all three, you need to update
    `sale` as this will recursively update the reverse dependencies, `sale_stock`
    and `sale_specific`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理依赖关系时要小心。考虑这样一个例子，你想要安装`sale`、`sale_stock`和`sale_specific`附加组件，其中`sale_specific`依赖于`sale_stock`，而`sale_stock`依赖于`sale`。要安装所有三个，你只需要安装`sale_specific`，因为它会递归地安装`sale_stock`和`sale`依赖项。要更新所有三个，你需要更新`sale`，因为这会递归地更新反向依赖项`sale_stock`和`sale_specific`。
- en: Another tricky part with managing dependencies is when you add a dependency
    to an add-on that already has a version installed. Let’s understand this by continuing
    with the previous example. Imagine that you add a dependency on `stock_dropshipping`
    in `sale_specific`. Updating the `sale_specific` add-on will not automatically
    install the new dependency, and neither will requesting the installation of `sale_specific`.
    In this situation, you can get very nasty error messages because the Python code
    of the add-on is not successfully loaded, but the data of the add-on and the models’
    tables in the database are present. To resolve this, you need to stop the instance
    and manually install the new dependency.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理依赖关系时，一个棘手的部分是当你向已经安装了版本的插件添加依赖项时。让我们通过继续之前的例子来理解这一点。想象一下，你在`sale_specific`中添加了对`stock_dropshipping`的依赖。更新`sale_specific`插件不会自动安装新的依赖项，请求安装`sale_specific`也不会。在这种情况下，你可能会收到非常糟糕的错误消息，因为插件的Python代码没有成功加载，但插件的数据和数据库中模型的表是存在的。为了解决这个问题，你需要停止实例并手动安装新的依赖项。
- en: Installing add-on modules from GitHub
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从GitHub安装插件模块
- en: GitHub is a great source of third-party add-ons. A lot of Odoo partners use
    GitHub to share the add-ons they maintain internally, and the **Odoo Community
    Association** (**OCA**) collectively maintains several hundred add-ons on GitHub.
    Before you start writing your own add-on, ensure you check that nothing already
    exists that you can use as is or as a starting point.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub是第三方插件的绝佳来源。许多Odoo合作伙伴使用GitHub来共享他们内部维护的插件，**Odoo社区协会**（**OCA**）在GitHub上共同维护了数百个插件。在你开始编写自己的插件之前，请确保检查是否已经存在你可以直接使用或作为起点的东西。
- en: This recipe will show you how to clone the `partner-contact` project of the
    OCA from GitHub and make the add-on modules it contains available in your instance.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将向您展示如何从GitHub克隆OCA的`partner-contact`项目，并使其包含的插件模块在您的实例中可用。
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Suppose you want to add new fields to the customer (partner) form. By default,
    the Odoo customer model doesn’t have a `gender` field. If you want to add a `gender`
    field, you need to create a new module. Fortunately, someone on a mailing list
    tells you about the `partner_contact_gender` add-on module, which is maintained
    by the OCA as part of the `partner-contact` project.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要向客户（合作伙伴）表单添加新字段。默认情况下，Odoo客户模型没有`gender`字段。如果你想添加一个`gender`字段，你需要创建一个新的模块。幸运的是，邮件列表上的某个人告诉你关于`partner_contact_gender`插件模块的信息，该模块由OCA作为`partner-contact`项目的一部分维护。
- en: The paths that are used in this recipe reflect the layout that was proposed
    in the *Standardizing your instance directory* *layout* recipe.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中使用的路径反映了在*标准化实例目录*布局食谱中提出的布局。
- en: How to do it…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To install `partner_contact_gender`, perform the following steps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`partner_contact_gender`，请执行以下步骤：
- en: 'Go to your project’s directory:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入你的项目目录：
- en: '[PRE20]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: $ git clone --branch 17.0 \
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ git clone --branch 17.0 \
- en: 'add-ons_path line of instance.cfg should look like this:'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实例.cfg中的add-ons_path行应如下所示：
- en: '[PRE21]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Install the `partner_contact_gender` add-on (if you don’t know how to install
    the module, take a look at the previous recipe, *Installing and upgrading local*
    *add-on modules*).
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`partner_contact_gender`插件（如果你不知道如何安装模块，请查看之前的食谱，*安装和升级本地*插件模块）。
- en: How it works…
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: All OCA code repositories have their add-ons contained in separate subdirectories,
    which is coherent per what is expected by Odoo regarding the directories in the
    add-ons path. Consequently, just cloning the repository somewhere and adding that
    location in the add-ons path is enough.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 所有OCA代码存储库都将它们的插件包含在单独的子目录中，这与Odoo对插件路径中目录的期望是一致的。因此，只需在某个位置克隆存储库并将其添加到插件路径中就足够了。
- en: There’s more…
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Some maintainers follow a different approach and have one add-on module per
    repository, living at the root of the repository. In that case, you need to create
    a new directory, which you will add to the add-ons path, and clone all of the
    add-ons from the maintainer you need in this directory. Remember to update the
    add-on modules list each time you add a new repository clone.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 一些维护者采用不同的方法，每个存储库有一个插件模块，位于存储库的根目录。在这种情况下，你需要创建一个新的目录，将其添加到插件路径中，并在该目录中克隆你需要的所有插件。记住，每次添加新的存储库克隆时，都要更新插件模块列表。
- en: Applying changes to add-ons
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用更改以添加插件
- en: Most add-ons that are available on GitHub are subject to change and do not follow
    the rules that Odoo enforces for its stable release. They may receive bug fixes
    or enhancements, including issues or feature requests that you have submitted,
    and these changes may introduce database schema changes or updates in data files
    and views. This recipe explains how to install the updated versions.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you reported an issue with `partner_contact_gender` and received a notification
    that the issue was solved in the last revision of the `17.0` branch of the `partner-contact`
    project. In this case, you would want to update your instance with this latest
    version.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To apply a source modification to your add-on from GitHub, you need to perform
    the following steps:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Stop the instance using that add-on.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a backup if it is a production instance (refer to the *Managing Odoo server
    databases* recipe in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing
    the Odoo* *Development Environment*).
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the directory where `partner-contact` was cloned:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a local tag for the project so that you can revert to that version in
    case things break:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Get the latest version of the source code:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Restart the instance.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Usually, the developer of the add-on module occasionally releases the newest
    version of the add-on. This update typically contains bug fixes and new features.
    Here, we will get a new version of the add-on and update it in our instances.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'If `git pull --ff-only` fails, you can revert to the previous version using
    the following command:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Then, you can try `git pull` (without `--ff-only`), which will cause a merge,
    but this means that you have local changes on the add-on.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the update step breaks, refer to the *Updating Odoo from source* recipe in
    [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development
    Environment*, for recovery instructions. Remember to always test an update on
    a copy of a database production first.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Applying and trying proposed PRs
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the GitHub world, a PR is a request that’s made by a developer so that the
    maintainers of a project can include some new developments. Such a PR may contain
    a bug fix or a new feature. These requests are reviewed and tested before being
    pulled into the `main` branch.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to apply a PR to your Odoo project in order to test
    an improvement or a bug fix.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As in the previous recipe, suppose you reported an issue with `partner_address_street3`
    and received a notification that the issue was solved in a PR, which hasn’t been
    merged in the `17.0` branch of the project. The developer asks you to validate
    the fix in PR *#123*. You need to update a test instance with this branch.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: You should not try out such branches directly on a production database, so first
    create a test environment with a copy of the production database (refer to [*Chapter
    1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo* *Development Environment*).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To apply and try out a GitHub PR for an add-on, you need to perform the following
    steps:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Stop the instance.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the directory where `partner-contact` was cloned:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a local tag for the project so that you can revert to that version in
    case things break:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: partner_contact_gender1 add-on module in your database and restart the instance
    (refer to the *Installing and upgrading local add-on modules* recipe if you don’t
    know how to update the module).
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Test the update—try to reproduce your issue, or try out the feature you wanted.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this doesn’t work, comment on the PR page of GitHub, explaining what you
    did and what didn’t work so that the developer can update the PR.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: If it works, say so on the PR page too; this is an essential part of the PR
    validation process, and it will speed up merging in the `main` branch.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are using a GitHub feature that enables PRs to be pulled by number using
    the `pull/nnnn/head` branch name, where `nnnn` is the number of the PR. The `git
    pull` command will merge the remote branch in ours, applying the changes in our
    code base. After this, we update the add-on module, test it, and report back to
    the author of the change with regard to any failures or successes.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can repeat *step 4* of this recipe for different PRs in the same repository
    if you want to test them simultaneously. If you are really happy with the result,
    you can create a branch to keep a reference to the result of the applied changes:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Using a different branch will help you remember that you are not using the version
    from GitHub, but a custom one.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: The `git branch` command can be used to list all local branches you have in
    your repository.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'From then on, if you need to apply the latest revision of the `17.0` branch
    from GitHub, you will need to pull it without using `--ff-only`:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
