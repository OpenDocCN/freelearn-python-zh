["```py\nasync def add_two(a: int, b: int) -> int:\n    return a + b\n```", "```py\n<person>\n  <firstName>Bruce</firstName>\n  <lastName>Van Horn</lastName>\n  <dateOfBirth trueDate=\"Heck No\">12/19/1987</dateOfBirth>\n</person>\n```", "```py\n{\n  \"person\": {\n    \"firstName\": \"Bruce\",\n    \"lastName\": \"Van Horn\",\n    \"dateOfBirth\": {\n      \"date\": \"12/19/1987\",\n      \"trueDate\": false\n     }\n  }\n}\n```", "```py\nimport json\n# Convert dictionary to JSON\ndata_dict = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\njson_data = json.dumps(data_dict)\n# Print the JSON data\nprint(\"JSON data:\", json_data)\n```", "```py\n# Convert JSON to dictionary\nparsed_dict = json.loads(json_data)\n# Access the dictionary\nprint(\"Name:\", parsed_dict[\"name\"])\nprint(\"Age:\", parsed_dict[\"age\"])\nprint(\"City:\", parsed_dict[\"city\"])\n```", "```py\n{\n \"dev\": {\n  \"protocol\": \"http://\",\n  \"base_url\": \"localhost\",\n  \"port\": 8000,\n  \"api_version\": \"v1\"\n}\n```", "```py\nGET {{protocol}}{{base_url}}:{{port}}\n```", "```py\nfrom fastapi import FastAPI, status, HTTPException\napp = FastAPI()\n```", "```py\nnames = [\"Bruce\", \"Karina\", \"Kitty\", \"Phoebe\"]\n```", "```py\n@app.get(\"/api/v1/names\")\nasync def get_names():\n  return [{\"id\": idx, \"name\": name} for idx, name in enumerate(names)]\n```", "```py\n@app.post(\"/api/v1/names\", status_code=status.HTTP_201_CREATED)\nasync def create_name(name: dict):\n  new_name = name[\"name\"]\n  names.append(new_name)\n  return {\"message\": \"Name added successfully\"}\n```", "```py\n{\"name\": \"Igor\"}\n```", "```py\n@app.put(\"/api/v1/names\")\nasync def update_name(update_data: dict):\n  id = update_data[\"id\"]\n```", "```py\n  if not isinstance(id, int):\n    raise HTTPException(status_code=400, detail=\"ID must be an integer\")\n```", "```py\n{ \"id\": \"2\", \"name\": \"Igor\" }\n```", "```py\n{ \"id\": \"this isn't a number\", \"name\": \"Igor\" }\n```", "```py\n  name = update_data[\"name\"]\n```", "```py\n  if id >= len(names):\n    raise HTTPException(status_code=404, detail=\"Name not found\")\n  names[id] = name\n  return {\"message\": \"Name updated successfully\"}\n```", "```py\n@app.delete(\"/api/v1/names/{id}\")\nasync def delete_name(id: int):\n  if id >= len(names):\n    raise HTTPException(status_code=404, detail=\"Name not found\")\n```", "```py\n  deleted_name = names.pop(id)\n  return {\"message\": f\"Deleted name: {deleted_name}\"}\n```", "```py\n# Test your FastAPI endpoints\nGET {{protocol}}{{base_url}}:{{port}}\nAccept: application/json\n###\nGET {{protocol}}{{base_url}}:{{port}}/hello/User\nAccept: application/json\n```", "```py\n###\nGET {{protocol}}{{base_url}}:{{port}}/api/{{api_version}}/names\n```", "```py\n> {%\n client.test(\"Request executed and 200 returned\", function() {\n   client.assert(response.status === 200, `Response status is ${response.status} but should be 200`);\n });\n```", "```py\n client.test(\"Response should be json\", function() {\n   const type = response.contentType.mimeType;\n   client.assert(type === \"application/json\", `Expected application/json\n   but got ${type}`);\n });\n %}\n```"]