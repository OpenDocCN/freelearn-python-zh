["```py\n State = Enum('State', 'new running sleeping restart \\\n   zombie')\n\n class Server(metaclass=ABCMeta):\n     @abstractmethod\n     def __init__(self):\n         pass\n\n     def __str__(self):\n         return self.name\n\n     @abstractmethod\n     def boot(self):\n         pass\n\n     @abstractmethod  \n     def kill(self, restart=True):\n         pass\n```", "```py\nclass FileServer(Server): \n    def __init__(self): \n        '''actions required for initializing the file \\\n          server''' \n        self.name = 'FileServer' \n        self.state = State.new \n\n    def boot(self): \n        print(f'booting the {self}') \n        '''actions required for booting the file server''' \n        self.state = State.running \n\n    def kill(self, restart=True): \n        print(f'Killing {self}') \n        '''actions required for killing the file server''' \n        self.state = State.restart if restart else \\\n          State.zombie \n\n    def create_file(self, user, name, permissions): \n        '''check validity of permissions, user rights, \\\n          etc.''' \n        print(f\"trying to create the file '{name}' for \\\n           user '{user}' with permissions {permissions}\") \n```", "```py\nclass ProcessServer(Server): \n    def __init__(self): \n        '''actions required for initializing the process \\ \n          server''' \n        self.name = 'ProcessServer' \n        self.state = State.new \n\n    def boot(self): \n        print(f'booting the {self}') \n        '''actions required for booting the process \\\n          server''' \n        self.state = State.running \n\n    def kill(self, restart=True): \n        print(f'Killing {self}') \n        '''actions required for killing the process \\\n          server''' \n        self.state = State.restart if restart else \\\n          State.zombie \n\n    def create_process(self, user, name): \n        '''check user rights, generate PID, etc.'''  \n        print(f\"trying to create the process '{name}' for \\\n          user '{user}'\")\n```", "```py\nclass OperatingSystem: \n    '''The Facade''' \n    def __init__(self): \n        self.fs = FileServer() \n        self.ps = ProcessServer() \n\n    def start(self): \n        [i.boot() for i in (self.fs, self.ps)] \n\n    def create_file(self, user, name, permissions): \n        return self.fs.create_file(user, name, permissions) \n\n    def create_process(self, user, name): \n        return self.ps.create_process(user, name)\n```", "```py\n    from enum import Enum \n    from abc import ABCMeta, abstractmethod \n    ```", "```py\n    class User: \n        pass \n\n    class Process: \n        pass \n\n    class File: \n        pass \n    ```", "```py\n    class WindowServer: \n        pass \n\n    class NetworkServer: \n        pass\n    ```", "```py\n    def main(): \n        os = OperatingSystem() \n        os.start()  \n        os.create_file('foo', 'hello', '-rw-r-r') \n        os.create_process('bar', 'ls /tmp') \n\n    if __name__ == '__main__': \n        main()\n    ```", "```py\nbooting the FileServer\nbooting the ProcessServer\ntrying to create the file 'hello' for user 'foo' with \npermissions -rw-r-r\ntrying to create the process 'ls /tmp' for user 'bar'\n```"]