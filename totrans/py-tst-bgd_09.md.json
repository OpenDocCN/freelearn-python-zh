["```py\n    from unittest import TestCase\n    from planner.data import statuses, task_error\n    from datetime import datetime\n\n    class statuses_integration_tests(TestCase):\n        def setUp(self):\n            self.A = statuses('A',\n                              datetime(year=2008, month=7, day=15),\n                              datetime(year=2009, month=5, day=2))\n\n        def test_repr(self):\n            self.assertEqual(repr(self.A), '<A 2008-07-15T00:00:00 2009-05-02T00:00:00>')\n\n        def test_equality(self):\n            self.assertEqual(self.A, self.A)\n            self.assertNotEqual(self.A, statuses('B',\n                              datetime(year=2008, month=7, day=15),\n                              datetime(year=2009, month=5, day=2)))\n            self.assertNotEqual(self.A, statuses('A',\n                              datetime(year=2007, month=7, day=15),\n                              datetime(year=2009, month=5, day=2)))\n            self.assertNotEqual(self.A, statuses('A',\n                              datetime(year=2008, month=7, day=15),\n                              datetime(year=2010, month=5, day=2)))\n\n        def test_overlap_begin(self):\n            status = statuses('status name',\n                              datetime(year=2007, month=8, day=11),\n                              datetime(year=2008, month=11, day=27))\n\n            self.assertTrue(status.overlaps(self.A))\n\n        def test_overlap_end(self):\n            status = statuses('status name',\n                              datetime(year=2008, month=1, day=11),\n                              datetime(year=2010, month=4, day=16))\n\n            self.assertTrue(status.overlaps(self.A))\n\n        def test_overlap_inner(self):\n            status = statuses('status name',\n                              datetime(year=2007, month=10, day=11),\n                              datetime(year=2010, month=1, day=27))\n\n            self.assertTrue(status.overlaps(self.A))\n\n        def test_overlap_outer(self):\n            status = statuses('status name',\n                              datetime(year=2008, month=8, day=12),\n                              datetime(year=2008, month=9, day=15))\n\n            self.assertTrue(status.overlaps(self.A))\n\n        def test_overlap_after(self):\n            status = statuses('status name',\n                              datetime(year=2011, month=2, day=6),\n                              datetime(year=2015, month=4, day=27))\n\n            self.assertFalse(status.overlaps(self.A))\n    ```", "```py\n    from unittest import TestCase\n    from planner.data import activities, task_error\n    from datetime import datetime\n\n    class activities_integration_tests(TestCase):\n        def setUp(self):\n            self.A = activities('A',\n                              datetime(year=2008, month=7, day=15),\n                              datetime(year=2009, month=5, day=2))\n        def test_repr(self):\n            self.assertEqual(repr(self.A), '<A 2008-07-15T00:00:00 2009-05-02T00:00:00>')\n\n        def test_equality(self):\n            self.assertEqual(self.A, self.A)\n            self.assertNotEqual(self.A, activities('B',\n                              datetime(year=2008, month=7, day=15),\n                              datetime(year=2009, month=5, day=2)))\n            self.assertNotEqual(self.A, activities('A',\n                              datetime(year=2007, month=7, day=15),\n                              datetime(year=2009, month=5, day=2)))\n            self.assertNotEqual(self.A, activities('A',\n                              datetime(year=2008, month=7, day=15),\n                              datetime(year=2010, month=5, day=2)))\n\n        def test_overlap_begin(self):\n            activity = activities('activity name',\n                              datetime(year=2007, month=8, day=11),\n                              datetime(year=2008, month=11, day=27))\n\n            self.assertTrue(activity.overlaps(self.A))\n            self.assertTrue(activity.excludes(self.A))\n\n        def test_overlap_end(self):\n            activity = activities('activity name',\n                              datetime(year=2008, month=1, day=11),\n                              datetime(year=2010, month=4, day=16))\n\n            self.assertTrue(activity.overlaps(self.A))\n            self.assertTrue(activity.excludes(self.A))\n\n        def test_overlap_inner(self):\n            activity = activities('activity name',\n                              datetime(year=2007, month=10, day=11),\n                              datetime(year=2010, month=1, day=27))\n\n            self.assertTrue(activity.overlaps(self.A))\n            self.assertTrue(activity.excludes(self.A))\n\n        def test_overlap_outer(self):\n            activity = activities('activity name',\n                              datetime(year=2008, month=8, day=12),\n                              datetime(year=2008, month=9, day=15))\n\n            self.assertTrue(activity.overlaps(self.A))\n            self.assertTrue(activity.excludes(self.A))\n\n        def test_overlap_after(self):\n            activity = activities('activity name',\n                              datetime(year=2011, month=2, day=6),\n                              datetime(year=2015, month=4, day=27))\n\n            self.assertFalse(activity.overlaps(self.A))\n    ```", "```py\n    from unittest import TestCase\n    from mocker import MockerTestCase, MATCH, ANY\n    from planner.data import schedules, schedule_error\n    from datetime import datetime\n\n    class schedules_tests(MockerTestCase):\n        def setUp(self):\n            mocker = self.mocker\n\n            A = mocker.mock()\n            A.__eq__(MATCH(lambda x: x is A))\n            mocker.result(True)\n            mocker.count(0, None)\n            A.__eq__(MATCH(lambda x: x is not A))\n            mocker.result(False)\n            mocker.count(0, None)\n            A.overlaps(ANY)\n            mocker.result(False)\n            mocker.count(0, None)\n            A.begins\n            mocker.result(5)\n            mocker.count(0, None)\n\n            B = mocker.mock()\n            A.__eq__(MATCH(lambda x: x is B))\n            mocker.result(True)\n            mocker.count(0, None)\n            B.__eq__(MATCH(lambda x: x is not B))\n            mocker.result(False)\n            mocker.count(0, None)\n            B.overlaps(ANY)\n            mocker.result(False)\n            mocker.count(0, None)\n            B.begins\n            mocker.result(3)\n            mocker.count(0, None)\n\n            C = mocker.mock()\n            C.__eq__(MATCH(lambda x: x is C))\n            mocker.result(True)\n            mocker.count(0, None)\n            C.__eq__(MATCH(lambda x: x is not C))\n            mocker.result(False)\n            mocker.count(0, None)\n            C.overlaps(ANY)\n            mocker.result(False)\n            mocker.count(0, None)\n            C.begins\n            mocker.result(7)\n            mocker.count(0, None)\n\n            self.A = A\n            self.B = B\n            self.C = C\n\n            mocker.replay()\n\n        def test_equality(self):\n            sched1 = schedules()\n            sched2 = schedules()\n\n            self.assertEqual(sched1, sched2)\n\n            sched1.add(self.A)\n            sched1.add(self.B)\n\n            sched2.add(self.A)\n            sched2.add(self.B)\n            sched2.add(self.C)\n\n            self.assertNotEqual(sched1, sched2)\n\n            sched1.add(self.C)\n\n            self.assertEqual(sched1, sched2)\n    ```", "```py\n    from planner.data import schedules, statuses\n    from unittest import TestCase\n    from datetime import datetime, timedelta\n\n    class test_schedules_and_statuses(TestCase):\n        def setUp(self):\n            self.A = statuses('A',\n                             datetime.now(),\n                             datetime.now() + timedelta(minutes = 7))\n            self.B = statuses('B',\n                             datetime.now() - timedelta(hours = 1),\n                             datetime.now() + timedelta(hours = 1))\n            self.C = statuses('C',\n                             datetime.now() + timedelta(minutes = 10),\n                             datetime.now() + timedelta(hours = 1))\n\n        def test_usage_pattern(self):\n            sched = schedules()\n\n            sched.add(self.A)\n            sched.add(self.C)\n\n            self.assertTrue(self.A in sched)\n            self.assertTrue(self.C in sched)\n            self.assertFalse(self.B in sched)\n\n            sched.add(self.B)\n\n            self.assertTrue(self.B in sched)\n\n            self.assertEqual(sched, sched)\n\n            sched.remove(self.A)\n\n            self.assertFalse(self.A in sched)\n            self.assertTrue(self.B in sched)\n            self.assertTrue(self.C in sched)\n\n            sched.remove(self.B)\n            sched.remove(self.C)\n\n            self.assertFalse(self.B in sched)\n            self.assertFalse(self.C in sched)\n    ```", "```py\n    from planner.data import schedules, activities, schedule_error\n    from unittest import TestCase\n    from datetime import datetime, timedelta\n\n    class test_schedules_and_activities(TestCase):\n        def setUp(self):\n            self.A = activities('A',\n                              datetime.now(),\n                              datetime.now() + timedelta(minutes = 7))\n            self.B = activities('B',\n                              datetime.now() - timedelta(hours = 1),\n                              datetime.now() + timedelta(hours = 1))\n            self.C = activities('C',\n                              datetime.now() + timedelta(minutes = 10),\n                              datetime.now() + timedelta(hours = 1))\n\n        def test_usage_pattern(self):\n            sched = schedules()\n\n            sched.add(self.A)\n            sched.add(self.C)\n\n            self.assertTrue(self.A in sched)\n            self.assertTrue(self.C in sched)\n            self.assertFalse(self.B in sched)\n\n            self.assertRaises(schedule_error, sched.add, self.B)\n\n            self.assertFalse(self.B in sched)\n            self.assertEqual(sched, sched)\n\n            sched.remove(self.A)\n\n            self.assertFalse(self.A in sched)\n            self.assertFalse(self.B in sched)\n            self.assertTrue(self.C in sched)\n\n            sched.remove(self.C)\n\n            self.assertFalse(self.B in sched)\n            self.assertFalse(self.C in sched)\n    ```", "```py\n    from planner.data import schedules, statuses, activities, schedule_error\n    from unittest import TestCase\n    from datetime import datetime, timedelta\n\n    class test_schedules_activities_and_statuses(TestCase):\n        def setUp(self):\n            self.A = statuses('A',\n                              datetime.now(),\n                              datetime.now() + timedelta(minutes = 7))\n            self.B = statuses('B',\n                              datetime.now() - timedelta(hours = 1),\n                              datetime.now() + timedelta(hours = 1))\n            self.C = statuses('C',\n                             datetime.now() + timedelta(minutes = 10),\n                             datetime.now() + timedelta(hours = 1))\n\n            self.D = activities('D',\n                              datetime.now(),\n                              datetime.now() + timedelta(minutes = 7))\n\n            self.E = activities('E',\n                              datetime.now() + timedelta(minutes=30),\n                              datetime.now() + timedelta(hours=1))\n\n            self.F = activities('F',\n                              datetime.now() - timedelta(minutes=20),\n                              datetime.now() + timedelta(minutes=40))\n\n        def test_usage_pattern(self):\n            sched = schedules()\n\n            sched.add(self.A)\n            sched.add(self.B)\n            sched.add(self.C)\n\n            sched.add(self.D)\n\n            self.assertTrue(self.A in sched)\n            self.assertTrue(self.B in sched)\n            self.assertTrue(self.C in sched)\n            self.assertTrue(self.D in sched)\n\n            self.assertRaises(schedule_error, sched.add, self.F)\n            self.assertFalse(self.F in sched)\n\n            sched.add(self.E)\n            sched.remove(self.D)\n\n            self.assertTrue(self.E in sched)\n            self.assertFalse(self.D in sched)\n\n            self.assertRaises(schedule_error, sched.add, self.F)\n\n            self.assertFalse(self.F in sched)\n\n            sched.remove(self.E)\n\n            self.assertFalse(self.E in sched)\n\n            sched.add(self.F)\n\n            self.assertTrue(self.F in sched)\n    ```", "```py\n    from unittest import TestCase\n    from planner.persistence import file\n    from os import unlink\n\n    class test_file(TestCase):\n        def setUp(self):\n            storage = file('file_test.sqlite')\n\n            storage.store_object('tag1', 'A')\n            storage.store_object('tag2', 'B')\n            storage.store_object('tag1', 'C')\n            storage.store_object('tag1', 'D')\n            storage.store_object('tag3', 'E')\n            storage.store_object('tag3', 'F')\n\n        def tearDown(self):\n            unlink('file_test.sqlite')\n\n        def test_other_instance(self):\n            storage = file('file_test.sqlite')\n\n            self.assertEqual(set(storage.load_objects('tag1')),\n                             set(['A', 'C', 'D']))\n\n            self.assertEqual(set(storage.load_objects('tag2')),\n                             set(['B']))\n\n            self.assertEqual(set(storage.load_objects('tag3')),\n                             set(['E', 'F']))\n    ```", "```py\n    from mocker import Mocker, MockerTestCase, ANY\n    from planner.data import schedules\n    from planner.persistence import file\n    from os import unlink\n\n    def unpickle_mocked_task(begins):\n        mocker = Mocker()\n        ret = mocker.mock()\n        ret.overlaps(ANY)\n        mocker.result(False)\n        mocker.count(0, None)\n        ret.begins\n        mocker.result(begins)\n        mocker.count(0, None)\n        mocker.replay()\n        return ret\n    unpickle_mocked_task.__safe_for_unpickling__ = True\n\n    class test_schedules_and_file(MockerTestCase):\n        def setUp(self):\n            mocker = self.mocker\n\n            A = mocker.mock()\n            A.overlaps(ANY)\n            mocker.result(False)\n            mocker.count(0, None)\n            A.begins\n            mocker.result(5)\n            mocker.count(0, None)\n            A.__reduce_ex__(ANY)\n            mocker.result((unpickle_mocked_task, (5,)))\n            mocker.count(0, None)\n\n            B = mocker.mock()\n            B.overlaps(ANY)\n            mocker.result(False)\n            mocker.count(0, None)\n            B.begins\n            mocker.result(3)\n            mocker.count(0, None)\n            B.__reduce_ex__(ANY)\n            mocker.result((unpickle_mocked_task, (3,)))\n            mocker.count(0, None)\n\n            C = mocker.mock()\n            C.overlaps(ANY)\n            mocker.result(False)\n            mocker.count(0, None)\n            C.begins\n            mocker.result(7)\n            mocker.count(0, None)\n            C.__reduce_ex__(ANY)\n            mocker.result((unpickle_mocked_task, (7,)))\n            mocker.count(0, None)\n\n            self.A = A\n            self.B = B\n            self.C = C\n\n            mocker.replay()\n\n        def tearDown(self):\n            try:\n                unlink('test_schedules_and_file.sqlite')\n            except OSError:\n                pass\n\n        def test_save_and_restore(self):\n            sched1 = schedules()\n\n            sched1.add(self.A)\n            sched1.add(self.B)\n            sched1.add(self.C)\n\n            store1 = file('test_schedules_and_file.sqlite')\n            sched1.store(store1)\n\n            del sched1\n            del store1\n\n            store2 = file('test_schedules_and_file.sqlite')\n            sched2 = schedules.load(store2)\n\n            self.assertEqual(set([x.begins for x in sched2.tasks]),\n                             set([3, 5, 7]))\n    ```", "```py\n    from planner.data import schedules, statuses, activities, schedule_error\n    from planner.persistence import file\n    from unittest import TestCase\n    from datetime import datetime, timedelta\n    from os import unlink\n\n    class test_system(TestCase):\n        def setUp(self):\n            self.A = statuses('A',\n                              datetime.now(),\n                              datetime.now() + timedelta(minutes = 7))\n            self.B = statuses('B',\n                             datetime.now() - timedelta(hours = 1),\n                             datetime.now() + timedelta(hours = 1))\n            self.C = statuses('C',\n                             datetime.now() + timedelta(minutes = 10),\n                             datetime.now() + timedelta(hours = 1))\n\n            self.D = activities('D',\n                              datetime.now(),\n                              datetime.now() + timedelta(minutes = 7))\n\n            self.E = activities('E',\n                              datetime.now() + timedelta(minutes=30),\n                              datetime.now() + timedelta(hours = 1))\n\n            self.F = activities('F',\n                              datetime.now() - timedelta(minutes=20),\n                              datetime.now() + timedelta(minutes=40))\n\n        def tearDown(self):\n            try:\n                unlink('test_system.sqlite')\n            except OSError:\n                pass\n\n        def test_usage_pattern(self):\n            sched1 = schedules()\n\n            sched1.add(self.A)\n            sched1.add(self.B)\n            sched1.add(self.C)\n            sched1.add(self.D)\n            sched1.add(self.E)\n\n            store1 = file('test_system.sqlite')\n            sched1.store(store1)\n\n            del store1\n\n            store2 = file('test_system.sqlite')\n            sched2 = schedules.load(store2)\n\n            self.assertEqual(sched1, sched2)\n\n            sched2.remove(self.D)\n            sched2.remove(self.E)\n\n            self.assertNotEqual(sched1, sched2)\n\n            sched2.add(self.F)\n\n            self.assertTrue(self.F in sched2)\n            self.assertFalse(self.F in sched1)\n\n            self.assertRaises(schedule_error, sched2.add, self.D)\n            self.assertRaises(schedule_error, sched2.add, self.E)\n\n            self.assertTrue(self.A in sched1)\n            self.assertTrue(self.B in sched1)\n            self.assertTrue(self.C in sched1)\n            self.assertTrue(self.D in sched1)\n            self.assertTrue(self.E in sched1)\n            self.assertFalse(self.F in sched1)\n\n            self.assertTrue(self.A in sched2)\n            self.assertTrue(self.B in sched2)\n            self.assertTrue(self.C in sched2)\n            self.assertFalse(self.D in sched2)\n            self.assertFalse(self.E in sched2)\n            self.assertTrue(self.F in sched2)\n\n    ```", "```py\nclass statuses_integration_tests(TestCase):\n    def setUp(self):\n        self.A = statuses('A',\n                          datetime(year=2008, month=7, day=15),\n                          datetime(year=2009, month=5, day=2))\n```", "```py\n    def test_equality(self):\n        self.assertEqual(self.A, self.A)\n        self.assertNotEqual(self.A, statuses('B',\n                          datetime(year=2008, month=7, day=15),\n                          datetime(year=2009, month=5, day=2)))\n        self.assertNotEqual(self.A, statuses('A',\n                          datetime(year=2007, month=7, day=15),\n                          datetime(year=2009, month=5, day=2)))\n        self.assertNotEqual(self.A, statuses('A',\n                          datetime(year=2008, month=7, day=15),\n                          datetime(year=2010, month=5, day=2)))\n```", "```py\ndef test_overlap_begin(self):\n        status = statuses('status name',\n                          datetime(year=2007, month=8, day=11),\n                          datetime(year=2008, month=11, day=27))\n\n        self.assertTrue(status.overlaps(self.A))\n\n    def test_overlap_end(self):\n        status = statuses('status name',\n                          datetime(year=2008, month=1, day=11),\n                          datetime(year=2010, month=4, day=16))\n\n        self.assertTrue(status.overlaps(self.A))\n\n    def test_overlap_inner(self):\n        status = statuses('status name',\n                          datetime(year=2007, month=10, day=11),\n                          datetime(year=2010, month=1, day=27))\n\n        self.assertTrue(status.overlaps(self.A))\n\n    def test_overlap_outer(self):\n        status = statuses('status name',\n                          datetime(year=2008, month=8, day=12),\n                          datetime(year=2008, month=9, day=15))\n\n        self.assertTrue(status.overlaps(self.A))\n\n    def test_overlap_after(self):\n        status = statuses('status name',\n                          datetime(year=2011, month=2, day=6),\n                          datetime(year=2015, month=4, day=27))\n\n        self.assertFalse(status.overlaps(self.A))\n```", "```py\nclass activities_integration_tests(TestCase):\n    def setUp(self):\n        self.A = activities('A',\n                          datetime(year=2008, month=7, day=15),\n                          datetime(year=2009, month=5, day=2))\n\n    def test_repr(self):\n        self.assertEqual(repr(self.A), '<A 2008-07-15T00:00:00 2009-05-02T00:00:00>')\n\n    def test_equality(self):\n        self.assertEqual(self.A, self.A)\n        self.assertNotEqual(self.A, activities('B',\n                          datetime(year=2008, month=7, day=15),\n                          datetime(year=2009, month=5, day=2)))\n        self.assertNotEqual(self.A, activities('A',\n                          datetime(year=2007, month=7, day=15),\n                          datetime(year=2009, month=5, day=2)))\n        self.assertNotEqual(self.A, activities('A',\n                          datetime(year=2008, month=7, day=15),\n                          datetime(year=2010, month=5, day=2)))\n```", "```py\ndef test_overlap_begin(self):\n        activity = activities('activity name',\n                          datetime(year=2007, month=8, day=11),\n                          datetime(year=2008, month=11, day=27))\n\n        self.assertTrue(activity.overlaps(self.A))\n        self.assertTrue(activity.excludes(self.A))\n\n    def test_overlap_end(self):\n        activity = activities('activity name',\n                          datetime(year=2008, month=1, day=11),\n                          datetime(year=2010, month=4, day=16))\n\n        self.assertTrue(activity.overlaps(self.A))\n        self.assertTrue(activity.excludes(self.A))\n\n    def test_overlap_inner(self):\n        activity = activities('activity name',\n                          datetime(year=2007, month=10, day=11),\n                          datetime(year=2010, month=1, day=27))\n\n        self.assertTrue(activity.overlaps(self.A))\n        self.assertTrue(activity.excludes(self.A))\n\n    def test_overlap_outer(self):\n        activity = activities('activity name',\n                          datetime(year=2008, month=8, day=12),\n                          datetime(year=2008, month=9, day=15))\n\n        self.assertTrue(activity.overlaps(self.A))\n        self.assertTrue(activity.excludes(self.A))\n\n    def test_overlap_after(self):\n        activity = activities('activity name',\n                          datetime(year=2011, month=2, day=6),\n                          datetime(year=2015, month=4, day=27))\n\n        self.assertFalse(activity.overlaps(self.A))\n```", "```py\nclass schedules_tests(MockerTestCase):\n    def setUp(self):\n        mocker = self.mocker\n\n        A = mocker.mock()\n        A.__eq__(MATCH(lambda x: x is A))\n        mocker.result(True)\n        mocker.count(0, None)\n        A.__eq__(MATCH(lambda x: x is not A))\n        mocker.result(False)\n        mocker.count(0, None)\n        A.overlaps(ANY)\n        mocker.result(False)\n        mocker.count(0, None)\n        A.begins\n        mocker.result(5)\n        mocker.count(0, None)\n\n        B = mocker.mock()\n        A.__eq__(MATCH(lambda x: x is B))\n        mocker.result(True)\n        mocker.count(0, None)\n        B.__eq__(MATCH(lambda x: x is not B))\n        mocker.result(False)\n        mocker.count(0, None)\n        B.overlaps(ANY)\n        mocker.result(False)\n        mocker.count(0, None)\n        B.begins\n        mocker.result(3)\n        mocker.count(0, None)\n\n        C = mocker.mock()\n        C.__eq__(MATCH(lambda x: x is C))\n        mocker.result(True)\n        mocker.count(0, None)\n        C.__eq__(MATCH(lambda x: x is not C))\n        mocker.result(False)\n        mocker.count(0, None)\n        C.overlaps(ANY)\n        mocker.result(False)\n        mocker.count(0, None)\n        C.begins\n        mocker.result(7)\n        mocker.count(0, None)\n\n        self.A = A\n        self.B = B\n        self.C = C\n\n        mocker.replay()\n```", "```py\n    def test_equality(self):\n        sched1 = schedules()\n        sched2 = schedules()\n\n        self.assertEqual(sched1, sched2)\n\n        sched1.add(self.A)\n        sched1.add(self.B)\n\n        sched2.add(self.A)\n        sched2.add(self.B)\n        sched2.add(self.C)\n\n        self.assertNotEqual(sched1, sched2)\n\n        sched1.add(self.C)\n\n        self.assertEqual(sched1, sched2)\n```", "```py\nclass test_schedules_and_statuses(TestCase):\n    def setUp(self):\n        self.A = statuses('A',\n                          datetime.now(),\n                          datetime.now() + timedelta(minutes = 7))\n        self.B = statuses('B',\n                          datetime.now() - timedelta(hours = 1),\n                          datetime.now() + timedelta(hours = 1))\n        self.C = statuses('C',\n                          datetime.now() + timedelta(minutes = 10),\n                          datetime.now() + timedelta(hours = 1))\n```", "```py\n    def test_usage_pattern(self):\n        sched = schedules()\n\n        sched.add(self.A)\n        sched.add(self.C)\n\n        self.assertTrue(self.A in sched)\n        self.assertTrue(self.C in sched)\n        self.assertFalse(self.B in sched)\n\n        sched.add(self.B)\n\n        self.assertTrue(self.B in sched)\n        self.assertEqual(sched, sched)\n        sched.remove(self.A)\n\n        self.assertFalse(self.A in sched)\n        self.assertTrue(self.B in sched)\n        self.assertTrue(self.C in sched)\n\n        sched.remove(self.B)\n        sched.remove(self.C)\n\n        self.assertFalse(self.B in sched)\n        self.assertFalse(self.C in sched)\n```", "```py\nclass test_schedules_and_activities(TestCase):\n    def setUp(self):\n        self.A = activities('A',\n                          datetime.now(),\n                          datetime.now() + timedelta(minutes = 7))\n        self.B = activities('B',\n                          datetime.now() - timedelta(hours = 1),\n                          datetime.now() + timedelta(hours = 1))\n        self.C = activities('C',\n                          datetime.now() + timedelta(minutes = 10),\n                          datetime.now() + timedelta(hours = 1))\n\n    def test_usage_pattern(self):\n        sched = schedules()\n\n        sched.add(self.A)\n        sched.add(self.C)\n\n        self.assertTrue(self.A in sched)\n        self.assertTrue(self.C in sched)\n        self.assertFalse(self.B in sched)\n\n        self.assertRaises(schedule_error, sched.add, self.B)\n\n        self.assertFalse(self.B in sched)\n\n        self.assertEqual(sched, sched)\n\n        sched.remove(self.A)\n\n        self.assertFalse(self.A in sched)\n        self.assertFalse(self.B in sched)\n        self.assertTrue(self.C in sched)\n\n        sched.remove(self.C)\n\n        self.assertFalse(self.B in sched)\n        self.assertFalse(self.C in sched)\n```", "```py\nclass test_schedules_activities_and_statuses(TestCase):\n    def setUp(self):\n        self.A = statuses('A',\n                          datetime.now(),\n                          datetime.now() + timedelta(minutes = 7))\n        self.B = statuses('B',\n                          datetime.now() - timedelta(hours = 1),\n                          datetime.now() + timedelta(hours = 1))\n        self.C = statuses('C',\n                          datetime.now() + timedelta(minutes = 10),\n                          datetime.now() + timedelta(hours = 1))\n\n        self.D = activities('D',\n                            datetime.now(),\n                            datetime.now() + timedelta(minutes = 7))\n\n        self.E = activities('E',\n                            datetime.now() + timedelta(minutes=30),\n                            datetime.now() + timedelta(hours=1))\n\n        self.F = activities('F',\n                            datetime.now() - timedelta(minutes=20),\n                            datetime.now() + timedelta(minutes=40))\n```", "```py\n    def test_usage_pattern(self):\n        sched = schedules()\n\n        sched.add(self.A)\n        sched.add(self.B)\n        sched.add(self.C)\n\n        sched.add(self.D)\n\n        self.assertTrue(self.A in sched)\n        self.assertTrue(self.B in sched)\n        self.assertTrue(self.C in sched)\n        self.assertTrue(self.D in sched)\n\n        self.assertRaises(schedule_error, sched.add, self.F)\n        self.assertFalse(self.F in sched)\n\n        sched.add(self.E)\n        sched.remove(self.D)\n\n        self.assertTrue(self.E in sched)\n        self.assertFalse(self.D in sched)\n\n        self.assertRaises(schedule_error, sched.add, self.F)\n        self.assertFalse(self.F in sched)\n\n        sched.remove(self.E)\n\n        self.assertFalse(self.E in sched)\n\n        sched.add(self.F)\n\n        self.assertTrue(self.F in sched)\n```", "```py\nclass test_file(TestCase):\n    def setUp(self):\n        storage = file('file_test.sqlite')\n\n        storage.store_object('tag1', 'A')\n        storage.store_object('tag2', 'B')\n        storage.store_object('tag1', 'C')\n        storage.store_object('tag1', 'D')\n        storage.store_object('tag3', 'E')\n        storage.store_object('tag3', 'F')\n\n    def tearDown(self):\n        unlink('file_test.sqlite')\n```", "```py\n    def test_other_instance(self):\n        storage = file('file_test.sqlite')\n\n        self.assertEqual(set(storage.load_objects('tag1')),\n                         set(['A', 'C', 'D']))\n\n        self.assertEqual(set(storage.load_objects('tag2')),\n                         set(['B']))\n\n        self.assertEqual(set(storage.load_objects('tag3')),\n                         set(['E', 'F']))\n```", "```py\n    def store_object(self, tag, object):\n        self.connection.execute('insert into objects values (?, ?)',\n                               (tag, sqlite3.Binary(dumps(object))))\n self.connection.commit()\ndef unpickle_mocked_task(begins):\n    mocker = Mocker()\n    ret = mocker.mock()\n    ret.overlaps(ANY)\n    mocker.result(False)\n    mocker.count(0, None)\n    ret.begins\n    mocker.result(begins)\n    mocker.count(0, None)\n    mocker.replay()\n    return ret\nunpickle_mocked_task.__safe_for_unpickling__ = True\n```", "```py\nclass test_schedules_and_file(MockerTestCase):\n    def setUp(self):\n        mocker = self.mocker\n\n        A = mocker.mock()\n        A.overlaps(ANY)\n        mocker.result(False)\n        mocker.count(0, None)\n        A.begins\n        mocker.result(5)\n        mocker.count(0, None)\n        A.__reduce_ex__(ANY)\n        mocker.result((unpickle_mocked_task, (5,)))\n        mocker.count(0, None)\n\n        B = mocker.mock()\n        B.overlaps(ANY)\n        mocker.result(False)\n        mocker.count(0, None)\n        B.begins\n        mocker.result(3)\n        mocker.count(0, None)\n        B.__reduce_ex__(ANY)\n        mocker.result((unpickle_mocked_task, (3,)))\n        mocker.count(0, None)\n\n        C = mocker.mock()\n        C.overlaps(ANY)\n        mocker.result(False)\n        mocker.count(0, None)\n        C.begins\n        mocker.result(7)\n        mocker.count(0, None)\n        C.__reduce_ex__(ANY)\n        mocker.result((unpickle_mocked_task, (7,)))\n        mocker.count(0, None)\n\n        self.A = A\n        self.B = B\n        self.C = C\n\n        mocker.replay()\n\n    def tearDown(self):\n        try:\n            unlink('test_schedules_and_file.sqlite')\n        except OSError:\n            pass\n```", "```py\n    def test_save_and_restore(self):\n        sched1 = schedules()\n\n        sched1.add(self.A)\n        sched1.add(self.B)\n        sched1.add(self.C)\n\n        store1 = file('test_schedules_and_file.sqlite')\n        sched1.store(store1)\n\n        del sched1\n        del store1\n\n        store2 = file('test_schedules_and_file.sqlite')\n        sched2 = schedules.load(store2)\n\n        self.assertEqual(set([x.begins for x in sched2.tasks]),\n                         set([3, 5, 7]))\n```"]