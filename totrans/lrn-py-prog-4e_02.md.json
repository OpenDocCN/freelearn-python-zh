["```py\n>>> age = 42\n>>> age\n42\n>>> age = 43  #A\n>>> age\n43 \n```", "```py\n>>> age = 42\n>>> id(age)\n4377553168\n>>> age = 43\n>>> id(age)\n4377553200 \n```", "```py\n>>> numbers = set()\n>>> id(numbers)\n4368427136\n>>> numbers\nset()\n>>> numbers.add(3)\n>>> numbers.add(7)\n>>> id(numbers)\n4368427136\n>>> numbers\n{3, 7} \n```", "```py\n>>> a = 14\n>>> b = 3\n>>> a + b  # addition\n17\n>>> a - b  # subtraction\n11\n>>> a * b  # multiplication\n42\n>>> a / b  # true division\n4.666666666666667\n>>> a // b  # integer division\n4\n>>> a % b  # modulo operation (remainder of division)\n2\n>>> a ** b  # power operation\n2744 \n```", "```py\n>>> 7 / 4  # true division\n1.75\n>>> 7 // 4  # integer division, truncation returns 1\n1\n>>> -7 / 4  # true division again, result is opposite of previous\n-1.75\n>>> -7 // 4  # integer div., result not the opposite of previous\n-2 \n```", "```py\n>>> int(1.75)\n1\n>>> int(-1.75)\n-1 \n```", "```py\n>>> int('10110', base=2)\n22 \n```", "```py\n>>> pow(10, 3)\n1000\n>>> 10 ** 3\n1000\n>>> pow(10, -3)\n0.001\n>>> 10 ** -3\n0.001 \n```", "```py\n>>> 10 % 3  # remainder of the division 10 // 3\n1\n>>> 10 % 4  # remainder of the division 10 // 4\n2 \n```", "```py\n>>> pow(123, 4)\n228886641\n>>> pow(123, 4, 100)\n41  # notice: 228886641 % 100 == 41\n>>> pow(37, -1, 43)  # modular inverse of 37 mod 43\n7\n>>> (7 * 37) % 43  # proof the above is correct\n1 \n```", "```py\n>>> n = 1_024\n>>> n\n1024\n>>> hex_n = 0x_4_0_0  # 0x400 == 1024\n>>> hex_n\n1024 \n```", "```py\n>>> int(True)  # True behaves like 1\n1\n>>> int(False)  # False behaves like 0\n0\n>>> bool(1)  # 1 evaluates to True in a Boolean context\nTrue\n>>> bool(-42)  # and so does every non-zero number\nTrue\n>>> bool(0)  # 0 evaluates to False\nFalse\n>>> # quick peek at the operators (and, or, not)\n>>> not True\nFalse\n>>> not False\nTrue\n>>> True and True\nTrue\n>>> False or True\nTrue \n```", "```py\n>>> 1 + True\n2\n>>> False + 42\n42\n>>> 7 - True\n6 \n```", "```py\n>>> pi = 3.1415926536  # how many digits of PI can you remember?\n>>> radius = 4.5\n>>> area = pi * (radius ** 2)\n>>> area\n63.617251235400005 \n```", "```py\n>>> import sys\n>>> sys.float_info\nsys.float_info(\n    max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308,\n    min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307,\n    dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2,\n    rounds=1\n) \n```", "```py\n>>> 0.3 - 0.1 * 3  # this should be 0!!!\n-5.551115123125783e-17 \n```", "```py\n>>> c = 3.14 + 2.73j\n>>> c = complex(3.14, 2.73)  # same as above\n>>> c.real  # real part\n3.14\n>>> c.imag  # imaginary part\n2.73\n>>> c.conjugate()  # conjugate of A + Bj is A - Bj\n(3.14-2.73j)\n>>> c * 2  # multiplication is allowed\n(6.28+5.46j)\n>>> c ** 2  # power operation as well\n(2.406700000000001+17.1444j)\n>>> d = 1 + 1j  # addition and subtraction as well\n>>> c - d\n(2.14+1.73j) \n```", "```py\n>>> from fractions import Fraction\n>>> Fraction(10, 6)  # mad hatter?\nFraction(5, 3)  # notice it has been simplified\n>>> Fraction(1, 3) + Fraction(2, 3)  # 1/3 + 2/3 == 3/3 == 1/1\nFraction(1, 1)\n>>> f = Fraction(10, 6)\n>>> f.numerator\n5\n>>> f.denominator\n3\n>>> f.as_integer_ratio()\n(5, 3) \n```", "```py\n>>> Fraction(0.125)  \nFraction(1, 8)\n>>> Fraction(\"3 / 7\")\nFraction(3, 7)\n>>> Fraction(\"-.250\")\nFraction(-1, 4) \n```", "```py\n>>> from decimal import Decimal as D  # rename for brevity\n>>> D(3.14)  # pi, from float, so approximation issues\nDecimal('3.140000000000000124344978758017532527446746826171875')\n>>> D(\"3.14\")  # pi, from a string, so no approximation issues\nDecimal('3.14')\n>>> D(0.1) * D(3) - D(0.3)  # from float, we still have the issue\nDecimal('2.775557561565156540423631668E-17')\n>>> D(\"0.1\") * D(3) - D(\"0.3\")  # from string, all perfect\nDecimal('0.0')\n>>> D(\"1.4\").as_integer_ratio()  # 7/5 = 1.4 (isn't this cool?!)\n(7, 5) \n```", "```py\n>>> # 4 ways to make a string\n>>> str1 = 'This is a string. We built it with single quotes.'\n>>> str2 = \"This is also a string, but built with double quotes.\"\n>>> str3 = '''This is built using triple quotes,\n... so it can span multiple lines.'''\n>>> str4 = \"\"\"This too\n... is a multiline one\n... built with triple double-quotes.\"\"\"\n>>> str4  #A\n'This too\\nis a multiline one\\nbuilt with triple double-quotes.'\n>>> print(str4)  #B\nThis too\nis a multiline one\nbuilt with triple double-quotes. \n```", "```py\n>>> len(str1)\n49 \n```", "```py\n>>> s = \"Hello There\"\n>>> s.removeprefix(\"Hell\")\n'o There'\n>>> s.removesuffix(\"here\")\n'Hello T'\n>>> s.removeprefix(\"Ooops\")\n'Hello There' \n```", "```py\n>>> s = \"This is Ã¼Å‹Ã­c0de\"  # unicode string: code points\n>>> type(s)\n<class 'str'>\n>>> encoded_s = s.encode(\"utf-8\")  # utf-8 encoded version of s\n>>> encoded_s\nb'This is \\xc3\\xbc\\xc5\\x8b\\xc3\\xadc0de'  # result: bytes object\n>>> type(encoded_s)  # another way to verify it\n<class 'bytes'>\n>>> encoded_s.decode(\"utf-8\")  # let us revert to the original\n'This is Ã¼Å‹Ã­c0de'\n>>> bytes_obj = b\"A bytes object\"  # a bytes object\n>>> type(bytes_obj)\n<class 'bytes'> \n```", "```py\n>>> s = \"The trouble is you think you have time.\"\n>>> s[0]  # indexing at position 0, which is the first char\n'T'\n>>> s[5]  # indexing at position 5, which is the sixth char\n'r'\n>>> s[:4]  # slicing, we specify only the stop position\n'The '\n>>> s[4:]  # slicing, we specify only the start position\n'trouble is you think you have time.'\n>>> s[2:14]  # slicing, both start and stop positions\n'e trouble is'\n>>> s[2:14:3]  # slicing, start, stop and step (every 3 chars)\n'erb '\n>>> s[:]  # quick way of making a copy\n'The trouble is you think you have time.' \n```", "```py\n>>> greet_old = \"Hello %s!\"\n>>> greet_old % 'Fabrizio'\n'Hello Fabrizio!'\n>>> greet_positional = \"Hello {}!\"\n>>> greet_positional.format(\"Fabrizio\")\n'Hello Fabrizio!'\n>>> greet_positional = \"Hello {} {}!\"\n>>> greet_positional.format(\"Fabrizio\", \"Romano\")\n'Hello Fabrizio Romano!'\n>>> greet_positional_idx = \"This is {0}! {1} loves {0}!\"\n>>> greet_positional_idx.format(\"Python\", \"Heinrich\")\n'This is Python! Heinrich loves Python!'\n>>> greet_positional_idx.format(\"Coffee\", \"Fab\")\n'This is Coffee! Fab loves Coffee!'\n>>> keyword = \"Hello, my name is {name} {last_name}\"\n>>> keyword.format(name=\"Fabrizio\", last_name=\"Romano\")\n'Hello, my name is Fabrizio Romano' \n```", "```py\n>>> name = \"Fab\"\n>>> age = 48\n>>> f\"Hello! My name is {name} and I'm {age}\"\n\"Hello! My name is Fab and I'm 48\"\n>>> from math import pi\n>>> f\"No arguing with {pi}, it's irrational...\"\n\"No arguing with 3.141592653589793, it's irrational...\" \n```", "```py\n>>> user = \"heinrich\"\n>>> password = \"super-secret\"\n>>> f\"Log in with: {user} and {password}\"\n'Log in with: heinrich and super-secret'\n>>> f\"Log in with: {user=} and {password=}\"\n\"Log in with: user='heinrich' and password='super-secret'\" \n```", "```py\n>>> languages = [\"Python\", \"Javascript\"]\n>>> f\"Two very popular languages: {\", \".join(languages)}\"\n'Two very popular languages: Python, Javascript' \n```", "```py\n>>> f\"Who knew f-strings could be so powerful? {\"\\N{shrug}\"}\"\n'Who knew f-strings could be so powerful? ðŸ¤·' \n```", "```py\n>>> t = ()  # empty tuple\n>>> type(t)\n<class 'tuple'>\n>>> one_element_tuple = (42, )  # you need the comma!\n>>> three_elements_tuple = (1, 3, 5)  # braces are optional here\n>>> a, b, c = 1, 2, 3  # tuple for multiple assignment\n>>> a, b, c  # implicit tuple to print with one instruction\n(1, 2, 3)\n>>> 3 in three_elements_tuple  # membership test\nTrue \n```", "```py\n>>> a, b = 1, 2\n>>> c = a  # we need three lines and a temporary var c\n>>> a = b\n>>> b = c\n>>> a, b  # a and b have been swapped\n(2, 1) \n```", "```py\n>>> a, b = 0, 1\n>>> a, b = b, a  # this is the Pythonic way to do it\n>>> a, b\n(1, 0) \n```", "```py\n>>> []  # empty list\n[]\n>>> list()  # same as []\n[]\n>>> [1, 2, 3]  # as with tuples, items are comma separated\n[1, 2, 3]\n>>> [x + 5 for x in [2, 3, 4]]  # Python is magic\n[7, 8, 9]\n>>> list((1, 3, 5, 7, 9))  # list from a tuple\n[1, 3, 5, 7, 9]\n>>> list(\"hello\")  # list from a string\n['h', 'e', 'l', 'l', 'o'] \n```", "```py\n>>> a = [1, 2, 1, 3]\n>>> a.append(13)  # we can append anything at the end\n>>> a\n[1, 2, 1, 3, 13]\n>>> a.count(1)  # how many `1` are there in the list?\n2\n>>> a.extend([5, 7])  # extend the list by another (or sequence)\n>>> a\n[1, 2, 1, 3, 13, 5, 7]\n>>> a.index(13)  # position of `13` in the list (0-based indexing)\n4\n>>> a.insert(0, 17)  # insert `17` at position 0\n>>> a\n[17, 1, 2, 1, 3, 13, 5, 7]\n>>> a.pop()  # pop (remove and return) last element\n7\n>>> a.pop(3)  # pop element at position 3\n1\n>>> a\n[17, 1, 2, 3, 13, 5]\n>>> a.remove(17)  # remove `17` from the list\n>>> a\n[1, 2, 3, 13, 5]\n>>> a.reverse()  # reverse the order of the elements in the list\n>>> a\n[5, 13, 3, 2, 1]\n>>> a.sort()  # sort the list\n>>> a\n[1, 2, 3, 5, 13]\n>>> a.clear()  # remove all elements from the list\n>>> a\n[] \n```", "```py\n>>> a = list(\"hello\")  # makes a list from a string\n>>> a\n['h', 'e', 'l', 'l', 'o']\n>>> a.append(100)  # append 100, heterogeneous type\n>>> a\n['h', 'e', 'l', 'l', 'o', 100]\n>>> a.extend((1, 2, 3))  # extend using tuple\n>>> a\n['h', 'e', 'l', 'l', 'o', 100, 1, 2, 3]\n>>> a.extend('...')  # extend using string\n>>> a\n['h', 'e', 'l', 'l', 'o', 100, 1, 2, 3, '.', '.', '.'] \n```", "```py\n>>> a = [1, 3, 5, 7]\n>>> min(a)  # minimum value in the list\n1\n>>> max(a)  # maximum value in the list\n7\n>>> sum(a)  # sum of all values in the list\n16\n>>> from math import prod\n>>> prod(a)  # product of all values in the list\n105\n>>> len(a)  # number of elements in the list\n4\n>>> b = [6, 7, 8]\n>>> a + b  # `+` with list means concatenation\n[1, 3, 5, 7, 6, 7, 8]\n>>> a * 2  # `*` has also a special meaning\n[1, 3, 5, 7, 1, 3, 5, 7] \n```", "```py\n>>> from operator import itemgetter\n>>> a = [(5, 3), (1, 3), (1, 2), (2, -1), (4, 9)]\n>>> sorted(a)\n[(1, 2), (1, 3), (2, -1), (4, 9), (5, 3)]\n>>> sorted(a, key=itemgetter(0))\n[(1, 3), (1, 2), (2, -1), (4, 9), (5, 3)]\n>>> sorted(a, key=itemgetter(0, 1))\n[(1, 2), (1, 3), (2, -1), (4, 9), (5, 3)]\n>>> sorted(a, key=itemgetter(1))\n[(2, -1), (1, 2), (5, 3), (1, 3), (4, 9)]\n>>> sorted(a, key=itemgetter(1), reverse=True)\n[(4, 9), (5, 3), (1, 3), (1, 2), (2, -1)] \n```", "```py\n>>> bytearray()  # empty bytearray object\nbytearray(b'')\n>>> bytearray(10)  # zero-filled instance with given length\nbytearray(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n>>> bytearray(range(5))  # bytearray from iterable of integers\nbytearray(b'\\x00\\x01\\x02\\x03\\x04')\n>>> name = bytearray(b\"Lina\")  #A - bytearray from bytes\n>>> name.replace(b\"L\", b\"l\")\nbytearray(b'lina')\n>>> name.endswith(b'na')\nTrue\n>>> name.upper()\nbytearray(b'LINA')\n>>> name.count(b'L')\n1 \n```", "```py\n>>> small_primes = set()  # empty set\n>>> small_primes.add(2)  # adding one element at a time\n>>> small_primes.add(3)\n>>> small_primes.add(5)\n>>> small_primes\n{2, 3, 5}\n>>> small_primes.add(1)  # 1 is not a prime!\n>>> small_primes\n{1, 2, 3, 5}\n>>> small_primes.remove(1)  # so let us remove it\n>>> 3 in small_primes  # membership test\nTrue\n>>> 4 in small_primes\nFalse\n>>> 4 not in small_primes  # negated membership test\nTrue\n>>> small_primes.add(3)  # trying to add 3 again\n>>> small_primes\n{2, 3, 5}  # no change, duplication is not allowed\n>>> bigger_primes = set([5, 7, 11, 13])  # faster creation\n>>> small_primes | bigger_primes  # union operator `|`\n{2, 3, 5, 7, 11, 13}\n>>> small_primes & bigger_primes  # intersection operator `&`\n{5}\n>>> small_primes - bigger_primes  # difference operator `-`\n{2, 3} \n```", "```py\n>>> small_primes = {2, 3, 5, 5, 3}\n>>> small_primes\n{2, 3, 5} \n```", "```py\n>>> small_primes = frozenset([2, 3, 5, 7])\n>>> bigger_primes = frozenset([5, 7, 11])\n>>> small_primes.add(11)  # we cannot add to a frozenset\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'frozenset' object has no attribute 'add'\n>>> small_primes.remove(2)  # neither we can remove\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'frozenset' object has no attribute 'remove'\n>>> small_primes & bigger_primes  # intersect, union, etc. allowed\nfrozenset({5, 7}) \n```", "```py\n>>> a = dict(A=1, Z=-1)\n>>> b = {\"A\": 1, \"Z\": -1}\n>>> c = dict(zip([\"A\", \"Z\"], [1, -1]))\n>>> d = dict([(\"A\", 1), (\"Z\", -1)])\n>>> e = dict({\"Z\": -1, \"A\": 1})\n>>> a == b == c == d == e  # are they all the same?\nTrue  # They are indeed \n```", "```py\n>>> list(zip([\"h\", \"e\", \"l\", \"l\", \"o\"], [1, 2, 3, 4, 5]))\n[('h', 1), ('e', 2), ('l', 3), ('l', 4), ('o', 5)]\n>>> list(zip(\"hello\", range(1, 6)))  # equivalent, more pythonic\n[('h', 1), ('e', 2), ('l', 3), ('l', 4), ('o', 5)] \n```", "```py\n>>> d = {}\n>>> d[\"a\"] = 1  # let us set a couple of (key, value) pairs\n>>> d[\"b\"] = 2\n>>> len(d)  # how many pairs?\n2\n>>> d[\"a\"]  # what is the value of \"a\"?\n1\n>>> d  # how does `d` look now?\n{'a': 1, 'b': 2}\n>>> del d[\"a\"]  # let us remove `a`\n>>> d\n{'b': 2}\n>>> d[\"c\"] = 3  # let us add \"c\": 3\n>>> \"c\" in d  # membership is checked against the keys\nTrue\n>>> 3 in d  # not the values\nFalse\n>>> \"e\" in d\nFalse\n>>> d.clear()  # let us clean everything from this dictionary\n>>> d\n{} \n```", "```py\n>>> d = dict(zip(\"hello\", range(5)))\n>>> d\n{'h': 0, 'e': 1, 'l': 3, 'o': 4}\n>>> d.keys()\ndict_keys(['h', 'e', 'l', 'o'])\n>>> d.values()\ndict_values([0, 1, 3, 4])\n>>> d.items()\ndict_items([('h', 0), ('e', 1), ('l', 3), ('o', 4)])\n>>> 3 in d.values()\nTrue\n>>> (\"o\", 4) in d.items()\nTrue \n```", "```py\n>>> d\n{'h': 0, 'e': 1, 'l': 3, 'o': 4}\n>>> d.popitem()  # removes the last item added\n('o', 4)\n>>> d\n{'h': 0, 'e': 1, 'l': 3}\n>>> d.pop(\"l\")  # remove item with key `l`\n3\n>>> d.pop(\"not-a-key\")  # remove a key not in dictionary: KeyError\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'not-a-key'\n>>> d.pop(\"not-a-key\", \"default-value\")  # with a default value?\n'default-value'  # we get the default value\n>>> d.update({\"another\": \"value\"})  # we can update dict this way\n>>> d.update(a=13)  # or this way (like a function call)\n>>> d\n{'h': 0, 'e': 1, 'another': 'value', 'a': 13}\n>>> d.get(\"a\")  # same as d['a'] but if key is missing no KeyError\n13\n>>> d.get(\"a\", 177)  # default value used if key is missing\n13\n>>> d.get(\"b\", 177)  # like in this case\n177\n>>> d.get(\"b\")  # key is not there, so None is returned \n```", "```py\n>>> d = {}\n>>> d.setdefault(\"a\", 1)  # \"a\" is missing, we get default value\n1\n>>> d\n{'a': 1}  # also, the key/value pair (\"a\", 1) has now been added\n>>> d.setdefault(\"a\", 5)  # let us try to override the value\n1\n>>> d\n{'a': 1}  # no override, as expected \n```", "```py\n>>> d = {}\n>>> d.setdefault(\"a\", {}).setdefault(\"b\", []).append(1) \n```", "```py\n>>> d = {\"a\": \"A\", \"b\": \"B\"}\n>>> e = {\"b\": 8, \"c\": \"C\"}\n>>> d | e\n{'a': 'A', 'b': 8, 'c': 'C'}\n>>> e | d\n{'b': 'B', 'c': 'C', 'a': 'A'}\n>>> {**d, **e}\n{'a': 'A', 'b': 8, 'c': 'C'}\n>>> {**e, **d}\n{'b': 'B', 'c': 'C', 'a': 'A'}\n>>> d |= e\n>>> d\n{'a': 'A', 'b': 8, 'c': 'C'} \n```", "```py\n>>> from datetime import date, datetime, timedelta, timezone, UTC\n>>> import time\n>>> import calendar as cal\n>>> from zoneinfo import ZoneInfo \n```", "```py\n>>> today = date.today()\n>>> today\ndatetime.date(2024, 3, 19)\n>>> today.ctime()\n'Tue Mar 19 00:00:00 2024'\n>>> today.isoformat()\n'2024-03-19'\n>>> today.weekday()\n1\n>>> cal.day_name[today.weekday()]\n'Tuesday'\n>>> today.day, today.month, today.year\n(19, 3, 2024)\n>>> today.timetuple()\ntime.struct_time(\n    tm_year=2024, tm_mon=3, tm_mday=19,\n    tm_hour=0, tm_min=0, tm_sec=0,\n    tm_wday=1, tm_yday=79, tm_isdst=-1\n) \n```", "```py\n>>> time.ctime()\n'Tue Mar 19 21:15:23 2024'\n>>> time.daylight\n1\n>>> time.gmtime()\ntime.struct_time(\n    tm_year=2024, tm_mon=3, tm_mday=19,\n    tm_hour=21, tm_min=15, tm_sec=53,\n    tm_wday=1, tm_yday=79, tm_isdst=0\n)\n>>> time.gmtime(0)\ntime.struct_time(\n    tm_year=1970, tm_mon=1, tm_mday=1,\n    tm_hour=0, tm_min=0, tm_sec=0,\n    tm_wday=3, tm_yday=1, tm_isdst=0\n)\n>>> time.localtime()\ntime.struct_time(\n    tm_year=2024, tm_mon=3, tm_mday=19,\n    tm_hour=21, tm_min=16, tm_sec=6,\n    tm_wday=1, tm_yday=79, tm_isdst=0\n)\n>>> time.time()\n1710882970.789991 \n```", "```py\n>>> now = datetime.now()\n>>> utcnow = datetime.now(UTC)\n>>> now\ndatetime.datetime(2024, 3, 19, 21, 16, 56, 931429)\n>>> utcnow\ndatetime.datetime(\n    2024, 3, 19, 21, 17, 53, 241072,\n    tzinfo=datetime.timezone.utc\n)\n>>> now.date()\ndatetime.date(2024, 3, 19)\n>>> now.day, now.month, now.year\n(19, 3, 2024)\n>>> now.date() == date.today()\nTrue\n>>> now.time()\ndatetime.time(21, 16, 56, 931429)\n>>> now.hour, now.minute, now.second, now.microsecond\n(21, 16, 56, 931429)\n>>> now.ctime()\n'Tue Mar 19 21:16:56 2024'\n>>> now.isoformat()\n'2024-03-19T21:16:56.931429'\n>>> now.timetuple()\ntime.struct_time(\n    tm_year=2024, tm_mon=3, tm_mday=19,\n    tm_hour=21, tm_min=16, tm_sec=56,\n    tm_wday=1, tm_yday=79, tm_isdst=-1\n)\n>>> now.tzinfo\n>>> utcnow.tzinfo\ndatetime.timezone.utc\n>>> now.weekday()\n1 \n```", "```py\n>>> f_bday = datetime(\n    1975, 12, 29, 12, 50, tzinfo=ZoneInfo('Europe/Rome')\n)\n>>> h_bday = datetime(\n    1981, 10, 7, 15, 30, 50, tzinfo=timezone(timedelta(hours=2))\n)\n>>> diff = h_bday - f_bday\n>>> type(diff)\n<class 'datetime.timedelta'>\n>>> diff.days\n2109\n>>> diff.total_seconds()\n182223650.0\n>>> today + timedelta(days=49)\ndatetime.date(2024, 5, 7)\n>>> now + timedelta(weeks=7)\ndatetime.datetime(2024, 5, 7, 21, 16, 56, 931429) \n```", "```py\n>>> datetime.fromisoformat('1977-11-24T19:30:13+01:00')\ndatetime.datetime(\n    1977, 11, 24, 19, 30, 13,\n    tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))\n)\n>>> datetime.fromtimestamp(time.time())\ndatetime.datetime(2024, 3, 19, 21, 26, 56, 785166) \n```", "```py\n>>> import arrow\n>>> arrow.utcnow()\n<Arrow [2024-03-19T21:29:15.076737+00:00]>\n>>> arrow.now()\n<Arrow [2024-03-19T21:29:26.354786+00:00]>\n>>> local = arrow.now(\"Europe/Rome\")\n>>> local\n<Arrow [2024-03-19T22:29:40.282730+01:00]>\n>>> local.to(\"utc\")\n<Arrow [2024-03-19T21:29:40.282730+00:00]>\n>>> local.to(\"Europe/Moscow\")\n<Arrow [2024-03-20T00:29:40.282730+03:00]>\n>>> local.to(\"Asia/Tokyo\")\n<Arrow [2024-03-20T06:29:40.282730+09:00]>\n>>> local.datetime\ndatetime.datetime(\n    2024, 3, 19, 22, 29, 40, 282730,\n    tzinfo=tzfile('/usr/share/zoneinfo/Europe/Rome')\n)\n>>> local.isoformat()\n'2024-03-19T22:29:40.282730+01:00' \n```", "```py\n>>> vision = (9.5, 8.8)\n>>> vision\n(9.5, 8.8)\n>>> vision[0]  # left eye (implicit positional reference)\n9.5\n>>> vision[1]  # right eye (implicit positional reference)\n8.8 \n```", "```py\n>>> from collections import namedtuple\n>>> Vision = namedtuple('Vision', ['left', 'right'])\n>>> vision = Vision(9.5, 8.8)\n>>> vision[0]\n9.5\n>>> vision.left  # same as vision[0], but explicit\n9.5\n>>> vision.right  # same as vision[1], but explicit\n8.8 \n```", "```py\n>>> Vision = namedtuple('Vision', ['left', 'combined', 'right'])\n>>> vision = Vision(9.5, 9.2, 8.8)\n>>> vision.left  # still correct\n9.5\n>>> vision.right  # still correct (though now is vision[2])\n8.8\n>>> vision.combined  # the new vision[1]\n9.2 \n```", "```py\n>>> d = {}\n>>> d[\"age\"] = d.get(\"age\", 0) + 1  # age not there, we get 0 + 1\n>>> d\n{'age': 1}\n>>> d = {\"age\": 39}\n>>> d[\"age\"] = d.get(\"age\", 0) + 1  # age is there, we get 40\n>>> d\n{'age': 40} \n```", "```py\n>>> from collections import defaultdict\n>>> dd = defaultdict(int)  # int is the default type (0 the value)\n>>> dd[\"age\"] += 1  # short for dd['age'] = dd['age'] + 1\n>>> dd\ndefaultdict(<class 'int'>, {'age': 1})  # 1, as expected \n```", "```py\n>>> from collections import ChainMap\n>>> default_connection = {'host': 'localhost', 'port': 4567}\n>>> connection = {'port': 5678}\n>>> conn = ChainMap(connection, default_connection) # map creation\n>>> conn['port']  # port is found in the first dictionary\n5678\n>>> conn['host']  # host is fetched from the second dictionary\n'localhost'\n>>> conn.maps  # we can see the mapping objects\n[{'port': 5678}, {'host': 'localhost', 'port': 4567}]\n>>> conn['host'] = 'packtpub.com'  # let's add host\n>>> conn.maps\n[{'port': 5678, 'host': 'packtpub.com'},\n {'host': 'localhost', 'port': 4567}]\n>>> del conn['port']  # let's remove the port information\n>>> conn.maps\n[{'host': 'packtpub.com'}, {'host': 'localhost', 'port': 4567}]\n>>> conn['port']  # now port is fetched from the second dictionary\n4567\n>>> dict(conn)  # easy to merge and convert to regular dictionary\n{'host': 'packtpub.com', 'port': 4567} \n```", "```py\n>>> GREEN = 1\n>>> YELLOW = 2\n>>> RED = 4\n>>> TRAFFIC_LIGHTS = (GREEN, YELLOW, RED)\n>>> # or with a dict\n>>> traffic_lights = {\"GREEN\": 1, \"YELLOW\": 2, \"RED\": 4} \n```", "```py\n>>> from enum import Enum\n>>> class TrafficLight(Enum):\n...     GREEN = 1\n...     YELLOW = 2\n...     RED = 4\n...\n>>> TrafficLight.GREEN\n<TrafficLight.GREEN: 1>\n>>> TrafficLight.GREEN.name\n'GREEN'\n>>> TrafficLight.GREEN.value\n1\n>>> TrafficLight(1)\n<TrafficLight.GREEN: 1>\n>>> TrafficLight(4)\n<TrafficLight.RED: 4> \n```", "```py\n>>> a = 1000000\n>>> b = 1000000\n>>> id(a) == id(b)\nFalse \n```", "```py\n>>> a = 5\n>>> b = 5\n>>> id(a) == id(b)\nTrue \n```", "```py\ncustomer1 = {\"id\": \"abc123\", \"full_name\": \"Master Yoda\"}\ncustomer2 = {\"id\": \"def456\", \"full_name\": \"Obi-Wan Kenobi\"}\ncustomer3 = {\"id\": \"ghi789\", \"full_name\": \"Anakin Skywalker\"}\n# collect them in a tuple\ncustomers = (customer1, customer2, customer3)\n# or collect them in a list\ncustomers = [customer1, customer2, customer3]\n# or maybe within a dictionary, they have a unique id after all\ncustomers = {\n    \"abc123\": customer1,\n    \"def456\": customer2,\n    \"ghi789\": customer3,\n} \n```", "```py\n>>> a = list(range(10))  # `a` has 10 elements. Last one is 9.\n>>> a\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> len(a)  # its length is 10 elements\n10\n>>> a[len(a) - 1]  # position of last one is len(a) - 1\n9\n>>> a[-1]  # but we don't need len(a)! Python rocks!\n9\n>>> a[-2]  # equivalent to len(a) - 2\n8\n>>> a[-3]  # equivalent to len(a) - 3\n7 \n```"]