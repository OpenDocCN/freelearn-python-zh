- en: Appendix B. Common Pitfalls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read the API documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It may sound pedantic but it is not an exaggeration to say that many Python-related
    questions asked on Blender forums can simply be answered by reading the API docs
    thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, these are not the easiest documents to read as they cover many topics
    and often it might not be clear where to start, so it might be a good idea to
    read them at least once in their entirety from start to finish. Not only will
    it give you some idea about the vast scope of the Blender API but it will also
    help you find specific subjects later on.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble with import
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the questions that regularly pops up is why the `import` statement isn't
    working as expected. The problem here is that you have to know what to expect.
    Blender has augmented the standard import behavior of Python to make it possible
    to import from the text files residing within a `.blend` file. This is a great
    boon because it allows you to modularize your code without the need to distribute
    separate files. However, the behavior of the part that imports these internal
    files should be absolutely clear to spare you nasty surprises but it is, at the
    moment, not very well-documented.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what happens when an `import` statement such as `import` `foo` is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether `foo.pyc` or `foo.py` exists in any of the directories in `sys.path`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If one of them exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if `foo.py` is newer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: compile `foo.pyfoo.pyc`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: use `foo.pyc`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Else, if `foo.py` exists as an internal text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'if it is not compiled already:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: compile internal text file
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: use compiled version
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Else
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: raise an exception
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first part is Python''s regular behavior (it is a bit simplified from what
    really happens as we don''t mention packages or `.pyo` files here) and the second
    part is what Blender adds to it if the required module does not exist as an external
    file. There are two important things to note here: if an external file exists
    with the same name as an internal file, the external file (or its compiled version)
    takes precedence. This can be annoying because many people save an external copy
    of an internal file with the same name. If these two are out of sync unexpected
    things may happen. Fortunately, Blender''s internal editor reminds you of this
    situation by showing an **Out** **of** **Sync** button next to the name of the
    internal file. Still, if you haven''t opened the text editor on that specific
    file, you may not notice it.'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, if you take a close look at the previous outline you will notice
    that if Blender is looking for an internal file it checks if this internal file
    is already compiled but does not check if the source might be newer. This means
    that any changes in the source code of an internal file that are to be imported
    will not be seen by the main program. To remedy this situation, you may force
    Python to compile the module by using the built-in `reload()` function. This is
    less efficient when running a program, but it saves a lot of headaches when developing.
    Once your script is production-ready you might drop the `reload()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So suppose you have two internal files, `main.py` and `mymodule.py`, and you
    want to make sure changes in `module.py`, will always be visible once `main.py`
    is executed, then each file might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted line shows the all important `reload()`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a full Python distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Two specific issues come up frequently: either a standard Python module seems
    to be missing (an `import` statement raises an exception telling you it can''t
    find the requested module) or Blender warns that it cannot find the Python distribution
    with a version equal to the compiled version.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Both issues were addressed in [Chapter 1](ch01.html "Chapter 1. Extending Blender
    with Python"), *Extending Blender with Python* and for additional information
    refer to: [http://wiki.blender.org/index.php/Doc:Manual/Introduction/Installing_Blender/Python](http://wiki.blender.org/index.php/Doc:Manual/Introduction/Installing_Blender/Python).'
  prefs: []
  type: TYPE_NORMAL
