["```py\nScenario: Binomial coefficient typical case. \n\nGiven n = 52 \n\nAnd k = 5 \n\nWhen The binomial coefficient is computed with c = binom(n, k) \n\nThen the result, c, is 2,598,960\n```", "```py\nfrom math import factorial \n\ndef binom_draft(n: int, k: int) -> int: \n\n    return factorial(n) // (factorial(k) * factorial(n - k))\n```", "```py\nfrom collections import Counter \n\nclass Summary: \n\n   def __init__(self) -> None: \n\n       self.counts: Counter[int] = collections.Counter() \n\n   def __str__(self) -> str: \n\n       ... \n\n   def add(self, value: int) -> None: \n\n       self.counts[value] += 1 \n\n   @property \n\n   def mean(self) -> float: \n\n       ... \n\n   @property \n\n   def median(self) -> float: \n\n        ...\n```", "```py\n    def binom(n: int, k: int) -> int: \n\n        \"\"\" \n\n        Computes the binomial coefficient. \n\n        This shows how many combinations exist of \n\n        *n* things taken in groups of size *k*.\n    ```", "```py\n     :param n: size of the universe \n\n        :param k: size of each subset \n\n        :returns: the number of combinations\n    ```", "```py\n     >>> binom(52, 5) \n\n        2598960\n    ```", "```py\n     \"\"\"\n    ```", "```py\n    class Summary: \n\n        \"\"\" \n\n        Computes summary statistics.\n    ```", "```py\n     >>> s = Summary() \n\n        >>> s.add(8) \n\n        >>> s.add(9) \n\n        >>> s.add(9) \n\n        >>> round(s.mean, 2) \n\n        8.67 \n\n        >>> s.median \n\n        9 \n\n        >>> print(str(s)) \n\n        mean = 8.67 \n\n        median = 9\n    ```", "```py\n     \"\"\"\n    ```", "```py\n(cookbook3) % python -m doctest recipe_01.py\n```", "```py\n(cookbook3) % python -m doctest recipe_01.py \n\n********************************************************************** \n\nFile \"/Users/slott/Documents/Writing/Python/Python Cookbook 3e/src/ch15/recipe_01.py\", line 29, in recipe_01.Summary \n\nFailed example: \n\n    s.median \n\nExpected: \n\n    10 \n\nGot: \n\n    9 \n\n********************************************************************** \n\n1 items had failures: \n\n   1 of   7 in recipe_01.Summary \n\n***Test Failed*** 1 failures.\n```", "```py\n \"\"\" \n\n    Computes the binomial coefficient. \n\n    This shows how many combinations exist of \n\n    *n* things taken in groups of size *k*. \n\n    :param n: size of the universe \n\n    :param k: size of each subset \n\n    :returns: the number of combinations \n\n    >>> binom(52, 5) \n\n    2598960 \n\n    >>> binom(52, 0) \n\n    1 \n\n    >>> binom(52, 52) \n\n    1 \n\n    \"\"\"\n```", "```py\n__test__ = { \n\n    \"GIVEN_binom_WHEN_0_0_THEN_1\": \"\"\" \n\n        >>> binom(0, 0) \n\n        1 \n\n        \"\"\", \n\n    \"GIVEN_binom_WHEN_52_52_THEN_1\": \"\"\" \n\n        >>> binom(52, 52) \n\n        1 \n\n        \"\"\", \n\n}\n```", "```py\n     recipe_02 \n\n    2 items passed all tests: \n\n       2 tests in recipe_02.__test__.test_GIVEN_n_5_k_52_THEN_ValueError \n\n       3 tests in recipe_02.binom \n\n    5 tests in 3 items.\n    ```", "```py\n    test_GIVEN_n_5_k_52_THEN_ValueError_1 = \"\"\" \n\n        GIVEN n=5, k=52 WHEN binom(n, k) THEN exception \n\n        >>> binom(52, -5) \n\n        Traceback (most recent call last): \n\n          File \"/Users/slott/miniconda3/envs/cookbook3/lib/python3.12/doctest.py\", line 1357, in __run \n\n            exec(compile(example.source, filename, \"single\", \n\n          File \"<doctest recipe_02.__test__.test_GIVEN_n_5_k_52_THEN_ValueError[0]>\", line 1, in <module> \n\n            binom(52, -5) \n\n          File \"/Users/slott/Documents/Writing/Python/Python Cookbook 3e/src/ch15/recipe_02.py\", line 29, in binom \n\n            return factorial(n) // (factorial(k) * factorial(n - k)) \n\n                                    ^^^^^^^^^^^^ \n\n        ValueError: factorial() not defined for negative values \n\n    \"\"\"\n    ```", "```py\n    test_GIVEN_n_5_k_52_THEN_ValueError_2 = \"\"\" \n\n        GIVEN n=5, k=52 WHEN binom(n, k) THEN exception \n\n        >>> binom(5, 52) \n\n        Traceback (most recent call last): \n\n        ... \n\n        ValueError: factorial() not defined for negative values \n\n    \"\"\"\n    ```", "```py\n(cookbook3) % python -m doctest recipe_02.py\n```", "```py\nfrom string import ascii_letters \n\ndef unique_letters(text: str) -> set[str]: \n\n    letters = set(text.lower()) \n\n    non_letters = letters - set(ascii_letters) \n\n    return letters - non_letters\n```", "```py\nclass Point: \n\n    def __init__(self, lat: float, lon: float) -> None: \n\n        self.lat = lat \n\n        self.lon = lon \n\n    @property \n\n    def text(self) -> str: \n\n        ns_hemisphere = \"S\" if self.lat < 0 else \"N\" \n\n        ew_hemisphere = \"W\" if self.lon < 0 else \"E\" \n\n        lat_deg, lat_ms = divmod(abs(self.lat), 1.0) \n\n        lon_deg, lon_ms = divmod(abs(self.lon), 1.0) \n\n        return ( \n\n            f\"{lat_deg:02.0f}{lat_ms*60:4.3f}{ns_hemisphere}\" \n\n            f\" {lon_deg:03.0f}{lon_ms*60:4.3f}{ew_hemisphere}\" \n\n        )\n```", "```py\nfrom math import sqrt, pi, exp, erf \n\ndef phi(n: float) -> float: \n\n    return (1 + erf(n / sqrt(2))) / 2 \n\ndef frequency(n: float) -> float: \n\n    return phi(n) - phi(-n)\n```", "```py\n    >>> phrase = \"The quick brown fox...\" \n\n    >>> unique_letters(phrase) \n\n    {’b’, ’c’, ’e’, ’f’, ’h’, ’i’, ’k’, ’n’, ’o’, ’q’, ’r’, ’t’, ’u’, ’w’, ’x’}\n    ```", "```py\n    >>> phrase = \"The quick brown fox...\" \n\n    >>> sorted(unique_letters(phrase)) \n\n    [’b’, ’c’, ’e’, ’f’, ’h’, ’i’, ’k’, ’n’, ’o’, ’q’, ’r’, ’t’, ’u’, ’w’, ’x’] \n\n    >>> (unique_letters(phrase) == \n\n    ...    {’b’, ’c’, ’e’, ’f’, ’h’, ’i’, ’k’, ’n’, ’o’, ’q’, ’r’, ’t’, ’u’, ’w’, ’x’} \n\n    ... ) \n\n    True\n    ```", "```py\n    >>> Point(36.8439, -76.2936).text \n\n    ’3650.634N 07617.616W’\n    ```", "```py\n    >>> Point(36.8439, -76.2936) \n\n    <recipe_03.Point object at 0x107910610>\n    ```", "```py\n    >>> Point(36.8439, -76.2936) # doctest: +ELLIPSIS \n\n    <recipe_03.Point object at ...>\n    ```", "```py\n    >>> round(phi(0), 3) \n\n    0.5 \n\n    >>> round(phi(-1), 3) \n\n    0.159 \n\n    >>> round(phi(+1), 3) \n\n    0.841\n    ```", "```py\n    >>> from math import isclose \n\n    >>> isclose(phi(0), 0.5) \n\n    True \n\n    >>> isclose(phi(1), 0.8413, rel_tol=.0001) \n\n    True \n\n    >>> isclose(phi(2), 0.9772, rel_tol=1e-4) \n\n    True\n    ```", "```py\n(cookbook3) % PYTHONHASHSEED=42 python3 -m doctest recipe_03.py\n```", "```py\nScenario: Summary object can add values and compute statistics. \n\nGiven a Summary object \n\nAnd numbers in the range 0 to 1000 (inclusive) shuffled randomly \n\nWhen all numbers are added to the Summary object \n\nThen the mean is 500 \n\nAnd the median is 500\n```", "```py\n    import unittest \n\n    import random \n\n    from recipe_01 import Summary\n    ```", "```py\n    class GIVEN_Summary_WHEN_1k_samples_THEN_mean_median(unittest.TestCase):\n    ```", "```py\n     def setUp(self) -> None: \n\n            self.summary = Summary() \n\n            self.data = list(range(1001)) \n\n            random.shuffle(self.data)\n    ```", "```py\n     def runTest(self) -> None: \n\n            for sample in self.data: \n\n                self.summary.add(sample)\n    ```", "```py\n     self.assertEqual(500, self.summary.mean) \n\n            self.assertEqual(500, self.summary.median)\n    ```", "```py\n(cookbook3) % python -m unittest recipe_04.py\n```", "```py\n(cookbook3) % python -m unittest recipe_04.py \n\n... \n\n---------------------------------------------------------------------- \n\nRan 3 tests in 0.003s \n\nOK\n```", "```py\n(cookbook3) % python -m unittest -v recipe_04.py \n\nrunTest (recipe_04.GIVEN_Summary_WHEN_1k_samples_THEN_mean_median.runTest) ... ok \n\ntest_mean (recipe_04.GIVEN_Summary_WHEN_1k_samples_THEN_mean_median_2.test_mean) ... FAIL \n\ntest_median (recipe_04.GIVEN_Summary_WHEN_1k_samples_THEN_mean_median_2.test_median) ... ok \n\ntest_mode (recipe_04.GIVEN_Summary_WHEN_1k_samples_THEN_mode.test_mode) ... ok \n\n====================================================================== \n\nFAIL: test_mean (recipe_04.GIVEN_Summary_WHEN_1k_samples_THEN_mean_median_2.test_mean) \n\n---------------------------------------------------------------------- \n\nTraceback (most recent call last): \n\n  File \"/Users/slott/Documents/Writing/Python/Python Cookbook 3e/src/ch15/recipe_04.py\", line 122, in test_mean \n\n    self.assertEqual(501, self.summary.mean) \n\nAssertionError: 501 != 500.0 \n\n---------------------------------------------------------------------- \n\nRan 4 tests in 0.004s \n\nFAILED (failures=1)\n```", "```py\nclass GIVEN_Summary_WHEN_1k_samples_THEN_mean_median_2(unittest.TestCase): \n\n    def setUp(self) -> None: \n\n        self.summary = Summary() \n\n        self.data = list(range(1001)) \n\n        random.shuffle(self.data) \n\n        for sample in self.data: \n\n            self.summary.add(sample) \n\n    def test_mean(self) -> None: \n\n        self.assertEqual(500, self.summary.mean) \n\n    def test_median(self) -> None: \n\n        self.assertEqual(500, self.summary.median)\n```", "```py\n(cookbook3) % (cd src; python -m unittest discover -s ch15) \n\n............... \n\n---------------------------------------------------------------------- \n\nRan 15 tests in 0.008s \n\nOK\n```", "```py\nproject-name/ \n\n    src/ \n\n        summary.py \n\n    tests/ \n\n        test_summary.py \n\n    README \n\n    pyproject.toml \n\n    requirements.txt \n\n    tox.ini\n```", "```py\n    import unittest \n\n    import doctest \n\n    import random\n    ```", "```py\n    import recipe_01\n    ```", "```py\n    def load_tests( \n\n        loader: unittest.TestLoader, standard_tests: unittest.TestSuite, pattern: str \n\n    ) -> unittest.TestSuite: \n\n        dt = doctest.DocTestSuite(recipe_01) \n\n        standard_tests.addTests(dt) \n\n        return standard_tests\n    ```", "```py\n(cookbook3) % python -m unittest -v recipe_05.py \n\ntest_mean (recipe_05.GIVEN_Summary_WHEN_1k_samples_THEN_mean_median.test_mean) ... ok \n\ntest_median (recipe_05.GIVEN_Summary_WHEN_1k_samples_THEN_mean_median.test_median) ... ok \n\nSummary (recipe_01) \n\nDoctest: recipe_01.Summary ... ok \n\nTwc (recipe_01) \n\nDoctest: recipe_01.Twc ... ok \n\nGIVEN_binom_WHEN_0_0_THEN_1 (recipe_01.__test__) \n\nDoctest: recipe_01.__test__.GIVEN_binom_WHEN_0_0_THEN_1 ... ok \n\nGIVEN_binom_WHEN_52_52_THEN_1 (recipe_01.__test__) \n\nDoctest: recipe_01.__test__.GIVEN_binom_WHEN_52_52_THEN_1 ... ok \n\nbinom (recipe_01) \n\nDoctest: recipe_01.binom ... ok \n\nbinom2 (recipe_01) \n\nDoctest: recipe_01.binom2 ... ok \n\n---------------------------------------------------------------------- \n\nRan 8 tests in 0.006s \n\nOK\n```", "```py\nimport doctest \n\nimport unittest \n\nimport recipe_01 as ch15_r01 \n\nimport recipe_02 as ch15_r02 \n\nimport recipe_03 as ch15_r03 \n\nimport recipe_05 as ch15_r04 \n\ndef load_tests( \n\n    loader: unittest.TestLoader, standard_tests: unittest.TestSuite, pattern: str \n\n) -> unittest.TestSuite: \n\n    for module in (ch15_r01, ch15_r02, ch15_r03, ch15_r04): \n\n        dt = doctest.DocTestSuite(module) \n\n        standard_tests.addTests(dt) \n\n    return standard_tests\n```", "```py\n(cookbook3) % python -m pip install pytest\n```", "```py\nScenario: Summary object can add values and compute statistics. \n\nGiven a Summary object \n\nAnd numbers in the range 0 to 1000 (inclusive) shuffled randomly \n\nWhen all numbers are added to the Summary object \n\nThen the mean is 500 \n\nAnd the median is 500\n```", "```py\nclass Summary: \n\n    def __init__(self) -> None: ... \n\n    def __str__(self) -> str: ... \n\n    def add(self, value: int) -> None: ... \n\n    @property \n\n    def mean(self) -> float: ... \n\n    @property \n\n    def median(self) -> float: ... \n\n    @property \n\n    def count(self) -> int: ... \n\n    @property \n\n    def mode(self) -> list[tuple[int, int]]: ...\n```", "```py\n    import random \n\n    import pytest \n\n    from recipe_01 import Summary \n    ```", "```py\n    @pytest.fixture() \n\n    def flat_data() -> list[int]: \n\n        data = list(range(1001)) \n\n        random.shuffle(data) \n\n        return data\n    ```", "```py\n    def test_flat(flat_data: list[int]) -> None:\n    ```", "```py\n     summary = Summary() \n\n        for sample in flat_data: \n\n            summary.add(sample)\n    ```", "```py\n     assert summary.mean == 500 \n\n        assert summary.median == 500\n    ```", "```py\n(cookbook3) % python -m pytest test_summary.py\n```", "```py\n(cookbook3) % python -m pytest recipe_06.py \n\n=========================== test session starts ============================ \n\nplatform darwin -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0 \n\nrootdir: /Users/slott/Documents/Writing/Python/Python Cookbook 3e \n\nconfigfile: pytest.ini \n\nplugins: anyio-4.0.0 \n\ncollected 3 items \n\nrecipe_06.py ...                                                     [100%] \n\n============================ 3 passed in 0.02s =============================\n```", "```py\n(cookbook3) % python -m pytest recipe_06.py \n\n=========================== test session starts ============================ \n\nplatform darwin -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0 \n\nrootdir: /Users/slott/Documents/Writing/Python/Python Cookbook 3e \n\nconfigfile: pytest.ini \n\nplugins: anyio-4.0.0 \n\ncollected 3 items \n\nrecipe_06.py F..                                                     [100%] \n\n================================= FAILURES ================================= \n\n________________________________ test_flat _________________________________ \n\nflat_data = [883, 104, 898, 113, 519, 94, ...] \n\n    def test_flat(flat_data: list[int]) -> None: \n\n        summary = Summary() \n\n        for sample in flat_data: \n\n            summary.add(sample) \n\n>       assert summary.mean == 501 \n\nE       assert 500.0 == 501 \n\nE        +  where 500.0 = <recipe_01.Summary object at 0x10fdcb350>.mean \n\nrecipe_06.py:57: AssertionError \n\n========================= short test summary info ========================== \n\nFAILED recipe_06.py::test_flat - assert 500.0 == 501 \n\n======================= 1 failed, 2 passed in 0.17s ========================\n```", "```py\n@pytest.fixture() \n\ndef summary_object(flat_data: list[int]) -> Summary: \n\n    summary = Summary() \n\n    for sample in flat_data: \n\n        summary.add(sample) \n\n    return summary \n\ndef test_mean(summary_object: Summary) -> None: \n\n    assert summary_object.mean == 500 \n\ndef test_median(summary_object: Summary) -> None: \n\n    assert summary_object.median == 500\n```", "```py\nproject-name/ \n\n    src/ \n\n        summary.py \n\n    tests/ \n\n        test_summary.py \n\n    README \n\n    pyproject.toml \n\n    requirements.txt \n\n    tox.ini\n```", "```py\n    % pytest recipe_07.py --doctest-modules recipe_01.py\n    ```", "```py\n(cookbook3) % pytest recipe_07.py --doctest-modules recipe_01.py \n\n=========================== test session starts ============================ \n\nplatform darwin -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0 \n\nrootdir: /Users/slott/Documents/Writing/Python/Python Cookbook 3e \n\nconfigfile: pytest.ini \n\nplugins: anyio-4.0.0 \n\ncollected 7 items \n\nrecipe_07.py ..                                                      [ 28%] \n\nrecipe_01.py .....                                                   [100%] \n\n============================ 7 passed in 0.06s =============================\n```", "```py\n(cookbook3) % python -m pytest -v recipe_07.py --doctest-modules recipe_01.py \n\n=========================== test session starts ============================ \n\nplatform darwin -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0 -- /Users/slott/miniconda3/envs/cookbook3/bin/python \n\ncachedir: .pytest_cache \n\nrootdir: /Users/slott/Documents/Writing/Python/Python Cookbook 3e \n\nconfigfile: pytest.ini \n\nplugins: anyio-4.0.0 \n\ncollected 7 items \n\nrecipe_07.py::recipe_07.__test__.test_example_class PASSED           [ 14%] \n\nrecipe_07.py::test_flat PASSED                                       [ 28%] \n\nrecipe_01.py::recipe_01.Summary PASSED                               [ 42%] \n\nrecipe_01.py::recipe_01.__test__.GIVEN_binom_WHEN_0_0_THEN_1 PASSED  [ 57%] \n\nrecipe_01.py::recipe_01.__test__.GIVEN_binom_WHEN_52_52_THEN_1 PASSED [ 71%] \n\nrecipe_01.py::recipe_01.binom PASSED                                 [ 85%] \n\nrecipe_01.py::recipe_01.binom2 PASSED                                [100%] \n\n============================ 7 passed in 0.05s =============================\n```", "```py\nimport datetime \n\nimport json \n\nfrom pathlib import Path \n\nfrom typing import Any \n\ndef save_data(base: Path, some_payload: Any) -> None: \n\n    now_date = datetime.datetime.now(tz=datetime.timezone.utc) \n\n    now_text = now_date.strftime(\"extract_%Y%m%d%H%M%S\") \n\n    file_path = (base / now_text).with_suffix(\".json\") \n\n    with file_path.open(\"w\") as target_file: \n\n        json.dump(some_payload, target_file, indent=2) \n```", "```py\nScenario: save_date function writes JSON data to a date-stamped file. \n\nGiven a base directory Path \n\nAnd a payload object {\"primes\": [2, 3, 5, 7, 11, 13, 17, 19]} \n\nAnd a known date and time of 2017-9-10 11:12:13 UTC \n\nWhen save_data(base, payload) function is executed \n\nThen the output file of \"extract_20170910111213.json\" is found in the base directory \n\nAnd the output file has a properly serialized version of the payload \n\nAnd the datetime.datetime.now() function was called once to get the date and time\n```", "```py\n    import datetime \n\n    import json \n\n    from pathlib import Path\n    ```", "```py\n    from unittest.mock import Mock \n\n    import pytest \n\n    import recipe_08\n    ```", "```py\n    @pytest.fixture() \n\n    def mock_datetime() -> Mock: \n\n        return Mock( \n\n            name=\"mock datetime\", \n\n            datetime=Mock( \n\n                name=\"mock datetime.datetime\", \n\n                now=Mock(return_value=datetime.datetime(2017, 9, 10, 11, 12, 13)), \n\n            ), \n\n            timezone=Mock(name=\"mock datetime.timezone\", utc=Mock(name=\"UTC\")), \n\n        )\n    ```", "```py\n    def test_save_data( \n\n        mock_datetime: Mock, tmp_path: Path, monkeypatch: pytest.MonkeyPatch \n\n    ) -> None:\n    ```", "```py\n     monkeypatch.setattr(recipe_08, \"datetime\", mock_datetime)\n    ```", "```py\n     data = {\"primes\": [2, 3, 5, 7, 11, 13, 17, 19]} \n\n        recipe_08.save_data(tmp_path, data)\n    ```", "```py\n     expected_path = tmp_path / \"extract_20170910111213.json\" \n\n        with expected_path.open() as result_file: \n\n            result_data = json.load(result_file) \n\n        assert data == result_data \n\n        mock_datetime.datetime.now.assert_called_once_with(tz=mock_datetime. \n\n                                                           timezone.utc) \n    ```", "```py\n@pytest.fixture() \n\ndef mock_datetime_now() -> Mock: \n\n    return Mock( \n\n        name=\"mock datetime\", \n\n        datetime=Mock( \n\n            name=\"mock datetime.datetime\", \n\n            utcnow=Mock(side_effect=AssertionError(\"Convert to now()\")), \n\n            today=Mock(side_effect=AssertionError(\"Convert to now()\")), \n\n            now=Mock(return_value=datetime.datetime(2017, 7, 4, 4, 2, 3)), \n\n        ),\n```", "```py\nfrom collections.abc import Iterator \n\nimport random \n\ndef resample(population: list[int], N: int) -> Iterator[int]: \n\n    for i in range(N): \n\n        sample = random.choice(population) \n\n        yield sample\n```", "```py\nfrom collections import Counter \n\nimport statistics \n\ndef mean_distribution(population: list[int], N: int) -> Counter[float]: \n\n    means: Counter[float] = Counter() \n\n    for _ in range(1000): \n\n        subset = list(resample(population, N)) \n\n        measure = round(statistics.mean(subset), 1) \n\n        means[measure] += 1 \n\n    return means \n```", "```py\n>>> random.seed(42) \n\n>>> population = [8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68] \n\n>>> mean_distribution(population, 4).most_common(5) \n\n[(7.8, 51), (7.2, 45), (7.5, 44), (7.1, 41), (7.7, 40)]\n```", "```py\nScenario: Resample example \n\nGiven a random number generator where choice() always return the sequence [23, 29, 31, 37, 41, 43, 47, 53] \n\nWhen we evaluate the expression resample(any 8 values, 8) \n\nThen the expected results are [23, 29, 31, 37, 41, 43, 47, 53] \n\nAnd the choice() function was called 8 times\n```", "```py\n    from unittest.mock import Mock \n\n    import pytest \n\n    import recipe_09\n    ```", "```py\n    @pytest.fixture() \n\n    def expected_resample_data() -> list[int]: \n\n        return [23, 29, 31, 37, 41, 43, 47, 53] \n\n    @pytest.fixture() \n\n    def mock_random_choice(expected_resample_data: list[int]) -> Mock: \n\n        mock_choice = Mock(name=\"mock random.choice\", side_effect=expected_resample_data) \n\n        return mock_choice\n    ```", "```py\n    def test_resample( \n\n        mock_random_choice: Mock, \n\n        expected_resample_data: list[int], \n\n        monkeypatch: pytest.MonkeyPatch, \n\n    ) -> None:\n    ```", "```py\n     monkeypatch.setattr(recipe_09.random, \"choice\", mock_random_choice)  # type: ignore [attr-defined]\n    ```", "```py\n     data = [2, 3, 5, 7, 11, 13, 17, 19] \n\n        resample_data = list(recipe_09.resample(data, 8))\n    ```", "```py\n     assert resample_data == expected_resample_data \n\n        assert mock_random_choice.mock_calls == 8 * [call(data)]\n    ```", "```py\ndef resample_pattern(X: Any, Y: Any) -> Iterator[Any]: \n\n    for _ in range(Y): \n\n        yield another_function(X)\n```", "```py\nfrom unittest.mock import Mock, call, sentinel \n\n@pytest.fixture() \n\ndef mock_choice_s() -> Mock: \n\n    mock_choice = Mock(name=\"mock random.choice()\", return_value=sentinel.CHOICE) \n\n    return mock_choice \n\ndef test_resample_2( \n\n        mock_choice_s: Mock, monkeypatch: pytest.MonkeyPatch \n\n) -> None: \n\n    monkeypatch.setattr( \n\n        recipe_09.random, \"choice\", mock_choice_s # type: ignore [attr-defined] \n\n    ) \n\n    resample_data = list(recipe_09.resample(sentinel.POPULATION, 8)) \n\n    assert resample_data == [sentinel.CHOICE] * 8\n```", "```py\nfrom pathlib import Path \n\nimport csv \n\nfrom dataclasses import dataclass, asdict, fields \n\n@dataclass \n\nclass Quotient: \n\n    numerator: int \n\n    denominator: int \n\ndef save_data(output_path: Path, data: Quotient) -> None:\n```", "```py\n    ... # Details omitted\n```", "```py\ndef safe_write(output_path: Path, data: Quotient) -> None: \n```", "```py\n    ... # Details omitted\n```", "```py\nScenario: save_data() function is broken. \n\nGiven some faulty set of data, \"faulty_data\", that causes a failure in the save_data() function \n\nAnd an existing file, \"important_data.csv\" \n\nWhen safe_write(\"important_data.csv\", faulty_data) is processed \n\nThen safe_write raises an exception \n\nAnd the existing file, \"important_data.csv\" is untouched\n```", "```py\n    from pathlib import Path \n\n    from typing import Any \n\n    from unittest.mock import Mock, sentinel \n\n    import pytest \n\n    import recipe_10\n    ```", "```py\n    @pytest.fixture() \n\n    def original_file(tmp_path: Path) -> Path: \n\n        precious_file = tmp_path / \"important_data.csv\" \n\n        precious_file.write_text(hex(id(sentinel.ORIGINAL_DATA)), encoding=\"utf-8\") \n\n        return precious_file\n    ```", "```py\n    def save_data_good(path: Path, content: recipe_10.Quotient) -> None: \n\n        path.write_text(hex(id(sentinel.GOOD_DATA)), encoding=\"utf-8\")\n    ```", "```py\n    def test_safe_write_happy(original_file: Path, monkeypatch: pytest.MonkeyPatch) -> None: \n\n        mock_save_data = Mock(side_effect=save_data_good) \n\n        monkeypatch.setattr(recipe_10, \"save_data\", mock_save_data) \n\n        data = recipe_10.Quotient(355, 113) \n\n        recipe_10.safe_write(Path(original_file), data) \n\n        actual = original_file.read_text(encoding=\"utf-8\") \n\n        assert actual == hex(id(sentinel.GOOD_DATA))\n    ```", "```py\n    def save_data_failure(path: Path, content: recipe_10.Quotient) -> None: \n\n        path.write_text(hex(id(sentinel.CORRUPT_DATA)), encoding=\"utf-8\") \n\n        raise RuntimeError(\"mock exception\")\n    ```", "```py\n    def test_safe_write_scenario_2( \n\n        original_file: Path, monkeypatch: pytest.MonkeyPatch \n\n    ) -> None: \n\n        mock_save_data = Mock(side_effect=save_data_failure) \n\n        monkeypatch.setattr(recipe_10, \"save_data\", mock_save_data) \n\n        data = recipe_10.Quotient(355, 113) \n\n        with pytest.raises(RuntimeError) as ex: \n\n            recipe_10.safe_write(Path(original_file), data) \n\n        actual = original_file.read_text(encoding=\"utf-8\") \n\n        assert actual == hex(id(sentinel.ORIGINAL_DATA))\n    ```", "```py\ndef test_safe_write_scenarios( \n\n        original_file: Path, \n\n        mock_pathlib_path: Mock, \n\n        monkeypatch: pytest.MonkeyPatch \n\n) -> None: \n\n    mock_save_data = Mock(side_effect=save_data_good) \n\n    monkeypatch.setattr(recipe_10, \"save_data\", mock_save_data) \n\n    data = recipe_10.Quotient(355, 113) \n\n    with pytest.raises(RuntimeError) as exc_info: \n\n        recipe_10.safe_write(mock_pathlib_path, data) \n\n    actual = original_file.read_text(encoding=\"utf-8\") \n\n    assert actual == hex(id(sentinel.ORIGINAL_DATA)) \n\n    mock_save_data.assert_called_once() \n\n    mock_pathlib_path.with_suffix.mock_calls == [ \n\n        call(\"suffix.new\"), call(\"suffix.old\") \n\n    ] \n\n    # Scenario-specific details...\n```", "```py\nscenario_3 = { \n\n    \"original\": None, \"new\": None, \"old\": RuntimeError(\"3\")} \n\nscenario_4 = { \n\n    \"original\": RuntimeError(\"4\"), \"new\": None, \"old\": None} \n\nscenario_5 = { \n\n    \"original\": None, \"new\": RuntimeError(\"5\"), \"old\": None}\n```", "```py\n@pytest.fixture( \n\n    params=[scenario_3, scenario_4, scenario_5], \n\n) \n\ndef mock_pathlib_path(request: pytest.FixtureRequest) -> Mock: \n\n    mock_mapping = request.param \n\n    new_path = Mock(rename=Mock(side_effect=mock_mapping[\"new\"])) \n\n    old_path = Mock(unlink=Mock(side_effect=mock_mapping[\"old\"])) \n\n    output_path = Mock( \n\n        name=\"mock output_path\", \n\n        suffix=\"suffix\", \n\n        with_suffix=Mock(side_effect=[new_path, old_path]), \n\n        rename=Mock(side_effect=mock_mapping[\"original\"]), \n\n    ) \n\n    return output_path\n```"]