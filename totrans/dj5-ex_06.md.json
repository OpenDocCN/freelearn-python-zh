["```py\ndjango-admin startapp images \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'images.apps.ImagesConfig'****,**\n] \n```", "```py\nfrom django.conf import settings\nfrom django.db import models\nclass Image(models.Model):\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        related_name='images_created',\n        on_delete=models.CASCADE\n    )\n    title = models.CharField(max_length=200)\n    slug = models.SlugField(max_length=200, blank=True)\n    url = models.URLField(max_length=2000)\n    image = models.ImageField(upload_to='images/%Y/%m/%d/')\n    description = models.TextField(blank=True)\n    created = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        indexes = [\n            models.Index(fields=['-created']),\n        ]\n        ordering = ['-created']\n    def __str__(self):\n        return self.title \n```", "```py\n**from** **django.utils.text** **import** **slugify**\nclass Image(models.Model):\n    # ...\n**def****save****(****self, *args, **kwargs****):**\n**if****not** **self.slug:**\n **self.slug = slugify(self.title)**\n**super****().save(*args, **kwargs)** \n```", "```py\nusers_like = models.ManyToManyField(\n    settings.AUTH_USER_MODEL,\n    related_name='images_liked',\n    blank=True\n) \n```", "```py\npython manage.py makemigrations images \n```", "```py\nMigrations for 'images':\n  images/migrations/0001_initial.py\n    - Create model Image\n    - Create index images_imag_created_d57897_idx on field(s) -created of model image \n```", "```py\npython manage.py migrate images \n```", "```py\nApplying images.0001_initial... OK \n```", "```py\nfrom django.contrib import admin\n**from** **.models** **import** **Image**\n**@admin.register(****Image****)**\n**class****ImageAdmin****(admin.ModelAdmin):**\n **list_display = [****'title'****,** **'slug'****,** **'image'****,** **'created'****]**\n **list_filter = [****'created'****]** \n```", "```py\npython manage.py runserver_plus --cert-file cert.crt \n```", "```py\nfrom django import forms\nfrom .models import Image\nclass ImageCreateForm(forms.ModelForm):\n    class Meta:\n        model = Image\n        fields = ['title', 'url', 'description']\n        widgets = {\n            'url': forms.HiddenInput,\n        } \n```", "```py\ndef clean_url(self):\n    url = self.cleaned_data['url']\n    valid_extensions = ['jpg', 'jpeg', 'png']\n    extension = url.rsplit('.', 1)[1].lower()\n    if extension not in valid_extensions:\n        raise forms.ValidationError(\n            'The given URL does not match valid image extensions.'\n )\n    return url \n```", "```py\npython -m pip install requests==2.31.0 \n```", "```py\nimport requests\nfrom django.core.files.base import ContentFile\nfrom django.utils.text import slugify \n```", "```py\ndef save(self, force_insert=False, force_update=False, commit=True):\n    image = super().save(commit=False)\n    image_url = self.cleaned_data['url']\n    name = slugify(image.title)\n    extension = image_url.rsplit('.', 1)[1].lower()\n    image_name = f'{name}.{extension}'\n# download image from the given URL\n    response = requests.get(image_url)\n    image.image.save(\n        image_name,\n        ContentFile(response.content),\n        save=False\n )\n    if commit:\n        image.save()\n    return image \n```", "```py\n**from** **django.contrib** **import** **messages**\n**from** **django.contrib.auth.decorators** **import** **login_required**\nfrom django.shortcuts import **redirect,** render\n**from** **.forms** **import** **ImageCreateForm**\n**@login_required**\n**def****image_create****(****request****):**\n**if** **request.method ==** **'POST'****:**\n**# form is sent**\n **form = ImageCreateForm(data=request.POST)**\n**if** **form.is_valid():**\n**# form data is valid**\n **cd = form.cleaned_data**\n **new_image = form.save(commit=****False****)**\n**# assign current user to the item**\n **new_image.user = request.user**\n **new_image.save()**\n **messages.success(request,** **'Image added successfully'****)**\n**# redirect to new created item detail view**\n**return** **redirect(new_image.get_absolute_url())**\n**else****:**\n**# build form with data provided by the bookmarklet via GET**\n **form = ImageCreateForm(data=request.GET)**\n**return** **render(**\n **request,**\n**'images/image/create.html'****,**\n **{****'section'****:** **'images'****,** **'form'****: form}**\n **)** \n```", "```py\nfrom django.urls import path\nfrom . import views\napp_name = 'images'\nurlpatterns = [\n    path('create/', views.image_create, name='create'),\n] \n```", "```py\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('account/', include('account.urls')),\n    path(\n        'social-auth/',\n        include('social_django.urls', namespace='social')\n    ),\n **path(****'images/'****, include(****'images.urls'****, namespace=****'images'****)),**\n] \n```", "```py\ntemplates/\n  images/\n    image/\n      create.html \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Bookmark an image{% endblock %}\n{% block content %}\n  <h1>Bookmark an image</h1>\n<img src=\"img/{{ request.GET.url }}\" class=\"image-preview\">\n<form method=\"post\">\n    {{ form.as_p }}\n    {% csrf_token %}\n    <input type=\"submit\" value=\"Bookmark it!\">\n</form>\n{% endblock %} \n```", "```py\npython manage.py runserver_plus --cert-file cert.crt \n```", "```py\n(function(){\n  if(!window.bookmarklet) {\n    bookmarklet_js = document.body.appendChild(document.createElement('script'));\n    bookmarklet_js.src = '//127.0.0.1:8000/static/js/bookmarklet.js?r='+Math.floor(Math.random()*9999999999999999);\n    window.bookmarklet = true;\n  }\n  else {\n    bookmarkletLaunch();\n  }\n})(); \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Dashboard{% endblock %}\n{% block content %}\n  <h1>Dashboard</h1>\n **{% with total_images_created=request.user.images_created.count %}**\n**<****p****>****Welcome to your dashboard. You have bookmarked {{ total_images_created }} image{{ total_images_created|pluralize }}.****</****p****>**\n **{% endwith %}**\n**<****p****>****Drag the following button to your bookmarks toolbar to bookmark images from other websites â†’** **<****a****href****=****\"****javascript:{% include \"****bookmarklet_launcher.js****\" %}\"** **class****=****\"button\"****>****Bookmark it****</****a****></****p****>**\n**<****p****>****You can also** **<****a****href****=****\"{% url \"****edit****\" %}\">****edit your profile****</****a****>** **or** **<****a****href****=****\"{% url \"****password_change****\" %}\">****change your password****</****a****>****.****</****p****>**\n{% endblock %} \n```", "```py\nstatic/\n  js/\n    bookmarklet.js \n```", "```py\n css/\n    bookmarklet.css\n  js/\n    bookmarklet.js \n```", "```py\nconst siteUrl = '//127.0.0.1:8000/';\nconst styleUrl = siteUrl + 'static/css/bookmarklet.css';\nconst minWidth = 250;\nconst minHeight = 250; \n```", "```py\nconst siteUrl = '//127.0.0.1:8000/';\nconst styleUrl = siteUrl + 'static/css/bookmarklet.css';\nconst minWidth = 250;\nconst minHeight = 250;\n**// load CSS**\n**var head = document.getElementsByTagName(****'****head'****)[****0****];**\n**var link = document.createElement(****'link'****);**\n**link.rel =** **'stylesheet'****;**\n**link.****type** **=** **'text/css'****;**\n**link.href = styleUrl +** **'?r='** **+ Math.floor(Math.random()*****9999999999999999****);**\n**head.appendChild(link);** \n```", "```py\n<link rel=\"stylesheet\" type=\"text/css\" href= \"//127.0.0.1:8000/static/css/bookmarklet.css?r=1234567890123456\"> \n```", "```py\nconst siteUrl = '//127.0.0.1:8000/';\nconst styleUrl = siteUrl + 'static/css/bookmarklet.css';\nconst minWidth = 250;\nconst minHeight = 250;\n// load CSS\nvar head = document.getElementsByTagName('head')[0];\nvar link = document.createElement('link');\nlink.rel = 'stylesheet';\nlink.type = 'text/css';\nlink.href = styleUrl + '?r=' + Math.floor(Math.random()*9999999999999999);\nhead.appendChild(link);\n**// load HTML**\n**var body = document.getElementsByTagName(****'body'****)[****0****];**\n**boxHtml = `**\n **<div** **id****=****\"bookmarklet\"****>**\n **<a href=****\"#\"****id****=****\"close\"****>&times;</a>**\n **<h1>Select an image to bookmark:</h1>**\n **<div** **class****=****\"images\"****></div>**\n **</div>`;**\n**body.innerHTML += boxHtml;** \n```", "```py\nfunction bookmarkletLaunch() {\n  bookmarklet = document.getElementById('bookmarklet');\n  var imagesFound = bookmarklet.querySelector('.images');\n  // clear images found\n  imagesFound.innerHTML = '';\n  // display bookmarklet\n  bookmarklet.style.display = 'block';\n  // close event\n  bookmarklet.querySelector('#close')\n             .addEventListener('click', function(){\n               bookmarklet.style.display = 'none'\n             });\n}\n// launch the bookmkarklet\nbookmarkletLaunch(); \n```", "```py\nfunction bookmarkletLaunch() {\n  bookmarklet = document.getElementById('bookmarklet');\n  var imagesFound = bookmarklet.querySelector('.images');\n  // clear images found\n  imagesFound.innerHTML = '';\n  // display bookmarklet\n  bookmarklet.style.display = 'block';\n  // close event\n  bookmarklet.querySelector('#close')\n             .addEventListener('click', function(){\n               bookmarklet.style.display = 'none'\n             });\n**// find images in the DOM with the minimum dimensions**\n **images =** **document****.****querySelectorAll****(****'img[src$=\".jpg\"], img[src$=\".jpeg\"], img[src$=\".png\"]'****);**\n **images.****forEach****(****image** **=>** **{**\n**if****(image.****naturalWidth** **>= minWidth**\n **&& image.****naturalHeight** **>= minHeight)**\n **{**\n**var** **imageFound =** **document****.****createElement****(****'img'****);**\n **imageFound.****src** **= image.****src****;**\n **imagesFound.****append****(imageFound);**\n **}**\n **})**\n**}**\n**// launch the bookmkarklet**\n**bookmarkletLaunch****();** \n```", "```py\npython manage.py runserver_plus --cert-file cert.crt \n```", "```py\nif DEBUG:\n    import mimetypes\n    mimetypes.add_type('application/javascript', '.js', True)\n    mimetypes.add_type('text/css', '.css', True) \n```", "```py\nfunction bookmarkletLaunch() {\n  bookmarklet = document.getElementById('bookmarklet');\n  var imagesFound = bookmarklet.querySelector('.images');\n  // clear images found\n  imagesFound.innerHTML = '';\n  // display bookmarklet\n  bookmarklet.style.display = 'block';\n  // close event\n  bookmarklet.querySelector('#close')\n             .addEventListener('click', function(){\n               bookmarklet.style.display = 'none'\n             });\n  // find images in the DOM with the minimum dimensions\n  images = document.querySelectorAll('img[src$=\".jpg\"], img[src$=\".jpeg\"], img[src$=\".png\"]');\n  images.forEach(image => {\n    if(image.naturalWidth >= minWidth\n       && image.naturalHeight >= minHeight)\n    {\n      var imageFound = document.createElement('img');\n      imageFound.src = image.src;\n      imagesFound.append(imageFound);\n    }\n  })\n**// select image event**\n **imagesFound.****querySelectorAll****(****'img'****).****forEach****(****image** **=>** **{**\n **image.****addEventListener****(****'click'****,** **function****(****event****){**\n **imageSelected = event.****target****;**\n **bookmarklet.****style****.****display** **=** **'none'****;**\n**window****.****open****(siteUrl +** **'images/create/?url='**\n **+** **encodeURIComponent****(imageSelected.****src****)**\n **+** **'&title='**\n **+** **encodeURIComponent****(****document****.****title****),**\n**'_blank'****);**\n **})**\n **})**\n}\n// launch the bookmkarklet\nbookmarkletLaunch(); \n```", "```py\nfrom django.shortcuts import get_object_or_404\nfrom .models import Image\ndef image_detail(request, id, slug):\n    image = get_object_or_404(Image, id=id, slug=slug)\n    return render(\n request,\n 'images/image/detail.html',\n {'section': 'images', 'image': image}\n    ) \n```", "```py\nurlpatterns = [\n    path('create/', views.image_create, name='create'),\n **path(**\n**'detail/<int:id>/<slug:slug>/'****,**\n **views.image_detail,**\n **name=****'detail'**\n**),**\n] \n```", "```py\n**from** **django.urls** **import** **reverse**\nclass Image(models.Model):\n    # ...\n**def****get_absolute_url****(****self****):**\n**return** **reverse(****'images:detail'****, args=[self.****id****, self.slug])** \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}{{ image.title }}{% endblock %}\n{% block content %}\n  <h1>{{ image.title }}</h1>\n<img src=\"img/{{ image.image.url }}\" class=\"image-detail\">\n  {% with total_likes=image.users_like.count %}\n    <div class=\"image-info\">\n<div>\n<span class=\"count\">\n          {{ total_likes }} like{{ total_likes|pluralize }}\n        </span>\n</div>\n      {{ image.description|linebreaks }}\n    </div>\n<div class=\"image-likes\">\n      {% for user in image.users_like.all %}\n        <div>\n          {% if user.profile.photo %}\n            <img src=\"img/{{ user.profile.photo.url }}\">\n          {% endif %}\n          <p>{{ user.first_name }}</p>\n</div>\n      {% empty %}\n        Nobody likes this image yet.\n      {% endfor %}\n    </div>\n  {% endwith %}\n{% endblock %} \n```", "```py\npython -m pip install easy-thumbnails==2.8.5 \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'****easy_thumbnails'****,**\n] \n```", "```py\npython manage.py migrate \n```", "```py\nApplying easy_thumbnails.0001_initial... OK\nApplying easy_thumbnails.0002_thumbnaildimensions... OK \n```", "```py\n<img src=\"img/{{ image.image.url }}\" class=\"image-detail\"> \n```", "```py\n**{%** **load** **thumbnail %}**\n**<****a****href****=****\"****{{ image.image.url }}****\"****>**\n<img src=\"img/**{%** **thumbnail** **image.image 300x0 %}**\" class=\"image-detail\">\n**</****a****>** \n```", "```py\npython manage.py runserver_plus --cert-file cert.crt \n```", "```py\nfrom django.http import JsonResponse\nfrom django.views.decorators.http import require_POST\n@login_required\n@require_POST\ndef image_like(request):\n    image_id = request.POST.get('id')\n    action = request.POST.get('action')\n    if image_id and action:\n        try:\n            image = Image.objects.get(id=image_id)\n            if action == 'like':\n                image.users_like.add(request.user)\n            else:\n                image.users_like.remove(request.user)\n            return JsonResponse({'status': 'ok'})\n        except Image.DoesNotExist:\n            pass\nreturn JsonResponse({'status': 'error'}) \n```", "```py\nurlpatterns = [\n    path('create/', views.image_create, name='create'),\n    path(\n        'detail/<int:id>/<slug:slug>/',\n        views.image_detail,\n        name='detail'\n ),\n **path(****'like/'****, views.image_like, name=****'like'****),**\n**]** \n```", "```py\n<!DOCTYPE html>\n<html>\n<head>\n ...\n</head>\n<body>\n  ...\n**<****script****>**\n**document****.****addEventListener****(****'DOMContentLoaded'****,** **(****event****) =>** **{**\n**// DOM loaded**\n **{% block domready %}**\n **{% endblock %}**\n **})**\n**</****script****>**\n</body>\n</html> \n```", "```py\n<!DOCTYPE html>\n<html>\n<head>\n ...\n</head>\n<body>\n  ...\n **<script src=****\"//cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js\"****></script>**\n  <script>\n **const csrftoken = Cookies.get(****'csrftoken'****);**\n    document.addEventListener('DOMContentLoaded', (event) => {\n      // DOM loaded\n      {% block domready %}\n      {% endblock %}\n    })\n  </script>\n</body>\n</html> \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}{{ image.title }}{% endblock %}\n{% block content %}\n  <h1>{{ image.title }}</h1>\n  {% load thumbnail %}\n  <a href=\"{{ image.image.url }}\">\n<img src=\"img/{% thumbnail image.image 300x0 %}\" class=\"image-detail\">\n</a>\n  {% with total_likes=image.users_like.count **users_like=image.users_like.all** %}\n    <div class=\"image-info\">\n<div>\n<span class=\"count\">\n**<****span****class****=****\"total\"****>****{{ total_likes }}****</****span****>**\n        like{{ total_likes|pluralize }}\n        </span>\n**<****a****href****=****\"****#\"****data-id****=****\"{{ image.id }}\"****data-action****=****\"{% if request.user in users_like %}un{% endif %}like\"**\n**class****=****\"like button\"****>**\n **{% if request.user not in users_like %}**\n **Like**\n **{% else %}**\n **Unlike**\n **{% endif %}**\n**</****a****>**\n</div>\n      {{ image.description|linebreaks }}\n    </div>\n<div class=\"image-likes\">\n      {% for user in users_like %}\n        <div>\n          {% if user.profile.photo %}\n            <img src=\"img/{{ user.profile.photo.url }}\">\n          {% endif %}\n          <p>{{ user.first_name }}</p>\n</div>\n      {% empty %}\n        Nobody likes this image yet.\n      {% endfor %}\n    </div>\n  {% endwith %}\n{% endblock %} \n```", "```py\n{% block domready %}\n  const url = '{% url \"images:like\" %}';\n  var options = {\n    method: 'POST',\n    headers: {'X-CSRFToken': csrftoken},\n    mode: 'same-origin'\n  }\n  document.querySelector('a.like')\n          .addEventListener('click', function(e){\n    e.preventDefault();\n    var likeButton = this;\n  });\n{% endblock %} \n```", "```py\n{% block domready %}\n  const url = '{% url \"images:like\" %}';\n  var options = {\n    method: 'POST',\n    headers: {'X-CSRFToken': csrftoken},\n    mode: 'same-origin'\n  }\n  document.querySelector('a.like')\n          .addEventListener('click', function(e){\n    e.preventDefault();\n    var likeButton = this;\n **// add request body**\n **var formData = new FormData();**\n **formData.append(****'id'****, likeButton.dataset.****id****);**\n **formData.append(****'action'****, likeButton.dataset.action);**\n **options[****'body'****] = formData;**\n **// send HTTP request**\n **fetch(url, options)**\n **.then(response => response.json())**\n **.then(data => {**\n**if** **(data[****'****status'****] ===** **'ok'****)**\n **{**\n **}**\n **})**\n  });\n{% endblock %} \n```", "```py\n{% block domready %}\n  var url = '{% url \"images:like\" %}';\n  var options = {\n    method: 'POST',\n    headers: {'X-CSRFToken': csrftoken},\n    mode: 'same-origin'\n  }\n  document.querySelector('a.like')\n          .addEventListener('click', function(e){\n    e.preventDefault();\n    var likeButton = this;\n    // add request body\n    var formData = new FormData();\n    formData.append('id', likeButton.dataset.id);\n    formData.append('action', likeButton.dataset.action);\n    options['body'] = formData;\n    // send HTTP request\n    fetch(url, options)\n    .then(response => response.json())\n    .then(data => {\n      if (data['status'] === 'ok')\n      {\n **var previousAction = likeButton.dataset.action;**\n **// toggle button text** **and** **data-action**\n **var action = previousAction ===** **'like'** **?** **'unlike'** **:** **'like'****;**\n **likeButton.dataset.action = action;**\n **likeButton.innerHTML = action;**\n **// update like count**\n **var likeCount = document.querySelector(****'span.count .total'****);**\n **var totalLikes = parseInt(likeCount.innerHTML);**\n **likeCount.innerHTML = previousAction ===** **'like'** **? totalLikes +** **1** **: totalLikes -** **1****;**\n      }\n    })\n  });\n{% endblock %} \n```", "```py\n**from** **django.core.paginator** **import** **EmptyPage, PageNotAnInteger, Paginator**\n**from** **django.http** **import** **HttpResponse**\n# ...\n**@login_required**\n**def****image_list****(****request****):**\n **images = Image.objects.****all****()**\n **paginator = Paginator(images,** **8****)**\n **page = request.GET.get(****'page'****)**\n **images_only = request.GET.get(****'images_only'****)**\n**try****:**\n **images = paginator.page(page)**\n**except** **PageNotAnInteger:**\n**# If page is not an integer deliver the first page**\n **images = paginator.page(****1****)**\n**except** **EmptyPage:**\n**if** **images_only:**\n**# If AJAX request and page out of range**\n**# return an empty page**\n**return** **HttpResponse(****''****)**\n**# If page out of range return last page of results**\n **images = paginator.page(paginator.num_pages)**\n**if** **images_only:**\n**return** **render(**\n**request,**\n**'images/image/list_images.html'****,**\n **{****'section'****:** **'images'****,** **'****images'****: images}**\n **)**\n**return** **render(**\n**request,**\n**'images/image/list.html'****,**\n **{****'section'****:** **'images'****,** **'images'****: images}**\n **)** \n```", "```py\nurlpatterns = [\n    path('create/', views.image_create, name='create'),\n    path(\n        'detail/<int:id>/<slug:slug>/',\n        views.image_detail,\n        name='detail'\n ),\n    path('like/', views.image_like, name='like'),\n **path(****''****, views.image_list, name=****'list'****),**\n] \n```", "```py\n{% load thumbnail %}\n{% for image in images %}\n  <div class=\"image\">\n<a href=\"{{ image.get_absolute_url }}\">\n      {% thumbnail image.image 300x300 crop=\"smart\" as im %}\n      <a href=\"{{ image.get_absolute_url }}\">\n<img src=\"img/{{ im.url }}\">\n</a>\n</a>\n<div class=\"info\">\n<a href=\"{{ image.get_absolute_url }}\" class=\"title\">\n        {{ image.title }}\n      </a>\n</div>\n</div>\n{% endfor %} \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Images bookmarked{% endblock %}\n{% block content %}\n  <h1>Images bookmarked</h1>\n<div id=\"image-list\">\n    {% include \"images/image/list_images.html\" %}\n  </div>\n{% endblock %} \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Images bookmarked{% endblock %}\n{% block content %}\n  <h1>Images bookmarked</h1>\n<div id=\"image-list\">\n    {% include \"images/image/list_images.html\" %}\n  </div>\n{% endblock %}\n**{% block domready %}**\n **var page = 1;**\n **var emptyPage = false;**\n **var blockRequest = false;**\n**window.addEventListener('scroll', function(e) {**\n **var margin = document.body.clientHeight - window.innerHeight - 200;**\n **if(window.pageYOffset > margin && !emptyPage && !blockRequest) {**\n **blockRequest = true;**\n **page += 1;**\n **fetch('?images_only=1&page=' + page)**\n **.then(response => response.text())**\n **.then(html => {**\n **if (html === '') {**\n **emptyPage = true;**\n **}**\n **else {**\n **var imageList = document.getElementById('image-list');**\n **imageList.insertAdjacentHTML('beforeEnd', html);**\n **blockRequest = false;**\n **}**\n **})**\n **}**\n **});**\n **// Launch scroll event**\n **const scrollEvent = new Event('scroll');**\n **window.dispatchEvent(scrollEvent);**\n**{% endblock %}** \n```", "```py\n[04/Jan/2024 08:14:20] \"GET /images/ HTTP/1.1\" 200\n[04/Jan/2024 08:14:25] \"GET /images/?images_only=1&page=2 HTTP/1.1\" 200\n[04/Jan/2024 08:14:26] \"GET /images/?images_only=1&page=3 HTTP/1.1\" 200\n[04/Jan/2024 08:14:26] \"GET /images/?images_only=1&page=4 HTTP/1.1\" 200 \n```", "```py\n<ul class=\"menu\">\n  ...\n  <li {% if section == \"images\" %}class=\"selected\"{% endif %}>\n<a href=**\"{% url \"****images:list****\" %}\"**>Images</a>\n</li>\n  ...\n</ul> \n```"]