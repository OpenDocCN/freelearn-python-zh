["```py\nimport concurrent.futures\nimport time\n```", "```py\nnumber_list = list(range(1, 11))\n```", "```py\ndef count(number):\n    for i in range(0,100000000):\n        i += 1\n    return i*number\n```", "```py\ndef evaluate(item):\n    result_item = count(item)\n    print('Item %s, result %s' % (item, result_item))\n```", "```py\nif __name__ == '__main__':\n```", "```py\n    start_time = time.clock()\n    for item in number_list:\n        evaluate(item)\n    print('Sequential Execution in %s seconds' % (time.clock() -\\ \n        start_time))\n```", "```py\n    start_time = time.clock()\n    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as\\ \n    executor:\n        for item in number_list:\n            executor.submit(evaluate, item)\n    print('Thread Pool Execution in %s seconds' % (time.clock() -\\ \n        start_time))\n    start_time = time.clock()\n    with concurrent.futures.ProcessPoolExecutor(max_workers=5) as\\ \n    executor:\n        for item in number_list:\n            executor.submit(evaluate, item)\n    print('Process Pool Execution in %s seconds' % (time.clock() -\\ \n        start_time))\n```", "```py\nnumber_list = list(range(1, 11))\n```", "```py\ndef count(number) : \n    for i in range(0, 100000000):\n        i=i+1\n    return i*number\n\ndef evaluate_item(x):\n    result_item = count(x)\n```", "```py\nif __name__ == \"__main__\":\n   for item in number_list:\n       evaluate_item(item)\n```", "```py\nwith concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n    for item in number_list:\n        executor.submit(evaluate, item)\n```", "```py\nwith concurrent.futures.ProcessPoolExecutor(max_workers=5) as executor:\n    for item in number_list:\n        executor.submit(evaluate, item)\n```", "```py\n> python concurrent_futures_pooling.py\n```", "```py\nItem 1, result 10000000\nItem 2, result 20000000\nItem 3, result 30000000\nItem 4, result 40000000\nItem 5, result 50000000\nItem 6, result 60000000\nItem 7, result 70000000\nItem 8, result 80000000\nItem 9, result 90000000\nItem 10, result 100000000\nSequential Execution in 6.8109448 seconds\nItem 2, result 20000000\nItem 1, result 10000000\nItem 4, result 40000000\nItem 5, result 50000000\nItem 3, result 30000000\nItem 8, result 80000000\nItem 7, result 70000000\nItem 6, result 60000000\nItem 10, result 100000000\nItem 9, result 90000000\nThread Pool Execution in 6.805766899999999 seconds\nItem 1, result 10000000\nItem 4, result 40000000\nItem 2, result 20000000\nItem 3, result 30000000\nItem 5, result 50000000\nItem 6, result 60000000\nItem 7, result 70000000\nItem 9, result 90000000\nItem 8, result 80000000\nItem 10, result 100000000\nProcess Pool Execution in 4.166398899999999 seconds\n```", "```py\nwhile (1) {\n    events = getEvents()\n    for (e in events)\n        processEvent(e)\n}\n```", "```py\nimport asyncio\nimport time\nimport random\n```", "```py\ndef task_A(end_time, loop):\n    print (\"task_A called\")\n    time.sleep(random.randint(0, 5))\n    if (loop.time() + 1.0) < end_time:\n        loop.call_later(1, task_B, end_time, loop)\n    else:\n        loop.stop()\n```", "```py\ndef task_B(end_time, loop):\n    print (\"task_B called \")\n    time.sleep(random.randint(3, 7))\n    if (loop.time() + 1.0) < end_time:\n        loop.call_later(1, task_C, end_time, loop)\n    else:\n        loop.stop()\n```", "```py\ndef task_C(end_time, loop):\n    print (\"task_C called\")\n    time.sleep(random.randint(5, 10))\n    if (loop.time() + 1.0) < end_time:\n        loop.call_later(1, task_A, end_time, loop)\n    else:\n        loop.stop()\n```", "```py\nloop = asyncio.get_event_loop()\n```", "```py\nend_loop = loop.time() + 60\n```", "```py\nloop.call_soon(task_A, end_loop, loop)\n```", "```py\nloop.run_forever()\n```", "```py\nloop.close()\n```", "```py\nloop = asyncio.get_event_loop()\n```", "```py\nend_loop = loop.time() + 60\nloop.call_soon(function_1, end_loop, loop)\n```", "```py\ndef task_A(end_time, loop):\n    print (\"task_A called\")\n    time.sleep(random.randint(0, 5))\n    if (loop.time() + 1.0) < end_time:\n        loop.call_later(1, task_B, end_time, loop)\n    else:\n        loop.stop()\n```", "```py\n if (loop.time() + 1.0) < end_time:\n        loop.call_later(1, task_B, end_time, loop)\n    else:\n        loop.stop()\n```", "```py\nloop.run_forever()\nloop.close()\n```", "```py\ntask_A called\ntask_B called \ntask_C called\ntask_A called\ntask_B called \ntask_C called\ntask_A called\ntask_B called \ntask_C called\ntask_A called\ntask_B called \ntask_C called\ntask_A called\ntask_B called \ntask_C called\n```", "```py\nimport asyncio \n\n@asyncio.coroutine\ndef coroutine_function(function_arguments):\n    ............\n    DO_SOMETHING\n    ............   \n```", "```py\nimport asyncio\nimport time\nfrom random import randint\n```", "```py\n@asyncio.coroutine\ndef start_state():\n    print('Start State called\\n')\n    input_value = randint(0, 1)\n    time.sleep(1)\n    if input_value == 0:\n        result = yield from state2(input_value)\n    else:\n        result = yield from state1(input_value)\n    print('Resume of the Transition:\\nStart State calling'+ result)\n```", "```py\n@asyncio.coroutine\ndef state1(transition_value):\n    output_value ='State 1 with transition value = %s\\n'% \\\n                                             transition_value\n    input_value = randint(0, 1)\n    time.sleep(1)\n    print('...evaluating...')\n    if input_value == 0:\n        result = yield from state3(input_value)\n    else:\n        result = yield from state2(input_value)\n    return output_value + 'State 1 calling %s' % result\n```", "```py\n@asyncio.coroutine\ndef state2(transition_value):\n    output_value = 'State 2 with transition value = %s\\n' %\\\n                                             transition_value\n    input_value = randint(0, 1)\n    time.sleep(1)\n    print('...evaluating...')\n    if input_value == 0:\n        result = yield from state1(input_value)\n    else:\n        result = yield from state3(input_value)\n    return output_value + 'State 2 calling %s' % result\n```", "```py\n@asyncio.coroutine\ndef state3(transition_value):\n    output_value = 'State 3 with transition value = %s\\n' %\\\n                                                 transition_value\n    input_value = randint(0, 1)\n    time.sleep(1)\n    print('...evaluating...')\n    if input_value == 0:\n        result = yield from state1(input_value)\n    else:\n        result = yield from end_state(input_value)\n    return output_value + 'State 3 calling %s' % result\n```", "```py\n@asyncio.coroutine\ndef end_state(transition_value):\n    output_value = 'End State with transition value = %s\\n'%\\\n                                                transition_value\n    print('...stop computation...')\n    return output_value\n```", "```py\nif __name__ == '__main__':\n    print('Finite State Machine simulation with Asyncio Coroutine')\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(start_state())\n```", "```py\n @asyncio.coroutine\n```", "```py\n@asyncio.coroutine\ndef StartState():\n    print (\"Start State called \\n\")\n    input_value = randint(0,1)\n    time.sleep(1)\n    if (input_value == 0):\n        result = yield from State2(input_value)\n    else :\n        result = yield from State1(input_value)\n```", "```py\ninput_value = randint(0,1)\n```", "```py\nif (input_value == 0):\n        result = yield from State2(input_value)\n    else :\n        result = yield from State1(input_value)\n```", "```py\nif __name__ == \"__main__\":\n    print(\"Finite State Machine simulation with Asyncio Coroutine\")\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(StartState())\n```", "```py\nFinite State Machine simulation with Asyncio Coroutine\nStart State called\n...evaluating...\n...evaluating...\n...evaluating...\n...evaluating...\n...stop computation...\nResume of the Transition : \nStart State calling State 1 with transition value = 1\nState 1 calling State 2 with transition value = 1\nState 2 calling State 1 with transition value = 0\nState 1 calling State 3 with transition value = 0\nState 3 calling End State with transition value = 1\n```", "```py\nimport asyncio\n\nasync def main():\n    print(await func())\n\nasync def func():\n    # Do time intensive stuff...\n    return \"Hello, world!\"\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```", "```py\nimport asyncio\n```", "```py\n@asyncio.coroutine\ndef factorial(number):\n    f = 1\n    for i in range(2, number + 1):\n        print(\"Asyncio.Task: Compute factorial(%s)\" % (i))\n        yield from asyncio.sleep(1)\n        f *= i\n    print(\"Asyncio.Task - factorial(%s) = %s\" % (number, f))\n```", "```py\n@asyncio.coroutine\ndef fibonacci(number):\n    a, b = 0, 1\n    for i in range(number):\n        print(\"Asyncio.Task: Compute fibonacci (%s)\" % (i))\n        yield from asyncio.sleep(1)\n        a, b = b, a + b\n    print(\"Asyncio.Task - fibonacci(%s) = %s\" % (number, a))\n```", "```py\n@asyncio.coroutine\ndef binomial_coefficient(n, k):\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) / i\n        print(\"Asyncio.Task: Compute binomial_coefficient (%s)\" % \n            (i))\n        yield from asyncio.sleep(1)\n    print(\"Asyncio.Task - binomial_coefficient(%s , %s) = %s\" % \n        (n,k,result))\n```", "```py\nif __name__ == '__main__':\n    task_list = [asyncio.Task(factorial(10)),\n                 asyncio.Task(fibonacci(10)),\n                 asyncio.Task(binomial_coefficient(20, 10))]\n```", "```py\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(asyncio.wait(task_list))\n    loop.close()\n```", "```py\n@asyncio.coroutine\ndef function (args):\n    do something\n```", "```py\nif __name__ == '__main__':\n    task_list = [asyncio.Task(factorial(10)),\n                 asyncio.Task(fibonacci(10)),\n                 asyncio.Task(binomial_coefficient(20, 10))]\n```", "```py\n    loop = asyncio.get_event_loop()\n```", "```py\n    loop.run_until_complete(asyncio.wait(task_list))\n    loop.close()\n```", "```py\nAsyncio.Task: Compute factorial(2)\nAsyncio.Task: Compute fibonacci(0)\nAsyncio.Task: Compute binomial_coefficient(1)\nAsyncio.Task: Compute factorial(3)\nAsyncio.Task: Compute fibonacci(1)\nAsyncio.Task: Compute binomial_coefficient(2)\nAsyncio.Task: Compute factorial(4)\nAsyncio.Task: Compute fibonacci(2)\nAsyncio.Task: Compute binomial_coefficient(3)\nAsyncio.Task: Compute factorial(5)\nAsyncio.Task: Compute fibonacci(3)\nAsyncio.Task: Compute binomial_coefficient(4)\nAsyncio.Task: Compute factorial(6)\nAsyncio.Task: Compute fibonacci(4)\nAsyncio.Task: Compute binomial_coefficient(5)\nAsyncio.Task: Compute factorial(7)\nAsyncio.Task: Compute fibonacci(5)\nAsyncio.Task: Compute binomial_coefficient(6)\nAsyncio.Task: Compute factorial(8)\nAsyncio.Task: Compute fibonacci(6)\nAsyncio.Task: Compute binomial_coefficient(7)\nAsyncio.Task: Compute factorial(9)\nAsyncio.Task: Compute fibonacci(7)\nAsyncio.Task: Compute binomial_coefficient(8)\nAsyncio.Task: Compute factorial(10)\nAsyncio.Task: Compute fibonacci(8)\nAsyncio.Task: Compute binomial_coefficient(9)\nAsyncio.Task - factorial(10) = 3628800\nAsyncio.Task: Compute fibonacci(9)\nAsyncio.Task: Compute binomial_coefficient(10)\nAsyncio.Task - fibonacci(10) = 55\nAsyncio.Task - binomial_coefficient(20, 10) = 184756.0\n```", "```py\nfuture = asyncio.Future\n```", "```py\nimport asyncio\nimport sys\n```", "```py\n@asyncio.coroutine\ndef first_coroutine(future, num):\n    count = 0\n    for i in range(1, num + 1):\n        count += i\n    yield from asyncio.sleep(1)\n    future.set_result('First coroutine (sum of N integers)\\\n                      result = %s' % count)\n```", "```py\n@asyncio.coroutine\ndef second_coroutine(future, num):\n    count = 1\n    for i in range(2, num + 1):\n        count *= i\n    yield from asyncio.sleep(2)\n    future.set_result('Second coroutine (factorial) result = %s' %\\ \n                      count)\n```", "```py\ndef got_result(future):\n    print(future.result())\n```", "```py\nif __name__ == \"__main__\":\n    num1 = int(sys.argv[1])\n    num2 = int(sys.argv[2])\n```", "```py\n    loop = asyncio.get_event_loop()\n```", "```py\n    future1 = asyncio.Future()\n    future2 = asyncio.Future()\n```", "```py\ntasks = [first_coroutine(future1, num1),\n        second_coroutine(future2, num2)]\n```", "```py\n    future1.add_done_callback(got_result)\n    future2.add_done_callback(got_result)\n```", "```py\n    loop.run_until_complete(asyncio.wait(tasks))\n    loop.close()\n```", "```py\nif __name__ == \"__main__\":\n        future1 = asyncio.Future()\n        future2 = asyncio.Future()\n```", "```py\ntasks = [first_coroutine(future1,num1), \n         second_coroutine(future2,num2)]\n```", "```py\nfuture1.add_done_callback(got_result)\nfuture2.add_done_callback(got_result)\n```", "```py\ndef got_result(future):\n    print(future.result())\n```", "```py\nyield from asyncio.sleep(sleep_time)\n```", "```py\n> python asyncio_and_futures.py 1 1\nFirst coroutine (sum of N integers) result = 1\nSecond coroutine (factorial) result = 1\n\n> python asyncio_and_futures.py 2 2\nFirst coroutine (sum of N integers) result = 2 Second coroutine (factorial) result = 2\n\n> python asyncio_and_futures.py 3 3\nFirst coroutine (sum of N integers) result = 6\nSecond coroutine (factorial) result = 6\n\n> python asyncio_and_futures.py 5 5\nFirst coroutine (sum of N integers) result = 15\nSecond coroutine (factorial) result = 120\n > python asyncio_and_futures.py 50 50\nFirst coroutine (sum of N integers) result = 1275\nSecond coroutine (factorial) result = 30414093201713378043612608166064768844377641568960512000000000000 \nFirst coroutine (sum of N integers) result = 1275 \n```", "```py\n> python asyncio_and_future.py 1 10\nsecond coroutine (factorial) result = 3628800\nfirst coroutine (sum of N integers) result = 1\n```"]