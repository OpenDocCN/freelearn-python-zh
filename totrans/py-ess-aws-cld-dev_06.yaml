- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying Python Applications on Elastic Beanstalk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to deploy Python applications on
    **Elastic Beanstalk**. Elastic Beanstalk is an AWS service that allows you to
    deploy web applications in the cloud. Basically, you don’t need to provision a
    server; Elastic Beanstalk provisions an infrastructure in the backend and deploys
    your web application. Another advantage of Elastic Beanstalk is being able to
    scale up your web applications when there are a large number of requests from
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Elastic Beanstalk?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Python web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a simple Python web application on Elastic Beanstalk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Elastic Beanstalk?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elastic Beanstalk is an AWS service that is used to deploy web applications
    in the cloud. It supports multiple web application frameworks such as Python,
    Java, .NET, PHP, Node.js, Ruby, and Go. Once you deploy your application, Elastic
    Beanstalk manages the infrastructure in order to deploy, run, scale, and monitor
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Features of Elastic Beanstalk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s take a look at the high-level features of Elastic Beanstalk:'
  prefs: []
  type: TYPE_NORMAL
- en: It supports monitoring and logging; hence, you can easily track how the application
    is behaving. For example, if an application goes down, you can check via Elastic
    Beanstalk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It manages updates for infrastructure. In some cases, your application should
    be updated with the latest improvements in Python or other libraries and Elastic
    Beanstalk manages the updates with you in control.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It manages scaling features up and scaling features down; hence, if your application
    has too many requests, it adds more resources, and your application can then meet
    the requests. On the other hand, if there is less demand, it reduces the resources
    and helps to reduce the cost.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports some financial data or protected health information standards; hence,
    you can use Elastic Beanstalk for financial applications as well as health information
    applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have taken a look at the basic features of Elastic Beanstalk, and we will
    now start to implement a sample web application with Python to deploy via Elastic
    Beanstalk.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Python web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to create a sample web application with Python. For that purpose,
    **Flask** will be used as a web application framework for Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Flask is a web application framework that is written with Python. It has the
    required libraries to start implementing web applications as a beginner. In the
    following code block, you can see a sample "**Hello, World!**" web application
    with Flask:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The code imports the Flask library and runs the application on localhost port
    `5000`. When you run it, you will see "**Hello World!**" in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also check the Flask framework at the following website: [https://flask.palletsprojects.com/en/2.2.x/](https://flask.palletsprojects.com/en/2.2.x/).'
  prefs: []
  type: TYPE_NORMAL
- en: As the next step, we are going to deploy a Python web application to Elastic
    Beanstalk.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Python web application on Elastic Beanstalk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to deploy a sample Python web application on
    Elastic Beanstalk:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `Elastic Beanstalk` in the AWS Management Console search box and click
    **Elastic Beanstalk**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.1_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – AWS Console
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the main page of Elastic Beanstalk:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_6.2_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Elastic Beanstalk
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Environments** on the left side in order to create a new Python web
    application, and then click the **Create a new** **environment** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.3_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Environment list
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next panel, we are going to select what type of environment we want.
    Since we would like to deploy a web application, select **Web** **server environment**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.4_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Selecting an environment
  prefs: []
  type: TYPE_NORMAL
- en: 'I have named the file `Python Web app`. You can name it whatever you want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.5_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Naming the application
  prefs: []
  type: TYPE_NORMAL
- en: After naming the application, scroll down and fill in the **Environment name**
    input field. Keep in mind that this can also be named by the AWS Console by default.
    You have the option to change it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.6_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Environment name field
  prefs: []
  type: TYPE_NORMAL
- en: 'When you scroll down further, there is another input field to fill out – `test-training`
    and check the availability by clicking the **Check** **availability** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.7_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Naming the domain
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you find the available domain name, scroll down, and locate the **Platform**
    panel. In this panel, we need to select the web application framework. Elastic
    Beanstalk supports different web environments such as Java, PHP, Node.js, Python,
    and so on. We will select the Python platform to deploy a Python web application.
    Depending on which Python platform you are working on, you can select it from
    the **Platform branch** field. In this example, I am selecting the **Python 3.8
    running on 64bit Amazon Linux 2** version. **Platform version** consists of some
    updates and patches according to the platform. You can proceed with the latest
    version; for example, if AWS finds a security patch, it creates a new version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.8_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Selecting the platform
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down and you will see the latest panel on the page. In this example,
    we will proceed with **Sample application** and click **Create environment**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.9_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Finalizing the platform
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click **Create environment**, you will see the logs. Elastic Beanstalk
    creates the platform and deploys sample applications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.10_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Logs of the platform
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait a few minutes so that the application is deployed. Once deployed, you
    will be presented with the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_6.11_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Application deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'It seems like the sample application has been deployed and is running properly.
    Click the domain link to see the running application. In the preceding screenshot,
    the domain link is [test-training.us-east-2.elasticbeanstalk.com](http://test-training.us-east-2.elasticbeanstalk.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_6.12_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Application
  prefs: []
  type: TYPE_NORMAL
- en: Congrats! You deployed the sample web application to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we deployed the sample application to Elastic Beanstalk. The
    sample web application is implemented by AWS. As the next step, we are going to
    implement a simple Python web application to be deployed by Elastic Beanstalk:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Elastic Beanstalk service in AWS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Environments** on the left side and see the list of environments. In
    the previous section, we created an environment and deployed the sample application.
    In this example, we will use the same Python web environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.13_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Environments
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Pythonwebapp-env-1** in the list as it supports Python web applications.
    It could be different in your environment, based on the naming conventions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.14_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Python All environments
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Upload and deploy** button in order to follow the deployment process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.15_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Python web environment
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Upload and deploy** window, click the **Choose** **file** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_6.16_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – Deploy environment
  prefs: []
  type: TYPE_NORMAL
- en: Once you click the **Choose file** button, your Python web application will
    be deployed to Elastic Beanstalk.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, you are going to select the local
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_6.17_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – Local folder
  prefs: []
  type: TYPE_NORMAL
- en: You can deploy whichever Python web framework you prefer, such as Flask, Django,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to deploy a custom Python web application to
    Elastic Beanstalk.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the AWS Elastic Beanstalk service and how
    to create a Python web environment in the cloud. Elastic Beanstalk is useful when
    you deploy web applications in the cloud. It comes with scalability, logging,
    and monitoring advantages. In the following chapter, we will take a look at how
    to monitor our applications via CloudWatch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Useful AWS Services to Implement Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will deep-dive into other AWS services for Python programming,
    such as monitoring, creating an API, database operations, and NoSQL with DynamoDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19195_07.xhtml#_idTextAnchor011), *Monitoring Applications via
    CloudWatch*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19195_08.xhtml#_idTextAnchor012), *Database Operations with
    RDS*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19195_09.xhtml#_idTextAnchor013), *Creating an API in AWS*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19195_10.xhtml#_idTextAnchor014), *Using Python with NoSQL
    (DynamoDB)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19195_11.xhtml#_idTextAnchor015), *Using Python with Glue*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19195_12.xhtml#_idTextAnchor016), *Reference Project on AWS*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
