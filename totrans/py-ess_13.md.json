["```py\nfrom functools import lru_cache\nfrom glob import glob\nimport os\n\n@lru_cache(100)\ndef find_source(directory):\n    return glob(os.path.join(directory,\"*.py\"))\n```", "```py\n@debug_log\ndef some_function(ksloc):\n    return 2.4*ksloc**1.05\n@debug_log\ndef another_function(ksloc, a=3.6, b=1.20):\n    return a*ksloc**b\n```", "```py\n>>> def some_function(ksloc):\n...    return 2.4*ksloc**1.05\n>>>  some_function = debug_log(debug_log)\n```", "```py\nimport logging\nfrom functools import wraps\ndef debug_log(func):\n    log= logging.getLogger(func.__name__)\n    @wraps(func)\n    def decorated(*args, **kw):\n        log.debug(\">>> call(*{0}, **{1})\".format(args, kw))\n        try:\n            result= func(*args, **kw)\n            log.debug(\"<<< return {}\".format(result))\n            return result\n        except Exception as ex:\n            log.exception( \"*** {}\".format(ex) )\n            raise\n    return decorated\n```", "```py\n>>> round(some_function(25),3)\n70.477\n```", "```py\nDEBUG:some_function:>>> call(*(25,), **{})\nDEBUG:some_function:<<< return 70.47713658528114\n```", "```py\nimport sys\nlogging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n```", "```py\nimport logging\nclass Logged(type):\n    def __new__(cls, name, bases, namespace, **kwds):\n        result = type.__new__(cls, name, bases, dict(namespace))\n        result.logger= logging.getLogger(name)\n        return result\n```", "```py\nclass Machine(metaclass=Logged):\n    def __init__(self, machine_id, base, cost_each):\n        self.logger.info(\"creating {0} at {1}+{2}\".format(\n            machine_id, base, cost_each))\n        self.machine_id= machine_id\n        self.base= base\n        self.cost_each= cost_each\n    def application(self, units):\n        total= self.base + self.cost_each*units\n        self.logger.debug(\"Applied {units} ==> {total}\".format(\n            total=total, units=units, **self.__dict__))\n        return total\n```"]