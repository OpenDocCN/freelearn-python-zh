- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Building the Single-Page App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建单页应用
- en: In the previous chapter, we extended a basic React app with the tooling and
    setup that we require to build user interfaces. This means that in this chapter,
    we can focus on the functionality that will make up our single-page app. Specifically,
    we’ll add functionality that allows users to authenticate, manage their passwords,
    and manage their to-dos.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过工具和设置扩展了一个基本的React应用，这些工具和设置是我们构建用户界面所需的。这意味着在本章中，我们可以专注于将构成我们的单页应用的功能。具体来说，我们将添加允许用户进行身份验证、管理他们的密码和管理他们的待办事项的功能。
- en: The user interface and functionality to manage user authentication and passwords
    is useful to any app and could be used directly in yours. While the to-do user
    interface is unlikely to match what you require in your own apps, the techniques
    will be applicable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面和功能，用于管理用户身份验证和密码，对任何应用都很有用，可以直接用于您的应用。虽然待办事项用户界面可能不符合您自己应用的需求，但技术将是可应用的。
- en: 'So, in this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将涵盖以下主题：
- en: Adding navigation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加导航
- en: Adding user authentication pages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加用户身份验证页面
- en: Adding password management pages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加密码管理页面
- en: Adding to-do pages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加待办事项页面
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following additional folders are required in this chapter and should be
    created:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要以下额外的文件夹，并应创建：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To follow the development in this chapter using the companion repository, [https://github.com/pgjones/tozo](https://github.com/pgjones/tozo),
    see the commits between the tags `r1-ch5-start` and `r1-ch5-end`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用配套仓库 [https://github.com/pgjones/tozo](https://github.com/pgjones/tozo) 跟进本章的开发，请查看标签
    `r1-ch5-start` 和 `r1-ch5-end` 之间的提交。
- en: Adding navigation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加导航
- en: The app we are building needs to allow logged-in users to navigate to the full
    to-do list, the page allowing them to change their password, and allow them to
    log out. For logged-out users, they need to navigate between login, register,
    and reset password pages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在构建的应用需要允许已登录用户导航到完整的待办事项列表、允许他们更改密码的页面，并允许他们注销。对于未登录用户，他们需要在登录、注册和重置密码页面之间进行导航。
- en: Focusing on the needs of logged-in users, the Material Design system includes
    an app bar that exists at the top of the page. This will allow for links to the
    full to-do list (home page) and an account menu to change their password and log
    out.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 专注于已登录用户的需求，Material Design 系统包括一个位于页面顶部的应用栏。这将允许链接到完整的待办事项列表（主页）以及一个账户菜单，用于更改他们的密码和注销。
- en: A more complex navigation
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的导航
- en: Your app probably has more pages than the one we are building in this book.
    This means the navigation system needs to be able to link to more pages. While
    the account menu can be extended with more links relating to the user, it is not
    a good location for other links. Instead, a drawer is the best solution. Drawers
    slide in from the left and can have as many links as required.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用可能比本书中构建的页面更多。这意味着导航系统需要能够链接到更多页面。虽然账户菜单可以通过与用户相关的更多链接进行扩展，但这并不是放置其他链接的好位置。相反，抽屉是最好的解决方案。抽屉可以从左侧滑入，并且可以包含所需数量的链接。
- en: 'The account menu needs to allow users to log out, which means it needs to query
    the backend via a mutation and then update the app’s local authentication context
    (state). To do so, the following code should be added to *frontend/src/components/AccountMenu.tsx*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 账户菜单需要允许用户注销，这意味着它需要通过突变查询后端，然后更新应用的本地身份验证上下文（状态）。为此，应在 *frontend/src/components/AccountMenu.tsx*
    中添加以下代码：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code provides a `logout` function, which, when called, triggers the mutation
    thereby sending a `DELETE /sessions/` request. If this request succeeds, the user
    is logged out, the local authentication context is set to `false`, and the data
    stored by `React-Query` is cleared. If the request fails, nothing will change,
    prompting the user to try again.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码提供了一个 `logout` 函数，当调用时，会触发突变，从而发送 `DELETE /sessions/` 请求。如果此请求成功，用户将被注销，本地身份验证上下文设置为
    `false`，并且由 `React-Query` 存储的数据将被清除。如果请求失败，则不会发生任何变化，提示用户再次尝试。
- en: 'With this functionality in place, we now need to add the styled menu. We can
    do this by adding the following to the existing code in *frontend/src/components/AccountMenu.tsx*:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在此功能到位后，我们现在需要添加样式化菜单。我们可以通过向现有的 *frontend/src/components/AccountMenu.tsx* 代码中添加以下内容来实现：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is standard MUI code for a menu that opens when the `IconButton` component
    is clicked.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是标准MUI代码，用于在点击 `IconButton` 组件时打开的菜单。
- en: 'We can now add the app bar itself, including a link to the home page, and the
    account menu if the user is logged in (authenticated) by adding the following
    to *frontend/src/components/TopBar.tsx*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以添加应用栏本身，包括指向主页的链接，如果用户已登录（认证），则添加账户菜单，通过在 *frontend/src/components/TopBar.tsx*
    中添加以下内容：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The additional padding styling (highlighted) that utilizes the `safe-area-inset`
    is required for the app bar to look correct on devices with a notch, such as the
    iPhone X.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在具有刘海的设备（如iPhone X）上正确显示应用栏，需要使用 `safe-area-inset` 的额外填充样式（已高亮）。
- en: 'The `TopBar` should be rendered in the `Router` within the `BrowserRouter,`
    by adding the following to *frontend/src/Router.tsx*:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`TopBar` 应在 `BrowserRouter` 中的 `Router` 内渲染，通过在 *frontend/src/Router.tsx* 中添加以下内容：'
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The highlighted lines should be added to the existing code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 应将高亮行添加到现有代码中。
- en: 'Once rendered, the app bar should look like *Figure 5.1*:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染后，应用栏应看起来像 *图5.1*：
- en: '![Figure 5.1: The app bar as displayed in a mobile browser ](img/B18727_05_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1：在移动浏览器中显示的应用栏](img/B18727_05_01.jpg)'
- en: 'Figure 5.1: The app bar as displayed in a mobile browser'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：在移动浏览器中显示的应用栏
- en: With the navigation complete, we can start adding the pages; we will begin by
    allowing users to register and log in.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 导航完成后，我们可以开始添加页面；我们将首先允许用户注册和登录。
- en: Adding user authentication pages
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加用户认证页面
- en: On the first visit to our app, users will need to register, confirm their email,
    and log in. Whereas, on subsequent visits, they’ll just need to log in. Each of
    these actions will need to be a page in our app.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在首次访问我们的应用时，用户需要注册、确认他们的电子邮件并登录。而后续访问时，他们只需登录即可。这些操作中的每一个都需要在我们的应用中成为一个页面。
- en: Registration
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册
- en: The first thing a new user needs to do when visiting our app is to register,
    so we’ll start by adding a registration page. To register, the user will need
    to enter their email and a password. Once the user has supplied these, we’ll use
    the members API to create the user and then redirect the user to the login page
    or, if the API call fails, display the relevant error.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当新用户访问我们的应用时，他们需要做的第一件事是注册，所以我们将首先添加一个注册页面。为了注册，用户需要输入他们的电子邮件和密码。一旦用户提供了这些信息，我们将使用成员API创建用户，然后重定向用户到登录页面，或者如果API调用失败，显示相关错误。
- en: 'We’ll start by adding this logic as a custom `useRegister` hook to *frontend/src/pages/Register.tsx*:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先将此逻辑作为一个自定义的 `useRegister` 钩子添加到 *frontend/src/pages/Register.tsx*：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The function returned by the `useRegister` hook is designed to be used as a
    `Formik` `onSubmit` prop. This allows the function to add a specific error to
    the password field if the response from the backend indicates the password is
    too weak (as highlighted). Otherwise, if the registration succeeds, the app navigates
    to the login page.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`useRegister` 钩子返回的函数设计为用作 `Formik` 的 `onSubmit` 属性。这允许函数在后端响应表明密码太弱时（如高亮所示）向密码字段添加特定错误。否则，如果注册成功，应用将导航到登录页面。'
- en: Automatically logging in on registration
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册时自动登录
- en: The flow we’ve implemented directs the user to the login page where they log
    in after registering, rather than automatically logging them in. While this isn’t
    the best user experience, it is done to mitigate account enumeration, and hence
    is a safe default. However, you may decide for your app that the user experience
    is more important. If so, the backend route will need to log the user in, and
    this page should direct the user to the home page after registering.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已实现的流程将用户引导到登录页面，他们在注册后登录，而不是自动登录。虽然这不是最佳的用户体验，但这是为了减轻账户枚举，因此是一个安全的默认设置。然而，您可能认为对于您的应用来说用户体验更重要。如果是这样，后端路由需要登录用户，并且此页面应在注册后引导用户到主页。
- en: We now need to provide input fields for the user to enter their email and a
    strong password, which we can ensure by showing the password strength. The fields
    will be validated to inform the user of any mistakes and use the correct autocomplete
    values. The autocomplete values should encourage the browser to do most of the
    work for the user (e.g., by filling in their email address).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要提供用户输入他们的电子邮件和强密码的输入字段，我们可以通过显示密码强度来确保这一点。字段将被验证，以通知用户任何错误并使用正确的自动完成值。自动完成值应鼓励浏览器为用户做大部分工作（例如，填写他们的电子邮件地址）。
- en: 'The registration page is therefore extended by adding the following code to
    the existing code in *frontend/src/pages/Register.tsx*:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，注册页面通过在 *frontend/src/pages/Register.tsx* 中添加以下代码到现有代码中而扩展：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As users often forget whether they have already registered, we’ve made it easier
    to navigate to the login and reset password pages via the `FormActions` links.
    In addition, as the user navigates between these pages, any value in the email
    field is persisted. This saves the user from having to type it in again, hence
    leading to a better user experience. This is done via the `location.state`, with
    the `useLocation` hook getting any current value, and the `state` part of the
    `links` prop of the `FormActions` component setting it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户经常忘记他们是否已经注册，我们已通过 `FormActions` 链接使导航到登录和重置密码页面变得更加容易。此外，当用户在这些页面之间导航时，电子邮件字段中的任何值都会被保留。这避免了用户需要再次输入它，从而提高了用户体验。这是通过
    `location.state` 实现的，`useLocation` 钩子获取任何当前值，而 `FormActions` 组件的 `links` 属性的 `state`
    部分设置它。
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过在 *frontend/src/Router.tsx* 文件中添加以下内容来添加页面到路由中：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The highlighted lines should be added to the existing code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 应该将高亮行添加到现有代码中。
- en: 'The completed **Register** page should look like *Figure 5.2*:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的 **注册** 页面应类似于 *图 5.2*：
- en: '![Figure 5.2: The registration page  ](img/B18727_05_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2：注册页面](img/B18727_05_02.jpg)'
- en: 'Figure 5.2: The registration page'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2：注册页面
- en: With users now able to register, they’ll next need to confirm their email.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户能够注册后，他们接下来需要确认他们的电子邮件。
- en: Email confirmation
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子邮件确认
- en: On registration, users are sent an email with a link back to our app. Within
    the link is a token that identifies the user. By following the link, the user
    passes the token to us and proves that they are in control of the email address.
    Hence, we need a page that, when visited, sends the token to the backend and displays
    the result.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册时，用户会收到一封包含返回我们应用的链接的电子邮件。链接中有一个标识用户的令牌。通过跟随链接，用户将令牌传递给我们，并证明他们控制着电子邮件地址。因此，我们需要一个页面，当访问时，将令牌发送到后端并显示结果。
- en: 'The link has the form `/confirm-email/:token/` where `:token` is the actual
    user’s token (e.g., `/confirm-email/abcd/`). Therefore, we can extract the token
    using a route parameter by adding the following to *frontend/src/Router.tsx*:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 链接的形式为 `/confirm-email/:token/`，其中 `:token` 是实际用户的令牌（例如，`/confirm-email/abcd/`）。因此，我们可以通过添加以下内容到
    *frontend/src/Router.tsx* 文件中，使用路由参数提取令牌：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The highlighted lines should be added to the existing code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 应该将高亮行添加到现有代码中。
- en: 'We can now build the `ConfirmEmail` page and utilize a `useParam` hook to extract
    the token from the path. To do so, the following code should be added to *frontend/src/pages/ConfirmEmail.tsx*:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以构建 `ConfirmEmail` 页面并利用 `useParam` 钩子从路径中提取令牌。为此，需要在 *frontend/src/pages/ConfirmEmail.tsx*
    文件中添加以下代码：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The highlighted lines show the token parameter being extracted from the path.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 高亮行显示了从路径中提取的令牌参数。
- en: 'To ensure that the user knows that the app is working, a `LinearProgress` bar
    is shown while the frontend waits for the backend to respond; we can see this
    in *Figure 5.3*:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保用户知道应用正在运行，当前端等待后端响应时，会显示 `LinearProgress` 进度条；我们可以在 *图 5.3* 中看到这一点：
- en: '![Figure 5.3: The Confirm Email page showing a LinearProgress bar to indicate
    processing is in progress ](img/B18727_05_03.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3：显示正在进行的处理的 LinearProgress 进度条的确认电子邮件页面](img/B18727_05_03.jpg)'
- en: 'Figure 5.3: The Confirm Email page showing a LinearProgress bar to indicate
    processing is in progress'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3：显示正在进行的处理的 LinearProgress 进度条的确认电子邮件页面
- en: Finally, after registering and confirming their email, the user will need to
    log in.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在注册并确认他们的电子邮件后，用户将需要登录。
- en: Logging in
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录
- en: Users will need to log in to see and interact with their to-dos. To do so, the
    user will need to enter their email and a password. Once the user has supplied
    these, we’ll use the session API to create a session. If the login is successful,
    the user should then be redirected to the home page or to the page given by the
    `from` state if it is present. The `from` state redirects the user to the page
    they attempted to view without being logged in.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 用户需要登录才能查看和交互他们的待办事项。为此，用户需要输入他们的电子邮件和密码。一旦用户提供了这些信息，我们将使用会话 API 创建会话。如果登录成功，用户应随后被重定向到主页或
    `from` 状态指定的页面（如果存在）。`from` 状态将用户重定向到他们尝试登录但未登录时查看的页面。
- en: 'To do this, we’ll start by adding the following logic to *frontend/src/pages/Login.tsx*:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个任务，我们首先需要在 *frontend/src/pages/Login.tsx* 文件中添加以下逻辑：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With the login logic defined, we can now add the UI elements. This requires
    a form containing an email and password input, which should be added to the existing
    code in *frontend/src/pages/Login.tsx*:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在登录逻辑定义后，我们现在可以添加UI元素。这需要一个包含电子邮件和密码输入的表单，应将其添加到 *frontend/src/pages/Login.tsx*
    中的现有代码中：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The highlighted code shows that the form submission is disabled until the form
    is dirty. This helps the user as it ensures that they can’t submit the form until
    they have made changes to it. This is a pattern we’ll use on all of the forms.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 突出的代码显示，表单提交在表单变脏之前是禁用的。这有助于用户，因为它确保他们只能在更改表单后提交表单。这是我们将在所有表单上使用的模式。
- en: 'We can now add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过在 *frontend/src/Router.tsx* 中添加以下内容来将页面添加到路由中：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The highlighted lines should be added to the existing code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 应将突出显示的行添加到现有代码中。
- en: 'The completed **Login** page should look like *Figure 5.4*:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的 **登录** 页面应类似于 *图5.4*：
- en: '![Figure 5.4: The Login page  ](img/B18727_05_04.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图5.4：登录页面](img/B18727_05_04.jpg)'
- en: 'Figure 5.4: The Login page'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4：登录页面
- en: Users can now register and then log in to our app. They can’t manage their password
    though, which we’ll focus on next.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以注册并登录到我们的应用。尽管如此，他们无法管理他们的密码，这是我们接下来要关注的。
- en: Adding password management pages
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加密码管理页面
- en: We need to allow users to manage their passwords. This is quite involved as
    users often forget their password and hence a secure mechanism to reset the password
    is also required.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要允许用户管理他们的密码。这相当复杂，因为用户经常忘记他们的密码，因此还需要一个安全的机制来重置密码。
- en: Changing a password
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改密码
- en: 'For the user to change their password, they have to supply their existing password
    and a strong replacement password. Therefore, the frontend needs to send both
    to the backend and display relevant errors if the current password is incorrect
    or the new one is too weak. This logic is contained in the following code, which
    should be added to *frontend/src/pages/ChangePassword.tsx*:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让用户更改他们的密码，他们必须提供现有的密码和一个强大的替代密码。因此，前端需要将两者都发送到后端，并在当前密码不正确或新密码太弱时显示相关错误。此逻辑包含在以下代码中，应添加到
    *frontend/src/pages/ChangePassword.tsx*：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With the logic defined, we can now add the UI elements. This requires a form
    containing a plain password field and password strength field as shown here, which
    should be added to the existing code in *frontend/src/pages/ChangePassword.tsx*:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑定义后，我们现在可以添加UI元素。这需要一个包含普通密码字段和密码强度字段的表单，如图所示，应将其添加到 *frontend/src/pages/ChangePassword.tsx*
    中的现有代码中：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过在 *frontend/src/Router.tsx* 中添加以下内容来将页面添加到路由中：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the code block, `...` represents code that has been omitted for brevity.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块中，`...` 代表为了简洁而省略的代码。
- en: 'The completed **Change Password** page should look like *Figure 5.5*:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的 **修改密码** 页面应类似于 *图5.5*：
- en: '![Figure 5.5: The Change Password page  ](img/B18727_05_05.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图5.5：修改密码页面](img/B18727_05_05.jpg)'
- en: 'Figure 5.5: The Change Password page'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5：修改密码页面
- en: Users can now change their password while logged in. Next, we will allow users
    to request a password reset link when they have forgotten it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以在登录状态下更改他们的密码。接下来，我们将允许用户在忘记密码时请求密码重置链接。
- en: Forgotten passwords
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 忘记密码
- en: When a user forgets their password, they’ll need to reset it by requesting a
    reset link. To do so, the user needs to enter their email and then we’ll use the
    members API to send them a password reset email or, if that fails, display a generic
    error.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户忘记他们的密码时，他们需要通过请求重置链接来重置密码。为此，用户需要输入他们的电子邮件，然后我们将使用成员API向他们发送密码重置电子邮件，如果失败，则显示通用错误。
- en: 'The following code to do this should be placed in *frontend/src/pages/ForgottenPassword.tsx*:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此操作的以下代码应放置在 *frontend/src/pages/ForgottenPassword.tsx*：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With the logic defined, we can now add the UI elements. This requires a form
    containing an email field as shown here, which should be added to the existing
    code in *frontend/src/pages/ForgottenPassword.tsx*:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑定义后，我们现在可以添加UI元素。这需要一个包含电子邮件字段的表单，如图所示，应将其添加到 *frontend/src/pages/ForgottenPassword.tsx*
    中的现有代码中：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过在 *frontend/src/Router.tsx* 中添加以下内容来将页面添加到路由中：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the code block, `...` represents code that has been omitted for brevity.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块中，`...` 代表为了简洁而省略的代码。
- en: 'The completed **Forgotten password** page should look like *Figure 5.6*:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的 **忘记密码** 页面应类似于 *图 5.6*：
- en: '![Figure 5.6: The Forgotten password page  ](img/B18727_05_06.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6：忘记密码页面](img/B18727_05_06.jpg)'
- en: 'Figure 5.6: The Forgotten password page'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6：忘记密码页面
- en: Next, we need to add a page for the user to visit to actually reset their password.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加一个页面，让用户访问以实际重置他们的密码。
- en: Resetting a password
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重置密码
- en: 'The email sent to the user via the forgotten password page will contain a link
    to the reset password page. This link will contain a token that identifies the
    user, in the same way as the email confirmation process described earlier. This
    page will need to allow the user to enter a new strong password and send it with
    the link’s token to the backend. The logic to do this is shown in the following
    code, which should be placed in *frontend/src/pages/ResetPassword.tsx*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 发送给用户通过忘记密码页面的电子邮件将包含一个链接到重置密码页面。此链接将包含一个标识用户的令牌，这与前面描述的电子邮件确认过程相同。此页面需要允许用户输入一个新的强密码，并通过链接的令牌将其发送到后端。执行此操作的逻辑如下所示，应将其放置在
    *frontend/src/pages/ResetPassword.tsx* 中：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With the logic defined, we can now add the UI elements. This requires a form
    containing a password field that shows the password''s strength. We can do this
    by adding the following code to the existing code in *frontend/src/pages/ResetPassword.tsx*:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑定义完毕后，我们现在可以添加 UI 元素。这需要一个包含显示密码强度字段的表单。我们可以通过向 *frontend/src/pages/ResetPassword.tsx*
    中的现有代码添加以下代码来实现：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过向 *frontend/src/Router.tsx* 添加以下内容来添加页面到路由中：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the code block, `...` represents code that has been omitted for brevity.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块中，`...` 代表为了简洁而省略的代码。
- en: 'The completed **Reset password** page should look like *Figure 5.7*:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的 **重置密码** 页面应类似于 *图 5.7*：
- en: '![Figure 5.7: The Reset password page  ](img/B18727_05_07.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7：重置密码页面](img/B18727_05_07.jpg)'
- en: 'Figure 5.7: The Reset password page'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7：重置密码页面
- en: Users can now manage their passwords, which means we can focus on pages to manage
    their to-dos.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以管理他们的密码，这意味着我们可以专注于管理他们的待办事项的页面。
- en: Adding to-do pages
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加待办事项页面
- en: Users will need to manage their to-dos via the app, including creating, editing,
    and viewing their to-dos. These equate to different pages, which we will add.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将需要通过应用程序管理他们的待办事项，包括创建、编辑和查看他们的待办事项。这些对应于不同的页面，我们将添加。
- en: 'First, let’s create the specific `React-Query` queries we will need to fetch
    to-dos from the backend. We can do this by adding the following code to *frontend/src/queries.ts*:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建我们将需要从后端获取待办事项的特定 `React-Query` 查询。我们可以通过向 *frontend/src/queries.ts*
    添加以下代码来实现：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The change to the `staleTime` option (highlighted) ensures that `react-query`
    doesn’t continually refetch the to-do data, but rather considers it valid for
    5 minutes. This improves the user experience by reducing their internet data usage.
    In addition, the `useTodoQuery` will helpfully use the cached to-do data as the
    `initialData` if it is available, thereby saving a request to the backend and
    improving the user’s experience.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `staleTime` 选项（突出显示）的更改确保 `react-query` 不会不断重新获取待办事项数据，而是将其视为有效 5 分钟。这通过减少用户的互联网数据使用来提高用户体验。此外，如果可用，`useTodoQuery`
    将有助于使用缓存的待办事项数据作为 `initialData`，从而节省对后端的请求并提高用户体验。
- en: Which user’s to-dos?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 哪个用户的待办事项？
- en: It may not be clear that the `useTodosQuery` defined previously will only return
    the currently authenticated user’s to-dos. This is because we’ve set up the backend
    to only return to-dos belonging to the currently authenticated user. It is vital
    that the authentication decisions are made in the backend as the user is able
    to alter the frontend code and hence potentially bypass checks.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 之前定义的 `useTodosQuery` 可能不清楚只会返回当前认证用户的待办事项。这是因为我们已经设置了后端只返回属于当前认证用户的待办事项。在用户能够更改前端代码并可能绕过检查的情况下，在后台做出认证决策至关重要。
- en: 'Next, we need to add the mutations to update the to-do data in the backend
    by adding the following to *frontend/src/queries.ts*:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过向 *frontend/src/queries.ts* 添加以下内容来添加更新后端待办事项数据的突变：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: All three of these mutations will invalidate the `[“todos”]` query data thereby
    requiring the to-do queries defined previously to fetch the new data, rather than
    return the outdated data.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个突变都将使 `[“todos”]` 查询数据无效，因此需要之前定义的待办事项查询来获取新数据，而不是返回过时的数据。
- en: With these queries available, we can now create the actual visual elements (i.e.,
    pages for the user to interact with).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些查询可用的情况下，我们现在可以创建实际的视觉元素（即用户可以与之交互的页面）。
- en: Showing to-dos
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展示待办事项
- en: The first page we need is one to show all the user’s to-dos, which is effectively
    the user’s home page. Alongside showing the to-dos, it needs to provide actions
    to create a to-do and edit and delete any existing ones.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的第一页是展示所有用户待办事项的页面，这实际上是用户的首页。除了展示待办事项外，它还需要提供创建待办事项以及编辑和删除现有待办事项的操作。
- en: 'The actions to edit or delete a to-do can be linked to the to-do directly by
    either clicking on it or a delete button associated with it. However, creating
    a to-do is a primary action for the page and hence is best suited to a floating
    action button. Therefore, the to-dos page should look like *Figure 5.8*:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑或删除待办事项的操作可以通过点击待办事项或与其关联的删除按钮直接链接到待办事项。然而，创建待办事项是页面的主要操作，因此最适合使用浮动操作按钮。因此，待办事项页面应类似于
    *图5.8*：
- en: '![Figure 5.8: The home page showing to-dos, along with the floating action
    button ](img/B18727_05_08.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图5.8：显示待办事项的首页，以及浮动操作按钮](img/B18727_05_08.jpg)'
- en: 'Figure 5.8: The home page showing to-dos, along with the floating action button'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8：显示待办事项的首页，以及浮动操作按钮
- en: 'First, let’s create a component that shows an individual to-do by adding the
    following to *frontend/src/components/Todo.tsx*:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过在 *frontend/src/components/Todo.tsx* 中添加以下内容来创建一个显示单个待办事项的组件：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This `Todo` component will render skeletons if the `todo` prop is undefined.
    We can use this to improve the user experience as the to-dos are fetched from
    the backend.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `todo` 属性未定义时，此 `Todo` 组件将渲染骨架。我们可以利用这一点来改善用户体验，因为待办事项是从后端获取的。
- en: Skeleton loading
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 骨架加载
- en: Fetching data from the backend will take a noticeable amount of time, during
    which the user will wonder what the app is doing. It is therefore best to show
    the user that the app is working (loading the data). We’ll do this by using skeletons,
    which are gray animated blocks arranged with the same layout as the completed
    page. The gray arrangement looks like a skeleton, which gives them their name.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 从后端获取数据将花费一定的时间，在这段时间内，用户会想知道应用在做什么。因此，最好向用户展示应用正在工作（加载数据）。我们将通过使用与完成页面布局相同的灰色动画块（即骨架）来实现这一点。灰色的布局看起来像骨架，因此得名。
- en: 'The full home page, which shows all the to-dos the user has, is then finished
    by adding the following to *frontend/src/pages/Todos.tsx*:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 *frontend/src/pages/Todos.tsx* 中添加以下内容，完成显示用户所有待办事项的完整首页：
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过在 *frontend/src/Router.tsx* 中添加以下内容来将页面添加到路由中：
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the code block, `...` represents code that has been omitted for brevity.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块中，`...` 代表为了简洁而省略的代码。
- en: Now that we can display the to-dos, we need to be able to create and edit them.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够显示待办事项，我们需要能够创建和编辑它们。
- en: Creating to-dos
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建待办事项
- en: 'We will need to provide pages for users to create new to-dos and edit any existing
    ones. Both these pages will require a form to enter and edit the to-do data. Rather
    than repeat this form code for each page, we’ll create a `TodoForm` component,
    starting by defining the form validation by adding the following to *frontend/src/components/TodoForm.tsx*:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要为用户提供创建新待办事项和编辑现有待办事项的页面。这两个页面都需要一个表单来输入和编辑待办事项数据。为了避免在每个页面上重复表单代码，我们将创建一个
    `TodoForm` 组件，首先通过在 *frontend/src/components/TodoForm.tsx* 中添加以下内容来定义表单验证：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With the validation schema and form structure defined, we can add the component
    itself. This component needs only to render the relevant fields within a Formik
    form. The following code should be added to *frontend/src/components/TodoForm.tsx*:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了验证模式和表单结构后，我们可以添加组件本身。该组件只需要在 Formik 表单中渲染相关字段。以下代码应添加到 *frontend/src/components/TodoForm.tsx*：
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can then use the `TodoForm` in a page to create a to-do task, by adding
    the following to *frontend/src/pages/CreateTodo.tsx*:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在页面中使用 `TodoForm` 来创建待办任务，通过在 *frontend/src/pages/CreateTodo.tsx* 中添加以下内容：
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过在 *frontend/src/Router.tsx* 中添加以下内容来将页面添加到路由中：
- en: '[PRE30]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the code block, `...` represents code that has been omitted for brevity.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块中，`...` 代表为了简洁而省略的代码。
- en: 'The completed Create a Todo page should look like *Figure 5.9*:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的创建待办事项页面应类似于 *图5.9*：
- en: '![Figure 5.9: The Create a Todo page showing the to-do form  ](img/B18727_05_09.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图5.9：创建待办事项页面显示待办事项表单](img/B18727_05_09.jpg)'
- en: 'Figure 5.9: The Create a Todo page showing the to-do form'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9：创建待办事项页面显示待办事项表单
- en: Users will want to be able to edit their to-dos after creating them, which we’ll
    add next.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在创建待办事项后希望能够编辑它们，这是我们接下来要添加的。
- en: Editing to-dos
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑待办事项
- en: 'Finally, for the to-do pages, we need to allow users to edit their to-dos;
    you can do this via the following code, which should be added to *frontend/src/pages/EditTodo.tsx*:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于待办事项页面，我们需要允许用户编辑他们的待办事项；您可以通过以下代码来实现，该代码应添加到 *frontend/src/pages/EditTodo.tsx*：
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过在 *frontend/src/Router.tsx* 中添加以下内容来添加页面到路由：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the code block, `...` represents code that has been omitted for brevity.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块中，`...` 表示为了简洁而省略的代码。
- en: 'The completed Edit todo page should look like *Figure 5.10*:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的编辑待办事项页面应类似于 *图5.10*：
- en: '![Figure 5.10: The Edit todo page  ](img/B18727_05_10.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图5.10：编辑待办事项页面](img/B18727_05_10.jpg)'
- en: 'Figure 5.10: The Edit todo page'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10：编辑待办事项页面
- en: This completes the frontend functionality we need for our to-do app.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们待办应用所需的前端功能。
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we’ve created a user interface that allows users to authenticate,
    manage their passwords, and manage their to-dos. This completes the development
    version of the app, which we can now use locally to manage to-dos.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个用户界面，允许用户进行身份验证、管理他们的密码以及管理他们的待办事项。这完成了应用的开发版本，我们现在可以在本地使用它来管理待办事项。
- en: The user authentication and password management user interfaces are useful to
    any app and could be used directly in your apps, and the to-do user interface
    could be adapted or used as a reference for other functionality.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 用户身份验证和密码管理用户界面对任何应用都很有用，可以直接用于您的应用中，而待办事项用户界面可以进行调整或作为其他功能的参考。
- en: In the next chapter, we’ll deploy this app to production, allowing users to
    access and use it.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把这个应用部署到生产环境，使用户能够访问和使用它。
- en: Further reading
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: To further enhance your app, I recommend you read more about good UX practices,
    for example, via [https://builtformars.com](https://builtformars.com). Also, to
    improve your frontend styling skills, I’d recommend [https://css-tricks.com](https://css-tricks.com).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步增强您的应用，我建议您阅读更多关于良好UX实践的内容，例如，通过 [https://builtformars.com](https://builtformars.com)。此外，为了提高您的前端样式技能，我建议
    [https://css-tricks.com](https://css-tricks.com)。
- en: Part 3 Releasing a Production-Ready App
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3部分 发布一个生产就绪的应用
- en: Building a working app is only the first step; it needs to be deployed to a
    public domain name that runs on AWS, made secure, and then packaged for the mobile
    app stores. We’ll do all of this by incorporating as many industry best practices
    as possible.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个可工作的应用只是第一步；它需要部署到运行在AWS上的公共域名，确保安全，然后打包到移动应用商店。我们将通过尽可能多地融入行业最佳实践来完成所有这些工作。
- en: 'This part consists of the following chapters:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 6*](B18727_06.xhtml#_idTextAnchor159), *Deploying and Monitoring
    Your Application*'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B18727_06.xhtml#_idTextAnchor159)，*部署和监控您的应用*'
- en: '[*Chapter 7*](B18727_07.xhtml#_idTextAnchor180), *Securing and Packaging the
    App*'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B18727_07.xhtml#_idTextAnchor180)，*保护和应用打包* '
