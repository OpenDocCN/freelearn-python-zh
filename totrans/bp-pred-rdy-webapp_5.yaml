- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building the Single-Page App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we extended a basic React app with the tooling and
    setup that we require to build user interfaces. This means that in this chapter,
    we can focus on the functionality that will make up our single-page app. Specifically,
    we’ll add functionality that allows users to authenticate, manage their passwords,
    and manage their to-dos.
  prefs: []
  type: TYPE_NORMAL
- en: The user interface and functionality to manage user authentication and passwords
    is useful to any app and could be used directly in yours. While the to-do user
    interface is unlikely to match what you require in your own apps, the techniques
    will be applicable.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding user authentication pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding password management pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding to-do pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following additional folders are required in this chapter and should be
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To follow the development in this chapter using the companion repository, [https://github.com/pgjones/tozo](https://github.com/pgjones/tozo),
    see the commits between the tags `r1-ch5-start` and `r1-ch5-end`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The app we are building needs to allow logged-in users to navigate to the full
    to-do list, the page allowing them to change their password, and allow them to
    log out. For logged-out users, they need to navigate between login, register,
    and reset password pages.
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on the needs of logged-in users, the Material Design system includes
    an app bar that exists at the top of the page. This will allow for links to the
    full to-do list (home page) and an account menu to change their password and log
    out.
  prefs: []
  type: TYPE_NORMAL
- en: A more complex navigation
  prefs: []
  type: TYPE_NORMAL
- en: Your app probably has more pages than the one we are building in this book.
    This means the navigation system needs to be able to link to more pages. While
    the account menu can be extended with more links relating to the user, it is not
    a good location for other links. Instead, a drawer is the best solution. Drawers
    slide in from the left and can have as many links as required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The account menu needs to allow users to log out, which means it needs to query
    the backend via a mutation and then update the app’s local authentication context
    (state). To do so, the following code should be added to *frontend/src/components/AccountMenu.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code provides a `logout` function, which, when called, triggers the mutation
    thereby sending a `DELETE /sessions/` request. If this request succeeds, the user
    is logged out, the local authentication context is set to `false`, and the data
    stored by `React-Query` is cleared. If the request fails, nothing will change,
    prompting the user to try again.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this functionality in place, we now need to add the styled menu. We can
    do this by adding the following to the existing code in *frontend/src/components/AccountMenu.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is standard MUI code for a menu that opens when the `IconButton` component
    is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now add the app bar itself, including a link to the home page, and the
    account menu if the user is logged in (authenticated) by adding the following
    to *frontend/src/components/TopBar.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The additional padding styling (highlighted) that utilizes the `safe-area-inset`
    is required for the app bar to look correct on devices with a notch, such as the
    iPhone X.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TopBar` should be rendered in the `Router` within the `BrowserRouter,`
    by adding the following to *frontend/src/Router.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted lines should be added to the existing code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once rendered, the app bar should look like *Figure 5.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1: The app bar as displayed in a mobile browser ](img/B18727_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: The app bar as displayed in a mobile browser'
  prefs: []
  type: TYPE_NORMAL
- en: With the navigation complete, we can start adding the pages; we will begin by
    allowing users to register and log in.
  prefs: []
  type: TYPE_NORMAL
- en: Adding user authentication pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the first visit to our app, users will need to register, confirm their email,
    and log in. Whereas, on subsequent visits, they’ll just need to log in. Each of
    these actions will need to be a page in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Registration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing a new user needs to do when visiting our app is to register,
    so we’ll start by adding a registration page. To register, the user will need
    to enter their email and a password. Once the user has supplied these, we’ll use
    the members API to create the user and then redirect the user to the login page
    or, if the API call fails, display the relevant error.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start by adding this logic as a custom `useRegister` hook to *frontend/src/pages/Register.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The function returned by the `useRegister` hook is designed to be used as a
    `Formik` `onSubmit` prop. This allows the function to add a specific error to
    the password field if the response from the backend indicates the password is
    too weak (as highlighted). Otherwise, if the registration succeeds, the app navigates
    to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically logging in on registration
  prefs: []
  type: TYPE_NORMAL
- en: The flow we’ve implemented directs the user to the login page where they log
    in after registering, rather than automatically logging them in. While this isn’t
    the best user experience, it is done to mitigate account enumeration, and hence
    is a safe default. However, you may decide for your app that the user experience
    is more important. If so, the backend route will need to log the user in, and
    this page should direct the user to the home page after registering.
  prefs: []
  type: TYPE_NORMAL
- en: We now need to provide input fields for the user to enter their email and a
    strong password, which we can ensure by showing the password strength. The fields
    will be validated to inform the user of any mistakes and use the correct autocomplete
    values. The autocomplete values should encourage the browser to do most of the
    work for the user (e.g., by filling in their email address).
  prefs: []
  type: TYPE_NORMAL
- en: 'The registration page is therefore extended by adding the following code to
    the existing code in *frontend/src/pages/Register.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As users often forget whether they have already registered, we’ve made it easier
    to navigate to the login and reset password pages via the `FormActions` links.
    In addition, as the user navigates between these pages, any value in the email
    field is persisted. This saves the user from having to type it in again, hence
    leading to a better user experience. This is done via the `location.state`, with
    the `useLocation` hook getting any current value, and the `state` part of the
    `links` prop of the `FormActions` component setting it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted lines should be added to the existing code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed **Register** page should look like *Figure 5.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2: The registration page  ](img/B18727_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: The registration page'
  prefs: []
  type: TYPE_NORMAL
- en: With users now able to register, they’ll next need to confirm their email.
  prefs: []
  type: TYPE_NORMAL
- en: Email confirmation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On registration, users are sent an email with a link back to our app. Within
    the link is a token that identifies the user. By following the link, the user
    passes the token to us and proves that they are in control of the email address.
    Hence, we need a page that, when visited, sends the token to the backend and displays
    the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'The link has the form `/confirm-email/:token/` where `:token` is the actual
    user’s token (e.g., `/confirm-email/abcd/`). Therefore, we can extract the token
    using a route parameter by adding the following to *frontend/src/Router.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted lines should be added to the existing code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now build the `ConfirmEmail` page and utilize a `useParam` hook to extract
    the token from the path. To do so, the following code should be added to *frontend/src/pages/ConfirmEmail.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted lines show the token parameter being extracted from the path.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure that the user knows that the app is working, a `LinearProgress` bar
    is shown while the frontend waits for the backend to respond; we can see this
    in *Figure 5.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3: The Confirm Email page showing a LinearProgress bar to indicate
    processing is in progress ](img/B18727_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: The Confirm Email page showing a LinearProgress bar to indicate
    processing is in progress'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, after registering and confirming their email, the user will need to
    log in.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Users will need to log in to see and interact with their to-dos. To do so, the
    user will need to enter their email and a password. Once the user has supplied
    these, we’ll use the session API to create a session. If the login is successful,
    the user should then be redirected to the home page or to the page given by the
    `from` state if it is present. The `from` state redirects the user to the page
    they attempted to view without being logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we’ll start by adding the following logic to *frontend/src/pages/Login.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With the login logic defined, we can now add the UI elements. This requires
    a form containing an email and password input, which should be added to the existing
    code in *frontend/src/pages/Login.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted code shows that the form submission is disabled until the form
    is dirty. This helps the user as it ensures that they can’t submit the form until
    they have made changes to it. This is a pattern we’ll use on all of the forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted lines should be added to the existing code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed **Login** page should look like *Figure 5.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4: The Login page  ](img/B18727_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: The Login page'
  prefs: []
  type: TYPE_NORMAL
- en: Users can now register and then log in to our app. They can’t manage their password
    though, which we’ll focus on next.
  prefs: []
  type: TYPE_NORMAL
- en: Adding password management pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to allow users to manage their passwords. This is quite involved as
    users often forget their password and hence a secure mechanism to reset the password
    is also required.
  prefs: []
  type: TYPE_NORMAL
- en: Changing a password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the user to change their password, they have to supply their existing password
    and a strong replacement password. Therefore, the frontend needs to send both
    to the backend and display relevant errors if the current password is incorrect
    or the new one is too weak. This logic is contained in the following code, which
    should be added to *frontend/src/pages/ChangePassword.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'With the logic defined, we can now add the UI elements. This requires a form
    containing a plain password field and password strength field as shown here, which
    should be added to the existing code in *frontend/src/pages/ChangePassword.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the code block, `...` represents code that has been omitted for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed **Change Password** page should look like *Figure 5.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5: The Change Password page  ](img/B18727_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: The Change Password page'
  prefs: []
  type: TYPE_NORMAL
- en: Users can now change their password while logged in. Next, we will allow users
    to request a password reset link when they have forgotten it.
  prefs: []
  type: TYPE_NORMAL
- en: Forgotten passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a user forgets their password, they’ll need to reset it by requesting a
    reset link. To do so, the user needs to enter their email and then we’ll use the
    members API to send them a password reset email or, if that fails, display a generic
    error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code to do this should be placed in *frontend/src/pages/ForgottenPassword.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'With the logic defined, we can now add the UI elements. This requires a form
    containing an email field as shown here, which should be added to the existing
    code in *frontend/src/pages/ForgottenPassword.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the code block, `...` represents code that has been omitted for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed **Forgotten password** page should look like *Figure 5.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6: The Forgotten password page  ](img/B18727_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: The Forgotten password page'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to add a page for the user to visit to actually reset their password.
  prefs: []
  type: TYPE_NORMAL
- en: Resetting a password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The email sent to the user via the forgotten password page will contain a link
    to the reset password page. This link will contain a token that identifies the
    user, in the same way as the email confirmation process described earlier. This
    page will need to allow the user to enter a new strong password and send it with
    the link’s token to the backend. The logic to do this is shown in the following
    code, which should be placed in *frontend/src/pages/ResetPassword.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'With the logic defined, we can now add the UI elements. This requires a form
    containing a password field that shows the password''s strength. We can do this
    by adding the following code to the existing code in *frontend/src/pages/ResetPassword.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the code block, `...` represents code that has been omitted for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed **Reset password** page should look like *Figure 5.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7: The Reset password page  ](img/B18727_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: The Reset password page'
  prefs: []
  type: TYPE_NORMAL
- en: Users can now manage their passwords, which means we can focus on pages to manage
    their to-dos.
  prefs: []
  type: TYPE_NORMAL
- en: Adding to-do pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users will need to manage their to-dos via the app, including creating, editing,
    and viewing their to-dos. These equate to different pages, which we will add.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s create the specific `React-Query` queries we will need to fetch
    to-dos from the backend. We can do this by adding the following code to *frontend/src/queries.ts*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The change to the `staleTime` option (highlighted) ensures that `react-query`
    doesn’t continually refetch the to-do data, but rather considers it valid for
    5 minutes. This improves the user experience by reducing their internet data usage.
    In addition, the `useTodoQuery` will helpfully use the cached to-do data as the
    `initialData` if it is available, thereby saving a request to the backend and
    improving the user’s experience.
  prefs: []
  type: TYPE_NORMAL
- en: Which user’s to-dos?
  prefs: []
  type: TYPE_NORMAL
- en: It may not be clear that the `useTodosQuery` defined previously will only return
    the currently authenticated user’s to-dos. This is because we’ve set up the backend
    to only return to-dos belonging to the currently authenticated user. It is vital
    that the authentication decisions are made in the backend as the user is able
    to alter the frontend code and hence potentially bypass checks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add the mutations to update the to-do data in the backend
    by adding the following to *frontend/src/queries.ts*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: All three of these mutations will invalidate the `[“todos”]` query data thereby
    requiring the to-do queries defined previously to fetch the new data, rather than
    return the outdated data.
  prefs: []
  type: TYPE_NORMAL
- en: With these queries available, we can now create the actual visual elements (i.e.,
    pages for the user to interact with).
  prefs: []
  type: TYPE_NORMAL
- en: Showing to-dos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first page we need is one to show all the user’s to-dos, which is effectively
    the user’s home page. Alongside showing the to-dos, it needs to provide actions
    to create a to-do and edit and delete any existing ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'The actions to edit or delete a to-do can be linked to the to-do directly by
    either clicking on it or a delete button associated with it. However, creating
    a to-do is a primary action for the page and hence is best suited to a floating
    action button. Therefore, the to-dos page should look like *Figure 5.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8: The home page showing to-dos, along with the floating action
    button ](img/B18727_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: The home page showing to-dos, along with the floating action button'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s create a component that shows an individual to-do by adding the
    following to *frontend/src/components/Todo.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This `Todo` component will render skeletons if the `todo` prop is undefined.
    We can use this to improve the user experience as the to-dos are fetched from
    the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Skeleton loading
  prefs: []
  type: TYPE_NORMAL
- en: Fetching data from the backend will take a noticeable amount of time, during
    which the user will wonder what the app is doing. It is therefore best to show
    the user that the app is working (loading the data). We’ll do this by using skeletons,
    which are gray animated blocks arranged with the same layout as the completed
    page. The gray arrangement looks like a skeleton, which gives them their name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full home page, which shows all the to-dos the user has, is then finished
    by adding the following to *frontend/src/pages/Todos.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the code block, `...` represents code that has been omitted for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we can display the to-dos, we need to be able to create and edit them.
  prefs: []
  type: TYPE_NORMAL
- en: Creating to-dos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will need to provide pages for users to create new to-dos and edit any existing
    ones. Both these pages will require a form to enter and edit the to-do data. Rather
    than repeat this form code for each page, we’ll create a `TodoForm` component,
    starting by defining the form validation by adding the following to *frontend/src/components/TodoForm.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'With the validation schema and form structure defined, we can add the component
    itself. This component needs only to render the relevant fields within a Formik
    form. The following code should be added to *frontend/src/components/TodoForm.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then use the `TodoForm` in a page to create a to-do task, by adding
    the following to *frontend/src/pages/CreateTodo.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the code block, `...` represents code that has been omitted for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Create a Todo page should look like *Figure 5.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9: The Create a Todo page showing the to-do form  ](img/B18727_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.9: The Create a Todo page showing the to-do form'
  prefs: []
  type: TYPE_NORMAL
- en: Users will want to be able to edit their to-dos after creating them, which we’ll
    add next.
  prefs: []
  type: TYPE_NORMAL
- en: Editing to-dos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, for the to-do pages, we need to allow users to edit their to-dos;
    you can do this via the following code, which should be added to *frontend/src/pages/EditTodo.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can add the page to the routing by adding the following to *frontend/src/Router.tsx*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the code block, `...` represents code that has been omitted for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Edit todo page should look like *Figure 5.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10: The Edit todo page  ](img/B18727_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.10: The Edit todo page'
  prefs: []
  type: TYPE_NORMAL
- en: This completes the frontend functionality we need for our to-do app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ve created a user interface that allows users to authenticate,
    manage their passwords, and manage their to-dos. This completes the development
    version of the app, which we can now use locally to manage to-dos.
  prefs: []
  type: TYPE_NORMAL
- en: The user authentication and password management user interfaces are useful to
    any app and could be used directly in your apps, and the to-do user interface
    could be adapted or used as a reference for other functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll deploy this app to production, allowing users to
    access and use it.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To further enhance your app, I recommend you read more about good UX practices,
    for example, via [https://builtformars.com](https://builtformars.com). Also, to
    improve your frontend styling skills, I’d recommend [https://css-tricks.com](https://css-tricks.com).
  prefs: []
  type: TYPE_NORMAL
- en: Part 3 Releasing a Production-Ready App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a working app is only the first step; it needs to be deployed to a
    public domain name that runs on AWS, made secure, and then packaged for the mobile
    app stores. We’ll do all of this by incorporating as many industry best practices
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part consists of the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18727_06.xhtml#_idTextAnchor159), *Deploying and Monitoring
    Your Application*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18727_07.xhtml#_idTextAnchor180), *Securing and Packaging the
    App*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
