["```py\npip install nose2\n\n```", "```py\n...............................................................\n----------------------------------------------------------------------\nRan 63 tests in 0.109s\n\nOK\n\n```", "```py\nclass StockTest(unittest.TestCase):\n    def setUp(self):\n        self.goog = Stock(\"GOOG\")\n\n    def test_price_of_a_new_stock_class_should_be_None(self):\n        self.assertIsNone(self.goog.price)\n```", "```py\ndef test_price_of_a_new_stock_class_should_be_None():\n    goog = Stock(\"GOOG\")\n    assert goog.price is None\n```", "```py\nself.assertIsNone(self.goog.price)\n```", "```py\nassert goog.price is None\n```", "```py\nassert goog.price is None, \"Price of a new stock should be None\"\n```", "```py\n======================================================================\nFAIL: stock_alerter.tests.test_stock.FunctionTestCase (test_price_of_a_new_stock_class_should_be_None)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n ...\n assert goog.price is None, \"Price of a new stock should be None\"\nAssertionError: Price of a new stock should be None\n\n----------------------------------------------------------------------\n\n```", "```py\ndef setup_test():\n    global goog\n    goog = Stock(\"GOOG\")\n\ndef teardown_test():\n    global goog\n    goog = None\n\ndef test_price_of_a_new_stock_class_should_be_None():\n    assert goog.price is None, \"Price of a new stock should be None\"\n\ntest_price_of_a_new_stock_class_should_be_None.setup = setup_test\ntest_price_of_a_new_stock_class_should_be_None.teardown = \\ teardown_test\n```", "```py\nclass StockTrendTest(unittest.TestCase):\n    def setUp(self):\n        self.goog = Stock(\"GOOG\")\n\n    def given_a_series_of_prices(self, prices):\n        timestamps = [datetime(2014, 2, 10), datetime(2014, 2, 11),\n                      datetime(2014, 2, 12), datetime(2014, 2, 13)]\n        for timestamp, price in zip(timestamps, prices):\n            self.goog.update(timestamp, price)\n\n    def test_increasing_trend_true_if_price_increase_for_3_updates(self):\n        self.given_a_series_of_prices([8, 10, 12])\n        self.assertTrue(self.goog.is_increasing_trend())\n\n    def test_increasing_trend_is_false_if_price_decreases(self):\n        self.given_a_series_of_prices([8, 12, 10])\n        self.assertFalse(self.goog.is_increasing_trend())\n\n    def test_increasing_trend_is_false_if_price_equal(self):\n        self.given_a_series_of_prices([8, 10, 10])\n        self.assertFalse(self.goog.is_increasing_trend())\n```", "```py\nfrom nose2.tools.params import params\n\ndef given_a_series_of_prices(stock, prices):\n    timestamps = [datetime(2014, 2, 10), datetime(2014, 2, 11),\n                  datetime(2014, 2, 12), datetime(2014, 2, 13)]\n    for timestamp, price in zip(timestamps, prices):\n        stock.update(timestamp, price)\n\n@params(\n    ([8, 10, 12], True),\n    ([8, 12, 10], False),\n    ([8, 10, 10], False)\n)\ndef test_stock_trends(prices, expected_output):\n    goog = Stock(\"GOOG\")\n    given_a_series_of_prices(goog, prices)\n    assert goog.is_increasing_trend() == expected_output\n```", "```py\n======================================================================\nFAIL: stock_alerter.tests.test_stock.test_stock_trends:2\n[8, 12, 10], True\n----------------------------------------------------------------------\nTraceback (most recent call last):\n ...\n assert goog.is_increasing_trend() == expected_output\nAssertionError\n\n======================================================================\n\n```", "```py\ndef test_trend_with_all_consecutive_values_upto_100():\n    for i in range(100):\n        yield stock_trends_with_consecutive_prices, [i, i+1, i+2]\n\ndef stock_trends_with_consecutive_prices(prices):\n    goog = Stock(\"GOOG\")\n    given_a_series_of_prices(goog, prices)\n    assert goog.is_increasing_trend()\n```", "```py\n======================================================================\nFAIL: stock_alerter.tests.test_stock.test_trend_with_all_consecutive_values_upto_100:100\n[99, 100, 100]\n----------------------------------------------------------------------\nTraceback (most recent call last):\n ...\n assert goog.is_increasing_trend()\nAssertionError\n\n----------------------------------------------------------------------\n\n```", "```py\nclass StockTest(unittest.TestCase):\n    def setUp(self):\n        self.goog = Stock(\"GOOG\")\n\nclass StockCrossOverSignalTest(unittest.TestCase):\n    def setUp(self):\n        self.goog = Stock(\"GOOG\")\n```", "```py\nfrom nose2.tools import such\n\nwith such.A(\"Stock class\") as it:\n\n    @it.has_setup\n    def setup():\n        it.goog = Stock(\"GOOG\")\n\n    with it.having(\"a price method\"):\n        @it.has_setup\n        def setup():\n            it.goog.update(datetime(2014, 2, 12), price=10)\n\n        @it.should(\"return the price\")\n        def test(case):\n            assert it.goog.price == 10\n\n        @it.should(\"return the latest price\")\n        def test(case):\n            it.goog.update(datetime(2014, 2, 11), price=15)\n            assert it.goog.price == 10\n\n    with it.having(\"a trend method\"):\n        @it.should(\"return True if last three updates were increasing\")\n        def test(case):\n            it.goog.update(datetime(2014, 2, 11), price=12)\n            it.goog.update(datetime(2014, 2, 12), price=13)\n            it.goog.update(datetime(2014, 2, 13), price=14)\n            assert it.goog.is_increasing_trend()\n\n    it.createTests(globals())\n```", "```py\nfrom nose2.tools import such\n```", "```py\nwith such.A(\"Stock class\") as it:\n```", "```py\n    @it.has_setup\n    def setup():\n        it.goog = Stock(\"GOOG\")\n```", "```py\nwith it.having(\"a price method\"):\n```", "```py\n        @it.has_setup\n        def setup():\n            it.goog.update(datetime(2014, 2, 12), price=10)\n```", "```py\n        @it.should(\"return the price\")\n        def test(case):\n            assert it.goog.price == 10\n```", "```py\n        @it.should(\"return the latest price\")\n        def test(case):\n            it.goog.update(datetime(2014, 2, 11), price=15)\n            assert it.goog.price == 10\n```", "```py\n    with it.having(\"a trend method\"):\n        @it.should(\"return True if last three updates were increasing\")\n        def test(case):\n            it.goog.update(datetime(2014, 2, 11), price=12)\n            it.goog.update(datetime(2014, 2, 12), price=13)\n            it.goog.update(datetime(2014, 2, 13), price=14)\n            assert it.goog.is_increasing_trend()\n```", "```py\n    it.createTests(globals())\n```", "```py\nnose2 --plugin nose2.plugins.layers\n\n```", "```py\nnose2 --plugin nose2.plugins.layers --layer-reporter -v\n\n```", "```py\nA Stock class\n having a price method\n should return the price ... ok\n should return the latest price ... ok\n having a trend method\n should return True if last three updates were increasing ... ok\n\n```", "```py\nnose2 --plugin nose2.plugins.doctests --with-doctest\n\n```", "```py\nnose2 --plugin nose2.plugins.junitxml --junit-xml\n\n```", "```py\n<testsuite errors=\"0\" failures=\"1\" name=\"nose2-junit\" skips=\"0\" tests=\"166\" time=\"0.172\">\n\n  <testcase classname=\"stock_alerter.tests.test_action.EmailActionTest\" name=\"test_connection_closed_after_sending_mail\" time=\"0.000000\" />\n\n  ...\n\n  <testcase classname=\"stock_alerter.tests.test_stock.having a trend method\" name=\"test 0000: should return True if the last three updates were increasing\" time=\"0.000000\">\n\n    <failure message=\"test failure\">Traceback (most recent call last):\n  File \"...\\src\\stock_alerter\\tests\\test_stock.py\", line 78, in test\n    assert it.goog.is_increasing_trend()\nAssertionError\n    </failure>\n\n  </testcase>\n</testsuite>\n```", "```py\npip install nose2[coverage-plugin]\n\n```", "```py\nnose2 --with-coverage\n\n```", "```py\n----------- coverage: platform win32, python 3.4.0-final-0 -----------\nName                                  Stmts   Miss  Cover\n---------------------------------------------------------\nstock_alerter\\__init__                    3      3     0%\nstock_alerter\\action                     18      8    56%\nstock_alerter\\alert                      13      4    69%\nstock_alerter\\event                       8      4    50%\nstock_alerter\\legacy                     36     12    67%\nstock_alerter\\processor                   8      0   100%\nstock_alerter\\reader                     15      5    67%\nstock_alerter\\rule                       33     12    64%\nstock_alerter\\stock                      52     19    63%\n\n```", "```py\nnose2 --with-coverage --coverage-report html\n\n```", "```py\nnose2 --with-coverage --coverage-report html --coverage-report term\n\n```", "```py\nnose2 --plugin nose2.plugins.debugger --debugger\n\n```", "```py\nF\n> c:\\python34\\lib\\unittest\\case.py(787)_baseAssertEqual()\n-> raise self.failureException(msg)\n(Pdb) u\n> c:\\python34\\lib\\unittest\\case.py(794)assertEqual()\n-> assertion_func(first, second, msg=msg)\n(Pdb) u\n> c:\\projects\\tdd_with_python\\src\\stock_alerter\\tests\\test_stock.py(60)test_stock_update()\n-> self.assertEqual(100, self.goog.price)\n(Pdb) self.goog.price\n10\n\n```", "```py\nnose2 --with-coverage --coverage-report html --plugin nose2.plugins.junitxml --junit-xml --plugin nose2.plugins.doctests --with-doctest\n\n```", "```py\n[unittest]\ntest-file-pattern=test_*.py\ntest-method-prefix=test\nplugins = nose2.plugins.coverage\n          nose2.plugins.junitxml\n          nose2.plugins.layers\nexclude-plugins = nose2.plugins.doctest\n\n[layer-reporter]\nalways-on = False\ncolors = True\n\n[junit-xml]\nalways-on = True\npath = nose2.xml\n\n[coverage]\nalways-on = False\ncoverage-report = [\"html\", \"xml\"]\n```", "```py\nnose2 --config <filename>\n\n```"]