["```py\nself.mediaObj.setCurrentSource(self.mediaSource)\n\n```", "```py\nself.audioPath = Phonon.createPath(self.mediaObj, self.audioSink)\n\n```", "```py\nvolumeSlider.setAudioOutput(self.audioSink)\n\n```", "```py\n    pyuic4 UI_AudioPlayerDialog.ui -o Ui_AudioPlayerDialog.py\n\n    ```", "```py\n    1 def _connect(self):\n    2 \"\"\"\n    3 Connect slots with signals.\n    4 \"\"\"\n    5 self.connect(self._dialog.fileOpenAction,\n    6 SIGNAL(\"triggered()\"),\n    7 self._openFileDialog)\n    8\n    9 self.connect(self._dialog.fileExitAction,\n    10 SIGNAL(\"triggered()\"),\n    11 self.close)\n    12\n    13 self.connect(self._dialog.menuAudioEffects,\n    14 SIGNAL(\"triggered(QAction*)\"),\n    15 self._changeAudioEffects)\n    16\n    17 self.connect(self._dialog.playToolButton,\n    18 SIGNAL(\"clicked()\"),\n    19 self._playMedia)\n    20\n    21 self.connect(self._dialog.stopToolButton,\n    22 SIGNAL(\"clicked()\"),\n    23 self._stopMedia)\n    24\n    25 self.connect(self._dialog.pauseToolButton,\n    26 SIGNAL(\"clicked()\"),\n    27 self._pauseMedia)\n\n    ```", "```py\n    1 def __init__(self):\n    2 QMainWindow.__init__(self)\n    3 self.mediaSource = None\n    4 self.audioPath = ''\n    5 self.addedEffects = {}\n    6 self.effectsDict = {}\n    7\n    8 # Initialize some other variables.\n    9 self._filePath = ''\n    10 self._dirPath = ''\n    11 self._dialog = None\n    12 # Create media object , audio sink and path\n    13 self.mediaObj = phonon.Phonon.MediaObject(self)\n    14 self.audioSink = Phonon.AudioOutput(\n    15 Phonon.MusicCategory,\n    16 self)\n    17 self.audioPath = Phonon.createPath(self.mediaObj,\n    18 self.audioSink)\n    19\n    20 # Create self._dialog instance and call\n    21 # necessary methods to create a user interface\n    22 self._createUI()\n    23\n    24 # Connect slots with signals.\n    25 self._connect()\n    26\n    27 # Show the Audio player.\n    28 self.show()\n\n    ```", "```py\n    1 def _createUI(self):\n    2 # Define the instance to access the the UI elements\n    3 defined in class Ui_AudioPlayerDialog.\n    4 self._dialog = Ui_AudioPlayerDialog()\n    5 self._dialog.setupUi(self)\n    6 self._dialog.retranslateUi(self)\n    7 playIcon= QIcon(\"play.png\")\n    8 pauseIcon= QIcon(\"pause.png\")\n    9 stopIcon= QIcon(\"stop.png\")\n    10 musicIcon= QIcon(\"music.png\")\n    11\n    12 self._dialog.playToolButton.setIcon(playIcon)\n    13 self._dialog.pauseToolButton.setIcon(pauseIcon)\n    14 self._dialog.stopToolButton.setIcon(stopIcon)\n    15 self.setWindowIcon(musicIcon)\n    16 self._setupEffectsMenu()\n    17 self._dialog.seekSlider.setMediaObject(self.mediaObj)\n    18 self._dialog.volumeSlider.setAudioOutput(\n    19 self.audioSink)\n\n    ```", "```py\n    1 def _setupEffectsMenu(self):\n    2 availableEffects = (\n    3 Phonon.BackendCapabilities.availableAudioEffects())\n    4 for e in availableEffects:\n    5 effectName = e.name()\n    6 self.effectsDict[effectName] = e\n    7 action = QAction(effectName,\n    8 self._dialog.menuAudioEffects)\n    9 action.setCheckable(True)\n    10 self._dialog.menuAudioEffects.addAction(action)\n\n    ```", "```py\n    1 def _openFileDialog(self):\n    2\n    3 self._filePath = ''\n    4\n    5 self._filePath = (\n    6 str(QFileDialog.getOpenFileName(\n    7 self,\n    8 \"Open Audio File\",\n    9 \"\",\n    10 \"MP3 file (*.mp3);;wav(*.wav);;All Files\n    11 (*.*);;\")) )\n    12 if self._filePath:\n    13 self._filePath = os.path.normpath(self._filePath)\n    14 self._dialog.fileLineEdit.setText(self._filePath)\n    15 self._loadNewMedia()\n\n    ```", "```py\n    types = Phonon.BackendCapabilities.availableMimeTypes()\n\n    ```", "```py\n    1 def _loadNewMedia(self):\n    2 # This is required so that the player can play another\n    3 # file, if loaded while first one is still playing.\n    4 if self.mediaSource:\n    5 self._stopMedia()\n    6 del self.mediaSource\n    7 self.mediaSource = phonon.Phonon.MediaSource(\n    8 self._filePath)\n    9 self.mediaObj.setCurrentSource(self.mediaSource)\n\n    ```", "```py\n    1 def _playMedia(self):\n    2 if not self._okToPlayPauseStop():\n    3 return\n    4\n    5 if self.mediaObj is None:\n    6 print \"Error playing Audio\"\n    7 return\n    8\n    9 self.mediaObj.play()\n\n    ```", "```py\n    1 def _changeAudioEffects(self, action):\n    2 effectName = action.text()\n    3\n    4 if action.isChecked():\n    5 effectDescription = self.effectsDict[effectName]\n    6 effect = Phonon.Effect(effectDescription)\n    7 self.addedEffects[effectName] = effect\n    8 self.audioPath.insertEffect(effect)\n    9 else:\n    10 effect = self.addedEffects[effectName]\n    11 self.audioPath.removeEffect(effect)\n    12 del self.addedEffects[effectName]\n\n    ```", "```py\n    1 def closeEvent(self, evt):\n    2 print \"\\n in close event\"\n    3 if self.mediaObj:\n    4 self.mediaObj.stop()\n    5\n    6 self.mediaObj = None\n    7 self._clearEffectsObjects()\n    8 QMainWindow.closeEvent(self, evt)\n\n    ```", "```py\n    1 app = QApplication(sys.argv)\n    2 musicPlayer = AudioPlayerDialog()\n    3 app.exec_()\n\n    ```", "```py\n    $python AudioPlayerDialog.py\n\n    ```", "```py\n    pyuic4 UI_VideoPlayerDialog.ui -o Ui_VideoPlayerDialog.py\n\n    ```", "```py\ndef _connect(self):\nself.connect(self._dialog.fileOpenAction,\nSIGNAL(\"triggered()\"),\nself._openFileDialog)\nself.connect(self._dialog.fileExitAction,\nSIGNAL(\"triggered()\"),\nself.close)\nself.connect(self._dialog.fullScreenAction,\nSIGNAL(\"toggled(bool)\"),\nself._toggleFullScreen)\nself.connect(self._dialog.playToolButton,\nSIGNAL(\"clicked()\"),\nself._playMedia)\nself.connect(self._dialog.stopToolButton,\nSIGNAL(\"clicked()\"),\nself._stopMedia)\nself.connect(self._dialog.pauseToolButton,\nSIGNAL(\"clicked()\"),\nself._pauseMedia)\n\n```", "```py\n    1 def __init__(self):\n    2 QMainWindow.__init__(self)\n    3 self.mediaSource = None\n    4 self.audioPath = ''\n    5\n    6 # Initialize some other variables.\n    7 self._filePath = ''\n    8 self._dialog = None\n    9\n    10 # Create self._dialog instance and call\n    11 # necessary methods to create a user interface\n    12 self._createUI()\n    13\n    14 self.mediaObj = self._dialog.videoPlayer.mediaObject()\n    15 self.audioSink = self._dialog.videoPlayer.audioOutput()\n    16\n    17 self._dialog.seekSlider.setMediaObject(self.mediaObj)\n    18 self._dialog.volumeSlider.setAudioOutput(\n    19 self.audioSink)\n    20\n    21 # Connect slots with signals.\n    22 self._connect()\n    23\n    24 # Show the Audio player.\n    25 self.show()\n\n    ```", "```py\n    1 def _playMedia(self):\n    2 if not self._okToPlayPauseStop():\n    3 return\n    4 self._dialog.videoPlayer.play(self.mediaSource)\n\n    ```", "```py\n    def _toggleFullScreen(self, val):\n    \"\"\"\n    Change between normal and full screen mode.\n    \"\"\"\n    # Note: The program starts in Normal viewing mode\n    # by default.\n    if val:\n    self.showFullScreen()\n    else:\n\n    ```", "```py\n    self.showNormal()\n\n    ```", "```py\n    $python VideoPlayerDialog.py\n\n    ```", "```py\n    self.audioPath = self.mediaObj.outputPaths()[0]\n\n    ```"]