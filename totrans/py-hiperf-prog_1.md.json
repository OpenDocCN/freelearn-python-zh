["```py\nclass Particle:\n    def __init__(self, x, y, ang_speed):\n        self.x = x\n        self.y = y\n        self.ang_speed = ang_speed\n```", "```py\nclass ParticleSimulator:\n\n    def __init__(self, particles):\n        self.particles = particles\n\n    def evolve(self, dt):\n        timestep = 0.00001\n        nsteps = int(dt/timestep)\n\n        for i in range(nsteps):\n            for p in self.particles:\n\n # 1\\. calculate the direction\n norm = (p.x**2 + p.y**2)**0.5\n v_x = (-p.y)/norm\n v_y = p.x/norm\n\n # 2\\. calculate the displacement\n d_x = timestep * p.ang_speed * v_x\n d_y = timestep * p.ang_speed * v_y\n\n p.x += d_x\n p.y += d_y\n # 3\\. repeat for all the time steps\n\n```", "```py\n    from matplotlib import pyplot as plt\n    from matplotlib import animation\n\n    def visualize(simulator):\n\n        X = [p.x for p in simulator.particles]\n        Y = [p.y for p in simulator.particles]\n\n        fig = plt.figure()\n        ax = plt.subplot(111, aspect='equal')\n        line, = ax.plot(X, Y, 'ro')\n\n        # Axis limits\n        plt.xlim(-1, 1)\n        plt.ylim(-1, 1)\n\n        # It will be run when the animation starts\n        def init():\n            line.set_data([], [])\n            return line,\n\n        def animate(i):\n            # We let the particle evolve for 0.1 time units\n            simulator.evolve(0.01)\n            X = [p.x for p in simulator.particles]\n            Y = [p.y for p in simulator.particles]\n\n            line.set_data(X, Y)\n            return line,\n\n        # Call the animate function each 10 ms\n        anim = animation.FuncAnimation(fig, animate, init_func=init, blit=True,# Efficient animation\n                                       interval=10)\n        plt.show()\n    ```", "```py\ndef test_visualize():\n    particles = [Particle( 0.3,  0.5, +1),\n                 Particle( 0.0, -0.5, -1),\n                 Particle(-0.1, -0.4, +3)]\n\n    simulator = ParticleSimulator(particles)\n    visualize(simulator)\n\nif __name__ == '__main__':\n    test_visualize()\n```", "```py\ndef test():\n    particles = [Particle( 0.3,  0.5, +1),\n                 Particle( 0.0, -0.5, -1),\n                 Particle(-0.1, -0.4, +3)]\n\n    simulator = ParticleSimulator(particles)\n\n    simulator.evolve(0.1)\n\n    p0, p1, p2 = particles\n\n    def fequal(a, b):\n        return abs(a - b) < 1e-5\n\n    assert fequal(p0.x, 0.2102698450356825)\n    assert fequal(p0.y, 0.5438635787296997)\n\n    assert fequal(p1.x, -0.0993347660567358)\n    assert fequal(p1.y, -0.4900342888538049)\n\n    assert fequal(p2.x,  0.1913585038252641)\n    assert fequal(p2.y, -0.3652272210744360)\n\nif __name__ == '__main__':\n    test()\n```", "```py\nfrom random import uniform\n\ndef benchmark():\n    particles = [Particle(uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0))\n                  for i in range(1000)]\n\n    simulator = ParticleSimulator(particles)\n    simulator.evolve(0.1)\n\nif __name__ == '__main__':\n    benchmark()\n```", "```py\n$ time python simul.py\nreal    0m1.051s\nuser    0m1.022s\nsys    0m0.028s\n\n```", "```py\n# IPython Interface\n$ ipython\nIn [1]: from simul import benchmark\nIn [2]: %timeit benchmark()\n1 loops, best of 3: 782 ms per loop\n\n# Command Line Interface\n$ python -m timeit -s 'from simul import benchmark' 'benchmark()'10 loops, best of 3: 826 msec per loop\n\n# Python Interface\n# put this function into the simul.py script\n\nimport timeit\nresult = timeit.timeit('benchmark()',\n                                   setup='from __main__ import benchmark', number=10)\n# result is the time (in seconds) to run the whole loop\n\nresult = timeit.repeat('benchmark()', setup='from __main__ import benchmark', number=10, repeat=3)\n# result is a list containing the time of each repetition (repeat=3 in this case)\n```", "```py\n$ python -m cProfile simul.py\n\n```", "```py\n$ python -m cProfile -s tottime simul.py\n\n```", "```py\n$ python -m cProfile -o prof.out simul.py\n\n```", "```py\nIn [1]: from simul import benchmark\nIn [2]: %prun benchmark()\n         707 function calls in 0.793 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.792    0.792    0.792    0.792 simul.py:12(evolve)\n        1    0.000    0.000    0.000    0.000 simul.py:100(<listcomp>)\n      300    0.000    0.000    0.000    0.000 random.py:331(uniform)\n      100    0.000    0.000    0.000    0.000 simul.py:2(__init__)\n        1    0.000    0.000    0.793    0.793 {built-in method exec}\n      300    0.000    0.000    0.000    0.000 {method 'random' of '_random.Random' objects}\n        1    0.000    0.000    0.793    0.793 simul.py:99(benchmark)\n        1    0.000    0.000    0.793    0.793 <string>:1(<module>)\n        1    0.000    0.000    0.000    0.000 simul.py:9(__init__)\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n```", "```py\ndef factorial(n):\n    if n == 0:\n        return 1.0\n    else:\n        return float(n) * factorial(n-1)\n\ndef taylor_exp(n):\n    return [1.0/factorial(i) for i in range(n)]\n\ndef taylor_sin(n):\n    res = []\n    for i in range(n):\n        if i % 2 == 1:\n           res.append((-1)**((i-1)/2)/float(factorial(i)))\n        else:\n           res.append(0.0)\n    return res\n\ndef benchmark():\n    taylor_exp(500)\n    taylor_sin(500)\n\nif __name__ == '__main__':\n    benchmark()\n```", "```py\n$ python -m cProfile -o prof.out taylor.py\n\n```", "```py\n$ pyprof2calltree -i prof.out -o prof.calltree\n$ kcachegrind prof.calltree # or qcachegrind prof.calltree\n\n```", "```py\n@profile\ndef evolve:\n    # code\n```", "```py\n    $ kernprof.py -l -v simul.py\n\n    ```", "```py\nIn [1]: %load_ext line_profiler\nIn [2]: from simul import benchmark, ParticleSimulator\nIn [3]: %lprun -f ParticleSimulator.evolve benchmark()\n\nTimer unit: 1e-06 s\n\nFile: simul.py\nFunction: evolve at line 12\nTotal time: 5.31684 s\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    12                                               def evolve(self, dt):\n    13         1            9      9.0      0.0          timestep = 0.00001\n    14         1            4      4.0      0.0          nsteps = int(dt/timestep)\n    15                                                   \n    16     10001         5837      0.6      0.1          for i in range(nsteps):\n    17   1010000       517504      0.5      9.7              for p \nin self.particles:\n    18                                           \n    19   1000000       963498      1.0     18.1                  norm = (p.x**2 + p.y**2)**0.5\n    20   1000000       621063      0.6     11.7                  v_x = (-p.y)/norm\n    21   1000000       577882      0.6     10.9                  v_y = p.x/norm\n    22                                                           \n    23   1000000       672811      0.7     12.7                  d_x = timestep * p.ang_speed * v_x\n    24   1000000       685092      0.7     12.9                  d_y = timestep * p.ang_speed * v_y\n    25                                           \n    26   1000000       650802      0.7     12.2                  p.x += d_x\n    27   1000000       622337      0.6     11.7                  p.y += d_y\n```", "```py\nx = r * cos(alpha)\ny = r * sin(alpha)\n```", "```py\n v_x = (-p.y)/norm\n```", "```py\np.x, p.y = p.x - t_x_ang*p.y/norm, p.y + t_x_ang * p.x/norm\n```", "```py\n    def evolve_fast(self, dt):\n        timestep = 0.00001\n        nsteps = int(dt/timestep)\n\n        # Loop order is changed\n        for p in self.particles:\n            t_x_ang = timestep * p.ang_speed\n            for i in range(nsteps):\n                norm = (p.x**2 + p.y**2)**0.5\n                p.x, p.y = (p.x - t_x_ang *  p.y/norm,p.y + t_x_ang * p.x/norm)\n\n```", "```py\n$ time python simul.py # Performance Tuned\nreal    0m0.756s\nuser    0m0.714s\nsys    0m0.036s\n\n$ time python simul.py # Original\nreal    0m0.863s\nuser    0m0.831s\nsys    0m0.028s\n\n```", "```py\nimport dis\nfrom simul import ParticleSimulator\ndis.dis(ParticleSimulator.evolve)\n\n```", "```py\n20         85 LOAD_FAST                5 (p)\n             88 LOAD_ATTR                4 (y)\n             91 UNARY_NEGATIVE       \n             92 LOAD_FAST                6 (norm)\n             95 BINARY_TRUE_DIVIDE   \n             96 STORE_FAST               7 (v_x)\n```", "```py\ndef benchmark_memory():\n    particles = [Particle(uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0),\n                          uniform(-1.0, 1.0))\n                  for i in range(100000)]\n\n    simulator = ParticleSimulator(particles)\n    simulator.evolve(0.001)\n```", "```py\nIn [1]: %load_ext memory_profiler\nIn [2]: from simul import benchmark_memory\nIn [3]: %mprun -f benchmark_memory benchmark_memory()\n\nLine #    Mem usage    Increment   Line Contents\n==============================================\n   135     45.5 MiB      0.0 MiB   def benchmark_memory():\n   136     45.5 MiB      0.0 MiB       particles = [Particle(uniform(-1.0, 1.0),\n   137                                                       uniform(-1.0, 1.0),\n   138                                                       uniform(-1.0, 1.0))\n 139     71.2 MiB     25.7 MiB                     for i in range(100000)]\n   140                                 \n   141     71.2 MiB      0.0 MiB       simulator = ParticleSimulator(particles)\n   142     71.3 MiB      0.1 MiB       simulator.evolve(0.001)\n```", "```py\nclass Particle: \n# class Particle(object):  # New-style class for Python 2\n\n    __slots__ = ('x', 'y', 'ang_speed')\n\n    def __init__(self, x, y, ang_speed):\n        self.x = x\n        self.y = y\n        self.ang_speed = ang_speedWe can now re-run our benchmark:\nIn [1]: %load_ext memory_profiler\nIn [2]: from simul import benchmark_memory\nIn [3]: %mprun -f benchmark_memory benchmark_memory()\n\nLine #    Mem usage    Increment   Line Contents\n==============================================\n   138     45.5 MiB      0.0 MiB   def benchmark_memory():\n   139     45.5 MiB      0.0 MiB       particles = [Particle(uniform(-1.0, 1.0),\n   140                                                       uniform(-1.0, 1.0),\n   141                                                       uniform(-1.0, 1.0))\n 142     60.2 MiB     14.7 MiB                     for i in range(100000)]\n   143                                 \n   144     60.2 MiB      0.0 MiB       simulator = ParticleSimulator(particles)\n   145     60.3 MiB      0.1 MiB       simulator.evolve(0.001)\n```", "```py\ndef counter_1():\n    items = [random.randint(0, 10) for i in range(10000)]\n    return Counter(items)\n\ndef counter_2():\n    items = [random.randint(0, 10) for i in range(10000)]\n    counter = {}\n    for item in items:\n        if item not in counter:\n            counter[item] = 0\n        else:\n            counter[item] += 1\n    return counter\n```", "```py\nIn [1]: import purepy\nIn [2]: %timeit purepy.counter_1()\n100 loops, best of 3: 10.1 ms per loop\nIn [3]: %timeit purepy.counter_2()\n100 loops, best of 3: 9.11 ms per loop\n\n```", "```py\ndef loop():\n    res = []\n    for i in range(100000):\n        res.append(i * i)\n    return sum(res)\n\ndef comprehension():\n    return sum([i * i for i in range(100000)])\n\ndef generator():\n    return sum(i * i for i in range(100000))\n```", "```py\nIn [1]: import purepy\nIn [2]: %timeit purepy.loop()\n100 loops, best of 3: 8.26 ms per loop\nIn [3]: %timeit purepy.comprehension()\n100 loops, best of 3: 5.39 ms per loop\nIn [4]: %timeit purepy.generator()\n100 loops, best of 3: 5.07 ms per loop\n\n```"]