["```py\ndef square(x): \n    return x * x \n```", "```py\n    $ python\n    >>> def square(x): \n    ...     return x * x\n    >>> assert square(5) == 25\n    >>> assert square(7) == 49\n    >>> assert square(10) == 100\n    >>> assert square(10) == 0\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    AssertionError\n\n```", "```py\nclass TestConfig(Config):\n\n    DEBUG = True\n    DEBUG_TB_ENABLED = False\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    CACHE_TYPE = 'null'\n    WTF_CSRF_ENABLED = False\n\n    CELERY_BROKER_URL = \"amqp://guest:guest@localhost:5672//\"\n    CELERY_BACKEND_URL = \"amqp://guest:guest@localhost:5672//\"\n\n    MAIL_SERVER = 'localhost'\n    MAIL_PORT = 25\n    MAIL_USERNAME = 'username'\n    MAIL_PASSWORD = 'password'\n\n```", "```py\nimport unittest \n\nclass TestURLs(unittest.TestCase): \n    pass \n\nif __name__ == '__main__': \n    unittest.main() \n```", "```py\n$ python -m unittest discover\n\n---------------------------------------------------------------------\nRan 0 tests in 0.000s\n\nOK\n```", "```py\nclass TestURLs(unittest.TestCase):\n\n    def setUp(self):\n        admin._views = []\n        rest_api.resources = []\n\n        app = create_app('config.TestConfig')\n        self.client = app.test_client()\n        db.app = app\n        db.create_all()\n```", "```py\nclass TestURLs(unittest.TestCase): \n    def setUp(self): \n        ... \n\n    def tearDown(self): \n        db.session.remove()\n```", "```py\nclass TestURLs(unittest.TestCase): \n    def setUp(self): \n        ... \n\n    def tearDown(self): \n        ... \n\n    def test_root_redirect(self): \n        \"\"\" Tests if the root URL gives a 302 \"\"\" \n\n        result = self.client.get('/') \n        assert result.status_code == 302 \n        assert \"/blog/\" in result.headers['Location'] \n```", "```py\n    $ python -m unittest discover\n    .\n    ---------------------------------------------------------------------\n    Ran 1 tests in 0.128s\n\n    OK\n\n```", "```py\nclass TestURLs(unittest.TestCase): \n    def setUp(self): \n        ... \n\n    def tearDown(self): \n        ... \n\n    def test_root_redirect(self): \n        ... \n\n    def test_blog_home(self): \n        \"\"\" Tests if the blog home page returns successfully \"\"\" \n        result = self.client.get('/blog/')\n        self.assertEqual(result.status_code, 200)\n```", "```py\nclass TestURLs(unittest.TestCase):\n....\n\n    def _insert_user(self, username, password, role_name):\n        test_role = Role(role_name)\n        db.session.add(test_role)\n        db.session.commit()\n\n        test_user = User(username)\n        test_user.set_password(password)\n        db.session.add(test_user)\n        db.session.commit()\n\n    def test_login(self):\n        \"\"\" Tests if the login form works correctly \"\"\"\n\n        result = self.client.post('/auth/login', data=dict(\n            username='test',\n            password=\"test\"\n        ), follow_redirects=True)\n\n        self.assertEqual(result.status_code, 200)\n        self.assertIn('You have been logged in', result.data)\n...\n```", "```py\ndef test_failed_login(self):\n    self._insert_user('test', 'test', 'default')\n    result = self.client.post('/auth/login', data=dict(\n        username='test',\n        password=\"badpassword\"\n    ), follow_redirects=True)\n\n    self.assertEqual(result.status_code, 200)\n    self.assertIn('Invalid username or password', result.data)\n    result = self.client.get('/blog/new')\n    self.assertEqual(result.status_code, 302)\n```", "```py\ndef test_unauthorized_access_to_admin(self):\n    self._insert_user('test', 'test', 'default')\n    result = self.client.post('/auth/login', data=dict(\n        username='test',\n        password=\"test\"\n    ), follow_redirects=True)\n    result = self.client.get('/admin/customview/')\n    self.assertEqual(result.status_code, 403)\n```", "```py\ndef test_api_jwt_login(self):\n    self._insert_user('test', 'test', 'default')\n    headers = {'content-type': 'application/json'}\n    result = self.client.post('/auth/api', headers=headers, data='{\"username\":\"test\",\"password\":\"test\"}')\n    self.assertEqual(result.status_code, 200)\n\ndef test_api_jwt_failed_login(self):\n    self._insert_user('test', 'test', 'default')\n    headers = {'content-type': 'application/json'}\n    result = self.client.post('/auth/api', headers=headers, data='{\"username\":\"test\",\"password\":\"test123\"}')\n    self.assertEqual(result.status_code, 401)\n```", "```py\ndef test_api_new_post(self):\n    self._insert_user('test', 'test', 'default')\n    headers = {'content-type': 'application/json'}\n    result = self.client.post('/auth/api', headers=headers, data='{\"username\":\"test\",\"password\":\"test\"}')\n    access_token = json.loads(result.data)['access_token']\n headers['Authorization'] = \"Bearer %s\" % access_token\n    result = self.client.post('api/post', headers=headers, data='{\"title\":\"Text Title\",\"text\":\"Changed\"}')\n    self.assertEqual(result.status_code, 201)\n```", "```py\n...    \nselenium\n...\n```", "```py\nimport unittest \n\nclass TestURLs(unittest.TestCase): \n    def setUp(self): \n        pass \n\n    def tearDown(self): \n        pass \n\n    def test_add_new_post(self): \n        \"\"\" Tests if the new post page saves a Post object to the \n            database \n\n            1\\. Log the user in \n            2\\. Go to the new_post page \n            3\\. Fill out the fields and submit the form \n            4\\. Go to the blog home page and verify that the post  \n               is on the page \n        \"\"\" \n        pass \n```", "```py\nimport unittest \nfrom selenium import webdriver\n\nclass TestURLs(unittest.TestCase): \n    def setUp(self): \n        self.driver = webdriver.Chrome() \n\n    def tearDown(self): \n        self.driver.close()\n```", "```py\n    $ python\n    >>> from selenium import webdriver\n    >>> driver = webdriver.Chrome()\n    # load the Google homepage\n    >>> driver.get(\"http://www.google.com\")\n    # find a element by its class\n    >>> search_field = driver.find_element_by_class_name(\"gsfi\")\n    # find a element by its name\n    >>> search_field = driver.find_element_by_name(\"q\")\n    # find an element by its id\n    >>> search_field = driver.find_element_by_id(\"lst-ib\")\n    # find an element with JavaScript\n    >>> search_field = driver.execute_script(\n        \"return document.querySelector('#lst-ib')\"\n    )\n    # search for flask\n    >>> search_field.send_keys(\"flask\")\n    >>> search_button = driver.find_element_by_name(\"btnK\")\n    >>> search_button.click()\n\n```", "```py\nfrom webapp import create_app \nfrom webapp.models import db, User, Role \n\napp = create_app('config.TestConfig') \n\ndb.app = app \ndb.create_all() \n\ndefault = Role(\"default\") \nposter = Role(\"poster\") \ndb.session.add(default) \ndb.session.add(poster) \ndb.session.commit() \n\ntest_user = User(\"test\") \ntest_user.set_password(\"test\") \ntest_user.roles.append(poster) \ndb.session.add(test_user) \ndb.session.commit() \n\napp.run() \n```", "```py\nimport time\nimport unittest\nfrom selenium import webdriver\n\nclass TestURLs(unittest.TestCase):\n    def setUp(self):\n        self.driver = webdriver.Chrome()\n\n    def tearDown(self):\n        self.driver.close()\n\n    def test_add_new_post(self):\n        \"\"\" Tests if the new post page saves a Post object to the\n            database\n\n            1\\. Log the user in\n            2\\. Go to the new_post page\n            3\\. Fill out the fields and submit the form\n            4\\. Go to the blog home page and verify that the post is\n               on the page\n        \"\"\"\n        # login\n        self.driver.get(\"http://localhost:5000/auth/login\")\n\n        username_field = self.driver.find_element_by_name(\"username\")\n        username_field.send_keys(\"test\")\n\n        password_field = self.driver.find_element_by_name(\"password\")\n        password_field.send_keys(\"test\")\n\n        login_button = self.driver.find_element_by_id(\"login_button\")\n        login_button.click()\n\n        # fill out the form\n        self.driver.get(\"http://localhost:5000/blog/new\")\n\n        title_field = self.driver.find_element_by_name(\"title\")\n        title_field.send_keys(\"Test Title\")\n\n        #Locate the CKEditor iframe\n        time.sleep(3)\n        basic_page_body_xpath = \"//div[contains(@id, 'cke_1_contents')]/iframe\"\n        ckeditor_frame = self.driver.find_element_by_xpath(basic_page_body_xpath)\n\n        #Switch to iframe\n        self.driver.switch_to.frame(ckeditor_frame)\n        editor_body = self.driver.find_element_by_xpath(\"//body\")\n        editor_body.send_keys(\"Test content\")\n        self.driver.switch_to.default_content()\n\n        post_button = self.driver.find_element_by_class_name(\"btn-primary\")\n        post_button.click()\n\n        # verify the post was created\n        self.driver.get(\"http://localhost:5000/blog\")\n        self.assertIn(\"Test Title\", self.driver.page_source)\n        self.assertIn(\"Test content\", self.driver.page_source)\n\nif __name__ == \"__main__\":\n    unittest.main()\n```", "```py\n (venv)$ pip install coverage\n```", "```py\n    $ coverage run --source webapp --branch -m unittest discover\n```", "```py\n$ coverage report\n...\n# You will get a full detailed report of your test coverage, breakdown by python file name coverage, and with the line numbers missed by your test\n...\n\nTOTAL 729 312 118 10 56%\n```", "```py\n    $ coverage html\n```"]