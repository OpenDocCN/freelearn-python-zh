["```py\nssh <server ip or hostname>\n```", "```py\nssh username@<server IP or hostname>\n```", "```py\n#show_cisco_int_pmk.py\nimport paramiko\nhost='HOST_ID'\nport=22\nusername='xxx'\npassword='xxxxxx'\n#cisco ios command to get a list of IP interfaces\ncmd= 'show ip int brief \\n'\ndef main():\n    try:\n        ssh = paramiko.SSHClient()\n        ssh.set_missing_host_key_policy(paramiko.          AutoAddPolicy())\n        ssh.connect(host, port, username, password)\n        stdin, stdout, stderr = ssh.exec_command(cmd)\n        output_lines = stdout.readlines()\n        response = ''.join(output_lines)\n        print(response)\n    finally:\n        ssh.close()\nif __name__ == '__main__':\n    main()\n```", "```py\nMon Jul 19 12:03:41.631 UTC\nInterface                   IP-Address      Status    Protocol \nLoopback0                   10.180.180.10   Up        Up\nGigabitEthernet0/0/0/0      10.1.10.2       Up        Up\nGigabitEthernet0/0/0/0.100  unassigned      Up        Down\nGigabitEthernet0/0/0/1      unassigned      Up        Up\nGigabitEthernet0/0/0/1.100  150.150.150.1   Up        Up\nGigabitEthernet0/0/0/2      unassigned      Shutdown  Down \n```", "```py\n#show_cisco_int_nmk.py\nfrom netmiko import ConnectHandler\ncisco_rtr = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"HOST_ID\",\n    \"username\": \"xxx\",\n    \"password\": \"xxxxxxx\",\n    #\"global_delay_factor\": 2,\n}\ndef main():\n    command = \"show ip int brief\"\n    with ConnectHandler(**cisco_rtr) as net_connect:\n        print(net_connect.find_prompt())\n        print(net_connect.enable())\n        output = net_connect.send_command(command)\n    print(output)\n```", "```py\n\"global_delay_factor\": 2\n```", "```py\ndelay_factor=2 \n```", "```py\nexpect_string=r'#'\n```", "```py\n#config_cisco_int_nmk.py\nfrom netmiko import ConnectHandler\ncisco_rtr = {\n    \"device_type\": \"cisco_ios\",\n    \"host\": \"HOST_ID\",\n    \"username\": \"xxx\",\n    \"password\": \"xxxxxx\",\n}\ndef main():\n    commands = [\"int Lo0 \"description custom_description\",       \"commit\"]\n    with ConnectHandler(**cisco_rtr) as net_connect:\n        output = net_connect.send_config_set(commands)\n    print(output)\n    print()\n```", "```py\nMon Jul 19 13:21:16.904 UTC\nRP/0/RP0/CPU0:cisco(config)#int Lo0\nRP/0/RP0/CPU0:cisco(config-if)#description custom_description\nRP/0/RP0/CPU0:cisco(config-if)#commit\nMon Jul 19 13:21:17.332 UTC\nRP/0/RP0/CPU0:cisco(config-if)#\n```", "```py\n    from napalm import get_network_driver \n    driver = get_network_driver('iosxr')\n    device = driver('HOST_ID', 'xxxx', 'xxxx')\n    device.open()\n    ```", "```py\n#show_cisco_int_npm.py\nfrom napalm import get_network_driver\nimport json\ndef main():\n    driver = get_network_driver('iosxr')\n    device = driver('HOST_ID', 'root', 'rootroot')\n    try:\n        device.open()\n        print(json.dumps(device.get_interfaces_ip(), indent=2))\n        #print(json.dumps(device.get_facts(), indent=2))\n    finally:\n        device.close()\n```", "```py\n{\n  \"Loopback0\": {\n    \"ipv4\": {\n      \"10.180.180.180\": {\n        \"prefix_length\": 32\n      }\n    }\n  },\n  \"MgmtEth0/RP0/CPU0/0\": {\n    \"ipv4\": {\n      \"172.16.2.12\": {\n        \"prefix_length\": 24\n      }\n    }\n  }\n}\n```", "```py\n#config_cisco_int_npm.py\nfrom napalm import get_network_driver\nimport json\ndef main():\n    driver = get_network_driver('iosxr')\n    device = driver('HOST_ID', 'xxx', 'xxxx')\n    try:\n        device.open()\n        device.load_merge_candidate(config='interface Lo0 \\n            description napalm_desc \\n end\\n')\n        print(device.compare_config())\n        device.commit_config()\n    finally:\n        device.close()\n```", "```py\n--- \n+++ \n@@ -47,7 +47,7 @@\n  !\n !\n interface Loopback0\n- description my custom description\n+ description napalm added new desc \n  ipv4 address 10.180.180.180 255.255.255.255\n !\n interface MgmtEth0/RP0/CPU0/0\n```", "```py\n#check_cisco_device.py\nfrom ncclient import manager\nwith manager.connect(host='device_ip, username=xxxx,   password=xxxxxx, hostkey_verify=False) as conn:\n   capabilities = []\n   for capability in conn.server_capabilities:\n      capabilities.append(capability)\n   capabilities = sorted(capabilities)\n   for cap in capabilities:\n     print(cap)\n   result = conn.get_config(source=\"running\")\n   print (result)\n```", "```py\n#show_all_interfaces.py\nfrom ncclient import manager\nwith manager.connect(host='device_ip', username=xxx,                password='xxxx', hostkey_verify=False) as conn:\n    result = conn.get_config(\"running\", filter=('subtree', \n    '<interfaces xmlns= \"http://openconfig.net/yang/      interfaces\"/>'))\n    print (result)\n```", "```py\n<rpc-reply message-id=\"urn:uuid:f4553429-ede6-4c79-aeea-5739993cacf4\" xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\" xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n <data>\n  <interfaces xmlns=\"http://openconfig.net/yang/interfaces\">\n   <interface>\n    <name>Loopback0</name>\n    <config>\n     <name>Loopback0</name>\n     <description>Configured by NETCONF</description>\n    </config>\n<!—rest of the output is skipped -->\n```", "```py\n#show_int_config.py\nfrom ncclient import manager\n# Create filter template for an interface\nfilter_temp = \"\"\"\n<filter>\n    <interfaces xmlns=\"http://openconfig.net/yang/interfaces\">\n        <interface>\n            <name>{int_name}</name>\n        </interface>\n    </interfaces>\n</filter>\"\"\"\nwith manager.connect(host='device_ip', username=xxx,                password='xxxx', hostkey_verify=False) as conn:\n    filter = filter_temp.format(int_name = \"MgmtEth0/RP0/      CPU0/0\")\n    result = m.get_config(\"running\", filter)\n    print (result)\n```", "```py\n<?xml version=\"1.0\"?>\n<rpc-reply message-id=\"urn:uuid:c61588b3-1bfb-4aa4-a9de-2a98727e1e15\" xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\" xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n <data>\n  <interfaces xmlns=\"http://openconfig.net/yang/interfaces\">\n   <interface>\n    <name>MgmtEth0/RP0/CPU0/0</name>\n    <config>\n     <name>MgmtEth0/RP0/CPU0/0</name>\n    </config>\n    <ethernet xmlns=\"http://openconfig.net/yang/interfaces/      ethernet\">\n     <config>\n      <auto-negotiate>false</auto-negotiate>\n     </config>\n    </ethernet>\n    <subinterfaces>\n     <@!— ommitted sub interfaces details to save space -->\n    </subinterfaces>\n   </interface>\n  </interfaces>\n </data>\n</rpc-reply>\n```", "```py\n<!--config-template.xml-->\n<config xmlns:xc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n <interface-configurations xmlns=\"http://cisco.com/ns/yang/  Cisco-IOS-XR-ifmgr-cfg\">\n   <interface-configuration>\n    <active>act</active>\n    <interface-name>{int_name}</interface-name>\n    <description>{int_desc}</description>\n   </interface-configuration>\n </interface-configurations>\n</config>\n```", "```py\n#config_cisco_int_desc.py\nfrom ncclient import manager\nnc_template = open(\"config-template.xml\").read()\nnc_payload = nc_template.format(int_name='Loopback0',                          int_desc=\"Configured by NETCONF\")\nwith manager.connect(host='device_ip, username=xxxx,                     password=xxx, hostkey_verify=False) as nc:\n    netconf_reply = nc.edit_config(nc_payload,       target=\"candidate\")\n    print(netconf_reply)\n    reply = nc.commit()\n    print(reply)\n```", "```py\n<?xml version=\"1.0\"?>\n<rpc-reply message-id=\"urn:uuid:6d70d758-6a8e-407d-8cb8-10f500e9f297\" xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\" xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n <ok/>\n</rpc-reply>\n<?xml version=\"1.0\"?>\n<rpc-reply message-id=\"urn:uuid:2a97916b-db5f-427d-9553-de1b56417d89\" xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\" xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n <ok/>\n</rpc-reply>\n```", "```py\n#location_services1.py\nimport requests\npayload = {}\nheaders = {}\nurl = \"https://<NSP URL>/rest-gateway/rest/api/v1/location/  services\"\nresp = requests.request(\"GET\", url, headers=headers,   data=payload)\nprint(resp.text)\n```", "```py\nurl = \"https://<NSP URL>/rest-gateway/rest/api/v1/ location/services/endpoints?endPoint=/v1/auth/token\n```", "```py\n{ \n \"response\": { \n  \"status\": 0, \n  \"startRow\": 0, \n  \"endRow\": 0, \n  \"totalRows\": 1, \n  \"data\": { \n   \"endpoints\": [ \n    { \n    \"docUrl\":\"https://<NSP_URL>/rest-gateway/api-docs#!/      authent..\", \n    \"effectiveUrl\": \"https://<NSP_URL>/rest-gateway/rest/api\", \n    \"operation\": \"[POST]\" \n    } \n   ] \n  }, \n  \"errors\": null \n } \n}\n```", "```py\n#get_token.py\nimport requests\nfrom base64 import b64encode\nimport json\n#getting base64 encoding \nmessage = 'username'+ ':' +'password'\nmessage_bytes = message.encode('UTF-8')\nbasic_token = b64encode(message_bytes)\npayload = json.dumps({\n  \"grant_type\": \"client_credentials\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Authorization': 'Basic {}'.format(str(basic_token,'UTF-8'))\n}\nurl = \"https://<NSP SERVER URL>/rest-gateway/rest/api/v1/auth/  token\"\nresp = requests.request(\"POST\", url, headers=headers,   data=payload)\ntoken = resp.json()[\"access_token\"]\nprint(resp)\nWhen executing this Python code, we will get a token for one   hour to be used for any NSP API. \n{\n  \"access_token\": \"VEtOLVNBTXFhZDQ3MzE5ZjQtNWUxZjQ0YjNl\",\n  \"refresh_token\": \"UkVUS04tU0FNcWF5ZlMTmQ0ZTA5MDNlOTY=\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}\n```", "```py\npayload = json.dumps({\n  \"grant_type\": \"refresh_token\",\n  \"refresh_token\": \"UkVUS04tU0FNcWF5ZlMTmQ0ZTA5MDNlOTY=\"\n})\n```", "```py\n url = \"https://<NSP URL>rest-gateway/rest/api/v1/auth/  revocation\"\n```", "```py\n#get_network_devices.py\nimport requests\npload={}\nheaders = {\n  'Authorization': 'Bearer {token}'.format(token)\n}\nurl = \"https://{{NSP_URL}}:8544/NetworkSupervision/rest/api/v1/  networkElements\"\nresponse = requests.request(\"GET\", url, headers=headers,   data=pload)\nprint(response.text)\n```", "```py\n#get_ports_filter.py\nimport requests\npayload={}\nheaders = {\n  'Authorization': 'Bearer {token}'.format(token)\n}\nurl = \"https://{{server}}:8544/NetworkSupervision/rest/api/v1/  ports?filter=(name='Port 1/1/1')\nresponse = requests.request(\"GET\", url, headers=headers,   data=payload)\nprint(response.text)\n```", "```py\n    #fullClassNames. The object's full class names are available in the Nokia NFMP object model documentation. We set filterExpression to search for a unique port based on the device site's ID and port name. The resultFilter attribute is used to limit the attributes that are returned by the API in the response. We are interested in the objectFullName attribute in the response of this API. \n    ```", "```py\n    #update_port_desc.py (part 2)\n    payload2 = json.dumps({\n      \"fullClassName\": \"equipment.PhysicalPort\",\n      \"properties\": {\n        \"description\": \"description added by a Python       program\"\n      }\n    })\n    url2 = \"https:// NFMP_URL:8443/nfm-p/rest/api/v1/  managedobjects/\"+port_ofn\n    response = requests.request(\"PUT\", url2, headers=headers,   data=payload2, verify=False)\n    print(response.text)\n    ```", "```py\n#subscribe.py\nimport requests\ntoken = <token obtain earlier>\nurl = \"https://NSP_URL:8544/nbi-notification/api/v1/  notifications/subscriptions\"\ndef create_subscription(category):\n  headers = {'Authorization': 'Bearer {}'.format(token) }\n  payload = {\n      \"categories\": [\n        {\n          \"name\": \"{}\".format(category)\n        }\n      ]\n  }\n  response = requests.request(\"POST\", url, json=payload,                               headers=headers, verify=False)\n  print(response.text)\nif __name__ == '__main__':\n      create_subscription(\"NSP-PACKET-ALL\")\n```", "```py\n{\n   \"response\":{\n      \"status\":0,\n      \"startRow\":0,\n      \"endRow\":0,\n      \"totalRows\":1,\n      \"data\": {\n         \"subscriptionId\":\"440e4924-d236-4fba-b590-           a491661aae14\",\n         \"clientId\": null,\n         \"topicId\":\"ns-eg-440e4924-d236-4fba-b590-           a491661aae14\",\n         \"timeOfSubscription\":1627023845731,\n         \"expiresAt\":1627027445731,\n         \"stage\":\"ACTIVE\",\n         \"persisted\":true\n      },\n      \"errors\":null\n   }\n}\n```", "```py\n#basic_consumer.py\ntopicid = 'ns-eg-ff15a252-f927-48c7-a98f-2965ab6c187d'\nconsumer = KafkaConsumer(topic_id,\n                         group_id='120',\n                         bootstrap_servers=[host_id], value_                          deserializer=lambda m: json.loads                          (m.decode('ascii')),\n                         api_version=(0, 10, 1))\ntry:\n    for message in consumer:\n        if message is None:\n            continue\n        else:\n            print(json.dumps(message.value, indent=4, sort_              keys=True))\nexcept KeyboardInterrupt:\n    sys.stderr.write('++++++ Aborted by user ++++++++\\n')\nfinally:\n    consumer.close()\n```", "```py\nhttps://{{server}}:8544/nbi-notification/api/v1/notifications/subscriptions/<subscriptionId>/renewals\n```", "```py\nhttps://{{server}}:8544/nbi-notification/api/v1/notifications/subscriptions/<subscriptionId>\n```"]