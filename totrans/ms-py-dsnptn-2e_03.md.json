["```py\nclass MyClass:\n    pass\nif __name__ == \"__main__\":\n    a = MyClass()\n    b = MyClass()\n    print(id(a) == id(b))\n    print(id(a))\n    print(id(b))\n```", "```py\nFalse\n4330224656\n4331646704\n```", "```py\n[\n  {\n    \"title\": \"After Dark in Central Park\",\n    \"year\": 1900,\n    \"director\": null,\n    \"cast\": null,\n    \"genre\": null\n  },\n  {\n    \"title\": \"Boarding School Girls' Pajama Parade\",\n    \"year\": 1900,\n    \"director\": null,\n    \"cast\": null,\n    \"genre\": null\n  },\n  {\n    \"title\": \"Buffalo Bill's Wild West Parad\",\n    \"year\": 1900,\n    \"director\": null,\n    \"cast\": null,\n    \"genre\": null\n  },\n  {\n    \"title\": \"Caught\",\n    \"year\": 1900,\n    \"director\": null,\n    \"cast\": null,\n    \"genre\": null\n  },\n  {\n    \"title\": \"Clowns Spinning Hats\",\n    \"year\": 1900,\n    \"director\": null,\n    \"cast\": null,\n    \"genre\": null\n  },\n  {\n    \"title\": \"Capture of Boer Battery by British\",\n    \"year\": 1900,\n    \"director\": \"James H. White\",\n    \"cast\": null,\n    \"genre\": \"Short documentary\"\n  },\n  {\n    \"title\": \"The Enchanted Drawing\",\n    \"year\": 1900,\n    \"director\": \"J. Stuart Blackton\",\n    \"cast\": null,\n    \"genre\": null\n  },\n  {\n    \"title\": \"Family Troubles\",\n    \"year\": 1900,\n    \"director\": null,\n    \"cast\": null,\n    \"genre\": null\n  },\n  {\n    \"title\": \"Feeding Sea Lions\",\n    \"year\": 1900,\n    \"director\": null,\n    \"cast\": \"Paul Boyton\",\n    \"genre\": null\n  }\n]\n```", "```py\n    <persons>\n    ```", "```py\n    <person>\n      <firstName>John</firstName>\n      <lastName>Smith</lastName>\n      <age>25</age>\n      <address>\n        <streetAddress>21 2nd Street</streetAddress>\n        <city>New York</city>\n        <state>NY</state>\n        <postalCode>10021</postalCode>\n      </address>\n      <phoneNumbers>\n        <number type=\"home\">212 555-1234</number>\n        <number type=\"fax\">646 555-4567</number>\n      </phoneNumbers>\n      <gender>\n        <type>male</type>\n      </gender>\n    </person>\n    ```", "```py\n    <person>\n      <firstName>Jimy</firstName>\n      <lastName>Liar</lastName>\n      <age>19</age>\n      <address>\n        <streetAddress>18 2nd Street</streetAddress>\n        <city>New York</city>\n        <state>NY</state>\n        <postalCode>10021</postalCode>\n      </address>\n      <phoneNumbers>\n        <number type=\"home\">212 555-1234</number>\n      </phoneNumbers>\n      <gender>\n        <type>male</type>\n      </gender>\n    </person>\n    ```", "```py\n    <person>\n      <firstName>Patty</firstName>\n      <lastName>Liar</lastName>\n      <age>20</age>\n      <address>\n        <streetAddress>18 2nd Street</streetAddress>\n        <city>New York</city>\n        <state>NY</state>\n        <postalCode>10021</postalCode>\n      </address>\n      <phoneNumbers>\n        <number type=\"home\">212 555-1234</number>\n        <number type=\"mobile\">001 452-8819</number>\n      </phoneNumbers>\n      <gender>\n        <type>female</type>\n      </gender>\n    </person>\n    ```", "```py\n    </persons>\n    ```", "```py\nimport json\nimport xml.etree.ElementTree as ET\nfrom pathlib import Path\nclass JSONDataExtractor:\n    def __init__(self, filepath: Path):\n        self.data = {}\n        with open(filepath) as f:\n            self.data = json.load(f)\n    @property\n    def parsed_data(self):\n        return self.data\n```", "```py\nclass XMLDataExtractor:\n    def __init__(self, filepath: Path):\n        self.tree = ET.parse(filepath)\n    @property\n    def parsed_data(self):\n        return self.tree\n```", "```py\ndef extract_factory(filepath: Path):\n    ext = filepath.name.split(\".\")[-1]\n    if ext == \"json\":\n        return JSONDataExtractor(filepath)\n    elif ext == \"xml\":\n        return XMLDataExtractor(filepath)\n    else:\n        raise ValueError(\"Cannot extract data\")\n```", "```py\ndef extract(case: str):\n    dir_path = Path(__file__).parent\n    if case == \"json\":\n        path = dir_path / Path(\"movies.json\")\n        factory = extract_factory(path)\n        data = factory.parsed_data\n        for movie in data:\n            print(f\"- {movie['title']}\")\n            director = movie[\"director\"]\n            if director:\n                print(f\"   Director: {director}\")\n            genre = movie[\"genre\"]\n            if genre:\n                print(f\"   Genre: {genre}\")\n```", "```py\n    elif case == \"xml\":\n        path = dir_path / Path(\"person.xml\")\n        factory = extract_factory(path)\n        data = factory.parsed_data\n        search_xpath = \".//person[lastName='Liar']\"\n        items = data.findall(search_xpath)\n        for item in items:\n            first = item.find(\"firstName\").text\n            last = item.find(\"lastName\").text\n            print(f\"- {first} {last}\")\n            for pn in item.find(\"phoneNumbers\"):\n                pn_type = pn.attrib[\"type\"]\n                pn_val = pn.text\n                phone = f\"{pn_type}: {pn_val}\"\n                print(f\"   {phone}\")\n```", "```py\nif __name__ == \"__main__\":\n    print(\"* JSON case *\")\n    extract(case=\"json\")\n    print(\"* XML case *\")\n    extract(case=\"xml\")\n```", "```py\npython ch03/factory/factory_method.py\n```", "```py\n* JSON case *\n- After Dark in Central Park\n- Boarding School Girls' Pajama Parade\n- Buffalo Bill's Wild West Parad\n- Caught\n- Clowns Spinning Hats\n- Capture of Boer Battery by British\n   Director: James H. White\n   Genre: Short documentary\n- The Enchanted Drawing\n   Director: J. Stuart Blackton\n- Family Troubles\n- Feeding Sea Lions\n* XML case *\n- Jimy Liar\n   home: 212 555-1234\n- Patty Liar\n   home: 212 555-1234\n   mobile: 001 452-8819\n```", "```py\nif case == \"json\":\n    path = dir_path / Path(\"movies.json\")\n    data = JSONDataExtractor(path).parsed_data\n```", "```py\nclass Frog:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return self.name\n    def interact_with(self, obstacle):\n        act = obstacle.action()\n        msg = f\"{self} the Frog encounters {obstacle} and {act}!\"\n        print(msg)\n```", "```py\nclass Bug:\n    def __str__(self):\n        return \"a bug\"\n    def action(self):\n        return \"eats it\"\n```", "```py\nclass FrogWorld:\n    def __init__(self, name):\n        print(self)\n        self.player_name = name\n    def __str__(self):\n        return \"\\n\\n\\t------ Frog World -------\"\n    def make_character(self):\n        return Frog(self.player_name)\n    def make_obstacle(self):\n        return Bug()\n```", "```py\nclass Wizard:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return self.name\n    def interact_with(self, obstacle):\n        act = obstacle.action()\n        msg = f\"{self} the Wizard battles against {obstacle} and {act}!\"\n        print(msg)\n```", "```py\nclass Ork:\n    def __str__(self):\n        return \"an evil ork\"\n    def action(self):\n        return \"kills it\"\n```", "```py\nclass WizardWorld:\n    def __init__(self, name):\n        print(self)\n        self.player_name = name\n    def __str__(self):\n        return \"\\n\\n\\t------ Wizard World -------\"\n    def make_character(self):\n        return Wizard(self.player_name)\n    def make_obstacle(self):\n        return Ork()\n```", "```py\nclass GameEnvironment:\n    def __init__(self, factory):\n        self.hero = factory.make_character()\n        self.obstacle = factory.make_obstacle()\n    def play(self):\n        self.hero.interact_with(self.obstacle)\n```", "```py\ndef validate_age(name):\n    age = None\n    try:\n        age_input = input(\n            f\"Welcome {name}. How old are you? \"\n        )\n        age = int(age_input)\n    except ValueError:\n        print(\n            f\"Age {age} is invalid, please try again...\"\n        )\n        return False, age\n    return True, age\n```", "```py\ndef main():\n    name = input(\"Hello. What's your name? \")\n    valid_input = False\n    while not valid_input:\n        valid_input, age = validate_age(name)\n    game = FrogWorld if age < 18 else WizardWorld\n    environment = GameEnvironment(game(name))\n    environment.play()\nif __name__ == \"__main__\":\n    main()\n```", "```py\nHello. What's your name? Arthur\nWelcome Arthur. How old are you? 13\n------ Frog World -------\nArthur the Frog encounters a bug and eats it!\n```", "```py\nHello. What's your name? Tom\nWelcome Tom. How old are you? 34\n------ Wizard World -------\nTom the Wizard battles against an evil ork and kills it!\n```", "```py\nimport time\nfrom enum import Enum\nPizzaProgress = Enum(\n    \"PizzaProgress\", \"queued preparation baking ready\"\n)\nPizzaDough = Enum(\"PizzaDough\", \"thin thick\")\nPizzaSauce = Enum(\"PizzaSauce\", \"tomato creme_fraiche\")\nPizzaTopping = Enum(\n    \"PizzaTopping\",\n    \"mozzarella double_mozzarella bacon ham mushrooms red_onion oregano\",\n)\n# Delay in seconds\nSTEP_DELAY = 3\n```", "```py\nclass Pizza:\n    def __init__(self, name):\n        self.name = name\n        self.dough = None\n        self.sauce = None\n        self.topping = []\n    def __str__(self):\n        return self.name\n    def prepare_dough(self, dough):\n        self.dough = dough\n        print(\n            f\"preparing the {self.dough.name} dough of your {self}...\"\n        )\n        time.sleep(STEP_DELAY)\n        print(f\"done with the {self.dough.name} dough\")\n```", "```py\nclass MargaritaBuilder:\n    def __init__(self):\n        self.pizza = Pizza(\"margarita\")\n        self.progress = PizzaProgress.queued\n        self.baking_time = 5\n    def prepare_dough(self):\n        self.progress = PizzaProgress.preparation\n        self.pizza.prepare_dough(PizzaDough.thin)\n    ...\n```", "```py\nclass CreamyBaconBuilder:\n    def __init__(self):\n        self.pizza = Pizza(\"creamy bacon\")\n        self.progress = PizzaProgress.queued\n        self.baking_time = 7\n    def prepare_dough(self):\n        self.progress = PizzaProgress.preparation\n        self.pizza.prepare_dough(PizzaDough.thick)\n    ...\n```", "```py\nclass Waiter:\n    def __init__(self):\n        self.builder = None\n    def construct_pizza(self, builder):\n        self.builder = builder\n        steps = (\n            builder.prepare_dough,\n            builder.add_sauce,\n            builder.add_topping,\n            builder.bake,\n        )\n        [step() for step in steps]\n    @property\n    def pizza(self):\n        return self.builder.pizza\n```", "```py\ndef validate_style(builders):\n    try:\n        input_msg = \"What pizza would you like, [m]argarita or [c]reamy bacon? \"\n        pizza_style = input(input_msg)\n        builder = builders[pizza_style]()\n        valid_input = True\n    except KeyError:\n        error_msg = \"Sorry, only margarita (key m) and creamy bacon (key c) are available\"\n        print(error_msg)\n        return (False, None)\n    return (True, builder)\n```", "```py\ndef main():\n    builders = dict(m=MargaritaBuilder, c=CreamyBaconBuilder)\n    valid_input = False\n    while not valid_input:\n        valid_input, builder = validate_style(builders)\n    print()\n    waiter = Waiter()\n    waiter.construct_pizza(builder)\n    pizza = waiter.pizza\n    print()\n    print(f\"Enjoy your {pizza}!\")\n```", "```py\nWhat pizza would you like, [m]argarita or [c]reamy bacon? c\npreparing the thick dough of your creamy bacon...\ndone with the thick dough\nadding the crème fraîche sauce to your creamy bacon\ndone with the crème fraîche sauce\nadding the topping (mozzarella, bacon, ham, mushrooms, red onion, oregano) to your creamy bacon\ndone with the topping (mozzarella, bacon, ham, mushrooms, red onion, oregano)\nbaking your creamy bacon for 7 seconds\nyour creamy bacon is ready\nEnjoy your creamy bacon!\n```", "```py\nimport copy\n```", "```py\nclass Website:\n    def __init__(\n        self,\n        name: str,\n        domain: str,\n        description: str,\n        **kwargs,\n    ):\n        self.name = name\n        self.domain = domain\n        self.description = description\n        for key in kwargs:\n            setattr(self, key, kwargs[key])\n```", "```py\ndef __str__(self) -> str:\n    summary = [\n        f\"- {self.name} (ID: {id(self)})\\n\",\n    ]\n    infos = vars(self).items()\n    ordered_infos = sorted(infos)\n    for attr, val in ordered_infos:\n        if attr == \"name\":\n            continue\n        summary.append(f\"{attr}: {val}\\n\")\n    return \"\".join(summary)\n```", "```py\nclass Prototype:\n    def __init__(self):\n        self.registry = {}\n    def register(self, identifier: int, obj: object):\n        self.registry[identifier] = obj\n    def unregister(self, identifier: int):\n        del self.registry[identifier]\n    def clone(self, identifier: int, **attrs) -> object:\n        found = self.registry.get(identifier)\n        if not found:\n            raise ValueError(\n              f\"Incorrect object identifier: {identifier}\"\n            )\n        obj = copy.deepcopy(found)\n        for key in attrs:\n            setattr(obj, key, attrs[key])\n        return obj\n```", "```py\ndef main():\n    keywords = (\n        \"python\",\n        \"programming\",\n        \"scripting\",\n        \"data\",\n        \"automation\",\n    )\n    site1 = Website(\n        \"Python\",\n        domain=\"python.org\",\n        description=\"Programming language and ecosystem\",\n        category=\"Open Source Software\",\n        keywords=keywords,\n    )\n    proto = Prototype()\n    proto.register(\"python-001\", site1)\n    site2 = proto.clone(\n        \"python-001\",\n        name=\"Python Package Index\",\n        domain=\"pypi.org\",\n        description=\"Repository for published packages\",\n        category=\"Open Source Software\",\n    )\n    for site in (site1, site2):\n        print(site)\n```", "```py\nif __name__ == \"__main__\":\n    main()\n```", "```py\n- Python (ID: 4369628560)\ncategory: Open Source Software\ndescription: Programming language and ecosystem\ndomain: python.org\nkeywords: ('python', 'programming', 'scripting', 'data', 'automation')\n- Python Package Index (ID: 4369627552)\ncategory: Open Source Software\ndescription: Repository site for Python's published packages\ndomain: pypi.org\nkeywords: ('python', 'programming', 'scripting', 'data', 'automation')\n```", "```py\nimport urllib.request\nclass URLFetcher:\n    def __init__(self):\n        self.urls = []\n    def fetch(self, url):\n        req = urllib.request.Request(url)\n        with urllib.request.urlopen(req) as response:\n            if response.code == 200:\n                page_content = response.read()\n             with open(\"content.html\", \"a\") as f:\n                 f.write(page_content + \"\\n\")\n             self.urls.append(url)\n```", "```py\nif __name__ == \"__main__\":\n    print(URLFetcher() is URLFetcher())\n```", "```py\nFalse\n```", "```py\nimport urllib.request\nclass SingletonType(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            obj = super(SingletonType, cls).__call__(*args, **kwargs)\n            cls._instances[cls] = obj\n        return cls._instances[cls]\n```", "```py\nclass URLFetcher(metaclass=SingletonType):\n    def __init__(self):\n        self.urls = []\n    def fetch(self, url):\n        req = urllib.request.Request(url)\n        with urllib.request.urlopen(req) as response:\n            if response.code == 200:\n                page_content = response.read()\n                with open(\"content.html\", \"a\") as f:\n                    f.write(str(page_content))\n                self.urls.append(url)\n```", "```py\ndef main():\n    my_urls = [\n            \"http://python.org\",\n            \"https://planetpython.org/\",\n            \"https://www.djangoproject.com/\",\n    ]\n    print(URLFetcher() is URLFetcher())\n    fetcher = URLFetcher()\n    for url in my_urls:\n        fetcher.fetch(url)\n    print(f\"Done URLs: {fetcher.urls}\")\nif __name__ == \"__main__\":\n    main()\n```", "```py\nTrue\nDone URLs: ['http://python.org', 'https://planetpython.org/', 'https://www.djangoproject.com/']\n```", "```py\nclass Car:\n    def __init__(self, make: str, model: str):\n        self.make = make\n        self.model = model\n        self.in_use = False\n```", "```py\nclass CarPool:\n    def __init__(self):\n        self._available = []\n        self._in_use = []\n```", "```py\n    def acquire_car(self) -> Car:\n        if len(self._available) == 0:\n            new_car = Car(\"BMW\", \"M3\")\n            self._available.append(new_car)\n        car = self._available.pop()\n        self._in_use.append(car)\n        car.in_use = True\n        return car\n```", "```py\n    def release_car(self, car: Car) -> None:\n        car.in_use = False\n        self._in_use.remove(car)\n        self._available.append(car)\n```", "```py\nif __name__ == \"__main__\":\n    pool = CarPool()\n    car_name = \"Car 1\"\n    print(f\"Acquire {car_name}\")\n    car1 = pool.acquire_car()\n    print(f\"{car_name} in use: {car1.in_use}\")\n    print(f\"Now release {car_name}\")\n    pool.release_car(car1)\n    print(f\"{car_name} in use: {car1.in_use}\")\n```", "```py\npython ch03/object_pool.py\n```", "```py\nAcquire Car 1\nCar 1 in use: True\nNow release Car 1\nCar 1 in use: False\n```"]