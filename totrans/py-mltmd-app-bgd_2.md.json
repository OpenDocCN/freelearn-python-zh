["```py\n$sudo apt-get python2.6\n\n```", "```py\n$sudo apt-get install python-imaging.\n\n```", "```py\n>>>import Image\n>>>inputImage = Image.open(\"C:\\\\PythonTest\\\\image1.jpg\")\n\n```", "```py\n>>>inputImage.save(\"C:\\\\PythonTest\\\\outputImage.jpg\")\n\n```", "```py\n>>>outputImage = Image.open(\"C:\\\\PythonTest\\\\outputImage.jpg\")\n>>>outputImage.show()\n\n```", "```py\npython ImageConverter.py [arguments]\n\n```", "```py\n    1 def convertImage(self):\n    2 pattern = \"*.\" + self.inputFormat\n    3 filetype = os.path.join(self.inputDir, pattern)\n    4 fileList = glob.glob(filetype)\n    5 inputFileList = filter(imageFileExists, fileList)\n    6\n    7 if not len(inputFileList):\n    8 print \"\\n No image files with extension %s located \\\n    9 in dir %s\"%(self.outputFormat, self.inputDir)\n    10 return\n    11 else:\n    12 # Record time before beginning image conversion\n    13 starttime = time.clock()\n    14 print \"\\n Converting images..\"\n    15\n    16 # Save image into specified file format.\n    17 for imagePath in inputFileList:\n    18 inputImage = Image.open(imagePath)\n    19 dir, fil = os.path.split(imagePath)\n    20 fil, ext = os.path.splitext(fil)\n    21 outPath = os.path.join(self.outputDir,\n    22 fil + \".\" + self.outputFormat)\n    23 inputImage.save(outPath)\n    24\n    25 endtime = time.clock()\n    26 print \"\\n Done!\"\n    27 print \"\\n %d image(s) written to directory:\\\n    28 %s\" %(len(inputFileList), self.outputDir)\n    29 print \"\\n Approximate time required for conversion: \\\n    30 %.4f seconds\" % (endtime starttime)\n\n    ```", "```py\nfoo = Image.new(mode, size, color)\n\n```", "```py\n    1 import Image\n    2 import ImageDraw\n    3 txt = \"Not really a fancy text!\"\n    4 size = (150, 50)\n    5 color = (0, 100, 0)\n    6 img = Image.new('RGB', size, color)\n    7 imgDrawer = ImageDraw.Draw(img)\n    8 imgDrawer.text((5, 20), txt) 9 img.show()\n\n    ```", "```py\n>>>import TarIO\n>>>import Images\n>>>fil = TarIO.TarIO(\"images.tar\", \"images/image1.jpg\")\n>>>img = Image.open(fil)\n>>>img.show()\n\n```", "```py\nfoo = img.resize(size, filter)\n\n```", "```py\n    1 import Image\n    2 inPath = \"C:\\\\images\\\\ImageResizeExample.jpg\"\n    3 img = Image.open(inPath)\n    4 width , height = (160, 160)\n    5 size = (width, height)\n    6 foo = img.resize(size)\n    7 foo.show()\n    8 outPath = \"C:\\\\images\\\\foo.jpg\"\n    9 foo.save(outPath)\n\n    ```", "```py\n    1 import Image\n    2 inPath = \"C:\\\\images\\\\ImageResizeExample.jpg\"\n    3 img = Image.open(inPath)\n    4 width , height = (160, 160)\n    5 size = (width, height)\n    6 filterDict = {'NEAREST':Image.NEAREST,\n    7 'BILINEAR':Image.BILINEAR,\n    8 'BICUBIC':Image.BICUBIC,\n    9 'ANTIALIAS':Image.ANTIALIAS }\n    10\n    11 for k in filterDict.keys():\n    12 outPath= \"C:\\\\images\\\\\" + k + \".jpg\"\n    13 filterOpt = filterDict[k]\n    14 foo = img.resize(size, filterOpt)\n    15 foo.save(outPath)\n\n    ```", "```py\n    import Image\n    inPath = \"C:\\\\images\\\\ResizeImageExample.jpg\"\n    img = Image.open(inPath)\n    width , height = (100, 50)\n    size = (width, height)\n    outPath = \"C:\\\\images\\\\foo.jpg\"\n    img.thumbnail(size, Image.ANTIALIAS)\n    img.save(outPath)\n\n    ```", "```py\nfoo = img.rotate(angle, filter)\n\n```", "```py\n    1 import Image\n    2 inPath = \"C:\\\\images\\\\Rotate.png\"\n    3 img = Image.open(inPath)\n    4 deg = 45\n    5 filterOpt = Image.BICUBIC\n    6 outPath = \"C:\\\\images\\\\Rotate_out.png\"\n    7 foo = img.rotate(deg, filterOpt)\n    8 foo.save(outPath)\n\n    ```", "```py\n    import Image\n    inPath = \"C:\\\\images\\\\Rotate.png\"\n    img = Image.open(inPath)\n    outPath = \"C:\\\\images\\\\Rotate_out.png\"\n    foo = img.transpose(Image.ROTATE_270)\n    foo.save(outPath)\n\n    ```", "```py\n    1 import Image\n    2 inPath = \"C:\\\\images\\\\Flip.png\"\n    3 img = Image.open(inPath)\n    4 outPath = \"C:\\\\images\\\\Flip_out.png\"\n    5 foo = img.transpose(Image.FLIP_LEFT_RIGHT)\n    6 foo.save(outPath)\n\n    ```", "```py\n    foo = img.transpose(Image.FLIP_TOP_BOTTOM)\n\n    ```", "```py\n    import ImageOps\n    # Flip image horizontally\n    foo1 = ImageOps.mirror(img)\n    # Flip image vertically\n    foo2 = ImageOps.flip(img)\n\n    ```", "```py\nimg = ImageGrab.grab()\n\n```", "```py\n    1 import ImageGrab\n    2 import time\n    3 startTime = time.clock()\n    4 print \"\\n The start time is %s sec\" % startTime\n    5 # Define the four corners of the bounding box.\n    6 # (in pixels)\n    7 left = 150\n    8 upper = 200\n    9 right = 900\n    10 lower = 700\n    11 bbox = (left, upper, right, lower)\n    12\n    13 while time.clock() < 3:\n    14 print \" \\n Capturing screen at time %.4f sec\" \\\n    15 %time.clock()\n    16 screenShot = ImageGrab.grab(bbox)\n    17 name = str(\"%.2f\"%time.clock())+ \"sec.png\"\n    18 screenShot.save(\"C:\\\\images\\\\output\\\\\" + name)\n    19 time.sleep(2)\n\n    ```", "```py\n    import Image\n    img = Image.open(\"C:\\\\images\\\\Crop.png\")\n    left = 0\n    upper = 0\n    right = 180\n    lower = 215\n    bbox = (left, upper, right, lower)\n    img = img.crop(bbox)\n    img.show()\n\n    ```", "```py\nimg = img.paste(image, box)\n\n```", "```py\nimg2 = img.copy(image)\n\n```", "```py\n    1 import Image\n    2 img = Image.open(\"C:\\\\images\\\\Crop.png\")\n    3 # Define the elements of a 4-tuple that represents\n    4 # a bounding box ( region to be cropped)\n    5 left = 0\n    6 upper = 25\n    7 right = 180\n    8 lower = 210\n    9 bbox = (left, upper, right, lower)\n    10 # Crop the smiley face from the image\n    11 smiley = img.crop(bbox_1)\n    12 # Flip the image horizontally\n    13 smiley = smiley.transpose(Image.FLIP_TOP_BOTTOM)\n    14 # Define the box as a 2-tuple.\n    15 bbox_2 = (0, 210)\n    16 # Finally paste the 'smiley' on to the image.\n    17 img.paste(smiley, bbox_2)\n    18 img.save(\"C:\\\\images\\\\Pasted.png\")\n    19 img.show()\n\n    ```", "```py\n    python ThumbnailMakerDialog.py\n\n    ```", "```py\n    pyuic4 thumbnailMaker.ui -o Ui_ThumbnailMakerDialog.py\n\n    ```", "```py\n    def _connect(self):\n    \"\"\"\n    Connect slots with signals.\n    \"\"\"\n    self.connect(self._dialog.inputFileDialogButton,\n    SIGNAL(\"clicked()\"), self._openFileDialog)\n    self.connect(self._dialog.outputLocationDialogButton,\n    SIGNAL(\"clicked()\"), self._outputLocationPath)\n    self.connect(self._dialog.okPushButton,\n    SIGNAL(\"clicked()\"), self._processImage)\n    self.connect(self._dialog.closePushButton,\n    SIGNAL(\"clicked()\"), self.close)\n    self.connect(self._dialog.aspectRatioCheckBox,\n    SIGNAL('stateChanged(int)'),\n    self._aspectRatioOptionChanged)\n\n    ```", "```py\n    def __init__(self, dialog):\n    \"\"\"\n    Constructor for class ThumbnailMaker.\n    \"\"\"\n    # This dialog can be an instance of\n    # ThumbnailMakerDialog class. Alternatively, if\n    # you have some other way to process input,\n\n    ```", "```py\n    # it will be that class. Just make sure to implement\n    # the public API methods defined in\n    # ThumbnailMakerDialog class!\n    self._dialog = dialog\n\n    ```", "```py\n    1 def processImage(self):\n    2 filePath = self._dialog.getInputImagePath()\n    3 imageFile = Image.open(filePath)\n    4\n    5 if self._dialog.maintainAspectRatio:\n    6 resizedImage = self._makeThumbnail(imageFile)\n    7 else:\n    8 resizedImage = self._resizeImage(imageFile)\n    9\n    10 rotatedImage = self._rotateImage(resizedImage)\n    11\n    12 fullPath = self._dialog.getOutImagePath()\n    13\n    14 # Finally save the image.\n    15 rotatedImage.save(fullPath)\n\n    ```", "```py\n    1 def _makeThumbnail(self, imageFile):\n    2 foo = imageFile.copy()\n    3 size = self._dialog.getSize()\n    4 imageFilter = self._getImageFilter()\n    5 foo.thumbnail(size, imageFilter)\n    6 return foo\n\n    ```", "```py\n    python Thumbnailmaker.py\n\n    ```"]