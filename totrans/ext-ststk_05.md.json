["```py\n#!jinja|yaml\n\n```", "```py\n#!jinja|yaml|gpg\n\n```", "```py\n'''\nRender Pickle files.\n\nThis file should be saved as salt/renderers/pickle.py\n'''\nfrom __future__ import absolute_import\nimport pickle\nfrom salt.ext.six import string_types\n\ndef render(pickle_data, saltenv='base', sls='', **kwargs):\n    '''\n    Accepts a pickle, and renders said data back to a python dict.\n    '''\n    if not isinstance(pickle_data, string_types):\n        pickle_data = pickle_data.read()\n\n    if pickle_data.startswith('#!'):\n        pickle_data = pickle_data[(pickle_data.find('\\n') + 1):]\n    if not pickle_data.strip():\n        return {}\n    return pickle.loads(pickle_data)\n```", "```py\napache:\n  pkg:\n    - installed\n    - refresh: True\n```", "```py\n>>> import pickle\n>>> data = {'apache': {'pkg': ['installed', {'refresh': True}]}}\n>>> out = open('/srv/salt/pickle.sls', 'w')\n>>> pickle.dump(data, out)\n>>> out.close()\n\n```", "```py\n#!pickle\n(dp0\nS'apache'\np1\n(dp2\nS'pkg'\np3\n(lp4\nS'installed'\np5\na(dp6\nS'refresh'\np7\nI01\nsass.\n```", "```py\n# salt-call --local state.show_sls pickle --out=yaml\nlocal:\n apache:\n __env__: base\n __sls__: !!python/unicode pickle\n pkg:\n - installed\n - refresh: true\n - order: 10000\n\n```", "```py\n# pip install tenjin\n\n```", "```py\n'''\nConver a file using the Tenjin templating engine\n\nThis file should be saved as salt/renderers/tenjin.py\n'''\nfrom __future__ import absolute_import\ntry:\n    import tenjin\n    from tenjin.helpers import *\n    HAS_LIBS = True\nexcept ImportError:\n    HAS_LIBS = False\nfrom salt.ext.six import string_types\n\ndef __virtual__():\n    '''\n    Only load if Tenjin is installed\n    '''\n    return HAS_LIBS\n\ndef render(tenjin_data, saltenv='base', sls='', **kwargs):\n    '''\n    Accepts a tenjin, and renders said data back to a python dict.\n    '''\n    if not isinstance(tenjin_data, string_types):\n        tenjin_data = tenjin_data.read()\n\n    if tenjin_data.startswith('#!'):\n        tenjin_data = tenjin_data[(tenjin_data.find('\\n') + 1):]\n    if not tenjin_data.strip():\n        return {}\n\n    template = tenjin.Template(input=tenjin_data)\n    return template.render(kwargs)\n```", "```py\n#!tenjin|yaml\n<?py pkg = 'apache'?>\n<?py refresh = True?>\n#{pkg}:\n  pkg:\n    - installed\n    - refresh: #{refresh}\n```", "```py\n# salt-call --local state.show_sls tenjin --out yaml\nlocal:\n apache:\n pkg:\n - installed\n - refresh: true\n - order: 10000\n __sls__: !!python/unicode tenjin\n __env__: base\n\n```"]