["```py\n@GetMapping(path = \"/investors/{investorId}/stocks\")\npublic List<Stock> fetchStocksByInvestorId(@PathVariable String investorId,\n  @RequestParam(value = \"offset\", defaultValue = \"0\") int offset,\n  @RequestParam(value = \"limit\", defaultValue = \"5\") int limit) {\n    return investorService.fetchStocksByInvestorId(investorId, offset, limit);\n}\n```", "```py\n<dependency> \n  <groupId>com.fasterxml.jackson.dataformat</groupId> \n  <artifactId>jackson-dataformat-xml</artifactId> \n</dependency> \n```", "```py\n@GetMapping(path=\"/investors/{investorId}/stocks/{symbol}\", produces={MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})\n```", "```py\n........ \n.......... \npublic ResponseEntity<Void> updateAStockOfTheInvestorPortfolio( \n    @PathVariable String investorId,  \n    @PathVariable String symbol,  \n    @RequestBody Stock stockTobeUpdated)  \n{ \n          Stock updatedStock = investorService.updateAStockByInvestorIdAndStock(investorId, symbol, stockTobeUpdated); \n.......... \n........ \n\n```", "```py\n........ \npublic Stock addNewStockToTheInvestorPortfolio(....) { \n  if (......)) { \n      designForIntentCascadePortfolioAdd(investorId); \n      return ......; \n  } \n...... \n} \n......... \n......... \npublic boolean deleteStockFromTheInvestorPortfolio(....) { \n  ...... \n  if (....) { \n     .... \n     designForIntentCascadePortfolioDelete(investorId, deletedStatus); \n    return .......; \n      } \n......... \n\nprivate void designForIntentCascadePortfolioAdd(...) { \n            ..... \n      } \nprivate void designForIntentCascadePortfolioDelete(...) { \n            ........; \n      } \n} \n```", "```py\n@GetMapping(path = \"/investors/{investorId}/stocks\") \n  public List<Stock> fetchStocksByInvestorId( \n      @PathVariable String investorId,  \n      @RequestParam \n      (value = \"offset\", defaultValue = \"0\") int offset, \n      @RequestParam \n      (value = \"limit\", defaultValue = \"5\") int limit) { \n\n  return investorService.fetchStocksByInvestorId(investorId, offset, limit); \n      } \n```", "```py\n@DeleteMapping(\"/investors/{investorId}/stocks/{symbol}\") \npublic ResponseEntity<Void> deleteAStockFromTheInvestorPortfolio( \n  @PathVariable String investor, \n  @PathVariable String symbol) { \n    if (investorService.deleteStockFromTheInvestorPortfolio(investorId, symbol)) { \n      return ResponseEntity.noContent().build(); \n    } \n    return ResponseEntity.ok(null); \n} \n```", "```py\n@PostMapping(\"/investors/{investorId}/stocks\") \npublic ResponseEntity<Void......) { \n  Stock insertedStock = investorService.addNewSto...; \n  if (insertedStock == null) { \n    return ResponseEntity.noContent().build(); \n  } \n  URI location = ServletUriComponentsBuilder..... \n  return ResponseEntity.created(location).build(); \n} \n```", "```py\npublic class InvestorNotFoundException extends RuntimeException{ \n\n      ........ \n      public InvestorNotFoundException(String exception) \n      { \n            super(exception); \n      } \n} \n```", "```py\n@GetMapping(value=\"/investors/welcome\", produces=\"text/plain;charset=UTF-8\") \n  public String responseProducesConditionCharset() {    return \" (\\\"Welcome Investor!\\\" in Japanese)\"; \n} \n```"]