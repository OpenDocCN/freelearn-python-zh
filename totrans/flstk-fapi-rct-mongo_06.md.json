["```py\n    mkdir chapter6\n    cd chapter6\n    python -m venv venv\n    source ./venv/bin/activate\n    ```", "```py\n    pip install fastapi uvicorn bcrypt==4.0.1 passlib pyjwt\n    ```", "```py\n    from pydantic import BaseModel, Field\n    from typing import List\n    class UserBase(BaseModel):\n        id: str = Field(...)\n        username: str = Field(\n            ..., \n            min_length=3, \n            max_length=15)\n        password: str = Field(...)\n    class UserIn(BaseModel):\n        username: str = Field(\n            ..., \n            min_length=3,\n            max_length=15)\n        password: str = Field(...)\n    class UserOut(BaseModel):\n        id: str = Field(...)\n        username: str = Field(\n            ..., \n            min_length=3, \n            max_length=15)\n    class UsersList(BaseModel):\n        users: List[UserOut]\n    ```", "```py\n    from fastapi import FastAPI\n    app = FastAPI()\n    ```", "```py\n    import datetime\n    import jwt\n    from fastapi import HTTPException, Security\n    from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\n    from passlib.context import CryptContext\n    class AuthHandler:\n        security = HTTPBearer()\n        pwd_context = CryptContext(schemes=[“bcrypt”], deprecated=”auto”)\n        secret = “FARMSTACKsecretString”\n    ```", "```py\n    def get_password_hash(self, password: str) -> str:\n            return self.pwd_context.hash(password)\n    ```", "```py\n        def verify_password(\n            self,\n            plain_password: str, \n            hashed_password: str) -> bool:\n            return self.pwd_context.verify(\n               plain_password, \n                hashed_password)\n    ```", "```py\n    def encode_token(self, user_id: int, username: str) -> str:\n    payload = {\n                “exp”: datetime.datetime.now(datetime.timezone.utc)\n                + datetime.timedelta(minutes=30),\n                “iat”: datetime.datetime.now(datetime.timezone.utc),\n                “sub”: {“user_id”: user_id, “username”: username},\n            }\n            return jwt.encode(payload, self.secret, algorithm=”HS256”)\n    ```", "```py\n    def decode_token(self, token: str):\n        try:\n            payload = jwt.decode(\n                token, \n                self.secret,\n                algorithms=[“HS256”])\n            return payload[“sub”]\n        except jwt.ExpiredSignatureError:\n            raise HTTPException(\n                status_code=401, \n                detail=”Signature has expired”)\n        except jwt.InvalidTokenError:\n            raise HTTPException(\n                status_code=401, \n                detail=”Invalid token”)\n    Defining the dependencyFinalize your class with the dependency to be injected in the routes that will need protection:\n\n    ```", "```py\n\n    ```", "```py\n    import json\n    import uuid\n    from fastapi import APIRouter, Body, Depends, HTTPException, Request\n    from fastapi.encoders import jsonable_encoder\n    from fastapi.responses import JSONResponse\n    from authentication import AuthHandler\n    from models import UserBase, UserIn, UserOut, UsersList\n    ```", "```py\n    router = APIRouter()\n    auth_handler = AuthHandler()\n    @router.post(“/register”, response_description=”Register user”)\n    async def register(request: Request, newUser: UserIn = Body(...)) -> UserBase:\n        users = json.loads(open(“users.json”).read())[“users”]\n        newUser.password = auth_handler.get_password_hash(newUser.password)\n        if any(user[“username”] == newUser.username for user in users):\n            raise HTTPException(status_code=409, detail=”Username already taken”)\n        newUser = jsonable_encoder(newUser)\n        newUser[“id”] = str(uuid. uuid4())\n        users.append(newUser)\n        with open(“users.json”, “w”) as f:\n            json.dump({“users”: users}, f, indent=4)\n        return newUser\n    ```", "```py\n    @router.post(“/login”, response_description=”Login user”)\n    async def login(request: Request, loginUser: UserIn = Body(...)) -> str:\n        users = json.loads(open(“users.json”).read())[“users”]\n        user = next(\n            (user for user in users if user[“username”] == loginUser.username), None\n        )\n        if (user is None) or (\n            not auth_handler.verify_password(loginUser.password, user[“password”])\n        ):\n            raise HTTPException(status_code=401, detail=”Invalid username and/or password”)\n        token = auth_handler.encode_token(str(user[“id”]), user[“username”])\n        response = JSONResponse(content={“token”: token})\n        return response\n    ```", "```py\n    from fastapi import FastAPI\n    from fastapi.middleware.cors import CORSMiddleware\n    from routers.users import router as users_router\n    origins = [“*”]\n    app = FastAPI()\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=origins,\n        allow_credentials=True,\n        allow_methods=[“*”],\n        allow_headers=[“*”],\n    )\n    app.include_router(users_router, prefix=”/users”, tags=[“users”])\n    ```", "```py\n    {\n        users:[]\n    }\n    ```", "```py\n    uvicorn app:app --reload\n    ```", "```py\n    http 127.0.0.1:8000/users/register username=”marko” password=”marko123”\n    ```", "```py\n    HTTP/1.1 200 OK\n    content-length: 138\n    content-type: application/json\n    date: Sun, 07 Apr 2024 18:38:41 GMT\n    server: uvicorn\n    {\n        “id”: “45cd212b-71eb-42b4-9d06-a74f2609764b”,\n        “password”: “$2b$12$owWXcY5KgI9s6Rdfjcpx7eXaZOMWf8NaxN.SoLJ4h8O.xzFpRqEee”,\n        “username”: “marko”\n    }\n    ```", "```py\n    {\n        “users”: [\n            {\n                “username”: “marko”,\n                “password”: “$2b$12$owWXcY5KgI9s6Rdfjcpx7eXaZOMWf8NaxN.SoLJ4h8O.xzFpRqEee”,\n                “id”: “45cd212b-71eb-42b4-9d06-a74f2609764b”\n            }\n        ]\n    ```", "```py\n    http POST 127.0.0.1:8000/users/login username=”marko” password=”marko123”\n    ```", "```py\n    HTTP/1.1 200 OK\n    content-length: 241\n    content-type: application/json\n    date: Sun, 07 Apr 2024 18:43:07 GMT\n    server: uvicorn\n    {\n        “token”: \n    “eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTI1MTcxODgsImlhdCI6MTcxMjUxNTM4OCwic3ViIjp7InVzZXJfaWQ iOiI0NWNkMjEyYi03MWViLTQyYjQtOWQwNi1hNzRmMjYwOTc2NGIiLCJ1c2VybmFtZS I6Im1hcmtvIn19.tFcJoKhTdDBDIBhCX-dCUEkCD3Fc8E-smQd2M_h5h2k”\n    }\n    ```", "```py\n    http POST 127.0.0.1:8000/users/login username=”marko” password=”marko111”\n    ```", "```py\n    HTTP/1.1 401 Unauthorized\n    content-length: 45\n    content-type: application/json\n    date: Sun, 07 Apr 2024 18:44:34 GMT\n    server: uvicorn\n    {\n        “detail”: “Invalid username and/or password”\n    }\n    ```", "```py\n    @router.get(“/list”, response_description=”List all users”)\n    async def list_users(request: Request, user_data=Depends(auth_handler.auth_wrapper)):\n\n        users = json.loads(open(“users.json”).read())[“users”]\n        return UsersList(users=users)\n    ```", "```py\n    http GET 127.0.0.1:8000/users/list ‘Authorization:Bearer <your Bearer Token>’     \n    ```", "```py\n    HTTP/1.1 200 OK\n    content-length: 76\n    content-type: application/json\n    date: Sun, 07 Apr 2024 19:07:45 GMT\n    server: uvicorn\n    {\n        “users”: [\n            {\n                “id”: “45cd212b-71eb-42b4-9d06-a74f2609764b”,\n                “username”: “marko”\n            }\n        ]\n    }\n    ```", "```py\n    HTTP/1.1 401 Unauthorized\n    content-length: 26\n    content-type: application/json\n    date: Sun, 07 Apr 2024 19:10:12 GMT\n    server: uvicorn\n    {\n        “detail”: “Invalid token”\n    }\n    ```", "```py\n    import {\n        createContext\n    } from ‘react’;\n    const AuthContext = createContext();\n    export const AuthProvider = ({\n        children\n    }) => {\n        const [user, setUser] = useState(null);\n        const [jwt, setJwt] = useState(null);\n        const [message, setMessage] = useState(null);\n        return (<AuthContext.Provider value={\n            {\n                user,\n                jwt,\n                register,\n                login,\n                logout,\n                message,\n                setMessage\n            }\n        } > {\n                children\n            } </AuthContext.Provider>)\n    }\n    ```", "```py\n        const register = async (username, password) => {\n          try {\n            const response = await fetch(‘http://127.0.0.1:8000/users/register’, {\n              method: ‘POST’,\n              headers: {\n                ‘Content-Type’: ‘application/json’,\n              },\n              body: JSON.stringify({\n                username,\n                password\n              }),\n            });\n            if (response.ok) {\n              const data = await response.json();\n              setMessage(`Registration successful: user ${data.username} created`);\n            } else {\n              const data = await response.json();\n              setMessage(`Registration failed: ${JSON.stringify(data)}`);\n            }\n          } catch (error) {\n            setMessage(`Registration failed: ${JSON.stringify(error)}`);\n          }\n        };\n    ```", "```py\n    const login = async (username, password) => {\n      setJwt(null)\n      const response = await     fetch(‘http://127.0.0.1:8000/users/login’, {\n        method: ‘POST’,\n        headers: {\n          ‘Content-Type’: ‘application/json’,\n        },\n        body: JSON.stringify({\n          username,\n          password\n        }),\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setJwt(data.token);\n        setUser({\n          username\n        });\n        setMessage(`Login successful: token ${data.token.slice(0, 10)}..., user ${username}`);\n      } else {\n        const data = await response.json();\n        setMessage(‘Login failed: ‘ + data.detail);\n        setUser({\n          username: null\n        });\n      }\n    };\n    ```", "```py\n    const logout = () => {\n      setUser(null);\n      setJwt(null);\n      setMessage(‘Logout successful’);\n    };\n    ```", "```py\n    return ( <\n      AuthContext.Provider value = {\n        {\n          user,\n          jwt,\n          register,\n          login,\n          logout,\n          message,\n          setMessage\n        }\n      } > {\n        children\n      } <\n      /AuthContext.Provider>\n    );\n    ```", "```py\n    export const useAuth = () => useContext(AuthContext);\n    ```", "```py\n    import { AuthProvider } from “./AuthContext”;\n    const App = () => {\n      return (\n        <div className=”bg-blue-200 flex flex-col justify-center items-center min-h-screen”>\n          <AuthProvider>\n            <h1 className=”text-2xl text-blue-800”> Simple Auth App </h1>\n          </AuthProvider>{“ “}\n        </div>\n      );\n    };\n    export default App\n    ```", "```py\n    import { useState } from ‘react’;\n    import { useAuth } from ‘./AuthContext’;\n    const Register = () => {\n        const [username, setUsername] = useState(‘’);\n        const [password, setPassword] = useState(‘’);\n        const { register } = useAuth();\n        const handleSubmit = (e) => {\n            e.preventDefault();\n            register(username, password)\n            setUsername(‘’)\n            setPassword(‘’)\n        };\n        return (\n            <div className=”m-5 p-5  border-2”>\n                <form onSubmit={handleSubmit} className=’grid grid-rows-3 gap-2’>\n                    <input\n                        type=”text”\n                        placeholder=”Username”\n                        className=’p-2’\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                    <input\n                        type=”password”\n                        placeholder=”Password”\n                        className=’p-2’\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <button type=”submit” className=’bg-blue-500 text-white rounded’>Register</button>\n                </form>\n            </div>\n        );\n    };\n    export default Register\n    ```", "```py\n    import { useState } from ‘react’;\n    import { useAuth } from ‘./AuthContext’;\n    const Login = () => {\n        const [username, setUsername] = useState(‘’);\n        const [password, setPassword] = useState(‘’);\n        const { login } = useAuth();\n        const handleSubmit = (e) => {\n            e.preventDefault();\n            login(username, password);\n            setUsername(‘’);\n            setPassword(‘’);\n        };\n        return (\n            <div className=”m-5 p-5  border-2”>\n                <form onSubmit={handleSubmit} className=’grid grid-rows-3 gap-2’>\n                    <input\n                        type=”text”\n                        placeholder=”Username”\n                        className=’p-2’\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                    <input\n                        type=”password”\n                        placeholder=”Password”\n                        className=’p-2’\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <button type=”submit” className=’bg-blue-500 text-white rounded’>Login</button>\n                </form>\n            </div>\n        );\n    };\n    export default Login\n    ```", "```py\n    import { useAuth } from “./AuthContext”\n    const Message = () => {\n        const { message } = useAuth()\n        return (\n            <div className=”p-2 my-2”>\n                <p>{message}</p>\n            </div>\n        )\n    }\n    export default Message\n    ```", "```py\n    import { useEffect, useState } from ‘react’;\n    import { useAuth } from ‘./AuthContext’;\n    const Users = () => {\n        const { jwt, logout } = useAuth();\n        const [users, setUsers] = useState(null);\n        useEffect(() => {\n            const fetchUsers = async () => {\n                const response = await fetch(‘http://127.0.0.1:8000/users/list’, {\n                    headers: {\n                        Authorization: `Bearer ${jwt}`,\n                    },\n                });\n                const data = await response.json();\n                setUsers(data.users);\n            };\n            if (jwt) {\n                fetchUsers();\n            }\n        }, [jwt]);\n        if (!jwt) return <div>Please log in to see all the users</div>;\n        return (\n            <div>\n                {users ? (\n                    <div className=’flex flex-col’>\n                        <h1>The list of users</h1>\n                        <ol>\n                            {users.map((user) => (\n                                <li key={user.id}>{user.username}</li>\n                            ))}\n                        </ol>\n                        <button onClick={logout} className=’bg-blue-500 text-white rounded’>Logout</button>\n                    </div>\n                ) : (\n                    <p>Loading...</p>\n                )}\n            </div>\n        );\n    };\n    export default Users;\n    ```", "```py\n    import { useState } from ‘react’;\n    import { AuthProvider } from ‘./AuthContext’;\n    import Register from ‘./Register’;\n    import Login from ‘./Login’;\n    import Users from ‘./Users’;\n    import Message from ‘./Message’;\n    const App = () => {\n      const [showLogin, setShowLogin] = useState(true)\n      return (\n        <div className=’bg-blue-200 flex flex-col justify-center items-center min-h-screen’>\n          <AuthProvider>\n            <h1 className=’text-2xl text-blue-800’>Simple Auth App</h1>\n            <Message />\n            {showLogin ? <Login /> : <Register />}\n            <button onClick={() => setShowLogin(!showLogin)}>{showLogin ? ‘Register’ : ‘Login’}</button>\n            <hr />\n            <Users />\n          </AuthProvider>\n        </div>\n      );\n    };\n    export default App;\n    ```", "```py\n        export const AuthProvider = ({ children }) => {\n        const [user, setUser] = useState(null);\n        const [jwt, setJwt] = useState(null);\n        const [message, setMessage] = useState(null);\n        useEffect(() => {\n\n            const storedJwt = localStorage.getItem(‘jwt’);\n            if (storedJwt) {\n                setJwt(storedJwt);\n                fetch(‘http://127.0.0.1:8000/users/me’, {\n                    headers: {\n                        Authorization: `Bearer ${storedJwt}`,\n                    },\n                })\n                    .then(res => res.json())\n                    .then(data => {\n                        if (data.username) {\n                            setUser({ username: data.username });\n                            setMessage(`Welcome back, ${data.username}!`);\n                        }\n                    })\n                    .catch(() => {\n                        localStorage.removeItem(‘jwt’);\n                    });\n            }\n        }, []);\n    ```", "```py\n    const login = async (username,\n      password) => {\n        setJwt(null)\n        const response = await fetch(\n          ‘http://127.0.0.1:8000/users/login’, {\n            method: ‘POST’,\n            headers: {\n              ‘Content-Type’: ‘application/json’,\n            },\n            body: JSON.stringify({\n              username,\n              password\n            }),\n          });\n        if (response.ok) {\n          const data = await response\n            .json();\n          setJwt(data.token);\n     localStorage.setItem(‘jwt’, data.token);\n          setUser({\n            username\n          });\n          setMessage(\n            `Login successful: token ${data.token.slice(0, 10)}..., user ${username}`\n            );\n        } else {\n          const data = await response\n            .json();\n          setMessage(‘Login failed: ‘ +\n            data.detail);\n          setUser({\n            username: null\n          });\n        }\n      };\n    ```", "```py\n    const logout = () => {\n        setUser(null);\n        setJwt(‘’);\n        localStorage .removeItem(‘jwt’);\n        setMessage(‘Logout successful’);\n    };\n    ```", "```py\n    import { useEffect, useState } from ‘react’;\n    import { useAuth } from ‘./AuthContext’;\n    const Users = () => {\n        const { jwt, logout } = useAuth();\n        const [users, setUsers] = useState(null);\n        const [error, setError] = useState(null);\n        useEffect(() => {\n            const fetchUsers = async () => {\n                const response = await fetch(‘http://127.0.0.1:8000/users/list’, {\n                    headers: {\n                        Authorization: `Bearer ${jwt}`,\n                    },\n                });\n                const data = await response.json();\n                if (!response.ok) {\n                    setError(data.detail);\n                }\n                setUsers(data.users);\n            };\n            if (jwt) {\n                fetchUsers();\n            }\n        }, [jwt]);\n        if (!jwt) return <div>Please log in to see all the users</div>;\n        return (\n            <div>\n                {users ? (\n                    <div className=’flex flex-col’>\n                        <h1>The list of users</h1>\n                        <ol>\n                            {users.map((user) => (\n                                <li className=’’ key={user.id}>{user.username}</li>\n                            ))}\n                        </ol>\n                        <button onClick={logout} className=’bg-blue-500 text-white rounded’>Logout</button>\n                    </div>\n                ) : (\n                    <p>{error}</p>\n                )}\n            </div>\n        );\n    };\n    export default Users;\n    ```"]