["```py\nfrom fastapi import APIRouter\nfrom login.user import Signup, User, Tourist, \n      pending_users, approved_users\nrouter = APIRouter()\n@router.get(\"/ch02/admin/tourists/list\")\ndef list_all_tourists():\n    return approved_users\n```", "```py\nfrom fastapi import APIRouter, status\nfrom places.destination import Tour, TourBasicInfo, \n    TourInput, TourLocation, tours, tours_basic_info, \n    tours_locations\nrouter = APIRouter()\n@router.put(\"/ch02/admin/destination/update\", \n            status_code=status.HTTP_202_ACCEPTED)\ndef update_tour_destination(tour: Tour):\n    try:\n        tid = tour.id\n        tours[tid] = tour\n        tour_basic_info = TourBasicInfo(id=tid, \n           name=tour.name, type=tour.type, \n           amenities=tour.amenities, ratings=tour.ratings)\n        tour_location = TourLocation(id=tid, \n           name=tour.name, city=tour.city, \n           country=tour.country, location=tour.location )\n        tours_basic_info[tid] = tour_basic_info\n        tours_locations[tid] = tour_location\n        return { \"message\" : \"tour updated\" }\n    except:\n        return { \"message\" : \"tour does not exist\" } \n```", "```py\nfrom fastapi import FastAPI, Request\nfrom admin import manager\nfrom login import user\nfrom feedback import post\nfrom places import destination\nfrom tourist import visit\napp = FastAPI()\napp.include_router(manager.router)\napp.include_router(user.router)\napp.include_router(destination.router)\napp.include_router(visit.router)\napp.include_router(\n    post.router,\n    prefix=\"/ch02/post\"\n)\n```", "```py\nuvicorn main:app –-reload\n```", "```py\nfrom fastapi import APIRouter, status\n@router.put(\"/ch02/admin/destination/update\", \n              status_code=status.HTTP_202_ACCEPTED)\ndef update_tour_destination(tour: Tour):\n    try:\n        tid = tour.id\n        tours[tid] = tour\n        tour_basic_info = TourBasicInfo(id=tid, \n           name=tour.name, type=tour.type, \n           amenities=tour.amenities, ratings=tour.ratings)\n        tour_location = TourLocation(id=tid, \n           name=tour.name, city=tour.city, \n           country=tour.country, location=tour.location )\n        tours_basic_info[tid] = tour_basic_info\n        tours_locations[tid] = tour_location\n        return { \"message\" : \"tour updated\" }\n    except:\n        return { \"message\" : \"tour does not exist\" }\n@router.get(\"/ch02/admin/destination/list\", \n            status_code=200)\ndef list_all_tours():\n    return tours\n```", "```py\nfrom fastapi.responses import JSONResponse\n@router.post(\"/ch02/admin/destination/add\")\nadd_tour_destination(input: TourInput):\n    try:\n        tid = uuid1()\n        tour = Tour(id=tid, name=input.name,\n           city=input.city, country=input.country, \n           type=input.type, location=input.location,\n           amenities=input.amenities, feedbacks=list(), \n           ratings=0.0, visits=0, isBooked=False)\n        tour_basic_info = TourBasicInfo(id=tid, \n           name=input.name, type=input.type, \n           amenities=input.amenities, ratings=0.0)\n        tour_location = TourLocation(id=tid, \n           name=input.name, city=input.city, \n           country=input.country, location=input.location )\n        tours[tid] = tour\n        tours_basic_info[tid] = tour_basic_info\n        tours_locations[tid] = tour_location\n        tour_json = jsonable_encoder(tour)\n        return JSONResponse(content=tour_json, \n            status_code=status.HTTP_201_CREATED)\n    except:\n        return JSONResponse(\n         content={\"message\" : \"invalid tour\"}, \n         status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)\n```", "```py\nfrom fastapi import APIRouter, HTTPException, status\n@router.post(\"/ch02/tourist/tour/booking/add\")\ndef create_booking(tour: TourBasicInfo, touristId: UUID):\n    if approved_users.get(touristId) == None:\n         raise HTTPException(status_code=500,\n            detail=\"details are missing\")\n    booking = Booking(id=uuid1(), destination=tour,\n      booking_date=datetime.now(), tourist_id=touristId)\n    approved_users[touristId].tours.append(tour)\n    approved_users[touristId].booked += 1\n    tours[tour.id].isBooked = True\n    tours[tour.id].visits += 1\n    return booking\n```", "```py\nfrom fastapi import FastAPI, Request, status, HTTPException\nclass PostFeedbackException(HTTPException):\n    def __init__(self, detail: str, status_code: int):\n        self.status_code = status_code\n        self.detail = detail\n\nclass PostRatingException(HTTPException):\n    def __init__(self, detail: str, status_code: int):\n        self.status_code = status_code\n        self.detail = detail\n```", "```py\nfrom fastapi.responses import JSONResponse\nfrom fastapi import FastAPI, Request, status, HTTPException\n@app.exception_handler(PostFeedbackException)\ndef feedback_exception_handler(req: Request, \n          ex: PostFeedbackException):\n    return JSONResponse(\n        status_code=ex.status_code,\n        content={\"message\": f\"error: {ex.detail}\"}\n        )\n\n@app.exception_handler(PostRatingException)\ndef rating_exception_handler(req: Request, \n             ex: PostRatingException):\n     return JSONResponse(\n        status_code=ex.status_code,\n        content={\"message\": f\"error: {ex.detail}\"}\n        )\n```", "```py\nfrom handlers import PostRatingException,\n                         PostFeedbackException\n\n@router.post(\"/feedback/add\")\ndef post_tourist_feedback(touristId: UUID, tid: UUID, \n      post: Post, bg_task: BackgroundTasks):\n    if approved_users.get(touristId) == None and \n          tours.get(tid) == None:\n        raise PostFeedbackException(detail='tourist and \n                tour details invalid', status_code=403)\n    assessId = uuid1()\n    assessment = Assessment(id=assessId, post=post, \n          tour_id= tid, tourist_id=touristId) \n    feedback_tour[assessId] = assessment\n    tours[tid].ratings = (tours[tid].ratings + \n                            post.rating)/2\n    bg_task.add_task(log_post_transaction, \n           str(touristId), message=\"post_tourist_feedback\")\n    assess_json = jsonable_encoder(assessment)\n    return JSONResponse(content=assess_json, \n                         status_code=200)\n@router.post(\"/feedback/update/rating\")\ndef update_tour_rating(assessId: UUID, \n               new_rating: StarRating):\n    if feedback_tour.get(assessId) == None:\n        raise PostRatingException(\n         detail='tour assessment invalid', status_code=403)\n    tid = feedback_tour[assessId].tour_id\n    tours[tid].ratings = (tours[tid].ratings + \n                            new_rating)/2\n    tour_json = jsonable_encoder(tours[tid])\n    return JSONResponse(content=tour_json, status_code=200)\n```", "```py\nfrom fastapi.responses import PlainTextResponse \nfrom starlette.exceptions import HTTPException as \n         GlobalStarletteHTTPException\nfrom fastapi.exceptions import RequestValidationError\nfrom handler_exceptions import PostFeedbackException, \n        PostRatingException\n@app.exception_handler(GlobalStarletteHTTPException)\ndef global_exception_handler(req: Request, \n                 ex: str\n    return PlainTextResponse(f\"Error message: \n       {ex}\", status_code=ex.status_code)\n@app.exception_handler(RequestValidationError)\ndef validationerror_exception_handler(req: Request, \n                 ex: str\n    return PlainTextResponse(f\"Error message: \n       {str(ex)}\", status_code=400)\n```", "```py\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\nclass Tourist(BaseModel):\n    id: UUID\n    login: User\n    date_signed: datetime\n    booked: int\n    tours: List[TourBasicInfo]\n\n@router.post(\"/ch02/user/signup/\")\nasync def signup(signup: Signup):\n    try:\n        userid = uuid1()\n        login = User(id=userid, username=signup.username, \n               password=signup.password)\n        tourist = Tourist(id=userid, login=login, \n          date_signed=datetime.now(), booked=0, \n          tours=list() )\n        tourist_json = jsonable_encoder(tourist)\n        pending_users[userid] = tourist_json\n        return JSONResponse(content=tourist_json, \n            status_code=status.HTTP_201_CREATED)\n    except:\n        return JSONResponse(content={\"message\": \n         \"invalid operation\"}, \n         status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)\n```", "```py\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\n@router.get(\"/ch02/destinations/details/{id}\")\ndef check_tour_profile(id: UUID):\n    tour_info_json = jsonable_encoder(tours[id])\n    return JSONResponse(content=tour_info_json)\n```", "```py\n@router.get(\"/ch02/destinations/list/all\")\ndef list_tour_destinations():\n    tours_json = jsonable_encoder(tours)\n    resp_headers = {'X-Access-Tours': 'Try Us', \n       'X-Contact-Details':'1-900-888-TOLL', \n       'Set-Cookie':'AppName=ITS; Max-Age=3600; Version=1'}\n    return JSONResponse(content=tours_json, \n          headers=resp_headers)\n```", "```py\nfrom fastapi import APIRouter, Response\n@router.get(\"/ch02/destinations/mostbooked\")\ndef check_recommended_tour(resp: Response):\n    resp.headers['X-Access-Tours'] = 'TryUs'\n    resp.headers['X-Contact-Details'] = '1900888TOLL'\n    resp.headers['Content-Language'] = 'en-US'\n    ranked_desc_rates = sort_orders = sorted(tours.items(),\n         key=lambda x: x[1].ratings, reverse=True)\n    return ranked_desc_rates;\n```", "```py\n@router.get(\"/ch02/tourist/tour/booked\")\ndef show_booked_tours(touristId: UUID):\n    if approved_users.get(touristId) == None:\n         raise HTTPException(\n         status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, \n         detail=\"details are missing\", \n         headers={\"X-InputError\":\"missing tourist ID\"})\n    return approved_users[touristId].tours\n```", "```py\nfrom datetime import datetime\ndef audit_log_transaction(touristId: str, message=\"\"):\n    with open(\"audit_log.txt\", mode=\"a\") as logfile:\n        content = f\"tourist {touristId} executed {message} \n            at {datetime.now()}\"\n        logfile.write(content)\n```", "```py\nfrom fastapi import APIRouter, status, BackgroundTasks\n@router.post(\"/ch02/user/login/\")\nasync def login(login: User, bg_task:BackgroundTasks):\n    try:\n        signup_json = \n           jsonable_encoder(approved_users[login.id]) \n        bg_task.add_task(audit_log_transaction,\n            touristId=str(login.id), message=\"login\")\n        return JSONResponse(content=signup_json, \n            status_code=status.HTTP_200_OK)\n    except:\n        return JSONResponse(\n         content={\"message\": \"invalid operation\"}, \n         status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n@router.get(\"/ch02/user/login/{username}/{password}\")\nasync def login(username:str, password: str, \n                    bg_task:BackgroundTasks):\n     tourist_list = [ tourist for tourist in \n        approved_users.values() \n          if tourist['login']['username'] == username and \n              tourist['login']['password'] == password] \n     if len(tourist_list) == 0 or tourist_list == None:\n        return JSONResponse(\n           content={\"message\": \"invalid operation\"}, \n           status_code=status.HTTP_403_FORBIDDEN)\n     else:\n        tourist = tourist_list[0]\n        tour_json = jsonable_encoder(tourist)\n        bg_task.add_task(audit_log_transaction, \n          touristId=str(tourist['login']['id']), message=\"login\")\n        return JSONResponse(content=tour_json, \n            status_code=status.HTTP_200_OK)\n```", "```py\n@router.get(\"/feedback/list\")\nasync def show_tourist_post(touristId: UUID):\n    tourist_posts = [assess for assess in feedback_tour.values() \n            if assess.tourist_id == touristId]\n    tourist_posts_json = jsonable_encoder(tourist_posts) \n    return JSONResponse(content=tourist_posts_json,\n                   status_code=200)\n```", "```py\nfrom utility import check_post_owner\n@router.delete(\"/feedback/delete\")\nasync def delete_tourist_feedback(assessId: UUID, \n              touristId: UUID ):\n    if approved_users.get(touristId) == None and \n            feedback_tour.get(assessId):\n        raise PostFeedbackException(detail='tourist and \n              tour details invalid', status_code=403)    post_delete = [access for access in feedback_tour.values()\n               if access.id == assessId]\n    for key in post_delete:\n        is_owner = await check_post_owner(feedback_tour, \n                       access.id, touristId)\n        if is_owner:\n            del feedback_tour[access.id]\n    return JSONResponse(content={\"message\" : f\"deleted\n          posts of {touristId}\"}, status_code=200)\n```", "```py\nuvicorn main:app --workers 5 --reload\n```", "```py\n@app.middleware(\"http\")\nasync def log_transaction_filter(request: Request, \n             call_next):\n    start_time = datetime.now()\n    method_name= request.method\n    qp_map = request.query_parasms\n    pp_map = request.path_params\n    with open(\"request_log.txt\", mode=\"a\") as reqfile:\n        content = f\"method: {method_name}, query param: \n            {qp_map}, path params: {pp_map} received at \n            {datetime.now()}\"\n        reqfile.write(content)\n    response = await call_next(request)\n    process_time = datetime.now() - start_time\n    response.headers[\"X-Time-Elapsed\"] = str(process_time)\n    return response\n```"]