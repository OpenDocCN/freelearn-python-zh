- en: '*Appendix B*: Dictionary'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ALGOL** – A family of programming languages developed in 1958 by a committee
    of European and American computer scientists.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Algorithm** – A set of rules or a description of steps to be followed in
    problem-solving operations. Examples of algorithms used in computer science are
    sorting and searching algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Analog** – Using signals or information represented by continuously changing
    a physical quantity, such as the voltage or spatial position.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application** – A computer program that is designed for a particular purpose.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arithmetic** – A branch of mathematics dealing with the properties and manipulation
    of numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arithmetic** **overflow/underflow** – The result of a calculation that exceeds
    the memory space designated to hold the result.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Array type** – A data type that represents a collection of elements that
    can be selected by the use of indices.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ASCII-table** – A character-encoding standard that uses numbers to represent
    characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Assembly** **language** – A name used for any low-level programming language
    that has a strong correlation between its instructions and the corresponding machine
    code instructions.'
  prefs: []
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Base 10** – See **Decimal**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Base 16** – See **Hexadecimal**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Base 2** – See **Binary**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Binary** – A numbering system that works in base 2 – that is, it only uses
    two digits: zero and one.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blank line** – Used in programming to separate blocks of code that logically
    belong together.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Block comment** – A comment in programming code that spans several lines.
    See **Comment**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Boolean algebra** – A branch of algebra in which operations are performed
    only on the true and false values. The name comes from George Boole, who introduced
    it in 1847.'
  prefs: []
  type: TYPE_NORMAL
- en: '`true` and `false` values. See **Boolean algebra**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Break** – A statement used by many programming languages to exit the current
    code block. See **Code block**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Breakpoint** – Used when debugging applications to pause the execution at
    a particular line of code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Brief code** – A precursor of the Short code programming language. See **Short
    code**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**BUG** – A tag used as a comment to indicate code that contains a bug that
    has not yet been fixed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Byte** – A group of binary digits, usually 8, that is operated on as a single
    unit.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Byte code** – Intermediate code that a programming language can be compiled
    into. It can then be interpreted more efficiently if the source code was interpreted
    directly.'
  prefs: []
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**C** – A programming language designed by Dennis Ritchie at Bell Labs in 1972\.
    Its syntax has influenced many other programming languages.'
  prefs: []
  type: TYPE_NORMAL
- en: '**C#** – Pronounced C sharp. A programming language developed by Microsoft
    in 2000.'
  prefs: []
  type: TYPE_NORMAL
- en: '**C++** – A programming language created by Bjarne Stroustrup in 1985\. It
    was developed as an object-oriented extension to the C programming language.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camelCase`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Central processing unit** – The component of a computer in which operations
    are controlled and executed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class method** – In object orientation, a class method is a function that
    belongs to a class. A class method is called on the class itself, rather than
    an instance. See **Method**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class** – In object-orientation, a class is a template used for creating
    objects. See **Object**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client software** – An application that plays the client role in a client-server
    solution.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client-server** – A distributed application structure that partitions the
    workload between a server and one or more clients. The client initiates the communication,
    and the server provides a function or a service to the clients.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clojure** – A programming language created by Rich Hickey in 2007\. The language
    is a Lisp dialect. See **LISP**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud computing** – On-demand availability of computer system resources,
    such as storage or computing power, that is accessed over the internet.'
  prefs: []
  type: TYPE_NORMAL
- en: '**COBOL** – This acronym stands for **Common Business-Oriented Language** and
    is a compiled English-like programming language designed for business use. COBOL
    was developed in 1959 by a group called CODASYL and is based on the FLOW-MATIC
    programming language. See FLOW-MATIC.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code block** – A block of code that usually spans several lines and belongs
    to the same statement. The beginning and end are often marked with { and } or
    an indentation.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code module** – A section of code that implements a particular functionality.
    It is usually packaged in a single unit, such as a code file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Command prompt** – See **Terminal window**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Comment** – A programmer-readable explanation or annotation in the source
    code. Comments give instructions to humans and are ignored by the programming
    language.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Lisp** – A programming language developed to consolidate other Lisp
    dialects. It was released in 1984.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compiled language** – A programming language that will translate all the
    statements that make up a program. When all the statements are translated, the
    program can be executed. Programs written in a compiled programming language will
    typically be faster than programs written in an interpreted language.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Composite type** – A data type that is made up of more than one value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`if`, `for`, and `while` statements.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continue** – A statement used in loops. When encountered, the current iteration
    will be halted, and execution will immediately continue with the next iteration.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CPU** – See **Central Processing Unit**.'
  prefs: []
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Database** – An organized set of data, stored and accessed electronically.
    Other applications typically use the data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Debugger** – A tool used by programmers to find errors in a program code.
    It will let the programmer step through the code line by line while executing
    the code, and the programmer can inspect the values of variables and the execution
    path that is taken.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Decimal** – A numbering system that works in base 10 – that is, it uses 10
    digits to represent numbers. It is the numbering system that we usually use.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dictionary type** – A data type that stores data in key-value pairs. The
    key value must be unique for every item in the dictionary.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Directive comment** – A comment in the source code not intended for humans
    but other programming tools, such as compilers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Division by zero** – An error that occurs in a division where the divisor
    is zero.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docstring** – A comment that is formatted in a predefined way.'
  prefs: []
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Encapsulation** – Used in object orientation to restrict direct access to
    some of an object''s components.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enum`, that has a set of named values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`as x + 1`.'
  prefs: []
  type: TYPE_NORMAL
- en: F
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**First-class function** – If a language supports first-class functions, this
    means that functions can be passed as arguments to other functions or returned
    as a result from a function.'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIXME** – A tag that is used in comments to indicate that a particular section
    of code needs to be rewritten or updated.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Floating-point types** – A data type that can represent real numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**FLOW-MATIC** – A programming language designed by Grace Hopper in 1955\.
    It was the first English-like data processing language.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fortran** – A programming language invented in 1954 at IBM by John Backus.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Function** – A sequence of program instructions that are packaged as one
    unit and (usually) given a name.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Function call** – A call to a function will pass control to that function.
    Once the function has executed, control is given back.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Functional programming** – A paradigm where programs are constructed by composing
    and applying functions.'
  prefs: []
  type: TYPE_NORMAL
- en: G
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Gate** – See **Logic gate**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Go** – A programming language designed by Robert Griesemer, Rob Pike, and
    Ken Thompson that was released in 2009.'
  prefs: []
  type: TYPE_NORMAL
- en: H
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**HACK** – A tag that is used in comments to indicate that a particular section
    of code is a workaround and that this code needs to be rewritten in the future.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hard drive** – An electromechanical data storage device that uses rapidly
    rotating platters coated with magnetic material. It can be used to store and retrieve
    digital data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardware** – The machine and physical components that make up a computer
    or other electronic systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hexadecimal** – A numbering system that works in base 16 – that is, it uses
    16 digits to represent numbers. It uses the digits 0–9, followed by the letters
    A–F, with A being 10 and F being 15.'
  prefs: []
  type: TYPE_NORMAL
- en: I
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**IaaS** – **Infrastructure as a service** is an online service that let users
    use an instant computing infrastructure that is provisioned and managed over the
    internet.'
  prefs: []
  type: TYPE_NORMAL
- en: '**IDE** – An **integrated development environment** is a program or suite of
    programs that gives a programmer the tools needed to, among other things, write,
    edit, debug, and test applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Immutable data** – Data that cannot be changed once it has got its initial
    value. See **Mutable data**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Indentation** – A technique for making code more readable where lines of
    code have initial empty space at the beginning of the line.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Instance** – See **Object**.'
  prefs: []
  type: TYPE_NORMAL
- en: '`21`, `133`, `-7`, and `0`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Integer data type** – A data type that can represent integer values.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Interpreted language** – A programming language that translates programming
    instructions from a given programming language into machine code, one statement
    at a time. Once a statement is translated into machine code, it is sent to the
    central processing unit for execution.'
  prefs: []
  type: TYPE_NORMAL
- en: '**iOS** – A mobile operating system created and developed by Apple Inc.'
  prefs: []
  type: TYPE_NORMAL
- en: '**IP address** – A numerical address assigned to each device connected to a
    computer network that uses the Internet Protocol for communication.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Iteration statement** – A statement that causes other statements that are
    defined within its body to repeat zero an infinite number of times.'
  prefs: []
  type: TYPE_NORMAL
- en: J
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Java** – A programming language developed by James Gosling. It was first
    released in 1995.'
  prefs: []
  type: TYPE_NORMAL
- en: '**JavaScript** – A programming language developed by Brendan Eich. It was first
    released in 1995.'
  prefs: []
  type: TYPE_NORMAL
- en: K
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Keyword** – In a programming language, a keyword is a reserved word that
    has a particular meaning in that language.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kotlin** – A programming language designed by the Czech software development
    company JetBrains. It was first released in 2011.'
  prefs: []
  type: TYPE_NORMAL
- en: L
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Language syntax** – See **Syntax**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lisp** – A family of programming languages, initially specified by John McCarthy
    in 1958\. Among the modern dialects of Lisp, we can find languages such as Racket,
    Common Lisp, Scheme, and Clojure.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logic gate** – A physical electronic device that is used to implement logical
    operations on binary input.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Low-level programming** – Creating programs that interact directly with the
    computer hardware. A benefit of low-level programming is that there is no abstraction
    level between the hardware and the written code, making the programs execute faster.'
  prefs: []
  type: TYPE_NORMAL
- en: M
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Machine code** – Program instructions written in a numerical format that
    can be executed directly by the central processing unit.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Member variable** – A concept used in object-oriented programming where a
    variable belongs to one particular object.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Memory** – A generic term for all the different technologies a computer may
    use to store data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Method** – A concept used in object-oriented programming. A method is a function
    associated with a class and its objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mobile application** – An application written to be executed on a mobile
    device.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mutable data** – Data that can be changed. See **Immutable data**.'
  prefs: []
  type: TYPE_NORMAL
- en: N
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Namespace** – A way to group objects of various kinds and ensure that all
    objects within the same namespace have unique names.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Napster** – A service released in 1999 where users could share music over
    a peer-to-peer network.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node** – A device in a computer network.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Numeric type** – A data type that can represent numeric values. See **Integer
    data type** and **Floating-point types**.'
  prefs: []
  type: TYPE_NORMAL
- en: O
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Objective-C** – A programming language designed by Tom Love and Brad Cox.
    It was first released in 1984\. It was the primary programming language supported
    by Apple until the introduction of Swift in 2014\. See **Swift**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object orientation** – A software engineering paradigm in which concepts
    are represented as objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object-oriented programming** – A paradigm based on a concept where programs
    are constructed using objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object** – A representation used in object orientation that is made up of
    data in the form of fields (often called attributes or properties) and code in
    the form of functions (referred to as methods to distinguish them from functions
    defined outside classes).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ones'' complement** – The ones'' complement of a binary number is accomplished
    by inverting all the bits in that number (swapping zeros for ones and vice versa).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Opcode** – An abbreviation of **operation code**, this is a portion of a
    machine language instruction that specifies what operation to perform.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open source** – Software for which the source code is made freely available
    and may be redistributed and modified.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operand** – An input value to an operator. See **Operator**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operator** – A symbol that performs an operation that behaves like a function
    but is syntactically different from a function call.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Order of operation** – The order in which multiple operations will be executed.'
  prefs: []
  type: TYPE_NORMAL
- en: P
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**P2P** – See **Peer-to-peer**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**PaaS** – **Platform as a service** is a type of cloud service that provides
    a platform where customers can develop, run, and manage applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Package manager** – An application, or collection of applications, that automates
    the process of downloading, installing, configuring, and removing software.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Peer-to-peer** – A distributed network application where the nodes in the
    network communicate directly with each other.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Perl** – A programming language developed by Larry Wall. It was first released
    in 1987.'
  prefs: []
  type: TYPE_NORMAL
- en: '**PHP** – A programming language developed by Rasmus Lerdorf. It was first
    released in 1995.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pixel** – A physical point in a raster image or the smallest element of a
    computer screen (or other types of display devices).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plankalkül** – One of the first programming languages, designed by Konrad
    Zuse. It was first released in 1948.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Processor** – See **Central processing unit**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Punch card** – A card with punched holes. The location of the holes can be
    used to represent data or program code instructions. This was formerly used by
    computers as the primary storage device.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pure function** – A function that has the property of always returning the
    same value for the same argument and whose evaluation has no side effects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python** – A programming language designed by Guido van Rossum. It was first
    released in 1990.'
  prefs: []
  type: TYPE_NORMAL
- en: R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Record type** – A data type that is made up of several fields. Each field
    can be of any other type, including other records.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Register** – A component inside a central processing unit used for storing
    information.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Repository** – A storage location for software or code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reserved word** – A reserved word is a word that is reserved by a programming
    language and cannot be used by the programmer as a name for things such as functions
    and variables.'
  prefs: []
  type: TYPE_NORMAL
- en: S
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SaaS** – An online service, **software as a service**, where software is
    licensed and hosted online.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalability** – The ability to handle a growing amount of work.'
  prefs: []
  type: TYPE_NORMAL
- en: '`true` or `false` and can execute different blocks of code depending on the
    result.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sequence** – An enumerated collection of objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server** – A computer program or device that provides services and functionality
    to other devices, called clients.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Set type** – A data type that can store a collection of unique values without
    a particular order.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scheme** – A programming language developed by Guy L. Steele and Gerald Jay
    Sussman. It was first released in 1975.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Short code** – Considered by many as being the first high-level programming
    language, proposed by John Mauchly in 1949.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Signed magnitude representation** – A way to represent negative numbers in
    binary form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simula** – A programming language design by Ole-Johan Dahl. It was first
    released in 1962.'
  prefs: []
  type: TYPE_NORMAL
- en: '**SMR** – See **Signed magnitude representation**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Snake case** – A style for formating multi-word names. In snake case, only
    lowercase characters are used, and an underscore separates words.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source code** – The code written by programmers using the syntax of a programming
    language.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standalone application** – An application that can work offline.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Statement** – A unit of code of an imperative programming language that expresses
    some action.'
  prefs: []
  type: TYPE_NORMAL
- en: '**String type** – A data type that can represent a sequence of characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Substring** – A continuous sequence of characters within a string.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Swift** – A programming language developed by Apple Inc. as the successor
    of the Objective-C programming language. It was released in 2014\. See **Objective-C**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax** – Rules that define what symbols and keywords make up a programming
    language. It also defines how the keywords and symbols should be combined to form
    valid source code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax error** – An error that occurs when source code is breaking the syntax
    rules of a programming language.'
  prefs: []
  type: TYPE_NORMAL
- en: T
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**TCP/IP** – A suite of protocols that are used for transmitting data over
    the internet.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Terminal window** – An application that lets the user execute text commands,
    usually to the operating system.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text string** – See **String type**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TODO** – A tag that is used in comments to indicate that a particular section
    of code is still not implemented.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Touchscreen** – A screen that lets the user control a connected device by
    touching the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Two''s complement** – A technique for representing signed numbers in binary
    form.'
  prefs: []
  type: TYPE_NORMAL
- en: U
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Unicode** – A character-encoding standard that can represent over 140,000
    different characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unsigned integer** – A data type that can only represent positive integer
    values.'
  prefs: []
  type: TYPE_NORMAL
- en: V
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Variable** – A named representation of a memory address used in programming
    to access data.'
  prefs: []
  type: TYPE_NORMAL
- en: W
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Web browser** – An application used to access information on the world wide
    web.'
  prefs: []
  type: TYPE_NORMAL
