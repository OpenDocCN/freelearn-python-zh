- en: Logging and Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned about the concepts of serverless architectures and understood
    the basics and the internals of AWS's serverless service, AWS Lambda. We have
    also created some example serverless projects to understand the concepts better.
    During the course of our learning, we have also learned the basics of several
    other AWS services, such as alarms, SNS, SQS, S3 buckets, and CloudWatch.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn about how to do the logging and monitoring for
    the serverless systems that we are building. Logging and monitoring software code
    and systems are very important, as they helps us with the telemetry and disaster
    recovery. Logging is a process where we store the logs emitted by our code or
    by our architecture as a whole. Monitoring is a process where we closely monitor
    the activities, status, and health of the components and processes in our code
    or architecture.
  prefs: []
  type: TYPE_NORMAL
- en: So, you will be learning how to set up and understand the monitoring suite of
    AWS Lambda, which is closely integrated with the monitoring service of AWS, the
    CloudWatch Dashboards. We will also learn about the logging service of AWS, the
    CloudWatch Logs service. Finally, we will also learn about and understand the
    distributed tracing and monitoring service of AWS, the CloudTrail service.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding CloudTrail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lambda's metrics in CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lambda's logs in CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging statements in Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding CloudWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, CloudWatch is the logging and monitoring service of AWS.
    We have already looked at and learned about the CloudWatch Alarms, which are a
    sub-feature of CloudWatch. We will now learn about the graphing suite of the service.
    Almost every service in the AWS environment has a way to send it's logs and metrics
    to CloudWatch for logging and monitoring purposes. Each service might have several
    metrics which can be monitored, depending on the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, AWS Lambda also has some metrics, such as the invocation count,
    the invocation''s running time, and so on, which it sends to CloudWatch. It is
    also helpful to note that the developers can also send custom metrics to CloudWatch.
    So in the following steps, we shall be learning about the different parts and
    functions of AWS CloudWatch corresponding to AWS Lambda:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, let us see what the CloudWatch console looks like and also get a feel
    for it by navigating around the console. Browse to [console.aws.amazon.com/cloudwatch/](https://signin.aws.amazon.com/signin?redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fcloudwatch%2F%3Fstate%3DhashArgs%2523%26isauthcode%3Dtrue&client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fcloudwatch&forceMobileApp=0):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, there is a lot of information in the CloudWatch console. So,
    we shall now try to understand each component one after the other. In the left
    side, we can see a list of options, which includes Dashboards, Alarms, Billing,
    and so on. We shall try to understand all of them and their functionality as part
    of understanding the CloudWatch console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A dashboard here is a panel of CloudWatch Metrics that the user can configure.
    For example, a user might want to have a particular set of server (EC2) metrics
    at a single place to be able to monitor them better. This is where AWS CloudWatch
    Dashboards come into play. When you click on the Dashboards option on the left,
    you can see the Dashboards console, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us go ahead and create a new dashboard by clicking the blue Create dashboard
    button on the top left-hand side of the console. The following box appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will take you to the next step, where you will be asked to select a widget
    type for the dashboard. There are four types of widgets which are currently available.
    The widget selection screen looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the sake of this tutorial, I am choosing the Line style widget. You can
    choose whatever widget would fit your graphing style and the monitoring you need
    to do. Once you select a widget style and click the blue Configure button, you
    will be redirected to a wizard where you will be asked to add a metric as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select one of the available metrics at the bottom and it will be added to the
    widget. Once you are done with selecting the metrics, click on the blue Create
    widget button in the lower-right part of the page as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you can see the dashboard that you have just created in the Dashboards section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully learned and created an AWS CloudWatch Dashboard. We will
    now move on to learning about CloudWatch Events. We have already learned about
    CloudWatch Alarms in the previous chapters, looking at both their functionality
    and how to create and work with them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Events link in the CloudWatch menu on the left. You will be redirected
    to the page of CloudWatch Events, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the blue Create rule button, you will be redirected to the
    Events creation wizard, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There can be two types of events, namely Event Pattern and Schedule, each of
    which have different purposes. Here we will only learn about the Schedule type,
    as it comes in handy for scheduling Lambda functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00158.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The rate can be either set in terms of Minutes, Hours, or Days, or can be set
    as a cron expression, whichever way you are comfortable with. Now, the target
    needs to be selected. The target can be any valid Lambda function, as shown in
    the following drop-down menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00159.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have selected the function, you can click on the blue Configure details
    at the bottom. It will take you to the Configure rule details page as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00160.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you enter the name and the description of the rule that you want to create,
    you can click on the blue Create rule button at the bottom. This will successfully
    create an event, and the same will be reflected in your CloudWatch console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00161.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully added a cron event for a Lambda function which means that
    Lambda will be invoked at regular intervals, as specified by the user in the settings
    of the event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we shall try to understand the Logs feature of AWS CloudWatch. This is
    where the Lambda functions store their logs. You can click on the Logs link in
    the menu on the left-hand side to access the console of CloudWatch Logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00162.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the complete list of logs for all of the Lambda functions we have
    ever created throughout the course of the book. When you click on a log group,
    you can find more details about it, and also options for customization. Each log
    stream is an invocation of the Lambda function that the log is associated with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also make use of the additional functionality provided by CloudWatch
    for handling the logs data, which can be seen in the drop-down Actions menu in Log
    Groups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00164.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we will wrap up by exploring and learning about the CloudWatch Metrics.
    The metrics console can be accessed by clicking on the Metrics option on the left-hand
    side of the CloudWatch console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00165.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can select any option in the menu at the bottom for graphing the metrics.
    For the purpose of this tutorial, I have added a Lambda metric, which is the number
    of errors in the function, `serverless-api`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00166.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Understanding CloudTrail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CloudTrail is another monitoring service of AWS where you can look at all of
    the events and trails that have happened in your AWS account. This service is
    a bit more detailed than the CloudWatch service in how it records and stores the
    events and trails.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we shall explore and learn about this service in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The AWS CloudTrail''s dashboard can be accessed at [console.aws.amazon.com/cloudtrail/](https://signin.aws.amazon.com/signin?redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fcloudtrail%2Fhome%3Fstate%3DhashArgs%2523%26isauthcode%3Dtrue&client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fcloudtrail&forceMobileApp=0):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00167.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The list of events in your AWS account can be seen on the left-hand side of
    the CloudTrail menu when you click on the Event history button. The Event history
    page looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00168.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The third functionality of CloudTrail is the trails. The user can set up trails
    for their AWS services, such as Lambda. The trails that have been set up can be
    found on the Trails dashboard. This can be accessed by going to the Trails console
    by clicking on the Trails option in the menu on the left-hand side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00169.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let us understand how to create a trail in the CloudTrail dashboard. You
    can go to the main dashboard of CloudTrail and click on the blue Create trail
    button. This will take you to the trail creation wizard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00170.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can enter the details of your trail here. You can leave the default options
    as they are for the Apply trail to all regions and the Management events options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00171.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, moving on to the next setting, select the Lambda option and click on the
    Log all current and future functions in the options list. This will ensure that
    all of our Lambda functions are logged properly with CloudTrail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00172.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the final Storage location option, select an S3 bucket for storing
    the CloudTrail logs. This can be an already existing bucket or you can also ask
    CloudTrail to create a new bucket for this purpose. I am using an existing bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00173.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After all of the details and settings have been configured accordingly, you
    can click on the blue Create trail button to create the trail. Now, you see the
    trail you have just created in your CloudTrail dashboard as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00174.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, when you click on the trail that you have just created, you can see all
    of the details with which it has been configured as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00175.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also notice a very interesting option that enables you to configure
    CloudWatch Logs along with SNS to notify you of any specific activities, for example
    when there is an error in a Lambda function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00176.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And finally, you can also add tags to the trail, just like you can with the
    rest of your AWS services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00177.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, let us understand how to configure CloudWatch Logs for our trail.
    So, for this you need to click on the blue Configure button in the CloudWatch
    Logs section above the Tags section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00178.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click Continue, it takes you to the creation wizard where you need
    to configure the permissions accordingly with your IAM role settings. For the
    purpose of this tutorial, I have selected the Create a new IAM Role option as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00179.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After you have finished configuring the IAM role settings, you can click on
    the blue Allow button at the bottom. After a couple of seconds of validation,
    the CloudWatch Logs get configured, which you can see in the same CloudWatch Logs
    section here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00180.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Lambda’s metrics in CloudWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have learned and understood how the CloudWatch and the CloudTrail services
    work with respect to logging and monitoring, we shall move on to try and implement
    them for our Lambda function(s). In this section, you will learn about the types
    of metrics that Lambda possesses, which are monitored by CloudWatch, and how to
    create a dashboard with all those metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to previous sections in this chapter and book, we shall try and understand
    the concepts in the form of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you navigate over to your AWS Lambda console, you will see the Lambda
    function which you have already created, in the list of available functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00181.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the function, you will see two available options on the top:
    Configuration and Monitoring. Navigate to the Monitoring section. You will see
    a dashboard of metrics, which contains the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invocations
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Duration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Errors
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Throttles
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterator age
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DLQ errors
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00182.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Invocations and duration
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00183.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Errors and Throttles
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00184.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Iterator age and DLQ errors
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us understand each of them in detail. The first metric is the Invocations
    metric, which has the time on the *x* axis and the number of invocations of the
    Lambda function on the *y *axis. This metric helps us understand when and how
    many times our Lambda function has been invocated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00185.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click Jump to Logs, it takes you to the CloudWatch Logs console of
    the Lambda invocations, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00186.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And when you click on the Jump to Metrics option, it will take you to the CloudWatch
    Metrics dashboard of that particular metric, which gives you a much more customized
    and granular graph of the same metric, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00187.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The second metric in the Lambda''s monitoring dashboard is the Duration metric,
    which tells you the duration of each invocation of our Lambda function. It also
    has time as the *X *axis, and the duration time in the *Y *axis in the unit of
    milliseconds. It also tells you the maximum, average, and the minimum duration
    of your Lambda function over a period of time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00188.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, clicking on the Jump to Logs button will take you to the same page as
    that of the previous metric. Clicking on the Jump to Metrics button will take
    you to the CloudWatch metric page of the Duration metric, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00189.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The third metric is the Errors metric, which helps us keep a look out for errors
    in our invocations of the Lambda function. The *Y *axis is the number of errors
    while the *X *axis is the timeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00190.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The CloudWatch Dashboard of the same metric can be seen by clicking on the
    Jump to Metrics link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00191.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The fourth metric is Throttles. This metric counts the number of times your
    Lambda functions have been throttled, which means the number of times the concurrent
    executions of the functions have breached the set limit of 1,000 per region. We
    won''t encounter this metric very frequently as the Lambda functions which we
    build as examples in this book stay well within the concurrency limits:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00192.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'By clicking on the Jump to Metrics link, we can also see this metric in our
    CloudWatch Metrics dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00193.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The fifth metric is the iterator age. This is only valid for functions which
    are triggered by the DynamoDB stream or the Kinesis stream. It gives the age of
    the last record which is processed by the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00194.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Jump to Metrics link takes you to the CloudWatch Metrics dashboard of this
    metric:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00195.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The sixth and the last metric is the DLQ errors metric. This gives the number
    of errors that occurred while sending messages (failed event payloads) to a dead
    letter queue. Most often the errors would be caused due to faulty permission configurations
    and timeouts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00196.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Jump to Metrics link will take you to the CloudWatch Metrics dashboard
    of the same metric:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00197.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Lambda's logs in CloudWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have learned about and understood the metrics of AWS Lambda in great
    detail. Now, we will move on to understanding the logs of the Lambda functions.
    As always, we will try to understand them via the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Logs for AWS Lambda functions are stored in CloudWatch's Logs service. You can
    access the CloudWatch Logs service by going to the Logs dashboard by clicking
    on the main CloudWatch dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you click on the logs of the serverless-api, /aws/lambda/serverless-api,
    in the list, we go to the log stream of the serverless API, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00198.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Each log stream here is a Lambda invocation. So, whenever your Lambda function
    is invoked, it creates a new log stream here. If the invocation is a part of Lambda''s
    retry process, then the logs for that particular invocation will be written under
    the most recent log stream. A single log stream can contain several details. But
    firstly, let us look at what a particular log stream looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00199.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, if you look closely, you can observe that Lambda''s logs also give out
    information about the duration of the Lambda function''s invocation, the duration
    for which it is billed for, and also the memory used by the function. These metrics
    help in understanding our functions'' performance better and for further optimization
    and fine tuning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00200.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are several columns in CloudWatch Logs for you to select from, which
    are not shown in the preceding screenshots. These are the available options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00201.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, when you select more of those, you will see them in your dashboard as columns.
    These come in handy when you''re doing a much more fine-grained debugging of our
    Lambda functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00202.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Logging statements in Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Logging your comments and errors clearly is always a good software practice.
    So, we shall now understand how to log from inside of Lambda functions. There
    are broadly two ways of logging inside Lambda functions. We shall now learn and
    understand them via examples from the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first way is to use Python''s `logging` library. This is widely used as
    a standard practice for logging in Python scripts. We shall edit the code we have
    written previously for the serverless API and add in the logging statements in
    it. The code will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00203.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code which is in the preceding screenshot is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you run the Lambda function after saving, you can see a successful
    execution statement in green color, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00204.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the Details option, you can see the logging statements being
    executed clearly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00205.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next way of logging statements is by simply using the `print` statements
    in Python. It is the most common way of printing out logging statements in Python
    scripts. So, we shall add a `Hello from Lambda` print statement in our function
    code and see if we get the logs in our Lambda execution or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00206.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code for this Lambda function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When we click on Test for executing the code, we should see a green color message,
    which indicates a successful execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00207.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, just like we did previously, clicking on the Details toggle will give
    you the complete execution logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00208.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see the `Hello from Lambda` message too. Out of the two available logging
    options for our Lambda functions, it is always preferable to use the first option
    which is via the Python's logging module. This is because that module gives greater
    flexibility and helps you differentiate between info, error, and debug logs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about the monitoring and the logging capabilities
    of AWS. We also learned about the available monitoring and logging tools inside
    the AWS environment. We have also learned how to monitor our Lambda functions
    and how to set up logging for our Lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned about the logging and monitoring practices that are followed
    by the industry and the various ways one can log statements in Python from inside
    of a Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to scale up our serverless architectures
    to become distributed and to be able to handle massive workloads while still preserving
    the positives of a serverless setup.
  prefs: []
  type: TYPE_NORMAL
