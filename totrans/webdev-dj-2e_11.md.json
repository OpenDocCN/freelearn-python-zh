["```py\n<span class=\"books_read\">You have read {{ books_read }} books</span>\n<ul>\n{% for book in book_list %}\n<li>{{ book }} </li>\n{% endfor %}\n</ul>\n```", "```py\n<span class=\"books_read\">You have read {{ book_list|length }}</span>\n<ul>\n{% for book in book_list %}\n<li>{{ book }}</li>\n{% endfor %}\n</ul>\n```", "```py\nfrom django import template\nregister = template.Library()\n```", "```py\nmkdir templatetags\n```", "```py\ntouch custom_filter.py\n```", "```py\nfrom django import template\n```", "```py\nregister = template.Library()\n```", "```py\n@register.filter\ndef my_filter(value, arg):\n    # Implementation logic of the filter\n```", "```py\n{% load custom_filter %}\n```", "```py\n{{ some_value|generic_filter:\"arg\" }}\n```", "```py\nnames = \"john,doe,mark,swain\"\n```", "```py\n{{ names|explode:\",\" }}\n```", "```py\n[\"john\", \"doe\", \"mark\", \"swain\"]\n```", "```py\n    python manage.py startapp filter_demo\n    ```", "```py\n    mkdir templatetags\n    ```", "```py\n    from django import template\n    register = template.Library()\n    ```", "```py\n    @register.filter\n    def explode(value, separator):\n        return value.split(separator)\n    ```", "```py\n    <html>\n    <head>\n      <title>Custom Filter Example</title>\n    <body>\n    explode_filter module so that it can be used inside the templates. To achieve this, Django will look for the explode_filter module under the templatetags directory and if, found, will load it for use.In the next line, you pass the `names` variable passed to the template and apply the `explode` filter to it, while also passing in the comma \"`,`\" as a separator value to the filter.\n    ```", "```py\n    from django.shortcuts import render\n    render helper from the django.shortcuts module, which helps render the templates. Once the import is complete, it defines a new view function named index(), which renders index.html.\n    ```", "```py\n    from django.urls import path\n    from . import views\n    urlpatterns = [path('', views.index, name='index')]\n    ```", "```py\n    urlpatterns = [path('filter_demo/', include('filter_demo.urls')),\\\n                   ….] \n    ```", "```py\n    INSTALLED_APPS = [….,\\\n                      INSTALLED_APPS section.\n    ```", "```py\n    python manage.py runserver localhost:8000\n    ```", "```py\nfrom django.template.defaultfilters import stringfilter\n```", "```py\n@register.filter\n@stringfilter\ndef generic_string_filter(value, arg):\n    # Logic for string filter implementation\n```", "```py\n{% load explode_filter %}\n```", "```py\nmkdir templatetags\n```", "```py\ntouch custom_tags.py\n```", "```py\nfrom django import template\nregister = template.Library()\n```", "```py\n@register.simple_tag\ndef generic_simple_tag(arg1, arg2):\n    # Logic to implement a generic simple tag\n```", "```py\n{% load custom_tag %}\n```", "```py\n{% custom_simple_tag \"argument1\" \"argument2\" %}\n```", "```py\n    from django import template\n    register = template.Library()\n    @register.simple_tag\n    def greet_user(message, username):\n        return\\\n        \"{greeting_message},\\\n         {user}!!!\".format(greeting_message=message, user=username)\n    ```", "```py\n    <html>\n    <head>\n    <title>Simple Tag Template Example</title>\n    </head>\n    <body>\n    {% load simple_tag %}\n    {% greet_user \"Hey there\" username %}\n    </body>\n    </html>\n    ```", "```py\n    {% greet_user \"Hey there\" username %}\n    ```", "```py\n    def greeting_view(request):\n        return render(request),\\\n                     ('simple_tag_template.html', {'username': 'jdoe'})\n    ```", "```py\n    path('greet', views.greeting_view, name='greeting')\n    ```", "```py\n    python manage.py runserver localhost:8000\n    ```", "```py\n@register.simple_tag(takes_context=True)\n```", "```py\n@register.simple_tag(takes_context=True)\ndef contextual_greet_user(context, message):\n    username = context['username']\n    return \"{greeting_message},\\\n            {user}\".format(greeting_message=message, user=username)\n```", "```py\n{% contextual_greet_user \"Hey there\" %}\n```", "```py\n@register.inclusion_tag('template_file.html')\ndef my_inclusion_tag(arg):\n    # logic for processing\n    return {'key1': 'value1'}\n```", "```py\n{% load custom_tags %}\n```", "```py\n{% my_inclusion_tag \"argument1\" %}\n```", "```py\n    from django import template\n    register = template.Library()\n    @register.inclusion_tag('book_list.html')\n    def book_list(books):\n        book_list = [book_name for book_name, \\\n                     book_author in books.items()]\n        return {'book_list': book_list}\n    ```", "```py\n    books_list = [book_name for book_name, \\\n                  book_author in books.items()]\n    ```", "```py\n    return {'book_list': books_list}\n    ```", "```py\n    <ul>\n      {% for book in book_list %}\n    <li>{{ book }}</li>\n      {% endfor %}\n    </ul>\n    ```", "```py\n    {% for book in book_list %}\n    ```", "```py\n    <li>{{ book }}</li>\n    ```", "```py\n    <html>\n    <head>\n      <title>Simple Tag Template Example</title>\n    </head>\n    <body>\n    {% load simple_tag inclusion_tag %}\n    {% greet_user \"Hey\" username %}\n      <br />\n      <span class=\"message\">You have read the following books     till date</span>\n    {% book_list books %}\n    </body>\n    </html>\n    ```", "```py\n    {% load simple_tag inclusion_tag %}\n    ```", "```py\n    {% book_list books %}\n    ```", "```py\n    def greeting_view(request):\n        books = {\"The night rider\": \"Ben Author\",\\\n                 \"The Justice\": \"Don Abeman\"}\n        return render(request),\\\n                     ('simple_tag_template.html'),\\\n                     ({'username': 'jdoe', 'books': books})\n    ```", "```py\n    python manage.py runserver localhost:8080\n    ```", "```py\nfrom django.http import HttpResponse\nfrom django.views import View\nclass IndexView(View):\n    def get(self, request):\n        return HttpResponse(\"Hey there!\")\n```", "```py\nurlpatterns = [path('my_path', IndexView.as_view(), \\\n                    name='index_view')]\n```", "```py\n    python manage.py startapp book_management\n    ```", "```py\n    from django.db import models\n    class Book(models.Model):\n        name = models.CharField(max_length=255)\n        author = models.CharField(max_length=50)\n    ```", "```py\n    INSTALLED_APPS = [….,\\\n                      'book_management']\n    ```", "```py\n    python manage.py makemigrations\n    python manage.py migrate\n    ```", "```py\n    from django import forms\n    from .models import Book\n    class BookForm(forms.ModelForm):\n        class Meta:\n            model = Book\n            fields = ['name', 'author']\n    ```", "```py\n    from django import forms\n    from .models import Book\n    ```", "```py\n    class Meta:\n        model = Book\n        fields = ['name', 'author']\n    ```", "```py\n    from django.http import HttpResponse\n    from django.views.generic.edit import FormView\n    from django.views import View\n    from .forms import BookForm\n    class BookRecordFormView(FormView):\n        template_name = 'book_form.html'\n        form_class = BookForm\n        success_url = '/book_management/entry_success'\n        def form_valid(self, form):\n            form.save()\n            return super().form_valid(form)\n    class FormSuccessView(View):\n        def get(self, request, *args, **kwargs):\n            return HttpResponse(\"Book record saved successfully\")\n    ```", "```py\n    class BookRecordFormView(FormView)\n    ```", "```py\n    template_name = 'book_form.html'\n    form_class = BookForm\n    success_url = '/book_management/entry_success'\n    ```", "```py\n    def form_valid(self, form):\n        form.save()\n        return super().form_valid(form)\n    class FormSuccessView(View)\n    ```", "```py\n        def get(self, request, *args, **kwargs):\n            return HttpResponse(\"Book record saved successfully\")\n    ```", "```py\n    <html>\n      <head>\n        <title>Book Record Insertion</title>\n      </head>\n      <body>\n        <form method=\"POST\">\n          {% csrf_token %}\n          {{ form.as_p }}\n          <input type=\"submit\" value=\"Save record\" />\n        </form>\n      </body>\n    </html>\n    ```", "```py\n    from django.urls import path\n    from .views import BookRecordFormView, FormSuccessView\n    urlpatterns = [path('new_book_record',\\\n                   BookRecordFormView.as_view(),\\\n                   name='book_record_form'),\\\n                   path('entry_success', FormSuccessView.as_view()),\\\n                       (name='form_success')]\n    ```", "```py\n    urlpatterns = [path('book_management/',\\\n                   include('book_management.urls')),\\\n                   ….]\n    ```", "```py\n    python manage.py runserver localhost:8080\n    ```", "```py\nfrom django.views.generic.edit import CreateView\nfrom .models import Book\nclass BookCreateView(CreateView):\nmodel = Book\n    fields = ['name', 'author']\n    template_name = 'book_form.html'\n    success_url = '/book_management/entry_success'\n```", "```py\nurlpatterns = [….,\\\n               path('book_record_create'),\\\n                    (BookCreateView.as_view(), name='book_create')]\n```", "```py\nfrom django.views.generic.edit import UpdateView\nfrom .models import Book\nclass BookUpdateView(UpdateView):\n    model = Book\n    fields = ['name', 'author']\n    template_name = 'book_form.html'\n    success_url = '/book_management/entry_success'\n```", "```py\nurlpatterns = [path('book_record_update/<int:pk>'),\\\n                   (BookUpdateView.as_view(), name='book_update')]\n```", "```py\nfrom django.views.generic.edit import DeleteView\nfrom .models import Book\nclass BookDeleteView(DeleteView):\n    model = Book\n    template_name = 'book_delete_form.html'\n    success_url = '/book_management/delete_success\n```", "```py\n<html>\n  <head>\n    <title>Delete Book Record</title>\n  </head>\n  <body>\n    <p>Delete Book Record</p>\n    <form method=\"POST\">\n      {% csrf_token %}\n      Do you want to delete the book record?\n      <input type=\"submit\" value=\"Delete record\" />\n    </form>\n  </body>\n</html>\n```", "```py\nurlpatterns = [….,\\\n               path('book_record_delete/<int:pk>'),\\\n               (BookDeleteView.as_view(), name='book_delete')]\n```", "```py\nfrom django.views.generic import DetailView\nclass BookRecordDetailView(DetailView):\n    model = Book\n    template_name = 'book_detail.html'\n```", "```py\n<html>\n  <head>\n    <title>Book List</title>\n  </head>\n  <body>\n    <span>Book Name: {{ object.name }}</span><br />\n    <span>Author: {{ object.author }}</span>\n  </body>\n</html>\n```", "```py\npath('book_record_detail/<int:pk>'),\\\n     (BookRecordDetail.as_view(), name='book_detail')\n```"]