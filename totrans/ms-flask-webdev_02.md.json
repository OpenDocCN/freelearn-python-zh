["```py\n$ virtualenv env\n```", "```py\nflask-sqlalchemy\n```", "```py\n    # MySQL\n    PyMySQL\n    # Postgres\n    psycopg2\n    # MSSQL\n    pyodbc\n    # Oracle\n    cx_Oracle\n```", "```py\n$ source env/bin/activate\n$ pip install -r requirements.txt\n```", "```py\ndatabasetype+driver://user:password@host:port/db_name \n```", "```py\n# SQLite connection string/uri is a path to the database file - relative or absolute.\nsqlite:///database.db \n# MySQL \nmysql+pymysql://user:password@ip:port/db_name \n# Postgres \npostgresql+psycopg2://user:password@ip:port/db_name \n# MSSQL \nmssql+pyodbc://user:password@dsn_name \n# Oracle \noracle+cx_oracle://user:password@ip:port/db_name \n```", "```py\nclass DevConfig(Config): \n  debug = True \n  SQLALCHEMY_DATABASE_URI = \"YOUR URI\" \n```", "```py\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom config import DevConfig\n\napp = Flask(__name__)\napp.config.from_object(DevConfig)\ndb = SQLAlchemy(app) \n```", "```py\nclass User(db.Model): \n  id = db.Column(db.Integer(), primary_key=True) \n  username = db.Column(db.String(255)) \n  password = db.Column(db.String(255)) \n\n  def __init__(self, username): \n    self.username = username \n\n  def __repr__(self): \n    return \"<User '{}'>\".format(self.username) \n```", "```py\nusername = db.Column('user_name', db.String(255))\n```", "```py\nclass User(db.Model): \n  __tablename__ = 'user_table_name' \n\n  id = db.Column(db.Integer(), primary_key=True) \n  username = db.Column(db.String(255)) \n  password = db.Column(db.String(255)) \n```", "```py\nfrom main import app, db, User \n\n@app.shell_context_processor\ndef make_shell_context():\n  return dict(app=app, db=db, User=User) \n```", "```py\n    # Tell Flask where to load our shell context\n    $ export FLASK_APP=manage.py\n $ flask shell\n    >>> db.create_all()\n```", "```py\n$ sqlite3 database.db .tables user\n```", "```py\n    >>> user = User(username='fake_name')\n    >>> db.session.add(user)\n    >>> db.session.commit()\n```", "```py\n    >>> users = User.query.all()\n    >>> users\n    [<User 'fake_name'>]\n```", "```py\n    >>> users = User.query.limit(10).all()\n```", "```py\n    # ascending\n    >>> users = User.query.order_by(User.username).all()\n    # descending\n    >>> users = User.query.order_by(User.username.desc()).all()\n```", "```py\n>>> user = User.query.first()\n>>> user.username\nfake_name\n```", "```py\n>>> user = User.query.get(1)\n>>> user.username\nfake_name\n```", "```py\n>>> users = User.query.order_by(\n            User.username.desc()\n ).limit(10).first()\n```", "```py\n>>> User.query.paginate(1, 10)\n<flask_sqlalchemy.Pagination at 0x105118f50>\n```", "```py\n>>> page = User.query.paginate(1, 10)\n# returns the entities in the page\n>>> page.items\n[<User 'fake_name'>]\n# what page does this object represent\n>>> page.page\n1\n# How many pages are there\n>>> page.pages\n1\n# are there enough models to make the next or previous page\n>>> page.has_prev, page.has_next\n(False, False)\n# return the next or previous page pagination object\n# if one does not exist returns the current page\n>>> page.prev(), page.next()\n(<flask_sqlalchemy.Pagination at 0x10812da50>,\n<flask_sqlalchemy.Pagination at 0x1081985d0>)\n```", "```py\n    >>> users = User.query.filter_by(username='fake_name').all()\n```", "```py\n    >>> users = User.query.order_by(User.username.desc())\n            .filter_by(username='fake_name')\n            .limit(2)\n            .all()\n```", "```py\n    >>> user = User.query.filter(\n            User.id > 1\n        ).all()\n```", "```py\n    >>> from sqlalchemy.sql.expression import not_, or_\n    >>> user = User.query.filter(\n        User.username.in_(['fake_name']),\n        User.password == None\n    ).first()\n    # find all of the users with a password\n    >>> user = User.query.filter(\n        not_(User.password == None)\n    ).first()\n    # all of these methods are able to be combined\n    >>> user = User.query.filter(\n        or_(not_(User.password == None), User.id >= 1)\n    ).first()\n```", "```py\n>>> User.query.filter_by(username='fake_name').update({\n 'password': 'test'\n})\n# The updated models have already been added to the session\n>>> db.session.commit()\n```", "```py\n>>> user = User.query.filter_by(username='fake_name').first()\n>>> db.session.delete(user)\n>>> db.session.commit()\n```", "```py\n@event.listens_for(Engine, \"connect\")\ndef set_sqlite_pragma(dbapi_connection, connection_record):\n    cursor = dbapi_connection.cursor()\n    cursor.execute(\"PRAGMA foreign_keys=ON\")\n    cursor.close()\n```", "```py\nclass Post(db.Model): \n  id = db.Column(db.Integer(), primary_key=True) \n  title = db.Column(db.String(255)) \n  text = db.Column(db.Text()) \n  publish_date = db.Column(db.DateTime()) \n  user_id = db.Column(db.Integer(), db.ForeignKey('user.id')) \n\n  def __init__(self, title): \n    self.title = title \n\n  def __repr__(self): \n    return \"<Post '{}'>\".format(self.title) \n```", "```py\nclass User(db.Model): \n  id = db.Column(db.Integer(), primary_key=True) \n  username = db.Column(db.String(255)) \n  password = db.Column(db.String(255)) \n  posts = db.relationship( \n    'Post', \n    backref='user', \n    lazy='dynamic' \n  ) \n```", "```py\n    >>> user = User.query.get(1)\n    >>> new_post = Post('Post Title')\n    >>> new_post.user_id = user.id\n    >>> user.posts\n    []\n    >>> db.session.add(new_post)\n    >>> db.session.commit()\n    >>> user.posts\n    [<Post 'Post Title'>]\n```", "```py\n    >>> second_post = Post('Second Title')\n    >>> second_post.user = user\n    >>> db.session.add(second_post)\n    >>> db.session.commit()\n    >>> user.posts\n    [<Post 'Post Title'>, <Post 'Second Title'>]\n```", "```py\n    >>> second_post = Post('Second Title')\n    >>> user.posts.append(second_post)\n    >>> db.session.add(user)\n    >>> db.session.commit()\n    >>> user.posts\n    [<Post 'Post Title'>, <Post 'Second Title'>]\n```", "```py\n    >>> user.posts\n    [<Post 'Post Title'>, <Post 'Second Title'>] >>> user.posts.order_by(Post.publish_date.desc()).all()\n    [<Post 'Second Title'>, <Post 'Post Title'>]\n```", "```py\nclass Post(db.Model): \n    id = db.Column(db.Integer(), primary_key=True) \n    title = db.Column(db.String(255)) \n    text = db.Column(db.Text()) \n    publish_date = db.Column(db.DateTime()) \n    comments = db.relationship( \n      'Comment', \n      backref='post', \n      lazy='dynamic' \n    ) \n    user_id = db.Column(db.Integer(), db.ForeignKey('user.id'))\n    def __init__(self, title): \n        self.title = title\n    def __repr__(self): \n        return \"<Post '{}'>\".format(self.title)\n\n```", "```py\nclass Comment(db.Model): \n    id = db.Column(db.Integer(), primary_key=True) \n    name = db.Column(db.String(255)) \n    text = db.Column(db.Text()) \n    date = db.Column(db.DateTime()) \n    post_id = db.Column(db.Integer(), db.ForeignKey('post.id'))\n    def __repr__(self): \n        return \"<Comment '{}'>\".format(self.text[:15]) \n```", "```py\ntags = db.Table('post_tags', \n    db.Column('post_id', db.Integer, db.ForeignKey('post.id')), \n    db.Column('tag_id', db.Integer, db.ForeignKey('tag.id')) \n) \n\nclass Post(db.Model): \n    id = db.Column(db.Integer(), primary_key=True) \n    title = db.Column(db.String(255)) \n    text = db.Column(db.Text()) \n    publish_date = db.Column(db.DateTime()) \n    comments = db.relationship( \n      'Comment', \n      backref='post', \n      lazy='dynamic' \n    ) \n    user_id = db.Column(db.Integer(), db.ForeignKey('user.id')) \n    tags = db.relationship( \n        'Tag', \n        secondary=tags, \n        backref=db.backref('posts', lazy='dynamic') \n    ) \n\n    def __init__(self, title): \n        self.title = title\n    def __repr__(self): \n        return \"<Post '{}'>\".format(self.title) \n\nclass Tag(db.Model): \n    id = db.Column(db.Integer(), primary_key=True) \n    title = db.Column(db.String(255))\n\n    def __init__(self, title): \n        self.title = title \n\n    def __repr__(self): \n        return \"<Tag '{}'>\".format(self.title) \n```", "```py\npost_id   tag_id \n1         1 \n1         3 \n2         3 \n2         4 \n2         5 \n3         1 \n3         2 \n```", "```py\n    >>> post_one = Post.query.filter_by(title='Post Title').first()\n    >>> post_two = Post.query.filter_by(title='Second Title').first()\n    >>> tag_one = Tag('Python')\n    >>> tag_two = Tag('SQLAlchemy')\n    >>> tag_three = Tag('Flask')\n    >>> post_one.tags = [tag_two]\n    >>> post_two.tags = [tag_one, tag_two, tag_three]\n    >>> tag_two.posts\n    [<Post 'Post Title'>, <Post 'Second Title'>] >>> db.session.add(post_one)\n    >>> db.session.add(post_two)\n    >>> db.session.commit()\n```", "```py\n    >>> tag_one.posts.append(post_one)\n    [<Post 'Post Title'>, <Post 'Second Title'>] >>> post_one.tags\n    [<Tag 'SQLAlchemy'>, <Tag 'Python'>]\n    >>> db.session.add(tag_one)\n    >>> db.session.commit()\n```", "```py\n...\nclass User(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    username = db.Column(db.String(255), nullable=False, unique=True)\n...\n```", "```py\n...\nclass Post(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    title = db.Column(db.String(255), nullable=False)\n...\nclass Comment(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    name = db.Column(db.String(255), nullable=False)\n...\nclass Tag(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    title = db.Column(db.String(255), nullable=True, unique=True)\n...\n```", "```py\nclass Comment(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n...\n    date = db.Column(db.DateTime(), default=datetime.datetime.now)\n...\n\nclass Post(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n...\n    publish_date = db.Column(db.DateTime(), default=datetime.datetime.now)\n```", "```py\n...\nclass User(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    username = db.Column(db.String(255), nullable=False, index=True, unique=True)\n...\n```", "```py\ndb.Index('idx_col_example', User.username, User.password)\n```", "```py\nFlask-Migrate\n```", "```py\nfrom main import app, db, User, Post, Tag, migrate\n\n@app.shell_context_processor\ndef make_shell_context():\n    return dict(app=app, db=db, User=User, Post=Post, Tag=Tag, migrate=migrate)\n```", "```py\nimport datetime\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\nfrom config import DevConfig\n\napp = Flask(__name__)\napp.config.from_object(DevConfig)\n\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n```", "```py\n    # Tell Flask where is our app\n    $ export FLASK_APP=main.py\n    $ flask db\n```", "```py\n    $ flask db init\n```", "```py\n    $ flask db migrate -m\"initial migration\"\n\n```", "```py\n$ flask db upgrade\n```", "```py\n$ flask db upgrade --sql\n```", "```py\n$ flask db history\n<base> -> 7ded34bc4fb (head), initial migration\n$ flask db downgrade 7ded34bc4fb\n```"]