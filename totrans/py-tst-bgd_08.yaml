- en: Chapter 8. Testing Web Application Frontends using Twill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*We haven''t talked at all about testing user interfaces. Mostly because graphical
    user interfaces are not very amenable to being checked by automated testing tools
    (it can be difficult to feed input to the system and difficult to disentangle
    all of the units involved). However, web applications are an exception to that
    rule, and their importance keeps increasing.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we shall:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn to use Twill to script interactions with web sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how run Twill scripts from inside a testing framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to integrate Twill operations directly into unittest tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's get on with it!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Twill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find Twill in the Python Package Index at [http://pypi.python.org/pypi/twill/](http://pypi.python.org/pypi/twill/).
    At the time of writing, the latest version can be directly downloaded from [http://darcs.idyll.org/~t/projects/twill-0.9.tar.gz](http://darcs.idyll.org/~t/projects/twill-0.9.tar.gz).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Windows users will need to use an archiving program which understands Tar and
    GZip formats, such as 7-Zip ([http://www.7-zip.org/](http://www.7-zip.org/)) to
    extract the files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the files unpacked, you can install them by opening a command
    prompt, changing to the `twill-0.9` directory, and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: or, if you can't write to Python's `site-packages` directory,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're using a version of Python older than 2.6, you won't be able to do
    a `--user` installation, which means you'll need to have write access to the Python
    installation's `site-packages` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Twill language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've installed Twill, you can open a shell program that lets you
    interactively explore its language and capabilities. We'll go through some of
    the most useful ones here.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – browsing the web with Twill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll take Twill for a spin, using its interactive interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the interactive Twill interpreter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You may notice a couple of warnings about the deprecated `md5` module when you
    start Twill. You may safely ignore them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Get a list of Twill commands. You can get further information about a specific
    command by typing `help <command>` at the prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – browsing the web with Twill](img/8846_08_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tell Twill to go to a web site. Although `slashdot.org` is used in this example,
    the reader is encouraged to try out other sites as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Twill will print out a couple of lines indicating that it is now browsing [http://slashdot.org/](http://slashdot.org/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check that the web server returned a 'no error' code (which is to say, `code
    200`). We could just as easily check for other codes—for example, making sure
    that our interface returned an error when asked to do something invalid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Follow a link, which is specified by providing a regular expression. If you're
    not comfortable with regular expressions—or even if you are—you're usually fine
    by just specifying enough of the link text to identify the one that you want to
    follow. After following the link, check the code again to make sure it worked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Fill in a form field. This fills the first field of the second form with the
    word **monkey**. At the time of this writing, the second form is a search form,
    and the first field is the search box. If the page layout were to change, this
    example wouldn't be correct any more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can also refer to forms and form fields by name (if they have names). The
    specific form used here doesn't have a name, but the field does. The following
    sets the value of the same field as the command in step 6, this time to the value
    **aardvark**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we can submit the form. This moves Twill to a new working URL, as well as
    sending information to the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once again, we want to make sure that the server returned the expected code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Does the page contain what we expect? We can check with the `find` command.
    In this case, we'll be checking two things. The first is whether the word **aardvark**
    appears within the code of the result page. With the system currently in place
    on [slashdot.org](http://slashdot.org), we can expect that it will. The second
    check, for the word **Elephant** is probably going to fail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – browsing the web with Twill](img/8846_08_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used Twill to browse to [slashdot.org](http://slashdot.org), navigated into
    the **Science** section, searched for **aardvark**, and then checked to see if
    the resulting page contained the words **aardvark** and **Elephant**. Of what
    use it that?
  prefs: []
  type: TYPE_NORMAL
- en: We're not limited to goofing around on [slashdot.org](http://slashdot.org).
    We can use the Twill language to describe any interaction between a web browser
    and a web server. That means, we can use it to describe the expected behavior
    of our own web applications. If we can describe expected behavior, we can write
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: It would be nice to be able to store the commands in a file though, so that
    we can automate the tests. Like any good interpreter, Twill will let us do that.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – Twill scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll write a Twill script that checks whether a site obeys the same interface
    that we used for interacting with [slashdot.org](http://slashdot.org), and then
    applies it to a few different web sites to see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `slashdot.twill` containing the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we'll run that script on [http://slashdot.org/](http://slashdot.org/) and
    see whether it works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – Twill scripting](img/8846_08_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: All right, that worked nicely. So, let's see if `espn.com` works the same way
    as `slashdot.org` did.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – Twill scripting](img/8846_08_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By storing the Twill commands in a file, we were able to run them as an automated
    test. That's definitely a step forward for testing our web-based applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-u` command line option that we passed to `twill-sh` is very useful: it
    has the same effect as a `go` command at the start of the file, but of course
    we can change it every time we run the script. This is particularly helpful if
    you''re not sure what the base URL for your web app will end up being.'
  prefs: []
  type: TYPE_NORMAL
- en: Twill commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Twill has a number of commands, and so far we've only covered a few of them.
    In this section you'll find a brief discussion of each of Twill's commands.
  prefs: []
  type: TYPE_NORMAL
- en: help
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `help` command prints out a list of all of Twill''s commands, or tells
    you the details of a specific command. For example, to get the details of the
    `add_auth` command, you should type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![help](img/8846_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to know the detailed syntax of any of the other commands, use the
    `help` command to get that information.
  prefs: []
  type: TYPE_NORMAL
- en: setglobal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `setglobal` command assigns a value to a variable name. These variable
    names can then be used as parameters of later commands. Thus, if you tell Twill
    to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Twill will set the global variable target to the value `http://www.example.org/`.
    You would then be able to say:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: to tell Twill to go to `http://www.example.org/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Variable values can also be inserted into text strings by surrounding the variable
    name with `${ and }`, so that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: tells Twill to go to `http://www.example.org/example.html`.
  prefs: []
  type: TYPE_NORMAL
- en: setlocal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `setlocal` command behaves generally like the `setglobal` command, with
    one significant difference; variables bound with `setlocal` only exist while Twill
    is executing the same script file (or, technically, interactive session) in which
    they were bound. Once Twill switches to a new script, local variables are forgotten
    until execution returns to the original script.
  prefs: []
  type: TYPE_NORMAL
- en: add_auth
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `add_auth` command lets you log in to a site protected by the Basic Authentication
    scheme of HTTP. The command takes four parameters, in this order: `realm`, `URI`,
    `username`, and `password`. The username and password are what a user would type
    in to gain access to the site. The URI is a prefix for all of the web addresses
    where you want the authentication to be applied: if you pass `http://example.com/`
    as the URI, the username and password might be used to login to any page on `example.com`.
    The realm is an arbitrary text string chosen by the server, which must be included
    in any authorization. If you''re testing your own web app, you should already
    know what it is.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find out all about HTTP Basic Authentication at [http://tools.ietf.org/html/rfc2617#section-2](http://tools.ietf.org/html/rfc2617#section-2).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to log in to the example realm on example.com with the username of `testuser`
    and the password of `12345`, you would use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: add_extra_header
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By using `add_extra_header`, you can include any arbitrary HTTP header into
    all subsequent requests that Twill makes. The command takes two parameters: the
    name of the header field to be added, and the value to be assigned to the header
    field.'
  prefs: []
  type: TYPE_NORMAL
- en: You need to keep in mind that HTTP allows the same header to exist multiple
    times in the same request, and to have different values each time. If you tell
    Twill
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: then there will be two 'moose' headers sent in each request, with different
    values.
  prefs: []
  type: TYPE_NORMAL
- en: clear_extra_headers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `clear_extra_headers` command removes all of the previously defined extra
    headers from future requests. Removed headers can be re-added later.
  prefs: []
  type: TYPE_NORMAL
- en: show_extra_headers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `show_extra_headers` command prints out a list of all of the currently added
    extra headers, along with their values.
  prefs: []
  type: TYPE_NORMAL
- en: agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can make Twill masquerade as a different web browser, by using the `agent`
    command. You can use any user agent string as the parameter. At the time of this
    writing, [http://user-agent-string.info/](http://user-agent-string.info/) was
    a useful resource for finding the user agent strings used by web browsers.
  prefs: []
  type: TYPE_NORMAL
- en: back
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `back` command works just as the back button on a web browser would, returning
    to the most recent URL in Twill's history.
  prefs: []
  type: TYPE_NORMAL
- en: clear_cookies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `clear_cookies` command causes Twill to forget all of its currently stored
    cookies.
  prefs: []
  type: TYPE_NORMAL
- en: code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `code` command checks that the HTTP response code from the previous navigation
    command was the expected value. The value that means 'success' is `200`. `404`
    means that the page wasn't found, `401` means that a login is required before
    you can browse the page, `301` and `302` are redirects, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find a complete list of official HTTP response codes at [http://tools.ietf.org/html/rfc2616#section-6.1.1.](http://tools.ietf.org/html/rfc2616#section-6.1.1.)
  prefs: []
  type: TYPE_NORMAL
- en: config
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `config` command lets you modify the behavior of the Twill interpreter.
    It takes a configuration parameter name and an integer value as parameters, and
    Twill modifies its behavior according to the values given to the configuration
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a complete list of current configuration variables, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: debug
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `debug` command causes Twill to output trace information as it operates.
    At the time of writing, there were three different kinds of debug trace available:
    HTTP, commands, and handling of the HTTP-EQUIV refresh tag.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you tell Twill to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: then whenever Twill performs an HTTP operation, you'll see a printout of the
    request and response lines, along with the HTTP header fields that were returned
    with the response.
  prefs: []
  type: TYPE_NORMAL
- en: The `debug commands 1` command isn't useful when you're interacting directly
    with the Twill interpreter, but if you place it in a Twill script, it will cause
    Twill to print out each command as it executes, so that you can see what the script
    is doing.
  prefs: []
  type: TYPE_NORMAL
- en: If you tell Twill to
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: then it will print out extra information whenever it runs across a page with
    a `<META HTTP-EQUIV="refresh"...>` tag in the header.
  prefs: []
  type: TYPE_NORMAL
- en: echo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `echo` command is useful if you want your Twill scripts to output information,
    but don't find that any of the `debug` subcommands really does what you want.
    Whatever parameters you pass to `echo`, are printed to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: exit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `exit` command causes the Twill interpreter to terminate. It takes an error
    code—which is just an integer, with 0 normally being interpreted as 'no error'—as
    an optional parameter. Even if you pass a non-zero value to `exit`, Twill will
    print out that the script succeeded, after all of the commands that it ran executed
    correctly, including `exit`. The error code is only meaningful if the program
    that executed Twill uses it, so in many cases it will be ignored completely.
  prefs: []
  type: TYPE_NORMAL
- en: extend_with
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `extend_with` command is a mechanism for customizing the Twill interpreter.
    It imports a Python module, and adds any functions in it as new Twill commands.
  prefs: []
  type: TYPE_NORMAL
- en: find
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `find` command searches the current page for text that matches a regular
    expression. Python's regular expression syntax is described in the online docs
    at [http://docs.python.org/library/re.html#regular­expression­syntax](http://docs.python.org/library/re.html#regular­expression­syntax),
    but for our purposes it's enough to know that if you type a word, `find` will
    look for it.
  prefs: []
  type: TYPE_NORMAL
- en: The `find` command also accepts an optional second parameter. This parameter
    is a text string representing options controlling how the search is performed.
    If the string contains the letter `i` then the search is case-insensitive, meaning
    that capital and lowercase letters match with each other. The letters `m` and
    `s` mean to use 'MULTILINE' and 'DOTALL' modes, respectively. These modes are
    described in the above documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The find command also binds the matched text to the local variable name `__match__`,
    so that you can refer to it in later commands, just as if it had been set by `setlocal`.
  prefs: []
  type: TYPE_NORMAL
- en: notfind
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `notfind` command works like the `find` command, except that if it finds
    a match for the regular expression, it fails. If it does not find a match, it
    succeeds.
  prefs: []
  type: TYPE_NORMAL
- en: follow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `follow` command searches the current page for a link that matches a regular
    expression, and goes to the linked address. Using `follow` is like clicking on
    a link in a normal web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the `find` command, the follow command does not accept regular expression
    flags, and does not bind the `__match__` name. It just goes where the hyperlink
    points it.
  prefs: []
  type: TYPE_NORMAL
- en: formaction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `formaction` command lets you change the address to which a form will be
    submitted. It takes two parameters: an identifier for the form you want to change,
    and the URL that you want the form submitted to.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following HTML would produce a form that would be submitted
    to the current URL, because that is the default when the `action` attribute is
    omitted from the `form` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: After executing this `formaction` command,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'it would be as if the form had been written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: formclear
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `formclear` command resets a form to its initial state, meaning that data
    entered by other commands get forgotten.
  prefs: []
  type: TYPE_NORMAL
- en: formfile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `formfile` command fills in a value for an `<input type="file">` form field.
    It has three required parameters: the form''s name or number, the field''s name
    or number, and the filename of the file. Optionally, a fourth parameter can be
    added which specifies the mime content type of the file.'
  prefs: []
  type: TYPE_NORMAL
- en: form value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `formvalue` command fills in values for HTML form fields. It accepts three
    parameters: the form''s name or number, the field''s name or number, and the value
    to be assigned. We used `formvalue` in the example Twill script above.'
  prefs: []
  type: TYPE_NORMAL
- en: getinput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `getinput` command allows Twill scripts to be interactive. The command accepts
    one parameter, a prompt that will be displayed to the user. After printing the
    prompt, Twill waits for the user to type something and hit enter, after which
    whatever the user typed is stored in the local variable called `__input__`.
  prefs: []
  type: TYPE_NORMAL
- en: getpassword
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `getpassword` command works mostly like `getinput`. The differences are
    that `getpassword` does not display the text that the user types, and that the
    text is bound to the local variable name `__password__` after being input.
  prefs: []
  type: TYPE_NORMAL
- en: go
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `go` command directs Twill to go to a new URL and load the page at that
    address. Unlike `follow`, go doesn't care what links exist on the current page.
    Using `go` is like typing an address into the address bar of a normal web browser.
  prefs: []
  type: TYPE_NORMAL
- en: info
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `info` command prints some general information about the page that Twill
    is currently browsing. This information includes the URL, the HTTP code, the MIME
    content-type of the page, the title, and the number of forms on the page.
  prefs: []
  type: TYPE_NORMAL
- en: save_cookies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `save_cookies` command saves a copy of any cookies that Twill is currently
    aware of. These cookies can be re-loaded later. The command takes a single parameter:
    the file name in which to store the cookies.'
  prefs: []
  type: TYPE_NORMAL
- en: load_cookies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `load_cookies` command replaces any cookies that Twill currently knows
    about with the cookies stored in a file. It takes a single parameter: the filename
    of the cookie file to load.'
  prefs: []
  type: TYPE_NORMAL
- en: show_cookies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `show_cookies` command will print out any cookies currently aware of.
  prefs: []
  type: TYPE_NORMAL
- en: redirect_error
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `redirect_error` command causes all of Twill's error messages to be stored
    in a file instead of being printed to the screen. It takes a single parameter
    representing the file name in which to store the errors.
  prefs: []
  type: TYPE_NORMAL
- en: redirect_output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `redirect_output` command causes Twill to save all of its normal output
    to a file, instead of printing it to the screen. It takes a single parameter representing
    the file name in which to store the output.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a command that will be of much use in an interactive Twill shell.
    It can be useful in scripts and tests.
  prefs: []
  type: TYPE_NORMAL
- en: reset_error
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `reset_error` command undoes the effect of `redirect_error`.
  prefs: []
  type: TYPE_NORMAL
- en: reset_output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `reset_output` command undoes the effect of `redirect_output`.
  prefs: []
  type: TYPE_NORMAL
- en: reload
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `reload` command reloads the current URL, just as the reload or refresh
    button on a normal web browser would.
  prefs: []
  type: TYPE_NORMAL
- en: reset_browser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `reset_browser` command destroys all of the state information pertaining
    to the current Twill session. It has the same effect as stopping Twill and then
    starting it up again.
  prefs: []
  type: TYPE_NORMAL
- en: run
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `run` command executes an arbitrary Python statement. The only parameter
    is the Python statement to execute. If the statement contains spaces, it must
    be placed within quotes, so Twill doesn't mistake it for multiple parameters.
  prefs: []
  type: TYPE_NORMAL
- en: runfile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The runfile command executes a Twill script that's stored in a separate file.
    The executed script will have its own local namespace (c.f. the `setlocal` command),
    and will share the global namespace (c.f. `setglobal`)
  prefs: []
  type: TYPE_NORMAL
- en: save_html
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `save_html` command saves the HTML content of the current page into a file.
    It accepts a filename to save into as an optional parameter. If no filename is
    specified, Twill will choose for itself based on the URL of the data being saved.
  prefs: []
  type: TYPE_NORMAL
- en: show
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `show` command prints out the HTML content of the current page. This can
    be useful in an interactive session for getting a handle on what Twill is seeing,
    and it can occasionally be useful in a test script if you want to make sure that
    a page has precisely specified content.
  prefs: []
  type: TYPE_NORMAL
- en: showforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `showforms` command prints out a list of all of the forms in the current
    page. Each form has a printout containing the form's number (and name, if it has
    a name), along with the numbers, names, types, ids, and current values for each
    field.
  prefs: []
  type: TYPE_NORMAL
- en: showhistory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `showhistory` command prints out a list of all of the URLs previously visited
    in the current Twill session, in order from oldest to most recent.
  prefs: []
  type: TYPE_NORMAL
- en: showlinks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `showlinks` command prints out a (potentially quite long) list of the links
    in the current page. This can be helpful for figuring out what you need to type
    into the `follow` command, or just for general debugging.
  prefs: []
  type: TYPE_NORMAL
- en: sleep
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `sleep` command can be used to inject pauses in the execution of a Twill
    script. It accepts one optional parameter specifying the number of seconds to
    pause before continuing to execute the script. If the time is not specified, it
    defaults to one second.
  prefs: []
  type: TYPE_NORMAL
- en: submit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `submit` command submits the form containing the field most recently changed
    by the `formvalue` command. It accepts one optional parameter specifying which
    `submit` button to use, specified in the same way a field would be specified for
    the `formvalue` command. If the `submit` button is not specified, the first one
    in the form is used.
  prefs: []
  type: TYPE_NORMAL
- en: tidy_ok
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have HTML Tidy ([http://tidy.sourceforge.net/](http://tidy.sourceforge.net/))
    installed, the `tidy_ok` command will use it to check whether the current page's
    code is correct. If you put `tidy_ok` in a script and the current page does not
    meet Tidy's standards of correctness, the script will be considered a failure.
  prefs: []
  type: TYPE_NORMAL
- en: title
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `title` command accepts a regular expression as its only parameter, and
    tries to match the current page's title against the regular expression. If they
    don't match, the `title` command fails. Used in a script file, this will cause
    the entire script to be considered a failure if the title does not match.
  prefs: []
  type: TYPE_NORMAL
- en: url
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `url` command accepts a regular expression as it's only parameter, and tries
    to match the current page's URL against the regular expression. If they don't
    match, the `url` command fails, and causes the script it's part of to fail. If
    the regular expression does match the URL, the local variable `__match__` is bound
    to the matching part of the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – the Twill language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which form is submitted when you use the `submit` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command would you use to check that an error message is not on the page?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you're executing a Twill script and a command fails, what happens?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a go hero – browsing the web with Twill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open up a Twill interactive shell, use it to search Google, follow one of the
    links in the search result, and navigate around the linked site. While you're
    doing that, try to get some hands on experience with as many of the Twill commands
    as you can.
  prefs: []
  type: TYPE_NORMAL
- en: Calling Twill scripts from tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While it's nice to be able to use `twill-sh` to execute a bunch of Twill scripts
    as a form of automated testing, we'd really like to be able to run the Twill scripts
    as part of our normal test suite. Fortunately, it's fairly easy to do so. There
    are two nice ways to run Twill scripts from Python code, and you can choose whichever
    better suits your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – running Twill script files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first way is to store the Twill script in a separate file, and then use
    the `twill.parse.execute_file` function to run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Place the following code into a file called `fail.twill`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Naturally, this script will fail, but go ahead and run it with `twill-sh` to
    see for yourself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now to run the script from Python. Pull up an interactive Python shell and
    do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – running Twill script files](img/8846_08_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Simple as that, we ran the script from inside Python code. That would work equally
    well in doctest, unittest, or in nose-specific test code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that what the Twill shell would report as an error, execute_file reports
    as a `twill.errors.TwillAssertionError` exception. That integrates nicely with
    the automated testing tools we've discussed previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With just a couple of lines of code, we executed a Twill script that was stored
    in a separate file, and received any errors that it encountered as Python exceptions.
    This is ideal for situations where you have a pre-existing Twill script, and just
    want a way to have it run alongside the rest of your test suite. It's also convenient
    if you want to automatically generate the Twill script, or if you simply want
    to keep different languages in different files.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – running Twill script strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second way to run a Twill script from inside Python code is to store the
    script in a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up an interactive Python interpreter and type the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The result will be just the same as when we executed a file containing those
    commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice the `no_reset = False` parameter that we passed to `execute_string`.
    We need that because if we leave it out, Twill will assume that all of our calls
    to `execute_string` should be executed, as if they were all part of the same browser
    session. We don't want that because we want our tests to be separated from each
    other. `execute_file` will make the opposite assumption, so, we don't need to
    pass it a `no_reset` parameter (although we could).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This time, the script was embedded directly into the Python code as a string
    constant. This is desirable when the Twill script is seen as simply being another
    way to write part of a test, rather than a separate thing in itself.
  prefs: []
  type: TYPE_NORMAL
- en: A nifty trick
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're using Python 2.4 or greater, you can define a function decorator that
    makes it simple to write Twill tests as Python functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If you put that code in a Python module (here called `twill_decorator`) and
    then import `twill_test` into your testing code, you can write Twill tests like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: When you use Nose or unittest to run that test module, the `test_slashdot` function
    will automatically execute the Twill script in its document string, and report
    any errors as test failures. You don't have to remember to pass `no_reset = False`,
    or any of the other details of running Twill from a string.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Twill operations into unittest tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, our unit tests have treated each Twill script as a single operation
    that produces either a success or a failure. What if we want to, say, download
    an HTML page, perform some assertions about relationships between its content
    and a database, then follow a link to another page?
  prefs: []
  type: TYPE_NORMAL
- en: We can do this sort of thing by accessing Twill's browser object directly from
    our test code. The browser object has methods similar to the commands of the Twill
    language, so this should seem fairly familiar.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – using Twill's browser object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we see how to access the browser object directly, and use it to interact
    with the web.
  prefs: []
  type: TYPE_NORMAL
- en: 'Place the following code into a Python test module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the test module using `nosetests`. If Slashdot hasn't changed their interface
    since this was written, then the test will pass. If they have, the test will probably
    fail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of using the Twill language to describe the interaction with a web site,
    we used Twill as a library that we could call from our test code. This allowed
    us to interleave Twill operations with unittest assertions. We could have included
    any other operations that we needed, as well. Using this technique, our tests
    can treat the web as just one more source of data that they can access.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to notice the differences between the Twill language and the
    methods available on the browser object. For example, where the Twill language
    has a `show` command that prints out the HTML of the current page, the browser
    has a `get_html` method that returns the HTML of the current page.
  prefs: []
  type: TYPE_NORMAL
- en: Pay special attention to the interactions with the form, at the end of the test.
    These interactions use a form object, which can be retrieved by calling the browser
    object's `get_form` method.
  prefs: []
  type: TYPE_NORMAL
- en: The `set_value` method of a form object accepts the new value for the control
    as the first parameter, and then has a number of keyword arguments that can be
    used to specify which control should take on that value. The most useful of these
    arguments are `name`, as used above, and `nr`, which selects the control by number.
  prefs: []
  type: TYPE_NORMAL
- en: In order for `submit` to work, it should be preceded by a call to the `clicked`
    method targeting one of the controls of the form (it doesn't matter which).
  prefs: []
  type: TYPE_NORMAL
- en: Browser methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'T he browser object retrieved with `twill.get_browser()` has the following
    useful methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`go`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reload`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`back`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_code`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_title`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_url`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find_link`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`follow_link`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set_agent_string`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_all_forms`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_form`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_form_field`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clicked`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`submit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_cookies`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`load_cookies`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clear_cookies`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Many of those work just as the related Twill command, except that you pass
    the parameters as strings into a method call [e.g. `browser.save_cookies(''cookies.txt'')`].
    A few of them behave differently, though, or don''t have a Twill language equivalent,
    so we''ll go into more detail about those now:'
  prefs: []
  type: TYPE_NORMAL
- en: get_code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: T he `get_code` method returns the HTTP code for the current page. It doesn't
    do any comparisons between the code and an expected value. If you want to raise
    an exception if the code isn't `200`, you need to do it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: get_html
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: T he `get_html` method returns the HTML for the current page as a Python string.
  prefs: []
  type: TYPE_NORMAL
- en: get_title
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: T he `get_title` method returns the title of the current page as a Python string.
  prefs: []
  type: TYPE_NORMAL
- en: get_url
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: T he `get_url` method returns the URL of the current page as a Python string.
  prefs: []
  type: TYPE_NORMAL
- en: find_link
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: T he `find_link` method searches for a link whose URL, text or name matches
    matches the regular expression that was passed in as a parameter. If it finds
    such a link, it returns an object representing that link. If no such link exists,
    `find_link` returns `None`.
  prefs: []
  type: TYPE_NORMAL
- en: A link object has a number of useful attributes. If you have a link object named
    `link`, then `link.attrs` is a list of `(name, value)` tuples, `link.text` is
    the text appearing between the `<a>` and `</a>` tags, and `link.absolute_url`
    is the address to which the link points.
  prefs: []
  type: TYPE_NORMAL
- en: follow_link
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: T he `follow_link` method takes a link object as a parameter, and goes to the
    address represented by the link. If you have a URL in the form of a string, rather
    than a link object, you should use the `go` method instead.
  prefs: []
  type: TYPE_NORMAL
- en: get_all_forms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: T he `get_all_forms` method returns a list of form objects representing all
    forms appearing in the page. If there are any form controls on the page that aren't
    inside of `<form>` tags, a special form object will be created to contain them,
    and will be the first element of the list.
  prefs: []
  type: TYPE_NORMAL
- en: get_form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: T he `get_form` method takes a regular expression as a parameter, and searches
    for a form whose id, name or number matches. If it finds such a form, it returns
    a form object representing it.
  prefs: []
  type: TYPE_NORMAL
- en: A form object has several useful attributes. If you have a form object called
    `form`, then `form.name` is the name of the form if it has a name, `form.method`
    is the form's method (usually 'GET' or 'POST'), `form.action` is the URL to which
    the form should be submitted, `form.enctype` is the content type to use when encoding
    the form for transmission, and `form.attrs` is a dictionary of attributes applied
    to the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'A form object also has methods that help you manipulate its contents. Notable
    among these are `form.get_value`, `form.set_value`, `form.clear`, `form.clear_all`,
    and `form.add_file`. All of these methods except for `clear_all` target a specific
    control within the form. You tell it which control to target by passing one or
    more of the following keyword arguments to the method: `name`, `type`, `kind`,
    `id`, `nr`, and `label`. The `nr` keyword is short for ''number''. If no control
    matches all of the specified parameters, an `_mechanize_dist.ClientForm.ControlNotFoundError`
    exception will be raised.'
  prefs: []
  type: TYPE_NORMAL
- en: The `set_value` and `add_file` methods accept a value or a filename, respectively,
    as their first parameters. The `get_value` method returns the current value of
    the selected control. The `clear` method returns a control to its default value.
  prefs: []
  type: TYPE_NORMAL
- en: get_form_field
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `get_form_field` method takes a form object as its first parameter and a
    regular expression as its second. If precisely one of the form's controls has
    an id, name or index that matches the regular expression, an object representing
    that control is returned.
  prefs: []
  type: TYPE_NORMAL
- en: For the most part this is not needed, because the form object's methods are
    more flexible ways to manipulate form controls. Its primary use is to provide
    input to the `clicked` method.
  prefs: []
  type: TYPE_NORMAL
- en: clicked
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: T he `clicked` method exists to keep the browser object appraised about which
    part of the page is the current focus. In particular, this tells it which form
    to submit when the `submit` method is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `clicked` method takes two parameters: the form object that will become
    the focus, and the specific control within the form where the click should be
    registered.'
  prefs: []
  type: TYPE_NORMAL
- en: It is usually simplest to pass `None` as the specific control. You may, however,
    pass a control object (as returned by `get_form_field`). If this control object
    represents a submit control, that control becomes the new default to use when
    submitting the form. The initial default is the first submit control in the form.
  prefs: []
  type: TYPE_NORMAL
- en: submit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: T he `submit` method submits the last-clicked form, as per its `action` and
    `method`. You may optionally pass a `fieldname` parameter representing which submit
    control to use for the submission. If it exists, this parameter will be passed
    to `get_form_field` to find the appropriate submit control. If you don't pass
    a `fieldname` to the method, the default submit control will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – browser methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do you indicate which form object you want to retrieve when you call `get_form`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the `clicked` method do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does the `get_code` method differ from the `code` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned a lot in this chapter about Twill, and how to use it to write tests
    for web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we covered:'
  prefs: []
  type: TYPE_NORMAL
- en: The Twill language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoking Twill scripts from Python tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Twill's capabilities as a library into Python testing code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've learned about testing web applications, we're ready to move on
    to talking about integration testing and system testing – which is the topic of
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
