["```py\nfor analog_pin_read_value in range(0, 4096):\n    print(analog_pin_read_value / 4095.0 * 5.0)\n```", "```py\nimport mraa\nimport time\n\nclass VoltageInput:\n    def __init__(self, analog_pin):\n        self.analog_pin = analog_pin\n        self.aio = mraa.Aio(analog_pin)\n        # Configure ADC resolution to 12 bits (0 to 4095)\n        self.aio.setBit(12)\n\n    @property\n    def voltage(self):\n        raw_value = self.aio.read()\n        return raw_value / 4095.0 * 5.0\n```", "```py\nif __name__ == \"__main__\":\n    v0 = VoltageInput(0)\n    while True:\n        print(\"Voltage at pin A0: {0}\".format(v0.voltage))\n        # Sleep 1 second\n        time.sleep(2)\n```", "```py\nVoltage at pin A0: 2.47130647131\n```", "```py\nimport mraa\nimport time\n\nclass DarknessSensor:\n    # Light level descriptions\n    light_extremely_dark = \"extremely dark\"\n    light_very_dark = \"very dark\"\n    light_dark = \"just dark\"\n    light_no_need_for_a_flashlight = \\\n        \"there is no need for a flashlight\"\n    # Maximum voltages that determine the light level\n    extremely_dark_max_voltage = 2.0\n    very_dark_max_voltage = 3.0\n    dark_max_voltage = 4.0\n\n    def __init__(self, analog_pin):\n        self.voltage_input = VoltageInput(analog_pin)\n        self.voltage = 0.0\n        self.ambient_light = self.__class__.light_extremely_dark\n        self.measure_light()\n\n    def measure_light(self):\n        self.voltage = self.voltage_input.voltage\n        if self.voltage < self.__class__.extremely_dark_max_voltage:\n            self.ambient_light = self.__class__.light_extremely_dark\n        elif self.voltage < self.__class__.very_dark_max_voltage:\n            self.ambient_light = self.__class__.light_very_dark\n        elif self.voltage < self.__class__.dark_max_voltage:\n            self.ambient_light = self.__class__.light_dark\n        else:\n            self.ambient_light = self.__class__.light_no_need_for_a_flashlight\n```", "```py\nif __name__ == \"__main__\":\n    darkness_sensor = DarknessSensor(0)\n    last_ambient_light = \"\"\n    while True:\n        darkness_sensor.measure_light()\n        new_ambient_light = darkness_sensor.ambient_light\n        if new_ambient_light != last_ambient_light:\n            # The ambient light value changed\n            last_ambient_light = new_ambient_light\n            print(\"Darkness level: {0}\".format(new_ambient_light))\n        # Sleep 2 seconds\n        time.sleep(2)\n```", "```py\npython iot_python_chapter_06_02.py\n```", "```py\nDarkness level: there is no need for a flashlight\nDarkness level: just dark\nDarkness level: very dark\nDarkness level: extremely dark\n```", "```py\nclass BoardInteraction:\n    # The photoresistor included in the voltage divider\n    # is connected to analog PIN A0\n    darkness_sensor = DarknessSensor(0)\n    # The Red LED is connected to GPIO pin ~6\n    red_led = AnalogLed(6, 'Red')\n    # The Green LED is connected to GPIO Pin ~5\n    green_led = AnalogLed(5, 'Green')\n    # The Blue LED is connected to GPIO Pin ~3\n    blue_led = AnalogLed(3, 'Blue')\n\n    @classmethod\n    def set_rgb_led_brightness(cls, brightness_level):\n        cls.red_led.set_brightness(brightness_level)\n        cls.green_led.set_brightness(brightness_level)\n        cls.blue_led.set_brightness(brightness_level)\n\n    @classmethod\n    def update_leds_brightness(cls):\n        if cls.darkness_sensor.ambient_light == DarknessSensor.light_extremely_dark:\n            cls.set_rgb_led_brightness(255)\n        elif cls.darkness_sensor.ambient_light == DarknessSensor.light_very_dark:\n            cls.set_rgb_led_brightness(128)\n        elif cls.darkness_sensor.ambient_light == DarknessSensor.light_dark:\n            cls.set_rgb_led_brightness(64)\n        else:\n            cls.set_rgb_led_brightness(0)\n```", "```py\n    last_ambient_light = \"\"\n    while True:\n        BoardInteraction.darkness_sensor.measure_light()\n        new_ambient_light = BoardInteraction.darkness_sensor.ambient_light\n        if new_ambient_light != last_ambient_light:\n            # The ambient light value changed\n            last_ambient_light = new_ambient_light\n            print(\"Darkness level: {0}\".format(new_ambient_light))\n            BoardInteraction.update_leds_brightness()\n        # Sleep 2 seconds\n        time.sleep(2)\n```", "```py\npython iot_python_chapter_06_03.py\n```", "```py\nDarkness level: there is no need for a flashlight\nRed LED connected to PWM Pin #6 set to brightness 0.\nGreen LED connected to PWM Pin #5 set to brightness 0.\nBlue LED connected to PWM Pin #3 set to brightness 0.\nDarkness level: just dark\nRed LED connected to PWM Pin #6 set to brightness 64.\nGreen LED connected to PWM Pin #5 set to brightness 64.\nBlue LED connected to PWM Pin #3 set to brightness 64.\nDarkness level: very dark\nRed LED connected to PWM Pin #6 set to brightness 128.\nGreen LED connected to PWM Pin #5 set to brightness 128.\nBlue LED connected to PWM Pin #3 set to brightness 128.\nDarkness level: extremely dark\nRed LED connected to PWM Pin #6 set to brightness 255.\nGreen LED connected to PWM Pin #5 set to brightness 255.\nBlue LED connected to PWM Pin #3 set to brightness 255.\nDarkness level: there is no need for a flashlight\nRed LED connected to PWM Pin #6 set to brightness 0.\nGreen LED connected to PWM Pin #5 set to brightness 0.\nBlue LED connected to PWM Pin #3 set to brightness 0.\n```", "```py\nfrom wiringx86 import GPIOGalileoGen2 as GPIO\n\nclass VoltageInput:\n    initial_analog_pin_number = 14\n\n    def __init__(self, analog_pin):\n        self.analog_pin = analog_pin\n        self.gpio = Board.gpio\n        self.gpio.pinMode(\n            analog_pin + self.__class__.initial_analog_pin_number,\n            self.gpio.ANALOG_INPUT)\n\n    @property\n    def voltage(self):\n        raw_value = self.gpio.analogRead(\n            self.analog_pin + \n            self.__class__.initial_analog_pin_number)\n        return raw_value / 1023.0 * 5.0\n```", "```py\npython iot_python_chapter_06_04.py\n```", "```py\nimport logging\n\nif __name__ == \"__main__\":\n logging.basicConfig(\n filename=\"iot_python_chapter_06_05.log\",\n level=logging.INFO,\n format=\"%(asctime)s %(message)s\",\n datefmt=\"%m/%d/%Y %I:%M:%S %p\")\n logging.info(\"Application started\")\n    last_ambient_light = \"\"\n last_voltage = 0.0\n    while True:\n        BoardInteraction.darkness_sensor.measure_light()\n        new_ambient_light = BoardInteraction.darkness_sensor.ambient_light\n        if new_ambient_light != last_ambient_light:\n            # The ambient light value changed\n logging.info(\n \"Ambient light value changed from {0} to {1}\".format(\n last_voltage, BoardInteraction.darkness_sensor.voltage))\n            last_ambient_light = new_ambient_light\n last_voltage = BoardInteraction.darkness_sensor.voltage\n            print(\"Darkness level: {0}\".format(new_ambient_light))\n            BoardInteraction.update_leds_brightness()\n        # Sleep 2 seconds\n        time.sleep(2)\n```", "```py\npython iot_python_chapter_06_05.py\n```", "```py\n03/08/2016 04:54:46 PM Application started\n03/08/2016 04:54:46 PM Ambient light value changed from 0.0 to 4.01953601954\n03/08/2016 04:55:20 PM Ambient light value changed from 4.01953601954 to 3.91208791209\n03/08/2016 04:55:26 PM Ambient light value changed from 3.91208791209 to 2.49572649573\n03/08/2016 04:55:30 PM Ambient light value changed from 2.49572649573 to 3.40903540904\n03/08/2016 04:55:34 PM Ambient light value changed from 3.40903540904 to 2.19291819292\n03/08/2016 04:55:38 PM Ambient light value changed from 2.19291819292 to 3.83394383394\n03/08/2016 04:55:42 PM Ambient light value changed from 3.83394383394 to 4.0\n03/08/2016 04:55:48 PM Ambient light value changed from 4.0 to 3.40903540904\n03/08/2016 04:55:50 PM Ambient light value changed from 3.40903540904 to 2.89133089133\n03/08/2016 04:55:56 PM Ambient light value changed from 2.89133089133 to 3.88278388278\n03/08/2016 04:55:58 PM Ambient light value changed from 3.88278388278 to 4.69841269841\n03/08/2016 04:56:00 PM Ambient light value changed from 4.69841269841 to 3.93650793651\n```", "```py\nfdisk -l\n```", "```py\nDisk /dev/mmcblk0: 7.2 GiB, 7746879488 bytes, 15130624 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x000a69e4\n\nDevice         Boot     Start       End  Blocks  Id System\n/dev/mmcblk0p1 *         2048    106495   52224  83 Linux\n/dev/mmcblk0p2         106496   2768895 1331200  83 Linux\n```", "```py\nfdisk -l\n```", "```py\nDisk /dev/mmcblk0: 7.2 GiB, 7746879488 bytes, 15130624 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x000a69e4\n\nDevice         Boot     Start       End  Blocks  Id System\n/dev/mmcblk0p1 *         2048    106495   52224  83 Linux\n/dev/mmcblk0p2         106496   2768895 1331200  83 Linux\n\nDisk /dev/sda: 3.8 GiB, 4026531840 bytes, 7864320 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x02bb0a1a\n\nDevice    Boot Start       End  Blocks  Id System\n/dev/sda1 *       64   7864319 3932128   b W95 FAT32\n\n```", "```py\nmkdir /media/usb\n```", "```py\nmount /dev/sda1 /media/usb\n```", "```py\nmkdir /media/usb/log\n```", "```py\nimport logging\n\nif __name__ == \"__main__\":\n logging.basicConfig(\n filename=\"/media/usb/log/iot_python_chapter_06_06.log\",\n level=logging.INFO,\n format=\"%(asctime)s %(message)s\",\n datefmt=\"%m/%d/%Y %I:%M:%S %p\")\n\n```", "```py\npython iot_python_chapter_06_06.py\n```", "```py\numount /dev/sda1\n```"]