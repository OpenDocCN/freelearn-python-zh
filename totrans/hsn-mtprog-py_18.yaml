- en: '*Chapter 15*: Implementing a Case Study'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will work on implementing a case study by applying the metaprogramming
    concepts that we have learned so far. For this case study, we will be using the
    `Automobile.` `(1987)`. `UCI Machine` `Learning` `Repository` dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be looking at the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Explaining the case study
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining base classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a code generator library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing an execution framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have an understanding of how to use the
    existing methods of the ast library in Python to enable your application to generate
    its own code.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code examples shared in this chapter are available on GitHub at: [https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter15](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter15).'
  prefs: []
  type: TYPE_NORMAL
- en: Explaining the case study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be looking at the details of the case study before
    we start implementing it. Let’s consider a car agency, *ABC Car Agency*, that
    focuses on sales of new and used cars from multiple brands. This agency would
    like to build an application that produces customized catalogs for each car displaying
    the various specifications and features of the car.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at the details available to develop and build the application
    by applying the concepts that we have learned throughout this book. There are
    205 different cars that need to be cataloged and the data used to build this case
    study is taken from the following dataset: `Automobile. (1987). UCI Machine Learning
    Repository`.'
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to develop an application that can solve this problem. We
    are going to look at how to develop a reusable application that uses metaprogramming.
  prefs: []
  type: TYPE_NORMAL
- en: 'A high-level view of the automobile data is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – The Automobile. (1987). UCI Machine Learning Repository dataset  ](img/Figure_15.1_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – The Automobile. (1987). UCI Machine Learning Repository dataset
  prefs: []
  type: TYPE_NORMAL
- en: For this case study, we are not going to perform any detailed data processing
    using the automobile dataset. Instead, we will be using the data available in
    this dataset to create various components for the application’s development. The
    flow of design for this example will start with developing a code generator library,
    followed by creating a code generator framework. We will then generate the *ABC
    Car Agency* library and, finally, create an execution framework. All of these
    processes will be explained in detail in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python scripts that will be developed for this case study will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Python scripts for the ABC Car Agency case study](img/Figure_15.2_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – Python scripts for the ABC Car Agency case study
  prefs: []
  type: TYPE_NORMAL
- en: 'The car sales application will be developed by defining the following classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CarSpecs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CarMake` with its subclasses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CarCatalogue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BodyStyle` with its subclasses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SaleType` with its subclasses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these classes will be explained in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The overall structure of classes for this application is going to look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Overview of the car sales application](img/Figure_15.3_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – Overview of the car sales application
  prefs: []
  type: TYPE_NORMAL
- en: With this understood, we will look further at the base classes for the application.
  prefs: []
  type: TYPE_NORMAL
- en: Defining base classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now start building the code required for the case study.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by developing a metaclass named `CarSpecs`. This class will have
    the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `__new__` of the `CarSpecs` class will perform the following tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the attribute of the input class is an integer, then add the attribute name
    in title case as `feature`, the value in string format as `info`, and `type` as
    numeric.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the attribute of the input class is a string, then add the attribute name
    in title case as `feature`, the value in string format as `info`, and `type` as
    varchar.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the attribute of the input class is a Boolean, then add the attribute name
    title case as a `feature`, the value in string format as `info`, and `type` as
    Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If not, the actual attribute will be returned as such.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s now look at the definition of `CarSpecs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The next class in this example will be `CarCatalogue` with two abstract methods
    to define the color and print the catalog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next class will be the parent class or superclass that captures the specifications
    of the car:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s create another superclass named `BodyStyle`, which will capture the body
    style and engine features of the car:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next class for this case study will be `SaleType`, in which we will add
    an abstract method to calculate the price of the car:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This class will be a subclass of `SaleType` for calculating the price of new
    cars:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next class will be another subclass of `SaleType` for calculating the price
    of resale cars:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These are the main classes for which we will be creating templates that will
    be used to generate code in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a code generator library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, let’s look at developing a code generator that will be used
    to generate code for all the base classes – `CarSpecs`, `CarMake`, `CarCatalogue`,
    `BodyStyle`, and `SaleType`. The detailed steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a file named `codegenerator.py` and start by defining a class
    named `CodeGenerator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s define a method that imports the `ast` library and adds a `meta_template`
    attribute that has the string format of the `CarSpecs` class as a value. The `meta_template`
    attribute is further parsed and unparsed into class code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s now define another method named `generate_car_catalogue` and add the
    class template for `CarCatalogue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to define a method named `generate_carmake_code` and add the
    code template for the `CarMake` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the next code block, we will define another method named `generate_bodystyle_parent`
    and add the code template for the `BodyStyle` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s further define the `generate_salestype_code` method, which generates
    the class code for the `SaleType` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this step, let’s define the `generate_newsale_code` method to generate code
    for the `New` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s further define the `generate_resale_code` method, which generates the
    code for the `Resale` class and has the method for calculating the resale price
    of the car:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this step, we will define a `generate_car_code` method; it inherits the
    `CarMake` class, defines the color and specifications for individual car brands,
    and prints the catalog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last method of this code generator is `generate_bodystyle_code`, which
    generates class code for different body styles, such as Sedan and Hatchback, defines
    the color and features for an individual car body style, and prints the catalog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With these methods, we are all set to generate the code required for the ABC
    Car Agency’s catalog.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s proceed further to develop a code generation framework that generates
    the hundreds of classes required for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Generating code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to make use of `codegenerator.py` to generate
    the base classes and its corresponding subclasses, which maintain and print various
    catalogs for the ABC Car Agency, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, let’s start using the automobile data to generate the base classes
    required for this application. For the base data preparation, let’s import the
    `pandas` library, which helps with processing data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s load the data and make a copy of it. For this application, we need a
    unique set of car brands and another unique set of car body styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the basic data has been processed, let’s create two DataFrames that will
    be used to generate multiple classes using the code generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After processing the data into the format that we need to provide as input
    to the code generator, the sample data for specifications will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Sample specifications  ](img/Figure_15.4_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Sample specifications
  prefs: []
  type: TYPE_NORMAL
- en: 'The sample data for features will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Sample features ](img/Figure_15.5_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 – Sample features
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the base data required to generate code is ready, we can start importing
    the code generator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this step, let’s now define a function that generates the library by calling
    the code to generate each base class in a pipeline followed by generating multiple
    subclasses for `CarMake` and `BodyStyle`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a Python file named `abccaragencylib.py` and call a `generatelib` function
    to write the code generated for all the required classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An example class autogenerated and written into `abccaragencylib.py` is represented
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.6 – An autogenerated class code for a car brand ](img/Figure_15.6_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – An autogenerated class code for a car brand
  prefs: []
  type: TYPE_NORMAL
- en: We have not autogenerated the code required for this example. We will now look
    at designing an execution framework.
  prefs: []
  type: TYPE_NORMAL
- en: Designing an execution framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, let’s look at the last process of designing the ABC Car Agency
    application where we will actually run the code generated throughout this case
    study:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by loading the autogenerated library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this stage, we will follow a sequence of steps by implementing a façade
    design pattern so that we can print the specifications and features for different
    types of cars:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s define a method to run the façade pattern:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this step, we will run one combination of a car brand with a car body style
    to generate a catalog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: There are 56 unique subclasses generated for `CarMake` and 56 unique subclasses
    generated for `BodyStyle`. We can use various combinations of `CarMake` and `BodyStyle`
    to print catalogs for this application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try another combination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output generated is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This is the step-by-step process of developing an application by applying metaprogramming
    methodologies in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to develop an application by applying various
    techniques of metaprogramming. We started by explaining the case study, and we
    defined the base classes required for this case study.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to develop a code generator and how to generate code using
    it. We also designed a framework that could be used to execute or test the code
    generated for the application in this case study.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be looking at some of the best practices that can
    be followed while designing an application with Python and metaprogramming.
  prefs: []
  type: TYPE_NORMAL
