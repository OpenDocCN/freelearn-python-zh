- en: '*Chapter 15*: Implementing a Case Study'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第15章*：实现案例研究'
- en: In this chapter, we will work on implementing a case study by applying the metaprogramming
    concepts that we have learned so far. For this case study, we will be using the
    `Automobile.` `(1987)`. `UCI Machine` `Learning` `Repository` dataset.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过应用我们迄今为止学到的元编程概念来实现案例研究。对于这个案例研究，我们将使用`Automobile.` `(1987)` `UCI机器学习`
    `仓库`数据集。
- en: 'In this chapter, we will be looking at the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主要主题：
- en: Explaining the case study
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释案例研究
- en: Defining base classes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义基类
- en: Developing a code generator library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发代码生成库
- en: Generating code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成代码
- en: Designing an execution framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计执行框架
- en: By the end of this chapter, you should have an understanding of how to use the
    existing methods of the ast library in Python to enable your application to generate
    its own code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该了解如何使用Python中ast库的现有方法来使你的应用程序生成自己的代码。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code examples shared in this chapter are available on GitHub at: [https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter15](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter15).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中分享的代码示例可在GitHub上找到：[https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter15](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter15)。
- en: Explaining the case study
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释案例研究
- en: In this section, we will be looking at the details of the case study before
    we start implementing it. Let’s consider a car agency, *ABC Car Agency*, that
    focuses on sales of new and used cars from multiple brands. This agency would
    like to build an application that produces customized catalogs for each car displaying
    the various specifications and features of the car.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始实现之前，我们将查看案例研究的细节。让我们考虑一个专注于销售多个品牌新旧汽车的汽车代理机构，即*ABC汽车代理*。这个代理机构希望开发一个应用程序，为每辆汽车生成定制的目录，显示汽车的各项规格和功能。
- en: 'We will look at the details available to develop and build the application
    by applying the concepts that we have learned throughout this book. There are
    205 different cars that need to be cataloged and the data used to build this case
    study is taken from the following dataset: `Automobile. (1987). UCI Machine Learning
    Repository`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过应用本书中学到的概念来查看开发并构建应用程序的细节。需要编目205种不同的汽车，构建此案例研究使用的数据来自以下数据集：`Automobile.
    (1987). UCI Machine Learning Repository`。
- en: There are many ways to develop an application that can solve this problem. We
    are going to look at how to develop a reusable application that uses metaprogramming.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以开发一个可以解决这个问题应用程序。我们将探讨如何开发一个可重用的应用程序，该应用程序使用元编程。
- en: 'A high-level view of the automobile data is as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 汽车数据的整体视图如下：
- en: '![Figure 15.1 – The Automobile. (1987). UCI Machine Learning Repository dataset  ](img/Figure_15.1_B13426.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图15.1 – The Automobile. (1987). UCI Machine Learning Repository dataset](img/Figure_15.1_B13426.jpg)'
- en: Figure 15.1 – The Automobile. (1987). UCI Machine Learning Repository dataset
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1 – The Automobile. (1987). UCI Machine Learning Repository dataset
- en: For this case study, we are not going to perform any detailed data processing
    using the automobile dataset. Instead, we will be using the data available in
    this dataset to create various components for the application’s development. The
    flow of design for this example will start with developing a code generator library,
    followed by creating a code generator framework. We will then generate the *ABC
    Car Agency* library and, finally, create an execution framework. All of these
    processes will be explained in detail in this section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个案例研究，我们不会使用汽车数据集进行任何详细的数据处理。相反，我们将使用此数据集中的数据来创建应用程序开发的各种组件。本例的设计流程将从开发代码生成库开始，然后创建代码生成框架。然后我们将生成*ABC汽车代理*库，最后创建执行框架。所有这些过程都将在本节中详细解释。
- en: 'The Python scripts that will be developed for this case study will be as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为此案例研究开发的Python脚本如下：
- en: '![Figure 15.2 – Python scripts for the ABC Car Agency case study](img/Figure_15.2_B13426.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图15.2 – ABC汽车代理案例研究的Python脚本](img/Figure_15.2_B13426.jpg)'
- en: Figure 15.2 – Python scripts for the ABC Car Agency case study
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2 – ABC汽车代理案例研究的Python脚本
- en: 'The car sales application will be developed by defining the following classes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将开发以下类来开发汽车销售应用程序：
- en: '`CarSpecs`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CarSpecs`'
- en: '`CarMake` with its subclasses'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CarMake`及其子类'
- en: '`CarCatalogue`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CarCatalogue`'
- en: '`BodyStyle` with its subclasses'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BodyStyle`及其子类'
- en: '`SaleType` with its subclasses'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SaleType`及其子类'
- en: Each of these classes will be explained in this section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类中的每一个都将在本节中解释。
- en: 'The overall structure of classes for this application is going to look as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本应用程序的类结构将如下所示：
- en: '![Figure 15.3 – Overview of the car sales application](img/Figure_15.3_B13426.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图15.3 – 汽车销售应用程序概述](img/Figure_15.3_B13426.jpg)'
- en: Figure 15.3 – Overview of the car sales application
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3 – 汽车销售应用程序概述
- en: With this understood, we will look further at the base classes for the application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一点后，我们将进一步查看应用程序的基类。
- en: Defining base classes
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义基类
- en: We will now start building the code required for the case study.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在开始构建案例研究所需的代码。
- en: 'Let’s start by developing a metaclass named `CarSpecs`. This class will have
    the following structure:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先开发一个名为`CarSpecs`的元类。这个类将具有以下结构：
- en: 'The `__new__` of the `CarSpecs` class will perform the following tasks:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CarSpecs`类的`__new__`方法将执行以下任务：'
- en: If the attribute of the input class is an integer, then add the attribute name
    in title case as `feature`, the value in string format as `info`, and `type` as
    numeric.
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输入类的属性是整数，则将属性名添加为大写形式的`feature`，将值以字符串格式添加为`info`，并将`type`设置为数值型。
- en: If the attribute of the input class is a string, then add the attribute name
    in title case as `feature`, the value in string format as `info`, and `type` as
    varchar.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输入类的属性是字符串，则将属性名添加为大写形式的`feature`，将值以字符串格式添加为`info`，并将`type`设置为varchar。
- en: If the attribute of the input class is a Boolean, then add the attribute name
    title case as a `feature`, the value in string format as `info`, and `type` as
    Boolean.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输入类的属性是布尔值，则将属性名添加为大写形式的`feature`，将值以字符串格式添加为`info`，并将`type`设置为布尔型。
- en: If not, the actual attribute will be returned as such.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不是，则实际属性将按原样返回。
- en: 'Let’s now look at the definition of `CarSpecs`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看`CarSpecs`的定义：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The next class in this example will be `CarCatalogue` with two abstract methods
    to define the color and print the catalog:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，下一个类将是`CarCatalogue`，它将包含两个抽象方法来定义颜色和打印目录：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The next class will be the parent class or superclass that captures the specifications
    of the car:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个类将是父类或超类，用于捕获汽车规格：
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s create another superclass named `BodyStyle`, which will capture the body
    style and engine features of the car:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建另一个名为`BodyStyle`的超类，它将捕获汽车的车身风格和引擎特性：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next class for this case study will be `SaleType`, in which we will add
    an abstract method to calculate the price of the car:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个案例研究，下一个类将是`SaleType`，我们将添加一个抽象方法来计算汽车的价格：
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This class will be a subclass of `SaleType` for calculating the price of new
    cars:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本类将作为`SaleType`的子类，用于计算新车的价格：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The next class will be another subclass of `SaleType` for calculating the price
    of resale cars:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个类将是另一个`SaleType`的子类，用于计算二手车价格：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These are the main classes for which we will be creating templates that will
    be used to generate code in the next section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将在下一节中创建模板的主要类，用于生成代码。
- en: Developing a code generator library
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发一个代码生成器库
- en: 'In this section, let’s look at developing a code generator that will be used
    to generate code for all the base classes – `CarSpecs`, `CarMake`, `CarCatalogue`,
    `BodyStyle`, and `SaleType`. The detailed steps are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看开发一个代码生成器，它将被用来为所有基类生成代码——`CarSpecs`、`CarMake`、`CarCatalogue`、`BodyStyle`和`SaleType`。详细步骤如下：
- en: 'Let’s create a file named `codegenerator.py` and start by defining a class
    named `CodeGenerator`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`codegenerator.py`的文件，并首先定义一个名为`CodeGenerator`的类：
- en: '[PRE7]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s define a method that imports the `ast` library and adds a `meta_template`
    attribute that has the string format of the `CarSpecs` class as a value. The `meta_template`
    attribute is further parsed and unparsed into class code:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义一个方法，该方法导入`ast`库，并添加一个`meta_template`属性，其值为`CarSpecs`类的字符串格式。`meta_template`属性进一步解析和反解析为类代码：
- en: '[PRE8]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let’s now define another method named `generate_car_catalogue` and add the
    class template for `CarCatalogue`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们定义另一个名为`generate_car_catalogue`的方法，并添加`CarCatalogue`类的模板：
- en: '[PRE9]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next step is to define a method named `generate_carmake_code` and add the
    code template for the `CarMake` class:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是定义一个名为`generate_carmake_code`的方法，并添加`CarMake`类的代码模板：
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the next code block, we will define another method named `generate_bodystyle_parent`
    and add the code template for the `BodyStyle` class:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个代码块中，我们将定义另一个名为`generate_bodystyle_parent`的方法，并添加`BodyStyle`类的代码模板：
- en: '[PRE11]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s further define the `generate_salestype_code` method, which generates
    the class code for the `SaleType` class:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进一步定义 `generate_salestype_code` 方法，该方法生成 `SaleType` 类的类代码：
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In this step, let’s define the `generate_newsale_code` method to generate code
    for the `New` class:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，让我们定义 `generate_newsale_code` 方法以生成 `New` 类的代码：
- en: '[PRE13]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let’s further define the `generate_resale_code` method, which generates the
    code for the `Resale` class and has the method for calculating the resale price
    of the car:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进一步定义 `generate_resale_code` 方法，该方法生成 `Resale` 类的代码，并具有计算汽车残值的方法：
- en: '[PRE14]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this step, we will define a `generate_car_code` method; it inherits the
    `CarMake` class, defines the color and specifications for individual car brands,
    and prints the catalog:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将定义一个 `generate_car_code` 方法；它继承自 `CarMake` 类，定义单个汽车品牌的颜色和规格，并打印目录：
- en: '[PRE15]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The last method of this code generator is `generate_bodystyle_code`, which
    generates class code for different body styles, such as Sedan and Hatchback, defines
    the color and features for an individual car body style, and prints the catalog:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此代码生成器的最后一个方法是 `generate_bodystyle_code`，它为不同的车身风格生成类代码，例如轿车和掀背车，定义单个车身风格的颜色和特性，并打印目录：
- en: '[PRE16]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With these methods, we are all set to generate the code required for the ABC
    Car Agency’s catalog.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些方法，我们已经准备好生成 ABC 汽车代理目录所需的代码。
- en: Now, let’s proceed further to develop a code generation framework that generates
    the hundreds of classes required for our application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进一步开发一个代码生成框架，该框架可以生成我们应用程序所需的数百个类。
- en: Generating code
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成代码
- en: 'In this section, we are going to make use of `codegenerator.py` to generate
    the base classes and its corresponding subclasses, which maintain and print various
    catalogs for the ABC Car Agency, as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将利用 `codegenerator.py` 生成基础类及其相应的子类，这些类为 ABC 汽车代理维护并打印各种目录，如下所示：
- en: 'To begin with, let’s start using the automobile data to generate the base classes
    required for this application. For the base data preparation, let’s import the
    `pandas` library, which helps with processing data:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们使用汽车数据来生成此应用程序所需的基础类。对于基础数据准备，让我们导入 `pandas` 库，它有助于处理数据：
- en: '[PRE17]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let’s load the data and make a copy of it. For this application, we need a
    unique set of car brands and another unique set of car body styles:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加载数据并创建其副本。对于此应用程序，我们需要一组独特的汽车品牌和另一组独特的车身风格：
- en: '[PRE18]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once the basic data has been processed, let’s create two DataFrames that will
    be used to generate multiple classes using the code generator:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦处理了基本数据，让我们创建两个 DataFrames，它们将用于通过代码生成器生成多个类：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After processing the data into the format that we need to provide as input
    to the code generator, the sample data for specifications will be as follows:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将数据处理成我们需要提供给代码生成器的格式后，规格的样本数据如下所示：
- en: '![Figure 15.4 – Sample specifications  ](img/Figure_15.4_B13426.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图15.4 – 样本规格](img/Figure_15.4_B13426.jpg)'
- en: Figure 15.4 – Sample specifications
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4 – 样本规格
- en: 'The sample data for features will be as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 特性的样本数据如下所示：
- en: '![Figure 15.5 – Sample features ](img/Figure_15.5_B13426.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图15.5 – 样本特性](img/Figure_15.5_B13426.jpg)'
- en: Figure 15.5 – Sample features
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5 – 样本特性
- en: 'Now that the base data required to generate code is ready, we can start importing
    the code generator:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在基础数据已准备好用于生成代码，我们可以开始导入代码生成器：
- en: '[PRE20]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this step, let’s now define a function that generates the library by calling
    the code to generate each base class in a pipeline followed by generating multiple
    subclasses for `CarMake` and `BodyStyle`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，现在让我们定义一个函数，通过调用代码生成每个基础类，然后生成 `CarMake` 和 `BodyStyle` 的多个子类来生成库：
- en: '[PRE21]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open a Python file named `abccaragencylib.py` and call a `generatelib` function
    to write the code generated for all the required classes:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个名为 `abccaragencylib.py` 的 Python 文件，并调用 `generatelib` 函数来编写为所有所需类生成的代码：
- en: '[PRE22]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'An example class autogenerated and written into `abccaragencylib.py` is represented
    in the following screenshot:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下截图展示了一个示例类自动生成并写入 `abccaragencylib.py`：
- en: '![Figure 15.6 – An autogenerated class code for a car brand ](img/Figure_15.6_B13426.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图15.6 – 一个自动生成的汽车品牌类代码](img/Figure_15.6_B13426.jpg)'
- en: Figure 15.6 – An autogenerated class code for a car brand
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6 – 一个自动生成的汽车品牌类代码
- en: We have not autogenerated the code required for this example. We will now look
    at designing an execution framework.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尚未自动生成此示例所需的代码。现在，我们将探讨设计执行框架。
- en: Designing an execution framework
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计执行框架
- en: 'In this section, let’s look at the last process of designing the ABC Car Agency
    application where we will actually run the code generated throughout this case
    study:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看设计ABC汽车代理应用程序的最后一步，我们将实际运行在此案例研究过程中生成的代码：
- en: 'Let’s start by loading the autogenerated library:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先加载自动生成的库：
- en: '[PRE23]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'At this stage, we will follow a sequence of steps by implementing a façade
    design pattern so that we can print the specifications and features for different
    types of cars:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，我们将通过实现外观设计模式来遵循一系列步骤，以便我们可以打印不同类型汽车的规格和功能：
- en: '[PRE24]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let’s define a method to run the façade pattern:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义一个运行外观模式的方法：
- en: '[PRE25]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In this step, we will run one combination of a car brand with a car body style
    to generate a catalog:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步，我们将运行一个汽车品牌与车身风格的组合来生成目录：
- en: '[PRE26]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: There are 56 unique subclasses generated for `CarMake` and 56 unique subclasses
    generated for `BodyStyle`. We can use various combinations of `CarMake` and `BodyStyle`
    to print catalogs for this application.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为`CarMake`生成了56个独特的子类，为`BodyStyle`也生成了56个独特的子类。我们可以使用`CarMake`和`BodyStyle`的各种组合来打印此应用程序的目录。
- en: 'Let’s try another combination:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试另一种组合：
- en: '[PRE28]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output generated is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的输出如下：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is the step-by-step process of developing an application by applying metaprogramming
    methodologies in Python.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过在Python中应用元编程方法开发应用程序的逐步过程。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to develop an application by applying various
    techniques of metaprogramming. We started by explaining the case study, and we
    defined the base classes required for this case study.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何通过应用各种元编程技术来开发应用程序。我们首先解释了案例研究，并定义了此案例研究所需的基类。
- en: We also learned how to develop a code generator and how to generate code using
    it. We also designed a framework that could be used to execute or test the code
    generated for the application in this case study.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何开发代码生成器以及如何使用它生成代码。我们还设计了一个框架，可用于执行或测试在此案例研究中为应用程序生成的代码。
- en: In the next chapter, we will be looking at some of the best practices that can
    be followed while designing an application with Python and metaprogramming.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨在设计Python和元编程的应用程序时可以遵循的一些最佳实践。
