- en: Chapter 3. Finding Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications and the web pages within these applications are written in
    a mixture of the **Hyper** **Text Markup Language** (**HTML**), **Cascading**
    **Style Sheets** (**CSS**), and JavaScript code. Based on user actions such as
    navigating to a website **Uniform Resource Locator** (**URL**) or clicking on
    a submit button, a browser sends a request to a web server. The web server processes
    this request and sends the response with HTML and related resources such as JavaScript,
    CSS, and images, and so on back to the browser. The information received from
    the server is used by the browser to render a web page with various visual elements
    such as textboxes, buttons, labels, tables, forms, checkboxes, radio boxes, lists,
    images, and so on, on the page. While doing so, the browser hides the HTML code
    and related resources from the user. The user is presented with a graphical user
    interface in the browser window. The various visual elements or controls used
    on pages are known as **WebElements** in Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding more about finding elements with Selenium WebDriver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how to investigate and define locators to find elements using
    developer tools options available in various browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding out various ways to find elements, including `ID`, `Name`, and `Class`
    attribute values and use XPath and CSS selectors to define more dynamic locators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing various `find_element_by` methods to find elements so that we can
    automate interaction on these elements using Selenium WebDriver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we want to automate browser interaction using Selenium, we need to tell
    Selenium how to find a particular element or set of elements on a web page programmatically
    and simulate user actions on these elements. Selenium provides various selector
    or locator methods to find elements based on their attribute/value criteria or
    selector value that we supply in script.
  prefs: []
  type: TYPE_NORMAL
- en: 'How do we find the selector or locator information? Web pages are written in
    a mixture of HTML, CSS, and JavaScript. We can derive this information by looking
    at the HTML source of the page. We need to find information such as what HTML
    tag is used for the element that we want to interact with, the defined attribute,
    and the values for the attributes and the structure of the page. Let''s take a
    look at a sample form in the application we''re testing. Here is an example of
    the search field and the search (the magnifying glass) icon from the sample application
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding Elements](img/3506_OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at the HTML code written for the search form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Each element such as the search textbox and search button is implemented using
    an `<input>` tag inside a `<form>` tag and labels are implemented using the `<label>`
    tag. There is some JavaScript code written in the `<script>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'The search textbox that is represented as the `<input>` tag has `id`, `type`,
    `name`, `value`, `class`, and `maxlength` attributes defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can view code written for a page by right-clicking on the browser window
    and selecting the **View Page Source** option from the pop-up menu. It will display
    HTML and client-side JavaScript code for the page in a separate window.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're new to HTML, CSS, and JavaScript, then it's worth looking at some
    useful tutorials at [http://www.w3schools.com/](http://www.w3schools.com/). These
    will help you in identifying locators using different ways supported by Selenium
    WebDriver.
  prefs: []
  type: TYPE_NORMAL
- en: Using developer tools to find locators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While writing Selenium tests, we will often need to look at the web page code
    and might need special tools that can display information in a structured and
    easy-to-understand format. Good news, the majority of the browsers have built-in
    features or add-ons to help us. These tools provide us with a neat and clean way
    to understand how elements and their attributes are defined on a page, DOM structure,
    JavaScript blocks, CSS style attributes, and so on. Let's explore these tools
    in more detail and see how we can use them.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting pages and elements with Firefox using the Firebug add-in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Newer versions of Firefox provide built-in ways to analyze the page and elements;
    however, we will use the Firebug add-in, which has more powerful features, by
    following the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to download and install the Firebug add-in in Firefox available at
    [https://addons.mozilla.org/en-us/firefox/addon/firebug/](https://addons.mozilla.org/en-us/firefox/addon/firebug/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To inspect the page using Firebug, move the mouse over a desired element and
    right-click to open the pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Inspect Element with Firebug** option from the pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will display the Firebug section along with all the information about
    the page and the selected element including HTML code in a tree format as shown
    in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Inspecting pages and elements with Firefox using the Firebug add-in](img/3506_OS_03_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Using Firebug, we can also validate XPath or CSS selectors using the search
    box shown in the Firebug section. Just enter the XPath or CSS selector, and Firebug
    will highlight the element(s) that match the expression, as shown in the following
    screenshot:![Inspecting pages and elements with Firefox using the Firebug add-in](img/3506_OS_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inspecting pages and elements with Google Chrome
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Google Chrome provides a built-in feature to analyze an element or page. You
    can inspect pages and elements by following the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Move the mouse over a desired element on a page and right-click to open the
    pop-up menu; then select the **Inspect element** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will open the developer tools in the browser, which display information
    similar to that of Firebug, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Inspecting pages and elements with Google Chrome](img/3506_OS_03_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Similar to Firebug in Firefox, we can also test XPath and CSS selectors in the
    Google Chrome Developer Tools. Press *Ctrl* + *F* in the **Elements** tab. This
    will display a search box. Just enter the XPath or CSS selector and Firebug will
    highlight element(s) that match the expression, as shown in the following screenshot:![Inspecting
    pages and elements with Google Chrome](img/3506_OS_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inspecting pages and elements with Internet Explorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft Internet Explorer also provides built-in features to analyze elements
    or pages. You can inspect pages and elements by following the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To open the developer tools, press the *F12* key. The developer tools section
    will be displayed at the bottom of browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To inspect an element, click on the pointer icon and hover over the desired
    element on the page. The developer tools will highlight the element with a blue
    outline and display the HTML code in a tree as shown in the following screenshot:![Inspecting
    pages and elements with Internet Explorer](img/3506_OS_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will find these tools very useful while writing tests. Some of these tools
    also provide the ability to run JavaScript code for debugging and testing.
  prefs: []
  type: TYPE_NORMAL
- en: Finding elements with Selenium WebDriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to tell Selenium how to find an element so that it can simulate a desired
    user action, or look at the attributes or state of an element so that we can perform
    a check. For example, if we want to search for a product, we need to find the
    search text field and search button visually. We enter the search term by pressing
    various keys on the keyboard and click on the search button to submit our search
    request.
  prefs: []
  type: TYPE_NORMAL
- en: We can automate the same actions using Selenium. However, Selenium does not
    understand these fields or buttons visually as we do. It needs to find the search
    textbox and search button to simulate keyboard entry and mouse click programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium provides various `find_element_by` methods to find elements on a web
    page. These methods search for an element based on the criteria supplied to them.
    If a matching element is found, an instance of WebElement is returned or the `NoSuchElementException`
    exception is thrown if Selenium is not able to find any element matching the search
    criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium also provides various `find_elements_by` methods to locate multiple
    elements. These methods search and return a list of elements that match the supplied
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Using the find methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Selenium provides eight `find_element_by` methods to locate elements. In this
    section, we will see each one of them in detail. The following table lists `find_element_by`
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description | Argument | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `find_element_by_id(id)` | This method finds an element by the ID attribute
    value | `id`: The ID of the element to be found | `driver.find_element_by_id(''search'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `find_element_by_name(name)` | This method finds an element by the name attribute
    value | `name`: The name of the element to be found | `driver.find_element_by_name(''q'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `find_element_by_class_name(name)` | This method finds an element by the
    class attribute value | `name`: The class name of the element to be found | `driver.find_element_by_class_name(''input-text'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `find_element_by_tag_name(name)` | This method finds an element by its tag
    name | `name`: The tag name of the element to be found | `driver.find_element_by_tag_name(''input'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `find_element_by_xpath(xpath)` | This method finds an element using XPath
    | `xpath`: The xpath of the element to be found | `driver.find_element_by_xpath(''//form[0]/div[0]/input[0]'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `find_element_by_css_selector(css_selector)` | This method finds an element
    by the CSS selector | `css_selector`: The CSS selector of the element to be found
    | `driver.find_element_by_css_selector(''#search'')` |'
  prefs: []
  type: TYPE_TB
- en: '| `find_element_by_link_text(link_text)` | This method finds an element by
    the link text | `link_text`: The text of the element to be found | `driver.find_element_by_link_text(''Log
    In'')` |'
  prefs: []
  type: TYPE_TB
- en: '| `find_element_by_partial_link_text(link_text)` | This method finds an element
    by a partial match of its link text | `link_text`: The text to match part of the
    text of the element | `driver.find_element_by_partial_link_text(''Log'')` |'
  prefs: []
  type: TYPE_TB
- en: 'The following table lists the `find_elements_by` methods that return a list
    of elements matching the specified criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description | Argument | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `find_elements_by_id(id_)` | This method finds multiple elements using the
    ID | `id_`: The ID of the elements to be found | `driver.find_element_by_id(''product'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `find_elements_by_name(name)` | This method finds elements using the name
    | `name`: The name of the elements to be found | `driver.find_elements_by_name(''products'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `find_elements_by_class_name(name)` | This method finds elements using the
    class name | `name`: The class name of the elements to be found | `driver.find_elements_by_class_name(''foo'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `find_elements_by_tag_name(name)` | This method finds elements using the
    tag name | `name`: The tag name of the element to be found | `driver.find_elements_by_tag_name(''a'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `find_elements_by_xpath(xpath)` | This method finds multiple elements by
    XPath | `xpath`: The xpath of the elements to be found | `driver.find_elements_by_xpath("//div[contains(@class,
    ''lists'')]")` |'
  prefs: []
  type: TYPE_TB
- en: '| `find_elements_by_css_selector(css_selector)` | This method finds elements
    using the CSS selector | `css_selector`: The CSS selector of the element to be
    found | `driver.find_element_by_css_selector(''.input-class'')` |'
  prefs: []
  type: TYPE_TB
- en: '| `find_elements_by_link_text(text)` | This method finds elements using the
    link text | `text`: The text of the elements to be found | `driver.find_elements_by_link_text(''Log
    In'')` |'
  prefs: []
  type: TYPE_TB
- en: '| `find_elements_by_partial_link_text(link_text)` | This method finds elements
    by a partial match of their link text | `link_text`: The text to match part of
    the text of the elements | `driver.find_element_by_partial_link_text(''Add to,'')`
    |'
  prefs: []
  type: TYPE_TB
- en: Finding elements using the ID attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finding elements using the ID is the most preferable way to find elements on
    a page. The `find_element_by_id()` and `find_elements_by_id()` methods return
    an element or a set of elements that have matching ID attribute values.
  prefs: []
  type: TYPE_NORMAL
- en: The `find_element_by_id()` method returns the first element that has a matching
    ID attribute value. If no element with matching ID attribute is found, a `NoSuchElementException`
    will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try finding the search textbox from the sample application as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding elements using the ID attribute](img/3506_OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the HTML code for the search textbox with an ID attribute value defined
    as `search`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a test that uses the `find_element_by_id()` method to find the search
    textbox and check its `maxlength` attribute. We will pass the ID attribute''s
    value, `search`, to the `find_element_by_id()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `find_elements_by_id()` method returns all the elements that have the same
    ID attribute values.
  prefs: []
  type: TYPE_NORMAL
- en: Finding elements using the name attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finding an element by its name attribute value is another preferred method.
    The `find_element_by_name()` and `find_elements_by_name()` methods return element(s)
    that have matching name attribute value. If no element is found with matching
    name attribute value, a `NoSuchElementException` will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example, we can find the search textbox using its name attribute
    value instead of the ID attribute value in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `find_elements_by_name()` method returns all the elements that have the
    same name attribute values.
  prefs: []
  type: TYPE_NORMAL
- en: Finding elements using the class name
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apart from using the ID and name attributes, we can also use the class attributes
    to find elements. The class attribute is used to apply CSS to an element. The
    `find_element_by_class_name()` and `find_elements_by_class_name()` methods return
    element(s) that have matching class attribute value. If no element is found with
    the matching name attribute value, a `NoSuchElementException` will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finding elements using ID, name, or class attributes is the most preferred and
    fastest way to find elements. Selenium WebDriver also offers a set of methods
    when these methods are not sufficient to find an element. We will see these methods
    later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s find the search button displayed in the following screenshot using its
    class attribute value using the `find_element_by_class_name()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding elements using the class name](img/3506_OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The search button (the magnifying glass icon) is implemented using the `<button>`
    element with type, title, and class attribute values defined as shown in the following
    HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a test that finds the search button element using its class attribute
    value and check whether it is enabled as shown in following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `find_elements_by_class_name()` method returns all the elements that have
    the identical class name attribute values.
  prefs: []
  type: TYPE_NORMAL
- en: Finding elements using the tag name
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `find_element_by_tag_name()` and `find_elements_by_tag_name()` methods find
    element(s) by their HTML tag name. These methods are similar to the `getElementsByTagName()`
    DOM method in JavaScript. If no element is found with a matching tag name, a `NoSuchElementException`
    will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: These methods are useful when we want to find elements using their tag name.
    For example, to find all the `<tr>` tags in a table to find the number of rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'The home page of the sample application displays promotional banner images
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding elements using the tag name](img/3506_OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'These banners are implemented using an `<img>` or image tag inside a `<ul>`
    or unordered list tag as shown in the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use the `find_elements_by_tag_name()` method to get all the images.
    In this example, we will first find the list of banners implemented as `<ul>`
    or unordered lists using the `find_element_by_class_name()` method and then get
    all the `<img>` or image elements by calling the `find_elements_by_tag_name()`
    method on the banners list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Finding elements using XPath
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: XPath is a query language used to search and locate nodes in an XML document.
    All the major web browsers support XPath. Selenium can leverage and use powerful
    XPath queries to find elements on a web page.
  prefs: []
  type: TYPE_NORMAL
- en: One of the advantages of using XPath is when we can't find a suitable ID, name,
    or class attribute value for the element. We can use XPath to either find the
    element in absolute terms or relative to an element that does have an ID or name
    attribute. We can also use defined attributes other than the ID, name, or class
    with XPath queries. We can also find elements with the help of a partial check
    on attribute values using XPath functions such as `starts-with()`, `contains()`,
    and `ends-with()`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To know more about XPath, visit [http://www.w3schools.com/Xpath/](http://www.w3schools.com/Xpath/)
    and [http://www.zvon.org/comp/r/tut-XPath_1.html](http://www.zvon.org/comp/r/tut-XPath_1.html).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more about XPath locators in the book *Selenium Testing Tools Cookbook*,
    *Packt Publishing*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `find_element_by_xpath()` and `find_elements_by_xpath()` methods return
    element(s) that are found by the specified XPath query. For example, we can check
    whether the promo banners displayed on the home page work as intended and we can
    open the promotion pages using these images as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding elements using XPath](img/3506_OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is how the Shop Private Sales banner is defined as an `<img>` tag. The
    image does not have the ID, name, or class attributes defined. Also, we cannot
    use the `find_by_tag_name()` method as there are multiple `<img>` tags defined
    on the page. However, by looking at the following HTML code, we can get the `<img>`
    tag using the `alt` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a test that uses the `find_element_by_xpath()` method. We are
    using a relative XPath query to find this `<img>` tag using its `alt` attribute
    (this is how we can use ID, name, and class attributes as well as other attributes
    such as `title`, `type`, `value`, `alt`, and so on within XPath queries):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `find_elements_by_xpath()` method returns all the elements that match the
    XPath query.
  prefs: []
  type: TYPE_NORMAL
- en: Finding elements using CSS selectors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CSS is a style sheet language used by web designers to describe the look and
    feel of an HTML document. CSS is used to define various style classes that can
    be applied to elements for formatting. CSS selectors are used to find HTML elements
    based on their attributes such as ID, classes, types, attributes, or values and
    much more to apply the defined CSS rules.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to XPath, Selenium can leverage and use CSS selectors to find elements
    on a web page. To know more about CSS selectors, visit [http://www.w3schools.com/css/css_selectors.asp](http://www.w3schools.com/css/css_selectors.asp)
    and [http://www.w3.org/TR/CSS2/selector.html](http://www.w3.org/TR/CSS2/selector.html).
  prefs: []
  type: TYPE_NORMAL
- en: The `find_element_by_css_selector()` and `find_elements_by_css_selector()` methods
    return element(s) that are found by the specified CSS selector.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the home page of the sample application, we can see the shopping cart icon.
    When we click on the icon, we can see the shopping cart. When there are no items
    added to the shopping cart, a message should be displayed saying **You have no
    items in your shopping cart**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding elements using CSS selectors](img/3506_OS_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is implemented as shown in the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a test to validate this message. We will use CSS selectors to
    find the shopping cart icon, click on it, and then find the shopping cart message
    implemented in the `<p>` or paragraph element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We used the element tag along with the class name in this example. For example,
    to get the shopping cart icon, we used the following selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will first find a `<div>` element with the `header_minicart` class name
    and then find a `<span>` element under this `div`, which has `icon` as its class
    name.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more about CSS selectors in *Selenium Testing Tools Cookbook*,
    *Packt Publishing*.
  prefs: []
  type: TYPE_NORMAL
- en: Finding links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `find_element_by_link_text()` and `find_elements_by_link_text()` methods
    find link(s) using the text displayed for the link. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: To get the **Account** link displayed on the Home page, as shown in the following
    screenshot, we can use the `find_element_by_link_text()` method:![Finding links](img/3506_OS_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the HTML code for the **Account** link implemented as the `<a>` (or
    anchor tag) and the `<span>` tag with text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s create a test that locates the **Account** link using its text and check
    whether it''s displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `find_elements_by_link_text()` method gets all the link elements that have
    matching link text.
  prefs: []
  type: TYPE_NORMAL
- en: Finding links with partial text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `find_element_by_partial_link_text()` and `find_elements_by_partial_link_text()`
    methods find link(s) using partial text. These methods are useful where we want
    to find links using partial text values. Consider the following steps as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the home page of the application, two links are displayed to open the Account
    page: one in the header section with `Account` as text and the other in the footer
    with `My Account` as text.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s use the `find_elements_by_partial_link_text()` method to find these
    links using the `Account` text and check whether we have two of these links available
    on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Putting all the tests together using find methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we saw various `find_element_by` methods along with
    examples. Let's pull together all these examples in a test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `homepagetest.py` file and copy all the tests that we created
    earlier as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s execute all the tests through the command line using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After running the tests, `unittest` shows that seven tests were run and all
    passed with OK status as shown in the following screenshot:![Putting all the tests
    together using find methods](img/3506_OS_03_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned one of the most important features of Selenium
    for finding elements on web pages to simulate user actions.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at various `find_element_by_` methods to find an element using ID,
    name, class name attributes, tags names, XPath, CSS selectors, and to find links
    using link text and partial link text.
  prefs: []
  type: TYPE_NORMAL
- en: We implemented tests using various `find_element_by` methods to understand various
    strategies that we can use to find elements.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will be the foundation for the coming chapters that delve into
    using the Selenium API for user interactions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use Selenium WebDriver functions
    to interact with various HTML elements and perform actions such as entering a
    value in a textbox, clicking on a button, selecting drop-down options, handling
    JavaScript alerts, and working with frames and windows.
  prefs: []
  type: TYPE_NORMAL
