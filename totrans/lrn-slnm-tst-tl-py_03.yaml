- en: Chapter 3. Finding Elements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：查找元素
- en: Web applications and the web pages within these applications are written in
    a mixture of the **Hyper** **Text Markup Language** (**HTML**), **Cascading**
    **Style Sheets** (**CSS**), and JavaScript code. Based on user actions such as
    navigating to a website **Uniform Resource Locator** (**URL**) or clicking on
    a submit button, a browser sends a request to a web server. The web server processes
    this request and sends the response with HTML and related resources such as JavaScript,
    CSS, and images, and so on back to the browser. The information received from
    the server is used by the browser to render a web page with various visual elements
    such as textboxes, buttons, labels, tables, forms, checkboxes, radio boxes, lists,
    images, and so on, on the page. While doing so, the browser hides the HTML code
    and related resources from the user. The user is presented with a graphical user
    interface in the browser window. The various visual elements or controls used
    on pages are known as **WebElements** in Selenium.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序以及这些应用程序中的网页是用**超文本标记语言**（**HTML**）、**层叠样式表**（**CSS**）和JavaScript代码混合编写的。基于用户操作，如导航到网站**统一资源定位符**（**URL**）或点击提交按钮，浏览器向网络服务器发送请求。网络服务器处理此请求，并将带有HTML和相关资源（如JavaScript、CSS和图像等）的响应发送回浏览器。从服务器接收到的信息被浏览器用于在页面上渲染带有各种视觉元素（如文本框、按钮、标签、表格、表单、复选框、单选按钮、列表、图像等）的网页。在此过程中，浏览器隐藏了HTML代码和相关资源。用户在浏览器窗口中看到一个图形用户界面。页面上使用的各种视觉元素或控件在Selenium中被称为**WebElements**。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding more about finding elements with Selenium WebDriver
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更深入地了解使用Selenium WebDriver查找元素
- en: Understanding how to investigate and define locators to find elements using
    developer tools options available in various browsers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何使用各种浏览器中可用的开发者工具选项来调查和定义定位器，以找到元素
- en: Finding out various ways to find elements, including `ID`, `Name`, and `Class`
    attribute values and use XPath and CSS selectors to define more dynamic locators
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索各种查找元素的方法，包括`ID`、`Name`和`Class`属性值，并使用XPath和CSS选择器定义更动态的定位器
- en: Implementing various `find_element_by` methods to find elements so that we can
    automate interaction on these elements using Selenium WebDriver
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现各种`find_element_by`方法来找到元素，以便我们可以使用Selenium WebDriver自动化这些元素的交互
- en: When we want to automate browser interaction using Selenium, we need to tell
    Selenium how to find a particular element or set of elements on a web page programmatically
    and simulate user actions on these elements. Selenium provides various selector
    or locator methods to find elements based on their attribute/value criteria or
    selector value that we supply in script.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要使用Selenium自动化浏览器交互时，我们需要告诉Selenium如何以编程方式在网页上找到特定元素或一组元素，并模拟对这些元素的用户操作。Selenium提供了各种选择器或定位器方法，根据我们提供的属性/值标准或脚本中的选择器值来查找元素。
- en: 'How do we find the selector or locator information? Web pages are written in
    a mixture of HTML, CSS, and JavaScript. We can derive this information by looking
    at the HTML source of the page. We need to find information such as what HTML
    tag is used for the element that we want to interact with, the defined attribute,
    and the values for the attributes and the structure of the page. Let''s take a
    look at a sample form in the application we''re testing. Here is an example of
    the search field and the search (the magnifying glass) icon from the sample application
    in the following screenshot:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何找到选择器或定位信息？网页是用HTML、CSS和JavaScript混合编写的。我们可以通过查看网页的HTML源代码来获取这些信息。我们需要找到有关我们想要与之交互的元素使用的HTML标签、定义的属性以及属性值和页面结构的信息。让我们看看我们正在测试的应用程序中的一个示例表单。以下截图显示了示例应用程序中的搜索字段和搜索（放大镜）图标：
- en: '![Finding Elements](img/3506_OS_03_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![查找元素](img/3506_OS_03_01.jpg)'
- en: 'Let''s look at the HTML code written for the search form:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看为搜索表单编写的HTML代码：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each element such as the search textbox and search button is implemented using
    an `<input>` tag inside a `<form>` tag and labels are implemented using the `<label>`
    tag. There is some JavaScript code written in the `<script>` tag.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每个元素，如搜索文本框和搜索按钮，都是使用`<form>`标签内的`<input>`标签实现的，标签则是使用`<label>`标签实现的。在`<script>`标签中还有一些JavaScript代码。
- en: 'The search textbox that is represented as the `<input>` tag has `id`, `type`,
    `name`, `value`, `class`, and `maxlength` attributes defined:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 表示为`<input>`标签的搜索文本框定义了`id`、`type`、`name`、`value`、`class`和`maxlength`属性：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can view code written for a page by right-clicking on the browser window
    and selecting the **View Page Source** option from the pop-up menu. It will display
    HTML and client-side JavaScript code for the page in a separate window.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在浏览器窗口上右键单击并从弹出菜单中选择**查看页面源代码**选项来查看为页面编写的代码。它将在单独的窗口中显示页面的HTML和客户端JavaScript代码。
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you're new to HTML, CSS, and JavaScript, then it's worth looking at some
    useful tutorials at [http://www.w3schools.com/](http://www.w3schools.com/). These
    will help you in identifying locators using different ways supported by Selenium
    WebDriver.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对HTML、CSS和JavaScript不太熟悉，那么查看一些有用的教程可能值得，这些教程位于[http://www.w3schools.com/](http://www.w3schools.com/)。这些教程将帮助您使用Selenium
    WebDriver支持的不同方式来识别定位器。
- en: Using developer tools to find locators
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用开发者工具查找定位器
- en: While writing Selenium tests, we will often need to look at the web page code
    and might need special tools that can display information in a structured and
    easy-to-understand format. Good news, the majority of the browsers have built-in
    features or add-ons to help us. These tools provide us with a neat and clean way
    to understand how elements and their attributes are defined on a page, DOM structure,
    JavaScript blocks, CSS style attributes, and so on. Let's explore these tools
    in more detail and see how we can use them.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写Selenium测试时，我们通常会需要查看网页代码，可能需要特殊工具以结构化和易于理解的方式显示信息。好消息是，大多数浏览器都有内置功能或插件来帮助我们。这些工具为我们提供了一种整洁且清晰的方式来理解页面上的元素及其属性定义、DOM结构、JavaScript块、CSS样式属性等。让我们更详细地探索这些工具，看看我们如何使用它们。
- en: Inspecting pages and elements with Firefox using the Firebug add-in
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Firefox和Firebug插件检查页面和元素
- en: 'Newer versions of Firefox provide built-in ways to analyze the page and elements;
    however, we will use the Firebug add-in, which has more powerful features, by
    following the given steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 更新版本的Firefox提供了内置的方式来分析和页面元素；然而，我们将遵循以下步骤使用功能更强大的Firebug插件：
- en: You need to download and install the Firebug add-in in Firefox available at
    [https://addons.mozilla.org/en-us/firefox/addon/firebug/](https://addons.mozilla.org/en-us/firefox/addon/firebug/).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要在Firefox中下载并安装Firebug插件，可从[https://addons.mozilla.org/en-us/firefox/addon/firebug/](https://addons.mozilla.org/en-us/firefox/addon/firebug/)获取。
- en: To inspect the page using Firebug, move the mouse over a desired element and
    right-click to open the pop-up menu.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用Firebug检查页面，将鼠标移至所需元素上，然后右键单击以打开弹出菜单。
- en: Select the **Inspect Element with Firebug** option from the pop-up menu.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从弹出菜单中选择**使用Firebug检查元素**选项。
- en: 'This will display the Firebug section along with all the information about
    the page and the selected element including HTML code in a tree format as shown
    in the following screenshot:'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示Firebug部分以及关于页面和所选元素的详细信息，包括以树形格式显示的HTML代码，如下面的截图所示：
- en: '![Inspecting pages and elements with Firefox using the Firebug add-in](img/3506_OS_03_02.jpg)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用Firefox和Firebug插件检查页面和元素](img/3506_OS_03_02.jpg)'
- en: Using Firebug, we can also validate XPath or CSS selectors using the search
    box shown in the Firebug section. Just enter the XPath or CSS selector, and Firebug
    will highlight the element(s) that match the expression, as shown in the following
    screenshot:![Inspecting pages and elements with Firefox using the Firebug add-in](img/3506_OS_03_03.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Firebug，我们还可以通过Firebug部分显示的搜索框验证XPath或CSS选择器。只需输入XPath或CSS选择器，Firebug就会突出显示与表达式匹配的元素（s），如下面的截图所示：![使用Firefox和Firebug插件检查页面和元素](img/3506_OS_03_03.jpg)
- en: Inspecting pages and elements with Google Chrome
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Google Chrome检查页面和元素
- en: 'Google Chrome provides a built-in feature to analyze an element or page. You
    can inspect pages and elements by following the given steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Google Chrome提供了一个内置功能来分析元素或页面。您可以通过遵循以下步骤检查页面和元素：
- en: Move the mouse over a desired element on a page and right-click to open the
    pop-up menu; then select the **Inspect element** option.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标移至页面上的所需元素上，然后右键单击以打开弹出菜单；然后选择**检查元素**选项。
- en: 'This will open the developer tools in the browser, which display information
    similar to that of Firebug, as shown in the following screenshot:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在浏览器中打开开发者工具，显示与Firebug类似的信息，如下面的截图所示：
- en: '![Inspecting pages and elements with Google Chrome](img/3506_OS_03_04.jpg)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用Google Chrome检查页面和元素](img/3506_OS_03_04.jpg)'
- en: Similar to Firebug in Firefox, we can also test XPath and CSS selectors in the
    Google Chrome Developer Tools. Press *Ctrl* + *F* in the **Elements** tab. This
    will display a search box. Just enter the XPath or CSS selector and Firebug will
    highlight element(s) that match the expression, as shown in the following screenshot:![Inspecting
    pages and elements with Google Chrome](img/3506_OS_03_05.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与Firefox中的Firebug类似，我们还可以在Google Chrome开发者工具中测试XPath和CSS选择器。在**元素**选项卡中按*Ctrl*
    + *F*。这将显示一个搜索框。只需输入XPath或CSS选择器，Firebug就会突出显示与表达式匹配的元素（s），如下面的截图所示：![使用Google
    Chrome检查页面和元素](img/3506_OS_03_05.jpg)
- en: Inspecting pages and elements with Internet Explorer
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Internet Explorer检查页面和元素
- en: 'Microsoft Internet Explorer also provides built-in features to analyze elements
    or pages. You can inspect pages and elements by following the given steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Internet Explorer也提供了内置功能来分析元素或页面。你可以按照以下步骤检查页面和元素：
- en: To open the developer tools, press the *F12* key. The developer tools section
    will be displayed at the bottom of browser.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要打开开发者工具，按*F12*键。开发者工具部分将在浏览器底部显示。
- en: To inspect an element, click on the pointer icon and hover over the desired
    element on the page. The developer tools will highlight the element with a blue
    outline and display the HTML code in a tree as shown in the following screenshot:![Inspecting
    pages and elements with Internet Explorer](img/3506_OS_03_06.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查一个元素，点击指针图标，并将鼠标悬停在页面上的目标元素上。开发者工具将以蓝色轮廓突出显示该元素，并在以下截图所示的树中显示HTML代码：![使用Internet
    Explorer检查页面和元素](img/3506_OS_03_06.jpg)
- en: You will find these tools very useful while writing tests. Some of these tools
    also provide the ability to run JavaScript code for debugging and testing.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试时，你会发现这些工具非常有用。其中一些工具还提供了运行JavaScript代码进行调试和测试的能力。
- en: Finding elements with Selenium WebDriver
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Selenium WebDriver查找元素
- en: We need to tell Selenium how to find an element so that it can simulate a desired
    user action, or look at the attributes or state of an element so that we can perform
    a check. For example, if we want to search for a product, we need to find the
    search text field and search button visually. We enter the search term by pressing
    various keys on the keyboard and click on the search button to submit our search
    request.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要告诉Selenium如何查找一个元素，以便它可以模拟一个期望的用户操作，或者查看一个元素的属性或状态，以便我们可以执行检查。例如，如果我们想搜索一个产品，我们需要通过视觉上找到搜索文本框和搜索按钮。我们通过按键盘上的各种键来输入搜索词，然后点击搜索按钮来提交我们的搜索请求。
- en: We can automate the same actions using Selenium. However, Selenium does not
    understand these fields or buttons visually as we do. It needs to find the search
    textbox and search button to simulate keyboard entry and mouse click programmatically.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Selenium自动化相同的操作。然而，Selenium并不像我们那样理解这些字段或按钮的视觉信息。它需要找到搜索文本框和搜索按钮，以模拟程序化的键盘输入和鼠标点击。
- en: Selenium provides various `find_element_by` methods to find elements on a web
    page. These methods search for an element based on the criteria supplied to them.
    If a matching element is found, an instance of WebElement is returned or the `NoSuchElementException`
    exception is thrown if Selenium is not able to find any element matching the search
    criteria.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium提供了各种`find_element_by`方法来在网页上查找元素。这些方法根据提供给它们的准则搜索元素。如果找到匹配的元素，则返回`WebElement`实例；如果Selenium无法找到任何匹配搜索准则的元素，则抛出`NoSuchElementException`异常。
- en: Selenium also provides various `find_elements_by` methods to locate multiple
    elements. These methods search and return a list of elements that match the supplied
    values.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium还提供了各种`find_elements_by`方法来定位多个元素。这些方法根据提供的值搜索并返回匹配的元素列表。
- en: Using the find methods
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用查找方法
- en: 'Selenium provides eight `find_element_by` methods to locate elements. In this
    section, we will see each one of them in detail. The following table lists `find_element_by`
    methods:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium提供了八个`find_element_by`方法来定位元素。在本节中，我们将详细查看每一个。以下表格列出了`find_element_by`方法：
- en: '| Method | Description | Argument | Example |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `find_element_by_id(id)` | This method finds an element by the ID attribute
    value | `id`: The ID of the element to be found | `driver.find_element_by_id(''search'')`
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `find_element_by_id(id)` | 通过ID属性值查找元素 | `id`：要查找的元素的ID | `driver.find_element_by_id(''search'')`
    |'
- en: '| `find_element_by_name(name)` | This method finds an element by the name attribute
    value | `name`: The name of the element to be found | `driver.find_element_by_name(''q'')`
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `find_element_by_name(name)` | 通过名称属性值查找元素的方法 | `name`: 要查找的元素名称 | `driver.find_element_by_name(''q'')`
    |'
- en: '| `find_element_by_class_name(name)` | This method finds an element by the
    class attribute value | `name`: The class name of the element to be found | `driver.find_element_by_class_name(''input-text'')`
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `find_element_by_class_name(name)` | 通过类属性值查找元素的方法 | `name`: 要查找的元素类名 | `driver.find_element_by_class_name(''input-text'')`
    |'
- en: '| `find_element_by_tag_name(name)` | This method finds an element by its tag
    name | `name`: The tag name of the element to be found | `driver.find_element_by_tag_name(''input'')`
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `find_element_by_tag_name(name)` | 通过标签名查找元素的方法 | `name`: 要查找的元素标签名 | `driver.find_element_by_tag_name(''input'')`
    |'
- en: '| `find_element_by_xpath(xpath)` | This method finds an element using XPath
    | `xpath`: The xpath of the element to be found | `driver.find_element_by_xpath(''//form[0]/div[0]/input[0]'')`
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `find_element_by_xpath(xpath)` | 使用XPath查找元素的方法 | `xpath`: 要查找的元素XPath |
    `driver.find_element_by_xpath(''//form[0]/div[0]/input[0]'')` |'
- en: '| `find_element_by_css_selector(css_selector)` | This method finds an element
    by the CSS selector | `css_selector`: The CSS selector of the element to be found
    | `driver.find_element_by_css_selector(''#search'')` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `find_element_by_css_selector(css_selector)` | 通过CSS选择器查找元素的方法 | `css_selector`:
    要查找的元素CSS选择器 | `driver.find_element_by_css_selector(''#search'')` |'
- en: '| `find_element_by_link_text(link_text)` | This method finds an element by
    the link text | `link_text`: The text of the element to be found | `driver.find_element_by_link_text(''Log
    In'')` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `find_element_by_link_text(link_text)` | 通过链接文本查找元素的方法 | `link_text`: 要查找的元素文本
    | `driver.find_element_by_link_text(''Log In'')` |'
- en: '| `find_element_by_partial_link_text(link_text)` | This method finds an element
    by a partial match of its link text | `link_text`: The text to match part of the
    text of the element | `driver.find_element_by_partial_link_text(''Log'')` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `find_element_by_partial_link_text(link_text)` | 通过部分匹配链接文本查找元素的方法 | `link_text`:
    匹配元素部分文本的文本 | `driver.find_element_by_partial_link_text(''Log'')` |'
- en: 'The following table lists the `find_elements_by` methods that return a list
    of elements matching the specified criteria:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了返回匹配指定条件的元素列表的`find_elements_by`方法：
- en: '| Method | Description | Argument | Example |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `find_elements_by_id(id_)` | This method finds multiple elements using the
    ID | `id_`: The ID of the elements to be found | `driver.find_element_by_id(''product'')`
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `find_elements_by_id(id_)` | 使用ID查找多个元素的方法 | `id_`: 要查找的元素ID | `driver.find_element_by_id(''product'')`
    |'
- en: '| `find_elements_by_name(name)` | This method finds elements using the name
    | `name`: The name of the elements to be found | `driver.find_elements_by_name(''products'')`
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `find_elements_by_name(name)` | 使用名称查找元素的方法 | `name`: 要查找的元素名称 | `driver.find_elements_by_name(''products'')`
    |'
- en: '| `find_elements_by_class_name(name)` | This method finds elements using the
    class name | `name`: The class name of the elements to be found | `driver.find_elements_by_class_name(''foo'')`
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `find_elements_by_class_name(name)` | 使用类名查找元素的方法 | `name`: 要查找的元素类名 | `driver.find_elements_by_class_name(''foo'')`
    |'
- en: '| `find_elements_by_tag_name(name)` | This method finds elements using the
    tag name | `name`: The tag name of the element to be found | `driver.find_elements_by_tag_name(''a'')`
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `find_elements_by_tag_name(name)` | 使用标签名查找元素的方法 | `name`: 要查找的元素标签名 | `driver.find_elements_by_tag_name(''a'')`
    |'
- en: '| `find_elements_by_xpath(xpath)` | This method finds multiple elements by
    XPath | `xpath`: The xpath of the elements to be found | `driver.find_elements_by_xpath("//div[contains(@class,
    ''lists'')]")` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `find_elements_by_xpath(xpath)` | 通过XPath查找多个元素的方法 | `xpath`: 要查找的元素XPath
    | `driver.find_elements_by_xpath("//div[contains(@class, ''lists'')]")` |'
- en: '| `find_elements_by_css_selector(css_selector)` | This method finds elements
    using the CSS selector | `css_selector`: The CSS selector of the element to be
    found | `driver.find_element_by_css_selector(''.input-class'')` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `find_elements_by_css_selector(css_selector)` | 使用CSS选择器查找元素的方法 | `css_selector`:
    要查找的元素CSS选择器 | `driver.find_element_by_css_selector(''.input-class'')` |'
- en: '| `find_elements_by_link_text(text)` | This method finds elements using the
    link text | `text`: The text of the elements to be found | `driver.find_elements_by_link_text(''Log
    In'')` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `find_elements_by_link_text(text)` | 使用链接文本查找元素的方法 | `text`: 要查找的元素文本 | `driver.find_elements_by_link_text(''Log
    In'')` |'
- en: '| `find_elements_by_partial_link_text(link_text)` | This method finds elements
    by a partial match of their link text | `link_text`: The text to match part of
    the text of the elements | `driver.find_element_by_partial_link_text(''Add to,'')`
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `find_elements_by_partial_link_text(link_text)` | 此方法通过元素链接文本的部分匹配来查找元素 |
    `link_text`: 匹配元素文本的一部分的文本 | `driver.find_element_by_partial_link_text(''Add to,'')`
    |'
- en: Finding elements using the ID attribute
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用ID属性查找元素
- en: Finding elements using the ID is the most preferable way to find elements on
    a page. The `find_element_by_id()` and `find_elements_by_id()` methods return
    an element or a set of elements that have matching ID attribute values.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ID查找页面上的元素是最受欢迎的方法。`find_element_by_id()`和`find_elements_by_id()`方法返回具有匹配ID属性值的元素或一组元素。
- en: The `find_element_by_id()` method returns the first element that has a matching
    ID attribute value. If no element with matching ID attribute is found, a `NoSuchElementException`
    will be raised.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_element_by_id()`方法返回第一个具有匹配ID属性值的元素。如果没有找到具有匹配ID属性值的元素，将引发`NoSuchElementException`。'
- en: 'Let''s try finding the search textbox from the sample application as shown
    in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试从以下截图所示的示例应用程序中找到搜索文本框：
- en: '![Finding elements using the ID attribute](img/3506_OS_03_07.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![使用ID属性查找元素](img/3506_OS_03_07.jpg)'
- en: 'Here is the HTML code for the search textbox with an ID attribute value defined
    as `search`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是具有ID属性值定义为`search`的搜索文本框的HTML代码：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is a test that uses the `find_element_by_id()` method to find the search
    textbox and check its `maxlength` attribute. We will pass the ID attribute''s
    value, `search`, to the `find_element_by_id()` method:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用`find_element_by_id()`方法查找搜索文本框并检查其`maxlength`属性的测试示例。我们将传递ID属性值`search`到`find_element_by_id()`方法：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `find_elements_by_id()` method returns all the elements that have the same
    ID attribute values.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_elements_by_id()`方法返回所有具有相同ID属性值的元素。'
- en: Finding elements using the name attribute
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用名称属性查找元素
- en: Finding an element by its name attribute value is another preferred method.
    The `find_element_by_name()` and `find_elements_by_name()` methods return element(s)
    that have matching name attribute value. If no element is found with matching
    name attribute value, a `NoSuchElementException` will be raised.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过其名称属性值查找元素是另一种受欢迎的方法。`find_element_by_name()`和`find_elements_by_name()`方法返回具有匹配名称属性值的元素（s）。如果没有找到具有匹配名称属性值的元素，将引发`NoSuchElementException`。
- en: 'In the previous example, we can find the search textbox using its name attribute
    value instead of the ID attribute value in the following way:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以使用名称属性值而不是ID属性值以以下方式找到搜索文本框：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `find_elements_by_name()` method returns all the elements that have the
    same name attribute values.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_elements_by_name()`方法返回所有具有相同名称属性值的元素。'
- en: Finding elements using the class name
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用类名查找元素
- en: Apart from using the ID and name attributes, we can also use the class attributes
    to find elements. The class attribute is used to apply CSS to an element. The
    `find_element_by_class_name()` and `find_elements_by_class_name()` methods return
    element(s) that have matching class attribute value. If no element is found with
    the matching name attribute value, a `NoSuchElementException` will be raised.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用ID和名称属性外，我们还可以使用类属性来查找元素。类属性用于将CSS应用于元素。`find_element_by_class_name()`和`find_elements_by_class_name()`方法返回具有匹配类属性值的元素（s）。如果没有找到具有匹配名称属性值的元素，将引发`NoSuchElementException`。
- en: Tip
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Finding elements using ID, name, or class attributes is the most preferred and
    fastest way to find elements. Selenium WebDriver also offers a set of methods
    when these methods are not sufficient to find an element. We will see these methods
    later in the chapter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ID、名称或类属性查找元素是查找元素最受欢迎和最快的方法。Selenium WebDriver还提供了一套方法，当这些方法不足以查找元素时。我们将在本章后面看到这些方法。
- en: 'Let''s find the search button displayed in the following screenshot using its
    class attribute value using the `find_element_by_class_name()` method:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`find_element_by_class_name()`方法通过其类属性值找到以下截图显示的搜索按钮：
- en: '![Finding elements using the class name](img/3506_OS_03_08.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![使用类名查找元素](img/3506_OS_03_08.jpg)'
- en: 'The search button (the magnifying glass icon) is implemented using the `<button>`
    element with type, title, and class attribute values defined as shown in the following
    HTML code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索按钮（放大镜图标）是通过具有类型、标题和类属性值的`<button>`元素实现的，如下面的HTML代码所示：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s create a test that finds the search button element using its class attribute
    value and check whether it is enabled as shown in following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个测试，使用其类属性值查找搜索按钮元素，并检查它是否启用，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `find_elements_by_class_name()` method returns all the elements that have
    the identical class name attribute values.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_elements_by_class_name()` 方法返回所有具有相同类名属性值的元素。'
- en: Finding elements using the tag name
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用标签名查找元素
- en: The `find_element_by_tag_name()` and `find_elements_by_tag_name()` methods find
    element(s) by their HTML tag name. These methods are similar to the `getElementsByTagName()`
    DOM method in JavaScript. If no element is found with a matching tag name, a `NoSuchElementException`
    will be raised.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_element_by_tag_name()` 和 `find_elements_by_tag_name()` 方法通过元素的 HTML 标签名来查找元素。这些方法与
    JavaScript 中的 `getElementsByTagName()` DOM 方法类似。如果找不到匹配的标签名的元素，将抛出 `NoSuchElementException`
    异常。'
- en: These methods are useful when we want to find elements using their tag name.
    For example, to find all the `<tr>` tags in a table to find the number of rows.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要通过标签名查找元素时，这些方法很有用。例如，为了找到表格中的所有 `<tr>` 标签以确定行数。
- en: 'The home page of the sample application displays promotional banner images
    as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 示例应用的首页显示了促销横幅图像，如下面的截图所示：
- en: '![Finding elements using the tag name](img/3506_OS_03_09.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![使用标签名查找元素](img/3506_OS_03_09.jpg)'
- en: 'These banners are implemented using an `<img>` or image tag inside a `<ul>`
    or unordered list tag as shown in the following HTML code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这些横幅是通过在 `<ul>` 或无序列表标签内使用 `<img>` 或图像标签实现的，如下面的 HTML 代码所示：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will use the `find_elements_by_tag_name()` method to get all the images.
    In this example, we will first find the list of banners implemented as `<ul>`
    or unordered lists using the `find_element_by_class_name()` method and then get
    all the `<img>` or image elements by calling the `find_elements_by_tag_name()`
    method on the banners list:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `find_elements_by_tag_name()` 方法获取所有图像。在这个例子中，我们将首先使用 `find_element_by_class_name()`
    方法找到实现为 `<ul>` 或无序列表的横幅列表，然后通过在横幅列表上调用 `find_elements_by_tag_name()` 方法来获取所有 `<img>`
    或图像元素。
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finding elements using XPath
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 XPath 查找元素
- en: XPath is a query language used to search and locate nodes in an XML document.
    All the major web browsers support XPath. Selenium can leverage and use powerful
    XPath queries to find elements on a web page.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 是一种查询语言，用于在 XML 文档中搜索和定位节点。所有主要的网络浏览器都支持 XPath。Selenium 可以利用并使用强大的 XPath
    查询来查找网页上的元素。
- en: One of the advantages of using XPath is when we can't find a suitable ID, name,
    or class attribute value for the element. We can use XPath to either find the
    element in absolute terms or relative to an element that does have an ID or name
    attribute. We can also use defined attributes other than the ID, name, or class
    with XPath queries. We can also find elements with the help of a partial check
    on attribute values using XPath functions such as `starts-with()`, `contains()`,
    and `ends-with()`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 XPath 的一个优点是，当我们无法为元素找到合适的 ID、name 或 class 属性值时。我们可以使用 XPath 来在绝对术语中查找元素，或者相对于具有
    ID 或 name 属性的元素查找。我们还可以使用 XPath 查询中定义的除 ID、name 或 class 之外的属性。我们还可以使用 XPath 函数如
    `starts-with()`、`contains()` 和 `ends-with()` 来对属性值进行部分检查以查找元素。
- en: Tip
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To know more about XPath, visit [http://www.w3schools.com/Xpath/](http://www.w3schools.com/Xpath/)
    and [http://www.zvon.org/comp/r/tut-XPath_1.html](http://www.zvon.org/comp/r/tut-XPath_1.html).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 XPath 的信息，请访问 [http://www.w3schools.com/Xpath/](http://www.w3schools.com/Xpath/)
    和 [http://www.zvon.org/comp/r/tut-XPath_1.html](http://www.zvon.org/comp/r/tut-XPath_1.html)。
- en: You can find more about XPath locators in the book *Selenium Testing Tools Cookbook*,
    *Packt Publishing*.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *Selenium Testing Tools Cookbook*，*Packt Publishing* 一书中了解更多关于 XPath 定位符的信息。
- en: 'The `find_element_by_xpath()` and `find_elements_by_xpath()` methods return
    element(s) that are found by the specified XPath query. For example, we can check
    whether the promo banners displayed on the home page work as intended and we can
    open the promotion pages using these images as shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_element_by_xpath()` 和 `find_elements_by_xpath()` 方法返回通过指定的 XPath 查询找到的元素。例如，我们可以检查主页上显示的促销横幅是否按预期工作，并且我们可以使用这些图像打开促销页面，如下面的截图所示：'
- en: '![Finding elements using XPath](img/3506_OS_03_10.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![使用 XPath 查找元素](img/3506_OS_03_10.jpg)'
- en: 'Here is how the Shop Private Sales banner is defined as an `<img>` tag. The
    image does not have the ID, name, or class attributes defined. Also, we cannot
    use the `find_by_tag_name()` method as there are multiple `<img>` tags defined
    on the page. However, by looking at the following HTML code, we can get the `<img>`
    tag using the `alt` attribute:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Shop Private Sales 标签定义为 `<img>` 标签的方式。该图像没有定义 ID、name 或 class 属性。此外，我们无法使用
    `find_by_tag_name()` 方法，因为页面上定义了多个 `<img>` 标签。然而，通过查看以下 HTML 代码，我们可以使用 `alt` 属性获取
    `<img>` 标签：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s create a test that uses the `find_element_by_xpath()` method. We are
    using a relative XPath query to find this `<img>` tag using its `alt` attribute
    (this is how we can use ID, name, and class attributes as well as other attributes
    such as `title`, `type`, `value`, `alt`, and so on within XPath queries):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个使用 `find_element_by_xpath()` 方法的测试。我们使用相对 XPath 查询，通过其 `alt` 属性来查找这个
    `<img>` 标签（这就是我们如何在 XPath 查询中使用 ID、name 和 class 属性以及其他属性，如 `title`、`type`、`value`、`alt`
    等）：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `find_elements_by_xpath()` method returns all the elements that match the
    XPath query.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_elements_by_xpath()` 方法返回所有与 XPath 查询匹配的元素。'
- en: Finding elements using CSS selectors
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 CSS 选择器查找元素
- en: CSS is a style sheet language used by web designers to describe the look and
    feel of an HTML document. CSS is used to define various style classes that can
    be applied to elements for formatting. CSS selectors are used to find HTML elements
    based on their attributes such as ID, classes, types, attributes, or values and
    much more to apply the defined CSS rules.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 是一种样式表语言，由网页设计师用来描述 HTML 文档的外观和感觉。CSS 用于定义可以应用于元素的样式类，以便进行格式化。CSS 选择器用于根据元素的属性（如
    ID、类、类型、属性或值等）查找 HTML 元素，以便应用定义的 CSS 规则。
- en: Similar to XPath, Selenium can leverage and use CSS selectors to find elements
    on a web page. To know more about CSS selectors, visit [http://www.w3schools.com/css/css_selectors.asp](http://www.w3schools.com/css/css_selectors.asp)
    and [http://www.w3.org/TR/CSS2/selector.html](http://www.w3.org/TR/CSS2/selector.html).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 与 XPath 类似，Selenium 可以利用并使用 CSS 选择器来查找网页上的元素。要了解更多关于 CSS 选择器的信息，请访问 [http://www.w3schools.com/css/css_selectors.asp](http://www.w3schools.com/css/css_selectors.asp)
    和 [http://www.w3.org/TR/CSS2/selector.html](http://www.w3.org/TR/CSS2/selector.html)。
- en: The `find_element_by_css_selector()` and `find_elements_by_css_selector()` methods
    return element(s) that are found by the specified CSS selector.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_element_by_css_selector()` 和 `find_elements_by_css_selector()` 方法返回由指定的
    CSS 选择器找到的元素。'
- en: 'On the home page of the sample application, we can see the shopping cart icon.
    When we click on the icon, we can see the shopping cart. When there are no items
    added to the shopping cart, a message should be displayed saying **You have no
    items in your shopping cart**, as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例应用的首页上，我们可以看到购物车图标。当我们点击图标时，我们可以看到购物车。当购物车中没有添加任何项目时，应该显示一条消息说 **您的购物车中没有商品**，如图所示：
- en: '![Finding elements using CSS selectors](img/3506_OS_03_11.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![使用 CSS 选择器查找元素](img/3506_OS_03_11.jpg)'
- en: 'This is implemented as shown in the following HTML code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下 HTML 代码中实现：
- en: '[PRE11]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s create a test to validate this message. We will use CSS selectors to
    find the shopping cart icon, click on it, and then find the shopping cart message
    implemented in the `<p>` or paragraph element:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个测试来验证这个消息。我们将使用 CSS 选择器来查找购物车图标，点击它，然后找到 `<p>` 或段落元素中实现的购物车消息：
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We used the element tag along with the class name in this example. For example,
    to get the shopping cart icon, we used the following selector:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了元素标签和类名。例如，要获取购物车图标，我们使用了以下选择器：
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will first find a `<div>` element with the `header_minicart` class name
    and then find a `<span>` element under this `div`, which has `icon` as its class
    name.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将首先找到一个具有 `header_minicart` 类名的 `<div>` 元素，然后找到该 `div` 下的 `<span>` 元素，其类名为
    `icon`。
- en: You can find more about CSS selectors in *Selenium Testing Tools Cookbook*,
    *Packt Publishing*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *Selenium 测试工具手册*，*Packt 出版* 中找到更多关于 CSS 选择器的信息。
- en: Finding links
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找链接
- en: 'The `find_element_by_link_text()` and `find_elements_by_link_text()` methods
    find link(s) using the text displayed for the link. For example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_element_by_link_text()` 和 `find_elements_by_link_text()` 方法通过链接显示的文本来查找链接。例如：'
- en: To get the **Account** link displayed on the Home page, as shown in the following
    screenshot, we can use the `find_element_by_link_text()` method:![Finding links](img/3506_OS_03_12.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取主页上显示的 **Account** 链接，如图所示，我们可以使用 `find_element_by_link_text()` 方法：![查找链接](img/3506_OS_03_12.jpg)
- en: 'Here is the HTML code for the **Account** link implemented as the `<a>` (or
    anchor tag) and the `<span>` tag with text:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面是**账户**链接的HTML代码，它被实现为`<a>`（或锚标签）和`<span>`标签，并带有文本：
- en: '[PRE14]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s create a test that locates the **Account** link using its text and check
    whether it''s displayed:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个测试，使用文本定位**账户**链接，并检查它是否显示：
- en: '[PRE15]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `find_elements_by_link_text()` method gets all the link elements that have
    matching link text.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_elements_by_link_text()` 方法获取所有具有匹配链接文本的链接元素。'
- en: Finding links with partial text
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用部分文本查找链接
- en: 'The `find_element_by_partial_link_text()` and `find_elements_by_partial_link_text()`
    methods find link(s) using partial text. These methods are useful where we want
    to find links using partial text values. Consider the following steps as an example:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_element_by_partial_link_text()` 和 `find_elements_by_partial_link_text()`
    方法通过部分文本查找链接。这些方法在需要使用部分文本值查找链接时非常有用。以下步骤可作为示例：'
- en: 'On the home page of the application, two links are displayed to open the Account
    page: one in the header section with `Account` as text and the other in the footer
    with `My Account` as text.'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的首页上，显示两个链接以打开账户页面：一个在页眉部分，文本为`Account`，另一个在页脚部分，文本为`My Account`。
- en: 'Let''s use the `find_elements_by_partial_link_text()` method to find these
    links using the `Account` text and check whether we have two of these links available
    on the page:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用 `find_elements_by_partial_link_text()` 方法使用`Account`文本查找这些链接，并检查页面上是否有两个这样的链接可用：
- en: '[PRE16]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Putting all the tests together using find methods
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用查找方法汇总所有测试
- en: In the previous sections, we saw various `find_element_by` methods along with
    examples. Let's pull together all these examples in a test.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们看到了各种 `find_element_by` 方法及其示例。现在让我们将这些示例汇总到一个测试中。
- en: 'Create a new `homepagetest.py` file and copy all the tests that we created
    earlier as shown in the following code:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `homepagetest.py` 文件，并将我们之前创建的所有测试复制进去，如下代码所示：
- en: '[PRE17]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s execute all the tests through the command line using the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令通过命令行执行所有测试：
- en: '[PRE18]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: After running the tests, `unittest` shows that seven tests were run and all
    passed with OK status as shown in the following screenshot:![Putting all the tests
    together using find methods](img/3506_OS_03_13.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试后，`unittest` 显示运行了七个测试，并且所有测试都通过了，状态为OK，如下截图所示：![使用查找方法汇总所有测试](img/3506_OS_03_13.jpg)
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you learned one of the most important features of Selenium
    for finding elements on web pages to simulate user actions.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了Selenium最重要的功能之一，即如何在网页上查找元素以模拟用户操作。
- en: We looked at various `find_element_by_` methods to find an element using ID,
    name, class name attributes, tags names, XPath, CSS selectors, and to find links
    using link text and partial link text.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了各种 `find_element_by_` 方法，用于通过ID、name、class name属性、标签名、XPath、CSS选择器查找元素，以及使用链接文本和部分链接文本查找链接。
- en: We implemented tests using various `find_element_by` methods to understand various
    strategies that we can use to find elements.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用各种 `find_element_by` 方法实现了测试，以了解我们可以使用的各种查找元素策略。
- en: This chapter will be the foundation for the coming chapters that delve into
    using the Selenium API for user interactions.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将是后续章节的基础，这些章节将深入探讨使用Selenium API进行用户交互。
- en: In the next chapter, you will learn how to use Selenium WebDriver functions
    to interact with various HTML elements and perform actions such as entering a
    value in a textbox, clicking on a button, selecting drop-down options, handling
    JavaScript alerts, and working with frames and windows.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用Selenium WebDriver函数与各种HTML元素交互，并执行诸如在文本框中输入值、点击按钮、选择下拉选项、处理JavaScript警告以及与框架和窗口一起工作等操作。
