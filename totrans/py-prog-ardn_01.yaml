- en: Chapter 1. Getting Started with Python and Arduino
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. Python和Arduino入门
- en: This chapter introduces the Python programming language and the open source
    electronic prototyping platform Arduino. The first section of the chapter focuses
    on Python and briefly describes the benefits of Python along with installation
    and configuration steps. The remaining part of the chapter describes Arduino and
    Arduino's development environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Python编程语言和开源电子原型平台Arduino。本章的第一部分专注于Python，并简要描述了Python的优势以及安装和配置步骤。本章的其余部分描述了Arduino及其开发环境。
- en: At the end of this chapter, you will have configured a programming environment
    for both Python and Arduino for your favorite operating system. If you are a beginner
    with either or both platforms (that is, Python and Arduino), it is advisable that
    you follow the given steps in this chapter, as the later chapters will assume
    that you have the exact configuration described here. If you have previous experience
    of working with these platforms, you can skip to the next chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将为你的操作系统配置好用于Python和Arduino的编程环境。如果你是这两个平台（即Python和Arduino）的初学者，建议你遵循本章中给出的步骤，因为后续章节将假设你已经拥有了这里描述的精确配置。如果你有在这些平台上工作的经验，你可以跳到下一章。
- en: Introduction to Python
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python简介
- en: Since its introduction by Guido van Rossum in 1991, Python has grown into one
    of the most widely used general-purpose, high-level programming languages, and
    is supported by one of the largest open source developer communities. Python is
    an open source programming language that includes a lot of supporting libraries.
    These libraries are the best feature of Python, making it one of the most extensible
    platforms. Python is a dynamic programming language, and it uses an interpreter
    to execute code at runtime rather than using a compiler to compile and create
    executable byte codes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 自1991年由Guido van Rossum引入以来，Python已经发展成为最广泛使用的通用、高级编程语言之一，并得到了最大的开源开发者社区的支持。Python是一种开源编程语言，包括大量的支持库。这些库是Python的最好特性，使其成为最可扩展的平台之一。Python是一种动态编程语言，它使用解释器在运行时执行代码，而不是使用编译器编译和创建可执行的字节码。
- en: The philosophy behind the development of Python was to create flexible, readable,
    and clear code to easily express concepts. The emphasis on using whitespace indentation
    in a unique way differentiates Python from other popular high-level languages.
    Python supports functional, imperative, and object-oriented programming with automatic
    memory management.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python开发背后的哲学是创建灵活、可读和清晰的代码，以便轻松表达概念。强调以独特的方式使用空白缩进区分Python与其他流行的面向高级语言。Python支持函数式、命令式和面向对象编程，具有自动内存管理功能。
- en: Why we use Python
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们为什么使用Python
- en: 'Python is considered to be one of the easiest languages to learn for first-time
    programmers. Compared to other popular object-oriented languages such as C++ and
    Java, Python has the following major benefits for programmers:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python被认为是最容易学习的编程语言之一，对于初学者来说。与其他流行的面向对象语言如C++和Java相比，Python对程序员有以下主要优势：
- en: It is easy to read and understand
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它易于阅读和理解
- en: It enables rapid prototyping and reduces development time
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它能够实现快速原型设计并减少开发时间
- en: It has a humongous amount of free library packages
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它拥有大量的免费库包
- en: Python has a huge open source community that drives forth the effort for continuous
    improvement of Python as a programming language. The Python community is also
    responsible for the development of a large amount of open library packages, which
    can be used to build applications that span from dynamic websites to complex data
    analysis applications, as well as the development of simple GUI-based applications
    to plot charts from complex math functions. The majority of Python library packages
    have systematically maintained the code that was obtained from the community with
    regular updates. The de facto repository that indexes the largest number of Python
    packages is PyPI ([http://pypi.python.org](http://pypi.python.org)). PyPI also
    provides simple ways to install various packages on your operating system, which
    will be covered in the upcoming section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 拥有一个庞大的开源社区，推动着 Python 作为编程语言的持续改进。Python 社区还负责开发大量开源库包，这些库包可以用来构建从动态网站到复杂数据分析应用的应用程序，以及开发基于简单
    GUI 的应用程序来绘制复杂数学函数的图表。Python 大多数库包都系统地维护了从社区获得的代码，并定期更新。索引 Python 包数量最多的默认仓库是
    PyPI ([http://pypi.python.org](http://pypi.python.org))。PyPI 还提供了简单的方法来在您的操作系统上安装各种包，这将在下一节中介绍。
- en: While working with the hardware platform, it is necessary to have some means
    of communication between the hardware and the computer that you are using for
    development. Among the common computer to hardware interfacing methods, serial-
    port-based communication is the most popular, and it is really simple to establish,
    especially for the Arduino platform. Python provides a library called `pySerial`
    that is really easy to use and quick to implement to interface a serial port.
    It is really simple to use similar libraries and Python's interactive programming
    abilities to rapidly test and implement your project ideas.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在与硬件平台一起工作时，有必要在硬件和您用于开发的计算机之间建立某种通信方式。在常见的计算机与硬件接口方法中，基于串口的通信是最受欢迎的，尤其是在 Arduino
    平台上，它非常简单易建立。Python 提供了一个名为 `pySerial` 的库，它非常易于使用，并且快速实现串口接口。使用类似的库和 Python 的交互式编程能力，可以快速测试和实现您的项目想法。
- en: Nowadays, complex **Internet of Things** (**IoT**) applications not only require
    serial communication support, but they also need additional high-level features
    such as **graphical user interfaces** (**GUIs**) for operating systems, web interfaces
    for remote access, plots for data visualization, tools for data analysis, interfaces
    for data storage, and so on. Using any other programming language such as C++
    or Java, the development of these features would require a large amount of programming
    effort due to the distributed and unorganized nature of the supporting tools.
    Thankfully, Python has been very successful at providing support for these types
    of applications for years. Python has a number of libraries to support the development
    of each of the features mentioned here, which are available through PyPI. These
    libraries are open source, easy to use, and widely supported by the community.
    This makes Python a language of choice for IoT applications. Additionally, Python
    also has support to create and ship your custom-built applications as libraries
    so that everyone else can also utilize them in their projects. This is a helpful
    feature if you are developing custom protocols, APIs, or algorithms for your own
    hardware products.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，复杂的 **物联网**（**IoT**）应用程序不仅需要串行通信支持，还需要操作系统的高级功能，如 **图形用户界面**（**GUIs**），远程访问的
    Web 接口，数据可视化的图表，数据分析工具，数据存储接口等。使用任何其他编程语言，如 C++ 或 Java，由于支持工具的分布式和无组织性，开发这些功能将需要大量的编程工作。幸运的是，Python
    多年来在为这些类型的应用程序提供支持方面非常成功。Python 有多个库支持开发这里提到的每个功能，这些库通过 PyPI 提供。这些库是开源的，易于使用，并且得到了社区的广泛支持。这使得
    Python 成为物联网应用程序的首选语言。此外，Python 还支持创建和分发您自定义构建的应用程序作为库，以便其他人也可以在他们的项目中使用它们。如果您正在为您的硬件产品开发自定义协议、API
    或算法，这是一个非常有用的功能。
- en: When do we use other languages
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们何时使用其他语言
- en: So, when should we not use Python for our projects? As mentioned earlier, Python
    is a dynamic language that reduces development time, but it also makes the execution
    of your code slower as compared to other static high-level languages such as C,
    C++, and Java. These static languages use a compiler to compile the code and create
    binaries that get executed during runtime, thereby increasing the runtime performance.
    When the performance of the code is more important than a longer development time
    and higher cost, you should consider these static languages. Some other drawbacks
    of Python include being memory heavy, not having the proper support for threading,
    and lacking data protection features. In short, we can say that even though Python
    provides quicker and easier ways for quick prototyping, we should consider other
    static high-level languages for development after we are done testing our prototype
    and we are ready to ship our product. Nowadays, this scenario is changing rapidly
    and companies have started utilizing Python for their industrial products.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们什么时候不应该使用Python来开发我们的项目呢？如前所述，Python是一种动态语言，可以减少开发时间，但与C、C++和Java等其他静态高级语言相比，它也会使您的代码执行速度变慢。这些静态语言使用编译器编译代码并创建在运行时执行的二进制文件，从而提高运行时性能。当代码的性能比更长的开发时间和更高的成本更重要时，您应该考虑这些静态语言。Python的一些其他缺点包括内存占用大、没有适当的线程支持以及缺乏数据保护功能。简而言之，我们可以这样说，尽管Python提供了快速原型设计的快捷方式，但在我们完成原型测试并准备发布产品后，我们应该考虑使用其他静态高级语言进行开发。如今，这种状况正在迅速变化，公司已经开始利用Python来开发他们的工业产品。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can obtain more Python-related information from the official website at
    [http://www.python.org](http://www.python.org).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从官方网站[http://www.python.org](http://www.python.org)获取更多与Python相关的信息。
- en: Installing Python and Setuptools
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Python和Setuptools
- en: 'Python comes in two versions: Python v2.x and Python v3.x. (Here, x represents
    an appropriate version number.) While Python v2.x is a legacy branch and has better
    library support, Python v3.x is the future of Python. Most Linux distributions
    and Mac OS X operating systems are equipped with Python, and they have v2.x as
    their preferred and default version of Python. We will be using Python v2.7 as
    the default version of Python for the rest of the book due to the following reasons:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Python有两种版本：Python v2.x和Python v3.x。（在这里，x代表适当的版本号。）虽然Python v2.x是一个遗留分支，并且具有更好的库支持，但Python
    v3.x是Python的未来。大多数Linux发行版和Mac OS X操作系统都配备了Python，它们将v2.x作为首选和默认的Python版本。由于以下原因，本书将使用Python
    v2.7作为Python的默认版本：
- en: It is the most current version of the Python v2.x branch
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是Python v2.x分支的最新版本
- en: It has large community support and solutions for its known issues are available
    through support forums
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它拥有庞大的社区支持，并且可以通过支持论坛获取其已知问题的解决方案
- en: It is supported by most of the major Python libraries
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它被大多数主要的Python库支持
- en: Even though the code samples, exercises, and projects provided in this book
    should work in any variant of Python 2.7.x, it's better to have the latest version.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书提供的代码示例、练习和项目应该能在任何Python 2.7.x变体中运行，但拥有最新版本会更好。
- en: Installing Python
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Python
- en: 'Your fondness for an operating system is developed due to multiple factors,
    and you can never ignore someone''s bias towards a particular OS. Thus, this book
    provides installation and configuration guidelines for three of the most popular
    operating systems: Linux, Mac OS X, and Windows. Let''s begin by configuring Python
    for a Linux computer.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您对操作系统的喜爱是由多种因素决定的，您永远不能忽视某人对特定操作系统的偏见。因此，本书提供了三个最受欢迎的操作系统（Linux、Mac OS X和Windows）的安装和配置指南。让我们首先为Linux计算机配置Python。
- en: Linux
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux
- en: 'The majority of Linux distributions come with Python preinstalled. To check
    the latest version of the installed Python, use the following command at the terminal
    window:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Linux发行版都预装了Python。要检查已安装Python的最新版本，请在终端窗口中使用以下命令：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Make sure that you are using an uppercase `V` as the option for the previous
    command. Once you execute it on the terminal, it will print the complete version
    number of your current Python installation. If the version is 2.7.x, you are good
    to go and your Linux is updated with the latest version of Python that is required
    for this book. However, if you have any version that is less than or equal to
    2.6.x, you will need to first upgrade Python to the latest version. This process
    will require root privileges, as Python will be installed as a system component
    that will replace the previous versions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在执行前一个命令时使用的是大写字母 `V` 作为选项。一旦你在终端上执行它，它将打印出你当前 Python 安装的完整版本号。如果版本是 2.7.x，那么你可以继续，你的
    Linux 已经更新到了为这本书所需的 Python 的最新版本。然而，如果你有任何低于或等于 2.6.x 的版本，你将需要首先将 Python 升级到最新版本。这个过程将需要
    root 权限，因为 Python 将作为一个系统组件被安装，以替换之前的版本。
- en: Ubuntu
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ubuntu
- en: 'If you are using Ubuntu 11.10 or later versions, you should already have Python
    v2.7.x installed on your machine. You can still upgrade Python to the latest revision
    of v2.7.x using the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Ubuntu 11.10 或更高版本，你的机器上应该已经安装了 Python v2.7.x。你可以使用以下命令将 Python 升级到
    v2.7.x 的最新版本：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are running an older version of Ubuntu (such as 10.04 or older), you
    should have 2.6 as the default version. In this case, you will need to run the
    following set of commands to install version 2.7:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在运行较旧的 Ubuntu 版本（如 10.04 或更早版本），你应该有 2.6 作为默认版本。在这种情况下，你需要运行以下一系列命令来安装版本
    2.7：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first command will add an external Ubuntu repository, which will allow you
    to install any version of Python. The next command will update and index the list
    of available packages. The last command will install the latest version of Python
    2.7.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令将添加一个外部 Ubuntu 仓库，这将允许你安装任何版本的 Python。下一个命令将更新和索引可用的软件包列表。最后一个命令将安装 Python
    2.7 的最新版本。
- en: Fedora and Red Hat
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fedora 和 Red Hat
- en: 'Fedora and Red Hat Linux also ships with Python as an in-built package. If
    you want to upgrade the version of Python to the latest one, run the following
    command at the terminal:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora 和 Red Hat Linux 也自带了 Python 作为内置包。如果你想将 Python 的版本升级到最新版本，请在终端运行以下命令：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有 Packt 出版物书籍的账户中下载示例代码文件 [http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册，以便将文件直接通过电子邮件发送给你。
- en: Windows
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: Installation and configuration of Python on Windows is not as straightforward
    as it is for Linux. First of all, you'll need to download a copy of Python from
    [http://www.python.org/getit](http://www.python.org/getit).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上安装和配置 Python 不像在 Linux 上那么简单。首先，你需要从 [http://www.python.org/getit](http://www.python.org/getit)
    下载 Python 的副本。
- en: You need to be careful about the version of Python that you are downloading.
    From the system properties of your Windows OS, check whether the operating system
    is of 32 bit or 64 bit. At the time this book was being written, the latest version
    of Python was 2.7.6\. So, download the latest available version of Python, but
    make sure that it is 2.7.x and not 3.x.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要小心你正在下载的 Python 版本。从你的 Windows 操作系统系统属性中检查操作系统是 32 位还是 64 位。在本书编写时，Python
    的最新版本是 2.7.6。因此，下载 Python 的最新可用版本，但请确保它是 2.7.x 而不是 3.x。
- en: For many third-party Python libraries, the installation binary files for Windows
    are compiled for the 32-bit version. Due to this reason, we will recommend that
    you install the 32-bit version of Python for your Windows OS.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多第三方 Python 库，Windows 的安装二进制文件是为 32 位版本编译的。由于这个原因，我们建议你在 Windows 操作系统上安装
    32 位版本的 Python。
- en: If you are really familiar with Python and know your way around installing libraries,
    you can install the 64-bit version of Python. Select and run the downloaded file
    to install Python. Although you can install it to any custom location, it is advisable
    to use the default installation location as the upcoming configuration steps use
    the default location. Once the installation is complete, you can find the Python
    command-line tool and IDLE (Python GUI) from the **Start** menu.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您非常熟悉Python并且知道如何安装库，您可以安装64位版本的Python。选择并运行下载的文件来安装Python。尽管您可以将其安装到任何自定义位置，但建议使用默认安装位置，因为即将进行的配置步骤使用的是默认位置。安装完成后，您可以从**开始**菜单中找到Python命令行工具和IDLE（Python
    GUI）。
- en: Although you can always open these tools from the **Start** menu for basic scripting,
    we will modify the Windows system parameters to make Python accessible through
    the Windows command prompt. To accomplish this, we will have to set up `PATH`
    in environment variables for the location of the Python installation directory.
    Let's open **System Properties** by right-clicking on **My Computer** and then
    selecting **Properties**. Otherwise, you can also navigate to **Start** | **Control
    Panel** | **System and Security** | **System**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可以从**开始**菜单打开这些工具进行基本脚本编写，但我们将修改Windows系统参数，以便通过Windows命令提示符访问Python。为此，我们必须在环境变量中设置`PATH`，以便指向Python安装目录的位置。让我们通过右键单击**我的电脑**并选择**属性**来打开**系统属性**。否则，您也可以通过导航到**开始**
    | **控制面板** | **系统和安全** | **系统**来找到它。
- en: 'You will be able to see a window similar to the one that is displayed in the
    following screenshot. The **System** window shows you the basic information about
    your computer, including the type of Windows operating system that you are using
    (such as the 32-bit or the 64-bit version):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您将能够看到一个类似于以下截图所示的窗口。**系统**窗口显示了您计算机的基本信息，包括您使用的Windows操作系统类型（例如32位或64位版本）：
- en: '![Windows](img/5938OS_01_01.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Windows](img/5938OS_01_01.jpg)'
- en: In the **System** window, click on **Advanced system settings** in the left
    navigation bar to open a window called **System Properties**. Click on the **Environment
    Variables…** button in the **System Properties** window, which is located at the
    bottom of the window. This will open an interface similar to the one shown in
    the following screenshot. In **Environment Variables**, you need to update the
    **PATH** system variable to add Python to the default operating system's path.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在**系统**窗口中，点击左侧导航栏中的**高级系统设置**以打开一个名为**系统属性**的窗口。在**系统属性**窗口中，点击位于窗口底部的**环境变量…**按钮，这将打开一个类似于以下截图所示的界面。在**环境变量**中，您需要更新**PATH**系统变量，以便将Python添加到默认操作系统的路径中。
- en: 'Click on the **PATH** option as displayed in the following screenshot, which
    will pop up an **Edit System Variable** window. Add `C:\Python27` or the full
    path of your custom Python installation directory at the end of your existing
    **PATH** variable. It is required to put a semicolon (`;`) before the Python installation
    path. If you already see Python''s location in the **Path** variable, your system
    is set up for Python and you don''t need to perform any changes:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 点击以下截图显示的**PATH**选项，这将弹出一个**编辑系统变量**窗口。在您的现有**PATH**变量末尾添加`C:\Python27`或您自定义Python安装目录的完整路径。在Python安装路径之前必须放置一个分号（`;`）。如果您已经在**路径**变量中看到了Python的位置，那么您的系统已经为Python设置了，您不需要进行任何更改：
- en: '![Windows](img/5938OS_01_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Windows](img/5938OS_01_02.jpg)'
- en: The main benefit of adding Python to the environment variables is to enable
    access to the Python interpreter from the command prompt. In case you don't know,
    the Windows command prompt can be accessed by navigating to **Start** | **Programs**
    | **Accessories** | **Command Prompt**.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将Python添加到环境变量的主要好处是能够从命令提示符访问Python解释器。如果您不知道，可以通过导航到**开始** | **程序** | **附件**
    | **命令提示符**来访问Windows命令提示符。
- en: Mac OS X
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mac OS X
- en: 'Mac OS X ships with a preinstalled copy of Python, but due to the long release
    cycle of the operating system, the frequency of updates for the default Python
    application is slow. The latest version of Mac OS X, which is 10.9 Maverick, comes
    equipped with Python 2.7.5, which is the latest version:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Mac OS X预装了Python，但由于操作系统的长期发布周期，默认Python应用程序的更新频率较慢。最新的Mac OS X版本，即10.9 Maverick，配备了Python
    2.7.5，这是最新的版本：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Previous versions such as Mac OS X 10.8 Mountain Lion and Mac OS X 10.7 Lion
    included Python 2.7.2 and Python 2.7.1 respectively, which are also compatible
    versions for this book. If you are an experienced Python user or someone who wants
    to work with the latest version of Python, you can download the latest version
    from [http://www.python.org/getit](http://www.python.org/getit).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的版本，如 Mac OS X 10.8 Mountain Lion 和 Mac OS X 10.7 Lion 分别包含了 Python 2.7.2
    和 Python 2.7.1，这些也是本书的兼容版本。如果你是一位经验丰富的 Python 用户或者想要使用 Python 最新版本的人，你可以从 [http://www.python.org/getit](http://www.python.org/getit)
    下载最新版本。
- en: Older versions of Mac OS X such as Snow Leopard and later, which came with an
    older version of Python, can be updated to the latest version by downloading and
    installing it from [http://www.python.org/getit](http://www.python.org/getit).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版本的 Mac OS X，如 Snow Leopard 及更高版本，它们附带了一个较旧的 Python 版本，可以通过从 [http://www.python.org/getit](http://www.python.org/getit)
    下载和安装来更新到最新版本。
- en: Installing Setuptools
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Setuptools
- en: Setuptools is a library containing a collection of utilities for building and
    distributing Python packages. The most important tool from this collection is
    called `easy_install`. It allows a user to look into PyPI, the Python package
    repository that we mentioned previously, and provides a simple interface to install
    any package by name. The `easy_install` utility automatically downloads, builds,
    installs, and manages packages for the user. This utility has been used in the
    later part of this book to install the necessary packages required for the upcoming
    projects of Python and Arduino. Although `easy_install` has been used as a simple
    way of installing Python packages, it misses out on a few useful features such
    as tracking actions, support for uninstallation, and support for other version
    control systems. In recent years, the Python community has started adopting another
    tool called `pip` over `easy_install` that supports these features. As both `easy_install`
    and `pip` utilize the same PyPI repository, going forward, you can use any of
    these utilities to install the required Python packages.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Setuptools 是一个包含构建和分发 Python 包的实用工具集合的库。这个集合中最重要的工具被称为 `easy_install`。它允许用户查看我们之前提到的
    PyPI，即 Python 包仓库，并提供一个简单的接口通过名称安装任何包。`easy_install` 实用工具会自动下载、构建、安装和管理用户所需的包。这个实用工具在本书的后期部分被用来安装
    Python 和 Arduino 即将到来的项目所需的必要包。尽管 `easy_install` 被用作安装 Python 包的简单方式，但它缺少了一些有用的功能，如跟踪操作、支持卸载和支持其他版本控制系统。近年来，Python
    社区开始采用另一个名为 `pip` 的工具来替代 `easy_install`，它支持这些功能。由于 `easy_install` 和 `pip` 都使用相同的
    PyPI 仓库，因此从现在开始，你可以使用这些实用工具中的任何一个来安装所需的 Python 包。
- en: Just to narrow down the scope, we will be focusing on methods to install Setuptools
    and the default utilities that get installed with it, that is, `easy_install`.
    Later in this section, we will also install `pip`, just in case you want to use
    it too. Let's first begin by installing Setuptools for the various operating systems.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缩小范围，我们将专注于安装 Setuptools 以及与之一起安装的默认实用工具，即 `easy_install`。在本节稍后，我们还将安装 `pip`，以防你也需要使用它。让我们首先从为各种操作系统安装
    Setuptools 开始。
- en: Linux
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux
- en: 'In Ubuntu, Setuptools is available in the default repository and it can be
    installed using the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 中，Setuptools 可在默认仓库中找到，可以使用以下命令进行安装：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For Fedora, it can be installed using the default software manager `yum`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Fedora，可以使用默认的软件管理器 `yum` 进行安装：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For other Linux distributions, it can be downloaded and built using the following
    single-line script:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他 Linux 发行版，可以使用以下单行脚本下载和构建：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once it is installed on your Linux distribution, `easy_install` can be directly
    accessed from the terminal as a built-in command.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在你的 Linux 发行版上安装了 Setuptools，`easy_install` 可以直接从终端作为内置命令访问。
- en: Windows
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: Installation of Setuptools is not that straightforward for Windows as compared
    to Linux. It requires the user to download the `ez_setup.py` file from the Windows
    section at [https://pypi.python.org/pypi/setuptools](https://pypi.python.org/pypi/setuptools).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Linux 相比，Setuptools 的安装对 Windows 来说并不那么直接。它要求用户从 [https://pypi.python.org/pypi/setuptools](https://pypi.python.org/pypi/setuptools)
    的 Windows 部分下载 `ez_setup.py` 文件。
- en: 'Once this is downloaded, press *Shift* and right-click in the folder where
    you downloaded the `ez_setup.py` file. Select **Open command window here** and
    execute the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，在下载 `ez_setup.py` 文件的文件夹中按住 *Shift* 键并右键点击。选择 **在此处打开命令窗口** 并执行以下命令：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will install Setuptools in the `Scripts` folder of your default Python
    installation folder. Using the same method that we used when we added Python to
    **Environment Variables**, now include Setuptools by adding `C:\Python27\Scripts`
    to **PATH**, followed by the semicolon (;).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的默认Python安装文件夹的`Scripts`文件夹中安装Setuptools。使用我们添加Python到**环境变量**时使用的方法，现在通过将`C:\Python27\Scripts`添加到**PATH**，后面跟着分号（;）来包含Setuptools。
- en: This will enable the installation of various Python packages using `easy_install`
    to your Python packages folder called `Libs`. Once you have added the package
    manager to the environment variables, you need to close and reopen the command
    prompt for these changes to take effect.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使您能够使用`easy_install`将各种Python包安装到名为`Libs`的Python包文件夹中。一旦您将包管理器添加到环境变量中，您需要关闭并重新打开命令提示符以使这些更改生效。
- en: Mac OS X
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mac OS X
- en: Setuptools can be installed in Mac OS X using any of the following methods.
    It is advisable for beginners to use the first method, as the second method requires
    the external package manager Homebrew.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Setuptools可以使用以下任何一种方法在Mac OS X中安装。对于初学者来说，建议使用第一种方法，因为第二种方法需要外部包管理器Homebrew。
- en: 'If you have never worked with Homebrew before, you will need to follow these
    steps to install Setuptools on your Mac:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前从未使用过Homebrew，您需要按照以下步骤在您的Mac上安装Setuptools：
- en: Download `ez_setup.py` from the Unix/Mac section at [https://pypi.python.org/pypi/setuptools](https://pypi.python.org/pypi/setuptools).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://pypi.python.org/pypi/setuptools](https://pypi.python.org/pypi/setuptools)的Unix/Mac部分下载`ez_setup.py`。
- en: Open the terminal and navigate to the directory where you downloaded this file.
    For most browsers, the file gets saved to the `Download` folder.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并导航到您下载此文件的目录。对于大多数浏览器，文件会被保存在`下载`文件夹中。
- en: 'Run the following command in the terminal to build and set up Setuptools:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令以构建和设置Setuptools：
- en: '[PRE9]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you are familiar with Homebrew-based software installation, just follow
    these quick steps to install Setuptools:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉基于Homebrew的软件安装，只需按照以下快速步骤安装Setuptools：
- en: 'First, install `wget` from Homebrew if you don''t have it already:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，如果您还没有安装`wget`，请从Homebrew安装它：
- en: '[PRE10]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once you have installed `wget`, run the following command in the terminal:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您安装了`wget`，请在终端中运行以下命令：
- en: '[PRE11]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information regarding the Homebrew utility can be obtained from [http://brew.sh](http://brew.sh).
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多关于Homebrew实用工具的信息可以从[http://brew.sh](http://brew.sh)获取。
- en: 'You can install Homebrew on your Mac by running the following simple script
    in the terminal:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过在终端中运行以下简单脚本来在您的Mac上安装Homebrew：
- en: '[PRE12]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Installing pip
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装pip
- en: 'As you have successfully installed Setuptools, let''s use it to install `pip`.
    For Linux or Mac OS X, you can run the following command in the terminal to install
    `pip`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您已成功安装Setuptools，让我们使用它来安装`pip`。对于Linux或Mac OS X，您可以在终端中运行以下命令来安装`pip`：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For Windows, open the command prompt and execute the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，打开命令提示符并执行以下命令：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you have already installed `pip` on your computer, please make sure that
    you upgrade it to the latest version to overcome the few bugs that are associated
    with the upgrade. You can upgrade `pip` using the following command at the terminal:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在您的计算机上安装了`pip`，请确保您将其升级到最新版本以克服与升级相关的一些错误。您可以在终端使用以下命令升级`pip`：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Since you have already used `easy_install` to install a Python package, let's
    get ourselves more familiar with Python package management.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您已经使用`easy_install`安装了一个Python包，让我们更熟悉Python包管理。
- en: Installing Python packages
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Python包
- en: With the installation of `pip`, you have two different options to install any
    third-party Python package listed on the PyPi repository ([http://pypi.python.org](http://pypi.python.org)).
    The following are the various procedures that you need to know to work with the
    installation of Python packages. In the following examples, the term `PackageName`
    is a pseudo name that is used for a Python package that you want to work with.
    For your package of choice, identify the appropriate package name from the PyPi
    website and put its name in place of `PackageName`. In some cases, you will need
    root (super user) privileges to install or uninstall a package. You can use `sudo`
    followed by an appropriate command for these cases.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`pip`后，您有两个不同的选项来安装PyPi存储库上列出的任何第三方Python包([http://pypi.python.org](http://pypi.python.org))。以下是需要了解的用于处理Python包安装的各种程序。在以下示例中，术语`PackageName`是一个用于您想要与之工作的Python包的伪名称。对于您选择的包，从PyPi网站识别适当的包名并将其名称放在`PackageName`的位置。在某些情况下，您需要root（超级用户）权限来安装或卸载包。在这种情况下，您可以使用`sudo`后跟适当的命令。
- en: 'To install a Python package, execute the following command at the terminal:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Python包，请在终端中执行以下命令：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Otherwise, you can also execute the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，您还可以执行以下命令：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you want to install a specific version of a package, you can use the following
    command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想安装特定版本的包，可以使用以下命令：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you are not aware of the exact version number, you can also use comparison
    operators such as `>`, `<`, `>=`, or `<=` to specify a range for the version number.
    Both `easy_install` and `pip` will select the best matching version of the package
    from the repository and install it:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不知道确切的版本号，您也可以使用比较运算符，如`>`、`<`、`>=`或`<=`来指定版本号的范围。`easy_install`和`pip`都会从存储库中选择最佳匹配的包版本并安装：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Meanwhile, for `pip`, you can use the following identical commands to perform
    similar operations:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，对于`pip`，您可以使用以下相同的命令执行类似操作：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As an example, if you want to install a version between 1.0 and 3.0, you will
    need to use the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想安装1.0到3.0之间的版本，您需要使用以下命令：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It is really easy to upgrade a package using either `easy_install` or `pip`.
    The command options used by both are also very similar:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`easy_install`或`pip`升级包非常简单。两者使用的命令选项也非常相似：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Although `easy_install` doesn''t support clean uninstallation of a package,
    you can use the following command to make sure that Python stops searching for
    the specified package. Later, carefully remove the package files from the installation
    directory:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`easy_install`不支持包的干净卸载，但您可以使用以下命令确保Python停止搜索指定的包。之后，请从安装目录中仔细删除包文件：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'A much better way to perform a clean uninstallation of the majority of packages
    is to use `pip` instead of `easy_install`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 清理卸载大多数包的更好方法是使用`pip`而不是`easy_install`：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: A detailed list of the Python packages supported by Setuptools can be found
    at the PyPI website at [https://pypi.python.org/](https://pypi.python.org/).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyPI网站[https://pypi.python.org/](https://pypi.python.org/)上可以找到Setuptools支持的Python包的详细列表。
- en: The fundamentals of Python programming
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python编程的基础知识
- en: If you have previous experience of working with any other programming language,
    Python is very easy to get started with. If you have never done programming before,
    this section will walk you through some of the basics of Python. If you have already
    worked with Python, you should skip this section and move on to the next one.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有使用其他任何编程语言的经验，Python入门非常容易。如果您以前从未编程过，本节将带您了解Python的一些基础知识。如果您已经使用过Python，您应该跳过本节，继续下一节。
- en: Assuming that the setup instructions are followed correctly, let's open the
    Python interpreter by executing the Python command at the terminal or the command
    prompt. You should get results similar to those displayed in the following screenshot.
    If you have installed Python by downloading the setup files from the website,
    you should have the Python **integrated development environment** (**IDLE**) installed
    as well. You can also start the Python interpreter by opening its IDLE from the
    location where it was installed.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 假设设置说明正确无误，让我们通过在终端或命令提示符中执行Python命令来打开Python解释器。您应该得到以下截图显示的类似结果。如果您是从网站上下载设置文件安装的Python，那么您也应该已经安装了Python
    **集成开发环境**（**IDLE**）。您也可以通过打开其安装位置处的IDLE来启动Python解释器。
- en: As you can see, after printing some system information, the interpreter opens
    a prompt with three greater-than signs (`>>>`), which is also known as the primary
    prompt. The interpreter is now in the interactive mode and it is ready to execute
    scripts from the prompt.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，在打印一些系统信息后，解释器打开了一个带有三个大于号（`>>>`）的提示符，这也被称为主要提示符。现在解释器处于交互模式，并准备好从提示符执行脚本。
- en: '![The fundamentals of Python programming](img/5938OS_01_03.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![Python编程基础](img/5938OS_01_03.jpg)'
- en: To close the interactive mode of the Python interpreter, run the either `exit()`
    or `quit()`, at the primary prompt. Another method to exit from the interactive
    mode is to use the keyboard shortcut *Ctrl* + *D*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭Python解释器的交互模式，请在主要提示符下运行`exit()`或`quit()`，或者使用键盘快捷键*Ctrl* + *D*。
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that Python''s built-in functions are case sensitive. This means the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Python的内置函数是区分大小写的。这意味着以下情况：
- en: exit() ≠ EXIT() ≠ Exit()
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: exit() ≠ EXIT() ≠ Exit()
- en: The official Python website provides comprehensive tutorials for beginners to
    get started with Python programming. It is highly recommended that you visit the
    official Python tutorials at [https://docs.python.org/2/tutorial/index.html](https://docs.python.org/2/tutorial/index.html)
    if you are looking for detailed programming tutorials as compared to the upcoming
    brief overviews.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 官方Python网站为初学者提供了全面的教程，帮助他们开始Python编程。如果您正在寻找详细编程教程，而不是即将到来的简要概述，强烈建议您访问官方Python教程[https://docs.python.org/2/tutorial/index.html](https://docs.python.org/2/tutorial/index.html)。
- en: Python operators and built-in types
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python运算符和内置类型
- en: 'Now that you have a brief idea regarding the Python prompt, let''s get you
    familiar with some of the basic Python commands. For these exercises, we will
    be using the Python IDLE, which also opens with the Python interactive prompt.
    You will require a method to describe the code segments, tasks, and comments when
    writing large and complex code. Non-executable content is called comments in any
    programming language, and in Python, they start with the hashtag character (`#`).
    Like comments, you will be frequently required to check the output by printing
    on the prompt using the print command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对Python提示符有了初步的了解，让我们让您熟悉一些基本的Python命令。对于这些练习，我们将使用Python IDLE，它也以Python交互提示符打开。在编写大型和复杂代码时，您需要一种方法来描述代码段、任务和注释。在所有编程语言中，不可执行的内容被称为注释，在Python中，它们以井号字符（`#`）开头。像注释一样，您将经常需要通过在提示符中使用print命令来检查输出：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Instead of IDLE, you can also access the Python interactive prompt from the
    terminal. When using Python from the terminal, make sure that you are taking care
    of the indentation properly.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 除了IDLE，您还可以从终端访问Python交互式提示符。当从终端使用Python时，请确保您正确处理缩进。
- en: Operators
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运算符
- en: 'Python supports the usage of basic mathematical operators such as +, -, *,
    and /, directly from the interpreter. Using these operators, you can perform basic
    calculations in the prompt, as shown in the following examples. Try these operations
    in your prompt in order to start using the Python interpreter as a calculator:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持直接从解释器使用基本数学运算符，如+、-、*和/。使用这些运算符，您可以在提示符中执行基本计算，如下面的示例所示。尝试在您的提示符中执行这些操作，以便开始使用Python解释器作为计算器：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When working with the Python interpreter, it is recommended that you follow
    the Style Guide for Python Code, which is also popularly known as PEP-8 or pep8\.
    For more information about PEP-8, visit [https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Python解释器时，建议您遵循Python代码风格指南，这通常也被称为PEP-8或pep8。有关PEP-8的更多信息，请访问[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)。
- en: Built-in types
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置类型
- en: 'Python is a dynamically typed language, which means that you don''t have to
    explicitly declare the type of the variables when initializing them. When you
    assign a value to a variable, the Python interpreter automatically deduces the
    data type. For example, let''s declare the following variables in the interactive
    mode of the interpreter:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种动态类型语言，这意味着在初始化变量时，您不必显式声明变量的类型。当您给变量赋值时，Python解释器会自动推断数据类型。例如，让我们在解释器的交互模式下声明以下变量：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'While assigning the value to the `weight` variable, we didn''t specify the
    data type, but the Python interpreter assigned it as an integer type, `int`. The
    interpreter assigned the `int` type due to the reason that the numerical value
    didn''t contain any decimal points. Let''s now declare a variable with a value
    containing a decimal point. The built-in function `type()` that can be used to
    find out the data type of a specified variable:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在将值赋给 `weight` 变量时，我们没有指定数据类型，但 Python 解释器将其赋值为整型，`int`。解释器将 `int` 类型分配的原因是数值不包含任何小数点。现在让我们声明一个包含小数点的值的变量。可以使用
    `type()` 内置函数来找出指定变量的数据类型：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As you can see, the interpreter assigns the data type as `float`. The interpreter
    can also deduce the type of complex numbers, as shown in following examples. You
    can access the real and imaginary value of a complex number using the dot (`.`)
    operator followed by `real` and `imag`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，解释器将数据类型分配为 `float`。解释器还可以推断复数的类型，如下面的示例所示。你可以使用点（`.`）运算符后跟 `real` 和 `imag`
    来访问复数的实部和虚部：
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Just to play more with complex numbers, let''s try the `abs()` and `round()`
    functions as displayed in the following examples. They are built-in Python functions
    to obtain the absolute value and the rounded number respectively:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地与复数进行交互，让我们尝试以下示例中的 `abs()` 和 `round()` 函数。它们是用于获取绝对值和四舍五入数字的内置 Python
    函数：
- en: '[PRE30]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Like numbers, the Python interpreter can also automatically identify the declaration
    of string data types. In Python, string values are assigned using single or double
    quotes around the value. When the interpreter sees any value enclosed within quotes,
    it considers it to be a string. Python supports the usage of the `+` operator
    to concatenate strings:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 像数字一样，Python 解释器也可以自动识别字符串数据类型的声明。在 Python 中，字符串值使用单引号或双引号包围的值来赋值。当解释器看到任何用引号包围的值时，它将其视为字符串。Python
    支持使用 `+` 运算符来连接字符串：
- en: '[PRE31]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'A character type is a string of size one and the individual characters of a
    string can be accessed by using index numbers. The first character of a string
    is indexed as 0\. Play with the following scripts to understand indexing (subscripting)
    in Python:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 字符类型是大小为 1 的字符串，字符串的各个字符可以通过使用索引数字来访问。字符串的第一个字符索引为 0。通过以下脚本进行实验，以了解 Python 中的索引（下标）：
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Similar to the primary prompt with default notation `>>>`, the Python interactive
    interpreter also has a secondary prompt that uses three dots (…) when it is being
    used from the terminal. You won''t be able to see the three dots in IDLE when
    you use the secondary prompt. The secondary prompt is used for a multiline construct,
    which requires continuous lines. Execute the following commands by manually typing
    them in the interpreter, and do not forget to indent the next line after the `if`
    statement with a tab:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与默认符号 `>>>` 的主提示符类似，Python 交互式解释器在从终端使用时也有一个二级提示符，使用三个点（…）。当你使用二级提示符时，在 IDLE
    中你将看不到这三个点。二级提示符用于多行结构，需要连续的行。通过手动在解释器中输入以下命令来执行，并且不要忘记在 `if` 语句之后用制表符缩进下一行：
- en: '[PRE33]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Data structures
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据结构
- en: Python supports four main data structures (`list`, `tuple`, `set`, and `dictionary`)
    and there are a number of important built-in methods around these data structures.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Python 支持四种主要数据结构（`list`、`tuple`、`set` 和 `dictionary`），并且围绕这些数据结构有许多重要的内置方法。
- en: Lists
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表
- en: 'Lists are used to group together values of single or multiple data types. The
    `list` structure can be assigned by stating values in square brackets with a comma
    (,) as a separator:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 列表用于将单个或多个数据类型的值组合在一起。`list` 结构可以通过在方括号中声明值并使用逗号（,）作为分隔符来赋值：
- en: '[PRE34]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Like strings, values in a list can be accessed using index numbers, which starts
    from 0\. A feature called **slicing** is used by Python to obtain a specific subset
    or element of the data structure using the colon operator. In a standard format,
    slicing can be specified using the `myList[start:end:increment]` notation. Here
    are a few examples to better understand the notion of slicing:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 像字符串一样，列表中的值可以使用索引数字来访问，索引从 0 开始。Python 使用冒号运算符的切片功能来获取数据结构中的特定子集或元素。在标准格式中，切片可以使用
    `myList[start:end:increment]` 语法指定。以下是一些示例，以更好地理解切片的概念：
- en: 'You can access a single element in a list as follows:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以如下访问列表中的一个元素：
- en: '[PRE35]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You can access all the elements in the list by having empty start and end values:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过使用空起始和结束值来访问列表中的所有元素：
- en: '[PRE36]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can provide start and end index values to obtain a specific subset of the
    list:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以提供起始和结束索引值以获取列表的特定子集：
- en: '[PRE37]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Use of the minus symbol with an index number tells the interpreter to use that
    index number backwards. In the following example, `-1` backwards actually represents
    the index number `5`:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用减号和索引数字的组合告诉解释器使用该索引数字的反向。在以下示例中，`-1` 反向实际上代表索引数字 `5`：
- en: '[PRE38]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You can obtain every other element of the list by providing the increment value
    with start and end values:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过提供起始值和结束值来获取列表的每个其他元素：
- en: '[PRE39]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can check the length of a list variable using the `len()` method. The usage
    of this method will be handy in the upcoming projects:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用 `len()` 方法检查列表变量的长度。此方法在即将到来的项目中将非常有用：
- en: '[PRE40]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You can also perform various operations to add or delete elements in the existing
    list. For example, if you want to add an element at the end of the list, use the
    `append()` method on the list:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以执行各种操作以在现有列表中添加或删除元素。例如，如果您想在列表末尾添加一个元素，请使用列表上的 `append()` 方法：
- en: '[PRE41]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To add an element at a specific location, you can use the `insert(i, x)` method,
    where `i` denotes the index value, while `x` is the actual value that you want
    to add to the list:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在特定位置添加元素，您可以使用 `insert(i, x)` 方法，其中 `i` 表示索引值，而 `x` 是您想要添加到列表的实际值：
- en: '[PRE42]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Similarly, you can use `pop()` to remove an element from the list. A simple
    `pop()` function will remove the last element of the list, while an element at
    a specific location can be removed using `pop(i)`, where `i` is the index number:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，您可以使用 `pop()` 从列表中删除元素。简单的 `pop()` 函数将删除列表的最后一个元素，而使用 `pop(i)` 可以删除特定位置的元素，其中
    `i` 是索引数字：
- en: '[PRE43]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Tuples
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组
- en: Tuples are immutable data structures supported by Python (different from the
    mutable structures of lists). An immutable data structure means that you cannot
    add or remove elements from the tuple data structure. Due to their immutable properties,
    tuples are faster to access compared to lists and are mostly used to store a constant
    set of values that never change.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是 Python 支持的不可变数据结构（与列表的可变结构不同）。不可变数据结构意味着您不能从元组数据结构中添加或删除元素。由于它们的不可变属性，元组比列表访问更快，通常用于存储一组不变的值，这些值永远不会改变。
- en: 'The `tuple` data structure is declared like `list`, but by using parentheses
    or without any brackets:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`tuple` 数据结构声明方式与 `list` 相同，但使用括号或没有任何括号：'
- en: '[PRE44]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Just like in a `list` data structure, values in `tuple` can be accessed using
    index numbers:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在 `list` 数据结构中一样，`tuple` 中的值可以使用索引数字访问：
- en: '[PRE45]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: As tuples are immutable, list manipulation methods such as `append()`, `insert()`,
    and `pop()` don't apply for tuples.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 由于元组是不可变的，因此列表操作方法（如 `append()`、`insert()` 和 `pop()`）不适用于元组。
- en: Sets
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合
- en: 'The `set` data structure in Python is implemented to support mathematical set
    operations. The `set` data structure includes an unordered collection of elements
    without duplicates. With its mathematical use cases, this data structure is mostly
    used to find duplicates in lists, as conversion of a list to a set using the `set()`
    function removes duplicates from the list:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的 `set` 数据结构实现用于支持数学集合操作。`set` 数据结构包括一个无序的元素集合，没有重复项。由于其数学用例，此数据结构主要用于在列表中查找重复项，因为使用
    `set()` 函数将列表转换为集合会从列表中删除重复项：
- en: '[PRE46]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Dictionaries
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字典
- en: 'The `dict` data structure is used to store key-value pairs indexed by keys,
    which are also known in other languages as associative arrays, hashes, or hashmaps.
    Unlike other data structures, `dict` values can be extracted using associated
    keys:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`dict` 数据结构用于通过键索引存储键值对，在其他语言中也被称为关联数组、散列或哈希表。与其他数据结构不同，`dict` 的值可以通过关联键提取：'
- en: '[PRE47]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about Python data structures and associated methods at [https://docs.python.org/2/tutorial/datastructures.html](https://docs.python.org/2/tutorial/datastructures.html).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://docs.python.org/2/tutorial/datastructures.html](https://docs.python.org/2/tutorial/datastructures.html)
    了解更多关于 Python 数据结构和相关方法的信息。
- en: Controlling the flow of your program
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制程序流程
- en: Just like any other language, Python supports controlling the program flow using
    compound statements. In this section, we will briefly introduce these statements
    to you. You can get detailed information about them from the official Python documentation
    at [https://docs.python.org/2/reference/compound_stmts.html](https://docs.python.org/2/reference/compound_stmts.html).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何其他语言一样，Python支持使用复合语句控制程序流程。在本节中，我们将简要介绍这些语句。您可以从官方Python文档[https://docs.python.org/2/reference/compound_stmts.html](https://docs.python.org/2/reference/compound_stmts.html)中获取有关它们的详细信息。
- en: The if statement
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`if`语句'
- en: 'The `if` statement is the most basic and standard statement used to set up
    conditional flow. To better understand the `if` statement, execute the following
    code in the Python interpreter with different values of the `age` variable:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句是最基本和最标准的语句，用于设置条件流程。为了更好地理解`if`语句，请在Python解释器中执行以下代码，并使用不同的`age`变量值：'
- en: '[PRE48]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This will result in `Teen` being printed on the interpreter.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在解释器上打印出`Teen`。
- en: The for statement
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`for`语句'
- en: 'Python''s `for` statement iterates over the elements of any sequence according
    to the order of the elements in that sequence:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`for`语句按照序列中元素的顺序遍历任何序列的元素：
- en: '[PRE49]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This will result in the Python interpreter generating the following output
    that will display the calculated Fahrenheit values from the given Celsius values:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致Python解释器生成以下输出，显示从给定的摄氏值计算出的华氏值：
- en: '[PRE50]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The while statement
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`while`语句'
- en: 'The `while` statement is used to create a continuous loop in a Python program.
    A `while` loop keeps iterating over the code block until the condition is proved
    true:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`语句用于在Python程序中创建连续循环。`while`循环会持续迭代代码块，直到条件被证明为真：'
- en: '[PRE51]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `while` statement will keep iterating and printing the value of the variable
    count and also reduce its value by 1 until the condition, that is (`count > 0`),
    becomes true. As soon as the value of `count` is lower than or equal to 0, the
    `while` loop will exit the code block and stop iterating.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`语句将不断迭代并打印变量`count`的值，同时将其值减1，直到条件（即`count > 0`）为真。一旦`count`的值低于或等于0，`while`循环将退出代码块并停止迭代。'
- en: The other compound statements supported by Python are `try/catch` and `with`.
    These statements will be explained in detail in the upcoming chapters. Python
    also provides loop control statements such as `break`, `continue`, and `pass`
    that can be used while a loop is being executed using the compound statements
    mentioned earlier. You can learn more about these Python features from [https://docs.python.org/2/tutorial/controlflow.html](https://docs.python.org/2/tutorial/controlflow.html).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持的其他复合语句是`try/catch`和`with`。这些语句将在接下来的章节中详细介绍。Python还提供了循环控制语句，如`break`、`continue`和`pass`，可以在使用前面提到的复合语句执行循环时使用。您可以从[https://docs.python.org/2/tutorial/controlflow.html](https://docs.python.org/2/tutorial/controlflow.html)了解更多有关这些Python特性的信息。
- en: Built-in functions
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置函数
- en: Python supports a number of useful built-in functions that do not require any
    external libraries to be imported. We have described a few of these functions
    as a collection of a respective category, according to their functionalities.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持许多有用的内置函数，这些函数不需要导入任何外部库。我们已经根据它们的函数特性将这些函数描述为各自类别的集合。
- en: Conversions
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换
- en: 'Conversion methods such as `int()`, `float()`, and `str()` can convert other
    data types into integer, float, or string data types respectively:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 转换方法，如`int()`、`float()`和`str()`可以将其他数据类型分别转换为整数、浮点型或字符串数据类型：
- en: '[PRE52]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Similarly, `list()`, `set()`, and `tuple()` can be used to convert one data
    structure into another.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，可以使用`list()`、`set()`和`tuple()`将一种数据结构转换为另一种数据结构。
- en: Math operations
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数学运算
- en: 'Python also supports built-in mathematical functions that can find the minimum
    and/or maximum values from a list. Check out the following examples and play around
    with the different data structures to understand these methods:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Python还支持内置的数学函数，可以从列表中找到最小值和/或最大值。查看以下示例，并尝试不同的数据结构来理解这些方法：
- en: '[PRE53]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The `pow(x,y)` function returns the value of `x` to the power of `y`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`pow(x,y)`函数返回`x`的`y`次幂：'
- en: '[PRE54]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: String operations
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符串操作
- en: 'Python provides easy access to string manipulation through built-in functions
    that are optimized for performance. Let''s take a look at the following examples:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Python通过内置函数提供对字符串操作的简单访问，这些函数针对性能进行了优化。让我们看看以下示例：
- en: 'Code to replace occurrences of a string or substring with a different one:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于替换字符串或子字符串出现的代码：
- en: '[PRE55]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Code to split a string with a separating character where the default character
    is space:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于使用分隔字符分割字符串的代码，其中默认字符是空格：
- en: '[PRE56]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Code to split a string from a separating character for any other character:'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于使用任何其他分隔字符分割字符串的代码：
- en: '[PRE57]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Code to convert an entire string value into uppercase or lowercase:'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于将整个字符串值转换为大写或小写的代码：
- en: '[PRE58]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Note
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Python documentation on the official website covers every built-in function
    in detail with examples. For better understanding of Python programming, visit
    [https://docs.python.org/2/library/functions.html](https://docs.python.org/2/library/functions.html).
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 官方网站上的 Python 文档详细介绍了每个内置函数及其示例。为了更好地理解 Python 编程，请访问 [https://docs.python.org/2/library/functions.html](https://docs.python.org/2/library/functions.html)。
- en: Introduction to Arduino
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Arduino 简介
- en: Any electronic product that needs computation or interfacing with other computers
    first requires a quick prototyping of the concept using simple tools. Arduino
    is an open source hardware prototyping platform designed around a popular microcontroller
    family, and it includes a simple software development environment. Besides prototyping,
    you can also use Arduino for the development of your own **do-it-yourself** (**DIY**)
    projects. Arduino bridges the computational world with the physical world by letting
    you simply connect the sensors and actuators with a computer. Basically, you can
    write code to monitor and control various electronic components in your daily
    life by using Arduino's input/output pins and microcontroller. Examples of these
    components include motors, thermostats, lights, switches, and many more.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 任何需要计算或与其他计算机接口的电子产品，首先需要使用简单工具快速原型化其概念。Arduino 是一个围绕流行的微控制器系列设计的开源硬件原型平台，它包括一个简单的软件开发环境。除了原型化之外，你还可以使用
    Arduino 来开发自己的**自己动手做**（**DIY**）项目。Arduino 通过让你简单地将传感器和执行器与计算机连接起来，将计算世界与物理世界连接起来。基本上，你可以通过使用
    Arduino 的输入/输出引脚和微控制器来编写代码，监控和控制你日常生活中的各种电子组件。这些组件的例子包括电机、恒温器、灯光、开关等等。
- en: History
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 历史
- en: In 2005, Massimo Banzi, the Italian cofounder of Arduino, developed the technology
    for his students at **Interaction Design Institute Ivrea** (**IDII**). Since then,
    Arduino has developed into one of the largest open source hardware platforms.
    All software components and schematics of the Arduino design are open source,
    and you can buy the hardware at a very low cost—approximately 30 dollars—or you
    can even make it yourself.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 2005 年，Arduino 的意大利联合创始人 Massimo Banzi 为他在**互动设计学院伊夫雷亚**（**IDII**）的学生开发了这项技术。从那时起，Arduino
    已经发展成为最大的开源硬件平台之一。Arduino 设计的所有软件组件和原理图都是开源的，你可以以非常低的价格购买硬件——大约 30 美元——或者你也可以自己制作它。
- en: Why Arduino?
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择 Arduino？
- en: 'The major goal of the Arduino community is to continuously improve the Arduino
    platform with the following objectives in mind:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 社区的主要目标是持续改进 Arduino 平台，以下是一些考虑的目标：
- en: The Arduino platform should be an affordable platform
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 平台应该是一个经济实惠的平台
- en: It should be easy to use and easy to code
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该易于使用和编码
- en: It should be an open source and extensible software platform
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该是一个开源和可扩展的软件平台
- en: It should be an open source and extensible hardware platform
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该是一个开源和可扩展的硬件平台
- en: It should have community-supported DIY projects
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该有社区支持的 DIY 项目
- en: 'These simple but powerful objectives have made Arduino a popular and widely
    used prototyping platform. Arduino uses Atmel''s ATmega series of microcontrollers
    that are based on the popular hardware architecture of AVR. The huge support that
    is available for AVR architecture also makes Arduino a hardware platform of choice.
    The following image shows the basic version of the Arduino board, which is called
    Arduino Uno (Uno means one in Italian):'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '这些简单但强大的目标使 Arduino 成为一种流行的广泛使用的原型平台。Arduino 使用基于流行的 AVR 硬件架构的 Atmel ATmega
    系列微控制器。对 AVR 架构的巨大支持也使 Arduino 成为首选的硬件平台。以下图像显示了 Arduino 板的基本版本，称为 Arduino Uno（在意大利语中，Uno
    意味着“一个”）： '
- en: '![Why Arduino?](img/5938OS_01_04.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![为什么选择 Arduino？](img/5938OS_01_04.jpg)'
- en: Arduino variants
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arduino 变体
- en: Like any other project, hardware requirements are driven by project specifications.
    If you are developing a project that requires you to interface with a large number
    of external components, you need a prototyping platform that has a sufficient
    number of **input/output** (**I/O**) pins for interfacing. If you are working
    on a project that needs to perform a huge amount of complex calculations, you
    require a platform with more computation capability.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 任何项目，硬件需求都是由项目规格决定的。如果你正在开发一个需要与大量外部组件接口的项目，你需要一个具有足够数量的**输入/输出**（**I/O**）引脚的实验平台来进行接口。如果你正在从事一个需要进行大量复杂计算的项目，你需要一个计算能力更强的平台。
- en: 'Fortunately, the Arduino board exists in 16 different official versions, and
    each version of Arduino differs from the others in terms of form factor, computational
    power, I/O pins, and other on-board features. Arduino Uno is the basic and most
    popular version, which is sufficient enough for simple DIY projects. For the majority
    of exercises in this book, we will be using the Arduino Uno board. You can also
    use another popular variant called Arduino Mega, which is a larger board with
    extra pins and a powerful microcontroller. The following table shows the comparison
    of some of the more popular and active variants of the Arduino board:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Arduino板有16种不同的官方版本，每个版本的Arduino在形态、计算能力、I/O引脚和其他板载功能方面与其他版本不同。Arduino
    Uno是基本且最受欢迎的版本，对于简单的DIY项目来说已经足够。对于本书中的大多数练习，我们将使用Arduino Uno板。你也可以使用另一个流行的变体，即Arduino
    Mega，这是一个更大的板，具有额外的引脚和强大的微控制器。以下表格显示了Arduino板一些更受欢迎和活跃的变体的比较：
- en: '| Name | Processor | Processor frequency | Digital I/O | Digital I/O with PWM
    | Analog I/O |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 处理器 | 处理器频率 | 数字I/O | 数字I/O（带PWM） | 模拟I/O |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| Arduino Uno | ATmega328 | 16 MHz | 14 | 6 | 6 |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| Arduino Uno | ATmega328 | 16 MHz | 14 | 6 | 6 |'
- en: '| Arduino Leonardo | ATmega32u4 | 16 MHz | 14 | 6 | 12 |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| Arduino Leonardo | ATmega32u4 | 16 MHz | 14 | 6 | 12 |'
- en: '| Arduino Mega | ATmega2560 | 16 MHz | 54 | 14 | 16 |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| Arduino Mega | ATmega2560 | 16 MHz | 54 | 14 | 16 |'
- en: '| Arduino Nano | ATmega328 | 16 MHz | 14 | 6 | 8 |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| Arduino Nano | ATmega328 | 16 MHz | 14 | 6 | 8 |'
- en: '| Arduino Due | AT91SAM3X8E | 84 MHz | 54 | 12 | 12 |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| Arduino Due | AT91SAM3X8E | 84 MHz | 54 | 12 | 12 |'
- en: '| LilyPad Arduino | ATmega168v or ATmega328v | 8 MHz | 14 | 6 | 6 |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| LilyPad Arduino | ATmega168v或ATmega328v | 8 MHz | 14 | 6 | 6 |'
- en: Any of these variants can be programmed using a common integrated development
    environment called **Arduino IDE**, which is described in the upcoming section.
    You can select any one of these Arduino boards according to your project requirements,
    and the Arduino IDE should be able to compile and download the program to the
    board.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任何一种变体都可以使用一个称为**Arduino IDE**的通用集成开发环境进行编程，这将在下一节中描述。你可以根据项目需求选择这些Arduino板中的任何一个，Arduino
    IDE应该能够编译并将程序下载到板子上。
- en: The Arduino Uno board
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arduino Uno板
- en: As Uno is going to be the de facto board for the majority of the projects in
    this book, let's get ourselves familiar with the board. The latest revision of
    the Uno board is based on Atmel's ATmega328 microcontroller. The board extends
    the I/O pins of the microcontroller to the peripheral, which can then be utilized
    to interface components using wires. The board has a total of 20 pins to interface,
    out of which 14 are digital I/O pins and 6 are analog input pins. From the 14
    digital I/O pins, 6 pins also support **pulse-width modulation** (**PWM**), which
    supports the controlled delivery of power to connected components.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Arduino Uno将是本书中大多数项目的实际板，让我们熟悉一下该板。Uno板最新版本基于Atmel的ATmega328微控制器。该板将微控制器的I/O引脚扩展到外围，然后可以通过电线利用这些引脚来接口组件。该板共有20个引脚用于接口，其中14个是数字I/O引脚，6个是模拟输入引脚。在14个数字I/O引脚中，6个引脚也支持**脉冲宽度调制**（**PWM**），这支持对连接组件的功率进行控制性传输。
- en: The board operates on 5V. The maximum current rating of the digital I/O pins
    is 40 mA, which is sufficient to drive most of the DIY electronic components,
    excluding motors with high current requirements.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 该板在5V电压下工作。数字I/O引脚的最大电流额定值为40 mA，足以驱动大多数DIY电子元件，但不包括对高电流有要求的电机。
- en: While the previous image provided an overview of the Uno board, the following
    diagram describes the pins on the Uno board. As you can see, the digital pins
    are located on one side of the board while the analog pins are on the opposite
    side. The board also has a couple of power pins that can be used to provide 5V
    and 3.3V of power to external components. The board contains ground pins on both
    sides of the board as well. We will be extensively using 5V of power and ground
    pins for our projects. Digital pins **D0** and **D1** support serial interfacing
    through the **Tx** (**transmission**) and **Rx** (**receiver**) interfaces respectively.
    The USB port on the board can be used to connect Arduino with a computer.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的图像提供了 Uno 板的概述，但以下图表描述了 Uno 板上的引脚。如图所示，数字引脚位于板的一侧，而模拟引脚位于另一侧。板子上还有几个电源引脚，可以用来为外部组件提供
    5V 和 3.3V 的电源。板子的两侧也有地线引脚。我们将广泛使用 5V 的电源和地线引脚来完成我们的项目。数字引脚 **D0** 和 **D1** 分别通过
    **Tx**（**传输**）和 **Rx**（**接收器**）接口支持串行接口。板上的 USB 端口可以用来将 Arduino 连接到计算机。
- en: '![The Arduino Uno board](img/5938OS_01_05.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino Uno 板的图片](img/5938OS_01_05.jpg)'
- en: Now that we are familiar with the Arduino hardware, let's move on to programming
    the Arduino board.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经熟悉了 Arduino 硬件，让我们继续学习如何编程 Arduino 板。
- en: Installing the Arduino IDE
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Arduino IDE
- en: The first step to start getting familiar with Arduino is to install the Arduino
    **integrated development environment** (**IDE**). According to the operating system
    that you selected at the beginning of the Python installation section, follow
    the appropriate subsection to install the correct IDE.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 开始熟悉 Arduino 的第一步是安装 Arduino **集成开发环境**（**IDE**）。根据 Python 安装部分开始时选择的操作系统，遵循适当的子部分来安装正确的
    IDE。
- en: Linux
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux
- en: The installation of the Arduino IDE is really simple in Ubuntu. The Ubuntu repository
    already includes the Arduino IDE with the required dependencies.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装 Arduino IDE 非常简单。Ubuntu 仓库已经包含了带有所需依赖项的 Arduino IDE。
- en: 'For Ubuntu 12.04 or a newer version, execute the following command in the terminal
    to install Arduino:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Ubuntu 12.04 或更新的版本，请在终端中执行以下命令来安装 Arduino：
- en: '[PRE59]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The latest version of the Arduino IDE in the Ubuntu repository is 1.0.3\. You
    can obtain more information regarding other Ubuntu-related questions at [http://playground.arduino.cc/Linux/Ubuntu](http://playground.arduino.cc/Linux/Ubuntu).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 仓库中 Arduino IDE 的最新版本是 1.0.3。有关其他 Ubuntu 相关问题的更多信息，请参阅[http://playground.arduino.cc/Linux/Ubuntu](http://playground.arduino.cc/Linux/Ubuntu)。
- en: 'For Fedora 17 or a newer version of Red Hat Linux, execute the following script
    in the terminal:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Fedora 17 或更新的 Red Hat Linux 版本，请在终端中执行以下脚本：
- en: '[PRE60]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Answers to additional installation questions for Fedora can be obtained at [http://playground.arduino.cc/Linux/Fedora](http://playground.arduino.cc/Linux/Fedora).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[http://playground.arduino.cc/Linux/Fedora](http://playground.arduino.cc/Linux/Fedora)获取
    Fedora 的附加安装问题的答案。
- en: Mac OS X
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mac OS X
- en: 'To install the Arduino IDE on Mac OS X (10.7 or newer), perform the following
    steps:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Mac OS X（10.7 或更高版本）上安装 Arduino IDE，请执行以下步骤：
- en: From [http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software),
    download the latest version of the Arduino IDE for Mac OS X, which was 1.0.5 when
    this book was being written.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software)下载适用于
    Mac OS X 的最新版本的 Arduino IDE，当本书编写时，版本是 1.0.5。
- en: Unzip and drag Arduino to the application folder.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压并将 Arduino 拖到应用程序文件夹中。
- en: The Arduino IDE is built in Java and requires that your computer is equipped
    with the appropriate version of Java. Open the IDE from your applications. If
    you don't have Java installed on your Mac, the program will prompt you with a
    pop-up window and ask you to install Java SE 6 runtime. Go ahead and install Java
    (as per the request) as the OS X will automatically install it for you.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE 是用 Java 编写的，需要您的计算机配备适当的 Java 版本。从您的应用程序中打开 IDE。如果您在 Mac 上没有安装 Java，程序将弹出一个窗口并要求您安装
    Java SE 6 运行时。按照要求安装 Java（因为 OS X 会自动为您安装）。
- en: Windows
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: Installation of Arduino for Windows is very simple. Download the setup file
    from [http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software).
    Select the most recent version of the Arduino IDE, that is, 1.0.x or a newer version.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 上 Arduino 的安装非常简单。从[http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software)下载设置文件。选择
    Arduino IDE 的最新版本，即 1.0.x 或更新的版本。
- en: Make sure you download the appropriate version of the Arduino IDE according
    to your operating system, that is, 32 bit or 64 bit. Install the IDE to the default
    location as specified in the installation wizard. Once installed, you can open
    the IDE by navigating to **Start** | **Programs**.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 确保根据您的操作系统下载适当的Arduino IDE版本，即32位或64位。按照安装向导中指定的默认位置安装IDE。安装完成后，您可以通过导航到**开始**
    | **程序**来打开IDE。
- en: Getting started with the Arduino IDE
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Arduino IDE
- en: 'The Arduino IDE is a cross-platform application developed in Java that can
    be used to develop, compile, and upload programs to the Arduino board. On launching
    the Arduino IDE, you will find an interface similar to the one displayed in the
    following screenshot. The IDE contains a text editor for coding, a menu bar to
    access the IDE components, a toolbar to easily access the most common functions,
    and a text console to check the compiler outputs. A status bar at the bottom shows
    the selected Arduino board and the port name that it is connected to, as shown
    here:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE是一个使用Java开发的跨平台应用程序，可以用来开发、编译和上传程序到Arduino板。启动Arduino IDE后，您将看到一个类似于以下截图所示的界面。IDE包含一个用于编码的文本编辑器、一个菜单栏以访问IDE组件、一个工具栏以方便访问最常用的功能，以及一个文本控制台以检查编译器的输出。底部状态栏显示所选的Arduino板及其连接的端口号，如下所示：
- en: '![Getting started with the Arduino IDE](img/5938OS_01_06.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用Arduino IDE](img/5938OS_01_06.jpg)'
- en: What is an Arduino sketch?
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Arduino草图？
- en: An Arduino program that is developed using the IDE is called a **sketch**. Sketches
    are coded in Arduino language, which is based on a custom version of C/C++. Once
    you are done with writing the code in the built-in text editor, you can save it
    using the`.ino` extension. When you save these sketch files, the IDE automatically
    creates a folder to store them. If you are using any other supporting files for
    a sketch, such as header files or library files, they are all stored at this location
    (which is also called a **sketchbook**).
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IDE开发的Arduino程序称为**草图**。草图是用Arduino语言编写的，该语言基于C/C++的定制版本。一旦您在内置文本编辑器中编写完代码，您可以使用`.ino`扩展名保存它。当您保存这些草图文件时，IDE会自动创建一个文件夹来存储它们。如果您为草图使用任何其他支持文件，例如头文件或库文件，它们都将存储在此位置（也称为**草图簿**）。
- en: 'To open a new sketchbook, open the Arduino IDE and select **New** from the
    **File** menu, as shown in the following screenshot:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开一个新的草图簿，打开Arduino IDE并从**文件**菜单中选择**新建**，如下面的截图所示：
- en: '![What is an Arduino sketch?](img/5938OS_01_09.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![什么是Arduino草图？](img/5938OS_01_09.jpg)'
- en: You will be prompted with an empty text editor. The text editor supports standard
    features (that is, copy/paste, select, find/replace, and so on). Before we go
    ahead with an Arduino program, let's explore the other tools provided by the IDE.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个空白的文本编辑器。文本编辑器支持标准功能（即，复制/粘贴、选择、查找/替换等）。在我们继续Arduino程序之前，让我们探索IDE提供的其他工具。
- en: Note
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Arduino IDE version prior to 1.0 used the `.pde` extension to save sketchbooks.
    Starting from 1.0, they are saved with the `.ino` extension. You can still open
    files with the `.pde` extension in the latest IDE. Later, the IDE will convert
    it to the `.ino` extension when you save them.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.0版本之前的Arduino IDE使用`.pde`扩展名来保存草图簿。从1.0版本开始，它们使用`.ino`扩展名保存。您仍然可以在最新版本的IDE中打开具有`.pde`扩展名的文件。稍后，当您保存它们时，IDE将将其转换为`.ino`扩展名。
- en: Working with libraries
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用库
- en: 'The Arduino IDE uses libraries to extend the functionalities of existing sketches.
    Libraries are a set of functions combined to perform tasks around a specific component
    or concept. The majority of the built-in Arduino libraries provide methods to
    start working with external hardware components. You can import any library by
    navigating to **Sketch** | **Import Library…**, as shown in the following screenshot:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE使用库来扩展现有草图的功能。库是一组组合在一起以执行围绕特定组件或概念的任务的函数。大多数内置的Arduino库提供与外部硬件组件开始工作的方法。您可以通过导航到**草图**
    | **导入库…**来导入任何库，如下面的截图所示：
- en: '![Working with libraries](img/5938OS_01_07.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![使用库](img/5938OS_01_07.jpg)'
- en: You can also use a library for your sketch by just specifying the library with
    the `#include` statement at the beginning of the sketch, that is, `#include <Wire.h>`.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过在草图的开头使用`#include`语句指定库来为您的草图使用库，即`#include <Wire.h>`。
- en: The Arduino IDE also provides the capability to add an external library that
    supports a specific hardware or provides additional features. In the upcoming
    chapters, we will be dealing with some of these external libraries, and we will
    go through the process of importing them at that time.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE还提供了添加支持特定硬件或提供额外功能的库的能力。在接下来的章节中，我们将处理一些这些外部库，并且我们将在那时介绍导入它们的过程。
- en: You can learn more about built-in Arduino libraries from [http://arduino.cc/en/Reference/Libraries](http://arduino.cc/en/Reference/Libraries).
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[http://arduino.cc/en/Reference/Libraries](http://arduino.cc/en/Reference/Libraries)了解更多关于内置Arduino库的信息。
- en: Using Arduino examples
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Arduino示例
- en: 'The Arduino IDE contains a large number of built-in example sketches. These
    examples are designed to get the user familiar with basic Arduino concepts and
    built-in Arduino libraries. The examples are well maintained by the Arduino community
    since they have comprehensive support for each example through the Arduino website
    ([http://arduino.cc/en/Tutorial/HomePage](http://arduino.cc/en/Tutorial/HomePage)).
    In the Arduino IDE, you can access these examples by navigating to **File** |
    **Examples**, as shown in the following screenshot:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE包含大量的内置示例草图。这些示例旨在让用户熟悉基本的Arduino概念和内置Arduino库。Arduino社区对这些示例进行了良好的维护，因为它们通过Arduino网站([http://arduino.cc/en/Tutorial/HomePage](http://arduino.cc/en/Tutorial/HomePage))为每个示例提供了全面的支持。在Arduino
    IDE中，你可以通过导航到**文件** | **示例**来访问这些示例，如下面的截图所示：
- en: '![Using Arduino examples](img/5938OS_01_10.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![使用Arduino示例](img/5938OS_01_10.jpg)'
- en: 'Let''s start with a simple in-built example. Open the **Blink** example by
    navigating to **File** | **Examples** | **01.Basics** | **Blink**. The IDE will
    open a new window containing code that is similar to the code in the following
    program:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单的内置示例开始。通过导航到**文件** | **示例** | **01.基础** | **闪烁**来打开**闪烁**示例。IDE将打开一个新窗口，其中包含与以下程序类似的代码：
- en: '[PRE61]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This Arduino sketch is designed to blink an LED on digital pin 13\. You must
    be wondering why we didn't discuss or ask you to bring any hardware. That's because
    the Arduino Uno board is equipped with an on-board LED that is connected to digital
    pin 13\. Now, instead of diving deeper into the Arduino code, we are going to
    focus on the process of dealing with the Arduino board through the IDE.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Arduino草图被设计用来在数字引脚13上闪烁一个LED。你可能想知道为什么我们没有讨论或要求你带来任何硬件。那是因为Arduino Uno板子上配备了一个连接到数字引脚13的板上LED。现在，我们不再深入Arduino代码，而是将重点放在通过IDE处理Arduino板的过程上。
- en: Compiling and uploading sketches
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译和上传草图
- en: Once you have your code opened in the IDE, the first thing you need to do is
    to select the type of Arduino board on which you are going to upload your sketch.
    The Arduino IDE needs to know the type of board in order to compile the program
    for the appropriate microcontroller, as different Arduino boards can have different
    Atmel microcontrollers. Therefore, you need to perform this step before you go
    ahead with the compiling or uploading of the program to the board.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在IDE中打开了代码，你需要做的第一件事就是选择你将要上传草图的Arduino板类型。Arduino IDE需要知道板子的类型，以便为适当的微控制器编译程序，因为不同的Arduino板可能具有不同的Atmel微控制器。因此，在你继续编译或上传程序到板子之前，你需要执行这一步。
- en: 'You can select the Arduino board by navigating to **Tools** | **Board**, as
    displayed in the following screenshot:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过导航到**工具** | **板**来选择Arduino板，如下面的截图所示：
- en: '![Compiling and uploading sketches](img/5938OS_01_08.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![编译和上传草图](img/5938OS_01_08.jpg)'
- en: Select Arduino Uno from the list of boards, unless you are using a different
    Arduino board. Once you have selected the board, you can go ahead and compile
    the sketch. You can compile the sketch by navigating to **Sketch** | **Verify
    / Compile** from the menu bar or by using the keyboard shortcut *Ctrl* + *R*.
    If everything is set up well, you should be able to compile the code without any
    error.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 从板子列表中选择Arduino Uno，除非你使用的是不同的Arduino板。一旦你选择了板子，你就可以继续编译草图。你可以通过导航到菜单栏中的**草图**
    | **验证/编译**来编译草图，或者使用键盘快捷键*Ctrl* + *R*。如果一切设置得当，你应该能够编译代码而不会出现任何错误。
- en: After successfully compiling the sketch, it is time to upload the compiled code
    to the Arduino board. To do this, you need to make sure that your Arduino IDE
    is properly connected to your computer. If it is not already connected, connect
    your Arduino board to your computer using a USB port. Now, it is time to let your
    IDE know the serial port on which the board is connected. Navigate to **Tools**
    | **Serial Ports** and select the appropriate serial port.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the case of some Linux distributions, you may not be able to see or upload
    the Arduino program to the board due to permission restriction(s) on the serial
    port. Running the following command on the terminal should solve that problem:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: You can now upload the compiled sketch to your Arduino board by navigating to
    **File** | **Upload**. This process will use the serial connection to burn the
    compiled firmware in the microcontroller. Please wait for some time or until the
    LEDs (Tx and Rx LEDs) on the board stop flashing. Now, you have your Arduino board
    ready with your first sketch. You can observe the performance of the blinking
    LED near digital pin 13.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: Using the Serial Monitor window
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous process, we used a **Universal Serial Bus (USB)** cable to connect
    your Arduino board to a USB port of your computer. The USB port is an industrial
    standard to provide an interface for connecting various electronic components
    to a computer using the serial interface. When you connect an Arduino board using
    USB, the computer actually interfaces it as a serial peripheral device. Throughout
    the book, we are going to refer to the connections made using a USB as serial
    connections. The **Serial Monitor** window is a built-in utility of the Arduino
    IDE. The **Serial Monitor** window can be accessed by navigating to **Tools**
    | **Serial Monitor** or by using the *Ctrl* + *Shift* + *M* keyboard shortcut.
    It can be configured to observe data that is being sent or received on the serial
    port that is used to connect the Arduino board to the computer. You can also set
    the baud rate for the serial communication using the drop-down menu option. This
    utility is going to be very useful (further on in the book) when testing your
    prototypes and their performances.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Arduino programming
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Arduino platform was introduced to simplify electronic hardware prototyping
    for everyone. For this reason, Arduino programming was intended to be easy to
    learn by nonprogrammers such as designers, artists, and students. The Arduino
    language is implemented in C/C++, while the fundamentals of the sketch and program
    structures are derived from an open source programming language called **Processing**
    and an open source electronic prototyping language called **Wiring**.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Arduino follows a commenting format that is adopted from C and it is similar
    to higher-level languages; however, it is different from the Python comment format
    that we learned earlier in this chapter. There are various methods of commenting,
    which are as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '**Block comment**: This is done by covering the commented text between `/*`
    and `*/`:'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '**Single-line or inline comment**: This is done by using `//` before the line:'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Usually, a block comment at the beginning of the sketch is mostly used to describe
    the program as a whole. Single-line comments are used to describe specific functions
    or to-do notes, such as the following one:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Variables
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like any other high-level language, a variable is used to store data with three
    components: a name, a value, and a type. For example, consider the following statement:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Here, `pin` is the variable name that is defined with the type `int` and holds
    the value `10`. Later in the code, all occurrences of the `pin` variable will
    retrieve data from the declaration that we just made here. You can use any combination
    of alpha-numeric characters to select the variable name as long as the first character
    is not a number.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Constants
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the Arduino language, constants are predefined variables that are used to
    simplify the program:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '`HIGH, LOW`: While working with digital pins on the Arduino board, only two
    distinct voltage stages are possible at these pins. If a pin is being used to
    obtain an input, any measure above 3V is considered a `HIGH` state. If you are
    using a pin for output, then the `HIGH` state will set the pin voltage to 5V.
    The opposite voltage levels are considered as `LOW` states.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`false, true`: These are used to represent logical true and false levels. `false`
    is defined as `0` and `true` is mostly defined as `1`.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INPUT, OUTPUT`: These constants are used to define the roles of the Arduino
    pins. If you set the mode of an Arduino pin as `INPUT`, the Arduino program will
    prepare the pin to read sensors. Similarly, the `OUTPUT` setting prepares the
    pins to provide a sufficient amount of current to the connected sensors.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will utilize these constants later in the book and we will also explain them
    with example code.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Data types
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The declaration of each custom variable requires the user to specify the data
    type that is associated with the variable. The Arduino language uses a standard
    set of data types that are used in the C language. A list of these data types
    and their descriptions are as follows:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '`void`: This is used in the function declaration to indicate that the function
    is not going to return any value:'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '`boolean`: Variables defined with the data type `boolean` can only hold one
    of two values, `true` or `false`:'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '`byte`: This is used to store an 8-bit unsigned number, which is basically
    any number from 0 to 255:'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '`int`: This is short for integers. It stores 16-bit (Arduino Uno) or 32-bit
    (Arduino Due) numbers and it is one of the primary number storage data types for
    the Arduino language. Although `int` will be used to declare numbers throughout
    the book, the Arduino language also has `long` and `short` number data types for
    special cases:'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '`float`: This data type is used for numbers with decimal points. These are
    also known as floating-point numbers. `float` is one of the more widely used data
    types along with `int` to represent numbers in the Arduino language:'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '`char`: This data type stores a character value and occupies 1 byte of memory.
    When providing a value to `char` data types, character literals are declared with
    single quotes:'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '`array`: An `array` stores a collection of variables that is accessible by
    an index number. If you are familiar with arrays in C/C++, it will be easier for
    you to get started, as the Arduino language uses the same C/C++ arrays. The following
    are some of the methods to initialize an array:'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'An array can be accessed using an index number (where the index starts from
    number 0):'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Conversions
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Conversion functions are used to convert any data type value into the provided
    data types. The Arduino language implements the following conversion functions
    that can be utilized during programming:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '`char()`: This converts the value of any data type to the character data type'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`byte()`: This converts the value of any data type to the byte data type'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`int()`: This converts the value of any data type to the integer data type'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`float()`: This converts the value of any data type to the floating-point number
    data type'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a demonstration of using these functions, check out the following example:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Implementation of the preceding code will create a floating-point variable,
    `myFloat`, with value `10.0` using the integer value initialized by the `myInt`
    variable.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: Functions and statements
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Functions, also called **subroutines** or **procedures**, are a piece of code
    implemented to do specific tasks. The Arduino language has some predefined functions
    and the user can also write custom functions to implement certain program logic.
    These custom functions can then be called from any part of the sketch to perform
    a specific task. Functions help programmers to simplify debugging, to reduce chances
    for error, and to organize coding concepts:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The Arduino language has a set of library functions to simplify the programming
    experience. Although not all of these library functions are required by an Arduino
    sketch, `setup()` and `loop()` are mandatory functions and they are required to
    successfully compile the sketch.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: The setup() function
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When Arduino runs a sketch, it first looks for the `setup()` function. The
    `setup()` function is used to execute important programming subroutines before
    the rest of the program, such as declaring constants, setting up pins, initializing
    serial communication, or initializing external libraries. When Arduino runs the
    program, it executes the `setup()` functions only once. If you check out the **Blink**
    sketch that we used in the previous section, you can see the initialization of
    the `setup()` function, as displayed in the following code snippet:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: As you can see in our example, we used the `pinMode()` function to assign the
    role of the LED pin in the `setup()` function.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: The loop() function
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once Arduino has executed the `setup()` function, it starts iterating the `loop()`
    function continuously. While `setup()` contains the initialization parameters,
    `loop()` contains the logical parameters of your program:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: As you can see in the preceding code snippet from the **Blink** sketch, the
    `loop()` function executes the main code that blinks the LED and repeats the process
    iteratively.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: The pinMode() function
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `pinMode()` function is used to set the behavior of Arduino. As we saw
    in the `setup()` function of the **Blink** sketch, the `pinMode()` function configures
    the LED pin for `OUTPUT`:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Here, the `led` variable is assigned to digital pin 13, whose mode will be changed
    by the `pinMode()` function.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: Working with pins
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you are done configuring the pins that will be used by your program, you
    also need help in reading the input from these pins or for sending signals to
    them. Arduino provides a few specific functions to handle these scenarios:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '`digitalWrite()`: This was developed for digital I/O pins. This function sets
    the pin to `HIGH` (5V) or `LOW` (0V), which are already configured as `OUTPUT`
    using `pinMode()`. For example, the following line of code sets digital pin 13
    to `HIGH`:'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '`digitalRead()`: Similar to `digitalWrite()`, this function helps you to read
    the state of a digital pin that is configured as `INPUT`:'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '`analogRead()`: This function reads the value from a specific analog pin. The
    value is linearly mapped between the integer value of 0 and 1023 to represent
    the voltage from 0V to 5V:'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '`analogWrite()`: This function is used to provide analog output results at
    a digital pin. The technique is called PWM, and this will be explained in [Chapter
    4](ch04.html "Chapter 4. Diving into Python-Arduino Prototyping"), *Diving into
    Python-Arduino Prototyping*. It is still important to note that this function
    is not designed for all digital pins, but it is only for pins that are designated
    as PWM pins.'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statements
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are familiar with any other object-oriented programming language, you
    must have used statements extensively for your programs. The Arduino language
    uses traditional C/C++ statements such as `if/else`, `while`, `switch/case`, and
    `for` to control the flow of your program. Instead of diving deep into these statements
    right now, they are described later in the book with practical examples.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉任何其他面向对象的编程语言，你肯定在程序中广泛使用了语句。Arduino语言使用传统的C/C++语句，如`if/else`、`while`、`switch/case`和`for`来控制程序的流程。现在我们不深入探讨这些语句，它们将在书中通过实际例子进行描述。
- en: Summary
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Alright! You have successfully completed the comparatively mundane tasks of
    installing and configuring Python and the Arduino IDE. Your system, whether it
    is a Mac OS X, Linux, or Windows system, is now ready for the upcoming chapters.
    In this chapter, we went through the history and building blocks of Arduino. We
    also learned the basics of Python programming and the Arduino language. Now, you
    are ready to get your hands on real hardware and start exploring computer to hardware
    interfacing. In the next chapter, we will go through the first step of interfacing,
    that is, connecting Arduino to the computer using a serial interface.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！你已经成功完成了相对平凡的安装和配置Python以及Arduino IDE的任务。无论你的系统是Mac OS X、Linux还是Windows系统，现在都已准备好迎接接下来的章节。在本章中，我们了解了Arduino的历史和构建模块。我们还学习了Python编程和Arduino语言的基础。现在，你准备好动手操作真实硬件，开始探索计算机与硬件的接口。在下一章中，我们将介绍接口的第一步，即使用串行接口将Arduino连接到计算机。
