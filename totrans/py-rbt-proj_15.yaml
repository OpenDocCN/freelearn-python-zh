- en: Gesture Recognition
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手势识别
- en: Since the beginning of time, humans have communicated with each other using
    gestures, even before there wasn't any formal language. Hand gestures were the
    primary way of communication, and it is also evident in the ancient sculptures
    found all across the world that the signs have been a successful way of transferring
    a huge amount of data in a very efficient way, sometimes, even more efficient
    than language itself.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从时间的开始，人类就通过手势相互交流，甚至在还没有正式语言之前。手势是主要的交流方式，这在全世界发现的古代雕塑中也是显而易见的，这些符号已经是一种非常高效地传输大量数据的方式，有时甚至比语言本身还要高效。
- en: Gestures are natural, and they can occur as a reflex to a certain situation.
    It also happens subconsciously even without our knowing. So, it becomes an ideal
    way of communication with various devices. However, the question remains, how?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 手势是自然的，它们可以作为一种对特定情况的反射而出现。它也可能在我们不知道的情况下无意识地发生。因此，它成为与各种设备进行交流的理想方式。然而，问题仍然存在，那就是如何？
- en: We have used vision processing in our last few chapters, and we can be sure
    that if we are talking about gestures, then we would surely have to do a lot of
    programming to identify the gestures in the videos; furthermore, it would require
    a huge amount of processing power to make it happen as well. Hence, it is out
    of the question. We can build some basic gesture-recognition system using an array
    of proximity sensors. However, the range of gestures recognized would be very
    limited, and the overall ports being used would be multiple fold.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中使用了视觉处理，我们可以确信，如果我们谈论手势，那么我们肯定需要在视频中识别手势进行大量的编程；此外，它还需要巨大的处理能力来实现。因此，这是不可能的。我们可以使用一组接近传感器构建一些基本的
    gesture-recognition 系统。然而，可识别的手势范围将非常有限，并且使用的端口数量将是多倍的。
- en: Hence, we need to find a solution that is easy to work with and does not cost
    more than what it would deliver.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要找到一个易于操作且成本不超过其提供价值的解决方案。
- en: 'This chapter will be covering the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Electric field sensing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电场感应
- en: Using the Flick HAT
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flick HAT
- en: Gesture recognition-based automation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于手势识别的自动化
- en: Electric field sensing
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电场感应
- en: Near-field sensing is a very interesting field of sensing. Be prepared for some
    interesting stuff. If you are feeling a little sleepy, or if you are lacking attention,
    then get some coffee because the working principle of this system is going to
    be a little new.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 近场感应是一个非常有趣的感应领域。准备好迎接一些有趣的内容。如果你感到有点困倦，或者注意力不集中，那么喝点咖啡吧，因为这个系统的原理可能会有些新颖。
- en: Whenever there is a charge, there is an associated electrical field that comes
    along with it. These charges propagate through the space and go around an object.
    When that happens, the electric field associated with it has a specific characteristic.
    This characteristic will be the same till the time the environment around it is
    empty.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每当有电荷存在时，都会伴随着一个相关的电场。这些电荷在空间中传播并围绕一个物体移动。当这种情况发生时，与之相关的电场具有特定的特性。这个特性将一直持续到它周围的空环境。
- en: 'For the gesture-recognition board that we are using, the field that would be
    sensed around it is only for about a few centimeters, so anything beyond that
    point can be disregarded. If there is nothing in that vicinity, then we can safely
    assume that the pattern of electric field being sensed would be unchanged. However,
    whenever an object such as our hand comes in the vicinity, then these waves are
    distorted. The distortion is directly linked to the position of the object and
    its position. With this distortion, we can sense where the finger is, and with
    constant sensing, we see what kind of motion is being performed. The board in
    question looks like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们使用的手势识别板，它周围的感应场只有大约几厘米，所以超出这个范围的任何东西都可以忽略不计。如果附近没有东西，那么我们可以安全地假设感应到的电场模式将保持不变。然而，每当有像我们的手这样的物体进入附近，这些波就会发生畸变。这种畸变直接与物体的位置及其位置有关。通过这种畸变，我们可以感知手指的位置，并通过持续感应，我们看到正在执行的运动类型。所讨论的板看起来像这样：
- en: '![](img/60de2d05-9256-4afd-8463-efd2c9fc4c8c.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/60de2d05-9256-4afd-8463-efd2c9fc4c8c.jpg)'
- en: The central criss-crossed area on the board is the transmitter and on the extreme
    sides are rectangular structures that are four in number. These are the sensing
    elements. These sense the pattern of waves in the space. Based on it, they can
    derive what are the x, y, and z coordinates of the object. This is powered by
    a chip named MGC 3130\. This does all the computation and delivers the raw reading
    to the user, regarding the coordinates.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 板上的中心交叉区域是发射器，而在极端两侧有四个矩形结构。这些是传感元件。它们能够感知空间中波形的模式。基于此，它们可以推导出物体的 x、y 和 z 坐标。这是由名为
    MGC 3130 的芯片供电的。它执行所有计算并将原始读数交付给用户，关于坐标。
- en: Using the Flick HAT
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flick HAT。
- en: Flick HAT comes in the form of a shield, which you can simply plug into your
    Raspberry Pi and start using. However, once you do that, you will not be left
    with any GPIO pins. Hence, to save ourselves from that problem, we will be connecting
    it using male-to-female wires. This will give us access to the other GPIO pins
    and then we can have fun.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Flick HAT 以盾牌的形式出现，你可以简单地将其插入 Raspberry Pi 并开始使用。然而，一旦你这样做，你将不会剩下任何 GPIO 引脚。因此，为了避免这个问题，我们将使用公对母线将其连接。这将使我们能够访问其他
    GPIO 引脚，然后我们可以尽情玩耍。
- en: 'So, go ahead and connect it as follows. The following is a pin diagram of the
    Flick board:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，按照以下步骤进行连接。以下是 Flick 板的引脚图：
- en: '![](img/b1f8cc67-60d5-4905-a6b6-2d7449c9c9a5.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1f8cc67-60d5-4905-a6b6-2d7449c9c9a5.png)'
- en: 'Thereafter, make the connections as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，按照以下步骤进行连接：
- en: '![](img/4ee5d33b-2203-475b-a489-8486f1691c4e.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ee5d33b-2203-475b-a489-8486f1691c4e.png)'
- en: 'Once the connection is done, simply upload this code and see what happens:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 连接完成后，只需上传此代码并查看会发生什么：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now once you have uploaded  the code, lets go ahead and understand what this
    code is actually doing.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经上传了代码，让我们来了解一下这段代码实际上在做什么。
- en: We are using a library called  `import flicklib` this is provided by the manufacturer
    of this board. The functions of this library would be used all over in this chapter
    for communicating with the flick board and getting the data
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个名为 `import flicklib` 的库，这是该板的制造商提供的。这个库中的函数将在本章中用于与 Flick 板通信并获取数据。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we are defining a function named `message(value)` what this would do
    is simply print whatever value would be passed on to the function in the argument:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个名为 `message(value)` 的函数，它的作用是简单地打印传递给函数的任何值：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This has a special concept of decorators. By definition, a decorator is a function
    that takes another function and extends the behavior of the latter function without
    explicitly modifying it. In the preceding line of code, we are declaring that
    it is a decorator `@`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这有一个特殊的装饰器概念。根据定义，装饰器是一个函数，它接受另一个函数并扩展后者的行为，而不需要显式修改它。在代码的前一行，我们声明它是一个装饰器 `@`。
- en: 'This has a special job: dynamically defines any function in a program. What
    this means in plain English is that the function defined using this methodology
    can work differently depending on how the user defines it.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 它有一个特殊的工作：动态定义程序中的任何函数。用简单的话说，使用这种方法定义的函数可以根据用户如何定义它而有所不同。
- en: 'The function `move()` will further be complimented by the function, which is
    getting defined after it. These kind of functions are named nested functions.
    That is functions inside a function:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`move()` 函数将进一步由其后定义的函数补充。这类函数被称为嵌套函数。也就是说，函数在函数内部：'
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, we are defining a function named `move()`, which has arguments as `x`,
    `y`, and `z`. Inside the function, we have defined a global variable named `xyztxt`;
    now, the value of `xyztxt` would be in a form of five digit, with a decimal after
    three places. How did we know that? As you can see, we are using a function named
    `format()`. What this function does is format the values of a given variable according
    to the way the user has requested it for. We have declared here the value as `{:5.3f}`. `:5`
    represents that it would be of five digits, and `3f` represents that the decimal
    places would be after three digits. Hence, the format would be `xxx.xx`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个名为 `move()` 的函数，它具有 `x`、`y` 和 `z` 作为参数。在函数内部，我们定义了一个名为 `xyztxt` 的全局变量；现在，`xyztxt`
    的值将是一个五位数字，小数点后有三位。我们是如何知道这个的？正如你所见，我们使用了一个名为 `format()` 的函数。这个函数的作用是按照用户请求的方式格式化给定变量的值。我们在这里声明值为
    `{:5.3f}`。其中 `:5` 表示它将是一个五位数字，而 `3f` 表示小数点将在三位数字之后。因此，格式将是 `xxx.xx`：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we have defined a function named `flick(start, finish)`. It has two arguments: `start`
    and `finish`. Using the line `flicktxt = ''FLICK-'' + start[0].upper() + finish[0].upper()`, this
    is slicing the characters as recognized by the gesture board. If a south–north
    swipe is detected, then the start will get south and finish is north. Now we are
    only using the first characters of the words:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We are again defining the variables named `xyztxt` and `flicktxt` globally.
    Earlier, what we have done is that we have defined it in the function. Hence,
    it is important for us to define it in the main program:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `flicktxt` variable would get a value corresponding to the gesture  when
    the gesture is detected. In case there is no gesture then `flicktxt` would be
    left empty. A variable named `flickcount` will count how many times its swiped.
    If the values are out of the range specified then the `flicktxt` would be cleared
    to empty string using the line `flicktxt = ''` and `flickcount` would be made
    0.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The final output of this would be a text given to user providing in which direction
    the hand is flicked.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Gesture recognition-based automation
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we have interfaced the connections as per the following diagram:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff99fae1-1c6e-46aa-be14-52193face5e3.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go ahead and upload the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The program is in addition to the program we have done before, as always we
    have some added functionality of using the data being received by the flick gesture
    board and using it to switch on or switch off the lights.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Like the previous program, we are taking in the gestures over the board in
    the form of the directions of swipes, and using a simple condition to switch off
    the lights, or switch them on. So, let''s see what are the additions:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The first condition is simple. We are comparing the value of `flicktxt` to
    a given variable, which in our case is `FLICK-WE`, wherein `WE` stands for **west**
    to **east**. So when we flick from west to east, or in other words, when we flick
    from left to right, the lights would be switched off:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As before, we are again taking in a variable named `FLICK-EW`, which stands
    for flick from east to west. What it does is whenever we flick our hand from east
    to west, or from right to left, the lights will be switched on:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we have put a dimmer along with a fan to control the speed of the fan as
    well; hence, we will have to give it a PWM corresponding to the speed that we
    want to drive it. Now whenever the user will flick his hand from south to north
    or from down to up. The condition `if dc_inc <100` will check whether the value
    of the `dc_inc` is less than or equal to `100` or not. If it is, then it will
    increment the value of the `dc_inc` by `20` values. Using the function `ChangeDutyCycle()`,
    we are providing the different duty cycle to the dimmer; hence, changing the overall
    speed of the fan. Every time you swipe up the value of the fan, it will increase
    by 20%:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are were able to understand the concept of how gesture recognition
    works via electric field detection. We also understood how easy it is to use a
    gesture-controlled board and control the home using gestures. We will cover the
    machine learning part in the next chapter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们能够理解通过电场检测来识别手势的概念。我们还了解到使用手势控制板控制家居用品是多么简单。我们将在下一章介绍机器学习部分。
