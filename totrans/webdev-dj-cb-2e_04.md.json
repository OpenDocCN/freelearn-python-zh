["```py\n    {# templates/base.html #}\n    <!DOCTYPE html>\n    {% load i18n %}\n    <html lang=\"{{ LANGUAGE_CODE }}\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>{% block title %}{% endblock %}{% trans \"My Website\" %}</title>\n        <link rel=\"icon\" href=\"{{ STATIC_URL }}site/img/favicon.ico\" type=\"image/png\" />\n\n        {% block meta_tags %}{% endblock %}\n\n        {% block base_stylesheet %}\n            <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" />\n            <link href=\"{{ STATIC_URL }}site/css/style.css\" rel=\"stylesheet\" media=\"screen\" type=\"text/css\" />\n        {% endblock %}\n        {% block stylesheet %}{% endblock %}\n\n        {% block base_js %}\n            <script src=\"img/\"></script>\n            <script src=\"img/\"></script>\n            <script src=\"img/bootstrap.min.js\"></script>\n            <script src=\"img/{% url \"js_settings\" %}\"></script>\n        {% endblock %}\n\n        {% block js %}{% endblock %}\n        {% block extrahead %}{% endblock %}\n    </head>\n    <body class=\"{% block bodyclass %}{% endblock %}\">\n        {% block page %}\n            <section class=\"wrapper\">\n                <header class=\"clearfix container\">\n                    <h1>{% trans \"My Website\" %}</h1>\n                    {% block header_navigation %}\n                        {% include \"utils/header_navigation.html\" %}\n                    {% endblock %}\n                    {% block language_chooser %}\n                        {% include \"utils/language_chooser.html\" %}\n                    {% endblock %}\n                </header>\n                <div id=\"content\" class=\"clearfix container\">\n                    {% block content %}\n                    {% endblock %}\n                </div> \n                <footer class=\"clearfix container\">\n                    {% block footer_navigation %}\n                        {% include \"utils/footer_navigation.html\" %}\n                    {% endblock %}\n                </footer>\n            </section>\n        {% endblock %}\n        {% block extrabody %}{% endblock %}\n    </body>\n    </html>\n    ```", "```py\n    {# templates/base_simple.html #}\n    {% extends \"base.html\" %}\n\n    {% block page %}\n        <section class=\"wrapper\">\n            <div id=\"content\" class=\"clearfix\">\n                {% block content %}\n                {% endblock %}\n            </div>\n        </section>\n    {% endblock %}\n    ```", "```py\n# conf/base.py or settings.py\nTEMPLATE_CONTEXT_PROCESSORS = (\n    \"django.contrib.auth.context_processors.auth\",\n    \"django.core.context_processors.debug\",\n    \"django.core.context_processors.i18n\",\n \"django.core.context_processors.media\",\n \"django.core.context_processors.static\",\n    \"django.core.context_processors.tz\",\n    \"django.contrib.messages.context_processors.messages\",\n \"django.core.context_processors.request\",\n)\n```", "```py\n    # urls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf.urls import patterns, include, url\n    from django.conf.urls.i18n import i18n_patterns\n\n    urlpatterns = i18n_patterns(\"\",\n        # …\n        url(r\"^js-settings/$\", \"utils.views.render_js\",\n            {\"template_name\": \"settings.js\"},\n            name=\"js_settings\",\n        ),\n    )\n    ```", "```py\n    # utils/views.py\n    # -*- coding: utf-8 -*-\n    from __future__ import unicode_literals\n    from datetime import datetime, timedelta\n    from django.shortcuts import render\n    from django.views.decorators.cache import cache_control\n\n    @cache_control(public=True)\n    def render_js(request, cache=True, *args, **kwargs):\n        response = render(request, *args, **kwargs)\n        response[\"Content-Type\"] = \\\n            \"application/javascript; charset=UTF-8\"\n        if cache:\n            now = datetime.utcnow()\n            response[\"Last-Modified\"] = \\\n                now.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n            # cache in the browser for 1 month\n            expires = now + timedelta(days=31)\n\n            response[\"Expires\"] = \\\n                expires.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n        else:\n            response[\"Pragma\"] = \"No-Cache\"\n        return response\n    ```", "```py\n    # templates/settings.js\n    window.settings = {\n        MEDIA_URL: '{{ MEDIA_URL|escapejs }}',\n        STATIC_URL: '{{ STATIC_URL|escapejs }}',\n        lang: '{{ LANGUAGE_CODE|escapejs }}',\n        languages: { {% for lang_code, lang_name in LANGUAGES %}'{{ lang_code|escapejs }}': '{{ lang_name|escapejs }}'{% if not forloop.last %},{% endif %} {% endfor %} }\n    };\n    ```", "```py\n    # templates/base.html\n    <script src=\"img/{% url \"js_settings\" %}\"></script>\n    ```", "```py\nwindow.settings = {\n    MEDIA_URL: '/media/',\n    STATIC_URL: '/static/20140424140000/',\n    lang: 'en',\n    languages: { 'en': 'English', 'de': 'Deutsch', 'fr': 'Français', 'lt': 'Lietuvi kalba' }\n};\n```", "```py\n    {# templates/locations/location_detail.html #}\n    {% extends \"base.html\" %}\n\n    {% block content %}\n      <h2>{{ location.title }}</h2>\n\n      <img class=\"img-full-width\"\n        src=\"img/{{ location.small_image.url }}\"\n        data-small-src=\"img/{{ location.small_image.url }}\"\n        data-medium-src=\"img/{{ location.medium_image.url }}\"\n        data-large-src=\"img/{{ location.large_image.url }}\"\n        alt=\"{{ location.title|escape }}\"\n      />\n\n      <div id=\"map\"\n        data-latitude=\"{{ location.latitude|stringformat:\"f\" }}\"\n        data-longitude=\"{{ location.longitude|stringformat:\"f\" }}\"\n      ></div>\n    {% endblock %}\n\n    {% block extrabody %}\n      <script src=\"img/js?v=3\"></script>\n      <script src=\"img/location_detail.js\"></script>\n    {% endblock %}\n    ```", "```py\n    //site_static/site/js/location_detail.js\n    jQuery(function($) {\n\n    function show_best_images() {\n      $('img.img-full-width').each(function() {\n        var $img = $(this);\n        if ($img.width() > 1024) {\n          $img.attr('src', $img.data('large-src'));\n        } else if ($img.width() > 468) {\n          $img.attr('src', $img.data('medium-src'));\n        } else {\n          $img.attr('src', $img.data('small-src'));\n        }\n      });\n    }\n\n    function show_map() {\n      var $map = $('#map');\n      var latitude = parseFloat($map.data('latitude'));\n      var longitude = parseFloat($map.data('longitude'));\n      var latlng = new google.maps.LatLng(latitude, longitude);\n\n      var map = new google.maps.Map($map.get(0), {\n        zoom: 15,\n        center: latlng\n      });\n      var marker = new google.maps.Marker({\n        position: latlng,\n        map: map\n      });\n    }show_best_images();show_map();\n\n    $(window).on('resize', show_best_images);\n\n    });\n    ```", "```py\n    /* site_static/site/css/style.css */\n    img.img-full-width {\n        width: 100%;\n    }\n    #map {\n        height: 300px;\n    }\n    ```", "```py\n# locations/urls.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.conf.urls import patterns, url\n\nurlpatterns = patterns(\"locations.views\",\n    url(r\"^$\", \"location_list\", name=\"location_list\"),\n    url(r\"^(?P<slug>[^/]+)/$\", \"location_detail\",\n        name=\"location_detail\"),\n    url(r\"^(?P<slug>[^/]+)/popup/$\", \"location_detail_popup\",\n        name=\"location_detail_popup\"),\n)\n```", "```py\n# locations/views.py\nfrom __future__ import unicode_literals\n# -*- coding: UTF-8 -*-\nfrom django.shortcuts import render, get_object_or_404\nfrom .models import Location\n\ndef location_list(request):\n  location_list = Location.objects.all()\n  return render(request, \"locations/location_list.html\",\n    {\"location_list\": location_list})\n\ndef location_detail(request, slug):\n  location = get_object_or_404(Location, slug=slug)\n  return render(request, \"locations/location_detail.html\",\n    {\"location\": location})\n\ndef location_detail_popup(request, slug):\n  location = get_object_or_404(Location, slug=slug)\n  return render(request, \"locations/location_detail_popup.html\",\n    {\"location\": location})\n```", "```py\n    {# templates/locations/location_list.html #}\n    {% extends \"base.html\" %}\n    {% load i18n %}\n\n    {% block content %}\n        <h2>{% trans \"Locations\" %}</h2>\n        <ul>\n            {% for location in location_list %}\n                <li class=\"item\">\n                    <a href=\"{% url \"location_detail\" slug=location.slug %}\"\n                    data-popup-url=\"{% url \"location_detail_popup\" slug=location.slug %}\"\n                    data-popup-title=\"{{ location.title|escape }}\">\n                        {{ location.title }}\n                    </a>\n                </li>\n            {% endfor %}\n        </ul>\n    {% endblock %}\n\n    {% block extrabody %}\n        <div id=\"popup\" class=\"modal fade\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                        <h4 class=\"modal-title\">Modal title</h4>\n                    </div>\n                    <div class=\"modal-body\">\n                    </div>\n                </div>\n            </div>\n        </div>\n        <script src=\"img/location_list.js\"></script>\n    {% endblock %}\n    ```", "```py\n    // site_static/site/js/location_list.js\n    jQuery(function($) {\n        var $popup = $('#popup');\n\n        $('body').on('click', '.item a', function(e) {\n            e.preventDefault();\n            var $link = $(this);\n            var popup_url = $link.data('popup-url');\n            var popup_title = $link.data('popup-title');\n\n            if (!popup_url) {\n                return true;\n            }\n            $('.modal-title', $popup).html(popup_title);\n            $('.modal-body', $popup).load(popup_url, function() {\n                $popup.on('shown.bs.modal', function () {\n                    // do something when dialog is shown\n                }).modal(\"show\");\n            });\n\n            $('.close', $popup).click(function() {\n                // do something when dialog is closing\n            });\n\n        });\n    });\n    ```", "```py\n    {# templates/locations/location_detail_popup.html #}\n    {% load i18n %}\n    <p><img src=\"img/{{ location.small_image.url }}\" alt=\"{{ location.title|escape }}\" /></p>\n\n    <p class=\"clearfix\">\n        <a href=\"{% url \"location_detail\" slug=location.slug %}\"\n        class=\"btn btn-default pull-right\">\n            {% trans \"More\" %}\n            <span class=\"glyphicon glyphicon-chevron-right\"></span>\n        </a>\n    </p>\n    ```", "```py\n    {# templates/movies/movie_list.html #}\n    {% extends \"base.html\" %}\n    {% load i18n utility_tags %}\n\n    {% block content %}\n        <h2>{% trans \"Top Movies\" %}</h2>\n        <div class=\"object_list\">\n            {% for movie in object_list %}\n                <div class=\"item\">\n                    <p>{{ movie.rank }}.\n                        <strong>{{ movie.title }}</strong>\n                        ({{ movie.year }})\n                        <span class=\"badge\">{% trans \"IMDB rating\" %}: {{ movie.rating }}</span>\n                    </p>\n                </div>\n            {% endfor %}\n            {% if object_list.has_next %}\n                <p class=\"pagination\"><a class=\"next_page\" href=\"{% modify_query page=object_list.next_page_number %}\">{% trans \"More…\" %}</a></p>\n            {% endif %}\n        </div>\n    {% endblock %}\n\n    {% block extrabody %}\n        <script src=\"img/jquery.jscroll.min.js\"></script>\n        <script src=\"img/list.js\"></script>\n    {% endblock %}\n    ```", "```py\n    // site_static/site/js/list.js\n    jQuery(function($) {\n        $('.object_list').jscroll({\n            loadingHtml: '<img src=\"img/loading.gif\" alt=\"Loading\" />',\n            padding: 100,\n            pagingSelector: '.pagination',\n            nextSelector: 'a.next_page:last',\n            contentSelector: '.item,.pagination'\n        });\n    });\n    ```", "```py\n# likes/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.conf import settings\nfrom django.utils.encoding import python_2_unicode_compatible\nfrom utils.models import CreationModificationDateMixin\nfrom utils.models import object_relation_mixin_factory\n\n@python_2_unicode_compatible\nclass Like(CreationModificationDateMixin,\nobject_relation_mixin_factory(is_required=True)):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL)\n\n    class Meta:\n        verbose_name = _(\"like\")\n        verbose_name_plural = _(\"likes\")\n        ordering = (\"-created\",)\n\n    def __str__(self):\n        return _(u\"%(user)s likes %(obj)s\") % {\n            \"user\": self.user,\n            \"obj\": self.content_object,\n        }\n```", "```py\n# conf/base.py or settings.py\nTEMPLATE_CONTEXT_PROCESSORS = (\n    # …\n    \"django.core.context_processors.request\",\n)\nMIDDLEWARE_CLASSES = (\n    # …\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n)\n```", "```py\n    # likes/templatetags/likes_tags.py\n    # -*- coding: UTF-8 -*-\n    from django import template\n    from django.contrib.contenttypes.models import ContentType\n    from django.template import loader\n\n    from likes.models import Like\n\n    register = template.Library()\n\n    ### TAGS ###\n\n    @register.tag\n    def like_widget(parser, token):\n        try:\n            tag_name, for_str, obj = token.split_contents()\n        except ValueError:\n            raise template.TemplateSyntaxError, \\\n                \"%r tag requires a following syntax: \" \\\n                \"{%% %r for <object> %%}\" % (\n                    token.contents[0], token.contents[0])\n        return ObjectLikeWidget(obj)\n\n    class ObjectLikeWidget(template.Node):\n        def __init__(self, obj):\n            self.obj = obj\n\n        def render(self, context):\n            obj = template.resolve_variable(self.obj, context)\n            ct = ContentType.objects.get_for_model(obj)\n\n            is_liked_by_user = bool(Like.objects.filter(\n                user=context[\"request\"].user,\n                content_type=ct,\n                object_id=obj.pk,\n            ))\n\n            context.push()\n            context[\"object\"] = obj\n            context[\"content_type_id\"] = ct.pk\n            context[\"is_liked_by_user\"] = is_liked_by_user\n            context[\"count\"] = get_likes_count(obj)\n\n            output = loader.render_to_string(\n                \"likes/includes/like.html\", context)\n            context.pop()\n            return output\n    ```", "```py\n    ### FILTERS ###\n\n    @register.filter\n    def get_likes_count(obj):\n        ct = ContentType.objects.get_for_model(obj)\n        return Like.objects.filter(\n            content_type=ct,\n            object_id=obj.pk,\n        ).count()\n    ```", "```py\n    # likes/urls.py\n    # -*- coding: UTF-8 -*-\n    from django.conf.urls import patterns, url\n\n    urlpatterns = patterns(\"likes.views\",\n\n       url(r\"^(?P<content_type_id>[^/]+)/(?P<object_id>[^/]+)/$\",\n            \"json_set_like\", name=\"json_set_like\"),\n    )\n    ```", "```py\n    # likes/views.py\n    # -*- coding: UTF-8 -*-\n    import json\n    from django.http import HttpResponse\n    from django.views.decorators.cache import never_cache\n    from django.contrib.contenttypes.models import ContentType\n    from django.shortcuts import render\n    from django.views.decorators.csrf import csrf_exempt\n\n    from .models import Like\n    from .templatetags.likes_tags import get_likes_count\n\n    @never_cache\n    @csrf_exempt\n    def json_set_like(request, content_type_id, object_id):\n        \"\"\"\n        Sets the object as a favorite for the current user\n        \"\"\"\n        result = {\n            \"success\": False,\n        }\n        if request.user.is_authenticated() and \\\n        request.method == \"POST\":\n            content_type = ContentType.objects.get(id=content_type_id)\n            obj = content_type.get_object_for_this_type(pk=object_id)\n            like, is_created = Like.objects.get_or_create(\n                content_type=ContentType.objects.get_for_model(obj),\n                object_id=obj.pk,\n                user=request.user,\n            )\n            if not is_created:\n                like.delete()\n            result = {\n                \"success\": True,\n                \"obj\": unicode(obj),\n                \"action\": is_created and \"added\" or \"removed\",\n                \"count\": get_likes_count(obj),\n            }\n        json_str = json.dumps(result, ensure_ascii=False,\n                encoding=\"utf8\")\n        return HttpResponse(json_str,\n        mimetype=\"application/json; charset=utf-8\")\n    ```", "```py\n    {# templates/locations/location_detail.html #}\n    {% extends \"base.html\" %}\n    {% load likes_tags %}\n\n    {% block content %}\n        {% if request.user.is_authenticated %}\n            {% like_widget for location %}\n        {% endif %}\n        {# the details of the object go here… #}\n    {% endblock %}\n\n    {% block extrabody %}\n        <script src=\"img/likes.js\"></script>\n    {% endblock %}\n    ```", "```py\n    {# templates/likes/includes/like.html #}\n    {% load i18n %}\n    <div class=\"like-widget\">\n        <button type=\"button\" class=\"like-button btn btn-default {% if is_liked_by_user %} active{% endif %}\"\n            data-href=\"{% url \"json_set_like\" content_type_id=content_type_id object_id=object.pk %}\"\n            data-like-text=\"{% trans \"Like\" %}\"\n            data-unlike-text=\"{% trans \"Unlike\" %}\"\n        >\n            {% if is_liked_by_user %}\n                <span class=\"glyphicon glyphicon-star\"></span>\n                {% trans \"Unlike\" %}\n            {% else %}\n                <span class=\"glyphicon glyphicon-star-empty\"></span>\n                {% trans \"Like\" %}\n            {% endif %}\n        </button>\n        <span class=\"like-badge badge\">{{ count }}</span>\n    </div>\n    ```", "```py\n    // site_static/site/js/likes.js\n    (function($) {\n        $(document).on('click', '.like-button', function() {\n            var $button = $(this);\n            var $badge = $button.closest('.like-widget')\n                .find('.like-badge');\n            $.post($button.data('href'), function(data) {\n                if (data['action'] == 'added') {\n                    $button.addClass('active').html(\n    '<span class=\"glyphicon glyphicon-star\"></span> ' +\n    $button.data('unlike-text')\n                    );\n                } else {\n                    $button.removeClass('active').html(\n    '<span class=\"glyphicon glyphicon-star-empty\"></span> ' +\n    $button.data('like-text')\n                    );\n                }\n                $badge.html(data['count']);\n            }, 'json');\n        });\n    })(jQuery);\n    ```", "```py\n(myproject)$ pip install django-crispy-forms\n(myproject)$ pip install ajaxuploader\n\n```", "```py\n# conf/base.py or settings.py\nINSTALLED_APPS = (\n    # …\n    \"quotes\",\n    \"crispy_forms\",\n    \"ajaxuploader\",\n)\n```", "```py\n    # quotes/forms.py\n    # -*- coding: UTF-8 -*-\n    import os\n    from django import forms\n    from django.utils.translation import ugettext_lazy as _\n    from django.core.files import File\n    from django.conf import settings\n    from crispy_forms.helper import FormHelper\n    from crispy_forms import layout, bootstrap\n    from .models import InspirationQuote\n\n    class InspirationQuoteForm(forms.ModelForm):\n     picture_path = forms.CharField(\n     max_length=255,\n     widget=forms.HiddenInput(),\n     required=False,\n     )\n     delete_picture = forms.BooleanField(\n     widget=forms.HiddenInput(),\n     required=False,\n     )\n\n        class Meta:\n            model = InspirationQuote\n            fields = [\"author\", \"quote\"]\n\n        def __init__(self, *args, **kwargs):\n                    super(InspirationQuoteForm, self).\\\n                __init__(*args, **kwargs)\n\n            self.helper = FormHelper()\n            self.helper.form_action = \"\"\n            self.helper.form_method = \"POST\"\n\n            self.helper.layout = layout.Layout(\n                layout.Fieldset(\n                    _(\"Quote\"),\n                    layout.Field(\"author\"),\n                    layout.Field(\"quote\", rows=3),               \n     layout.HTML(\"\"\"\n     {% include \"quotes/includes/image_upload_widget.html\" %}\n                    \"\"\"),\n                    layout.Field(\"picture_path\"), # hidden\n                    layout.Field(\"delete_picture\"), # hidden\n                ),\n                bootstrap.FormActions(\n                    layout.Submit(\"submit\", _(\"Save\"),\n                        css_class=\"btn btn-primary\"),\n                )\n            )\n    ```", "```py\n        def save(self, commit=True):\n            instance = super(InspirationQuoteForm, self).\\\n                save(commit=True)\n\n            if self.cleaned_data['delete_picture'] and \\\n                instance.picture:\n                instance.picture.delete()\n\n            if self.cleaned_data['picture_path']:\n                tmp_path = self.cleaned_data['picture_path']\n                abs_tmp_path = os.path.join(\n                    settings.MEDIA_ROOT, tmp_path)\n\n                filename = InspirationQuote._meta.\\\n                    get_field('picture').upload_to(\n                    instance, tmp_path)\n                instance.picture.save(\n                    filename,\n                    File(open(abs_tmp_path, \"rb\")),\n                    False\n                )\n\n                os.remove(abs_tmp_path)\n            instance.save()\n            return instance\n    ```", "```py\n    # quotes/views.py\n    # …\n    from ajaxuploader.views import AjaxFileUploader\n    ajax_uploader = AjaxFileUploader()\n    ```", "```py\n    # quotes/urls.py\n    # -*- coding: UTF-8 -*-\n    from django.conf.urls import patterns, url\n\n    urlpatterns = patterns(\"\",\n        # …\n        url(r\"^ajax-upload/$\", \"quotes.views.ajax_uploader\",\n            name=\"ajax_uploader\"),\n    )\n    ```", "```py\n    {# templates/quotes/includes/image_upload_widget.html #}\n    {% load i18n %}\n    <div id=\"image_upload_widget\">\n        <div class=\"preview\">\n            {% if instance.picture %}\n                <img src=\"img/{{ instance.picture.url }}\" alt=\"\" />\n            {% endif %}\n        </div>\n        <div class=\"uploader\">\n            <noscript>\n                <p>{% trans \"Please enable JavaScript to use file uploader.\" %}</p>\n            </noscript>\n        </div>\n        <p class=\"help_text\" class=\"help-block\">{% trans \"Available formats are JPG, GIF, and PNG.\" %}</p>\n        <div class=\"messages\"></div>\n    </div>\n    ```", "```py\n    {# templates/quotes/change_quote.html #}\n    {% extends \"base.html\" %}\n    {% load i18n crispy_forms_tags %}\n\n    {% block stylesheet %}\n        {{ block.super }}\n        <link rel=\"stylesheet\" href=\"{{ STATIC_URL }}ajaxuploader/css/fileuploader.css\" />\n    {% endblock %}\n\n    {% block content %}\n        {% crispy form %}\n    {% endblock %}\n\n    {% block extrabody %}\n        <script src=\"img/fileuploader.js\"></script>\n        <script>\n            var translatable_file_uploader_options = {\n                template: '<div class=\"qq-upload-drop-area\"><span>{% trans \"Drop image here\" %}</span></div>' +\n                    '<div class=\"qq-uploader\">' +\n                    '<div class=\"qq-upload-button btn\"><span class=\"glyphicon glyphicon-upload\"></span>  {% trans \"Upload Image\" %}</div>' +\n                    '&nbsp;<button class=\"btn btn-danger qq-delete-button\"><span class=\"glyphicon glyphicon-trash\"></span> {% trans \"Delete\" %}</button>' +\n                    '<ul class=\"qq-upload-list\"></ul>' +\n                '</div>',\n                // template for one item in file list\n                fileTemplate: '<li>' +\n                    '<span class=\"qq-upload-file\"></span>' +\n                    '<span class=\"qq-upload-spinner\"></span>' +\n                    '<span class=\"qq-upload-size\"></span>' +\n                    '<a class=\"qq-upload-cancel\" href=\"#\">{% trans \"Cancel\" %}</a>' +\n                    '<span class=\"qq-upload-failed-text\">{% trans \"Failed\" %}</span>' +\n                '</li>',\n                messages: {\n                    typeError: '{% trans \"{file} has invalid extension. Only {extensions} are allowed.\" %}',\n                    sizeError: '{% trans \"{file} is too large, maximum file size is {sizeLimit}.\" %}',\n                    minSizeError: '{% trans \"{file} is too small, minimum file size is {minSizeLimit}.\" %}',\n                    emptyError: '{% trans \"{file} is empty, please select files again without it.\" %}',\n                    filesLimitError: '{% trans \"No more than {filesLimit} files are allowed to be uploaded.\" %}',\n                    onLeave: '{% trans \"The files are being uploaded, if you leave now the upload will be cancelled.\" %}'\n                }\n            };\n            var ajax_uploader_path = '{% url \"ajax_uploader\" %}';\n        </script>\n        <script src=\"img/change_quote.js\"></script>\n    {% endblock %}\n    ```", "```py\n    // site_static/site/js/change_quote.js\n    $(function() {\n        var csrfmiddlewaretoken = $('input[name=\"csrfmiddlewaretoken\"]').val();\n        var $image_upload_widget = $('#image_upload_widget');\n        var current_image_path = $('#id_picture_path').val();\n        if (current_image_path) {\n            $('.preview', $image_upload_widget).html(\n                '<img src=\"img/' + window.settings.MEDIA_URL + current_image_path  + '\" alt=\"\" />'\n            );\n        }\n        var options = $.extend(window.translatable_file_uploader_options, {\n            allowedExtensions: ['jpg', 'jpeg', 'gif', 'png'],\n            action: window.ajax_uploader_path,\n            element: $('.uploader', $image_upload_widget)[0],\n            multiple: false,\n            onComplete: function(id, fileName, responseJSON) {\n                if(responseJSON.success) {\n                    $('.messages', $image_upload_widget).html(\"\");\n                    // set the original to media_file_path\n                    $('#id_picture_path').val('uploads/' + fileName);\n                    // show preview link\n                    $('.preview', $image_upload_widget).html(\n                        '<img src=\"img/' + fileName + '\" alt=\"\" />'\n                    );\n                }\n            },\n            onAllComplete: function(uploads) {\n                // uploads is an array of maps\n                // the maps look like this: {file: FileObject, response: JSONServerResponse}\n                $('.qq-upload-success').fadeOut(\"slow\", function() {\n                    $(this).remove();\n                });\n            },\n            params: {\n                'csrf_token': csrfmiddlewaretoken,\n                'csrf_name': 'csrfmiddlewaretoken',\n                'csrf_xname': 'X-CSRFToken'\n            },\n            showMessage: function(message) {\n                $('.messages', $image_upload_widget).html(\n                    '<div class=\"alert alert-danger\">' + message + '</div>'\n                );\n            }\n        });\n        var uploader = new qq.FileUploader(options);\n        $('.qq-delete-button', $image_upload_widget).click(function() {\n            $('.messages', $image_upload_widget).html(\"\");\n            $('.preview', $image_upload_widget).html(\"\");\n            $('#id_delete_picture').val(1);\n            return false;\n        });\n    });\n    ```"]