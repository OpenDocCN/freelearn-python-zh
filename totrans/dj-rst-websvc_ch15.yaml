- en: Understanding and Customizing the Browsable API Feature
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和自定义可浏览的 API 功能
- en: 'In this chapter, we will work with one of the most interesting and powerful
    features included in the Django REST framework: the browsable API. This feature
    makes it easy for us to interact with our RESTful Web Services through any web
    browser. We will gain an understanding of:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将与 Django REST 框架中包含的最有趣和最强大的特性之一：可浏览的 API 进行工作。这个特性使得我们能够通过任何网页浏览器轻松地与我们的
    RESTful 网络服务进行交互。我们将了解：
- en: Understanding the possibility of rendering text/HTML content
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解渲染文本/HTML 内容的可能性
- en: Using a web browser to work with our web service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用网页浏览器与我们的网络服务交互
- en: Making HTTP GET requests with the browsable API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可浏览的 API 进行 HTTP GET 请求
- en: Making HTTP POST requests with the browsable API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可浏览的 API 进行 HTTP POST 请求
- en: Making HTTP PUT requests with the browsable API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可浏览的 API 进行 HTTP PUT 请求
- en: Making HTTP DELETE requests with the browsable API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可浏览的 API 进行 HTTP DELETE 请求
- en: Making HTTP OPTIONS requests with the browsable API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可浏览的 API 进行 HTTP OPTIONS 请求
- en: Understanding the possibility of rendering text/HTML content
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解渲染文本/HTML 内容的可能性
- en: In [Chapter 4](dj-rst-websvc_ch14.html), *Using Generalized Behavior from the
    APIView Class*, we made many changes to make it possible for the simple RESTful
    Web Service to work with a content negotiation class and provide many content
    renderers. We used the default configuration for the Django REST framework that
    includes a renderer that produces `text/html` content.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 4 章 [从 APIView 类中使用通用行为](dj-rst-websvc_ch14.html) 中，我们对简单 RESTful 网络服务进行了许多修改，使其能够与内容协商类一起工作，并提供许多内容渲染器。我们使用了
    Django REST 框架的默认配置，该配置包含一个生成 `text/html` 内容的渲染器。
- en: The `rest_framework.response.BrowsableAPIRenderer` class is responsible for
    rendering the `text/html` content. This class makes it possible for us to browse
    the API. The Django REST framework includes a feature that generates an interactive
    and human-friendly HTML output for the different resources when the request specifies
    `text/html` as the value for the `Content-Type` key in the request header. This
    feature is known as the browsable API because it enables us to use a web browser
    to navigate through the API and easily make different types of HTTP requests.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`rest_framework.response.BrowsableAPIRenderer` 类负责渲染 `text/html` 内容。这个类使得我们可以浏览
    API。Django REST 框架包含一个特性，当请求指定请求头中的 `Content-Type` 键值为 `text/html` 时，它会为不同的资源生成一个交互式且人性化的
    HTML 输出。这个特性被称为可浏览的 API，因为它允许我们使用网页浏览器来导航 API，并轻松地执行不同类型的 HTTP 请求。'
- en: The browsable API feature is extremely useful when we have to test the RESTful
    Web Services that perform CRUD operations on a database, such as the one we have
    been developing in [Chapter 4](https://cdp.packtpub.com/django_restful_web_services__/wp-admin/post.php?post=79&action=edit#post_61), *Using
    Generalized Behavior from the APIView Class*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要测试在数据库上执行 CRUD 操作的 RESTful 网络服务时，可浏览的 API 功能非常有用，例如我们在第 4 章 [从 APIView
    类中使用通用行为](https://cdp.packtpub.com/django_restful_web_services__/wp-admin/post.php?post=79&action=edit#post_61)
    中开发的服务。
- en: Now, we will compose and send HTTP requests that will make the RESTful Web Service
    user the `BrowsableAPIRenderer` class to provide `text/html` content in the response.
    This way, we will understand how the browsable API works before we jump into the
    web browser and we start using and customizing this feature. In case you stopped
    Django's development server, you will have to start it again as we learned in
    [Chapter 3](dj-rst-websvc_ch13.html), *Creating API Views*, in the section *Launching
    Django's development server*, to start running the Django development server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写并发送 HTTP 请求，这将使 RESTful 网络服务使用 `BrowsableAPIRenderer` 类在响应中提供 `text/html`
    内容。这样，在我们跳入网页浏览器并开始使用和自定义这个功能之前，我们将理解可浏览的 API 的工作原理。如果你停止了 Django 的开发服务器，你将需要再次启动它，就像我们在第
    3 章 [创建 API 视图](dj-rst-websvc_ch13.html) 中学习的那样，在 *启动 Django 开发服务器* 部分中，以启动 Django
    开发服务器。
- en: 'Run the following command to retrieve all the toys with the `Accept` request
    header key set to `text/html`. Remember that the virtual environment we created
    in the previous chapters must be activated in order to run the next `http` command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以检索所有玩具，将 `Accept` 请求头键设置为 `text/html`。请记住，我们必须激活在前几章中创建的虚拟环境，才能运行下一个
    `http` 命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the equivalent `curl` command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous commands will compose and send the following HTTP request: `GET
    http://localhost:8000/toys/`. These commands specify the `text/html` value for
    the `Accept` key in the request header. This way, the HTTP request indicates that
    it accepts a response of `text/html`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将组合并发送以下 HTTP 请求：`GET http://localhost:8000/toys/`。这些命令指定了请求头中`Accept`键的`text/html`值。这样，HTTP
    请求表明它接受`text/html`格式的响应。
- en: 'In both cases, we specified the `-v` option that provides a verbose output
    and prints the details of the request that has been made. For example, the following
    are the first lines of the output generated by the `http` command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，我们都指定了`-v`选项，它提供了详细输出并打印出已发出的请求的详细信息。例如，以下是由`http`命令生成的输出的第一行：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The second line prints the value for the `Accept` key included in the request
    header, `text/`html. The header response for the request will include the following
    line:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行打印出请求头中包含的`Accept`键的值，即`text/html`。对于该请求的响应头将包括以下行：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The previous commands will compose and send the following HTTP request: `GET
    http://localhost:8000/toys/`. The request will end up running the `views.toy_list`
    function, that is, the `toy_list` function declared within the `toys/views.py`
    file. The content negotiation class selected the `BrowsableAPIRenderer` class
    to provide `text/html` content in the response. The following lines show the first
    lines of the output for the `http` command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将组合并发送以下 HTTP 请求：`GET http://localhost:8000/toys/`。该请求将最终运行`views.toy_list`函数，即`toys/views.py`文件中声明的`toy_list`函数。内容协商类选择了`BrowsableAPIRenderer`类来在响应中提供`text/html`内容。以下行显示了`http`命令输出的第一行：
- en: '![](img/502ddeaf-edd3-4c70-b495-2adcd6b4da36.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/502ddeaf-edd3-4c70-b495-2adcd6b4da36.png)'
- en: We can easily detect from the previous output that the Django REST framework
    provides an HTML web page as a response to our previous requests. If we enter
    any URL for a resource collection or resource in any web browser, the browser
    will perform an HTTP GET request that requires an HTML response, that is, the
    `Accept` request header key will be set to `text/html`. The web service built
    with the Django REST framework will provide an HTML response and the browser will
    render the web page.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从之前的输出中轻松地检测到 Django REST 框架为我们之前的请求提供了一个 HTML 网页作为响应。如果我们输入任何资源集合或资源的 URL
    到任何网页浏览器中，浏览器将执行一个需要 HTML 响应的 HTTP GET 请求，即`Accept`请求头键将被设置为`text/html`。使用 Django
    REST 框架构建的 Web 服务将提供一个 HTML 响应，浏览器将渲染网页。
- en: 'By default, the `BrowsableAPIRenderer` class uses the Bootstrap popular frontend
    component library. You can read more about Bootstrap here: [http://getbootstrap.com](http://getbootstrap.com).
    The web page might include the following elements:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`BrowsableAPIRenderer`类使用 Bootstrap 流行的前端组件库。您可以在[http://getbootstrap.com](http://getbootstrap.com)上了解更多关于
    Bootstrap 的信息。网页可能包含以下元素：
- en: Diverse buttons to perform other requests to the resource or resource collection
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于执行对资源或资源集合的其他请求的多种按钮
- en: A section that displays the resource or resource collection content in JSON
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个显示资源或资源集合内容的 JSON 部分区域
- en: Forms with fields that allow us to submit data for `POST`, `PUT`, and `PATCH`
    requests
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许我们提交数据用于`POST`、`PUT`和`PATCH`请求的表单
- en: The Django REST framework uses templates and themes to render the pages for
    the browsable API. It is possible to customize many settings to tailor the output
    to our specific requirements.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Django REST 框架使用模板和主题来渲染可浏览 API 的页面。我们可以自定义许多设置以调整输出以满足我们的特定需求。
- en: Using a web browser to work with our web service
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网页浏览器与我们的 Web 服务交互
- en: Let's start browsing our RESTful Web Service. Open a web browser and enter `http://localhost:8000/toys/`.
    The browser will compose and send a `GET` request to `http://localhost:8000/toys/`
    with `text/html` as the desired content type and the returned HTML web page will
    be rendered.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始浏览我们的 RESTful Web 服务。打开一个网页浏览器并输入`http://localhost:8000/toys/`。浏览器将组合并发送一个`GET`请求到`http://localhost:8000/toys/`，其中`text/html`是期望的内容类型，返回的
    HTML 网页将被渲染。
- en: 'Under the hood, the web service will compose and send an HTTP GET request to
    `http://localhost:8000/toys/` with `application/json` as the content type and
    the headers, and the JSON returned by this request will be rendered as part of
    the content of the web page. The following screenshot shows the rendered web page
    with the resource collection description, Toy List:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，Web服务将组合并发送一个带有`application/json`作为内容类型和头部信息的HTTP GET请求到`http://localhost:8000/toys/`，该请求返回的JSON将被渲染为网页内容的一部分。以下截图显示了包含资源集合描述的渲染网页，玩具列表：
- en: '![](img/5f029d42-262c-425d-8c8a-f2de015d210c.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5f029d42-262c-425d-8c8a-f2de015d210c.png)'
- en: 'When we work with the browsable API, Django uses the information about the
    allowed methods for a resource or resource collection to render the appropriate
    buttons to allow us to execute the related requests. In the previous screenshot,
    you will notice that there are two buttons on the right-hand side of the resource
    description (Toy List): OPTIONS and GET. We will use the different buttons to
    make additional requests to the RESTful Web Service.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们与可浏览API一起工作时，Django会使用有关资源或资源集合允许的方法的信息来渲染适当的按钮，以便我们可以执行相关的请求。在之前的截图中，你会注意到资源描述（玩具列表）的右侧有两个按钮：OPTIONS和GET。我们将使用不同的按钮向RESTful
    Web Service发送额外的请求。
- en: If you decide to browse the web service in a web browser that is being executed
    on another computer or device connected to the LAN, you will have to use the assigned
    IP address to the computer that is running Django's development server instead
    of `localhost`. For example, if Django's development server is running on a computer
    whose assigned IPv4 IP address is `192.168.2.125`, instead of `http://localhost:8000/toys/`,
    you should use `http://192.168.2.125:8000/toys/`. You can also use the hostname
    instead of the IPv4 address or an IPv6 address.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定在运行在另一台计算机或设备上的网络浏览器中浏览Web服务，你将不得不使用分配给运行Django开发服务器的计算机的IP地址，而不是`localhost`。例如，如果Django的开发服务器运行在分配了IPv4
    IP地址`192.168.2.125`的计算机上，那么你应该使用`http://192.168.2.125:8000/toys/`而不是`http://localhost:8000/toys/`。你也可以使用主机名而不是IPv4地址或IPv6地址。
- en: One of the nicest features of the browsable API is that it makes it extremely
    easy to test a RESTful Web Service from a mobile device.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可浏览API最令人愉悦的特性之一是它使得从移动设备测试RESTful Web Service变得极其简单。
- en: As a disclaimer, I must say that once you learn how to take advantage of the
    browsable API, you will never want to work with a framework that doesn't provide
    a feature like this one.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作为免责声明，我必须说，一旦你学会了如何利用可浏览的API，你就永远不会想再与一个不提供此类功能的框架一起工作了。
- en: Making HTTP GET requests with the browsable API
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可浏览API进行HTTP GET请求
- en: We just made an HTTP GET request to retrieve the toys resource collection with
    the browsable API. Now, we will compose and send another HTTP GET request for
    an existing toy resource with the web browser.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用可浏览API发送了一个HTTP GET请求来检索玩具资源集合。现在，我们将使用网页浏览器组合并发送另一个HTTP GET请求以获取现有玩具资源。
- en: 'Enter the URL for an existing toy resource, such as `http://localhost:8000/toys/3`.
    Make sure you replace `3` with the `id` or primary key of an existing toy in the
    previously rendered Toy List. Django will compose and send a `GET` request to
    `http://localhost:8000/toys/3` and the rendered web page will display the results
    of its execution, that is, the headers and the JSON data for the toy resource.
    The following screenshot shows the rendered web page after entering the URL in
    a web browser with the resource description, Toy Detail:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输入现有玩具资源的URL，例如`http://localhost:8000/toys/3`。确保将`3`替换为之前渲染的玩具列表中现有玩具的`id`或主键。Django将组合并发送一个`GET`请求到`http://localhost:8000/toys/3`，渲染的网页将显示其执行结果，即玩具资源的头部和JSON数据。以下截图显示了在网页浏览器中输入URL后渲染的网页，其中包含资源描述，玩具详情：
- en: '![](img/a5c611fe-6153-4eb3-9cc5-e66c5e19f076.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a5c611fe-6153-4eb3-9cc5-e66c5e19f076.png)'
- en: 'At the right-hand side of the resource description, the browsable API shows
    a GET drop-down button. This button allows us to make a `GET` request to `/toys/3`
    again. If we click or tap the down arrow, we can select the json option and the
    browsable API will display the raw JSON results of a `GET` request to `/toys/3`
    without the headers. In fact, the browser will go to `http://localhost:8000/toys/3?format=json`
    and the Django REST framework will display the raw JSON results because the value
    for the `format` query parameter is set to `json`. The following screenshot shows
    the results of making that request:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源描述的右侧，可浏览的 API 显示一个 GET 下拉按钮。此按钮允许我们再次对 `/toys/3` 发送 `GET` 请求。如果我们点击或轻触向下箭头，我们可以选择
    json 选项，可浏览的 API 将显示对 `/toys/3` 发送的 `GET` 请求的原始 JSON 结果，不包含头部。实际上，浏览器将导航到 `http://localhost:8000/toys/3?format=json`，Django
    REST 框架将显示原始 JSON 结果，因为 `format` 查询参数的值被设置为 `json`。以下截图显示了发出该请求的结果：
- en: '![](img/42bd263a-d5c8-4854-8863-9f4a8067cdfd.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/42bd263a-d5c8-4854-8863-9f4a8067cdfd.png)'
- en: Enter the URL for a non-existing toy resource, such as `http://localhost:8000/toys/250`.
    Make sure you replace `250` with the `id` or primary key of the toy that doesn't
    exist in the previously rendered Toy List. Django will compose and send a `GET`
    request to `http://localhost:8000/toys/250` and the rendered web page will display
    the results of its execution, that is, the header with the `HTTP 404 Not found`
    status code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一个不存在的玩具资源的 URL，例如 `http://localhost:8000/toys/250`。确保将 `250` 替换为之前渲染的玩具列表中不存在的玩具的
    `id` 或主键。Django 将会发送一个 `GET` 请求到 `http://localhost:8000/toys/250`，渲染的网页将显示其执行结果，即带有
    `HTTP 404 Not found` 状态码的头部。
- en: 'The following screenshot shows the rendered web page after entering the URL
    in a web browser:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在网页浏览器中输入 URL 后渲染的网页：
- en: '![](img/c85e7e03-cc44-4b83-a46c-212199d0343e.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/c85e7e03-cc44-4b83-a46c-212199d0343e.png)'
- en: Making HTTP POST requests with the browsable API
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可浏览的 API 制作 HTTP POST 请求
- en: 'Now, we want to use the browsable API to compose and send an HTTP POST request
    to our RESTful Web Service to create a new toy. Go to the following URL in your
    web browser, `http://localhost:8000/toys/`. At the bottom of the rendered web
    page, the browsable API displays the following controls to allow us to compose
    and send a `POST` request to `/toys/`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想使用可浏览的 API 来构建并发送一个 HTTP POST 请求到我们的 RESTful Web 服务以创建一个新的玩具。在您的网页浏览器中访问以下
    URL，`http://localhost:8000/toys/`。在渲染网页的底部，可浏览的 API 显示以下控件，允许我们构建并发送一个 `POST`
    请求到 `/toys/`：
- en: 'Media type: This dropdown allows us to select the desired parser. The list
    will be generated based on the configured supported parsers in the Django REST
    framework for our web service.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 媒体类型：此下拉菜单允许我们选择所需的解析器。列表将基于在 Django REST 框架中为我们的 Web 服务配置的受支持解析器生成。
- en: 'Content: This text area allows us to enter the text for the body that will
    be sent with the POST request. The content must be compatible with the selected
    value for the media type dropdown.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容：此文本区域允许我们输入将与 POST 请求一起发送的正文文本。内容必须与媒体类型下拉菜单中选择的值兼容。
- en: 'POST: This button will use the selected media type and the entered content
    to compose and send an HTTP POST request with the appropriate header key/value
    pairs and content.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POST：此按钮将使用所选的媒体类型和输入的内容，以适当的头部键/值对和内容构建并发送一个 HTTP POST 请求。
- en: 'The following screenshot shows the previously explained controls at the bottom
    of the rendered web page:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了之前解释的控件在渲染网页底部的位置：
- en: '![](img/52ab2175-6cf4-429a-80b7-5fcaf13e2a98.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/52ab2175-6cf4-429a-80b7-5fcaf13e2a98.png)'
- en: 'We enabled all the default parsers provided by the Django REST framework for
    our RESTful Web Service, and therefore, the Media type drop-down will provide
    us with the following options:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已启用 Django REST 框架为我们提供的所有默认解析器，因此媒体类型下拉菜单将提供以下选项：
- en: application/json
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: application/json
- en: application/x-www-form-urlencoded
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: application/x-www-form-urlencoded
- en: multipart/form-data
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: multipart/form-data
- en: 'Select application/json in the Media type dropdown and enter the following
    JSON content in the Content text area:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在媒体类型下拉菜单中选择 application/json，并在内容文本区域中输入以下 JSON 内容：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Click or tap POST. The browsable API will compose and send an HTTP `POST` request
    to `/toys/` with the previously specified data as a JSON body, and we will see
    the results of the call in the web browser.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 点击或轻触 POST。可浏览的 API 将会以 JSON 格式体，将之前指定的数据发送到 `/toys/` 的 HTTP `POST` 请求，我们将在网页浏览器中看到调用结果。
- en: 'The following screenshot shows a web browser displaying the HTTP status code
    `201 Created` in the response and the previously explained dropdown and text area
    with the POST button to allow us to continue composing and sending `POST` requests
    to `/toys/`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个浏览器在响应中显示了HTTP状态码`201 Created`，以及之前解释过的下拉菜单和文本区域，其中包含一个POST按钮，允许我们继续组合并发送`POST`请求到`/toys/`：
- en: '![](img/bcd09a3c-0c7e-4a85-81f9-d217c2e06758.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![截图2](img/bcd09a3c-0c7e-4a85-81f9-d217c2e06758.png)'
- en: In this case, we entered the JSON key/value pairs as we did when we composed
    and sent HTTP POST requests with command-line and GUI tools. However, we will
    learn to configure the browsable API to provide us with a form with fields to
    make it even easier to perform operations on our RESTful Web Service.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们像使用命令行和GUI工具组合并发送HTTP `POST`请求时那样输入了JSON键/值对。然而，我们将学习如何配置可浏览的API，以提供一个带有字段的表单，使在RESTful
    Web服务上执行操作变得更加容易。
- en: Making HTTP PUT requests with the browsable API
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可浏览的API进行HTTP `PUT`请求
- en: Now, we want to use the browsable API to compose and send an HTTP PUT request
    to our RESTful Web Service to replace an existing toy with a new one. First, go
    to the URL for an existing toy resource, such as `http://localhost:8000/toys/7`.
    Make sure you replace `7` with the `id` or primary key of an existing toy in the
    previously rendered Toy List. The HTML web page that displays the results of an
    HTTP GET request to `/toys/7` plus additional details and controls will be rendered.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想使用可浏览的API来组合并发送一个HTTP `PUT`请求到我们的RESTful Web服务，用新的玩具替换现有的玩具。首先，访问现有玩具资源的URL，例如`http://localhost:8000/toys/7`。确保将`7`替换为之前渲染的玩具列表中现有玩具的`id`或主键。将显示HTTP
    GET请求到`/toys/7`的结果的HTML网页，以及额外的细节和控件。
- en: At the bottom of the rendered web page, the browsable API displays the controls
    to compose and send a `POST` request to `/toys/` followed by the controls to compose
    and send a `PUT` request to `/toys/7`. The controls for the `PUT` request are
    the same that we already analyzed for the POST request. The PUT button will use
    the selected media type and the entered content to compose and send an HTTP PUT
    request with the appropriate header key/value pairs and content.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染的网页底部，可浏览的API显示了用于向`/toys/`发送`POST`请求的控件，随后是用于向`/toys/7`发送`PUT`请求的控件。`PUT`请求的控件与我们之前分析过的`POST`请求的控件相同。`PUT`按钮将使用选定的媒体类型和输入的内容来组合并发送带有适当头部键/值对和内容的HTTP
    `PUT`请求。
- en: 'The following screenshot shows the controls to compose and send an HTTP PUT
    request at the bottom of the rendered web page:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在渲染的网页底部用于组合并发送HTTP `PUT`请求的控件：
- en: '![](img/5fad0786-566f-4b85-a486-2b922e6a893c.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![截图1](img/5fad0786-566f-4b85-a486-2b922e6a893c.png)'
- en: In this example, we took advantage of the features included in the Django REST
    framework to build the OPTIONS response that indicates which HTTP verbs are allowed
    for each resource and resource collection. Thus, the browsable API only offers
    us the possibility to compose and send a POST and PUT methods. The POST method
    is applied to the resource collection while the PUT method is applied to a single
    resource. The browsable API doesn't provide the controls to compose and send an
    HTTP PATCH method on a resource because the code hasn't specified that this verb
    is accepted as a resource.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们利用了Django REST框架中包含的功能来构建OPTIONS响应，该响应指示每个资源和资源集合允许哪些HTTP动词。因此，可浏览的API只为我们提供了组合并发送POST和PUT方法的可能性。POST方法应用于资源集合，而PUT方法应用于单个资源。可浏览的API不提供用于在资源上组合并发送HTTP
    `PATCH`方法的控件，因为代码没有指定这个动词被接受为资源。
- en: 'Select application/json in the Media type dropdown and enter the following
    JSON content in the Content text area. Remember that the HTTP PUT method replaces
    an existing resource with a new one, and therefore, we must specify the values
    for all the fields and not just for the fields that we want to update:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在媒体类型下拉菜单中选择application/json，并在内容文本区域中输入以下JSON内容。请记住，HTTP `PUT`方法用新的资源替换现有的资源，因此我们必须指定所有字段的值，而不仅仅是想要更新的字段：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Click or tap PUT. The browsable API will compose and send an HTTP `PUT` request
    to `/toys/7` with the previously specified data as a JSON body and we will see
    the results of the call in the web browser. The following screenshot shows a web
    browser displaying the HTTP status code `200 OK` in the response, and the controls
    to allow us to send a new PUT request, if necessary:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 点击或轻触PUT。可浏览的API将组合并发送一个HTTP `PUT`请求到`/toys/7`，将之前指定的数据作为JSON体，我们将在网页浏览器中看到调用结果。以下屏幕截图显示了一个网页浏览器在响应中显示了HTTP状态码`200
    OK`，以及允许发送新PUT请求的控件：
- en: '![](img/d674d1c8-957a-45e6-80a5-c4baa2c035f4.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d674d1c8-957a-45e6-80a5-c4baa2c035f4.png)'
- en: Making HTTP OPTIONS requests with the browsable API
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可浏览的API发送HTTP OPTIONS请求
- en: Now, we want to use the browsable API to compose and send an HTTP OPTIONS request
    to our RESTful Web Service to check the allowed HTTP verbs, the available renderers,
    and parsers for a toy resource. First, go to the URL for an existing toy resource,
    such as `http://localhost:8000/toys/7`. Make sure you replace `7` with the `id`
    or primary key of an existing toy in the previously rendered Toy List. The HTML
    web page that displays the results of an HTTP GET request to `/toys/7` plus additional
    details and controls will be rendered.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想使用可浏览的API来组合并发送一个HTTP OPTIONS请求到我们的RESTful Web服务，以检查允许的HTTP动词、可用的渲染器和解析器，以及针对一个玩具资源的。首先，访问现有玩具资源的URL，例如`http://localhost:8000/toys/7`。确保将`7`替换为之前渲染的玩具列表中现有玩具的`id`或主键。将渲染HTTP
    GET请求到`/toys/7`的结果以及额外细节和控件显示的HTML网页。
- en: 'At the right-hand side of the Toy Detail title, you will see an OPTIONS button.
    Click or tap this button. The browsable API will compose and send an HTTP `OPTIONS`
    request to `/toys/7` and we will see the results of the call in the web browser.
    The following screenshot shows a web browser displaying the HTTP status code `200
    OK` in the response, the allowed HTTP verbs, the content types that the toy resource
    is capable of rendering as values for the `renders` key, and the content types
    that the toy resource is capable of parsing as values for the `parses` key:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩具详情标题的右侧，你会看到一个OPTIONS按钮。点击或轻触此按钮。可浏览的API将组合并发送一个HTTP `OPTIONS`请求到`/toys/7`，我们将在网页浏览器中看到调用结果。以下屏幕截图显示了一个网页浏览器在响应中显示了HTTP状态码`200
    OK`，允许的HTTP动词，玩具资源能够作为`renders`键的值渲染的内容类型，以及玩具资源能够作为`parses`键的值解析的内容类型：
- en: '![](img/94f81573-570a-485d-bf83-c01ecdf243de.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/94f81573-570a-485d-bf83-c01ecdf243de.png)'
- en: 'We can also compose and send an HTTP OPTIONS request to our RESTful Web Service
    to check the allowed HTTP verbs, the available renderers, and parsers for the
    toys resource collection. First, go to the URL for the toys resource collection:
    `http://localhost:8000/toys/`. The HTML web page that displays the results of
    an HTTP GET request to `/toys/`, plus additional details and controls, will be
    rendered.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以组合并发送一个HTTP OPTIONS请求到我们的RESTful Web服务，以检查玩具资源集合允许的HTTP动词、可用的渲染器和解析器。首先，访问玩具资源集合的URL：`http://localhost:8000/toys/`。将渲染HTTP
    GET请求到`/toys/`的结果以及额外细节和控件显示的HTML网页。
- en: 'At the right-hand side of the Toy Detail title, you will see an OPTIONS button.
    Click or tap this button. The browsable API will compose and send an HTTP `OPTIONS`
    request to `/toys/` with the previously specified data as a JSON body and we will
    see the results of the call in the web browser. The following screenshot shows
    a web browser displaying the HTTP status code `200 OK` in the response, the allowed
    HTTP verbs, the content types that the toys resource collection is capable of
    rendering as values for the `renders` key, and the content types that the toys
    resource collection is capable of parsing as values for the `parses` key:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩具详情标题的右侧，你会看到一个OPTIONS按钮。点击或轻触此按钮。可浏览的API将组合并发送一个HTTP `OPTIONS`请求到`/toys/`，将之前指定的数据作为JSON体，我们将在网页浏览器中看到调用结果。以下屏幕截图显示了一个网页浏览器在响应中显示了HTTP状态码`200
    OK`，允许的HTTP动词，玩具资源集合能够作为`renders`键的值渲染的内容类型，以及玩具资源集合能够作为`parses`键的值解析的内容类型：
- en: '![](img/756ae095-a7cc-494b-a75d-db60b90b2a01.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/756ae095-a7cc-494b-a75d-db60b90b2a01.png)'
- en: It is always a good idea to check that all the allowed verbs returned by an
    HTTP OPTIONS request to a specific resource or resource collection are coded.
    The browsable API makes it easy for us to test whether the requests for all the
    supported verbs are working OK. Then, we can automate testing, which is a topic
    we will learn in the forthcoming chapters.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 总是检查对特定资源或资源集合的 HTTP OPTIONS 请求返回的所有允许的动词是否编码，这是一个好主意。可浏览的 API 让我们很容易测试所有支持动词的请求是否正常工作。然后，我们可以自动化测试，这是我们在接下来的章节中将学习的内容。
- en: Making HTTP DELETE requests with the browsable API
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可浏览 API 发送 HTTP DELETE 请求
- en: Now, we want to use the browsable API to compose and send an HTTP DELETE request
    to our RESTful Web Service to delete an existing toy resource. First, go to the
    URL for an existing toy resource, such as `http://localhost:8000/toys/7`. Make
    sure you replace `7` with the `id` or primary key of an existing toy in the previously
    rendered Toy List. The HTML web page that displays the results of an HTTP GET
    request to `/toys/7`, plus additional details and controls, will be rendered.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想使用可浏览 API 来组合并发送一个 HTTP DELETE 请求到我们的 RESTful Web 服务以删除现有的玩具资源。首先，转到现有玩具资源的
    URL，例如 `http://localhost:8000/toys/7`。确保你用之前渲染的玩具列表中现有玩具的 `id` 或主键替换 `7`。显示 `/toys/7`
    的 HTTP GET 请求结果以及额外细节和控制的 HTML 网页将被渲染。
- en: At the right-hand side of the Toy Detail title, you will see a DELETE button.
    Click or tap this button. The web page will display a modal requesting confirmation
    to delete the toy resource. Click or tap the DELETE button in this modal.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在“玩具详情”标题的右侧，你会看到一个 DELETE 按钮。点击或轻触此按钮。网页将显示一个模态窗口，请求确认删除玩具资源。在此模态窗口中点击或轻触 DELETE
    按钮。
- en: 'The browsable API will compose and send an HTTP `DELETE` request to `/toys/7`
    and we will see the results of the call in the web browser. The following screenshot
    shows a web browser displaying the HTTP status code `204 No Content` in the response:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可浏览 API 将组合并发送一个 HTTP `DELETE` 请求到 `/toys/7`，我们将在网页浏览器中看到调用结果。以下截图显示了网页浏览器在响应中显示的
    HTTP 状态码 `204 No Content`：
- en: '![](img/24a2b13a-0a09-439c-ab6b-0165b3d4f0fe.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/24a2b13a-0a09-439c-ab6b-0165b3d4f0fe.png)'
- en: 'Now, go to the URL for the toys resource collection: `http://localhost:8000/toys/`.
    The HTML web page that displays the results of an HTTP GET request to `/toys/`
    plus additional details and controls will be rendered. The recently deleted toy
    has been removed from the database. Thus, the list will not include the deleted
    toy.­ The following screenshot shows a web browser displaying the HTTP status
    code `200 OK` in the response and the list of toys without the recently deleted
    toy:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到玩具资源集合的 URL：`http://localhost:8000/toys/`。显示 `/toys/` 的 HTTP GET 请求结果以及额外细节和控制的
    HTML 网页将被渲染。最近删除的玩具已从数据库中删除。因此，列表中不会包括已删除的玩具。以下截图显示了网页浏览器在响应中显示的 HTTP 状态码 `200
    OK` 以及没有最近删除玩具的玩具列表：
- en: '![](img/9d654d8e-ebee-4965-a9be-44f18e4b5953.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9d654d8e-ebee-4965-a9be-44f18e4b5953.png)'
- en: The browsable API allowed us to compose and send many HTTP requests to our web
    service by clicking or tapping buttons on a web browser. We could check that all
    the operations are working as expected in our RESTful Web Service. However, we
    had to enter JSON content and we couldn't click on hyperlinks to navigate through
    entities. For example, we couldn't click on a toy's `id` to perform an HTTP GET
    request to retrieve this specific toy.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 可浏览 API 允许我们通过在网页浏览器上点击或轻触按钮来组合和发送许多 HTTP 请求到我们的 Web 服务。我们可以检查所有操作是否在我们的 RESTful
    Web 服务中按预期工作。然而，我们必须输入 JSON 内容，并且我们无法点击超链接来导航实体。例如，我们无法点击玩具的 `id` 来执行一个 HTTP GET
    请求以检索这个特定的玩具。
- en: We will definitely improve this situation and we will take full advantage of
    many additional features included in the browsable API as we create additional
    RESTful Web Services. We will do this in the forthcoming chapters. We have just
    started working with the browsable API.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们肯定会改善这种情况，并在创建额外的 RESTful Web 服务时充分利用可浏览 API 中包含的许多附加功能。我们将在接下来的章节中这样做。我们刚刚开始使用可浏览
    API。
- en: Test your knowledge
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: 'Let''s see whether you can answer the following questions correctly:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你是否能正确回答以下问题：
- en: 'Which of the following classes is responsible for rendering the `text/html`
    content:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个类负责渲染 `text/html` 内容：
- en: The `rest_framework.response.HtmlRenderer` class
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rest_framework.response.HtmlRenderer` 类'
- en: The `rest_framework.response.TextHtmlAPIRenderer` class
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rest_framework.response.TextHtmlAPIRenderer` 类'
- en: The `rest_framework.response.BrowsableAPIRenderer` class
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rest_framework.response.BrowsableAPIRenderer` 类'
- en: 'By default, the browsable API uses the following web component library:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，可浏览的 API 使用以下网页组件库：
- en: '`Bootstrap`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Bootstrap`'
- en: '`ReactJS`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ReactJS`'
- en: '`AngularJS`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AngularJS`'
- en: 'When we enter the URL of an existing resource in a web browser, the browsable
    API:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在网页浏览器中输入现有资源的 URL 时，可浏览的 API：
- en: Returns a web page with just the JSON response for an HTTP GET request to the
    resource
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回仅包含对资源进行 HTTP GET 请求的 JSON 响应的网页
- en: Returns a web page with a section that displays the JSON response for an HTTP
    GET request to the resource and diverse buttons to perform other requests to the
    resource
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回一个包含显示对资源进行 HTTP GET 请求的 JSON 响应部分的网页，以及执行对资源进行其他请求的多个按钮
- en: Returns a web page with a section that displays the JSON response for an HTTP
    OPTIONS request to the resource and diverse buttons to perform other requests
    to the resource
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回包含显示对资源进行 HTTP OPTIONS 请求的 JSON 响应部分的网页，以及执行对资源进行其他请求的多个按钮
- en: 'When we enter the URL of a non-existing resource in a web browser, the browsable
    API:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在网页浏览器中输入非现有资源的 URL 时，可浏览的 API：
- en: Renders a web page that displays an `HTTP 404 not found` header
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染一个显示 `HTTP 404 not found` 标头的网页
- en: Displays a plain text message with an `HTTP 404 not found` error
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示一个包含 `HTTP 404 not found` 错误的纯文本消息
- en: Renders a web page with the last toy resource that was available
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染显示最后可用的玩具资源的网页
- en: 'If we enter the following URL, `http://localhost:8000/toys/10?format=json`,
    and there is a toy resource whose `id` is equal to `10`, the browsable API will
    display:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们输入以下 URL，`http://localhost:8000/toys/10?format=json`，并且存在一个 `id` 等于 `10`
    的玩具资源，可浏览的 API 将会显示：
- en: The raw JSON results of an HTTP GET request to `http://localhost:8000/toys/`
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 `http://localhost:8000/toys/` 的 HTTP GET 请求的原始 JSON 结果
- en: The raw JSON results of an HTTP GET request to `http://localhost:8000/toys/10`
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 `http://localhost:8000/toys/10` 的 HTTP GET 请求的原始 JSON 结果
- en: The same web page that would be rendered if we entered `http://localhost:8000/toys/10`
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们输入 `http://localhost:8000/toys/10`，将会渲染的相同网页
- en: The rights answers are included in the [Appendix](https://cdp.packtpub.com/django_restful_web_services__/wp-admin/post.php?post=44&action=edit#post_454), *Solutions*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正确答案包含在 [附录](https://cdp.packtpub.com/django_restful_web_services__/wp-admin/post.php?post=44&action=edit#post_454)，*解决方案*
    中。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we understood some of the additional features that the Django
    REST framework adds to our RESTful Web Service, the browsable API. We used a web
    browser to work with our first web service built with Django.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了一些 Django REST 框架为我们的 RESTful Web 服务添加的附加功能，即可浏览的 API。我们使用网页浏览器来处理我们用
    Django 构建的第一个 Web 服务。
- en: We learned to make HTTP GET, POST, PUT, OPTIONS, and DELETE requests with the
    browsable API. We were able to easily test CRUD operations with a web browser.
    The browsable API allowed us to easily interact with our RESTful Web Service.
    We will take advantage of additional features in the forthcoming chapters.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了使用可浏览的 API 进行 HTTP GET、POST、PUT、OPTIONS 和 DELETE 请求。我们能够轻松地使用网页浏览器测试 CRUD
    操作。可浏览的 API 允许我们轻松地与我们的 RESTful Web 服务交互。我们将在接下来的章节中利用更多附加功能。
- en: Now that we understand how easy it is to take advantage of the browsable API
    with the Django REST framework, we will move on to more advanced scenarios and
    we will start a new RESTful Web Service. We will work with advanced relationships
    and serialization. We will cover these topics in [Chapter 6](dj-rst-websvc_ch16.html),
    *Working with Advanced Relationships and Serialization*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何轻松地利用 Django REST 框架的可浏览 API，我们将继续探讨更高级的场景，并开始一个新的 RESTful Web 服务。我们将处理高级关系和序列化。这些主题将在
    [第 6 章](dj-rst-websvc_ch16.html)，*处理高级关系和序列化* 中介绍。
