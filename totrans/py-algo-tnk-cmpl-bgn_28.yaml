- en: Chapter 18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Multiple-Alternative Decision Structure
  prefs: []
  type: TYPE_NORMAL
- en: 18.1 The Multiple-Alternative Decision Structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The multiple-alternative decision structure is used to expand the number of
    alternatives, as shown in the following flowchart fragment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter18-01.png)'
  prefs: []
  type: TYPE_IMG
- en: When a multiple-alternative decision structure is executed, Boolean_Expression_1
    is evaluated. If it evaluates to True, the corresponding statement or block of
    statements that immediately follows it is executed; then the rest of the structure
    is skipped, continuing to any remaining statements that may exist after the multiple-alternative
    decision structure. However, if Boolean_Expression_1 evaluates to False, the flow
    of execution evaluates Boolean_Expression_2\. If it evaluates to True, the corresponding
    statement or block of statements that immediately follows it is executed and the
    rest of the structure is skipped. This process continues until one Boolean expression
    evaluates to True or until no more Boolean expressions are left.
  prefs: []
  type: TYPE_NORMAL
- en: The last statement or block of statements N + 1 is executed when none of the
    previous Boolean expressions has evaluated to True. Moreover, this last statement
    or block of statements N+1 is optional and can be omitted. It depends on the algorithm
    you are trying to solve.
  prefs: []
  type: TYPE_NORMAL
- en: The general form of the Python statement is
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression_1:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 1
  prefs: []
  type: TYPE_NORMAL
- en: 'elif Boolean_Expression_2:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 2
  prefs: []
  type: TYPE_NORMAL
- en: 'elif Boolean_Expression_3:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 3
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: 'elif Boolean_Expression_N:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements N
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements N + 1
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The keyword elif is an abbreviation for “else if”.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The last statement or last block of statements N + 1 is
    optional and can be omitted (you need to omit the keyword else as well).'
  prefs: []
  type: TYPE_NORMAL
- en: A simple example is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_18.1'
  prefs: []
  type: TYPE_NORMAL
- en: name = input("What is your name? ")
  prefs: []
  type: TYPE_NORMAL
- en: 'if name == "John":'
  prefs: []
  type: TYPE_NORMAL
- en: print("You are my cousin!")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif name == "Aphrodite":'
  prefs: []
  type: TYPE_NORMAL
- en: print("You are my sister!")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif name == "Loukia":'
  prefs: []
  type: TYPE_NORMAL
- en: print("You are my mom!")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Sorry, I don't know you.")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 18.1-1 Trace Tables and Multiple-Alternative Decision Structures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a trace table to determine the values of the variables in each step for
    three different executions of the next Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) 5, 8; (ii) −13, 0; and (iii)
    1, −1.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_18.1-1'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a > 3:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #1")'
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a > 4 and b <= 10:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #2")'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #3")'
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a * 2 == -26:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #4")'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #5")'
  prefs: []
  type: TYPE_NORMAL
- en: b += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'elif b == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #6")'
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #7")'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #8")'
  prefs: []
  type: TYPE_NORMAL
- en: print("The end!")
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: i)For the input values of 5 and 8, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | b |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) | User enters the value 5 | 5 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | b = int(input()) | User enters the value 8 | 5 | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if a > 3: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | print("Message #1") | It displays: Message #1 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | print("The end!") | It displays: The end! |'
  prefs: []
  type: TYPE_TB
- en: '![](img/notice.jpg)Note that even though the second Boolean expression (a >
    4 and b <= 10) could also have evaluated to True, it was never checked.'
  prefs: []
  type: TYPE_NORMAL
- en: ii)For the input values of −13 and 0, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | b |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) | User enters the value −13 | −13 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | b = int(input()) | User enters the value 0 | −13 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if a > 3: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | elif a > 4 and b <= 10: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | elif a * 2 == ‑26: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print("Message #4") | It displays: Message #4 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | print("Message #5") | It displays: Message #5 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | b += 1 |   | −13 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | print("The end!") | It displays: The end! |'
  prefs: []
  type: TYPE_TB
- en: '![](img/notice.jpg)Note that after step 8 the fourth Boolean expression (b
    == 1) could also have evaluated to True, but it was never checked.'
  prefs: []
  type: TYPE_NORMAL
- en: iii)For the input values of 1 and −1, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | b |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) | User enters the value 1 | 1 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | b = int(input()) | User enters the value −1 | 1 | −1 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if a > 3: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | elif a > 4 and b <= 10: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | elif a * 2 == ‑26: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | elif b == 1: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | print("Message #7") | It displays: Message #7 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | print("Message #8") | It displays: Message #8 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | print("The end!") | It displays: The end! |'
  prefs: []
  type: TYPE_TB
- en: Exercise 18.1-2 The Days of the Week
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that prompts the
    user to enter an integer between 1 and 5, and then displays the corresponding
    work day (Monday, Tuesday, Wednesday, Thursday, or Friday). If the value entered
    is invalid, an error message must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The flowchart and the corresponding Python program that solve this exercise
    are presented below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter18-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/my_exercise_header.png) file_18.1-2'
  prefs: []
  type: TYPE_NORMAL
- en: 'day = int(input("Enter an integer between 1 and 5: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if day == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Monday")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif day == 2:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Tuesday")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif day == 3:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Wednesday")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif day == 4:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Thursday")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif day == 5:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Friday")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid Number")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 18.1-3 Counting the Digits
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter an integer between 0 and
    999 and then counts its total number of digits. In the end, a message “You entered
    a N-digit number” must be displayed, where N is the total number of digits. Assume
    that the user enters a valid integer between 0 and 999.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: You may be trying to figure out how to solve this exercise using DIV operations.
    You are probably thinking of dividing the user-provided integer by 10 and checking
    whether the integer quotient is 0\. If it is, this means that the user-provided
    integer is a one-digit integer. Then, you can divide it by 100 or by 1000 to check
    for two-digit and three-digit integers, respectively. Your thinking is partly
    true, and your thoughts are depicted in the following code fragment.
  prefs: []
  type: TYPE_NORMAL
- en: 'if x // 10 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: digits = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'elif x // 100 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: digits = 2
  prefs: []
  type: TYPE_NORMAL
- en: 'elif x // 1000 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: digits = 3
  prefs: []
  type: TYPE_NORMAL
- en: If the user-provided integer (in variable x) has one digit, the first Boolean
    expression evaluates to True and the rest of the Boolean expressions are never
    checked! If the user-provided integer has two digits, the first Boolean expression
    evaluates to False, the second one evaluates to True, and the last one is never
    checked! Finally, if the user-provided integer has three digits, both the first
    and the second Boolean expressions evaluate to False and the last one evaluates
    to True!
  prefs: []
  type: TYPE_NORMAL
- en: It seems accurate, doesn't it? So, where does the issue lie?
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider if the wording of the exercise were “Write a Python program that prompts
    the user to enter an integer and displays a message when the user-provided integer
    consists of two digits”. In all likelihood, you would proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = int(input("Enter an integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x // 100 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("A 2-digit integer entered")
  prefs: []
  type: TYPE_NORMAL
- en: However, this code is flawed! While the Boolean expression x // 100 == 0 works
    correctly for all user-provided integers with two digits or more, unfortunately,
    it fails for one-digit integers (as it does not evaluate to False for them). Therefore,
    using integer division is not the right approach. The correct solution is much
    simpler than you might believe!
  prefs: []
  type: TYPE_NORMAL
- en: What is the smallest two-digit integer that you can think of? It is 10, right?
    And what is the greatest one that you can think of? It is 99, right? So, the proper
    solution is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'x = int(input("Enter an integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if 10 <= x <= 99:'
  prefs: []
  type: TYPE_NORMAL
- en: print("A 2-digit integer entered")
  prefs: []
  type: TYPE_NORMAL
- en: According to all these, the complete solution to the exercise is as follows!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_18.1-3a'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = int(input("Enter an integer (0 - 999): "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if 0 <= x <= 9:'
  prefs: []
  type: TYPE_NORMAL
- en: digits = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'elif 10 <= x <= 99:'
  prefs: []
  type: TYPE_NORMAL
- en: digits = 2
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: digits = 3
  prefs: []
  type: TYPE_NORMAL
- en: print("A ", digits, "-digit integer entered", sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: 'And, if you wish to make your program even better and display an error message
    to the user when they enter a value that is not between 0 and 999, you can do
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_18.1-3b'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = int(input("Enter an integer (0 - 999): "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if 0 <= x <= 9:'
  prefs: []
  type: TYPE_NORMAL
- en: print("A 1-digit integer entered")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif 10 <= x <= 99:'
  prefs: []
  type: TYPE_NORMAL
- en: print("A 2-digit integer entered")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif 100 <= x <= 999:'
  prefs: []
  type: TYPE_NORMAL
- en: print("A 3-digit integer entered")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Wrong number!")
  prefs: []
  type: TYPE_NORMAL
- en: '18.2 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)The multiple-alternative decision structure is used to expand the number of
    alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: 2)The multiple-alternative decision structure can have at most three alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: 3)In a multiple-alternative decision structure, once a Boolean expression evaluates
    to True, the next Boolean expression is also evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: 4)In a multiple-alternative decision structure, the last statement or block
    of statements N+1 (appearing below the else keyword) is always executed.
  prefs: []
  type: TYPE_NORMAL
- en: 5)In a multiple-alternative decision structure, the last statement or block
    of statements N+1 (appearing below the else keyword) is executed when at least
    one of the previous Boolean expressions has evaluated to True.
  prefs: []
  type: TYPE_NORMAL
- en: 6)In a multiple-alternative decision structure, the last statement or block
    of statements N+1, and by extension the else keyword, can be omitted.
  prefs: []
  type: TYPE_NORMAL
- en: 7)In the following code fragment, the statement y += 1 is executed only when
    variable a contains a value other than 1, 2, or 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'if a == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: x += 5
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a == 2:'
  prefs: []
  type: TYPE_NORMAL
- en: x -= 2
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a == 3:'
  prefs: []
  type: TYPE_NORMAL
- en: x -= 9
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: x += 3
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  prefs: []
  type: TYPE_NORMAL
- en: 8)In the code fragment of the previous exercise, the statement x += 3 is executed
    only when variable a contains a value other than 1, 2, or 3.
  prefs: []
  type: TYPE_NORMAL
- en: 18.3 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Create a trace table to determine the values of the variables in each step
    for four different executions of the next Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the four executions are: (i) 5, (ii) 150, (iii) 250, and
    (iv) −1.'
  prefs: []
  type: TYPE_NORMAL
- en: q = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if 0 < q <= 50:'
  prefs: []
  type: TYPE_NORMAL
- en: b = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'elif 50 < q <= 100:'
  prefs: []
  type: TYPE_NORMAL
- en: b = 2
  prefs: []
  type: TYPE_NORMAL
- en: 'elif 100 < q <= 200:'
  prefs: []
  type: TYPE_NORMAL
- en: b = 3
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: b = 4
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create a trace table to determine the values of the variables in each step
    for three different executions of the next Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) 5, (ii) 150, and (iii) −1.'
  prefs: []
  type: TYPE_NORMAL
- en: amount = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: discount = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'if amount < 20:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'elif 20 <= amount < 60:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 5
  prefs: []
  type: TYPE_NORMAL
- en: 'elif 60 <= amount < 100:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 10
  prefs: []
  type: TYPE_NORMAL
- en: 'elif amount >= 100:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 15
  prefs: []
  type: TYPE_NORMAL
- en: payment = amount - amount * discount / 100
  prefs: []
  type: TYPE_NORMAL
- en: print(discount, ",", payment)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Create a trace table to determine the values of the variables in each step
    of the next Python program for three different executions. Then, design the corresponding
    flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) 1, (ii) 3, and (iii) 250.'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: x = 0
  prefs: []
  type: TYPE_NORMAL
- en: y = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'if a == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x + 5
  prefs: []
  type: TYPE_NORMAL
- en: y = y + 5
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a == 2:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x - 2
  prefs: []
  type: TYPE_NORMAL
- en: y -= 1
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a == 3:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x - 9
  prefs: []
  type: TYPE_NORMAL
- en: y = y + 3
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x + 3
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y)
  prefs: []
  type: TYPE_NORMAL
- en: 4)Create a trace table to determine the values of the variables in each step
    of the next Python program for three different executions. Then, design the corresponding
    flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) 10, 2, 5; (ii) 5, 2, 3;
    and (iii) 4, 6, 2.'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a == 10:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x % 2
  prefs: []
  type: TYPE_NORMAL
- en: y = y ** 2
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a == 3:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x * 2
  prefs: []
  type: TYPE_NORMAL
- en: y -= 1
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a == 5:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x + 4
  prefs: []
  type: TYPE_NORMAL
- en: y += 7
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: x -= 3
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y)
  prefs: []
  type: TYPE_NORMAL
- en: 5)Write the following Python program using correct indentation.
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a < 1:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 5 + a
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a < 5:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 23 / a
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a < 10:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 5 * a
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Error!")
  prefs: []
  type: TYPE_NORMAL
- en: 6)Write a Python program that prompts the user to enter two integers and then
    displays a message indicating whether both numbers are odd or both are even; otherwise
    the message “Nothing special” must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 7)Two football teams play against each other in the UEFA Champions League. Write
    a Python program that prompts the user to enter the names of the two teams and
    the goals each team scored and then displays the name of the winner or the message
    “It's a tie!” when both teams score equal number of goals. Assume that the user
    enters valid values.
  prefs: []
  type: TYPE_NORMAL
- en: 8)Design a flowchart and write the corresponding Python program that lets the
    user enter an integer between −9999 and 9999, and then counts its total number
    of digits. In the end, a message “You entered a N-digit number” is displayed,
    where N is the total number of digits. Assume that the user enters a valid integer
    between −9999 and 9999.
  prefs: []
  type: TYPE_NORMAL
- en: 9)Rewrite the Python program of the previous exercise to validate the data input.
    An error message must be displayed when the user enters an invalid value.
  prefs: []
  type: TYPE_NORMAL
- en: '10)Write a Python program that displays the following menu:'
  prefs: []
  type: TYPE_NORMAL
- en: 1)Convert USD to Euro (EUR)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Convert USD to British Pound Sterling (GBP)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Convert USD to Japanese Yen (JPY)
  prefs: []
  type: TYPE_NORMAL
- en: 4)Convert USD to Canadian Dollar (CAD)
  prefs: []
  type: TYPE_NORMAL
- en: It then prompts the user to enter a choice (of 1, 2, 3, or 4) and an amount
    in US dollars and calculates and displays the required value. Assume that the
    user enters valid values. It is given that
  prefs: []
  type: TYPE_NORMAL
- en: ►$1 = 0.94 EUR (€)
  prefs: []
  type: TYPE_NORMAL
- en: ►$1 = 0.81 GBP (£)
  prefs: []
  type: TYPE_NORMAL
- en: ►$1 = ¥ 149.11 JPY
  prefs: []
  type: TYPE_NORMAL
- en: ►$1 = 1.36 CAD ($)
  prefs: []
  type: TYPE_NORMAL
- en: 11)Write a Python program that prompts the user to enter the number of a month
    between 1 and 12, and then displays the corresponding season. Assume that the
    user enters a valid value. It is given that
  prefs: []
  type: TYPE_NORMAL
- en: ►Winter includes months 12, 1, and 2
  prefs: []
  type: TYPE_NORMAL
- en: ►Spring includes months 3, 4, and 5
  prefs: []
  type: TYPE_NORMAL
- en: ►Summer includes months 6, 7, and 8
  prefs: []
  type: TYPE_NORMAL
- en: ►Fall (Autumn) includes months 9, 10, and 11
  prefs: []
  type: TYPE_NORMAL
- en: 12)Rewrite the Python program of the previous exercise to validate the data
    input. An error message must be displayed when the user enters an invalid value.
  prefs: []
  type: TYPE_NORMAL
- en: 13)Write a Python program that prompts the user to enter the name of a month,
    and then displays the corresponding number (1 for January, 2 for February, and
    so on). If the value entered is invalid, an error message must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 14)The most popular and commonly used grading system in the United States uses
    discrete evaluation in the form of letter grades. Design a flowchart and write
    the corresponding Python program that prompts the user to enter a letter between
    A and F, and then displays the corresponding percentage according to the following
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Grade | Percentage |'
  prefs: []
  type: TYPE_TB
- en: '| A | 90 ‐ 100 |'
  prefs: []
  type: TYPE_TB
- en: '| B | 80 ‐ 89 |'
  prefs: []
  type: TYPE_TB
- en: '| C | 70 ‐ 79 |'
  prefs: []
  type: TYPE_TB
- en: '| D | 60 ‐ 69 |'
  prefs: []
  type: TYPE_TB
- en: '| E / F | 0 ‐ 59 |'
  prefs: []
  type: TYPE_TB
- en: Assume that the user enters a valid value.
  prefs: []
  type: TYPE_NORMAL
- en: '15)Design a flowchart and write the corresponding Python program that displays
    the following menu:'
  prefs: []
  type: TYPE_NORMAL
- en: 1)Convert Miles to Yards
  prefs: []
  type: TYPE_NORMAL
- en: 2)Convert Miles to Feet
  prefs: []
  type: TYPE_NORMAL
- en: 3)Convert Miles to Inches
  prefs: []
  type: TYPE_NORMAL
- en: It then prompts the user to enter a choice (of 1, 2, or 3) and a distance in
    miles. Then, it calculates and displays the required value. Assume that the user
    enters a valid value for the distance. However, if the choice entered is invalid,
    an error message must be displayed. It is given that
  prefs: []
  type: TYPE_NORMAL
- en: ►1 mile = 1760 yards
  prefs: []
  type: TYPE_NORMAL
- en: ►1 mile = 5280 feet
  prefs: []
  type: TYPE_NORMAL
- en: ►1 mile = 63360 inches
  prefs: []
  type: TYPE_NORMAL
- en: 16)Roman numerals are shown in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Number | Roman Numeral |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | I |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | II |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | III |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | IV |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | V |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | VI |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | VII |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | VIII |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | IX |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | X |'
  prefs: []
  type: TYPE_TB
- en: Write a Python program that prompts the user to enter a Roman numeral between
    I and X, and then displays the corresponding number. However, if the choice entered
    is invalid, an error message must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '17)An online supermarket awards points to its customers based on the total
    number of wine bottles purchased each month. The points are awarded as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ►If the customer purchases 1 bottle of wine, they are awarded 3 points.
  prefs: []
  type: TYPE_NORMAL
- en: ►If the customer purchases 2 bottles of wine, they are awarded 10 points.
  prefs: []
  type: TYPE_NORMAL
- en: ►If the customer purchases 3 bottles of wine, they are awarded 20 points.
  prefs: []
  type: TYPE_NORMAL
- en: ►If the customer purchases 4 bottles of wine or more, they are awarded 45 points.
  prefs: []
  type: TYPE_NORMAL
- en: Using a case decision structure, write a Python program that prompts the user
    to enter the total number of wine bottles they have purchased in a month and then
    displays the number of points awarded. Assume that the user enters a valid value.
  prefs: []
  type: TYPE_NORMAL
- en: 18)Write a Python program that prompts the user to enter their name, and then
    displays “Hello NN!” or “Hi NN!” or “What's up NN!”, where NN is the name of the
    user. The message to be displayed must be chosen randomly.
  prefs: []
  type: TYPE_NORMAL
- en: 19)Write a Python program that lets the user enter a word such as "zero", “one”
    or "two", and then converts it into the corresponding digit, such as 0, 1, or
    2\. This must be done for the numbers 0 to 9\. Display "I don't know this number!"
    when the user enters an unknown.
  prefs: []
  type: TYPE_NORMAL
- en: 20)The Beaufort^([[15]](footnotes.html#Endnote_15)) scale is an empirical measure
    that relates wind speed to observed conditions on land or at sea. Write a Python
    program that prompts the user to enter the Beaufort number, and then displays
    the corresponding description from the following table. However, if the number
    entered is invalid, an error message must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '| Beaufort Number | Description |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | Calm |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Light air |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Light breeze |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Gentle breeze |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Moderate breeze |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Fresh breeze |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Strong breeze |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | Moderate gale |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | Gale |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | Strong gale |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | Storm |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | Violent storm |'
  prefs: []
  type: TYPE_TB
- en: '| 12 | Hurricane force |'
  prefs: []
  type: TYPE_TB
- en: 21)Write a Python program that prompts the user to enter a number with one decimal
    digit between 0.0 and 9.9, and then displays the number as English text. For example,
    if the user enters 2.3, the program must display “Two point three”. Assume that
    the user enters a valid value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Avoid checking each real number individually, as this would require a
    multiple-alternative decision structure with 100 cases! Try to find a more efficient
    and clever approach instead!'
  prefs: []
  type: TYPE_NORMAL
