- en: '[*Chapter 14*](B16119_14_PreFinal_RK_ePub.xhtml#_idTextAnchor400): Understanding
    Odoo Built-In Models'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a new database is created, an initial data model is populated, providing
    basic entities that can be used for **Odoo Apps**. This chapter identifies the
    most relevant basic entities and explains how to inspect them from the **user
    interface** (**UI**), as well as what their role is.
  prefs: []
  type: TYPE_NORMAL
- en: While this understanding is not indispensable for you to be able to develop
    Odoo apps, it will provide a solid base to understand the Odoo framework core
    concepts and help to leverage the technical menu to address more complex requirements
    or issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the contacts data model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the users and companies data model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the security-related information repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the database structure models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the UI-related repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the configuration properties and company parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the messaging data model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to use the technical menu to inspect
    the most relevant internal data record of the Odoo framework, helping you with
    issue analysis and resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the chapter, simplified **entity-relationship diagrams** (**ERDs**)
    are presented, allowing you to visualize how the core models are interrelated
    and thus have a deeper understanding of how these can be used in your business
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow this chapter, you will only need admin access to an Odoo 15 instance
    and to enable the developer mode in the **Settings** | **Technical** menu. To
    follow the contacts data model section, the **Contacts** app must be installed,
    and to follow the messaging data model section, the **Discuss** app must be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the contacts data model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Resource models carry the `res.` prefix on their technical **identifiers** (**IDs**).
    They hold Odoo's basic master data, such as users, companies, and currencies.
  prefs: []
  type: TYPE_NORMAL
- en: A central model for Odoo is the `res.partner`. It is used anywhere an address,
    person, or organization needs to be represented. Examples are customers, suppliers,
    contact persons, invoicing or shipping addresses, employees, and applicants. It
    is also used to complement the contact data for users and configured companies.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the `res.partner` model is provided by the Odoo base module and requires
    no specific app to be installed, to have the corresponding menus available, the
    **Contacts** app needs to be installed. These are the relevant **Contact** related
    models:'
  prefs: []
  type: TYPE_NORMAL
- en: '`res.bank`, holds bank identification data, as it turns out to be hard to do
    business without having a bank involved somehow. Bank data can be browsed from
    the **Contacts** | **Configuration** | **Bank Accounts** | **Banks** menu option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res.partner.bank`, holds bank account details. Bank accounts are related to
    a `res.partner` and, not surprisingly, also reference the `res.bank` bank they
    are related to. Bank accounts can be browsed at **Contacts** | **Configuration**
    | **Bank Accounts** | **Banks Accounts**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res.partner.industry`, is a high-level list of economic activities. It is
    populated with NACE codes. **NACE**, the **Nomenclature of Economic Activities**,
    is the European statistical classification of economic activities. The list can
    be found at **Contacts** | **Configuration** | **Industries**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res.country`, lists the world countries and includes useful data such as the
    two-digit `res.partner` model. The country list can be browsed at **Contacts**
    | **Configuration** | **Localization** | **Countries**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res.country.state`, lists country states and similar administrative regions.
    The list is populated by default, and the data can be seen at **Contacts** | **Configuration**
    | **Localization** | **Feb. States**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res.country.group`, allows us to define country groups. The default groups
    provided by Odoo are Europe, **Single Euro Payments Area** (**SEPA**) Countries,
    and South America. Other groups can be added per need, at **Contacts** | **Configuration**
    | **Localization** | **Country Groups**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res.currency`, contains a currency list, relevant when multi-currency is enabled.
    The list is pre-populated by Odoo, and the relevant currencies should be set as
    `active`. The menu option to access the list is in the **Invoicing**/**Accounting**
    app (if **multi-currency** is enabled), in the corresponding **Configuration**
    | **Accounting** | **Currencies** menu option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram provides a high-level overview of these models and their
    relations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Contacts data model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.1_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.1 – Contacts data model
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The data model diagrams provided here are simplified ERDs. Part of the simplification
    is replacing the *crow's foot* notation, which may not be familiar to many of
    you, with simple arrows. An **arrow** represents a many-to-one relation. A **bidirectional
    arrow** represents a many-to-many relation. Dotted lines represent soft relations
    that don't use a database ID or a database **foreign key** (**FK**). Model names
    use the singular form, as is the convention for ERDs, even if the Odoo model's
    name may use the plural form.
  prefs: []
  type: TYPE_NORMAL
- en: Other resource models are the users and companies, described in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the users and companies data model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users and companies are central elements of the Odoo data model. They can be
    accessed in the **Settings** | **Users & Companies** menu. The menu options available
    are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`res.users`, stores the system users. These have an implicit partner record
    in the `partner_id` field, where the name, email, image, and other contact details
    are stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res.group`, stores the security access groups. This menu is only available
    with the developer mode enabled. Users belonging to a group will be granted that
    group''s privileges. Groups can inherit other groups, meaning that they will also
    provide the privileges from these inherited groups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res.company`, stores the organization''s details and the company-specific
    configurations. It has an implicit partner record, holding the address and contact
    details, stored in the `partner_id` field. A default company is provided on new
    databases, with the `base.main_company` **Extensible Markup Language** (**XML**)
    ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram provides a high-level view of relations between these
    models:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – Users and companies data model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.2_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.2 – Users and companies data model
  prefs: []
  type: TYPE_NORMAL
- en: The user and access group models are the foundation for the Odoo access security
    definitions. The next section details these models, accessible from the **Technical**
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the security-related information repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Odoo users are granted access to features through access groups. These access
    groups hold the definitions of the privileges access they provide. The most relevant
    access models are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`res.users`, are the Odoo system users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res.group`, are the access groups. Users belong to one or more groups, and
    each group grants certain privileges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.model.access`, grants a group **create-read-update-delete** (**CRUD**)
    privileges on a model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.rule`, grants a group CRUD privileges on a subset of the model records,
    defined by a domain expression. For example, with regular access rights, you can
    grant write access, and then a record rule can limit certain records to be read-only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram provides a simplified view of this part of the data model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Security-related data model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.3_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.3 – Security-related data model
  prefs: []
  type: TYPE_NORMAL
- en: You have learned about the data model for users, access groups, partners, and
    access rights, which all have a close connection between them. In the next section,
    you will continue further improving your understanding of the database structure
    definition, such as models and fields.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the database structure models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The information repository (`ir.`) models describe the Odoo internal configuration,
    such as models, fields, and UI. These definitions can be accessed under the **Settings**
    | **Technical** menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data models-related information repository can be found using the **Settings**
    | **Technical** | **Database Structure** menu. Following the most relevant option
    in that menu, we have these settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`decimal.precision`, is used to configure the number of precision digits for
    different use cases, such as product prices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.model`, describes the Odoo installed data models that most of the time
    map to a database table where the data is stored. It is useful to find the model''s
    XML ID, using the developer menu **View Metadata** option. The **In Apps** field
    is also useful for finding out the modules involved in the model data structure
    definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.model.field`, stores the model fields defined in the database. This list
    can be accessed using the **Settings** | **Technical** | **Database Structure**
    | **Fields** menu, or the developer menu **View Fields** option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.attachment`, is the model used to store attachment files. It is a single
    storage place used across Odoo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Settings** | **Technical** | **Sequences & Identifiers** menu includes
    models related to data record IDs and contains the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ir.model.data`, is where external IDs, also known as XML IDs are stored. They
    map ID names that are database instance-agnostic to database instance-specific
    ID keys. They are accessible at **Settings** | **Technical** | **Sequences & Identifiers**
    | **External Identifiers**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.sequence`, describes the automatic number assignment sequences used—for
    example, on **sales orders** or **stock transfers**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram presents a high-level view of the relations between these
    models:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Database structure data model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.4_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.4 – Database structure data model
  prefs: []
  type: TYPE_NORMAL
- en: You have learned about the key models used to hold the Odoo model definition.
    Next, we have the presentation layer definition, discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the UI-related information repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'UI elements, such as menus and views, are stored in information repository
    models. The corresponding data can be accessed through the **Settings** | **Technical**
    | **User Interface** menu. The most relevant options found there are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ir.ui.menu`, defines the menu options. These form a hierarchy tree, and the
    leaf items can trigger an **Action**, then often provide instructions to display
    the composition of views.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.ui.view`, stores the view definitions and their extensions. View types
    include form, list, Kanban, and QWeb (both for reports and for web page templates).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Under the **Settings** | **Technical** | **Actions** menu, you can find a definition
    for these UI elements. The most relevant options are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ir.actions.actions`, is the base model that other action types derive from.
    Usually, you won''t need to deal with it directly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.actions.report`, are actions to print a report. They will have related
    QWeb views, providing the report definition, used to generate the report **HyperText
    Markup Language** (**HTML**) that can then be converted to a **Portable Desktop
    Format** (**PDF**) format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.actions.act_window`, is used to present the composition of a view and is
    probably the most frequently used action type. The simplest view composition is
    a list view and a form view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.actions.server`, is used to run a server process, such as creating or modifying
    a record, sending an email, or even running Python code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram provides a simplified view of the previous models and
    their relations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Actions and UI data model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.5_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.5 – Actions and UI data model
  prefs: []
  type: TYPE_NORMAL
- en: With this section, you should have gained a better understanding of the several
    elements relevant to defining the Odoo UI and how to use the technical menu to
    inspect them. In the next section, you will be introduced to the technical models
    used for global configuration parameters and for company-dependent data.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the configuration properties and company parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another important menu in the technical options is **Settings** | **Technical**
    | **User Parameters**. You can find two options there: **System Parameters** and
    **Company Properties**.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ir.config_parameter`, stores global configuration options. Some are defaults
    that can be adjusted, while others are set when some options are selected in the
    `web.base.url` option stores the Odoo server **Uniform Resource Locator** (**URL**)
    and can be used to create links in email templates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ir.property`, is where data for multi-company fields is stored. Some fields
    can have different values depending on the active company. These are also known
    as **property fields**.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, the partner fields `property_account_receivable_id`), relevant
    for customers, and `property_account_payable_id`), relevant for suppliers, are
    both property fields.
  prefs: []
  type: TYPE_NORMAL
- en: Since the same field name can hold different values, depending on the active
    company, it can be a regular database file. That is where the `ir.property` model
    comes in as the place where these values can be stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'This model has the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`property_account_receivable_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.model.fields` record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float` or `Many2one`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res.partner,62` means a reference for the `res.partner` record with database
    ID 62.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Company**: The company this value is valid for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`account.account,813` for a chart of accounts with ID 813.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Resource** field is optional. If blank, it is used as the default value
    for new records in that company. This is used for the case of the **Account Receivable**
    and **Account Payable** fields used as an example here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Understanding the relevance of these company properties and parameters can be
    useful for advanced configuration tweaks, such as adjusting the public web URL
    to be used or defining a multi-company field default value. The next section will
    continue the technical menu exploration journey, this time covering message-related
    models.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding messaging data models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A relevant technical area you might need to work with is the messaging-related
    models used by the Chatter widget found in many forms. These features are provided
    by the `mail`, so it needs to be installed before the following menu items are
    available.
  prefs: []
  type: TYPE_NORMAL
- en: 'The relevant technical models can be found in the **Settings** | **Technical**
    | **Discuss** menu. The most important options found there are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mail.message`, stores each message. It is related to a *resource*, a particular
    record in a model, through the **Mail Thread** abstract model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail.message.subtype`, is used for each message. The basic subtypes are **Note**,
    for internal discussions, **Discussion,** for outside messages, and **Activities**,
    for scheduled activities. These are available for any model. Other subtypes, usually
    model-specific, can be added to identify different events. This allows the configuring
    of default subscriptions, deciding which events should trigger notifications to
    which followers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail.tracking.value`, stores the field values change log for tracked fields.
    For a field to be tracked, check the `tracked=True` field attribute. These changelogs
    are presented in the Chatter message, and so the tracking values are linked to
    a Chatter message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail.activity`, stores the individual activities for a record. The **Activity
    Mixin** abstract adds other models the ability to link to activities, similarly
    to what **Mail Thread** does for messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail.activity.type`, are the configurable activity types, such as **Email**,
    **Call**, **Meeting**, or **Todo**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail.followers`, stores a list of followers for each message thread. Each
    follower record also has a list of subtypes it has subscribed to. Whenever a new
    message with any of these subtypes is added, the follower will get a notification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Data access and changelogs are important features in some environments with
    strict control policies. An alternative to the out-of-the-box tracking feature
    is the **Audit Log** community module. You can find it at [https://odoo-community.org/shop/product/audit-log-533](https://odoo-community.org/shop/product/audit-log-533).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following diagram provides a high-level view of these models and their
    relations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – Message and activity data model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.6_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.6 – Message and activity data model
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, you would use a few handpicked **application programming interface**
    (**API**) methods to create messages and activities and will not need to delve
    into the details on how the corresponding data is stored.
  prefs: []
  type: TYPE_NORMAL
- en: For some advanced cases, having a good understanding of the underlying data
    model can be valuable. In particular, understanding message subtypes and follower
    subscriptions to them can be useful for fine-grained control of notifications.
    This completes our overview of the Odoo framework's most important technical models.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the internal structures of the Odoo framework,
    provided by information repository (`ir`) and resource (`res`) models.
  prefs: []
  type: TYPE_NORMAL
- en: The **Contacts** model is central for storing all people and address data in
    Odoo, and installing the **Contacts** app adds the UI for this model and related
    data. Understanding how company contacts can have child contacts and addresses
    is important to effectively use Odoo. The **Users & Companies** menu, from the
    **Settings** app, was also discussed, to introduce **Users**, **Access Groups**,
    and **Companies**. The role of **Access Groups** to grant access privileges to
    **Users** is a key idea here. The remaining relevant elements are exposed in the
    **Technical** menu of the **Settings** app. Let's review some key ideas here addressed
    in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from the top of the menu, the **Discuss** submenu holds the message
    and activities data model, and a key idea is how subtypes are used to control
    automatic notifications. The **Actions** menu exposes the actions used in menu
    items and the context menu, and is used to present views, print reports, or execute
    code in the server. The **User Interface** menu introduces the **Menu Items**
    that make use of the **Actions**, as well as the **Views** menu option, used to
    hold both backend views and frontend HTML templates. Next in the menu is the **Database
    Structure** submenu. Here, the models used to describe all the Odoo data structures
    are available. These are referenced in multiple places during app development,
    such as in view definitions or model extensions. Closely related to models are
    the **Security** definitions, granting members of access groups access privileges
    to read or write to models, or specific record domains in a model.
  prefs: []
  type: TYPE_NORMAL
- en: While not every single technical menu option was reviewed, the most relevant
    ones were presented and should provide a solid understating of the data structures
    underlying the `base` and `mail` modules. Your journey through the Odoo development
    horizon is close to an end. Now that you have all the tools and skills to develop
    your business applications, the final piece missing is to deploy them and make
    them available for the end users.
  prefs: []
  type: TYPE_NORMAL
- en: The Odoo project's last mile is to deploy our work for real usage. Installing
    Odoo for a production environment has additional requirements when compared to
    a development installation. The next chapter will guide you through the setup
    of an Odoo production installation, avoiding the most common pitfalls.
  prefs: []
  type: TYPE_NORMAL
