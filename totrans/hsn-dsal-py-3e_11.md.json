["```py\nunordered_list = [5, 2]\ntemp = unordered_list[0]\nunordered_list[0] = unordered_list[1]\nunordered_list[1] = temp\nprint(unordered_list) \n```", "```py\n[2, 5] \n```", "```py\ndef bubble_sort(unordered_list):\n    iteration_number = len(unordered_list)-1\n    for i in range(iteration_number,0,-1):\n        for j in range(i):\n            if unordered_list[j] > unordered_list[j+1]:\n                temp = unordered_list[j]\n                unordered_list[j] = unordered_list[j+1]\n                unordered_list[j+1] = temp \n```", "```py\nmy_list = [4,3,2,1]\nbubble_sort(my_list)\nprint(my_list)\n\nmy_list = [1,12,3,4]\nbubble_sort(my_list)\nprint(my_list) \n```", "```py\n[1, 2, 3, 4]\n[1, 3, 4, 12] \n```", "```py\n(n-1) + (n-2) + (n-3) +.....+ 1 = n(n-1)/2\nn(n+1)/2\nO(nÂ²) \n```", "```py\ndef insertion_sort(unsorted_list):\n    for index in range(1, len(unsorted_list)):\n        search_index = index\n        insert_value = unsorted_list[index]\n        while search_index > 0 and unsorted_list[search_index-1] > insert_value :\n            unsorted_list[search_index] = unsorted_list[search_index-1]\n            search_index -= 1\n        unsorted_list[search_index] = insert_value \n```", "```py\n for index in range(1, len(unsorted_list)):\n        search_index = index\n        insert_value = unsorted_list[index] \n```", "```py\n while search_index > 0 and unsorted_list[search_index-1] > insert_value :\n        unsorted_list[search_index] = unsorted_list[search_index-1]\n        search_index -= 1\n    unsorted_list[search_index] = insert_value \n```", "```py\nmy_list = [5, 1, 100, 2, 10]\nprint(\"Original list\", my_list)\ninsertion_sort(my_list)\nprint(\"Sorted list\", my_list) \n```", "```py\nOriginal list [5, 1, 100, 2, 10]\nSorted list [1, 2, 5, 10, 100] \n```", "```py\n1 + 2 + 3 .. (n-1) \nn(n-1)/2 \n```", "```py\ndef selection_sort(unsorted_list): \n    size_of_list = len(unsorted_list) \n    for i in range(size_of_list): \n        small = i\n        for j in range(i+1, size_of_list): \n            if unsorted_list[j] < unsorted_list[small]: \n                small = j\n        temp = unsorted_list[i] \n        unsorted_list[i] = unsorted_list[small] \n        unsorted_list[small] = temp \n```", "```py\na_list = [3, 2, 35, 4, 32, 94, 5, 7]\nprint(\"List before sorting\", a_list)\nselection_sort(a_list)\nprint(\"List after sorting\", a_list) \n```", "```py\nList before sorting [3, 2, 35, 4, 32, 94, 5, 7]\nList after sorting [2, 3, 4, 5, 7, 32, 35, 94] \n```", "```py\ndef partition(unsorted_array, first_index, last_index):\n    pivot = unsorted_array[first_index]\n    pivot_index = first_index\n    index_of_last_element = last_index\n    less_than_pivot_index = index_of_last_element\n    greater_than_pivot_index = first_index + 1\n    while True:\n        while unsorted_array[greater_than_pivot_index] < pivot and greater_than_pivot_index < last_index:\n            greater_than_pivot_index += 1\n        while unsorted_array[less_than_pivot_index] > pivot and less_than_pivot_index >= first_index:\n            less_than_pivot_index -= 1\n        if greater_than_pivot_index < less_than_pivot_index:\n            temp = unsorted_array[greater_than_pivot_index]\n            unsorted_array[greater_than_pivot_index] = unsorted_array[less_than_pivot_index]\n            unsorted_array[less_than_pivot_index] = temp\n        else:\n            break\n    unsorted_array[pivot_index] = unsorted_array[less_than_pivot_index]\n    unsorted_array[less_than_pivot_index] = pivot\n    return less_than_pivot_index \n```", "```py\n if greater_than_pivot_index < less_than_pivot_index:\n        temp = unsorted_array[greater_than_pivot_index]\n        unsorted_array[greater_than_pivot_index] = \n                unsorted_array[less_than_pivot_index] \n        unsorted_array[less_than_pivot_index] = temp\n    else:\n        break \n```", "```py\n unsorted_array[pivot_index]=unsorted_array[less_than_pivot_index]\n    unsorted_array[less_than_pivot_index]=pivot\n    return less_than_pivot_index \n```", "```py\ndef quick_sort(unsorted_array, first, last):\n    if last - first <= 0:\n        return\n    else:\n        partition_point = partition(unsorted_array, first, last)\n        quick_sort(unsorted_array, first, partition_point-1)\n        quick_sort(unsorted_array, partition_point+1, last) \n```", "```py\nmy_array = [43, 3, 77, 89, 4, 20]\nprint(my_array)\nquick_sort(my_array, 0, 5)\nprint(my_array) \n```", "```py\n[43, 3, 77, 89, 4, 20]\n[3, 4, 20, 43, 77, 89] \n```", "```py\ndef Insertion_Sort(unsorted_list): \n    for index in range(1, len(unsorted_list)): \n        search_index = index \n        insert_value = unsorted_list[index] \n        while search_index > 0 and unsorted_list[search_index-1] > insert_value : \n            unsorted_list[search_index] = unsorted_list[search_index-1] \n            search_index -= 1 \n        unsorted_list[search_index] = insert_value \n    return unsorted_list \n```", "```py\ndef Merge(first_sublist, second_sublist):\n    i = j = 0\n    merged_list = []\n    while i < len(first_sublist) and j < len(second_sublist):\n        if first_sublist[i] < second_sublist[j]:\n            merged_list.append(first_sublist[i])  \n            i += 1  \n        else:\n            merged_list.append(second_sublist[j])  \n            j += 1\n    while i < len(first_sublist):  \n        merged_list.append(first_sublist[i])  \n        i += 1  \n    while j < len(second_sublist):\n        merged_list.append(second_sublist[j])  \n        j += 1\n    return merged_list \n```", "```py\ndef Tim_Sort(arr, run):\n    for x in range(0, len(arr), run):\n        arr[x : x + run] = Insertion_Sort(arr[x : x + run]) \n    runSize = run    \n    while runSize < len(arr):\n        for x in range(0, len(arr), 2 * runSize):\n            arr[x : x + 2 * runSize] = Merge(arr[x : x + runSize], arr[x + runSize: x + 2 * runSize]) \n\n        runSize = runSize * 2 \n```", "```py\nfor x in range(0, len(arr), run):\n       arr[x : x + run] = Insertion_Sort(arr[x : x + run]) \n```", "```py\n runSize = run    \n    while runSize < len(arr):\n        for x in range(0, len(arr), 2 * runSize):\n            arr[x : x + 2 * runSize] = Merge(arr[x : x + runSize], arr[x + runSize: x + 2 * runSize]) \n\n        runSize = runSize * 2 \n```", "```py\narr = [4, 6, 3, 9, 2, 8, 7, 5]\nrun = 2\nTim_Sort(arr, run) \nprint(arr) \n```", "```py\n[2,3,4,5,6,7,8,9] \n```"]