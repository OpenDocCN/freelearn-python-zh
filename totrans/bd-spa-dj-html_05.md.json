["```py\n    INSTALLED_APPS = [\n        ' channels', # New line\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'app.simple_app', #New line\n    ]\n    ```", "```py\n    ASGI_APPLICATION = \"hello_world.asgi.application\"\n    ```", "```py\n    from django.apps import AppConfig\n    class SimpleAppConfig(AppConfig):\n        default_auto_field = 'django.db.models.\n            BigAutoField'.\n        name = 'app.simple_app' # Update\n    ```", "```py\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, \n      user-scalable=no, initial-scale=1.0, maximum- \n        scale=1.0, minimum-scale=1.0\">\n    <title> Index </title>\n</head>\n<body>\n    <h1> Hello Django! <h1>\n</body>\n</html>\n```", "```py\n    from django.shortcuts import render\n\n    def index(request):\n        return render(request, 'index.html', {})\n    ```", "```py\n    from django.contrib import admin\n    from django.urls import path\n    from app.simple_app import views\n\n    urlpatterns = [\n        path('', views.index, name='index'), # New line\n        path('admin/', admin.site.urls),\n    ]\n    ```", "```py\nfrom channels.generic.websocket import WebsocketConsumer\n```", "```py\nclass NameConsumer(WebsocketConsumer):\n```", "```py\n    def connect(self):\n```", "```py\n        \"\"\"Event when client connects\"\"\"\n```", "```py\n        # Informs client of successful connection\n```", "```py\n        self.accept()\n```", "```py\n    def disconnect(self, close_code):\n```", "```py\n        \"\"\"Event when client disconnects\"\"\"\n```", "```py\n        pass\n```", "```py\n    def receive(self, text_data):\n```", "```py\n        \"\"\"Event when data is received\"\"\"\n```", "```py\n        pass\n```", "```py\n    # app/simple_app/consumers.py\n    from channels.generic.websocket import WebsocketConsumer\n\n    class EchoConsumer(WebsocketConsumer):\n\n        def connect(self):\n            \"\"\"Event when client connects\"\"\"\n\n            # Informs client of successful connection\n            self.accept()\n\n            # Send message to client\n            self.send(text_data=\"You are connected by WebSockets!\")\n\n        def disconnect(self, close_code):\n            \"\"\"Event when client disconnects\"\"\"\n            pass\n\n        def receive(self, text_data):\n            \"\"\"Event when data is received\"\"\"\n            pass\n    ```", "```py\n    # hello_world/asgi.py\n    import os\n    from django.core.asgi import get_asgi_application\n    from channels.auth import AuthMiddlewareStack\n    from channels.routing import ProtocolTypeRouter, \n        URLRouter\n    from django.urls import re_path\n    from app.simple_app.consumers import EchoConsumer\n     os.environ.setdefault('DJANGO_SETTINGS_MODULE', \n        'hello_world.settings')\n\n    application = ProtocolTypeRouter({\n        # Django's ASGI application to handle traditional \n        HTTP requests\n        \"http\": get_asgi_application(),\n        # WebSocket handler\n        \"websocket\": AuthMiddlewareStack(\n            URLRouter([\n                re_path(r\"^ws/echo/$\", EchoConsumer.\n                    as_asgi()),\n            ])\n        ),\n    })\n    ```", "```py\n{# app/simple_app/templates/index.html #}\n<! doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, \n      user-scalable=no, initial-scale=1.0, maximum-\n        scale=1.0, minimum-scale=1.0\">\n    < title> Index </title>\n</head>\n<body>\n    <h1>Hello Django!</h1>\n\n    <!-- Place where we will display the connection \n    message. -->\n    <h2 id=\"welcome\"></h2>\n    <script>\n        // Connect to WebSockets server (EchoConsumer)\n        const myWebSocket = new WebSocket(\"ws://{{ \n            request.get_host }}/ws/echo/\");\n\n        // Event when a new message is received by \n        WebSockets\n        myWebSocket.addEventListener(\"message\", \n            (event) => {\n            // Display the message in '#welcome'.\n            document.querySelector(\"#welcome\").\n                textContent = event.data;\n        });\n    </script>\n</body>\n</html>\n```", "```py\n# app/simple_app/consumers.py\n```", "```py\nfrom channels.generic.websocket import WebsocketConsumer\n```", "```py\nfrom datetime import datetime # New line\n```", "```py\nimport time # New line\n```", "```py\nimport threading # New line\n```", "```py\nclass EchoConsumer(WebsocketConsumer):\n```", "```py\n    def connect(self):\n```", "```py\n        \"\"\"Event when client connects\"\"\"\n```", "```py\n        # Informs client of successful connection\n```", "```py\n        self.accept()\n```", "```py\n        # Send message to client\n```", "```py\n        self.send(text_data=\"You are connected by \n```", "```py\n            WebSockets!\")\n```", "```py\n        # Send message to client every second\n```", "```py\n        def send_time(self): # New line\n```", "```py\n            while True:\n```", "```py\n                # Send message to client\n```", "```py\n                self.send(text_data=str(datetime.now(). \n```", "```py\n                    Strftime(\"%H:%M:%S\")))\n```", "```py\n                # Sleep for 1 second\n```", "```py\n                time.sleep(1)\n```", "```py\n        threading.Thread(target=send_time, args=(self,)).\n```", "```py\n            start() # New line\n```", "```py\n    def disconnect(self, close_code):\n```", "```py\n        \"\"\"Event when client disconnects\"\"\"\n```", "```py\n        pass\n```", "```py\n    def receive(self, text_data):\n```", "```py\n        \"\"\"Event when data is received\"\"\"\n```", "```py\n        pass\n```", "```py\n    book = {\n        'title': 'Don Quixote',\n        author': 'Miguel de Cervantes'.\n    }\n    self.send_json(content=book)\n    ```", "```py\n    def receive_json(self, data):\n        \"\"\"Event when data is received\"\"\"\n        pass\n    ```", "```py\n    from channels.generic.websocket import JsonWebsocketConsumer\n    class BingoConsumer(JsonWebsocketConsumer):\n\n        def connect(self):\n            self.accept()\n\n        def disconnect(self, close_code):\n            \"\"\"Event when client disconnects\"\"\"\n            pass\n\n        def receive_json(self, data):\n            \"\"\"Event when data is received\"\"\"\n            Pass\n    ```", "```py\n    class BingoConsumer(JsonWebsocketConsumer):\n\n        def connect(self):\n            self.accept()\n            ## Send numbers to client\n            # Generates numbers 5 random numbers,  \n               approximately, between 1 and 10\n            random_numbers = list(set([randint(1, 10) for \n                _ in range(5)])))\n            message = {\n                ' action': 'New ticket',\n                ' ticket': random_numbers\n            }\n            self.send_json(content=message)\n\n        def disconnect(self, close_code):\n            \"\"\"Event when client disconnects\"\"\"\n            pass\n\n        def receive_json(self, data):\n            \"\"\"Event when data is received\"\"\"\n            pass\n    ```", "```py\n    # hello_world/asgi.py\n    import os \n    from django.core.asgi import get_asgi_application\n    from channels.auth import AuthMiddlewareStack\n    from channels.routing import ProtocolTypeRouter, URLRouter\n    from django.urls import re_path\n    from app.simple_app.consumers import EchoConsumer, BingoConsumer # Update\n\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', \n        'hello_world.settings')\n\n    application = ProtocolTypeRouter({\n        # Django's ASGI application to handle traditional \n        HTTP requests\n        \"http\": get_asgi_application(),\n        # WebSocket handler\n        \"websocket\": AuthMiddlewareStack(\n            URLRouter([\n                re_path(r\"^ws/echo/$\", EchoConsumer.\n                    as_asgi()),\n                re_path(r\"^ws/bingo/$\", BingoConsumer.\n                    as_asgi()), # New line\n            ])\n        ),\n    })\n    ```", "```py\n    {# app/simple_app/templates/bingo.html #}\n    <! doctype html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\"\n              content=\"width=device-width, user\n                scalable=no, initial-scale=1.0, maximum-\n                  scale=1.0, minimum-scale=1.0\">\n        <title>Bingo</title>\n    </head>\n    <body>\n        <h1>Bingo</h1>\n        <h2>Ball: <span id=\"ball\"></span></h2>.\n        <h2 id=\"ticket\"></h2>\n\n        <script>\n            // Connect to WebSockets server\n            (BingoConsumer)\n            const myWebSocket = new WebSocket(\"ws://{{ \n                request.get_host }}/ws/bingo/\");\n            let ticket = [];\n\n            // Event when a new message is received by \n               WebSockets\n            myWebSocket.addEventListener(\"message\", \n                (event) => {\n                const myData = JSON.parse(event.data);\n                switch (myData.action) {\n                    case \"New ticket\":\n                        // Save the new ticket\n                        ticket = myData.ticket;\n                        // Render ticket\n                        document.getElementById(\"ticket\"). \n                             textContent = \"Ticket: \" + \n                                 ticket.join(\", \");\n                        break;\n                    } }\n            });\n        </script>\n    </body>\n    </html>\n    ```", "```py\n    from django.shortcuts import render\n\n    def index(request):\n        return render(request, 'index.html', {})\n\n    def bingo(request): # New function\n        return render(request, 'bingo.html', {})\n    ```", "```py\n    from django.contrib import admin\n    from django.urls import path\n    from app.simple_app import views\n\n    urlpatterns = [\n        path('', views.index, name='index'),\n        path('bingo/', views.bingo, name='bingo'), # New line\n        path('admin/', admin.site.urls),\n    ]\n    ```", "```py\n{\n\" action\": \" New ticket \"\n\" ticket\": [1, 2, 3...] // Random numbers\n}\n```", "```py\nmyWebSocket.addEventListener(\"message\", (event) => {\nconst myData = JSON.parse(event.data);\nswitch (myData.action) {\ncase \"New ticket\":\n// Save the new ticket\nticket = myData.ticket;\n// Render ticket\ndocument.getElementById(\"ticket\"). textContent = \n    \"Ticket: \" + ticket.join(\", \");\n                    break;\n} \n}\n});\n```", "```py\n    # app/simple_app/consumers.py\n    from channels.generic.websocket import WebsocketConsumer\n    from datetime import datetime\n    import time\n    import threading\n    from random import randint\n    from channels.generic.websocket import JsonWebsocketConsumer\n\n    class EchoConsumer(WebsocketConsumer):\n     # Echo Code\n    class BingoConsumer(JsonWebsocketConsumer):\n\n        def connect(self):\n            self.accept()\n            ## Send numbers to client\n            # Generates numbers 5 random numbers, approximately, between 1 and 10\n            random_numbers = list(set([randint(1, 10) for \n                _ in range(5)]))\n            message = {\n                ' action': 'New ticket',\n                ' ticket': random_numbers\n            }\n            self.send_json(content=message)\n\n            ## Send balls\n            def send_ball(self):\n                while True:\n                    # Send message to client\n                    random_ball = randint(1, 10)\n                    message = {\n                        ' action': 'New ball',\n                        ' ball': random_ball\n                    }\n                    self.send_json(content=message)\n                    # Sleep for 1 second\n                    time.sleep(1)\n\n            threading.Thread(target=send_ball, \n                args=(self,)). start()\n\n        def disconnect(self, close_code):\n            \"\"\"Event when client disconnects\"\"\"\n            pass\n\n        def receive_json(self, data):\n            \"\"\"Event when data is received\"\"\"\n            Pass\n    ```", "```py\n    {# app/simple_app/templates/bingo.html #}\n    <! doctype html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\"\n              content=\"width=device-width, user-\n                scalable=no, initial-scale=1.0, maximum-\n                  scale=1.0, minimum-scale=1.0\">\n        <title>Bingo</title>\n    </head>\n    < body>\n        <h1>Bingo</h1>\n        <h2>Ball: <span id=\"ball\"></span></h2>.\n        <h2 id=\"ticket\"></h2>\n\n        <script>\n            // Connect to WebSockets server (BingoConsumer)\n            const myWebSocket = new WebSocket(\"ws://{{ \n                request.get_host }}/ws/bingo/\");\n            let ticket = [];\n\n            // Event when a new message is received by \n            WebSockets\n            myWebSocket.addEventListener(\"message\", \n               (event) => {\n                const myData = JSON.parse(event.data);\n                switch (myData.action) {\n                    case \"New ticket\":\n                        // Save the new ticket\n                        ticket = myData.ticket;\n                        // Render ticket\n                        document.getElementById(\"ticket\"). \n                            textContent = \"Ticket: \" + \n                                ticket.join(\", \");\n                        break;\n                    case \"New ball\":\n                        // Get the ball number\n                        ball = myData.ball;\n                        // Check if ball is in the ticket \n                        and remove it\n                        ticket = ticket.map(item => item \n                            === ball ? \"X\" : item);\n                        // Render ticket\n                        document.getElementById(\"ticket\"). \n                            textContent = \"Ticket: \" + \n                                ticket.join(\", \");\n                        // Render ball\n                        document.getElementById(\"ball\"). \n                            textContent = ball;\n                        // Check if we have a winner\n                        if (ticket.find(number => number \n                            !== \"X\") === undefined) {\n                            // We have a winner\n                            document.getElementById\n                                (\"ticket\"). textContent = \n                                    \"Winner!\";\n                        }\n                        break;\n                }\n            });\n\n        </script>\n    </body>\n    </html>\n    ```", "```py\n    from django.template.loader import render_to_string\n    class BMIConsumer(JsonWebsocketConsumer):\n\n        def connect(self):\n            self.accept()\n\n        def disconnect(self, close_code):\n            \"\"\"Event when client disconnects\"\"\"\n            pass\n\n        def receive_json(self, data):\n            \"\"\"Event when data is received\"\"\"\n            height = data['height'] / 100\n            weight = data['weight']\n            bmi = round(weight / (height ** 2), 1)\n            self.send_json(\n                content={\n                        \"action\": \"BMI result\",\n                        \"html\": render_to_string(\n                            \"components/_bmi_result.html\",\n                            {\"height\": height, \"weight\": \n                                weight, \"bmi\": bmi}\n                        )\n                }\n            )\n    ```", "```py\n    # hello_world/asgi.py\n    Import\n    from django.core.asgi import get_asgi_application\n    from channels.auth import AuthMiddlewareStack\n    from channels.routing import ProtocolTypeRouter, URLRouter\n    from django.urls import re_path\n    from app.simple_app.consumers import EchoConsumer, BingoConsumer, BMIConsumer # Update\n\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hello_world.settings')\n\n    application = ProtocolTypeRouter({\n        # Django's ASGI application to handle traditional \n        HTTP requests\n        \"http\": get_asgi_application(),\n        # WebSocket handler\n        \"websocket\": AuthMiddlewareStack(\n            URLRouter([\n                re_path(r\"^ws/echo/$\", EchoConsumer.\n                    as_asgi()),\n                re_path(r\"^ws/bingo/$\", BingoConsumer.\n                    as_asgi()),\n                re_path(r\"^ws/bmi/$\", BMIConsumer.\n                    as_asgi()), # New line\n            ])\n        ),\n    })\n    ```", "```py\n    {# app/simple_app/templates/bmi.html #}\n    <! doctype html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\"\n              content=\"width=device-width, user-\n                scalable=no, initial-scale=1.0, maximum-\n                  scale=1.0, minimum-scale=1.0\">\n        <title>BMI Calculator</title>.\n    </head>\n    <body>\n        <h1>BMI Calculator</h1>\n        <label for=\"height\"> Height (cm):\n            <input type=\"text\" name=\"height\" id=\"height\">\n        </label>\n        <label for=\"weight\"> Weight (kg)\n            <input type=\"text\" name=\"weight\" id=\"weight\">\n        </label>\n        <input type=\"button\" id=\"calculate\" value=\n            \"Calculate\">\n        <div id=\"result\"></div>\n\n        <script>\n            // Connect to WebSockets server \n            (BingoConsumer)\n            const myWebSocket = new WebSocket(\"ws://{{ \n                request.get_host }}/ws/bmi/\");\n\n            // Event when a new message is received by \n            WebSockets\n            myWebSocket.addEventListener(\"message\", \n               (event) => {\n                const myData = JSON.parse(event.data);\n                switch (myData.action) {\n                    case \"BMI result\":\n                        document.getElementById(\"result\"). \n                            innerHTML = myData.html;\n                        break;\n                }\n            });\n\n            document.querySelector('#calculate'). \n                addEventListener('click', () => {\n                const height = parseFloat(document.\n                    querySelector('#height'). value);\n                const weight = parseFloat(document.\n                    querySelector('#weight'). value);\n                myWebSocket.send(JSON.stringify({\n                    height: height,\n                    weight: weight\n                }));\n            });\n\n        </script>\n    </body>\n    </html>\n    ```", "```py\n    from django.shortcuts import render\n\n    def index(request):\n        return render(request, 'index.html', {})\n\n    def bingo(request):\n        return render(request, 'bingo.html', {})\n\n    def bmi(request): # New function\n        return render(request, 'bmi. html', {})\n    ```", "```py\n    from django.contrib import admin\n    from django.urls import path\n    from app.simple_app import views\n\n    urlpatterns = [\n        path('', views.index, name='index'),\n        path('bingo/', views.bingo, name='bingo'),\n        path('bmi/', views.bmi, name='bmi'), # New line\n        path('admin/', admin.site.urls),\n    ]\n    ```", "```py\n    <p><strong> Weight</strong> {{ weight }} Kg</p>\n    <p><strong>Height</strong> {{ height }} m</p>\n    <p><p><strong>BMI</strong> {{ bmi }}< /p>\n    {% if bmi < 18.5 %}\n    <p>Underweight</p>\n    {% elif bmi < 25 %}\n    <p>Normal</p>\n    {% elif bmi < 30 %}\n    <p>Overweight</p>\n    {% else %}\n    <p>Obese</p>\n    {% endif %}\n    ```"]