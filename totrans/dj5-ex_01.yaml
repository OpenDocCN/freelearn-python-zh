- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Blog Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will learn how to build professional-grade web projects using
    Django. This initial chapter will guide you through the essential building blocks
    of a Django application, from installation to deployment. If you haven’t set up
    Django on your machine yet, the *Installing Django* section will walk you through
    the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting our first Django project, let’s go over what you are about
    to learn. This chapter will give you a general overview of the framework. It will
    guide you through the different major components to create a fully functional
    web application: models, templates, views, and URLs. You will gain an understanding
    of how Django works and how the different framework components interact.'
  prefs: []
  type: TYPE_NORMAL
- en: You will also learn the difference between Django projects and applications,
    and you will learn about the most important Django settings. You will build a
    simple blog application that allows users to navigate through all published posts
    and read individual posts. You will also create a simple administration interface
    to manage and publish posts. In the next two chapters, you will extend the blog
    application with more advanced functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Consider this chapter as your roadmap for constructing a fully-fledged Django
    application. Don’t be concerned if some components or concepts appear unclear
    at first. The different framework components will be explored in detail throughout
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Python virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Django
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and configuring a Django project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Django application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing data models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and applying model migrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an administration site for your models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with QuerySets and model managers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building views, templates, and URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Django request/response cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will start by installing Python on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01).
  prefs: []
  type: TYPE_NORMAL
- en: All Python packages used in this chapter are included in the `requirements.txt`
    file in the source code for the chapter. You can follow the instructions to install
    each Python package in the following sections, or you can install all the requirements
    at once with the command `python -m pip install -r requirements.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django 5.0 supports Python 3.10, 3.11, and 3.12\. In the examples in this book,
    we will use Python 3.12.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using Linux or macOS, you probably have Python installed. If you’re
    using Windows, you can download a Python installer from the [python.org](http://python.org)
    website. You can download Python for your OS from [https://www.python.org/downloads/](https://www.python.org/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: Open the command-line shell prompt of your machine. If you are using macOS,
    press *Command + spacebar* to open Spotlight and write **Terminal** to open `Terminal.app`.
    If you are using Windows, open the **Start** menu and type `powers` into the search
    box. Then, click on the **Windows PowerShell** application to open it. Alternatively,
    you can use the more basic command prompt by typing `cmd` into the search box
    and clicking on the **Command Prompt** application to open it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that Python 3 is installed on your machine by typing the following command
    in the shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see the following, then Python 3 is installed on your computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you get an error, try the `python` command instead of `python3`. If you use
    Windows, it’s recommended that you replace `python` with the `py` command.
  prefs: []
  type: TYPE_NORMAL
- en: If your installed Python version is lower than 3.12, or if Python is not installed
    on your computer, download Python 3.12 from [https://www.python.org/downloads/](https://www.python.org/downloads/)
    and follow the instructions to install it. On the download site, you can find
    Python installers for Windows, macOS, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, when Python is referenced in the shell prompt, we will
    use the `python` command, though some systems may require using `python3`. If
    you are using Linux or macOS and your system’s Python is Python 2, you will need
    to use `python3` to use the Python 3 version you installed. Note that Python 2
    reached end-of-life in January 2020 and shouldn’t be used anymore.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows, `python` is the Python executable of your default Python installation,
    whereas `py` is the Python launcher. The Python launcher for Windows was introduced
    in Python 3.3\. It detects what Python versions are installed on your machine
    and it automatically delegates to the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: If you use Windows, you should use the `py` command. You can read more about
    the Windows Python launcher at [https://docs.python.org/3/using/windows.html#launcher](https://docs.python.org/3/using/windows.html#launcher).
  prefs: []
  type: TYPE_NORMAL
- en: Next, you are going to create a Python environment for your project and install
    the necessary Python libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Python virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you write Python applications, you will usually use packages and modules
    that are not included in the standard Python library. You may have Python applications
    that require a different version of the same module. However, only a specific
    version of a module can be installed system-wide. If you upgrade a module version
    for an application, you might end up breaking other applications that require
    an older version of that module.
  prefs: []
  type: TYPE_NORMAL
- en: To address this issue, you can use Python virtual environments. With virtual
    environments, you can install Python modules in an isolated location rather than
    installing them system-wide. Each virtual environment has its own Python binary
    and can have its own independent set of installed Python packages in its site-packages
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Since version 3.3, Python comes with the `venv` library, which provides support
    for creating lightweight virtual environments. By using the Python `venv` module
    to create isolated Python environments, you can use different package versions
    for different projects. Another advantage of using `venv` is that you won’t need
    any administrative privileges to install Python packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Linux or macOS, create an isolated environment with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Remember to use `python3` instead of `python` if your system comes with Python
    2 and you installed Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Windows, use the following command instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will use the Python launcher in Windows.
  prefs: []
  type: TYPE_NORMAL
- en: The previous command will create a Python environment in a new directory named
    `my_env`. Any Python libraries you install while your virtual environment is active
    will go into the `my_env/lib/python3.12/site-packages` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Linux or macOS, run the following command to activate your
    virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Windows, use the following command instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The shell prompt will include the name of the active virtual environment enclosed
    in parentheses, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can deactivate your environment at any time with the `deactivate` command.
    You can find more information about `venv` at [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have already installed Django 5.0, you can skip this section and jump
    directly to the *Creating your first project* section.
  prefs: []
  type: TYPE_NORMAL
- en: Django comes as a Python module and thus can be installed in any Python environment.
    If you haven’t installed Django yet, the following is a quick guide to installing
    it on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Django with pip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `pip` package management system is the preferred method of installing Django.
    Python 3.12 comes with `pip` preinstalled, but you can find `pip` installation
    instructions at [https://pip.pypa.io/en/stable/installation/](https://pip.pypa.io/en/stable/installation/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command at the shell prompt to install Django with `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will install Django’s latest 5.0 version in the Python `site-packages`
    directory of your virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will check whether Django has been successfully installed. Run the following
    command in a shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you get an output that starts with `5.0`, Django has been successfully installed
    on your machine. If you get the message `No module named Django`, Django is not
    installed on your machine. If you have issues installing Django, you can review
    the different installation options described at [https://docs.djangoproject.com/en/5.0/intro/install/](https://docs.djangoproject.com/en/5.0/intro/install/).
  prefs: []
  type: TYPE_NORMAL
- en: All Python packages used in this chapter are included in the `requirements.txt`
    file in the source code for the chapter, mentioned above. You can follow the instructions
    to install each Python package in the following sections, or you can install all
    requirements at once with the command `pip install -r requirements.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Django overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django is a framework consisting of a set of components that solve common web
    development problems. Django components are loosely coupled, which means they
    can be managed independently. This helps separate the responsibilities of the
    different layers of the framework; the database layer knows nothing about how
    the data is displayed, the template system knows nothing about web requests, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Django offers maximum code reusability by following the **DRY** (**don’t repeat
    yourself**) principle. Django also fosters rapid development and allows you to
    use less code by taking advantage of Python’s dynamic capabilities, such as introspection.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about Django’s design philosophies at [https://docs.djangoproject.com/en/5.0/misc/design-philosophies/](https://docs.djangoproject.com/en/5.0/misc/design-philosophies/).
  prefs: []
  type: TYPE_NORMAL
- en: Main framework components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django follows the **MTV** (**Model-Template-View**) pattern. It is a slightly
    similar pattern to the well-known **MVC** (**Model-View-Controller**) pattern,
    where the template acts as the view and the framework itself acts as the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The responsibilities in the Django MTV pattern are divided as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: This defines the logical data structure and is the data handler
    between the database and the view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Template**: This is the presentation layer. Django uses a plain-text template
    system that keeps everything that the browser renders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: This communicates with the database via the model and transfers the
    data to the template for viewing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The framework itself acts as the controller. It sends a request to the appropriate
    view, according to the Django **URL** configuration.
  prefs: []
  type: TYPE_NORMAL
- en: When developing any Django project, you will always work with models, views,
    templates, and URLs. In this chapter, you will learn how they fit together.
  prefs: []
  type: TYPE_NORMAL
- en: The Django architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Figure 1.1* shows how Django processes requests and how the request/response
    cycle is managed with the different main Django components – URLs, views, models,
    and templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B21088_01_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: The Django architecture'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how Django handles HTTP requests and generates responses:'
  prefs: []
  type: TYPE_NORMAL
- en: A web browser requests a page by its URL and the web server passes the HTTP
    request to Django.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Django runs through its configured URL patterns and stops at the first one that
    matches the requested URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Django executes the view that corresponds to the matched URL pattern.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The view potentially uses data models to retrieve information from the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data models provide data definitions and behaviors. They are used to query the
    database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The view renders a template (usually HTML) to display the data and returns it
    with an HTTP response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will get back to the Django request/response cycle at the end of this chapter
    in the *The request/response cycle* section.
  prefs: []
  type: TYPE_NORMAL
- en: Django also includes hooks in the request/response process, which are called
    middleware. Middleware has been intentionally left out of this diagram for the
    sake of simplicity. You will use middleware in different examples of this book,
    and you will learn how to create custom middleware in *Chapter 17*, *Going Live*.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered the foundational elements of Django and how it processes requests.
    Let’s explore the new features introduced in Django 5.
  prefs: []
  type: TYPE_NORMAL
- en: New features in Django 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Django 5 introduces several key features that you will use in the examples
    of this book. This version also deprecates certain features and eliminates previously
    deprecated functionalities. Django 5.0 presents the following new major features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Facet filters in the administration site**: Facet filters can be added now
    to the administration site. When enabled, facet counts are displayed for applied
    filters in the admin object list. This feature is presented in the *Added facet
    counts to filters* section of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplified templates for form field rendering**: Form field rendering has
    been simplified with the capability to define field groups with associated templates.
    This aims to make the process of rendering related elements of a Django form field,
    such as labels, widgets, help text, and errors, more streamlined. An example of
    using field groups can be found in the *Creating templates for the comment form*
    section of *Chapter 2, Enhancing Your Blog and Adding Social Features*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database-computed default values**: Django adds database-computed default
    values. An example of this feature is presented in the *Adding datetime fields*
    section of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database-generated model fields**: This is a new type of field that enables
    you to create database-generated columns. An expression is used to automatically
    set the field value each time the model is changed. The field value is set using
    the `GENERATED` `ALWAYS` SQL syntax.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More options for declaring model field choices**: Fields that support choices
    no longer require accessing the `.choices` attribute to access enumeration types.
    A mapping or callable instead of an iterable can be used directly to expand enumeration
    types. Choices with enumeration types in this book have been updated to reflect
    these changes. An instance of this can be found in the *Adding a status field*
    section of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django 5 also comes with some improvements in asynchronous support**. Asynchronous
    Server Gateway Interface** (**ASGI**) support was first introduced in Django 3
    and improved in Django 4.1 with asynchronous handlers for class-based views and
    an asynchronous ORM interface. Django 5 adds asynchronous functions to the authentication
    framework, provides support for asynchronous signal dispatching, and adds asynchronous
    support to multiple built-in decorators.
  prefs: []
  type: TYPE_NORMAL
- en: Django 5.0 drops support for Python 3.8 and 3.9.
  prefs: []
  type: TYPE_NORMAL
- en: You can read the complete list of changes in the Django 5.0 release notes at
    [https://docs.djangoproject.com/en/5.0/releases/5.0/](https://docs.djangoproject.com/en/5.0/releases/5.0/).
  prefs: []
  type: TYPE_NORMAL
- en: As a time-based release, there are no drastic changes in Django 5, making it
    straightforward to upgrade Django 4 applications to the 5.0 release.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to quickly upgrade an existing Django project to the 5.0 release,
    you can use the `django-upgrade` tool. This package rewrites the files of your
    project by applying fixers up to a target version. You can find instructions to
    use `django-upgrade` at [https://github.com/adamchainz/django-upgrade](https://github.com/adamchainz/django-upgrade).
  prefs: []
  type: TYPE_NORMAL
- en: The `django-upgrade` tool is inspired by the `pyupgrade` package. You can use
    `pyupgrade` to automatically upgrade syntax for newer versions of Python. You
    can find more information about `pyupgrade` at [https://github.com/asottile/pyupgrade](https://github.com/asottile/pyupgrade).
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your first Django project will consist of a blog application. This will offer
    you a solid introduction to Django’s capabilities and functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Blogging is the perfect starting point to build a complete Django project, given
    its wide range of required features, from basic content management to advanced
    functionalities like commenting, post sharing, search, and post recommendations.
    The blog project will be covered in the first three chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will start by creating the Django project and a Django application
    for the blog. We will then create our data models and synchronize them to the
    database. Finally, we will create an administration site for the blog, and we
    will build the views, templates, and URLs.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 1.2* shows a representation of the blog application pages that you
    will create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2: Diagram of functionalities built in Chapter 1'
  prefs: []
  type: TYPE_NORMAL
- en: The blog application will consist of a list of posts including the post title,
    publishing date, author, a post excerpt, and a link to read the post. The post
    list page will be implemented with the `post_list` view. You will learn how to
    create views in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: When readers click on the link of a post in the post list page, they will be
    redirected to a single (detail) view of a post. The detail view will display the
    title, publishing date, author, and the complete post body.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by creating the Django project for our blog. Django provides a command
    that allows you to create an initial project file structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in your shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will create a Django project with the name `mysite`.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid naming projects after built-in Python or Django modules in order to prevent
    conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the generated project structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The outer `mysite/` directory is the container for our project. It contains
    the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`manage.py`: This is a command-line utility used to interact with your project.
    You won’t usually need to edit this file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysite/`: This is the Python package for your project, which consists of the
    following files:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__init__.py`: An empty file that tells Python to treat the `mysite` directory
    as a Python module.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`asgi.py`: This is the configuration to run your project as an ASGI application
    with ASGI-compatible web servers. ASGI is the emerging Python standard for asynchronous
    web servers and applications.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settings.py`: This indicates settings and configuration for your project and
    contains initial default settings.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`urls.py`: This is the place where your URL patterns live. Each URL defined
    here is mapped to a view.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wsgi.py`: This is the configuration to run your project as a **Web Server
    Gateway Interface** (**WSGI**) application with WSGI-compatible web servers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying initial database migrations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django applications require a database to store data. The `settings.py` file
    contains the database configuration for your project in the `DATABASES` setting.
    The default configuration is a SQLite3 database. SQLite comes bundled with Python
    3 and can be used in any of your Python applications. SQLite is a lightweight
    database that you can use with Django for development. If you plan to deploy your
    application in a production environment, you should use a full-featured database,
    such as PostgreSQL, MySQL, or Oracle. You can find more information about how
    to get your database running with Django at [https://docs.djangoproject.com/en/5.0/topics/install/#database-installation](https://docs.djangoproject.com/en/5.0/topics/install/#database-installation).
  prefs: []
  type: TYPE_NORMAL
- en: Your `settings.py` file also includes a list named `INSTALLED_APPS` that contains
    common Django applications that are added to your project by default. We will
    go through these applications later in the *Project settings* section.
  prefs: []
  type: TYPE_NORMAL
- en: Django applications contain data models that are mapped to database tables.
    You will create your own models in the *Creating the blog data models* section.
    To complete the project setup, you need to create the tables associated with the
    models of the default Django applications included in the `INSTALLED_APPS` setting.
    Django comes with a system that helps you manage database migrations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell prompt and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see an output that ends with the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding lines are the database migrations that are applied by Django.
    By applying the initial migrations, the tables for the applications listed in
    the `INSTALLED_APPS` setting are created in the database.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn more about the `migrate` management command in the *Creating
    and applying migrations* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Running the development server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django comes with a lightweight web server to run your code quickly, without
    needing to spend time configuring a production server. When you run the Django
    development server, it keeps checking for changes in your code. It reloads automatically,
    freeing you from manually reloading it after code changes. However, it might not
    notice some actions, such as adding new files to your project, so you will have
    to restart the server manually in these cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the development server by typing the following command in the shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `http://127.0.0.1:8000/` in your browser. You should see a page stating
    that the project is successfully running, as shown in *Figure 1.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: The default page of the Django development server'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot indicates that Django is running. If you take a look
    at your console, you will see the `GET` request performed by your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Each HTTP request is logged in the console by the development server. Any error
    that occurs while running the development server will also appear in the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run the Django development server on a custom host and port or tell
    Django to load a specific settings file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: When you have to deal with multiple environments that require different configurations,
    you can create a different settings file for each environment.
  prefs: []
  type: TYPE_NORMAL
- en: This server is only intended for development and is not suitable for production
    use. To deploy Django in a production environment, you should run it as a WSGI
    application using a web server, such as Apache, Gunicorn, or uWSGI, or as an ASGI
    application using a server such as Daphne or Uvicorn. You can find more information
    on how to deploy Django with different web servers at [https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/](https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/).
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 17*, *Going Live*, explains how to set up a production environment
    for your Django projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Project settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s open the `settings.py` file and take a look at the configuration of the
    project. There are several settings that Django includes in this file, but these
    are only part of all the available Django settings. You can see all the settings
    and their default values at [https://docs.djangoproject.com/en/5.0/ref/settings/](https://docs.djangoproject.com/en/5.0/ref/settings/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s review some of the project settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DEBUG` is a Boolean that turns the debug mode of the project on and off. If
    it is set to `True`, Django will display detailed error pages when an uncaught
    exception is thrown by your application. When you move to a production environment,
    remember that you have to set it to `False`. Never deploy a site into production
    with `DEBUG` turned on because you will expose sensitive project-related data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALLOWED_HOSTS` is not applied while debug mode is on or when the tests are
    run. Once you move your site to production and set `DEBUG` to `False`, you will
    have to add your domain/host to this setting to allow it to serve your Django
    site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INSTALLED_APPS` is a setting you will have to edit for all projects. This
    setting tells Django which applications are active for this site. By default,
    Django includes the following applications:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`django.contrib.admin`: An administration site.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`django.contrib.auth`: An authentication framework.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`django.contrib.contenttypes`: A framework for handling content types.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`django.contrib.sessions`: A session framework.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`django.contrib.messages`: A messaging framework.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`django.contrib.staticfiles`: A framework for managing static files, such as
    CSS, JavaScript files, and images.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MIDDLEWARE` is a list that contains middleware to be executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ROOT_URLCONF` indicates the Python module where the root URL patterns of your
    application are defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DATABASES` is a dictionary that contains the settings for all the databases
    to be used in the project. There must always be a default database. The default
    configuration uses a SQLite3 database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LANGUAGE_CODE` defines the default language code for this Django site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`USE_TZ` tells Django to activate/deactivate timezone support. Django comes
    with support for timezone-aware datetimes. This setting is set to `True` when
    you create a new project using the `startproject` management command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t worry if you don’t understand much about what you’re seeing here. You
    will learn more about the different Django settings in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Projects and applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this book, you will encounter the terms **project** and **application**
    over and over. In Django, a project is considered a Django installation with some
    settings. An application is a group of models, views, templates, and URLs. Applications
    interact with the framework to provide specific functionalities and may be reused
    in various projects. You can think of a project as your website, which contains
    several applications, such as a blog, wiki, or forum, that can also be used by
    other Django projects.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 1.4* shows the structure of a Django project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.4: The Django project/application structure'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s create our first Django application. We will build a blog application
    from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in the shell prompt from the project’s root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create the basic structure of the application, which will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'These files are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`__init__.py`: This is an empty file that tells Python to treat the `blog`
    directory as a Python module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin.py`: This is where you register models to include them in the Django
    administration site—using this site is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`apps.py`: This includes the main configuration of the `blog` application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`migrations`: This directory will contain database migrations of the application.
    Migrations allow Django to track your model changes and synchronize the database
    accordingly. This directory contains an empty `__init__.py` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`models.py`: This includes the data models of your application; all Django
    applications need to have a `models.py` file but it can be left empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tests.py`: This is where you can add tests for your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views.py`: The logic of your application goes here; each view receives an
    HTTP request, processes it, and returns a response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the application structure ready, we can start building the data models
    for the blog.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the blog data models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember that a Python object is a collection of data and methods. Classes are
    the blueprint for bundling data and functionality together. Creating a new class
    creates a new type of object, allowing you to create instances of that type.
  prefs: []
  type: TYPE_NORMAL
- en: A Django model is a source of information about the behaviors of your data.
    It consists of a Python class that subclasses `django.db.models.Model`. Each model
    maps to a single database table, where each attribute of the class represents
    a database field.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a model, Django will provide you with a practical API to query
    objects in the database easily.
  prefs: []
  type: TYPE_NORMAL
- en: We will define the database models for our blog application. Then, we will generate
    the database migrations for the models to create the corresponding database tables.
    When applying the migrations, Django will create a table for each model defined
    in the `models.py` file of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Post model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will define a `Post` model that will allow us to store blog posts
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to the `models.py` file of the `blog` application.
    The new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the data model for blog posts. Posts will have a title, a short label
    called `slug`, and a body. Let’s take a look at the fields of this model:'
  prefs: []
  type: TYPE_NORMAL
- en: '`title`: This is the field for the post title. This is a `CharField` field
    that translates into a `VARCHAR` column in the SQL database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slug`: This is a `SlugField` field that translates into a `VARCHAR` column
    in the SQL database. A slug is a short label that contains only letters, numbers,
    underscores, or hyphens. A post with the title *Django Reinhardt: A legend of
    Jazz* could have a slug like *django-reinhardt-legend-jazz*. We will use the `slug`
    field to build beautiful, SEO-friendly URLs for blog posts in *Chapter 2, Enhancing
    Your Blog with Advanced Features*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`body`: This is the field for storing the body of the post. This is a `TextField`
    field that translates into a `TEXT` column in the SQL database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have also added a `__str__()` method to the model class. This is the default
    Python method to return a string with the human-readable representation of the
    object. Django will use this method to display the name of the object in many
    places, such as the Django administration site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at how the model and its fields will be translated into a
    database table and columns. The following diagram shows the `Post` model and the
    corresponding database table that Django will create when we synchronize the model
    to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5: Initial Post model and database table correspondence'
  prefs: []
  type: TYPE_NORMAL
- en: 'Django will create a database column for each of the model fields: `title`,
    `slug`, and `body`. You can see how each field type corresponds to a database
    data type.'
  prefs: []
  type: TYPE_NORMAL
- en: By default, Django adds an auto-incrementing primary key field to each model.
    The field type for this field is specified in each application configuration or
    globally in the `DEFAULT_AUTO_FIELD` setting. When creating an application with
    the `startapp` command, the default value for `DEFAULT_AUTO_FIELD` is `BigAutoField`.
    This is a 64-bit integer that automatically increments according to available
    IDs. If you don’t specify a primary key for your model, Django adds this field
    automatically. You can also define one of the model fields to be the primary key
    by setting `primary_key=True` on it.
  prefs: []
  type: TYPE_NORMAL
- en: We will expand the `Post` model with additional fields and behaviors. Once complete,
    we will synchronize it to the database by creating a database migration and applying
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding datetime fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue by adding different datetime fields to the `Post` model. Each
    post will be published at a specific date and time. Therefore, we need a field
    to store the publication date and time. We also want to store the date and time
    when the `Post` object was created and when it was last modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of the `blog` application to make it look like this;
    the new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We have added a `publish` field to the `Post` model. This is a `DateTimeField`
    field that translates into a `DATETIME` column in the SQL database. We will use
    it to store the date and time when the post was published. We use Django’s `timezone.now`
    method as the default value for the field. Note that we imported the `timezone`
    module to use this method. `timezone.now` returns the current datetime in a timezone-aware
    format. You can think of it as a timezone-aware version of the standard Python
    `datetime.now` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another method to define default values for model fields is using database-computed
    default values. Introduced in Django 5, this feature allows you to use underlaying
    database functions to generate default values. For instance, the following code
    uses the database server’s current date and time as the default for the `publish`
    field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: To use database-generated default values, we use the `db_default` attribute
    instead of `default`. In this example, we use the `Now` database function. It
    serves a similar purpose to `default=timezone.now`, but instead of a Python-generated
    datetime, it uses the `NOW()` database function to produce the initial value.
    You can read more about the `db_default` attribute at [https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default](https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default).
    You can find all available database functions at [https://docs.djangoproject.com/en/5.0/ref/models/database-functions/](https://docs.djangoproject.com/en/5.0/ref/models/database-functions/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s continue with the previous version of the field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `models.py` file of the `blog` application and add the following lines
    highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added the following fields to the `Post` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '`created`: This is a `DateTimeField` field. We will use it to store the date
    and time when the post was created. By using `auto_now_add`, the date will be
    saved automatically when creating an object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updated`: This is a `DateTimeField` field. We will use it to store the last
    date and time when the post was updated. By using `auto_now`, the date will be
    updated automatically when saving an object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing the `auto_now_add` and `auto_now` datetime fields in your Django models
    is highly beneficial for tracking the creation and last modification times of
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a default sort order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blog posts are typically presented in reverse chronological order, showing the
    newest posts first. For our model, we will define a default ordering. This ordering
    takes effect when retrieving objects from the database unless a specific order
    is indicated in the query.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of the `blog` application as shown below. The new
    lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We have added a `Meta` class inside the model. This class defines metadata for
    the model. We use the `ordering` attribute to tell Django that it should sort
    results by the `publish` field. This ordering will apply by default for database
    queries when no specific order is provided in the query. We indicate descending
    order by using a hyphen before the field name, `-publish`. Posts will be returned
    in reverse chronological order by default.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a database index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s define a database index for the `publish` field. This will improve performance
    for query filtering or ordering results by this field. We expect many queries
    to take advantage of this index since we are using the `publish` field to order
    results by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of the `blog` application and make it look like this;
    the new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We have added the `indexes` option to the model’s `Meta` class. This option
    allows you to define database indexes for your model, which could comprise one
    or multiple fields, in ascending or descending order, or functional expressions
    and database functions. We have added an index for the `publish` field. We use
    a hyphen before the field name to define the index specifically in descending
    order. The creation of this index will be included in the database migrations
    that we will generate later for our blog models.
  prefs: []
  type: TYPE_NORMAL
- en: Index ordering is not supported on MySQL. If you use MySQL for the database,
    a descending index will be created as a normal index.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about how to define indexes for models at [https://docs.djangoproject.com/en/5.0/ref/models/indexes/](https://docs.djangoproject.com/en/5.0/ref/models/indexes/).
  prefs: []
  type: TYPE_NORMAL
- en: Activating the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to activate the `blog` application in the project for Django to keep
    track of the application and be able to create database tables for its models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings.py` file and add `blog.apps.BlogConfig` to the `INSTALLED_APPS`
    setting. It should look like this; the new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `BlogConfig` class is the application configuration. Now Django knows that
    the application is active for this project and will be able to load the application
    models.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a status field
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common functionality for blogs is to save posts as a draft until ready for
    publication. We will add a `status` field to our model that will allow us to manage
    the status of blog posts. We will be using the *Draft* and *Published* statuses
    for posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of the `blog` application to make it look as follows.
    The new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We have defined the enumeration class `Status` by subclassing `models.TextChoices`.
    The available choices for the post status are `DRAFT` and `PUBLISHED`. Their respective
    values are `DF` and `PB`, and their labels or readable names are *Draft* and *Published*.
  prefs: []
  type: TYPE_NORMAL
- en: Django provides enumeration types that you can subclass to define choices simply.
    These are based on the `enum` object of Python’s standard library. You can read
    more about `enum` at [https://docs.python.org/3/library/enum.html](https://docs.python.org/3/library/enum.html).
  prefs: []
  type: TYPE_NORMAL
- en: Django enumeration types present some modifications over `enum`. You can learn
    about those differences at [https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types](https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types).
  prefs: []
  type: TYPE_NORMAL
- en: We can access `Post.Status.choices` to obtain the available choices, `Post.Status.names`
    to obtain the names of the choices, `Post.Status.labels` to obtain the human-readable
    names, and `Post.Status.values` to obtain the actual values of the choices.
  prefs: []
  type: TYPE_NORMAL
- en: We have also added a new `status` field to the model that is an instance of
    `CharField`. It includes a `choices` parameter to limit the value of the field
    to the choices in `Status`. We have also set a default value for the field using
    the `default` parameter. We use `DRAFT` as the default choice for this field.
  prefs: []
  type: TYPE_NORMAL
- en: It’s a good practice to define choices inside the model class and use the enumeration
    types. This will allow you to easily reference choice labels, values, or names
    from anywhere in your code. You can import the `Post` model and use `Post.Status.DRAFT`
    as a reference for the *Draft* status anywhere in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at how to interact with status choices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in the shell prompt to open the Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, type the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You will obtain the `enum` choices with value-label pairs, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the human-readable names of the `enum` members, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the values of the `enum` members, as follows. These are the values
    that can be stored in the database for the `status` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the names of the choices, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: You can access a specific lookup enumeration member with `Post.Status.PUBLISHED`
    and you can access its `.name` and `.value` properties as well.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a many-to-one relationship
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Posts are always written by an author. We will create a relationship between
    users and posts that will indicate which user wrote which posts. Django comes
    with an authentication framework that handles user accounts. The Django authentication
    framework comes in the `django.contrib.auth` package and contains a `User` model.
    To define the relationship between users and posts, we will use the `AUTH_USER_MODEL`
    setting, which points to `auth.User` by default. This setting allows you to specify
    a different user model for your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of the `blog` application to make it look as follows.
    The new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: We have imported the project’s settings and we have added an `author` field
    to the `Post` model. This field defines a many-to-one relationship with the default
    user model, meaning that each post is written by a user, and a user can write
    any number of posts. For this field, Django will create a foreign key in the database
    using the primary key of the related model.
  prefs: []
  type: TYPE_NORMAL
- en: The `on_delete` parameter specifies the behavior to adopt when the referenced
    object is deleted. This is not specific to Django; it is a SQL standard. Using
    `CASCADE`, you specify that when the referenced user is deleted, the database
    will also delete all related blog posts. You can take a look at all the possible
    options at [https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.ForeignKey.on_delete](https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.ForeignKey.on_delete).
  prefs: []
  type: TYPE_NORMAL
- en: We use `related_name` to specify the name of the reverse relationship, from
    `User` to `Post`. This will allow us to access related objects easily from a user
    object by using the `user.blog_posts` notation. We will learn more about this
    later.
  prefs: []
  type: TYPE_NORMAL
- en: Django comes with different types of fields that you can use to define your
    models. You can find all field types at [https://docs.djangoproject.com/en/5.0/ref/models/fields/](https://docs.djangoproject.com/en/5.0/ref/models/fields/).
  prefs: []
  type: TYPE_NORMAL
- en: The `Post` model is now complete, and we can now synchronize it to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and applying migrations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a data model for blog posts, we need to create the corresponding
    database table. Django comes with a migration system that tracks the changes made
    to models and enables them to propagate into the database.
  prefs: []
  type: TYPE_NORMAL
- en: The `migrate` command applies migrations for all applications listed in `INSTALLED_APPS`.
    It synchronizes the database with the current models and existing migrations.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will need to create an initial migration for our `Post` model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in the shell prompt from the root directory of your
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get an output similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Django just created the `0001_initial.py` file inside the `migrations` directory
    of the `blog` application. This migration contains the SQL statements to create
    the database table for the `Post` model and the definition of the database index
    for the `publish` field.
  prefs: []
  type: TYPE_NORMAL
- en: You can take a look at the file contents to see how the migration is defined.
    A migration specifies dependencies on other migrations and operations to perform
    in the database to synchronize it with model changes.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at the SQL code that Django will execute in the database to
    create the table for your model. The `sqlmigrate` command takes the migration
    names and returns their SQL without executing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command from the shell prompt to inspect the SQL output of
    your first migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The exact output depends on the database you are using. The preceding output
    is generated for SQLite. As you can see in the output, Django generates the table
    names by combining the application name and the lowercase name of the model (`blog_post`),
    but you can also specify a custom database name for your model in the `Meta` class
    of the model using the `db_table` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Django creates an auto-incremental `id` column that is used as the primary key
    for each model, but you can also override this by specifying `primary_key=True`
    on one of your model fields. The default `id` column consists of an integer that
    is incremented automatically. This column corresponds to the `id` field that is
    automatically added to your model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following three database indexes are created:'
  prefs: []
  type: TYPE_NORMAL
- en: An index in descending order on the `publish` column. This is the index we explicitly
    defined with the `indexes` option of the model’s `Meta` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An index on the `slug` column because `SlugField` fields imply an index by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An index on the `author_id` column because `ForeignKey` fields imply an index
    by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s compare the `Post` model with its corresponding database `blog_post`
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated with medium confidence](img/B21088_01_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.6: Complete Post model and database table correspondence'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 1.6* shows how the model fields correspond to database table columns.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s sync the database with the new model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command in the shell prompt to apply the existing migrations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get an output that ends with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: We just applied migrations for the applications listed in `INSTALLED_APPS`,
    including the `blog` application. After applying the migrations, the database
    reflects the current status of the models.
  prefs: []
  type: TYPE_NORMAL
- en: If you edit the `models.py` file in order to add, remove, or change the fields
    of existing models, or if you add new models, you will have to create a new migration
    using the `makemigrations` command. Each migration allows Django to keep track
    of model changes. Then, you will have to apply the migration using the `migrate`
    command to keep the database in sync with your models.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an administration site for models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the `Post` model is in sync with the database, we can create a simple
    administration site to manage blog posts.
  prefs: []
  type: TYPE_NORMAL
- en: Django comes with a built-in administration interface that is very useful for
    editing content. The Django site is built dynamically by reading the model metadata
    and providing a production-ready interface for editing content. You can use it
    out of the box, configuring how you want your models to be displayed in it.
  prefs: []
  type: TYPE_NORMAL
- en: The `django.contrib.admin` application is already included in the `INSTALLED_APPS`
    setting, so you don’t need to add it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a superuser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, you will need to create a user to manage the administration site. Run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output. Enter your desired username, email, and
    password, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you will see the following success message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We just created an administrator user with the highest permissions.
  prefs: []
  type: TYPE_NORMAL
- en: The Django administration site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the development server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/admin/` in your browser. You should see the administration
    login page, as shown in *Figure 1.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.7: The Django administration site login screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in using the credentials of the user you created in the preceding step.
    You will see the administration site index page, as shown in *Figure 1.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.8: The Django administration site index page'
  prefs: []
  type: TYPE_NORMAL
- en: The `Group` and `User` models that you can see in the preceding screenshot are
    part of the Django authentication framework located in `django.contrib.auth`.
    If you click on **Users**, you will see the user you created previously.
  prefs: []
  type: TYPE_NORMAL
- en: Adding models to the administration site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s add your blog models to the administration site. Edit the `admin.py`
    file of the `blog` application and make it look like this; the new lines are highlighted
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, reload the administration site in your browser. You should see your `Post`
    model on the site, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.9: The Post model of the blog application included in the Django administration
    site index page'
  prefs: []
  type: TYPE_NORMAL
- en: That was easy, right? When you register a model in the Django administration
    site, you get a user-friendly interface generated by introspecting your models
    that allows you to list, edit, create, and delete objects in a simple way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Add** link beside **Posts** to add a new post. You will note
    the form that Django has generated dynamically for your model, as shown in *Figure
    1.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.10: The Django administration site edit form for the Post model'
  prefs: []
  type: TYPE_NORMAL
- en: Django uses different form widgets for each type of field. Even complex fields,
    such as `DateTimeField`, are displayed with an easy interface, such as a JavaScript
    date picker.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the form and click on the **SAVE** button. You should be redirected
    to the post list page with a success message and the post you just created, as
    shown in *Figure 1.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.11: The Django administration site list view for the Post model with
    an added successfully message'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing how models are displayed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we will take a look at how to customize the administration site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `admin.py` file of your `blog` application and change it, as follows.
    The new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: We are telling the Django administration site that the model is registered in
    the site using a custom class that inherits from `ModelAdmin`. In this class,
    we can include information about how to display the model on the administration
    site and how to interact with it.
  prefs: []
  type: TYPE_NORMAL
- en: The `list_display` attribute allows you to set the fields of your model that
    you want to display on the administration object list page. The `@admin.register()`
    decorator performs the same function as the `admin.site.register()` function that
    you replaced, registering the `ModelAdmin` class that it decorates.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s customize the `admin` model with some more options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `admin.py` file of your `blog` application and change it, as follows.
    The new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Return to your browser and reload the post list page. Now, it will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.12: The Django administration site custom list view for the Post model'
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the fields displayed on the post list page are the ones we
    specified in the `list_display` attribute. The list page now includes a right
    sidebar that allows you to filter the results by the fields included in the `list_filter`
    attribute. Filters for `ForeignKey` fields like `author` are only displayed in
    the sidebar if more than one object exists in the database.
  prefs: []
  type: TYPE_NORMAL
- en: A search bar has appeared on the page. This is because we have defined a list
    of searchable fields using the `search_fields` attribute. Just below the search
    bar, there are navigation links to navigate through a date hierarchy; this has
    been defined by the `date_hierarchy` attribute. You can also see that the posts
    are ordered by **STATUS** and **PUBLISH** columns by default. We have specified
    the default sorting criteria using the `ordering` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on the **ADD POST** link. You will also note some changes here.
    As you type the title of a new post, the `slug` field is filled in automatically.
    You have told Django to prepopulate the `slug` field with the input of the `title`
    field using the `prepopulated_fields` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.13: The slug model is now automatically prepopulated as you type in
    the title'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the `author` field is now displayed with a lookup widget, which can be
    much better than an input selection drop-down when you have thousands of users.
    This is achieved with the `raw_id_fields` attribute and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.14: The widget to select related objects for the Author field of the
    Post model'
  prefs: []
  type: TYPE_NORMAL
- en: Adding facet counts to filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django 5.0 introduces facet filters to the administration site, showcasing facet
    counts. These counts indicate the number of objects corresponding to each specific
    filter, making it easier to identify matching objects in the admin changelist
    view. Next, we are going to make sure facet filters are always displayed for the
    `PostAdmin` admin model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `admin.py` file of your `blog` application and add the following line
    highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Create some posts using the administration site and access `http://127.0.0.1:8000/admin/blog/post/`.
    The filters should now include total facet counts, as shown in *Figure 1.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.15: Status field filters including facet counts'
  prefs: []
  type: TYPE_NORMAL
- en: With a few lines of code, we have customized the way the model is displayed
    on the administration site. There are plenty of ways to customize and extend the
    Django administration site; you will learn more about these later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about the Django administration site at [https://docs.djangoproject.com/en/5.0/ref/contrib/admin/](https://docs.djangoproject.com/en/5.0/ref/contrib/admin/).
  prefs: []
  type: TYPE_NORMAL
- en: Working with QuerySets and managers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a fully functional administration site to manage blog posts,
    it is a good time to learn how to read and write content to the database programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: The Django **object-relational mapper** (**ORM**) is a powerful database abstraction
    API that lets you create, retrieve, update, and delete objects easily. An ORM
    allows you to generate SQL queries using the object-oriented paradigm of Python.
    You can think of it as a way to interact with your database in a Pythonic fashion
    instead of writing raw SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: The ORM maps your models to database tables and provides you with a simple Pythonic
    interface to interact with your database. The ORM generates SQL queries and maps
    the results to model objects. The Django ORM is compatible with MySQL, PostgreSQL,
    SQLite, Oracle, and MariaDB.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can define the database of your project in the `DATABASES`
    setting of your project’s `settings.py` file. Django can work with multiple databases
    at a time, and you can program database routers to create custom data routing
    schemes.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have created your data models, Django gives you a free API to interact
    with them. You can find the model API reference of the official documentation
    at [https://docs.djangoproject.com/en/5.0/ref/models/](https://docs.djangoproject.com/en/5.0/ref/models/).
  prefs: []
  type: TYPE_NORMAL
- en: The Django ORM is based on QuerySets. A QuerySet is a collection of database
    queries to retrieve objects from your database. You can apply filters to QuerySets
    to narrow down the query results based on given parameters. The QuerySet equates
    to a `SELECT` SQL statement and the filters are limiting SQL clauses such as `WHERE`
    or `LIMIT`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you are going to learn how to build and execute QuerySets.
  prefs: []
  type: TYPE_NORMAL
- en: Creating objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following command in the shell prompt to open the Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, type the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Let’s analyze what this code does.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we are retrieving the `user` object with the username `admin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The `get()` method allows us to retrieve a single object from the database.
    This method executes a `SELECT` SQL statement behind the scenes. Note that this
    method expects a result that matches the query. If no results are returned by
    the database, this method will raise a `DoesNotExist` exception, and if the database
    returns more than one result, it will raise a `MultipleObjectsReturned` exception.
    Both exceptions are attributes of the model class that the query is being performed
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we create a `Post` instance with a custom title, slug, and body, and
    set the user that we previously retrieved as the author of the post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This object is in memory and not persisted to the database; we created a Python
    object that can be used during runtime but is not saved into the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we are saving the `Post` object in the database using the `save()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This action performs an `INSERT` SQL statement behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created an object in memory first and then persisted it to the database.
    However, you can create the object and persist it to the database in a single
    operation using the `create()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'In certain situations, you might need to fetch an object from the database
    or create it if it’s absent. The `get_or_create()` method facilitates this by
    either retrieving an object or creating it if not found. This method returns a
    tuple with the object retrieved and a Boolean indicating whether a new object
    was created. The following code attempts to retrieve a `User` object with the
    username `user2`, and if it doesn’t exist, it will create one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Updating objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, change the title of the previous `Post` object to something different
    and save the object again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This time, the `save()` method performs an `UPDATE` SQL statement.
  prefs: []
  type: TYPE_NORMAL
- en: The changes you make to a model object are not persisted to the database until
    you call the `save()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You already know how to retrieve a single object from the database using the
    `get()` method. We accessed this method using `Post.objects.get()`. Each Django
    model has at least one manager, and the default manager is called `objects`. You
    get a QuerySet object using your model manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve all objects from a table, we use the `all()` method on the default
    `objects` manager, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how we create a QuerySet that returns all objects in the database.
    Note that this QuerySet has not been executed yet. Django QuerySets are *lazy*,
    which means they are only evaluated when they are forced to. This behavior makes
    QuerySets very efficient. If you don’t assign the QuerySet to a variable but,
    instead, write it directly on the Python shell, the SQL statement of the QuerySet
    is executed because you are forcing it to generate output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Filtering objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To filter a QuerySet, you can use the `filter()` method of the manager. This
    method allows you to specify the content of a SQL `WHERE` clause by using field
    lookups.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can use the following to filter `Post` objects by their `title`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'This QuerySet will return all posts with the exact title *Who was Django Reinhardt?*.
    Let’s review the SQL statement generated with this QuerySet. Run the following
    code in the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'By printing the `query` attribute of the QuerySet, we can get the SQL produced
    by it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The generated `WHERE` clause performs an exact match on the `title` column.
    The `ORDER BY` clause specifies the default order defined in the `ordering` attribute
    of the `Post` model’s `Meta` options since we haven’t provided any specific ordering
    in the QuerySet. You will learn about ordering in a bit. Note that the `query`
    attribute is not part of the QuerySet public API.
  prefs: []
  type: TYPE_NORMAL
- en: Using field lookups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The previous QuerySet example consists of a filter lookup with an exact match.
    The QuerySet interface provides you with multiple lookup types. Two underscores
    are used to define the lookup type, with the format `field__lookup`. For example,
    the following lookup produces an exact match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'When no specific lookup type is provided, the lookup type is assumed to be
    `exact`. The following lookup is equivalent to the previous one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at other common lookup types. You can generate a case-insensitive
    lookup with `iexact`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also filter objects using a containment test. The `contains` lookup
    translates to a SQL lookup using the `LIKE` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The equivalent SQL clause is `WHERE title LIKE ''%Django%''`. A case-insensitive
    version is also available, named `icontains`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check for a given iterable (often a list, tuple, or another QuerySet
    object) with the `in` lookup. The following example retrieves posts with an `id`
    that is `1` or `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example shows the greater than (`gt`) lookup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The equivalent SQL clause is `WHERE ID > 3`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example shows the greater than or equal to lookup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'This one shows the less than lookup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'This shows the less than or equal to lookup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'A case-sensitive/insensitive starts-with lookup can be performed with the `startswith`
    and `istartswith` lookup types, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'A case-sensitive/insensitive ends-with lookup can be performed with the `endswith`
    and `iendswith` lookup types, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'There are also different lookup types for date lookups. An exact date lookup
    can be performed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'This shows how to filter a `DateField` or `DateTimeField` field by year:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also filter by month:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'And you can filter by day:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'You can chain additional lookups to `date`, `year`, `month`, and `day`. For
    example, here is a lookup for a value greater than a given date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'To lookup related object fields, you also use the two-underscores notation.
    For example, to retrieve the posts written by the user with the `admin` username,
    use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also chain additional lookups for the related fields. For example,
    to retrieve posts written by any user with a username that starts with `ad`, use
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also filter by multiple fields. For example, the following QuerySet
    retrieves all posts published in 2024 by the author with the username `admin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Chaining filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The result of a filtered QuerySet is another QuerySet object. This allows you
    to chain QuerySets together. You can build an equivalent QuerySet to the previous
    one by chaining multiple filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Excluding objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can exclude certain results from your QuerySet by using the `exclude()`
    method of the manager. For example, you can retrieve all posts published in 2024
    whose titles don’t start with `Why`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Ordering objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default order is defined in the `ordering` option of the model’s `Meta`.
    You can override the default ordering using the `order_by()` method of the manager.
    For example, you can retrieve all objects ordered by their `title`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Ascending order is implied. You can indicate descending order with a negative
    sign prefix, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'You can order by multiple fields. The following example orders objects by `author`
    first and then `title`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'To order randomly, use the string `''?''`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Limiting QuerySets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can limit a QuerySet to a certain number of results by using a subset of
    Python’s array-slicing syntax. For example, the following QuerySet limits the
    results to 5 objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: This translates to a SQL `LIMIT 5` clause. Note that negative indexing is not
    supported.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The preceding translates to a SQL `OFFSET 3 LIMIT 6` clause, to return the fourth
    through sixth objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve a single object, you can use an index instead of a slice. For example,
    use the following to retrieve the first object of posts in random order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Counting objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `count()` method counts the total number of objects matching the QuerySet
    and returns an integer. This method translates to a `SELECT COUNT(*)` SQL statement.
    The following example returns the total number of posts with an `id` lower than
    `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Checking if an object exists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `exists()` method allows you to check if a QuerySet contains any results.
    This method returns `True` if the QuerySet contains any items and `False` otherwise.
    For example, you can check if there are any posts with a `title` that starts with
    *Why* using the following QuerySet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Deleting objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to delete an object, you can do it from an object instance using
    the `delete()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Note that deleting objects will also delete any dependent relationships for
    `ForeignKey` objects defined with `on_delete` set to `CASCADE`.
  prefs: []
  type: TYPE_NORMAL
- en: Complex lookups with Q objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Field lookups using `filter()` are joined with a SQL `AND` operator. For example,
    `filter(field1='foo` `', field2='bar')` will retrieve objects where `field1` is
    *foo* **and** `field2` is *bar*. If you need to build more complex queries, such
    as queries with `OR` statements, you can use `Q` objects.
  prefs: []
  type: TYPE_NORMAL
- en: A `Q` object allows you to encapsulate a collection of field lookups. You can
    compose statements by combining `Q` objects with the `&` (and), `|` (or), and
    `^` (xor) operators.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code retrieves posts with a title that starts with
    the string *who* **or** *why* (case-insensitive):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we use the `|` operator to build an `OR` statement.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about `Q` objects at [https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects](https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects).
  prefs: []
  type: TYPE_NORMAL
- en: When QuerySets are evaluated
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a QuerySet doesn’t involve any database activity until it is evaluated.
    QuerySets will usually return another unevaluated QuerySet. You can concatenate
    as many filters as you like to a QuerySet, and you will not hit the database until
    the QuerySet is evaluated. When a QuerySet is evaluated, it translates into a
    SQL query to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'QuerySets are only evaluated in the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: The first time you iterate over them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you slice them, for instance, `Post.objects.all()[:3]`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you pickle or cache them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you call `repr()` or `len()` on them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you explicitly call `list()` on them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you test them in a statement, such as `bool()`, `or`, `and`, or `if`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More on QuerySets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will use QuerySets in all the project examples featured in this book. You
    will learn how to generate aggregates over QuerySets in the *Retrieving posts
    by similarity* section of *Chapter 3, Extending Your Blog Application*.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to optimize QuerySets in the *Optimizing QuerySets that involve
    related objects* section in *Chapter 7, Tracking User Actions*.
  prefs: []
  type: TYPE_NORMAL
- en: The QuerySet API reference is located at [https://docs.djangoproject.com/en/5.0/ref/models/querysets/](https://docs.djangoproject.com/en/5.0/ref/models/querysets/).
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about making queries with the Django ORM at [https://docs.djangoproject.com/en/5.0/topics/db/queries/](https://docs.djangoproject.com/en/5.0/topics/db/queries/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating model managers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default manager for every model is the `objects` manager. This manager retrieves
    all the objects in the database. However, we can define custom managers for models.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a custom manager to retrieve all posts that have a `PUBLISHED`
    status.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to add or customize managers for your models: you can add
    extra manager methods to an existing manager or create a new manager by modifying
    the initial QuerySet that the manager returns. The first method provides you with
    a QuerySet notation like `Post.objects.my_manager()`, and the latter provides
    you with a QuerySet notation like `Post.my_manager.all()`.'
  prefs: []
  type: TYPE_NORMAL
- en: We will choose the second method to implement a manager that will allow us to
    retrieve posts using the notation `Post.published.all()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of your `blog` application to add the custom manager,
    as follows. The new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: The first manager declared in a model becomes the default manager. You can use
    the `Meta` attribute `default_manager_name` to specify a different default manager.
    If no manager is defined in the model, Django automatically creates the `objects`
    default manager for it. If you declare any managers for your model but you want
    to keep the `objects` manager as well, you have to add it explicitly to your model.
    In the preceding code, we have added the default `objects` manager and the `published`
    custom manager to the `Post` model.
  prefs: []
  type: TYPE_NORMAL
- en: The `get_queryset()` method of a manager returns the QuerySet that will be executed.
    We have overridden this method to build a custom QuerySet that filters posts by
    their status and returns a successive QuerySet that only includes posts with the
    `PUBLISHED` status.
  prefs: []
  type: TYPE_NORMAL
- en: We have now defined a custom manager for the `Post` model. Let’s test it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the development server again with the following command in the shell
    prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can import the `Post` model and retrieve all published posts whose
    title starts with `Who`, executing the following QuerySet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: To obtain results for this QuerySet, make sure to set the `status` field to
    `PUBLISHED` in the `Post` object whose `title` starts with the string *Who*.
  prefs: []
  type: TYPE_NORMAL
- en: Building list and detail views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you understand how to use the ORM, you are ready to build the views
    of the `blog` application. A Django view is just a Python function that receives
    a web request and returns a web response. All the logic to return the desired
    response goes inside the view.
  prefs: []
  type: TYPE_NORMAL
- en: First, you will create your application views, then you will define a URL pattern
    for each view, and finally, you will create HTML templates to render the data
    generated by the views. Each view will render a template, passing variables to
    it, and will return an HTTP response with the rendered output.
  prefs: []
  type: TYPE_NORMAL
- en: Creating list and detail views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start by creating a view to display the list of posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `blog` application and make it look like this;
    the new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: This is our very first Django view. The `post_list` view takes the `request`
    object as the only parameter. This parameter is required by all views.
  prefs: []
  type: TYPE_NORMAL
- en: In this view, we retrieve all the posts with the `PUBLISHED` status using the
    `published` manager that we created previously.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we use the `render()` shortcut provided by Django to render the list
    of posts with the given template. This function takes the `request` object, the
    template path, and the context variables to render the given template. It returns
    an `HttpResponse` object with the rendered text (normally HTML code).
  prefs: []
  type: TYPE_NORMAL
- en: The `render()` shortcut takes the request context into account, so any variable
    set by the template context processors is accessible by the given template. Template
    context processors are just callables that set variables into the context. You
    will learn how to use context processors in *Chapter 4*, *Building a Social Website*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a second view to display a single post. Add the following function
    to the `views.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: This is the `post_detail` view. This view takes the `id` argument of a post.
    In the view, we try to retrieve the `Post` object with the given `id` by calling
    the `get()` method on the `published` manager. We raise an `Http404` exception
    to return an HTTP 404 error if the model `DoesNotExist` exception is raised because
    no result is found.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we use the `render()` shortcut to render the retrieved post using a
    template.
  prefs: []
  type: TYPE_NORMAL
- en: Using the get_object_or_404 shortcut
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django provides a shortcut to call `get()` on a given model manager and raises
    an `Http404` exception instead of a `DoesNotExist` exception when no object is
    found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file to import the `get_object_or_404` shortcut and change
    the `post_detail` view, as follows. The new code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: In the detail view, we now use the `get_object_or_404()` shortcut to retrieve
    the desired post. This function retrieves the object that matches the given parameters
    or an HTTP 404 (not found) exception if no object is found.
  prefs: []
  type: TYPE_NORMAL
- en: Adding URL patterns for your views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: URL patterns allow you to map URLs to views. A URL pattern is composed of a
    string pattern, a view, and, optionally, a name that allows you to name the URL
    project-wide. Django runs through each URL pattern and stops at the first one
    that matches the requested URL. Then, Django imports the view of the matching
    URL pattern and executes it, passing an instance of the `HttpRequest` class and
    the keyword or positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `urls.py` file in the directory of the `blog` application and add
    the following lines to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you define an application namespace with the `app_name`
    variable. This allows you to organize URLs by application and use the name when
    referring to them. You define two different patterns using the `path()` function.
    The first URL pattern doesn’t take any arguments and is mapped to the `post_list`
    view. The second pattern is mapped to the `post_detail` view and takes only one
    argument `id`, which matches an integer, set by the path converter `int`.
  prefs: []
  type: TYPE_NORMAL
- en: You use angle brackets to capture the values from the URL. Any value specified
    in the URL pattern as `<parameter>` is captured as a string. You use path converters,
    such as `<int:year>`, to specifically match and return an integer. For example
    `<slug:post>` would specifically match a slug (a string that can only contain
    letters, numbers, underscores, or hyphens). You can see all the path converters
    provided by Django at [https://docs.djangoproject.com/en/5.0/topics/http/urls/#path-converters](https://docs.djangoproject.com/en/5.0/topics/http/urls/#path-converters).
  prefs: []
  type: TYPE_NORMAL
- en: If using `path()` and converters isn’t sufficient for you, you can use `re_path()`
    instead to define complex URL patterns with Python regular expressions. You can
    learn more about defining URL patterns with regular expressions at [https://docs.djangoproject.com/en/5.0/ref/urls/#django.urls.re_path](https://docs.djangoproject.com/en/5.0/ref/urls/#django.urls.re_path).
    If you haven’t worked with regular expressions before, you might want to take
    a look at *Regular Expression HOWTO*, located at [https://docs.python.org/3/howto/regex.html](https://docs.python.org/3/howto/regex.html),
    first.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a `urls.py` file for each application is the best way to make your
    applications reusable by other projects.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you have to include the URL patterns of the `blog` application in the
    main URL patterns of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `urls.py` file located in the `mysite` directory of your project and
    make it look like the following. The new code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: The new URL pattern defined with `include` refers to the URL patterns defined
    in the `blog` application so that they are included under the `blog/` path. You
    include these patterns under the namespace `blog`. Namespaces have to be unique
    across your entire project. Later, you will refer to your blog URLs easily by
    using the namespace followed by a colon and the URL name, for example, `blog:post_list`
    and `blog:post_detail`. You can learn more about URL namespaces at [https://docs.djangoproject.com/en/5.0/topics/http/urls/#url-namespaces](https://docs.djangoproject.com/en/5.0/topics/http/urls/#url-namespaces).
  prefs: []
  type: TYPE_NORMAL
- en: Creating templates for your views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have created views and URL patterns for the `blog` application. URL patterns
    map URLs to views, and views decide which data gets returned to the user. Templates
    define how the data is displayed; they are usually written in HTML in combination
    with the Django template language. You can find more information about the Django
    template language at [https://docs.djangoproject.com/en/5.0/ref/templates/language/](https://docs.djangoproject.com/en/5.0/ref/templates/language/).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add templates to your application to display posts in a user-friendly
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following directories and files inside your `blog` application directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: The preceding structure will be the file structure for your templates. The `base.html`
    file will include the main HTML structure of the website and divide the content
    into the main content area and a sidebar. The `list.html` and `detail.html` files
    will inherit from the `base.html` file to render the blog post list and detail
    views, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django has a powerful template language that allows you to specify how data
    is displayed. It is based on *template tags*, *template variables*, and *template
    filters*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Template tags control the rendering of the template and look like this: `{%
    tag %}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Template variables get replaced with values when the template is rendered and
    look like this: `{{ variable }}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Template filters allow you to modify variables for display and look like this:
    `{{ variable|filter }}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see all the built-in template tags and filters at [https://docs.djangoproject.com/en/5.0/ref/templates/builtins/](https://docs.djangoproject.com/en/5.0/ref/templates/builtins/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a base template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `base.html` file and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '`{% load static %}` tells Django to load the `static` template tags that are
    provided by the `django.contrib.staticfiles` application, which is contained in
    the `INSTALLED_APPS` setting. After loading them, you can use the `{% static %}`
    template tag throughout this template. With this template tag, you can include
    the static files, such as the `blog.css` file, which you will find in the code
    of this example under the `static/` directory of the `blog` application. Copy
    the `static/` directory from the code that comes along with this chapter into
    the same location as your project to apply the CSS styles to the templates. You
    can find the directory’s contents at [https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static](https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static).'
  prefs: []
  type: TYPE_NORMAL
- en: You can see that there are two `{% block %}` tags. These tell Django that you
    want to define a block in that area. Templates that inherit from this template
    can fill in the blocks with content. You have defined a block called `title` and
    a block called `content`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the post list template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s edit the `post/list.html` file and make it look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: With the `{% extends %}` template tag, you tell Django to inherit from the `blog/base.html`
    template. Then, you fill the `title` and `content` blocks of the base template
    with content. You iterate through the posts and display their title, date, author,
    and body, including a link in the title to the detail URL of the post. We build
    the URL using the `{% url %}` template tag provided by Django.
  prefs: []
  type: TYPE_NORMAL
- en: This template tag allows you to build URLs dynamically by their name. We use
    `blog:post_detail` to refer to the `post_detail` URL in the `blog` namespace.
    We pass the required `post.id` parameter to build the URL for each post.
  prefs: []
  type: TYPE_NORMAL
- en: Always use the `{% url %}` template tag to build URLs in your templates instead
    of writing hardcoded URLs. This will make your URLs more maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the body of the post, we apply two template filters: `truncatewords` truncates
    the value to the number of words specified, and `linebreaks` converts the output
    into HTML line breaks. You can concatenate as many template filters as you wish;
    each one will be applied to the output generated by the preceding one.'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Change the status of the initial post to **Published**, as shown in *Figure
    1.16*, and create some new posts, also with a **Published** status.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.16: The status field for a published post'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell and execute the following command to start the development server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/blog/` in your browser; you will see everything
    running. You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.17: The page for the post list view'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the post detail template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, edit the `post/detail.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you can return to your browser and click on one of the post titles to
    take a look at the detail view of the post. You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_01_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.18: The page for the post’s detail view'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the URL – it should include the auto-generated post ID, like
    `/blog/1/`.
  prefs: []
  type: TYPE_NORMAL
- en: The request/response cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s review the request/response cycle of Django with the application we built.
    The following schema shows a simplified example of how Django processes HTTP requests
    and generates HTTP responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Timeline  Description automatically generated with medium confidence](img/B21088_01_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.19: The Django request/response cycle'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s review the Django request/response process:'
  prefs: []
  type: TYPE_NORMAL
- en: A web browser requests a page by its URL, for example, `https://domain.com/blog/33/`.
    The web server receives the HTTP request and passes it over to Django.
  prefs: []
  type: TYPE_NORMAL
- en: Django runs through each URL pattern defined in the URL patterns configuration.
    The framework checks each pattern against the given URL path, in order of appearance,
    and stops at the first one that matches the requested URL. In this case, the pattern
    `/blog/<id>/` matches the path `/blog/33/`.
  prefs: []
  type: TYPE_NORMAL
- en: Django imports the view of the matching URL pattern and executes it, passing
    an instance of the `HttpRequest` class and the keyword or positional arguments.
    The view uses the models to retrieve information from the database. Using the
    Django ORM, QuerySets are translated into SQL and executed in the database.
  prefs: []
  type: TYPE_NORMAL
- en: The view uses the `render()` function to render an HTML template passing the
    `Post` object as a context variable.
  prefs: []
  type: TYPE_NORMAL
- en: The rendered content is returned as a `HttpResponse` object by the view with
    the `text/html` content type by default.
  prefs: []
  type: TYPE_NORMAL
- en: You can always use this schema as the basic reference for how Django processes
    requests. This schema doesn’t include Django middleware, for the sake of simplicity.
    You will use middleware in different examples of this book, and you will learn
    how to create custom middleware in *Chapter 17*, *Going Live*.
  prefs: []
  type: TYPE_NORMAL
- en: Management commands used in this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have introduced a variety of Django management commands.
    You need to get familiar with them, as they will be used often throughout the
    book. Let’s revisit the commands we have covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the file structure for a new Django project named `mysite`, we used
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'To create the file structure for a new Django application named `blog`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply all database migrations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'To create migrations for the models of the `blog` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the SQL statements that will be executed with the first migration of
    the `blog` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the Django development server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the development server specifying host/port and settings file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the Django shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a superuser using the Django authentication framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: For the full list of available management commands, check out [https://docs.djangoproject.com/en/5.0/ref/django-admin/](https://docs.djangoproject.com/en/5.0/ref/django-admin/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the basics of the Django web framework by creating
    a simple blog application. You designed the data models and applied migrations
    to the database. You also created the views, templates, and URLs for your blog.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will enhance your blog by creating canonical URLs for
    your posts and building SEO-friendly URLs. You will also learn how to implement
    object pagination and how to build class-based views. You will also create forms
    to let your users recommend posts by email and comment on posts.
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter01)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Download Python: [https://www.python.org/downloads/](https://www.python.org/downloads/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows Python launcher: [https://docs.python.org/3/using/windows.html#launcher](https://docs.python.org/3/using/windows.html#launcher)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python `venv` library for virtual environments: [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python `pip` installation instructions: at [https://pip.pypa.io/en/stable/installation/](https://pip.pypa.io/en/stable/installation/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django installation options: [https://docs.djangoproject.com/en/5.0/topics/install/](https://docs.djangoproject.com/en/5.0/topics/install/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django 5.0 release notes: [https://docs.djangoproject.com/en/5.0/releases/5.0/](https://docs.djangoproject.com/en/5.0/releases/5.0/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `django-upgrade` tool: [https://github.com/adamchainz/django-upgrade](https://github.com/adamchainz/django-upgrade)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `pyupgrade` tool: [https://github.com/asottile/pyupgrade](https://github.com/asottile/pyupgrade)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django’s design philosophies: [https://docs.djangoproject.com/en/5.0/misc/design-philosophies/](https://docs.djangoproject.com/en/5.0/misc/design-philosophies/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django model field reference: [https://docs.djangoproject.com/en/5.0/ref/models/fields/](https://docs.djangoproject.com/en/5.0/ref/models/fields/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Model index reference: [https://docs.djangoproject.com/en/5.0/ref/models/indexes/](https://docs.djangoproject.com/en/5.0/ref/models/indexes/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python support for enumerations: [https://docs.python.org/3/library/enum.html](https://docs.python.org/3/library/enum.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django model enumeration types: [https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types](https://docs.djangoproject.com/en/5.0/ref/models/fields/#enumeration-types)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django settings reference: [https://docs.djangoproject.com/en/5.0/ref/settings/](https://docs.djangoproject.com/en/5.0/ref/settings/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Database default values for model fields: [https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default](https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.db_default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Database functions: [https://docs.djangoproject.com/en/5.0/ref/models/database-functions/](https://docs.djangoproject.com/en/5.0/ref/models/database-functions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django administration site: [https://docs.djangoproject.com/en/5.0/ref/contrib/admin/](https://docs.djangoproject.com/en/5.0/ref/contrib/admin/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Model API reference: [https://docs.djangoproject.com/en/5.0/ref/models/](https://docs.djangoproject.com/en/5.0/ref/models/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Making queries with the Django ORM: [https://docs.djangoproject.com/en/5.0/topics/db/queries/](https://docs.djangoproject.com/en/5.0/topics/db/queries/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'QuerySet API reference: [https://docs.djangoproject.com/en/5.0/ref/models/querysets/](https://docs.djangoproject.com/en/5.0/ref/models/querysets/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Complex lookups with Q objects: [https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects](https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django URL dispatcher: [https://docs.djangoproject.com/en/5.0/topics/http/urls/](https://docs.djangoproject.com/en/5.0/topics/http/urls/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django template language: [https://docs.djangoproject.com/en/5.0/ref/templates/language/](https://docs.djangoproject.com/en/5.0/ref/templates/language/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Built-in template tags and filters: [https://docs.djangoproject.com/en/5.0/ref/templates/builtins/](https://docs.djangoproject.com/en/5.0/ref/templates/builtins/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django management commands: [https://docs.djangoproject.com/en/5.0/ref/django-admin/](https://docs.djangoproject.com/en/5.0/ref/django-admin/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Static files for the code in this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static](https://github.com/PacktPublishing/Django-5-by-example/tree/master/Chapter01/mysite/blog/static)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, Django development experts, and the author
    himself. Ask questions, provide solutions to other readers, chat with the author
    via Ask Me Anything sessions, and much more.Scan the QR code or visit the link
    to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: https://packt.link/Django5ByExample
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code287089408934129031.png)'
  prefs: []
  type: TYPE_IMG
