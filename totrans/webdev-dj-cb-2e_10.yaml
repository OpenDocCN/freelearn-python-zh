- en: Chapter 10. Bells and Whistles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Django shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using database query expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monkey-patching the slugify() function for better internationalization support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggling the Debug Toolbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ThreadLocalMiddleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching the method return value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Memcached to cache Django views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using signals to notify administrators about new entries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking for missing settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will go through several other important bits and pieces
    that will help you understand and utilize Django even better. You will get an
    overview of how to use the Django shell to experiment with the code before writing
    it in the files. You will be introduced to monkey patching, also known as guerrilla
    patching, which is a powerful feature of dynamical languages such as Python and
    Ruby. You will learn how to debug your code and check its performance. You will
    see how to access the currently logged in user and other request parameters from
    any module. Also, you will learn how to cache values, handle signals, and create
    system checks. Get ready for an interesting programming experience!
  prefs: []
  type: TYPE_NORMAL
- en: Using the Django shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the virtual environment activated and your project directory selected
    as the current directory, enter the following command in your command-line tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By executing the preceding command, you will get in an interactive Python shell
    configured for your Django project, where you can play around with the code, inspect
    classes, try out methods, or execute scripts on the fly. In this recipe, we will
    go through the most important functions that you need to know in order to work
    with the Django shell.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can either install IPython or bpython using one of the following commands,
    which will highlight the syntax for the output of your Django shell and add some
    other helpers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learn the basics of using the Django shell by following these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the Django shell by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The prompt will change to `In [1]: or >>>`, depending on whether you use IPython
    or not. If you use bpython, the shell will be shown in full terminal window with
    the available shortcuts at the bottom (similar to the nano editor) and you will
    also get code highlighting and text autocompletion when typing.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, you can import classes, functions, or variables and play around with them.
    For example, to see the version of an installed module, you can import the module
    and then try to read its `__version__`, `VERSION`, or `version` variables, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get a comprehensive description of a module, class, function, method, keyword,
    or documentation topic, use the `help()` function. You can either pass a string
    with the path to a specific entity, or the entity itself, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will open the help page for the `django.forms` module. Use the arrow keys
    to scroll the page up and down. Press *Q* to get back to the shell.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you run `help()` without the parameters, it opens an interactive help. Here
    you can enter any path of a module, class, function, and so on and get information
    on what it does and how to use it. To quit the interactive help press *Ctrl* +
    *D*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This is an example of passing an entity to the `help()` function. This will
    open a help page for the `ModelForm` class, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To quickly see what fields and values are available for a model instance, use
    the `__dict__` attribute. Also, use the `pprint()` function to get the dictionaries
    printed in a more readable format (not just one long line), as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that using `__dict__`, we don't get many-to-many relationships. However,
    this might be enough for a quick overview of the fields and values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To get all the available properties and methods of an object, you can use the
    `dir()` function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get these attributes printed one per line, you can use the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Django shell is useful to experiment with `QuerySets` or regular expressions
    before putting them in your model methods, views, or management commands. For
    example, to check the e-mail validation regular expression, you can type the following
    in the Django shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to try out different `QuerySets`, you need to execute the setup
    of the models and apps in your project, as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To exit the Django shell, press *Ctrl* + *D* or type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The difference between a normal Python shell and the Django shell is that when
    you run the Django shell, `manage.py` sets the `DJANGO_SETTINGS_MODULE` environment
    variable to the project's settings path, and then all the code in the Django shell
    is handled in the context of your project.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using database query expressions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Monkey-patching the slugify() function for better internationalization
    support* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using database query expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django **Object-relational mapping** (**ORM**) comes with special abstraction
    constructs that can be used to build complex database queries. They are called
    **Query Expressions** and they allow you to filter data, order it, annotate new
    columns, and aggregate relations. In this recipe, we will see how that can be
    used in practice. We will create an app that shows viral videos and counts how
    many times each video has been seen on mobile and desktop devices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start with, install `django-mobile` to your virtual environment. This module
    will be necessary to differentiate between desktop devices and mobile devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To configure it, you will need to modify several project settings as follows.
    Besides that, let''s create the `viral_videos` app. Put both of them under `INSTALLED_APPS`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a model for viral videos with a creation and modification timestamps,
    title, embedded code, impressions on desktop devices, and impressions on mobile
    devices, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To illustrate the query expressions, let''s create the viral video detail view
    and plug it in the URL configuration, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `viral_video_detail()` view in the `views.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the URL configuration for the app, as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include the URL configuration of the app in the project''s root URL configuration,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a template for the `viral_video_detail()` view, as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set up administration for the `viral_videos` app and add some videos to the
    database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might have noticed the `print()` statement in the view. It is there temporarily
    for debugging purposes. If you run local development server and access the first
    video in the browser at `http://127.0.0.1:8000/en/viral-videos/1/`, you will see
    the following SQL query printed in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the browser, you will see a simple page similar to the following image,
    showing the title of a video, label of the video, embedded video, and impressions
    on desktop devices, mobile devices and in total:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `annotate()` method in Django `QuerySets` allows you to add extra columns
    to the `SELECT SQL` statement as well as on-the-fly created properties for the
    objects retrieved from `QuerySets`. With `models.F()`, we can reference different
    field values from the selected database table. In this example, we will create
    the `total_impressions` property, which is the sum of the impressions on the desktop
    devices and the impressions on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: With `models.Case()` and `models.When()`, we can return the values depending
    on different conditions. To mark the values, we are using `models.Value()`. In
    our example, we will create the `label` column for SQL query and the property
    for the objects returned by `QuerySet`. It will be set to *popular* if it has
    more than 500 impressions, *new* if it has been created today, and *cool* otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the view, we have the `qs.update()` methods called. They increment
    `mobile_impressions` or `desktop_impressions` of the current video, depending
    on the device used by the visitor. The incrementation happens at the SQL level.
    This solves the so-called race conditions, when two or more visitors are accessing
    the view at the same time and try to increase the impressions count simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the Django shell* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](ch02.html
    "Chapter 2. Database Structure"), *Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a model mixin to handle creation and modification dates* recipe
    in [Chapter 2](ch02.html "Chapter 2. Database Structure"), *Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monkey-patching the slugify() function for better internationalization support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monkey patch or guerrilla patch is a piece of code that extends or modifies
    another piece of code at runtime. It is not recommended to use monkey patch often;
    however, sometimes, it is the only possible way to fix a bug in third-party modules
    without creating a separate branch of the module. Also, monkey patching might
    be used to prepare functional or unit tests without using complex database or
    file manipulations. In this recipe, you will learn how to exchange the default
    `slugify()` function with the one from the third-party `awesome-slugify` module,
    which handles German, Greek, and Russian words smarter and allows to create customized
    slugs for other languages. As a quick reminder, we uses the `slugify()` function
    to create a URL-friendly version of the object's title or the uploaded filename;
    it strips the leading and trailing whitespace, converts the text to lowercase,
    removes nonword characters, and converts spaces to hyphens.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `awesome-slugify` in your virtual environment, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `guerrilla_patches` app in your project and put it under `INSTALLED_APPS`
    in the settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `models.py` file of the `guerrilla_patches` app, add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default Django `slugify()` function handles German diacritical symbols
    incorrectly. To see this for yourself, run the following code in the Django shell
    without the monkey patch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This is incorrect in German as the letter `ß` is totally stripped out instead
    of substituting it with `ss` and the letters `ä`, `ö`, and `ü` are changed to
    `a`, `o`, and `u`; whereas, they should be substituted with `ae`, `oe`, and `ue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The monkey patch that we did loads the `django.utils.text` module at initialization
    and assigns the callable instance of the `Slugify` class as the `slugify()` function.
    Now, if you run the same code in the Django shell, you will get different but
    correct results, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To read more about how to utilize the `awesome-slugify` module, refer to the
    following: [https://pypi.python.org/pypi/awesome-slugify](https://pypi.python.org/pypi/awesome-slugify).'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before creating any monkey patch, we need to completely understand how the
    code that we want to modify works. This can be done by analyzing the existing
    code and inspecting the values of different variables. To do this, there is a
    useful built-in Python debugger `pdb` module, which can temporarily be added to
    the Django code or any third-party module to stop the execution of a development
    server at any breakpoint. Use the following code to debug an unclear part of a
    Python module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This launches the interactive shell, where you can type the variables to see
    their values. If you type `c` or `continue`, the code execution will continue
    until the next breakpoint. If you type `q` or `quit`, the management command will
    be aborted. You can learn more commands of the Python debugger and how to inspect
    the traceback of the code at [https://docs.python.org/2/library/pdb.html](https://docs.python.org/2/library/pdb.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Another quick way to see a value of a variable in the development server is
    to raise a warning with the variable as a message, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: When you are in the `DEBUG` mode, the Django logger will provide you with the
    traceback and other local variables.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget to remove the debugging functions before committing the code to
    a repository.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the Django shell* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggling the Debug Toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While developing with Django, you will want to inspect request headers and parameters,
    check the current template context, or measure the performance of SQL queries.
    All this and more is possible with the Django Debug Toolbar. It is a configurable
    set of panels that displays various debug information about the current request
    and response. In this recipe, I will guide you on how to toggle the visibility
    of the Debug Toolbar, depending on a cookie, set by bookmarklet. A bookmarklet
    is a bookmark of a small piece of JavaScript code that you can run on any page
    in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with toggling the visibility of the Debug Toolbar, take a look
    at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Django Debug Toolbar to your virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Put `debug_toolbar` under `INSTALLED_APPS` in the settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up the Django Debug Toolbar, which can be switched
    on or off using bookmarklets in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following project settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `utils` module, create a `misc.py` file with the `custom_show_toolbar()`
    function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the Chrome or Firefox browser and go to **Bookmark Manager**. Then, create
    two new JavaScript links. The first link shows the toolbar. It looks similar to
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second JavaScript link hides the toolbar and looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DEBUG_TOOLBAR_PANELS` setting defines the panels to show in the toolbar.
    The `DEBUG_TOOLBAR_CONFIG` dictionary defines the configuration for the toolbar,
    including a path to the function that is used to check whether or not to show
    the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, when you browse through your project the Django Debug Toolbar will
    not be shown. However, as you click on your bookmarklet, **Debug Toolbar On**,
    the `DebugToolbar` cookie will be set to `1`, the page will be refreshed, and
    you will see the toolbar with debugging panels. For example, you will be able
    to inspect the performance of SQL statements for optimization, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also be able to check the template context variables for the current
    view, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Getting detailed error reporting via e-mail* recipe in [Chapter 11](ch11.html
    "Chapter 11. Testing and Deployment"), *Testing and Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ThreadLocalMiddleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `HttpRequest` object contains useful information about the current user,
    language, server variables, cookies, session, and so on. As a matter of fact,
    `HttpRequest` is provided in the views and middlewares, and then you can pass
    it or its attribute values to forms, model methods, model managers, templates,
    and so on. To make life easier, you can use the `ThreadLocalMiddleware` middleware
    that stores the current `HttpRequest` object in the globally-accessed Python thread.
    Therefore, you can access it from model methods, forms, signal handlers, and any
    other place that didn't have direct access to the `HttpRequest` object previously.
    In this recipe, we will define this middleware.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the `utils` app and put it under `INSTALLED_APPS` in the settings.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `middleware.py` file in the `utils` app with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this middleware to `MIDDLEWARE_CLASSES` in the settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ThreadLocalMiddleware` processes each request and stores the current `HttpRequest`
    object in the current thread. Each request-response cycle in Django is single
    threaded. There are two functions: `get_current_request()` and `get_current_user()`.
    These functions can be used from anywhere to grab the current `HttpRequest` object
    or the current user.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can create and use `CreatorMixin`, which saves the current
    user as the creator of a model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](ch02.html
    "Chapter 2. Database Structure"), *Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a model mixin to handle creation and modification dates* recipe
    in [Chapter 2](ch02.html "Chapter 2. Database Structure"), *Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a model mixin to take care of meta tags* recipe in [Chapter 2](ch02.html
    "Chapter 2. Database Structure"), *Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a model mixin to handle generic relations* recipe in [Chapter
    2](ch02.html "Chapter 2. Database Structure"), *Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching the method return value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you call the same model method with heavy calculations or database queries
    multiple times in the request-response cycle, the performance of the view might
    be very slow. In this recipe, you will learn about a pattern that you can use
    to cache the return value of a method for later repetitive use. Note that we are
    not using the Django cache framework here, we are just using what Python provides
    us by default.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Choose an app with a model that has a time-consuming method that will be used
    repetitively in the same request-response cycle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a pattern that you can use to cache a method return value of a model
    for repetitive use in views, forms, or templates, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, let''s create a `get_thumbnail_url()`method for the `ViralVideo`
    model that we created in the *Using database query expressions* recipe earlier
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The method checks whether the `_expensive_value_cached` attribute exists for
    the model instance. If it doesn't exist, the time-consuming calculations are done
    and the result is assigned to this new attribute. At the end of the method, the
    cached value is returned. Of course, if you have several weighty methods, you
    will need to use different attribute names to save each calculated value.
  prefs: []
  type: TYPE_NORMAL
- en: You can now use something like `{{ object.some_expensive_function }}` in the
    header and footer of a template, and the time-consuming calculations will be done
    just once.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a template, you can use the function in both, the `{% if %}` condition,
    and output of the value, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we are checking the thumbnail of a YouTube video by parsing
    the URL of the video''s embed code, getting its ID, and then composing the URL
    of the thumbnail image. Then, you can use it in a template as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to [Chapter 4](ch04.html "Chapter 4. Templates and JavaScript"), *Templates
    and JavaScript* for more details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Memcached to cache Django views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django provides a possibility to speed up the request-response cycle by caching
    the most expensive parts such as database queries or template rendering. The fastest
    and most reliable caching natively supported by Django is the memory-based cache
    server, Memcached. In this recipe, you will learn how to use Memcached to cache
    a view for our `viral_videos` app that we created in the *Using database query
    expressions* recipe earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several things to do in order to prepare caching for your Django
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Memcached server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start Memcached server, as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install Memcached Python bindings in your virtual environment, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To integrate caching for your specific views, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set `CACHES` in the project settings, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the views of the `viral_videos` app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, if you access the first viral video at `http://127.0.0.1:8000/en/viral-videos/1/`
    and refresh the page a few times, you will see that the number of impressions
    changes only once a minute. This is because for every visitor, caching is enabled
    for 60 seconds. Caching is set for the view using the `@cache_page` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: Memcached is a key-value store and by default for each cached page, the full
    URL is used to generate the key. When two visitors access the same page simultaneously,
    the first visitor will get the page generated by the Python code and the second
    one will get the HTML code from the Memcached server.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, to ensure that each visitor gets treated separately even if
    they access the same URL, we are using the `@vary_on_cookie` decorator. This decorator
    checks the uniqueness of the `Cookie` header of the HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about Django's cache framework from the official documentation at
    [https://docs.djangoproject.com/en/1.8/topics/cache/](https://docs.djangoproject.com/en/1.8/topics/cache/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using database query expressions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Caching the method return value* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using signals to notify administrators about new entries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django framework has a concept of signals, which are similar to events in JavaScript.
    There is a handful of built-in signals that you can use to trigger actions before
    and after initialization of a model, saving or deleting an instance, migrating
    the database schema, handling a request, and so on. Moreover, you can create your
    own signals in your reusable apps and handle them in other apps. In this recipe,
    you will learn how to use signals to send emails to administrators whenever a
    specific model is saved.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the `viral_videos` app that we created in the *Using database
    query expressions* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create notifications to administrators:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `signals.py` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `apps.py` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `__init__.py` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure that you have `ADMINS` set in the project settings, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ViralVideosAppConfig` app configuration class has the `ready()` method,
    which will be called when all the models of the project are loaded in the memory.
    According to the Django documentation, *signals allow certain senders to notify
    a set of receivers that some action has taken place*. In the `ready()` method,
    we will import, therefore, registering the `inform_administrators()` signal receiver
    for the `post_save` signal, and limiting it to handle only signals, where the
    `ViralVideo` model is the sender. Therefore, whenever we save the `ViralVideo`
    model, the `inform_administrators()` function will be called. The function checks
    whether a video is newly created. In that case, it sends an e-mail to the system
    administrators that are listed in `ADMINS` in the settings.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about Django's signals from the official documentation at [https://docs.djangoproject.com/en/1.8/topics/signals/](https://docs.djangoproject.com/en/1.8/topics/signals/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using database query expressions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating app configuration* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Django 1.8"), *Getting Started with Django 1.8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking for missing settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking for missing settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Django 1.7, you can use an extensible **System Check Framework**, which
    replaces the old validate management command. In this recipe, you will learn how
    to create a check if the `ADMINS` setting is set. Similarly, you will be able
    to check whether different secret keys or access tokens are set for the APIs that
    you are using.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the `viral_videos` app that we created in the *Using database
    query expressions* recipe and extended in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use System Check Framework, follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `checks.py` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the checks in the `ready()` method of the app configuration, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To try the check that you just created, remove or comment out the `ADMINS`
    setting and run the `check` management command in your virtual environment, as
    shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The System Check Framework has a bunch of checks in the models, fields, database,
    administration, authentication, content types, and security, where it raises errors
    or warnings if something in the project is not set correctly. Additionally, you
    can create your own checks similar to what we did in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We have registered the `settings_check()` function, which returns a list with
    a warning if there is no `ADMINS` setting defined for the project.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the `Warning` instances from the `django.core.checks` module, the returned
    list can also contain instances of the `Debug`, `Info`, `Error`, and `Critical`
    classes or any other class inheriting from `django.core.checks.CheckMessage`.
    Debugs, infos, and warnings would fail silently; whereas, errors and criticals
    would prevent the project from running.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the check is tagged as a `compatibility` check. The other
    options are: `models`, `signals`, `admin`, and `security`.'
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about System Check Framework from the official documentation at [https://docs.djangoproject.com/en/1.8/topics/checks/](https://docs.djangoproject.com/en/1.8/topics/checks/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using database query expressions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using signals to notify administrators about new entries* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating app configuration* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Django 1.8"), *Getting Started with Django 1.8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
