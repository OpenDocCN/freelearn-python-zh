- en: '[*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072): Your First Odoo
    Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing in Odoo usually means creating our own modules. In this chapter,
    we will create our first Odoo application, learn the steps needed to make it available
    to Odoo, and install it.
  prefs: []
  type: TYPE_NORMAL
- en: We will get started by learning the basics of the development workflow—we'll
    create and install a new module and update it to apply the changes we make throughout
    the development iterations.
  prefs: []
  type: TYPE_NORMAL
- en: Odoo follows a **Model-View-Controller** (**MVC**)-like architecture, and we
    will go through the different layers to implement a library application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the library project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 1 – Creating a new `addon` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 2 – Creating a new application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 3 – Adding automated tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 4 – Implementing the model layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 5 – Setting up access security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 6 – Implementing the backend view layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 7 – Implementing the business logic layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 8 – Implementing the website **user interface** (**UI**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this approach, you will be able to gradually learn about the basic building
    blocks that make up an application and experience the iterative process of building
    an Odoo module from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to have an Odoo server installed and be able to start
    it from the command line to perform actions such as installing modules or running
    tests. If you don't have a working Odoo development environment, make sure you
    review [*Chapter 2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049), *Preparing
    the Development Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will create our first Odoo application from a blank slate,
    so we won't need any additional code to get started.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found in the book's GitHub repository at [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials),
    in the `ch03` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the library project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use a learning project to better explore the topics explained in this
    chapter, and see them work in practice. We will create a new Odoo app to manage
    a book library. We will use this project in all the following chapters, where
    each chapter will be an iteration, adding features to the app. Here, we will create
    a first iteration of the library app.
  prefs: []
  type: TYPE_NORMAL
- en: The first feature we will implement will be the book catalog. The catalog allows
    us to keep records of the books in our library, with their relevant details. We
    also want to make this catalog available through a public website, where the available
    books can be seen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Library books should have the following data:'
  prefs: []
  type: TYPE_NORMAL
- en: Title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing company
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date published
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cover image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**International Standard Book Number** (**ISBN**), with check digit validation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active flag, indicating the books that should be publicly available on the website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As is usual for the Odoo base apps, the Library app will have two user groups,
    the Library User and the Library Manager. The User level is expected to be able
    to perform all daily operations, and the Manager level is expected to additionally
    be able to edit the app's configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the book catalog feature, we will keep editing book records as a reserved
    feature for Managers. The following should apply:'
  prefs: []
  type: TYPE_NORMAL
- en: Library Managers should be able to edit books.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Library users and Public users using the website should be able to only view
    books.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This simple project will allow us to cover all the main components involved
    in building an Odoo app. The first step is to create a module directory that will
    host the code and components for our app.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – Creating a new addon module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An addon module is a directory containing files that implement some Odoo features.
    It can add new features or modify existing ones. The addon module directory must
    contain a manifest file—or descriptor file—named `__manifest__.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Some module addons are featured as an **app**. Apps are the top-level module
    for a feature area in Odoo, and we expect our module to be featured in the top-level
    **Apps** menu. Examples of apps in base Odoo include **CRM**, **Project**, and
    **HR**. A non-app **module addon** is expected to depend on an app, adding or
    extending features to it.
  prefs: []
  type: TYPE_NORMAL
- en: If a new module adds new or major functionality to Odoo, it probably should
    be an app. If the module just makes changes to an existing app, it probably should
    be a regular addon module.
  prefs: []
  type: TYPE_NORMAL
- en: 'To develop a new module, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that the directory where we will work is in the Odoo server addons path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the module's directory, containing the manifest file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a license for the module, if we intend to distribute it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a module description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, add an icon to represent the module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this, we can install the module to confirm that it is available to the
    Odoo server and that it installs correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the addons path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An **addon module** is a directory containing an Odoo **manifest** file providing
    features, such as a new app or additional features for an existing app. An **addons
    directory** contains several addon modules. The **addons path** is an Odoo configuration,
    with a list of directories where the Odoo server will look for available addons.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the addons path includes the base apps bundled with Odoo, in the
    `odoo/addons` directory, and the base module providing the core features, in the
    `odoo/odoo/addons` directory. The addons path is usually modified to add one or
    more directories for the custom-developed and community modules we want to use.
  prefs: []
  type: TYPE_NORMAL
- en: The Library project will be composed of several modules. Doing so is a good
    practice since it promotes smaller more focused modules, helping reduce complexity.
    We will create an addons directory for the project's modules.
  prefs: []
  type: TYPE_NORMAL
- en: If the instructions in [*Chapter 2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049),
    *Preparing the Development Environment,* were followed, the Odoo server code should
    be at `~/work15/odoo/`. Custom addon modules should be kept in their own directory,
    separate from the Odoo code.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Library, we will create a `~/work15/library` directory and include
    it in the addons path. We can do this by editing the configuration file directly
    or by using the Odoo **command-line interface** (**CLI**). Here is how to do the
    latter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Right now, the Odoo command will return an error such as this: `odoo: error:
    option --addons-path: no such directory: ''/home/daniel/work15/library''`. This
    is because the directory is still empty, and Odoo is not able to find any addon
    module inside it. We won''t have this problem as soon as the skeleton for the
    first Library app module is created.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an explanation of the options used in the Odoo command:'
  prefs: []
  type: TYPE_NORMAL
- en: The `--addons-path` option sets a list of all the directories to use for Odoo
    modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--d` or `--database` option sets the database name to use. If the database
    doesn't exist, it will be created and initialized with Odoo's basic database schema.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--c` or `--config` option sets the configuration file to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--save` option used along with `-c` saves the options used in the configuration
    file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--stop` option, short for `--stop-after-init`, stops the Odoo server and
    returns to the command line once all actions are done and the start sequence is
    done.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If relative paths are used for the addons path option, Odoo will convert them
    to absolute paths before storing them in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 15
  prefs: []
  type: TYPE_NORMAL
- en: The configuration file created will use the default configuration as a template.
    In Linux systems, the default configuration file is the one at `~/.odoorc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Odoo `scaffold` command provides a quick way to create a new module skeleton.
    We can use it to populate the `library` addons directory with a valid module.
    To scaffold the `library_app` module directory, execute this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `scaffold` command expects two arguments—the module directory name and the
    path where to create it. For more details on the `scaffold` command, run `odoo
    scaffold --help`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can retry the command to save the configuration file, including the
    `~/work15/library/` addons directory, and it should run successfully now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The startup sequence''s first log messages summarize the settings being used.
    They include an `INFO ? odoo: Using configuration file at...` line identifying
    the configuration file being used and an `INFO ? odoo: addons paths: [...]` line
    listing the addons directories being considered. These are the first things to
    check when troubleshooting why Odoo is not discovering your custom module.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a module directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following the previous section, we should now have the `~/work15/library` directory
    for our Odoo modules and have included it in the Odoo addons path so that the
    Odoo server will be able to find modules in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous section, we also used the Odoo `scaffold` command to automatically
    create a skeleton structure for the new `library_app` module directory, with a
    basic structure already in place. Remembering the `scaffold` command, it looks
    like this: `odoo scaffold <module> <addons-directory>`. The module directory created
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The module directory name is its technical name. In this case, we used `library_app`
    for it. The technical name must be a valid Python **identifier** (**ID**)—it should
    begin with a letter and can only contain letters, numbers, and the underscore
    character.
  prefs: []
  type: TYPE_NORMAL
- en: It contains several subdirectories for the different components of the module.
    This subdirectory structure is not required, but it is a widely used convention.
  prefs: []
  type: TYPE_NORMAL
- en: A valid Odoo `addon` module directory must contain a `__manifest__.py` descriptor
    file. It also needs to be Python-importable, so it must also have an `__init__.py`
    file. These are the two first files we see in the directory tree.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: In older Odoo versions, the module manifest file was named `__openerp__.py`.
    This filename is still supported but is deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The manifest file contains a Python dictionary, with the attributes describing
    the module. The scaffold''s automatically generated manifest file should be similar
    to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The next section will discuss the manifest file in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: The `__init__.py` module file should trigger the import of all the module's
    Python files. More specifically, it should import the Python files at the module
    top level and import the subdirectories also containing Python files. Similarly,
    each of these subdirectories should also contain an `__init__.py` file, importing
    the Python assets in that subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the top `__init__.py` file generated by the `scaffold` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There are no Python files at the top level, and two subdirectories with Python
    files, `controllers`, and `models`. Reviewing the module tree, we can see that
    these two directories contain Python files and an `__init__.py` file each.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a manifest file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `scaffold` command prepared a manifest file that can be used as a guideline,
    or we can create a manifest file from an empty file.
  prefs: []
  type: TYPE_NORMAL
- en: The manifest file should be a valid Python file containing a dictionary. None
    of the possible dictionary keys is required, so an empty dictionary, `{}`, would
    be a valid content for the file. In practice, we want to at least provide some
    basic description of the module, assert authorship, and choose a distribution
    license.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following should be a good starting point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The keys used here provide all the data presented in the main tab of the app
    form, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Library Management module app form'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.1_B16119_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – Library Management module app form
  prefs: []
  type: TYPE_NORMAL
- en: 'We used the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: For the module title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`summary`: For a one-line summary of the purpose of the module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author`: For the name of the copyright author. It is a string but can contain
    a comma-separated list of names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`license`: This identifies the license under which the author allows the module
    to be distributed. `AGPL-3` and `LGPL-3` are popular open source choices. Proprietary
    modules sold through the Odoo Apps Store usually use the `OPL-1` Odoo proprietary
    license. Licenses are discussed in more detail later in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`website`: A **Uniform Resource Locator** (**URL**) to get more information
    about the module. This can help people find more documentation or the issue tracker
    to file bugs and suggestions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: The version of the module. It should follow semantic versioning
    rules (see [http://semver.org/](http://semver.org/) for details). It is a good
    practice to use the Odoo version before our module version since it helps identify
    the Odoo version the module targets. For example, a `1.0.0` module built for Odoo
    15.0 should carry version `15.0.1.0.0`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`depends`: A list of the addon modules it depends on. The installation of this
    module will trigger the installation of these dependencies. If the module has
    no particular dependencies, it is a common practice to have it depend on the `base`
    module, but this is not required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application`: A flag, declaring whether the module should be featured as an
    app in the apps list. Most extension modules, adding features to existing apps,
    will have this set to `False`. The Library management module is a new app, so
    we used `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dependencies list is something to be careful about. We should ensure all
    dependencies are explicitly set here; otherwise, the module may fail to install
    in a clean database install due to missing dependencies or have loading errors
    if, by chance, the other required modules are loaded later than ours, in the Odoo
    startup sequence. Both these cases can happen when deploying your work on other
    machines and can be time-consuming to identify and solve.
  prefs: []
  type: TYPE_NORMAL
- en: The `<div class="document">` line seen in *Figure 3.1* is for the long module
    description, now empty. Adding a description is discussed in a later section,
    *Adding a description*.
  prefs: []
  type: TYPE_NORMAL
- en: 'These other descriptor keys are also available, and used less often:'
  prefs: []
  type: TYPE_NORMAL
- en: '`installable`: Indicates if this module is available for installation. The
    default value is `True`, so we don''t need to explicitly set it. It can be set
    to `False` if for some reason we need to disable it but still keep its files in
    the addon directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto_install`: This can be set to `True`, and is used for **glue** modules.
    A glue module installation is triggered once all the dependencies are installed.
    For example, this can be used to automatically provide features that bridge two
    apps, once they are both installed in the same instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the module category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modules are grouped into categories, representing the function areas they relate
    to. These categories are used to group addon modules, and also the security groups.
  prefs: []
  type: TYPE_NORMAL
- en: If no category is set on the addon, the **Uncategorized** value will be assigned.
    This is right now the category for the Library app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see several categories on Odoo in the **Apps** menu, on the left side
    panel. There, we can see the categories that can be used for our modules, as illustrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Apps list with the CATEGORIES pane'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.2_B16119_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Apps list with the CATEGORIES pane
  prefs: []
  type: TYPE_NORMAL
- en: The categories can have a hierarchy—for example, the **Project** apps belong
    to the **Services/Project** category.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a non-existent category is used on an addon module, Odoo will automatically
    create it and make it available. We will take advantage of this to create a new
    category for the Library app: **Services/Library**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `__manifest__.py` file thus to add a `category` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Categories are also relevant for organizing security groups, and to reference
    them in **Extensible Markup Language** (**XML**) data files, we will need to use
    the corresponding XML ID.
  prefs: []
  type: TYPE_NORMAL
- en: The XML ID assigned to a module category is automatically generated from the
    `base.module_category_` prefix plus the category name. For example, for `base.module_category_services_library`.
  prefs: []
  type: TYPE_NORMAL
- en: We can confirm the XML ID for app categories by navigating to the corresponding
    form view and then using the **View Metadata** option in the developer menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no menu item for app categories, but the category form can be accessed
    from the security **Groups** form, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Settings** | **User** | **Groups** menu option and create a new test
    record.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select an option from the **Application** field drop-down list, and save. The
    process is illustrated in the following screenshot:![Figure 3.3 – Application
    selection list, in the User Group form
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_3.3_B16119_B16119.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.3 – Application selection list, in the User Group form
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Application** link to open the selected category's corresponding
    details form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the category form, select the **View Metadata** option in the developer menu
    to see the XML ID assigned to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may want to delete the test group if it is no longer of use to you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, the list of built-in categories and their XML IDs can be found
    in the Odoo source code. The GitHub URL is provided here: [https://github.com/odoo/odoo/blob/15.0/odoo/addons/base/data/ir_module_category_data.xml](https://github.com/odoo/odoo/blob/15.0/odoo/addons/base/data/ir_module_category_data.xml).'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a license
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Choosing a license for your work is important, and you should carefully consider
    which is the best choice for you, and its implications.
  prefs: []
  type: TYPE_NORMAL
- en: Software code is covered by copyright law, reserving to the authors the rights
    to use or modify the work. This will usually mean you individually or the company
    you are working for. For other parties to safely be allowed to use the work, they
    must have a license agreement with the code authors.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to make your code freely available, it needs to carry a license,
    stating what other people are allowed to do with your code. Different licenses
    will state different terms.
  prefs: []
  type: TYPE_NORMAL
- en: The most-used licenses for Odoo modules are version 3 of the **GNU's Not Unix**
    (**GNU**) **Lesser General Public License** (**LGPL-3**) and the **Affero General
    Public License** (**AGPL-3**). Both allow you to freely distribute and modify
    the work, as long as the authors are credited and the derived works are distributed
    under the same license conditions.
  prefs: []
  type: TYPE_NORMAL
- en: The AGPL is a strong open source license and requires online services using
    the code to share the source code with their users. This license is popular among
    the community because it forces derivative works to also be distributed under
    the AGPL terms. So, the open sourced code can't be incorporated in a closed commercial
    solution, and the original authors can benefit from the improvements made by other
    people.
  prefs: []
  type: TYPE_NORMAL
- en: The LGPL is more permissive than AGPL and also allows commercial modifications,
    without the need to share the corresponding source code. This license is usually
    chosen for web and system integration components, where solutions might contain
    components under private licenses, or under terms incompatible with AGPL.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about the GNU licenses at [https://www.gnu.org/licenses/](https://www.gnu.org/licenses/).
  prefs: []
  type: TYPE_NORMAL
- en: While you can sell GPL licensed apps, this is not a popular business model since
    the license allows people to freely copy and distribute the code. For this reason,
    many modules sold in the Odoo App Store prefer to use a proprietary license. Odoo
    proposes the Odoo proprietary license, `OPL-1`, for this.
  prefs: []
  type: TYPE_NORMAL
- en: More details on Odoo licenses can be found at [https://www.odoo.com/documentation/user/legal/licenses/licenses.html](https://www.odoo.com/documentation/user/legal/licenses/licenses.html).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A description is a long text presenting the module features. The description
    text supports the **reStructuredText** (**RST**) format to produce a rich text
    document.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about RST here: [https://docutils.sourceforge.io/rst.html](https://docutils.sourceforge.io/rst.html).
    The page includes a quick reference link that is worth bookmarking: [https://docutils.sourceforge.io/docs/user/rst/quickstart.html](https://docutils.sourceforge.io/docs/user/rst/quickstart.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a short sample of an RST document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: One way to add a description is to use the `description` key in the module manifest.
    Since chances are the description text will span multiple lines, it is best added
    inside triple quotes, `"""`, the Python syntax for multiline strings.
  prefs: []
  type: TYPE_NORMAL
- en: Source code published on websites such as GitHub is expected to include a README
    file, for visitors to easily find an introduction to the module. So, instead of
    the `description` manifest key, Odoo modules can have a `README.rst` or `README.md`
    file for the same purpose. This file should be placed at the root of the module
    directory, alongside the `__manifest__.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: Another alternative is to provide a `index.html` HTML file should be located
    in the `static/description/` module subdirectory. Page assets, such as images
    and **Cascading Style Sheets** (**CSS**), should also be located in that same
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For modules with the `application` key set to `True`, only the `index.html`
    description will be used, and the description key is ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an icon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modules can optionally have an icon representing them. In the case of modules
    creating a new app, this is particularly important, since the app is expected
    to have an icon in the **Apps** menu.
  prefs: []
  type: TYPE_NORMAL
- en: To add an icon, we need to add a `static/description/icon.png` file to the module,
    with the icon to be used.
  prefs: []
  type: TYPE_NORMAL
- en: For the Library app project, we will reuse an icon from the `library_app/static/description`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the command line, we would run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Installing a new module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have a minimal `addon` module. It doesn't implement any features yet,
    but we can install it to confirm that it is working properly so far.
  prefs: []
  type: TYPE_NORMAL
- en: To install a new module, we should start the server using both the `-d` and
    `-i` options. The `-d` or `--database` option ensures that we are working with
    the correct Odoo database. The `-i` or `--init` option accepts a comma-separated
    list of modules to install.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 11
  prefs: []
  type: TYPE_NORMAL
- en: When installing a new module, Odoo will automatically update the list of available
    modules from the currently configured addons paths. This was not so up to Odoo
    10, where the module list needed to be manually updated before a new addon module
    could be installed. The modules list is updated in the web client, from the menu
    option in the **Apps** list.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Odoo environment prepared earlier in this chapter and having activated
    the Python virtual environment, the following command installs the `library_app`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We added the `-d` library option to make sure that the correct database is selected
    for the installation. It could be the case that this option was already defined
    in the configuration file and is thus redundant. Even if that is the case, it
    is best to play safe and explicitly declare the database to install on in the
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'Pay close attention to the server log messages to confirm that the module was
    correctly found and installed. You should see an `odoo.addons.base.models.ir_module:
    ALLOW access to module.button_install` message and no warnings.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the module installation to be possible, the `addons` directory where the
    module is in should be known to the Odoo server. This can be confirmed by stopping
    and starting the Odoo server and looking at the `odoo: addons paths:` log message
    printed during the Odoo startup sequence.'
  prefs: []
  type: TYPE_NORMAL
- en: If the module is not found, that is often because the addons path is incorrect.
    Double-check that by taking a close look at the addons path being used.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developing a module is an iterative process, with changes made on source files
    that are then to be applied to Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: This can be done from the **graphical UI** (**GUI**) by looking up the module
    in the **Apps** list and clicking on the **Upgrade** button. This reloads the
    data files, applying the changes made, and updates the database schema definitions.
    However, when the changes are only in Python logic, the upgrade may not be sufficient.
    An Odoo server restart may be needed to reload the changed Python code. When the
    module changes are both data files and Python logic, both operations might be
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: When modifying models or their fields, an upgrade is needed to apply the database
    schema changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When changing logic Python code, a restart is needed to reload the code files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When changing XML or **comma-separated values** (**CSV**) files, an upgrade
    is needed to reapply the data in the files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To avoid any confusion or frustration related to having code changes applied
    to Odoo, the simplest solution is to restart the Odoo service with the module
    `upgrade` command after the code changes are made.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the terminal where the server instance is running, use *Ctrl* + *C* to stop
    it. Then, start the server and upgrade the `library_app` module using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `-u` option, `--update` in the long format, requires the `-d` option and
    accepts a comma-separated list of modules to update. For example, we could use
    `-u library_app,mail`. When a module is updated, all other installed modules depending
    on it are also updated.
  prefs: []
  type: TYPE_NORMAL
- en: Pressing the up arrow key brings to you the previous command that was used.
    So, most of the time, when repeating this action, you will find yourself using
    the *Ctrl* + *C*, up arrow, and *Enter* key combination.
  prefs: []
  type: TYPE_NORMAL
- en: In recent Odoo versions, the `--dev=all` developer-friendly mode is available,
    automating this workflow.  When this option is used, changes to data files will
    instantly be available to the running Odoo service, and Python code changes will
    trigger an Odoo code reload. For more details on this option, please refer to
    the *Using the server development options* section of [*Chapter 2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049),
    *Preparing the Development Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a module directory ready to host the components that implement the
    app. Since this is an app, and not a technical module adding a feature, we will
    start by adding a few basic components expected for apps.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 – Creating a new application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some Odoo modules create new applications, and others add features or modify
    existing applications. While the technical components involved are about the same,
    an app is expected to include a few characteristic elements. Since the Library
    module is a new app, we should include them in our module.
  prefs: []
  type: TYPE_NORMAL
- en: 'An app is expected to have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An icon, to be presented in the app list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A top-level menu item, under which all the app's menu items will be placed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security groups for the app so that it can be enabled only for users that need
    it, and where access security will be set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app icon is an `icon.png` file in the module's `static/description/` subdirectory.
    This was done earlier, in the *Adding an icon* section.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will take care of the app's top-level menu.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a top menu item
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we are creating a new app, it should have a main menu item. On the **Community
    Edition** **(CE)**, this is shown as a new entry in the top-left drop-down menu.
    On the **Enterprise Edition** **(EE)**, it is shown as an additional icon in the
    **App Switcher** main menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Menu items are view components added using XML data files. To define a menu
    item, create a `views/library_menu.xml` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The UI, including menu options and actions, has database stored records read
    and interpreted by the web client in real time.
  prefs: []
  type: TYPE_NORMAL
- en: The aforementioned file describes records to load into the Odoo database. The
    `<menuitem>` element is an instruction to write a record on the `ir.ui.menu` model,
    where Odoo menu items are stored.
  prefs: []
  type: TYPE_NORMAL
- en: The `id` attribute is also known as an `menu_library` XML ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'The menu item added here is very simple and is using only one attribute: `name`.
    There are other attributes available that we didn''t use here. We will learn more
    about them later in this chapter, in the *Implementing the backend view layer*
    section.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Library module does not know about this new XML data file yet. To be known
    and loaded into the Odoo instance, it needs to be declared in the `data` attribute
    of the manifest file. Edit the `__manifest__.py` file dictionary to add this key,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `data` manifest key is a list of the data files to be loaded by the module
    upon installation or upgrade. The file paths are relative to the module's root
    directory, where the manifest file is.
  prefs: []
  type: TYPE_NORMAL
- en: To load these menu configurations into our Odoo database, we need to upgrade
    the module. Doing that at this point won't have any visible effects. This menu
    item has no actionable submenu yet, and so won't be shown. It will be visible
    later, once we add submenus and the corresponding access permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Items in the menu tree are only shown if there are any visible submenu items.
    The lower-level menu items that open views will only be visible if the user has
    access to the corresponding model.
  prefs: []
  type: TYPE_NORMAL
- en: Adding security groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before features can be used by regular users, access must be granted to them.
    In Odoo, this is done using security **groups**. Access privileges are granted
    to security groups, and users are assigned security groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Odoo apps typically provide two groups for two levels of access, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A user access level, for users performing daily operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A manager access level, with full access to all features, including configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Library app will feature these two security groups. We will work on this
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Access-security-related files are usually kept in a `security/` module subdirectory,
    so we should create a `security/library_security.xml` file for these definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Security groups are organized in the same categories used for addon modules.
    To assign a category to a security group, we should find the corresponding XML
    ID. The way this XML ID can be found was discussed earlier in this chapter, in
    the *Setting the module category* section. There, we can learn that the XML ID
    for the `base.module_category_services_library`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will add the Library User security group. It belongs to the `module_library_category`,
    and it will inherit the internal user security permissions, building on top of
    them. If we open that group's form and use the developer menu `base.group_user`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add to the `security/library_security.xml` file with the following XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a lot going on here, so let''s slowly go through each of the elements
    here. This XML is adding one record to the groups model, `res.groups`. This record
    has values for three fields, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` is the group title. This is a simple string value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`category_id` is the related app. It is a relational field, so the `ref` attribute
    is used to link it to the category created before, using its XML ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`implied_ids` is a one-to-many relational field and contains a list of groups
    that will also apply to users belonging to this group. To-many fields use a special
    syntax that is detailed in [*Chapter 5*](B16119_05_Final_PD_ePub.xhtml#_idTextAnchor146),
    *Importing, Exporting, and Module Data*. In this case, we are using code `4` to
    add a link to the existing internal user XML ID, `base.group_user`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in Odoo 12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **User** form has a **User Type** section, only visible when the Developer
    Mode is enabled. It allows us to select between the mutually exclusive options—**Internal
    User**, **Portal** (external users, such as customers), and **Public** (website
    anonymous visitors). This was changed to avoid misconfigurations found in previous
    Odoo versions, where internal users could accidentally be included in the **Portal**
    or **Public** groups, effectively reducing their access privileges.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we will create a manager group. It should give us all the privileges of
    the user group, plus some additional access reserved to the manager. So, we want
    it to inherit from the `library_group_user` library user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Editing the `security/library_security.xml` file, add the following XML inside
    the `<odoo>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, we also see the `name`, `category_id`, and `implied_ids` fields, as before.
    The `implied_ids` field is set with a link to the **Library** user group, to inherit
    its privileges.
  prefs: []
  type: TYPE_NORMAL
- en: It is also setting values on the `users` field. This has this group assigned
    to the Administrator (`admin`) and the Odoobot users.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 12
  prefs: []
  type: TYPE_NORMAL
- en: Since Odoo 12, we have a system root user, which is not shown in the user list
    and is used internally by the framework when privilege elevation is needed (`sudo`).
    The `admin` user can be used to log in to the server and should have full access
    to all features but does bypass access security, as the system root does. On Odoo
    versions up to 11, the `admin` user was also the internal root superuser.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to have this additional XML data file in the manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `library_security.xml` file was added before `library_menu.xml`.
    The order used to load data files is important since references can only use IDs
    that have already been defined. It is common for menu items to reference security
    groups, and so it is a good practice to add security definitions before menu and
    view definitions.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to add the Python code defining the app models. But before
    that, we will add some test cases, following a **test-driven development** (**TDD**)
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 – Adding automated tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Programming best practices include having automated tests for your code. This
    is even more important for dynamic languages such as Python—since there is no
    compilation step, you can't be sure there are no syntactic errors until the interpreter
    runs the code. A good editor can help us detect some of these problems ahead of
    time but can't help us ensure the code performs as intended, as automated tests
    can.
  prefs: []
  type: TYPE_NORMAL
- en: The TDD method states that we should write tests upfront, check that they fail,
    then develop code that, in the end, should pass the tests. Inspired by this approach,
    we will add our module tests now before we add the actual features.
  prefs: []
  type: TYPE_NORMAL
- en: Odoo supports automated tests, based on Python's built-in `unittest` library.
    Here, we will have a quick introduction to automated tests, and a longer explanation
    is provided in [*Chapter 8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227),
    *Business Logic – Supporting Business Processes*.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 12
  prefs: []
  type: TYPE_NORMAL
- en: Until Odoo 11, tests could also be described using **YAML Ain't Markup Language**
    (**YAML**) data files. YAML data-file support was removed in Odoo 12, so this
    kind of test is not available anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tests need to meet a few requirements to be found and executed by the test
    runner, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Tests are placed in the `tests/` subdirectory. Unlike regular module Python
    code, this directory does not need to be imported into the top level `__init__.py`
    file. The test-running engine will look for these test directories in modules,
    and then run them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The test code files should have a name starting with `test_` and should be imported
    from `tests/__init__.py`. The test code will be in classes derived from one of
    the several test objects available in the Odoo framework, imported from `odoo.tests.common`.
    The most frequently used test class is `TransactionCase`. The test objects use
    the `setUp()` method to initialize the data used by the test cases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each test case is a method with a name starting with `test_`. For the `TrasactionCase`
    test object, each test is an independent transaction, running the setup step before,
    and rolling it back at the end. So, the next step won't see the changes made by
    the previous test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tests can use demonstration data for an easier setup phase, but this is not
    a good practice since test cases can then only run in databases with demo data
    installed. If all the test data is prepared in the test setup, then the test can
    run in any database, including empty databases or copies of production databases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We plan for our app to have a `library.book` model. Let's add a simple test
    to confirm that a new book has been created correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Adding test cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add a simple test to check book creation. For this, we need to add some
    setup data and add a test case. The test case will just confirm that the `active`
    field has the expected default value, `True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `tests/__init__.py` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the actual test code, available in the `tests/test_book.py` file,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `setUp()` function gets a pointer to the `Book` model object and uses it
    to create a new book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `test_book_create` test case adds a simple test case, checking that the
    created book has the expected default value for the `active` field. It would make
    sense for the book to be created in the test case, instead of in the setup method.
    The reason we chose not to do this is that we want to also use this book for other
    test cases, and having it created in the setup avoids duplicating that code.
  prefs: []
  type: TYPE_NORMAL
- en: Running tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tests are run starting the server with the `--test-enable` option while installing
    or upgrading the module, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The Odoo server will look for a `tests/` subdirectory in the upgraded modules
    and will run them. At this point, the tests are expected to throw an error, so
    you should see `ERROR` messages related to the tests in the server log. This should
    change once we add the book model to the module.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we should add tests for the business logic. Ideally, we want every line
    of code to be covered by at least one test case.
  prefs: []
  type: TYPE_NORMAL
- en: Testing business logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We plan to have logic checking for a valid ISBN. So, we will add a test case
    to check that the method correctly validates the ISBN for the *Odoo Development
    Essentials* first edition book. The check will be implemented by a `_check_isbn()`
    method, returning `True` or `False`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `tests/test_book.py`, add a few more lines of code after the `test_create()`
    method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It is recommended to write a different test case for each action to check. Remember
    that when using the `TransactionCase` test, each test will run independently from
    the others, and the data created or changed during one test case is rolled back
    when it ends.
  prefs: []
  type: TYPE_NORMAL
- en: Note that if we run the tests now they should fail, since the tested features
    have not been implemented yet.
  prefs: []
  type: TYPE_NORMAL
- en: Testing access security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Access security can also be checked to confirm that users have the correct privileges
    granted.
  prefs: []
  type: TYPE_NORMAL
- en: By default, tests are executed with the Odoo internal user, `__system__`, which
    bypasses access security. So, we need to change the user running the tests, to
    check whether the right access security has been given to them. This is done by
    modifying the execution environment, `self.env`, setting the `user` attribute
    to the user we want to run the tests with.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can modify our tests to take this into account. Edit the `tests/test_book.py`
    file to add a `setUp` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We added two lines to the `setUp` method. This first one finds the `admin` user
    record, using its XML ID. The second line modifies the environment used to run
    the tests, `self.env`, changing the active user to the `admin` user.
  prefs: []
  type: TYPE_NORMAL
- en: No further changes are needed for the tests we already wrote. They will run
    in the same way, but now using the `admin` user, because of the modified environment.
  prefs: []
  type: TYPE_NORMAL
- en: The Library app now has a couple of basic tests, but they are failing. Next,
    we should add the code implementing the features, to make the tests pass.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 – Implementing the model layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Models describe and store business object data, such as a **customer relationship
    management** (**CRM**) opportunity, sales order, or a partner (customer, supplier,
    and so on). A **model** describes a list of **fields** and can also have specific
    business logic attached to it.
  prefs: []
  type: TYPE_NORMAL
- en: Model data structure and attached business logic are described with Python code,
    using an object class derived from an Odoo template class. A model maps to a database
    table, and the Odoo framework takes care of all the database interactions, both
    in keeping the database structure in sync with the object and in translating all
    transactions to database instructions. The framework component responsible for
    this is the **object-relational mapping** (**ORM**) component.
  prefs: []
  type: TYPE_NORMAL
- en: Our application will be used to manage a library, and we need a model for the
    book catalog.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following the Odoo development guidelines, the Python files for models should
    be placed inside a `models` subdirectory, and there should be one file for each
    model. So, we will create a `models/library_book.py` file in the `library_app`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The Odoo official coding guidelines can be found at [http://www.odoo.com/documentation/15.0/reference/guidelines.html](http://www.odoo.com/documentation/15.0/reference/guidelines.html).
    Another relevant coding standards document is the **Odoo Community Association**
    (**OCA**) coding guidelines, which can be found at https://odoo-community.org/page/contributing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing is to have the `models/` directory used by our module. This
    means that it should be imported by Python when the module is loaded by Odoo.
    For this, edit the module''s main `__init__.py` file so that it contains this
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, the `models/` subdirectory should contain an `__init__.py` file
    importing the code file to use. Add a `models/__init__.py` file containing the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can create a `models/library_book.py` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The first line is a Python code `import` statement, to make the `models` and
    `fields` Odoo core objects available.
  prefs: []
  type: TYPE_NORMAL
- en: The second line declares the new `library.book` model. This is a Python class
    derived from `models.Model`.
  prefs: []
  type: TYPE_NORMAL
- en: The next lines are indented. Python code blocks are defined by indentation levels,
    so this means that these next lines are part of the `Book` class definition. The
    class name uses CamelCase, as that is the usual convention for Python. The actual
    Python class name used is irrelevant for the Odoo framework. The model ID relevant
    for Odoo is the `_name` attribute, declared in the next line.
  prefs: []
  type: TYPE_NORMAL
- en: The two next lines start with an underscore and declare some Odoo class attributes.
    The `_name` attribute defines the `.`) to separate their keywords.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'Model IDs use dot-separated words. Everything else uses underscores (`_`):
    addon module names, XML IDs, table names, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, we have the `_description` model attribute. This is a display name for
    the model records that can be used in some user messages to refer to a record.
    It is not mandatory but will display a warning message in the server log if it
    is missing.
  prefs: []
  type: TYPE_NORMAL
- en: The last seven lines declare model fields. We can see a sample of the most frequently
    used field types. For scalar values, we can see the `Char`, `Boolean`, `Date`,
    and `Binary` field types being used. For relational fields, we can see `Many2one`
    and `Many2many`.
  prefs: []
  type: TYPE_NORMAL
- en: The `name` field is used for the data record title—in this case, the book title.
  prefs: []
  type: TYPE_NORMAL
- en: The `active` field is used for active records. By default, only active records
    are shown, and inactive records are automatically hidden. This is useful on master
    data models to hide away records that are no longer in use but, for historical
    reasons, need to be kept in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '`name` and `active` are special field names. By default, the Odoo framework
    makes special use of them. The `name` field is used by default for the record
    display name the text shows when a record is referenced from another model. The
    `active` field is used to filter out inactive records from the UI.'
  prefs: []
  type: TYPE_NORMAL
- en: '`publisher_id` is a `res.partner` partner model in this case. It is used to
    reference the publishing company. The convention is for many-to-one field names
    to end with `_id`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`author_ids` is a `res.partner` partner model. At the database level, this
    data is not actually stored in a table field but in a helper table, automatically
    created to store the relations between records in the two tables. The convention
    is for to-many field names to end with `_ids`.'
  prefs: []
  type: TYPE_NORMAL
- en: These are two different relations, both between the book and the partner models.
    The partner model is built into the Odoo framework and is where people, companies,
    and addresses should be stored. We are using it to store both our publishers and
    authors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we make these changes effective in Odoo by upgrading the Library app module.
    Again, this is the command we can run to update the `library_app` module on the
    `library` database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'There are no menu items yet to access the book model. These will be added later
    in the chapter. Still, to inspect the newly created model and confirm it was properly
    created in the database, we can use the `library.book` model and click on it to
    see its definition, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – The library.book model view in the Technical menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.4_B16119_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – The library.book model view in the Technical menu
  prefs: []
  type: TYPE_NORMAL
- en: We should be able to see the model listed, and confirm that it contains the
    fields we defined in the Python file. If you can't see this, try again a server
    restart with a module upgrade, and pay close attention to the server log, looking
    for the messages loading the Library app, and for any warnings reporting issues
    with the Odoo database.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `library.book` field list, we can see some additional fields that we
    didn''t declare. These are special fields that Odoo automatically adds to every
    model. They are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id` is a unique numeric database ID for each record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_date` and `create_uid` are the record creation timestamp and the user
    who created the record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display_name` provides a textual representation for the record used—for example,
    when it is referenced in other records. It is a computed field and, by default,
    just uses the text in the `name` field, if available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`write_date` and `write_uid` are the record''s last modification timestamp
    and the user who did that update.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__last_update` is a computed field not stored in the database and is used
    for concurrency checks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The book model is now created in the database, but it is not yet available to
    users. We need a menu item for that, but that won't be enough. For the menu item
    to be visible, users first need to be granted access to the new model.
  prefs: []
  type: TYPE_NORMAL
- en: Step 5 – Setting up access security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `library.book` model was created as the database, but you might have noticed
    that when it is loaded, it prints this warning message to the server log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The message is pretty clear—the new model has no access rules, and so it can't
    be used by anyone yet. Earlier, we created the security groups for this app, and
    we now need to give them access to the app's models.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 12
  prefs: []
  type: TYPE_NORMAL
- en: The `admin` user follows access security rules, just as with any other user,
    except for the root-like internal superuser. We need to grant it access to new
    models before it can use them. This was not the case up to Odoo 11\. In these
    earlier Odoo versions, the `admin` user was also the internal superuser and bypassed
    access security rules. This means that newly created models were automatically
    available and usable to it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding access control security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get a picture of what information is needed to add access rules to a model,
    on the web client, navigate to **Settings** | **Technical** | **Security** | **Access
    Rights**, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Access Rights list, in the Technical menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.5_B16119_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – Access Rights list, in the Technical menu
  prefs: []
  type: TYPE_NORMAL
- en: 'These access rights are also referred to as an **access control list** or **ACL**.
    In the previous screenshot, we can see the ACL for some models. It indicates,
    for a security group, what kinds of actions are allowed on records: read, write,
    create, and delete.'
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 14
  prefs: []
  type: TYPE_NORMAL
- en: Transient models, used for interactive wizards, now also need to be provided
    access rights to user groups. In previous Odoo versions, this was not so, and
    users had access to these models by default. The recommendation is to grant read,
    write and create rights and not grant delete/unlink rights (`1,1,1,0` on CSV files).
  prefs: []
  type: TYPE_NORMAL
- en: For the Library app, we will grant library users access to read, write, and
    create book records, and grant full access to library managers, including deleting
    records.
  prefs: []
  type: TYPE_NORMAL
- en: This data can be provided by a module data file, loading records into the `ir.model.access`
    model. The filename for CSV data files must match the model ID we are loading
    data into.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we should add the `security/ir.model.access.csv` file, with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line of the file has the field names. These are the columns provided
    in our CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id` is the record''s external ID (also known as XML ID). It should be unique
    in our module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` is a descriptive title. It is informative and it is recommended for
    it to be unique.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_id` is the external ID for the model we are giving access to. Models
    have XML IDs automatically generated by the ORM; for `library.book`, the ID is
    `model_library_book`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_id` identifies the security group to give permissions to. We grant access
    to the security groups created before: `library_group_user` and `library_group_manager`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `perm_...` fields grant access to the `read`, `write`, `create`, or `unlink`
    (delete) operations. We used `1` for `yes`/`true` and `0` for `no`/`false`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We must not forget to reference this new file in the `data` key in the `__manifest__.py`
    file. It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: As before, upgrade the module to make these changes effective in the Odoo database.
    The warning message should be gone.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the books model is available and should be accessible to the
    `admin` user. So, the first of our tests should be passing. Let''s run it now,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We should see one test pass and one test fail.
  prefs: []
  type: TYPE_NORMAL
- en: The ACL **Access Rights** option grants permissions at the model level, but
    Odoo also supports row-level access security, through **Record Rules**. This feature
    is explained in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Row-level access rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Record rules define filters limiting the records a security group can access.
    For example, a salesperson could be limited to seeing only their own quotations,
    or an accounting user could be limited to seeing only accounting entries for the
    company they were given access to.
  prefs: []
  type: TYPE_NORMAL
- en: To showcase this feature, we will limit library users to not be able to see
    inactive books. It is true that by default these are hidden, but they are still
    accessible if we filter the records with an `active` equals `True` condition.
  prefs: []
  type: TYPE_NORMAL
- en: '`ir.rule` model.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Record rule definition fields needed are outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: A distinctive title, preferably unique.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_id`: A reference to the model that the rule applies to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groups`: A reference to the security group the rule applies to. This field
    is optional, and if not set it is considered a global rule (the `global` field
    is automatically set to `True`). Global rules behave differently—they impose restrictions
    that non-global rules can''t override. It uses a specific syntax to write on to-many
    fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`domain_force`: The domain filter to use for the access restriction, using
    a list of tuples syntax for filter expressions used by Odoo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To add a record rule to the Library app, edit the `security/library_security.xml`
    file to add a second `<data>` section, just before the `</odoo>` final tag, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The record rule is inside a `<data noupdate="1">` element, meaning that those
    records will be created on module install but won't be rewritten on module updates.
    The point is to allow these rules to be later customized without the risk of those
    customizations having a module upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: While developing, `noupdate="1"` data sections can be a nuisance since later
    fixes and changes won't be updated on module upgrade. There are two ways to work
    around this. One is to temporarily work with `noupdate="0"` during development,
    and change it to the final `noupdate="1"` when you're finished. The second way
    is to reinstall the module instead of upgrading. This is possible in the command
    line, using `-i` instead of `-u` on an already installed module.
  prefs: []
  type: TYPE_NORMAL
- en: The `groups` field is a many-to-many relation and uses a special syntax needed
    for the to-many fields. It is a list of tuples, where each tuple is a command.
    In this case, a `(4, x)` command was used, and the code `4` means that the record
    referenced next is to be appended to the values. The referenced record is `library_group_user`,
    the Library user group. The to-many field write syntax is discussed in more detail
    in [*Chapter 6*](B16119_06_Final_PD_ePub.xhtml#_idTextAnchor164), *Models – Structuring
    the Application Data*.
  prefs: []
  type: TYPE_NORMAL
- en: The domain expression also uses a special syntax, with a list of triples, each
    specifying a filter condition. The domain filter syntax is explained in [*Chapter
    7*](B16119_07_Final_PD_ePub.xhtml#_idTextAnchor194), *Recordsets — Working with
    Model Data*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that users can access the book model, we can go ahead with adding the UI,
    starting with the menu items.
  prefs: []
  type: TYPE_NORMAL
- en: Step 6 – Implementing the backend view layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The view layer describes the UI. Views are defined using XML, which is used
    by the web client framework to dynamically generate data-aware HTML views.
  prefs: []
  type: TYPE_NORMAL
- en: '**Menu items** can execute **window actions** to render **views**. For example,
    the **Users** menu item processes a window action, also called **Users**, that
    in turn renders a **view** composition, with a **list** and a **form**.'
  prefs: []
  type: TYPE_NORMAL
- en: Several view types are available. The three most commonly used views are the
    **List** (sometimes called **tree** for historical reasons), the **Form**, and
    the **Search** options available in the top-right search box.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the next sections, we will make gradual improvements and will need
    frequent module upgrades to make them available, or we can use the `--dev=all`
    server option, which spares us from module upgrades while developing. Using it,
    the view definitions are read directly from the XML files, and the changes made
    are immediately available to Odoo without the need for a module upgrade. In [*Chapter
    2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049), *Preparing the Development
    Environment*, more details are given on the `--dev` server option.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If a module upgrade fails because of an XML error, don't panic! Carefully read
    the error message in the server log. It should point you to where the problem
    is. If you feel in trouble, just comment out the last edited XML portions or remove
    the XML file from `__manifest__.py` and repeat the upgrade. The server should
    then start correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Following the Odoo development guidelines, the XML files for the UI should be
    inside a `views/` subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start creating a UI for our to-do application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding menu items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Library app now has the model to store book data, and we want to have it
    available on the UI. The first thing to do is add the corresponding menu options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views/library_menu.xml` file and add the records for the window action
    and the menu item for the books model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This data file describes two records to add to Odoo, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<record>` element defines a client-side window action, to open the `library.book`
    model with the `tree` and `form` views enabled, in that order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<menuitem>` for `Books`, running the `action_library_book` action, defined
    before.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading the Library app now will make these changes available. A browser page
    reload might be needed to see the new menu items. Once this is done, the **Library**
    top menu should be available in Odoo, having a **Books** submenu option.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we haven't defined our UI view, Odoo provides automatically generated
    views, allowing us to start browsing and editing data right away.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the **Library** | **Books** menu item will display a basic list
    view, and clicking on the **Create** button will show a form like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Automatically generated form view for Library Books'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.6_B16119_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – Automatically generated form view for Library Books
  prefs: []
  type: TYPE_NORMAL
- en: Odoo provides automatically generated views for us, but they're not that great.
    We might take this into our own hands and create our views, starting with the
    book form view.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a form view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Views are data records stored in the database, in the `ir.ui.view` model. So,
    we need to add a data file, with a `<record>` element describing the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this new `views/book_view.xml` file to define the form view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ir.ui.view` record has a record `id` field that defines an XML ID that
    can be used for other records to reference it. The view record sets values for
    three fields: `name`, `model`, and `arch`.'
  prefs: []
  type: TYPE_NORMAL
- en: The view is for the `library.book` model and is named `Book Form`. The name
    is just for information purposes. It does not have to be unique, but it should
    allow you to easily identify which record it refers to. In fact, the name can
    be entirely omitted; in that case, it will be automatically generated from the
    model name and the view type.
  prefs: []
  type: TYPE_NORMAL
- en: The most important field is `arch` as it contains the actual view definition,
    and this needs closer examination.
  prefs: []
  type: TYPE_NORMAL
- en: The first element of the view definition is the `<form>` tag. It declares the
    type of view we are defining and the remaining elements that should be contained
    in it.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we define sections inside the form, using  `<group>` elements. These may
    contain can contain `<field>` elements or other elements, including nested group
    elements. A group adds an invisible grid with two columns, perfect for fields
    because, by default, they occupy two columns, one for the label text, and another
    for the input field.
  prefs: []
  type: TYPE_NORMAL
- en: Our simple form contains a single `<group>` element, and inside it, we added
    a `<field>` element for each of the fields to be presented. The fields automatically
    use an appropriate default widget, such as a date selection widget for date fields.
    In some cases, we might want to use a specific widget, adding the `widget` attribute.
    That was the case for `author_ids`, using a widget to display the authors as a
    list of tags, and the `image` field, using a widget appropriate for handling images.
    A detailed explanation of view elements is provided in [*Chapter 10*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287),
    *Backend Views – Designing the User Interface*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember to add this new file to the `data` key in the manifest file; otherwise,
    our module won''t know about it and it won''t be loaded. Here''s the code you''ll
    need to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The views will usually go after the security files, and before the menu file.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that for the changes to be loaded to our Odoo database, a module upgrade
    is needed. To see the changes in the web client, the form needs to be reloaded.
    Either click again on the menu option that opens it or reload the browser page
    (*F5* in most browsers).
  prefs: []
  type: TYPE_NORMAL
- en: Business document form views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The preceding section provided a basic form view, but we can make some improvements
    to it. For document models, Odoo has a presentation style that mimics a paper
    page. This form contains two top elements: a `<header>` element, to contain action
    buttons, and a `<sheet>` element, to contain data fields.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use this and modify the basic `<form>` element defined in the previous
    section with this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Forms can feature buttons, used to perform actions. These buttons can run a
    window action, usually opening another form, or run a Python class method. Buttons
    can be placed inside a `<header>` section at the top, or anywhere inside a form.
    Let's see how.
  prefs: []
  type: TYPE_NORMAL
- en: Adding action buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will showcase a button in the header that checks if the book ISBN is valid.
    The code for this will be in a method of the book model that we will name `button_check_isbn()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We haven''t added the method, but we can already add the corresponding button
    to the form, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The basic attributes of a button are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string`: The UI text to display on the button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: The type of action it performs, `object` or `action`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is the ID of the action that is run. For `object`, `type` is the
    method name; for `action`, this is the action record ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class`: This is an optional attribute to apply CSS styles, as in regular HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using groups to organize forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<group>` tag allows us to organize the form content. A `<group>` element
    creates an invisible grid with two columns. Field elements added inside it will
    be vertically stacked, as each field takes up two cells—one for the label and
    another for the input box. Adding two `<group>` elements inside a `<group>` element
    creates a layout with two columns of fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use this to organize the book form. We will change the `<sheet>` content
    to match this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The `<group>` elements used have a `name` attribute assigning an ID to them.
    This is not required but is advised, since it makes it easier for them to be referenced
    by extension views.
  prefs: []
  type: TYPE_NORMAL
- en: The complete form view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, the XML definition for the book form view should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The action buttons don't work yet, since we still need to add their business
    logic. This will be done later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding list and search views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: List views are defined using a `<tree>` view type. Their structure is quite
    straightforward. The `<tree>` top element should include the fields to present
    as columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add the following `<tree>` view definition to `book_view.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This defines a list with four columns: `name`, `author_ids`, `publisher_id`,
    and `date_published`.'
  prefs: []
  type: TYPE_NORMAL
- en: At the top-right corner of the list, Odoo displays a search box. The fields
    it searches in and the available filters are defined by a `<search>` view.
  prefs: []
  type: TYPE_NORMAL
- en: 'As before, we will add this to `book_view.xml`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This search view is using two different elements, `<field>` and `<filter>`.
  prefs: []
  type: TYPE_NORMAL
- en: The `<field>` elements define fields that are automatically searched when the
    user is typing in the search box. We added `publisher_id` to automatically show
    search results for the publisher field. The `<filter>` elements add predefined
    filter conditions, which can be toggled with a user click. The filter condition
    uses the Odoo domain filter syntax. Domain filters are addressed in more detail
    in [*Chapter 10*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287), *Backend Views
    — Designing the User Interface.*
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 12
  prefs: []
  type: TYPE_NORMAL
- en: '`<filter>` elements are now required to have a `name="..."` attribute, uniquely
    identifying each filter definition. If it''s missing, the XML validation will
    fail and the module will not install or upgrade.'
  prefs: []
  type: TYPE_NORMAL
- en: We now have the Library app's basic components in place—the model and the view
    layers. Next, we add the business logic layer, adding the code that will make
    the **Check ISBN** button work.
  prefs: []
  type: TYPE_NORMAL
- en: Step 7 – Implementing the business logic layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The business logic layer supports the application's business rules, such as
    validations and automation. We will now add the logic for the `library.book` model.
  prefs: []
  type: TYPE_NORMAL
- en: Adding business logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modern ISBNs have 13 digits, the last of which is a check digit computed from
    the first 12\. If `digits` contains the first 12 digits, this Python code returns
    the corresponding check digit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code, with some adjustments, will be at the heart of our validation
    function. It should be a method in the `class Book(...)` object. We will add a
    method that checks a record''s ISBN and returns `True` or `False`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Note that this method is not directly usable from the **Form** button, because
    it doesn't provide any visual cue of the result. Next, we will add a second method
    for that.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 13
  prefs: []
  type: TYPE_NORMAL
- en: The `@api.multi` decorator was removed from the Odoo **application programming
    interface** (**API**) and can't be used. Note that for previous Odoo versions,
    this decorator was available, but not necessary. Adding it or not would have the
    exact same effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'To report validation issues to the user, we will use the Odoo `ValidationError`
    exception, so the first thing to do is to make it available by importing it. Edit
    the `models/library_book.py` Python file to add this at the top of the file, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, still in the `models/library_book.py` file, add the following code to
    the `Book` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Here, `self` represents a recordset, and we can loop through each record and
    perform a check on each.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in a `self` to be a single record and have no need to use
    the `for` loop. In fact, we did something similar with the `_check_isbn()` helper
    method. If you're going this way, it is recommended to add `self.ensure_one()`
    at the beginning of the method, to fail early if for some reason `self` is not
    a single record.
  prefs: []
  type: TYPE_NORMAL
- en: But we chose to use a `for` loop to support multiple records, making our code
    capable of performing mass validations if we want to have that feature later on.
  prefs: []
  type: TYPE_NORMAL
- en: The code loops through all the selected book task records and, for each one,
    if the book ISBN has a value, it checks if it is valid. If not, a warning message
    is raised for the user.
  prefs: []
  type: TYPE_NORMAL
- en: The `Model` method does not need to return anything, but we should have it at
    least return a `True` value. The reason is that not all client implementations
    of the XML-**Remote Procedure Call** (**RPC**) protocol support None/Null values,
    and may raise errors when such a value is returned by a method.
  prefs: []
  type: TYPE_NORMAL
- en: This is a good moment to upgrade the module and run the tests again, adding
    the `--test-enable` option to confirm that tests are now passing. You can also
    try it live, going into a book form and trying the button with both correct and
    incorrect ISBNs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Library app has all the backend features we wanted to add for its first
    iteration, and we implemented the Odoo components at the several layers: model,
    view, and business logic. But Odoo also supports creating external-facing web
    pages. In the next section, we will create our first Odoo website page.'
  prefs: []
  type: TYPE_NORMAL
- en: Step 8 – Implementing the website UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo also provides a web development framework, to develop website features
    closely integrated with the backend apps. We will take our first steps toward
    this by creating a simple web page to display a list of active books in our library.
  prefs: []
  type: TYPE_NORMAL
- en: The book catalog page will respond to web requests at the `http://my-server/library/books`
    address, so `/library/books` is the URL endpoint we want to implement.
  prefs: []
  type: TYPE_NORMAL
- en: Web `http.Controller` derived class. The method is bound to one or more URL
    endpoints using the `@http.route` controller. When any of these URL endpoints
    are accessed, the controller code executes and returns the HTML to be presented
    to the user. The HTML rendering will usually be done using the QWeb templating
    engine.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the endpoint controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Code for controllers is expected to be inside a `/controllers` subdirectory.
    To add a controller, first edit the  `library_app/__init__.py` file to have it
    also import the `controllers` subdirectory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add a `library_app/controllers/__init__.py` file so that this directory
    can be Python-imported, and add an `import` statement to it for the `main.py`
    Python file we will implement the controller with, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the actual file for the controller, `library_app/controllers/main.py`,
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The first line imports the `odoo.http` module, the core framework component
    providing web-related features. Next, we create a controller object class, derived
    from `http.Controller`.
  prefs: []
  type: TYPE_NORMAL
- en: The particular ID name we choose for the class and for its methods is not relevant.
    The `@http.route` decorator is important since it declares the URL endpoint to
    be bound—`/books` in this case. For now, the web page is using the default access
    control and requires a user login.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the controller method, we can access the run environment using `http.request.env`.
    We use it to get a recordset with all active books in the catalog.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is to use `http.request.render()` to process the `library_app.index_template`
    QWeb template and generate the output HTML. We can make values available to the
    template through a dictionary, and this was used to pass the `books` recordset.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we now restart the Odoo server to reload the Python code and try accessing
    the `/library/books` URL, we should get an error message in the server log: `ValueError:
    External ID not found in the system: library_app.book_list_template`. This is
    expected since we haven''t defined that template yet. That should be our next
    step.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a QWeb template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'QWeb templates are also stored along with the other Odoo views, and the corresponding
    data files are usually stored in the  `/views` subdirectory. Let''s add the `views/book_list_template.xml`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The `<template>` element declares a QWeb template. In fact, it is a shortcut
    for an `ir.ui.view` record, the base model where templates are stored. The template
    contains the HTML to use and uses QWeb-specific tags and attributes.
  prefs: []
  type: TYPE_NORMAL
- en: The `t-foreach` attribute is used to loop through the items in the `books` variable
    that was made available to the template by the controller's `http.request.render()`
    call. The `t-field` attribute takes care of properly rendering the content of
    an Odoo record field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The QWeb template data file needs to be declared in the module manifest, as
    with any other XML data file, so that it gets loaded and can be made available.
    So, the `__manifest__.py` file should be edited to add it, as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'After declaring the XML file in the manifest and performing a module upgrade,
    the web page should be working. Opening the `http://<my-server>:8069/library/books`
    URL with an active Odoo login should show us a simple list of the available books,
    as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Web page with a book list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.7_B16119_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – Web page with a book list
  prefs: []
  type: TYPE_NORMAL
- en: This is a short overview of the Odoo web page features. These features are discussed
    in more depth in [*Chapter 13*](B16119_13_Final_PD_ePub.xhtml#_idTextAnchor379),
    *Creating Web and Portal Frontend Features*.
  prefs: []
  type: TYPE_NORMAL
- en: Quick reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the components are discussed in more detail in other chapters, and
    quick references are provided there, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049), *Preparing the
    Development Environment*, for the CLI `install` and `upgrade` modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B16119_05_Final_PD_ePub.xhtml#_idTextAnchor146), *Importing,
    Exporting, and Module Data*, for creating XML and CSV data files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B16119_06_Final_PD_ePub.xhtml#_idTextAnchor164), *Models – Structuring
    the Application Data*, for the model layer, defining models and fields'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B16119_07_Final_PD_ePub.xhtml#_idTextAnchor194), *Recordsets
    – Working with Model Data*, for domain filter syntax and recordset manipulation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227), *Business Logic
    – Supporting Business Processes*, for Python method business logic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287), *Backend Views
    – Designing the User Interface*, for views, including window actions, menu items,
    forms, lists, and searches'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B16119_13_Final_PD_ePub.xhtml#_idTextAnchor379), *Creating Web
    and Portal Frontend Features*, for web controllers and QWeb syntax'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not explained further elsewhere is access security, and we provide here a quick
    reference for those components.
  prefs: []
  type: TYPE_NORMAL
- en: Access security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Internal system models are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`res.groups`: `name`, `implied_ids`, `users`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res.users`: `name`, `groups_id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.model.access`: `name`, `model_id`, `group_id`, `perm_read`, `perm_write`,
    `perm_create`, `perm_unlink`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.access.rule`: `name`, `model_id`, `groups`, `domain_force`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'XML IDs for the most relevant security groups are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`base.group_user`: **internal user**—any backend user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`base.group_system`: **Settings**—the Administrator belongs to this group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`base.group_no_one`: **technical feature**, usually used to make features not
    visible to users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`base.group_public`: **Public**, used to make features accessible to web anonymous
    users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'XML IDs for the default users provided by Odoo are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`base.user_root`: The root system superuser, also known as `OdooBot`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`base.user_admin`: The default user, by default named `Administrator`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`base.default_user`: The template used for new backend users. It is a template
    and is inactive, but can be duplicated to create new users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`base.default_public user`: The template used to create new portal users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created a new module from scratch, covering the essential components involved
    in a module—models, access security, menus, the three basic types of views (form,
    list, and search), and business logic in model methods. We also learned how to
    create web pages using web controllers and QWeb templates.
  prefs: []
  type: TYPE_NORMAL
- en: In the process, we got familiar with the module-development process, which involves
    module upgrades and application-server restarts to make gradual changes effective
    in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Always remember, when adding model fields, an upgrade is needed. When changing
    Python code, including the manifest file, a restart is needed. When changing XML
    or CSV files, an upgrade is needed; also, when in doubt, do both: restart the
    server and upgrade the modules.'
  prefs: []
  type: TYPE_NORMAL
- en: We've gone through the essential elements and steps to create a new Odoo app.
    But in most cases, our modules will be extending existing apps to add features.
    This is what we will learn about in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs: []
  type: TYPE_NORMAL
- en: All of the Odoo-specific topics presented here will be covered in more depth
    in the remaining chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The official documentation offers some relevant resources that make good complementary
    reading, as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *Building a Module* tutorial: [https://www.odoo.com/documentation/15.0/howtos/backend.html](https://www.odoo.com/documentation/15.0/howtos/backend.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *Odoo Guidelines* provide a list of code conventions and guidelines for
    module development: [https://www.odoo.com/documentation/15.0/reference/guidelines.html](https://www.odoo.com/documentation/15.0/reference/guidelines.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *Odoo Community Association Guidelines* provide a good resource for Odoo
    development best practices: [https://odoo-community.org/page/contributing](https://odoo-community.org/page/contributing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Learning Python is important for Odoo development. There are some good Python
    books from the *Packt* catalog, such as *Learn Python Programming – Second Edition*:
    [https://www.packtpub.com/application-development/learn-python-programming-second-edition](https://www.packtpub.com/application-development/learn-python-programming-second-edition).'
  prefs: []
  type: TYPE_NORMAL
