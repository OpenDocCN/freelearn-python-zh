["```py\n$ pythonPython 3.9.4  [MSC v.1928 64 bit (AMD64)] on win32\n>>> import dis\n>>>\n>>> def return_the_bigest(a, b):\n...     if a > b:\n...         return a\n...     if b > a:\n...         return b\n...     return None\n...\n>>> dis.dis(return_the_bigest)\n  2           0 LOAD_FAST                0 (a)\n              2 LOAD_FAST                1 (b)\n              4 COMPARE_OP               4 (>)\n              6 POP_JUMP_IF_FALSE       12\n\n  3           8 LOAD_FAST                0 (a)\n             10 RETURN_VALUE\n\n  4     >>   12 LOAD_FAST                1 (b)\n             14 LOAD_FAST                0 (a)\n             16 COMPARE_OP               4 (>)\n             18 POP_JUMP_IF_FALSE       24\n\n  5          20 LOAD_FAST                1 (b)\n             22 RETURN_VALUE\n\n  6     >>   24 LOAD_GLOBAL              0 (Null)\n             26 RETURN_VALUE\n```", "```py\n$ python\nPython 3.10.4 (main, Apr  8 2022, 17:35:13) on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import netmiko\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nModuleNotFoundError: No module named 'netmiko'\n```", "```py\n$ python3.10\nPython 3.10.4 (main, Apr  8 2022, 17:35:13) on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys\n>>> sys.path\n['', '/usr/lib/python3.10', '/usr/lib/python3.10/lib-dynload', '/usr/local/lib/python3.10/dist-packages', '/usr/lib/python3/dist-packages']\n```", "```py\n$ python3.10\nPython 3.10.4 (main, Apr  8 2022, 17:35:13) on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import inspect\n>>> import socket\n>>> inspect.getfile(socket)\n'/usr/lib/python3.10/socket.py'\n```", "```py\n    $ pip install netmiko\n    Installing collected packages: netmiko\n    Successfully installed netmiko-4.1.0\n    ```", "```py\n    >>> import netmiko\n    >>> import inspect\n    >>> inspect.getfile(netmiko)\n    '/home/claus/.local/lib/python3.10/site-packages/netmiko/__init__.py'\n    ```", "```py\npip list -v\n```", "```py\n$ go env GOROOT\n/usr/lib/go-1.19\n```", "```py\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"My code is awesome\")\n}\n```", "```py\npackage main\nimport (\n    \"fmt\"\n    \"math\"\n)\nfunc main() {\n    fmt.Println(\"Square root of 2 is\", math.Sqrt(2))\n}\n```", "```py\n$ go env GOPATH\n/home/claus/go\n```", "```py\n$ go get golang.org/x/crypto\ngo: downloading golang.org/x/crypto v0.0.0-20220622213112-05595931fe9d\ngo: downloading golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1\ngo: added golang.org/x/crypto v0.0.0-20220622213112-05595931fe9d\n```", "```py\n$ go build\ngo: downloading golang.org/x/crypto v0.0.0-20220622213112-05595931fe9d\n```", "```py\nimport (\n    \"golang.org/x/crypto/ssh\"\n)\n```", "```py\n$ cat go.mod \nmodule connect\n\ngo 1.19\nrequire (\n    golang.org/x/crypto v0.0.0-20220622213112-05595931fe9d\n)\nrequire golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1 // indirect\n```", "```py\nimport paramiko\nTARGET = {\n    \"hostname\": \"10.0.4.1\",\n    \"username\": \"netlab\",\n    \"password\": \"netlab\",\n}\nssh = paramiko.SSHClient()\nssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\nssh.connect(**TARGET)\nstdin, stdout, stderr = ssh.exec_command(\"uptime\")\nstdin.close()\nprint(stdout.read().decode(\"ascii\"))\n```", "```py\n13:22:57 up 59 min,  0 users,  load average: 0.02, 0.07, 0.08\n```", "```py\nimport netmiko\nhost = {\n    \"host\": \"10.0.4.1\",\n    \"username\": \"netlab\",\n    \"password\": \"netlab\",\n    \"device_type\": \"linux_ssh\",\n}\nwith netmiko.ConnectHandler(**host) as netcon:\n    output = netcon.send_command(command)\nprint(output)\n```", "```py\nimport asyncio, asyncssh, sys\nTARGET = {\n    \"host\": \"10.0.4.1\",\n    \"username\": \"netlab\",\n    \"password\": \"netlab\",\n    \"known_hosts\": None,\n}\nasync def run_client() -> None:\n    async with asyncssh.connect(**TARGET) as conn:\n       result = await conn.run(\"uptime\", check=True)\n       print(result.stdout, end=\"\")\ntry:\n    asyncio.get_event_loop().run_until_complete( run_client() )\nexcept (OSError, asyncssh.Error) as execrr:\n        sys.exit(\"Connection failed:\" + str(execrr))\n```", "```py\nfrom scrapli.driver import GenericDriver\nTARGET = {\n    \"host\": \"10.0.4.1\",\n    \"auth_username\": \"netlab\",\n    \"auth_password\": \"netlab\",\n    \"auth_strict_key\": False,\n}\nwith GenericDriver(**TARGET) as con:\n    command_return = con.send_command(\"uptime\")\nprint(command_return.result)\n```", "```py\npackage main\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"golang.org/x/crypto/ssh\"\n)\nfunc main() {\n    host := \"10.0.4.1\"\n    config := &ssh.ClientConfig{\n        User:            \"netlab\",\n        HostKeyCallback: ssh.InsecureIgnoreHostKey(),\n        Auth: []ssh.AuthMethod{\n            ssh.Password(\"netlab\"),\n        },\n    }\n    conn, err := ssh.Dial(\"tcp\", host+\":22\", config)\n    if err != nil {\n        log.Fatalf(\"Dial failed: %s\", err)\n    }\n    session, err := conn.NewSession()\n    if err != nil {\n        log.Fatalf(\"NewSession failed: %s\", err)\n    }\n    var buff bytes.Buffer\n    session.Stdout = &buff\n    if err := session.Run(\"uptime\"); err != nil {\n        log.Fatalf(\"Run failed: %s\", err)\n    }\n    fmt.Println(buff.String())\n}\n```", "```py\npackage main\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"time\"\n    \"github.com/yahoo/vssh\"\n)\nfunc main() {\n    vs := vssh.New().Start()\n    config := vssh.GetConfigUserPass(\"netlab\", \"netlab\")\n    vs.AddClient(\n        \"10.0.4.1:22\", config, vssh.SetMaxSessions(1),\n    )\n    vs.Wait()\n    ctx, cancel := context.WithCancel(\n        context.Background()\n    )\n    defer cancel()\n    timeout, _ := time.ParseDuration(\"4s\")\n    rChannel := vs.Run(ctx, \"uptime\", timeout)\n    for resp := range rChannel {\n        if err := resp.Err(); err != nil {\n            log.Println(err)\n            continue\n        }\n        outTxt, _, _ := resp.GetText(vs)\n        fmt.Println(outTxt)\n    }\n}\n```", "```py\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n    \"github.com/scrapli/scrapligo/driver/generic\"\n    \"github.com/scrapli/scrapligo/driver/options\"\n)\nfunc main() {\n    target, err := generic.NewDriver(\n        \"10.0.4.1\",\n        options.WithAuthNoStrictKey(),\n        options.WithAuthUsername(\"netlab\"),\n        options.WithAuthPassword(\"netlab\"),\n    )\n    if err != nil {\n        log.Fatalf(\"Failed to create target: %+v\\n\", err)\n    }\n    if err = target.Open(); err != nil {\n        log.Fatalf(\"Failed to open: %+v\\n\", err)\n    }\n    output, err := target.Channel.SendInput(\"uptime\")\n    if err != nil {\n        log.Fatalf(\"Failed to send command: %+v\\n\", err)\n    }\n    fmt.Println(string(output))\n}\n```", "```py\nfrom pysnmp.hlapi import *\nsnmpIt = getCmd(SnmpEngine(),\n    CommunityData(\"public\"),\n    UdpTransportTarget((\"10.0.4.1\", 161)),\n    ContextData(),\n    ObjectType(ObjectIdentity(\"SNMPv2-MIB\", \"sysUpTime\", 0)))\nerrEngine, errAgent, errorIndex, vars = next(snmpIt)\nif errEngine:\n    print(\"Got engine error:\", errEngine)\nelif errAgent:\n    print(\"Got agent error:\", errAgent.prettyPrint())\nelse:\n    for var in vars:\n        print(' = '.join([x.prettyPrint() for x in var]))\n```", "```py\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n    snmp \"github.com/gosnmp/gosnmp\"\n)\nfunc main() {\n    snmp.Default.Target = \"10.0.4.1\"\n    if err := snmp.Default.Connect(); err != nil {\n        log.Fatalf(\"Failed Connect: %v\", err)\n    }\n    defer snmp.Default.Conn.Close()\n    //SNMPv2-MIB::sysUpTime\n    oid := []string{\"1.3.6.1.2.1.1.3.0\"}\n    result, err := snmp.Default.Get(oid)\n    if err != nil {\n        log.Fatalf(\"Failed Get: %v\", err)\n    }\n    for _, variable := range result.Variables {\n        fmt.Printf(\"oid: %s \", variable.Name)\n        fmt.Printf(\": %d\\n\", snmp.ToBigInt(variable.Value))\n    }\n}\n```", "```py\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nrequests.packages.urllib3.disable_warnings()\nheaders = {\"Accept\": \"application/yang-data+json\"}\nrest_call = \"https://10.0.4.1:6060/data/interfaces/state\"\nresult = requests.get(rest_call, auth=HTTPBasicAuth(\"netlab\", \"netlab\"), headers=headers, verify=False)\nprint(result.content)\n```"]