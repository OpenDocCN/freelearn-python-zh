["```py\nCarType = Enum('CarType', 'subcompact compact suv')\n```", "```py\nclass Car: \n    pool = dict() \n\n    def __new__(cls, car_type): \n        obj = cls.pool.get(car_type, None) \n        if not obj: \n            obj = object.__new__(cls) \n            cls.pool[car_type] = obj \n            obj.car_type = car_type \n        return obj\n```", "```py\n    def render(self, color, x, y):\n        type = self.car_type\n        msg = f'render a car of type {type} and color \\\n          {color} at ({x}, {y})'\n        print(msg)\n```", "```py\ndef main():\n    rnd = random.Random() \n    colors = 'white black silver gray red blue brown \\\n      beige yellow green'.split()\n    min_point, max_point = 0, 100 \n    car_counter = 0 \n\n    for _ in range(10): \n        c1 = Car(CarType.subcompact) \n        c1.render(random.choice(colors), \n                  rnd.randint(min_point, max_point), \n                  rnd.randint(min_point, max_point)) \n        car_counter += 1 \n\n    ...\n\n    print(f'cars rendered: {car_counter}') \n    print(f'cars actually created: {len(Car.pool)}') \n\n    c4 = Car(CarType.subcompact) \n    c5 = Car(CarType.subcompact) \n    c6 = Car(CarType.suv) \n    print(f'{id(c4)} == {id(c5)}? {id(c4) == id(c5)}') \n    print(f'{id(c5)} == {id(c6)}? {id(c5) == id(c6)}')\n```", "```py\n    import random \n    from enum import Enum\n    ```", "```py\n    CarType = Enum('CarType', 'subcompact compact suv')\n    ```", "```py\n    class Car: \n        pool = dict() \n\n        def __new__(cls, car_type): \n            obj = cls.pool.get(car_type, None) \n            if not obj: \n                obj = object.__new__(cls) \n                cls.pool[car_type] = obj \n                obj.car_type = car_type \n            return obj \n\n        def render(self, color, x, y):\n            type = self.car_type\n            msg = f'render a car of type {type} and  \\\n              color {color} at ({x}, {y})'\n            print(msg)\n    ```", "```py\n    def main(): \n        rnd = random.Random() \n        colors = 'white black silver gray red blue \\\n          brown beige yellow green'.split()\n        min_point, max_point = 0, 100 \n        car_counter = 0 \n\n        for _ in range(10): \n            c1 = Car(CarType.subcompact) \n            c1.render(random.choice(colors), \n                      rnd.randint(min_point, max_point), \n                      rnd.randint(min_point, max_point)) \n            car_counter += 1  \n    ```", "```py\n    for _ in range(3): \n        c2 = Car(CarType.compact) \n        c2.render(random.choice(colors), \n                  rnd.randint(min_point, max_point), \n                  rnd.randint(min_point, max_point)) \n        car_counter += 1 \n    ```", "```py\n    for _ in range(5):   c3 = Car(CarType.suv) \n            c3.render(random.choice(colors), \n                      rnd.randint(min_point, max_point), \n                      rnd.randint(min_point, max_point)) \n            car_counter += 1 \n\n        print(f'cars rendered: {car_counter}') \n        print(f'cars actually created: {len(Car.pool)}')\n    ```", "```py\n    c4 = Car(CarType.subcompact)\n    c5 = Car(CarType.subcompact)\n    c6 = Car(CarType.suv)\n    print(f'{id(c4)} == {id(c5)}? {id(c4) == id(c5)}')\n    print(f'{id(c5)} == {id(c6)}? {id(c5) == id(c6)}')  \n    ```", "```py\n    if __name__ == '__main__':\n         main()\n    ```", "```py\nrender a car of type CarType.subcompact and color yellow at \n(57, 51)\nrender a car of type CarType.subcompact and color blue at \n(10, 61)\nrender a car of type CarType.subcompact and color gray at \n(65, 74)\nrender a car of type CarType.subcompact and color red at \n(10, 19)\nrender a car of type CarType.subcompact and color green at \n(89, 5)\nrender a car of type CarType.subcompact and color green at \n(88, 76)\nrender a car of type CarType.subcompact and color black at \n(0, 18)\nrender a car of type CarType.subcompact and color silver at \n(43, 12)\nrender a car of type CarType.subcompact and color red at \n(25, 71)\nrender a car of type CarType.subcompact and color blue at \n(68, 38)\nrender a car of type CarType.compact and color white at \n(79, 48)\nrender a car of type CarType.compact and color green at \n(18, 93)\nrender a car of type CarType.compact and color brown at \n(71, 43)\nrender a car of type CarType.suv and color silver at \n(2, 71)\nrender a car of type CarType.suv and color blue at (70, 42)\nrender a car of type CarType.suv and color silver at \n(100, 98)\nrender a car of type CarType.suv and color gray at (83, 49)\nrender a car of type CarType.suv and color brown at (77, 2)\ncars rendered: 18\ncars actually created: 3\n140569248959360 == 140569248959360? True\n140569248959360 == 140569298067216? False\n```", "```py\nquotes = \n(\n  'A man is not complete until he is married. Then he is \\\n    finished.',\n  'As I said before, I never repeat myself.',\n  'Behind a successful man is an exhausted woman.',\n  'Black holes really suck...',\n  'Facts are stubborn things.'\n)\n```", "```py\nclass QuoteModel:\n     def get_quote(self, n):\n         try:\n             value = quotes[n]\n         except IndexError as err:\n             value = 'Not found!'\n         return value\n```", "```py\nclass QuoteTerminalView:\n     def show(self, quote):\n         print(f'And the quote is: \"{quote}\"')\n\n     def error(self, msg):\n         print(f'Error: {msg}')\n\n     def select_quote(self):\n         return input('Which quote number would you like  \\\n           to see? ')\n```", "```py\nclass QuoteTerminalController:\n     def __init__(self):\n         self.model = QuoteModel()\n         self.view = QuoteTerminalView()\n\n     def run(self):\n         valid_input = False\n         while not valid_input:\n             try:\n                 n = self.view.select_quote()\n                 n = int(n)\n                 valid_input = True\n             except ValueError as err:\n                 self.view.error(f\"Incorrect index '{n}'\")\n         quote = self.model.get_quote(n)\n         self.view.show(quote)\n```", "```py\ndef main():\n     controller = QuoteTerminalController()\n     while True:\n         controller.run()\n```", "```py\nWhich quote number would you like to see? 2\nAnd the quote is: \"Behind a successful man is an exhausted \nwoman.\"\nWhich quote number would you like to see? 4\nAnd the quote is: \"Facts are stubborn things.\"\nWhich quote number would you like to see? 1\nAnd the quote is: \"As I said before, I never repeat \nmyself.\"\nWhich quote number would you like to see? 6\nAnd the quote is: \"Not found!\"\nWhich quote number would you like to see? 3\nAnd the quote is: \"Black holes really suck...\"\nWhich quote number would you like to see? 0\nAnd the quote is: \"A man is not complete until he is \nmarried. Then he is finished.\"\nWhich quote number would you like to see?   \n```", "```py\nclass LazyProperty:\n    def __init__(self, method):\n        self.method = method\n        self.method_name = method.__name__\n        # print(f\"function overriden: {self.fget}\")\n        # print(f\"function's name: {self.func_name}\")\n```", "```py\ndef __get__(self, obj, cls):\n    if not obj:\n        return None\n    value = self.method(obj)\n    # print(f'value {value}')\n    setattr(obj, self.method_name, value)\n    return value\n```", "```py\nclass Test:\n    def __init__(self):\n        self.x = 'foo'\n        self.y = 'bar'\n        self._resource = None\n```", "```py\n@LazyProperty\ndef resource(self):\n    print(f'initializing self._resource which is: \\\n      {self._resource}')        \n    self._resource = tuple(range(5)) # expensive\n    return self._resource\n```", "```py\ndef main():     \n     t = Test()\n     print(t.x)\n     print(t.y)\n     # do more work...\n     print(t.resource)\n     print(t.resource)\n```", "```py\nfoo\nbar\ninitializing self._resource which is: None\n(0, 1, 2, 3, 4)\n(0, 1, 2, 3, 4)  \n```", "```py\nclass SensitiveInfo:\n     def __init__(self):\n         self.users = ['nick', 'tom', 'ben', 'mike']\n\n     def read(self):\n         nb = len(self.users)\n         print(f\"There are {nb} users: {' ' \\\n           .join(self.users)}\")\n\n     def add(self, user):\n         self.users.append(user)\n         print(f'Added user {user}')\n```", "```py\nclass Info:  \n     '''protection proxy to SensitiveInfo'''\n\n     def __init__(self):\n         self.protected = SensitiveInfo()\n         self.secret = '0xdeadbeef'\n\n     def read(self):\n         self.protected.read()\n\n     def add(self, user):\n         sec = input('what is the secret? ')\n         self.protected.add(user) if sec == self.secret \\\n           else print(\"That's wrong!\")\n```", "```py\ndef main():\n     info = Info()\n\n     while True:\n         print('1\\. read list |==| 2\\. add user |==| 3\\. \\\n           quit')\n         key = input('choose option: ')\n         if key == '1':\n             info.read()\n         elif key == '2':\n             name = input('choose username: ')\n             info.add(name)\n         elif key == '3':\n             exit()\n         else:\n             print(f'unknown option: {key}')\n```", "```py\n1\\. read list |==| 2\\. add user |==| 3\\. quit\nchoose option: 1\nThere are 4 users: nick tom ben mike\n1\\. read list |==| 2\\. add user |==| 3\\. quit\nchoose option: 2\nchoose username: bill\nwhat is the secret? 12345\nThat's wrong!\n1\\. read list |==| 2\\. add user |==| 3\\. quit\nchoose option: 2\nchoose username: bill\nwhat is the secret? 0xdeadbeef\nAdded user bill\n1\\. read list |==| 2\\. add user |==| 3\\. quit\nchoose option: 1\nThere are 5 users: nick tom ben mike bill\n1\\. read list |==| 2\\. add user |==| 3\\. quit\n```"]