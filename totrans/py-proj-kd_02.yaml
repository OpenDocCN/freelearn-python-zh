- en: Chapter 2. Variables, Functions, and Users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, you learned how to install Python on your computer.
    You also learned how to use the `print` statement in Python and printed some messages
    using your Python shell. We are now going to jump into a lot of details so that
    we can build our first project together. It will include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variable names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings, integers, and floats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A variable is when one letter or word is used to represent a different letter,
    word, number, or value. One way to think of a variable is to imagine that you
    are programming a computer so that it can make memories. For example, my name
    is Jessica. If I am writing a computer program and I want that program to remember
    my name, I will assign my name to a variable. This will look like `name = 'Jessica'`.
    The variable is `name`. `Jessica` in the memory.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps I would like the computer to remember something else about me as well.
    Maybe I want the computer program to remember that I am 64 inches, or roughly
    128 cm, tall. I will say `height_inches = 64` or `height_centimeters = 128`. The
    variables here are `height_inches` and `height_centimeters`. The memories are
    my height in inches and my height in centimeters.
  prefs: []
  type: TYPE_NORMAL
- en: Why don't you try giving a computer the `name` variable with your name and then
    a `height` variable with your height?
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open your Python shell and type the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the variables are stored, you can type `print(name)` or `print(height)`.
    Since you created a memory for the computer with your name and your height, the
    computer will print the memory that you gave it. If you take a look at the screenshot
    from my Python shell, you will see that the computer printed the memories that
    I assigned it. Notice that we do not use single quotes around the variable names:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables](img/B04681_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the values, or memories, that you assigned to the variables are printed in
    your Python terminal, then it is perfect. If not, you may have an error. There
    are a lot of reasons due to which an error can occur. You may have typed your
    variable name or your information in a way that breaks the Python convention.
    Some common errors include using capital letters.
  prefs: []
  type: TYPE_NORMAL
- en: Naming variables – conventions to follow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some conventions that are used to name variables in Python. It might
    seem silly to have guidelines about naming things, but following the conventions
    is really important because it helps other people read your code. Also, the Python
    shell is designed to work with the conventions.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid errors, your variable names should use lowercase letters. If your variable
    uses more than one word, such as the `height_inches` variable, then it should
    have underscores to connect the words together.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use two words to name your variable and do not connect them with an
    underscore, you will get an error. Take a look at the following screenshot and
    see where it says `SyntaxError: invalid syntax`. Notice this error occurred because
    the `height centimeters` variable did not have an underscore to connect the words:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Naming variables – conventions to follow](img/B04681_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What can variables remember?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python variables can be programmed to remember all kinds of information! You
    will notice in our original example that we stored a word and then a number. There
    are three different kinds of information that we will be using to build our calculator
    in [Chapter 3](ch03.html "Chapter 3. Calculate This!"), *Calculate This*!, strings,
    integers, and floats. Each bit of information is input and output a little differently.
  prefs: []
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Python, a string is any piece of data that''s captured between two single
    quote marks, that is, these symbols `''` `''`. Sometimes, double quotation marks
    are used. For example, I can have a string variable that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This string variable contains letters and words. Most string variables do.
    However, you can store a number as a string also as long as that number is in
    single quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If we can store all kinds of information as strings, why do we need other data
    types? Well, when we store numbers as strings, we cannot do math with the numbers!
    Type this problem into your Python shell, and then you will see why we need data
    types besides strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'What happened in your Python shell? You might have expected the printed output
    to be `30` since `10` plus `20` is equal to `30`. However, Python saw each number
    as a text string and simply put the two text strings next to each other. So, your
    result was probably `1020`. Here is how this looks in the Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Strings](img/B04681_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Integers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computers are really great at math, and math will allow us to execute more complicated
    programs, such as games. Python stores whole number data as integers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with integers:'
  prefs: []
  type: TYPE_NORMAL
- en: An integer is simply a plain whole number. If we want to make our variables
    store integers, we would take away the quotes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, when we add the two variables and print the output, we will get a mathematical
    result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Try it out! Let''s do some math with these variables:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following two variables in your Python shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, print the output by typing `print` and the variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After completing step 2, press *Enter*. Your result should be `30`. This is
    because Python is reading the numbers as integers, and Python understands integers
    with mathematical operators. In fact, Python understands math so well that you
    will notice that no equals sign was needed to tell Python to output the answer.
    Take a look at this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integers](img/B04681_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Floating point numbers (floats)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Hopefully, you now better understand how Python works with integers (whole
    numbers). However, people and computers often need to work in fractional numbers.
    In Python, these numbers are called **floating point numbers**, but many people
    call them *floats* as a shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: Floats are actually a really fancy way of saying *numbers using decimals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Floats are called this because the decimal point can be anywhere among the numbers,
    allowing for decimals of many different sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting numbers as floats allows us to do more complicated math using fractional
    numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To set a variable to a float, you don't have to do anything special or different
    from what you did to set the integers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python knows that a number input (a variable, for example) with a decimal point
    is a float, and Python will output the answers as a float if the problem is clear
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your Python shell, try this math problem using floating point numbers instead
    of integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, in your Python shell, you should notice that Python recognized the
    variable input as floating point numbers and was able to output the complete and
    correct answer without us having to use additional instructions. The output from
    your `print` statement should be `30.6`, as you can see in this screenshot of
    the Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Floating point numbers (floats)](img/B04681_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Combining strings, integers, and floats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we have only attempted to combine items that share a data type. We
    have added two strings, two integers, or two floats. What happens when you try
    to add two different types of information, such as a string and an integer? In
    your Python shell, type the following lines of code and pay attention to the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You are likely to notice the error that you receive. The important line to
    pay attention to is `TypeError: cannot concatenate ''str'' and ''int'' objects`.
    Python is telling us that it cannot work with these two different data types and
    that makes sense. So, if you do make a mistake in your typing or try to execute
    an operation in two different data types, you may get an error like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Combining strings, integers, and floats](img/B04681_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have variables, we can use them to do some pretty interesting things.
    The most interesting thing is to build functions. Python functions are blocks
    of code that we can build to do a specific job. We build these functions once,
    and then we can reuse them in our code just by typing the name. This is really
    helpful. For example, if I need to write a program that adds two numbers (a calculator,
    for example), I do not want to have to write three or four lines of code every
    time I want to add two numbers. Instead, I want to write one function that can
    add two numbers together, and then use that single line whenever I need to add
    numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin building functions of our own, we need to also know that Python
    has a lot of amazing functions that are built in. Some of Python's functions are
    things we will use all the time. Others we won't talk about in this book, but
    as you become a more skilled programmer, you will learn more about Python's built-in
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s something about some built-in functions and what they do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`int()`: This converts a string or a float into an integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`float()`: This converts a string or an integer into a float'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raw_input()`: This gets information from a user and stores it in the computer
    to use later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`str()`: This converts an integer, float, or other information into a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`help()`: This provides access to Python''s help'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be using these functions to help us build our first project in the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are curious about what other functions are built in or if you want to
    know more, you can go to the Python documents at [https://docs.python.org/2.7/library/functions.html?highlight=built%20functions#](https://docs.python.org/2.7/library/functions.html?highlight=built%20functions#).
  prefs: []
  type: TYPE_NORMAL
- en: Initially, the documents can seem overwhelming because they are very detailed.
    The detail can make the documents difficult to understand at times, but the documents
    are very helpful and are used by many programmers.
  prefs: []
  type: TYPE_NORMAL
- en: Parts of a function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are basic parts to think about when you want to build your own function.
    First, here''s the basic function to add two numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line of this code is new, so we need to understand what it means:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to notice is the word `def`. In Python, this is short for define,
    and it is used to define a new function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next thing to notice is the name of the function. The name of the function
    has the same guidelines as the names of variables. A function needs to use lowercase
    letters, and when it has many words, there need to be underscores between each
    word.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the name of the `addition()` function, you will notice the parentheses
    `()`. These are empty in this function, but sometimes they are not empty. Even
    if they are, the parentheses must *ALWAYS* be a part of the function that you
    create.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the first line of the function ends with a colon. The colon (`:`),
    ends the first line of the function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A function can be short, such as this `addition()` function, which is only four
    lines in total, or it can be really long. Every line after the first line in a
    Python function needs to be indented using spaces. When we work on building our
    own functions in the next section of this chapter, you will learn how to make
    indents in your Python shell. We will also discuss proper spacing in the text
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of new details to remember in order to write a function. What
    happens if you forget a detail? If you forget to indent a line, Python will let
    you know and output an error. Your function will not run, and your code will not
    work. Python's use of indentation is known as **whitespace**, and there are rules
    about whitespace use in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'By now, you are very familiar with doing additions in Python, so we will keep
    working with the addition code. There are special considerations in order to write
    functions in the Python shell. Because a function is a block of code, we want
    to follow these guidelines when we are trying to perform functions in the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: After you type the first line and press *Enter*, make sure you press *Tab* before
    you type each line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you have completed typing all the lines, hit *Enter* twice so that the
    Python shell knows that you are done creating the function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your Python shell, type the `addition()` function exactly as it appears
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how the function looks in the Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Parts of a function](img/B04681_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that you have typed your function, you need to learn how to use the function.
    To use the function in the Python shell, type the name of the function and the
    parentheses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Typing the function is also known as calling the function. When you call the
    `addition()` function in the Python shell and then press *Enter*, you will get
    an output as the answer to the problem. Notice how this is displayed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Parts of a function](img/B04681_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Compare your result to the results shown in the preceding screenshots. Once
    you know that your function runs the way you want it to, you can show it to your
    parents and friends by asking them to look at your code. It is a good idea to
    test your function by retyping it with different numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Users interacting with your program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just built a function that adds two numbers together. Learning to make a
    program that does math is interesting, but our function is limited because our
    `addition()` function needs to have variables changed manually to calculate results
    for different numbers.
  prefs: []
  type: TYPE_NORMAL
- en: What if there was a way to get information from the user and store *THAT* information
    in a variable so that it could be used by addition or subtraction functions each
    time? Anyone who has used a calculator of any kind already knows that this is
    possible. Python has a function called `raw_input()` that allows us to tell the
    program to ask the user a question. The `raw_input()` function is incredibly useful.
    We can get every kind of information from the user this way, and we can make interactions
    between the user and the computer based on the user input.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the Python shell to test how the `raw_input()` function works. Try
    typing these two lines of code into your Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'What happened here? Let''s have a look:'
  prefs: []
  type: TYPE_NORMAL
- en: What should have happened is that you should have had a prompt in the terminal
    that asked `'What is your name?'` Then, you can type your response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following your response, hit *Enter*. Nothing will happen (nothing should happen
    yet!).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have given the computer information (a memory) to store in the `name` variable,
    but now you need to get the information out of the `name` variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can get the output of the memory that the user entered by printing the `name`
    variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this screenshot, you can see the entire sequence in the Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Users interacting with your program](img/B04681_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the text editor and the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have used the Python shell to write and test code. The shell is great
    because we type a line of code or even a few lines of code, and then we run them
    immediately to see whether they work. However, you may have noticed that there
    isn't a way to save any of the code that we write.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a program to run, it needs to have all of the code available. Using a text
    editor is just like writing a report, an email, or a paper: we write our code
    and save it; then, we go back to edit it if we want to. In order to make Python
    use and understand our file, we need to use the command line and tell Python to
    run the file.'
  prefs: []
  type: TYPE_NORMAL
- en: To perform our next task as well as the remaining tasks in the book, we will
    use our text editor side by side with our terminal/command prompt. Let's walk
    through the setup of the text editor and command line right now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you need to do is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a special folder where you can store your code files, and remember how
    to find this folder! (Look back at [Chapter 1](ch01.html "Chapter 1. Welcome!
    Let's Get Started"), *Welcome! Let's Get Started*, for instructions.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This folder, or directory, is very important, as it will be the place where
    you put the work that you create for the rest of this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python needs to be able to access this directory to run all the programs, and
    soon, we will write files that will use other files; so, all of the files need
    to live in the same place
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you are certain that you have a special work folder, you can open the text
    editor program we set up in [Chapter 1](ch01.html "Chapter 1. Welcome! Let's Get
    Started"), *Welcome! Let's Get Started*. You will also open a new window in a
    terminal or in the command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Build your own function – name()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, you have learned about variables and how they store information. You have
    also learned about how these variables can be used inside of a function. Finally,
    you have learned how to use special Python functions, such as `input()`, to help
    get information from users and store it in the computer. You are ready to build
    your own function using variables and `input()`.
  prefs: []
  type: TYPE_NORMAL
- en: Set up your project file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The function that we will build now is called `name()`. The purpose of this
    function will be to ask the user their name, store (remember) the name, and then
    print out a friendly message to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start this function, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new file in your text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Save** and name the file `name.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to use `.py` at the end of all of your code files so that the files
    run in the terminal/command prompt. Python only recognizes `.py` files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the file in the folder you made for all of your Python work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Begin your project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have set up a project file, the first thing you might want to do is
    add a short comment to your file. A comment allows humans to quickly understand
    what is happening in the code. Whenever you are writing something that is not
    code, you should start the line with a hashtag, or hash. The hash is one way to
    tell the computer, *Ignore this!*, yet it allows humans to read the text. Type
    the following line in your file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`# This is my first function called name. It will ask the name and # print
    a message.`'
  prefs: []
  type: TYPE_NORMAL
- en: Writing code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next line you type will begin the computer-readable code. First, make sure
    that there is a space between the comment you wrote and the first line of computer-readable
    code. As we learned earlier, you will start the function using the Python word
    `def`. Then, you will type one space and the name of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will add parentheses `()` and a colon `:` to the first line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, it is time to go to the next line. For the next line, you will need to
    indent. Use the spacebar to insert four spaces. In Python, spaces matter. Using
    the *Tab* key, or mixing between tab and space, is a problem in Python and causes
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are asking the user for their first name, you can use the words `first_name`
    for the variable if you like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `first_name` variable will store the answer to the question, `What is your
    first name?` Remember, though, we have to use the `raw_input()` function to get
    the user to answer the question! So, we will add the `raw_input()` function and
    question to the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: So far, we have programmed a way for the computer to ask the user for their
    first name, and we have made a variable called `first_name` to remember the string
    of information.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we have a file that has some lines of code, if we were to run our
    code right now, nothing at all would happen. We need a way to show the user their
    name, and it would be even nicer if we sent the user a welcoming message. We need
    to write the code for program output.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have been using `print` to output our information from [Chapter 1](ch01.html
    "Chapter 1. Welcome! Let''s Get Started"), *Welcome! Let''s Get Started*, and
    throughout this chapter, and `print` is also useful here. We can tell our function
    to print the `first_name` information, and we can put that together with a nice
    message. Add this line to your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Your total code for the `name()` function should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a sample of how the program looks in a text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing code](img/B04681_02_12_replace.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need only to add the final line of code, which is to call the `name()` function.
    If we do not call the function, it will not run. To call the function, you should
    leave an empty line after `print`, and on a new line, unindent and type `name()`.
    Take a look at this code sample, and add the `name()` function to your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have created this function, we can use it to greet anybody because
    the user is telling us each time what `first_name` should be. We have made a reusable
    block of code.
  prefs: []
  type: TYPE_NORMAL
- en: Running your program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now you have to save your work:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Save** option in your text editor and save the work for `name.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have saved this work, you should go to your terminal/command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you are in the correct folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are not sure, you can type `pwd` (Mac/Linux) or `echo %cd%` (Windows)
    to find out what folder you are in.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When you are in the same folder as your work, type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, press *Enter*. Your program should begin to run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you type in the name, the output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running your program](img/B04681_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You now have a program to share with family and friends that will seem amazing,
    especially if they have never programmed before!
  prefs: []
  type: TYPE_NORMAL
- en: Going the extra mile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, if you really want to understand all of this, go the extra mile! Experiment
    with the code that you just created so that you can see what works and what does
    not work. If you get a strange error, you can always copy and paste the error
    into an Internet search engine; most of the errors we''ve taken a look at so far
    have happened to other people. Here are some tips to help you experiment and gain
    mastery:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the input question
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the message to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the function name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the variable name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a second variable and a second input question
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the second variable to the output question
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A quick task for you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have finished this chapter, can you answer these questions?
  prefs: []
  type: TYPE_NORMAL
- en: Q1\. What must a function begin with?
  prefs: []
  type: TYPE_NORMAL
- en: def
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Input
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whitespace
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What are conventions that are used to name variables and functions?
  prefs: []
  type: TYPE_NORMAL
- en: Must use lowercase letters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiple words need to be connected with underscores
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cannot use a number to start a name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. Every line after the first line of a function must be?
  prefs: []
  type: TYPE_NORMAL
- en: Named using numbers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Have a colon, :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Indented
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use parentheses ()
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. If you want a code file to run in Python, you need to end it with?
  prefs: []
  type: TYPE_NORMAL
- en: .txt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .odt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .pdf
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .py
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q5\. To run a code file in the terminal, what do you need to do?
  prefs: []
  type: TYPE_NORMAL
- en: Type the name of the file in the terminal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the name of the file in the terminal while running Python
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the correct folder, type Python and the name of the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above steps in order
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to store information in variables so that a
    computer could remember it later. We learned how to use variables to make a function
    that could add two preprogrammed numbers together. Then, things got interesting
    when we learned how to make the computer ask questions and remember the user's
    answers! Using `raw_input()`, we learned how to store answers as variables to
    use later in the `name()` function that we built together. We started saving our
    work in `.py` files so that we could run and rerun our files in our terminal/command
    prompt without having to retype the files all the time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will build a four-function calculator to run in the
    command line using all of the skills you learned in this chapter!
  prefs: []
  type: TYPE_NORMAL
