- en: Files, Printers, and Other Dialogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any application with a GUI is created to produce operations. To do this in
    a user-friendly manner, it needs to have some basic functionality, such as the
    ability to open and save files, inform the user when something is processing,
    or if an error appears. To implement this in an application, we can use various
    dialog windows that open and save files, and inform the user that an event has
    occurred. Additionally, if a user''s tasks relate to working with text, they may
    want to print the text in paper form or to a file, such as a PDF. In this chapter,
    we will be covering the basic dialog windows provided by the Qt library, and we
    will demonstrate some simple print implementations in the app, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Dialog windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message boxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Font and color dialog windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Printers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dialog windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dialog windows are most commonly used to realize communications between the
    user and application processes. These dialog windows can open and save files,
    show error messages, allow the user to change a printer's settings before printing,
    choose colors and fonts, and more. The Qt library provides the most popular dialog
    windows for an application. A dialog window is a kind of widget that can be modal
    or modeless. Modal dialog windows block input from other application windows when
    they are visualized. In comparison to this, modeless dialog windows provide their
    functionality independently from the windows of the application. Here, we will
    introduce the base class for dialog windows, that is, `QDialog`. Additionally,
    we'll examine additional classes, such as `QDialogButtonBox`, which constructs
    button boxes.
  prefs: []
  type: TYPE_NORMAL
- en: QDialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class is the base class of the dialog window used with Qt. Almost all
    functional dialog windows inherit this class. The declaration syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `QDialog` class enhances functionality with the functions described in the
    following sections.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set parameters or properties to the dialog window:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.setModal(bool)`: If the parameter is `True`, it sets this dialog window
    as modal.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.setResult(int)`: This sets the dialog window''s result code to the
    code specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.setSizeGripEnabled(bool)`: If the parameter is `True`, it sets the
    resize handle of the `QSizeGrip` type for resizing top-level windows.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.setVisible(bool)`: If the parameter is `True`, it sets this dialog
    window as visible.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to this dialog window''s
    state:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.isSizeGripEnabled()`: This returns `True` if the size grip is enabled
    for this dialog window.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the dialog window, inform you
    about changes to functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.accept()`: This accepts the dialog and sets the result code to `Accepted`
    with respect to hiding the modal dialog window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.done(int)`: This closes the dialog and sets the result code with respect
    to the code specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.exec()`: This displays and executes the modal dialog and returns the
    dialog result code.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.exec_()`: This displays and executes the modal dialog and returns the
    dialog result code.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.open()`: This opens and shows the modal dialog window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.reject()`: This rejects the dialog and sets the result code to `Rejected`
    when the modal dialog is hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.result()`: This returns the result code of the modal dialog, such as
    `Accepted` or `Rejected`.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.closeEvent(QtGui.QCloseEvent)`: This event handler is called with the
    event parameter when it receives a dialog window close request.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.contextMenuEvent(QtGui.QContextMenuEvent)`: This event handler receives
    dialog window context menu events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.eventFilter(QtCore.QObject, QtCore.QEvent)`: This event handler filters
    events if the dialog window is installed as an event filter for the object (the
    first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives key press
    events for the dialog window with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.resizeEvent(QtGui.QResizeEvent)`: This event handler receives resize
    events for the dialog window with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.showEvent(QtGui.QShowEvent)`: This event handler receives show events
    for the dialog window with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the available signals of the `QDialog` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.accepted()`: This signal is emitted when the dialog has been accepted
    by the user, or by calling the `accept()` and `done()` functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.finished(int)`: This signal is emitted when the result code of the
    dialog has been set by the user, or by calling the `accept()`, `done()`, and `reject()`
    functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog.rejected()`: This signal is emitted when the dialog has been rejected
    by the user, or by calling the `reject()` and `done()` functions.'
  prefs: []
  type: TYPE_NORMAL
- en: Message boxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Message boxes are used to inform the user about events that occur in the application.
    These can be windows with messages, errors, and other events. These widgets are
    dialog windows and they provide functionality in relation to these events.
  prefs: []
  type: TYPE_NORMAL
- en: QMessageBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class implements the communication between the user and the application
    by asking questions and receiving answers relating to the process. The box is
    constructed with the modal dialog window representation. The declaration syntax
    of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `QMessageBox` class inherits the `QDialog` class and improves functionality
    with the functions described in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions add elements to the message box:'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.addButton(QtWidgets.QMessageBox.StandardButton)`: This adds a
    standard button to the message box and returns a push button.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`message_box.addButton(QtWidgets.QAbstractButton, QtWidgets.QMessageBox.ButtonRole)`**:
    This adds a button (the first parameter) to the message box with a role (the second
    parameter). The button roles are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Ok`: The OK button with `AcceptRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Open`: The Open button with `AcceptRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Save`: The Save button with `AcceptRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Cancel`: The Cancel button with `RejectRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Close`: The Close button with `RejectRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Discard`: The Discard or Don''t Save (platform-dependent)
    button with `DestructiveRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Apply`: The Apply button with `ApplyRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Reset`: The Reset button with `ResetRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.RestoreDefaults`: The Restore Defaults button with `ResetRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Help`: The Help button with `HelpRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.SaveAll`: The Save All button with `AcceptRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Yes`: The Yes button with `YesRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.YesToAll`: The Yes To All button with `YesRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.No`: The No button with `NoRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.NoToAll`: The No To All button with `NoRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Abort`: The Abort button with `RejectRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Retry`: The Retry button with `AcceptRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Ignore`: The Ignore button with `AcceptRole`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.NoButton`: This is an invalid button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message_box.addButton(str, QtWidgets.QMessageBox.ButtonRole)`: This adds a
    button with text (the first parameter) to the message box with a role (the second
    parameter), and returns a push button.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters or properties to the message box:'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setCheckBox(QtWidgets.QCheckBox)`: This sets the checkbox specified
    in the parameter in the message box dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setDefaultButton(QtWidgets.QPushButton)`: This sets the default
    button specified in the parameter for the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setDefaultButton(QtWidgets.QMessageBox.StandardButton)`: This
    sets the default button specified in the parameter for the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setDetailedText(str)`: This sets the detailed text specified in
    the parameter for the message box. The detailed text is plain text, which will
    be displayed in the details area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setEscapeButton(QtWidgets.QAbstractButton)`: This sets the button
    specified in the parameter, which will be activated when the *Esc* key is pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setEscapeButton(QtWidgets.QMessageBox.StandardButton)`: This sets
    the button specified in the parameter, which will be activated when the *Esc*
    key is pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setIcon(QtWidgets.QMessageBox.Icon)`: This sets the icon that
    will be used with the message box. The available icons are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.NoIcon`—`0`: No Icon is displayed for the message box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Information `—`1`: Icon displaying information sign.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Warning `—`2`: Icon displaying a warning sign.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Critical`—`3`: Icon displaying critical problem sign.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QMessageBox.Question`—`4`: Icon displaying question sign.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message_box.setIconPixmap(QtGui.QPixmap)`: This sets the pixmap specified
    in the parameter for the icon of the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setInformativeText(str)`: This sets the informative text specified
    in the parameter, which will be a full description of the message in the message
    box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setStandardButtons(QtWidgets.QMessageBox.StandardButtons)`: This
    sets standard buttons specified in the parameter, which will be used in the message
    box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setText("Message Box Text")`: This sets the text specified in
    the parameter, which will be displayed in the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setTextFormat(QtCore.Qt.TextFormat)`: This sets the text format
    specified in the parameter for the text that will be displayed in the message
    box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setTextInteractionFlags(QtCore.Qt.TextInteractionFlags)`: This
    sets the text interaction flags specified in the parameter, which will describe
    the label interaction with user input.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setWindowModality(QtCore.Qt.WindowModality)`: This sets the modality
    specified in the parameter for the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.setWindowTitle(str)`: This sets the title specified in the parameter
    for this dialog window message box.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the message box, inform you about
    changes to functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.about(QtWidgets.QWidget, str, str)`: This displays a simple box
    with a title (the second parameter) and text (the third parameter) about the first
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.aboutQt(QWidget, str)`: This displays a simple box with a title
    (the second parameter) about Qt.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.button(QtWidgets.StandardButton)`: This returns the button of
    the `QtWidgets.QAbstractButton` type corresponding to the button specified in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.buttonRole(QtWidgets.QAbstractButton)`: This returns the button
    role of the `QtWidgets.QMessageBox.ButtonRole` type for the button specified in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.buttons()`: This returns all the buttons added to the message
    box as a list.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.checkBox()`: This returns the checkbox of the `QtWidgets.QCheckBox`
    type, which is available on the message box; otherwise, it returns `0`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.clickedButton()`: This returns the button of the `QtWidgets.QAbstractButton`
    type that was clicked on.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.critical(QtWidgets.QWidget, str, str, QtWidgets.QMessageBox.StandardButton,
    QtWidgets.QMessageBox.StandardButton)`: This opens a critical message box with
    a title (the second parameter), some text (the third parameter) in front of the
    widget specified (the first parameter), and the buttons specified in the fourth
    and fifth parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.defaultButton()`: This returns the default button of the `QtWidgets.QPushButton`
    type for the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.detailedText()`: This returns the plain text displayed in the
    details area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.escapeButton()`: This returns the button that will be activated
    when the user presses the *Esc* key.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.icon()`: This returns the icon of the `QtWidgets.QMessageBox.Icon`
    type used with the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.iconPixmap()`: This returns the current icon pixmap of the `QtGui.QPixmap`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.information(QtWidgets.QWidget, str, str, QtWidgets.QMessageBox.StandardButton,
    QtWidgets.QMessageBox.StandardButton)`: This opens an information message box
    with a title (the second parameter), some text (the third parameter) in front
    of the widget specified (the first parameter), and the buttons specified in the
    fourth and fifth parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.informativeText()`: This returns informative text, such as a full
    description of the message in the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.open(QtCore.QObject, str)`: This connects a signal to a slot with
    a receiver (the first parameter) and a member (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.question(QtWidgets.QWidget, str, str, QtWidgets.QMessageBox.StandardButton,
    QtWidgets.QMessageBox.StandardButton)`: This opens a question message box with
    a title (the second parameter), some text (the third parameter) in front of the
    widget specified (the first parameter), and the buttons specified in the fourth
    and fifth parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.removeButton(QtWidgets.QAbstractButton)`: This removes the button
    specified in the parameter from the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.standardButton(QtWidgets.QAbstractButton)`: This returns the button
    of the `QtWidgets.QMessageBox.StandardButton` type corresponding to the button
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.standardButtons()`: This returns the standard buttons of the `QtWidgets.QMessageBox.StandardButtons`
    type that are used with the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.standardIcon(QtWidgets.QMessageBox.Icon)`: This returns the pixmap
    of the `QtGui.QPixmap` type, which is used for the standard icon of the message
    box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.text()`: This returns the text that is displayed in the message
    box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.textFormat()`: This returns the format of the `QtCore.Qt.TextFormat`
    type, which is used for the text in the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.textInteractionFlags()`: This returns the flags of the `QtCore.Qt.TextInteractionFlags`
    type, which are used for the text interaction of the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.warning(QtWidgets.QWidget, str, str, QtWidgets.QMessageBox.StandardButton,
    QtWidgets.QMessageBox.StandardButton)`: This opens a warning message box with
    a title (the second parameter), some text (the third parameter) in front of the
    widget specified (the first parameter), and the buttons specified in the fourth
    and fifth parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.changeEvent(QtCore.QEvent)`: This handles the state changes of
    the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.closeEvent(QtGui.QCloseEvent)`: This event handler is called with
    the event parameter when it receives a close request for a message box from the
    window system.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.event(QtCore.QEvent)`: This receives events sent to the object
    and should return `True` if the events are recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives keypress
    events for the message box with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.resizeEvent(QtGui.QResizeEvent)`: This event handler receives
    resize events for the message box with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.showEvent(QtGui.QShowEvent)`: This event handler receives show
    events for the message box with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following signal is available with the `QMessageBox` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`message_box.buttonClicked(QtWidgets.QAbstractButton)`: This signal is emitted
    when the button is clicked on inside the message box.'
  prefs: []
  type: TYPE_NORMAL
- en: QErrorMessage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class displays the error message dialog window. Errors can occur in an
    application, and this window informs the user about these events. The declaration
    syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`QErrorMessage` inherits the `QDialog` class and enhances its functionality
    with the functions described in the following sections.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the error message dialog, inform
    you about changes to functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`error_message.qtHandler()`: This returns an object of the `QtWidgets.QErrorMessage`
    type, which outputs the default Qt messages.'
  prefs: []
  type: TYPE_NORMAL
- en: '`error_message.showMessage(str)`: This shows the message specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`error_message.showMessage(str, str)`: This shows a message (the first parameter)
    with the requested message type (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`error_message.changeEvent(QtCore.QEvent)`: This handles the state changes
    of the error message dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: Font and color dialogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Qt framework provides standard dialog windows for selecting fonts and colors
    in an application. They can be used to change the font of some text or the color
    of an element.
  prefs: []
  type: TYPE_NORMAL
- en: QFontDialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class realizes the dialog window for the font selection. The selected
    font can be used for text in text fields, labels, and for other application elements.
    The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`QFontDialog` inherits the `QDialog` class and enhances its functionality with
    functions described in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters or properties of the font dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.setCurrentFont(QtGui.QFont)`: This sets the font specified in
    the parameter to be highlighted in the font dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.setOption(QtWidgets.QFontDialog.FontDialogOption, bool)`: If the
    second parameter is `True`, then the font dialog option is set. The available
    options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QFontDialog.NoButtons`: Font dialog without buttons'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFontDialog.DontUseNativeDialog`: Font dialog as Qt standard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFontDialog.ScalableFonts`: Font dialog with scalable fonts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`QtWidgets.QFontDialog.NonScalableFonts`**: Font dialog with non-scalable
    fonts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`QtWidgets.QFontDialog.MonospacedFonts`**: Font dialog with monospaced fonts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`QtWidgets.QFontDialog.ProportionalFonts`**: Font dialog with proportional
    fonts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font_dialog.setOptions(QtWidgets.QFontDialog.FontDialogOptions)`: This sets
    the options that will be used with the font dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the font dialog, inform you about
    changes to functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.currentFont()`: This returns the current font of the `QtGui.QFont`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.getFont(QtWidgets.QWidget)`: This returns the font and executes
    a modal font dialog, with the parent of the dialog specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.getFont(QtGui.QFont, QtWidgets.QWidget, str, QtWidgets.QFontDialog.FontDialogOptions)`:
    This returns the font and executes a modal font dialog. If the user clicks on
    the OK button, it returns the selected font. If the user clicks on Cancel, then the
    initial font (the first parameter) will be returned. It''s constructed with the
    parent widget (the second parameter), the title (the third parameter) of the dialog
    window, and options (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.open(QtCore.QObject, str)`: This connects a signal to a slot with
    a receiver (the first parameter) and a member (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.options()`: This returns the options of the `QtWidgets.QFontDialog.FontDialogOptions`
    type that is used for the font dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.selectedFont()`: This returns the selected font of the `QtGui.QFont`
    type by clicking on the OK button, or by accepting in another manner.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.testOption(QtWidgets.QFontDialog.FontDialogOption)`: This returns
    `True` if the font dialog option specified in the parameter is enabled; otherwise,
    it returns `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.changeEvent(QtCore.QEvent)`: This handles the state changes of
    the font dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QFontDialog` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.currentFontChanged(QtGui.QFont)`: This signal is emitted when
    the current font for the font dialog changes, and the new font is passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font_dialog.fontSelected(QtGui.QFont)`: This signal is emitted when the font
    is selected in the font dialog, with the selected font passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QColorDialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class creates a dialog window for selecting colors. The selected color
    can be used to color the text, the application''s window, or other elements. The
    declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`QColorDialog` inherits the `QDialog` class and enhances its functionality
    with the functions described in the following sections.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters and properties of the color dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.setCurrentColor(QtGui.QColor)`: This sets the color (specified
    in the parameter) that will be highlighted in the color dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.setCustomColor(int, QtGui.QColor)`: This sets the custom color
    (the second parameter) at the index (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.setOption(QtWidgets.QColorDialog.ColorDialogOption, bool)`: If
    the second parameter is `True`, it sets the color dialog option. The available
    options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QColorDialog.NoButtons`: Color dialog without buttons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QColorDialog.DontUseNativeDialog`: Color dialog as Qt standard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QColorDialog.ShowAlphaChannel`: The alpha component of a color can
    be selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color_dialog.setOptions(QtWidgets.QFontDialog.FontDialogOptions)`: This sets
    the options that will be used with the color dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.setStandardColor(int, QtGui.QColor)`: This sets the standard
    color (the second parameter) at the index (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the color dialog, inform you about
    changes to functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.currentColor()`: This returns the current color of the `QtGui.QColor`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.customColor(int)`: This returns the custom color of the `QtGui.QColor`
    type at the index specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.customCount()`: This returns the number of custom colors that
    are supported by the color dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.getFont(QtGui.QColor, QtWidgets.QWidget, str, QtWidgets.QColorDialog.ColorDialogOptions)`:
    This returns the color and executes a modal color dialog. When the user clicks
    on the `Ok` button, it returns the selected color. If the user clicks on `Cancel`,
    then the initial color (the first parameter) will be returned. It is constructed
    with the parent widget (the second parameter), the title (the third parameter)
    of the dialog window, and options (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.open(QtCore.QObject, str)`: This connects a signal to a slot
    with a receiver (the first parameter) and a member (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.options()`: This returns the options of the `QtWidgets.QColorDialog.ColorDialogOptions`
    type used for this color dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.selectedColor()`: This returns the selected color of the `QtGui.QColor`
    type by clicking or the `Ok` button or by accepting in another manner.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.standardColor(int)`: This returns the standard color of the `QtGui.QColor`
    type at the index specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.testOption(QtWidgets.QColorDialog.ColorDialogOption)`: This returns
    `True` if the color dialog option specified in the parameter is enabled; otherwise,
    it returns `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions relate to the event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.changeEvent(QtCore.QEvent)`: This handles the state changes of
    the color dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QColorDialog` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color_dialog.currentColorChanged(QtGui.QColor)`: This signal is emitted when
    the current color of the color dialog changes, with the new color passed in the
    parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color_dialog.colorSelected(QtGui.QColor)`: This signal is emitted when a color
    is selected in the color dialog, with the selected color passed in the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will describe the dialog windows that provide the functionality
    to open or save files in the application. Additionally, we will cover reading
    and writing to files. Almost all GUI applications operate or have the ability
    to manipulate various files. In the Qt library, this file dialog window can realize
    the `QFileDialog` class.
  prefs: []
  type: TYPE_NORMAL
- en: QFileDialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class creates a dialog window for basic file manipulation in the application,
    such as opening a file, saving a file with a specified name, or opening a directory
    containing files. The declaration syntax of this class in the application is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`QFileDialog` inherits the `QDialog` class and enhances its functionality with
    the functions described in the following sections.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters or properties for the file dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setAcceptMode(QtWidgets.QFileDialog.AcceptMode)`: This sets the
    accept mode of the dialog as specified in the parameter, which explains that the
    file dialog is for opening or saving files. The available modes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.AcceptOpen`—`0`: Dialog for opening files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.AcceptSave`—`1`: Dialog for saving files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file_dialog.setDefaultSuffix(str)`: This sets the default suffix, specified
    in the parameter, that will be added to the file; for example, the **`.txt`**
    or **`.py`** extensions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setDirectory(str)`: This sets the current directory, specified
    in the parameter, for the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setDirectory(QtCore.QDir)`: This sets the current directory, specified
    in the parameter, for the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setDirectoryUrl(QtCore.QUrl)`: This sets the URL of the current
    directory, specified in the parameter, for the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setFileMode(QtWidgets.QFileDialog.FileMode)`: This sets the file
    mode, specified in the parameter, for the file dialog. It describes the number
    and types of files that can be selected. The available modes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.AnyFile`—`0`: Any filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.ExistingFile`—`1`: A single filename if it exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.Directory`—`2`: A directory name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.ExistingFiles`—`3`: One or more filenames if they exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file_dialog.setFilter(QtCore.QDir.Filters)`: This sets the filter, specified
    in the parameter, that will be used to define which kind of files are to be shown.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setHistory([str])`: This sets the browsing history of the file
    dialog as a list of paths specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setIconProvider(QtWidgets.QFileIconProvider)`: This sets the icon
    provider, specified in the parameter, that will be used with the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setItemDelegate(QtWidgets.QAbstractItemDelegate)`: This sets the
    item delegate, specified in the parameter, that will be used to render the items
    in the views of the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setLabelText(QtWidgets.QFileDialog.DialogLabel, str)`: This sets
    the text (the second parameter) that will be shown in the label (the first parameter)
    in the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setMimeTypeFilters([str])`: This sets the filters, specified in
    the parameter, as a list of **Multipurpose Internet Mail Extensions** (**MIME**) types
    that will be used in the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setNameFilter(str)`: This sets the filter, specified in the parameter,
    as a file type that will be used in the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setNameFilters([str])`: This sets the filters, specified in the
    parameter, as a list of the file types that will be used in the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setOption(QtWidgets.QFileDialog.Option, bool)`: If the second
    parameter is `True`, then it sets the option (the first parameter) that will be
    used with the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setOptions(QtWidgets.QFileDialog.Options)`: This sets the options
    that will be used with the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setProxyModel(QtCore.QAbstractProxyModel)`: This sets the model
    for the views to the proxy model specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setSidebarUrls([QtCore.QUrl])`: This sets the URLs, specified
    in the parameter, for the sidebar of the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setSupportedSchemes([str])`: This sets the URL schemes that the
    file dialog will allow the user to navigate.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.setViewMode(QtWidgets.QFileDialog.ViewMode)`: This sets the view
    mode, specified in the parameter, that will be used for displaying directories
    and files in the file dialog. The available modes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.Detail`—`0`: The icon, name, and details for each item
    in the directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.List`—`1`: Only the icon and name for each item in the
    directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the file dialog, inform you about
    changes to functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.acceptMode()`: This returns the accept mode of the `QtWidgets.QFileDialog.AcceptMode`
    type for the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.defaultSuffix()`: This returns the default suffix added as a filename
    extension, if no other suffix is specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.directory()`: This returns the directory of the `QtCore.QDir`
    type that is displayed with the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.directoryUrl()`: This returns the URL of the `QtCore.QUrl` type
    for the directory that is displayed with the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.fileMode()`: This returns the file mode of the `QtWidgets.QFileDialog.FileMode`
    type that is used with the dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`file_dialog.filter()`**: This returns the filter of the `QtCore.QDir.Filters`
    type that is used when displaying the files in this dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.getExistingDirectory(QtWidgets.QWidget, str, str, QtWidgets.QFileDialog.Options)`:
    This creates a modal file dialog with the parent (the first parameter), a caption
    (the second parameter), the working directory (the third parameter), and options
    (the fourth parameter). It returns the directory that was selected. The available
    options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.ShowDirsOnly`: File dialog shows only directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.DontUseNativeDialog`: File dialog as Qt standard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.DontResolveSymlinks`: File dialog doesn''t resolve symlinks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.DontConfirmOverwrite`: File dialog doesn''t ask for
    confirmation of an overwrite if an existing file is selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.ReadOnly`: Modal is read-only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.HideNameFilterDetails`: File dialog hides the filename
    filter details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFileDialog.DontUseCustomDirectoryIcons`: File dialog uses the default
    directory icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file_dialog.getExistingDirectoryUrl(QtWidgets.QWidget, str, QtCore.QUrl, QtWidgets.QFileDialog.Options,
    [str])`: This creates a modal file dialog with the parent (the first parameter),
    a caption (the second parameter), the working local/remote directory (the third
    parameter), options (the fourth parameter), and the supported scheme (the fifth
    parameter) for the restriction of the URLs. It returns the directory of the `QtCore.QUrl`
    type that was selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.getOpenFileName(QtWidgets.QWidget, str, str, str, str, QtWidgets.QFileDialog.Options)`:
    This creates a modal file dialog with the parent (the first parameter), a caption
    (the second parameter), the working directory (the third parameter), a filter
    (the fourth parameter) for these files, the selected filter (the fifth parameter)
    for these files, and options (the sixth parameter). It returns the file that was
    selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.getOpenFileNames(QtWidgets.QWidget, str, str, str, str, QtWidgets.QFileDialog.Options)`:
    This creates a modal file dialog with the parent (the first parameter), a caption
    (the second parameter), the working directory (the third parameter), a filter
    (the fourth parameter) for these files, the selected filter (the fifth parameter)
    for these files, and options (the sixth parameter). It returns one or more files
    that were selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.getOpenFileUrl(QtWidgets.QWidget, str, QtCore.QUrl, str, str,
    QtWidgets.QFileDialog.Options, [str])`: This creates a modal file dialog with
    the parent (the first parameter), a caption (the second parameter), the working
    local/remote directory (the third parameter), a filter (the fourth parameter)
    for these files, the selected filter (the fifth parameter) for these files, options
    (the sixth parameter), and the supported scheme (the seventh parameter) for the
    restriction of the URLs. It returns the file that was selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.getOpenFileUrls(QtWidgets.QWidget, str, QtCore.QUrl, str, str,
    QtWidgets.QFileDialog.Options, [str])`: This creates a modal file dialog with
    the parent (the first parameter), a caption (the second parameter), the working
    local/remote directory (the third parameter), a filter (the fourth parameter)
    for these files, the selected filter (the fifth parameter) for these files, options
    (the sixth parameter), and the supported scheme (the seventh parameter) for the
    restriction of the URLs. It returns one or more files that were selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.getSaveFileName(QtWidgets.QWidget, str, str, str, str, QtWidgets.QFileDialog.Options)`:
    This creates a modal file dialog with the parent (the first parameter), a caption
    (the second parameter), the working directory (the third parameter), a filter
    (the fourth parameter) for these files, the selected filter (the fifth parameter)
    for these files, and options (the sixth parameter). It returns a filename, and
    this filename should not already exist.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.getSaveFileUrl(QtWidgets.QWidget, str, QtCore.QUrl, str, str,
    QtWidgets.QFileDialog.Options, [str])`: This creates a modal file dialog with
    the parent (the first parameter), a caption (the second parameter), the working
    local/remote directory (the third parameter), a filter (the fourth parameter)
    for these files, the selected filter (the fifth parameter) for these files, options
    (the sixth parameter), and the supported scheme (the seventh parameter) for the
    restriction of the URLs. It returns a filename.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.history()`: This returns the browsing history of the file dialog
    as a list of paths.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.iconProvider()`: This returns the icon provider of the `QtWidgets.QFileIconProvider`
    type for the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.itemDelegate()`: This returns the item delegate of the `QtWidgets.QAbstractItemDelegate`
    type that renders the items in the views of the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.labelText(QtWidgets.QFileDialog.DialogLabel)`: This returns the
    text shown in the label, specified in the parameter, of the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.mimeTypeFilters()`: This returns the MIME type filters of the
    file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.nameFilters()`: This returns the file type filters of the file
    dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.open(QtCore.QObject, str)`: This connects a signal to a slot with
    a receiver (the first parameter) and a member (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.options()`: This returns the options of the `QtWidgets.QFileDialog.Options`
    type that are used for the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.proxyModel()`: This returns the proxy model of the `QtCore.QAbstractProxyModel`
    type that is used with the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.restoreState(QtCore.QByteArray)`: This restores the layout, history,
    and current directory of the file dialog to the state specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.saveState()`: This saves the layout, history, and current directory
    of the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.selectFile(str)`: This selects the filename specified in the parameter
    of the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.selectMimeTypeFilter(str)`: This selects the MIME-type filter
    specified in the parameter of the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.selectNameFilter(str)`: This selects the file type filter specified
    in the parameter of the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.selectUrl(QtCore.QUrl)`: This selects the URL specified in the
    parameter of the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.selectedFiles()`: This returns the selected files in the file
    dialog as a list of strings with absolute paths.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.selectedMimeTypeFilter()`: This returns the MIME type of the selected
    file in the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.selectedNameFilter()`: This returns the selected filter in the
    file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.selectedUrls()`: This returns the URLs of the selected files in
    the file dialog as a list of URLs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.sidebarUrls()`: This returns a list of the current sidebar URLs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.supportedSchemes()`: This returns a list of the supported URL
    schemes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.testOption(QtWidgets.QFileDialog.Option)`: This returns `True`
    if the option specified in the parameter is enabled for the file dialog; otherwise,
    it returns `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.viewMode()`: This returns a view mode of the **`QtWidgets.QFileDialog.ViewMode`**
    type that is used with the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.changeEvent(QtCore.QEvent)`: This handles the state changes of
    the file dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QFileDialog` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.currentChanged(str)`: This signal is emitted when the current
    file changes for local operations in the file dialog. The new path of the file
    is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.currentUrlChanged(QtCore.QUrl)`: This signal is emitted when the
    current file changes in the file dialog. The new URL of the file is passed in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.directoryEntered(str)`: This signal is emitted when the user enters
    a directory for local operations in the file dialog, with the directory passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.directoryUrlEntered(QtCore.QUrl)`: This signal is emitted when
    the user enters a directory in the file dialog, with the URL of the directory
    passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.fileSelected(str)`: This signal is emitted when the selection
    changes for local operations in the file dialog, and the dialog is accepted with
    the selected file passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.filesSelected([str])`: This signal is emitted when the selection
    changes for local operations in the file dialog and the dialog is accepted, with
    a list of the selected files passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.filterSelected(str)`: This signal is emitted when the filter is
    selected in the file dialog. The selected filter is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.urlSelected(QtCore.QUrl)`: This signal is emitted when the selection
    changes in the file dialog and the dialog is accepted, with the selected URL passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`file_dialog.urlsSelected(QtCore.QUrl)`: This signal is emitted when the selection
    changes in the file dialog and the dialog is accepted, with a list of the selected
    URLs passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: A file dialog example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To implement a file dialog box in our application, we will use the Python standard
    library tools to open and read the selected files. Additionally, the text from
    the text field of the application will be saved to the file specified with the
    file dialog. To do this, we need to add the `files()` function to the `u_app.py`
    file using the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a function called `files()` to the bottom of the `UApp` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This function will use the **`getOpenFileNames()`** static method of the `QFileDialog`
    class to realize the file dialog window for opening available files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the signal that will call the `files()` function to the bottom of the
    `__init__()` function of the `UApp` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The top panel menu uses the **`triggered()`** signal to call the function that
    will operate with files. We can run the `u_app.py` file by selecting Open in the
    File option at the top of the application. The file dialog window will look similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d5a1680-c594-4f7e-96e5-4fa068016a24.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we need to add Python's standard library instruments to open and read files
    that were returned with this file dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do this, add the following lines to the `files()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The file dialog, when the Open button is clicked on, will return the selected
    file or files with their paths. The Python standard library has a built-in function
    called `open()`, which opens files for reading and writing. This `open()` function
    will open the file in the list of selected files for each loop, read this file,
    and append content to the text field of the application. The result will be as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f58078e4-bf63-4ab8-a501-cfec2d75e615.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now add the following lines to the `files` function to implement the functionality
    to save a file with the file dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When the Save option is selected, a similar file dialog will be displayed. We
    can choose the directory and filename and the content of the text field will be
    saved to this file. We can create folders called `saved_files/` inside `App/App_PySide2/`
    and `App/App_PyQt5/` to save files into.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `info_message()` function to the bottom of the `UApp` class to inform
    users that the file has been saved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This function creates the message box that will inform the user when the file
    is saved with a path to this file. The result of saving a file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f22b2d3-fdd3-4e0c-b709-48b229531b6a.png)'
  prefs: []
  type: TYPE_IMG
- en: This message box inherits the style of the application with the possibility
    of customization.
  prefs: []
  type: TYPE_NORMAL
- en: QPrinter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many applications allow users to print documents or content that has been created.
    The Qt library has a basic dialog window to print created content. The `QPrinter`
    class is also available, which provides customization and operations with the
    default system printer device, as well as other features, such as printer settings.
    To understand the features of this class, it is recommended that you look at the
    official Qt documentation. Here, we will describe and implement the `QPrintDialog`
    and `QPrintPreviewDialog` classes. Both of these classes are included in the `QtPrintSupport`
    module. To use these classes in the application, we need to add the following
    to the `u_app.py` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this `import` statement in the `u_app.py` file of `PyQt5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, add this `import` statement to the `u_app.py` file of `PySide2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: QPrintDialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides a dialog window for selecting and configuring options and
    printing content. We can change the printing document settings, such as the number
    of copies. The declaration syntax of this class in the application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `QPrintDialog` class enhances the functionality with the functions described
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters and properties of the print dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '`print_dialog.setOption(QtPrintSupport.QAbstractPrintDialog.PrintDialogOption,
    bool)`: If the second parameter is `True`, it sets the option (the first parameter)
    that will be enabled with this print dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`print_dialog.setOptions(QtPrintSupport.QAbstractPrintDialog.PrintDialogOptions)`:
    This sets the options, specified in the parameter, that will be enabled with this
    print dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the print dialog, inform you about
    changes to functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`print_dialog.open(QtCore.QObject, str)`: This connects a signal to a slot
    with a receiver (the first parameter) and a member (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`print_dialog.options()`: This returns the options of the `QtPrintSupport.QAbstractPrintDialog.PrintDialogOptions`
    type that is used for this print dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '`print_dialog.testOption(QtPrintSupport.QAbstractPrintDialog.PrintDialogOption)`:
    This returns `True` if the option specified in the parameter is enabled for this
    print dialog; otherwise it returns `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following signals are available with the `QPrintDialog` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`print_dialog.accepted(QtPrintSupport.QPrinter)`: This signal is emitted when
    the values set in the print dialog are accepted by the printer passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QPrintPreviewDialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class creates a dialog window for previewing the content before printing.
    We can change the document settings, such as the number of copies. The declaration
    syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `QPrintPreviewDialog` class enhances functionality with the functions described
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the print preview, inform you
    about changes to functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`print_preview.open(QtCore.QObject, str)`: This connects a signal to a slot
    with a receiver (the first parameter) and a member (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`print_preview.printer()`: This returns the current printer of the `QtPrintSupport.QPrinter`
    type that is used with this print preview dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This signal is available with the `QPrintPreviewDialog` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`print_preview.paintRequested(QtPrintSupport.QPrinter)`: This signal is emitted
    when the preview dialog generates a set of preview pages, with the printer instance
    passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: A QPrinter example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s implement printer support in this application. First, add the selection
    options in the top panel of the application, such as `Print` and `Print Preview`.
    For this, we need to add new options to the `UWindow` class of the `u_window.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following options to the menu of the Files section in the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: These options of the `File` menu section will print the text or open the preview
    of the printing document. To use these printer dialog windows, we need to declare
    the printer with the `QPrinter` class. This will be used to print the documents
    with the system's printer, or in another way, such as printing to PDF files.
  prefs: []
  type: TYPE_NORMAL
- en: We need to add the following lines to the `u_app.py` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `QPrinter` class to the bottom of the `__init__` function of the `UApp`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This creates the instance of the `QPrinter` class in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the print and print preview dialogs to the **`files`** function of
    the `UApp` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When the option of the File section is selected, the `triggered()` signal calls
    the `files()` function with the `action` parameter, which will be the text of
    the selected option. We can run the `u_app.py` file, and we should see the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1234c6d-181c-4919-af2e-19d6eff82ff1.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the `Print Preview`and `Print` options will display the dialog windows
    for printing and previewing the text to print.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the basic principles of implementing dialog windows
    in GUI applications. Not all the dialogs in Qt have been covered here. Dialog
    windows such as `QInputDialog`, `QProgressDialog` (a dialog with a progress bar),
    and `QWizard`, which creates a framework for wizards in the app, can all be used.
    For printing, there is `QPageSetupDialog`, which is used to configure page-related
    options. Additionally, printing features can be extended with classes that do
    not represent the dialog windows, but they are very useful, such as `QPrinterInfo`
    and `QPrintPreviewWidget`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover layouts, that is, the mechanism for arranging
    the items in the application.
  prefs: []
  type: TYPE_NORMAL
