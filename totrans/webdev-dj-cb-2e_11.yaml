- en: Chapter 11. Testing and Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing pages with Selenium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing views with mock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing API created using Django REST framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing a reusable Django app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting detailed error reporting via e-mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Apache with mod_wsgi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up cron jobs for regular tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and using the Fabric deployment script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, I expect you to have one or more Django projects or reusable
    apps developed and ready to show to the public. For the concluding steps of development
    cycle, we will take a look at how to test your project, distribute reusable apps
    to others, and publish your website on a remote server. Stay tuned for the final
    bits and pieces!
  prefs: []
  type: TYPE_NORMAL
- en: Testing pages with Selenium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Django provides a possibility to write test suites for your website. Test suites
    automatically check your website or its components to see whether everything is
    working correctly. When you modify your code, you can run tests to check whether
    the changes didn''t affect the application''s behavior in a wrong way. The world
    of automated software testing can be divided into five levels: unit testing, integration
    testing, component interface testing, system testing, and operational acceptance
    testing. Acceptance tests check the business logic to know whether the project
    works the way it is supposed to. In this recipe, you will learn how to write acceptance
    tests with Selenium, which allows you to simulate activities such as filling in
    forms or clicking on specific DOM elements in a browser.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the `locations` and `likes` apps from the *Implementing the
    Like widget* recipe in [Chapter 4](ch04.html "Chapter 4. Templates and JavaScript"),
    *Templates and JavaScript*.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have it yet, install the Firefox browser from [http://getfirefox.com](http://getfirefox.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, install Selenium in your virtual environment, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will test the Ajax-based *liking* functionality with Selenium by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `tests.py` file in your `locations` app with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Tests will be running in the `DEBUG = False` mode; therefore, you have to ensure
    that all the static files are accessible in your development environment. Make
    sure that you add the following lines to your project''s URL configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Collect static files to make them accessible by the test server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the tests for the `locations` app, as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we run these tests, the Firefox browser will open and go to the administration
    login page at `http://localhost:8081/admin/login/?next=/locations/hkw/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the username and password fields will get filled in with `test-admin`
    and you will get redirected to the detail page of the `Haus der Kulturen der Welt`
    location, as follows: `http://localhost:8081/locations/hkw/`.'
  prefs: []
  type: TYPE_NORMAL
- en: There you will see the **Like** button clicked twice, causing liking and unliking
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how this works in the test suite. We define a class extending `LiveServerTestCase`.
    This creates a test suite that will run a local server under the `8081` port.
    The `setUpClass()`class method will be executed at the beginning of all the tests
    and the `tearDownClass()`class method will be executed after the tests have been
    run. In the middle, the testing will execute all the methods of the suite whose
    names start with `test`. For each passed test, you will see a dot (`.`) in the
    command-line tool, for each failed test there will be the letter `F`, and for
    each error in the tests you will see the letter `E`. At the end, you will see
    hints about the failed and erroneous tests. As we currently have only one test
    in the suite for the `locations` app, you will only see one dot there.
  prefs: []
  type: TYPE_NORMAL
- en: When we start testing, a new test database is created. In `setUpClass()`, we
    create a browser object, one location, and one super user. Then, the `test_login_and_like()`
    method is executed, which opens the administration login page, finds the **username**
    field, types in the administrator's username, finds the **password** field, types
    in administrator's password, finds the **submit** button, and clicks on it. Then,
    it waits maximal ten seconds until a DOM element with the`.like-button` CSS class
    can be found on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you might remember from the *Implementing the Like widget* recipe in [Chapter
    4](ch04.html "Chapter 4. Templates and JavaScript"), *Templates and JavaScript*,
    our widget consists of two elements: a **Like** button and a badge showing the
    total number of likes. If a button is clicked, either your `Like` is added or
    removed from the database by an Ajax call. Moreover, the badge count is updated
    to reflect the number of likes in the database, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Further in the test, we check what is the initial state of the button is (whether
    it has the `.active` CSS class or not), check the initial number of likes, and
    simulate a click on the button. We wait maximal 10 seconds until the count in
    the badge changes. Then, we check whether the count in the badge matches the total
    likes for the location in the database. We will also check how the count in the
    badge has changed (increased or decreased). Lastly, we will simulate the click
    on the button again to switch back to the previous state.
  prefs: []
  type: TYPE_NORMAL
- en: The `sleep()` functions are in the test just for you to be able to see the whole
    workflow. You can safely remove them in order to make the tests run faster.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `tearDownClass()` method is called, which closes the browser and
    removes the location and the super user from the test database.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing the Like widget* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing views with mock* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing API created using Django REST Framework* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing views with mock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will take a look at how to write unit tests. Unit tests
    are those that check whether the functions or methods return correct results.
    We again take the `likes` app and write tests checking whether posting to the
    `json_set_like()` view returns `{"success"; false}` in the response for unauthenticated
    users and returns `{"action": "added", "count": 1, "obj": "Haus der Kulturen der
    Welt", "success": true}` for authenticated users. We will use the `Mock` objects
    to simulate the `HttpRequest` and `AnonymousUser` objects.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the `locations` and `likes` apps from the *Implementing the
    Like widget* recipe in [Chapter 4](ch04.html "Chapter 4. Templates and JavaScript"),
    *Templates and JavaScript*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `mock` module in your virtual environment, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will test the *liking* action with mock by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `tests.py` file in your `likes` app with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the tests for the `likes` app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like in the previous recipe, when you run tests for the `likes` app, at
    first, a temporary test database is created. Then, the `setUpClass()` method is
    called. Later, the methods whose names start with `test` are executed, and finally
    the `tearDownClass()` method is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unit tests inherit from the `SimpleTestCase` class. In `setUpClass()`, we create
    a location and a super user. Also, we find out the `ContentType` object for the
    `Location` model—we will need it for the view that sets or removes likes for different
    objects. As a reminder, the view looks similar to the following and returns the
    JSON string as a result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `test_authenticated_json_set_like()` and `test_anonymous_json_set_like()`
    methods, we use the `Mock` objects. They are objects that have any attributes
    or methods. Each undefined attribute or method of a `Mock` object is another `Mock`
    object. Therefore, in the shell, you can try chaining attributes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In our tests, we use the `Mock` objects to simulate the `HttpRequest` and `AnonymousUser`
    objects. For the authenticated user, we still need the real `User` object as the
    view needs the user's ID to save in the database for the `Like` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, we call the `json_set_like()` function and see if the returned JSON
    response is correct: it returns `{"success": false}` in the response if the visitor
    is unauthenticated; and returns something like `{"action": "added", "count": 1,
    "obj": "Haus der Kulturen der Welt", "success": true}` for authenticated users.'
  prefs: []
  type: TYPE_NORMAL
- en: In the end, the `tearDownClass()` class method is called that deletes the location
    and super user from the test database.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing the Like widget* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing pages with Selenium* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing API created using Django REST Framework* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing API created using Django REST framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already have an understanding about how to write operational acceptance and
    unit tests. In this recipe, we will go through component interface testing for
    the REST API that we created earlier in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are not familiar with what REST API is and how to use it, you can learn
    about it at [http://www.restapitutorial.com/](http://www.restapitutorial.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the `bulletin_board` app from the *Using Django REST framework
    to create API* recipe in [Chapter 9](ch09.html "Chapter 9. Data Import and Export"),
    *Data Import and Export*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test REST API, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `tests.py` file in your `bulletin_board` app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to test the API call listing the bulletins as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to test the API call showing a single bulletin as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to test the API call creating a bulletin if the current user is
    authenticated, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to test the API call trying to create a bulletin; however, failing
    as the current visitor is anonymous, as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to test the API call changing a bulletin if the current user is
    authenticated, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to test the API call trying to change a bulletin; however, failing
    as the current visitor is anonymous:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to test the API call deleting a bulletin if the current user is
    authenticated, as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to test the API call trying to delete a bulletin; however, failing
    as the current visitor is anonymous:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the tests for the `bulletin_board` app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'REST API test suite extends the `APITestCase` class. Once again, we have the
    `setUpClass()` and `tearDownClass()` class methods that will be executed before
    and after the different tests. Also, the test suite has a `client` attribute of
    the `APIClient` type that can be used to simulate API calls. It has methods for
    all standard HTTP calls: `get()`, `post()`, `put()`, `patch()`, `delete()`, `head()`,
    and `options()`; whereas, in our tests, we are using the `GET`, `POST`, and `DELETE`
    requests. Also, `client` has methods to authenticate a user by the login credentials,
    token, or just the `User` object. In our tests, we are authenticating by the third
    way, just passing a user directly to the `force_authenticate()` method.'
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the code is self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using Django REST framework to create API* recipe in [Chapter 9](ch09.html
    "Chapter 9. Data Import and Export"), *Data Import and Export*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing pages with Selenium* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Testing views with mock* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing a reusable Django app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Django documentation has a tutorial about how to package your reusable apps
    so that they can be installed later with `pip` in any virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.djangoproject.com/en/1.8/intro/reusable-apps/](https://docs.djangoproject.com/en/1.8/intro/reusable-apps/)'
  prefs: []
  type: TYPE_NORMAL
- en: However, there is an even better way to package and release a reusable Django
    app using the **Cookiecutter** tool, which creates templates for different coding
    projects such as new Django CMS website, Flask website, or jQuery plugin. One
    of the available project templates is `cookiecutter-djangopackage`. In this recipe,
    you will learn how to use it to distribute the reusable `likes` app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Install `Cookiecutter` in your virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To release your `likes` app, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a new Django app project, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Answer the questions to create the app template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a file structure, as shown in the following image:![How to
    do it...](img/B04912_11_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the files of the `likes` app from a Django project, where you are using
    it, to the `django-likes/likes` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the reusable app project to the Git repository under GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explore different files and complete the license, README, documentation, configuration
    and other files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that the app passes the tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If your package is closed source, create a shareable release as a ZIP archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will create a `django-likes/dist/django-likes-0.1.0.tar.gz` file that
    can be installed or uninstalled with pip, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If your package is open source, register and publish your app on **Python Package
    Index** (**PyPI**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also, to spread the word, add your app to Django packages by submitting a form
    at [https://www.djangopackages.com/packages/add/](https://www.djangopackages.com/packages/add/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cookiecutter fills in the entered requested data in different parts of the Django
    app project template. As a result, you get the `setup.py` file ready for distribution
    to Python Package Index, Sphinx documentation, BSD as the default license, universal
    text editor configuration for the project, static files and templates included
    in your app, and other goodies.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Django 1.8"), *Getting Started with Django 1.8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Django 1.8"), *Getting Started with Django 1.8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Implementing the Like widget* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting detailed error reporting via e-mail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To perform system logging, Django uses Python's built-in logging module. The
    default Django configuration seems to be quite complex. In this recipe, you will
    learn how to tweak it in order to send error e-mails with complete HTML, similar
    to what is provided by Django in the DEBUG mode when an error happens.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Locate the Django project in your virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help you send detailed e-mails about errors:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `myproject_env/lib/python2.7/site-packages/django/utils/log.py` file
    in a text editor and copy the `DEFAULT_LOGGING` dictionary to your project's settings
    as the `LOGGING` dictionary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `include_html` setting to the `mail_admins` handler, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Logging configuration consists of four parts: loggers, handlers, filters, and
    formatters. The following is how they can be described:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Loggers are entry points in the logging system. Each logger can have a log
    level: `DEBUG`, `INFO`, `WARNING`, `ERROR`, or `CRITICAL`. When a message is written
    to the logger, the log level of the message is compared with the logger''s level.
    If it meets or exceeds the log level of the logger, it will be further processed
    by a handler. Otherwise, the message will be ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handlers are engines that define what happens to each message in the logger.
    They can be written to a console, sent by an e-mail to the administrator, saved
    to a log file, sent to the Sentry error logging service, and so on. In our case,
    we set the `include_html` parameter for the `mail_admins` handler as we want the
    full HTML with traceback and local variables for the error messages that happen
    in our Django project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filters provide additional control over the messages that are passed from the
    loggers to handlers. For example, in our case, the e-mails will be sent only when
    the DEBUG mode is set to `False`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatters are used to define how to render a log message as a string. They
    are not used in this example; however, for more information about logging, you
    can refer to the official documentation at [https://docs.djangoproject.com/en/1.8/topics/logging/](https://docs.djangoproject.com/en/1.8/topics/logging/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Apache with mod_wsgi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many options as to how to deploy your Django project. In this recipe,
    I will guide you through the deployment of a Django project on a dedicated Linux
    server with Virtualmin.
  prefs: []
  type: TYPE_NORMAL
- en: A dedicated server is a type of Internet hosting, where you lease the whole
    server that is not shared with anyone else. Virtualmin is a web-hosting control
    panel that allows you to manage virtual domains, mailboxes, databases, and entire
    servers without having deep knowledge of the command-line routines of the server
    administration.
  prefs: []
  type: TYPE_NORMAL
- en: To run the Django project, we will be using the Apache web server with the `mod_wsgi`
    module and a MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that you have Virtualmin installed on your dedicated Linux server.
    For instructions, refer to [http://www.virtualmin.com/download.html](http://www.virtualmin.com/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to deploy a Django project on a Linux server with Virtualmin:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Virtualmin as the root user and set `bash` instead of `sh` as the
    default shell for the server's users. This can be done by navigating to **Virtualmin**
    | **System Customization** | **Custom Shells**, as shown in the following screenshot:![How
    to do it...](img/B04912_11_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a virtual server for your project by navigating to **Virtualmin** |
    **Create Virtual Server**. Enable the following features: **Setup website for
    domain?** and **Create MySQL database?**. The username and password that you set
    for the domain will also be used for the SSH connections, FTP, and MySQL database
    access, as follows:![How to do it...](img/B04912_11_04.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to your domain administration panel and set the `A` record for your domain
    to the IP address of your dedicated server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect to the dedicated server via Secure Shell as the root user and install
    Python libraries, `pip`, `virtualenv`, `MySQLdb`, and `Pillow` system wide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that the default MySQL database encoding is UTF-8:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit MySQL configuration file on the remote server, for example, using the
    nano editor:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Add or edit the following configurations:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Press *Ctrl* + *O* to save the changes and *Ctrl* + *X* to exit the nano editor.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, restart the MySQL server, as follows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Press *Ctrl* + *D* to exit Secure Shell.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you create a domain with Virtualmin, the user for that domain is created
    automatically. Connect to the dedicated server via Secure Shell as a user of your
    Django project and create a virtual environment for your project, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.bashrc` script will be called each time you connect to your Django project
    via Secure Shell as a user related to the domain. The `.bashrc` script will automatically
    activate the virtual environment for this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you host your project code on Bitbucket, you will need to set up SSH keys
    in order to avoid password prompts when pulling from or pushing to the Git repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following commands one by one:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: This last command prints your SSH public key that you need to copy and paste
    at **Manage Account** | **SSH keys** | **Add Key** on the Bitbucket website.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `project` directory, go to it, and clone your project''s code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, your project path should be something similar to the following: `/home/myproject/project/myproject`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Install the Python requirements for your project, including a specified version
    of Django, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `media`, `tmp`, and `static` directories under your project's directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, create `local_settings.py` with settings similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the database dump that you created locally. If you are using a Mac,
    you can do that with an app, **Sequel Pro** ([http://www.sequelpro.com/](http://www.sequelpro.com/)),
    using an SSH connection. You can also upload the database dump to the server by
    FTP and then run the following in Secure Shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Collect static files, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the `~/public_html` directory and create a `wsgi` file using the nano
    editor (or an editor of your choice):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the `.htaccess` file in the same directory. The `.htaccess` file
    will redirect all the requests to your Django project set in the `wsgi` file,
    as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy `.htaccess` as `.htaccess_live`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, also create `.htaccess_maintenace` for maintenance cases. This new Apache
    configuration file will show `temporarily-offline.html` for all the users except
    you, recognized by the IP address of your LAN or computer. You can check your
    IP by googling `what''s my ip`. The following is how the `.htaccess_maintenance`
    will look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Replace the IP digits in this file with your own IP.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, create an HTML file that will be shown when your website is down:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log in to the server as the root user via Secure Shell and edit the Apache
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the domain configuration file, as follows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines before `</VirtualHost>`:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart Apache for the changes to take effect:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Set the default scheduled cron jobs. For more information on how to do this,
    refer to the *Setting up cron jobs for regular tasks* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With this configuration, files in the `media` and `static` directories are served
    directly from Apache; whereas, all the other URLs are handled by the Django project
    through the `my.wsgi` file.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `<FilesMatch>` directive in the Apache site configuration, all media
    files are set to be cached for one year. Static URL paths have a numbered prefix
    that changes whenever you update the code from the Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: When you need to update the website and want to set it down for maintenance,
    you'll have to copy `.htaccess_maintenance` to `.htaccess`. When you want to set
    the website up again, you'll have to copy `.htaccess_live` to `.htaccess`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To find other options for hosting your Django project, refer to: [http://djangofriendly.com/hosts/](http://djangofriendly.com/hosts/).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Django 1.8"), *Getting Started with Django 1.8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Django 1.8"), *Getting Started with Django 1.8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up STATIC_URL dynamically for Git users* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Django 1.8"), *Getting Started with Django 1.8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting UTF-8 as the default encoding for MySQL configuration* recipe in
    [Chapter 1](ch01.html "Chapter 1. Getting Started with Django 1.8"), *Getting
    Started with Django 1.8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and using the Fabric deployment script* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up cron jobs for regular tasks* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up cron jobs for regular tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Usually websites have some management tasks to do in the background once in
    a week, day, or every hour. This can be achieved using cron jobs that are also
    known as scheduled tasks. These are scripts that run on the server for the specified
    period of time. In this recipe, we will create two cron jobs: one to clear sessions
    from the database and another to back up the database data. Both will be run every
    night.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start with, deploy your Django project on to a remote server. Then, connect
    to the server by SSH.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create the two scripts and make them run regularly by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `commands`, `db_backups` and `logs` directories in your project''s
    home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `commands` directory, create a `cleanup.sh` file with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the following file executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, in the same directory, create a `backup_db.sh` file with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the following file executable too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the scripts to see whether they are executed correctly by running the
    scripts and then checking the `*.log` files in the `logs` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In your project''s home directory create a `crontab.txt` file with the following
    tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the crontab tasks, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the current setup, every night `cleanup.sh` will be executed at 1 A.M.
    and `backup_db.sh` will be executed at 2 A.M. The execution logs will be saved
    in `cleanup.log` and `backup_db.log`. If you get any errors, you should check
    these files for the traceback.
  prefs: []
  type: TYPE_NORMAL
- en: The database backup script is a little more complex. Every day of the week,
    it creates a backup file for that day called `0-Sunday.sql`, `1-Monday.sql`, and
    so on. Therefore, you will be able to restore data backed seven days ago or later.
    At first, the backup script dumps the database schema for all the tables and then
    it dumps the data for all the tables, except for the ones listed one under each
    other in `EXCLUDED_TABLES` (currently, that is, `django_session`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The crontab syntax is this: each line contains a specific period of time and
    then a task to run at it. The time is defined in five parts separated by spaces,
    as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Minutes from 0 to 59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hours from 0 to 23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Days of month from 1 to 31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Months from 1 to 12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Days of week from 0 to 7, where 0 is Sunday, 1 is Monday, and so on. 7 is Sunday
    again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An asterisk (`*`) means that every time frame will be used. Therefore, the
    following task defines `cleanup.sh` to be executed at 1:00 AM every day of a month,
    every month, and every day of the week:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: You can learn more about the specifics of the crontab at [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and using the Fabric deployment script* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and using the Fabric deployment script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, to update your site, you have to perform repetitive tasks such as setting
    a maintenance page, stopping cron jobs, creating a database backup, pulling new
    code from a repository, migrating databases, collecting static files, testing,
    starting cron jobs again, and unsetting the maintenance page. That's quite a tedious
    work, where mistakes can occur. Also, you need not forget the different routines
    for staging site (the one where new features can be tested) and production site
    (which is shown to the public). Fortunately, there is a Python library called
    **Fabric** that allows you to automate these tasks. In this recipe, you will learn
    how to create `fabfile.py`, the script for Fabric, and how to deploy your project
    on staging and production environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Fabric script can be called from the directory that contains it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This will deploy the project on the staging server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Set up analogous staging and production websites using the instructions in
    the *Deploying on Apache with mod_wsgi* recipe. Install Fabric on your computer
    globally or in your project''s virtual environment, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start by creating a `fabfile.py` file in the Django project directory
    with several functions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dev()`, `staging()`, and `production()` functions set the appropriate
    environment for the current task. Then, the `deploy()` function calls the `_update_dev()`,
    `_update_staging()`, or `_update_production()` private functions, respectively.
    Let''s define these private functions in the same file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The function for deploying in the development environment will optionally do
    the following tasks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the local database with data from the production database
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Download media files from the production server
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Update code from the Git repository
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate the local database
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create this function in the Fabric script file, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The function for deploying in a staging environment will optionally do the
    following tasks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a maintenance screen saying that the site is being updated and the visitors
    should wait or come back later
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stop scheduled cron jobs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the latest data from the production database
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the latest media files from the production database
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pull code from the Git repository
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect static files
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate the database schema
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart the Apache web server
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Start scheduled cron jobs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unset the maintenance screen
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create this function in the Fabric script, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The function for deploying in a production environment will optionally do the
    following tasks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the maintenance screen telling that the site is being updated and the visitors
    should wait or come back later
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stop scheduled cron jobs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Back up the database
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pull code from the Git repository
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect static files
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate the database schema
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart the Apache web server
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Start scheduled cron jobs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unset the maintenance screen
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create this function in the Fabric script, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each non-private function in a `fabfile.py` file becomes a possible argument
    to be called from the command-line tool. To see all the available functions, run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'These functions are called in the same order as they are passed to the Fabric
    script, therefore you need to be careful about the order of the arguments when
    deploying to different environments:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy in a development environment, you would run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will ask you questions similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When answered positively, a specific step will be executed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To deploy in a staging environment, you would run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, to deploy in a production environment, you would run the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For each step of deployment, you will be asked whether you want to do it or
    skip it. If you want to execute all the steps without any prompts (except the
    password requests), add a `full` parameter to the deployment script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The Fabric script utilizes several basic functions that can be described as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`local()`: This function is used to run a command locally in the current computer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run()`: This function is used to run a command as a specified user on a remote
    server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prompt()`: This function is used to ask a question'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get()`: This function is used to download a file from a remote server to a
    local computer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo()`: This function is used to run a command as the root (or other) user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fabric uses the Secure Shell connection to perform tasks on remote servers.
    Each `run()` or `sudo()` command is executed as a separate connection; therefore,
    when you want to execute multiple commands at once, you have to either create
    a `bash` script on the server and call it from Fabric or you have to separate
    the commands using the `&&` shell operator, which executes the next command only
    if the previous one was successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are also using the `scp` command to copy files from the production server
    to the staging server. The syntax of `scp` for recursively copying all the files
    from a specified directory is similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'To make the output more user-friendly, we are using colors, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'The deployment script expects you to have two management commands: `prepare_dev`
    and `prepare_staging`. It''s up to you to decide what to put in these commands.
    Basically, you could change the super user password to a simpler one and change
    the site domain there. If you don''t need such functionality, just remove that
    from the Fabric script.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The general rule of thumb is not to store any sensitive data in the Fabric
    script if it is saved in the Git repository. Therefore, for example, to make a
    backup of the database, we call the `backup_db.sh` script on the remote production
    server. The content of such a file could be something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'You can make it executable with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding command is run without parameters, it will create a database
    dump with the date and time in the filename, for example, `db_2014-04-24-1400.sql`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `--latest` parameter is passed, the filename of the dump will be `db_latest.sql`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fabric scripts can be used not only for deployment, but also for any routine
    that you need to perform on remote servers, for example, collecting translatable
    strings when you are using the Rosetta tool to translate `*.po` files online,
    rebuild search indexes when you are using Haystack for full-text searches, create
    backups on demand, call custom management commands, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about Fabric, refer to the following URL: [http://docs.fabfile.org/en/1.10/](http://docs.fabfile.org/en/1.10/).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
