- en: Assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A command-line HTTP client written in Python that makes it easy to compose and
    send HTTP requests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resources built on top of Flask pluggable views
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`patch`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`put`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`post`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`get`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A RESTful resource
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the field filtering and output formatting specified in `notification_fields` to
    the appropriate instance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`flask run -h 0.0.0.0`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A library that uses the Alembic package to handle SQLAlchemy database migrations
    for Flask applications
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A lightweight library for converting complex datatypes to and from native Python
    datatypes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An ORM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Registers a method to invoke before deserializing an object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Takes the instance or collection of instances passed as an argument and applies
    the field filtering and output formatting specified in the `Schema` subclass to
    the instance or collection of instances
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The field will nest a single `Schema` or a collection of `Schema` based on the
    value for the `many` argument
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`PUT`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PATCH`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 535,000
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A proxy that allows us to store on this whatever we want to share for one request
    only
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A password hashing framework that supports more than 30 schemes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Makes this function become the callback that `Flask-HTTPAuth` will use to verify
    the password for a specific user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the methods declared in the resource will have the `auth.login_required` decorator
    applied to them
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`page_number = request.args.get(''page'', 1, type=int)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`@pytest.fixture`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`test_`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`coverage report -m`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A unit test framework that makes testing easy and reduces boilerplate code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Measures the code coverage of Python programs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`python manage.py startapp recipes`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`''django-rest-framework''`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is integrated with Django
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mediators between the model instances and Python primitives
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Route URLs to views
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python primitives and HTTP requests and responses
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `Game` class as a subclass of the `django.db.models.Model` superclass
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A wrapper that converts a function-based view into a subclass of the `rest_framework.views.APIView`
    class
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Form` and `ModelForm` classes'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SlugRelatedField`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HyperlinkedRelatedField`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generates human-friendly HTML output for each resource whenever the request
    specifies `text/html` as the value for the `Content-type` key in the request header
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`title = django.db.models.CharField(max_length=250, unique=True)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`title = django.db.models.CharField(max_length=250, unique=False)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DEFAULT_PAGINATION_CLASS`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`rest_framework.pagination.LimitOffsetPagination`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides an HTTP basic authentication against username and password
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Works with Django’s session framework for authentication
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DEFAULT_AUTHENTICATION_CLASSES`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`client`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@pytest.mark.django_db`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Limits the rate of requests for specific parts of the API identified with the
    value assigned to the `throttle_scope` property
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Limits the rate of requests that a specific user can make
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides field filtering capabilities
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides single query parameter-based searching capabilities and it is based
    on the Django admin's search function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`filterset_class`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python objects such as functions, classes, and instances that implement a `__call__`
    method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pyramid.request.Request`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`status_code`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HTTPCreated`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`json_body`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`self.set_satus`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`self.write`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`tornado.web.RequestHandler`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`("GET", "PATCH")`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A regular expression (`regexp`) and a `tornado.web.IncomingHTTPRequestHandler`
    subclass (`request_class`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automatically writes the chunk as JSON and sets the value of the `Content-Type`
    header to `application/json`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generates Python objects for the JSON string of the request body and returns
    the generated dictionary
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Encapsulates the asynchronous execution of a callable
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A high-level interface for asynchronously executing callables
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run a synchronous method asynchronously on an executor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Coroutines
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http_server_client`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`tornado.escape.json_decode`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
