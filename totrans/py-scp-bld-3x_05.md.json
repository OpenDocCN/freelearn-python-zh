["```py\nbl_info = {\n    \"name\": \"A Very Simple Panel\",\n    \"author\": \"John Doe\",\n    \"version\": (1, 0),\n    \"blender\": (3, 2, 0),\n    \"description\": \"Just show up a panel in the UI\",\n    \"category\": \"Learning\",\n}\n```", "```py\nimport bpy\nclass OBJECT_PT_very_simple(bpy.types.Panel):\n    \"\"\"Creates a Panel in the object context of the\n    properties editor\"\"\"\n    # still a draft: actual code will be added later\n    pass\n```", "```py\ndef register():\n    bpy.utils.register_class(OBJECT_PT_very_simple)\ndef unregister():\n    bpy.utils.unregister_class(OBJECT_PT_very_simple)\n```", "```py\nimport bpy\nclass OBJECT_PT_very_simple(bpy.types.Panel):\n    \"\"\"Creates a Panel in the object context of the\n    properties space\"\"\"\n    bl_label = \"A Very Simple Panel\"\n    bl_idname = \"VERYSIMPLE_PT_layout\"\n    bl_space_type = 'PROPERTIES'\n    bl_region_type = 'WINDOW'\n    bl_context = 'object'\n    def draw(self, context):\n        # add layout elements\n        pass\n```", "```py\n    def draw(self, context):\n        layout = self.layout\n        layout.label(text=\"A Very Simple Label\")\n```", "```py\n    def draw(self, context):\n        layout = self.layout\n        layout.label(text=\"A Very Simple Label\",\n                     icon='INFO')\n        layout.label(text=\"Isn't it great?\",\n                     icon='QUESTION')\n```", "```py\nimport bpy\nfrom bpy.utils import previews\nimport os\n```", "```py\n# global variable for icon storage\ncustom_icons = None\n```", "```py\ndef load_custom_icons():\n    \"\"\"Load icon from the add-on folder\"\"\"\n    Addon_path = os.path.dirname(__file__)\n    img_file = os.path.join(addon_path,\n               \"icon_smile_64.png\")\n    global custom_icons\n    custom_icons = previews.new()\n    custom_icons.load(\"smile_face\",img_file, 'IMAGE')\n```", "```py\ndef remove_custom_icons():\n    \"\"\"Clear Icons loaded from file\"\"\"\n    global custom_icons\n    bpy.utils.previews.remove(custom_icons)\n```", "```py\ndef register():\n    load_custom_icons()\n    bpy.utils.register_class(VerySimplePanel)\ndef unregister():\n    bpy.utils.unregister_class(VerySimplePanel)\n    clear_custom_icons()\n```", "```py\nlayout.label(text=\"Smile\", icon_value=custom_icons['smile_face'].icon_id)\n```", "```py\n    def draw(self, context):\n        col = self.layout.column()\n        col.label(text=\"A Very Simple Label\",\n                  icon='INFO')\n        row = col.row()\n        row.label(text=\"Isn't it great?\",\n                  icon='QUESTION')\n        icon_id = custom_icons[\"smile_face\"].icon_id\n        row.label(text=\"Smile\", icon_value=icon_id)\n```", "```py\n        box = col.box()\n        row = box.row()\n        row.label(text=\"version:\")\n        row.label(text=str(bl_info['version']))\n```", "```py\n        # ...\n        box = col.box()\n        split = box.split(factor=0.33)\n        left_col = split.column()\n        left_col.label(text=\"author:\")\n        left_col.label(text=\"version:\")\n        right_col = split.column()\n        right_col.label(text=str(bl_info['author']))\n        right_col.label(text=str(bl_info['version']))\n```", "```py\n        # …\n        box = col.box()\n        split = box.split(factor=0.3)\n        left_col = split.column()\n        right_col = split.column()\n        for k, v in bl_info.items():\n            if not v:\n                # ignore empty entries\n                continue\n            left_col.label(text=k)\n            right_col.label(text=str(v))\n```", "```py\n        # ...\n        col.label(text=\"Scene Objects:\")\n        grid = col.grid_flow(columns=2)\n        for ob in context.scene.objects:\n            grid.label(text=ob.name)\n```", "```py\nOUTLINER_OB_[OBJECT_TYPE]\n```", "```py\n>>> h = \"Hello\"\n>>> print(f\"{h}, World!\")\nHello, World!\n```", "```py\nf'OUTLINER_OB_{ob.type}'\n```", "```py\n        col.label(text=\"Scene Objects:\")\n        grid = col.grid_flow(columns=2)\n        for ob in context.scene.objects:\n            grid.label(text=ob.name,\n                       icon=f'OUTLINER_OB_{ob.type}')\n```", "```py\n        col.label(text=\"Scene Objects:\")\n        grid = col.grid_flow(columns=2, row_major=True)\n        for i, ob in enumerate(context.scene.objects):\n            if i > 3:   # stop after the third object\n                grid.label(text\"..\")\n                break\n            grid.label(text=ob.name,\n                       icon=f'OUTLINER_OB_{ob.type}')\n```", "```py\nclass OBJECT_PT_very_simple(bpy.types.Panel):\n    #...\n    bl_context = 'object'\n    max_objects = 3\n    def draw(self, context):\n        # ...\n        for i, ob in enumerate(context.scene.objects):\n            if i > self.max_objects:\n                objects_left = len(context.scene.objects)\n                objects_left -= self.max_objects\n                txt = f\"... (more {objects_left} objects\"\n                grid.label(text=txt)\n                break\n```", "```py\nimport very_simple_panel\nvery_simple_panel.OBJECT_PT_very_simple.max_objects = 10\n```", "```py\n>>> import bpy\n>>> bpy.data.objects['Cube'].select_get()\nTrue\n```", "```py\n>>> import bpy\n>>> bpy.data.objects['Cube'] == bpy.context.object\nTrue\n```", "```py\n    # ...\n    for i, ob in enumerate(context.scene.objects):\n        # layout item to set entry color\n        item_layout = grid.column()\n        item_layout.label(text=ob.name,\n                          icon=f'OUTLINER_OB_{ob.type}')\n```", "```py\n        item_layout.enabled = ob.select_get()\n```", "```py\n        item_layout.alert = ob == context.object\n```", "```py\nbpy.ops.object.delete(use_global=False)\n```", "```py\n>>> bpy.ops.object.delete.idname()\n'OBJECT_OT_delete'\n```", "```py\ncol.operator(bpy.ops.object.delete.idname())\n```", "```py\n        num_selected = len(context.selected_objects)\n```", "```py\n        if num_selected > 0:\n            op_txt = f\"Delete {num_selected} object\"\n            if num_selected > 1:\n                op_txt += \"s\"  # add plural 's'\n            col.operator(bpy.ops.object.delete.idname(),\n                         text=op_txt)\n```", "```py\n        if (num_selected > 0):\n                # …\n        else:\n            to_disable = col.column()\n            to_disable.enabled = False\n            to_disable.operator(\n                          bpy.ops.object.delete.idname(),\n                          text=\"Delete Selected\"\n                          )\n```", "```py\n>>> bpy.ops.object.delete(\ndelete()\nbpy.ops.object.delete(use_global=False, confirm=True)\nDelete selected objects\n>>> bpy.ops.object.delete(\n```", "```py\n    col.operator(bpy.ops.object.delete.idname(),\n                 text=op_txt)\n```", "```py\n    props = col.operator(bpy.ops.object.delete.idname(),\n            text=op_txt)\n    props.confirm = False\n```", "```py\nimport bpy\nfrom bpy.utils import previews\nimport os\nimport random\n```", "```py\ndef add_random_location(objects, amount=1,\n                        do_axis=(True, True, True)):\n    \"\"\"Add units to the locations of given objects\"\"\"\n    for ob in objects:\n        for i in range(3):\n            if do_axis[i]:\n                loc = ob.location\n                loc[i] += random.randint(-amount, amount)\n```", "```py\nclass TRANSFORM_OT_random_location(bpy.types.Operator):\n    \"\"\"Add units to the locations of selected objects\"\"\"\n    bl_idname = \"transform.add_random_location\"\n    bl_label = \"Add random Location\"\n    amount: bpy.props.IntProperty(name=\"Amount\",\n                                  default=1)\n    axis: bpy.props.BoolVectorProperty(\n                               name=\"Displace Axis\",\n                               default=(True, True, True)\n                               )\n```", "```py\n    @classmethod\n    def poll(cls, context):\n        return context.selected_objects\n    def execute(self, context):\n        add_random_location(context.selected_objects,\n                            self.amount,\n                            self.axis)\n        return {'FINISHED'}\n```", "```py\n    col.operator(\n                TRANSFORM_OT_random_location.bl_idname\n                )\n```", "```py\n    bpy.utils.register_class(\n                            TRANSFORM_OT_random_location\n                            )\n```", "```py\n    bpy.utils.unregister_class(\n                            TRANSFORM_OT_random_location\n                            )\n```", "```py\n    @classmethod\n    def poll(cls, context):\n        return context.selected_objects\n    def invoke(self, context, event):\n        wm = context.window_manager\n        return wm.invoke_props_dialog(self)\n```", "```py\n    bl_space_type = 'VIEW_3D'\n    bl_region_type = 'UI'\n```", "```py\nclass VerySimplePanel(bpy.types.Panel):\n    \"\"\"Creates a Panel in the viewport properties\"\"\"\n    bl_label = \"A Very Simple Panel\"\n    bl_idname = \"VERYSIMPLE_PT_layout\"\n    bl_space_type = 'VIEW_3D'\n    bl_region_type = 'UI'\n    bl_category = \"Our Panel\"\n```"]