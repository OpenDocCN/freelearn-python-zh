- en: <st c="0">2</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Understanding the Project Structure and Creating Our First App</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="64">Django projects contain a predefined structure with some key folders
    and files.</st> <st c="145">In this chapter, we will discuss the Django project
    structure and how some of those folders and files are used to configure our web
    applications.</st> <st c="291">Furthermore, Django projects are composed of one
    or more apps.</st> <st c="354">We will learn how to create a “home” app, composed
    of “home” and “about” sections, and how to register it inside our</st> <st c="471">Django
    project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="486">In this chapter, we will cover the</st> <st c="522">following topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="539">Understanding the</st> <st c="558">project structure</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="575">Creating our</st> <st c="589">first app</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="598">Creating a</st> <st c="610">home page</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="619">Creating an</st> <st c="632">about page</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="642">With all of these topics completed, you will know how to create
    Django apps and</st> <st c="723">web pages.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="733">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="756">In this chapter, we will be using Python 3.10+.</st> <st c="805">Additionally,
    we will be using the</st> **<st c="840">Visual Studio (VS) Code</st>** <st c="863">editor
    in this book, which you can download</st> <st c="908">from</st> [<st c="913">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="943">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="944">The code for this chapter is located</st> <st c="982">at</st> [<st
    c="985">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter02/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter02/moviesstore)<st
    c="1093">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1094">The CiA video for this chapter can be found</st> <st c="1139">at</st>
    [<st c="1142">https://packt.link/rzU25</st>](https://packt.link/rzU25)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1166">Understanding the project structure</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1202">Let’s look at the</st> <st c="1220">project files that were created
    for us in</st> [*<st c="1263">Chapter 1</st>*](B22457_01.xhtml#_idTextAnchor014)<st
    c="1272">, in the</st> *<st c="1281">Creating and running a Django project</st>*
    <st c="1318">section.</st> <st c="1328">Open the</st> `<st c="1337">moviesstore</st>`
    <st c="1348">project folder in VS Code.</st> <st c="1376">You will see the elements
    shown in</st> *<st c="1411">Figure 2</st>**<st c="1419">.1</st>*<st c="1421">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – The MOVIESSTORE directory structure](img/B22457_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="1455">Figure 2.1 – The MOVIESSTORE directory structure</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1503">Let’s learn about each of</st> <st c="1530">these elements.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1545">The moviesstore folder</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="1568">As you can</st> <st c="1580">see</st> <st c="1584">in</st> *<st
    c="1587">Figure 2</st>**<st c="1595">.1</st>*<st c="1597">, there is a folder
    with the same name as the folder we opened in VS Code originally –</st> `<st c="1684">moviesstore</st>`<st
    c="1695">. The</st> `<st c="1701">moviesstore</st>` <st c="1712">folder contains
    a set of files to configure the Django project.</st> *<st c="1777">Figure 2</st>**<st
    c="1785">.2</st>* <st c="1787">shows the content of the</st> `<st c="1813">moviesstore</st>`
    <st c="1824">folder:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – The moviesstore folder content structure](img/B22457_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="1952">Figure 2.2 – The moviesstore folder content structure</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2005">Let’s briefly look at</st> <st c="2027">all the</st> <st c="2035">elements
    under the</st> `<st c="2055">moviesstore</st>` <st c="2066">folder:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="2074">__pycache__</st>`<st c="2086">: This folder</st> <st c="2100">stores
    compiled bytecode when we generate our project.</st> <st c="2156">You can largely
    ignore this folder.</st> <st c="2192">Its purpose is to make your project start
    up a little faster by caching the compiled code, which can then be</st> <st c="2301">readily
    executed.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="2318">__init__.py</st>`<st c="2330">: This file indicates to Python
    that this directory should be considered a Python package.</st> <st c="2422">We
    can ignore</st> <st c="2436">this file.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="2446">asgi.py</st>`<st c="2454">: Django, being a web framework, needs
    a web server to operate.</st> <st c="2519">And since most web servers don’t natively
    speak Python, we need an interface to make that communication happen.</st> <st
    c="2631">Django currently supports two interfaces –</st> `<st c="2766">asgi.py</st>`
    <st c="2773">file contains an entry point for ASGI-compatible web servers to serve
    your</st> <st c="2849">project asynchronously.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="2872">settings.py</st>`<st c="2884">: The</st> `<st c="2891">settings.py</st>`
    <st c="2902">file is an important file that controls our project’s settings.</st>
    <st c="2967">It contains several properties; let’s analyze some</st> <st c="3018">of
    them:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3026">BASE_DIR</st>`<st c="3035">: Determines where on your machine
    the project</st> <st c="3083">is situated.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3095">SECRET_KEY</st>`<st c="3106">: This is a secret key for a particular
    Django project.</st> <st c="3163">It is used to provide cryptographic signing
    and should be set to a unique, unpredictable value.</st> <st c="3259">In a production
    environment, it should be replaced with a securely</st> <st c="3326">generated
    key.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3340">DEBUG</st>`<st c="3346">: Our site can run in debug mode or not.</st>
    <st c="3388">In debug mode, we get detailed information on errors, which is very
    useful when we develop our applications.</st> <st c="3497">For instance, if we
    try to run</st> `<st c="3528">http://localhost:8000/123</st>` <st c="3553">in
    the browser, we will see a</st> **<st c="3584">Page not found (404)</st>** <st
    c="3604">error (see</st> *<st c="3616">Figure 2.3</st>*<st c="3626">):</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Accessing an invalid application route](img/B22457_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="4091">Figure 2.3 – Accessing an invalid application route</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="4142">INSTALLED_APPS</st>`<st c="4157">: This</st> <st c="4164">setting
    specifies the</st> <st c="4186">list of all Django applications that are enabled
    for this project.</st> <st c="4254">Each string in the list represents the Python
    path to a Django application.</st> <st c="4330">By default, Django includes several
    built-in applications, such as admin, auth, contenttypes, and sessions.</st> <st
    c="4438">We will see later in this chapter how to create our own applications
    and how to include them in</st> <st c="4534">this configuration.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="4553">MIDDLEWARE</st>`<st c="4564">: Middleware in Django intercepts
    and manages the request and response processing flow.</st> <st c="4653">The listed
    middleware is provided by Django and handles various aspects of request/response
    processing, including security, session management, authentication,</st> <st c="4813">and
    more.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="4822">ROOT_URLCONF</st>`<st c="4835">: Specifies the Python path to
    the root URL configuration for the</st> <st c="4902">Django project.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="4917">TEMPLATES</st>`<st c="4927">: Defines the configuration for Django’s
    template system.</st> <st c="4986">It includes information regarding the list
    of directories that the system should look in for template source files and other
    specific</st> <st c="5120">template settings.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5138">There are some other properties in</st> `<st c="5174">settings.py</st>`<st
    c="5185">, such as</st> `<st c="5195">DATABASES</st>`<st c="5204">,</st> `<st
    c="5206">LANGUAGE_CODE</st>`<st c="5219">, and</st> `<st c="5225">TIME_ZONE</st>`<st
    c="5234">, but we focused on the more important properties in the preceding list.</st>
    <st c="5307">We will later revisit this file and see how relevant it is when developing</st>
    <st c="5382">our site.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="5391">urls.py</st>`<st c="5399">: This file contains the URL declarations
    for this Django project.</st> <st c="5467">It could link specific URL paths to
    functions, classes, or other URL files to generate a response, or to render a
    page in response to a browser or URL request.</st> <st c="5627">We will later
    add paths to this file and better understand how</st> <st c="5690">it works.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="5699">wsgi.py</st>`<st c="5707">: This file contains an entry point
    for WSGI-compatible web servers to serve your project.</st> <st c="5799">By</st>
    <st c="5802">default, when we run the server with</st> <st c="5839">the</st> `<st
    c="5843">python manage.py runserver</st>` <st c="5869">command, it uses the</st>
    <st c="5891">WSGI configuration.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5910">manage.py</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="5920">The</st> `<st c="5925">manage.py</st>` <st c="5934">file</st> <st
    c="5940">seen</st> <st c="5945">in</st> *<st c="5948">Figure 2</st>**<st c="5956">.1</st>*
    <st c="5958">and</st> *<st c="5963">Figure 2</st>**<st c="5971">.2</st>* <st c="5973">is
    a crucial element that we will extensively use throughout this book.</st> <st
    c="6046">This file provides a command-line utility that lets you interact with
    a Django project and perform some administrative operations.</st> <st c="6177">For
    example, we earlier ran the following command in</st> [*<st c="6230">Chapter 1</st>*](B22457_01.xhtml#_idTextAnchor014)<st
    c="6239">, in the</st> *<st c="6248">Creating and running a Django</st>* *<st
    c="6278">project</st>* <st c="6285">section:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6321">The purpose of the command was to start the local web server.</st>
    <st c="6384">We will later illustrate more administrative</st> <st c="6428">functions,
    such as one to create</st> <st c="6461">a new app –</st> `<st c="6474">python</st>`
    `<st c="6481">manage.py startapp</st>`<st c="6499">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6500">db.sqlite3</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6511">The</st> `<st c="6516">db.sqlite3</st>` <st c="6526">file is the</st>
    <st c="6538">default SQLite database</st> <st c="6562">file that Django uses for
    development purposes.</st> `<st c="6840">db.sqlite3</st>` <st c="6850">file).</st>
    <st c="6858">We will not use this file for now; however, we will discuss it in</st>
    [*<st c="6924">Chapter 5</st>*](B22457_05.xhtml#_idTextAnchor088)<st c="6933">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6934">We have learned about the Django project structure and some of
    its main elements.</st> <st c="7017">Now, let’s create our first</st> <st c="7045">Django
    app.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7056">Creating our first app</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="7079">A</st> **<st c="7082">Django app</st>** <st c="7092">is a self-contained</st>
    <st c="7113">package of code that performs a specific functionality or serves
    a particular purpose within a</st> <st c="7208">Django project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7223">A single Django project can contain one or more apps that work
    together to power a web application.</st> <st c="7324">Django uses the concept
    of projects and apps to keep code clean</st> <st c="7388">and readable.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7401">For example, on a movie review site such as</st> *<st c="7446">Rotten
    Tomatoes</st>*<st c="7461">, as shown in</st> *<st c="7475">Figure 2</st>**<st
    c="7483">.4</st>*<st c="7485">, we can have an app for listing movies, an app
    for listing news, an app for payments, an app for user authentication, and</st>
    <st c="7608">so on:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The Rotten Tomatoes website](img/B22457_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7753">Figure 2.4 – The Rotten Tomatoes website</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7793">Apps in Django are like pieces of a website.</st> <st c="7839">You
    can create an entire website with one single app, but it is useful to break it
    up into different apps, each representing a</st> <st c="7966">clear function.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7981">Our</st> *<st c="7986">Movies Store</st>* <st c="7998">site will
    begin with one app.</st> <st c="8029">We will later add more as we progress.</st>
    <st c="8068">To add an app, in the Terminal, stop the server by pressing</st>
    *<st c="8128">Cmd</st>*<st c="8131">+</st> *<st c="8134">C</st>*<st c="8135">.
    Navigate to the top</st> `<st c="8157">moviesstore</st>` <st c="8168">folder (the
    one that contains the</st> `<st c="8203">manage.py</st>` <st c="8212">file) and
    run the following in</st> <st c="8244">the Terminal:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8257">For macOS, run the</st> <st c="8277">following command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8327">For Windows, run the</st> <st c="8349">following command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8398">A new folder,</st> `<st c="8413">home</st>`<st c="8417">, will
    be added to the project (see</st> *<st c="8453">Figure 2</st>**<st c="8461">.5</st>*<st
    c="8463">).</st> <st c="8467">As we progress in the book, we will explain</st>
    <st c="8511">the files that are inside</st> <st c="8537">the folder.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The MOVIESSTORE project structure containing the home app](img/B22457_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="8683">Figure 2.5 – The MOVIESSTORE project structure containing the home
    app</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8753">Although our new</st> `<st c="8771">home</st>` <st c="8775">app
    exists in our Django project, Django doesn’t recognize it till we explicitly add
    it.</st> <st c="8865">To do so, we need to specify it in</st> `<st c="8900">settings.py</st>`<st
    c="8911">. So, go to</st> `<st c="8923">/moviesstore/settings.py</st>`<st c="8947">,
    under</st> `<st c="8955">INSTALLED_APPS</st>`<st c="8969">, and you will see six
    built-in apps</st> <st c="9006">already there.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9020">Add the app name, as highlighted in the following (this should
    be done whenever a new app</st> <st c="9111">is created):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9317">We have successfully</st> <st c="9339">created our first app and
    included it in our Django settings project.</st> <st c="9409">Now, we are going
    to create and serve two pages inside</st> <st c="9464">this app.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9473">Creating a home page</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="9494">Creating a simple</st> <st c="9512">page or section in Django usually
    involves</st> <st c="9556">three steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9568">Configure</st> <st c="9579">a URL.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="9585">Define a view function</st> <st c="9609">or class.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="9618">Create</st> <st c="9626">a template.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="9637">Let’s see how to apply those steps to create a simple “home” page
    that will display a “welcome” message to</st> <st c="9744">the</st> <st c="9749">final
    user.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9760">Configuring an URL</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**<st c="9779">Django URLs</st>** <st c="9791">(</st>**<st c="9793">Uniform
    Resource Locators</st>**<st c="9818">) are</st> <st c="9824">patterns used to
    map incoming HTTP requests to</st> <st c="9871">the appropriate view functions
    or classes that handle those requests.</st> <st c="9942">They define the routing
    mechanism for your Django project, specifying which views should be called for</st>
    <st c="10045">different URLs.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10060">There is a main URL configuration file located at</st> `<st c="10111">/moviesstore/urls.py</st>`
    <st c="10131">that currently has the</st> <st c="10155">following code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="10284">When a user types a URL (related to our Django application) in
    the browser, a request first passes through the</st> `<st c="10396">/moviesstore/urls.py</st>`
    <st c="10416">file, and it will try to match a</st> `<st c="10450">path</st>`
    <st c="10454">object in</st> `<st c="10465">urlpatterns</st>` <st c="10476">–
    for example, if a user enters</st> `<st c="10509">http://localhost:8000/admin</st>`
    <st c="10536">into the browser, the URL will match the</st> `<st c="10578">admin/</st>`
    <st c="10584">path.</st> <st c="10591">The server will then respond with the Django
    admin page (as shown in</st> *<st c="10660">Figure 2</st>**<st c="10668">.6</st>*<st
    c="10670">), which we will</st> <st c="10688">explore later:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – The /admin route – the admin page](img/B22457_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10799">Figure 2.6 – The /admin route – the admin page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10845">Conversely, if a user enters</st> `<st c="10875">localhost:8000/hello</st>`<st
    c="10895">, Django will return a</st> `<st c="10918">404 not found</st>` <st c="10931">page
    because</st> <st c="10945">there aren’t any matching paths</st> <st c="10976">in
    the URL</st> <st c="10988">configuration file.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11007">Creating a path for the home page</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="11041">There are two</st> <st c="11056">ways to create a custom path
    for</st> <st c="11089">a page:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11096">Create the path in the project-level URL file (</st><st c="11144">in</st>
    `<st c="11148">/moviesstore/urls.py</st>`<st c="11168">)</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11170">Create the path in a</st> `<st c="11191">urls.py</st>` <st c="11198">file,
    defined at the app level (</st><st c="11231">in</st> `<st c="11235">/home/urls.py</st>`<st
    c="11248">).</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11251">We will use the second option in this book, since it allows us
    to keep our URLs separate</st> <st c="11341">and organized.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11355">In</st> `<st c="11359">/home/</st>`<st c="11365">, create a new
    file called</st> `<st c="11392">urls.py</st>`<st c="11399">. This file will contain
    the path relating to the URLs of the home app.</st> <st c="11471">For now, fill
    it in with</st> <st c="11496">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11619">Let’s explain the</st> <st c="11638">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11652">We import the</st> `<st c="11667">path</st>` <st c="11671">function,
    which is used to define URL patterns</st> <st c="11719">in Django.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11729">We import the</st> `<st c="11744">views</st>` <st c="11749">file.</st>
    <st c="11756">In the next section, we will implement an</st> `<st c="11798">index</st>`
    <st c="11803">function inside the</st> `<st c="11824">views</st>` <st c="11829">file.</st>
    <st c="11836">That function will render a template that contains a “</st><st c="11890">welcome”
    message.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11908">We define the</st> `<st c="11923">urlpatterns</st>` <st c="11934">for
    the home app.</st> <st c="11953">In this case, inside the</st> `<st c="11978">urlpatterns</st>`
    <st c="11989">list, we add a new path object with</st> <st c="12026">three arguments:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12042">The first argument,</st> `<st c="12063">''</st>`<st c="12065">,
    represents the URL pattern itself.</st> <st c="12102">In this case, it’s an empty
    string, indicating the root URL.</st> <st c="12163">This means that when the root
    URL of the application is accessed (</st>`<st c="12229">localhost:8000/</st>`<st
    c="12245">), it will match</st> <st c="12263">this path.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12273">The second argument,</st> `<st c="12295">views.index</st>`<st
    c="12306">, refers to the view function that will handle the HTTP request.</st>
    <st c="12371">Here,</st> `<st c="12377">views.index</st>` <st c="12388">indicates
    that the</st> `<st c="12408">index</st>` <st c="12413">function in the</st> `<st
    c="12430">views</st>` <st c="12435">file is responsible for processing</st> <st
    c="12471">the request.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12483">The third argument,</st> `<st c="12504">name='home.index'</st>`<st
    c="12521">, is the name of the URL pattern.</st> <st c="12555">This name is used
    to uniquely identify the URL pattern and can be referenced in</st> <st c="12635">other
    parts of the Django project, such as templates or other</st> <st c="12697">URL
    patterns.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12710">Now, let’s proceed to define the</st> `<st c="12744">views.index</st>`
    <st c="12755">function code.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12770">Defining a view function</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**<st c="12795">Django views</st>** <st c="12808">are Python</st> <st c="12820">functions
    or classes that receive web requests and return web responses.</st> <st c="12893">They
    contain the logic to process HTTP requests and generate appropriate HTTP responses,
    typically in the form of HTML content to be rendered in the user’s</st> <st c="13049">web
    browser.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13061">Our home app already includes a</st> `<st c="13094">views.py</st>`
    <st c="13102">file; let’s take advantage of it and make a simple modification.</st>
    <st c="13168">In</st> `<st c="13171">/home/views.py</st>`<st c="13185">, add the
    following</st> <st c="13205">in</st> **<st c="13208">bold</st>**<st c="13212">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="13312">Let’s explain the</st> <st c="13331">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13345">By default, the</st> `<st c="13362">views</st>` <st c="13367">file
    imports the</st> `<st c="13385">render</st>` <st c="13391">function, which is
    used to render templates and return an HTTP response with the</st> <st c="13473">rendered
    content.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="13490">We define an</st> `<st c="13504">index</st>` <st c="13509">function.</st>
    <st c="13520">This function takes one parameter,</st> `<st c="13555">request</st>`<st
    c="13562">, which represents the HTTP request received by</st> <st c="13610">the
    server.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="13621">Finally, the</st> `<st c="13635">index</st>` <st c="13640">function
    returns a rendered template.</st> <st c="13679">The</st> `<st c="13683">render</st>`
    <st c="13689">function takes the</st> `<st c="13709">request</st>` <st c="13716">as
    the first argument, and the second argument (</st>`<st c="13765">'home/index.html'</st>`<st
    c="13783">) represents the path to the template file to be rendered.</st> <st
    c="13843">In the next section, we will create</st> <st c="13879">that template.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="13893">We have now connected the</st> `<st c="13920">''</st>` <st c="13922">path
    with the proper</st> `<st c="13944">views.index</st>` <st c="13955">function,
    but we are missing the</st> <st c="13988">connection between the</st> `<st c="14012">views.index</st>`
    <st c="14023">function and the</st> `<st c="14041">'home/index.html'</st>` <st
    c="14058">template.</st> <st c="14069">So, let’s implement</st> <st c="14089">the
    template.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14102">Creating a template</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**<st c="14122">Django templates</st>** <st c="14139">are text</st> <st c="14149">files
    containing HTML, along with</st> **<st c="14183">Django template language</st>**
    <st c="14207">(</st>**<st c="14209">DTL</st>**<st c="14212">) syntax, which describes
    the structure of a web page.</st> <st c="14268">Django templates allow you to
    dynamically generate HTML content by inserting variables, loops, conditionals,
    and other logic into the</st> <st c="14402">HTML markup.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14414">Our “home” app doesn’t include a location to store templates,
    so let’s create it.</st> <st c="14497">In</st> `<st c="14500">/home/</st>`<st
    c="14506">, create a</st> `<st c="14517">templates</st>` <st c="14526">folder.</st>
    <st c="14535">Then, in</st> `<st c="14544">/home/templates/</st>`<st c="14560">,
    create a</st> `<st c="14571">home</st>` <st c="14575">folder.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14583">Now, in</st> `<st c="14592">/home/templates/home/</st>`<st c="14613">,
    create a</st> <st c="14624">new file,</st> `<st c="14634">index.html</st>`<st
    c="14644">. This will be the full HTML page for the “home” page.</st> <st c="14699">For
    now, fill it in with</st> <st c="14724">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <st c="14858">This file contains a simple HTML code with a “</st><st c="14905">welcome”
    message.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14923">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14928">We suggest storing your app templates under the next directory
    structure –</st> `<st c="15004">app_name/templates/app_name/my_template.html</st>`<st
    c="15048">. Sometimes, different apps can contain templates with the same name,
    which could lead to potential name conflicts in template resolution.</st> <st
    c="15187">By using the previous strategy, you can define templates with the same
    name in different Django apps without any potential</st> <st c="15310">name conflict.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15324">We have completed the connection between the URL, view function,
    and template.</st> <st c="15404">However, Django</st> <st c="15420">doesn’t know
    how to use our</st> `<st c="15448">/home/urls.py</st>` <st c="15461">file.</st>
    <st c="15468">So, let’s connect this file to our main URL configuration file,
    and then we will have completed</st> <st c="15564">the puzzle.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15575">Connecting a project-level URL file with an app-level URL file</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="15638">In</st> `<st c="15642">/moviesstore/urls.py</st>`<st c="15662">,
    add</st> <st c="15668">the following</st> <st c="15682">in</st> **<st c="15685">bold</st>**<st
    c="15689">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <st c="15846">Let’s explain the</st> <st c="15864">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15878">We modify the code to also import the</st> `<st c="15917">include</st>`
    <st c="15924">function, which is used to include URLs from other URL</st> <st
    c="15980">configuration files.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="16000">We add a new path object to the</st> `<st c="16033">urlpatterns</st>`
    <st c="16044">list.</st> <st c="16051">The empty string,</st> `<st c="16069">''</st>`<st
    c="16071">, represents the base URL to include the URLs from the</st> `<st c="16126">home.urls</st>`
    <st c="16135">file.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="16141">Now, save those files, run the server, and go back to</st> `<st
    c="16196">http://localhost:8000</st>`<st c="16217">; you should</st> <st c="16231">see
    the home page displayed (</st>*<st c="16260">Figure 2</st>**<st c="16269">.7</st>*<st
    c="16271">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – The home page](img/B22457_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="16324">Figure 2.7 – The home page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16350">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16355">When we make changes to a file and save it, Django observes the
    file changes and reloads the server with them.</st> <st c="16467">Therefore, we
    don’t have to manually restart the server each time there is a</st> <st c="16544">code
    change.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16556">Now that we have our “home” page up and running, let’s repeat
    the process to create the “</st><st c="16646">about” page.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16659">Creating an about page</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="16682">Now that we learned how to</st> <st c="16710">create a simple
    page, let’s repeat the process</st> <st c="16757">to create the about page.</st>
    <st c="16783">We will follow these</st> <st c="16804">three steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16816">Configure the</st> <st c="16831">about URL.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="16841">Define the</st> <st c="16853">about function.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="16868">Create the</st> <st c="16880">about template.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="16895">Let’s start.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16908">Configuring the about URL</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="16934">In</st> `<st c="16938">/home/urls.py</st>`<st c="16951">, add
    the</st> <st c="16960">following path</st> <st c="16976">in</st> **<st c="16979">bold</st>**<st
    c="16983">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <st c="17141">So, if a URL matches the</st> `<st c="17166">/about</st>` <st
    c="17172">path, it will execute the</st> `<st c="17199">about</st>` <st c="17204">function
    defined in the</st> `<st c="17229">views</st>` <st c="17234">file.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17240">Defining about function</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="17264">In</st> `<st c="17268">/home/views.py</st>`<st c="17282">, add</st>
    <st c="17288">the following</st> <st c="17302">in</st> **<st c="17305">bold</st>**<st
    c="17309">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <!DOCTYPE html>
  prefs: []
  type: TYPE_NORMAL
- en: <html>
  prefs: []
  type: TYPE_NORMAL
- en: <head>
  prefs: []
  type: TYPE_NORMAL
- en: <title>About page</title>
  prefs: []
  type: TYPE_NORMAL
- en: </head>
  prefs: []
  type: TYPE_NORMAL
- en: <body>
  prefs: []
  type: TYPE_NORMAL
- en: <h1>Welcome to the About Page</h1>
  prefs: []
  type: TYPE_NORMAL
- en: </body>
  prefs: []
  type: TYPE_NORMAL
- en: </html>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
