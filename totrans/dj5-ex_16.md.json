["```py\ndjango-admin startapp chat \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'chat.apps.ChatConfig'****,**\n] \n```", "```py\n**from** **django.contrib.auth.decorators** **import** **login_required**\n**from** **django.http** **import** **HttpResponseForbidden**\nfrom django.shortcuts import render\n**from** **courses.models** **import** **Course**\n**@login_required**\n**def****course_chat_room****(****request, course_id****):**\n**try****:**\n**# retrieve course with given id joined by the current user**\n **course = request.user.courses_joined.get(****id****=course_id)**\n**except** **Course.DoesNotExist:**\n**# user is not a student of the course or course does not exist**\n**return** **HttpResponseForbidden()**\n**return** **render(request,** **'chat/room.html'****, {****'course'****: course})** \n```", "```py\nfrom django.urls import path\nfrom . import views\napp_name = 'chat'\nurlpatterns = [\n    path(\n        'room/<int:course_id>/',\n        views.course_chat_room,\n        name='course_chat_room'),\n] \n```", "```py\nurlpatterns = [\n    # ...\n **path(****'chat/'****, include(****'chat.urls'****, namespace=****'chat'****)),**\n] \n```", "```py\ntemplates/\n    chat/\n        room.html \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Chat room for \"{{ course.title }}\"{% endblock %}\n{% block content %}\n  <div id=\"chat\">\n</div>\n<div id=\"chat-input\">\n<input id=\"chat-message-input\" type=\"text\">\n<input id=\"chat-message-submit\" type=\"submit\" value=\"Send\">\n</div>\n{% endblock %}\n{% block include_js %}\n{% endblock %}\n{% block domready %}\n{% endblock %} \n```", "```py\npython -m pip install -U 'channels[daphne]==4.1.0' \n```", "```py\nINSTALLED_APPS = [\n**'daphne'****,**\n# ...\n] \n```", "```py\nimport os\n**from** **channels.routing** **import** **ProtocolTypeRouter**\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'educa.settings')\n**django_asgi_app** = get_asgi_application()\n**application = ProtocolTypeRouter({**\n**'http'****: django_asgi_app,**\n**})** \n```", "```py\nASGI_APPLICATION = 'educa.asgi.application' \n```", "```py\npython manage.py runserver \n```", "```py\nWatching for file changes with StatReloader\nPerforming system checks...\nSystem check identified no issues (0 silenced).\nApril 14, 2024 - 08:02:57\nDjango version 5.0.4, using settings 'educa.settings'\nStarting ASGI/Daphne version 4.1.0 development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C. \n```", "```py\nimport json\nfrom channels.generic.websocket import WebsocketConsumer\nclass ChatConsumer(WebsocketConsumer):\n    def connect(self):\n        # accept connection\n        self.accept()\n    def disconnect(self, close_code):\n        pass\n# receive message from WebSocket\ndef receive(self, text_data):\n        text_data_json = json.loads(text_data)\n        message = text_data_json['message']\n        # send message to WebSocket\n        self.send(text_data=json.dumps({'message': message})) \n```", "```py\nfrom django.urls import re_path\nfrom . import consumers\nwebsocket_urlpatterns = [\n    re_path(\n        r'ws/chat/room/(?P<course_id>\\d+)/$',\n        consumers.ChatConsumer.as_asgi()\n    ),\n] \n```", "```py\nimport os\n**from** **channels.auth** **import** **AuthMiddlewareStack**\nfrom channels.routing import ProtocolTypeRouter**, URLRouter**\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'educa.settings')\ndjango_asgi_app = get_asgi_application()\n**from** **chat.routing** **import** **websocket_urlpatterns**\napplication = ProtocolTypeRouter({\n    'http': django_asgi_app,\n    **'websocket'****: AuthMiddlewareStack(**\n **URLRouter(websocket_urlpatterns)**\n **),**\n}) \n```", "```py\n{% block include_js %}\n **{{ course.id|json_script:\"course-id\" }}**\n{% endblock %}\n{% block domready %}\n **const courseId = JSON.parse(**\n **document.getElementById('course-id').textContent**\n **);**\n **const url = 'ws://' + window.location.host +**\n **'/ws/chat/room/' + courseId + '/';**\n **const chatSocket = new WebSocket(url);**\n{% endblock %} \n```", "```py\npython manage.py runserver \n```", "```py\nHTTP GET /chat/room/1/ 200 [0.02, 127.0.0.1:57141]\nWebSocket HANDSHAKING /ws/chat/room/1/ [127.0.0.1:57144]\nWebSocket CONNECT /ws/chat/room/1/ [127.0.0.1:57144] \n```", "```py\n{% block domready %}\n  const courseId = JSON.parse(\n    document.getElementById('course-id').textContent\n  );\n  const url = 'ws://' + window.location.host +\n              '/ws/chat/room/' + courseId + '/';\n  const chatSocket = new WebSocket(url);\n **chatSocket.****onmessage =** **function****(event) {**\n **const data =** **JSON****.****parse****(event.data);**\n**const** **chat =** **document****.****getElementById****(****'chat'****);**\n **chat.innerHTML +=** **'<div class=\"message\">'** **+**\n **data.message +** **'****</div>'****;**\n **chat.scrollTop = chat.scrollHeight;**\n **};**\n **chatSocket.onclose =** **function****(event) {**\n**console****.****error****(****'Chat socket closed unexpectedly'****);**\n **};**\n{% endblock %} \n```", "```py\nconst input = document.getElementById('chat-message-input');\nconst submitButton = document.getElementById('chat-message-submit');\nsubmitButton.addEventListener('click', function(event) {\n  const message = input.value;\n  if(message) {\n    // send message in JSON format\n    chatSocket.send(JSON.stringify({'message': message}));\n    // clear input\n    input.value = '';\n    input.focus();\n  }\n}); \n```", "```py\ninput.addEventListener('keypress', function(event) {\n    if (event.key === 'Enter') {\n      // cancel the default action, if needed\n      event.preventDefault();\n      // trigger click event on button\n      submitButton.click();\n    }\n  });\n\ninput.focus(); \n```", "```py\n{% block domready %}\n  const courseId = JSON.parse(\n    document.getElementById('course-id').textContent\n  );\n  const url = 'ws://' + window.location.host +\n              '/ws/chat/room/' + courseId + '/';\n  const chatSocket = new WebSocket(url);\n  chatSocket.onmessage = function(event) {\n    const data = JSON.parse(event.data);\n    const chat = document.getElementById('chat');\n    chat.innerHTML += '<div class=\"message\">' +\n                      data.message + '</div>';\n    chat.scrollTop = chat.scrollHeight;\n  };\n  chatSocket.onclose = function(event) {\n    console.error('Chat socket closed unexpectedly');\n  };\n  const input = document.getElementById('chat-message-input');\n  const submitButton = document.getElementById('chat-message-submit');\n  submitButton.addEventListener('click', function(event) {\n    const message = input.value;\n    if(message) {\n      // send message in JSON format\n      chatSocket.send(JSON.stringify({'message': message}));\n      // clear input\n      input.value = '';\n      input.focus();\n    }\n  });\n  input.addEventListener('keypress', function(event) {\n    if (event.key === 'Enter') {\n      // cancel the default action, if needed\n      event.preventDefault();\n      // trigger click event on button\n      submitButton.click();\n    }\n  });\n\n  input.focus();\n{% endblock %} \n```", "```py\npython -m pip install channels-redis==4.2.0 \n```", "```py\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            'hosts': [('127.0.0.1', 6379)],\n        },\n    },\n} \n```", "```py\ndocker run -it --rm --name redis -p 6379:6379 redis:7.2.4 \n```", "```py\npython manage.py shell \n```", "```py\n>>> import channels.layers\n>>> from asgiref.sync import async_to_sync\n>>> channel_layer = channels.layers.get_channel_layer()\n>>> async_to_sync(channel_layer.send)('test_channel', {'message': 'hello'})\n>>> async_to_sync(channel_layer.receive)('test_channel') \n```", "```py\n{'message': 'hello'} \n```", "```py\nimport json\n**from** **asgiref.sync** **import** **async_to_sync**\nfrom channels.generic.websocket import WebsocketConsumer\nclass ChatConsumer(WebsocketConsumer):\n    def connect(self):\n **self.****id** **= self.scope[****'url_route'****][****'kwargs'****][****'course_id'****]**\n **self.room_group_name =** **f'chat_****{self.****id****}****'**\n**# join room group**\n **async_to_sync(self.channel_layer.group_add)(**\n **self.room_group_name, self.channel_name**\n **)**\n# accept connection\n        self.accept()\n    # ... \n```", "```py\n class ChatConsumer(WebsocketConsumer):\n    # ...\ndef disconnect(self, close_code):\n**# leave room group**\n **async_to_sync(self.channel_layer.group_discard)(**\n **self.room_group_name, self.channel_name**\n **)**\n# ... \n```", "```py\nclass ChatConsumer(WebsocketConsumer):\n    # ...\n# receive message from WebSocket\ndef receive(self, text_data):\n        text_data_json = json.loads(text_data)\n        message = text_data_json['message']\n**# send message to room group**\n **async_to_sync(self.channel_layer.group_send)(**\n **self.room_group_name,**\n **{**\n**'type'****:** **'chat_message'****,**\n**'message'****: message,**\n **}**\n **)** \n```", "```py\nclass ChatConsumer(WebsocketConsumer):\n    # ...\n**# receive message from room group**\n**def****chat_message****(****self, event****):**\n**# send message to WebSocket**\n **self.send(text_data=json.dumps(event))** \n```", "```py\nimport json\nfrom asgiref.sync import async_to_sync\nfrom channels.generic.websocket import WebsocketConsumer\nclass ChatConsumer(WebsocketConsumer):\n    def connect(self):\n        self.id = self.scope['url_route']['kwargs']['course_id']\n        self.room_group_name = f'chat_{self.id}'\n# join room group\n        async_to_sync(self.channel_layer.group_add)(\n            self.room_group_name, self.channel_name\n        )\n        # accept connection\n        self.accept()\n    def disconnect(self, close_code):\n        # leave room group\n        async_to_sync(self.channel_layer.group_discard)(\n            self.room_group_name, self.channel_name\n        )\n    # receive message from WebSocket\ndef receive(self, text_data):\n        text_data_json = json.loads(text_data)\n        message = text_data_json['message']\n        # send message to room group\n        async_to_sync(self.channel_layer.group_send)(\n            self.room_group_name,\n            {\n                'type': 'chat_message',\n                'message': message,\n            }\n        )\n    # receive message from room group\ndef chat_message(self, event):\n        # send message to WebSocket\n        self.send(text_data=json.dumps(event)) \n```", "```py\npython manage.py runserver \n```", "```py\nimport json\nfrom asgiref.sync import async_to_sync\nfrom channels.generic.websocket import WebsocketConsumer\n**from** **django.utils** **import** **timezone**\nclass ChatConsumer(WebsocketConsumer):\n    def connect(self):\n **self.user = self.scope[****'user'****]**\n        self.id = self.scope['url_route']['kwargs']['course_id']\n        self.room_group_name = f'chat_{self.id}'\n# join room group\n        async_to_sync(self.channel_layer.group_add)(\n            self.room_group_name, self.channel_name\n        )\n        # accept connection\n        self.accept()\n    def disconnect(self, close_code):\n        # leave room group\n        async_to_sync(self.channel_layer.group_discard)(\n            self.room_group_name, self.channel_name\n        )\n    # receive message from WebSocket\ndef receive(self, text_data):\n        text_data_json = json.loads(text_data)\n        message = text_data_json['message']\n **now = timezone.now()**\n# send message to room group\n        async_to_sync(self.channel_layer.group_send)(\n            self.room_group_name,\n            {\n                'type': 'chat_message',\n                'message': message,\n**'user'****: self.user.username,**\n**'datetime'****: now.isoformat(),**\n            }\n        )\n    # receive message from room group\ndef chat_message(self, event):\n        # send message to WebSocket\n        self.send(text_data=json.dumps(event)) \n```", "```py\n{% block include_js %}\n  {{ course.id|json_script:\"course-id\" }}\n **{{ request.user.username|json_script:****\"request-user\"** **}}**\n{% endblock %} \n```", "```py\n{% block domready %}\n  const courseId = JSON.parse(\n    document.getElementById('course-id').textContent\n  );\n**const** **requestUser =** **JSON****.****parse****(**\n**document****.****getElementById****(****'request-user'****).textContent**\n **);**\n  # ...\n{% endblock %} \n```", "```py\nconst data = JSON.parse(event.data);\nconst chat = document.getElementById('chat');\nchat.innerHTML += '<div class=\"message\">' +\n                  data.message + '</div>';\nchat.scrollTop = chat.scrollHeight; \n```", "```py\nconst data = JSON.parse(event.data);\nconst chat = document.getElementById('chat');\n**const dateOptions = {hour: 'numeric', minute: 'numeric', hour12: true};**\n**const datetime = new Date(data.datetime).toLocaleString('en', dateOptions);**\n**const isMe = data.user === requestUser;**\n**const source = isMe ? 'me' : 'other';**\n**const name = isMe ? 'Me' : data.user;**\nchat.innerHTML += '<div class=\"message **' + source + '**\">' +\n **'****<****strong****>****' + name + '****</****strong****>** **' +**\n **'****<****span****class****=****\"date\"****>****' + datetime + '****</****span****><****br****>****' +**\n                  data.message + '</div>';\nchat.scrollTop = chat.scrollHeight; \n```", "```py\nimport json\n**from** **channels.generic.websocket** **import** **AsyncWebsocketConsumer**\nfrom django.utils import timezone\nclass ChatConsumer(**AsyncWebsocketConsumer**):\n    **async** def connect(self):\n        self.user = self.scope['user']\n        self.id = self.scope['url_route']['kwargs']['course_id']\n        self.room_group_name = 'chat_%s' % self.id\n# join room group\n**await** **self.channel_layer.group_add(**\n            self.room_group_name, self.channel_name\n        **)**\n# accept connection\n**await** self.accept()\n    **async** def disconnect(self, close_code):\n        # leave room group\n**await** **self.channel_layer.group_discard(**\n            self.room_group_name, self.channel_name\n        **)**\n# receive message from WebSocket\n**async** def receive(self, text_data):\n        text_data_json = json.loads(text_data)\n        message = text_data_json['message']\n        now = timezone.now()\n        # send message to room group\n**await** **self.channel_layer.group_send(**\n            self.room_group_name,\n            {\n                'type': 'chat_message',\n                'message': message,\n                'user': self.user.username,\n                'datetime': now.isoformat(),\n            }\n        **)**\n# receive message from room group\n**async** def chat_message(self, event):\n        # send message to WebSocket\n**await** self.send(text_data=json.dumps(event)) \n```", "```py\n**from** **django.conf** **import** **settings**\nfrom django.db import models\n**class****Message****(models.Model):**\n **user = models.ForeignKey(**\n **settings.AUTH_USER_MODEL,**\n **on_delete=models.PROTECT,**\n **related_name=****'chat_messages'**\n **)**\n **course = models.ForeignKey(**\n**'courses.Course'****,**\n **on_delete=models.PROTECT,**\n **related_name=****'chat_messages'**\n **)**\n **content = models.TextField()**\n **sent_on = models.DateTimeField(auto_now_add=****True****)**\n**def****__str__****(****self****):**\n**return****f'****{self.user}** **on** **{self.course}** **at** **{self.sent_on}****'** \n```", "```py\npython manage.py makemigrations chat \n```", "```py\nMigrations for 'chat':\n    chat/migrations/0001_initial.py\n        - Create model Message \n```", "```py\npython manage.py migrate \n```", "```py\nApplying chat.0001_initial... OK \n```", "```py\nfrom django.contrib import admin\n**from** **chat.models** **import** **Message**\n**@admin.register(****Message****)**\n**class****MessageAdmin****(admin.ModelAdmin):**\n**list_display = [****'sent_on'****,** **'user'****,** **'course'****,** **'content'****]**\n**list_filter = [****'sent_on'****,** **'course'****]**\n**search_fields = [****'content'****]**\n**raw_id_fields = [****'user'****,** **'content'****]** \n```", "```py\nimport json\nfrom channels.generic.websocket import AsyncWebsocketConsumer\nfrom django.utils import timezone\n**from** **chat.models** **import** **Message**\nclass ChatConsumer(AsyncWebsocketConsumer):\n    # ...\n **async****def****persist_message****(****self, message****):**\n**# send message to WebSocket**\n**await** **Message.objects.acreate(**\n **user=self.user, course_id=self.id, content=message**\n **)**\n# receive message from WebSocket\nasync def receive(self, text_data):\n        text_data_json = json.loads(text_data)\n        message = text_data_json['message']\n        now = timezone.now()\n        # send message to room group\nawait self.channel_layer.group_send(\n            self.room_group_name,\n            {\n                'type': 'chat_message',\n                'message': message,\n                'user': self.user.username,\n                'datetime': now.isoformat(),\n },\n )\n**# persist message**\n**await** **self.persist_message(message)**\n    # ... \n```", "```py\n@login_required\ndef course_chat_room(request, course_id):\n    try:\n        # retrieve course with given id joined by the current user\n        course = request.user.courses_joined.get(id=course_id)\n    except Course.DoesNotExist:\n        # user is not a student of the course or course does not exist\nreturn HttpResponseForbidden()\n**# retrieve chat history**\n **latest_messages = course.chat_messages.select_related(**\n**'user'**\n**).order_by(****'-id'****)[:****5****]**\n **latest_messages =** **reversed****(latest_messages)**\nreturn render(\n        request,\n        'chat/room.html',\n        {'course': course**,** **'latest_messages'****: latest_messages**}\n    ) \n```", "```py\n# ...\n{% block content %}\n  <div id=\"chat\">\n **{% for message in latest_messages %}**\n**<****div****class****=****\"****message {% if message.user == request.user %}me{% else %}other{% endif %}\"****>**\n**<****strong****>****{{ message.user.username }}****</****strong****>**\n**<****span****class****=****\"date\"****>**\n **{{ message.sent_on|date:\"Y.m.d H:i A\" }}**\n**</****span****>**\n**<****br****>**\n **{{ message.content }}**\n**</****div****>**\n **{% endfor %}**\n</div>\n<div id=\"chat-input\">\n<input id=\"chat-message-input\" type=\"text\">\n<input id=\"chat-message-submit\" type=\"submit\" value=\"Send\">\n</div>\n{% endblock %}\n# ... \n```", "```py\n<div class=\"contents\">\n  ...\n**<****h3****>**\n**<****a****href****=****\"{% url \"****chat:course_chat_room****\"** **object.id** **%}\">**\n **Course chat room**\n**</****a****>**\n**</****h3****>**\n</div> \n```"]