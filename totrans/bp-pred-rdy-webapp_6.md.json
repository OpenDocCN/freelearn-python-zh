["```py\ntozo\n└── frontend\n    └── build\n        └── static\n            ├── css\n            ├── js\n            └── media\n```", "```py\nfrom quart import Blueprint\nblueprint = Blueprint(\"serving\", __name__)\n```", "```py\nfrom backend.blueprints.serving import blueprint as serving_blueprint\napp.register_blueprint(serving_blueprint)\n```", "```py\nfrom quart import render_template, ResponseReturnValue\nfrom quart_rate_limiter import rate_exempt\n\n@blueprint.get(\"/\")\n@blueprint.get(\"/<path:path>\")\n@rate_exempt\nasync def index(path: str | None = None) -> ResponseReturnValue:\n    return await render_template(\"index.xhtml\")\n```", "```py\naccesslog = \"-\"\naccess_log_format = \"%(t)s %(h)s %(f)s - %(S)s '%(r)s' %(s)s %(b)s %(D)s\"\nbind = \"0.0.0.0:8080\"\nerrorlog = \"-\"\n```", "```py\npdm run hypercorn --config hypercorn.toml backend.run:app\n```", "```py\nFROM node:18-bullseye-slim as frontend \n```", "```py\nWORKDIR /frontend/\nCOPY frontend/package.json frontend/package-lock.json /frontend/\nRUN npm install\n```", "```py\nCOPY frontend /frontend/\nRUN npm run build\n```", "```py\nFROM python:3.10.1-slim-bullseye\n```", "```py\nRUN apt-get update && apt install dumb-init \nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n```", "```py\nEXPOSE 8080\nRUN mkdir -p /app\nWORKDIR /app\nCOPY hypercorn.toml /app/\nCMD [\"pdm\", \"run\", \"hypercorn\", \"--config\", \"hypercorn.toml\", \"backend.run:app\"]\n```", "```py\nRUN python -m venv /ve\nENV PATH=/ve/bin:${PATH}\nRUN pip install --no-cache-dir pdm\n```", "```py\nCOPY backend/pdm.lock backend/pyproject.toml /app/\nRUN pdm install --prod --no-lock --no-editable \n```", "```py\nCOPY --from=frontend /frontend/build/index.xhtml \\\n    /app/backend/templates/ \nCOPY --from=frontend /frontend/build/static/. /app/backend/static/\n```", "```py\nCOPY backend/src/ /app/\n```", "```py\nUSER nobody\n```", "```py\naws_access_key = \"abcd\"\naws_secret_key = \"abcd\"\n```", "```py\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \">=3.35.0\"\n    }\n  }\n}\n```", "```py\nvariable \"aws_access_key\" {\n  sensitive = true\n}\n\nvariable \"aws_secret_key\" {\n  sensitive = true\n}\n\nprovider \"aws\" {\n  access_key = var.aws_access_key\n  secret_key = var.aws_secret_key\n  region     = \"eu-west-2\"\n}\n```", "```py\nresource \"aws_vpc\" \"vpc\" {\n  cidr_block         = \"10.0.0.0/16\"\n  enable_dns_support = true\n}\n```", "```py\ndata \"aws_availability_zones\" \"available\" {}\n\nresource \"aws_subnet\" \"public\" {\n  availability_zone = data.aws_availability_zones.available.names[count.index]\n  cidr_block        = \"10.0.0.${64 * count.index}/26\"\n  count             = min(4, length(data.aws_availability_zones.available.names))\n  vpc_id            = aws_vpc.vpc.id\n}\n\nresource \"aws_subnet\" \"private\" {\n  availability_zone = data.aws_availability_zones.available.names[count.index]\n  cidr_block        = \"10.0.1.${64 * count.index}/26\"\n  count             = min(4, length(data.aws_availability_zones.available.names))\n  vpc_id            = aws_vpc.vpc.id\n}\n```", "```py\nresource \"aws_internet_gateway\" \"internet_gateway\" {\n  vpc_id = aws_vpc.vpc.id\n}\nresource \"aws_route_table\" \"public\" {\n  vpc_id = aws_vpc.vpc.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    gateway_id = aws_internet_gateway.internet_gateway.id\n  }\n}\n\nresource \"aws_route_table_association\" \"public_gateway\" {\n  count          = length(aws_subnet.public)\n  subnet_id      = aws_subnet.public[count.index].id\n  route_table_id = aws_route_table.public.id\n}\n```", "```py\nresource \"aws_security_group\" \"lb\" {\n  vpc_id = aws_vpc.vpc.id\n\n  ingress {\n    protocol    = \"tcp\"\n    from_port   = 80\n    to_port     = 80\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    protocol    = \"tcp\"\n    from_port   = 443\n    to_port     = 443\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    protocol    = \"-1\"\n    from_port   = 0\n    to_port     = 0\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n```", "```py\nresource \"aws_lb\" \"tozo\" {\n  name               = \"alb\"\n  subnets            = aws_subnet.public.*.id\n  load_balancer_type = \"application\"\n  security_groups    = [aws_security_group.lb.id]\n}\n\nresource \"aws_lb_target_group\" \"tozo\" {\n  port        = 8080\n  protocol    = \"HTTP\"\n  vpc_id      = aws_vpc.vpc.id\n  target_type = \"ip\"\n\n  health_check {\n    path = \"/control/ping/\"\n  }\n  lifecycle {\n    create_before_destroy = true\n  }\n\n  stickiness {\n    enabled = true\n    type    = \"lb_cookie\"\n  }\n}\n```", "```py\nresource \"aws_db_subnet_group\" \"default\" {\n  subnet_ids = aws_subnet.private.*.id\n}\n\nresource \"aws_security_group\" \"database\" {\n  vpc_id = aws_vpc.vpc.id\n\n  ingress {\n    from_port   = 5432\n    to_port     = 5432\n    protocol    = \"TCP\"\n    cidr_blocks = aws_subnet.public.*.cidr_block\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = aws_subnet.public.*.cidr_block\n  }\n}\n```", "```py\nvariable \"db_password\" {\n  sensitive = true\n} \nresource \"aws_db_instance\" \"tozo\" {\n  apply_immediately       = true\n  allocated_storage       = 20\n  backup_retention_period = 5\n  db_subnet_group_name    = aws_db_subnet_group.default.name\n  deletion_protection     = true\n  engine                  = \"postgres\"\n  engine_version          = \"14\"\n  instance_class          = \"db.t3.micro\"\n  db_name                 = \"tozo\"\n  username                = \"tozo\"\n  password                = var.db_password\n  vpc_security_group_ids  = [aws_security_group.database.id]\n}\n```", "```py\nresource \"aws_ecr_repository\" \"tozo\" {\n  name = \"tozo\"\n}\n\nresource \"aws_ecr_lifecycle_policy\" \"tozo\" {\n  repository = aws_ecr_repository.tozo.name\n\n  policy = jsonencode({\n    rules = [\n      {\n        rulePriority = 1\n        description  = \"Keep prod and latest tagged images\"\n        selection = {\n          tagStatus     = \"tagged\"\n          tagPrefixList = [\"prod\", \"latest\"]\n          countType     = \"imageCountMoreThan\"\n          countNumber   = 9999\n        }\n        action = {\n          type = \"expire\"\n        }\n      },\n      {\n        rulePriority = 2\n        description  = \"Expire images older than 7 days\"\n        selection = {\n          tagStatus   = \"any\"\n          countType   = \"sinceImagePushed\"\n          countUnit   = \"days\"\n          countNumber = 7\n        }\n        action = {\n          type = \"expire\"\n        }\n      }\n    ]\n  })\n}\n```", "```py\nresource \"aws_iam_role\" \"ecs_task_execution\" {\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Principal = {\n          Service = \"ecs-tasks.amazonaws.com\"\n        }\n        Effect = \"Allow\"\n        Sid    = \"\"\n      }\n    ]\n  })\n}\nresource \"aws_iam_role_policy_attachment\" \"ecs-task\" { \n  role       = aws_iam_role.ecs_task_execution.name \n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\" \n}\nresource \"aws_iam_role\" \"ecs_task\" {\n  assume_role_policy = jsonencode({ \n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Principal = {\n          Service = \"ecs-tasks.amazonaws.com\"\n        }\n        Effect = \"Allow\"\n        Sid    = \"\"\n      }\n    ]\n  })\n} \n```", "```py\nvariable \"app_secret_key\" { \n  sensitive = true \n} \nresource \"aws_ecs_task_definition\" \"tozo\" {\n  family                   = \"app\"\n  network_mode             = \"awsvpc\"\n  requires_compatibilities = [\"FARGATE\"]\n  cpu                      = 256\n  memory                   = 512\n  execution_role_arn       = aws_iam_role.ecs_task_execution.arn\n  task_role_arn            = aws_iam_role.ecs_task.arn\n  container_definitions = jsonencode([{\n    name      = \"tozo\"\n    image     = \"${aws_ecr_repository.tozo.repository_      url}:latest\"\n    essential = true\n    environment = [\n      {\n        name  = \"TOZO_BASE_URL\"\n        value = \"https://tozo.dev\"\n      },\n      {\n        name  = \"TOZO_SECRET_KEY\"\n        value = var.app_secret_key\n      },\n      {\n        name  = \"TOZO_QUART_DB_DATABASE_URL\"\n        value = \"postgresql://tozo:${var.db_password}@${aws_db_          instance.tozo.endpoint}/tozo\"\n      },\n      {\n        name  = \"TOZO_QUART_AUTH_COOKIE_SECURE\"\n        value = \"true\"\n      },\n      {\n        name  = \"TOZO_QUART_AUTH_COOKIE_SAMESITE\"\n        value = \"Strict\"\n      }\n    ]\n    portMappings = [{\n      protocol      = \"tcp\"\n      containerPort = 8080\n      hostPort      = 8080\n    }]\n  }])\n}\n```", "```py\nresource \"aws_security_group\" \"ecs_task\" {\n  vpc_id = aws_vpc.vpc.id\n\n  ingress {\n    protocol        = \"tcp\"\n    from_port       = 8080\n    to_port         = 8080\n    security_groups = [aws_security_group.lb.id]\n  }\n\n  egress {\n    protocol    = \"-1\"\n    from_port   = 0\n    to_port     = 0\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n```", "```py\nresource \"aws_ecs_cluster\" \"production\" {\n  name = \"production\"\n}\nresource \"aws_ecs_service\" \"tozo\" {\n  name            = \"tozo\"\n  cluster         = aws_ecs_cluster.production.id\n  task_definition = aws_ecs_task_definition.tozo.arn\n  desired_count   = 1\n  launch_type     = \"FARGATE\"\n\n  network_configuration {\n    security_groups  = [aws_security_group.ecs_task.id]\n    subnets          = aws_subnet.public.*.id\n    assign_public_ip = true\n  } \n  load_balancer {\n    target_group_arn = aws_lb_target_group.tozo.arn\n    container_name   = \"tozo\"\n    container_port   = 8080\n  } \n  lifecycle {\n    ignore_changes = [task_definition, desired_count]\n  }\n}\n```", "```py\nresource \"aws_iam_user\" \"cd_bot\" {\n  name = \"cd-bot\"\n  path = \"/\"\n}\n\nresource \"aws_iam_user_policy\" \"cd_bot\" {\n  name = \"cd-bot-policy\"\n  user = aws_iam_user.cd_bot.name\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action   = \"ecr:*\"\n        Effect   = \"Allow\"\n        Resource = aws_ecr_repository.tozo.arn\n      },\n      {\n        Action   = \"ecr:GetAuthorizationToken\"\n        Effect   = \"Allow\"\n        Resource = \"*\"\n      },\n      {\n        Action   = \"ecs:UpdateService\"\n        Effect   = \"Allow\"\n        Resource = aws_ecs_service.tozo.id\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_access_key\" \"cd_bot\" {\n  user = aws_iam_user.cd_bot.name\n}\n```", "```py\nresource \"github_actions_secret\" \"debt_aws_access_key\" {\n  repository      = github_repository.tozo.name\n  secret_name     = \"AWS_ACCESS_KEY_ID\"\n  plaintext_value = aws_iam_access_key.cd_bot.id\n}\n\nresource \"github_actions_secret\" \"debt_aws_secret_key\" {\n  repository      = github_repository.tozo.name\n  secret_name     = \"AWS_SECRET_ACCESS_KEY\"\n  plaintext_value = aws_iam_access_key.cd_bot.secret\n}\n\nresource \"github_actions_secret\" \"debt_aws_repository_url\" {\n  repository      = github_repository.tozo.name\n  secret_name     = \"AWS_REPOSITORY_URL\"\n  plaintext_value = aws_ecr_repository.tozo.repository_url\n}\n```", "```py\nname: CD\n\non:\n  push:\n    branches: [ main ]\n  workflow_dispatch:\n\njobs:\n  push:\n    runs-on: ubuntu-latest\n    env:\n      AWS_REPOSITORY_URL: ${{ secrets.AWS_REPOSITORY_URL }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_            KEY}}\n          aws-region: eu-west-2\n\n      - name: Login to Amazon ECR\n        uses: aws-actions/amazon-ecr-login@v1\n\n      - name: Fetch a cached image\n        continue-on-error: true\n        run: docker pull $AWS_REPOSITORY_URL:latest\n      - name: Build the image\n        run: | \n          docker build \\\n            --cache-from $AWS_REPOSITORY_URL:latest \\ \n            -t $AWS_REPOSITORY_URL:latest \\\n            -t $AWS_REPOSITORY_URL:$GITHUB_SHA .\n      - name: Push the images\n        run: docker push --all-tags $AWS_REPOSITORY_URL\n```", "```py\n  deploy:\n    needs: push\n    runs-on: ubuntu-latest\n    env:\n      AWS_REPOSITORY_URL: ${{ secrets.AWS_REPOSITORY_URL }} \n    steps:\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}\n          aws-region: eu-west-2\n\n      - name: Inform ECS to deploy a new image\n        run: |\n          MANIFEST=$(aws ecr batch-get-image --region eu-west-2 --repository-name tozo --image-ids imageTag=$GITHUB_SHA --query 'images[].imageManifest' --output text)\n          aws ecr put-image --region eu-west-2 --repository-name tozo --image-tag prod --image-manifest \"$MANIFEST\" || true\n          aws ecs update-service --cluster production --service tozo --region eu-west-2 --force-new-deployment\n```", "```py\nterraform {\n  required_providers {\n    gandi = {\n      source = \"go-gandi/gandi\"\n      version = \"~> 2.0.0\"\n    }\n  }\n}\n```", "```py\ngandi_api_key = \"abcd\"\n```", "```py\nvariable \"gandi_api_key\" {\n  sensitive = true\n}\n\nprovider \"gandi\" {\n  key = var.gandi_api_key\n}\n```", "```py\ndata \"gandi_domain\" \"tozo_dev\" {\n  name = \"tozo.dev\"\n}\n\nresource \"gandi_livedns_record\" \"tozo_dev_ALIAS\" {\n  zone   = data.gandi_domain.tozo_dev.id\n  name   = \"@\"\n  type   = \"ALIAS\"\n  ttl    = 3600\n  values = [\"${aws_lb.tozo.dns_name}.\"]\n}\nresource \"gandi_livedns_record\" \"tozo_dev_www\" {\n  zone   = data.gandi_domain.tozo_dev.id\n  name   = \"www\"\n  type   = \"CNAME\"\n  ttl    = 3600\n  values = [\"tozo.dev.\"]\n}\n```", "```py\nterraform {\n  required_providers {\n    acme = {\n      source  = \"vancluever/acme\"\n      version = \"~> 2.0\"\n    }\n  }\n}\n```", "```py\nprovider \"acme\" {\n  server_url = \"https://acme-v02.api.letsencrypt.org/directory\"\n}\n\nresource \"tls_private_key\" \"private_key\" {\n  algorithm = \"RSA\"\n}\n\nresource \"acme_registration\" \"me\" {\n  account_key_pem = tls_private_key.private_key.private_key_pem\n  email_address   = \"pgjones@tozo.dev\"\n}\n\nresource \"acme_certificate\" \"tozo_dev\" {\n  account_key_pem = acme_registration.me.account_key_pem\n  common_name     = \"tozo.dev\"\n\n  dns_challenge {\n    provider = \"gandiv5\"\n\n    config = {\n      GANDIV5_API_KEY = var.gandi_api_key\n    }\n  }\n}\nresource \"aws_acm_certificate\" \"tozo_dev\" {\n  private_key       = acme_certificate.tozo_dev.private_key_pem\n  certificate_body  = acme_certificate.tozo_dev.certificate_pem\n  certificate_chain = \"${acme_certificate.tozo_dev.certificate_pem}${acme_certificate.tozo_dev.issuer_pem}\"\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n```", "```py\nresource \"aws_lb_listener\" \"http\" {\n  load_balancer_arn = aws_lb.tozo.arn\n  port              = \"80\"\n  protocol          = \"HTTP\"\n\n  default_action {\n    type = \"redirect\"\n\n    redirect {\n      port        = \"443\"\n      protocol    = \"HTTPS\"\n      status_code = \"HTTP_301\"\n    }\n  }\n}\n```", "```py\nresource \"aws_lb_listener\" \"https\" {\n  load_balancer_arn = aws_lb.tozo.arn\n  port              = 443\n  protocol          = \"HTTPS\"\n  ssl_policy        = \"ELBSecurityPolicy-2016-08\"\n  certificate_arn   = aws_acm_certificate.tozo_dev.arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = aws_lb_target_group.tozo.arn\n  }\n}\n```", "```py\nterraform init\nterraform apply\n```", "```py\nresource \"gandi_livedns_record\" \"tozo_dev_DKIM\" {\n  zone   = data.gandi_domain.tozo_dev.id\n  name   = \"20210807103031pm._domainkey\"\n  type   = \"TXT\"\n  ttl    = 10800\n  values = [\"k=rsa;p=abcd\"]\n}\n\nresource \"gandi_livedns_record\" \"tozo_dev_CNAME\" {\n  zone   = data.gandi_domain.tozo_dev.id\n  name   = \"pm-bounces\"\n  type   = \"CNAME\"\n  ttl    = 10800\n  values = [\"pm.mtasv.net.\"]\n}\n```", "```py\npostmark_token = \"abcd\"\n```", "```py\nvariable \"postmark_token\" {\n  sensitive = true\n}\nresource \"aws_ecs_task_definition\" \"tozo\" {\n  container_definitions = jsonencode([{\n    environment = [\n      {\n        name  = \"TOZO_POSTMARK_TOKEN\"\n        value = var.postmark_token\n      }\n    ]\n  }])\n}\n```", "```py\nresource \"aws_ecs_task_definition\" \"tozo\" {\n  container_definitions = jsonencode([{\n    environment = [\n      {\n        name  = \"SENTRY_DSN\"\n        value = \"https://examplePublicKey@o0.ingest.sentry.io/0\"\n      }\n    ]\n  }])\n}\n```", "```py\npdm add sentry-sdk\n```", "```py\nimport sentry_sdk\nfrom sentry_sdk.integrations.quart import QuartIntegration\nif \"SENTRY_DSN\" in os.environ:\n    sentry_sdk.init(\n        dsn=os.environ[\"SENTRY_DSN\"],\n        integrations=[QuartIntegration()],\n        traces_sample_rate=0.2,\n    )\napp = Quart(__name__)\n```", "```py\nnpm install @sentry/react @sentry/tracing\n```", "```py\nimport * as Sentry from \"@sentry/react\";\nimport { BrowserTracing } from \"@sentry/tracing\";\nif (process.env.NODE_ENV === \"production\") {\n  Sentry.init({\n    dsn: \"https://examplePublicKey@o0.ingest.sentry.io/0\",\n    integrations: [new BrowserTracing()],\n    tracesSampleRate: 0.2,\n  });\n}\n```", "```py\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement,\n);\n```", "```py\nimport Alert from \"@mui/material/Alert\";\nimport AlertTitle from \"@mui/material/AlertTitle\";\nimport Container from \"@mui/material/Container\";\nimport Link from \"@mui/material/Link\";\n\nconst Error = () => (\n  <Container maxWidth=\"sm\">\n    <Alert severity=\"error\" sx={{ marginTop: 2 }}>\n      <AlertTitle>Error</AlertTitle>\n        Sorry, something has gone wrong. \n        Please try reloading the page or click{\" \"}      \n        <Link href=\"/\">here</Link>.\n    </Alert>\n  </Container>\n);\nexport default Error;\n```", "```py\nimport Error from \"src/pages/Error\";\nroot.render(\n  <React.StrictMode>\n    <Sentry.ErrorBoundary fallback={<Error />}>\n      <App />\n    </Sentry.ErrorBoundary>\n  </React.StrictMode>,\n);\n```", "```py\nconst ThrowError = () => {throw new Error(\"Test Error\")};\n\nconst Router = () => (\n  <BrowserRouter>\n    ...\n    <Routes>\n      ...\n      <Route\n        element={<ThrowError />}\n        path=\"/test-error/\"\n      />\n    </Routes>\n  </BrowserRouter>\n);\n```"]