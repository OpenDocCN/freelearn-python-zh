["```py\nimport threading\nimport time\ndef thread_a():\n    print('Thread A is starting...')\n    print('Thread A waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread A has acquired lock A, performing some \\\n      calculation...')\n    time.sleep(2)\n    print('Thread A waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread A has acquired lock B, performing some \\\n      calculation...')\n    time.sleep(2)\n    print('Thread A releasing both locks.')\n    lock_a.release()\n    lock_b.release()\ndef thread_b():\n    print('Thread B is starting...')\n    print('Thread B waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread B has acquired lock B, performing some \\\n      calculation...')\n    time.sleep(5)\n    print('Thread B waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread B has acquired lock A, performing some \\\n      calculation...')\n    time.sleep(5)\n    print('Thread B releasing both locks.')\n    lock_b.release()\n    lock_a.release()\nlock_a = threading.Lock()\nlock_b = threading.Lock()\nthread1 = threading.Thread(target=thread_a)\nthread2 = threading.Thread(target=thread_b)\nthread1.start()\nthread2.start()\nthread1.join()\nthread2.join()\nprint('Finished.')\n```", "```py\n> python example1.py\nThread A is starting...\nThread A waiting to acquire lock A.\nThread B is starting...\nThread A has acquired lock A, performing some calculation...\nThread B waiting to acquire lock B.\nThread B has acquired lock B, performing some calculation...\nThread A waiting to acquire lock B.\nThread B waiting to acquire lock A.\n```", "```py\nimport threading\nimport time\ndef thread_a():\n    print('Thread A is starting...')\n    print('Thread A waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread A has acquired lock A, performing some \\\n      calculation...')\n    time.sleep(2)\n    print('Thread A waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread A has acquired lock B, performing some \\\n      calculation...')\n    time.sleep(2)\n    print('Thread A releasing both locks.')\n    lock_a.release()\n    lock_b.release()\ndef thread_b():\n    print('Thread B is starting...')\n    print('Thread B waiting to acquire lock A.')\n    lock_a.acquire()\n    print('Thread B has acquired lock A, performing some \\\n      calculation...')\n    time.sleep(5)\n    print('Thread B waiting to acquire lock B.')\n    lock_b.acquire()\n    print('Thread B has acquired lock B, performing some \\\n      calculation...')\n    time.sleep(5)\n    print('Thread B releasing both locks.')\n    lock_b.release()\n    lock_a.release()\nlock_a = threading.Lock()\nlock_b = threading.Lock()\nthread1 = threading.Thread(target=thread_a)\nthread2 = threading.Thread(target=thread_b)\nthread1.start()\nthread2.start()\nthread1.join()\nthread2.join()\nprint('Finished.')\n```", "```py\n> python3 example2.py\nThread A is starting...\nThread A waiting to acquire lock A.\nThread A has acquired lock A, performing some calculation...\nThread B is starting...\nThread B waiting to acquire lock A.\nThread A waiting to acquire lock B.\nThread A has acquired lock B, performing some calculation...\nThread A releasing both locks.\nThread B has acquired lock A, performing some calculation...\nThread B waiting to acquire lock B.\nThread B has acquired lock B, performing some calculation...\nThread B releasing both locks.\nFinished.\n```", "```py\nimport threading\n# The philosopher thread\ndef philosopher(left, right):\n    while True:\n        with left:\n             with right:\n                 print(f'Philosopher at \\\n                  {threading.currentThread()} is eating.')\n# The chopsticks\nN_FORKS = 5\nforks = [threading.Lock() for n in range(N_FORKS)]\n# Create all of the philosophers\nphils = [ \\\n  threading.Thread(target=philosopher,args=(forks[n], forks \\\n    [(n + 1) % N_FORKS])) for n in range(N_FORKS)]\n# Run all of the philosophers\nfor p in phils:\n    p.start()\n```", "```py\n> python3 example3.py\nPhilosopher at <Thread(Thread-1, started 123145445048320)> is \neating.\nPhilosopher at <Thread(Thread-1, started 123145445048320)> is \neating.\nPhilosopher at <Thread(Thread-1, started 123145445048320)> is \neating.\nPhilosopher at <Thread(Thread-1, started 123145445048320)> is \neating.\nPhilosopher at <Thread(Thread-1, started 123145445048320)> is \neating.\nPhilosopher at <Thread(Thread-1, started 123145445048320)> is \neating.\nPhilosopher at <Thread(Thread-3, started 123145455558656)> is \neating.\nPhilosopher at <Thread(Thread-1, started 123145445048320)> is \neating.\nPhilosopher at <Thread(Thread-3, started 123145455558656)> is \neating.\nPhilosopher at <Thread(Thread-3, started 123145455558656)> is \neating.\nPhilosopher at <Thread(Thread-3, started 123145455558656)> is \neating.\nPhilosopher at <Thread(Thread-3, started 123145455558656)> is \neating.\nPhilosopher at <Thread(Thread-5, started 123145466068992)> is \neating.\nPhilosopher at <Thread(Thread-3, started 123145455558656)> is \neating.\nPhilosopher at <Thread(Thread-3, started 123145455558656)> is \neating.\n```", "```py\nclass acquire(object):\n    def __init__(self, *locks):\n        self.locks = sorted(locks, key=lambda x: id(x))\n    def __enter__(self):\n        for lock in self.locks:\n            lock.acquire()\n    def __exit__(self, ty, val, tb):\n        for lock in reversed(self.locks):\n            lock.release()\n        return False\n# The philosopher thread\ndef philosopher(left, right):\n    while True:\n        with acquire(left,right):\n             print(f'Philosopher at \\\n               {threading.currentThread()} is eating.')\n```", "```py\n> python3 example5.py\nThread A is starting...\nThread A waiting to acquire lock A.\nThread B is starting...\nThread A has acquired lock A, performing some calculation...\nThread B waiting to acquire lock A.\nThread A waiting to acquire lock B.\nThread A has acquired lock B, performing some calculation...\nThread A releasing both locks.\nThread B has acquired lock A, performing some calculation...\nThread B waiting to acquire lock B.\nThread B has acquired lock B, performing some calculation...\nThread B releasing both locks.\nTook 14.01 seconds.\nFinished.\n```", "```py\nlock_a = threading.Lock()\nlock_b = threading.Lock()\nthread1 = threading.Thread(target=thread_a)\nthread2 = threading.Thread(target=thread_b)\nstart = timer()\nthread1.start()\nthread1.join()\nthread2.start()\nthread2.join()\nprint('Took %.2f seconds.' % (timer() - start))\nprint('Finished.')\n```", "```py\n> python3 example6.py\nThread A is starting...\nThread A waiting to acquire lock A.\nThread A has acquired lock A, performing some calculation...\nThread A waiting to acquire lock B.\nThread A has acquired lock B, performing some calculation...\nThread A releasing both locks.\nThread B is starting...\nThread B waiting to acquire lock A.\nThread B has acquired lock A, performing some calculation...\nThread B waiting to acquire lock B.\nThread B has acquired lock B, performing some calculation...\nThread B releasing both locks.\nTook 14.01 seconds.\nFinished.\n```", "```py\nimport threading\nimport time\nfrom timeit import default_timer as timer\ndef thread_a():\n    print('Thread A is starting...')\n    print('Thread A is performing some calculation...')\n    time.sleep(2)\n    print('Thread A is performing some calculation...')\n    time.sleep(2)\ndef thread_b():\n    print('Thread B is starting...')\n    print('Thread B is performing some calculation...')\n    time.sleep(5)\n    print('Thread B is performing some calculation...')\n    time.sleep(5)\nthread1 = threading.Thread(target=thread_a)\nthread2 = threading.Thread(target=thread_b)\nstart = timer()\nthread1.start()\nthread2.start()\nthread1.join()\nthread2.join()\nprint('Took %.2f seconds.' % (timer() - start))\nprint('Finished.')\n```", "```py\n> python3 example7.py\nThread A is starting...\nThread A is performing some calculation...\nThread B is starting...\nThread B is performing some calculation...\nThread A is performing some calculation...\nThread B is performing some calculation...\nTook 10.00 seconds.\nFinished.\n```", "```py\nclass Spouse(threading.Thread):\n    def __init__(self, name, partner):\n        threading.Thread.__init__(self)\n        self.name = name\n        self.partner = partner\n        self.hungry = True\n    def run(self):\n        while self.hungry:\n            print('%s is hungry and wants to eat.' % self.name)\n            if self.partner.hungry:\n                print('%s is waiting for their partner to eat \\\n                  first...' % self.name)\n            else:\n                with fork:\n                    print('%s has stared eating.' % self.name)\n                    time.sleep(5)\n                    print('%s is now full.' % self.name)\n                    self.hungry = False\n```", "```py\nfork = threading.Lock()\npartner1 = Spouse('Wife', None)\npartner2 = Spouse('Husband', partner1)\npartner1.partner = partner2\npartner1.start()\npartner2.start()\npartner1.join()\npartner2.join()\nprint('Finished.')\n```", "```py\n> python3 example8.py\nWife is hungry and wants to eat.\nWife is waiting for their partner to eat first...\nHusband is hungry and wants to eat.\nWife is hungry and wants to eat.\nHusband is waiting for their partner to eat first...\nWife is waiting for their partner to eat first...\nHusband is hungry and wants to eat.\nWife is hungry and wants to eat.\nHusband is waiting for their partner to eat first...\nWife is waiting for their partner to eat first...\nHusband is hungry and wants to eat.\nWife is hungry and wants to eat.\nHusband is waiting for their partner to eat first...\n...\n```"]