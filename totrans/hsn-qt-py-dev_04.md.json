["```py\nimport QtQuick.Window 2.2\n```", "```py\n...\nUQml.Window {\n    ... \n    width: UQml.Screen.desktopAvailableWidth\n    height: UQml.Screen.desktopAvailableHeight\n    ...\n...\n```", "```py\nimport QtQuick.Controls 1.4\n```", "```py\nimport QtQuick 2.7\nimport QtQuick.Controls 1.4\nimport QtQuick.Controls.Styles 1.4\nimport QtQuick.Window 2.2 as SZ\nimport QtQuick.Layouts 1.3\nimport \"bars\" as Bars\nimport \".\" as Qmls\nimport \"gradients\" as SApp\n\nApplicationWindow {\n    width: SZ.Screen.desktopAvailableWidth / 2\n    height: SZ.Screen.desktopAvailableHeight / 2\n    title: \"QML Application\"\n    menuBar: Bars.MBar {}\n    toolBar: Bars.TBar {}\n...\n```", "```py\n...\n    ...\n    Bars.TaBar {\n        id: tabar1\n        width: parent.width\n    }\n...\n```", "```py\n...\n    ...\n    StackLayout {\n        id: sl1\n        width: tabar1.width\n        height: tabar1.height\n        currentIndex: tabar1.currentIndex\n        Qmls.UAppItems {\n            width: tabar1.width\n            height: tabar1.height\n        }\n    }\n```", "```py\n...\n    ...\n    statusBar: StatusBar {\n        anchors.fill: parent\n        Label { text: \"Reading...\"; color: \"red\" }\n        style: StatusBarStyle {\n            background: Rectangle {\n                anchors.fill: parent\n                SApp.UGradientWin {}\n            }\n        }\n    }\n}\n```", "```py\nimport QtQuick.Controls 1.4\n\nMenuBar {\n    Menu {\n        title: \"File\"\n        MenuItem { text: \"New\" }\n        MenuItem { text: \"Open\" }\n        MenuItem { text: \"Save\" }\n        MenuItem { text: \"Save as\" }\n    }\n    Menu {\n        title: \"Edit\"\n        MenuItem { text: \"Cut\" }\n        MenuItem { text: \"Copy\" }\n        MenuItem { text: \"Paste\" }\n    }\n    Menu {\n        title: \"Tools\"\n        MenuItem { text: \"Tool # 1\" }\n        MenuItem { text: \"Tool # 2\" }\n        MenuItem { text: \"Tool # 3\" }\n    }\n}\n```", "```py\nimport QtQuick 2.7\nimport QtQuick.Controls 1.4\nimport QtQuick.Layouts 1.2\n\nToolBar {\n    RowLayout {\n        anchors.fill: parent\n        ToolButton {\n            iconSource: \"Icons/python1.png\"\n        }\n        ToolButton {\n            iconSource: \"Icons/python2.png\"\n        }\n        ToolButton {\n            iconSource: \"Icons/Aiconda.png\"\n        }\n        Item { Layout.fillWidth: true }\n    }\n}\n```", "```py\nimport QtQuick 2.7\nimport QtQuick.Controls 2.2\n\nTabBar {\n    anchors.fill: parent\n    Repeater {\n        model: [\"Actions\", \"Views\", \"Models\"]\n        TabButton {\n            text: modelData\n        }\n    }\n}\n```", "```py\nimport QtQuick 2.7\nimport QtQuick.Layouts 1.3\nimport \".\" as Qmls\n\nGridLayout {\n    anchors.centerIn: parent\n    columns: 3\n...\n```", "```py\n...\n    ...\n    Qmls.URectGlow {\n        id: rg1\n        Layout.leftMargin: parent.width / 100\n        Layout.rightMargin: parent.width / 100\n        Layout.topMargin: parent.height / 4\n        Layout.bottomMargin: parent.height / 12\n        Layout.fillWidth: true\n        Layout.fillHeight: true\n        color: Qt.rgba(0, 0.07, 0.14, 1);\n        glowcolor: Qt.rgba(0.95, 0, 0, 1);\n        txglow: Qt.rgba(0.77, 0, 0, 1);\n        txtext: \"PUSH\"\n        txcolor: Qt.rgba(0.2, 0.2, 0.2, 1)\n        signal acolored(color ucolor)\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        function onAcolor(ucolor) {\n            if (ucolor==Qt.rgba(0.95, 0, 0, 1)) {\n                return [Qt.rgba(0.2, 0.2, 0.2, 1), 0.5,\n                        Qt.rgba(0, 0.07, 0.14, 1), 0.5,\n                        Qt.rgba(0, 0.07, 0.14, 1)];\n                } else {\n                return [Qt.rgba(0.95, 0, 0, 1), 10,\n                        Qt.rgba(0, 0.07, 0.14, 1), 0.1,\n                        Qt.rgba(0.77, 0, 0, 1)];\n            };\n        }\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        onAcolored: {\n            var acol = onAcolor(rg1.glowcolor)\n            rg1.glowcolor = acol[0];\n            rg1.glowr = acol[1];\n            rg1.color = acol[2];\n            rg1.spr = acol[3];\n            rg1.txglow = acol[4];\n        }\n        MouseArea {\n            anchors.fill: parent\n            onClicked: rg1.acolored(Qt.rgba(0.2, 0.2, 0.2, 1))\n        }\n    }\n...\n```", "```py\n...\n    ...\n    Qmls.URectGlow {\n        id: rg2\n        Layout.leftMargin: parent.width / 100\n        Layout.rightMargin: parent.width / 100\n        Layout.topMargin: parent.height / 4\n        Layout.bottomMargin: parent.height / 12\n        Layout.fillWidth: true\n        Layout.fillHeight: true\n        color: Qt.rgba(0, 0.07, 0.14, 1);\n        glowcolor: Qt.rgba(0.95, 0, 0, 1);\n        txglow: Qt.rgba(0.77, 0, 0, 1);\n        txtext: \"PUSH\"\n        txcolor: Qt.rgba(0.2, 0.2, 0.2, 1)\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        SequentialAnimation {\n            id: sa2; running: false\n            loops: Animation.Infinite\n            PropertyAnimation {\n                target: rg2\n                properties: \"glowcolor,txglow\"\n                from: Qt.rgba(0.95, 0, 0, 1);\n                to: Qt.rgba(0.007, 1, 1, 1);\n                duration: 7000\n                easing.type: Easing.OutInElastic\n            }\n            PropertyAnimation { \n                target: rg2\n                properties: \"glowcolor,txglow\"\n                from: Qt.rgba(0.007, 1, 1, 1);\n                to: Qt.rgba(0.95, 0, 0, 1);\n                duration: 7000\n                easing.type: Easing.OutInElastic\n            }\n        }\n        MouseArea {\n            anchors.fill: parent; onClicked: sa2.running = true;\n        }\n    }\n...\n```", "```py\n...\n    ...\n    Qmls.URectGlow {\n        id: rg3\n        Layout.leftMargin: parent.width / 100\n        Layout.rightMargin: parent.width / 100\n        Layout.topMargin: parent.height / 4\n        Layout.bottomMargin: parent.height / 12\n        Layout.fillWidth: true\n        Layout.fillHeight: true\n        color: Qt.rgba(0, 0.07, 0.14, 1);\n        glowcolor: Qt.rgba(0.95, 0, 0, 1);\n        txglow: Qt.rgba(0.77, 0, 0, 1);\n        txtext: \"PUSH\"\n        txcolor: Qt.rgba(0.2, 0.2, 0.2, 1)\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        ParallelAnimation {\n            id: pa3; running: false\n            loops: Animation.Infinite\n            PropertyAnimation {\n                target: rg3\n                properties: \"glowcolor,txglow\"\n                to: Qt.rgba(0, 0.07, 0.14, 1);\n                duration: 7000\n                easing.type: Easing.OutInElastic\n            }\n            PropertyAnimation {\n                target: rg3\n                properties: \"glowr,spr\"\n                to: 1\n                duration: 7000\n            }\n        }\n        MouseArea {\n            anchors.fill: parent; onClicked: pa3.running = true\n        }\n    }\n}\n```", "```py\n...\nRectangle {\n    property color glowcolor\n    property color txglow\n    property string txtext\n    property color txcolor\n    property real glowr: 10\n    property real spr: 0.1\n    property real whr: 1.5\n    property real rdx: 14\n...\n```", "```py\n...\n    ...\n    RectangularGlow {\n        ...\n        glowRadius: parent.glowr\n        spread: parent.spr\n        ...\n    }\n    Rectangle {\n        ...\n        width: parent.width / parent.whr\n        height: parent.height / parent.whr\n        ...\n        radius: rdx\n        Text {\n            ...\n            text: txtext\n            ...\n            color: txcolor\n        }\n        Glow {\n            ...\n            radius: parent.radius / 2\n            ...\n        }\n    }\n...\n```", "```py\n...\nGridLayout {\n    ...\n    Uqmls.URectGlow {\n        ... \n        txtext: \"PUSH\"\n        txcolor: Qt.rgba(0.2, 0.2, 0.2, 1)\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    Uqmls.UAppwin { id: appwin1; visible: true }\n    ...\n...\n```", "```py\nimport QtQuick.Controls 1.4\n```", "```py\nimport QtQuick.Controls.Styles 1.4\n```", "```py\nimport QtQuick 2.7\nimport QtQuick.Controls 1.4\nimport QtQuick.Controls.Styles 1.4\nimport \".\" as Qmls\n\nButton {\n    property color bcolor: Qt.rgba(0, 0.07, 0.14, 1);\n    property color gcolor: Qt.rgba(0.95, 0, 0, 1);\n    property color tgcolor: Qt.rgba(0.77, 0, 0, 1);\n    property color tcolor: Qt.rgba(0.2, 0.2, 0.2, 1);\n    property real glrd: 3\n    property real sprd: 0.5\n    property string btext\n...\n```", "```py\n...\n    ...\n    style: ButtonStyle {\n        background: Qmls.URectGlow {\n            id: but1\n            txtext: btext\n            txcolor: tcolor\n            color: bcolor\n            glowcolor: gcolor\n            txglow: tgcolor\n            glowr: glrd\n            spr: sprd\n            whr: 1.2\n            rdx: 7\n        }\n    }\n}\n```", "```py\n...\nimport QtQuick.Controls 1.4\nimport QtQuick.Controls.Styles 1.4\n...\n```", "```py\n...\n    ...\n        ...\n        Uqmls.URect {\n            ...\n            Uqmls.UButton {\n                id: ubut1\n                width: rect2.width\n                height: rect2.height / 10\n                btext: \"HIDE\"\n                tooltip: \"Hide the panel with buttons\"\n                MouseArea {\n                    anchors.fill: parent; hoverEnabled: true\n                    onEntered: {\n                        parent.tcolor = Qt.rgba(1, 0, 0, 1); \n                    }\n                    onExited: {\n                        parent.tcolor = Qt.rgba(0.2, 0.2, 0.2, 1);\n                    }\n                    onClicked: {\n                        rect2.visible = false; \n                        rect1.width = UQml.Window.width;} \n                    }\n                }\n            }\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ... \n        Uqmls.UButton {\n            id: ubut2\n            width: rect2.width\n            height: rect2.height / 10\n            y: rect2.height / 10 \n            btext: \"APPS\"\n            tooltip: \"Run example of the Application Window\"\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n            ...\n            SequentialAnimation {\n                id: sa1; running: false; loops: 1\n                PropertyAnimation {\n                    target: ubut2; property: \"glrd\"; to: 7;\n                    duration: 100;\n                }\n                PropertyAnimation {\n                    target: ubut2; property: \"glrd\"; to: 3;\n                    duration: 100\n                }\n            }\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n            ...\n             MouseArea {\n                anchors.fill: parent; hoverEnabled: true\n                onEntered: {\n                    parent.tcolor = Qt.rgba(1, 0, 0, 1);\n                }\n                onExited: {\n                    parent.tcolor = Qt.rgba(0.2, 0.2, 0.2, 1);\n                }\n                onClicked: {\n                    sa1.running = true; appwin1.visible = true;\n                }\n            }\n        }\n```", "```py\n...\n    ...\n        ...\n        Uqmls.UButton {\n            id: ubut3\n            width: rect2.width\n            height: rect2.height / 10\n            y: (rect2.height / 10) * 2\n            btext: \"TOOL\"\n            tooltip: \"Show animated rectangles as item elements\"\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n            ...\n            MouseArea {\n                anchors.fill: parent; hoverEnabled: true\n                onEntered: {\n                    ubut3.tcolor = Qt.rgba(1, 0, 0, 1);\n                }\n                onExited: {\n                    ubut3.tcolor = Qt.rgba(0.2, 0.2, 0.2, 1);\n                }\n                onClicked: {ubut3.clicked()}\n            }\n            onClicked: {\n                ubut3.glrd == 3 ? ubut3.glrd = 7 : ubut3.glrd = 3;\n                if (ubut3.glrd==7) {\n                    main_item.visible = true;\n                    grid1.visible = false;\n                } else {\n                    main_item.visible = false;\n                    grid1.visible = true;\n                };\n            }\n        }\n    ...\n...\n```", "```py\nimport QtQuick 2.7\nimport QtQuick.Layouts 1.3\nimport \".\" as Uqmls\n\nGridLayout {\n    Uqmls.UCircle {id: g1;Layout.margins: 20\n    Layout.fillWidth: true;Layout.fillHeight: true}\n    Uqmls.URectLG {id: g2;Layout.margins: 20\n    Layout.fillWidth: true;Layout.fillHeight: true}\n    Uqmls.URectRG {id: g3;Layout.margins: 20\n    Layout.fillWidth: true;Layout.fillHeight: true}\n    Uqmls.URectCG {id: g4;Layout.margins: 20\n    Layout.fillWidth: true;Layout.fillHeight: true}\n    ...\n...\n```", "```py\n...\n    ...\n    Uqmls.URectGlow {\n        id: g5; Layout.fillWidth: true; Layout.fillHeight: true\n        Layout.margins: 20\n        color: Qt.rgba(0, 0.07, 0.14, 1);\n        glowcolor: Qt.rgba(0.007, 1, 1, 1);\n        txglow: Qt.rgba(0.007, 0.7, 0.7, 1);\n        txtext: \"PUSH\"\n        txcolor: Qt.rgba(0.2, 0.2, 0.2, 1)\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n         MouseArea {\n            anchors.fill: parent\n            onClicked: {\n                g5.glowcolor == Qt.rgba(0.007, 1, 1, 1) ?\n                g5.glowcolor = Qt.rgba(0, 0.07, 0.14, 1) :\n                g5.glowcolor = Qt.rgba(0.007, 1, 1, 1);\n                g5.txglow == Qt.rgba(0, 0.07, 0.14, 1) ?\n                g5.txglow = Qt.rgba(0.007, 1, 1, 1) :\n                g5.txglow = Qt.rgba(0, 0.07, 0.14, 1);\n                g5a.running == true ? \n                g5a.running = false : g5a.running = true;\n            }\n        }\n        RotationAnimator {\n            id: g5a; running: false; loops: Animation.Infinite\n            target: g1\n            to: 360\n            duration: 1000\n            easing.type: Easing.Linear\n        }\n    }\n...\n```", "```py\n...\n    ...\n     Uqmls.URectGlow {\n        id: g6; Layout.fillWidth: true; Layout.fillHeight: true\n        Layout.margins: 20\n        color: Qt.rgba(0, 0.07, 0.14, 1);\n        glowcolor: Qt.rgba(0.95, 0, 0, 1);\n        txglow: Qt.rgba(0.77, 0, 0, 1);\n        txtext: \"PUSH\"\n        txcolor: Qt.rgba(0.2, 0.2, 0.2, 1)\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        MouseArea {\n            anchors.fill: parent\n            onClicked: {\n                g6.glowcolor == Qt.rgba(0.95, 0, 0, 1) ?\n                g6.glowcolor = Qt.rgba(0, 0.07, 0.14, 1) :\n                g6.glowcolor = Qt.rgba(0.95, 0, 0, 1);\n                g6.txglow == Qt.rgba(0, 0.07, 0.14, 1) ?\n                g6.txglow = Qt.rgba(0.77, 0, 0, 1) :\n                g6.txglow = Qt.rgba(0, 0.07, 0.14, 1);\n                g6a.running == true ? \n                g6a.running = false : g6a.running = true;\n            }\n        }\n        RotationAnimator {\n            id: g6a; running: false; loops: Animation.Infinite\n            target: g2\n            to: 360\n            duration: 300\n            easing.type: Easing.InQuad\n        }\n    }\n...\n```", "```py\n...\n    ...\n    Uqmls.URectGlow {             \n        id: g7; Layout.fillWidth: true; Layout.fillHeight: true\n        Layout.margins: 20    \n        color: Qt.rgba(0, 0.07, 0.14, 1);  \n        glowcolor: Qt.rgba(0,0.95,0.37,1); \n        txglow: Qt.rgba(0,0.47,0.37,1);    \n        txtext: \"PUSH\"                     \n        txcolor: Qt.rgba(0.2, 0.2, 0.2, 1) \n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        MouseArea {\n            anchors.fill: parent\n            onClicked: {\n                g7.glowcolor == Qt.rgba(0, 0.95, 0.37, 1) ?\n                g7.glowcolor = Qt.rgba(0, 0.07, 0.14, 1) :\n                g7.glowcolor = Qt.rgba(0, 0.95, 0.37, 1);\n                g7.txglow == Qt.rgba(0, 0.07, 0.14, 1) ?\n                g7.txglow = Qt.rgba(0, 0.47, 0.37, 1) :\n                g7.txglow = Qt.rgba(0, 0.07, 0.14, 1);\n                g7a.running == true ?\n                g7a.running = false : g7a.running = true;\n            }\n        }\n        RotationAnimator {\n            id: g7a; running: false; loops: Animation.Infinite\n            target: g3\n            to: 360\n            duration: 200\n            easing.type: Easing.InCubic\n        }\n    }\n...\n```", "```py\n...\n    ...\n    Uqmls.URectGlow {\n        id: g8; Layout.fillWidth: true; Layout.fillHeight: true\n        Layout.margins: 20\n        color: Qt.rgba(0, 0.07, 0.14, 1);\n        glowcolor: Qt.rgba(1, 1, 1, 1);\n        txglow: \"grey\";\n        txtext: \"PUSH\"\n        txcolor: Qt.rgba(0.2, 0.2, 0.2, 1)\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        MouseArea {\n            anchors.fill: parent\n            onClicked: {\n                g8.glowcolor == Qt.rgba(1, 1, 1, 1) ?\n                g8.glowcolor = Qt.rgba(0, 0.07, 0.14, 1) :\n                g8.glowcolor = Qt.rgba(1, 1, 1, 1);\n                g8.txglow == Qt.rgba(0, 0.07, 0.14, 1) ?\n                g8.txglow = \"grey\" :\n                g8.txglow = Qt.rgba(0, 0.07, 0.14, 1);\n                g8a.running == true ?\n                g8a.running = false : g8a.running = true;\n            }\n        }\n        RotationAnimator {\n            id: g8a; running: false; loops: Animation.Infinite\n            target: g4\n            to: 360\n            duration: 100\n            easing.type: Easing.InQuart\n        }\n    }\n}\n```", "```py\n... \n    ...\n        ...\n            ...\n            Uqmls.UAppwin {\n                id: appwin1\n                visible: false\n            }\n            Uqmls.UItem {\n                id: main_item\n                visible: false\n                width: rect1.width\n                height: parent.height - rect1.height\n                y: rect1.height\n            }\n            Uqmls.UGrid {\n                id: grid1\n                anchors.fill: parent\n                visible: true\n                function wsize() {\n                    if (parent.width > 590) {\n                        return 4;\n                    } \n                    else {return 2;};\n                }\n                columns: wsize();\n            }\n        ...\n    ...\n...\n```", "```py\nimport QtQuick.Controls 1.4\n```", "```py\nimport QtQuick.Controls 1.4\n```", "```py\nimport QtQuick.Controls 1.4\n```", "```py\nimport QtQuick.Controls 1.4\n```", "```py\nimport QtQuick.Controls 1.4\n```", "```py\nimport QtQuick.Controls 1.4\n```", "```py\nimport QtQuick.Controls 1.4\n```", "```py\nimport QtQuick 2.7\nimport QtQuick.Layouts 1.3\nimport QtQuick.Controls 1.4\n\nItem {\n    SplitView {\n        anchors.fill: parent;\n        orientation: Qt.Vertical;\n        resizing: true\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        Rectangle {\n            id: scr1; color: \"#111F1F\"\n            Layout.minimumHeight: parent.height / 2 \n            Text {\n                id: tx1; anchors.centerIn: parent\n                text: \"Texts\"; color: \"grey\"\n                font: {\n                    font.pixelSize=scr1.width / 8;\n                    font.letterSpacing=5;\n                    font.weight=Font.ExtraBold;\n                }\n            }\n            MouseArea {\n                id: ma1; anchors.fill: parent;\n                hoverEnabled: true\n                onEntered: scr1.color = \"lightgrey\";\n                onExited: scr1.color = \"#111F1F\";\n                onClicked: {\n                    txs1.visible = true;\n                    grid1.visible = false;\n                    main_item = false;\n                    tb1.visible = true;\n                }\n            }\n        }\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        Rectangle {\n            id: scr2; color: \"#111F1F\"\n            Layout.fillHeight: true\n            Text {\n                id: tx2; anchors.centerIn: parent\n                text: \"Table\"; color: \"grey\"\n                font: {\n                    font.pixelSize=scr1.width / 8;\n                    font.letterSpacing=5;\n                    font.weight=Font.ExtraBold;\n                }\n            }\n            MouseArea {\n                id: ma2; anchors.fill: parent\n                hoverEnabled: true\n                onEntered: scr2.color = \"lightgrey\";\n                onExited: scr2.color = \"#111F1F\";\n                onClicked: {\n                    tb1.visible = true;\n                    grid1.visible = false;\n                    main_item = false;\n                    txs1.visible = false;\n                }\n            }\n        }\n    }\n}\n```", "```py\nimport QtQuick 2.7\nimport QtQuick.Layouts 1.3\nimport QtQuick.Controls 1.4\nimport QtQuick.Controls.Styles 1.4\nimport QtQuick.Dialogs 1.2\n\nGridLayout {\n    ...\n...\n```", "```py\n...\n    ... \n    TextArea {\n        id: ta1; Layout.column: 0\n        Layout.rowSpan: 5; Layout.columnSpan: 3\n        Layout.fillWidth: true; Layout.fillHeight: true\n        Layout.minimumWidth: parent.width / 2\n        font.pixelSize: sl1.value\n        textColor: \"lightgrey\"; textMargin: 10\n    }\n...\n```", "```py\n...\n    ...\n    Calendar {\n        id: cd1; Layout.row: 0\n        Layout.column: 3\n        Layout.columnSpan: 2\n        Layout.fillWidth: true\n        Layout.fillHeight: true\n    }\n...\n```", "```py\n...\n    ...\n    Slider {\n        id: sl1\n        Layout.row: 1\n        Layout.column: 3\n        Layout.fillWidth: true\n        Layout.fillHeight: true\n        Layout.maximumHeight: parent.height / 24\n        updateValueWhileDragging: true\n        minimumValue: 0\n        maximumValue: 100\n        value: 19\n    }\n...\n```", "```py\n...\n    ...\n    ComboBox {\n        id: cb1\n        Layout.row: 1\n        Layout.column: 4 \n        Layout.fillWidth: true\n        Layout.fillHeight: true\n        Layout.maximumHeight: parent.height / 24\n        model: [\"Dialogs\", \"Change Font\", \"Change Color\"]\n        currentIndex: 0\n        onCurrentIndexChanged: {\n            if (currentText==\"Change Font\") {\n                fontd1.open(); cb1.currentIndex = 0;};\n            if (currentText==\"Change Color\") {\n                colord1.open(); cb1.currentIndex = 0;};\n            }\n        FontDialog {\n            id: fontd1\n            onAccepted: {\n                ta1.font = fontd1.currentFont;\n                fontd1.visible = false;\n            }\n            onRejected: fontd1.visible = false;\n        }\n        ColorDialog {\n            id: colord1\n            onAccepted: {\n                ta1.textColor = colord1.currentColor\n                colord1.visible = false\n            }\n            onRejected: colord1.visible = false;\n        }\n    }\n...\n```", "```py\n...\n    ...\n    ExclusiveGroup { id: exgr }\n    GridLayout {\n        columns: 1\n        Layout.row: 2\n        Layout.column: 3\n        Layout.rowSpan: 2\n        Repeater {\n            id: rbrep1; model: [\"1 line of the text\",\n                                \"1000 lines of the text\"]\n            RadioButton { \n                exclusiveGroup: exgr\n                Layout.fillWidth: true\n                Layout.fillHeight: true\n                style: RadioButtonStyle {\n                    background: Rectangle {\n                        color: \"#000F1F\"\n                    }\n                    label: Text {\n                        text: modelData\n                        color: \"lightgray\"\n                        font.pixelSize: 14\n                        font.letterSpacing: 2 \n                    }\n                }\n            }\n            Component.onCompleted: {\n                rbrep1.itemAt(0).checked = true;\n            }\n        }\n    }\n...\n```", "```py\n...\n    ...\n    GridLayout {\n        columns: 1\n        Layout.row: 2\n        Layout.column: 4\n        Layout.rowSpan: 2\n        Repeater {\n            id: rbrep2; model: [\"Month number\",\n                                \"Milliseconds\",\n                                    \"Scidate\"]\n            CheckBox {\n                Layout.fillWidth: true\n                Layout.fillHeight: true\n                style: CheckBoxStyle {\n                    background: Rectangle {\n                        color: \"#000F1F\"\n                    }\n                    label: Text {\n                        text: modelData\n                        color: \"lightgray\"\n                        font.pixelSize: 14\n                        font.letterSpacing: 2\n                    }\n                }\n            }\n        }\n    }\n...\n```", "```py\n...\n    ...\n    TextField {\n        id: tf1\n        Layout.row: 4\n        Layout.column: 3\n        Layout.fillWidth: true\n        Layout.fillHeight: true\n        Layout.maximumHeight: rx1.height\n        horizontalAlignment: TextInput.AlignHCenter\n        font.pixelSize: rx1.height / 2\n        style: TextFieldStyle {\n            background: Rectangle {radius: 7}\n        }\n    }\n...\n```", "```py\n...\n    ...\n    Rectangle {\n        id: rx1; Layout.row: 4\n        Layout.column: 4\n        Layout.fillWidth: true\n        Layout.fillHeight: true\n        Layout.maximumHeight: cb1.height * 2\n        radius: 14; color: Qt.rgba(0.2, 0.2, 0.2, 1);\n        Text {\n            id: rtxt1\n            anchors.centerIn: parent\n            visible: true\n            text: \"Ok\"; color: \"green\"\n            font.pixelSize: parent.width / 8\n        }\n        BusyIndicator {\n            id: bi1\n            anchors.centerIn: parent\n            running: false\n        }\n        Timer {\n            id: t1; interval: 300\n            running: false\n            repeat: false\n            onTriggered: rx1.txdate();\n        }\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        function txdate() {\n            var sd = cd1.selectedDate;\n            var dateform = sd;\n            if (rbrep2.itemAt(0).checked==true) {\n                dateform = dateform + \",\n                        month-\" + (cd1.visibleMonth + 1);\n            } else {dateform = dateform};\n            if (rbrep2.itemAt(1).checked==true) {\n                dateform = dateform + \",\n                        milliseconds: \" + Date.parse(sd)\n            } else {dateform = dateform};\n            if (rbrep2.itemAt(2).checked==true) {\n                var sdy = sd.getFullYear().toString();\n                var sdmi = sd.getMonth() + 1;\n                var sdm = sdmi.toString();\n                var sdd = sd.getDate().toString();\n                var sdh = sd.getHours().toString();\n                var sdmt = sd.getMinutes().toString();\n                var sds = sd.getSeconds().toString();\n                var scid = sdy + sdm + sdd + sdh + sdmt + sds;\n                dateform = dateform + \", scidate: \" + scid;\n            } else {dateform = dateform};\n            if (rbrep1.itemAt(0).checked==true) {\n                ta1.text = dateform; tf1.text = ta1.length;\n                bi1.running = false; rtxt1.text = \"Ok\"\n            };\n            if (rbrep1.itemAt(1).checked==true) {\n                for (var i = 0; i<1000; i++) { \n                    ta1.append(dateform);\n                    if (i==999) {\n                        tf1.text = ta1.length; bi1.running = false; \n                        rtxt1.text = \"Ok\";\n                    };\n                }\n            };\n        }\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        MouseArea {\n            anchors.fill: parent;\n            hoverEnabled: true\n            onEntered: {\n                rx1.color = Qt.rgba(0.25, 0.25, 0.25, 1);\n                rtxt1.color = \"lightgreen\";\n            }\n            onExited: {rx1.color = Qt.rgba(0.2, 0.2, 0.2, 1);\n                rtxt1.color = \"green\";}\n            onClicked: {\n                rtxt1.text = \"\";\n                bi1.running = true;\n                t1.running = true;\n            }\n        }\n    }\n}\n```", "```py\nimport QtQuick 2.7\nimport QtQuick.Controls 1.4\nimport QtQuick.Controls.Styles 1.4\nimport QtQuick.Layouts 1.3\n\nGridLayout {\n    TableView {\n        Layout.fillWidth: true\n        Layout.fillHeight: true\n        Layout.margins: 50\n        TableViewColumn {\n            horizontalAlignment: Text.AlignHCenter \n            role: \"num1\"; title: \"Title 1\"\n        }\n        TableViewColumn {\n            horizontalAlignment: Text.AlignHCenter\n            role: \"num2\"; title: \"Title 2\" \n        }\n        TableViewColumn {\n            horizontalAlignment: Text.AlignHCenter\n            role: \"num3\"; title: \"Title 3\"\n        }\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n        style: TableViewStyle {\n            textColor: \"red\"\n        }\n        model: ListModel {\n            id: lm1\n            ListElement {\n                num1: \"1_1\"; num2: \"1_2\"; num3: \"1_3\"\n            }\n            ListElement {\n                num1: \"2_1\"; num2: \"2_2\"; num3: \"2_3\"\n            }\n            ListElement {\n                num1: \"3_1\"; num2: \"3_2\"; num3: \"3_3\"\n            }\n        }\n    }\n}\n```", "```py\nimport QtQuick.Layouts 1.3\n```", "```py\n...\nimport QtQuick.Layouts 1.3\n...\n\nUQml.Window {\n    ...\n    GridLayout {\n        id: main_grid1\n        columns: 1\n        rows: 1\n        anchors.fill: parent\n        Uqmls.URect {\n            Layout.column: 0; Layout.row: 0\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            Layout.minimumHeight: w1.height\n            id: rect1\n            ...\n        }\n    }\n...\n```", "```py\n...\n    ...\n    GridLayout {\n        id: main_grid2\n        columns: 1\n        rows: 1\n        anchors.fill: parent\n        Uqmls.URect {\n            Layout.column: 0; Layout.row: 0\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            Layout.alignment: Qt.AlignRight\n            Layout.maximumWidth: w1.width / 5\n            id: rect2\n            visible: false\n            color: \"#000F1D\"\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n            ...\n            GridLayout {\n                id: but_grid\n                columns: 1\n                rows: 4\n                anchors.fill: parent                       \n                Uqmls.UButton {\n                    id: ubut1\n                    Layout.column: 0\n                    Layout.row: 0\n                    Layout.maximumHeight: w1.height / 5\n                    Layout.fillWidth: true\n                    Layout.fillHeight: true\n                    ...\n                }\n                Uqmls.UButton {\n                    id: ubut2\n                    Layout.column: 0\n                    Layout.row: 1\n                    Layout.maximumHeight: w1.height / 5\n                    Layout.fillWidth: true\n                    Layout.fillHeight: true\n                    ...\n                }\n                Uqmls.UButton {\n                    id: ubut3\n                    Layout.column: 0\n                    Layout.row: 2\n                    Layout.fillWidth: true\n                    Layout.fillHeight: true\n                    Layout.maximumHeight: w1.height / 5\n                    ...\n                }\n                ...\n            ...\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n        ...\n            ...\n                ...\n                Uqmls.USplit {\n                    id: spl1\n                    visible: true\n                    Layout.column: 0\n                    Layout.row: 3\n                    Layout.maximumHeight: w1.height / 5\n                    Layout.fillWidth: true\n                    Layout.fillHeight: true\n                }\n            }\n        }\n    }\n}\n```"]