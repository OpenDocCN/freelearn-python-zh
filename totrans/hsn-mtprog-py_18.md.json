["```py\nfrom abc import ABC, abstractmethod\nclass CarSpecs(type):\n    def __new__(classitself, classname, baseclasses, attributes):  \n        newattributes = {}\n        for attribute, value in attributes.items():\n            if attribute.startswith(\"__\"):\n                newattributes[attribute] = value\n            elif type(value)==int or type(value)==float:\n                newattributes[attribute] = {}\n                newattributes[attribute]['feature'] = attribute.title().replace('_', ' ')\n                newattributes[attribute]['info'] = str(value)\n                newattributes[attribute]['type'] = 'NUMERIC'\n            elif type(value)==str:\n                newattributes[attribute] = {}\n                newattributes[attribute]['feature'] = attribute.title().replace('_', ' ')\n                newattributes[attribute]['info'] = value.title()\n                newattributes[attribute]['type'] = 'VARCHAR'\n            elif type(value)==bool:\n                newattributes[attribute] = {}\n                newattributes[attribute]['feature'] = attribute.title().replace('_', ' ')\n                newattributes[attribute]['info'] = value.title()\n                newattributes[attribute]['type'] = 'BOOLEAN'\n\n            else:\n                newattributes[attribute] = value                \n        return type.__new__(classitself, classname, baseclasses, newattributes)\n```", "```py\n    class CarCatalogue(metaclass = CarSpecs):\n        @abstractmethod\n        def define_color(self):\n            pass\n        @abstractmethod\n        def print_catalogue(self):\n            pass\n    ```", "```py\n    class CarMake(metaclass = CarSpecs):   \n        @abstractmethod\n        def define_spec(self):\n            pass     \n    ```", "```py\n    class BodyStyle(metaclass = CarSpecs):\n        @abstractmethod\n        def body_style_features(self):\n            pass   \n    ```", "```py\n    class SaleType(metaclass = CarSpecs):\n        @abstractmethod\n        def calculate_price(self):\n            pass\n    ```", "```py\n    class New(SaleType, CarCatalogue,  metaclass = CarSpecs):\n        def calculate_price(self, classname):\n            car = classname()\n            price = float(car.price['info'])\n            return price\n    ```", "```py\n    class Resale(SaleType, CarCatalogue,  metaclass = CarSpecs):\n        def calculate_price(self, classname, years):\n            car = classname()\n            depreciation = years * 0.15\n            price = float(car.price['info']) * (1 - depreciation)\n            return price\n    ```", "```py\n    class CodeGenerator:\n    ```", "```py\n    def generate_meta(self):\n            ast = __import__('ast')\n            meta_template = '''\n    from abc import ABC, abstractmethod, ABCMeta\n    class CarSpecs(type, metaclass = ABCMeta):\n        def __new__(classitself, classname, baseclasses, attributes):  \n            newattributes = {}\n            for attribute, value in attributes.items():\n                if attribute.startswith(\"__\"):\n                    newattributes[attribute] = value\n                elif type(value)==int or type(value)==float:\n                    newattributes[attribute] = {}\n                    newattributes[attribute]['feature'] = attribute.title().replace('_', ' ')\n                    newattributes[attribute]['info'] = str(value)\n                    newattributes[attribute]['type'] = 'NUMERIC'\n                elif type(value)==str:\n                    newattributes[attribute] = {}\n                    newattributes[attribute]['feature'] = attribute.title().replace('_', ' ')\n                    newattributes[attribute]['info'] = value.title()\n                    newattributes[attribute]['type'] = 'VARCHAR'\n                elif type(value)==bool:\n                    newattributes[attribute] = {}\n                    newattributes[attribute]['feature'] = attribute.title().replace('_', ' ')\n                    newattributes[attribute]['info'] = value.title()\n                    newattributes[attribute]['type'] = 'BOOLEAN'\n                else:\n                    newattributes[attribute] = value                \n            return type.__new__(classitself, classname, baseclasses, newattributes)\n    '''\n            meta_tree = ast.parse(meta_template)\n            print(ast.unparse(meta_tree))\n            print('\\n')\n    ```", "```py\n    def generate_car_catalogue(self):\n            ast = __import__('ast')\n            catalogue_template = '''\n    class CarCatalogue(metaclass = CarSpecs):\n        @abstractmethod\n        def define_color(self):\n            pass\n\n        @abstractmethod\n        def print_catalogue(self):\n            pass\n            '''\n            catalogue_tree = ast.parse(catalogue_template)\n            print(ast.unparse(catalogue_tree))\n            print('\\n')\n    ```", "```py\n    def generate_carmake_code(self):\n            ast = __import__('ast')\n            carmake_template = '''\n    class CarMake(metaclass = CarSpecs):   \n        @abstractmethod\n        def define_spec(self):\n            pass     \n            '''\n            carmake_tree = ast.parse(carmake_template)\n            print(ast.unparse(carmake_tree))\n            print('\\n')\n    ```", "```py\n    def generate_bodystyle_parent(self):\n            ast = __import__('ast')\n            bodystyle_parent_template = '''\n    class BodyStyle(metaclass = CarSpecs):\n        @abstractmethod\n        def body_style_features(self):\n            pass  \n            '''\n            bodystyle_parent_tree = ast.parse(bodystyle_parent_template)\n            print(ast.unparse(bodystyle_parent_tree))\n            print('\\n')\n    ```", "```py\n    def generate_salestype_code(self):\n            ast = __import__('ast')\n            saletype_template = '''\n    class SaleType(metaclass = CarSpecs):\n        @abstractmethod\n        def calculate_price(self):\n            pass\n            '''\n            salestype_tree = ast.parse(saletype_template)\n            print(ast.unparse(salestype_tree))\n            print('\\n')\n    ```", "```py\n    def generate_newsale_code(self):\n            ast = __import__('ast')\n            newsale_template = '''\n    class New(SaleType, CarCatalogue,  metaclass = CarSpecs):\n        def calculate_price(self, classname):\n            car = classname()\n            price = float(car.price['info'])\n            return price\n            '''\n            newsale_tree = ast.parse(newsale_template)\n            print(ast.unparse(newsale_tree))\n            print('\\n')\n    ```", "```py\n        def generate_resale_code(self):\n            ast = __import__('ast')\n            resale_template = '''\n    class Resale(SaleType, CarCatalogue,  metaclass = CarSpecs):\n        def calculate_price(self, classname, years):\n            car = classname()\n            depreciation = years * 0.15\n            price = float(car.price['info']) * (1 - depreciation)\n            return price\n            '''\n            resale_tree = ast.parse(resale_template)\n            print(ast.unparse(resale_tree))\n            print('\\n')\n    ```", "```py\n    def generate_car_code(self, classname, carspecs):\n            self.classname = classname\n            self.carspecs = carspecs\n            ast = __import__('ast')\n            car_template = '''\n    class '''+self.classname+'''(CarMake, CarCatalogue, metaclass = CarSpecs):\n        fuel_type = '''+\"'\"+self.carspecs['fuel_type']+\"'\"+'''\n        aspiration = '''+\"'\"+self.carspecs['aspiration']+\"'\"+'''\n        num_of_door = '''+\"'\"+self.carspecs['num_of_door']+\"'\"+'''\n        drive_wheels = '''+\"'\"+self.carspecs['drive_wheels']+\"'\"+'''\n        wheel_base = '''+\"'\"+self.carspecs['wheel_base']+\"'\"+'''\n        length = '''+\"'\"+self.carspecs['length']+\"'\"+'''\n        width = '''+\"'\"+self.carspecs['width']+\"'\"+'''\n        height = '''+\"'\"+self.carspecs['height']+\"'\"+'''\n        curb_weight = '''+\"'\"+self.carspecs['curb_weight']+\"'\"+'''\n        fuel_system = '''+\"'\"+self.carspecs['fuel_system']+\"'\"+'''\n        city_mpg = '''+\"'\"+self.carspecs['city_mpg']+\"'\"+'''\n        highway_mpg = '''+\"'\"+self.carspecs['highway_mpg']+\"'\"+'''\n        price = '''+\"'\"+self.carspecs['price']+\"'\"+'''\n        def define_color(self):\n                BOLD = '\\33[5m'\n                BLUE = '\\033[94m'\n                return BOLD + BLUE\n        def define_spec(self):\n                specs = [self.fuel_type, self.aspiration, self.num_of_door, self.drive_wheels, \n                         self.wheel_base, self.length, self.width, self.height, self.curb_weight,\n                        self.fuel_system, self.city_mpg, self.highway_mpg]\n                return specs\n        def print_catalogue(self):\n                for i in self.define_spec():\n                    print(self.define_color() + i['feature'], \": \", self.define_color() + i['info'])   \n                    '''\n            car_tree = ast.parse(car_template)\n            print(ast.unparse(car_tree))\n            print('\\n')\n    ```", "```py\n    def generate_bodystyle_code(self, classname, carfeatures):\n            self.classname = classname\n            self.carfeatures = carfeatures\n            ast = __import__('ast')\n            bodystyle_template = '''\n    class '''+self.classname+'''(BodyStyle, CarCatalogue,  metaclass = CarSpecs):\n        engine_location = '''+\"'\"+self.carfeatures['engine_location']+\"'\"+'''\n        engine_type = '''+\"'\"+self.carfeatures['engine_type']+\"'\"+'''\n        num_of_cylinders = '''+\"'\"+self.carfeatures['num_of_cylinders']+\"'\"+''' \n        engine_size = '''+\"'\"+self.carfeatures['engine_size']+\"'\"+'''\n        bore = '''+\"'\"+self.carfeatures['bore']+\"'\"+'''\n        stroke = '''+\"'\"+self.carfeatures['stroke']+\"'\"+'''\n        compression_ratio = '''+\"'\"+self.carfeatures['compression_ratio']+\"'\"+'''\n        horse_power = '''+\"'\"+self.carfeatures['horse_power']+\"'\"+'''\n        peak_rpm = '''+\"'\"+self.carfeatures['peak_rpm']+\"'\"+'''\n        def body_style_features(self):\n                features = [self.engine_location, self.engine_type, self.num_of_cylinders, self.engine_size,\n                         self.bore, self.stroke, self.compression_ratio, self.horse_power, self.peak_rpm]\n                return features  \n        def define_color(self):\n                BOLD = '\\33[5m'\n                RED = '\\033[31m'\n                return BOLD + RED\n        def print_catalogue(self):\n                for i in self.body_style_features():\n                    print(self.define_color() + i['feature'], \": \", self.define_color() + i['info'])  \n                    '''\n            bodystyle_tree = ast.parse(bodystyle_template)\n            print(ast.unparse(bodystyle_tree))\n            print('\\n')\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    auto = pd.read_csv(\"automobile.csv\")\n    auto_truncated = auto.copy(deep=True)\n    auto_truncated.drop_duplicates(subset = ['make','body-style'], inplace = True)\n    auto_truncated.reset_index(inplace = True, drop = True)\n    auto_truncated['make'] = auto_truncated['make'].apply(lambda x: x.title().replace('-',''))\n    auto_truncated.reset_index(inplace = True)\n    auto_truncated['index'] = auto_truncated['index'].astype('str')\n    auto_truncated['make'] = auto_truncated['make'] + auto_truncated['index']\n    auto_truncated['body-style'] = auto_truncated['body-style'].apply(lambda x: x.title().replace('-',''))\n    auto_truncated['body-style'] = auto_truncated['body-style'] + auto_truncated['index']\n    ```", "```py\nauto_specs = auto_truncated[['make', 'fuel-type', 'aspiration', 'num-of-doors', 'drive-wheels', 'wheel-base',  'length', 'width', 'height', 'curb-weight', 'fuel-system', 'city-mpg',  'highway-mpg', 'price']].copy(deep = True)\nauto_specs.columns = ['classname', 'fuel_type', 'aspiration', 'num_of_door', 'drive_wheels',                      'wheel_base', 'length', 'width', 'height', 'curb_weight', 'fuel_system', 'city_mpg', 'highway_mpg', 'price' ]\nfor col in auto_specs.columns:\n    auto_specs[col] = auto_specs[col].astype('str')\nauto_features = auto_truncated[['body-style', 'engine-location', 'engine-type', 'num-of-cylinders', 'engine-size', 'bore', 'stroke', 'compression-ratio', 'horsepower', 'peak-rpm']].copy(deep = True)\nauto_features.columns = ['classname', 'engine_location', 'engine_type', 'num_of_cylinders', 'engine_size', 'bore', 'stroke', 'compression_ratio', 'horse_power', 'peak_rpm']\nfor col in auto_features.columns:\n    auto_features[col] = auto_features[col].astype('str')\n```", "```py\n    from codegenerator import CodeGenerator\n    codegen = CodeGenerator()\n    ```", "```py\n    def generatelib():\n        codegen.generate_meta()\n        codegen.generate_car_catalogue()\n        codegen.generate_carmake_code()\n        codegen.generate_bodystyle_parent()\n        codegen.generate_salestype_code()\n        codegen.generate_newsale_code()\n        codegen.generate_resale_code()\n        for index, row in auto_specs.iterrows():\n            carspecs = dict(row)\n            classname = carspecs['classname']\n            del carspecs['classname']\n            codegen.generate_car_code(classname = classname, carspecs = carspecs)\n        for index, row in auto_features.iterrows():\n            carfeatures = dict(row)\n            classname = carfeatures['classname']\n            del carfeatures['classname']\n            codegen.generate_bodystyle_code(classname = classname, carfeatures = carfeatures)\n    ```", "```py\n    from contextlib import redirect_stdout\n    with open('abccaragencylib.py', 'w') as code:\n        with redirect_stdout(code):\n            generatelib()\n    code.close()\n    ```", "```py\n    import abccaragencylib as carsales\n    ```", "```py\n    class Queue:\n        def __init__(self, makeclass, styleclass, age):\n            self.makeclass = makeclass\n            self.styleclass = styleclass\n            self.make = self.makeclass()\n            self.style = self.styleclass()\n            self.new = carsales.New()\n            self.resale = carsales.Resale()\n            self.age = age\n        def pipeline(self):\n            print('*********ABC Car Agency - Catalogue***********')\n            self.make.print_catalogue()\n            print('\\n')\n            self.style.print_catalogue()\n            print('\\n')\n            print('New Car Price : ' + str(self.new.calculate_price(self.makeclass)))\n            print('Resale Price : ' + str(self.resale.calculate_price(self.makeclass, self.age)))\n    ```", "```py\n    def run_facade(makeclass, styleclass, age):\n        queue = Queue(makeclass, styleclass, age)\n        queue.pipeline()\n    ```", "```py\n    run_facade(carsales.AlfaRomero1, carsales.Hatchback28, 3)\n    ```", "```py\n*********ABC Car Agency - Catalogue***********\nFuel Type :  Gas\nAspiration :  Std\nNum Of Door :  Two\nDrive Wheels :  Rwd\nWheel Base :  94.5\nLength :  171.2\nWidth :  65.5\nHeight :  52.4\nCurb Weight :  2823\nFuel System :  Mpfi\nCity Mpg :  19\nHighway Mpg :  26\nEngine Location :  Front\nEngine Type :  Ohc\nNum Of Cylinders :  Four\nEngine Size :  97\nBore :  3.15\nStroke :  3.29\nCompression Ratio :  9.4\nHorse Power :  69\nPeak Rpm :  5200\nNew Car Price : 16500.0\nResale Price : 9075.0\n```", "```py\n    run_facade(carsales.Mitsubishi24, carsales.Sedan16, 5)\n    ```", "```py\n*********ABC Car Agency - Catalogue***********\nFuel Type :  Gas\nAspiration :  Std\nNum Of Door :  Two\nDrive Wheels :  Fwd\nWheel Base :  93.7\nLength :  157.3\nWidth :  64.4\nHeight :  50.8\nCurb Weight :  1918\nFuel System :  2Bbl\nCity Mpg :  37\nHighway Mpg :  41\nEngine Location :  Front\nEngine Type :  Dohc\nNum Of Cylinders :  Six\nEngine Size :  258\nBore :  3.63\nStroke :  4.17\nCompression Ratio :  8.1\nHorse Power :  176\nPeak Rpm :  4750\nNew Car Price : 5389.0\nResale Price : 1347.25\n```"]