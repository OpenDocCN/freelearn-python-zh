- en: 'Chapter 7: Creating a Real-Time Blog Using Only Django'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 6*](B18321_06_ePub.xhtml#_idTextAnchor139), *Creating SPAs on the
    Backends*, we learned essential features for setting up an SPA using HTML over
    WebSockets, such as changing pages, components, and sessions. We even went a step
    further by creating a server-side rendering system for each page so that search
    engines can index all content – a feature that didn’t require much effort as we
    are inside Django.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have the skills and maturity to make applications with all the features
    that SPA development entails. Now is the time! We will unify all the knowledge
    acquired in the creation of a perfectly prepared blog. Undoubtedly, this is an
    excellent exercise regardless of the language or framework that we want to assimilate;
    it encompasses all the basic tasks of any web development: querying, filtering,
    and adding to a database (search engine and comments), generating HTML from results
    (a list of articles and an individual page), use of views (SSR), routing (static
    pages), processing and validating forms (incorporating a new comment), and finally,
    pagination.'
  prefs: []
  type: TYPE_NORMAL
- en: This is an exam to prove to the world, and to yourself, that you have the basic
    knowledge in the subject you are learning. It can even be a good technical test.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the creation of the blog, we will be doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating models for the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating fake articles and comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing of articles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating between articles with pagination
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an article search engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a static page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving between pages and generating a browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing an individual page per article
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a list of comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offering an **Really Simple Syndication** (**RSS**) feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During the chapter, we will work in small milestones, following an order that
    allows us to incorporate each element organically, without jumping from one feature
    to another until it is finished. You can find the code for each of the features
    (in the preceding list) that we will be implementing separately.
  prefs: []
  type: TYPE_NORMAL
- en: In order not to extend the example too much, we will start with a code base
    that we have used in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the code of the different sections can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-7](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-7)'
  prefs: []
  type: TYPE_NORMAL
- en: 'As in other examples, I will start from the template that we built in [*Chapter
    4*](B18321_04_ePub.xhtml#_idTextAnchor090), *Working with the Database*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template)'
  prefs: []
  type: TYPE_NORMAL
- en: If you find some small differences, it is because I have made some minor adjustments.
    For example, I have named the project `blog`, the app `website`, and changed the
    path to `http://blog.localhost`, although, as always, you are free to name each
    element freely.
  prefs: []
  type: TYPE_NORMAL
- en: Creating models for the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start by building two tables in the database: `Post`, which will contain
    the articles, and `Comment`, so that readers can leave their opinions next to
    the articles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app/website/models.py`, add the following database structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s look at the properties of `Post`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`slug`: We will use the title of the article to differentiate the routes. For
    example, if it is titled `Penguins have just conquered the world`, its final path
    will be `http://blog.localhost/penguins-have-just-conquered-the-world`. With this
    property, we get the title ready to be used for different purposes, such as feeding
    other properties or searching for the ID of an article.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slug
  prefs: []
  type: TYPE_NORMAL
- en: Slug is a format used in URLs to make them more readable, where spaces are replaced
    by single dashes and text is converted to lowercase. In areas such as SEO, it
    is used to explain the content of the page.
  prefs: []
  type: TYPE_NORMAL
- en: '`summary`: When we list the articles, we will show a small portion of the original
    article. With this property, we limit the portion of the article shown to 100
    characters, plus we add some nice dots at the end of the sentence. It’s not perfect,
    as it counts spaces and doesn’t check the initial length, but it’s certainly sufficient
    for the purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_absolute_url`: Through the paths defined in `urls.py`, we will build the
    hyperlinks for each article. Why? We will move dynamically. They are for the RSS
    feed, for example, or a future site map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next step, as we have done in each activity, is to enter the Django container
    terminal and execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The database is ready. However, without data, it is not practical. As on other
    occasions, we will create fake content that simulates the final appearance of
    the blog.
  prefs: []
  type: TYPE_NORMAL
- en: Generating fake articles and comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After defining the database from the models, we are going to generate random
    data that we will use to work more comfortably.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create `make_fake_data.py` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The code we are going to run will generate random information. The steps we
    follow are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We delete all the articles, or `Post`. The first time we run it, there will
    be nothing to delete, but thereafter, it will delete everything it finds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We generate 30 new articles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We generate 150 comments, or `Comment`, and assign them to articles randomly.
    This way, they will be distributed irregularly, with cases where there are articles
    with no comments and others with a large number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, in the Django container terminal, we execute the script we have just
    built:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Our database is populated with information. Now, we are going to focus on the
    logic of the blog – for example, listing all the articles in HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Listing of articles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have prepared the database through the models and by including fake information
    with the necessary elements, enabling us to focus on how the customer is going
    to visualize the content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before building the different pages, we will need a base for all templates.
    In `app/website/templates/base.html`, we include the main layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: We have included areas to redraw elements such as the browser, with `#nav`,
    and the main content of future pages, with `#main`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to create the welcome page of the blog where we will list
    the articles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step will be creating an HTML template to generate the list of the
    different blog articles, which will be fed by a future database query. In `app/website/templates/pages/all_posts.html`,
    we add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: We have separated the list of articles in a component hosted in `app/website/templates/components/all_posts/list.html`
    because it will be useful when we do the pagination.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following code, let’s show the list of all the articles that will
    be displayed inside `#all-posts` by means of `include`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'At the moment, the hyperlink to go to the individual page of the article does
    not work. When we have the right template, we will come back to give it the logic
    with JavaScript. However, we have already prepared the dataset for the dynamic
    page change: the name of the page to load (`data-target`) and its ID (`data-id`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app/website/views.py`, we create the following view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: We will only list the first five items; this is the number of items we will
    display per page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `blog/urls.py`, we assign the root of the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'When you pull up Docker, via `docker-compose.yaml`, and go to `http://blog.localhost`,
    you will find the articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Displays the first five articles at the root of the blog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.01_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Displays the first five articles at the root of the blog
  prefs: []
  type: TYPE_NORMAL
- en: What if I want to see more articles? We can’t, although we will resolve this
    in the next section. The next challenge will be to solve the problem by pagination,
    or rendering the next five posts continuously.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating between articles with pagination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are able to show visitors the latest articles, but they are unable to view
    previous posts. We are going to include a button that allows us to render other
    articles on the welcome page, and we will incorporate them in blocks of five.
  prefs: []
  type: TYPE_NORMAL
- en: 'We add a component with the button. In `app/website/templates/components/all_posts/_button_paginator.html`,
    add the following HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: We will only show the button if we are not on the last page, which we will manage
    with the `is_last_page` variable. In addition, we will include a dataset with
    the `next_page` variable to tell the backend the next page we want to render.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component is embedded in `app/website/templates/components/all_posts/list.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: After designing the visual part, we will focus on the usual flow to give the
    logic.
  prefs: []
  type: TYPE_NORMAL
- en: We go to `static/js/index.js` to capture the click event and send to the Consumer
    the `"Add next posts"` action with the number of the page we want to render.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have omitted the lines that are already present in the template to simplify
    the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: We add to the Consumer, hosted in `app/website/consumers.py`, the appropriate
    call to action if we receive `"Add next posts"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have done on several occasions, we will create a link in the Consumer
    class between the action required by the frontend and the function hosted in `actions.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: 'In `app/website/actions.py`, we declare the `add_next_posts` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: 'We are undertaking a number of important actions:'
  prefs: []
  type: TYPE_NORMAL
- en: We’re saving the page to display. If it is not provided, we assume it is the
    first one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’re calculating the initial and final cut-off of the results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’re carrying out the query.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’re calculating what the next page will be – the current page plus one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’re checking whether we are on the last page. It will be important to know
    whether we should print the paging button or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’re rendering new articles and adding them to `#all-posts`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’re redrawing the paging button, as it needs to store what the next page is
    and hide it if there are no more articles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is only one detail left. Give the initial parameters to the view (`app/website/views.py`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now start rendering new results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – The pagination of articles'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.02_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – The pagination of articles
  prefs: []
  type: TYPE_NORMAL
- en: The experience would be more pleasant with a nice animation or delay; it is
    so fast loading that a visitor may not notice the new elements. We can leave an
    issue to the future web designer. Our task is not finished yet – what if the visitor
    is looking for a specific article? The pagination becomes cumbersome; everything
    would be easier with a simple search engine.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an article search engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Offering visitors pagination is a good idea to optimize resources and offer
    controlled navigation. In addition, including a search engine for articles will
    provide complete exploration. That is why we are going to integrate a text field
    to find articles by title.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app/website/forms.py`, we incorporate the following form, which will only
    have one field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need a component to render the form we just defined. We create the
    `app/website/templates/components/all_posts/form_search.html` file and add the
    `search` field inside a form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: 'In the article listing page, `app/website/templates/pages/all_posts.html`,
    we include the `search` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: 'Don’t forget to include it in the view (`app/website/views.py`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: 'We will see the form when the page loads, although for the moment it is decorative,
    as there is no logic behind it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Displaying the browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.03_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Displaying the browser
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s go to `static/js/index.js` to make it work. We’ll capture the form’s
    submit event and send the Consumer the `"Search"` action with the text to search
    for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: 'The frontend has already sent us the request and the information we need. Now,
    the Consumer (`app/website/consumers.py`) should execute the appropriate action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the action (`app/website/actions.py`), we include the `search` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the code is simple. All we do is filter the database by getting
    all articles containing `data["search"]`, ignoring uppercase or lowercase text
    (`icontains`). We also limit the results to five articles.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s it. We can search and dynamically display the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Shows the results of a search for the word "why"'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.04_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Shows the results of a search for the word "why"
  prefs: []
  type: TYPE_NORMAL
- en: If you search by leaving the string empty, you will return to the previous state
    where the items are listed without filtering.
  prefs: []
  type: TYPE_NORMAL
- en: The next point to discuss is the navigation between pages. For this, we will
    create a static page, where we can describe the blog or or display the **About
    us** page, and a navigator to move between the existing pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a static page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are in a situation where we need to grow with new pages to split logic and
    HTML structures. The first step will be to create a static page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create `app/website/templates/pages/about_us.html` with simple text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: 'We edit the views (`app/website/views.py`), including `about`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we give it a path in `blog/urls.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now go to `http://blog.localhost/about-us/` to view the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Rendering the About us page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.05_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Rendering the About us page
  prefs: []
  type: TYPE_NORMAL
- en: 'I totally agree with you; this section hasn’t been very... I plead guilty!
    Creating a static page is the most basic thing we can do in Django. Now, it’s
    time for the hard part: dynamically scrolling between pages and creating a browser.'
  prefs: []
  type: TYPE_NORMAL
- en: Moving between pages and generating a browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visitors need to navigate between different pages; a simple button structure
    and corresponding logic for loading the appropriate templates will need to be
    incorporated.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to create a browser to dynamically jump between pages or, in other
    words, request the backend to render the page in the right place:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create a component with hyperlinks. We create a file in
    `app/website/templates/components/_nav.html` with the following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`The active_nav` variable is worth mentioning. We have defined it in each view
    for this particular component. It will add a CSS class that visually marks where
    the visitor is. We also include the `target` dataset to know where each hyperlink
    should point to.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to capture the events of the hyperlinks in JavaScript whose
    objective is to change the page, both those present in the browser and the list
    of articles:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We add the following in `static/js/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the hyperlinks are clicked, a request will be made to the Consumer to change
    the page by sending the name of the template and, if it exists, the ID of the
    post.
  prefs: []
  type: TYPE_NORMAL
- en: 'We include in the Consumer (`app/website/consumers.py`) the `send_page` call
    when we receive `"Change page"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In action, we edit the `send_page` function, as we have done in previous projects,
    by adding the template context template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is practically the same as the view in charge of displaying all items.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now move between pages and visualize where we are with the CSS styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – The browser shows that we are in All posts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.06_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – The browser shows that we are in All posts
  prefs: []
  type: TYPE_NORMAL
- en: We manage all cases. The visitor can navigate from any type of page, from a
    dynamic page to another where the content is static.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – The browser shows that we are in About us'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.07_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – The browser shows that we are in About us
  prefs: []
  type: TYPE_NORMAL
- en: However, the dynamic page showing the full text of the article and comments
    is still missing. By having a system for navigation, it will be relatively easy
    to incorporate it.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an individual page per article
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have the opportunity to create a page that renders an entire article, which
    will be the basis for the entire commenting system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the template in `app/website/templates/pages/single_post.html` with
    basic but sufficient HTML for the minimum `Post` fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are going to focus on server-side rendering by creating the view and
    its path.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app/website/views.py`, we include the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: Why use the `filter` function? As we have decided that the URL will be formed
    by a slug, when we receive the request to render the view, we will need to look
    for the post with the `slug` property. Django does not allow you to perform a
    query through a property. In other words, we will have to perform manual filtering.
  prefs: []
  type: TYPE_NORMAL
- en: 'We incorporate the route in `blog/urls.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to incorporate a context, or a set of variables needed to render
    the new HTML, when the frontend request to switch pages. In `app/website/actions.py`,
    we add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: 'At this moment, from the list of articles, we will be able to load the single
    template. Also, the path will change with the URL structure of the slug:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – The individual article page is rendered'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.08_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – The individual article page is rendered
  prefs: []
  type: TYPE_NORMAL
- en: However, the page is not finished; we still need to list the comments at the
    bottom of the template and include a form to add new ones.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a list of comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The blog is functional: we can list articles, navigate between pages, paginate,
    and perform a search. But an essential element is still missing: comments. That’s
    why we are going to print all the comments that belong to an article.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by creating a template that lists all the comments. We add a new component
    in `app/website/templates/components/_list_of_comments.html` with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: 'This, in turn, will need the `app/website/templates/components/_single_comment.html`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: 'In the views (`app/website/views.py`), we make a query with all the comments
    that belong to the post we are viewing and send it to the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: We can now display a list of comments on the article.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – All comments are rendered on the article page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.09_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – All comments are rendered on the article page
  prefs: []
  type: TYPE_NORMAL
- en: 'However, to also display comments when we dynamically change pages, we must
    include the comment variable inside `send_page` in actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now incorporate a form for visitors to add comments. But that’s not
    all: we have generated random information, article listings, a single page per
    article, a system for dynamically switching between pages, a browser, a search
    engine, and a server-side rendering system. At the moment, we have a very interesting
    blog. Next, we’ll see how to add new comments.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding new comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If all the comments were written by us, it would be a bit immoral. We’re going
    to incorporate a form so that anyone reading the article can leave a personal
    opinion. If you don’t like what they say, you can always "manage" it with Django’s
    admin panel. But for now, let’s not be tricky; let’s focus on the more technical
    side.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we add the following form in `app/website/forms.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: 'There is an important difference with respect to the search engine form: we
    use `ModelForm`. Now we can create a new comment from the form object itself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the views (`app/website/views.py`), we import and include the form object
    in the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in `app/website/templates/pages/single_post.html`, we render the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: 'By clicking on any item, you will be able to view the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Render the form to add new comments'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.10_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.10 – Render the form to add new comments
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to process the form from the frontend. We capture the submit
    event and when it fires, we will get the three fields: author, content, and the
    article ID. We will send a request to execute the `"Add comment"` action.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We add in `static/js/index.js` the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Consumer, `app/website/consumers.py`, we call the `add_comment` function
    inside actions if we receive `"Add comment"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: 'To finish the flow, in actions (`app/website/actions.py`), we create the function
    that invokes the Consumer – `add_comment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: 'We are carrying out a set of actions that must be in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: We obtain the post from the ID received.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We include the post inside the dictionary with all the information. We need
    to add the object to perform the validation of the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the dictionary, we initialize the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We validate that the fields are correct. If they are not, the rest of the code
    will simply be ignored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If they are correct, we create the new comment in the database with `form.save()`.
    The form knows which model to create because, internally, it is `ModelForm`, and
    we tell it in `forms.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We send to all connected clients the HTML of the new comment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Not only is the comment validated and saved, but it is also sent to all readers
    of the article in real time. However, you should be aware that we are not giving
    feedback in case the fields are not valid. Simply, until all fields are filled
    in, the information will not be processed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We could stop here, but there is still one detail that I think is indispensable
    if we create a blog: an RSS feed so that our future visitors can be informed of
    the latest news.'
  prefs: []
  type: TYPE_NORMAL
- en: Offering an RSS feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tech blogs are often consumed by robots, in particular by feed readers. If we
    want to build a feed in Django, it’s really convenient. Django incorporates a
    framework called **Syndication** that automates tasks such as dynamic generation
    of XML, fields, and caching.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app/website/feed.py`, we add the following class that inherits from `Feed`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE550]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE555]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE557]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE558]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE559]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE560]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we include its path in `blog/urls.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE561]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE562]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE563]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE564]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE565]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE566]'
  prefs: []
  type: TYPE_PRE
- en: You can give your favorite feed reader client the `http://blog.localhost/feed/`
    path. If you enter it directly from the browser, an XML file will be downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We could consider this chapter as a consummation of all the skills acquired
    throughout the book. Not only are we able to incorporate a WebSockets server into
    Django, through channels; we now also have techniques to create a real-time, single-page
    application using Python. We now have a deep knowledge that matches the results
    we can achieve with other similar projects, such as LiveView in Phoenix (the most
    popular framework in the Elixir ecosystem), StimulusReflex, Turbo, Action Cable,
    or Hotwire in Ruby on Rails.
  prefs: []
  type: TYPE_NORMAL
- en: If we are looking to abstract part of the process, there are some frameworks
    within Django that can be useful, such as Django Sockpuppet or Django Reactor.
    Unfortunately, neither of them is receiving updates, although it is a great idea
    to find out how they are constructed in order to further expand our knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: Although the backend is covered, it is still cumbersome to work with the frontend.
    Events have to be redeclared on every draw, and there are tasks that we repeat
    recurrently on every element we want to manage. We need to simplify the process.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [*Chapter 8*](B18321_08_ePub.xhtml#_idTextAnchor173), *Simplifying
    the Frontend*, we will use a JavaScript event library specially designed to rebuild
    the DOM without altering the way it works.
  prefs: []
  type: TYPE_NORMAL
