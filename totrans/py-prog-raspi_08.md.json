["```py\n    >>> import cv2\n >>> cv2.__version__\n '3.0.0'\n\n```", "```py\nimport cv2 \n\nimg = cv2.imread('/home/pi/screenshot.jpg',cv2.IMREAD_GRAYSCALE)\n\n```", "```py\ncv2.imshow('image',img)\n\n```", "```py\ncv2.waitKey(0)\n\n```", "```py\ncv2.destroyAllWindows()\n\n```", "```py\nimport cv2\n\nimg = cv2.imread('/home/pi/screenshot.jpg',cv2.IMREAD_GRAYSCALE)\ncv2.imshow('image',img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n\n```", "```py\n       raspistill -o /home/pi/Desktop/test.jpg\n\n```", "```py\n       pip3 install picamera\n\n```", "```py\n       with PiCamera() as camera: \n       camera.vflip = True\n\n```", "```py\n       camera.start_preview()\n\n```", "```py\n       sleep(10) \n       camera.capture(\"/home/pi/Desktop/desktop_shot.jpg\") \n       camera.stop_preview()\n\n```", "```py\n       from picamera import PiCamera \n       from time import sleep\n\n       if __name__ == \"__main__\": \n         with PiCamera() as camera: \n           camera.vflip = True \n           camera.start_preview() \n           sleep(10) \n           camera.capture(\"/home/pi/Desktop/desktop_shot.jpg\") \n           camera.stop_preview()\n\n```", "```py\n       img = cv2.imread(\"/home/pi/Desktop/desktop_shot.jpg\",\n       cv2.IMREAD_GRAYSCALE)\n\n```", "```py\n       cv2.imshow(\"image\", img) \n       cv2.waitKey(0) \n       cv2.destroyAllWindows()\n\n```", "```py\n       pip3 install requests \n\n```", "```py\n       import requests \n\n       if __name__ == \"__main__\": \n         url = 'https://api.wit.ai/speech?v=20161002' \n         headers = {\"Authorization\": \"Bearer $TOKEN\", \n                    \"Content-Type\": \"audio/wav\"}\n\n```", "```py\n       files = open('sp02.wav', 'rb') \n       response = requests.post(url, headers=headers, data=files) \n       print(response.status_code) \n       print(response.text)\n\n```", "```py\n       #!/usr/bin/python3 \n\n       import requests \n\n       if __name__ == \"__main__\": \n         url = 'https://api.wit.ai/speech?v=20161002' \n         headers = {\"Authorization\": \"Bearer $TOKEN\", \n                    \"Content-Type\": \"audio/wav\"} \n         files = open('sp02.wav', 'rb') \n         response = requests.post(url, headers=headers, data=files) \n         print(response.status_code) \n         print(response.text)\n\n```", "```py\n200\n{\n  \"msg_id\" : \"fae9cc3a-f7ed-4831-87ba-6a08e95f515b\",\n  \"_text\" : \"he knew the the great young actress\",\n  \"outcomes\" : [ {\n    \"_text\" : \"he knew the the great young actress\",\n    \"confidence\" : 0.678,\n    \"intent\" : \"DataQuery\",\n    \"entities\" : {\n      \"value\" : [ {\n        \"confidence\" : 0.7145905790744499,\n        \"type\" : \"value\",\n        \"value\" : \"he\",\n        \"suggested\" : true\n      }, {\n        \"confidence\" : 0.5699616515542044,\n        \"type\" : \"value\",\n        \"value\" : \"the\",\n        \"suggested\" : true\n      }, {\n        \"confidence\" : 0.5981701138805214,\n        \"type\" : \"value\",\n        \"value\" : \"great\",\n        \"suggested\" : true\n      }, {\n        \"confidence\" : 0.8999612482250062,\n        \"type\" : \"value\",\n        \"value\" : \"actress\",\n        \"suggested\" : true\n      } ]\n    }\n  } ],\n  \"WARNING\" : \"DEPRECATED\"\n}\n\n```", "```py\n       import requests \n\n       BIKE_URL = http://feeds.bayareabikeshare.com/stations \n       /stations.json \n\n       # fetch the bike share information \n       response = requests.get(BIKE_URL) \n       parsed_data = response.json()\n\n```", "```py\n              station_list = parsed_data['stationBeanList'] \n              for station in station_list: \n                if station['id'] == 65 and \n                   station['availableBikes'] < 2: \n                  print(\"The available bikes is %d\" % station\n                  ['availableBikes'])\n\n```", "```py\n       IFTTT_URL = \"https://maker.ifttt.com/trigger/mobile_notify/ \n       with/key/$KEY\"\n\n```", "```py\n       for station in station_list: \n         if station['id'] == 65 and \n            station['availableBikes'] < 3: \n           print(\"The available bikes is %d\" % \n           station['availableBikes']) \n           payload = {\"value1\": station['availableBikes']} \n           response = requests.post(IFTTT_URL, json=payload) \n           if response.status_code == 200: \n             print(\"Notification successfully triggered\")\n\n```", "```py\n       payload = {\"value1\": station['availableBikes']}\n\n```", "```py\n       #!/usr/bin/python3 \n\n       import requests \n       import datetime \n\n       BIKE_URL = \"http://feeds.bayareabikeshare.com/stations/\n       stations.json\" \n       # find your key from ifttt \n       IFTTT_URL = \"https://maker.ifttt.com/trigger/mobile_notify/\n       with/key/$KEY\" \n\n       if __name__ == \"__main__\": \n         # fetch the bike share information \n         response = requests.get(BIKE_URL) \n         parsed_data = response.json() \n         station_list = parsed_data['stationBeanList'] \n         for station in station_list: \n           if station['id'] == 65 and \n              station['availableBikes'] < 10: \n             print(\"The available bikes is %d\" % station\n             ['availableBikes']) \n  payload = {\"value1\": station['availableBikes']} \n             response = requests.post(IFTTT_URL, json=payload) \n             if response.status_code == 200: \n               print(\"Notification successfully triggered\")\n\n```", "```py\n       git clone https://github.com/wordnik/wordnik-python3.git\n cd wordnik-python3/\n sudo python3 setup.py install\n\n```", "```py\n       # sign up for an API key \n       API_KEY = 'API_KEY' \n       apiUrl = 'http://api.wordnik.com/v4' \n       client = swagger.ApiClient(API_KEY, apiUrl) \n       wordsApi = WordsApi.WordsApi(client)\n\n```", "```py\n       example = wordsApi.getWordOfTheDay()\n\n```", "```py\n       print(\"The word of the day is %s\" % example.word) \n       print(\"The definition is %s\" %example.definitions[0].text)\n\n```", "```py\n       #!/usr/bin/python3 \n\n       from wordnik import * \n\n       # sign up for an API key \n       API_KEY = 'API_KEY' \n       apiUrl = 'http://api.wordnik.com/v4' \n\n       if __name__ == \"__main__\": \n         client = swagger.ApiClient(API_KEY, apiUrl) \n         wordsApi = WordsApi.WordsApi(client) \n         example = wordsApi.getWordOfTheDay() \n         print(\"The word of the day is %s\" % example.word) \n         print(\"The definition is %s\" %example.definitions[0].text)\n\n```", "```py\n       The word of the day is transpare\n The definition is To be, or cause to be, transparent; to appear,\n       or cause to appear, or be seen, through something.\n\n```", "```py\n       logging.basicConfig(format='%(asctime)s : %(levelname)s :\n       %(message)s', filename='log_file.log', level=logging.INFO)\n\n```", "```py\n       format='%(asctime)s : %(levelname)s : %(message)s'\n\n```", "```py\n       2016-10-25 20:28:07,940 : INFO : Starting new HTTPS\n       connection (1):\n       maker.ifttt.com\n\n```", "```py\n       response = requests.post(IFTTT_URL, json=payload) \n       if response.status_code == 200: \n         logging.info(\"Notification successfully triggered\") \n       else: \n         logging.error(\"POST request failed\")\n\n```", "```py\n       #!/usr/bin/python3 \n\n       import requests \n       import logging \n\n       # find your key from ifttt \n       IFTTT_URL = \"https://maker.ifttt.com/trigger/rf_trigger/\n       with/key/$key\" \n\n       if __name__ == \"__main__\": \n         # fetch the bike share information \n         logging.basicConfig(format='%(asctime)s : %(levelname)s\n         : %(message)s', filename='log_file.log', level=logging.INFO) \n         payload = {\"value1\": \"Sample_1\", \"value2\": \"Sample_2\"} \n         response = requests.post(IFTTT_URL, json=payload) \n         if response.status_code == 200: \n           logging.info(\"Notification successfully triggered\") \n         else: \n           logging.error(\"POST request failed\")\n\n```", "```py\ndef sensor_processing(string): \n  for num in range(5): \n    time.sleep(5) \n    print(\"%s: Iteration: %d\" %(string, num))\n\n```", "```py\nthread_1 = threading.Thread(target=sensor_processing, args=(\"Sensor 1\",)) \nthread_1.start() \n\nthread_2 = threading.Thread(target=sensor_processing, args=(\"Sensor 2\",)) \nthread_2.start() \n\nthread_3 = threading.Thread(target=sensor_processing, args=(\"Sensor 3\",)) \nthread_3.start()\n\n```", "```py\nimport threading \nimport time \n\ndef sensor_processing(string): \n  for num in range(5): \n    time.sleep(5) \n    print(\"%s: Iteration: %d\" %(string, num)) \n\nif __name__ == '__main__': \n  thread_1 = threading.Thread(target=sensor_processing, args=(\"Sensor 1\",)) \n  thread_1.start() \n\n  thread_2 = threading.Thread(target=sensor_processing, args=(\"Sensor 2\",)) \n  thread_2.start() \n\n  thread_3 = threading.Thread(target=sensor_processing, args=(\"Sensor 3\",)) \n  thread_3.start()\n\n```", "```py\nThread 1: Iteration: 0 \nThread 2: Iteration: 0 \nThread 3: Iteration: 0 \nThread 2: Iteration: 1 \nThread 1: Iteration: 1 \nThread 3: Iteration: 1 \nThread 2: Iteration: 2 \nThread 1: Iteration: 2 \nThread 3: Iteration: 2 \nThread 1: Iteration: 3 \nThread 2: Iteration: 3 \nThread 3: Iteration: 3 \nThread 1: Iteration: 4 \nThread 2: Iteration: 4 \nThread 3: Iteration: 4\n\n```", "```py\n    pip3 install pep8\n\n```", "```py\n    pep8 opencv_test.py\n\n```", "```py\n    opencv_test.py:5:50: E231 missing whitespace after ','\n opencv_test.py:6:19: E231 missing whitespace after ','\n\n```"]