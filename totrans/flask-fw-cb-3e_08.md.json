["```py\n    from wtforms import BooleanField\n    ```", "```py\n    class User(db.Model):\n    ```", "```py\n        id = db.Column(db.Integer, primary_key=True)\n    ```", "```py\n        username = db.Column(db.String(100))\n    ```", "```py\n        pwdhash = db.Column(db.String())\n    ```", "```py\n        admin = db.Column(db.Boolean())\n    ```", "```py\n        def __init__(self, username, password,\n    ```", "```py\n          admin=False):\n    ```", "```py\n            self.username = username\n    ```", "```py\n            self.pwdhash =\n    ```", "```py\n              generate_password_hash(password)\n    ```", "```py\n            self.admin = admin\n    ```", "```py\n        def is_admin(self):\n    ```", "```py\n            return self.admin\n    ```", "```py\n    class AdminUserCreateForm(FlaskForm):\n    ```", "```py\n        username = StringField('Username',\n    ```", "```py\n          [InputRequired()])\n    ```", "```py\n        password = PasswordField('Password',\n    ```", "```py\n          [InputRequired()])\n    ```", "```py\n        admin = BooleanField('Is Admin ?')\n    ```", "```py\n    class AdminUserUpdateForm(FlaskForm):\n    ```", "```py\n        username = StringField('Username',\n    ```", "```py\n          [InputRequired()])\n    ```", "```py\n        admin = BooleanField('Is Admin ?')\n    ```", "```py\n    from functools import wraps\n    ```", "```py\n    from flask import abort\n    ```", "```py\n    from my_app.auth.models import AdminUserCreateForm,\n    ```", "```py\n      AdminUserUpdateForm\n    ```", "```py\n    def admin_login_required(func):\n    ```", "```py\n        @wraps(func)\n    ```", "```py\n        def decorated_view(*args, **kwargs):\n    ```", "```py\n            if not current_user.is_admin():\n    ```", "```py\n                return abort(403)\n    ```", "```py\n            return func(*args, **kwargs)\n    ```", "```py\n        return decorated_view\n    ```", "```py\n    @auth.route('/admin')\n    ```", "```py\n    @login_required\n    ```", "```py\n    @admin_login_required\n    ```", "```py\n    def home_admin():\n    ```", "```py\n        return render_template('admin-home.html')\n    ```", "```py\n    @auth.route('/admin/users-list')\n    ```", "```py\n    @login_required\n    ```", "```py\n    @admin_login_required\n    ```", "```py\n    def users_list_admin():\n    ```", "```py\n        users = User.query.all()\n    ```", "```py\n        return render_template('users-list-admin.html',\n    ```", "```py\n          users=users)\n    ```", "```py\n    @auth.route('/admin/create-user', methods=['GET',\n    ```", "```py\n      'POST'])\n    ```", "```py\n    @login_required\n    ```", "```py\n    @admin_login_required\n    ```", "```py\n    def user_create_admin():\n    ```", "```py\n        form = AdminUserCreateForm()\n    ```", "```py\n        if form.validate_on_submit():\n    ```", "```py\n            username = form.username.data\n    ```", "```py\n            password = form.password.data\n    ```", "```py\n            admin = form.admin.data\n    ```", "```py\n            existing_username = User.query.filter_by\n    ```", "```py\n              (username=username).first()\n    ```", "```py\n            if existing_username:\n    ```", "```py\n                flash(\n    ```", "```py\n                    'This username has been already taken.\n    ```", "```py\n                      Try another one.',\n    ```", "```py\n                    'warning'\n    ```", "```py\n                )\n    ```", "```py\n                return render_template('register.html',\n    ```", "```py\n                  form=form)\n    ```", "```py\n            user = User(username, password, admin)\n    ```", "```py\n            db.session.add(user)\n    ```", "```py\n            db.session.commit()\n    ```", "```py\n            flash('New User Created.', 'info')\n    ```", "```py\n            return\n    ```", "```py\n              redirect(url_for('auth.users_list_admin'))\n    ```", "```py\n        if form.errors:\n    ```", "```py\n            flash(form.errors, 'danger')\n    ```", "```py\n        return render_template('user-create-admin.html',\n    ```", "```py\n          form=form)\n    ```", "```py\n@auth.route('/admin/update-user/<id>', methods=['GET', 'POST'])\n@login_required\n@admin_login_required\ndef user_update_admin(id):\n    user = User.query.get(id)\n    form = AdminUserUpdateForm(\n        username=user.username,\n        admin=user.admin\n    )\n    if form.validate_on_submit():\n        username = form.username.data\n        admin = form.admin.data\n        User.query.filter_by(id=id).update({\n            'username': username,\n            'admin': admin,\n        })\n        db.session.commit()\n        flash('User Updated.', 'info')\n        return\n          redirect(url_for('auth.users_list_admin'))\n    if form.errors:\n        flash(form.errors, 'danger')\n    return render_template('user-update-admin.html', form=form, \n      user=user)\n```", "```py\n@auth.route('/admin/delete-user/<id>')\n@login_required\n@admin_login_required\ndef user_delete_admin(id):\n    user = User.query.get(id)\n    db.session.delete(user)\n    db.session.commit()\n    flash('User Deleted.', 'info')\n    return redirect(url_for('auth.users_list_admin'))\n```", "```py\n$ pip install Flask-Admin\n```", "```py\nfrom flask_admin import Admin\napp = Flask(__name__)\n# Add any other application configurations\nadmin = Admin(app)\n```", "```py\nfrom flask_admin import BaseView, expose\nclass HelloView(BaseView):\n    @expose('/')\n    def index(self):\n        return self.render('some-template.html')\n```", "```py\nimport my_app.auth.views as views\nadmin.add_view(views.HelloView(name='Hello'))\n```", "```py\n    def is_accessible(self):\n        return current_user.is_authenticated and \\\n            current_user.is_admin()\n```", "```py\nfrom flask_admin import BaseView, expose, AdminIndexView\nclass MyAdminIndexView(AdminIndexView):\n    def is_accessible(self):\n        return current_user.is_authenticated and\n          current_user.is_admin()\n```", "```py\nadmin = Admin(app, index_view=views.MyAdminIndexView())\n```", "```py\n    from flask_admin.contrib.sqla import ModelView\n    ```", "```py\n    # Other admin configuration as shown in last recipe\n    ```", "```py\n    admin.add_view(ModelView(views.User, db.session))\n    ```", "```py\n    from wtforms import PasswordField\n    ```", "```py\n    from flask_admin.contrib.sqla import ModelView\n    ```", "```py\n    class UserAdminView(ModelView):\n    ```", "```py\n        column_searchable_list = ('username',)\n    ```", "```py\n        column_sortable_list = ('username', 'admin')\n    ```", "```py\n        column_exclude_list = ('pwdhash',)\n    ```", "```py\n        form_excluded_columns = ('pwdhash',)\n    ```", "```py\n        form_edit_rules = ('username', 'admin')\n    ```", "```py\n        def is_accessible(self):\n    ```", "```py\n            return current_user.is_authenticated and\n    ```", "```py\n              current_user.is_admin()\n    ```", "```py\n        def scaffold_form(self):\n    ```", "```py\n            form_class = super(UserAdminView,\n    ```", "```py\n              self).scaffold_form()\n    ```", "```py\n            form_class.password =\n    ```", "```py\n              PasswordField('Password')\n    ```", "```py\n            return form_class\n    ```", "```py\n        def create_model(self, form):\n    ```", "```py\n            model = self.model(\n    ```", "```py\n                form.username.data, form.password.data,\n    ```", "```py\n                  form.admin.data\n    ```", "```py\n            )\n    ```", "```py\n            form.populate_obj(model)\n    ```", "```py\n            self.session.add(model)\n    ```", "```py\n            self._on_model_change(form, model, True)\n    ```", "```py\n            self.session.commit()\n    ```", "```py\n    admin.add_view(views.UserAdminView(views.User,\n    ```", "```py\n      db.session))\n    ```", "```py\n    from flask_admin.form import rules\n    ```", "```py\n    form_edit_rules = (\n    ```", "```py\n            'username', 'admin',\n    ```", "```py\n            rules.Header('Reset Password'),\n    ```", "```py\n            'new_password', 'confirm'\n    ```", "```py\n        )\n    ```", "```py\n        form_create_rules = (\n    ```", "```py\n            'username', 'admin', 'notes', 'password'\n    ```", "```py\n        )\n    ```", "```py\n        def scaffold_form(self):\n    ```", "```py\n            form_class = super(UserAdminView,\n    ```", "```py\n              self).scaffold_form()\n    ```", "```py\n            form_class.password =\n    ```", "```py\n              PasswordField('Password')\n    ```", "```py\n            form_class.new_password = PasswordField('New\n    ```", "```py\n              Password')\n    ```", "```py\n            form_class.confirm = PasswordField('Confirm\n    ```", "```py\n              New Password')\n    ```", "```py\n            return form_class\n    ```", "```py\n        def update_model(self, form, model):\n    ```", "```py\n            form.populate_obj(model)\n    ```", "```py\n            if form.new_password.data:\n    ```", "```py\n                if form.new_password.data !=\n    ```", "```py\n                  form.confirm.data:\n    ```", "```py\n                    flash('Passwords must match')\n    ```", "```py\n                    return\n    ```", "```py\n                model.pwdhash = generate_password_hash(\n    ```", "```py\n                    form.new_password.data)\n    ```", "```py\n            self.session.add(model)\n    ```", "```py\n            self._on_model_change(form, model, False)\n    ```", "```py\n            self.session.commit()\n    ```", "```py\n    class User(db.Model):\n    ```", "```py\n        id = db.Column(db.Integer, primary_key=True)\n    ```", "```py\n        username = db.Column(db.String(100))\n    ```", "```py\n        pwdhash = db.Column(db.String())\n    ```", "```py\n        admin = db.Column(db.Boolean())\n    ```", "```py\n        notes = db.Column(db.UnicodeText)\n    ```", "```py\n        def __init__(self, username, password,\n    ```", "```py\n          admin=False, notes=''):\n    ```", "```py\n            self.username = username\n    ```", "```py\n            self.pwdhash =\n    ```", "```py\n              generate_password_hash(password)\n    ```", "```py\n            self.admin = admin\n    ```", "```py\n            self.notes = notes\n    ```", "```py\n    from wtforms import widgets, TextAreaField\n    ```", "```py\n    class CKTextAreaWidget(widgets.TextArea):\n    ```", "```py\n        def __call__(self, field, **kwargs):\n    ```", "```py\n            kwargs.setdefault('class_', 'ckeditor')\n    ```", "```py\n            return super(CKTextAreaWidget,\n    ```", "```py\n              self).__call__(field, **kwargs)\n    ```", "```py\n    class CKTextAreaField(TextAreaField):\n    ```", "```py\n        widget = CKTextAreaWidget()\n    ```", "```py\n        form_overrides = dict(notes=CKTextAreaField)\n    ```", "```py\n        create_template = 'edit.html'\n    ```", "```py\n        edit_template = 'edit.html'\n    ```", "```py\n    {% extends 'admin/model/edit.html' %}\n    ```", "```py\n    {% block tail %}\n    ```", "```py\n        {{ super() }}\n    ```", "```py\n        <script src=\"img/pre>\n\n    ```", "```py\n\n    ```", "```py\n\n    ```", "```py\n    class User(db.Model):\n    ```", "```py\n        id = db.Column(db.Integer, primary_key=True)\n    ```", "```py\n        username = db.Column(db.String(100))\n    ```", "```py\n        pwdhash = db.Column(db.String())\n    ```", "```py\n        admin = db.Column(db.Boolean())\n    ```", "```py\n        notes = db.Column(db.UnicodeText)\n    ```", "```py\n        roles = db.Column(db.String(4))\n    ```", "```py\n        def __init__(self, username, password,\n    ```", "```py\n          admin=False, notes='', roles='R'):\n    ```", "```py\n            self.username = username\n    ```", "```py\n            self.pwdhash =\n    ```", "```py\n              generate_password_hash(password)\n    ```", "```py\n            self.admin = admin\n    ```", "```py\n            self.notes = notes\n    ```", "```py\n            self.roles = self.admin and roles or ''\n    ```", "```py\n    from flask_admin.actions import ActionsMixin\n    ```", "```py\n    class UserAdminView(ModelView, ActionsMixin):\n    ```", "```py\n        form_edit_rules = (\n    ```", "```py\n            'username', 'admin', 'roles', 'notes',\n    ```", "```py\n            rules.Header('Reset Password'),\n    ```", "```py\n            'new_password', 'confirm'\n    ```", "```py\n        )\n    ```", "```py\n        form_create_rules = (\n    ```", "```py\n            'username', 'admin', 'roles', 'notes',\n    ```", "```py\n              'password'\n    ```", "```py\n        )\n    ```", "```py\n        def create_model(self, form):\n    ```", "```py\n            if 'C' not in current_user.roles:\n    ```", "```py\n                flash('You are not allowed to create\n    ```", "```py\n                  users.', 'warning')\n    ```", "```py\n                return\n    ```", "```py\n            model = self.model(\n    ```", "```py\n                form.username.data, form.password.data,\n    ```", "```py\n                  form.admin.data,\n    ```", "```py\n                form.notes.data\n    ```", "```py\n            )\n    ```", "```py\n            form.populate_obj(model)\n    ```", "```py\n            self.session.add(model)\n    ```", "```py\n            self._on_model_change(form, model, True)\n    ```", "```py\n            self.session.commit()\n    ```", "```py\n    def update_model(self, form, model):\n        if 'U' not in current_user.roles:\n            flash('You are not allowed to edit\n              users.', 'warning')\n            return\n        form.populate_obj(model)\n        if form.new_password.data:\n            if form.new_password.data !=\n              form.confirm.data:\n                flash('Passwords must match')\n                return\n            model.pwdhash = generate_password_hash(\n                form.new_password.data)\n        self.session.add(model)\n        self._on_model_change(form, model, False)\n        self.session.commit()\n```", "```py\n    def delete_model(self, model):\n        if 'D' not in current_user.roles:\n            flash('You are not allowed to delete\n              users.', 'warning')\n            return\n        super(UserAdminView, self).delete_model(model)\n```", "```py\n    def is_action_allowed(self, name):\n        if name == 'delete' and 'D' not in\n          current_user.roles:\n            flash('You are not allowed to delete\n              users.', 'warning')\n            return False\n        return True\n```"]