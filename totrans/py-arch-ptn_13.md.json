["```py\n def test_example():\n\n    # Arrange step\n\n    # Create the instance of the class to test\n\n    object_to_test = ClassToTest(paramA='some init param', \n\n                                 paramB='another init param')\n\n    # Act step\n\n    response = object_to_test.method_to_test(param='execution_param')\n\n    # Assert step\n\n    assert response == 'expected result' \n```", "```py\ndef create_basic_environment():\n\n    object_to_test = ClassToTest(paramA='some init param', \n\n                                 paramB='another init param')\n\n    # This code may be much more complex and perhaps have\n\n    # 100 more lines of code, because the basic environment\n\n    # to test requires a lot of things to set up\n\n    return object_to_test\n\ndef test_exampleA():\n\n    # Arrange\n\n    object_to_test = create_basic_environment()\n\n    # Act\n\n    response = object_to_test.method_to_test(param='execution_param')\n\n    # Assert\n\n    assert response == 'expected result B'\n\ndef test_exampleB():\n\n    # Arrange\n\n    object_to_test = create_basic_environment()\n\n    # Act\n\n    response = object_to_test.method_to_test(param='execution_param')\n\n    # Assert\n\n    assert response == 'expected result B' \n```", "```py\ndef parameter_tdd(value):\n\n    pass\n\nassert parameter_tdd(5) == 25 \n```", "```py\n$ python3 tdd_example.py\n\nTraceback (most recent call last):\n\n  File \".../tdd_example.py\", line 6, in <module>\n\n    assert parameter_tdd(5) == 25\n\nAssertionError \n```", "```py\ndef parameter_tdd(value):\n\n    return 25 \n```", "```py\n$ python3 tdd_example.py \n```", "```py\nassert parameter_tdd(-1) == 0\n\nassert parameter_tdd(0) == 0\n\nassert parameter_tdd(5) == 25 \n```", "```py\n$ python3 tdd_example.py\n\nTraceback (most recent call last):\n\n  File \".../tdd_example.py\", line 6, in <module>\n\n    assert parameter_tdd(-1) == 0\n\nAssertionError \n```", "```py\ndef parameter_tdd(value):\n\n    if value <= 0:\n\n        return 0\n\n    return 25 \n```", "```py\nassert parameter_tdd(-1) == 0\n\nassert parameter_tdd(0) == 0\n\nassert parameter_tdd(5) == 25\n\nassert parameter_tdd(10) == 100\n\nassert parameter_tdd(11) == 100 \n```", "```py\n$ python3 tdd_example.py\n\nTraceback (most recent call last):\n\n  File \"…/tdd_example.py\", line 12, in <module>\n\n    assert parameter_tdd(10) == 100\n\nAssertionError \n```", "```py\ndef parameter_tdd(value):\n\n    if value <= 0:\n\n        return 0\n\n    if value >= 10:\n\n        return 100\n\n    return 25 \n```", "```py\nassert parameter_tdd(-1) == 0\n\nassert parameter_tdd(0) == 0\n\nassert parameter_tdd(5) == 25\n\nassert parameter_tdd(7) == 49\n\nassert parameter_tdd(10) == 100\n\nassert parameter_tdd(11) == 100 \n```", "```py\n$ python3 tdd_example.py\n\nTraceback (most recent call last):\n\n  File \"/…/tdd_example.py\", line 15, in <module>\n\n    assert parameter_tdd(7) == 49\n\nAssertionError \n```", "```py\ndef parameter_tdd(value):\n\n    if value <= 0:\n\n        return 0\n\n    if value >= 10:\n\n        return 100\n\n    return value ** 2 \n```", "```py\ndef parameter_tdd(value):\n\n    if value < 0:\n\n        return 0\n\n    if value < 10:\n\n        return value ** 2\n\n    return 100 \n```", "```py\nimport unittest\n\nfrom tdd_example import parameter_tdd\n\nclass TestTDDExample(unittest.TestCase):\n\n    def test_negative(self):\n\n        self.assertEqual(parameter_tdd(-1), 0)\n\n    def test_zero(self):\n\n        self.assertEqual(parameter_tdd(0), 0)\n\n    def test_five(self):\n\n        self.assertEqual(parameter_tdd(5), 25)\n\n    def test_seven(self):\n\n        # Note this test is incorrect\n\n        self.assertEqual(parameter_tdd(7), 0)\n\n    def test_ten(self):\n\n        self.assertEqual(parameter_tdd(10), 100)\n\n    def test_eleven(self):\n\n        self.assertEqual(parameter_tdd(11), 100)\n\nif __name__ == '__main__':\n\n    unittest.main() \n```", "```py\nimport unittest\n\nfrom tdd_example import parameter_tdd \n```", "```py\nclass TestTDDExample(unittest.TestCase):\n\n    def test_negative(self):\n\n        self.assertEqual(parameter_tdd(-1), 0) \n```", "```py\nif __name__ == '__main__':\n\n    unittest.main() \n```", "```py\n$ python3 test_unittest_example.py\n\n...F..\n\n======================================================================\n\nFAIL: test_seven (__main__.TestTDDExample)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n  File \".../unittest_example.py\", line 17, in test_seven\n\n    self.assertEqual(parameter_tdd(7), 0)\n\nAssertionError: 49 != 0\n\n----------------------------------------------------------------------\n\nRan 6 tests in 0.001s\n\nFAILED (failures=1) \n```", "```py\n$ python3 test_unittest_example.py -v\n\ntest_eleven (__main__.TestTDDExample) ... ok\n\ntest_five (__main__.TestTDDExample) ... ok\n\ntest_negative (__main__.TestTDDExample) ... ok\n\ntest_seven (__main__.TestTDDExample) ... FAIL\n\ntest_ten (__main__.TestTDDExample) ... ok\n\ntest_zero (__main__.TestTDDExample) ... ok\n\n======================================================================\n\nFAIL: test_seven (__main__.TestTDDExample)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n  File \".../unittest_example.py\", line 17, in test_seven\n\n    self.assertEqual(parameter_tdd(7), 0)\n\nAssertionError: 49 != 0\n\n----------------------------------------------------------------------\n\nRan 6 tests in 0.001s\n\nFAILED (failures=1) \n```", "```py\n$ python3 test_unittest_example.py -v -k test_ten\n\ntest_ten (__main__.TestTDDExample) ... ok\n\n----------------------------------------------------------------------\n\nRan 1 test in 0.000s\n\nOK \n```", "```py\n$ pip3 install pytest \n```", "```py\nfrom tdd_example import parameter_tdd\n\ndef test_negative():\n\n    assert parameter_tdd(-1) == 0\n\ndef test_zero():\n\n    assert parameter_tdd(0) == 0\n\ndef test_five():\n\n    assert parameter_tdd(5) == 25\n\ndef test_seven():\n\n    # Note this test is deliberatly set to fail\n\n    assert parameter_tdd(7) == 0\n\ndef test_ten():\n\n    assert parameter_tdd(10) == 100\n\ndef test_eleven():\n\n    assert parameter_tdd(11) == 100 \n```", "```py\n$ pytest test_unittest_example.py\n\n================= test session starts =================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\n\ncollected 6 items\n\ntest_unittest_example.py ...F..                 [100%]\n\n====================== FAILURES =======================\n\n______________ TestTDDExample.test_seven ______________\n\nself = <test_unittest_example.TestTDDExample testMethod=test_seven>\n\n    def test_seven(self):\n\n>       self.assertEqual(parameter_tdd(7), 0)\n\nE       AssertionError: 49 != 0\n\ntest_unittest_example.py:17: AssertionError\n\n=============== short test summary info ===============\n\nFAILED test_unittest_example.py::TestTDDExample::test_seven\n\n============= 1 failed, 5 passed in 0.10s ============= \n```", "```py\n$ pytest -v test_unittest_example.py\n\n========================= test session starts =========================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /usr/local/opt/python@3.9/bin/python3.9\n\ncachedir: .pytest_cache\n\ncollected 6 items\n\ntest_unittest_example.py::TestTDDExample::test_eleven PASSED      [16%]\n\ntest_unittest_example.py::TestTDDExample::test_five PASSED        [33%]\n\ntest_unittest_example.py::TestTDDExample::test_negative PASSED    [50%]\n\ntest_unittest_example.py::TestTDDExample::test_seven FAILED       [66%]\n\ntest_unittest_example.py::TestTDDExample::test_ten PASSED         [83%]\n\ntest_unittest_example.py::TestTDDExample::test_zero PASSED        [100%]\n\n============================== FAILURES ===============================\n\n______________________ TestTDDExample.test_seven ______________________\n\nself = <test_unittest_example.TestTDDExample testMethod=test_seven>\n\n    def test_seven(self):\n\n>       self.assertEqual(parameter_tdd(7), 0)\n\nE       AssertionError: 49 != 0\n\ntest_unittest_example.py:17: AssertionError\n\n======================= short test summary info =======================\n\nFAILED test_unittest_example.py::TestTDDExample::test_seven - AssertionErr...\n\n===================== 1 failed, 5 passed in 0.08s =====================\n\n$ pytest test_pytest_example.py -v -k test_ten\n\n========================= test session starts =========================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /usr/local/opt/python@3.9/bin/python3.9\n\ncachedir: .pytest_cache\n\ncollected 6 items / 5 deselected / 1 selected\n\ntest_pytest_example.py::test_ten PASSED                           [100%]\n\n=================== 1 passed, 5 deselected in 0.02s =================== \n```", "```py\n$ pytest test_unittest_example.py\n\n========================= test session starts =========================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\n\ncollected 6 items\n\ntest_unittest_example.py ...F..                                   [100%]\n\n============================== FAILURES ===============================\n\n______________________ TestTDDExample.test_seven ______________________\n\nself = <test_unittest_example.TestTDDExample testMethod=test_seven>\n\n    def test_seven(self):\n\n>       self.assertEqual(parameter_tdd(7), 0)\n\nE       AssertionError: 49 != 0\n\ntest_unittest_example.py:17: AssertionError\n\n======================= short test summary info =======================\n\nFAILED test_unittest_example.py::TestTDDExample::test_seven - AssertionErr...\n\n===================== 1 failed, 5 passed in 0.08s ===================== \n```", "```py\n$ pytest .\n\n========================= test session starts =========================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\n\ncollected 12 items\n\ntest_pytest_example.py ...F..                                    [50%]\n\ntest_unittest_example.py ...F..                                  [100%]\n\n============================== FAILURES ===============================\n\n_____________________________ test_seven ______________________________\n\n    def test_seven():\n\n        # Note this test is deliberatly set to fail\n\n>       assert parameter_tdd(7) == 0\n\nE       assert 49 == 0\n\nE        +  where 49 = parameter_tdd(7)\n\ntest_pytest_example.py:18: AssertionError\n\n______________________ TestTDDExample.test_seven ______________________\n\nself = <test_unittest_example.TestTDDExample testMethod=test_seven>\n\n    def test_seven(self):\n\n>       self.assertEqual(parameter_tdd(7), 0)\n\nE       AssertionError: 49 != 0\n\ntest_unittest_example.py:17: AssertionError\n\n======================= short test summary info =======================\n\nFAILED test_pytest_example.py::test_seven - assert 49 == 0\n\nFAILED test_unittest_example.py::TestTDDExample::test_seven - AssertionErr...\n\n==================== 2 failed, 10 passed in 0.23s ===================== \n```", "```py\nimport math\n\ndef parameter_dependent(value):\n\n    if value < 0:\n\n        return 0\n\n    if value <= 100:\n\n        return math.sqrt(value)\n\n    return 10 \n```", "```py\nfrom dependent import parameter_dependent\n\ndef test_negative():\n\n    assert parameter_dependent(-1) == 0\n\ndef test_zero():\n\n    assert parameter_dependent(0) == 0\n\ndef test_twenty_five():\n\n    assert parameter_dependent(25) == 5\n\ndef test_hundred():\n\n    assert parameter_dependent(100) == 10\n\ndef test_hundred_and_one():\n\n    assert parameter_dependent(101) == 10 \n```", "```py\nfrom unittest.mock import patch\n\nfrom dependent import parameter_dependent\n\n@patch('math.sqrt')\n\ndef test_twenty_five(mock_sqrt):\n\n    mock_sqrt.return_value = 5\n\n    assert parameter_dependent(25) == 5\n\n    mock_sqrt.assert_called_once_with(25) \n```", "```py\n@patch('math.sqrt')\n\ndef test_hundred_and_one(mock_sqrt):\n\n    assert parameter_dependent(101) == 10\n\n    mock_sqrt.assert_not_called() \n```", "```py\n    `assert mock_sqrt.called is True` \n    ```", "```py\nfrom unittest.mock import patch\n\nfrom dependent import parameter_dependent\n\n@patch('math.sqrt')\n\ndef test_negative(mock_sqrt):\n\n    assert parameter_dependent(-1) == 0\n\n    mock_sqrt.assert_not_called()\n\n@patch('math.sqrt')\n\ndef test_zero(mock_sqrt):\n\n    mock_sqrt.return_value = 0\n\n    assert parameter_dependent(0) == 0\n\n    mock_sqrt.assert_called_once_with(0)\n\n@patch('math.sqrt')\n\ndef test_twenty_five(mock_sqrt):\n\n    mock_sqrt.return_value = 5\n\n    assert parameter_dependent(25) == 5\n\n    mock_sqrt.assert_called_with(25)\n\n@patch('math.sqrt')\n\ndef test_hundred(mock_sqrt):\n\n    mock_sqrt.return_value = 10\n\n    assert parameter_dependent(100) == 10\n\n    mock_sqrt.assert_called_with(100)\n\n@patch('math.sqrt')\n\ndef test_hundred_and_one(mock_sqrt):\n\n    assert parameter_dependent(101) == 10\n\n    mock_sqrt.assert_not_called() \n```", "```py\n@patch('math.sqrt')\n\ndef test_multiple_returns_mock(mock_sqrt):\n\n    mock_sqrt.side_effect = (5, 10)\n\n    assert parameter_dependent(25) == 5\n\n    assert parameter_dependent(100) == 10 \n```", "```py\nimport pytest\n\nfrom unittest.mock import patch\n\nfrom dependent import parameter_dependent\n\n@patch('math.sqrt')\n\ndef test_exception_raised_mock(mock_sqrt):\n\n    mock_sqrt.side_effect = ValueError('Error on the external library')\n\n    with pytest.raises(ValueError):\n\n        parameter_dependent(25) \n```", "```py\ndef parameter_dependent(value, sqrt_func):\n\n    if value < 0:\n\n        return 0\n\n    if value <= 100:\n\n        return sqrt_func(value)\n\n    return 10 \n```", "```py\nimport math\n\ndef test_good_dependency():\n\n    assert parameter_dependent(25, math.sqrt) == 5 \n```", "```py\ndef test_twenty_five():\n\n    def good_dependency(number):\n\n        return 5\n\n    assert parameter_dependent(25, good_dependency) == 5 \n```", "```py\ndef test_negative():\n\n    def bad_dependency(number):\n\n        raise Exception('Function called')\n\n    assert parameter_dependent(-1, bad_dependency) == 0 \n```", "```py\nclass Writer:\n\n    def __init__(self):\n\n        self.path = settings.WRITER_PATH\n\n    def write(self, filename, data):\n\n        with open(self.path + filename, 'w') as fp:\n\n            fp.write(data)\n\nclass Model:\n\n    def __init__(self, data):\n\n        self.data = data\n\n        self.filename = settings.MODEL_FILE\n\n        self.writer = Writer()\n\n    def save(self):\n\n        self.writer.write(self.filename, self.data) \n```", "```py\n model = Model('test')\n\n    model.save() \n```", "```py\nclass WriterInjection:\n\n    def __init__(self, path):\n\n        self.path = path\n\n    def write(self, filename, data):\n\n        with open(self.path + filename, 'w') as fp:\n\n            fp.write(data)\n\nclass ModelInjection:\n\n    def __init__(self, data, filename, writer):\n\n        self.data = data\n\n        self.filename = filename\n\n        self.writer = writer\n\n    def save(self):\n\n        self.writer.write(self.filename, self.data) \n```", "```py\n writer = WriterInjection('./')\n\n    model = ModelInjection('test', 'model_injection.txt', writer)\n\n    model.save() \n```", "```py\n@patch('class_injection.Writer.write')\n\ndef test_model(mock_write):\n\n    model = Model('test_model')\n\n    model.save()\n\n    mock_write.assert_called_with('model.txt', 'test_model') \n```", "```py\ndef test_modelinjection():\n\n    EXPECTED_DATA = 'test_modelinjection'\n\n    EXPECTED_FILENAME = 'model_injection.txt'\n\n    class MockWriter:\n\n        def write(self, filename, data):\n\n            self.filename = filename\n\n            self.data = data\n\n    writer = MockWriter()\n\n    model = ModelInjection(EXPECTED_DATA, EXPECTED_FILENAME,\n\n                           writer)\n\n    model.save()\n\n    assert writer.data == EXPECTED_DATA\n\n    assert writer.filename == EXPECTED_FILENAME \n```", "```py\nfrom tdd_example import parameter_tdd\n\nclass TestEdgesCases():\n\n    def test_negative(self):\n\n        assert parameter_tdd(-1) == 0\n\n    def test_zero(self):\n\n        assert parameter_tdd(0) == 0\n\n    def test_ten(self):\n\n        assert parameter_tdd(10) == 100\n\n    def test_eleven(self):\n\n        assert parameter_tdd(11) == 100\n\nclass TestRegularCases():\n\n    def test_five(self):\n\n        assert parameter_tdd(5) == 25\n\n    def test_seven(self):\n\n        assert parameter_tdd(7) == 49 \n```", "```py\n$ pytest -v test_group_classes.py\n\n======================== test session starts =========================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /usr/local/opt/python@3.9/bin/python3.9\n\ncollected 6 items\n\ntest_group_classes.py::TestEdgesCases::test_negative PASSED      [16%]\n\ntest_group_classes.py::TestEdgesCases::test_zero PASSED          [33%]\n\ntest_group_classes.py::TestEdgesCases::test_ten PASSED           [50%]\n\ntest_group_classes.py::TestEdgesCases::test_eleven PASSED        [66%]\n\ntest_group_classes.py::TestRegularCases::test_five PASSED        [83%]\n\ntest_group_classes.py::TestRegularCases::test_seven PASSED       [100%]\n\n========================= 6 passed in 0.02s ==========================\n\n$ pytest -k TestRegularCases -v test_group_classes.py\n\n========================= test session starts ========================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /usr/local/opt/python@3.9/bin/python3.9\n\ncollected 6 items / 4 deselected / 2 selected\n\ntest_group_classes.py::TestRegularCases::test_five PASSED        [50%]\n\ntest_group_classes.py::TestRegularCases::test_seven PASSED       [100%]\n\n================== 2 passed, 4 deselected in 0.02s ===================\n\n$ pytest -v test_group_classes.py::TestRegularCases\n\n========================= test session starts ========================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /usr/local/opt/python@3.9/bin/python3.9\n\ncachedir: .pytest_cache\n\nrootdir: /Users/jaime/Dropbox/Packt/architecture_book/chapter_09_testing_and_tdd/advanced_pytest\n\nplugins: celery-4.4.7\n\ncollected 2 items\n\ntest_group_classes.py::TestRegularCases::test_five PASSED        [50%]\n\ntest_group_classes.py::TestRegularCases::test_seven PASSED       [100%]\n\n========================== 2 passed in 0.02s ========================= \n```", "```py\nimport pytest\n\nfrom tdd_example import parameter_tdd\n\n@pytest.mark.edge\n\ndef test_negative():\n\n    assert parameter_tdd(-1) == 0\n\n@pytest.mark.edge\n\ndef test_zero():\n\n    assert parameter_tdd(0) == 0\n\ndef test_five():\n\n    assert parameter_tdd(5) == 25\n\ndef test_seven():\n\n    assert parameter_tdd(7) == 49\n\n@pytest.mark.edge\n\ndef test_ten():\n\n    assert parameter_tdd(10) == 100\n\n@pytest.mark.edge\n\ndef test_eleven():\n\n    assert parameter_tdd(11) == 100 \n```", "```py\n $ pytest -m edge -v test_markers.py\n\n========================= test session starts ========================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /usr/local/opt/python@3.9/bin/python3.9\n\ncollected 6 items / 2 deselected / 4 selected\n\ntest_markers.py::test_negative PASSED                            [25%]\n\ntest_markers.py::test_zero PASSED                                [50%]\n\ntest_markers.py::test_ten PASSED                                 [75%]\n\ntest_markers.py::test_eleven PASSED                              [100%]\n\n========================== warnings summary ==========================\n\ntest_markers.py:5\n\n  test_markers.py:5: PytestUnknownMarkWarning: Unknown pytest.mark.edge - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html\n\n    @pytest.mark.edge\n\ntest_markers.py:10\n\n...\n\n-- Docs: https://docs.pytest.org/en/stable/warnings.html\n\n============ 4 passed, 2 deselected, 4 warnings in 0.02s ============= \n```", "```py\n[pytest]\n\nmarkers =\n\n       edge: tests related to edges in intervals \n```", "```py\n$ pytest -m edge -v test_markers.py\n\n========================= test session starts =========================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /usr/local/opt/python@3.9/bin/python3.9\n\ncachedir: .pytest_cache\n\nrootdir: /Users/jaime/Dropbox/Packt/architecture_book/chapter_09_testing_and_tdd/advanced_pytest, configfile: pytest.ini\n\nplugins: celery-4.4.7\n\ncollected 6 items / 2 deselected / 4 selected\n\ntest_markers.py::test_negative PASSED                            [25%]\n\ntest_markers.py::test_zero PASSED                                [50%]\n\ntest_markers.py::test_ten PASSED                                 [75%]\n\ntest_markers.py::test_eleven PASSED                              [100%]\n\n=================== 4 passed, 2 deselected in 0.02s =================== \n```", "```py\ndef count_characters(char_to_count, string_to_count):\n\n    number = 0\n\n    for char in string_to_count:\n\n        if char == char_to_count:\n\n            number += 1\n\n    return number \n```", "```py\ndef test_counting():\n\n    assert count_characters('a', 'Barbara Ann') == 3 \n```", "```py\nimport pytest\n\n@pytest.fixture()\n\ndef prepare_string():\n\n    # Setup the values to return\n\n    prepared_string = 'Ba, ba, ba, Barbara Ann'\n\n    # Return the value\n\n    yield prepared_string\n\n    # Teardown any value\n\n    del prepared_string \n```", "```py\ndef test_counting_fixture(prepare_string):\n\n    assert count_characters('a', prepare_string) == 6\n\ndef test_counting_fixture2(prepare_string):\n\n    assert count_characters('r', prepare_string) == 2 \n```", "```py\n$ pytest -v test_fixtures.py -k counting_fixture --setup-show\n\n======================== test session starts ========================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /usr/local/opt/python@3.9/bin/python3.9\n\nplugins: celery-4.4.7\n\ncollected 3 items / 1 deselected / 2 selected\n\ntest_fixtures.py::test_counting_fixture\n\n        SETUP    F prepare_string\n\n        test_fixtures.py::test_counting_fixture (fixtures used: prepare_string)PASSED\n\n        TEARDOWN F prepare_string\n\ntest_fixtures.py::test_counting_fixture2\n\n        SETUP    F prepare_string\n\n        test_fixtures.py::test_counting_fixture2 (fixtures used: prepare_string)PASSED\n\n        TEARDOWN F prepare_string\n\n=================== 2 passed, 1 deselected in 0.02s =================== \n```", "```py\ndef count_characters_from_file(char_to_count, file_to_count):\n\n    '''\n\n    Open a file and count the characters in the text contained\n\n    in the file\n\n    '''\n\n    number = 0\n\n    with open(file_to_count) as fp:\n\n        for line in fp:\n\n            for char in line:\n\n                if char == char_to_count:\n\n                    number += 1\n\n    return number \n```", "```py\nimport os\n\nimport time\n\nimport pytest\n\n@pytest.fixture()\n\ndef prepare_file():\n\n    data = [\n\n        'Ba, ba, ba, Barbara Ann',\n\n        'Ba, ba, ba, Barbara Ann',\n\n        'Barbara Ann',\n\n        'take my hand',\n\n    ]\n\n    filename = f'./test_file_{time.time()}.txt'\n\n    # Setup the values to return\n\n    with open(filename, 'w') as fp:\n\n        for line in data:\n\n            fp.write(line)\n\n    # Return the value\n\n    yield filename\n\n    # Delete the file as teardown\n\n    os.remove(filename) \n```", "```py\n filename = f'./test_file_{time.time()}.txt' \n```", "```py\n with open(filename, 'w') as fp:\n\n        for line in data:\n\n            fp.write(line) \n```", "```py\ndef test_counting_fixture(prepare_file):\n\n    assert count_characters_from_file('a', prepare_file) == 17\n\ndef test_counting_fixture2(prepare_file):\n\n    assert count_characters_from_file('r', prepare_file) == 6 \n```", "```py\n$ pytest -v test_fixtures2.py\n\n========================= test session starts =========================\n\nplatform darwin -- Python 3.9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /usr/local/opt/python@3.9/bin/python3.9\n\ncollected 2 items\n\ntest_fixtures2.py::test_counting_fixture PASSED                  [50%]\n\ntest_fixtures2.py::test_counting_fixture2 PASSED                 [100%]\n\n========================== 2 passed in 0.02s ========================== \n```"]