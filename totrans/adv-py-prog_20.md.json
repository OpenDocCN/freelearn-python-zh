["```py\nMINI14 = '1.4GHz Mac mini'\nclass AppleFactory:\n    class MacMini14:\n        def __init__(self):\n            self.memory = 4 # in gigabytes\n            self.hdd = 500 # in gigabytes\n            self.gpu = 'Intel HD Graphics 5000'\n        def __str__(self):\n            info = (f'Model: {MINI14}',\n                    f'Memory: {self.memory}GB',\n                    f'Hard Disk: {self.hdd}GB',\n                    f'Graphics Card: {self.gpu}')\n            return '\\n'.join(info)\n    def build_computer(self, model):\n        if model == MINI14:\n            return self.MacMini14()\n        else:\n            msg = f\"I don't know how to build {model}\"\n            print(msg)\n```", "```py\nif __name__ == '__main__':\n    afac = AppleFactory()\n    mac_mini = afac.build_computer(MINI14)\n    print(mac_mini)\n```", "```py\n    class Computer:\n        def __init__(self, serial_number):\n            self.serial = serial_number\n            self.memory = None # in gigabytes\n            self.hdd = None # in gigabytes\n            self.gpu = None\n        def __str__(self):\n            info = (f'Memory: {self.memory}GB',\n                    f'Hard Disk: {self.hdd}GB',\n                    f'Graphics Card: {self.gpu}')\n            return '\\n'.join(info)\n    ```", "```py\n    class ComputerBuilder:\n        def __init__(self):\n            self.computer = Computer('AG23385193')\n        def configure_memory(self, amount):\n            self.computer.memory = amount\n        def configure_hdd(self, amount):\n            self.computer.hdd = amount\n        def configure_gpu(self, gpu_model):\n            self.computer.gpu = gpu_model\n    ```", "```py\n    class HardwareEngineer:\n        def __init__(self):\n            self.builder = None\n        def construct_computer(self, memory, hdd, gpu):\n            self.builder = ComputerBuilder()\n            steps = (self.builder.configure_memory(memory),\n                     self.builder.configure_hdd(hdd),\n                     self.builder.configure_gpu(gpu))\n            [step for step in steps]\n        @property\n        def computer(self):\n            return self.builder.computer\n    ```", "```py\n    def main():\n        engineer = HardwareEngineer()\n        engineer.construct_computer(hdd=500, \n                                    memory=8, \n                                    gpu='GeForce GTX 650 Ti')\n        computer = engineer.computer\n        print(computer)\n    if __name__ == '__main__':\n        main()\n    ```", "```py\nfrom enum import Enum\nimport time\nPizzaProgress = Enum('PizzaProgress', 'queued preparation \\\n  baking ready')\nPizzaDough = Enum('PizzaDough', 'thin thick')\nPizzaSauce = Enum('PizzaSauce', 'tomato creme_fraiche')\nPizzaTopping = Enum('PizzaTopping', 'mozzarella \\\n  double_mozzarella bacon ham mushrooms red_onion oregano')\nSTEP_DELAY = 3 # in seconds for the sake of the example\n```", "```py\nclass Pizza:\n    def __init__(self, name):\n        self.name = name\n        self.dough = None\n        self.sauce = None\n        self.topping = []\n    def __str__(self):\n        return self.name\n    def prepare_dough(self, dough):\n        self.dough = dough\n        print(f'preparing the {self.dough.name} dough of your \\\n          {self}...')\n        time.sleep(STEP_DELAY)\n        print(f'done with the {self.dough.name} dough')\n```", "```py\n    class MargaritaBuilder:\n        def __init__(self):\n            self.pizza = Pizza('margarita')\n            self.progress = PizzaProgress.queued\n            self.baking_time = 5 # in seconds for the sake of \n            the example\n        def prepare_dough(self):\n            self.progress = PizzaProgress.preparation\n            self.pizza.prepare_dough(PizzaDough.thin)\n        def add_sauce(self):\n            print('adding the tomato sauce to your \\\n              margarita...')\n            self.pizza.sauce = PizzaSauce.tomato\n            time.sleep(STEP_DELAY)\n            print('done with the tomato sauce')\n        def add_topping(self):\n            topping_desc = 'double mozzarella, oregano'\n            topping_items = (PizzaTopping.double_mozzarella,\n            PizzaTopping.oregano)\n            print(f'adding the topping ({topping_desc}) to \\\n              your margarita')\n            self.pizza.topping.append([t for t in \\\n              topping_items])\n            time.sleep(STEP_DELAY)\n            print(f'done with the topping ({topping_desc})')\n        def bake(self):\n            self.progress = PizzaProgress.baking\n            print(f'baking your margarita for \\\n              {self.baking_time} seconds')\n            time.sleep(self.baking_time)\n            self.progress = PizzaProgress.ready\n            print('your margarita is ready')\n    ```", "```py\n    class CreamyBaconBuilder:\n        def __init__(self):\n            self.pizza = Pizza('creamy bacon')\n            self.progress = PizzaProgress.queued\n            self.baking_time = 7 # in seconds for the sake of \n            the example\n        def prepare_dough(self):\n            self.progress = PizzaProgress.preparation\n            self.pizza.prepare_dough(PizzaDough.thick)\n        def add_sauce(self):\n            print('adding the crème fraîche sauce to your \\\n              creamy bacon')\n            self.pizza.sauce = PizzaSauce.creme_fraiche\n            time.sleep(STEP_DELAY)\n            print('done with the crème fraîche sauce')\n        def add_topping(self):\n            topping_desc = 'mozzarella, bacon, ham, \\\n              mushrooms, red onion, oregano'\n            topping_items =  (PizzaTopping.mozzarella,\n                              PizzaTopping.bacon,\n                              PizzaTopping.ham,\n                              PizzaTopping.mushrooms,\n                              PizzaTopping.red_onion, \n                              PizzaTopping.oregano)\n            print(f'adding the topping ({topping_desc}) to \\\n              your creamy bacon')\n            self.pizza.topping.append([t for t in \\\n              topping_items])\n            time.sleep(STEP_DELAY)\n            print(f'done with the topping ({topping_desc})')\n        def bake(self):\n            self.progress = PizzaProgress.baking\n            print(f'baking your creamy bacon for \\\n              {self.baking_time} seconds')\n            time.sleep(self.baking_time)\n            self.progress = PizzaProgress.ready\n            print('your creamy bacon is ready')\n    ```", "```py\nclass Waiter:\n    def __init__(self):\n        self.builder = None\n    def construct_pizza(self, builder):\n        self.builder = builder\n        steps = (builder.prepare_dough, \n                 builder.add_sauce, \n                 builder.add_topping, \n                 builder.bake)\n        [step() for step in steps]\n    @property\n    def pizza(self):\n        return self.builder.pizza\n```", "```py\ndef validate_style(builders):\n    try:\n        input_msg = 'What pizza would you like, [m]argarita or \\\n        [c]reamy bacon? '\n        pizza_style = input(input_msg)\n        builder = builders[pizza_style]()\n        valid_input = True\n    except KeyError:\n        error_msg = 'Sorry, only margarita (key m) and creamy \\\n        bacon (key c) are available'\n        print(error_msg)\n        return (False, None)\n    return (True, builder)\n```", "```py\ndef main():\n    builders = dict(m=MargaritaBuilder, c=CreamyBaconBuilder)\n    valid_input = False\n    while not valid_input:\n        valid_input, builder = validate_style(builders)\n    print()\n    waiter = Waiter()\n    waiter.construct_pizza(builder)\n    pizza = waiter.pizza\n    print()\n    print(f'Enjoy your {pizza}!')\n```", "```py\nWhat pizza would you like, [m]argarita or [c]reamy bacon? r\nSorry, only margarita (key m) and creamy bacon (key c) are \navailable\nWhat pizza would you like, [m]argarita or [c]reamy bacon? m\npreparing the thin dough of your margarita...\ndone with the thin dough\nadding the tomato sauce to your margarita...\ndone with the tomato sauce\nadding the topping (double mozzarella, oregano) to your \nmargarita\ndone with the topping (double mozzarella, oregano)\nbaking your margarita for 5 seconds\nyour margarita is ready\nEnjoy your margarita!\n```", "```py\nclass Pizza: \n    def __init__(self, builder): \n        self.garlic = builder.garlic \n        self.extra_cheese  = builder.extra_cheese \n\n    def __str__(self): \n        garlic = 'yes' if self.garlic else 'no' \n        cheese = 'yes' if self.extra_cheese else 'no' \n        info = (f'Garlic: {garlic}', f'Extra cheese: {cheese}') \n        return '\\n'.join(info) \n\n    class PizzaBuilder: \n        def __init__(self): \n            self.extra_cheese = False \n            self.garlic = False \n\n        def add_garlic(self): \n            self.garlic = True \n            return self \n\n        def add_extra_cheese(self): \n            self.extra_cheese = True \n            return self \n\n        def build(self): \n            return Pizza(self) \n\nif __name__ == '__main__': \n    pizza = Pizza.PizzaBuilder().add_garlic().add_extra_ \\\n      cheese().build() \n    print(pizza)\n```"]