["```py\n$ python goldhunt_0.py\n\n```", "```py\ndist = math.sqrt(delta_x*delta_x + delta_y*delta_y)\n```", "```py\ndist_square = delta_x*delta_x + delta_y*delta_y\n```", "```py\nsearch_radius_square = self.search_radius*self.search_radius\n```", "```py\nif dist_square <= search_radius_square: \n    # more code follows...\n```", "```py\n$ python goldhunt_pass1.py \n\n```", "```py\nfor x, y in zip(x_list, y_list):\n    # Some code follows...\n    # ...\n    if dist_square <= search_radius_square: \n        collected_coins.append((x, y))\n```", "```py\n$ python goldhunt_pass2.py \n\n```", "```py\na = [i*i for i in range(5)] \n```", "```py\nmylist = []\nfor i in range(5):\n    mylist.append(i*i)\n```", "```py\n$ python misc_preformance.py\n\n```", "```py\nWithout list comprehension : 1.218718248004734 \nWith list comprehension    : 0.8486306999984663 \n```", "```py\ntheta = [random.uniform(0.0, 2*math.pi) \n         for i in range(total_points)] \n```", "```py\nFunction: no_dict_comprehension, time: 0.14393422298599035 \nFunction: dict_comprehension, time: 0.13295511799515225\n```", "```py\nFunction: no_if_condition_loop_opt, time: 0.1894498920009937 \nFunction: if_condition_loop_opt, time   : 0.15955313100130297 \n```", "```py\nFunction: not_using_try, time: 0.1821241550205741 \nFunction: using_try, time    : 0.09502803898067214\n```", "```py\nFunction: data_struct_choice_list, time: 1.7527358299994376 \nFunction: data_struct_choice_set, time: 0.015494994004257023\n```", "```py\n>>> dq = deque(range(10)) \n>>> dq \ndeque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \n>>> dq.pop() \n9 \n>>> dq \ndeque([0, 1, 2, 3, 4, 5, 6, 7, 8])\n```", "```py\nFunction: list_example, time: 0.1243858500092756 \nFunction: deque_example, time: 0.0937135319982189\n```", "```py\n>>> d1 = {} \n>>> d1['a'] \nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nKeyError: 'a' \n```", "```py\n>>> from collections import defaultdict \n>>> d2 = defaultdict(int)\n>>> d2['a'] \n0 \n>>> d32\ndefaultdict(<class 'int'>, {'a': 0})\n```", "```py\n{'orc': 2000000, 'knight': 3000000, 'elf': 1000000} \n```", "```py\nFunction: dict_counter, time: 0.6270602609729394 \nFunction: defaultdict_counter, time: 0.4926446119789034\n```", "```py\n>>> def get_data(): \n...     for i in range(3): \n...         yield i*i \n... \n>>> g = get_data() \n>>> g \n<generator object get_data at 0x7f704c55fb40>\n```", "```py\n>>> next(g) \n0 \n```", "```py\n>>> next(g) \n1 \n```", "```py\n>>> next(g) \n4 \n```", "```py\n>>> next(g) \nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nStopIteration \n```", "```py\n>>> g = (i*i for i in range(3)) \n>>> g \n<generator object <genexpr> at 0x7f0b71b0c8b8>\n```", "```py\n>>> g = (i*i for i in range(3)) \n>>> for data in g: \n...     print(data) \n... \n0 \n1 \n4 \n```", "```py\n>>> g = (i*i for i in range(3)) \n>>> sum(g) \n5\n```", "```py\n$ python -m memory_profiler compare_memory.py\n\n```", "```py\n>>> from itertools import chain\n>>> mylist_1 = [1, 2, 3] \n>>> mytuple = ('x', 'y') \n>>> mylist_2 = [10, 20] \n>>> mychain = chain(mylist_1, mytuple, mylist_2) \n>>> mychain \n<itertools.chain object at 0x7fc6fcc1c2e8> \n```", "```py\n>>> print(list(mychain)) \n[1, 2, 3, 'x', 'y', 10, 20]\n```", "```py\n>>> mychain = chain(mylist_1, mytuple, mylist_2) \n>>> for item in mychain: \n...     print(item) \n... \n1 \n2 \n3 \nx \ny \n10 \n20 \n>>> next(chain) \nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nTypeError: 'type' object is not an iterator\n```", "```py\n    x = [ i*j for i in range(4) for j in range(4)]\n    ```"]