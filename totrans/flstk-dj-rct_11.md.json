["```py\nyarn add @faker-js/faker uuid –dev\n```", "```py\nimport { faker } from \"@faker-js/faker\";\nimport { v4 as uuid4 } from \"uuid\";\nfunction userFixtures() {\n...\n}\nexport default userFixtures;\n```", "```py\n...\nfunction userFixtures() {\n const firstName = faker.name.firstName();\n const lastName = faker.name.lastName();\n return {\n   id: uuid4(),\n   first_name: firstName,\n   last_name: lastName,\n   name: firstName + \" \" + lastName,\n   post_count: Math.floor(Math.random() * 10),\n   email: `${firstName}@yopmail.com`,\n   bio: faker.lorem.sentence(20),\n   username: firstName + lastName,\n   avatar: null,\n   created: faker.date.recent(),\n   updated: faker.date.recent(),\n };\n}\n...\n```", "```py\nimport { render, screen } from \"@testing-library/react\";\nimport App from \"./App\";\ntest(\"renders learn react link\", () => {\n render(<App />);\n const linkElement = screen.getByText(/learn react/i);\n expect(linkElement).toBeInTheDocument();\n});\n```", "```py\nyarn test\n```", "```py\nimport { render, screen } from \"@testing-library/react\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\ntest(\"renders Welcome to Postagram text\", () => {\n render(\n   <BrowserRouter>\n     <App />\n   </BrowserRouter>\n );\n const textElement =\n   screen.getByText(/Welcome to Postagram!/i);\n expect(textElement).toBeInTheDocument();\n});\n```", "```py\nimport React from \"react\";\nimport { render as rtlRender } from \"@testing-library/react\";\nimport { BrowserRouter } from \"react-router-dom\";\nfunction render(ui, { ...renderOptions } = {}) {\n const Wrapper = ({ children }) =>\n   <BrowserRouter>{children}</BrowserRouter>;\n return rtlRender(ui, { wrapper: Wrapper, ...renderOptions\n   });\n}\nexport * from \"@testing-library/react\";\nexport { render };\n```", "```py\nimport { render, screen } from \"@testing-library/react\";\nimport App from \"./App\";\ntest(\"renders Welcome to Postagram text\", () => {\n render(<App />);\n...\n});\n```", "```py\nimport { render, screen } from \"../../../helpers/test-utils\";\nimport userEvent from \"@testing-library/user-event\";\nimport LoginForm from \"../LoginForm\";\nimport { faker } from \"@faker-js/faker\";\nimport userFixtures from \"../../../helpers/fixtures/user\";\nconst userData = userFixtures();\ntest(\"renders Login form\", async () => {\n...\n});\n```", "```py\n...\ntest(\"renders Login form\", async () => {\n const user = userEvent.setup();\n render(<LoginForm />);\n...\n```", "```py\ntest(\"renders Login form\", async () => {\n...\n const loginForm = screen.getByTestId(\"login-form\");\n expect(loginForm).toBeInTheDocument();\nconst usernameField = screen.getByTestId(\"username-field\");\nexpect(usernameField).toBeInTheDocument();\nconst passwordField = screen.getByTestId(\"password-field\");\nexpect(passwordField).toBeInTheDocument();\n...\n```", "```py\ntest(\"renders Login form\", async () => {\n...\n const password = faker.lorem.slug(2);\n await user.type(usernameField, userData.username);\n await user.type(passwordField, password);\n expect(usernameField.value).toBe(userData.username);\n expect(passwordField.value).toBe(password);\n});\n```", "```py\nfunction LoginForm() {\n...\n return (\n   <Form\n     id=\"registration-form\"\n     className=\"border p-4 rounded\"\n     noValidate\n     validated={validated}\n     onSubmit={handleSubmit}\n     data-testid=\"login-form\"\n   >\n...\n       <Form.Label>Username</Form.Label>\n       <Form.Control\n         value={form.username}\n         data-testid=\"username-field\"\n...\n     <Form.Group className=\"mb-3\">\n       <Form.Label>Password</Form.Label>\n       <Form.Control\n         value={form.password}\n         data-testid=\"password-field\"\n...\n```", "```py\nyarn add --dev jest-localstorage-mock\n```", "```py\n...\nrequire('jest-localstorage-mock');\n```", "```py\n...\n{\n  \"jest\": {\n    \"resetMocks\": false\n  }\n}\n...\n```", "```py\nimport { faker } from \"@faker-js/faker\";\nimport { v4 as uuid4 } from \"uuid\";\nimport userFixtures from \"./user\";\nfunction postFixtures(isLiked = true, isEdited = false, user = undefined) {\n...\n}\nexport default postFixtures;\n```", "```py\n...\nfunction postFixtures(isLiked = true, isEdited = false, user = undefined) {\n return {\n   id: uuid4(),\n   author: user || userFixtures(),\n   body: faker.lorem.sentence(20),\n   edited: isEdited,\n   liked: isLiked,\n   likes_count: Math.floor(Math.random() * 10),\n   comments_count: Math.floor(Math.random() * 10),\n   created: faker.date.recent(),\n   updated: faker.date.recent(),\n };\n}\n```", "```py\nimport { render, screen } from \"../../../helpers/test-utils\";\nimport Post from \"../Post\";\nimport { setUserData } from \"../../../hooks/user.actions\";\nimport userFixtures from \"../../../helpers/fixtures/user\";\nimport postFixtures from \"../../../helpers/fixtures/post\";\nconst userData = userFixtures();\nconst postData = postFixtures(true, false, userData);\nbeforeEach(() => {\n // to fully reset the state between __tests__, clear the\n // storage\n localStorage.clear();\n // and reset all mocks\n jest.clearAllMocks();\n setUserData({\n   user: userData,\n   access: null,\n   refresh: null,\n });\n});\n```", "```py\n...\ntest(\"render Post component\", () => {\n render(<Post post={postData} />);\n const postElement = screen.getByTestId(\"post-test\");\n expect(postElement).toBeInTheDocument();\n});\n```", "```py\n...\nfunction Post(props) {\n...\n return (\n   <>\n     <Card className=\"rounded-3 my-4\"\n       data-testid=\"post-test\">\n...\n   </>\n );\n}\nexport default Post;\n```", "```py\nimport { render, screen, fireEvent } from \"../../../helpers/test-utils\";\nimport userEvent from \"@testing-library/user-event\";\nimport CreatePost from \"../CreatePost\";\nimport { faker } from \"@faker-js/faker\";\ntest(\"Renders CreatePost component\", async () => {\n...\n});\n```", "```py\ntest(\"Renders CreatePost component\", async () => {\n const user = userEvent.setup();\n render(<CreatePost />);\n const showModalForm =\n   screen.getByTestId(\"show-modal-form\");\n expect(showModalForm).toBeInTheDocument();\n});\n```", "```py\n...\n // Clicking to show the modal\n fireEvent.click(showModalForm);\n const createFormElement =\n   screen.getByTestId(\"create-post-form\");\n expect(createFormElement).toBeInTheDocument();\n...\n```", "```py\n...\n const postBodyField =\n   screen.getByTestId(\"post-body-field\");\n expect(postBodyField).toBeInTheDocument();\n const submitButton =\n   screen.getByTestId(\"create-post-submit\");\n expect(submitButton).toBeInTheDocument();\n expect(submitButton.disabled).toBeTruthy();\n ...\n```", "```py\n ...\n const postBody = faker.lorem.sentence(10);\n await user.type(postBodyField, postBody);\n // Checking if field has the text and button is not\n // disabled\n expect(postBodyField.value).toBe(postBody);\n expect(submitButton.disabled).toBeFalsy();\n});\n```", "```py\nfunction CreatePost() {\n...\n return (\n   <>\n     <Form.Group className=\"my-3 w-75\">\n       <Form.Control\n         className=\"py-2 rounded-pill border-primary\n                    text-primary\"\n         data-testid=\"show-modal-form\"\n...\n       <Modal.Body className=\"border-0\">\n         <Form\n           noValidate\n           validated={validated}\n           onSubmit={handleSubmit}\n           data-testid=\"create-post-form\"\n         >\n           <Form.Group className=\"mb-3\">\n             <Form.Control\n               name=\"body\"\n               data-testid=\"post-body-field\"\n...\n       </Modal.Body>\n       <Modal.Footer>\n         <Button\n           variant=\"primary\"\n           onClick={handleSubmit}\n           disabled={!form.body}\n           data-testid=\"create-post-submit\"\n...\n   </>\n );\n}\n```", "```py\nimport { render, screen, fireEvent } from \"../../../helpers/test-utils\";\nimport userEvent from \"@testing-library/user-event\";\nimport UpdatePost from \"../UpdatePost\";\nimport userFixtures from \"../../../helpers/fixtures/user\";\nimport postFixtures from \"../../../helpers/fixtures/post\";\nimport { faker } from \"@faker-js/faker\";\nconst userData = userFixtures();\nconst postData = postFixtures(true, false, userData);\ntest(\"Render UpdatePost component\", async () => {\n...\n});\n```", "```py\ntest(\"Render UpdatePost component\", async () => {\n const user = userEvent.setup();\n render(<UpdatePost post={postData} />);\n const showModalForm =\n   screen.getByTestId(\"show-modal-form\");\n expect(showModalForm).toBeInTheDocument();\n...\n```", "```py\n...\n fireEvent.click(showModalForm);\n const updateFormElement =\n   screen.getByTestId(\"update-post-form\");\n expect(updateFormElement).toBeInTheDocument();\n...\n```", "```py\n...\n const postBodyField =\n   screen.getByTestId(\"post-body-field\");\n expect(postBodyField).toBeInTheDocument();\n const submitButton =\n   screen.getByTestId(\"update-post-submit\");\n expect(submitButton).toBeInTheDocument();\n...\n```", "```py\n...\n const postBody = faker.lorem.sentence(10);\n await user.type(postBodyField, postBody);\n // Checking if field has the text and button is not\n // disabled\n expect(postBodyField.value).toBe(postData.body +\n   postBody);\n expect(submitButton.disabled).toBeFalsy();\n});\n```", "```py\n...\nfunction UpdatePost(props) {\n...\n return (\n   <>\n     <Dropdown.Item data-testid=\"show-modal-form\"\n       onClick={handleShow}>\n...\n       <Modal.Body className=\"border-0\">\n         <Form\n          noValidate\n          validated={validated}\n          onSubmit={handleSubmit}\n    data-testid=\"update-post-form\"\n   >\n           <Form.Group className=\"mb-3\">\n             <Form.Control\n               name=\"body\"\n               value={form.body}\n               data-testid=\"post-body-field\"\n...\n       </Modal.Body>\n       <Modal.Footer>\n         <Button\n           data-testid=\"update-post-submit\"\n...\n```", "```py\nimport { render, screen } from \"../../../helpers/test-utils\";\nimport TestRenderer from \"react-test-renderer\";\nimport ProfileCard from \"../ProfileCard\";\nimport { BrowserRouter } from \"react-router-dom\";\nconst userData = {\n id: \"0590cd67-eacd-4299-8413-605bd547ea17\",\n first_name: \"Mossie\",\n last_name: \"Murphy\",\n name: \"Mossie Murphy\",\n post_count: 3,\n email: \"Mossie@yopmail.com\",\n bio: \"Omnis necessitatibus facere vel in est provident\n       sunt tempora earum accusantium debitis vel est\n       architecto minima quis sint et asperiores.\",\n username: \"MossieMurphy\",\n avatar: null,\n created: \"2022-08-19T17:31:03.310Z\",\n updated: \"2022-08-20T07:38:47.631Z\",\n};\n```", "```py\n...\ntest(\"Profile Card snapshot\", () => {\n const profileCardDomTree = TestRenderer.create(\n   <BrowserRouter>\n     <ProfileCard user={userData} />\n   </BrowserRouter>\n ).toJSON();\n expect(profileCardDomTree).toMatchSnapshot();\n});\n```"]