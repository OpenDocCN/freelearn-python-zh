["```py\n pip install flask-sqlalchemy\n```", "```py\n class Complaint(<st c=\"4273\">Base</st>):\n   __tablename__ = 'complaint'\n   id = Column(Integer, <st c=\"4331\">Sequence('complaint_id_seq', increment=1)</st>, <st c=\"4374\">primary_key = True</st>)\n   cid = Column(Integer, <st c=\"4417\">ForeignKey('complainant.id')</st>, nullable = False)\n   catid = Column(Integer, <st c=\"4489\">ForeignKey('category.id')</st>, nullable = False)\n   ctype = Column(Integer, <st c=\"4558\">ForeignKey('complaint_type.id')</st>, nullable = False) <st c=\"4609\">category = relationship('Category', back_populates=\"complaints\")</st><st c=\"4673\">complainants = relationship('Complainant', back_populates=\"complaints\")</st>\n <st c=\"4745\">complaint_type = relationship('ComplaintType', back_populates=\"complaints\")</st>\n<st c=\"4952\">Base</st> class to create an SQLAlchemy model class that will depict the schema of its corresponding table. For instance, a given <st c=\"5077\">Complaint</st> class corresponds to the <st c=\"5112\">complaint</st> table with the <st c=\"5137\">id</st>, <st c=\"5141\">cid</st>, <st c=\"5146\">catid</st>, and <st c=\"5157\">ctype</st> columns, as defined by the <st c=\"5190\">Column</st> helper class with the matching column type classes. All column metadata must be correct since *<st c=\"5291\">Flask-Migrate</st>* will derive the table schema details from this metadata during migration. All column metadata, including the *<st c=\"5414\">primary</st>*, *<st c=\"5423\">unique</st>*, and *<st c=\"5435\">foreign key constraints</st>*, will be part of this database migration. After migration, the following model classes will generate sub-tables for the <st c=\"5579\">complaint</st> table:\n\n```", "```py\n\n\t\t\t<st c=\"6599\">The</st> `<st c=\"6604\">Category</st>`<st c=\"6612\">,</st> `<st c=\"6614\">ComplaintType</st>`<st c=\"6627\">, and</st> `<st c=\"6633\">ComplaintDetails</st>` <st c=\"6649\">classes all reference the parent</st> `<st c=\"6683\">Complaint</st>`<st c=\"6692\">, as depicted by</st> <st c=\"6709\">their respective</st> `<st c=\"6726\">relationship()</st>` <st c=\"6740\">parameters.</st>\n\t\t\t<st c=\"6752\">With SQLAlchemy set up, install the</st> `<st c=\"6789\">flask-migrate</st>` <st c=\"6802\">extension module:</st>\n\n```", "```py\n\n\t\t\t<st c=\"6846\">Before running the migration commands from the extension module, create a module file (not</st> `<st c=\"6938\">main.py</st>`<st c=\"6945\">) to provide the</st> <st c=\"6962\">necessary helper classes to run the migration commands locally.</st> <st c=\"7027\">The following</st> `<st c=\"7041\">manage.py</st>` <st c=\"7050\">file of our prototypes will run the module’s</st> `<st c=\"7096\">install</st>`<st c=\"7103\">,</st> `<st c=\"7105\">manage</st>`<st c=\"7111\">, and</st> `<st c=\"7117\">upgrade</st>` <st c=\"7124\">CLI commands:</st>\n\n```", "```py\n python -m flask --app manage.py db init\n```", "```py\n python -m flask --app manage.py db migrate -m \"Initial\"\n```", "```py\n \"\"\"empty message\nRevision ID: 9eafa601a7db\nRevises:\nCreate Date: 2023-06-08 06:51:46.327352\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n# revision identifiers, used by Alembic. <st c=\"12702\">revision = '9eafa601a7db'</st> down_revision = None\nbranch_labels = None\ndepends_on = None <st c=\"12788\">def upgrade():</st> # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('category',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=45), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('complaint_type',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=45), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n  … … … … … … …\n```", "```py\n python -m flask --app manage.py db upgrade\n```", "```py\n pip install bootstrap-flask\n```", "```py\n from flask import Flask <st c=\"16551\">from flask_bootstrap import Bootstrap4</st> import toml\nfrom model.config import init_db\ninit_db()\napp = Flask(__name__, template_folder='pages', static_folder=\"resources\")\napp.config.from_file('config-dev.toml', toml.load) <st c=\"16802\">Bootstrap4</st> class requires the <st c=\"16832\">app</st> instance as its constructor argument to proceed with the instantiation. After this setup, the Jinja2 templates can now load the necessary built-in resource files and start the web design process.\n\t\t\t<st c=\"17031\">Applying the Bootstrap files and assets</st>\n\t\t\t<st c=\"17071\">Bootstrap-Flask has a</st> `<st c=\"17094\">bootstrap.load_css()</st>` <st c=\"17114\">helper function that loads the CSS resources into the Jinja2 template and a</st> `<st c=\"17191\">bootstrap.load_js()</st>` <st c=\"17210\">helper function that loads all Bootstrap</st> <st c=\"17251\">JavaScript files.</st> <st c=\"17270\">The following is the</st> `<st c=\"17291\">login.html</st>` <st c=\"17301\">template of the</st> `<st c=\"17318\">ch04-web</st>` <st c=\"17326\">application with the preceding two</st> <st c=\"17362\">helper functions:</st>\n\n```", "```py\n\n\t\t\t<st c=\"17716\">It is always the standard to call</st> `<st c=\"17751\">bootstrap.load_css()</st>` <st c=\"17771\">in</st> `<st c=\"17775\"><head></st>`<st c=\"17781\">, which is the appropriate markup to call the</st> `<st c=\"17827\"><style></st>` <st c=\"17834\">tag.</st> <st c=\"17840\">Calling</st> `<st c=\"17848\">bootstrap.load_js()</st>` <st c=\"17867\">in</st> `<st c=\"17871\"><head></st>` <st c=\"17877\">is also feasible, but for many, the custom is to load all the JavaScript files in the last part of the</st> `<st c=\"17981\"><body></st>` <st c=\"17987\">content, which is why</st> `<st c=\"18010\">bootstrap.load_css()</st>` <st c=\"18030\">is present there.</st> <st c=\"18049\">On the other hand, if there are custom</st> `<st c=\"18088\">styles.css</st>` <st c=\"18098\">or JavaScript files for the applications, the module can allow their imports in the Jinja2 templates, so long as there are no conflicts with the</st> <st c=\"18244\">Bootstrap resources.</st>\n\t\t\t<st c=\"18264\">After loading the CSS and</st> <st c=\"18291\">JavaScript, we can start designing the pages with the Bootstrap components.</st> <st c=\"18367\">The following code shows the content of the given</st> `<st c=\"18417\">login.html</st>` <st c=\"18427\">page with all the needed</st> *<st c=\"18453\">Bootstrap</st>* *<st c=\"18463\">4</st>* <st c=\"18464\">components:</st>\n\n```", "```py\n\n\t\t\t*<st c=\"19029\">Figure 4</st>**<st c=\"19038\">.6</st>* <st c=\"19040\">shows the</st> <st c=\"19051\">published version of the given</st> `<st c=\"19082\">login.html</st>` <st c=\"19092\">web design:</st>\n\t\t\t![Figure 4.6 – The login.html page using Bootstrap 4](img/B19383_04_6.jpg)\n\n\t\t\t<st c=\"19143\">Figure 4.6 – The login.html page using Bootstrap 4</st>\n\t\t\t<st c=\"19193\">Aside from the updated Bootstrap support, the Bootstrap-Flask module has macros and built-in configurations that applications can use to create a better</st> <st c=\"19347\">UI design.</st>\n\t\t\t<st c=\"19357\">Utilizing built-in features</st>\n\t\t\t<st c=\"19385\">The extension module</st> <st c=\"19406\">has five built-in</st> *<st c=\"19425\">macros</st>* <st c=\"19431\">that Jinja2 templates can import to create fewer HTML codes and manageable components.</st> <st c=\"19519\">These built-in macros are</st> <st c=\"19545\">as follows:</st>\n\n\t\t\t\t*   `<st c=\"19556\">bootstrap4/form.html</st>`<st c=\"19577\">: This can render</st> *<st c=\"19596\">Flask-WTF</st>* <st c=\"19605\">forms or form components and their hidden</st> <st c=\"19648\">error messages.</st>\n\t\t\t\t*   `<st c=\"19663\">bootstrap4/nav.html</st>`<st c=\"19683\">: This can render navigations</st> <st c=\"19714\">and breadcrumbs.</st>\n\t\t\t\t*   `<st c=\"19730\">bootstrap4/pagination.html</st>`<st c=\"19757\">: This can provide paginations to</st> *<st c=\"19792\">Flask-SQLAlchemy</st>* <st c=\"19808\">data.</st>\n\t\t\t\t*   `<st c=\"19814\">bootstrap4/table.html</st>`<st c=\"19836\">: This can render table-formatted</st> <st c=\"19871\">context data.</st>\n\t\t\t\t*   `<st c=\"19884\">bootstrap4/utils.html</st>`<st c=\"19906\">: This can provide other utilities, such as rendering flash messages, icons, and resource</st> <st c=\"19997\">reference code.</st>\n\n\t\t\t<st c=\"20012\">The module also has built-in</st> *<st c=\"20042\">configuration variables</st>* <st c=\"20065\">to enable and disable some features and customize Bootstrap components.</st> <st c=\"20138\">For instance,</st> `<st c=\"20152\">BOOTSTRAP_SERVE_LOCAL</st>` <st c=\"20173\">disables the process of loading built-in CSS and JavaScript when set to</st> `<st c=\"20246\">false</st>` <st c=\"20251\">and allows us to refer to CDN or local resources in</st> `<st c=\"20304\">/static</st>` <st c=\"20311\">instead.</st> <st c=\"20321\">In addition,</st> `<st c=\"20334\">BOOTSTRAP_BTN_SIZE</st>` <st c=\"20352\">and</st> `<st c=\"20357\">BOOTSTRAP_BTN_STYLE</st>` <st c=\"20376\">can</st> <st c=\"20380\">customize buttons.</st> <st c=\"20400\">The</st> **<st c=\"20404\">TOML</st>** <st c=\"20408\">or any configuration file is where all these</st> <st c=\"20454\">configuration variables are registered</st> <st c=\"20493\">and set.</st>\n\t\t\t<st c=\"20501\">Next, we’ll focus on</st> *<st c=\"20523\">Flask-WTF</st>*<st c=\"20532\">, a module supported</st> <st c=\"20553\">by</st> *<st c=\"20556\">Bootstrap-Flask</st>*<st c=\"20571\">.</st>\n\t\t\t<st c=\"20572\">Building Flask forms with Flask-WTF</st>\n\t\t\t`<st c=\"20750\">WTForms</st>` <st c=\"20757\">library to enhance form handling in Flask applications.</st> <st c=\"20814\">Instead of using HTML markup, Flask-WTF provides</st> <st c=\"20863\">the necessary utilities</st> <st c=\"20886\">to manage the web forms in a Pythonic way through</st> <st c=\"20937\">form models.</st>\n\t\t\t<st c=\"20949\">Creating the form models</st>\n\t\t\t<st c=\"20974\">Form models must extend the</st> `<st c=\"21003\">FlaskForm</st>` <st c=\"21012\">core class to create and render the</st> `<st c=\"21049\"><form></st>` <st c=\"21055\">tag.</st> <st c=\"21061\">Its attributes</st> <st c=\"21076\">correspond to the form fields defined by the following</st> <st c=\"21131\">helper classes:</st>\n\n\t\t\t\t*   `<st c=\"21146\">StringField</st>`<st c=\"21158\">: Defines and creates a text input field that accepts</st> <st c=\"21213\">string-typed data.</st>\n\t\t\t\t*   `<st c=\"21231\">IntegerField</st>`<st c=\"21244\">: Defines and creates a text input field that</st> <st c=\"21291\">accepts integers.</st>\n\t\t\t\t*   `<st c=\"21308\">DecimalField</st>`<st c=\"21321\">: Defines and creates a text input field that asks for</st> <st c=\"21377\">decimal values.</st>\n\t\t\t\t*   `<st c=\"21392\">DateField</st>`<st c=\"21402\">: Defines and creates a text input field that supports</st> `<st c=\"21458\">Date</st>` <st c=\"21462\">types with the default format</st> <st c=\"21493\">of</st> `<st c=\"21496\">yyyy-mm-dd</st>`<st c=\"21506\">.</st>\n\t\t\t\t*   `<st c=\"21507\">EmailField</st>`<st c=\"21518\">: Defines and creates a text input that uses a regular expression to manage</st> <st c=\"21595\">email-formatted</st> <st c=\"21611\">values.</st>\n\t\t\t\t*   `<st c=\"21618\">SelectField</st>`<st c=\"21630\">: Defines and creates a</st> <st c=\"21655\">combo box.</st>\n\t\t\t\t*   `<st c=\"21665\">SelectMultipleField</st>`<st c=\"21685\">: Defines and creates a combo box with a list</st> <st c=\"21732\">of options.</st>\n\t\t\t\t*   `<st c=\"21743\">TextAreaField</st>`<st c=\"21757\">: Defines a text area for multi-line</st> <st c=\"21795\">text input.</st>\n\t\t\t\t*   `<st c=\"21806\">FileField</st>`<st c=\"21816\">: Defines and creates a file upload field for</st> <st c=\"21863\">uploading files.</st>\n\t\t\t\t*   `<st c=\"21879\">PasswordField</st>`<st c=\"21893\">: Defines a password</st> <st c=\"21915\">input field.</st>\n\n\t\t\t<st c=\"21927\">The following code shows a form model that utilizes the given helper classes to build the</st> `<st c=\"22018\">Complainant</st>` <st c=\"22029\">form</st> *<st c=\"22035\">widgets</st>* <st c=\"22042\">for the</st> `<st c=\"22051\">add_complainant()</st>` <st c=\"22068\">view:</st>\n\n```", "```py\n @complainant_bp.route('/complainant/add', methods=['GET', 'POST'])\ndef add_complainant(): <st c=\"24113\">form:ComplainantForm = ComplainantForm()</st> login_repo = LoginRepository(db_session)\n    users = login_repo.select_all() <st c=\"24227\">form.id.choices = [(f\"{u.id}\", f\"{u.username}\") for u</st> <st c=\"24280\">in users]</st><st c=\"24290\">if request.method == 'GET':</st><st c=\"24318\">return render_template('complainant_add.html',</st> <st c=\"24365\">form=form), 200</st><st c=\"24381\">else:</st><st c=\"24387\">if form.validate_on_submit():</st><st c=\"24417\">details = dict()</st><st c=\"24434\">details[\"id\"] = int(form.id.data)</st><st c=\"24468\">details[\"firstname\"] = form.firstname.data</st><st c=\"24511\">details[\"lastname\"]  = form.lastname.data</st> … … … … … … <st c=\"24564\">complainant:Complainant =</st> <st c=\"24589\">Complainant(**details)</st><st c=\"24612\">complainant_repo:ComplainantRepository =</st> <st c=\"24653\">ComplainantRepository(db_session)</st><st c=\"24687\">result = complainant_repo.insert(complainant)</st> if result:\n                records = complainant_repo.select_all()\n                return render_template( 'complainant_list_all.html', records=records), 200 <st c=\"24860\">else:</st><st c=\"24865\">return render_template('complainant_add.html',</st><st c=\"24912\">form=form), 500</st> else:\n            return render_template('complainant_add.html', form=form), 500\n```", "```py\n <form action = \"{{ request.path }}\" method = \"post\"> <st c=\"27003\">{{ form.csrf_token }}</st> <div class=\"mb-3\">{{ <st c=\"27046\">form.id</st>(<st c=\"27055\">size</st>=1, <st c=\"27064\">class</st>=\"form-control\") }}</div>\n  <div class=\"mb-3\"> {{ <st c=\"27118\">form.firstname</st>(<st c=\"27134\">size</st>=50, <st c=\"27144\">placeholder</st>='Firstname', <st c=\"27170\">class</st>=\"form-control\") }}\n  </div> <st c=\"27203\">{% if form.firstname.errors %}</st><st c=\"27233\"><ul></st><st c=\"27238\">{% for error in form.username.errors %}</st><st c=\"27278\"><li>{{ error }}</li></st><st c=\"27299\">{% endfor %}</st><st c=\"27312\"></ul></st><st c=\"27318\">{% endif %}</st> … … … … … …\n  <div class=\"mb-3\"> {{ <st c=\"27364\">form.mobile</st>(<st c=\"27377\">size</st>=50, <st c=\"27387\">placeholder</st>='+63-XXX-XXX-XXXX', <st c=\"27420\">class</st>=\"form-control\") }}\n  </div>\n  … … … … … …\n  <div class=\"mb-3\"> {{ <st c=\"27487\">form.email</st>(<st c=\"27499\">size</st>=50,<st c=\"27508\">placeholder</st>='xxxxxxx@xxxx.xxx', <st c=\"27542\">class</st>=\"form-control\") }}\n  </div>\n  … … … … … …\n   <div class=\"mb-3\"> {{ <st c=\"27609\">form.zipcode</st>(<st c=\"27623\">size</st>=50, <st c=\"27633\">placeholder</st>='Zip Code', <st c=\"27658\">class</st>=\"form-control\") }}\n   </div>\n   … … … … … …\n</form>\n```", "```py\n<st c=\"28773\">from flask_wtf import CSRFProtect</st> app = Flask(__name__, template_folder='pages', static_folder=\"resources\")\napp.config.from_file('config-dev.toml', toml.load)\nbootstrap = Bootstrap4(app) <st c=\"29019\">csrf_token</st>) using the WTF form context inside the <st c=\"29071\">{{}}</st> statement enables the token generation per-user access, as shown in the given <st c=\"29154\">complainant_add.html</st> template. Flask-WTF generates a unique token for every rendition of the form fields. Note that CRSF protection is only possible with Flask-WTF if the <st c=\"29325\">SECRET_KEY</st> configuration variable is part of the configuration file and has the appropriate hash value.\n\t\t\t<st c=\"29428\">CRSF protection occurs in every form submission that involves the form model instance.</st> <st c=\"29516\">Now, let’s discuss the general flow of form submission with the</st> <st c=\"29580\">Flask-WTF module.</st>\n\t\t\t<st c=\"29597\">Submitting the form</st>\n\t\t\t<st c=\"29617\">After clicking the submit button, the</st> *<st c=\"29656\">HTTP POST</st>* <st c=\"29665\">request transaction of</st> `<st c=\"29689\">add_complainant()</st>` <st c=\"29706\">retrieves the</st> <st c=\"29720\">form values after the validation, as shown in the preceding snippet.</st> <st c=\"29790\">Flask-WTF sends the form data to the view function through the</st> *<st c=\"29853\">HTTP POST</st>* <st c=\"29862\">request method, requiring the view function to have validation for the incoming</st> `<st c=\"29943\">POST</st>` <st c=\"29947\">requests.</st> <st c=\"29958\">If</st> `<st c=\"29961\">request.method</st>` <st c=\"29975\">is</st> `<st c=\"29979\">POST</st>`<st c=\"29983\">, the view must perform another evaluation on the extension’s</st> `<st c=\"30045\">validate_on_submit()</st>` <st c=\"30065\">to check for violation of some form constraints.</st> <st c=\"30115\">If the results for all these evaluations are</st> `<st c=\"30160\">True</st>`<st c=\"30164\">, the view function can access all the form data in</st> `<st c=\"30216\">form_object.<field_name>.data</st>`<st c=\"30245\">. Otherwise, the view function will redirect the users to the form page with the corresponding error message(s) and</st> *<st c=\"30361\">HTTP Status</st>* *<st c=\"30373\">Code 500</st>*<st c=\"30381\">.</st>\n\t\t\t<st c=\"30382\">But what comprises Flask-WTF’s form</st> <st c=\"30419\">validation framework, or what criteria are the basis of the</st> `<st c=\"30479\">validate_on_submit()</st>` <st c=\"30499\">result after</st> <st c=\"30513\">form submission?</st>\n\t\t\t<st c=\"30529\">Validating form fields</st>\n\t\t\t<st c=\"30552\">Flask-WTF has a list of useful built-in</st> <st c=\"30593\">validator classes that support core validation rules such as</st> `<st c=\"30654\">InputRequired()</st>`<st c=\"30669\">, which imposes the HTML-required constraint.</st> <st c=\"30715\">Some constraints are specific to widgets, such as the</st> `<st c=\"30769\">Length()</st>` <st c=\"30777\">validator, which can restrict the input length of the</st> `<st c=\"30832\">StringField</st>` <st c=\"30843\">values, and</st> `<st c=\"30856\">RegExp()</st>`<st c=\"30864\">, which can impose regular expressions for mobile and telephone data formats.</st> <st c=\"30942\">Moreover, some validators require dependency modules to be installed, such as</st> `<st c=\"31020\">Email()</st>`<st c=\"31027\">, which needs an email-validator external library.</st> <st c=\"31078\">All these built-in validators are ready to be imported from</st> *<st c=\"31138\">Flask-WTF</st>*<st c=\"31147\">’s</st> `<st c=\"31151\">wtforms.validators</st>` <st c=\"31169\">module.</st> <st c=\"31178\">The</st> `<st c=\"31182\">validators</st>` <st c=\"31192\">parameter of every</st> *<st c=\"31212\">FlaskForm</st>* <st c=\"31221\">attribute can accept any callables from validator classes to impose</st> <st c=\"31290\">constraint rules.</st>\n\t\t\t<st c=\"31307\">Violations are added to the field’s errors list that can trigger</st> `<st c=\"31373\">validate_on_submit()</st>` <st c=\"31393\">to return</st> `<st c=\"31404\">False</st>`<st c=\"31409\">. The form template must render all such error messages per field during redirection after an</st> *<st c=\"31503\">HTTP Status Code</st>* *<st c=\"31520\">500</st>* <st c=\"31523\">error.</st>\n\t\t\t<st c=\"31530\">The module can also support</st> <st c=\"31559\">custom validation for some constraints that are not typical.</st> <st c=\"31620\">There are many ways to implement custom validations, and one is through the</st> *<st c=\"31696\">in-line validator approach</st>* <st c=\"31722\">exhibited in the</st> <st c=\"31740\">following snippet:</st>\n\n```", "```py\n<st c=\"32752\">from wtforms.validators ValidationError</st> class ComplainantForm(FlaskForm): <st c=\"32826\">def disallow_invalid_dates(date_after):</st> message = 'Must be after %s.' % (date_after) <st c=\"32911\">def _disallow_invalid_dates(form, field):</st> base_date = datetime.strptime(date_after, '%Y-%m-%d').date()\n          if field.data < base_date: <st c=\"33041\">raise ValidationError(message)</st><st c=\"33071\">return _disallow_invalid_dates</st> … … … … … …\n     … … … … … …\n     date_registered = DateField('Enter date registered', format='%Y-%m-%d', validators=[InputRequired(), <st c=\"33409\">disallow_invalid_dates()</st>, the closure is <st c=\"33450\">_disallow_invalid_dates(form, field)</st>, which raises <st c=\"33501\">ValidationError</st> when the <st c=\"33526\">field.data</st> or <st c=\"33540\">date_registered</st> form value is before the specified boundary date’s <st c=\"33607\">date_after</st> provided by the validator function. To apply validators, you can call them just like a typical method – that is, with parameter values in the <st c=\"33760\">validators</st> parameter of the field class.\n\t\t\t<st c=\"33800\">Another extension module that is popular nowadays and supports the recent Flask framework is the</st> *<st c=\"33898\">Flask-RESTful</st>* <st c=\"33911\">module.</st> <st c=\"33920\">We’ll take a look at it in the</st> <st c=\"33951\">next section.</st>\n\t\t\t<st c=\"33964\">Building RESTful services with Flask-RESTful</st>\n\t\t\t<st c=\"34009\">The</st> `<st c=\"34014\">flask-RESTful</st>` <st c=\"34027\">module uses the</st> *<st c=\"34044\">class-based view strategy</st>* <st c=\"34069\">of Flask to build RESTful services.</st> <st c=\"34106\">It provides a</st> `<st c=\"34120\">Resource</st>` <st c=\"34128\">class to create custom resources to build from the ground up HTTP-based services instead of</st> <st c=\"34221\">endpoint-based routes.</st>\n\t\t\t<st c=\"34243\">This chapter specifies another</st> <st c=\"34275\">application,</st> `<st c=\"34288\">ch04-api</st>`<st c=\"34296\">, that implements</st> <st c=\"34314\">RESTful endpoints for managing user complaints and related details.</st> <st c=\"34382\">Here’s one of the resource-based implementations of our application’s</st> <st c=\"34452\">API endpoints:</st>\n\n```", "```py\n\n\t\t\t<st c=\"34724\">Here,</st> `<st c=\"34731\">flask_restful</st>` <st c=\"34744\">provides the</st> `<st c=\"34758\">Resource</st>` <st c=\"34766\">class that creates resources for views.</st> <st c=\"34807\">In this case,</st> `<st c=\"34821\">ListComplaintRestAPI</st>` <st c=\"34841\">sub-classes the</st> `<st c=\"34858\">Resource</st>` <st c=\"34866\">class to override its</st> `<st c=\"34889\">get()</st>` <st c=\"34894\">instance method, which will retrieve all complaints from the database through an HTTP</st> *<st c=\"34981\">GET</st>* <st c=\"34984\">request.</st> <st c=\"34994\">On the other hand,</st> `<st c=\"35013\">AddComplaintRestAPI</st>` <st c=\"35032\">implements the</st> *<st c=\"35048\">INSERT</st>* <st c=\"35054\">complaint transaction through an HTTP</st> *<st c=\"35093\">POST</st>* <st c=\"35097\">request:</st>\n\n```", "```py\n\n\t\t\t<st c=\"35504\">The</st> `<st c=\"35509\">Resource</st>` <st c=\"35517\">class</st> <st c=\"35523\">has a</st> `<st c=\"35530\">post()</st>` <st c=\"35536\">method that needs to be overridden to</st> <st c=\"35575\">create</st> *<st c=\"35582\">POST</st>* <st c=\"35586\">transactions.</st> <st c=\"35601\">The following</st> `<st c=\"35615\">UpdateComplainantRestAPI</st>`<st c=\"35639\">,</st> `<st c=\"35641\">DeleteComplaintRestAPI</st>`<st c=\"35663\">, and</st> `<st c=\"35669\">UpdateComplaintRestAPI</st>` <st c=\"35691\">resources implement HTTP</st> *<st c=\"35717\">PATCH</st>*<st c=\"35722\">,</st> *<st c=\"35724\">DELETE</st>*<st c=\"35730\">, and</st> *<st c=\"35736\">PUT</st>*<st c=\"35739\">, respectively:</st>\n\n```", "```py\n\n\t\t\t<st c=\"36129\">The</st> `<st c=\"36134\">Resource</st>` <st c=\"36142\">class’</st> `<st c=\"36150\">patch()</st>` <st c=\"36157\">method implements the HTTP</st> *<st c=\"36185\">PATCH</st>* <st c=\"36190\">request when overridden.</st> <st c=\"36216\">Like HTTP</st> *<st c=\"36226\">GET</st>*<st c=\"36229\">,</st> `<st c=\"36231\">patch()</st>` <st c=\"36238\">can also accept path variables or request parameters by declaring local parameters to the override.</st> <st c=\"36339\">The</st> `<st c=\"36343\">id</st>` <st c=\"36345\">parameter in the</st> `<st c=\"36363\">patch()</st>` <st c=\"36370\">method of</st> `<st c=\"36381\">UpdateComplaintRestAPI</st>` <st c=\"36403\">is a path variable for a complainant ID.</st> <st c=\"36445\">This is</st> <st c=\"36452\">required to retrieve the</st> <st c=\"36478\">complainant’s profile:</st>\n\n```", "```py\n\n\t\t\t<st c=\"36843\">The</st> `<st c=\"36848\">delete()</st>` <st c=\"36856\">override of</st> `<st c=\"36869\">DeleteComplaintRestAPI</st>` <st c=\"36891\">also has an</st> `<st c=\"36904\">id</st>` <st c=\"36906\">parameter that’s used to delete</st> <st c=\"36939\">the</st> <st c=\"36942\">complaint:</st>\n\n```", "```py\n\n\t\t\t<st c=\"37340\">To utilize all the preceding resources, the Flask-RESTful extension module has an</st> `<st c=\"37423\">Api</st>` <st c=\"37426\">class that must be instantiated with</st> <st c=\"37463\">the</st> `<st c=\"37468\">Flask</st>` <st c=\"37473\">or</st> `<st c=\"37477\">Blueprint</st>` <st c=\"37486\">instance as its constructor argument.</st> <st c=\"37525\">Since</st> <st c=\"37530\">the</st> `<st c=\"37535\">ch04-api</st>` <st c=\"37543\">project uses blueprints, the following</st> `<st c=\"37583\">__init__.py</st>` <st c=\"37594\">file of the complaint blueprint module highlights how to create the</st> `<st c=\"37663\">Api</st>` <st c=\"37666\">instance and map all these resources with their respective</st> <st c=\"37726\">URL patterns:</st>\n\n```", "```py\n pip install flask-session\n```", "```py\n<st c=\"39598\">from flask_session import Session</st> app = Flask(__name__)\napp.config.from_file('config-dev.toml', toml.load) <st c=\"39705\">sess = Session()</st>\n<st c=\"39745\">Session</st> instance is only used for configuration and not for session handling per se. Flask’s <st c=\"39838\">session</st> proxy object should always directly access the session data for storage and retrieval.\n\t\t\t<st c=\"39932\">Afterward, set some Flask-Session configuration variables, such as</st> `<st c=\"40000\">SESSION_FILE_THRESHOLD</st>`<st c=\"40022\">, which sets the maximum number of data the session stores before deletion, and</st> `<st c=\"40102\">SESSION_TYPE</st>`<st c=\"40114\">, which determines the kind of data storage for the session data.</st> <st c=\"40180\">The following are some</st> `<st c=\"40203\">SESSION_TYPE</st>` <st c=\"40215\">options:</st>\n\n\t\t\t\t*   `<st c=\"40224\">null</st>` <st c=\"40229\">(default): This utilizes</st> `<st c=\"40255\">NullSessionInterface</st>`<st c=\"40275\">, which triggers an</st> `<st c=\"40295\">Exception</st>` <st c=\"40304\">error.</st>\n\t\t\t\t*   `<st c=\"40311\">redis</st>`<st c=\"40317\">: This utilizes</st> `<st c=\"40334\">RedisSessionInterface</st>` <st c=\"40355\">to use</st> *<st c=\"40363\">Redis</st>* <st c=\"40368\">as a</st> <st c=\"40374\">data store.</st>\n\t\t\t\t*   `<st c=\"40385\">memcached</st>`<st c=\"40395\">: This utilizes</st> `<st c=\"40412\">MemcachedSessionInterface</st>` <st c=\"40437\">to</st> <st c=\"40441\">use</st> *<st c=\"40445\">memcached</st>*<st c=\"40454\">.</st>\n\t\t\t\t*   `<st c=\"40455\">filesystem</st>`<st c=\"40466\">: This utilizes</st> `<st c=\"40483\">FileSystemSessionInterface</st>` <st c=\"40509\">to use the</st> *<st c=\"40521\">filesystem</st>* <st c=\"40531\">as</st> <st c=\"40535\">the datastore.</st>\n\t\t\t\t*   `<st c=\"40549\">mongodb</st>`<st c=\"40557\">: This utilizes</st> `<st c=\"40574\">MongoDBSessionInterface</st>` <st c=\"40597\">to use the</st> <st c=\"40609\">MongoDB database.</st>\n\t\t\t\t*   `<st c=\"40626\">sqlalchemy</st>`<st c=\"40637\">: This uses</st> `<st c=\"40650\">SqlAlchemySessionInterface</st>` <st c=\"40676\">to apply the SQLAlchemy ORM for a</st> <st c=\"40710\">relational database as</st> <st c=\"40734\">session</st> <st c=\"40741\">storage.</st>\n\n\t\t\t<st c=\"40750\">The module can also recognize Flask session config variables such</st> <st c=\"40817\">as</st> `<st c=\"40820\">SESSION_LIFETIME</st>`<st c=\"40836\">.</st>\n\t\t\t<st c=\"40837\">The following configuration variables are registered in the</st> `<st c=\"40898\">config-dev.toml</st>` <st c=\"40913\">file for</st> <st c=\"40923\">both applications:</st>\n\n```", "```py\n\n\t\t\t<st c=\"41047\">Lastly, start the Flask server to load all the configurations and check the module’s integration.</st> <st c=\"41146\">The module will establish database connectivity to the specified data storage at server startup.</st> <st c=\"41243\">In our case, the</st> *<st c=\"41260\">Flask-Session</st>* <st c=\"41273\">module will create a</st> `<st c=\"41295\">flask_session</st>` <st c=\"41308\">directory inside the project</st> <st c=\"41338\">directory when the</st> <st c=\"41357\">application starts.</st>\n\t\t\t*<st c=\"41376\">Figure 4</st>**<st c=\"41385\">.7</st>* <st c=\"41387\">shows the</st> `<st c=\"41398\">flask_session</st>` <st c=\"41411\">folder and</st> <st c=\"41423\">its content:</st>\n\t\t\t![Figure 4.7 – The session files inside the flask_session folder](img/B19383_04_7.jpg)\n\n\t\t\t<st c=\"41502\">Figure 4.7 – The session files inside the flask_session folder</st>\n\t\t\t<st c=\"41564\">With everything set up, utilize</st> <st c=\"41596\">Flask’s</st> `<st c=\"41605\">session</st>` <st c=\"41612\">to handle session data.</st> <st c=\"41637\">This can be seen in</st> `<st c=\"41657\">login_db_auth()</st>`<st c=\"41672\">, which stores</st> `<st c=\"41687\">username</st>` <st c=\"41695\">as a session attribute for other</st> <st c=\"41729\">views’ reach:</st>\n\n```", "```py\n\n\t\t\t<st c=\"42334\">Similar to</st> *<st c=\"42346\">Flask-Session</st>*<st c=\"42359\">, another</st> <st c=\"42369\">extension module that can help</st> <st c=\"42399\">build a better enterprise-grade Flask application is the</st> *<st c=\"42457\">Flask-Caching</st>* <st c=\"42470\">module.</st>\n\t\t\t<st c=\"42478\">Applying caching using Flask-Caching</st>\n\t\t\t`<st c=\"42794\">BaseCache</st>` <st c=\"42803\">class from its</st> `<st c=\"42819\">flask_caching.backends.base</st>` <st c=\"42846\">module.</st>\n\t\t\t<st c=\"42854\">Before we can configure Flask-Caching, we must install the</st> `<st c=\"42914\">flask-caching</st>` <st c=\"42927\">module via the</st> `<st c=\"42943\">pip</st>` <st c=\"42946\">command:</st>\n\n```", "```py\n\n\t\t\t<st c=\"42981\">Then, we must register some of its configuration variables in the configuration file, such as</st> `<st c=\"43076\">CACHE_TYPE</st>`<st c=\"43086\">, which sets the cache type suited for the application, and</st> `<st c=\"43146\">CACHE_DEFAULT_TIMEOUT</st>`<st c=\"43167\">, which sets the caching timeout.</st> <st c=\"43201\">The following are the applications’ caching configuration variables declared in their respective</st> `<st c=\"43298\">config-dev.toml</st>` <st c=\"43313\">files:</st>\n\n```", "```py\n\n\t\t\t<st c=\"43428\">Here,</st> `<st c=\"43435\">CACHE_DIR</st>` <st c=\"43444\">sets the cache folder for the filesystem cache type, while</st> `<st c=\"43504\">CACHE_THRESHOLD</st>` <st c=\"43519\">sets the maximum number of cached items before it starts</st> <st c=\"43577\">deleting some.</st>\n\t\t\t<st c=\"43591\">Afterward, to avoid cyclic collisions, create a</st> <st c=\"43639\">separate module file, such as</st> `<st c=\"43670\">main_cache.py</st>`<st c=\"43683\">, to instantiate</st> <st c=\"43699\">the</st> `<st c=\"43704\">Cache</st>` <st c=\"43709\">class from the</st> `<st c=\"43725\">flask_caching</st>` <st c=\"43738\">module.</st> <st c=\"43747\">Access to the</st> `<st c=\"43761\">cache</st>` <st c=\"43766\">instance must be done from</st> `<st c=\"43794\">main_cache.py</st>`<st c=\"43807\">, not</st> `<st c=\"43813\">main.py</st>`<st c=\"43820\">, even though the final setup of the extension module occurs in</st> `<st c=\"43884\">main.py</st>`<st c=\"43891\">. The following snippet integrates the</st> *<st c=\"43930\">Flask-Caching</st>* <st c=\"43943\">module into the</st> <st c=\"43960\">Flask platform:</st>\n\n```", "```py\n<st c=\"44910\">from main_cache import cache</st> @complainant_bp.route('/complainant/list/all', methods=['GET']) <st c=\"45004\">@cache.cached(timeout=50, key_prefix=\"all_complaints\")</st> def list_all_complainant():\n     repo:ComplainantRepository = ComplainantRepository(db_session)\n     records = repo.select_all()\n     return render_template('complainant_list_all.html', records=records), 200\n```", "```py\n class ListComplaintDetailsRestAPI(Resource): <st c=\"46114\">@cache.cached(timeout=50)</st> def get(self):\n        repo = ComplaintDetailsRepository(db_session)\n        records = repo.select_all()\n        compdetails_rec = [rec.to_json() for rec in records]\n        return make_response(jsonify(compdetails_rec), 201)\n```", "```py\n<st c=\"46712\">from main_cache import cache</st> class LoginRepository:\n    def __init__(self, sess:Session):\n        self.sess = sess\n    … … … … … … <st c=\"46828\">@cache.cached(timeout=50, key_prefix='all_login')</st> def select_all(self) -> List[Any]:\n        users = self.sess.query(Login).all()\n        return users\n    … … … … … …\n```", "```py\n<st c=\"47303\">from main_cache import cache</st> class ComplaintRepository:\n    def __init__(self, sess:Session):\n        self.sess = sess <st c=\"47410\">@cache.memoize(timeout=50)</st> def select_all(self) -> List[Any]:\n        complaint = self.sess.query(Complaint).all()\n        return complaint\n```", "```py\n pip install flask-mail\n```", "```py\n<st c=\"48569\">from mail_config import mail</st> app = Flask(__name__, template_folder='pages', static_folder=\"resources\")\napp.config.from_file('config-dev.toml', toml.load) <st c=\"48724\">mail.init_app(app)</st>\n```", "```py\n MAIL_SERVER =\"smtp.gmail.com\"\nMAIL_PORT = 465 <st c=\"48986\">MAIL_USERNAME = \"your_email@gmail.com\"</st>\n<st c=\"49024\">MAIL_PASSWORD = \"xxxxxxxxxxxxxxxx\"</st> MAIL_USE_TLS = false\nMAIL_USE_SSL = true\n```", "```py\n<st c=\"49640\">from flask_mail import Message</st>\n<st c=\"49671\">from mail_config import mail</st> @complaint_bp.route(\"/complaint/email\")\ndef email_complaint(): <st c=\"49764\">form:EmailComplaintForm = EmailComplaintForm()</st> if request.method == 'GET':\n        return render_template('email_form.html', form=form), 200\n    if form.validate_on_submit():\n       try:\n           recipients = [rec for rec in str(form.to.data).split(';')]\n           msg = <st c=\"49997\">Message(form.subject, sender = 'your_email@gmail.com', recipients = recipients)</st><st c=\"50076\">msg.body = form.message.data</st><st c=\"50105\">mail.send(msg)</st> form:EmailComplaintForm = EmailComplaintForm()\n           return render_template('email_.html', form=form, message='Email sent.'), 200\n       except:\n         return render_template('email_.html', form=form), 500\n```", "```py\n\n```", "```py\n\n```", "```py\n\n```", "```py\n\n```", "```py\n\n```"]