["```py\n# File: main.py\nfrom kivy.app import App\n\nclass ClockApp(App):\n    pass\n\nif __name__ == '__main__':\n    ClockApp().run()\n\n# File: clock.kv\nBoxLayout:\n    orientation: 'vertical'\n\n    Label:\n        text: '00:00:00'\n```", "```py\nLabel:\n    font_name: 'Lobster.ttf'\n```", "```py\n# In Python code\nLabelBase.register(name=\"Roboto\",\n    fn_regular=\"Roboto-Regular.ttf\",\n    fn_bold=\"Roboto-Bold.ttf\",\n    fn_italic=\"Roboto-Italic.ttf\",\n    fn_bolditalic=\"Roboto-BoldItalic.ttf\")\n```", "```py\nfrom kivy.core.text import LabelBase\n\nLabelBase.register(name='Roboto',\n                   fn_regular='Roboto-Thin.ttf',\n                   fn_bold='Roboto-Medium.ttf')\n```", "```py\n# In clock.kv\nLabel:\n    text: '00:00:00'\n    font_name: 'Roboto'\n    font_size: 60\n```", "```py\nLabel:\n    text: '[b]00[/b]:00:00'\n    markup: True\n```", "```py\nfrom kivy.core.window import Window\nfrom kivy.utils import get_color_from_hex\n\nWindow.clearcolor = get_color_from_hex('#101216')\n```", "```py\n# Don't do this\nwhile True:\n    update_time()  # some function that displays time\n    sleep(1)\n```", "```py\nLabel:\n    id: time\n```", "```py\ndef update_time(self, nap):\n    self.root.ids.time.text = strftime('[b]%H[/b]:%M:%S')\n```", "```py\ndef on_start(self):\n    Clock.schedule_interval(self.update_time, 1)\n```", "```py\n# In main.py\nfrom kivy.properties import ObjectProperty\nfrom kivy.uix.boxlayout import BoxLayout\n\nclass ClockLayout(BoxLayout):\n    time_prop = ObjectProperty(None)\n```", "```py\nClockLayout:\n    time_prop: time\n\n    Label:\n        id: time\n```", "```py\nBoxLayout:\n    orientation: 'vertical'\n\n    Label:\n        id: time\n        text: '[b]00[/b]:00:00'\n        font_name: 'Roboto'\n        font_size: 60\n        markup: True\n\n    BoxLayout:\n        height: 90\n        orientation: 'horizontal'\n        padding: 20\n        spacing: 20\n        size_hint: (1, None)\n\n        Button:\n            text: 'Start'\n            font_name: 'Roboto'\n            font_size: 25\n            bold: True\n\n        Button:\n            text: 'Reset'\n            font_name: 'Roboto'\n            font_size: 25\n            bold: True\n\n    Label:\n        id: stopwatch\n        text: '00:00.[size=40]00[/size]'\n        font_name: 'Roboto'\n        font_size: 60\n        markup: True\n```", "```py\n<p><font face=\"Helvetica\">Part 1</font></p>\n<p><font face=\"Helvetica\">Part 2</font></p>\n\n```", "```py\np {font-family: Helvetica}\n\n```", "```py\n<p style=\"font-family: Times\">Part 3</p>\n\n```", "```py\n<Label>:\n    font_name: 'Roboto'\n    font_size: 60\n    markup: True\n```", "```py\n<RobotoButton@Button>:\n    font_name: 'Roboto'\n    font_size: 25\n    bold: True\n```", "```py\nRobotoButton:\n    text: 'Start'\n```", "```py\n<RobotoButton@Button>:\n    background_normal: 'button_normal.png'\n    background_down: 'button_down.png'\n    border: (2, 2, 2, 2)\n```", "```py\nRobotoButton:\n    text: 'Reset'\n    background_normal: 'red_button_normal.png'\n    background_down: 'red_button_down.png'\n```", "```py\ndef on_start(self):\n    Clock.schedule_interval(self.update, 0.016)\n\ndef update(self, nap):\n    pass\n```", "```py\nclass ClockApp(App):\n    sw_seconds = 0\n\n    def update(self, nap):\n        self.sw_seconds += nap\n```", "```py\nminutes, seconds = divmod(self.sw_seconds, 60)\n```", "```py\nminutes = self.sw_seconds / 60\nseconds = self.sw_seconds % 60\n```", "```py\nint(seconds * 100 % 100)\n```", "```py\ndef update_time(self, nap):\n    self.sw_seconds += nap\n    minutes, seconds = divmod(self.sw_seconds, 60)\n    self.root.ids.stopwatch.text = (\n        '%02d:%02d.[size=40]%02d[/size]' %\n        (int(minutes), int(seconds),\n         int(seconds * 100 % 100)))\n```", "```py\nClock.schedule_interval(self.update_time, 0)\n```", "```py\ndef start_stop(self):\n    self.root.ids.start_stop.text = ('Start'\n        if self.sw_started else 'Stop')\n    self.sw_started = not self.sw_started\n\ndef reset(self):\n    if self.sw_started:\n        self.root.ids.start_stop.text = 'Start'\n        self.sw_started = False\n    self.sw_seconds = 0\n```", "```py\nclass ClockApp(App):\n    sw_started = False\n    sw_seconds = 0\n\n    def update_clock(self, nap):\n        if self.sw_started:\n            self.sw_seconds += nap\n```", "```py\nRobotoButton:\n    id: start_stop\n    text: 'Start'\n    on_press: app.start_stop()\n\nRobotoButton:\n    id: reset\n    text: 'Reset'\n    on_press: app.reset()\n```"]