["```py\nclass Singleton(type):\n    def __init__(cls, name, bases, dict):\n        super(Singleton, cls).__init__(name, bases, dict)\n        cls.instance = None\n\n    def __call__(cls, *args, **kw):\n        if not cls.instance:\n            # Not created or has been Destroyed\n            obj = super(Singleton, cls).__call__(*args, **kw)\n            cls.instance = obj\n            cls.instance.SetupWindow()\n\n        return cls.instance\n\n```", "```py\nclass SingletonDialog(wx.Dialog):\n    __metaclass__ = Singleton\n\n    def SetupWindow(self):\n        \"\"\"Hook method for initializing window\"\"\"\n        self.field = wx.TextCtrl(self)\n        self.check = wx.CheckBox(self, label=\"Enable Foo\")\n\n        # Layout\n        vsizer = wx.BoxSizer(wx.VERTICAL)\n        label = wx.StaticText(self, label=\"FooBar\")\n        hsizer = wx.BoxSizer(wx.HORIZONTAL)\n        hsizer.AddMany([(label, 0, wx.ALIGN_CENTER_VERTICAL),\n                        ((5, 5), 0),\n                        (self.field, 0, wx.EXPAND)])\n        btnsz = self.CreateButtonSizer(wx.OK)\n        vsizer.AddMany([(hsizer, 0, wx.ALL|wx.EXPAND, 10),\n                        (self.check, 0, wx.ALL, 10),\n                        (btnsz, 0, wx.EXPAND|wx.ALL, 10)])\n        self.SetSizer(vsizer)\n        self.SetInitialSize()\n\n```", "```py\nclass SingletonDialog(wx.Dialog):\ninstance = None\n\n```", "```py\nSingletonDialog.instance = SingletonDialog(*args,**kwargs)\n\n```", "```py\nimport wx\nfrom wx.lib.pubsub import Publisher\n\n# PubSub message classification\nMSG_CONFIG_ROOT = ('config',)\n\nclass Configuration(object):\n    \"\"\"Configuration object that provides\n    notifications.\n    \"\"\"\n    def __init__(self):\n        super(Configuration, self).__init__()\n\n        # Attributes\n        self._data = dict()\n\n    def SetValue(self, key, value):\n        self._data[key] = value\n        # Notify all observers of config change\n        Publisher.sendMessage(MSG_CONFIG_ROOT + (key,),\n                              value)\n\n    def GetValue(self, key):\n        \"\"\"Get a value from the configuration\"\"\"\n        return self._data.get(key, None)\n\n```", "```py\nclass ObserverApp(wx.App):\n    def OnInit(self):\n        self.config = Configuration()\n        self.frame = ObserverFrame(None,\n                                   title=\"Observer Pattern\")\n        self.frame.Show()\n        self.configdlg = ConfigDialog(self.frame,\n                                      title=\"Config Dialog\")\n        self.configdlg.Show()\n        return True\n\n    def GetConfig(self):\n        return self.config\n\n```", "```py\nclass ConfigDialog(wx.Dialog):\n    \"\"\"Simple setting dialog\"\"\"\n    def __init__(self, parent, *args, **kwargs):\n        super(ConfigDialog, self).__init__(*args, **kwargs)\n\n        # Attributes\n        self.panel = ConfigPanel(self)\n\n        # Layout\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.panel, 1, wx.EXPAND)\n        self.SetSizer(sizer)\n        self.SetInitialSize((300, 300))\n\nclass ConfigPanel(wx.Panel):\n    def __init__(self, parent):\n        super(ConfigPanel, self).__init__(parent)\n\n        # Attributes\n        self.picker = wx.FontPickerCtrl(self)\n\n        # Setup\n        self.__DoLayout()\n\n        # Event Handlers\n        self.Bind(wx.EVT_FONTPICKER_CHANGED,\n                  self.OnFontPicker)\n\n    def __DoLayout(self):\n        vsizer = wx.BoxSizer(wx.VERTICAL)\n        hsizer = wx.BoxSizer(wx.HORIZONTAL)\n\n        vsizer.AddStretchSpacer()\n        hsizer.AddStretchSpacer()\n        hsizer.AddWindow(self.picker)\n        hsizer.AddStretchSpacer()\n        vsizer.Add(hsizer, 0, wx.EXPAND)\n        vsizer.AddStretchSpacer()\n        self.SetSizer(vsizer)\n\n```", "```py\n    def OnFontPicker(self, event):\n        \"\"\"Event handler for the font picker control\"\"\"\n        font = self.picker.GetSelectedFont()\n        # Update the configuration\n        config = wx.GetApp().GetConfig()\n        config.SetValue('font', font)\n\n```", "```py\nclass ObserverFrame(wx.Frame):\n    \"\"\"Window that observes configuration messages\"\"\"\n    def __init__(self, parent, *args, **kwargs):\n        super(ObserverFrame, self).__init__(*args, **kwargs)\n\n        # Attributes\n        self.txt = wx.TextCtrl(self, style=wx.TE_MULTILINE)\n        self.txt.SetValue(\"Change the font in the config \"\n                          \"dialog and see it update here.\")\n\n        # Observer of configuration changes\n        Publisher.subscribe(self.OnConfigMsg, MSG_CONFIG_ROOT)\n\n    def __del__(self):\n        # Unsubscribe when deleted\n        Publisher.unsubscribe(self.OnConfigMsg)\n\n```", "```py\n    def OnConfigMsg(self, msg):\n        \"\"\"Observer method for config change messages\"\"\"\n        if msg.topic[-1] == 'font':\n            # font has changed so update controls\n            self.SetFont(msg.data)\n            self.txt.SetFont(msg.data)\n\nif __name__ == '__main__':\n    app = ObserverApp(False)\n    app.MainLoop()\n\n```", "```py\nclass BaseDialogStrategy:\n    \"\"\"Defines the strategy interface\"\"\"\n    def GetWindowObject(self, parent):\n        \"\"\"Must return a Window object\"\"\"\n        raise NotImplementedError, \"Required method\"\n\n    def DoOnOk(self):\n        \"\"\"@return: bool (True to exit, False to not)\"\"\"\n        return True\n\n    def DoOnCancel(self):\n        \"\"\"@return: bool (True to exit, False to not)\"\"\"\n        return True\n\n```", "```py\nclass StrategyDialog(wx.Dialog):\n    \"\"\"Simple dialog with builtin OK/Cancel button and\n    strategy based content area.   \n    \"\"\"\n    def __init__(self, parent, strategy, *args, **kwargs):\n        super(StrategyDialog, self).__init__(parent,\n                                             *args,\n                                             **kwargs)\n\n        # Attributes\n        self.strategy = strategy\n        self.pane = self.strategy.GetWindowObject(self)\n\n        # Layout\n        self.__DoLayout()\n\n        # Event Handlers\n        self.Bind(wx.EVT_BUTTON, self.OnButton)\n\n```", "```py\n    def __DoLayout(self):\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.pane, 1, wx.EXPAND)\n        btnsz = self.CreateButtonSizer(wx.OK|wx.CANCEL)\n        sizer.Add(btnsz, 0, wx.EXPAND|wx.ALL, 8)\n        self.SetSizer(sizer)\n\n    def GetStrategy(self):\n        return self.strategy\n\n    def OnButton(self, event):\n        evt_id = event.GetId()\n        bCanExit = False\n        if evt_id == wx.ID_OK:\n            bCanExit = self.strategy.DoOnOk()\n        elif evt_id == wx.ID_OK:\n            bCanExit = self.strategy.DoOnCancel()\n        else:\n            evt.Skip()\n\n        if bCanExit:\n            self.EndModal(evt_id)\n\n```", "```py\nclass FileTreeStrategy(BaseDialogStrategy):\n    \"\"\"File chooser strategy\"\"\"\n    def GetWindowObject(self, parent):\n        assert not hasattr(self, 'dirctrl')\n        self.dirctrl = wx.GenericDirCtrl(parent)\n        return self.dirctrl\n\n    def DoOnOk(self):\n        path = self.dirctrl.GetPath()\n        if path:\n            wx.MessageBox(\"You selected: %s\" % path)\n            return True\n        else:\n            wx.MessageBox(\"No file selected!\")\n            return False\n\n```", "```py\n# Note: ‘self’ is some window object (i.e a Frame)\nstrategy = FileTreeStrategy()\ndlg = StrategyDialog(self, strategy, title=”Choose File”)\ndlg.ShowModal()\n\n```", "```py\nclass ModelInterface(object):\n    \"\"\"Defines an interface for a simple value\n    generator model.\n    \"\"\"\n    def __init__(self):\n        super(ModelInterface, self).__init__()\n\n        # Attributes\n        self.val = 0\n        self.observers = list()\n\n    def Generate(self):\n        \"\"\"Interface method to be implemented by\n        subclasses.\n        \"\"\"\n        raise NotImplementedError\n\n    def SetValue(self, val):\n        self.val = val\n        self.NotifyObservers()\n\n    def GetValue(self):\n        return self.val\n\n    def RegisterObserver(self, callback):\n        \"\"\"Register an observer callback\n        @param: callable(newval)\n        \"\"\"\n        self.observers.append(callback)\n\n    def NotifyObservers(self):\n        \"\"\"Notify all observers of current value\"\"\"\n        for observer in self.observers:\n            observer()\n\n```", "```py\nclass ControllerInterface(object):\n    \"\"\"Defines an interface a value generator\n    controller.\n    \"\"\"\n    def __init__(self, model):\n        super(ControllerInterface, self).__init__()\n\n        # Attributes\n        self.model = model\n        self.view = TheView(None, self, self.model,\n                            \"Fibonacci Generator\")\n\n        # Setup\n        self.view.Show()\n\n    def DoGenerateNext(self):\n        \"\"\"User action request next value\"\"\"\n        raise NotImplementedError\n\n```", "```py\nclass FibonacciModel(ModelInterface):\n    def Generate(self):\n        cval = self.GetValue()\n        # Get the next one\n        for fib in self.fibonacci():\n            if fib > cval:\n                self.SetValue(fib)\n                break\n\n    @staticmethod\n    def fibonacci():\n        \"\"\"Fibonacci generator method\"\"\"\n        a, b = 0, 1\n        while True1:\n            yield a\n            a, b = b, a + b\n\n```", "```py\nclass FibonacciController(ControllerInterface):\n    def DoGenerateNext(self):\n        self.view.EnableButton(False)\n        self.model.Generate()\n\n```", "```py\nclass TheView(wx.Frame):\n    def __init__(self, parent, controller, model, title):\n        \"\"\"The view for \"\"\"\n        super(TheView, self).__init__(parent, title=title)\n\n        # Attributes\n        self.panel = ViewPanel(self, controller, model)\n\n        # Layout\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.panel, 1, wx.EXPAND)\n        self.SetSizer(sizer)\n        self.SetInitialSize((300, 300))\n\n    def EnableButton(self, enable=True):\n        self.panel.button.Enable(enable)\n\n```", "```py\nclass ViewPanel(wx.Panel):\n    def __init__(self, parent, controller, model):\n        super(ViewPanel, self).__init__(parent)\n\n        # Attributes\n        self.model = model\n        self.controller = controller\n        initial = str(self.model.GetValue())\n        self.text = wx.TextCtrl(self, value=initial)\n        self.button = wx.Button(self, label=\"Generate\")\n\n        # Layout\n        self.__DoLayout()\n\n        # Setup\n        self.model.RegisterObserver(self.OnModelUpdate)\n\n        # Event Handlers\n        self.Bind(wx.EVT_BUTTON, self.OnAction)\n\n    def __DoLayout(self):\n        vsizer = wx.BoxSizer(wx.VERTICAL)\n        hsizer = wx.BoxSizer(wx.HORIZONTAL)\n\n        vsizer.AddStretchSpacer()\n        vsizer.Add(self.text, 0, wx.ALIGN_CENTER|wx.ALL, 8)\n        hsizer.AddStretchSpacer()\n        hsizer.AddWindow(self.button)\n        hsizer.AddStretchSpacer()\n        vsizer.Add(hsizer, 0, wx.EXPAND)\n        vsizer.AddStretchSpacer()\n        self.SetSizer(vsizer)\n\n```", "```py\n    def OnModelUpdate(self):\n        \"\"\"Observer method\"\"\"\n        value = self.model.GetValue()\n        self.text.SetValue(str(value))\n        self.button.Enable(True)\n\n```", "```py\n    def OnAction(self, event):\n        self.controller.DoGenerateNext()\n\n```", "```py\nclass ModelViewApp(wx.App):\n    def OnInit(self):\n        self.model = FibonacciModel()\n        self.controller = FibonacciController(self.model)\n        return True\n\nif __name__ == '__main__':\n    app = ModelViewApp(False)\n    app.MainLoop()\n\n```", "```py\nimport os\nimport time\nimport wx\n\nclass LoggerMixin:\n    def __init__(self, logfile=\"log.txt\"):\n        \"\"\"@keyword logfile: path to log output file\"\"\"\n        # Attributes\n        self.logfile = logfile\n\n    def Log(self, msg):\n        \"\"\"Write a message to the log.\n        Automatically adds timestamp and originating class\n        information.\n        \"\"\"\n        if self.logfile is None:\n            return\n\n        # Open and write to the log file\n        with open(self.logfile, 'ab') as handle:\n            # Make a time stamp\n            ltime = time.localtime(time.time())\n            tstamp = \"%s:%s:%s\" % (str(ltime[3]).zfill(2),\n                                   str(ltime[4]).zfill(2),\n                                   str(ltime[5]).zfill(2))\n            # Add client info\n            client = getattr(self, 'GetName',\n                             lambda: \"unknown\")()\n            # Construct the final message\n            output = \"[%s][%s] %s%s\" % (tstamp, client,\n                                        msg, os.linesep)\n            handle.write(output)\n\n```", "```py\nclass MixinRecipeFrame(wx.Frame, LoggerMixin):\n    \"\"\"Main application window\"\"\"\n    def __init__(self, parent, *args, **kwargs):\n        wx.Frame.__init__(self, parent, *args, **kwargs)\n        LoggerMixin.__init__(self)\n        self.Log(\"Creating instance...\")\n\n        # Attributes\n        self.panel = MixinRecipePanel(self)\n\n        # Layout\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.panel, 1, wx.EXPAND)\n        self.SetSizer(sizer)\n        self.SetInitialSize((300, 300))\n\n```", "```py\n[17:42:24][unknown] OnInit called\n[17:42:24][frame] Creating instance...\n[17:42:24][panel] Begin Layout\n[17:42:24][panel] End Layout\n[17:42:26][panel] Button -203: Clicked\n[17:42:26][panel] Button -203: Clicked \n\n```", "```py\nclass expose(object):\n    \"\"\"Expose a panels method to a to a specified class\n    The panel that is having its method exposed by this\n    decorator must be a child of the class its exposing\n    itself too.\n    \"\"\"\n    def __init__(self, cls):\n        \"\"\"@param cls: class to expose the method to\"\"\"\n        super(expose, self).__init__()\n        self.cls = cls\n\n```", "```py\n    def __call__(self, funct):\n        \"\"\"Dynamically bind and expose the function\n        to the toplevel window class.\n        \"\"\"\n        fname = funct.func_name\n        def delegate(*args, **kwargs):\n            \"\"\"Delegate method for panel\"\"\"\n            self = args[0] # The TLW\n            # Find the panel this method belongs to\n            panel = None\n            for child in self.GetChildren():\n                if isinstance(child, wx.Panel) and \\\n                   hasattr(child, fname):\n                    panel = child\n                    break\n            assert panel is not None, \"No matching child!\"\n            # Call the panels method\n            return getattr(panel, fname)(*args[1:], **kwargs)\n\n        # Bind the new delegate method to the tlw class\n        delegate.__name__ = funct.__name__\n        delegate.__doc__ = funct.__doc__\n        setattr(self.cls, fname, delegate)\n\n        # Return original function to the current class\n        return funct\n\n```"]