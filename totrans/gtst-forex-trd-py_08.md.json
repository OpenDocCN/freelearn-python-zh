["```py\npython -m pip install -U pip\npython -m pip install -U matplotlib\n```", "```py\nconda install matplotlib\n```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\ny = range(10)\nplt.plot(y)\nplt.show()\n```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    import numpy as np\n    ```", "```py\n    y = np.arange(0, 1, 0.1)\n    ```", "```py\n    plt.plot(y)\n    ```", "```py\n    plt.show()\n    ```", "```py\n    x = np.arange(0, 1, 0.1)\n    ```", "```py\nplt.plot(x, y)\n```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    import csv\n    ```", "```py\n    f = open(\"/Volumes/Storage HDD/Data/LMAX EUR_USD 1 Minute.txt\")\n    ```", "```py\n    csvFile = csv.DictReader(f)\n    ```", "```py\nDate,Time,Open,High,Low,Close,UpVolume,DownVolume,\nTotalVolume,UpTicks,DownTicks,TotalTicks\n```", "```py\n    all_data = list(csvFile)\n    ```", "```py\n[{'Date': '11/12/2020', 'Time': '17:45:00', 'Open': '1.18136', 'High': '1.18143', 'Low': '1.18125', 'Close': '1.18140', 'UpVolume': '249', 'DownVolume': '494', 'TotalVolume': '743', 'UpTicks': '7', 'DownTicks': '5', 'TotalTicks': '12'}, {'Date': '11/12/2020', 'Time': '17:46:00', 'Open': '1.18140', 'High': '1.18156', 'Low': '1.18138', 'Close': '1.18154', 'UpVolume': '399', 'DownVolume': '299', 'TotalVolume': '698', 'UpTicks': '8', 'DownTicks': '4', 'TotalTicks': '12'}, {'Date': '11/12/2020', 'Time': '17:47:00', 'Open': '1.18154', 'High': '1.18156', 'Low': '1.18145', 'Close': '1.18155', 'UpVolume': '500', 'DownVolume': '650', 'TotalVolume': '1150', 'UpTicks': '5', 'DownTicks': '6', 'TotalTicks': '11'}]\n```", "```py\n    close = [float(bar['Close']) for bar in all_data[-100:]]\n    ```", "```py\nplt.plot(close)\nplt.show()\n```", "```py\n    time = [bar['Time'] for bar in all_data[-100:]]\n    ```", "```py\n    plt.plot(time, close)\n    ```", "```py\n    fig = plt.figure()\n    ```", "```py\n    ax = fig.add_subplot()\n    ```", "```py\n    ax.set_xticks(np.arange(0, len(time) + 1, 15))\n    ```", "```py\n    plt.xticks(rotation=45)\n    ```", "```py\n    plt.plot(time, close)\n    ```", "```py\n    plt.show()\n    ```", "```py\n    import csv\n    ```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    import numpy as np\n    ```", "```py\n    f = open(\"/Volumes/Storage HDD/Data/LMAX EUR_USD 1 Minute.txt\")\n    ```", "```py\n    csvFile = csv.DictReader(f)\n    ```", "```py\n    all_data = list(csvFile)\n    ```", "```py\nstarting_bar_number = 0\nfor bar in all_data:\n    if bar['Date'] == '12/12/2019':\n        break\n    starting_bar_number += 1\n```", "```py\n    close = [float(bar['Close']) for bar in all_data[starting_bar_number:starting_bar_number + 100]]\n    ```", "```py\n    time = [bar['Time'] for bar in all_data[starting_bar_number:starting_bar_number + 100]]\n    ```", "```py\nfig = plt.figure()\nax = fig.add_subplot()\nax.set_xticks(np.arange(0, len(time) + 1, 15))\nplt.xticks(rotation=45)\nplt.plot(time, close)\nplt.show()\n```", "```py\npip install pandas\n```", "```py\nconda install pandas\n```", "```py\nimport mplfinance as mpf # this is for future use with charting\nimport pandas\nfile_name = \"/Volumes/Storage HDD/Data/LMAX EUR_USD 1 Minute.txt\"\nsource_data = pandas.read_csv(file_name)\nprint(source_data)\n```", "```py\n               Date      Time     Open  ...  UpTicks  DownTicks  \nTotalTicks\n0         1/27/2015  13:29:00  1.12942  ...        3          2\n           8\n1         1/27/2015  13:30:00  1.12947  ...        4          7\n          12\n2         1/27/2015  13:31:00  1.12953  ...        9          4\n          14\n3         1/27/2015  13:32:00  1.12944  ...        2         10\n          13\n4         1/27/2015  13:33:00  1.12876  ...        5          4\n          12\n...             ...       ...      ...  ...      ...        ...\n         ...\n2136274  11/12/2020  17:43:00  1.18134  ...        4          7\n          11\n2136275  11/12/2020  17:44:00  1.18124  ...        7          4\n          11\n2136276  11/12/2020  17:45:00  1.18136  ...        7          5\n          12\n2136277  11/12/2020  17:46:00  1.18140  ...        8          4\n          12\n2136278  11/12/2020  17:47:00  1.18154  ...        5          6\n          11\n[2136279 rows x 12 columns]\n```", "```py\nsource_data['Timestamp'] = pandas.to_datetime(source_data['Date']) + pandas.to_timedelta(source_data['Time'])\n```", "```py\nsource_data.set_index(source_data['Timestamp'], inplace=True)\n```", "```py\n                           Date      Time  ...  TotalTicks\n           Timestamp\nTimestamp                                  ...\n2015-01-27 13:29:00   1/27/2015  13:29:00  ...           8 2015-01-27 13:29:00\n2015-01-27 13:30:00   1/27/2015  13:30:00  ...          12 2015-01-27 13:30:00\n2015-01-27 13:31:00   1/27/2015  13:31:00  ...          14 2015-01-27 13:31:00\n2015-01-27 13:32:00   1/27/2015  13:32:00  ...          13 2015-01-27 13:32:00\n2015-01-27 13:33:00   1/27/2015  13:33:00  ...          12 2015-01-27 13:33:00\n...                         ...       ...  ...         ...\n                 ...\n2020-11-12 17:43:00  11/12/2020  17:43:00  ...          11 2020-11-12 17:43:00\n2020-11-12 17:44:00  11/12/2020  17:44:00  ...          11 2020-11-12 17:44:00\n2020-11-12 17:45:00  11/12/2020  17:45:00  ...          12 2020-11-12 17:45:00\n2020-11-12 17:46:00  11/12/2020  17:46:00  ...          12 2020-11-12 17:46:00\n2020-11-12 17:47:00  11/12/2020  17:47:00  ...          11 2020-11-12 17:47:00\n[2136279 rows x 13 columns]\n```", "```py\nsample_date = '23-03-2020'\nstart_time = '00:01:00'\nday_close_time = '23:00:00'\n```", "```py\nsub_dataframe = original_dataframe[start : end]\n```", "```py\nall_day_sample = source_data.loc[sample_date + \" \" + start_time: sample_date + \" \" + day_close_time]\n```", "```py\nOHLC_data = all_day_sample[['Open', 'High', 'Low', 'Close']]\n```", "```py\nmpf.plot(OHLC_data)\n```", "```py\nmpf.plot(OHLC_data, type = 'candle', mav = (20, 50, 200))\n```", "```py\nimport json\nimport threading\nimport queue\nimport matplotlib.pyplot as plt\n```", "```py\nfrom websocket import create_connection\n```", "```py\nclass sliding_window:\n    def __init__(self, length):\n        self.data = ([0]*length)\n    def add(self, element):\n        self.data.append(element)\n        self.data.pop(0)\n```", "```py\ndef LMAX_connect(url, subscription_msg, ticks_queue):\n```", "```py\n    ws = create_connection(url)\n```", "```py\n    ws.send(subscription_msg)\n```", "```py\n    while True:\n        tick = json.loads(ws.recv())\n        ticks_queue.put(tick)\n        print(tick)\n```", "```py\nurl = \"wss://public-data-api.london-demo.lmax.com/v1/web-socket\"\nsubscription_msg = '{\"type\": \"SUBSCRIBE\",\"channels\": [{\"name\": \"ORDER_BOOK\",\"instruments\": [\"eur-usd\"]}]}'\n```", "```py\npipe = queue.Queue()\n```", "```py\ndata_receiver_thread = threading.Thread(target = LMAX_connect, args = (url, subscription_msg, pipe))\ndata_receiver_thread.start()\n```", "```py\n{'type': 'ORDER_BOOK', 'instrument_id': 'eur-usd', 'timestamp': '2022-10-28T09:12:26.000Z', 'status': 'OPEN', 'bids': [{'price': '0.995350', 'quantity': '1000000.0000'}, {'price': '0.995340', 'quantity': '2000000.0000'}, {'price': '0.995330', 'quantity': '500000.0000'}, {'price': '0.995320', 'quantity': '500000.0000'}, {'price': '0.995310', 'quantity': '1500000.0000'}, {'price': '0.987800', 'quantity': '1000000.0000'}, {'price': '0.985000', 'quantity': '13000000.0000'}, {'price': '0.980000', 'quantity': '13000000.0000'}], 'asks': [{'price': '0.995410', 'quantity': '500000.0000'}, {'price': '0.995420', 'quantity': '1000000.0000'}, {'price': '0.995430', 'quantity': '1500000.0000'}, {'price': '0.995440', 'quantity': '2000000.0000'}, {'price': '0.995450', 'quantity': '3000000.0000'}, {'price': '0.995810', 'quantity': '410000.0000'}]}\n```", "```py\ndef get_ticks(ticks_queue):\n    while True:\n        tick = ticks_queue.get()\n        if 'bids' in tick.keys():\n            bid = float(tick['bids'][0]['price'])\n            ask = float(tick['asks'][0]['price'])\n            bids.add(bid)\n            asks.add(ask)\n            print(bid, ask)\n```", "```py\nwindow_size = 60\n```", "```py\nbids = sliding_window(window_size)\nasks = sliding_window(window_size)\n```", "```py\ntrading_algo_thread = threading.Thread(target = get_ticks, args = (pipe,))\ntrading_algo_thread.start()\n```", "```py\n0.99626 0.99631\n0.99626 0.99629\n0.99624 0.9963\n0.99624 0.9963\n0.99624 0.99629\n```", "```py\nwhile bids.data[0] == 0:\n    pass\n```", "```py\nfig = plt.figure()\nax = fig.add_subplot()\n```", "```py\nline1, = ax.plot(bids.data)\nline2, = ax.plot(asks.data)\n```", "```py\nwhile True:\n    line1.set_ydata(bids.data)\n    line2.set_ydata(asks.data)\n```", "```py\n    plt.ylim(min(bids.data) - 0.0001, max(asks.data) + 0.0001)\n```", "```py\n    fig.canvas.draw()\n```", "```py\n    plt.pause(1)\n```", "```py\n    import json\n    ```", "```py\n    import threading\n    ```", "```py\n    import queue\n    ```", "```py\n    from websocket import create_connection\n    ```", "```py\n    from datetime import datetime\n    ```", "```py\n    import matplotlib.pyplot as plt\n    ```", "```py\n    import pandas\n    ```", "```py\n    import mplfinance as mpf\n    ```", "```py\n    data_for_chart = queue.Queue()\n    ```", "```py\ndef make_bars():\n    bars = pandas.DataFrame(columns=['Timestamp', 'Open', 'High', 'Low', 'Close'])\n    bars.set_index('Timestamp', inplace=True)\n```", "```py\n        resolution = 10\n    ```", "```py\n        last_sample_ts = 0\n    ```", "```py\n    while True:\n        tick = pipe.get()\n        ts = datetime.strptime(tick['timestamp'], \"%Y-%m-%dT%H:%M:%S.%fZ\")\n        last_bid = float(tick['bids'][0]['price'])\n        if last_sample_ts == 0:\n            last_sample_ts = ts\n            open = high = low = close = last_bid\n```", "```py\n            delta = ts – last_sample_ts\n    ```", "```py\n            if delta.seconds >= resolution:\n    ```", "```py\n                bar = pandas.DataFrame([[open, high, low, close]], columns = ['Open', 'High', 'Low', 'Close'], index = [ts])\n    ```", "```py\n                bars = pandas.concat([bars, bar])\n    ```", "```py\n                last_sample_ts = ts\n    ```", "```py\n                open = high = low = close = last_bid\n    ```", "```py\n                data_for_chart.put(bars)\n    ```", "```py\n        else:\n            high = max([high, last_bid])\n            low = min([low, last_bid])\n            close = last_bid\n```", "```py\n    data_receiver_thread = threading.Thread(target = LMAX_connect)\n    ```", "```py\n    data_receiver_thread.start()\n    ```", "```py\n    trading_algo_thread = threading.Thread(target = make_bars)\n    ```", "```py\n    trading_algo_thread.start()\n    ```", "```py\n    fig = mpf.figure()\n    ```", "```py\n    ax1 = fig.add_subplot(1,1,1)\n    ```", "```py\nwhile True:\n    chart_data = data_for_chart.get()\n    ax1.clear()\n    mpf.plot(chart_data, ax = ax1, type='candle', block = False)\n    plt.pause(1)\n```", "```py\n            if len(bars) > 100:\n                bars = bars.iloc[1:, :]\n            data_for_chart.put(bars)\n```", "```py\n    line3, = ax.plot(buy_signals_x, buy_signals_y, 'g^')\n    ```", "```py\n    line4, = ax.plot(sell_signals_x, sell_signals_y, 'mv')\n    ```", "```py\n    while True:\n    ```", "```py\n        buy_signals_x = []\n    ```", "```py\n        buy_signals_y = []\n    ```", "```py\n        sell_signals_x = []\n    ```", "```py\n        sell_signals_y = []\n    ```", "```py\n    for i in range(1, window_size):\n```", "```py\n            if bids.data[i] > asks.data[i - 1]:\n    ```", "```py\n                buy_signals_x.append(i)\n    ```", "```py\n                buy_signals_y.append(bids.data[i] - 0.0001)\n    ```", "```py\n            if asks.data[i] < bids.data[i - 1]:\n    ```", "```py\n                sell_signals_x.append(i)\n    ```", "```py\n                sell_signals_y.append(asks.data[i] + 0.0001)\n    ```", "```py\n        line3.set_xdata(buy_signals_x)\n    ```", "```py\n        line3.set_ydata(buy_signals_y)\n    ```", "```py\n        line4.set_xdata(sell_signals_x)\n    ```", "```py\n        line4.set_ydata(sell_signals_y)\n    ```"]