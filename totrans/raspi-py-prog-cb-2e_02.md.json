["```py\nnano -c hellopi.py\n\n```", "```py\n#!/usr/bin/python3\n#hellopi.py\nprint (\"Hello Raspberry Pi\")\n```", "```py\npython3 hellopi.py\n\n```", "```py\n    sudo apt-get install geany\n\n    ```", "```py\nmkdir ~/python_scripts\n\n```", "```py\ncd ~/python_scripts\nls\n\n```", "```py\n#!/usr/bin/python3\n#encryptdecrypt.py\n\n#Takes the input_text and encrypts it, returning the result\ndef encryptText(input_text,key):\n  input_text=input_text.upper()\n  result = \"\"\n  for letter in input_text:\n    #Ascii Uppercase 65-90  Lowercase 97-122 (Full range 32-126)\n    ascii_value=ord(letter)\n    #Exclude non-characters from encryption\n    if (ord(\"A\") > ascii_value) or (ascii_value > ord(\"Z\")):\n      result+=letter\n    else:\n      #Apply encryption key\n      key_value = ascii_value+key\n      #Ensure we just use A-Z regardless of key\n      if not((ord(\"A\")) < key_val < ord(\"Z\")):\n        key_val = ord(\"A\")+(key_val-ord(\"A\"))\\\n                         %(ord(\"Z\")-ord(\"A\")+1)\n      #Add the encoded letter to the result string\n      result+=str(chr(key_value))\n  return result\n\n#Test function\ndef main():\n  print (\"Please enter text to scramble:\")\n  #Get user input\n  try:\n    user_input = input()\n    scrambled_result = encryptText(user_input,10)\n    print (\"Result: \" + scrambled_result)\n    print (\"To un-scramble, press enter again\")\n    input()\n    unscrambled_result = encryptText(scrambled_result,-10)\n    print (\"Result: \" + unscrambled_result)\n  except UnicodeDecodeError:\n    print (\"Sorry: Only ASCII Characters are supported\")\n\nmain()\n#End\n```", "```py\nif __name__==\"__main__\":\n  main()\n```", "```py\nuser_input = input()\n```", "```py\nscrambled_result = encryptText(user_input,10)\nprint (\"Result: \" + scrambled_result)\n```", "```py\nInput Letter:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\nOutput Letter: K L M N O P Q R S T U V W X Y Z A B C D E F G H I J\n\n```", "```py\n#Ensure we just use A-Z regardless of key\nif not((ord(\"A\")) < key_value < ord(\"Z\")):\n  key_value = ord(\"A\")+(key_value-ord(\"A\"))\\\n                       %(ord(\"Z\")-ord(\"A\")+1)\n```", "```py\nimport encryptdecrypt as ENC\n```", "```py\nif __name__==\"__main__\":\n  main()\n```", "```py\n#!/usr/bin/python3\n#keypassing.py\nimport encryptdecrypt as ENC\n\nKEY1 = 20\nKEY2 = 50\n\nprint (\"Please enter text to scramble:\")\n#Get user input\nuser_input = input()\n#Send message out\nencodedKEY1 = ENC.encryptText(user_input,KEY1)\nprint (\"USER1: Send message encrypted with KEY1 (KEY1): \" + encodedKEY1)\n#Receiver encrypts the message again\nencodedKEY1KEY2 = ENC.encryptText(encodedKEY1,KEY2)\nprint (\"USER2: Encrypt with KEY2 & returns it (KEY1+KEY2): \" + encodedKEY1KEY2)\n#Remove the original encoding\nencodedKEY2 = ENC.encryptText(encodedKEY1KEY2,-KEY1)\nprint (\"USER1: Removes KEY1 & returns with just KEY2 (KEY2): \" + encodedKEY2)\n#Receiver removes their encryption\nmessage_result = ENC.encryptText(encodedKEY2,-KEY2)\nprint (\"USER2: Removes KEY2 & Message received: \" + message_result)\n#End\n```", "```py\nPlease enter text to scramble:\n\"A message to a friend.\"\nUSER1: Send message encrypted with KEY1 (KEY1): U GYMMUAY NI U ZLCYHX.\nUSER2: Encrypt with KEY2 & returns it (KEY1+KEY2): S EWKKSYW LG S XJAWFV.\nUSER1: Removes KEY1 & returns with just KEY2 (KEY2): Y KCQQYEC RM Y DPGCLB.\nUSER2: Removes KEY2 & Message received: A MESSAGE TO A FRIEND.\n\n```", "```py\nThis is a short message to test our file encryption program.\n```", "```py\n#!/usr/bin/python3\n#fileencrypt.py\nimport sys #Imported to obtain command line arguments\nimport encryptdecrypt as ENC\n\n#Define expected inputs\nARG_INFILE=1\nARG_OUTFILE=2\nARG_KEY=3\nARG_LENGTH=4\n\ndef covertFile(infile,outfile,key):\n  #Convert the key text to an integer\n  try:\n    enc_key=int(key)\n  except ValueError:\n    print (\"Error: The key %s should be an integer value!\" % (key))\n  #Code put on to two lines\n  else:\n    try:\n      #Open the files\n      with open(infile) as f_in:\n        infile_content=f_in.readlines()\n    except IOError:\n      print (\"Unable to open %s\" % (infile))\n    try:\n      with open(outfile,'w') as f_out:\n        for line in infile_content:\n          out_line = ENC.encryptText(line,enc_key)\n          f_out.writelines(out_line)\n    except IOError:\n      print (\"Unable to open %s\" % (outfile))\n    print (\"Conversion complete: %s\" % (outfile))\n  finally:\n    print (\"Finish\")\n\n#Check the arguments\nif len(sys.argv) == ARG_LENGTH:\n  print (\"Command: %s\" %(sys.argv))\n  covertFile(sys.argv[ARG_INFILE], sys.argv[ARG_OUTFILE], sys.argv[ARG_KEY])\nelse:\n  print (\"Usage: fileencrypt.py infile outfile key\")\n#End\n```", "```py\npython3 fileencrypt.py infile outfile key\n\n```", "```py\npython3 fileencrypt.py infile.txt encrypted.txt 30\n\n```", "```py\npython3 fileencrypt.py encrypted.txt decrypted.txt -30\n\n```", "```py\n['fileencrypt.py', 'infile.txt', 'encrypted.txt', '30']\n```", "```py\ntry:\n  #Open the files\n  with open(infile) as f_in:\n    infile_content=f_in.readlines()\nexcept IOError:\n  print (\"Unable to open %s\" % (infile))\n```", "```py\ntry:\n  f_in = open(infile)\n  try:\n    infile_content=f_in.readlines()\n  finally:\n    f_in.close()\n  except IOError:\n    print (\"Unable to open %s\" % (infile))\n```", "```py\n#!/usr/bin/python3\n#menu.py\nfrom subprocess import call\n\nfilename=\"menu.ini\"\nDESC=0\nKEY=1\nCMD=2\n\nprint (\"Start Menu:\")\ntry:\n  with open(filename) as f:\n    menufile = f.readlines()\nexcept IOError:\n  print (\"Unable to open %s\" % (filename))\nfor item in menufile:\n  line = item.split(',')\n  print (\"(%s):%s\" % (line[KEY],line[DESC]))\n#Get user input\nrunning = True\nwhile(running):\n  user_input = input()\n  #Check input, and execute command\n  for item in menufile:\n    line = item.split(',')\n    if (user_input == line[KEY]):\n      print (\"Command: \" + line[CMD])\n      #call the script\n      #e.g. call([\"ls\", \"-l\"])\n      commands = line[CMD].rstrip().split()\n      print (commands)\n      running = False\n      #Only run command is one if available\n      if len(commands):\n        call(commands)\n  if (running==True):\n    print (\"Key not in menu.\")\nprint (\"All Done.\")\n#End\n```", "```py\nStart Desktop,d,startx\nShow IP Address,i,hostname -I\nShow CPU speed,s,cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq\nShow Core Temperature,t,sudo /opt/vc/bin/vcgencmd measure_temp\nExit,x,\n```", "```py\nline = ['Start Desktop', 'd', 'startx\\n']\n```", "```py\nuser_input == line[KEY]\n```", "```py\nStart Menu:\n(d):Start Desktop\n(i):Show IP Address\n(s):Show CPU speed\n(t):Show Core Temperature\n(x):Exit\ng\nKey not in menu.\ni\nCommand: hostname -I\n['hostname', '-I']\nAll Done.\n\n```", "```py\nnano -c ~/.bash_profile\n\n```", "```py\ncd /home/pi/python_scripts\npython3 menu.py\n\n```", "```py\nchmod +x menu.py\n\n```", "```py\n#!/usr/bin/python3\n```", "```py\n#!/usr/bin/python3\n#menuadv.py\nimport os\nfrom subprocess import call\n\nSCRIPT_DIR=\".\" #Use current directory\nSCRIPT_NAME=os.path.basename(__file__)\n\nprint (\"Start Menu:\")\nscripts=[]\nitem_num=1\nfor files in os.listdir(SCRIPT_DIR):\n  if files.endswith(\".py\"):\n    if files != SCRIPT_NAME:\n      print (\"%s:%s\"%(item_num,files))\n      scripts.append(files)\n      item_num+=1\nrunning = True\nwhile (running):\n  print (\"Enter script number to run: 1-%d (x to exit)\" % (len(scripts)))\n  run_item = input()\n  try:\n    run_number = int(run_item)\n    if len(scripts) >= run_number > 0:\n      print (\"Run script number:\" + run_item)\n      commands = [\"python3\",scripts[run_number-1]]\n      print (commands)\n      call(commands)\n      running = False\n  except ValueError:\n    #Otherwise, ignore invalid input\n    if run_item == \"x\":\n      running = False\n      print (\"Exit\")\n#End\n```", "```py\nmkdir ~/menupy\ncd ~/menupy\n\n```", "```py\necho $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games\n\n```", "```py\nPATH=/home/pi/bin:$PATH\n\n```", "```py\nPATH=$HOME/bin:$PATH\nexport PATH\n\n```", "```py\n/home/pi/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games\n\n```"]