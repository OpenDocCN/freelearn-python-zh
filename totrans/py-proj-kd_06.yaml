- en: Chapter 6. Working with Data – Lists and Dictionaries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to write loops using detailed logic
    in order to help you help your program to make decisions. So far, though, you
    have not yet learned what to do with data. We have not created nor stored data.
    Yet, we know that video games store data! Video games sometimes store the names
    of players as well as the highest score that a player has achieved. How does one
    computer program remember all of this information? In this chapter, you will learn
    about some ways that Python can store and retrieve data, such as lists and dictionaries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: For the exercises and code in this chapter, your Python shell will be the best
    tool to use so that you can type your lists and dictionaries and then check the
    outcome of your coding. Otherwise, once your prompt is available, you can type
    lists and dictionaries, your shell will remember the information that you enter,
    and then you can test how to retrieve, add, and remove information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you shut down your Python shell at any time during this chapter, all of your
    work will be lost. The Python shell does not remember information between sessions,
    so lists and dictionaries will not be saved.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Lists
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lists have many different uses when coding, and many different operations can
    be performed on lists, thanks to Python. In this chapter, you will only learn
    about some of the many uses of lists.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you wish to learn more about lists, the Python documentation is very detailed
    and can be found at [https://docs.python.org/3/tutorial/datastructures.html?highlight=lists#more-on-lists](https://docs.python.org/3/tutorial/datastructures.html?highlight=lists#more-on-lists).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'First, some facts about Python lists: Python lists are *mutable*. This means
    that the data in a list can be changed around. Items can be added or removed using
    functions that act directly on the list. Also, the items in a list can be mixed
    together. Numbers, floats, and strings can all go together in the same list.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Parts of a list
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lists, like other kinds of data, are assigned to a variable. Then, the list
    items are placed in `[ ]`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Parts of a list](img/B04681_06_11.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: 'In your Python shell, type the following three lists, one on each line:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Parts of a list](img/B04681_06_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: 'Each of the lists you have typed has a particular kind of data inside it. The
    `fruit` list contains strings, the `years` list contains integers, and the `students_in_class`
    list also contains integers. However, one feature of lists is that they can mix
    up datatypes within the same list. For example, I have made this list that combines
    strings and integers:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Working with a list
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have made the lists, we can work with the contents of the list in
    many ways. In fact, once you create a list, the computer remembers the order of
    the list, and the order stays constant until it is changed purposefully. The easiest
    way for us to check whether the order of lists is maintained is to run tests on
    the `fruit`, `years`, `students_in_class`, and `computer_class` lists that we
    have already made.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'The first item of a Python list is always counted as **0** (**zero**). So,
    for our first test, let''s check whether asking for item `0` actually gives us
    the first item we entered in the list. Using our `fruit` list, we will type the
    name of the list inside a `print` statement, and then add square brackets `[]`
    with the number `0`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Your output should be `apple` since apple is the first fruit in the list we
    created earlier:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with a list](img/B04681_06_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: 'Now, we have evidence that counting in Python does start with `0` and also
    that our list is written correctly. Next, we can try to print the fourth item
    in the `fruit` list. You will notice that we are entering `3` in our `print` command.
    This is because the first item started at `0`. Type this code into your Python
    shell:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'What is your outcome? Did you expect `dragonfruit` to be the answer? If so,
    good, you are learning to count items in lists. If not, remember that the first
    item in a list is item `0`. With practice, you will become better at counting
    items in short Python lists:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with a list](img/B04681_06_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: 'For extra practice, work with the other lists that we made earlier, and try
    printing different items from these lists using this code sample:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with a list](img/B04681_06_12.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: Where the code says `list_name`, write the name of the list you want to use.
    Where the code says `item_number`, write the number of the item you want to print.
    Remember that lists begin counting at `0`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Changing the list – adding and removing information
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though lists keep their order, they can be changed. Items can be added
    to a list, removed from them, or changed in them. Again, there are many ways to
    interact with lists. We will only discuss a few here, but you can always read
    the Python documentation for more information.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Adding items to the list
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add an item to our `fruit` list, for example, we can use a method called
    `list.append()`. To use this method, type the name of the list, a dot, the method
    name `append`, and then parentheses with the item you would like to add inside.
    If the item is a string, remember to use single quotes. Type the following code
    to add `orange` to the list of fruits we have made:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, print the list of fruit to check whether `orange` has been added to the
    list:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Adding items to the list](img/B04681_06_04.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Removing items from the list
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let''s say that we no longer want `dragonfruit` to appear on our list.
    We will use a method called `list.remove()`. To do this, we will type the name
    of our list, a dot, the `remove` method name , and the name of the item that we
    wish to remove:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, print the list, confirm that `dragonfruit` has been removed:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Removing items from the list](img/B04681_06_05.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: If you have more than one of the same item in the list, `list.remove()` will
    only remove the first instance of that item. The other items with the same name
    need to be removed separately.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Lists and loops
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lists and `for` loops work very well together. With lists, we can do something
    called an **iteration**. By itself, the word *iteration* means repeating a process.
    We know that `for` loops repeat things for a limited and specific number of times.
    So, we can use `for` loops to iterate over lists of items.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'In this sample, we have three colors in our list. Make this list in your Python
    shell:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Using our list, we may decide that for each color in the list, we want to print
    the statement `I see` and add each color in our list. By using the `for` loop
    with the colors list, we can type the `print` statement once and three sentences
    will be returned. Type the following `for` loop in your Python shell:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You will notice that, in the second line of code, we add the strings together
    using the plus sign operator (`+`). The first string, `I see`, starts each sentence.
    The second string, `color`, comes from the variable that we made when we wrote
    the `for` loop. The third string is a period (`.`) to end the sentence. Once you
    are done typing the print line and you press *Enter* twice, your `for` loop will
    start running, and you should see the following statements printed in your Python
    shell:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Notice that the sentences print the colors in the order that they appear in
    the list. Order is preserved in lists:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![Lists and loops](img/B04681_06_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: As you can imagine, lists and `for` loops are very powerful when used together.
    Instead of having to type the line three times with three different pieces of
    code, we only had to type two lines of code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Our `for` loop, with only those two lines of code, would work if there were
    twenty colors or even two hundred colors in the list. We will explore the power
    of using lists more in the next chapter and mini-game.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Dictionaries
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Dictionaries** are a different way to organize data. At first glance, a dictionary
    may look just like a list. However, dictionaries have different jobs, rules, and
    different syntax than lists.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Parts of a dictionary like lists, dictionaries have different parts that need
    to be used to make them work—names, use curly braces to store information. For
    example, if we wanted to make a dictionary called `numbers`, we would put the
    dictionary entries inside curly braces. Here is a simple example to type into
    your Python shell:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Dictionaries](img/B04681_06_13.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Key/value pairs in dictionaries
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, the dictionary stores information
    with things called **keys** and **values**. In a dictionary of items, for example,
    we might have keys that tell us the names of each item and values that tell us
    how many of each item we have in our inventory. Once we store these items in our
    dictionary, we can add or remove new items (keys), add new amounts (values), or
    change the amounts of existing items. If you have ever used a contact list in
    your e-mail or a smartphone, you might recognize that it matches a key (the person's
    name) with a value (their e-mail ID or phone number). Keys and values do not always
    have to be in the form of strings and integers, but for our next example, we will
    use a dictionary to store all the items that a video game hero might have on a
    quest.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of a dictionary that can hold some information
    for a game. Let''s suppose that the hero in our game has some items that are needed
    to survive. Here is a dictionary of our hero''s items; type this dictionary of
    items into your Python shell:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we have a dictionary that gives us information about the items that our
    hero has. Unlike a list, a dictionary does not keep items in the order that they
    were entered. You can see this by printing out a small dictionary a few times
    and noticing the results. To print a dictionary, we type `print`, and then we
    place the name of the dictionary in the print statement:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You will notice that the output of the code results in the dictionary being
    printed in a different order from how you entered it. There is a possibility that
    it might print the same order, but it is more likely to print differently than
    how you entered it. Take a look at this screenshot for an example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![Key/value pairs in dictionaries](img/B04681_06_14.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: 'So, our dictionary has keys such as `arrows`, `rocks`, `food`, and `lives`.
    Each of the numbers that is stored as a value tells us the number of items that
    our hero has. To find out the value of a key, we use a `print` statement that
    contains the `items` dictionary name with the `arrows` key . Notice that the `arrows`
    key is placed in square brackets. The syntax is important. Type the following
    code in your Python shell to return the value of `arrows`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result of this `print` statement should output `200` as this is the number
    of arrows our hero has in their inventory:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![Key/value pairs in dictionaries](img/B04681_06_07.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: Changing the dictionary – adding and removing information
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python has several ways of interacting with dictionary data. There are many
    functions that we can use. For now, we will focus on those functions that allow
    us to add and remove things from our dictionaries.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn about all the dictionary methods, visit [http://www.tutorialspoint.com/python/python_dictionary.htm](http://www.tutorialspoint.com/python/python_dictionary.htm).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Adding items to the dictionary
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Consider a situation where, in our game, we allow the player to discover and
    collect fireballs later in the game. To add an item to the dictionary, we will
    use what is called the **subscript** method to add a new key and new value to
    our dictionary.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a subscript, we will use the name of the dictionary. Then, in square
    brackets, we write the name of the item (key) that we wish to add. The item is
    a string type, so it needs to be in single quotes. Finally, we will set the value
    to how many of the item (key) that we want to put into our dictionary. To add
    fireballs to your dictionary, copy the following code in your Python shell:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we print the entire dictionary of items, you will see that the `fireball`
    has been added. Type this code in your Python shell:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Your outcome should include the `fireball` as one of the items. Remember, however,
    that your code may not be in the same order as the code in this book because dictionaries
    do not remember orders:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding items to the dictionary](img/B04681_06_08.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: Changing the value of an existing item
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also change the value of the keys in our dictionary. Suppose, for example,
    that our hero is collecting rocks in the game and then loses the rocks because
    they use them to build a rock wall. How would our game keep track of each rock
    added to or removed from the game inventory?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: The `dict.update()` method allows us to alter the values of keys in the dictionary.
    For our dictionary, we will be changing the value of rocks as our hero collects
    or uses the rocks. To use `dict.update()`, we replace `dict` with the name of
    our dictionary, which is `items`. Then, in `()`, we use `{}` to type the name
    of the item whose value we wish to update.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'We use a colon (`:`) and then write the new number of items that we want to
    see in the dictionary. Try this in your Python shell:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Changing the value of an existing item](img/B04681_06_09.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: You will notice that if you have performed the `print(items)` function, you
    will now have `10` rocks instead of `25`. We have now successfully updated our
    number of items.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Removing items from the dictionary
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To remove something from a dictionary, you must reference the key or the name
    of the item, and then delete the item. By doing so, the value that goes with the
    item will also be removed since the key and value are paired.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: In Python, the `del` statement can be used to remove a key/value pair from the
    dictionary. This means using `del` along with the name of the dictionary and the
    name of the item (key) that you wish to remove.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the items dictionary as our example. We will use the `del` statement,
    the name of the `items` dictionary, and the name of the `lives` key that''s placed
    inside of the square brackets. Hence, we can use a `print` statement to test and
    check whether the `lives` key was removed along with the value of `lives`, which
    is `2`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If your `del` statement worked, the `lives` key is no longer in the dictionary
    and neither is the number of `lives`, which was `2`. This is similar to taking
    a word out of a printed dictionary. If you removed the word, you would need to
    remove the definition as well. The items list will now look like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '![Removing items from the dictionary](img/B04681_06_10.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: With dictionaries, information is stored and retrieved differently than in lists,
    but we can still perform the same operations of adding and removing information
    as well as making changes to the information.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: List or dictionary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have learned about two great Python data structures, lists and dictionaries.
    Now, we need to know when to use these tools. While both tools store information,
    they do so in very different ways. Let's compare these two structures so that
    we can better understand how each structure can be used.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Lists are good to use when we want to keep track of items and need to remember
    the order of those items. We use a lot of lists in everyday life that meet these
    criteria.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of lists are as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: A grocery list with different food items
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of song titles in an MP3 player
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of fiction book titles that are available in a library
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of items that are available for purchase on a website
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these things has an order as a desirable characteristic, and items can
    be added or removed from the lists. If we wanted to write a short program in Python
    to keep track of our fiction book titles or find songs in an MP3 playlist, a list
    might be a good place to start.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Lists can be used with loops to do a lot of powerful things. Some of these include
    making lists that create themselves using loops (yes, really) or making lists
    from lots of user input. Lists are slower to search because they're automatically
    searched from the beginning.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary is more useful when data does not need order but needs to be paired
    with something else. For example, perhaps you own fiction and nonfiction books,
    and you want to write a program that stores the title, author, and the genre.
    Using a dictionary would be better for this task so that you can quickly figure
    out the author of a book based on its title or for all the fiction books that
    you own. You can also interact with your dictionary to make changes. Also, dictionaries
    can be searched very quickly because they do not need to be searched from the
    beginning.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An example of a dictionary that is used in programming is a *Thesaurus*. This
    is a dictionary of lists.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: A quick task for you
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are familiar with lists and dictionaries, here is a quick task
    for you to review your knowledge.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Q1\. What is the proper syntax to use when creating a dictionary?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '{ }'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '" "'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[ ]'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What kinds of data can be included in one list?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Strings only
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Floats only
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integers and floats
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All datatypes can be included a list
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. What is the proper syntax to use when creating a list?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '{ }'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '" "'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[ ]'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create your own lists and dictionaries.
    You also tried to perform some basic operations with lists and dictionaries, including
    how to add and remove data. Finally, you learned the syntax differences between
    lists and dictionaries as well as the optimal uses of lists and dictionaries.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何创建自己的列表和字典。你还尝试了对列表和字典进行一些基本操作，包括如何添加和删除数据。最后，你学习了列表和字典之间的语法差异以及列表和字典的最佳使用方法。
- en: In the next chapter, we are going to move forward and make a game called *What's
    in my backpack?* This game will be a simple, two-player game that will ask both
    users to put some objects into a backpack and then allow each user to guess what
    is in the other user's backpack.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续前进，制作一个名为 *我的背包里有什么？* 的游戏。这个游戏将是一个简单的两人游戏，要求两个用户将一些物品放入背包中，然后允许每个用户猜测另一个用户背包里的内容。
- en: We will write code to add items to a list, keep track of usernames, items, and
    scores in a list and dictionary, and then use a `for` loop to keep track of the
    game. There are a lot of moving parts in our next game, and it will be a lot of
    fun to make something that has two players! Are you ready? Let's go!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写代码向列表中添加项目，跟踪用户名、物品和分数在列表和字典中，然后使用 `for` 循环来跟踪游戏。我们下一款游戏有很多组成部分，制作一个有两名玩家的游戏将会非常有趣！你准备好了吗？让我们开始吧！
