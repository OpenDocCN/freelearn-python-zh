["```py\n% conda create -n project0 --channel=conda-forge python=3.10\n```", "```py\n% python -m pip install sphinx\n```", "```py\nclass Greeting:\n    \"\"\"\n    Created with a greeting text.\n    Writes the text to stdout.\n\n    ..  todo:: Finish this\n    \"\"\"\n    pass\n```", "```py\n% conda install -c conda-forge pip-tools\n% pip-compile --extra=dev --output-file=requirements-dev.txt\n```", "```py\n% conda install --file requirements-dev.txt --channel=conda-forge\n```", "```py\n% python -m pip install --r requirements-dev.txt\n```", "```py\n% python src/hello_world.py --who \"World\"\nHello, World!\n```", "```py\n[build-system]\nrequires = [\"setuptools\", \"wheel\"]  # PEP 508 specifications.\n```", "```py\n[project]\nname = \"project_0\"\nversion = \"1.0.0\"\nauthors = [\n    {name = \"Author\", email = \"author@email.com\"},\n]\ndescription = \"Real-World Python Projects -- Project 0.\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\n```", "```py\ndependencies = [\n    # Packages required -- None for Project Zero.\n]\n[project.optional-dependencies]\ndev = [\n    # Development tools to work on this project\n    \"sphinx==7.0.1\",\n    \"sphinxcontrib-plantuml==0.25\",\n    \"pip-tools==6.13.0\"\n]\ntest = [\n    # Testing tools to test this project\n    \"pytest==7.2.0\",\n    \"tox==4.0.8\",\n    \"behave==1.2.6\"\n]\n```", "```py\n% pip-compile --all-extras -o requirements-dev.txt\n```", "```py\n% pip-compile --extra test -o requirements.txt\n```", "```py\nFeature: The Cheerful Greeting CLI interface provides a greeting\n    to a specific name.\n\nScenario: When requested, the application writes the greeting message.\n  When we run command \"python src/hello_world.py\"\n  Then output has \"Hello, World!\"\n```", "```py\nimport subprocess\nimport shlex\nfrom pathlib import Path\n\n@when(u’we run command \"{command}\"’)\ndef step_impl(context, command):\n    output_path = Path(\"output.log\")\n    with output_path.open(’w’) as target:\n        status = subprocess.run(\n            shlex.split(command),\n            check=True, text=True, stdout=target, stderr=subprocess.STDOUT)\n    context.status = status\n    context.output = output_path.read_text()\n    output_path.unlink()\n\n@then(u’output has \"{expected_output}\"’)\ndef step_impl(context, expected_output):\n    assert context.status.returncode == 0\n    assert expected_output in context.output\n```", "```py\nimport hello_world\n\ndef test_hw(capsys):\n        hello_world.main([])\n        out, err = capsys.readouterr()\n        assert \"Hello, World!\" in out\n```", "```py\n[tox]\nmin_version = 4.0\nskipsdist = true\n\n[testenv]\ndeps = pip-tools\n    pytest\n    behave\ncommands_pre = pip-sync requirements.txt\nsetenv =\n    PYTHONPATH=src\ncommands =\n    pytest tests\n    behave tests\n```", "```py\nif __name__ == \"__main__\":\n    main()\n```", "```py\n(projectbook) slott@MacBookPro-SLott project_0 % tox\npy: commands[0]> pytest tests\n...\npy: commands[1]> behave tests\n...\npy: OK (0.96=setup[0.13]+cmd[0.53,0.30] seconds)\ncongratulations :) (1.55 seconds)\n```", "```py\n% (cd docs; make html)\n```", "```py\n(projectbook) slott@MacBookPro-SLott project_0 % python src/hello_world.py\n  --who\n\nusage: hello_world.py [-h] [--who WHO]\nhello_world.py: error: argument --who/-w: expected one argument\n```"]