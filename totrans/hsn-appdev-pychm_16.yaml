- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your Next Steps with PyCharm
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyCharm’s features are so extensive, and improvements from JetBrains come so
    rapidly that it’s been hard to keep up.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this, my parting chapter, I want to do a few more things to try to do justice
    to this amazing piece of software. In this chapter, we’ll cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: I’ll do the obligatory wrap-up by briefly summarizing and commenting on our
    journey together so far.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’ll cover a few cool features to help with your productivity that just didn’t
    fit neatly into the chapter topics presented so far.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’ll cover some cool new features that were introduced over the course of the
    8 months it took me to write the book. I’ve been covering version 2023.1, and
    I have avoided updating it so I can stay consistent with screenshots of the UI
    used throughout the book. The 2023.2 release is out and there are some amazing
    changes, including a beta of the new **AI Assistant**!
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’ll raise a glass and shed a tear as we part company until the next book comes
    out.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’ll do my best not to get emotional on you. We’ve been together for a while
    now and it’s going to be hard to take this victory lap with you knowing the book
    is almost finished. I’m getting a little misty over here just thinking about it,
    so let’s keep moving.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to proceed through this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: An installed and working Python interpreter. I’ll be using the latest from [https://python.org](https://python.org).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installed copies of `pip` and `virtualenv`. You get these automatically when
    you install Python on Windows, and macOS includes them on every system. If you
    are using Linux, you need to install the package managers (such as `pip`) and
    the virtual environment tools (e.g., `virtualenv`) separately. Our examples will
    use `pip` and `virtualenv`.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An installed and working copy of PyCharm. Installation was covered in [*Chapter
    2*](B19644_02.xhtml#_idTextAnchor028). The screenshots in this chapter come from
    version 2023.2.1.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book’s sample source code from GitHub can be found at [https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-16](https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-16).
    We covered cloning the code in [*Chapter 2*](B19644_02.xhtml#_idTextAnchor028),
    *Installation* *and Configuration*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous topics in PyCharm
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I said, the sheer volume of features in this IDE is staggering. In this section,
    I’ll cover a few things that didn’t fit neatly into other chapters. I’ll be presenting
    them more in the spirit of my saying “Hey, look at this!”, rather than presenting
    a full tutorial on each feature.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Remote virtual environments
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve had this feature for a while now, and I think it is likely outshined by
    the newer remote development features we covered in [*Chapter 15*](B19644_15.xhtml#_idTextAnchor379).
    This feature allows you to work with an interpreter on another computer accessible
    via SSH. There are a couple of use cases for this. I have used this feature to
    debug a copy of an application using the virtual environment on the production
    server. I have a copy of the production code on my computer, but the venv is on
    the production system. This allows me to reproduce a bug and fix it locally using
    the exact environment where it normally lives. This was especially effective back
    when I used Mac and Windows laptops as my main development environment while the
    production environment ran in Linux. As we’ve pointed out, lots of packages deploy
    differently based on the operating system. I’ve always had challenges with **NumPy**,
    **pandas**, and **pymssql** (the Microsoft supported driver for SQL Server), which
    work very differently in these different environments, especially Windows. To
    build your third-party packages that leverage C code, you need a compiler. In
    Linux it’s *cmake*. On Windows, it is the Microsoft C++ compiler. There is a big
    difference between the two, and testing an application only on Windows doesn’t
    cut it for me. I want a more realistic test, and using this feature I can use
    the exact environment where it will run.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经拥有这个功能一段时间了，我认为它可能被我们在[*第15章*](B19644_15.xhtml#_idTextAnchor379)中介绍的新远程开发功能所超越。这个功能允许您通过SSH访问另一台计算机上的解释器进行工作。这个功能有几个用例。我曾使用这个功能来调试一个在生产服务器上使用虚拟环境的应用程序副本。我在我的电脑上有一个生产代码的副本，但虚拟环境在生产系统上。这让我能够在它通常运行的环境中重现错误并本地修复它。当我在使用Mac和Windows笔记本电脑作为主要开发环境，而生产环境在Linux上运行时，这种方法特别有效。正如我们指出的，许多软件包根据操作系统部署方式不同。我一直在**NumPy**、**pandas**和**pymssql**（Microsoft支持的SQL
    Server驱动程序）上遇到挑战，这些软件包在这些不同的环境中工作方式非常不同，尤其是在Windows上。要构建利用C代码的第三方软件包，您需要一个编译器。在Linux上，它是*cmake*。在Windows上，它是Microsoft
    C++编译器。两者之间有很大的区别，仅在对Windows进行应用程序测试对我来说是不够的。我想要一个更真实的测试，使用这个功能，我可以在它将运行的确切环境中使用。
- en: You can create or use a virtual environment on a remote computer by setting
    up an SSH connection to it. We covered creating an SSH connection back in [*Chapter
    15*](B19644_15.xhtml#_idTextAnchor379), so I won’t repeat the instructions here.
    The options for using a remote environment are alongside the normal options in
    the project interpreter settings shown in *Figure 16**.1*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过设置到远程计算机的SSH连接来创建或使用一个虚拟环境。我们之前在[*第15章*](B19644_15.xhtml#_idTextAnchor379)中介绍了如何创建SSH连接，所以这里不再重复说明。使用远程环境的选项与项目解释器设置中的常规选项并列，如*图16.1*所示。
- en: '![Figure 16.1: Use the interpreter settings dialog along with a previously
    configured SSH connection to set up your virtual environment on a remote Linux
    system](img/B19644_16_001.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图16.1：使用解释器设置对话框以及之前配置的SSH连接来在远程Linux系统上设置您的虚拟环境](img/B19644_16_001.jpg)'
- en: 'Figure 16.1: Use the interpreter settings dialog along with a previously configured
    SSH connection to set up your virtual environment on a remote Linux system'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1：使用解释器设置对话框以及之前配置的SSH连接来在远程Linux系统上设置您的虚拟环境
- en: Naturally there is going to be a pretty big performance hit when you work this
    way; at least there was for me. For my use case, it was well worth it!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，以这种方式工作可能会带来相当大的性能损失；至少对我来说是这样的。对于我的用例来说，这非常值得！
- en: You’ll note there is also an option for **On Vagrant**, which is effectively
    the same option, but instead of a random remote server it’s on a local virtual
    machine managed by **HashiCorp’s Vagrant**. What is Vagrant you ask?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到还有一个**在Vagrant上**的选项，这实际上是一个相同的选项，但它不是在随机的远程服务器上，而是在由**HashiCorp的Vagrant**管理的本地虚拟机上。您可能会问，Vagrant是什么？
- en: Working with HashiCorp Vagrant
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HashiCorp Vagrant
- en: Within the field of DevOps, a movement called **Infrastructure as Code** (**IaC**)
    has become very important. The idea is that nobody really runs anything on bare
    metal anymore; everything is run on a virtual machine. Regardless, one of the
    challenges I’ve faced over the years is when I go to set up my testing and production
    environments, I have to do it all by hand and it takes quite a while. My objective
    is to set up at least two or three nearly identical environments.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps领域，一个名为**基础设施即代码**（**IaC**）的潮流变得非常重要。其理念是，没有人再在裸金属上运行任何东西；所有东西都是在虚拟机上运行的。尽管如此，多年来我面临的一个挑战是，当我去设置我的测试和生产环境时，我必须全部手动完成，而且需要相当长的时间。我的目标是设置至少两个或三个几乎完全相同的环境。
- en: 'Let’s say I’m creating a product using Flask that uses React for the frontend,
    and Microsoft SQL Server as the database. In order to run this using best practices,
    I need a few servers:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我正在使用Flask创建一个产品，该产品使用React作为前端，并使用Microsoft SQL Server作为数据库。为了按照最佳实践运行，我需要几个服务器：
- en: I need a web server such as Nginx or Apache to serve my React app along with
    any static assets that might be needed.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我需要一个像Nginx或Apache这样的Web服务器来为我的React应用提供服务，以及可能需要的任何静态资源。
- en: I need an application server. Flask’s development server isn’t going to cut
    it in production. I need a server that runs something like **Green Unicorn** (*gunicorn*
    for short), which is a production-grade WSGI server capable of handling production
    loads. **WSGI** stands for **Web Server Gateway Interface** in the realm of Python
    development. It is a specification for a standardized interface between web servers
    and Python web applications or frameworks such as Flask, FastAPI, and Django.
    WSGI defines a set of rules and conventions that allow web servers to communicate
    with Python applications in a consistent and interoperable way.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我需要一个应用服务器。Flask的开发服务器在生产环境中是不够用的。我需要一个运行类似**绿色独角兽**（简称**gunicorn**）的服务器，这是一个能够处理生产负载的生产级WSGI服务器。**WSGI**代表Python开发领域的**Web服务器网关接口**。它是一个规范，用于定义Web服务器和Python
    Web应用或框架（如Flask、FastAPI和Django）之间的标准化接口。WSGI定义了一套规则和约定，允许Web服务器以一致和互操作的方式与Python应用通信。
- en: I need a dedicated database server for SQL Server.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我需要一个专用的数据库服务器来运行SQL Server。
- en: 'Keeping it simple, that’s three servers, each replicated three times: one for
    development testing, one for staging or **user acceptance testing** (**UAT**),
    and one for production. For each server, I need to install, patch, and harden
    the operating system. Then I need to set up each type of server. The web server
    is easy, I just need to install nginx and configure it so it uses SSL, redirects
    any requests not using HTTPS, caches the static content, and reverse-proxies API
    requests to the API server running Flask.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这是三个服务器，每个服务器复制三次：一个用于开发测试，一个用于预发布或**用户验收测试**（**UAT**），一个用于生产。对于每个服务器，我需要安装、打补丁和加固操作系统。然后我需要设置每种类型的服务器。Web服务器很简单，我只需要安装nginx，并配置它使用SSL，重定向任何不使用HTTPS的请求，缓存静态内容，并将API请求反向代理到运行Flask的API服务器。
- en: The Flask server is more involved since best practice calls for having nginx
    on that system as well, forwarding traffic to Green Unicorn. I’ll usually set
    up firewall rules on this server to reject any traffic not coming from the web
    server, and block any ports that are not needed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Flask服务器更为复杂，因为最佳实践要求在该系统上也要有nginx，将流量转发到Green Unicorn。我通常会在该服务器上设置防火墙规则，拒绝来自Web服务器的任何流量，并封锁任何不需要的端口。
- en: The database server is the toughest one. Ideally, I need separate partitions
    for OS, logging, and data to prevent IO performance bottlenecks. All totaled,
    it can easily take a week for me to set up and validate a small environment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库服务器是最困难的一个。理想情况下，我需要为操作系统、日志和数据分别设置分区，以防止I/O性能瓶颈。总计，仅设置和验证一个小型环境就可能需要一周时间。
- en: If I were to use IaC, I could write a script that automates setting up and tearing
    down each of the three environments. It would take just as long to write the script
    as it does to manually set everything up, but when it comes time to scale or update
    my infrastructure, having it in code will be very helpful. Since it is in the
    code, everything is documented. If I want to update the OS, say from Ubuntu 20
    to 22, I just change a variable and I can rebuild all new servers or update the
    ones I have. IaC is worth the time investment in every single case beyond a throw-away
    prototype.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: One of the more popular IaC frameworks is **HashiCorp’s Terraform**. You’ll
    find plugins for the **HashiCorp language** (**HCL**) in JetBrains Marketplace
    that allow you to work with Terraform files with the usual syntax coloring and
    auto-complete functionality. Terraform is designed to help you configure virtual
    machines by way of providers. There’s a provider for VMware and that’s what converts
    your IaC into actual virtual machines. There are providers for cloud services
    too, including Azure, AWS, and Digital Ocean.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: HashiCorp also makes a product called **Vagrant**. Vagrant is designed to be
    IaC for your local computer. I’ve been saying all along that you should use Linux
    for development if you plan to run your final application on a Linux server. But
    most people would rather not give up working on Windows or Mac. Since Mac is based
    on a Linux-like operating system, the Mac is at least close, but it won’t be identical
    if you’re running your work in Ubuntu, Red Hat, or Fedora.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant is a program that, when coupled with a local hypervisor such as VMware
    Workstation, Oracle VirtualBox, or Microsoft’s Hyper-V, allows you to create a
    script that generates a local virtual machine, called a *box*, that can match
    your production environment. Essentially you are automating the creation and maintenance
    of virtual machines on your local computer the same way you’d use Terraform for
    your servers. Vagrant does some neat things, such as automatically mapping your
    project’s folder to the virtual machine, so you don’t need to constantly copy
    your code to the VM manually. Your terminal in PyCharm is automatically connected
    to the VM using SSH, so when you execute commands you are using your local terminal
    in the IDE, but the VM is handling the execution. You could do this with **Windows
    Subsystem for Linux** (**WSL**), but there would be more effort involved and WSL
    is pretty limited in how it can be used compared to making individual VMs for
    each project.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: While Vagrant is very useful, most developers are shifting to Docker for these
    kinds of workflows, but I still see developers, especially in the cybersecurity
    fields and in educational settings, still working with virtual machines. Vagrant
    has an advantage in that Docker containers are immutable, meaning they can’t be
    changed once they are created. While this is operationally superior, since immutability
    of a deployed application provides a very stable system, it might be less desirable
    for daily development since it is useful for a developer to be able to fiddle
    with the environment without restrictions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant creates a box, which is just a virtual machine, and represents a full
    server experience with a complete operating system. You can do anything you want
    to it, and since it’s on your laptop, if your machinations break the system you
    can just kill the box and make another reset to its original state in minutes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant gives you the ability to build web applications using a real IP address
    instead of using the loopback address, also known as localhost. This provides
    local testing advantages since applications working on localhost often behave
    differently than applications bound to a real IP address. Furthermore, you can
    choose to make your Vagrant box’s IP address shareable not only on the local network
    but also on the public internet. When you’re ready to show off your progress,
    you can invite others to your shared Vagrant box, elicit feedback, and then turn
    sharing off.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find the tooling for Vagrant in the **Tools** menu shown in *Figure 16**.2*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.2: PyCharm supports all the Vagrant commands directly via menu
    options](img/B19644_16_002.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.2: PyCharm supports all the Vagrant commands directly via menu options'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: In order to use Vagrant, you need to install it along with a supported hypervisor.
    You can find the installation instructions at [https://developer.hashicorp.com/vagrant/tutorials/getting-started/getting-started-install](https://developer.hashicorp.com/vagrant/tutorials/getting-started/getting-started-install).
    As for the hypervisor, the default is Oracle VirtualBox. You can find more about
    VirtualBox at [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Once you have these programs installed you can use the **Init in Project Root**
    option shown in *Figure 16**.2*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: This will prompt you to create a file called `Vagrantfile` at the root of your
    project by selecting a name for your Vagrant box and providing the image URL.
    The dialog is shown in *Figure 16**.3*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3: You are prompted to create a Vagrant box with a very old default](img/B19644_16_003.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.3: You are prompted to create a Vagrant box with a very old default'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: It is clear that this is a very old default since `lucid32` refers to Ubuntu
    10\. At the time of writing, the current version of Ubuntu is 23 while the long-term
    support edition is 22.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: You should probably find a newer box definition if you’re serious about using
    a more current virtual machine. You can find box definitions at [https://app.vagrantup.com](https://app.vagrantup.com).
    I’ve done this in *Figure 16**.4* where I’ve searched for `Jammy Jellyfish`, the
    project codename for **Ubuntu 22**, which is what I use for all my current production
    projects.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.4: You can find a wide variety of predefined boxes on the Vagrant
    Cloud registry](img/B19644_16_004.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.4: You can find a wide variety of predefined boxes on the Vagrant
    Cloud registry'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Once you find one you want to use, click on it. In *Figure 16**.5*, I’m clicking
    on the second entry in the list.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.5: This is the box definition for Ubuntu Jammy 64](img/B19644_16_005.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.5: This is the box definition for Ubuntu Jammy 64'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a box definition, refer back to *Figure 16**.3*. In the first
    field, you need to type the box name indicated by the dark arrow in *Figure 16**.5*,
    which is `ubuntu/jammy64`. Next, copy the name of the box definition’s URL, indicated
    by the light arrow in *Figure 16**.5*, which in our case is [https://app.vagrantup.com/ubuntu/boxes/jammy64](https://app.vagrantup.com/ubuntu/boxes/jammy64).
    Clicking **OK** will download the box image and create the VM. Once it is ready,
    you’ll find the rest of the Vagrant tools are no longer grayed out in the menu
    as shown in *Figure 16**.6*. The generated Vagrantfile is open (not automatically,
    I did that), and you can even see that PyCharm is prompting me to add the new
    file to the Git repository.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.6: The Vagrant tool options are now available](img/B19644_16_006.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.6: The Vagrant tool options are now available'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: If you dive more deeply into using Vagrant, you’ll find that like many of PyCharm’s
    integrations, the IDE gives you a graphical way to perform what would otherwise
    be a command-line workflow. You can run the commands using the menu in *Figure
    16**.6*, or you can type the commands in your terminal to achieve the same result.
    Packt has some good books on developing with Vagrant. I’ll be sure to leave a
    few suggestions in the *Further reading* section of this chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: There are some big benefits to using Vagrant. You can have your whole development
    team use identical environments for developing and testing your application using
    the same environment you’ll use in production. No more “*It works on my machine*”,
    which implies the code is fine and a configuration issue is to blame. Since the
    environment configuration is standardized, and maintained as part of the code
    base, the project should work the same everywhere assuming the code and any external
    configuration files (such as `.ini` or `.env` files) or environment variables
    are also identical.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Using IaC in Vagrant shields less experienced developers who don’t know how
    to set up virtual machines, and it also standardizes the build so everybody’s
    VM is the same. The configuration is tracked in your revision control system and
    so it tracks and updates just like application code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Tracking your time
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Over the course of my long career, I’ve worked for the United States Government
    on several occasions, and I’ve run my own freelancing practice. In each case,
    I’ve needed a way to track my time. In the case of government contracts, I have
    to track a set of billing codes down to 7-minute intervals. Time tracking can
    be used in more reasonable environments as well. I try to keep time-tracking data
    to correlate the ever-elusive story point used in agile development methodologies
    such as Scrum with how much time it will take to complete a task. According to
    most agile methodologies, people are really bad at estimating time. But they are
    pretty good at estimating relative size. In *Figure 16**.3*, you would have a
    hard time telling exactly how tall, in inches or centimeters, the soy milk carton
    is next to the cup of latte.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.7: How tall is the soy milk carton?](img/B19644_16_007.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.7: How tall is the soy milk carton?'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Is it 8 inches tall or 20? But if you try estimating the size using the coffee
    cup as your unit of measure, you can be more precise. The carton is about two
    and a half coffee cups tall. So it is with story points, but at the end of the
    day, the boss really wants to know how long something will take. You can’t tell
    her you’ll have her feature done in two coffee cups and expect her to be happy
    about it. This could invite the obvious reply, “Great, so it will be done after
    my second cup of coffee!”
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: I do my normal story point estimate, then I track my time to see how long it
    really took so I can both give the boss her answer and be better at estimating
    next time.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: To use the time tracking features in PyCharm, you need to connect to a server.
    By server, in this case, I mean one of the project tracking services supported
    by PyCharm, as shown in *Figure 16**.4*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.8: Click the Configure Servers menu item to configure your project
    tracker](img/B19644_16_008.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.8: Click the Configure Servers menu item to configure your project
    tracker'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: When you click this menu item, you should see the screen shown in *Figure 16**.5*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.9: Pick whichever project tracking service you use from the list](img/B19644_16_009.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.9: Pick whichever project tracking service you use from the list'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your server is registered, you’ll be able to pick a backlog item or issue
    that is assigned to you. *Figure 16**.6* shows my YouTrack server integration
    with the issue number **DEMO-20: Finish** [*Chapter 16*](B19644_16.xhtml#_idTextAnchor401)
    **in** **PyCharm Book**.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.10: The time I’ve spent on this issue is automatically tracked](img/B19644_16_010.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.10: The time I’ve spent on this issue is automatically tracked'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: As you switch between tasks throughout the day, you can switch from right in
    your IDE, which will track how much time you spend on each task. You can then
    synchronize your work times up to the server to keep an accurate tally of how
    you are spending your time.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: TODO list
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This may sound like it is related to the time tracking feature, but it really
    isn’t. The TODO list panel shows you all those TODO comments in your code as a
    list. You can see an example in *Figure 16**.7*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.11: The TODO panel in PyCharm lists all the to-do comments in your
    code and takes you right to the given line when you double-click](img/B19644_16_011.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.11: The TODO panel in PyCharm lists all the to-do comments in your
    code and takes you right to the given line when you double-click'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: You can double-click the TODO item to go right to that line in the code, allowing
    you to quickly find your way back to whatever you had to temporarily abandon.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Macros
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A macro is a script of recorded keystrokes that can be played back in order
    to create useful automation. In my opinion, learning to use these is a necessary
    survival skill in the jungles of software development.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we need a list of things that don’t change to populate a drop-down
    list box in HTML. For this example, I’m going to create a `SELECT` tag with all
    50 states of the US. This is something that hasn’t changed since 1959, although
    if I’m ever elected Emperor, Canada and Mexico are first on my list. They’ll never
    see it coming.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Back in reality, I need to get this done and I darn sure don’t want to type
    all this out. I asked my best friend ChatGPT to give me a list of the 50 states
    in alphabetical order. The result is in the `us-states.txt` file in the chapter
    source.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll also find an HTML file called `states.html` in the source. I’ve included
    the code as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, there is nothing in the `<select>` tag, which is meant to render
    a drop-down selection list in the HTML page defined by the rest of the code in
    that file. I need to add the states so they look like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And so on for all 50\. I can do this with a macro. Sure, I could also just have
    ChatGPT generate it for me, but that would be anti-climactic since this is a book
    on PyCharm and not a book on ChatGPT.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Open the project called `feature_demo` in the chapter source code, then open
    the `united-states.txt file`. Start by placing your cursor in front of `Alabama`
    in the `united-states.txt` file, as shown in *Figure 16**.9*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.12: Put your cursor in front of Alabama](img/B19644_16_012.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.12: Put your cursor in front of Alabama'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Next, click **Edit | Macro | Start Macro Recording** as seen in *Figure 16**.10*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.13: Start recording your macro](img/B19644_16_013.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.13: Start recording your macro'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: With the macro recording, type `<option>`. Then hit the *End* (*Cmd + Right
    Arrow* on a Mac) key on your keyboard to go to the end of the line, then type
    `</option>`. Press the *down arrow* key on your keyboard, followed by the *Home*
    key (*Cmd + Left Arrow* on Mac). The cursor should now be at the beginning of
    the second line, `Arkansas`. Go back to the same menu item shown in *Figure 16**.10*,
    but note `option-list`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Return to the menu shown in *Figure 16**.10* again and you’ll see either your
    saved macro name listed or just `Arkansas` to an `option` tag.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: You can map your macro to a key combination and repeat your actions with a keyboard
    shortcut, making it easy to do over and over.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: If I’m being honest, the macro feature in PyCharm is okay, but it isn’t as good
    as in some other tools. Ultraedit and Notepad++, while not IDEs, both have very
    sophisticated macro features such as the ability to replay a macro until it reaches
    the end of the file, or to run the macro a specific number of times. PyCharm’s
    macros are fine for small jobs, but for bigger ones you might look to other tools.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Notifications
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes PyCharm will present notifications as toast windows in the lower-right
    corner of the screen. These messages will usually disappear within a few seconds,
    but you can see them in the notifications panel. You’ll find this panel on the
    right-hand toolbar, as seen in *Figure 16**.11*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.14: The notifications panel](img/B19644_16_014.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.14: The notifications panel'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: You can toggle the panel by clicking the *bell* icon on the right-hand toolbar.
    The panel has a **Timeline** option that allows you to list notifications by recency.
    You can choose to dismiss any notifications you no longer need, or clear them
    all.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: New features in 2023.2
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During the course of writing this book, a lot has changed, especially in the
    UI. I used build #PY-231.8109.197, or as I like to call it, *the fightin’ 197th*.
    I kept the same release in play for the entire time, neglecting to install any
    updates because I wanted things to be consistent. Right about the time I started
    working on [*Chapter 13*](B19644_13.xhtml#_idTextAnchor318), JetBrains held an
    online event revealing a new point release, 2023.2\. The new release is packed
    with new features, but today as I write [*Chapter 16*](B19644_16.xhtml#_idTextAnchor401)
    (this chapter), two more point releases have come out. This pace is probably due
    in large part to JetBrain’s re-vamp of the UI. If you remember at the beginning
    of the book, we had to turn the “new UI” on in the settings. By the time you read
    this, the new UI will be the default. JetBrains didn’t stop there. The UI has
    always been highly configurable, and we covered that thoroughly in the early chapters
    of this book.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: One of the main pushes in the new UI effort has been to streamline the development
    process. Most IDEs go through a cycle of growth where they start with a simple
    and focused UI that integrates the minimal features needed to be considered an
    IDE versus an enhanced text editor. Over time, more and more features are added
    with the aim of giving you a tool that does everything you might need. It occurred
    to me just the other day that on days when I am 100% focused on Python development,
    or even JavaScript, web, or database development, all I’d really need is a lightweight
    OS and PyCharm. I wouldn’t even need a window manager beyond what is needed to
    run PyCharm!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: The problem caused by the richness of such a tool is it becomes daunting for
    new users, and disorganized for veteran users. We learned in [*Chapter 15*](B19644_15.xhtml#_idTextAnchor379)
    that most new features of any JetBrains IDE are implemented as plugins. This can
    lead to a disorganized UI and it can make the IDE feel like it is a bunch of unrelated
    pieces cobbled together in a sub-optimal overall user experience.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: The new UI aims to take care of this by compacting the UI, exposing the most
    commonly used tools and hiding (but not removing) the more complicated options.
    The build I used for the book did this very well. As newer point releases come
    out, I’m noticing further efforts to hide complexitity. Take look at *Figure 16**.13*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.15: JetBrains has moved a lot of settings into tags instead of
    having dozens of checkboxes](img/B19644_16_015.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.15: JetBrains has moved a lot of settings into tags instead of having
    dozens of checkboxes'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a run configuration from the latest update released only days ago,
    labeled as Build #PY-232.9559.58 built August 22, 2023\. There are two visible
    differences. There is a set of tags at the bottom and a **Modify Options** dropdown
    both indicated by arrows in *Figure 16**.13*. Compare this to *Figure 16**.14*.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.16: This is the old dialog from Chapter 3](img/B19644_16_016.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.16: This is the old dialog from [*Chapter 3*](B19644_03.xhtml#_idTextAnchor052)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: All those options are still there, but they’ve been rolled up into the **Modify
    Options** dropdown. The settings you’ve actually used appear as tags at the bottom
    of *Figure 16**.13*. The amount of change over only a few months is staggering!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: In addition to product changes, there are some interesting new feature additions
    and improvements.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Black integration
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First presented at PyCon 2019, Black is an uncompromising code formatter. It
    has gained a great deal of attention and popularity since its release, and JetBrains
    has added support to PyCharm. Black needs to be installed in order for this feature
    to work. You can find details on installation and more at [https://github.com/psf/black](https://github.com/psf/black).
    If you are using Linux, check your package manager. I use Pop_OS, which is based
    on Ubuntu. *Figure 16**.15* shows I’ve found Black as a package and I prefer to
    install it that way.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.17: In Linux, you can probably install Black using your package
    manager](img/B19644_16_017.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.17: In Linux, you can probably install Black using your package manager'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Once Black is installed, you need to turn it on on a per-project basis. You’ll
    find this option when you search for Black in the **Settings** dialog shown in
    *Figure 16**.16*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.18: Search for Black in the Settings dialog and you’ll find it
    under Tools](img/B19644_16_018.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.18: Search for Black in the Settings dialog and you’ll find it under
    Tools'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Your options for formatting are `development`. On my team, we individually branch
    off development into feature branches. If I’m working on some new feature, I’ll
    branch off `development` and make a new branch called `feature/amazing-thing`.
    Next, I’ll create my amazing thing, but I’ll need to touch some other files written
    by other developers along the way. Naturally, before I commit, muscle memory automatically
    uses the *Ctrl* + *Alt* + *L* (reformat code) command to reformat. Black will
    reformat the whole file. When you go to merge, you may find other developers have
    changed some of the same files you re-formatted, but they were less conscientious
    about reformatting. You are presented with the challenge of an ugly merge even
    if there were only a few lines actually changed between the two developers, and
    they might not have otherwise collided.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: This is no fault of the Black formatter! The same thing will happen if you use
    PyCharm’s default code formatter. The Black formatter, though, is a better solution
    since it aims for determinism, which is a fancy coder word that means the results
    of an operation always produce the same output. A non-compromising deterministic
    formatter should yield very consistent results every time it is used.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: My advice, then, if you want to start using Black is to get together as a team.
    Have everyone push their work, merge it into a branch, and then apply Black to
    the whole project. In my example, I would resolve my conflicts, and then merge
    back into the development branch. Then I would have all my colleagues do the same.
    Once development has everyone’s changes, freeze the code and use Black on all
    your source files. During the freeze, nobody is allowed to work on any individual
    file until the formatting has been applied and pushed. If you have a very large
    code base, you might have to organize your efforts over time. The results will
    be worth it! Your code will be PEP-8 compliant, and you should see fewer merge
    conflicts, especially those caused by formatting.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Black can be configured to run on save, and beyond the scope of PyCharm, Black
    can be used as a hook in your revision control, as well as in your CI/CD process.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: GitLab integration
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GitHub is easily the most popular and widely used cloud-based solution for managing
    code. Its Achilles heel is the fact that it is cloud-based. Organizations that
    are serious about security, such as those whose trading partners require a certification
    such as the **Service Organization Control 2** (**SOC2**) certification are often
    not satisfied with their intellectual property being hosted on a publicly available
    platform. While it’s true you can host private repositories on GitHub, the mere
    fact that the files are not on a server controlled by the certified organization
    can be a problem.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, it is possible to host your own private GitHub server using GitLab.
    You can run GitLab on-premises behind your firewall and exercise total control
    over your security and infrastructure while still using what is in every other
    sense, the GitHub experience. You’ll find GitLab integration in the **Version
    Control** settings as shown in *Figure 16**.17*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.19: GitLab settings can be found alongside the other VCS settings](img/B19644_16_019.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.19: GitLab settings can be found alongside the other VCS settings'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: The integration is fairly deep. Beyond the basics we covered in [*Chapter 5*](B19644_05.xhtml#_idTextAnchor112),
    you can handle all your pull requests, approvals, and more right from the IDE.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Run anywhere
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve had **Search everywhere** for quite a while. In case you missed it, you
    can double-tap the **Shift** key and get a dialog that allows you to find anything
    anywhere in your project. This works even if what you’re looking for isn’t in
    code. It could be in documentation, settings, or elsewhere.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: New to PyCharm, though not necessarily new to IntelliJ is `?`) in the dialog.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.20: Double-tap the Ctrl key to bring up the Run Anything dialog](img/B19644_16_020.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.20: Double-tap the Ctrl key to bring up the Run Anything dialog'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: It’s nice enough to say, “*You can run ANYTHING!”* But all you critical thinkers
    out there will immediately follow up with, *“What do you mean by ANYTHING?”* Here,
    the answer to my question mark tells me what can be run. I can see I can run any
    Python script in my project by simply typing its name. I can see I can run `pip`
    and `conda` commands as well. Web developers can run the HTTP request test code
    we covered in [*Chapter 9*](B19644_09.xhtml#_idTextAnchor223). They can also run
    all the popular package managers such as `package.json` file via npm, which is
    visibly supported. Naturally, we can also run any **Node** process as easily as
    we can run Python.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: AI Assistant
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The show stealer at most of the recent events featuring PyCharm is the AI Assistant.
    As I write this, the feature is in closed beta, meaning you have to sign up and
    be approved in order to try out the feature. Bear in mind that anything I show
    here will probably change.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: The easiest thing to implement, and there are numerous plugins that do this,
    is to just provide an integrated frontend experience for some online AI API.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, you’ll find the AI Assistant integrated throughout PyCharm. To
    use the AI Assistant, use the right-hand menu shown in *Figure 16**.19*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.21: The AI Assistant can be activated using the button on the right-hand
    menu](img/B19644_16_021.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.21: The AI Assistant can be activated using the button on the right-hand
    menu'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: The preceding dialog summarizes the features available. Let’s take a look.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: This feature is not local
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: If your company or environment has a restriction on sending code out to an API
    such as ChatGPT, you need to know that this feature does exactly that. The functionality
    is not self-contained within PyCharm and **any code or information you enter will
    be sent out to various external third-party APIs**. This is documented in the
    agreement you blindly scrolled through and ignored so you could get to use PyCharm
    and the cool new AI features.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Explain code
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are many circumstances where you might encounter code you don’t understand.
    My normal mode of describing these circumstances is pretty colorful, especially
    at 2 A.M. the day before a deadline. I’ll endeavor to keep it professional:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: It was written by someone else who clearly has no idea what they are doing.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was written by someone else who is clearly better at this than you are. Sometimes
    this might be the same person depending on the time of day.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was written by someone who loves terse code despite it being an anti-pattern
    in Python.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code contains a regular expression you have not committed to memory, since
    no normal human understands regular expressions even though they pretend otherwise.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In circumstances such as these, help is a mouse-click away. Highlight the code
    in question, right-click, and select **AI Assistant Action | Explain code**. Seconds
    later, the AI will give you a breakdown of the selected code.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that the AI Assistant is not always correct, and doesn’t always
    give completely sound advice.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Answer programming questions
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In truth, the AI Assistant will answer any question you ask. I’ve asked it questions
    about nginx configuration, Docker, and general networking questions. Of course,
    it also answers programming questions.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Create commit messages
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This one is really neat! I’m a huge fan of the XKCD online comic and their
    treatment of Git in many comics is spot-on. This one comes to mind right now:
    [https://xkcd.com/1296/](https://xkcd.com/1296/).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Since the IDE can see your change list, it can generate a commit message for
    you as shown in *Figure 16**.20*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.22: Commit messages are generated that are more deep and meaningful
    than “I changed a bunch of stuff”](img/B19644_16_022.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.22: Commit messages are generated that are more deep and meaningful
    than “I changed a bunch of stuff”'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you don’t put much stock in your commit messages. I’ve worked on US Government
    projects where the commit messages were audited. This wasn’t generally known by
    the development team who, upon learning of this, opted to rebase and re-create
    every commit to remove their more colorful language within the commit messages.
    The audit wasn’t really looking for that; it was being used to validate the change
    control process. My team is currently going through SOC2 certification, and I
    can tell you firsthand that complete and descriptive commit messages are seriously
    helpful. As cybersecurity continues to invade developer workflows, you can bet
    this feature will prove its value to you sooner or later.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Generate documentation
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do you hate writing docstrings? That’s a trick question. If you’re a software
    developer, you probably think that the code itself is all the documentation anyone
    could ever need. But you’ve also seen the power of well-documented code when using
    the documentation features both in the main UI and in SciView. Wouldn’t it be
    nice if your own functions were as well documented without the need for you to
    write that documentation yourself? *Figure 16**.21* shows me generating a docstring
    for a function in one of my projects.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.23: Don’t write documentation, generate it](img/B19644_16_023.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.23: Don’t write documentation, generate it'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Documentation in this case is really just another form of boilerplate. You should
    let the IDE generate that for you, then maybe improve on what it creates if needed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter Notebook support for Polars
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While pandas is great, for big data, it is too slow. Spark and other big data
    frameworks can help but only by scaling horizontally, which involves setting up
    multiple compute nodes on your network. **Polars** is a data science library designed
    to allow you to work with large data without resorting to using multiple computers
    and has long been a requested feature in PyCharm. If your DataFrame fits in your
    computer’s memory, you can use it in Polars and view it in PyCharm just as you
    would any other DataFrame.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, PyCharm supports the **Plotly** library for visualization, which
    uniquely works with Polars DataFrames. When you combine PyCharm’s support for
    these advanced libraries, you can overcome many of the obstacles that are normally
    cited as detractors for using Polars.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Summary and closing remarks
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered a great deal in a short time! At least it feels this way for
    me since in many of these chapters it was extremely tempting to jump into a tutorial
    on the subject we were covering. For example, in the Flask and Django chapters,
    I felt “wrong” about not giving you a tutorial on Flask and Django. I didn’t do
    so because those are quite literally books unto themselves both within and outside
    of the Packt library.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: We learned that the point of an IDE is to offer you a full suite of tools for
    every development task you might perform on a daily basis. When viewed through
    that lens, PyCharm is an amazing IDE that really has very few competitors.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: We saw how the basics around setting up a simple Python project are made easy
    by automating processes such as creating a virtual environment. The Professional
    edition of PyCharm has many additional features for project creation, mostly centered
    around project templates for the most popular types of projects in the areas of
    general software development, full stack web development, and data science. There
    is even a special edition for educational use, which allows you to create interactive
    lessons that play out directly in the IDE. We didn’t talk about that one, but
    if you’re interested, I’ll leave a link in the *Further* *reading* section.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Full stack web developers have a huge chunk of PyCharm’s tooling dedicated just
    to their work. We saw all the major frameworks supported, and the support isn’t
    even limited to Python. PyCharm can do anything WebStorm can do with respect the
    JavaScript development and working with modern JavaScript UI frameworks such as
    Angular, Vue, Vite, and React.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm has truly complete tooling for interacting with relational and non-relational
    databases. This feature set is mainly from DataGrip, a different IDE from JetBrains
    focused completely on databases, in particular on creating and development relational
    structures. It has full support for MongoDB and Redis, which are two that I use
    daily. Where I would normally need to flip to tools such as Studio 3T or Redis
    Insights, I can instead just stay in PyCharm. The diversity of platforms supported
    is staggering! There are dozens of supported databases, and sometimes it can be
    fun to just look at the list and go look up the ones you’ve never heard of.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: After covering databases, we learned about the boon that PyCharm brings to the
    field of data science. You can use what I’ll call a light version of Jupyter Notebooks
    by leveraging code cells in IPython. I’m not a daily data science guy at work,
    but sometimes I like to pretend that I am. The code cell features covered in *Chapters
    12* and *13* are useful for tasks such as integrating multiple APIs or microservices
    together. I can create a prototype script using cells that draw data from different
    APIs or microservices, toss them into a pandas DataFrame, and I can use SciView
    to see the results even if I don’t need to keep the DataFrame calls in my real
    program. Just being able to visualize the data in several easy tables rendered
    next to each other can be a big help.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: If you are a data science practitioner, your support grows with tools such as
    Jupyter Notebooks integration making PyCharm a one-stop tool for your whole workflow.
    That’s the point of the tool for its three different audiences.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: When Packt asked me to write this book, I was excited and daunted. I was excited
    because I had just learned that LinkedIn Learning had taken down my PyCharm course,
    and that was one of my personal favorites. This book offered me the opportunity
    to do a deeper dive than you can do in a 2-hour video course. If 2-hour video
    courses are your thing I have one left on LinkedIn covering developing APIs with
    Flask. I doubt they’ll keep it up much longer, so if you’re interested, be sure
    to check it out before they take it down. I’ll put a link in the *Further reading*
    section. My newer video courses can be found on my course website, [https://maddevskilz.com](https://maddevskilz.com).
    Naturally, anything about Python will feature PyCharm as the IDE.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: The idea (.idea?) of writing this book was daunting because there is so much
    packed (Packt?) into this IDE and I actually do know what I don’t know. I don’t
    know everything. I definitely found features I didn’t know were there when I started.
    I probably got some things wrong. That’s OK (I hope). Ending this book is a single
    point in time on a journey that, for me, started seven years ago when I got fed
    up with Visual Studio and web development in C# in general. When I saw how easy
    it was to create applications in Flask, and then again how easy PyCharm made it
    for a total n00b like me to actually get real work done, I was hooked. Writing
    a book like this is a huge responsibility with potentially a huge impact. Coding
    is a legitimate superpower. Unlike most superpowers in the movies, it is a superpower
    that can be taught. There is no need to come from a far-away planet, get bitten
    by a radioactive spider, or get injected with an experimental serum. While some
    of that might help, all you really need is grit, curiosity, and to put in the
    hard work. If you master this craft even a little bit, you can do great things.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: I’ve had the opportunity to create software that helps choose treatment modalities
    for prostate cancer patients. The project didn’t wind up going anywhere, but a
    year after I had shelved the project my father called and told me he had just
    gotten a diagnosis for prostate cancer. The extra moral of this story is to never
    delete your old repos! My father was a pathologist himself, and with the help
    of the doctor who created the algorithm, we ran my dad’s numbers through the program
    and the resulting treatment gave me another 8 years with him.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: I’ve also been part of projects designed to help keep my country safe, train
    pilots in the US Marine Corps, and to manage IT assets. When I was working on
    these projects, they were just projects. They were deadlines I had to meet, and
    they were sources of stress. But every piece of software published, indeed every
    line of code we write has the potential to help make the world around us a better
    place! Sometimes the benefits are obvious, as with the cancer treatment software.
    Even software with a mundane purpose, such as enterprise storage capacity planning,
    can have far-reaching benefits since this too is a tool for enabling others to
    do what they do and build what they build.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Consider too, our superpower works at scale. Superman can only be in one place
    at one time; a fact too frequently exploited by various supervillains. We are
    not limited in this way. There are apps in multiple app stores that can help dyslexic
    children learn to read. That one app downloaded tens of thousands of times can
    educate generations that would be marginalized or ignored by the public education
    systems of most countries, which value test scores and funding over outcomes.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: You have a superpower! Use it! These tools make it easier! If I’ve hooked even
    one person and they get the benefit from this tool and this language that I have
    gotten since I started, then for me, this book is a wild success.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Be sure to check out the companion website for the book at [https://www.pycharm-book.com](https://www.pycharm-book.com),
    along with the following useful resources:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Braunton, A. (2018) *Hands-On DevOps with* *Vagrant*. Packt.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RESTful APIs with Python 3 and Flask (linkedin.com): [https://www.linkedin.com/learning/building-restful-apis-with-flask/restful-apis-with-python-3-and-flask-4](https://www.linkedin.com/learning/building-restful-apis-with-flask/restful-apis-with-python-3-and-flask-4
    )'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Polars library: [https://www.pola.rs/](https://www.pola.rs/ )'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Plotly Library for Python: [https://plotly.com/python/](https://plotly.com/python/
    )'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Educational edition of PyCharm: [https://www.jetbrains.com/pycharm-edu/](https://www.jetbrains.com/pycharm-edu/)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HashiCorp Vagrant: [https://www.vagrantup.com/](https://www.vagrantup.com/
    )'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HashiCorp Terraform: [https://www.terraform.io/](https://www.terraform.io/)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Desktop: [https://www.docker.com/products/docker-desktop/](https://www.docker.com/products/docker-desktop/
    )'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Oracle VirtualBox: [https://www.virtualbox.org/](https://www.virtualbox.org/
    )'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JetBrains AI Assistant: [https://blog.jetbrains.com/idea/2023/06/ai-assistant-in-jetbrains-ides/](https://blog.jetbrains.com/idea/2023/06/ai-assistant-in-jetbrains-ides/)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
