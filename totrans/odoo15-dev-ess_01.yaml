- en: '[*Chapter 4*](B16119_04_Final_PD_ePub.xhtml#_idTextAnchor119): Extending Modules'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of Odoo's most powerful capabilities is being able to add features without
    directly touching the code of the extended modules. This allows for clean feature
    extensions that are isolated in their own code components. Extending modules can
    be achieved through inheritance mechanisms, which work as modification layers
    on top of existing objects. These modifications can happen at every level – including
    the model, view, and business logic levels. Instead of directly modifying an existing
    module, we will create a new module by adding a layer on top of the existing one
    with the intended modifications.
  prefs: []
  type: TYPE_NORMAL
- en: The previous chapter guided us through creating a new app from scratch. In this
    chapter, we will learn how to create modules that extend existing apps or modules
    and use existing core or community features.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning project – extending the Library app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new field to an existing model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending models using classic in-place extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More model inheritance mechanisms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending views and data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending web pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you should be able to create Odoo modules that
    extend existing apps. You will be able to add modifications to any of the several
    application components: models, views, business logic code, web page controllers,
    and web page templates.'
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need an Odoo server that you can command from a terminal
    session.
  prefs: []
  type: TYPE_NORMAL
- en: The code in this chapter depends on the code that we created in [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072),
    *Your First Odoo Application*. You should have that code in your add-ons path
    and have a database with the `library_app` module installed.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter adds the `library_member` add-on module to our project. The corresponding
    code can be found in this book's GitHub repository, [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials),
    in the `ch04` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Learning project – extending the Library app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072), *Your First
    Odoo Application*, we created the initial module for the `library_member`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the features we must provide:'
  prefs: []
  type: TYPE_NORMAL
- en: Library books can be available to be borrowed or not. This information should
    be shown in the book form and on the website's catalog page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some library member master data, along with the library card number, plus personal
    data, such as name, address, and email.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We would like to provide members with the messaging and social features that
    are available on the borrowing form, including the planned activities widget,
    to allow for better collaboration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Later, we plan to introduce a feature that allows members to borrow books from
    the library, but this is outside our scope for now. This will happen gradually
    throughout the next few chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Books
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a summary of the technical changes we must introduce to books:'
  prefs: []
  type: TYPE_NORMAL
- en: Add an `Is Available?` field. For now, it will be managed manually, but this
    can be automated later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extend the ISBN validation logic to also support the older 10-digit ISBN format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extend the web catalog page to identify unavailable books and to allow the user
    to only filter through available books.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a summary of the technical changes to introduce to library
    members:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new model to store the person's name, card number, and contact information,
    such as email and address.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the social discussion and planned activities features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To start working on this extension module, we should create the `library_member`
    directory alongside `library_app` and add two files—an empty `__init__.py` file
    and a `__manifest__.py` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are ready to start working on the features. Our first task is a frequent
    and simple request – adding a new field to an existing model. This happens to
    be a great way to introduce Odoo's inheritance mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new field to an existing model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our first task is to add the `is_available` Boolean field to the book model.
    For now, this will be a simple editable field, but at a later stage, we can imagine
    changing it to be automatic, based on books that have been borrowed and returned.
  prefs: []
  type: TYPE_NORMAL
- en: To extend an existing model, we must use a Python class with the `_inherit`
    attribute, identifying the model being extended. The new class inherits all of
    the features of the parent Odoo model, and we only need to declare the modifications
    to introduce. We can think of this type of inheritance as getting a reference
    for the existing model and making in-place changes to it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new fields with the in-place model extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extending models is done through Python classes by using the Odoo-specific inheritance
    mechanism that's declared using the `_inherit` class attribute. This `_inherit`
    class attribute identifies the model to be extended. The declared calls capture
    all the features of the inherited Odoo model and are ready for the modifications
    to introduce to be declared.
  prefs: []
  type: TYPE_NORMAL
- en: 'The coding style guidelines recommend having a Python file for each model,
    so we will add a `library_member/models/library_book.py` file that extends the
    original model. Let''s start by adding the `__init__.py` code files that are needed
    for that file to be included in the module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `library_member/__init__.py` file, making the code that''s in the `models`
    subdirectory known:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `library_member/models/__init__.py` file, importing the used code files
    inside that subdirectory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `library_member/models/library_book.py` file by extending the `library.book`
    model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we used the `_inherit` class attribute to declare the model to extend.
    Notice that we didn't use any other class attributes, not even `_name`. This is
    not needed unless we want to make changes to any of them.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '`_name` is the model identifier; what happens if we try to change it? This
    is allowed, and doing so creates a new model that is a copy of the inherited one.
    This is called **prototype inheritance** and it will be discussed later in this
    chapter, in the *Copying models with prototype inheritance* section.'
  prefs: []
  type: TYPE_NORMAL
- en: We can think of this as getting a reference to a model definition living in
    a central registry and making in-place changes to it. This can include adding
    fields, modifying existing fields, modifying model class attributes, or adding
    methods with new business logic.
  prefs: []
  type: TYPE_NORMAL
- en: To add the new model fields to the database tables, we must install the add-on
    module. If everything goes as expected, the newly added fields should be visible
    if we go to the `library.book` model.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a field to the Form view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Forms, lists, and search views are defined using XML data structures. To extend
    views, we need a way to modify the XML. This means locating XML elements and then
    introducing modifications at those points.
  prefs: []
  type: TYPE_NORMAL
- en: The XML data record for inherited views is similar to the ones for regular views,
    with an additional `inherit_id` attribute for referring to the view being extended.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to extend the book view to add the `is_available` field.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is find the XML ID for the view to be extended.
    We can find that by looking up the view in the `library_app.view_form_book`.
  prefs: []
  type: TYPE_NORMAL
- en: While we're there, we should also locate the XML element to insert the changes.
    We will choose to add the `Is Available?` field after the `ISBN` field. The element
    to use can usually be identified by its `name` attribute. In this case, it's `<field
    name="isbn" />`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When adding the XML file to extend the `Partner` views, `views/book_view.xml`,
    it should have the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The inheritance-specific elements are highlighted in the preceding code. The
    `inherit_id` record field identifies the view to be extended while using the `ref`
    attribute to refer to its external identifier.
  prefs: []
  type: TYPE_NORMAL
- en: The `arch` field contains the element for declaring the extension point to use,
    the `<field>` element with `name="isbn"`, and the position of the new elements
    to add, which is `position="after"` in this case. Inside the extension elements,
    we have the XML to add, which is the `is_available` field in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the book form will look like after creating this extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – The book form with the "Is Available?" field added'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.1_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – The book form with the "Is Available?" field added
  prefs: []
  type: TYPE_NORMAL
- en: We just went through the inheritance basics and added a new field for the model
    and view layers. Next, we will learn more about the model extension approach we
    used; that is, classic inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: Extending models using classic in-place extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can think of the classic model inheritance as an in-place extension. When
    a Python class with the `_inherit` attribute is declared, it gets a reference
    to the corresponding model definition, to then add extensions to it. The model
    definition is stored in the Odoo model registry and is available for us to add
    further modifications to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s learn how to use this for frequent extension use cases: modifying
    the attributes of an existing field and extending Python methods to add or modify
    business logic.'
  prefs: []
  type: TYPE_NORMAL
- en: Incrementally modifying existing fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we're extending a model, existing fields can be modified incrementally.
    This means that we only need to define the field attributes to change or add.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will make two changes to the book fields that were created in the `library_app`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: On the `isbn` field, add a help tooltip explaining that we support both 10-
    and 13-digit ISBNs, with the latter being implemented in the following section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the `publisher_id` field, add a database index to it to make searching on
    it more efficient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We should edit the `library_member/models/library_book.py` file and add the
    following lines to the `library.book` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This modifies the fields with the specified attributes, leaving all the other
    attributes that were not explicitly mentioned unmodified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we upgrade the module, going to the book form and hovering the mouse pointer
    over the ISBN field will show the tooltip message that was added to the field.
    The effect of `index=True` is harder to notice, but it can be seen in the field
    definition, which can be accessed from the **Developer Tools** menu by choosing
    the **View Fields** option, or from the **Settings** | **Technical** | **Database
    Structure** | **Models** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – The Publisher field with the index enabled'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.2_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – The Publisher field with the index enabled
  prefs: []
  type: TYPE_NORMAL
- en: Extending Python methods to add features to the business logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The business logic that's coded in Python methods can also be extended. For
    this, Odoo uses the Python object inheritance mechanism to extend the inherited
    class behavior.
  prefs: []
  type: TYPE_NORMAL
- en: As a practical example, we will extend the library book ISBN validation logic.
    The logic provided by the base Library app validates modern 13-digit ISBNs. But
    some older titles might come with a 10-digit ISBN. The `_check_isbn()` method
    should be extended to also validate these cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `library_member/models/library_book.py` file by adding the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To extend a method, in the inherited class, we define a method with the same
    name – `_check_isbn()`, in this case. This method should, at some point, use `super()`
    to call the corresponding method that was implemented in the parent class. In
    this example, the particular code that was used was `super()._check_isbn()`.
  prefs: []
  type: TYPE_NORMAL
- en: In this method extension, we added our logic before the `super()` call, running
    the parent class code. It checks whether the ISBN is 10 digits long. In that case,
    the added ISBN-10 validation logic is executed. Otherwise, it falls back to the
    original ISBN checking logic, handling the 13-digit case.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can try this, or even better, write a test case. Here is an example of a
    10-digit ISBN: the original ISBN of William Golding''s *Lord of the Flies* is
    0-571-05686-5.'
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 11
  prefs: []
  type: TYPE_NORMAL
- en: In Odoo 11, the Python version that was used changed from *2.7* to *3.5* or
    later. Python 3 has breaking changes and is not fully compatible with Python 2\.
    In particular, the `super()` syntax was simplified in Python 3\. For previous
    Odoo versions that use Python 2, `super()` needs two arguments – the class name
    and `self`; for example, `super(Book, self)._check_isbn()`.
  prefs: []
  type: TYPE_NORMAL
- en: Classic inheritance is the most frequently used extension mechanism. But Odoo
    provides additional extension approaches that are useful in other cases. We will
    explore those next.
  prefs: []
  type: TYPE_NORMAL
- en: More model inheritance mechanisms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous section discussed **classic inheritance**, which can be seen as
    an *in-place extension*. This is the most frequently used approach, but the Odoo
    framework also supports a few other extension mechanisms that are useful in other
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are delegation inheritance, prototype inheritance, and the use of mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: '`User` record embeds a `Partner` record, so that a `User` record has all the
    fields available for the `Partner` records, plus the fields specific to the `User`
    records. It is used through the `_inherits` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_inherit` with the model to copy and the `_name` attribute with the identifier
    for the new model to be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail.thread` model, which is provided by the `mail` add-on module. It implements
    the chatter and messaging features that are available in several models throughout
    Odoo, such as *Partners* and *Sales Quotations*. A `mixin` class is constructed
    from `Models.abstract`, instead of `Models.model`, and is used with `_inherit`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next few sections explore these possibilities in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding models using delegation inheritance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Delegation inheritance** allows us to reuse data structures, without duplication
    in the database. It embeds an instance of the delegated model inside the inheriting
    model.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To be technically precise, delegation inheritance is not real object inheritance;
    instead, it is object composition, where some features of an object are delegated
    to, or provided by, a second object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the following about delegation:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new model record also creates and links a delegated model record.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fields from the delegated model that don't exist in the inheriting model are
    available for read and write operations, behaving like related computed fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, for the User model, each record contains a Partner record, so the
    fields you find on a Partner will be available, plus a few fields that are specific
    to users.
  prefs: []
  type: TYPE_NORMAL
- en: For the Library project, we want to add a **Library Members** model. Members
    will be able to borrow books and have a library card to be used when borrowing.
    Member master data should include the card number, plus some personal information,
    such as email and address. The Partner model already supports contact and address
    information, so it's best to reuse it, rather than duplicating the data structures.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Partner fields to the Library Member model using delegation inheritance,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python file that will be used to implement inheritance must be imported.
    Edit `library_member/model/__init__.py` by adding the following highlighted line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the Python file describing the new Library Member model, `library_member/models/library_member.py`,
    which contains the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: from odoo import fields, models
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'class Member(models.Model):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: _name = "library.member"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: _description = "Library Member"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '_inherits = {"res.partner": "partner_id"}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: card_number = fields.Char()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: partner_id = fields.Many2one(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"res.partner",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ondelete="cascade",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: required=True)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add the security ACLs, create the `library_member/security/ir.model.access.csv`
    file with this content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add the menu item, create the `library_member/views/library_menu.xml` file
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add the views, create the `library_member/views/member_view.xml` file with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we should edit the manifest to declare these three new files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If everything was entered correctly, after a module upgrade, we should be able
    to work with the new Library Member model.
  prefs: []
  type: TYPE_NORMAL
- en: Copying models with prototype inheritance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Classic inheritance uses the `_inherit` attribute to extend a model. Since the
    `_name` attribute is not modified, it effectively performs an in-place modification
    on the same model.
  prefs: []
  type: TYPE_NORMAL
- en: If the `_name` attribute is also modified, along with `_inherit`, we get a new
    model that is a copy of the inherited one. This new model can then have features
    added to it that are specific to it and won't be added to the parent model. The
    copied model is independent of the parent model, which will be unaffected by its
    modifications. It has its own database table and data. The official documentation
    calls this **prototype inheritance**.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, there is little benefit in using `_inherit` to copy a model. Instead,
    delegation inheritance is preferred, since it reuses data structures without duplicating
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Things become more interesting when we use inheritance from multiple parents.
    For this, `_inherit` will be a list of model names, instead of a single name.
  prefs: []
  type: TYPE_NORMAL
- en: This can be used to mix several models into one. It allows us to have a model
    proposing features to be reused several times. This pattern is widely used with
    abstract mixin classes. This will be discussed in detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing model features using mixin classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting the `_inherit` attribute with a list of model names will inherit the
    features from those models. Most of the time, this is done to leverage mixin classes.
  prefs: []
  type: TYPE_NORMAL
- en: A `models.AbstractModel`, with no actual representation in the database, instead
    of `models.Model`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Odoo standard add-ons propose several useful mixins. Searching the code
    for `models.AbstractModel` will reveal them. What''s noteworthy, and probably
    the two most widely used, are these mixins, which are provided by the Discuss
    app (the `mail` add-on module):'
  prefs: []
  type: TYPE_NORMAL
- en: The `mail.thread` mixin provides features for the message board, also known
    as **chatter**, which can be found at the bottom or right-hand side of many document
    forms, along with the logic regarding messages and notifications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mail.activity.mixin` mixin provides *activities*, which are also exposed
    through the chatter discussion widget, to define and plan to-do tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in Odoo 11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The *activities* mixin is a new feature that was introduced in Odoo 11 and is
    not available in earlier versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Chatter and activities are widely used features, and in the next section, we
    will take a moment to demonstrate how to add them.
  prefs: []
  type: TYPE_NORMAL
- en: Adding message chatter and activities to a model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now add the message chatter and activity mixins to the **Library Members**
    model. This is what is needed to add them:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the dependency to the add-on module that's providing the mixin models; that
    is, `mail`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inherit the `mail.thread` and `mail.activity.mixin` mixin classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add fields to the `Form` view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s check the preceding steps in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the dependency to the `mail` add-on, edit the `__manifest__.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To inherit the mixin classes, edit the `library_member/models/library_member.py`
    file to add the following highlighted text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we must add the relevant fields to `Library Member Form`. Edit the
    `library_member/views/member_view.xml` file by adding the following highlighted
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, the `mail` module not only provides fields for the followers,
    activities, and messages, but it also provides specific web client widgets for
    them, all of which are being used here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the module has been upgraded, the **Library Members** form should look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – The Library Members form view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.3_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – The Library Members form view
  prefs: []
  type: TYPE_NORMAL
- en: Note that the mixins alone don't cause any changes to be made to access security,
    including record rules. In some cases, there are record rules in place, limiting
    what records are accessible to each user. For example, if we want users to only
    view records they are followers of, a record rule for that must be explicitly
    added.
  prefs: []
  type: TYPE_NORMAL
- en: The `mail.thread` model includes a field for listing the follower `message_partner_ids`.
    To implement the followers' access rules, a `[('message_partner_ids', 'in', [user.partner_id.id])]`.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we've seen how to extend modules at the model and logic layers. The
    next step is to extend the views to reflect the changes that were made in the
    model layer.
  prefs: []
  type: TYPE_NORMAL
- en: Extending views and data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views and other data components can also be modified by an extension module.
    For views, the case is usually to add features. The view presentation structure
    is defined with XML. To extend this XML, we must locate the node to extend and
    then declare the action to perform there, such as inserting additional XML elements.
  prefs: []
  type: TYPE_NORMAL
- en: The other data elements represent records that were written to the database.
    Extension modules can write on them to change some values.
  prefs: []
  type: TYPE_NORMAL
- en: Extending views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Views are defined using XML and are stored in the architecture field, `arch`.
    To extend a view, we must locate the node where the extension will take place,
    and then perform the intended change, such as adding XML elements.
  prefs: []
  type: TYPE_NORMAL
- en: Odoo provides a simplified notation to extend XML by using the XML tag we want
    to match –  `<field>`, for example – with one or more distinctive attributes to
    match, such as `name`. Then, we must add the `position` attribute to declare the
    kind of modification to make.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recovering the example we used earlier in this chapter, to add additional content
    after the `isbn` field, we can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Any XML element and attribute can be used to select the node to use as the extension
    point, except for `string` attributes. The values of string attributes are translated
    into the user's active language during view generation, so they can't be reliably
    used as node selectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The extension operation to perform is declared with the `position` attribute.
    Several operations are allowed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`inside` (the default): Appends the content inside the selected node. The node
    should be a container, such as `<group>` or `<page>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`after`: Adds the content after the selected node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`before`: Adds the content before the selected node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`replace`: Replaces the selected node. If it''s used with empty content, it
    deletes the element. Since Odoo 10, it also allows you to wrap an element with
    other markups by using `$0` in the content to represent the element being replaced;
    for example, `<field name="name" position="replace"><h1>$0</h1></field>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attributes`: Modifies the attribute values for the matched element. The content
    should have one or more `<attribute name="attr-name">value<attribute>` elements,
    such as `<attribute name="invisible">True></attribute>`. If it''s used with no
    body, such as in `<attribute name="invisible"/>`, the attribute is removed from
    the selected element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While `position="replace"` allows us to delete XML elements, this should be
    avoided. It can break based on modules that may be using the deleted node as an
    extension point to add other elements. As an alternative, consider leaving the
    element and making it invisible instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Moving XML nodes to a different location
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Except for the `attributes` operation, the preceding locators can be combined
    with a child element with `position="move"`. The effect is to move the child locator
    target node to the parent locator's target position.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 12
  prefs: []
  type: TYPE_NORMAL
- en: The `position="move"` child locator is new in Odoo 12 and is not available in
    previous versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of moving `my_field` from its current location to the position
    after `target_field`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The other view types, such as list and search views, also have an `arch` field
    and can be extended in the same way as form views can.
  prefs: []
  type: TYPE_NORMAL
- en: Using XPath to select XML extension points
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some cases, we may not have an attribute with a unique value to use as the
    XML node selector. This can happen when the element to select does not have a
    `name` attribute, as is often the case for `<group>`, `<notebook>`, or `<page>`
    view elements. Another case is when there are several elements with the same `name`
    attribute, as in the case of Kanban QWeb views, where the same field can be included
    more than once in the same XML template.
  prefs: []
  type: TYPE_NORMAL
- en: For these cases, we need a more sophisticated way to locate the XML element
    to extend. Being XML, **XPath expressions** are the natural way to locate elements.
  prefs: []
  type: TYPE_NORMAL
- en: For example, taking the book form view we defined in the previous chapter, an
    XPath expression for locating the `<field name="isbn">` element is `//field[@name]='isbn'`.
    This expression finds `<field>` elements with a `name` attribute equal to `isbn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The XPath equivalent to the book form view extension that we created in the
    previous section would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'More information on the supported XPath syntax can be found in the official
    Python documentation: [https://docs.python.org/3/library/xml.etree.elementtree.html#supported-xpath-syntax](https://docs.python.org/3/library/xml.etree.elementtree.html#supported-xpath-syntax).'
  prefs: []
  type: TYPE_NORMAL
- en: If an XPath expression matches multiple elements, only the first one will be
    selected as the target for an extension. Therefore, they should be made as specific
    as possible using unique attributes. Using the `name` attribute is the easiest
    way to ensure that we find the elements we want to use as an extension point.
    Thus, it is important to have these unique identifiers in the XML elements of
    the views we create.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying existing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regular data records can also be *extended*, which, in practice, means writing
    over existing values. For this, we just need to identify the record to write on,
    as well as the fields and values to update. XPath expressions are not needed since
    we are not modifying XML `arch` structures, as we do for views.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<record id="x" model="y">` data loading elements perform an insert or
    update operation on model `y`: if record `x` does not exist, it is created; otherwise,
    it is updated/written over.'
  prefs: []
  type: TYPE_NORMAL
- en: Records in other modules can be accessed using the `<module>.<identifier>` global
    identifier, so a module can update a record that's been created by another module.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The dot (`.`) is reserved to separate the module name from the object identifier.
    So, it can't be used in identifier names. Instead, use the underscore (`_`) character.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we will change the name of the User security group to `Librarian`.
    The record to modify was created in the `library_app` module, with the `library_app.library_group_user`
    identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we will add the `library_member/security/library_security.xml`
    file, along with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note that we used a `<record>` element, writing only to the `name` field. You
    can think of this as a write operation in this field.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When using a `<record>` element, we can select the fields we want to write on,
    but the same is not true for shortcut elements, such as `<menuitem>` and `<act_window>`.
    These need all of the attributes to be provided and missing any of them will set
    the corresponding field to an empty value. However, you can use `<record>` to
    set a value on a field that was created through a shortcut element.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to add the `library_member/security/library_security.xml` file
    to the `data` key in the manifest file. Having done this and upgraded the module,
    we should see the name change in the user groups.
  prefs: []
  type: TYPE_NORMAL
- en: Extending views allows you to introduce modifications to the backend presentation
    layer. But the same can be done to the frontend web presentation layer. This is
    what we will address in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Extending web pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extensibility is a key design choice for the Odoo framework, and the Odoo web
    components are no exception. So, Odoo web controllers and templates can be also
    extended.
  prefs: []
  type: TYPE_NORMAL
- en: The Library app that we created in the previous [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072),
    *Your First Odoo Application*, provided a book catalog page that now needs to
    be improved.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will extend it to leverage the book availability information that was added
    by the Library Members module:'
  prefs: []
  type: TYPE_NORMAL
- en: On the controller side, we will add support to a query string parameter to filter
    only the available books; that is, `/library/books?available=1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the template side, we will specify the books that are not available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start extending the web controller.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the web controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Web controllers** are responsible for handling web requests and rendering
    the page to return as a response. They should focus on presentation logic, not
    deal with business logic, which should be incorporated into model methods instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Supporting additional parameters or even URL routes is web presentation-specific
    and something appropriate for a web controller to deal with.
  prefs: []
  type: TYPE_NORMAL
- en: The `/library/books` endpoint will be extended here to support a query string
    parameter, `available=1`, which we will use to filter the catalog of books so
    that it only displays the available titles.
  prefs: []
  type: TYPE_NORMAL
- en: To extend an existing controller, we need to import the original object that
    created it, declare a Python class based on it, and then implement the class method
    holding the additional logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code to extend the controller should be added to the `library_member/controllers/main.py`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The steps to add the controller code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `library_member/controllers/main.py` file, ensuring it contains the
    preceding code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make this new Python file known to the module by adding the controller''s subdirectory
    to the `library_member/__init__.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `library_member/controllers/__init__.py` file with the following line
    of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After this, accessing `http://localhost:8069/library/books?available=1` should
    only show us the books with the `Is Available?` field checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's review the controller extension code to understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: The controller to extend, `Books`, was originally declared by the `library_app`
    module, in the `controllers/main.py` file. So, to get a reference to it, we need
    to import `odoo.addons.library_app.controllers.main`.
  prefs: []
  type: TYPE_NORMAL
- en: This is different from models, where we have a central registry available where
    we can get a reference to any model class, such as `self.env['library.book']`,
    without knowing the particular file that's implementing it. We don't have such
    a registry for controllers, and we need to know the module and file implementing
    the controller to be able to extend it.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the `BooksExtended` class is declared based on the original one, `Books`.
    The identifier name that's used for this class is not relevant. It is used as
    a vehicle to reference the original class and extend it.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we (re)define the controller method to be extended, which is `list()`
    in this case. It needs to be decorated with at least the simple `@http.route()`
    for its route to be kept active. If it's used like this, with no arguments, it
    will preserve the routes that are defined by the parent class. But we could also
    add parameters to this `@http.route()` decorator to replace and redefine the class
    routes.
  prefs: []
  type: TYPE_NORMAL
- en: The `list()` method has a `**kwargs` argument, which captures all the parameters
    in the `kwargs` dictionary. These are the parameters that are given in the URL,
    such as `?available=1`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Using a `**kwargs` argument that sweeps all the given arguments is not required,
    but it makes our URL tolerant to unexpected URL arguments. If we choose to specify
    particular arguments, if different ones are set, the page will fail immediately
    and return an **internal error** when trying to call the corresponding controller.
  prefs: []
  type: TYPE_NORMAL
- en: The code for the `list()` method starts by calling the corresponding parent
    class method using `super()`. This returns the `Response` object that was computed
    by the parent method, including the attributes and the template to render, `template`,
    and the context to use when rendering, `qcontext`. But the HTML is yet to be generated.
    This will only happen when the controller finishes running. So, it is possible
    to change the `Response` attributes before the final rendering is done.
  prefs: []
  type: TYPE_NORMAL
- en: The method checks `kwargs` for a non-empty value in the `available` key. If
    it is found, the non-available books are filtered out, and `qcontext` is updated
    with this recordset. So, when the controller's processing completes, the HTML
    will be rendered using the updated book's recordset, which will only include available
    books.
  prefs: []
  type: TYPE_NORMAL
- en: Extending QWeb templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web page templates are XML documents, just like the other Odoo view types, and
    selector expressions can be used, as we do for other view types, such as forms.
    QWeb templates are usually more complex since they include more HTML elements,
    so most of the time, the more versatile `XPath` expressions are needed.
  prefs: []
  type: TYPE_NORMAL
- en: To modify the actual presentation of the web page, we should extend the QWeb
    template being used. As an example of this, we will extend `library_app.book_list_template`
    to add visual information about the books that are not available.
  prefs: []
  type: TYPE_NORMAL
- en: A QWeb extension is a `<template>` element that uses the additional `inherit_id`
    attribute to identify the QWeb template to extend. It is `library_app.book_list_template`
    in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `library_member/views/book_list_template.xml` file, along with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare this additional data file in the add-on manifest; that is, `library_member/__manifest__.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After this, accessing `http://localhost:8069/library/books` should show the
    additional (not available) visual information on the books that are not available.
    Here is what the web page will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Books list web page with availability information'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.4_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – Books list web page with availability information
  prefs: []
  type: TYPE_NORMAL
- en: This completes our review of how to extend each type of Odoo component, from
    the data model to the user interface elements.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extensibility is a key feature of the Odoo framework. We can build add-on modules
    that change or add features to other existing add-ons at the several layers needed
    to implement features in Odoo. With this, our projects will be able to reuse and
    extend third-party add-on modules in a clean and modular way.
  prefs: []
  type: TYPE_NORMAL
- en: At the model layer, we use the `_inherit` model attribute to get a reference
    to an existing model and then make in-place modifications to it. The field objects
    inside the model also support incremental definitions so that we can *redeclare*
    an existing field, providing only the attributes to change.
  prefs: []
  type: TYPE_NORMAL
- en: Additional model inheritance mechanisms allow you to reuse data structures and
    business logic. Delegation inheritance, which is activated with the `delegate=True`
    attribute on a many-to-one relationship field (or the old-style `inherits` model
    attribute), makes all the fields from the related model available and reuses its
    data structure. Prototype inheritance, which uses `_inherit` with additional models,
    allows you to copy features (data structure definitions and methods) from other
    models and enables the use of abstract mixin classes, providing a set of reusable
    features, such as document discussion messages and followers.
  prefs: []
  type: TYPE_NORMAL
- en: At the view layer, the view structures are defined using XML, and extensions
    can be made by locating an XML element (using XPath or the Odoo simplified syntax)
    and providing the XML fragment to add. Other data records that are created by
    a module can also be modified by extension modules by simply referencing the corresponding
    complete XML ID and performing a write operation on the intended fields.
  prefs: []
  type: TYPE_NORMAL
- en: At the business logic layer, extensions can be made with the same mechanism
    that's used for model extension and redeclaring the methods to extend. Inside
    them, the `super()` Python function is used to call the code of the inherited
    method, and our additional code can run before or after that.
  prefs: []
  type: TYPE_NORMAL
- en: For the frontend web pages, the presentation logic in controllers can be extended
    in a similar way to model methods, and the web templates are also views with XML
    structures, so these can be extended in the same way as the other view types.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deeper into models and explore everything
    they can offer us.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some additional references to the official documentation,
    which can provide useful information regarding module extensions and inheritance
    mechanisms:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Model inheritance: [https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'View inheritance: [https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Web controllers: [https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
