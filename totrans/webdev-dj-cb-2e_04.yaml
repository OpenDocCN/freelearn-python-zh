- en: Chapter 4. Templates and JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 模板和JavaScript
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Arranging the base.html template
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安排`base.html`模板
- en: Including JavaScript settings
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含JavaScript设置
- en: Using HTML5 data attributes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML5数据属性
- en: Opening object details in a modal dialog
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模态对话框中打开对象详情
- en: Implementing a continuous scroll
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现连续滚动
- en: Implementing the Like widget
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现点赞小部件
- en: Uploading images by Ajax
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Ajax上传图片
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: We are living in the Web2.0 world, where social web applications and smart websites
    communicate between servers and clients using Ajax, refreshing whole pages only
    when the context changes. In this chapter, you will learn best practices to deal
    with JavaScript in your templates in order to create a rich user experience. For
    responsive layouts, we will use the Bootstrap 3 frontend framework. For productive
    scripting, we will use the jQuery JavaScript framework.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生活在一个Web2.0的世界，在这个世界里，社交网络应用和智能网站通过Ajax在服务器和客户端之间进行通信，只有当上下文发生变化时才会刷新整个页面。在本章中，你将学习处理模板中JavaScript的最佳实践，以创建丰富的用户体验。对于响应式布局，我们将使用Bootstrap
    3前端框架。对于高效的脚本编写，我们将使用jQuery JavaScript框架。
- en: Arranging the base.html template
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安排`base.html`模板
- en: When you start working on templates, one of the first actions is to create the
    `base.html` boilerplate, which will be extended by most of the page templates
    in your project. In this recipe, we will demonstrate how to create such template
    for multilingual HTML5 websites with responsiveness in mind.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始处理模板时，首先要做的动作之一是创建`base.html`模板，这个模板将被项目中大多数页面模板扩展。在本食谱中，我们将演示如何创建这样一个模板，考虑到多语言HTML5网站的响应式设计。
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Responsive websites are the ones that adapt to the viewport of the device whether
    the visitor uses desktop browsers, tablets, or phones.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式网站是指能够适应设备视口的网站，无论访问者使用的是桌面浏览器、平板电脑还是手机。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create the `templates` directory in your project and set `TEMPLATE_DIRS` in
    the settings.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目中创建`templates`目录，并在设置中设置`TEMPLATE_DIRS`。
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'In the root directory of your `templates`, create a `base.html` file with the
    following content:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`templates`根目录下，创建一个包含以下内容的`base.html`文件：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the same directory, create another file named `base_simple.html` for specific
    cases, as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一目录下，创建另一个名为`base_simple.html`的文件，用于特定情况，如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The base template contains the `<head>` and `<body>` sections of the HTML document
    with all the details that are reused on each page of the website. Depending on
    the web design requirements, you can have additional base templates for different
    layouts. For example, we added the `base_simple.html` file, which has the same
    HTML `<head>` section and a very minimalistic `<body>` section; and it can be
    used for the login screen, password reset, or other simple pages. You can have
    separate base templates for single-column, two-column, and three-column layouts,
    where each of them extends `base.html` and overwrites the content of the `<body>`
    section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 基础模板包含了HTML文档的`<head>`和`<body>`部分，以及在每个网站页面上重复使用的所有详细信息。根据网页设计要求，你可以为不同的布局拥有额外的基础模板。例如，我们添加了`base_simple.html`文件，它具有相同的HTML
    `<head>`部分和一个非常简约的`<body>`部分；它可以用于登录屏幕、密码重置或其他简单页面。你可以为单列、双列和三列布局拥有单独的基础模板，其中每个模板都扩展`base.html`并覆盖`<body>`部分的内容。
- en: Let's look into the details of the `base.html` template that we defined earlier.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们之前定义的`base.html`模板的细节。
- en: In the `<head>` section, we define UTF-8 as the default encoding to support
    multilingual content. Then, we have the viewport definition that will scale the
    website in the browser in order to use the full width. This is necessary for small-screen
    devices that will get specific screen layouts created with the Bootstrap frontend
    framework. Of course, there is a customizable website title and the favicon will
    be shown in the browser's tab. We have extendable blocks for meta tags, style
    sheets, JavaScript, and whatever else that might be necessary for the `<head>`
    section. Note that we load the Bootstrap CSS and JavaScript in the template as
    we want to have responsive layouts and basic solid predefined styles for all elements.
    Then, we load the JavaScript jQuery library that efficiently and flexibly allows
    us to create rich user experiences. We also load JavaScript settings that are
    rendered from a Django view. You will learn about this in the next recipe.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<head>`部分，我们定义UTF-8为默认编码以支持多语言内容。然后，我们有viewport定义，它将在浏览器中缩放网站以使用全宽。这对于使用Bootstrap前端框架创建的特定屏幕布局的小屏幕设备是必要的。当然，有一个可定制的网站标题，favicon将在浏览器标签中显示。我们为元标签、样式表、JavaScript以及可能需要在`<head>`部分中使用的任何其他内容提供了可扩展的块。请注意，我们在模板中加载Bootstrap
    CSS和JavaScript，因为我们希望所有元素都有响应式布局和基本坚固的预定义样式。然后，我们加载JavaScript jQuery库，该库高效且灵活，允许我们创建丰富的用户体验。我们还加载了从Django视图渲染的JavaScript设置。你将在下一个菜谱中了解这一点。
- en: In the `<body>` section, we have the header with an overwritable navigation
    and a language chooser. We also have the content block and footer. At the very
    bottom, there is an extendable block for additional markup or JavaScript.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<body>`部分，我们有可覆盖的导航和语言选择器的页眉。我们还有内容块和页脚。在最底部，有一个可扩展的块用于额外的标记或JavaScript。
- en: The base template that we created is, by no means, a static unchangeable template.
    You can add to it the elements that you need, for example, Google Analytics code,
    common JavaScript files, the Apple touch icon for iPhone bookmarks, Open Graph
    meta tags, Twitter Card tags, schema.org attributes, and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的基本模板绝不是一种静态不可更改的模板。你可以添加你需要的内容，例如，Google Analytics代码、常见的JavaScript文件、iPhone书签的Apple触摸图标、Open
    Graph元标签、Twitter Card标签、schema.org属性等等。
- en: See also
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Including JavaScript settings* recipe
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*包含JavaScript设置* 菜谱'
- en: Including JavaScript settings
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含JavaScript设置
- en: Each Django project has its configuration set in the `conf/base.py` or `settings.py`
    settings file. Some of these configuration values also need to be set in JavaScript.
    As we want a single location to define our project settings, and we don't want
    to repeat the process when setting the configuration for the JavaScript values,
    it is a good practice to include a dynamically generated configuration file in
    the base template. In this recipe, we will see how to do that.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Django项目都在`conf/base.py`或`settings.py`设置文件中设置了其配置。其中一些配置值还需要在JavaScript中设置。由于我们希望在一个位置定义我们的项目设置，并且我们不希望在设置JavaScript值时重复这个过程，因此将一个动态生成的配置文件包含在基本模板中是一种良好的实践。在这个菜谱中，我们将看到如何做到这一点。
- en: Getting ready
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Make sure that you have the media, static, and request context processors set
    in the `TEMPLATE_CONTEXT_PROCESSORS` setting, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经在`TEMPLATE_CONTEXT_PROCESSORS`设置中设置了媒体、静态和请求上下文处理器，如下所示：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Also, create the `utils` app if you haven't done so already and place it under
    `INSTALLED_APPS` in the settings.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你还没有这样做，请创建`utils`应用并将其放置在设置中的`INSTALLED_APPS`下。
- en: How to do it…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Follow these steps to create and include the JavaScript settings:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建和包含JavaScript设置：
- en: 'Create a URL rule to call a view that renders JavaScript settings, as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个URL规则来调用一个渲染JavaScript设置的视图，如下所示：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the views of your `utils` app, create the `render_js()` view that returns
    a response of the JavaScript content type, as shown in the following:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`utils`应用的视图中，创建一个`render_js()`视图，该视图返回JavaScript内容类型的响应，如下所示：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a `settings.js` template that returns JavaScript with the global settings
    variable, as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`settings.js`模板，该模板返回包含全局设置变量的JavaScript，如下所示：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, if you haven''t done it yet, include the rendered JavaScript settings
    file in the base template, as shown in the following:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果你还没有这样做，请将渲染的JavaScript设置文件包含在基本模板中，如下所示：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The Django template system is very flexible; you are not limited to using templates
    just for HTML. In this example, we will dynamically create the JavaScript file.
    You can access it in your development web server at `http://127.0.0.1:8000/en/js-settings/`
    and its content will be something similar to the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Django模板系统非常灵活；你不仅限于仅使用模板来创建HTML。在这个例子中，我们将动态创建JavaScript文件。你可以在开发Web服务器`http://127.0.0.1:8000/en/js-settings/`中访问它，其内容将类似于以下内容：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The view will be cacheable in both server and browser.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 视图将在服务器和浏览器中都可缓存。
- en: If you want to pass more variables to the JavaScript settings, either create
    a custom view and pass all the values to the context or create a custom context
    processor and pass all the values there. In the latter case, the variables will
    also be accessed in all the templates of your project. For example, you might
    have indicators such as `{{ is_mobile }}`, `{{ is_tablet }}`, and `{{ is_desktop
    }}` in your templates, with the user agent string telling whether the visitor
    uses a mobile, tablet, or desktop browser.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想向JavaScript设置传递更多变量，可以创建一个自定义视图并将所有值传递到上下文，或者创建一个自定义上下文处理器并将所有值传递到那里。在后一种情况下，这些变量也将被访问到你的项目的所有模板中。例如，你可能在模板中有`{{
    is_mobile }}`、`{{ is_tablet }}`和`{{ is_desktop }}`这样的指示器，用户代理字符串会告诉访问者是否使用移动、平板或桌面浏览器。
- en: See also
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Arranging the base.html template* recipe
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安排base.html模板*的食谱'
- en: The *Using HTML5 data attributes* recipe
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用HTML5数据属性*的食谱'
- en: Using HTML5 data attributes
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTML5数据属性
- en: When you have dynamic data related to the DOM elements, you need a more efficient
    way to pass the values from Django to JavaScript. In this recipe, we will see
    a way to attach data from Django to custom HTML5 data attributes and then describe
    how to read the data from JavaScript with two practical examples. The first example
    will be an image that changes its source, depending on the viewport, so that the
    smallest version is shown on mobile devices, the medium-sized version is shown
    on tablets, and the biggest high-quality image is shown for the desktop version
    of the website. The second example will be a Google Map with a marker at a specified
    geographical position.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你与DOM元素相关的动态数据时，你需要一种更有效的方法来从Django传递值到JavaScript。在这个食谱中，我们将看到一种将Django中的数据附加到自定义HTML5数据属性的方法，然后描述如何使用两个实际示例从JavaScript中读取数据。第一个示例将是一个根据视口改变源图片的图片，这样在移动设备上显示最小版本，在平板上显示中等大小的版本，在网站桌面版本上显示最大高质量的图片。第二个示例将是一个带有指定地理位置标记的谷歌地图。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, perform the following steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请执行以下步骤：
- en: Create a `locations` app with a `Location` model, which will at least have the
    title character field, the slug field for URLs, the `small_image`, `medium_image`,
    and `large_image` image fields, and the latitude and longitude floating-point
    fields.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有`Location`模型的`locations`应用，该模型至少包含标题字符字段、用于URL的slug字段、`small_image`、`medium_image`和`large_image`图像字段，以及纬度和经度浮点字段。
- en: Tip
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The term *slug* comes from newspaper editing and it means a short string without
    any special characters; just letters, numbers, underscores, and hyphens. Slugs
    are generally used to create unique URLs.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 术语*slug*来自报纸编辑，它意味着一个没有特殊字符的短字符串；只有字母、数字、下划线和连字符。Slugs通常用于创建唯一的URL。
- en: Create an administration for this model and enter a sample location.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此模型创建一个管理界面并输入一个示例位置。
- en: Lastly, create a detailed view for the location and set the URL rule for it.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为位置创建一个详细视图并设置其URL规则。
- en: How to do it…
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Perform the following steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'As we already have the app created, we will now need the template for the location
    detail:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们已经创建了应用，我们现在需要位置详情的模板：
- en: '[PRE8]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Besides the template, we need the JavaScript file that will read out the HTML5
    data attributes and use them accordingly, as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了模板，我们还需要一个JavaScript文件，该文件将读取HTML5数据属性并相应地使用它们，如下所示：
- en: '[PRE9]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we need to set some CSS, as shown in the following:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要设置一些CSS，如下所示：
- en: '[PRE10]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'If you open your location detail view in a browser, you will see something
    similar to the following in the large window:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个浏览器中打开你的位置详情视图，你将在大窗口中看到类似以下的内容：
- en: '![How it works…](img/B04912_04_01.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/B04912_04_01.jpg)'
- en: 'If you resize the browser window to 468 pixels or less, the image will change
    to its smallest version, as shown in the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将浏览器窗口调整到468像素或更小，图片将变为其最小版本，如下所示：
- en: '![How it works…](img/B04912_04_02.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/B04912_04_02.jpg)'
- en: Let's take a look at the code. In the template, we have an image tag with an
    `img-full-width` CSS class and its source is set to the smallest image by default.
    This `image` tag also has `data-small-src`, `data-medium-src`, and `data-large-src`
    custom attributes. In the JavaScript, the `show_best_images()` function is called
    when the page is loaded or the window is resized. The function goes through all
    images with the `img-full-width` CSS class and sets appropriate image sources
    from the custom data attributes, depending on the current image width.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码。在模板中，我们有一个带有`img-full-width` CSS类的图像标签，其默认源是最小的图像。这个`image`标签还具有`data-small-src`、`data-medium-src`和`data-large-src`自定义属性。在JavaScript中，当页面加载或窗口大小调整时调用`show_best_images()`函数。该函数遍历所有带有`img-full-width`
    CSS类的图像，并根据当前图像宽度从自定义数据属性中设置适当图像源。
- en: Then, there is a `<div>` element with the map ID and the `data-latitude` and
    `data-longitude` custom attributes in the template. In the JavaScript, a `show_map()`
    function is called when the page is loaded. This function will create a Google
    Map in the `<div>` element. At first, the custom attributes are read and converted
    from strings to floating-point values. Then, the `LatLng` object is created that,
    in the next steps, becomes the center of the map and the geographical position
    of the marker shown on this map.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在模板中有一个带有地图ID和`data-latitude`和`data-longitude`自定义属性的`<div>`元素。在JavaScript中，当页面加载时调用`show_map()`函数。这个函数将在`<div>`元素中创建一个Google地图。最初，读取并从字符串转换为浮点数的自定义属性。然后，创建一个`LatLng`对象，在接下来的步骤中，它将成为地图的中心和在此地图上显示的标记的地理位置。
- en: See also
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Including JavaScript settings* recipe
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*包含JavaScript设置* 菜谱'
- en: The *Opening object details in a modal dialog* recipe
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在模态对话框中打开对象详情* 菜谱'
- en: The *Inserting a map into a change form* recipe in [Chapter 6](ch06.html "Chapter 6. Model
    Administration"), *Model Administration*
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章。模型管理") *插入地图到更改表单* 菜谱中，*模型管理*
- en: Opening object details in a modal dialog
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模态对话框中打开对象详情
- en: In this recipe, we will create a list of links to the locations, which when
    clicked, opens a Bootstrap 3 modal dialog (we will call it pop up in this recipe)
    with some information about the location and the *more…* link leading to the location
    detail page. The content for the dialog will be loaded by Ajax. For visitors without
    JavaScript, the detail page will open immediately, without this intermediate step.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个位置链接列表，当点击时，会打开一个包含有关位置信息和*更多…*链接的Bootstrap 3模态对话框（在这个菜谱中我们将称之为弹出窗口），该链接指向位置详情页面。对话框的内容将通过Ajax加载。对于没有JavaScript的访客，详情页面将立即打开，而不经过这个中间步骤。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `locations` app that we created in the previous recipe.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从之前菜谱中创建的`locations`应用开始。
- en: 'In the `urls.py` file, we will have three URL rules; one for the location list,
    other for the location detail, and the third one for the dialog, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`urls.py`文件中，我们将有三个URL规则；一个用于位置列表，另一个用于位置详情，第三个用于对话框，如下所示：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Consequently, there will be three simple views, as shown in the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将会有三个简单的视图，如下所示：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How to do it…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Execute these steps one by one:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 依次执行以下步骤：
- en: 'Create a template for the location''s list view with a hidden empty modal dialog
    at the end. Each listed location will have custom HTML5 data attributes dealing
    with the pop-up information, as follows:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为位置列表视图创建一个模板，其中包含一个隐藏的空模态对话框。每个列表位置都将有处理弹出信息的自定义HTML5数据属性，如下所示：
- en: '[PRE13]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We need JavaScript to handle the opening of the dialog and loading the content
    dynamically:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要JavaScript来处理对话框的打开和内容的动态加载：
- en: '[PRE14]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we will create a template for the content that will be loaded in the
    modal dialog, as shown in the following:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将创建一个模板，用于在模态对话框中加载的内容，如下所示：
- en: '[PRE15]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: 'If we go to the location''s list view in a browser and click on one of the
    locations, we will see a modal dialog similar to the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中转到位置的列表视图并点击其中一个位置，我们将看到一个类似于以下模态对话框：
- en: '![How it works…](img/B04912_04_03.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/B04912_04_03.jpg)'
- en: How does this work? In the template, there is a `<div>` element with the `item`
    CSS class and a link for each location. The links have the `data-popup-url` and
    `data-popup-title` custom attributes. In the JavaScript, when the page is loaded,
    we assign an `onclick` handler for the `<body>` tag. The handler checks if any
    link inside the tag with the `item` CSS class was clicked. For each such clicked
    link the custom attributes are read as `popup_url` and `popup_title`, the new
    title is set for the hidden dialog box, the content is loaded in the modal dialog
    using Ajax, and then it is shown to the visitor.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何工作的？在模板中，有一个具有`item` CSS类的`<div>`元素和每个位置的链接。链接具有`data-popup-url`和`data-popup-title`自定义属性。在JavaScript中，当页面加载时，我们为`<body>`标签分配一个`onclick`处理程序。处理程序检查是否有任何具有`item`
    CSS类的链接被点击。对于每个这样的点击链接，自定义属性被读取为`popup_url`和`popup_title`，新的标题被设置为隐藏的对话框框，内容使用Ajax加载到模态对话框中，然后显示给访客。
- en: See also
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using HTML5 data attributes* recipe
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用HTML5数据属性*教程'
- en: The *Implementing a continuous scroll* recipe
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现连续滚动*教程'
- en: The *Implementing the Like widget* recipe
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现点赞小部件*教程'
- en: Implementing a continuous scroll
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现连续滚动
- en: Social websites often have the feature of continuous scrolling, which is also
    known as infinite scrolling. There are long lists of items and as you scroll the
    page down, new items are loaded and attached to the bottom automatically. In this
    recipe, we will see how to achieve such an effect with Django and the jScroll
    jQuery plugin. We'll illustrate this using a sample view showing the top 250 movies
    of all time from Internet Movie Database ([http://www.imdb.com/](http://www.imdb.com/)).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 社交网站通常具有连续滚动的功能，这也被称为无限滚动。有长长的项目列表，当你向下滚动页面时，新项目会自动加载并附加到底部。在本教程中，我们将看到如何使用Django和jScroll
    jQuery插件实现这种效果。我们将使用一个示例视图来展示来自互联网电影数据库（[http://www.imdb.com/](http://www.imdb.com/)）的所有时间最顶部的250部电影。
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First, download the jScroll plugin from the following link: [https://github.com/pklauzinski/jscroll](https://github.com/pklauzinski/jscroll).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从以下链接下载jScroll插件：[https://github.com/pklauzinski/jscroll](https://github.com/pklauzinski/jscroll)。
- en: Put the `jquery.jscroll.js` and `jquery.jscroll.min.js` files from the package
    in the `myproject/site_static/site/js/` directory.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将包中的`jquery.jscroll.js`和`jquery.jscroll.min.js`文件放入`myproject/site_static/site/js/`目录。
- en: Next, for this example, you will create a `movies` app with a paginated list
    view for the movies. You can either create a `Movie` model or a list of dictionaries
    with the movie data. Every movie will have rank, title, release year, and rating
    fields.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，对于本例，你将创建一个`movies`应用，该应用具有电影的分页列表视图。你可以创建一个`Movie`模型或包含电影数据的字典列表。每部电影都将有排名、标题、发行年份和评分字段。
- en: How to do it…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Perform the following steps to create an continuously scrolling page:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建一个连续滚动的页面：
- en: 'The first step is to create a template for the list view that will also show
    a link to the next page, as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是为列表视图创建一个模板，该模板还将显示指向下一页的链接，如下所示：
- en: '[PRE16]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The second step is to add JavaScript, as shown in the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二步是添加JavaScript，如下所示：
- en: '[PRE17]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When you open the movie list view in a browser; a predefined number of items,
    for example, 25, is shown on the page. As you scroll down, an additional 25 items
    and the next pagination link are loaded and appended to the item container. Then,
    the third page of the items is loaded and attached at the bottom, and this continues
    until there are no more pages left to display.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器中打开电影列表视图时；页面上会显示预定义数量的项目，例如，25个。当你向下滚动时，会加载并附加到项目容器中的额外25个项目和下一个分页链接。然后，加载并附加到项目底部的第三页，这个过程会一直持续到没有更多页面可以显示。
- en: 'Upon the page load, the `<div>` tag in JavaScript that has the `object_list`
    CSS class and contains the items and pagination links will become a jScroll object.
    The following parameters define its features:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 页面加载时，具有`object_list` CSS类的`<div>`标签，包含项目和分页链接，将变成一个jScroll对象。以下参数定义了其功能：
- en: '`loadingHtml`: This sets an animated loading indicator shown at the end of
    the list when a new page is loading'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loadingHtml`：这将在新页面加载时在列表末尾显示一个动画加载指示器。'
- en: '`padding`: This will define that the new page has to be loaded, when there
    are 100 pixels between the scrolling position and the end of the scrolling area'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding`：这将定义当滚动位置和滚动区域末尾之间有100像素时，需要加载新页面。'
- en: '`pagingSelector`: This CSS selector finds the HTML elements that will be hidden
    in the browsers with JavaScript switched on'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pagingSelector`：这个CSS选择器用于找到在启用JavaScript的浏览器中将被隐藏的HTML元素'
- en: '`nextSelector`: This CSS selector finds the HTML elements that will be used
    to read the URL of the next page'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nextSelector`：这个CSS选择器用于找到将用于读取下一页URL的HTML元素'
- en: '`contentSelector`: This CSS selector defines the HTML elements to be taken
    out of the loaded content and put in the container'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contentSelector`：这个CSS选择器定义了要从加载的内容中提取并放入容器的HTML元素'
- en: See also
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Managing paginated lists* recipe in [Chapter 3](ch03.html "Chapter 3. Forms
    and Views"), *Forms and Views*
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。表单和视图")中的*管理分页列表*配方，*表单和视图*'
- en: The *Composing class-based views* recipe in [Chapter 3](ch03.html "Chapter 3. Forms
    and Views"), *Forms and Views*
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。表单和视图")中的*编写基于类的视图*配方，*表单和视图*'
- en: The *Including JavaScript settings* recipe
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*包括JavaScript设置*配方'
- en: Implementing the Like widget
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Like小部件
- en: 'Nowadays, social websites usually have integrated Facebook, Twitter, and Google+
    widgets to like and share pages. In this recipe, I will guide you through a similar
    internal liking Django app that saves all the likes in your database so that you
    can create specific views based on the things that are liked on your website.
    We will create a Like widget with a two-state button and badge showing the number
    of total likes. The following are the states:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，社交网站通常已经集成了Facebook、Twitter和Google+小部件来喜欢和分享页面。在这个配方中，我将指导您通过一个类似的内部喜欢Django应用，该应用将所有喜欢保存到您的数据库中，以便您可以根据您网站上喜欢的事物创建特定的视图。我们将创建一个具有两种状态按钮和显示总喜欢数量的徽章的Like小部件。以下是其状态：
- en: Inactive state, where you can click on a button to activate it:![Implementing
    the Like widget](img/B04912_04_04.jpg)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非激活状态，您可以点击按钮来激活它：![实现Like小部件](img/B04912_04_04.jpg)
- en: Active state, where you can click on a button to deactivate it:![Implementing
    the Like widget](img/B04912_04_05.jpg)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活状态，您可以点击按钮来取消激活它：![实现Like小部件](img/B04912_04_05.jpg)
- en: The state of the widget will be handled by Ajax calls.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件的状态将由Ajax调用处理。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First, create a `likes` app with a `Like` model, which has a foreign-key relation
    to the user that is liking something and a generic relationship to any object
    in the database. We will use `ObjectRelationMixin`, which we defined in the *Creating
    a model mixin to handle generic relations* recipe in [Chapter 2](ch02.html "Chapter 2. Database
    Structure"), *Database Structure*. If you don''t want to use the mixin, you can
    also define a generic relation in the following model yourself:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个包含`Like`模型的`likes`应用，该模型与喜欢某物的用户具有外键关系，与数据库中的任何对象具有通用关系。我们将使用在[第2章](ch02.html
    "第2章。数据库结构")中定义的`ObjectRelationMixin`，该定义位于*创建用于处理通用关系的模型混合*配方中，*数据库结构*。如果您不想使用混合，也可以在以下模型中自己定义一个通用关系：
- en: '[PRE18]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Also, make sure that the request context processor is set in the settings.
    We also need an authentication middleware in the settings for the currently logged-in
    user attached to the request:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，确保请求上下文处理器已在设置中设置。我们还需要在设置中为当前登录用户附加请求的认证中间件：
- en: '[PRE19]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How to do it…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Execute these steps one by one:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 依次执行以下步骤：
- en: 'In the `likes` app, create a `templatetags` directory with an empty `__init__.py`
    file in order to make it a Python module. Then, add the `likes_tags.py` file,
    where we''ll define the `{% like_widget %}` template tag as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`likes`应用中，创建一个包含空`__init__.py`文件的`templatetags`目录，以便将其作为一个Python模块。然后，添加`likes_tags.py`文件，我们将在此文件中定义`{%
    like_widget %}`模板标签，如下所示：
- en: '[PRE20]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Also, we''ll add a filter in the same file to get the number of likes for a
    specified object:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，我们将在同一文件中添加一个过滤器，以获取指定对象的喜欢数量：
- en: '[PRE21]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the URL rules, we need a rule for a view, which will handle the liking and
    unliking using Ajax:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在URL规则中，我们需要一个用于视图的规则，该视图将使用Ajax处理喜欢和取消喜欢操作：
- en: '[PRE22]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, we need to define the view, as shown in the following:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要定义视图，如下所示：
- en: '[PRE23]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the template for the list or detail view of any object, we can add the template
    tag for the widget. Let''s add the widget to the location detail that we created
    in the previous recipes, as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何对象的列表或详细视图的模板中，我们可以添加小部件的模板标签。让我们将小部件添加到之前配方中创建的位置详细中，如下所示：
- en: '[PRE24]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, we need a template for the widget, as shown in the following:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要为小部件创建一个模板，如下所示：
- en: '[PRE25]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, we create JavaScript to handle the liking and unliking action in the
    browser, as follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们创建JavaScript来处理浏览器中的喜欢和取消喜欢操作，如下所示：
- en: '[PRE26]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works…
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: For any object in your website, you can put the `{% like_widget for object %}`
    template tag that will check whether the object is already liked and will show
    an appropriate state. The `data-href`, `data-like-text`, and `data-unlike-text`
    custom HTML5 attributes are in the widget template. The first attribute holds
    a unique object-specific URL to change the current state of the widget. The other
    two attributes hold the translated texts for the widget. In the JavaScript, liking
    buttons are recognized by the like button CSS class. A click-event listener attached
    to the document watches for the `onClick` events from each such button and then
    posts an Ajax call to the URL that is specified by the `data-href` attribute.
    The specified view accepts two of the parameters, content type and object ID,
    of the liked object. The view checks whether `Like` for the specified object exists,
    and if it does, the view removes it; otherwise the `Like` object is added. As
    a result, the view returns a JSON response with the success status, liked object's
    text representation, the action whether the `Like` object was added or removed,
    and the total number of likes. Depending on the action that is returned, JavaScript
    will show an appropriate state for the button.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你网站中的任何对象，你可以放置 `{% like_widget for object %}` 模板标签，该标签将检查对象是否已被喜欢，并显示适当的状态。小部件模板中的
    `data-href`、`data-like-text` 和 `data-unlike-text` 自定义 HTML5 属性。第一个属性持有唯一的对象特定
    URL，用于更改小部件的当前状态。其他两个属性持有小部件的翻译文本。在 JavaScript 中，喜欢按钮通过喜欢按钮 CSS 类识别。文档上附加的点击事件监听器监视来自每个此类按钮的
    `onClick` 事件，然后向由 `data-href` 属性指定的 URL 发送 Ajax 请求。指定的视图接受被喜欢对象的两个参数，即内容类型和对象
    ID。视图检查指定对象的 `Like` 是否存在，如果存在，则视图将其删除；否则，添加 `Like` 对象。因此，视图返回一个包含成功状态、被喜欢对象的文本表示、操作（`Like`
    对象是添加还是删除）以及总喜欢数的 JSON 响应。根据返回的操作，JavaScript 将显示按钮的适当状态。
- en: 'You can debug the Ajax responses in the Chrome Developer Tools or Firefox Firebug
    plugin. If any server errors occur while developing, you will see the error trace
    back in the preview of the response, otherwise you will see the returned JSON
    as shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Chrome 开发者工具或 Firefox Firebug 插件中调试 Ajax 响应。如果在开发过程中出现任何服务器错误，你将在响应预览中看到错误跟踪，否则你将看到如下截图所示的返回
    JSON：
- en: '![How it works…](img/B04912_04_06.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/B04912_04_06.jpg)'
- en: See also
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Opening object details in a modal dialog* recipe
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在模态对话框中打开对象详情* 的菜谱'
- en: The *Implementing a continuous scroll* recipe
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现连续滚动* 的菜谱'
- en: The *Uploading images by Ajax* recipe
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过 Ajax 上传图像* 的菜谱'
- en: The *Creating a model mixin to handle generic relations* recipe in [Chapter
    2](ch02.html "Chapter 2. Database Structure"), *Database Structure*
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 2 章](ch02.html "第 2 章。数据库结构")中的 *创建用于处理通用关系的模型混入* 菜谱，*数据库结构*'
- en: '[Chapter 5](ch05.html "Chapter 5. Custom Template Filters and Tags"), *Custom
    Template Filters and Tags*'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 5 章](ch05.html "第 5 章。自定义模板过滤器和标签")，*自定义模板过滤器和标签*'
- en: Uploading images by Ajax
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 Ajax 上传图像
- en: File uploads using Ajax has become the de facto standard on the web. People
    want to see what they have chosen right after selecting a file instead of seeing
    it after submitting a form. Also, if the form has validation errors, nobody wants
    to select the files again; the file should still be selected in the form with
    validation errors.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ajax 进行文件上传已成为网络上的事实标准。人们希望在选择文件后立即看到他们选择的内容，而不是在提交表单后看到。此外，如果表单有验证错误，没有人愿意再次选择文件；带有验证错误的文件仍然应该保留在表单中。
- en: There is a third-party app, `django-ajax-uploader`, that can be used to upload
    images with Ajax. In this recipe, we will see how to do this.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个第三方应用程序 `django-ajax-uploader`，可以用来使用 Ajax 上传图像。在这个菜谱中，我们将看到如何做到这一点。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `quotes` app that we created for the *Uploading images*
    recipe in [Chapter 3](ch03.html "Chapter 3. Forms and Views"), *Forms and Views*.
    We will reuse the model and view; however, we'll create a different form and template
    and add JavaScript too.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为 [第 3 章](ch03.html "第 3 章。表单和视图")中的 *上传图像* 菜谱创建的 `quotes` 应用程序开始。我们将重用模型和视图；然而，我们将创建不同的表单和模板，并添加
    JavaScript。
- en: 'Install `django-crispy-forms` and `django-ajax-uploader` in your local environment
    using the following commands:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在你的本地环境中安装 `django-crispy-forms` 和 `django-ajax-uploader`：
- en: '[PRE27]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Don''t forget to put these apps in `INSTALLED_APPS`, as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将这些应用程序放入 `INSTALLED_APPS` 中，如下所示：
- en: '[PRE28]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How to do it…
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s redefine the form for inspirational quotes using the following steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤重新定义励志名言的表单：
- en: 'First, we create a layout for the Bootstrap 3 markup. Note that, instead of
    the `picture` image field, we have the hidden `picture_path` and `delete_picture`
    fields and some markup for the file upload widget:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们为Bootstrap 3标记创建一个布局。请注意，我们使用隐藏的`picture_path`和`delete_picture`字段以及一些文件上传小部件的标记，而不是`picture`图像字段：
- en: '[PRE29]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, we will overwrite the save method in order to handle the saving of the
    inspirational quote, as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将覆盖保存方法以处理励志名言的保存，如下所示：
- en: '[PRE30]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In addition to the previously defined views in the quotes app, we add the `ajax_uploader`
    view that will handle uploads with Ajax, as shown in the following:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了在quotes应用中定义的先前视图外，我们添加了`ajax_uploader`视图，该视图将处理使用Ajax的上传，如下所示：
- en: '[PRE31]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, we set the URL rule for the view, as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们为视图设置URL规则，如下所示：
- en: '[PRE32]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, create the `image_upload_widget.html` template that will be included
    in the crispy form:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个`image_upload_widget.html`模板，该模板将被包含在crispy表单中：
- en: '[PRE33]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then, it is time to create the template for the form page itself. In the extrabody
    block, we will set a `translatable_file_uploader_options` variable that will deal
    with all translatable options for the file uploader, such as the widget template
    markup, error messages, and notifications:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，是时候创建表单页面的模板了。在extrabody块中，我们将设置一个`translatable_file_uploader_options`变量，该变量将处理文件上传的所有可翻译选项，例如小部件模板标记、错误消息和通知：
- en: '[PRE34]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Finally, we create the JavaScript file that will initialize the file upload
    widget and handle the image preview and deletion, as follows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们创建一个JavaScript文件，该文件将初始化文件上传小部件并处理图片预览和删除，如下所示：
- en: '[PRE35]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works…
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: 'When an image is selected in the upload widget, the result in the browser will
    look similar to the following screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当在上传小部件中选择图片时，浏览器中的结果将类似于以下截图：
- en: '![How it works…](img/B04912_04_07.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/B04912_04_07.jpg)'
- en: 'The same form can be used to create an inspirational quote and change an existing
    inspirational quote. Let''s dig deeper into the process to see how it works. In
    the form, we have an uploading mechanism that consists of the following essential
    parts:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 同一个表单可以用来创建励志名言和更改现有的励志名言。让我们深入了解这个过程，看看它是如何工作的。在表单中，我们有一个上传机制，由以下基本部分组成：
- en: The area for the preview of the image that is defined as a `<div>` tag with
    the preview CSS class. Initially, it might show an image if we are in an object
    change view and the `InspirationQuote` object is passed to the template as `{{
    instance }}`.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义为具有预览CSS类的`<div>`标签的图片预览区域。最初，如果我们处于对象更改视图并且`InspirationQuote`对象作为`{{ instance
    }}`传递给模板，它可能会显示图片。
- en: The area for the Ajax uploader widget that is defined as a `<div>` tag with
    the `uploader` CSS class. It will be filled with the dynamically-created uploading
    and deleting buttons as well as the uploading progress indicators.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于Ajax上传小部件的区域，该小部件定义为具有`uploader`CSS类的`<div>`标签。它将被动态创建的上传和删除按钮以及上传进度指示器填充。
- en: The help text for the upload.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传的帮助文本。
- en: The area for error messages that is defined as a `<div>` tag with the `messages`
    CSS class.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义为具有`messages`CSS类的`<div>`标签的错误消息区域。
- en: The hidden `picture_path` character field to set the path of the uploaded file.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于设置上传文件路径的隐藏`picture_path`字符字段。
- en: The hidden `delete_picture` Boolean field to mark the deletion of the file.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于标记文件删除的隐藏`delete_picture`布尔字段。
- en: On page load, JavaScript will check whether `picture_path` is set; and if it
    is, it will show a picture preview. This will be the case only when the form is
    submitted with an image selected; however, there are validation errors.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面加载时，JavaScript将检查`picture_path`是否已设置；如果是，它将显示图片预览。只有在选择图片并提交表单的情况下才会发生这种情况；然而，存在验证错误。
- en: Furthermore, we are defining the options for the upload widget in JavaScript.
    These options are combined of the global `translatable_file_uploader_options`
    variable with translatable strings set in the template and other configuration
    options set in the JavaScript file. The Ajax upload widget is initialized with
    these options. Some important settings to note are the `onComplete` callback that
    shows an image preview and fills in the `picture_path` field when an image is
    uploaded and the `showMessage` callback that defines how to show the error messages
    in the wanted area.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们正在JavaScript中定义上传小部件的选项。这些选项由全局`translatable_file_uploader_options`变量与模板中设置的翻译字符串以及其他在JavaScript文件中设置的配置选项组合而成。Ajax上传小部件使用这些选项进行初始化。一些重要的设置需要注意，包括`onComplete`回调，它会在上传图片时显示图片预览并填写`picture_path`字段，以及`showMessage`回调，它定义了如何在指定区域显示错误消息。
- en: Lastly, there is a handler for the delete button in JavaScript, which when clicked,
    sets the hidden `delete_picture` field to `1` and removes the preview image.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一个JavaScript中的删除按钮处理程序，当点击时，将隐藏的`delete_picture`字段设置为`1`并移除预览图片。
- en: The Ajax uploader widget dynamically creates a form with the file upload field
    and a hidden `<iframe>` tag to post the form data. When a file is selected, it
    is immediately uploaded to the `uploads` directory under `MEDIA_URL` and the path
    to the file is set to the `hidden picture_path` field. This directory is a temporary
    location for the uploaded files. When a user submits the inspirational quote form
    and the input is valid, the `save()` method is called. If `delete_picture` is
    set to `1`, the picture of the model instance will be deleted. If the `picture_path`
    field is defined, the image from the temporary location will be copied to its
    final destination and the original will be removed.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax上传小部件动态创建一个包含文件上传字段和隐藏的`<iframe>`标签的表单，用于提交表单数据。当选择一个文件时，它立即上传到`MEDIA_URL`下的`uploads`目录，并将文件的路径设置为隐藏的`picture_path`字段。此目录是上传文件的临时位置。当用户提交灵感名言表单且输入有效时，会调用`save()`方法。如果`delete_picture`设置为`1`，则模型实例的图片将被删除。如果`picture_path`字段已定义，则从临时位置复制图像到最终目的地，并删除原始文件。
- en: See also
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Uploading images* recipe in [Chapter 3](ch03.html "Chapter 3. Forms and
    Views"), *Forms and Views*
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。表单和视图")中的*上传图片*菜谱'
- en: The *Opening object details in a modal dialog* recipe
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在模态对话框中打开对象详情*菜谱'
- en: The *Implementing a continuous scroll* recipe
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现连续滚动*菜谱'
- en: The *Implementing the Like widget* recipe
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现点赞小部件*菜谱'
