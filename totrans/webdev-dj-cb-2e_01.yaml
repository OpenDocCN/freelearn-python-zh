- en: Chapter 1. Getting Started with Django 1.8
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：Django 1.8 入门
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Working with a virtual environment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在虚拟环境中工作
- en: Creating a project file structure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建项目文件结构
- en: Handling project dependencies with pip
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 pip 处理项目依赖
- en: Making your code compatible with both Python 2.7 and Python 3
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使你的代码兼容 Python 2.7 和 Python 3
- en: Including external dependencies in your project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的项目中包含外部依赖
- en: Configuring settings for development, testing, staging, and production environments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置开发、测试、预发布和生产环境下的设置
- en: Defining relative paths in the settings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设置中定义相对路径
- en: Creating and including local settings
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和包含本地设置
- en: Setting up STATIC_URL dynamically for Subversion users
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Subversion 用户动态设置 STATIC_URL
- en: Setting up STATIC_URL dynamically for Git users
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Git 用户动态设置 STATIC_URL
- en: Setting UTF-8 as the default encoding for MySQL configuration
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 UTF-8 设置为 MySQL 配置的默认编码
- en: Setting the Subversion ignore property
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Subversion 忽略属性
- en: Creating a Git ignore file
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Git 忽略文件
- en: Deleting Python-compiled files
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除 Python 编译文件
- en: Respecting the import order in Python files
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尊重 Python 文件中的导入顺序
- en: Creating app configuration
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用配置
- en: Defining overwritable app settings
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义可覆盖的应用设置
- en: Introduction
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will see a few good practices when starting a new project
    with Django 1.8 on Python 2.7 or Python 3\. Some of the tricks introduced here
    are the best ways to deal with the project layout, settings, and configurations.
    However, for some tricks, you might have to find some alternatives online or in
    other books about Django. Feel free to evaluate and choose the best bits and pieces
    for yourself while digging deep into the Django world.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨在 Python 2.7 或 Python 3 上使用 Django 1.8 开始新项目时的一些良好实践。这里介绍的一些技巧是处理项目布局、设置和配置的最佳方式。然而，对于一些技巧，你可能需要在网络上或其他关于
    Django 的书籍中寻找替代方案。在深入 Django 世界的同时，请随意评估并选择最适合你的最佳部分。
- en: I am assuming that you are already familiar with the basics of Django, Subversion
    and Git version control, MySQL and PostgreSQL databases, and command-line usage.
    Also, I am assuming that you are probably using a Unix-based operating system,
    such as Mac OS X or Linux. It makes more sense to develop with Django on Unix-based
    platforms as the websites will most likely be published on a Linux server, therefore,
    you can establish routines that work the same while developing as well as deploying.
    If you are locally working with Django on Windows, the routines are similar; however,
    they are not always the same.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你已经熟悉 Django、Subversion 和 Git 版本控制、MySQL 和 PostgreSQL 数据库以及命令行使用的基础知识。我还假设你可能正在使用基于
    Unix 的操作系统，如 Mac OS X 或 Linux。在 Unix 基础平台上使用 Django 进行开发更有意义，因为网站很可能会在 Linux 服务器上发布，因此，你可以在开发和部署时建立相同的常规。如果你在
    Windows 上本地使用 Django，常规是相似的；然而，它们并不总是相同的。
- en: Working with a virtual environment
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在虚拟环境中工作
- en: It is very likely that you will develop multiple Django projects on your computer.
    Some modules such as Python Imaging Library (or Pillow) and MySQLdb, can be installed
    once and then shared for all projects. Other modules such as Django, third-party
    Python libraries, and Django apps, will need to be kept isolated from each other.
    The virtualenv tool is a utility that separates all the Python projects in their
    own realms. In this recipe, we will see how to use it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你很可能会在你的电脑上开发多个 Django 项目。一些模块，如 Python Imaging Library（或 Pillow）和 MySQLdb，可以安装一次，然后供所有项目共享。其他模块，如
    Django、第三方 Python 库和 Django 应用，需要彼此隔离。虚拟环境工具是一种将所有 Python 项目分离到各自领域的实用工具。在本食谱中，我们将了解如何使用它。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To manage Python packages, you will need `pip`. It is included in your Python
    installation if you are using Python 2.7.9 or Python 3.4+. If you are using another
    version of Python, install `pip` by executing the installation instructions at
    [http://pip.readthedocs.org/en/stable/installing/](http://pip.readthedocs.org/en/stable/installing/).
    Let''s install the shared Python modules Pillow and MySQLdb, and the virtualenv
    utility, using the following commands:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理 Python 包，你需要 `pip`。如果你使用的是 Python 2.7.9 或 Python 3.4+，那么 `pip` 已经包含在你的 Python
    安装中了。如果你使用的是其他版本的 Python，可以通过执行 [http://pip.readthedocs.org/en/stable/installing/](http://pip.readthedocs.org/en/stable/installing/)
    中的安装说明来安装 `pip`。让我们使用以下命令安装共享的 Python 模块 Pillow 和 MySQLdb，以及虚拟环境工具：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Once you have your prerequisites installed, create a directory where all your
    Django projects will be stored, for example, `virtualenvs` under your home directory.
    Perform the following steps after creating the directory:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了所有必备条件，创建一个目录来存储你所有的Django项目，例如，在你的主目录下创建`virtualenvs`。在创建目录后执行以下步骤：
- en: 'Go to the newly created directory and create a virtual environment that uses
    the shared system site packages:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入新创建的目录并创建一个使用共享系统site包的虚拟环境：
- en: '[PRE1]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To use your newly created virtual environment, you need to execute the activation
    script in your current shell. This can be done with the following command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用你新创建的虚拟环境，你需要执行当前shell中的激活脚本。可以使用以下命令完成：
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also use the following command one for the same (note the space between
    the dot and bin):'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以使用以下命令（注意点与bin之间的空格）：
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will see that the prompt of the command-line tool gets a prefix of the
    project name, as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到命令行工具的提示符前面有了项目名称的前缀，如下所示：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To get out of the virtual environment, type the following command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要退出虚拟环境，请输入以下命令：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When you create a virtual environment, a few specific directories (`bin`, `build`,
    `include`, and `lib`) are created in order to store a copy of the Python installation
    and some shared Python paths are defined. When the virtual environment is activated,
    whatever you have installed with `pip` or `easy_install` will be put in and used
    by the site packages of the virtual environment, and not the global site packages
    of your Python installation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个虚拟环境时，会创建一些特定的目录（`bin`、`build`、`include`和`lib`），以便存储Python安装的副本，并定义一些共享的Python路径。当虚拟环境激活时，使用`pip`或`easy_install`安装的任何内容都将放入并用于虚拟环境的site包，而不是Python安装的全局site包。
- en: 'To install Django 1.8 in your virtual environment, type the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的虚拟环境中安装Django 1.8，请输入以下命令：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See also
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a project file structure recipe*
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Creating a project file structure*食谱'
- en: The *Deploying on Apache with mod_wsgi* recipe in [Chapter 11](ch11.html "Chapter 11. Testing
    and Deployment"), *Testing and Deployment*
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第11章的*Deploying on Apache with mod_wsgi*食谱中，*Testing and Deployment*的*Deploying
    on Apache with mod_wsgi*食谱
- en: Creating a project file structure
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目文件结构
- en: A consistent file structure for your projects makes you well-organized and more
    productive. When you have the basic workflow defined, you can get in the business
    logic quicker and create awesome projects.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的项目保持一致的文件结构可以使你更有条理并提高生产效率。当你定义了基本的工作流程后，你可以更快地进入业务逻辑并创建出色的项目。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you haven't done this yet, create a `virtualenvs` directory, where you will
    keep all your virtual environments (read about this in the *Working with a virtual
    environment* recipe). This can be created under your home directory.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，创建一个`virtualenvs`目录，你将在这里保存所有虚拟环境（关于这一点，请参阅*Working with a virtual
    environment*食谱）。这可以在你的主目录下创建。
- en: Then, create a directory for your project's environment, for example, `myproject_env`.
    Start the virtual environment in it. I would suggest adding the `commands` directory
    for local bash scripts that are related to the project, the `db_backups` directory
    for database dumps, and the `project` directory for your Django project. Also,
    install Django in your virtual environment.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为项目环境创建一个目录，例如，`myproject_env`。在其中启动虚拟环境。我建议添加`commands`目录以存储与项目相关的本地bash脚本，`db_backups`目录用于数据库转储，以及`project`目录用于你的Django项目。此外，在你的虚拟环境中安装Django。
- en: How to do it…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps in order to create a file structure for your project:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建项目的文件结构：
- en: 'With the virtual environment activated, go to the project directory and start
    a new Django project as follows:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在激活虚拟环境后，转到项目目录并按照以下方式启动一个新的Django项目：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For clarity, we will rename the newly created directory as `django-myproject`.
    This is the directory that you will put under version control, therefore, it will
    have the `.git`, `.svn`, or similar directories.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了清晰起见，我们将新创建的目录重命名为`django-myproject`。这是你将置于版本控制下的目录，因此，它将包含`.git`、`.svn`或类似的目录。
- en: In the `django-myproject` directory, create a `README.md` file to describe your
    project to the new developers. You can also put the pip requirements with the
    Django version and include other external dependencies (read about this in the
    *Handling project dependencies with pip* recipe). Also, this directory will contain
    your project's Python package named `myproject`; Django apps (I recommend having
    an app called `utils` for different functionalities that are shared throughout
    the project); a `locale` directory for your project translations if it is multilingual;
    a Fabric deployment script named `fabfile.py`, as suggested in the *Creating and
    using the Fabric deployment script* recipe in [Chapter 11](ch11.html "Chapter 11. Testing
    and Deployment"), *Testing and Deployment*; and the `externals` directory for
    external dependencies that are included in this project if you decide not to use
    pip requirements.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `django-myproject` 目录中，创建一个 `README.md` 文件来描述您的项目给新开发者。您还可以将带有 Django 版本的
    pip 要求包含在内，并包括其他外部依赖（有关此内容，请参阅 *使用pip处理项目依赖项* 菜谱）。此外，此目录将包含您的项目 Python 包名为 `myproject`；Django
    应用（我建议有一个名为 `utils` 的应用，用于在整个项目中共享的不同功能）；如果项目是多语言的，则包含项目翻译的 `locale` 目录；根据 *创建和使用
    Fabric 部署脚本* 菜谱中的建议，创建一个名为 `fabfile.py` 的 Fabric 部署脚本；以及如果您决定不使用 pip 要求，则包含在此项目中的外部依赖的
    `externals` 目录。
- en: In your project's Python package, `myproject`, create the `media` directory
    for project uploads, the `site_static` directory for project-specific static files,
    the `static` directory for collected static files, the `tmp` directory for the
    upload procedure, and the `templates` directory for project templates. Also, the
    `myproject` directory should contain your project settings, the `settings.py`
    and `conf` directories (read about this in the *Configuring settings for development,
    testing, staging, and production environments* recipe), as well as the `urls.py`
    URL configuration.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目 Python 包 `myproject` 中，创建 `media` 目录用于项目上传，`site_static` 目录用于项目特定的静态文件，`static`
    目录用于收集的静态文件，`tmp` 目录用于上传过程，以及 `templates` 目录用于项目模板。此外，`myproject` 目录应包含您的项目设置，`settings.py`
    和 `conf` 目录（有关此内容，请参阅 *配置开发、测试、预发布和生产环境设置* 菜谱），以及 `urls.py` URL 配置。
- en: In your `site_static` directory, create the `site` directory as a namespace
    for site-specific static files. Then, separate the separated static files in directories
    in it. For instance, `scss` for Sass files (optional), `css` for the generated
    minified Cascading Style Sheets, `img` for styling images and logos, `js` for
    JavaScript, and any third-party module combining all types of files such as the
    tinymce rich-text editor. Besides the `site` directory, the `site_static` directory
    might also contain overwritten static directories of third-party apps, for example,
    `cms` overwriting static files from Django CMS. To generate the CSS files from
    Sass and minify the JavaScript files, you can use the CodeKit or Prepros applications
    with a graphical user interface.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 `site_static` 目录中，创建一个 `site` 目录作为特定于站点的静态文件的命名空间。然后，将分离的静态文件分别放在其中的目录中。例如，`scss`
    用于 Sass 文件（可选），`css` 用于生成的最小化层叠样式表，`img` 用于样式化图像和标志，`js` 用于 JavaScript，以及任何组合所有类型文件的第三方模块，例如
    tinymce 富文本编辑器。除了 `site` 目录外，`site_static` 目录可能还包含第三方应用的覆盖静态目录，例如 `cms` 覆盖 Django
    CMS 的静态文件。要使用具有图形用户界面的 CodeKit 或 Prepros 应用程序从 Sass 生成 CSS 文件并压缩 JavaScript 文件。
- en: Put your templates that are separated by the apps in your templates directory.
    If a template file represents a page (for example, `change_item.html` or `item_list.html`),
    then directly put it in the app's template directory. If the template is included
    in another template (for example, `similar_items.html`), put it in the includes
    subdirectory. Also, your templates directory can contain a directory called `utils`
    for globally reusable snippets, such as pagination, language chooser, and others.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您通过应用分离的模板放在您的模板目录中。如果一个模板文件代表一个页面（例如，`change_item.html` 或 `item_list.html`），则直接将其放在应用的模板目录中。如果模板包含在其他模板中（例如，`similar_items.html`），则将其放在包含子目录中。此外，您的模板目录可以包含一个名为
    `utils` 的目录，用于全局可重用的片段，例如分页、语言选择器等。
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: 'The whole file structure for a complete project in a virtual environment will
    look similar to the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟环境中，一个完整项目的整个文件结构将类似于以下内容：
- en: '![How it works…](img/B04912_01_01.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/B04912_01_01.jpg)'
- en: See also
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Handling project dependencies with pip* recipe
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用pip处理项目依赖项* 菜谱'
- en: The *Including external dependencies in your project* recipe
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将外部依赖项包含到你的项目中*配方'
- en: The *Configuring settings for development, testing, staging, and production
    environments* recipe
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置开发、测试、预发布和生产环境的设置*配方'
- en: The *Deploying on Apache with mod_wsgi* recipe in [Chapter 11](ch11.html "Chapter 11. Testing
    and Deployment"), *Testing and Deployment*
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在Apache上使用mod_wsgi部署](https://wiki.example.org/ch11.html "第11章。测试和部署")的配方在*测试和部署*的第11章中'
- en: The *Creating and using the Fabric deployment script* recipe in [Chapter 11](ch11.html
    "Chapter 11. Testing and Deployment"), *Testing and Deployment*
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第11章](ch11.html "第11章。测试和部署")中的*创建和使用Fabric部署脚本*配方，*测试和部署*'
- en: Handling project dependencies with pip
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pip处理项目依赖
- en: The pip is the most convenient tool to install and manage Python packages. Besides
    installing the packages one by one, it is possible to define a list of packages
    that you want to install and pass it to the tool so that it deals with the list
    automatically.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: pip 是安装和管理Python包最方便的工具。除了逐个安装包之外，你还可以定义一个你想要安装的包列表，并将其传递给工具，以便它自动处理该列表。
- en: 'You will need to have at least two different instances of your project: the
    development environment, where you create new features, and the public website
    environment that is usually called the production environment in a hosted server.
    Additionally, there might be development environments for other developers. Also,
    you may have a testing and staging environment in order to test the project locally
    and in a public website-like situation.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要至少有两个不同实例的项目：开发环境，在那里你创建新功能，以及通常称为托管服务器上的生产环境的公共网站环境。此外，可能还有其他开发者的开发环境。你还可以有一个测试和预发布环境，以便在本地和类似公共网站的情况下测试项目。
- en: For good maintainability, you should be able to install the required Python
    modules for development, testing, staging, and production environments. Some of
    the modules will be shared and some of them will be specific. In this recipe,
    we will see how to organize the project dependencies and manage them with pip.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了良好的可维护性，你应该能够安装开发、测试、预发布和生产环境所需的Python模块。其中一些模块将是共享的，而另一些将是特定的。在这个配方中，我们将了解如何组织项目依赖并使用pip管理它们。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before using this recipe, you need to have pip installed and a virtual environment
    activated. For more information on how to do this, read the *Working with a virtual
    environment* recipe.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此配方之前，你需要安装pip并激活虚拟环境。有关如何操作的更多信息，请阅读*使用虚拟环境*配方。
- en: How to do it…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Execute the following steps one by one to prepare pip requirements for your
    Django project:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 依次执行以下步骤，为你的Django项目准备pip需求：
- en: 'Let''s go to your Django project that you have under version control and create
    the `requirements` directory with these text files: `base.txt` for shared modules,
    `dev.txt` for development environment, `test.txt` for testing environment, `staging.txt`
    for staging environment, and `prod.txt` for production.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们去你的Django项目，该项目在版本控制下，并创建`requirements`目录，包含以下文本文件：`base.txt`用于共享模块，`dev.txt`用于开发环境，`test.txt`用于测试环境，`staging.txt`用于预发布环境，以及`prod.txt`用于生产环境。
- en: 'Edit `base.txt` and add the Python modules that are shared in all environments,
    line by line, for example:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`base.txt`并逐行添加所有环境中共享的Python模块，例如：
- en: '[PRE8]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If the requirements of a specific environment are the same as in the `base.txt`,
    add the line including the `base.txt` in the requirements file of that environment,
    for example:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果特定环境的需要与`base.txt`中的相同，请在该环境的需求文件中添加包含`base.txt`的行，例如：
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If there are specific requirements for an environment, add them as shown in
    the following:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有特定环境的特定要求，请按以下方式添加：
- en: '[PRE10]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, you can run the following command in order to install all the required
    dependencies for development environment (or analogous command for other environments),
    as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以运行以下命令来安装开发环境所需的所有依赖项（或适用于其他环境的类似命令），如下所示：
- en: '[PRE11]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The preceding command downloads and installs all your project dependencies from
    `requirements/base.txt` and `requirements/dev.txt` in your virtual environment.
    As you can see, you can specify a version of the module that you need for the
    Django framework and even directly install from a specific commit at the Git repository
    for the `python-social-auth` in our example. In practice, installing from a specific
    commit would rarely be useful, for instance, only when having third-party dependencies
    in your project with specific functionality that are not supported in the recent
    versions anymore.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令从您的虚拟环境中的`requirements/base.txt`和`requirements/dev.txt`下载并安装所有项目依赖项。如您所见，您可以指定Django框架所需的模块版本，甚至可以直接从Git仓库中的`python-social-auth`的特定提交安装。在实践中，从特定提交安装很少有用，例如，只有当您的项目中包含具有特定功能且不再受最新版本支持的第三方依赖项时。
- en: When you have many dependencies in your project, it is good practice to stick
    to specific versions of the Python modules as you can then be sure that when you
    deploy your project or give it to a new developer, the integrity doesn't get broken
    and all the modules function without conflicts.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的项目中有很多依赖项时，坚持使用Python模块的特定版本是一个好习惯，这样您可以确保在部署项目或将其提供给新开发者时，完整性不会受损，并且所有模块都能正常工作，不会发生冲突。
- en: 'If you have already manually installed the project `requirements` with pip
    one by one, you can generate the `requirements/base.txt` file using the following
    command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经手动使用pip逐个安装了项目`requirements`，您可以使用以下命令生成`requirements/base.txt`文件：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There's more…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If you want to keep things simple and are sure that, for all environments,
    you will be using the same dependencies, you can use just one file for your requirements
    named `requirements.txt`, by definition:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想保持简单，并且确信在所有环境中都将使用相同的依赖项，您可以使用一个名为`requirements.txt`的文件，按定义：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To install the modules in a new environment simply call the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要在新环境中安装模块，只需调用以下命令：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you need to install a Python library from other version control system or
    local path, you can learn more about pip from the official documentation at [http://pip-python3.readthedocs.org/en/latest/reference/pip_install.html](http://pip-python3.readthedocs.org/en/latest/reference/pip_install.html).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要从其他版本控制系统或本地路径安装Python库，您可以从官方文档中了解更多关于pip的信息：[http://pip-python3.readthedocs.org/en/latest/reference/pip_install.html](http://pip-python3.readthedocs.org/en/latest/reference/pip_install.html)。
- en: See also
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Working with a virtual environment* recipe
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用虚拟环境工作*食谱'
- en: The *Including external dependencies in your project* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将外部依赖项包含到您的项目中*食谱'
- en: The *Configuring settings for development, testing, staging, and production
    environments* recipe
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置开发、测试、预生产和生产环境设置*食谱'
- en: Making your code compatible with both Python 2.7 and Python 3
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使您的代码兼容Python 2.7和Python 3
- en: Since version 1.7, Django can be used with Python 2.7 and Python 3\. In this
    recipe, we will take a look at the operations to make your code compatible with
    both the Python versions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.7版本以来，Django可以与Python 2.7和Python 3一起使用。在本食谱中，我们将探讨使您的代码兼容这两个Python版本的操作。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: When creating a new Django project or upgrading an old existing project, consider
    following the rules given in this recipe.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新的Django项目或升级旧项目时，请考虑遵循本食谱中给出的规则。
- en: How to do it…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Making your code compatible with both Python versions consists of the following
    steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使您的代码兼容Python的两个版本包括以下步骤：
- en: At the top of each module, add `from` `__future__ import unicode_literals` and
    then use usual quotes without a `u` prefix for Unicode strings and a `b` prefix
    for bytestrings.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个模块的顶部添加`from __future__ import unicode_literals`，然后使用通常的引号，无需`u`前缀来表示Unicode字符串，使用`b`前缀来表示字节字符串。
- en: To ensure that a value is bytestring, use the `django.utils.encoding.smart_bytes`
    function. To ensure that a value is Unicode, use the `django.utils.encoding.smart_text`
    or `django.utils.encoding.force_text` function.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要确保一个值是字节字符串，请使用`django.utils.encoding.smart_bytes`函数。要确保一个值是Unicode，请使用`django.utils.encoding.smart_text`或`django.utils.encoding.force_text`函数。
- en: 'For your models, instead of the `__unicode__` method, use the `__str__` method
    and add the `python_2_unicode_compatible` decorator, as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于您的模型，请使用`__str__`方法而不是`__unicode__`方法，并添加`python_2_unicode_compatible`装饰器，如下所示：
- en: '[PRE15]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To iterate through dictionaries, use `iteritems()`, `iterkeys()`, and `itervalues()`
    from `django.utils.six`. Take a look at the following:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要遍历字典，请使用`django.utils.six`中的`iteritems()`、`iterkeys()`和`itervalues()`。以下是一个示例：
- en: '[PRE16]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When you capture exceptions, use the `as` keyword, as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你捕获异常时，请使用`as`关键字，如下所示：
- en: '[PRE17]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To check the type of a value, use `django.utils.six`, as shown in the following:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查值的类型，请使用`django.utils.six`，如下所示：
- en: '[PRE18]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Instead of `xrange`, use `range` from `django.utils.six.moves`, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要使用`xrange`，而应使用`django.utils.six.moves`中的`range`，如下所示：
- en: '[PRE19]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To check whether the current version is Python 2 or Python 3, you can use the
    following conditions:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查当前版本是Python 2还是Python 3，你可以使用以下条件：
- en: '[PRE20]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works…
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: All strings in Django projects should be considered as Unicode strings. Only
    the input of `HttpRequest` and output of `HttpResponse` is usually in the UTF-8
    encoded bytestring.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Django项目中的所有字符串都应被视为Unicode字符串。通常，只有`HttpRequest`的输入和`HttpResponse`的输出是以UTF-8编码的字节串。
- en: Many functions and methods in Python 3 now return the iterators instead of lists,
    which make the language more efficient. To make the code compatible with both
    the Python versions, you can use the six library that is bundled in Django.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3中的许多函数和方法现在返回迭代器而不是列表，这使得语言更加高效。为了使代码与两个Python版本兼容，你可以使用Django中捆绑的six库。
- en: Read more about writing compatible code in the official Django documentation
    at [https://docs.djangoproject.com/en/1.8/topics/python3/](https://docs.djangoproject.com/en/1.8/topics/python3/).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方Django文档中了解更多关于编写兼容代码的信息。[https://docs.djangoproject.com/en/1.8/topics/python3/](https://docs.djangoproject.com/en/1.8/topics/python3/)
- en: Tip
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books that you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register in order to have the files e-mailed directly to you.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买Packt书籍的账户中下载所有示例代码文件。[http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接将文件通过电子邮件发送给你。
- en: Including external dependencies in your project
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的项目中包含外部依赖项
- en: Sometimes, it is better to include external dependencies in your project. This
    ensures that whenever a developer upgrades third-party modules, all the other
    developers will receive the upgraded version in the next update from the version
    control system (Git, Subversion, or others).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，将外部依赖项包含在你的项目中会更好。这确保了每当第三方模块升级时，所有其他开发者都会在版本控制系统（Git、Subversion或其他）的下一个更新中收到升级版本。
- en: Also, it is better to have external dependencies included in your project when
    the libraries are taken from unofficial sources, that is, somewhere other than
    **Python Package Index** (**PyPI**), or different version control systems.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当从非官方来源（即除了**Python Package Index**（**PyPI**）或不同的版本控制系统之外）获取库时，最好将外部依赖项包含在你的项目中。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Start with a virtual environment with a Django project in it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以包含Django项目的虚拟环境开始。
- en: How to do it…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Execute the following steps one by one:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 依次执行以下步骤：
- en: If you haven't done this already, create an externals directory under your Django
    project `django-myproject` directory. Then, create the `libs` and `apps` directories
    under it.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请在你的Django项目`django-myproject`目录下创建一个外部目录。然后，在该目录下创建`libs`和`apps`目录。
- en: The `libs` directory is for the Python modules that are required by your project,
    for example, boto, Requests, Twython, Whoosh, and so on. The `apps` directory
    is for third-party Django apps, for example, django-cms, django-haystack, django-storages,
    and so on.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`libs`目录用于你的项目所需的Python模块，例如boto、Requests、Twython、Whoosh等。`apps`目录用于第三方Django应用，例如django-cms、django-haystack、django-storages等。'
- en: Tip
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: I highly recommend that you create the `README.txt` files in the `libs` and
    `apps` directories, where you mention what each module is for, what the used version
    or revision is, and where it is taken from.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我强烈建议你在`libs`和`apps`目录中创建`README.txt`文件，其中说明每个模块的用途、使用的版本或修订号以及来源。
- en: The directory structure should look something similar to the following:![How
    to do it…](img/B04912_01_02.jpg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目录结构应类似于以下内容：![如何操作…](img/B04912_01_02.jpg)
- en: 'The next step is to put the external libraries and apps under the Python path
    so that they are recognized as if they were installed. This can be done by adding
    the following code in the settings:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将外部库和应用程序添加到Python路径中，以便它们被识别为已安装。这可以通过在设置中添加以下代码来完成：
- en: '[PRE21]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'A module is meant to be under the Python path if you can run Python and import
    that module. One of the ways to put a module under the Python path is to modify
    the `sys.path` variable before importing a module that is in an unusual location.
    The value of `sys.path` is a list of directories starting with an empty string
    for the current directory, followed by the directories in the virtual environment,
    and finally the globally shared directories of the Python installation. You can
    see the value of `sys.path` in the Python shell, as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以运行Python并导入该模块，则模块应该位于Python路径下。将模块添加到Python路径的一种方法是在导入位于非常规位置的模块之前修改`sys.path`变量。`sys.path`的值是一个以空字符串开始的目录列表，表示当前目录，然后是虚拟环境中的目录，最后是Python安装的全局共享目录。你可以在Python
    shell中查看`sys.path`的值，如下所示：
- en: '[PRE22]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When trying to import a module, Python searches for the module in this list
    and returns the first result that is found.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试导入一个模块时，Python会在这个列表中搜索模块，并返回找到的第一个结果。
- en: Therefore, we first define the `BASE_DIR` variable, which is the absolute path
    to one level higher than the `settings.py` file. Then, we define the `EXTERNAL_LIBS_PATH`
    and `EXTERNAL_APPS_PATH` variables, which are relative to `BASE_DIR`. Lastly,
    we modify the `sys.path` property, adding new paths to the beginning of the list.
    Note that we also add an empty string as the first path to search, which means
    that the current directory of any module should always be checked first before
    checking other Python paths.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们首先定义`BASE_DIR`变量，它是`settings.py`文件上一级的绝对路径。然后，我们定义`EXTERNAL_LIBS_PATH`和`EXTERNAL_APPS_PATH`变量，它们相对于`BASE_DIR`。最后，我们修改`sys.path`属性，将新路径添加到列表的开头。请注意，我们还添加了一个空字符串作为第一个搜索路径，这意味着在检查其他Python路径之前，应该始终检查任何模块的当前目录。
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: This way of including external libraries doesn't work cross-platform with the
    Python packages that have C language bindings, for example, `lxml`. For such dependencies,
    I would recommend using the pip requirements that were introduced in the *Handling
    project dependencies with pip* recipe.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这种包含外部库的方式在具有C语言绑定的Python包（例如`lxml`）之间不跨平台工作。对于此类依赖项，我建议使用在*使用pip处理项目依赖项*配方中引入的pip需求。
- en: See also
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a project file structure* recipe
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建项目文件结构*的配方'
- en: The *Handling project dependencies with pip* recipe
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用pip处理项目依赖项*的配方'
- en: The *Defining relative paths in the settings* recipe
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在设置中定义相对路径*的配方'
- en: The *Using the Django shell* recipe in [Chapter 10](ch10.html "Chapter 10. Bells
    and Whistles"), *Bells and Whistles*
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第10章*铃声和哨子*中的*使用Django shell*配方，[第10章](ch10.html "第10章。铃声和哨子")
- en: Configuring settings for development, testing, staging, and production environments
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置开发、测试、预发布和生产环境的设置
- en: As noted earlier, you will be creating new features in the development environment,
    test them in the testing environment, then put the website to a staging server
    to let other people to try the new features, and lastly, the website will be deployed
    to the production server for public access. Each of these environments can have
    specific settings and you will see how to organize them in this recipe.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你将在开发环境中创建新功能，然后在测试环境中测试它们，接着将网站部署到预发布服务器，让其他人尝试新功能，最后，网站将被部署到生产服务器以供公众访问。每个环境都可以有特定的设置，你将在这个配方中看到如何组织它们。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In a Django project, we''ll create settings for each environment: development,
    testing, staging, and production.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django项目中，我们将为每个环境创建设置：开发、测试、预发布和生产。
- en: How to do it…
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Follow these steps to configure project settings:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置项目设置：
- en: 'In `myproject` directory, create a `conf` Python module with the following
    files: `__init__.py`, `base.py` for shared settings, `dev.py` for development
    settings, `test.py` for testing settings, `staging.py` for staging settings, and
    `prod.py` for production settings.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`myproject`目录中，创建一个`conf` Python模块，包含以下文件：`__init__.py`，`base.py`用于共享设置，`dev.py`用于开发设置，`test.py`用于测试设置，`staging.py`用于预发布设置，以及`prod.py`用于生产设置。
- en: Put all your shared settings in `conf/base.py`.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有共享设置放在`conf/base.py`中。
- en: 'If the settings of an environment are the same as the shared settings, then
    just import everything from `base.py` there, as follows:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果环境的设置与共享设置相同，则只需从`base.py`中导入所有内容，如下所示：
- en: '[PRE23]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Apply the settings that you want to attach or overwrite for your specific environment
    in the other files, for example, the development environment settings should go
    to `dev.py` as shown in the following:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其他文件中应用您想要附加或覆盖的特定环境的设置，例如，开发环境设置应放在`dev.py`中，如下所示：
- en: '[PRE24]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'At the beginning of the `myproject/settings.py`, import the configurations
    from one of the environment settings and then additionally attach specific or
    sensitive configurations such as `DATABASES` or `API` keys that shouldn''t be
    under version control, as follows:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`myproject/settings.py`的开头，从环境设置之一导入配置，然后附加特定的或敏感的配置，例如`DATABASES`或`API`密钥，这些不应置于版本控制之下，如下所示：
- en: '[PRE25]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Create a `settings.py.sample` file that should contain all the sensitive settings
    that are necessary for a project to run; however, with empty values set.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`settings.py.sample`文件，该文件应包含项目运行所需的所有敏感设置，但设置为空值。
- en: How it works…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*它的工作原理…'
- en: By default, the Django management commands use the settings from `myproject/settings.py`.
    Using the method that is defined in this recipe, we can keep all the required
    non-sensitive settings for all environments under version control in the conf
    directory. Whereas, the `settings.py` file itself would be ignored by version
    control and will only contain the settings that are necessary for the current
    development, testing, staging, or production environments.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django管理命令使用`myproject/settings.py`中的设置。使用本食谱中定义的方法，我们可以将所有环境所需的非敏感设置都放在conf目录下进行版本控制。而`settings.py`文件本身将被版本控制忽略，并且只会包含当前开发、测试、预发布或生产环境所需的设置。
- en: See also
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating and including local settings* recipe
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建和包含本地设置*的食谱'
- en: The *Defining relative paths in the settings* recipe
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在设置中定义相对路径的食谱*'
- en: The *Setting the Subversion ignore property* recipe
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*设置Subversion忽略属性*的食谱'
- en: The *Creating a Git ignore file* recipe
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建Git忽略文件的食谱*'
- en: Defining relative paths in the settings
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在设置中定义相对路径
- en: Django requires you to define different file paths in the settings, such as
    the root of your media, the root of your static files, the path to templates,
    the path to translation files, and so on. For each developer of your project,
    the paths may differ as the virtual environment can be set up anywhere and the
    user might be working on Mac OS X, Linux, or Windows. Anyway, there is a way to
    define these paths that are relative to your Django project directory.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Django要求你在设置中定义不同的文件路径，例如媒体根目录、静态文件根目录、模板路径、翻译文件路径等。对于你的项目的每个开发者，路径可能不同，因为虚拟环境可以设置在任何地方，用户可能在Mac
    OS X、Linux或Windows上工作。无论如何，有一种方法可以定义这些相对于Django项目目录的路径。
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start with, open `settings.py`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开`settings.py`。
- en: How to do it…
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Modify your path-related settings accordingly instead of hardcoding the paths
    to your local directories, as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要修改你的路径相关设置，而不是将本地目录的路径硬编码，如下所示：
- en: '[PRE26]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works…
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*它的工作原理…'
- en: At first, we define `BASE_DIR`, which is an absolute path to one level higher
    than the `settings.py` file. Then, we set all the paths relative to `BASE_DIR`
    using the `os.path.join` function.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义`BASE_DIR`，它是相对于`settings.py`文件的一个更高层的绝对路径。然后，我们使用`os.path.join`函数将所有路径设置为相对于`BASE_DIR`。
- en: See also
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Including external dependencies in your project* recipe
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在项目中包含外部依赖的食谱*'
- en: Creating and including local settings
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和包含本地设置
- en: 'Configuration doesn''t necessarily need to be complex. If you want to keep
    things simple, you can work with two settings files: `settings.py` for common
    configuration and `local_settings.py` for sensitive settings that shouldn''t be
    under version control.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 配置不一定是复杂的。如果你想保持简单，你可以使用两个设置文件：`settings.py`用于通用配置，`local_settings.py`用于不应置于版本控制下的敏感设置。
- en: Getting ready
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Most of the settings for different environments will be shared and saved in
    version control. However, there will be some settings that are specific to the
    environment of the project instance, for example, database or e-mail settings.
    We will put them in the `local_settings.py` file.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 不同环境的设置的大部分将共享并保存在版本控制中。然而，将会有一些设置是特定于项目实例的环境的，例如数据库或电子邮件设置。我们将它们放在`local_settings.py`文件中。
- en: How to do it…
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To use local settings in your project, perform the following steps:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的项目中使用本地设置，请执行以下步骤：
- en: 'At the end of `settings.py`, add a version of `local_settings.py` that claims
    to be in the same directory, as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`settings.py`的末尾添加一个`local_settings.py`的版本，它声称位于同一目录中，如下所示：
- en: '[PRE27]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create `local_settings.py` and put your environment-specific settings there,
    as shown in the following:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`local_settings.py`并将您的环境特定设置放在那里，如下所示：
- en: '[PRE28]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you can see, the local settings are not normally imported, they are rather
    included and executed in the `settings.py` file itself. This allows you to not
    only create or overwrite the existing settings, but also adjust the tuples or
    lists from the `settings.py` file. For example, we add `debug_toolbar` to `INSTALLED_APPS`
    here in order to be able to debug the SQL queries, template context variables,
    and so on.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，本地设置通常不是导入的，而是包含并执行在`settings.py`文件本身中。这允许您不仅创建或覆盖现有设置，还可以调整`settings.py`文件中的元组或列表。例如，我们在这里添加`debug_toolbar`到`INSTALLED_APPS`中，以便能够调试SQL查询、模板上下文变量等。
- en: See also
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a project file structure* recipe
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建项目文件结构*配方'
- en: The *Toggling the Debug Toolbar* recipe in [Chapter 10](ch10.html "Chapter 10. Bells
    and Whistles"), *Bells and Whistles*
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第10章*铃声和哨子*中的*切换调试工具栏*配方，*铃声和哨子*
- en: Setting up STATIC_URL dynamically for Subversion users
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Subversion用户动态设置STATIC_URL
- en: If you set `STATIC_URL` to a static value, then each time you update a CSS file,
    JavaScript file, or image, you will need to clear the browser cache in order to
    see the changes. There is a trick to work around clearing the browser's cache.
    It is to have the revision number of the version control system shown in `STATIC_URL`.
    Whenever the code is updated, the visitor's browser will force the loading of
    all-new static files.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将`STATIC_URL`设置为静态值，那么每次您更新CSS文件、JavaScript文件或图像时，您都需要清除浏览器缓存才能看到更改。有一个绕过清除浏览器缓存的方法。那就是在`STATIC_URL`中显示版本控制系统的修订号。每当代码更新时，访客的浏览器将强制加载所有全新的静态文件。
- en: This recipe shows how to put a revision number in `STATIC_URL` for subversion
    users.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了如何为Subversion用户在`STATIC_URL`中放入修订号。
- en: Getting ready
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that your project is under the subversion version control and you
    have `BASE_DIR` defined in your settings, as shown in the *Defining relative paths
    in the settings* recipe.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的项目处于Subversion版本控制之下，并在您的设置中定义了`BASE_DIR`，如*在设置中定义相对路径*配方中所示。
- en: Then, create the `utils` module in your Django project, and also create a file
    called `misc.py` there.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在您的Django项目中创建`utils`模块，并在其中创建一个名为`misc.py`的文件。
- en: How to do it…
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The procedure to put the revision number in the `STATIC_URL` setting consists
    of the following two steps:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 将修订号放入`STATIC_URL`设置的程序包括以下两个步骤：
- en: 'Insert the following content:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下内容：
- en: '[PRE29]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, modify the `settings.py` file and add the following lines:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，修改`settings.py`文件并添加以下行：
- en: '[PRE30]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `get_media_svn_revision()` function takes the `absolute_path` directory
    as a parameter and calls the `svn` info shell command in that directory to find
    out the current revision. We pass `BASE_DIR` to the function as we are sure that
    it is under version control. Then, the revision is parsed, returned, and included
    in the `STATIC_URL` definition.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_media_svn_revision()`函数接受`absolute_path`目录作为参数，并在该目录中调用`svn` info shell命令以找出当前修订号。我们向函数传递`BASE_DIR`，因为我们确信它处于版本控制之下。然后，修订号被解析、返回并包含在`STATIC_URL`定义中。'
- en: See also
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Setting up STATIC_URL dynamically for Git users* recipe
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Git用户动态设置STATIC_URL的配方
- en: The *Setting the Subversion ignore property* recipe
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*设置Subversion忽略属性*配方'
- en: Setting up STATIC_URL dynamically for Git users
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Git用户动态设置STATIC_URL
- en: If you don't want to refresh the browser cache each time you change your CSS
    and JavaScript files, or while styling images, you need to set `STATIC_URL` dynamically
    with a varying path component. With the dynamically changing URL, whenever the
    code is updated, the visitor's browser will force loading of all-new uncached
    static files. In this recipe, we will set a dynamic path for `STATIC_URL` when
    you use the Git version control system.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不希望在每次更改CSS和JavaScript文件或调整图像样式时刷新浏览器缓存，您需要使用具有可变路径组件的动态方式设置`STATIC_URL`。使用动态变化的URL，每当代码更新时，访客的浏览器将强制加载所有全新的未缓存静态文件。在这个配方中，当您使用Git版本控制系统时，我们将为`STATIC_URL`设置一个动态路径。
- en: Getting ready
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that your project is under the Git version control and you have `BASE_DIR`
    defined in your settings, as shown in the *Defining relative paths in the settings*
    recipe.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't done it yet, create the `utils` module in your Django project.
    Also, create a `misc.py` file there.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The procedure to put the Git timestamp in the `STATIC_URL` setting consists
    of the following two steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following content to the `misc.py` file placed in `utils/`:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, import the newly created `get_git_changeset()` function in the settings
    and use it for the `STATIC_URL` path, as follows:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works…
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `get_git_changeset()` function takes the `absolute_path` directory as a
    parameter and calls the `git` show shell command with the parameters to show the
    Unix timestamp of the `HEAD` revision in the directory. As stated in the previous
    recipe, we pass `BASE_DIR` to the function as we are sure that it is under version
    control. The timestamp is parsed; converted to a string consisting of year, month,
    day, hour, minutes, and seconds; returned; and included in the definition of `STATIC_URL`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting up STATIC_URL dynamically for Subversion users* recipe
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating the Git ignore file* recipe
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting UTF-8 as the default encoding for MySQL configuration
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL is the most popular open source database. In this recipe, I will tell
    you how to set UTF-8 as the default encoding for it. Note that if you don't set
    this encoding in the database configuration, you might get into a situation where
    LATIN1 is used by default with your UTF-8 encoded data. This will lead to database
    errors whenever symbols such as € are used. Also, this recipe will save you from
    the difficulties of converting the database data from LATIN1 to UTF-8, especially
    when you have some tables encoded in LATIN1 and others in UTF-8.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that the MySQL database management system and the MySQLdb Python module
    are installed and you are using the MySQL engine in your project's settings.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `/etc/mysql/my.cnf` MySQL configuration file in your favorite editor
    and ensure that the following settings are set in the sections: `[client]`, `[mysql]`,
    and `[mysqld]`, as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If any of the sections don''t exist, create them in the file. Then, restart
    MySQL in your command-line tool, as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works…
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, whenever you create a new MySQL database, the databases and all their tables
    will be set in UTF-8 encoding by default.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to set this in all computers where your project is developed or
    published.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Subversion ignore property
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using Subversion for version control, you will need to keep most
    of the projects in the repository; however, some files and directories should
    only stay locally and not be tracked.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that your Django project is under the Subversion version control.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your command-line tool and set your default editor as `nano`, `vi`, `vim`
    or any other that you prefer, as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Tip
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't have a preference, I would recommend using `nano`, which is very
    intuitive and a simple text editor for the terminal.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, go to your project directory and type the following command:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This will open a temporary file in the editor, where you need to put the following
    file and directory patterns for Subversion to ignore:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Save the file and exit the editor. For every other Python package in your project,
    you will need to ignore several files and directories too. Just go to a directory
    and type the following command:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then, put this in the temporary file, save it, and close the editor, as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works…
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Subversion, you need to define the ignore properties for each directory of
    your project. Mainly, we don't want to track the Python-compiled files, for instance,
    `*.pyc`. We also want to ignore `local_settings.py` that is specific for each
    environment, `static` that replicates collected static files from different apps,
    `media` that contains uploaded files and changes together with the database, and
    `tmp` that is temporarily used for file uploads.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you keep all your settings in a `conf` Python package as described in the
    *Configuring settings for development, testing, staging, and production environments*
    recipe, add `settings.py` to the ignored files too.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating and including local settings* recipe
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating the Git ignore file* recipe
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Git ignore file
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using Git—the most popular distributed version control system—ignoring
    some files and folders from version control is much easier than with Subversion.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that your Django project is under the Git version control.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using your favorite text editor, create a `.gitignore` file at the root of
    your Django project and put these files and directories there, as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works…
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `.gitignore` file specifies the paths that should intentionally be untracked
    by the Git version control system. The `.gitignore` file that we created in this
    recipe will ignore the Python-compiled files, local settings, collected static
    files, temporary directory for uploads, and media directory with the uploaded
    files.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you keep all your settings in a `conf` Python package as described in the
    *Configuring settings for development, testing, staging, and production environments*
    recipe, add `settings.py` to the ignored files too.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting the Subversion ignore property* recipe
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting Python-compiled files
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run your project for the first time, Python compiles all your `*.py`
    code in bytecode-compiled files, `*.pyc`, which are used later for execution.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: Normally, when you change the `*.py` files, `*.pyc` is recompiled; however,
    sometimes when switching branches or moving the directories, you need to clean
    up the compiled files manually.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use your favorite editor and edit or create a `.bash_profile` file in your home
    directory.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add this alias at the end of `.bash_profile`, as follows:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, to clean the Python-compiled files, go to your project directory and type
    the following command in the command line:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works…
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At first, we create a Unix alias that searches for the `*.pyc` files and deletes
    them in the current directory and its children. The `.bash_profile` file is executed
    when you start a new session in the command-line tool.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting the Subversion ignore property* recipe
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating the Git ignore file* recipe
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respecting the import order in Python files
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create the Python modules, it is good practice to stay consistent with
    the structure in the files. This makes it easier for other developers and yourself
    to read the code. This recipe will show you how to structure your imports.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a virtual environment and a Django project in it.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following structure in a Python file that you create. Just after the
    first line that defines UTF-8 as the default Python file encoding, put the imports
    categorized in sections, as follows:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works…
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have five main categories for the imports, as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: System libraries for packages in the default installation of Python
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party libraries for the additionally installed Python packages
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django modules for different modules from the Django framework
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django apps for third-party and local apps
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current-app modules for relative imports from the current app
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When coding in Python and Django, use the official style guide for Python code,
    PEP 8\. You can find it at [https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/).
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including external dependencies in your project* recipe
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating app configuration
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing a website with Django, you create one module for the project
    itself and then, multiple Python modules called applications or apps that combine
    the different modular functionalities and usually consist of models, views, forms,
    URL configurations, management commands, migrations, signals, tests, and so on.
    The Django framework has application registry, where all apps and models are collected
    and later used for configuration and introspection. Since Django 1.7, meta information
    about apps can be saved in the `AppConfig` instance for each used app. Let's create
    a sample `magazine` app to take a look at how to use the app configuration there.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Either create your Django app manually or using this command in your virtual
    environment (learn how to use virtual environments in the *Working with a virtual
    environment* recipe), as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Add some `NewsArticle` model to `models.py`, create administration for the model
    in `admin.py`, and put `"magazine"` in `INSTALLED_APPS` in the settings. If you
    are not yet familiar with these tasks, study the official Django tutorial at [https://docs.djangoproject.com/en/1.8/intro/tutorial01/](https://docs.djangoproject.com/en/1.8/intro/tutorial01/).
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create and use the app configuration:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, create the `apps.py` file and put this content in it, as follows:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then, edit the `__init__.py` file of the app and put the following content:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Lastly, let''s create a `signals.py` file and add some signal handlers there:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: How it works…
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you run an HTTP server or invoke a management command, `django.setup()`
    is called. It loads the settings, sets up logging, and initializes app registry.
    The app registry is initialized in three steps, as shown in the following:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: Django imports the configurations for each item from `INSTALLED_APPS` in the
    settings. These items can point to app names or configuration directly, for example,`"magazine"`
    or `"magazine.apps.NewsAppConfig"`.
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django tries to import `models.py` from each app in `INSTALLED_APPS` and collect
    all the models.
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, Django runs the `ready()` method for each app configuration. This method
    is a correct place to register signal handlers, if you have any. The `ready()`
    method is optional.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our example, the `MagazineAppConfig` class sets the configuration for the
    `magazine` app. The `name` parameter defines the name of the current app. The
    `verbose_name` parameter is used in the Django model administration, where models
    are presented and grouped by apps. The `ready()` method imports and activates
    the signal handlers that, when in DEBUG mode, print in the terminal that a `NewsArticle`
    was saved or deleted.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is more…
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After calling `django.setup()`, you can load the app configurations and models
    from the registry as follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: You can read more about app configuration in the official Django documentation
    at [https://docs.djangoproject.com/en/1.8/ref/applications/](https://docs.djangoproject.com/en/1.8/ref/applications/)
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Working with a virtual environment* recipe
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Defining overwritable app settings* recipe
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Model Administration"), *Model Administration*'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining overwritable app settings
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to define settings for your app that can be then
    overwritten in your project's `settings.py` or `local_settings.py` file. This
    is useful especially for reusable apps.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Either create your Django app manually or using the following command:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How to do it…
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you just have one or two settings, you can use the following pattern in
    your `models.py` file. If the settings are extensive and you want to have them
    organized better, create an `app_settings.py` file in the app and put the settings
    in the following way:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, you can use the app settings in `models.py`, as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If you want to overwrite the `STATUS_CHOICES` setting for just one project,
    you simply open `settings.py` and add the following:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想为单个项目覆盖`STATUS_CHOICES`设置，你只需打开`settings.py`文件并添加以下内容：
- en: '[PRE54]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How it works…
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `getattr(object, attribute_name[, default_value])` Python function tries
    to get the `attribute_name` attribute from object and returns `default_value`
    if it is not found. In this case, different settings are tried in order to be
    taken from the Django project settings module, and if they are not found, the
    default values are assigned.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: Python函数`getattr(object, attribute_name[, default_value])`试图从对象中获取`attribute_name`属性，如果未找到则返回`default_value`。在这种情况下，会尝试不同的设置，以便从Django项目设置模块中获取，如果未找到，则分配默认值。
