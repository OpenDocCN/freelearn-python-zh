- en: Chapter 1. Getting Started with Django 1.8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with a virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a project file structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling project dependencies with pip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your code compatible with both Python 2.7 and Python 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including external dependencies in your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring settings for development, testing, staging, and production environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining relative paths in the settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and including local settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up STATIC_URL dynamically for Subversion users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up STATIC_URL dynamically for Git users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting UTF-8 as the default encoding for MySQL configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the Subversion ignore property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Git ignore file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting Python-compiled files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respecting the import order in Python files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating app configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining overwritable app settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see a few good practices when starting a new project
    with Django 1.8 on Python 2.7 or Python 3\. Some of the tricks introduced here
    are the best ways to deal with the project layout, settings, and configurations.
    However, for some tricks, you might have to find some alternatives online or in
    other books about Django. Feel free to evaluate and choose the best bits and pieces
    for yourself while digging deep into the Django world.
  prefs: []
  type: TYPE_NORMAL
- en: I am assuming that you are already familiar with the basics of Django, Subversion
    and Git version control, MySQL and PostgreSQL databases, and command-line usage.
    Also, I am assuming that you are probably using a Unix-based operating system,
    such as Mac OS X or Linux. It makes more sense to develop with Django on Unix-based
    platforms as the websites will most likely be published on a Linux server, therefore,
    you can establish routines that work the same while developing as well as deploying.
    If you are locally working with Django on Windows, the routines are similar; however,
    they are not always the same.
  prefs: []
  type: TYPE_NORMAL
- en: Working with a virtual environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is very likely that you will develop multiple Django projects on your computer.
    Some modules such as Python Imaging Library (or Pillow) and MySQLdb, can be installed
    once and then shared for all projects. Other modules such as Django, third-party
    Python libraries, and Django apps, will need to be kept isolated from each other.
    The virtualenv tool is a utility that separates all the Python projects in their
    own realms. In this recipe, we will see how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To manage Python packages, you will need `pip`. It is included in your Python
    installation if you are using Python 2.7.9 or Python 3.4+. If you are using another
    version of Python, install `pip` by executing the installation instructions at
    [http://pip.readthedocs.org/en/stable/installing/](http://pip.readthedocs.org/en/stable/installing/).
    Let''s install the shared Python modules Pillow and MySQLdb, and the virtualenv
    utility, using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have your prerequisites installed, create a directory where all your
    Django projects will be stored, for example, `virtualenvs` under your home directory.
    Perform the following steps after creating the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the newly created directory and create a virtual environment that uses
    the shared system site packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use your newly created virtual environment, you need to execute the activation
    script in your current shell. This can be done with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also use the following command one for the same (note the space between
    the dot and bin):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see that the prompt of the command-line tool gets a prefix of the
    project name, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get out of the virtual environment, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create a virtual environment, a few specific directories (`bin`, `build`,
    `include`, and `lib`) are created in order to store a copy of the Python installation
    and some shared Python paths are defined. When the virtual environment is activated,
    whatever you have installed with `pip` or `easy_install` will be put in and used
    by the site packages of the virtual environment, and not the global site packages
    of your Python installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Django 1.8 in your virtual environment, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a project file structure recipe*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi* recipe in [Chapter 11](ch11.html "Chapter 11. Testing
    and Deployment"), *Testing and Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a project file structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A consistent file structure for your projects makes you well-organized and more
    productive. When you have the basic workflow defined, you can get in the business
    logic quicker and create awesome projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you haven't done this yet, create a `virtualenvs` directory, where you will
    keep all your virtual environments (read about this in the *Working with a virtual
    environment* recipe). This can be created under your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: Then, create a directory for your project's environment, for example, `myproject_env`.
    Start the virtual environment in it. I would suggest adding the `commands` directory
    for local bash scripts that are related to the project, the `db_backups` directory
    for database dumps, and the `project` directory for your Django project. Also,
    install Django in your virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps in order to create a file structure for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the virtual environment activated, go to the project directory and start
    a new Django project as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For clarity, we will rename the newly created directory as `django-myproject`.
    This is the directory that you will put under version control, therefore, it will
    have the `.git`, `.svn`, or similar directories.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `django-myproject` directory, create a `README.md` file to describe your
    project to the new developers. You can also put the pip requirements with the
    Django version and include other external dependencies (read about this in the
    *Handling project dependencies with pip* recipe). Also, this directory will contain
    your project's Python package named `myproject`; Django apps (I recommend having
    an app called `utils` for different functionalities that are shared throughout
    the project); a `locale` directory for your project translations if it is multilingual;
    a Fabric deployment script named `fabfile.py`, as suggested in the *Creating and
    using the Fabric deployment script* recipe in [Chapter 11](ch11.html "Chapter 11. Testing
    and Deployment"), *Testing and Deployment*; and the `externals` directory for
    external dependencies that are included in this project if you decide not to use
    pip requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your project's Python package, `myproject`, create the `media` directory
    for project uploads, the `site_static` directory for project-specific static files,
    the `static` directory for collected static files, the `tmp` directory for the
    upload procedure, and the `templates` directory for project templates. Also, the
    `myproject` directory should contain your project settings, the `settings.py`
    and `conf` directories (read about this in the *Configuring settings for development,
    testing, staging, and production environments* recipe), as well as the `urls.py`
    URL configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your `site_static` directory, create the `site` directory as a namespace
    for site-specific static files. Then, separate the separated static files in directories
    in it. For instance, `scss` for Sass files (optional), `css` for the generated
    minified Cascading Style Sheets, `img` for styling images and logos, `js` for
    JavaScript, and any third-party module combining all types of files such as the
    tinymce rich-text editor. Besides the `site` directory, the `site_static` directory
    might also contain overwritten static directories of third-party apps, for example,
    `cms` overwriting static files from Django CMS. To generate the CSS files from
    Sass and minify the JavaScript files, you can use the CodeKit or Prepros applications
    with a graphical user interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put your templates that are separated by the apps in your templates directory.
    If a template file represents a page (for example, `change_item.html` or `item_list.html`),
    then directly put it in the app's template directory. If the template is included
    in another template (for example, `similar_items.html`), put it in the includes
    subdirectory. Also, your templates directory can contain a directory called `utils`
    for globally reusable snippets, such as pagination, language chooser, and others.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The whole file structure for a complete project in a virtual environment will
    look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/B04912_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including external dependencies in your project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Configuring settings for development, testing, staging, and production
    environments* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Deploying on Apache with mod_wsgi* recipe in [Chapter 11](ch11.html "Chapter 11. Testing
    and Deployment"), *Testing and Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and using the Fabric deployment script* recipe in [Chapter 11](ch11.html
    "Chapter 11. Testing and Deployment"), *Testing and Deployment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling project dependencies with pip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The pip is the most convenient tool to install and manage Python packages. Besides
    installing the packages one by one, it is possible to define a list of packages
    that you want to install and pass it to the tool so that it deals with the list
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to have at least two different instances of your project: the
    development environment, where you create new features, and the public website
    environment that is usually called the production environment in a hosted server.
    Additionally, there might be development environments for other developers. Also,
    you may have a testing and staging environment in order to test the project locally
    and in a public website-like situation.'
  prefs: []
  type: TYPE_NORMAL
- en: For good maintainability, you should be able to install the required Python
    modules for development, testing, staging, and production environments. Some of
    the modules will be shared and some of them will be specific. In this recipe,
    we will see how to organize the project dependencies and manage them with pip.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before using this recipe, you need to have pip installed and a virtual environment
    activated. For more information on how to do this, read the *Working with a virtual
    environment* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps one by one to prepare pip requirements for your
    Django project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to your Django project that you have under version control and create
    the `requirements` directory with these text files: `base.txt` for shared modules,
    `dev.txt` for development environment, `test.txt` for testing environment, `staging.txt`
    for staging environment, and `prod.txt` for production.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `base.txt` and add the Python modules that are shared in all environments,
    line by line, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the requirements of a specific environment are the same as in the `base.txt`,
    add the line including the `base.txt` in the requirements file of that environment,
    for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If there are specific requirements for an environment, add them as shown in
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you can run the following command in order to install all the required
    dependencies for development environment (or analogous command for other environments),
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding command downloads and installs all your project dependencies from
    `requirements/base.txt` and `requirements/dev.txt` in your virtual environment.
    As you can see, you can specify a version of the module that you need for the
    Django framework and even directly install from a specific commit at the Git repository
    for the `python-social-auth` in our example. In practice, installing from a specific
    commit would rarely be useful, for instance, only when having third-party dependencies
    in your project with specific functionality that are not supported in the recent
    versions anymore.
  prefs: []
  type: TYPE_NORMAL
- en: When you have many dependencies in your project, it is good practice to stick
    to specific versions of the Python modules as you can then be sure that when you
    deploy your project or give it to a new developer, the integrity doesn't get broken
    and all the modules function without conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have already manually installed the project `requirements` with pip
    one by one, you can generate the `requirements/base.txt` file using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to keep things simple and are sure that, for all environments,
    you will be using the same dependencies, you can use just one file for your requirements
    named `requirements.txt`, by definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the modules in a new environment simply call the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you need to install a Python library from other version control system or
    local path, you can learn more about pip from the official documentation at [http://pip-python3.readthedocs.org/en/latest/reference/pip_install.html](http://pip-python3.readthedocs.org/en/latest/reference/pip_install.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Working with a virtual environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including external dependencies in your project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Configuring settings for development, testing, staging, and production
    environments* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your code compatible with both Python 2.7 and Python 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since version 1.7, Django can be used with Python 2.7 and Python 3\. In this
    recipe, we will take a look at the operations to make your code compatible with
    both the Python versions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating a new Django project or upgrading an old existing project, consider
    following the rules given in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Making your code compatible with both Python versions consists of the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: At the top of each module, add `from` `__future__ import unicode_literals` and
    then use usual quotes without a `u` prefix for Unicode strings and a `b` prefix
    for bytestrings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To ensure that a value is bytestring, use the `django.utils.encoding.smart_bytes`
    function. To ensure that a value is Unicode, use the `django.utils.encoding.smart_text`
    or `django.utils.encoding.force_text` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For your models, instead of the `__unicode__` method, use the `__str__` method
    and add the `python_2_unicode_compatible` decorator, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To iterate through dictionaries, use `iteritems()`, `iterkeys()`, and `itervalues()`
    from `django.utils.six`. Take a look at the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you capture exceptions, use the `as` keyword, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check the type of a value, use `django.utils.six`, as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instead of `xrange`, use `range` from `django.utils.six.moves`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check whether the current version is Python 2 or Python 3, you can use the
    following conditions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All strings in Django projects should be considered as Unicode strings. Only
    the input of `HttpRequest` and output of `HttpResponse` is usually in the UTF-8
    encoded bytestring.
  prefs: []
  type: TYPE_NORMAL
- en: Many functions and methods in Python 3 now return the iterators instead of lists,
    which make the language more efficient. To make the code compatible with both
    the Python versions, you can use the six library that is bundled in Django.
  prefs: []
  type: TYPE_NORMAL
- en: Read more about writing compatible code in the official Django documentation
    at [https://docs.djangoproject.com/en/1.8/topics/python3/](https://docs.djangoproject.com/en/1.8/topics/python3/).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books that you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register in order to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Including external dependencies in your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, it is better to include external dependencies in your project. This
    ensures that whenever a developer upgrades third-party modules, all the other
    developers will receive the upgraded version in the next update from the version
    control system (Git, Subversion, or others).
  prefs: []
  type: TYPE_NORMAL
- en: Also, it is better to have external dependencies included in your project when
    the libraries are taken from unofficial sources, that is, somewhere other than
    **Python Package Index** (**PyPI**), or different version control systems.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start with a virtual environment with a Django project in it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't done this already, create an externals directory under your Django
    project `django-myproject` directory. Then, create the `libs` and `apps` directories
    under it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `libs` directory is for the Python modules that are required by your project,
    for example, boto, Requests, Twython, Whoosh, and so on. The `apps` directory
    is for third-party Django apps, for example, django-cms, django-haystack, django-storages,
    and so on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: I highly recommend that you create the `README.txt` files in the `libs` and
    `apps` directories, where you mention what each module is for, what the used version
    or revision is, and where it is taken from.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The directory structure should look something similar to the following:![How
    to do it…](img/B04912_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to put the external libraries and apps under the Python path
    so that they are recognized as if they were installed. This can be done by adding
    the following code in the settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A module is meant to be under the Python path if you can run Python and import
    that module. One of the ways to put a module under the Python path is to modify
    the `sys.path` variable before importing a module that is in an unusual location.
    The value of `sys.path` is a list of directories starting with an empty string
    for the current directory, followed by the directories in the virtual environment,
    and finally the globally shared directories of the Python installation. You can
    see the value of `sys.path` in the Python shell, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When trying to import a module, Python searches for the module in this list
    and returns the first result that is found.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we first define the `BASE_DIR` variable, which is the absolute path
    to one level higher than the `settings.py` file. Then, we define the `EXTERNAL_LIBS_PATH`
    and `EXTERNAL_APPS_PATH` variables, which are relative to `BASE_DIR`. Lastly,
    we modify the `sys.path` property, adding new paths to the beginning of the list.
    Note that we also add an empty string as the first path to search, which means
    that the current directory of any module should always be checked first before
    checking other Python paths.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This way of including external libraries doesn't work cross-platform with the
    Python packages that have C language bindings, for example, `lxml`. For such dependencies,
    I would recommend using the pip requirements that were introduced in the *Handling
    project dependencies with pip* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Defining relative paths in the settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the Django shell* recipe in [Chapter 10](ch10.html "Chapter 10. Bells
    and Whistles"), *Bells and Whistles*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring settings for development, testing, staging, and production environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As noted earlier, you will be creating new features in the development environment,
    test them in the testing environment, then put the website to a staging server
    to let other people to try the new features, and lastly, the website will be deployed
    to the production server for public access. Each of these environments can have
    specific settings and you will see how to organize them in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a Django project, we''ll create settings for each environment: development,
    testing, staging, and production.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure project settings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `myproject` directory, create a `conf` Python module with the following
    files: `__init__.py`, `base.py` for shared settings, `dev.py` for development
    settings, `test.py` for testing settings, `staging.py` for staging settings, and
    `prod.py` for production settings.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put all your shared settings in `conf/base.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the settings of an environment are the same as the shared settings, then
    just import everything from `base.py` there, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the settings that you want to attach or overwrite for your specific environment
    in the other files, for example, the development environment settings should go
    to `dev.py` as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the beginning of the `myproject/settings.py`, import the configurations
    from one of the environment settings and then additionally attach specific or
    sensitive configurations such as `DATABASES` or `API` keys that shouldn''t be
    under version control, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `settings.py.sample` file that should contain all the sensitive settings
    that are necessary for a project to run; however, with empty values set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, the Django management commands use the settings from `myproject/settings.py`.
    Using the method that is defined in this recipe, we can keep all the required
    non-sensitive settings for all environments under version control in the conf
    directory. Whereas, the `settings.py` file itself would be ignored by version
    control and will only contain the settings that are necessary for the current
    development, testing, staging, or production environments.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating and including local settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Defining relative paths in the settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting the Subversion ignore property* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a Git ignore file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining relative paths in the settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django requires you to define different file paths in the settings, such as
    the root of your media, the root of your static files, the path to templates,
    the path to translation files, and so on. For each developer of your project,
    the paths may differ as the virtual environment can be set up anywhere and the
    user might be working on Mac OS X, Linux, or Windows. Anyway, there is a way to
    define these paths that are relative to your Django project directory.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start with, open `settings.py`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modify your path-related settings accordingly instead of hardcoding the paths
    to your local directories, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At first, we define `BASE_DIR`, which is an absolute path to one level higher
    than the `settings.py` file. Then, we set all the paths relative to `BASE_DIR`
    using the `os.path.join` function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Including external dependencies in your project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and including local settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configuration doesn''t necessarily need to be complex. If you want to keep
    things simple, you can work with two settings files: `settings.py` for common
    configuration and `local_settings.py` for sensitive settings that shouldn''t be
    under version control.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the settings for different environments will be shared and saved in
    version control. However, there will be some settings that are specific to the
    environment of the project instance, for example, database or e-mail settings.
    We will put them in the `local_settings.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use local settings in your project, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of `settings.py`, add a version of `local_settings.py` that claims
    to be in the same directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `local_settings.py` and put your environment-specific settings there,
    as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see, the local settings are not normally imported, they are rather
    included and executed in the `settings.py` file itself. This allows you to not
    only create or overwrite the existing settings, but also adjust the tuples or
    lists from the `settings.py` file. For example, we add `debug_toolbar` to `INSTALLED_APPS`
    here in order to be able to debug the SQL queries, template context variables,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a project file structure* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Toggling the Debug Toolbar* recipe in [Chapter 10](ch10.html "Chapter 10. Bells
    and Whistles"), *Bells and Whistles*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up STATIC_URL dynamically for Subversion users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you set `STATIC_URL` to a static value, then each time you update a CSS file,
    JavaScript file, or image, you will need to clear the browser cache in order to
    see the changes. There is a trick to work around clearing the browser's cache.
    It is to have the revision number of the version control system shown in `STATIC_URL`.
    Whenever the code is updated, the visitor's browser will force the loading of
    all-new static files.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to put a revision number in `STATIC_URL` for subversion
    users.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that your project is under the subversion version control and you
    have `BASE_DIR` defined in your settings, as shown in the *Defining relative paths
    in the settings* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Then, create the `utils` module in your Django project, and also create a file
    called `misc.py` there.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The procedure to put the revision number in the `STATIC_URL` setting consists
    of the following two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, modify the `settings.py` file and add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `get_media_svn_revision()` function takes the `absolute_path` directory
    as a parameter and calls the `svn` info shell command in that directory to find
    out the current revision. We pass `BASE_DIR` to the function as we are sure that
    it is under version control. Then, the revision is parsed, returned, and included
    in the `STATIC_URL` definition.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting up STATIC_URL dynamically for Git users* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting the Subversion ignore property* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up STATIC_URL dynamically for Git users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't want to refresh the browser cache each time you change your CSS
    and JavaScript files, or while styling images, you need to set `STATIC_URL` dynamically
    with a varying path component. With the dynamically changing URL, whenever the
    code is updated, the visitor's browser will force loading of all-new uncached
    static files. In this recipe, we will set a dynamic path for `STATIC_URL` when
    you use the Git version control system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that your project is under the Git version control and you have `BASE_DIR`
    defined in your settings, as shown in the *Defining relative paths in the settings*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't done it yet, create the `utils` module in your Django project.
    Also, create a `misc.py` file there.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The procedure to put the Git timestamp in the `STATIC_URL` setting consists
    of the following two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following content to the `misc.py` file placed in `utils/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, import the newly created `get_git_changeset()` function in the settings
    and use it for the `STATIC_URL` path, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `get_git_changeset()` function takes the `absolute_path` directory as a
    parameter and calls the `git` show shell command with the parameters to show the
    Unix timestamp of the `HEAD` revision in the directory. As stated in the previous
    recipe, we pass `BASE_DIR` to the function as we are sure that it is under version
    control. The timestamp is parsed; converted to a string consisting of year, month,
    day, hour, minutes, and seconds; returned; and included in the definition of `STATIC_URL`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting up STATIC_URL dynamically for Subversion users* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating the Git ignore file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting UTF-8 as the default encoding for MySQL configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL is the most popular open source database. In this recipe, I will tell
    you how to set UTF-8 as the default encoding for it. Note that if you don't set
    this encoding in the database configuration, you might get into a situation where
    LATIN1 is used by default with your UTF-8 encoded data. This will lead to database
    errors whenever symbols such as € are used. Also, this recipe will save you from
    the difficulties of converting the database data from LATIN1 to UTF-8, especially
    when you have some tables encoded in LATIN1 and others in UTF-8.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that the MySQL database management system and the MySQLdb Python module
    are installed and you are using the MySQL engine in your project's settings.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `/etc/mysql/my.cnf` MySQL configuration file in your favorite editor
    and ensure that the following settings are set in the sections: `[client]`, `[mysql]`,
    and `[mysqld]`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If any of the sections don''t exist, create them in the file. Then, restart
    MySQL in your command-line tool, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, whenever you create a new MySQL database, the databases and all their tables
    will be set in UTF-8 encoding by default.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to set this in all computers where your project is developed or
    published.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Subversion ignore property
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using Subversion for version control, you will need to keep most
    of the projects in the repository; however, some files and directories should
    only stay locally and not be tracked.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that your Django project is under the Subversion version control.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your command-line tool and set your default editor as `nano`, `vi`, `vim`
    or any other that you prefer, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't have a preference, I would recommend using `nano`, which is very
    intuitive and a simple text editor for the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, go to your project directory and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open a temporary file in the editor, where you need to put the following
    file and directory patterns for Subversion to ignore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and exit the editor. For every other Python package in your project,
    you will need to ignore several files and directories too. Just go to a directory
    and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, put this in the temporary file, save it, and close the editor, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Subversion, you need to define the ignore properties for each directory of
    your project. Mainly, we don't want to track the Python-compiled files, for instance,
    `*.pyc`. We also want to ignore `local_settings.py` that is specific for each
    environment, `static` that replicates collected static files from different apps,
    `media` that contains uploaded files and changes together with the database, and
    `tmp` that is temporarily used for file uploads.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you keep all your settings in a `conf` Python package as described in the
    *Configuring settings for development, testing, staging, and production environments*
    recipe, add `settings.py` to the ignored files too.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating and including local settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating the Git ignore file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Git ignore file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using Git—the most popular distributed version control system—ignoring
    some files and folders from version control is much easier than with Subversion.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that your Django project is under the Git version control.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using your favorite text editor, create a `.gitignore` file at the root of
    your Django project and put these files and directories there, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `.gitignore` file specifies the paths that should intentionally be untracked
    by the Git version control system. The `.gitignore` file that we created in this
    recipe will ignore the Python-compiled files, local settings, collected static
    files, temporary directory for uploads, and media directory with the uploaded
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you keep all your settings in a `conf` Python package as described in the
    *Configuring settings for development, testing, staging, and production environments*
    recipe, add `settings.py` to the ignored files too.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting the Subversion ignore property* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting Python-compiled files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run your project for the first time, Python compiles all your `*.py`
    code in bytecode-compiled files, `*.pyc`, which are used later for execution.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, when you change the `*.py` files, `*.pyc` is recompiled; however,
    sometimes when switching branches or moving the directories, you need to clean
    up the compiled files manually.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use your favorite editor and edit or create a `.bash_profile` file in your home
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add this alias at the end of `.bash_profile`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to clean the Python-compiled files, go to your project directory and type
    the following command in the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At first, we create a Unix alias that searches for the `*.pyc` files and deletes
    them in the current directory and its children. The `.bash_profile` file is executed
    when you start a new session in the command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting the Subversion ignore property* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating the Git ignore file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respecting the import order in Python files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create the Python modules, it is good practice to stay consistent with
    the structure in the files. This makes it easier for other developers and yourself
    to read the code. This recipe will show you how to structure your imports.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a virtual environment and a Django project in it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following structure in a Python file that you create. Just after the
    first line that defines UTF-8 as the default Python file encoding, put the imports
    categorized in sections, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have five main categories for the imports, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: System libraries for packages in the default installation of Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party libraries for the additionally installed Python packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django modules for different modules from the Django framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django apps for third-party and local apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current-app modules for relative imports from the current app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When coding in Python and Django, use the official style guide for Python code,
    PEP 8\. You can find it at [https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Handling project dependencies with pip* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Including external dependencies in your project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating app configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing a website with Django, you create one module for the project
    itself and then, multiple Python modules called applications or apps that combine
    the different modular functionalities and usually consist of models, views, forms,
    URL configurations, management commands, migrations, signals, tests, and so on.
    The Django framework has application registry, where all apps and models are collected
    and later used for configuration and introspection. Since Django 1.7, meta information
    about apps can be saved in the `AppConfig` instance for each used app. Let's create
    a sample `magazine` app to take a look at how to use the app configuration there.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Either create your Django app manually or using this command in your virtual
    environment (learn how to use virtual environments in the *Working with a virtual
    environment* recipe), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Add some `NewsArticle` model to `models.py`, create administration for the model
    in `admin.py`, and put `"magazine"` in `INSTALLED_APPS` in the settings. If you
    are not yet familiar with these tasks, study the official Django tutorial at [https://docs.djangoproject.com/en/1.8/intro/tutorial01/](https://docs.djangoproject.com/en/1.8/intro/tutorial01/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create and use the app configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, create the `apps.py` file and put this content in it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, edit the `__init__.py` file of the app and put the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, let''s create a `signals.py` file and add some signal handlers there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you run an HTTP server or invoke a management command, `django.setup()`
    is called. It loads the settings, sets up logging, and initializes app registry.
    The app registry is initialized in three steps, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Django imports the configurations for each item from `INSTALLED_APPS` in the
    settings. These items can point to app names or configuration directly, for example,`"magazine"`
    or `"magazine.apps.NewsAppConfig"`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django tries to import `models.py` from each app in `INSTALLED_APPS` and collect
    all the models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, Django runs the `ready()` method for each app configuration. This method
    is a correct place to register signal handlers, if you have any. The `ready()`
    method is optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our example, the `MagazineAppConfig` class sets the configuration for the
    `magazine` app. The `name` parameter defines the name of the current app. The
    `verbose_name` parameter is used in the Django model administration, where models
    are presented and grouped by apps. The `ready()` method imports and activates
    the signal handlers that, when in DEBUG mode, print in the terminal that a `NewsArticle`
    was saved or deleted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After calling `django.setup()`, you can load the app configurations and models
    from the registry as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about app configuration in the official Django documentation
    at [https://docs.djangoproject.com/en/1.8/ref/applications/](https://docs.djangoproject.com/en/1.8/ref/applications/)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Working with a virtual environment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Defining overwritable app settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Model Administration"), *Model Administration*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining overwritable app settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to define settings for your app that can be then
    overwritten in your project's `settings.py` or `local_settings.py` file. This
    is useful especially for reusable apps.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Either create your Django app manually or using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you just have one or two settings, you can use the following pattern in
    your `models.py` file. If the settings are extensive and you want to have them
    organized better, create an `app_settings.py` file in the app and put the settings
    in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can use the app settings in `models.py`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to overwrite the `STATUS_CHOICES` setting for just one project,
    you simply open `settings.py` and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `getattr(object, attribute_name[, default_value])` Python function tries
    to get the `attribute_name` attribute from object and returns `default_value`
    if it is not found. In this case, different settings are tried in order to be
    taken from the Django project settings module, and if they are not found, the
    default values are assigned.
  prefs: []
  type: TYPE_NORMAL
