- en: Chapter 2. Python Tools in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our tools up and running, we can start to take a deeper look
    into one of the most important features of PTVS: the intelligent code completion
    feature or IntelliSense of Visual Studio.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will dig deeper into the automatic syntax and hierarchic
    analysis tools of Visual Studio that we can use with Python. Essentially, these
    are IntelliSense and navigation tools, which are really helpful for a Python developer
    during the coding process.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we will see how to maximize the capabilities of Visual Studio in
    conjunction with the inner REPL tool for quick and useful code testing and debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Mastering IntelliSense with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As shown in the **Python Environments** tab, Visual Studio analyzes the Python
    code that is available in the current solution and the installed libraries to
    populate the internal database. By doing so, we are able to gain a better understanding
    of the available classes, methods, and field descriptions. This is done in a way
    that can help the developer speed up the coding process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The IntelliSense context-aware code completion feature can be recalled in line
    using the *Ctrl* + Space bar or *Ctrl* + *J* shortcuts. The *Ctrl* + *J* shortcut
    displays the list even when there''s only one possibility. This is what happens
    when you call it in the middle of a command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mastering IntelliSense with Python](img/8687OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: IntelliSense shows all the available methods, classes, and fields available
    in the current code, ordered in alphabetical order. Besides showing them from
    the list of available commands, it also provides you with a quick documentation.
    In our example, for the `range` method, IntelliSense shows the list of its overloaded
    methods and its signature.
  prefs: []
  type: TYPE_NORMAL
- en: If you are aware of the method that you are searching for but want a little
    help with the list of parameters available, just recall the IntelliSense window
    either through the parameter parenthesis when you open it or with the *Ctrl* +
    *Shift* + Space bar shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mastering IntelliSense with Python](img/8687OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this case, IntelliSense will show possible combinations of the parameters
    and a quick documentation for each one, given by the position of the parameter
    in the list as shown in preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: The automatic importing of modules is another interesting functionality that
    helps in speeding up development. It also provides the functionality of automatic
    inclusion when you use a class from another Python file.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the preceding screenshot, if you have a `Paging` class in one of
    your Python files in your project, IntelliSense can recognize it as a class that
    is reachable from your project; also, it will suggest further operations by showing
    a smart tag under the first character of the classname:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mastering IntelliSense with Python](img/8687OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: IntelliSense in action on a classname for importing. The little blue rectangle
    under the classname means there are functions available from Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'When it''s clicked, an action pop up is shown. You can choose the operation
    to execute along with its ability to reference the source/originated file into
    the current code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mastering IntelliSense with Python](img/8687OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on one of the two options, an inclusion statement will be added
    as the header of your code file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mastering IntelliSense with Python](img/8687OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After selecting the "from Paging import Paging" option, the inclusion statement
    is generated at the top of the code file
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the class is visible in your code, Visual Studio is able to inspect the
    referenced class. You will start seeing the class in the IntelliSense window when
    it''s called, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mastering IntelliSense with Python](img/8687OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: IntelliSense showing the methods available in the Paging class
  prefs: []
  type: TYPE_NORMAL
- en: 'IntelliSense can be extended even further. In the following example, when the
    `foo` class is defined with the `bar` method, IntelliSense will fetch the class
    structure to display the helper to be used in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mastering IntelliSense with Python](img/8687OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'IntelliSense is able to provide us with an insight into the structure of the
    class and the available elements of it, but without any documentation. To have
    the documentation shown in the code, we can simply add it to the code of the class
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mastering IntelliSense with Python](img/8687OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: IntelliSense showing the class or method documentation
  prefs: []
  type: TYPE_NORMAL
- en: It's really straightforward and simple. Any element in the Python project is
    automatically analyzed and fed into the reference database of Visual Studio without
    having to rework the code or execute external tools during the coding session.
  prefs: []
  type: TYPE_NORMAL
- en: 'IntelliSense can also help when the code is referenced, giving us an overview
    of all the modules that are available, all the PythonPath-referenced modules,
    the modules you are going to reference in your solution, and the modules that
    are part of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mastering IntelliSense with Python](img/8687OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Furthermore, IntelliSense is useful not only to select the module, but also
    to select the import part:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mastering IntelliSense with Python](img/8687OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using REPL in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore the usage of the standard **read–eval–print
    loop** (**REPL**) tool for Python inside Visual Studio. As mentioned in the introduction,
    PTVS has an enhanced version of REPL. Besides the standard Python commands in
    the REPL version of PTVS—the Interactive Python window—there are some added commands
    and functionalities that can help speed up the debugging process and also enable
    simple testing of your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The enhanced commands are shown by typing `$help` in REPL, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using REPL in Visual Studio](img/8687OS_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We'll go into detail on the most used and interesting commands. The `$cls` command
    cleans up the command line, while the `$reset` command cleans up the engine in
    a way that you can restart with a clean REPL environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most interesting functions are `$load` and `$mod`. The `$load` command
    permits you to execute the content of a given Python file inside REPL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using REPL in Visual Studio](img/8687OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An example of the $load function in the REPL tool
  prefs: []
  type: TYPE_NORMAL
- en: These functions are useful as they provide an on-the-fly view of the execution
    cycle of your code.
  prefs: []
  type: TYPE_NORMAL
- en: The `$mod` command gives you the opportunity to change the scope on which the
    REPL tool is operating.
  prefs: []
  type: TYPE_NORMAL
- en: When REPL starts, it's automatically set on the main module of the opened project,
    `(__main__)`. Typing `$mod` followed by the name of the module allows you to switch
    to another module of the same project, giving access to the module and its content.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using REPL in Visual Studio](img/8687OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, the user interface of the REPL window
    has a combobox at the top, which allows us to interactively switch the scope.
    IntelliSense is also managed in REPL.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can execute every piece of code in our project using the **Send to Interactive**
    command in the context menu under the coding panel (or, use the *Ctrl* + *E* shortcut):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using REPL in Visual Studio](img/8687OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also instruct the debugger to use REPL as the output of the application
    by selecting the **Execute Project in Python Interactive** option from the **DEBUG**
    menu (or by using the *Shift* + *Alt* + *F5* shortcut).
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s also possible to tell the debugger to use REPL as the output of the application
    instead of the standard console output; to do this, just click on the **Execute
    Project in Python Interactive** entry in the **DEBUG** menu or use the *Shift*
    + *Alt* + *F5* shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using REPL in Visual Studio](img/8687OS_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is particularly useful when developing back-office modules in a web application
    for which the debugging and testing of the code is particularly difficult if you
    wish to do this directly in the browser. Using the REPL tool, you can achieve
    a much more productive and quicker process.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating code with ease
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visual Studio provides lots of features to speed up the process of code navigation;
    at the same time, these features allow Visual Studio to have a streamlined coding
    process with a more holistic view of the project. This is particularly useful
    when you need to switch to a module to see the actual implementation or to update
    some parts of it, even when it is located somewhere else in the project. Some
    of the most important features for code navigation are reachable from the context
    menu in the coding panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating code with ease](img/8687OS_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, when the cursor is over a method and the
    contextual menu is opened, the command **Go To Definition** can be found. The
    **Go To Definition** command moves the view to the implemented code of the method
    inside the referenced module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful debugging function is the **Find All References** command (the
    *Shift* + *F12* shortcut). It shows all the points inside the project where the
    method is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating code with ease](img/8687OS_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The result of the execution of the **Find All References** command will be shown
    in a new tool window, **Find Symbol Results**. It shows both the definition of
    the method and the actual references inside the project in which the method is
    actually used.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the code panel provides tools to quickly navigate to any given
    point of the code. Because of the fact that Visual Studio dynamically analyzes
    the code when a Python file is opened in the code editor panel, the IDE automatically
    creates a hierarchal index of it. To navigate the index, use the two comboboxes
    with the navigation bar that are located at the top of the window.
  prefs: []
  type: TYPE_NORMAL
- en: The first one shows all the global reachable elements in the file, while the
    second one shows all the inner elements of the item selected in the first combobox.
    The selection of an element in comboboxes controls the view of the code editor
    and jumps to the referenced code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see how navigation of the comboboxes works,
    showing the hierarchal view by displaying all the inner components of the `html2text`
    class in the second combobox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating code with ease](img/8687OS_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To easily go back and forward while navigating the code, especially when jumping
    between modules, there are two useful buttons in the toolbar that allow you to
    jump back to the starting point. Look for the two arrow-shaped buttons at the
    very left-hand side of the toolbar. The arrow pointing to the left is to move
    backward, which is accessible through the *Ctrl* + *-* shortcut; the arrow pointing
    to the right is used to move forward, which is accessible through the *Shift*
    + *Ctrl* + *-* shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating code with ease](img/8687OS_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The navigation buttons in blue on the left side of the toolbar, are a good way
    to quickly navigate through the code
  prefs: []
  type: TYPE_NORMAL
- en: The editor window provides a way to navigate the files that are already opened
    through the file tabs located at the top of the window. As of the time of writing
    this book, Visual Studio has refined the features available for this. So now,
    even for PTVS, there are many possibilities to do so. You can close the tabs and
    move them around. A single tab can be shown in an independent window or side-by-side
    with another one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating code with ease](img/8687OS_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Visual Studio offers a powerful window management, providing a full set of alignment
    option on every window in the IDE by simply dragging them from the tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Tabs can be pinned to the leftmost position of the tab bar so they can be easily
    reached when many files are opened in the code editor. The tab itself has a contextual
    menu with more commands for the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating code with ease](img/8687OS_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the tab contextual menu, you are able to manage the tabs or directly execute
    the code inside the tabs. The **Copy Full Path** and **Open Containing Folder**
    options are very handy during the coding process.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to navigate through the files of the project through the
    **Solution Explorer** window. Clicking on the file of interest will open the file
    in the code editor window. A single click opens the file in a temporary state,
    which means that the file will be opened in a tab at the right end of the tab
    bar. This is really useful when going through various files without working with
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike a permanent tab, the temporary tab will remain open until you navigate
    to another file through the **Solution Explorer** window. This trims down the
    amount of tabs open in the code editor. As we all know, it will become difficult
    to manage and navigate a huge number of open tabs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-clicking on a file in the **Solution Explorer** window opens it in a
    permanent tab in the code editor, which is indicated with a pin icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating code with ease](img/8687OS_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The "Solution Explorer" window, on the right, is a powerful tool to navigate
    through the files of the projects. Open a file in temporary tab by clicking on
    it. Double-click opens a permanent tab which is indicated with a pin icon
  prefs: []
  type: TYPE_NORMAL
- en: Object Browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way to have a high-level clear view of the project and the elements
    that compose it is to use the **Object Browser** tool. This tool gives you a more
    hierarchal view of the entire project. There are two different ways to access
    the view; let's take a look at both of them.
  prefs: []
  type: TYPE_NORMAL
- en: The first way is to open the full version of the **Object Browser** tool, which
    is accessible from the **VIEW** menu through the main toolbar, or by using the
    *Alt* + *Ctrl* + *J* shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the shortcut will open a new tab in the code editor window, which will
    present us with the following view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object Browser](img/8687OS_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Object Browser** tool is a three-pane window. The top-left pane shows
    a list of all the Python files that compose the project. The top-right pane shows
    a list of elements that compose the selected file (methods, fields, and so on).
    The bottom pane shows the element footprint and related documentation (if available)
    of the selected element.
  prefs: []
  type: TYPE_NORMAL
- en: Any of the elements in the **Object Browser** tool are clickable. A double-click
    will open the code file and jump to the code that implements the clicked element.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to filter the kind of elements to be shown using the **Object
    Browser** settings icon in the toolbar at the top of the window. It is also possible
    to perform an actual search using the top search bar, which will show all the
    references of the searched text in the underlying panels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object Browser](img/8687OS_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Besides using the full **Object Browser** tool, we can traverse the project
    hierarchy through the **Class View** window, which is normally located in the
    same window as that of **Solution Explorer**. Switching to the **Class View**
    tab shows the reduced **Object Browser** tool, which is practically the same but
    without the documentation panel. The **Class View** tab is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Object Browser](img/8687OS_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This tool gives the exact same functionalities as the full-fledged **Object
    Browser** tool, including the search and filter capabilities. Double-clicking
    on the element will jump to the code at the exact point of the implementation
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced a wide range of usage of IntelliSense with Python,
    including working with classes between project files with simple importing and
    referencing capabilities. We also learned how to use REPL for a more streamlined
    debugging and testing process.
  prefs: []
  type: TYPE_NORMAL
- en: Now you are familiarized with the different code navigation functionalities
    that can help you find code references using filtering as well as tabs. Combined
    with the **Object Browser** tool, you are able to view your Python project with
    a high-level view of all methods, classes, fields, elements, related documents,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into the day-to-day coding tools to guide
    you through the whole programming lifecycle.
  prefs: []
  type: TYPE_NORMAL
