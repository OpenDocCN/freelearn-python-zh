["```py\n    from random import randint\n    class RandomBall:\n        def __init__(self, canvas, scrnwidth, scrnheight):\n            self.canvas = canvas\n            self.xpos = randint(10, int(scrnwidth))\n            self.ypos = randint(10, int(scrnheight))\n            self.xvelocity = randint(6,12)\n            self.yvelocity = randint(6,12)\n            self.scrnwidth = scrnwidth\n            self.scrnheight = scrnheight\n            self.radius = randint(40,70)\n            r = lambda: randint(0,255)\n            self.color = '#%02x%02x%02x' % (r(),r(),r())\n    ```", "```py\n    def create_ball(self):\n     x1 = self.xpos-self.radius\n     y1 = self.ypos-self.radius\n     x2 = self.xpos+self.radius\n     y2 = self.ypos+self.radius\n     self.itm = canvas.create_oval\n    (x1, y1, x2, y2,\n     fill=self.color, outline=self.color)\n\n    ```", "```py\n    def move_ball(self):\n     self.xpos += self.xvelocity\n     self.ypos += self.yvelocity\n     #Check if the Direction of ball movement is to be changed\n     if self.ypos>= self.scrnheight - self.radius:\n     self.yvelocity = - self.yvelocity # change direction\n     if self.ypos<= self.radius :\n     self.yvelocity = abs(self.yvelocity)\n     if self.xpos>= self.scrnwidth- self.radius or self.xpos<= self.radius:\n     self.xvelocity = -self.xvelocity # change direction\n     self.canvas.move(self.itm\n    , self.xvelocity, self.yvelocity)\n\n    ```", "```py\n    class ScreenSaver:\n    balls = []\n\n    def __init__(self, num_balls):\n        self.root = Tk()\n        w, h = self.root.winfo_screenwidth(),self.root.winfo_screenheight()\n        self.root.overrideredirect(1)\n        self.root.geometry(\"%dx%d+0+0\" % (w, h))\n        self.root.attributes('-alpha', 0.3)\n        self.root.bind('<Any-KeyPress>', quit)\n        self.root.bind('<Any-Button>', quit)\n        self.root.bind('<Motion>', quit)\n        self.canvas = Canvas(self.root, width=w, height=h)\n        self.canvas.pack()\n        for i in range(num_balls):\n            ball = RandomBall(self.canvas, scrnwidth=w, scrnheight=h)\n            ball.create_ball()\n            self.balls.append(ball)\n        self.run_screen_saver()\n        self.root.mainloop()\n    ```", "```py\n    def run_screensaver():\n     for ball in balls:\n     ball.move_ball()\n     canvas.after(20, runScreenSaver)\n\n    ```", "```py\n         def quit(event):\n         root.destroy()\n\n        ```", "```py\n        if __name__ == \"__main__\":\n         ScreenSaver(18)  ##18 is the number of balls\n\n        ```", "```py\nmyqueue = Queue() #create empty queue\nmyqueue.put(data)# put items into queue\ntask = myqueue.get () #get the next item in the queue\nmyqueue.task_done() # called when a queued task has completed\nmyqueue.join() # called when all tasks in queue get completed\n```", "```py\nimport Queue\nimport threading\nclass Worker(threading.Thread):\n    def __init__(self, queue):\n        threading.Thread.__init__(self)\n        self.queue = queue\n\n    def run(self):\n        while True:\n            task = self.queue.get()\n            self.taskHandler(task)\n\n    def taskHandler(self, job):\n        print'doing task %s'%job\n        self.queue.task_done()\n    def main(tasks):\n        queue = Queue.Queue()\n        for task in tasks:\n            queue.put(task)\n    # create some threads and assign them queue\n        for i in range(6):\n            mythread = Worker(queue)\n            mythread.setDaemon(True)\n            mythread.start()\n        queue.join()\n        print'all tasks completed'\n\n    if __name__ == \"__main__\":\n            tasks = 'A B C D E F'.split()\n            main(tasks)\n```", "```py\n    class GUI(Tk):\n        def __init__(self, queue):\n            Tk.__init__(self)\n            self.queue = queue\n            self.is_game_over = False\n            self.canvas = Canvas(self, width=495, height=305, bg='#FF75A0')\n            self.canvas.pack()\n            self.snake = self.canvas.create_line((0, 0), (0,0), fill='#FFCC4C', width=10)\n            self.food = self.canvas.create_rectangle(0, 0, 0, 0, fill='#FFCC4C', outline='#FFCC4C')\n            self.points_earned = self.canvas.create_text(455, 15, fill='white', text='Score: 0')\n            self.queue_handler()\n    ```", "```py\n    class Food():\n        def __init__(self, queue):\n            self.queue = queue\n            self.generate_food()\n\n        def generate_food(self):\n               x = random.randrange(5, 480, 10)\n                y = random.randrange(5, 295, 10)\n            self.position = x, y\n            self.exppos = x - 5, y - 5, x + 5, y + 5\n            self.queue.put({'food': self.exppos})\n    ```", "```py\n    class Snake(threading.Thread):\n        def __init__(self, gui, queue):\n            threading.Thread.__init__(self)\n            self.gui = gui\n            self.queue = queue\n            self.daemon = True\n            self.points_earned = 0\n            self.snake_points = [(495, 55), (485, 55), (475, 55), (465, 55), (455, 55)]\n            self.food = Food(queue)\n            self.direction = 'Left'\n            self.start()\n\n    def run(self):\n        while not self.gui.is_game_over:\n            self.queue.put({'move':self.snake_points})\n            time.sleep(0.1)\n            self.move()\n    ```", "```py\n    def key_pressed(self, e):\n    \tself.direction = e.keysym\n    ```", "```py\n    def move(self):\n        new_snake_point = self.calculate_new_coordinates()\n        if self.food.position == new_snake_point:\n            self.points_earned += 1\n            self.queue.put({'points_earned':self.points_earned })\n            self.food.generate_food()\n        else:\n            self.snake_points.pop(0)\n            self.check_game_over(new_snake_point)\n            self.snake_points.append(new_snake_point)\n\n    def calculate_new_coordinates(self):\n        last_x, last_y = self.snake_points[-1]\n        if self.direction == 'Up':\n            new_snake_point = last_x, (last_y - 10)\n        elif self.direction == 'Down':\n            new_snake_point = last_x, (last_y + 10)\n        elif self.direction == 'Left':\n            new_snake_point = (last_x - 10), last_y\n        elif self.direction == 'Right':\n            new_snake_point = (last_x + 10), last_y\n        return new_snake_point\n\n    def check_game_over(self, snake_point):\n        x,y = snake_point[0], snake_point[1]\n        if not -5 < x < 505 or not -5 < y < 315 or snake_point in self.snake_points:\n                self.queue.put({'game_over':True})\n    ```", "```py\n    def queue_handler(self):\n        try:\n            while True:\n                task = self.queue.get(block=False)\n                if task.has_key('game_over'):\n                    self.game_over()\n                elif task.has_key('move'):\n                    points = [x for point in task['move'] for x in point]\n                    self.canvas.coords(self.snake, *points)\n                elif task.has_key('food'):\n                    self.canvas.coords(self.food, *task['food'])\n                elif task.has_key('points_earned'):\n                 self.canvas.itemconfigure(self.points_earned, text='Score:{}'.format(task['points_earned']))\n               self.queue.task_done()\n        except Queue.Empty:\n            if not self.is_game_over:\n                self.canvas.after(100, self.queue_handler)\n    ```", "```py\n    def game_over(self):\n        self.is_game_over = True\n        self.canvas.create_text(200, 150, fill='white', text='Game Over') \n        quitbtn = Button(self, text='Quit', command =self.destroy)\n     self.canvas.create_window(200, 180, anchor='nw', window=quitbtn)\n\n    ```", "```py\n    def main():\n        queue = Queue.Queue()\n        gui     = GUI(queue)\n        snake = Snake(gui, queue)\n        gui.bind('<Key-Left>', snake.key_pressed)\n        gui.bind('<Key-Right>', snake.key_pressed)\n        gui.bind('<Key-Up>', snake.key_pressed)\n        gui.bind('<Key-Down>', snake.key_pressed)\n        gui.mainloop()\n\n    if __name__ == '__main__':\n        main()\n    ```", "```py\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # create a #socket\nsocket.gethostbyname( host ) # resolving host IP from host name\ns.connect((ip , port)) #Connect to remote server\ns.sendall(message)\ns.recv(message_size)\n```", "```py\nimport urllib\ndata =  urllib.urlopen('http://www.packtpub.com')\nprint data.read()\ndata.close()\n```", "```py\n    def main():\n        root=Tk()\n        WeatherReporter(root)\n        root.mainloop()\n\n    if __name__ == '__main__':\n        main()\n    ```", "```py\n    class WeatherReporter:\n        def __init__(self, root):\n            self.root = root\n            self.top_frame()\n            self.display_frame()\n\n        def top_frame(self):\n            topfrm = Frame(self.root)\n            topfrm.grid(row=1, sticky='w')\n            Label(topfrm, text='Enter Location').grid(row=1, column=2, sticky='w')\n            self.enteredlocation = StringVar()\n            Entry(topfrm, textvariable=self.enteredlocation).grid(row=1, column=2, sticky='w')\n            ttk.Button(topfrm, text='Show Weather Info', command=self.show_weather_button_clicked).grid(row=1, column=3, sticky='w')\n\n        def display_frame(self):\n            displayfrm = Frame(self.root)\n            displayfrm.grid(row=2, sticky='ew', columnspan=5)\n            self.canvas = Canvas(displayfrm, height='410',width='300', background='black', borderwidth=5)\n            self.canvas.create_rectangle(5, 5, 305, 415,fill='#F6AF06')\n            self.canvas.grid(row=2, sticky='w', columnspan=5)\n    ```", "```py\n    {\"coord\":{\"lon\":-0.12574,\"lat\":51.50853},\"sys\":{\"country\":\"GB\",\"sunrise\":1377147503,\"sunset\":1377198481},\"weather\":[{\"id\":500,\"main\":\"Rain\",\"description\":\"light rain\",\"icon\":\"10d\"}],\"base\":\"gdps stations\",\"main\":{\"temp\":294.2,\"pressure\":1020,\"humidity\":88,\"temp_min\":292.04,\"temp_max\":296.48},\"wind\":{\"speed\":1,\"deg\":0},\"rain\":{\"1h\":0.25},\"clouds\":{\"all\":40},\"dt\":1377178327,\"id\":2643743,\"name\":\"London\",\"cod\":200}\n    ```", "```py\n    def get_weather_data(self):\n        try:\n            apiurl = 'http://api.openweathermap.org/data\n            /2.5/weather?q=%s'%self.enteredlocation.get()\n            data =  urllib.urlopen(apiurl)\n            jdata= data.read()\n            returnjdata\n        except IOError as e:\n            tkMessageBox.showerror('Unable to connect', 'Unable toconnect %s'%e) \n    ```", "```py\n    def json_to_dict(self, jdata):\n        mydecoder = json.JSONDecoder()\n        decodedjdata = mydecoder.decode(jdata)\n        flatteneddict = {}\n        for key, value in decodedjdata.items():\n            if key == 'weather':\n                forke,va in value[0].items():\n                    flatteneddict[str(ke)] = str(va).upper() \n                    continue\n            try:\n                fork,v in value.items():\n                flatteneddict[str(k)] = str(v).upper()\n            except:\n                flatteneddict[str(key)] = str(value).upper()\n            returnflatteneddict\n    ```", "```py\n    def show_weather_button_clicked(self):\n        if not self.enteredlocation.get():\n            return\n        self.canvas.delete(ALL)\n        self.canvas.create_rectangle( 5, 5,305,415,fill='#F6AF06')\n        data = self.get_weather_data()\n        data =self.json_to_dict(data)\n        self.display_final(data)\n    ```", "```py\n    sqlite3 phonebook.db\n\n    ```", "```py\n    SQLite version 3.7.17 2013-05-20 00:56:22\n    Enter \".help\" for instructions\n    Enter SQL statements terminated with a \";\"\n    sqlite>\n\n    ```", "```py\n    sqlite> .tables\n\n    ```", "```py\n    sqlite> .exit\n\n    ```", "```py\n    sqlite3 phonebook.db\n\n    ```", "```py\n    sqlite> CREATE TABLE contacts\n    (\n    contactid INTEGER PRIMARY KEY AUTOINCREMENT,\n    name STRINGNOT NULL,\n    contactnumber INTEGER NOT NULL\n    );\n\n    ```", "```py\n    sqlite>.table\n\n    ```", "```py\n    sqlite>.table\n    contacts\n\n    ```", "```py\n    class PhoneBook:\n    def __init__(self, master):\n        # all widgets created here\n    ```", "```py\n    def create_record(self):\n        name = self.namefield.get()\n        num = self.numfield.get()\n        if name == \"\":\n            self.msg[\"text\"] = \"Please Enter name\"\n            return\n        if num == \"\":\n            self.msg[\"text\"] = \"Please Enter Number\"\n            return\n        conn = sqlite3.connect('phonebook.db')\n        c = conn.cursor()\n        c.execute(\"INSERT INTO contacts VALUES(NULL,?, ?)\", (name,num))\n        conn.commit()\n        c.close()\n        self.namefield.delete(0, END)\n        self.numfield.delete(0, END)\n        self.msg[\"text\"] = \"Phone Record of %s Added\" %name\n    ```", "```py\n    def view_records(self):\n        x = self.tree.get_children()\n        for item in x: \n            self.tree.delete(item)\n        conn = sqlite3.connect('phonebook.db')\n        c = conn.cursor()\n        list = c.execute(\"SELECT * FROM contacts ORDER BY namedesc\")\n        for row in list:\n            self.tree.insert(\"\",0,text=row[1],values=row[2])\n        c.close()\n    ```", "```py\n    def delete_record(self):\n        self.msg[\"text\"] = \"\"\n        conn = sqlite3.connect('phonebook.db')\n          c = conn.cursor()\n        name = self.tree.item(self.tree.selection())['text']\n     query = \"DELETE FROM contacts WHERE name = '%s';\" %name\n     c.execute(query)\n        conn.commit()\n        c.close()\n        self.msg[\"text\"] = \"Phone Record for %s Deleted\" %name\n    ```", "```py\n    def update_record(self, newphone,oldphone, name):\n        conn = sqlite3.connect('phonebook.db')\n        c = conn.cursor()\n        c.execute(\"UPDATE contacts SET contactnumber=? WHEREcontactnumber=? AND name=?\", (newphone, oldphone, name)) \n        conn.commit()\n        c.close()\n        self.tl.destroy()\n        self.msg[\"text\"] = \"Phone Number of %s modified\" %name\n    ```", "```py\n    import Tkinter\n    root = Tkinter.Tk()\n    def prop(n): \n        return 360.0 * n / 1000\n\n    Tkinter.Label(root, text='Pie Chart').pack()\n    c = Tkinter.Canvas(width=154, height=154)\n    c.pack()\n    c.create_arc((2,2,152,152), fill=\"#FAF402\", outline=\"#FAF402\", start=prop(0), extent = prop(200))\n    c.create_arc((2,2,152,152), fill=\"#00AC36\", outline=\"#00AC36\", start=prop(200), extent = prop(400))\n    c.create_arc((2,2,152,152), fill=\"#7A0871\", outline=\"#7A0871\", start=prop(600), extent = prop(50))\n    c.create_arc((2,2,152,152), fill=\"#E00022\", outline=\"#E00022\", start=prop(650), extent = prop(200))\n    c.create_arc((2,2,152,152), fill=\"#294994\", outline=\"#294994\",  start=prop(850), extent = prop(150))\n    root.mainloop()\n    ```", "```py\n    import Tkinter\n    import random\n    root = Tkinter.Tk()\n    c = Tkinter.Canvas(root, width=350, height=280, bg='white')\n    c.grid()\n    #create x-axis\n    c.create_line(50, 250, 300, 250, width=3)\n    for i in range(12):\n        x = 50 + (i * 20)\n    c.create_text(x, 255, anchor='n', text='%d'% (20*i))\n    # create y-axis\n    c.create_line(50, 250, 50, 20, width=3)\n    for i in range(12):\n        y = 250 - (i * 20)\n    c.create_text(45, y, anchor='e', text='%d'% (20*i))\n    #create scatter plots from random x-y values\n    for i in range(35):\n        x,y = random.randint(100,210), random.randint(50,250)\n     c.create_oval(x-3, y-3, x+3, y+3, width=1, fill='red')\n    root.mainloop()\n    ```", "```py\n    import Tkinter\n    import random\n    root = Tkinter.Tk()\n    cwidth = 250\n    cheight = 220\n    barWidth = 20\n    canv = Tkinter.Canvas(root, width=cwidth, height=cheight, bg= 'white')\n    canv.pack()\n\n    plotdata= [random.randint(0,200) for r in xrange(12)]\n\n    for x, y in enumerate(plotdata):\n        x1 = x  + x * barWidth\n        y1 = cheight - y \n        x2 = x  + x * barWidth + barWidth    \n        y2 = cheight\n        canv.create_rectangle(x1, y1, x2, y2, fill=\"blue\")\n        canv.create_text(x1+3, y1, text=str(y), anchor='sw')\n\n    root.mainloop()\n    ```", "```py\n    import Tkinter as Tk\n    from numpy import arange, sin, pi\n    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg\n    from matplotlib.figure import Figure\n    root = Tk.Tk()\n    #creating the graph\n    f = Figure(figsize=(5,4), dpi=100)\n    a = f.add_subplot(111)\n    t = arange(-1.0,1.0,0.001)\n    s = t*sin(1/t)\n    a.plot(t,s)\n    # embedding matplotlib figure 'f' on a tk.DrawingArea\n    canvas = FigureCanvasTkAgg(f, master=root)\n    canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)\n    #creating toolbar\n    toolbar = NavigationToolbar2TkAgg( canvas, root )\n    toolbar.update()\n    root.mainloop()\n    ```"]