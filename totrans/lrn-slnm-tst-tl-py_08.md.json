["```py\npip install ddt\n\n```", "```py\nimport unittest\nfrom ddt import ddt, data, unpack\nfrom selenium import webdriver\n\n@ddt\nclass SearchDDT(unittest.TestCase):\n    def setUp(self):\n        # create a new Firefox session\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n        # navigate to the application home page\n        self.driver.get(\"http://demo.magentocommerce.com/\")\n\n    # specify test data using @data decorator\n    @data((\"phones\", 2), (\"music\", 5))\n    @unpack\n    def test_search(self, search_value, expected_count):\n        # get the search textbox\n        self.search_field = self.driver.find_element_by_name(\"q\")\n        self.search_field.clear()\n\n        # enter search keyword and submit.\n        # use search_value argument to pass data\n        self.search_field.send_keys(search_value)\n        self.search_field.submit()\n\n        # get all the anchor elements which have\n        # product names displayed\n        # currently on result page using\n        # find_elements_by_xpath method\n        products = self.driver.find_elements_by_xpath(\"//h2[@class='product-name']/a\")\n\n        # check count of products shown in results\n        self.assertEqual(expected_count, len(products))\n\n    def tearDown(self):\n        # close the browser window\n        self.driver.quit()\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n```", "```py\n# specify test data using @data decorator\n    @data((\"phones\", 2), (\"music\", 5))\n    @unpack\n    def test_search(self, search_value, expected_count):\n```", "```py\nimport csv, unittest\nfrom ddt import ddt, data, unpack\nfrom selenium import webdriver\n\ndef get_data(file_name):\n    # create an empty list to store rows\n    rows = []\n    # open the CSV file\n    data_file = open(file_name, \"rb\")\n    # create a CSV Reader from CSV file\n    reader = csv.reader(data_file)\n    # skip the headers\n    next(reader, None)\n    # add rows from reader to list\n    for row in reader:\n        rows.append(row)\n    return rows\n\n@ddt\nclass SearchCsvDDT(unittest.TestCase):\n    def setUp(self):\n        # create a new Firefox session\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n        # navigate to the application home page\n        self.driver.get(\"http://demo.magentocommerce.com/\")\n\n    # get the data from specified csv file by\n    # calling the get_data function\n    @data(*get_data(\"testdata.csv\"))\n    @unpack\n    def test_search(self, search_value, expected_count):\n            self.search_field = self.driver.find_element_by_name(\"q\")\n            self.search_field.clear()\n\n            # enter search keyword and submit.\n            self.search_field.send_keys(search_value)\n            self.search_field.submit()\n\n            # get all the anchor elements which have\n            # product names displayed\n            # currently on result page using\n            # find_elements_by_xpath method\n            products = self.driver.find_elements_by_xpath(\"//h2[@class='product-name']/a\")\n            expected_count = int(expected_count)\n            if expected_count > 0:\n                # check count of products shown in results\n                self.assertEqual(expected_count, len(products))\n            else:\n                msg = self.driver.find_element_by_class_name\n                  (\"note-msg\")\n                self.assertEqual(\"Your search returns no results.\", msg.text)\n\n    def tearDown(self):\n        # close the browser window\n        self.driver.quit()\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\npip install xlrd\n\n```", "```py\nimport xlrd, unittest\nfrom ddt import ddt, data, unpack\nfrom selenium import webdriver\n\ndef get_data(file_name):\n    # create an empty list to store rows\n    rows = []\n    # open the specified Excel spreadsheet as workbook\n    book = xlrd.open_workbook(file_name)\n    # get the first sheet\n    sheet = book.sheet_by_index(0)\n    # iterate through the sheet and get data from rows in list\n    for row_idx in range(1, sheet.nrows):\n        rows.append(list(sheet.row_values(row_idx, 0, sheet.ncols)))\n    return rows\n\n@ddt\nclass SearchExcelDDT(unittest.TestCase):\n    def setUp(self):\n        # create a new Firefox session\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n        # navigate to the application home page\n        self.driver.get(\"http://demo.magentocommerce.com/\")\n\n    # get the data from specified Excel spreadsheet\n    # by calling the get_data function\n    @data(*get_data(\"TestData.xlsx\"))\n    @unpack\n    def test_search(self, search_value, expected_count):\n            self.search_field = self.driver.find_element_by_name(\"q\")\n            self.search_field.clear()\n\n            # enter search keyword and submit.\n            self.search_field.send_keys(search_value)\n            self.search_field.submit()\n\n            # get all the anchor elements which have\n            # product names displayed\n            # currently on result page using\n            # find_elements_by_xpath method\n            products = self.driver.find_elements_by_xpath(\"//h2[@class='product-name']/a\")\n            if expected_count > 0:\n                # check count of products shown in results\n                self.assertEqual(expected_count, len(products))\n            else:\n                msg = self.driver.find_element_by_class_name(\"note-msg\")\n                self.assertEqual(\"Your search returns no results.\", msg.text)\n\n    def tearDown(self):\n        # close the browser window\n        self.driver.quit()\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\nimport unittest\nfrom selenium import webdriver\n\nclass BaseTestCase(unittest.TestCase):\n    def setUp(self):\n        # create a new Firefox session\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n        # navigate to the application home page\n        self.driver.get('http://demo.magentocommerce.com/')\n\n    def tearDown(self):\n        # close the browser window\n        self.driver.quit()\n```", "```py\nfrom abc import abstractmethod\nclass BasePage(object):\n    \"\"\" All page objects inherit from this \"\"\"\n\n    def __init__(self, driver):\n        self._validate_page(driver)\n        self.driver = driver\n\n    @abstractmethod\n    def _validate_page(self, driver):\n        return\n\n    \"\"\" Regions define functionality available throughall page objects \"\"\"\n    @property\n    def search(self):\n        from search import SearchRegion\n        return SearchRegion(self.driver)\n\nclass InvalidPageException(Exception):\n    \"\"\" Throw this exception when you don't find the correct page \"\"\"\n    pass\n```", "```py\n    from base import BasePage\n    from base import InvalidPageException\n\n    class HomePage(BasePage):\n\n        _home_page_slideshow_locator = 'div.slideshow-container'\n\n        def __init__(self, driver):\n            super(HomePage, self).__init__(driver)\n\n        def _validate_page(self, driver):\n            try:\n                driver.find_element_by_class_name(self._home_page_slideshow_locator)\n            except:\n                raise InvalidPageException(\"Home Page not loaded\")\n    ```", "```py\n    _home_page_slideshow_locator = 'div.slideshow-container'\n    ```", "```py\n    from base import BasePage\n    from base import InvalidPageException\n    from product import ProductPage\n\n    class SearchRegion(BasePage):\n        _search_box_locator = 'q'\n\n        def __init__(self, driver):\n            super(SearchRegion, self).__init__(driver)\n\n        def searchFor(self, term):\n            self.search_field = self.driver.find_element_by_name(self._search_box_locator)\n            self.search_field.clear()\n            self.search_field.send_keys(term)\n            self.search_field.submit()\n            return SearchResults(self.driver)\n\n    class SearchResults(BasePage):\n        _product_list_locator   = 'ul.products-grid > li'\n        _product_name_locator   = 'h2.product-name a'\n        _product_image_link     = 'a.product-image'\n        _page_title_locator     = 'div.page-title'\n\n        _products_count = 0\n        _products = {}\n\n        def __init__(self, driver):\n            super(SearchResults, self).__init__(driver)\n            results = self.driver.find_elements_by_css_selector(self._product_list_locator)\n            for product in results:\n                name = product.find_element_by_css_selector(self._product_name_locator).text\n                self._products[name] = product.find_element_by_css_selector(self._product_image_link)\n\n        def _validate_page(self, driver):\n            if 'Search results for' not in driver.title:\n                raise InvalidPageException('Search results not loaded')\n\n        @property\n        def product_count(self):\n            return len(self._products)\n\n        def get_products(self):\n            return self._products\n\n        def open_product_page(self, product_name):\n            self._products[product_name].click()\n            return ProductPage(self.driver)\n    ```", "```py\n    from base import BasePage\n    from base import InvalidPageException\n\n    class ProductPage(BasePage):\n        _product_view_locator           = 'div.product-view'\n        _product_name_locator           = 'div.product-name span'\n        _product_description_locator    = 'div.tab-content div.std'\n        _product_stock_status_locator   = 'p.availability span.value'\n        _product_price_locator          = 'span.price'\n\n        def __init__(self, driver):\n            super(ProductPage, self).__init__(driver)\n\n        @property\n        def name(self):\n            return self.driver.\\\n                find_element_by_css_selector(self._product_name_locator)\\\n                .text.strip()\n\n        @property\n        def description(self):\n            return self.driver.\\\n                find_element_by_css_selector(self._product_description_locator)\\\n                .text.strip()\n\n        @property\n        def stock_status(self):\n            return self.driver.\\\n                find_element_by_css_selector(self._product_stock_status_locator)\\\n                .text.strip()\n\n        @property\n        def price(self):\n            return self.driver.\\\n                find_element_by_css_selector(self._product_price_locator)\\\n                .text.strip()\n\n        def _validate_page(self, driver):\n            try:\n                driver.find_element_by_css_selector(self._product_view_locator)\n            except:\n                raise InvalidPageException('Product page not loaded')\n    ```", "```py\nimport unittest\nfrom homepage import HomePage\nfrom BaseTestCase import BaseTestCase\n\nclass SearchProductTest(BaseTestCase):\n    def testSearchForProduct(self):\n        homepage = HomePage(self.driver)\n        search_results = homepage.search.searchFor('earphones')\n        self.assertEqual(2, search_results.product_count)\n        product = search_results.open_product_page('MADISON EARBUDS')\n        self.assertEqual('MADISON EARBUDS', product.name)\n        self.assertEqual('$35.00', product.price)\n        self.assertEqual('IN STOCK', product.stock_status)\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n```"]