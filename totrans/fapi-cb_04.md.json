["```py\n    $ pip install fastapi[all]\n    ```", "```py\npip install –r requirements.txt\n```", "```py\n$ pip install passlib[bcrypt]\n```", "```py\n$ pip install sqlalchemy>=2.0.0\n```", "```py\nfrom passlib.context import CryptContext\npwd_context = CryptContext(\n    schemes=[\"bcrypt\"], deprecated=\"auto\"\n)\n```", "```py\nfrom sqlalchemy.exc import IntegrityError\nfrom sqlalchemy.orm import Session\nfrom models import User\ndef add_user(\n    session: Session,\n    username: str,\n    password: str,\n    email: str,\n) -> User | None:\n    hashed_password = pwd_context.hash(password)\n    db_user = User(\n        username=username,\n        email=email,\n        hashed_password=hashed_password,\n    )\n    session.add(db_user)\n    try:\n        session.commit()\n        session.refresh(db_user)\n    except IntegrityError:\n        session.rollback()\n        return\n    return db_user\n```", "```py\nfrom contextlib import (\n    asynccontextmanager,\n)\nfrom fastapi import  FastAPI\nfrom db_connection import get_engine\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    Base.metadata.create_all(bind=get_engine())\n    yield\napp = FastAPI(\n    title=\"Saas application\", lifespan=lifespan\n)\n```", "```py\nfrom typing import Annotated\nfrom sqlalchemy.orm import Session\nfrom fastapi import Depends, HTTPException, status\nfrom models import Base\nfrom db_connection import get_session\nfrom operations import add_user\n@app.post(\n    \"/register/user\",\n    status_code=status.HTTP_201_CREATED,\n    response_model=ResponseCreateUser,\n    responses={\n        status.HTTP_409_CONFLICT: {\n            \"description\": \"The user already exists\"\n        }\n    },\n)\ndef register(\n    user: UserCreateBody,\n    session: Session = Depends(get_session),\n) -> dict[str, UserCreateResponse]:\n    user = add_user(\n        session=session, **user.model_dump()\n    )\n    if not user:\n        raise HTTPException(\n            status.HTTP_409_CONFLICT,\n            \"username or email already exists\",\n        )\n    user_response = UserCreateResponse(\n        username=user.username, email=user.email\n    )\n    return {\n        \"message\": \"user created\",\n        \"user\": user_response,\n    }\n```", "```py\n$ uvicorn main:app\n```", "```py\n$ pip install python-jose[cryptography]\n```", "```py\n    from sqlalchemy.orm import Session\n    from models import User\n    from email_validator import (\n        validate_email,\n        EmailNotValidError,\n    )\n    from operations import pwd_context\n    def authenticate_user(\n        session: Session,\n        username_or_email: str,\n        password: str,\n    ) -> User | None:\n        try:\n            validate_email(username_or_email)\n            query_filter = User.email\n        except EmailNotValidError:\n            query_filter = User.username\n        user = (\n            session.query(User)\n            .filter(query_filter == username_or_email)\n            .first()\n        )\n        if not user or not pwd_context.verify(\n            password, user.hashed_password\n        ):\n            return\n        return user\n    ```", "```py\n    SECRET_KEY = \"a_very_secret_key\"\n    ALGORITHM = \"HS256\"\n    ACCESS_TOKEN_EXPIRE_MINUTES = 30\n    ```", "```py\n    from jose import jwt\n    def create_access_token(data: dict) -> str:\n        to_encode = data.copy()\n        expire = datetime.utcnow() + timedelta(\n            minutes=ACCESS_TOKEN_EXPIRE_MINUTES\n        )\n        to_encode.update({\"exp\": expire})\n        encoded_jwt = jwt.encode(\n            to_encode, SECRET_KEY, algorithm=ALGORITHM\n        )\n        return encoded_jwt\n    ```", "```py\n    from jose import JWTError\n    def decode_access_token(\n        token: str, session: Session\n    ) -> User | None:\n        try:\n            payload = jwt.decode(\n                token, SECRET_KEY, algorithms=[ALGORITHM]\n            )\n            username: str = payload.get(\"sub\")\n        except JWTError:\n            return\n        if not username:\n            return\n        user = get_user(session, username)\n        return user\n    ```", "```py\n    from fastapi import (\n        APIRouter,\n        Depends,\n        HTTPException,\n        status,\n    )\n    from fastapi.security import (\n        OAuth2PasswordRequestForm,\n    )\n    router = APIRouter()\n    class Token(BaseModel):\n        access_token: str\n        token_type: str\n    @router.post(\n        \"/token\",\n        response_model=Token,\n        responses=..., # document the responses\n    )\n    def get_user_access_token(\n        form_data: OAuth2PasswordRequestForm = Depends(),\n        session: Session = Depends(get_session),\n    ):\n        user = authenticate_user(\n            session,\n            form_data.username,\n            form_data.password\n        )\n        if not user:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Incorrect username or password\",\n            )\n        access_token = create_access_token(\n            data={\"sub\": user.username}\n        )\n        return {\n            \"access_token\": access_token,\n            \"token_type\": \"bearer\",\n        }\n    ```", "```py\n    from fastapi.security import (\n        OAuth2PasswordBearer,\n    )\n    oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n    ```", "```py\n    @router.get(\n        \"/users/me\",\n        responses=..., # document responses\n    )\n    def read_user_me(\n        token: str = Depends(oauth2_scheme),\n        session: Session = Depends(get_session),\n    ):\n        user = decode_access_token(token, session)\n        if not user:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"User not authorized\",\n            )\n        return {\n            \"description\": f\"{user.username} authorized\",\n        }\n    ```", "```py\n    import security\n    # rest of the code\n    app.include_router(security.router)\n    ```", "```py\n$ uvicorn main:app\n```", "```py\n    from enum import Enum\n    class Role(str, Enum):\n        basic = \"basic\"\n        premium = \"premium\"\n    class User(Base):\n        __tablename__ = \"users\"\n    # existing fields\n        role: Mapped[Role] = mapped_column(\n            default=Role.basic\n        )\n    ```", "```py\n    from models import Role\n    def add_user(\n        session: Session,\n        username: str,\n        password: str,\n        email: str,\n        role: Role = Role.basic,\n    ) -> User | None:\n        hashed_password = pwd_context.hash(password)\n        db_user = User(\n            username=username,\n            email=email,\n            hashed_password=hashed_password,\n            role=role,\n        )\n        # rest of the function\n    ```", "```py\n    @router.post(\n        \"/register/premium-user\",\n        status_code=status.HTTP_201_CREATED,\n        response_model=ResponseCreateUser,\n        responses=..., # document responses\n    )\n    def register_premium_user(\n        user: UserCreateBody,\n        session: Session = Depends(get_session),\n    ):\n        user = add_user(\n            session=session,\n             *user.model_dump(),\n            role=Role.premium,\n        )\n        if not user:\n            raise HTTPException(\n                status.HTTP_409_CONFLICT,\n                \"username or email already exists\",\n            )\n        user_response = UserCreate(\n            username=user.username,\n            email=user.email,\n        )\n        return {\n            \"message\": \"user created\",\n            \"user\": user_response,\n        }\n    similar to the ones used in other modules.\n    ```", "```py\n    import security\n    import premium_access\n    # rest of the code\n    app.include_router(security.router)\n    app.include_router(premium_access.router)\n    ```", "```py\n    from typing import Annotated\n    from fastapi import (\n        APIRouter,\n        Depends,\n        HTTPException,\n        Status\n    )\n    from sqlalchemy.orm import Session\n    from db_connection import get_session\n    from models import Role\n    from security import (\n        decode_access_token,\n        oauth2_scheme\n    )\n    ```", "```py\n    class UserCreateResquestWithRole(BaseModel):\n        username: str\n        email: EmailStr\n        role: Role\n    ```", "```py\n    def get_current_user(\n        token: str = Depends(oauth2_scheme),\n        session: Session = Depends(get_session),\n    ) -> UserCreateRequestWithRole:\n        user = decode_access_token(token, session)\n        if not user:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"User not authorized\",\n            )\n        return UserCreateRequestWithRole(\n            username=user.username,\n            email=user.email,\n            role=user.role,\n        )\n    ```", "```py\n    def get_premium_user(\n        current_user: Annotated[\n            get_current_user, Depends()\n        ]\n    ):\n        if current_user.role != Role.premium:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"User not authorized\",\n            )\n        return current_user\n    ```", "```py\n    router = APIRouter()\n    @router.get(\n        \"/welcome/all-users\",\n        responses=..., # document responses\n    )\n    def all_users_can_access(\n        user: Annotated[get_current_user, Depends()]\n    ):\n        return {\n            f\"Hello {user.username}, \"\n            \"welcome to your space\"\n        }\n    ```", "```py\n    @router.get(\n        \"/welcome/premium-user\",\n        responses={\n            status.HTTP_401_UNAUTHORIZED: {\n                \"description\": \"User not authorized\"\n            }\n        },\n    )\n    def only_premium_users_can_access(\n        user: UserCreateResponseWithRole = Depends(\n            get_premium_user\n        ),\n    ):\n        return {\n            f\"Hello {user.username}, \"\n            \"Welcome to your premium space\"\n        }\n    ```", "```py\n    import security\n    import premium_access\n    import rbac\n    # rest of the module\n    app.include_router(premium_access.router)\n    app.include_router(rbac.router)\n    # rest of the module\n    ```", "```py\n$ uvicorn main:app\n```", "```py\n$ pip install httpx\n```", "```py\n    GITHUB_CLIENT_ID = \"your_github_client_id\"\n    GITHUB_CLIENT_SECRET = (\n        \"your_github_client_secret\"\n    )\n    GITHUB_REDIRECT_URI = (\n        \"http://localhost:8000/github/auth/token\"\n    )\n    GITHUB_AUTHORIZATION_URL = (\n        \"https://github.com/login/oauth/authorize\"\n    )\n    ```", "```py\n    import httpx\n    from fastapi import Depends, HTTPException\n    from fastapi.security import OAuth2\n    from sqlalchemy.orm import Session\n    from models import User, get_session\n    from operations import get_user\n    def resolve_github_token(\n        access_token: str = Depends(OAuth2()),\n        session: Session = Depends(get_session),\n    ) -> User:\n        user_response = httpx.get(\n            \"https://api.github.com/user\",\n            headers={\"Authorization\": access_token},\n        ).json()\n        username = user_response.get(\"login\", \" \")\n        user = get_user(session, username)\n        if not user:\n            email = user_response.get(\"email\", \" \")\n            user = get_user(session, email)\n        # Process user_response\n        # to log the user in or create a new account\n        if not user:\n            raise HTTPException(\n                status_code=403, detail=\"Token not valid\"\n            )\n        return user\n    ```", "```py\n    import httpx\n    from fastapi import APIRouter, HTTPException, status\n    from security import Token\n    from third_party_login import (\n        GITHUB_AUTHORIZATION_URL,\n        GITHUB_CLIENT_ID,\n        GITHUB_CLIENT_SECRET,\n        GITHUB_REDIRECT_URI,\n    )\n    router = APIRouter()\n    @router.get(\"/auth/url\")\n    def github_login():\n        return {\n            \"auth_url\": GITHUB_AUTHORIZATION_URL\n            + f\"?client_id={GITHUB_CLIENT_ID}\"\n        }\n    ```", "```py\n    import github_login\n    # rest of the module\n    app.include_router(github_login.router)\n    # rest of the module\n    ```", "```py\n    @router.get(\n        \"/github/auth/token\",\n        response_model=Token,\n        responses=..., # add responses documentation\n    )\n    async def github_callback(code: str):\n        token_response = httpx.post(\n            \"https://github.com/login/oauth/access_token\",\n            data={\n                \"client_id\": GITHUB_CLIENT_ID,\n                \"client_secret\": GITHUB_CLIENT_SECRET,\n                \"code\": code,\n                \"redirect_uri\": GITHUB_REDIRECT_URI,\n            },\n            headers={\"Accept\": \"application/json\"},\n        ).json()\n        access_token = token_response.get(\"access_token\")\n        if not access_token:\n            raise HTTPException(\n                status_code=401,\n                detail=\"User not registered\",\n            )\n        token_type = token_response.get(\n            \"token_type\", \"bearer\"\n        )\n        return {\n            \"access_token\": access_token,\n            \"token_type\": token_type,\n        }\n    ```", "```py\n    {\n        \"access_token\": \"gho_EnHbcmHdCHD1Bf2QzJ2B6gyt\",\n        \"token_type\": \"bearer\"\n    }\n    ```", "```py\n    from third_party_login import resolve_github_token\n    @router.get(\n        \"/home\",\n        responses=…, # add responses documentation\n    )\n    def homepage(\n        user: UserCreateResponse = Depends(\n            resolve_github_token\n        ),\n    ):\n        return {\n            \"message\" : f\"logged in {user.username} !\"\n        }\n    ```", "```py\n$ curl --location 'http://localhost:8000/home' \\\n--header 'Authorization: Bearer <github-token>'\n```", "```py\n{\"message\":\"logged in <your-username> !\"}\n```", "```py\n$ pip install pyotp\n```", "```py\nclass User(Base):\n    # existing fields\n    totp_secret: Mapped[str] = mapped_column(\n        nullable=True\n)\n```", "```py\n    import pyotp\n    def generate_totp_secret():\n        return pyotp.random_base32()\n    def generate_totp_uri(secret, user_email):\n        return pyotp.totp.TOTP(secret).provisioning_uri(\n            name=user_email, issuer_name=\"YourAppName\"\n        )\n    ```", "```py\n    from fastapi import (\n        APIRouter,\n        Depends,\n        HTTPException,\n        status,\n    )\n    from sqlalchemy.orm import Session\n    from db_connection import get_session\n    from operations import get_user\n    from rbac import get_current_user\n    from responses import UserCreateResponse\n    router = APIRouter()\n    @router.post(\"/user/enable-mfa\")\n    def enable_mfa(\n        user: UserCreateResponse = Depends(\n            get_current_user\n        ),\n        db_session: Session = Depends(get_session),\n    ):\n        secret = generate_totp_secret()\n        db_user = get_user(db_session, user.username)\n        db_user.totp_secret = secret\n        db_session.add(db_user)\n        db_session.commit()\n        totp_uri = generate_totp_uri(secret, user.email)\n        # Return the TOTP URI\n        # for QR code generation in the frontend\n        return {\n            \"totp_uri\": totp_uri,\n            \"secret_numbers\": pyotp.TOTP(secret).now(),\n        }\n    ```", "```py\n    @app.post(\"/verify-totp\")\n    def verify_totp(\n        code: str,\n        username: str,\n        session: Session = Depends(get_session),\n    ):\n        user = get_user(session, username)\n        if not user.totp_secret:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"MFA not activated\",\n            )\n        totp = pyotp.TOTP(user.totp_secret)\n        if not totp.verify(code):\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Invalid TOTP token\",\n            )\n        # Proceed with granting access\n        # or performing the sensitive operation\n        return {\n            \"message\": \"TOTP token verified successfully\"\n        }\n    ```", "```py\n$ uvicorn main:app\n```", "```py\n{\n  \"totp_uri\":\n  \"otpauth://totp/YourAppName:giunio%40example.com?secret=\n  NBSUC4CFDUT5IEYX4IR7WKBTDTU7LN25&issuer=YourAppName\",\n  \"secret_numbers\": \"853567\"\n}\n```", "```py\n{\n  \"message\": \"TOTP token verified successfully\"\n}\n```", "```py\nfrom fastapi import HTTPException\nfrom typing import Optional\nVALID_API_KEYS = [\n    \"verysecureapikey\",\n    \"anothersecureapi\",\n    \"onemoresecureapi\",\n]\nasync def get_api_key(\n    api_key: Optional[str]\n):\n    if (\n        api_key not in VALID_API_KEYS\n    ):\n        raise HTTPException(\n            status_code=403, detail=\"Invalid API Key\"\n        )\n    return api_key\n```", "```py\nfrom fastatpi import APIrouter\nrouter = APIRouter()\n@router.get(\"/secure-data\")\nasync def get_secure_data(\n    api_key: str = Depends(get_api_key),\n):\n    return {\"message\": \"Access to secure data granted\"}\n```", "```py\n$ uvicorn main:app\n```", "```py\nfrom fastapi import APIRouter, Depends, Response\nfrom sqlalchemy.orm import Session\nfrom db_connection import get_session\nfrom operations import get_user\nfrom rbac import get_current_user\nfrom responses import UserCreateResponse\nrouter = APIRouter()\n@router.post(\"/login\")\nasync def login(\n    response: Response,\n    user: UserCreateResponse = Depends(\n        get_current_user\n    ),\n    session: Session = Depends(get_session),\n):\n    user = get_user(session, user.username)\n    response.set_cookie(\n        key=\"fakesession\", value=f\"{user.id}\"\n    )\n    return {\"message\": \"User logged in successfully\"}\n```", "```py\n@router.post(\"/logout\")\nasync def logout(\n    response: Response,\n    user: UserCreateResponse = Depends(\n         get_current_user\n    ),\n):\n    response.delete_cookie(\n        \"fakesession\"\n    )  # Clear session data\n    return {\"message\": \"User logged out successfully\"}\n```"]