["```py\n#systematic_colorNames_1.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title(\"Systematically named colors - limited pallette\")\ncw = 1000 # canvas width\nch = 800 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch, background=\"black\")\ncanvas_1.grid(row=0, column=1)\nwhiteColors = \"Gainsboro\",\"peach puff\",\"cornsilk\",\\\n\"honeydew\",\"aliceblue\",\"misty rose\",\"snow\", \"snow3\",\"snow4\",\\\n\"SlateGray1\", \"SlateGray3\", \"SlateGray4\",\\\n\"gray\", \"darkGray\",\"DimGray\",\"DarkSlateGray\"\nredColors = \"Salmon\",\"salmon1\",\"salmon2\",\"salmon3\",\"salmon4\",\\\n\"orange red\",\"OrangeRed2\",\"OrangeRed3\",\"OrangeRed4\",\\\n\"red\",\"red3\",\"red4\",\\\n\"IndianRed1\",\"IndianRed3\",\"IndianRed4\",\\\n\"firebrick\",\"firebrick1\",\"firebrick3\",\"firebrick4\",\\\n\"sienna\",\"sienna1\",\"sienna3\",\"sienna4\"\npinkColors = \"Pink\",\"pink3\",\"pink4\",\\\n\"hot pink\",\"HotPink3\",\"HotPink4\",\\\n\"deep pink\",\"DeepPink3\",\"DeepPink4\",\\\n\"PaleVioletRed1\",\"PaleVioletRed2\",\"PaleVioletRed3\",\"PaleVioletRed4\",\\\n\"maroon\",\"maroon1\",\"maroon3\",\"maroon4\"\nmagentaColors = \"magenta\",\"magenta3\",\"magenta4\",\"DarkMagenta\",\\\n\"orchid1\",\"orchid3\",\"orchid4\",\\\n\"MediumOrchid3\",\"MediumOrchid4\",\\\n\"DarkOrchid\",\"DarkOrchid1\",\"DarkOrchid4\",\\\n\"MediumPurple1\",\"MediumPurple3\", \"MediumPurple4\",\\\n\"purple\",\"purple3\",\"purple4\"\nblueColors = \"blue\",\"blue3\",\"blue4\",\\\n\"SlateBlue1\", \"SlateBlue3\",\"SlateBlue4\",\\\n\"DodgerBlue2\", \"DodgerBlue3\",\"DodgerBlue4\",\\\n\"deep sky blue\",\"DeepSkyBlue3\", \"DeepSkyBlue4\",\\\n\"sky blue\", \"SkyBlue3\", \"SkyBlue4\"\ncyanColors = \"CadetBlue1\", \"CadetBlue3\", \"CadetBlue4\",\\\n\"pale turquoise\", \"PaleTurquoise3\",\"PaleTurquoise4\",\\\n\"cyan\", \"cyan3\", \"cyan4\",\\\n\"aquamarine\",\"aquamarine3\", \"aquamarine4\"\ngreenColors = \"green\", \"green3\", \"green4\",\"dark green\",\\\ncolorssimilar colors, eliminating\"chartreuse\", \"chartreuse3\", \"chartreuse4\",\\\n\"SeaGreen\",\"SeaGreen1\", \"SeaGreen3\",\\\n\"pale green\", \"PaleGreen3\", \"PaleGreen4\",\\\n\"spring green\", \"SpringGreen3\", \"SpringGreen4\",\\\n\"olive drab\",\"OliveDrab1\", \"OliveDrab4\",\\\n\"dark olive green\",\"DarkOliveGreen1\", \"DarkOliveGreen3\", \\ \"DarkOliveGreen4\",\\\nyellowColors= \"yellow\", \"yellow3\",\"yellow4\",\\\ncolorsrectangular color swatches chart\"gold\",\"gold3\",\"gold4\",\\\n\"goldenrod\",\"goldenrod1\",\"goldenrod3\",\"goldenrod4\",\\\n\"orange\",\"orange3\",\"orange4\",\\\n\"dark orange\",\"DarkOrange1\",\"DarkOrange4\"\nx_start = 10\ny_start = 25\nx_width = 118\nx_offset = 2\ny_height = 30\ny_offset = 3\ntext_offset = 0\ntext_width = 95\nkbk = [x_start, y_start, x_start + x_width, y_start + y_height]\ndefshowColors(selectedColor):\n# Basic columnar color swatch display. All colours laid down in a # vertical stripe.\nprint \"number of colors --> \", len(selectedColor)\nfor i in range (0,len(selectedColor)):\nkula = selectedColor[i]\ncanvas_1.create_rectangle(kbk, fill=kula)\ncanvas_1.create_text(kbk[0]+10, kbk[1] , text=kula, \\ width=text_width, fill =\"black\", anchor=NW)\nkbk[1] += y_offset + y_height\ny0 = kbk[1]\nkbk[3] += y_offset + y_height\ny1 = kbk[3]\nkbk[1] = y_offset + y_height\nkbk[3] = y_offset + 2 * y_height\nkbk[0] += x_width + 2*x_offset\nkbk[2] += x_width + 2*x_offset\nreturn y0,y1\nshowColors(redColors)\nshowColors(pinkColors)\nshowColors(magentaColors)\nshowColors(cyanColors)\nshowColors(blueColors)\nshowColors(greenColors)\nshowColors(yellowColors)\nshowColors(whiteColors)\nroot.mainloop()\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```", "```py\n# color_arithmetic_1.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('Ways of Specifying Color')\ncw = 270 # canvas width\nch = 80 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch, background=\"white\")\ncanvas_1.grid(row=0, column=1)\n# specify bottom-left and top-right as a set of four numbers named # 'xy'\nnamed_color_1 = \"light blue\" # ok\nnamed_color_2 = \"lightblue\" # ok\nnamed_color_3 = \"LightBlue\" # ok\nnamed_color_4 = \"Light Blue\" # ok\nnamed_color_5 = \"Light Blue\" # Name error - not ok: Tcl Error, # unknown color name\nrgb_color = \"rgb(255,0,0)\" # Unknown color name.\n#rgb_percent_color = rgb(100%, 0%, 0%) # Invalid syntax\nrgb_hex_1 = \"#ff0000\" # ok - 16.7 million colors\nrgb_hex_2 = \"#f00\" # ok\nrgb_hex_3 = \"#ffff00000000\" # ok - a ridiculous number\ntk_rgb = \"#%02x%02x%02x\" % (128, 192, 200)\nprinttk_rgb\ny1, width, height = 20,20,20\ncanvas_1.create_oval(10,y1,10+width,y1+height, fill= rgb_hex_1)\ncanvas_1.create_oval(30,y1,30+width,y1+height, fill= rgb_hex_2)\ncanvas_1.create_oval(50,y1,50+width,y1+height, fill= rgb_hex_3)\ncanvas_1.create_oval(70,y1,70+width,y1+height, fill= tk_rgb)\ny1 = 40\ncanvas_1.create_oval(10,y1,10+width,y1+height, fill= named_color_1)\ncanvas_1.create_oval(30,y1,30+width,y1+height, fill= named_color_2)\ncanvas_1.create_oval(50,y1,50+width,y1+height, fill= named_color_3)\ncanvas_1.create_oval(70,y1,70+width,y1+height, fill= named_color_4)\nroot.mainloop()#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```", "```py\n# red_beach_ball_1.py\n# >>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title(\"Red beach ball\")\ncw = 240 # canvas width\nch = 220 # canvas height\nchart_1 = Canvas(root, width=cw, height=ch, background=\"black\")\nchart_1.grid(row=0, column=0)\nx_orig = 100\ny_orig = 200\nx_width = 80\ny_hite = 180\nxy0 = [x_orig, y_orig]\nhexadecimal color specification schemecolor shades series, preparingxy1 = [x_orig - x_width, y_orig - y_hite]\nxy2 = [x_orig + x_width, y_orig - y_hite ]\nwedge =[ xy0, xy1 , xy2 ]\nwidth= 80 # Standard disk diameter\nhite = 80 # Median distance from origin (x_orig, y_orig).\nhFac = [1.1, 1.15, 1.25, 1.35, 1.5, 1.6, 1.7] # Height # radial factors.\nwFac = [ 2.0, 1.9, 1.7, 1.4, 1.1, 0.75, 0.40] # Disk # diameter factors.\n# Color list. Elements incresing in darkness.\nkulaRed = [\"#500000\",\"#6e0000\",\"#a00000\",\"#ff0000\",\\\n\"#ff5050\", \"#ff8c8c\", \"#ffc8c8\", \"#ffffff\" ]\nkula = kulaRed\nfor i in range(0, 7): # Red disks\nx0_disk = xy0[0] - width * wFac[i]/2 # Bottom left\ny0_disk = xy0[1] - hite * hFac[i] + width * wFac[i]/2\nxya = [x0_disk, y0_disk] # BOTTOM LEFT\nx1_disk = xy0[0] + width * wFac[i]/2 # Top right\ny1_disk = xy0[1] - hite * hFac[i] - width * wFac[i]/2\nxyb = [x1_disk, y1_disk] # TOP RIGHT\nchart_1.create_oval(xya ,xyb , fill=kula[i], outline=kula[i])\nroot.mainloop()\n\n```", "```py\n# red_color_segment_1.py\n#>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title(\"Red color wedge\")\ncw = 240 # canvas width\nch = 220 # canvas height\nchart_1 = Canvas(root, width=cw, height=ch, background=\"white\")\nchart_1.grid(row=0, column=0)\ntheta_deg = 0.0\nx_orig = 100\ny_orig = 200\nx_width = 80\ny_hite = 180\nxy0 = [x_orig, y_orig]\nwedge-shaped segmentcreatingxy1 = [x_orig - x_width, y_orig - y_hite]\nxy2 = [x_orig + x_width, y_orig - y_hite ]\nwedge =[ xy0, xy1 , xy2 ]\nwidth= 40 #standard disk diameter\nhite = 80 # median wedge height.\nhFac = [0.25, 0.45, 0.75, 1.2, 1.63, 1.87, 2.05] # Radial # factors\nwFac = [ 0.2, 0.36, 0.6, 1.0, 0.5, 0.3, 0.25] # disk # diameter factors\n# Color list. Elements increasing in darkness.\nkulaRed = [\"#000000\",\"#6e0000\",\"#a00000\",\"#ff0000\",\\\n\"#ff5050\", \"#ff8c8c\", \"#ffc8c8\", \\ \"#440000\" ]\nkula = kulaRed\nwedge =[ xy0, xy1 , xy2 ] # black background\nchart_1.create_polygon(wedge,fill=kula[0])\nx_width = 40 # dark red wedge\ny_hite = 160\nxy1 = [x_orig - x_width, y_orig - y_hite]\nxy2 = [x_orig + x_width, y_orig - y_hite ]\nwedge =[ xy0, xy1 , xy2 ]\nchart_1.create_polygon(wedge,fill=kula[1])\nfor i in range(0, 7): # red disks\nx0_disk = xy0[0] - width * wFac[i]/2 # bottom left\ny0_disk = xy0[1] - hite * hFac[i] + width * wFac[i]/2\nxya = [x0_disk, y0_disk] # BOTTOM LEFT\nx1_disk = xy0[0] + width * wFac[i]/2 # top right\ny1_disk = xy0[1] - hite * hFac[i] - width * wFac[i]/2\nxyb = [x1_disk, y1_disk] #TOP RIGHT\nchart_1.create_oval(xya ,xyb , fill=kula[i], outline=kula[i])\nroot.mainloop()\n\n```", "```py\n# primary_color_wheel_1.py\n#>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nimport math\nroot = Tk()\nroot.title(\"Color wheel segments\")\ncw = 400 # canvas width\nch = 400 # canvas height\nchart_1 = Canvas(root, width=cw, height=ch, background=\"black\")\nchart_1.grid(row=0, column=0)\ntheta_deg = 0.0\ncolor mixingx_orig = 200\ny_orig = 200\nx_width = 40\ny_hite = 160\nxy0 = [x_orig, y_orig]\nxy1 = [x_orig - x_width, y_orig - y_hite]\nxy2 = [x_orig + x_width, y_orig - y_hite ]\nwedge =[ xy0, xy1 , xy2 ]\nwidth= 40 #standard disk diameter\nhite = 80 # median wedge height.\nhFac = [0.25, 0.45, 0.75, 1.2, 1.63, 1.87, 2.05] # Radial # factors\nwFac = [ 0.2, 0.36, 0.6, 1.0, 0.5, 0.3, 0.25] # disk # diameter factors\nx_DiskRot = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0] # rotational coordinates\ny_DiskRot = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n#RED\nkulaRed = [\"#000000\", \"#6e0000\", \"#a00000\", \"#ff0000\",\\\n\"#ff5050\", \"#ff8c8c\", \"#ffc8c8\", \\ \"#440000\" ]\n# Khaki\nkulaRRedGreen = [\"#000000\", \"#606000\", \"#8f9f00\", \"#b3b300\",\\\n\"#d6d600\", \"#dbdb30\", \\ \"#dbdb77\", \"#3e2700\" ]\n# Yellow\nkulaRedGreen = [\"#000000\", \"#6e6e00\", \"#a0a000\", \"#ffff00\",\\\n\"#ffff50\", \"#ffff8c\", \\ \"#ffffc8\", \"#444400\" ]\n# Orange\nkulaRedGGreen = [\"#000000\", \"#493100\", \"#692f00\", \"#a25d00\",\\\n\"#ff8300\", \"#ffa55a\", \\ \"#ffb681\", \"#303030\" ]\n# Green\nkulaGreen = [\"#000000\", \"#006e00\", \"#00a000\", \"#00ff00\",\\\n\"#50ff50\", \"#8cff8c\", \"#c8ffc8\", \\ \"#004400\" ]\n# Dark green\nkulaGGreenBlue = [\"#000000\", \"#003227\", \"#009358\", \"#00a141\",\\\n\"#00ff76\", \"#72ff99\", \\ \"#acffbf\", \"#003a1d\" ]\n# Cyan\nkulaGreenBlue = [\"#000000\", \"#006e6e\", \"#00a0a0\", \"#00ffff\",\\\n\"#50ffff\", \"#8cffff\", \\ \"#c8ffff\", \"#004444\" ]\n# Steel Blue\nkulaGreenBBlue = [\"#000000\", \"#002c46\", \"#00639c\", \"#008cc8\",\\\n\"#00b6ff\", \"#7bb6ff\", \\ \"#addfff\", \"#001a27\" ]\n# Blue\nkulaBlue = [\"#000000\", \"#00006e\", \"#0000a0\", \"#0000ff\",\\\n\"#5050ff\", \"#8c8cff\", \"#c8c8ff\", \\ \"#000044\" ]\n# Purple\nkulaBBlueRed = [\"#000000\", \"#470047\", \"#6c00a2\", \"#8f00ff\",\\\n\"#b380ff\", \"#d8b3ff\", \"#f1deff\", \\ \"#200031\" ]\n# Crimson\nkulaBlueRed = [\"#000000\", \"#6e006e\", \"#a000a0\", \"#ff00ff\",\\\n\"#ff50ff\", \"#ff8cff\", \"#ffc8ff\", \\ \"#440044\" ]\n# Magenta\nkulaBlueRRed = [\"#000000\", \"#380023\", \"#80005a\", \"#b8007b\",\\\n\"#ff00a1\", \"#ff64c5\", \"#ff89ea\", \\ \"#2e0018\" ]\n# ROTATE\ndef rotate(xya, xyb, theta_deg_incr): #xya, xyb are 2 component # points\n# General purpose point rotation function\ntheta_rad = math.radians(theta_deg_incr)\na_radian = math.atan2( (xyb[1] - xya[1]) , (xyb[0] - xya[0]) )\na_length = math.sqrt( (xyb[1] - xya[1])**2 + (xyb[0] - xya[0])**2)\ntheta_rad += a_radian\ntheta_deg = math.degrees(theta_rad)\nnew_x = a_length * math.cos(theta_rad)\nnew_y = a_length * math.sin(theta_rad)\nreturn new_x, new_y, theta_deg # theta_deg = post # rotation angle\n# GENL. SEGMENT BACKGROUND FUNCTION\ndefsegmentBackground(kula, angle, xy1, xy2):\nxy_new1 = rotate(xy0, xy1, angle) # rotate xy1\nxy1 =[ xy_new1[0] + xy0[0], xy_new1[1] + xy0[1] ]\nxy_new2 = rotate(xy0, xy2, angle) # rotate xy2\nxy2 =[ xy_new2[0] + xy0[0], xy_new2[1] + xy0[1] ]\nwedge =[ xy0, xy1 , xy2 ]\nchart_1.create_polygon(wedge,fill=kula[7])\n# GENL. COLOR DISKS FUNCTION\ndefcolorDisks( kula, angle):\nglobal hite, width, hFac, wFac\nfor i in range(0, 7): # green segment disks\nxya = [xy0[0], xy0[1] - hite * hFac[i] ] # position of point for # rotation\nxy_new1 = rotate(xy0, xya, angle) # rotate xya\n# NEW CIRCLE CENTERS AFTER ROTATION OF CENTERLINE\nx0_disk = xy_new1[0] + xy0[0] - width*wFac[i]/2\ny0_disk = xy_new1[1] + xy0[1] + width * wFac[i]/2\nxya = [x0_disk, y0_disk] # BOTTOM LEFT\nx1_disk = xy_new1[0] + xy0[0] + width*wFac[i]/2\ny1_disk = xy_new1[1] + xy0[1] - width * wFac[i]/2\nxyb = [x1_disk, y1_disk] #TOP RIGHT\nchart_1.create_oval(xya ,xyb , fill=kula[i], outline=kula[i])\nfor i in range(0,12):\nif i==0:\nangle = 0.0\nkula = kulaRed\nif i==1:\nangle = 30.0\nkula = kulaRRedGreen\nif i==2:\nangle = 60.0\nkula = kulaRedGreen\nif i==3:\nangle = 90.0\nkula = kulaRedGGreen\nif i==4:\nangle = 120.0\nkula = kulaGreen\nif i==5:\nangle = 150.0\nkula = kulaGGreenBlue\nif i==6:\nangle = 180.0\nkula = kulaGreenBlue\nif i==7:\nangle = 210.0\nkula = kulaGreenBBlue\nif i==8:\nangle = 240.0\nkula = kulaBlue\nif i==9:\nangle = 270.0\nkula = kulaBBlueRed\nif i==10:\nangle = 300.0\nkula = kulaBlueRed\nif i==11:\nangle = 330.0\nkula = kulaBlueRRed\nif i==12:\nangle = 360.0\nkula = kulaBlueRRed\nsegmentBackground( kula, angle, xy1, xy2)\ncolorDisks( kula, angle)\nroot.mainloop()\n\n```", "```py\n# color_mixer_1.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title(\"Color mixer in Hex and Integer\")\ncanvas_1 = Canvas(root, width=320, height=400, background=\"white\")\ncanvas_1.grid(row=0, column=1)\nslide_value_red = IntVar() # variables used by slider controls\nslide_value_green = IntVar()\nslide_value_blue = IntVar()\nfnt = 'Bookantiqua 14 bold'\ncombined_hex = '000000'\nred_hex = '00'\ngreen_hex = '00'\nblue_hex = '00'\nred_int = 0\ngreen_int = 0\nblue_int = 0\nred_text = 0\ngreen_text = 0\nblue_text = 0\n# red display\ncanvas_1.create_rectangle( 20, 30, 80, 110)\ncanvas_1.create_text(20,10, text=\"Red\", width=60, font=fnt,\\\nanchor=NW, fill='red' )\n# green display\ncanvas_1.create_rectangle( 100, 30, 160, 110)\ncanvas_1.create_text(100,10, text=\"Green\", width=60, font=fnt,\\\nanchor=NW, fill='green' )\n# blue display\ncanvas_1.create_rectangle( 180, 30, 240, 110)\ncanvas_1.create_text(180,10, text=\"Blue\", width=60, font=fnt,\\\nanchor=NW, fill='blue' )\n# Labels\ncanvas_1.create_text(250,30, text=\"integer 256\", width=60, anchor=NW )\ncanvas_1.create_text(250,60, text=\"% of 256\", width=60, anchor=NW )\ncanvas_1.create_text(250,86, text=\"hex\", width=60, anchor=NW )\n# combined display\nfnt = 'Bookantiqua 12 bold'\ncanvas_1.create_rectangle( 20, 170, 220, 220 )\ncanvas_1.create_text(20,130, text=\"Combined colors\", width=200, font=fnt,\\\nanchor=NW, fill='black' )\ncanvas_1.create_text(20,150, text=\"Hexadecimal red-green-blue\", width=300,\nfont=fnt,anchor=NW, fill='black' )\n# callback functions to service slider changes\n#=============================================\ndefcodeShorten(slide_value, x0, y0, width, height, kula):\n# This allows the callback functions to be reduced in length.\nglobal combined_hex, red_int, green_int, blue_int\nfnt = 'Bookantiqua 12 bold'\nslide_txt = str(slide_value)\nslide_int = int(slide_value)\nslide_hex = hex(slide_int)\nslide_percent = slide_int * 100 / 256\ncanvas_1.create_rectangle(x0, y0, x0 + width, y0 + height, \\ fill='white')\ncanvas_1.create_text(x0+6, y0+6, text=slide_txt, width=width, \\ font=fnt,\\\nanchor=NW, fill=kula )\ncanvas_1.create_text(x0+6, y0+28, text=slide_percent, \\ width=width,\\\nfont=fnt, anchor=NW, fill=kula)\ncanvas_1.create_text(x0+6, y0+50, text=slide_hex, width=width,\\\nfont=fnt, anchor=NW, fill=kula)\nreturn slide_int\ndefcallback_red(*args): # red slider event handler\nglobal red_int\nkula = \"red\"\njimmy = str(slide_value_red.get())\nred_int = codeShorten(jimmy, 20, 30, 60, 80, kula)\nupdate_display(red_int, green_int, blue_int)\ndefcallback_green(*args): # green slider event handler\nglobal green_int\nkula = \"darkgreen\"\njimmy = str(slide_value_green.get())\ngreen_int = codeShorten(jimmy, 100, 30, 60, 80, kula)\nupdate_display(red_int, green_int, blue_int)\ndefcallback_blue(*args): # blue slider event handler\nglobal blue_int\nkula = \"blue\"\njimmy = str(slide_value_blue.get())\nblue_int = codeShorten(jimmy, 180, 30, 60, 80, kula)\nupdate_display(red_int, green_int, blue_int)\ndefupdate_display(red_int, green_int, blue_int):\n# Refresh the swatch and nymerical display.\ncombined_int = (red_int, green_int, blue_int)\ncombined_hex = '#%02x%02x%02x' % combined_int\ncanvas_1.create_rectangle( 20, 170, 220 , 220, fill='white')\ncanvas_1.create_text(26, 170, text=combined_hex, width=200,\\\nanchor=NW, font='Bookantiqua 16 bold')\ncanvas_1.create_rectangle( 0, 400, 300, 230, fill=combined_hex)\nslide_value_red.trace_variable(\"w\", callback_red)\nslide_value_green.trace_variable(\"w\", callback_green)\nslide_value_blue.trace_variable(\"w\", callback_blue)\nslider_red = Scale(root, # red slider specification # parameters.\nlength = 400,\nfg = 'red',\nactivebackground = \"tomato\",\nbackground = \"grey\",\ntroughcolor = \"red\",\nlabel = \"RED\",\nfrom_ = 0,\nto = 255,\nresolution = 1,\nvariable = slide_value_red,\norient = 'vertical')\nslider_red.grid(row=0, column=2)\nslider_green =Scale(root, # green slider specification # parameters.\nlength = 400,\nfg = 'dark green',\nactivebackground = \"green yellow\",\nbackground = \"grey\",\ntroughcolor = \"green\",\nlabel = \"GREEN\",\nfrom_ = 0,\nto = 255,\nresolution = 1,\nvariable = slide_value_green,\norient = 'vertical')\nslider_green.grid(row=0, column=3)\nslider_blue = Scale(root, # blue slider specification # parameters.\nlength = 400,\nfg = 'blue',\nactivebackground = \"turquoise\",\nbackground = \"grey\",\ntroughcolor = \"blue\",\nlabel = \"BLUE\",\nfrom_ = 0,\nto = 255,\nresolution = 1,\nvariable = slide_value_blue,\norient = 'vertical')\nslider_blue.grid(row=0, column=4)\nroot.mainloop()\n\n```", "```py\n#animated_color_wheel_1.py\n# >>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title(\"Animated Color Wheel\")\ncw = 300 # canvas width\nch = 300 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch, background=\"black\")\ncanvas_1.grid(row=0, column=1)\ncycle_period = 200\nredFl = 255.0\ngreenFl = 0\nblueFl = 0\nkula = \"#000000\"\narcStart = 89\narcEnd = 90\nxCentr = 150\nyCentr = 160\nradius = 130\ncirc = xCentr - radius, yCentr + radius, xCentr + radius, yCentr - \\ radius\n# angular position markers, degrees\nA_ANG = 0\nB_ANG = 60\nC_ANG = 120\nD_ANG = 180\nE_ANG = 240\nF_ANG = 300\n#G_ANG = 1\nG_ANG = 359\nintervals = 60 # degrees\n# Percent color at each position marker\n# index 0 1 2 3 4 5 6 7\nredShift = 100, 100, 0, 0, 0, 100, 100 # percent of red\ngreenShift = 0, 100, 100, 100, 0, 0, 0 # percent of green\nblueShift = 0, 0, 0, 100, 100, 100, 0 # percent of blue\n# Rate of change of color per degree, rgb integer counts per degree.\nred_rate = [0,1,2,3,4,5,6,7]\ngreen_rate = [0,1,2,3,4,5,6,7]\nblue_rate = [0,1,2,3,4,5,6,7]\n# Calibrate counts-per-degree in each interval, place in xrate list\nfor i in range(0,6):\nred_rate[i] = 256.0 * (redShift[i+1] - redShift[i])/(100 * \\ intervals)\ngreen_rate[i] = 256.0 * (greenShift[i+1] - greenShift[i])/(100 * \\ intervals)\nblue_rate[i] = 256.0 * (blueShift[i+1] - blueShift[i])/(100 * \\ intervals)\ndef rgb2hex(redFl, greenFl, blueFl):\n# Convert integer to hex color.\nred = int(redFl)\ngreen = int(greenFl)\nblue = int(blueFl)\nrgb = red, green, blue\nreturn '#%02x%02x%02x' % rgb\nfor i in range (0, 359):\ncanvas_1.create_arc(circ, start=arcStart, extent=arcStart - arcEnd,\\\nfill= kula, outline= kula)\narcStart = arcEnd\narcEnd -=1\n# Color component transitions in 60 degree sectors\nif i>A_ANG and i<B_ANG:\nredFl += red_rate[0]\ngreenFl += green_rate[0]\nblueFl += blue_rate[0]\nkula = rgb2hex(redFl, greenFl, blueFl)\nif i>B_ANG and i<C_ANG:\nredFl += red_rate[1]\ngreenFl += green_rate[1]\nblueFl += blue_rate[1]\nkula = rgb2hex(redFl, greenFl, blueFl)\nif i>C_ANG and i<D_ANG:\nredFl += red_rate[2]\ngreenFl += green_rate[2]\nblueFl += blue_rate[2]\nkula = rgb2hex(redFl, greenFl, blueFl)\nif i>D_ANG and i<E_ANG:\nredFl += red_rate[3]\ngreenFl += green_rate[3]\nblueFl += blue_rate[3]\nkula = rgb2hex(redFl, greenFl, blueFl)\nif i>E_ANG and i<F_ANG:\nredFl += red_rate[4]\ngreenFl += green_rate[4]\nblueFl += blue_rate[4]\nkula = rgb2hex(redFl, greenFl, blueFl)\nif i>F_ANG and i<G_ANG:\nredFl += red_rate[5]\ngreenFl += green_rate[5]\nblueFl += blue_rate[5]\nkula = rgb2hex(redFl, greenFl, blueFl)\n#kula = rgb2hex(redFl, greenFl, blueFl)\ncanvas_1.create_text(100, 20, text=kula, fill='white', \\ width=200,\\\nfont='SansSerif 12 ', tag= 'degreesAround', anchor= SW)\ncanvas_1.update() # This refreshes the # drawing on the canvas.\ncanvas_1.after(cycle_period) # This makes execution pause for # 200 milliseconds.\ncanvas_1.delete('degreesAround') # This erases the # changing text\nroot.mainloop()\n\n```", "```py\n# color_picker_1 .py\n#>>>>>>>>>>>>>>>\nfrom Tkinter import *\nfrom tkColorChooser import askcolor\naskcolor()\nmainloop()\n\n```"]