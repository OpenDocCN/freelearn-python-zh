["```py\npip install djangorestframework\n```", "```py\nINSTALLED_APPS = ['django.contrib.admin',\\\n                  'django.contrib.auth',\\\n                  ‹django.contrib.contenttypes›,\\\n                  'django.contrib.sessions',\\\n                  'django.contrib.messages',\\\n                  'django.contrib.staticfiles',\\\n                  ‹rest_framework›,\\\n                  ‹reviews›]\n```", "```py\nfrom rest_framework.decorators import api_view\n@api_view\ndef my_view(request):\n     ...\n```", "```py\n    from rest_framework.decorators import api_view\n    from rest_framework.response import Response\n    from .models import Book\n    @api_view()\n    def first_api_view(request):\n        num_books = Book.objects.count()\n        api_view decorator, which will be used to convert our functional view into one that can be used with DRF, and the second line imports Response, which will be used to return a response.The `view` function returns a `Response` object containing a dictionary with the number of books in our database (see the highlighted part).Open `bookr/reviews/urls.py` and import the `api_views` module. Then, add a new path to the `api_views` module in the URL patterns that we have developed throughout this course, as follows:\n\n    ```", "```py\n\n    Start the Django service with the `python manage.py runserver` command and go to `http://0.0.0.0:8000/api/first_api_view/` to make your first API request. Your screen should appear as in *Figure 12.1*:![Figure 12.1: API view with the number of books\n    ](img/B15509_12_01.jpg)Figure 12.1: API view with the number of booksCalling this URL endpoint made a default `GET` request to the API endpoint, which returned a JSON key-value pair `(\"num_books\": 0`). Also, notice how DRF provides a nice interface to view and interact with the APIs.\n    ```", "```py\n    curl http://0.0.0.0:8000/api/first_api_view/\n    {\"num_books\":0}\n    ```", "```py\n    curl.exe http://0.0.0.0:8000/api/first_api_view/\n    ```", "```py\n{\"num_books\": 0}\n```", "```py\n    from rest_framework import serializers\n    class PublisherSerializer(serializers.Serializer):\n        name = serializers.CharField()\n        website = serializers.URLField()\n        email = serializers.EmailField()\n    class BookSerializer(serializers.Serializer):\n        title = serializers.CharField()\n        publication_date = serializers.DateField()\n        isbn = serializers.CharField()\n        publisher = PublisherSerializer()\n    ```", "```py\n    from rest_framework.decorators import api_view\n    from rest_framework.response import Response\n    from .models import Book\n    from .serializers import BookSerializer\n    @api_view()\n    def all_books(request):\n        books = Book.objects.all()\n        book_serializer = BookSerializer(books, many=True)\n        return Response(book_serializer.data)\n    ```", "```py\n    [OrderedDict([('title', 'Advanced Deep Learning with Keras'), ('publication_date', '2018-10-31'), ('isbn', '9781788629416'), ('publisher', OrderedDict([('name', 'Packt Publishing'), ('website', 'https://www.packtpub.com/'), ('email', 'info@packtpub.com')]))]), OrderedDict([('title', 'Hands-On Machine Learning for Algorithmic Trading'), ('publication_date', '2018-12-31'), ('isbn', '9781789346411'), ('publisher', OrderedDict([('name', 'Packt Publishing'), ('website', 'https://www.packtpub.com/'), ('email', 'info@packtpub.com')]))]) …\n    ```", "```py\n    from django.urls import path\n    from . import views, api_views\n    urlpatterns = [path('api/all_books/'),\\\n                   path(api_views.all_books),\\\n                   path(name='all_books')\n        …\n    ]\n    ```", "```py\nclass AllBooks(ListAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n```", "```py\nclass BookSerializer(serializers.Serializer):\n    title = serializers.CharField()\n    publication_date = serializers.DateField()\n    isbn = serializers.CharField()\n    publisher = PublisherSerializer()\n```", "```py\nclass Book(models.Model):\n    \"\"\"A published book.\"\"\"\n    title = models.CharField(max_length=70),\\\n                            (help_text=\"The title of the book.\")\n    publication_date = models.DateField\\\n                      (verbose_name=\"Date the book was published.\")\n    isbn = models.CharField(max_length=20),\\\n                           (verbose_name=\"ISBN number of the book.\")\n    publisher = models.ForeignKey(Publisher),\\\n                                 (on_delete=models.CASCADE)\n    contributors = models.ManyToManyField('Contributor'),\\\n                                         (through=\"BookContributor\")\n    def __str__(self):\n        return self.title\n```", "```py\nfrom rest_framework import serializers\nfrom .models import Contributor\nclass ContributorSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Contributor\n        fields = ['first_names', 'last_names', 'email']\n```", "```py\n    from rest_framework import serializers\n    from .models import Book, Publisher\n    class PublisherSerializer(serializers.ModelSerializer):\n        class Meta:\n            model = Publisher\n            fields = ['name', 'website', 'email']\n    class BookSerializer(serializers.ModelSerializer):\n        publisher = PublisherSerializer()\n        class Meta:\n            model = Book\n            fields = ['title', 'publication_date', 'isbn', 'publisher']\n    ```", "```py\n    from rest_framework import generics\n    from .models import Book\n    from .serializers import BookSerializer\n    class AllBooks(generics.ListAPIView):\n        queryset = Book.objects.all()\n        serializer_class = BookSerializer\n    ```", "```py\n    urlpatterns = [path('api/all_books/'),\\\n                   path(api_views.AllBooks.as_view()),\\\n                   path(name='all_books')]\n    ```", "```py\nclass UserViewSet(viewsets.ModelViewSet):\n    serializer_class = UserSerializer\n    queryset = User\n```", "```py\nfrom rest_framework import routers\nrouter = routers.SimpleRouter()\nrouter.register(r'users', UserViewSet)\nurlpatterns = router.urls\n```", "```py\n    reviews/serializers.py\n    01  from django.contrib.auth.models import User\n    02  from django.utils import timezone\n    03  from rest_framework import serializers\n    04  from rest_framework.exceptions import NotAuthenticated, PermissionDenied\n    05\n    06  from .models import Book, Publisher, Review\n    07  from .utils import average_rating\n    08\n    09  class PublisherSerializer(serializers.ModelSerializer):\n    You can find the complete code snippet at http://packt.live/3osYJli.\n    ```", "```py\n    from rest_framework import viewsets\n    from rest_framework.pagination import LimitOffsetPagination\n    from .models import Book, Review\n    from .serializers import BookSerializer, ReviewSerializer\n    class BookViewSet(viewsets.ReadOnlyModelViewSet):\n        queryset = Book.objects.all()\n        serializer_class = BookSerializer\n    class ReviewViewSet(viewsets.ModelViewSet):\n        queryset = Review.objects.order_by('-date_created')\n        serializer_class = ReviewSerializer\n        pagination_class = LimitOffsetPagination\n        authentication_classes = []\n    ```", "```py\n    all_books and book_detail paths into a single path called books.  We have also added a new endpoint under the path reviews which we will need in a later chapter.We start by importing the `DefaultRouter` class from `rest_framework.routers`. Then, we create a `router` object using the `DefaultRouter` class and then register the newly created `BookViewSet` and `ReviewViewSet`, as can be seen from the highlighted code. This ensures that the `BookViewSet` is invoked whenever the API has the `/api/books` path.\n    ```", "```py\n    INSTALLED_APPS = ['django.contrib.admin',\\\n                      'django.contrib.auth',\\\n                      ‹django.contrib.contenttypes›,\\\n                      'django.contrib.sessions',\\\n                      'django.contrib.messages',\\\n                      'django.contrib.staticfiles',\\\n                      ‹rest_framework›,\\\n                      ‹rest_framework.authtoken›,\\\n                      ‹reviews›]\n    ```", "```py\n    python manage.py migrate\n    ```", "```py\n    /reviews/api_views.py\n    from django.contrib.auth import authenticate\n    from rest_framework import viewsets\n    from rest_framework.authentication import TokenAuthentication\n    from rest_framework.authtoken.models import Token\n    from rest_framework.pagination import LimitOffsetPagination\n    from rest_framework.permissions import IsAuthenticated\n    from rest_framework.response import Response\n    from rest_framework.status import HTTP_404_NOT_FOUND, HTTP_200_OK\n    from rest_framework.views import APIView\n    You can find the complete code for this file at http://packt.live/2JQebbS.\n    ```", "```py\n    class BookViewSet(viewsets.ReadOnlyModelViewSet):\n        queryset = Book.objects.all()\n        serializer_class = BookSerializer\n        authentication_classes = [TokenAuthentication]\n        permission_classes = [IsAuthenticated]\n    ```", "```py\n    path('api/login', api_views.Login.as_view(), name='login')\n    ```", "```py\n    {\n    \"username\": \"Peter\",\n    \"password\": \"testuserpassword\"\n    }\n    ```", "```py\n    curl -X GET http://0.0.0.0:8000/api/books/\n    {\"detail\":\"Authentication credentials were not provided.\"}\n    ```", "```py\n    curl -X GET http://0.0.0.0:8000/api/books/ -H \"Authorization: Token 724865fcaff6d0aace359620a12ec0b5cc6524fl\"\n     [{\"title\":\"Advanced Deep Learning with Keras\",\"publication_date\":\"2018-10-31\",\"isbn\":\"9781788629416\",\"publisher\":{\"name\":\"Packt Publishing\",\"website\":\"https://www.packtpub.com/\",\"email\":\"info@packtpub.com\"},\"rating\":4,\"reviews\":[{\"content\":\"A must read for all\",\"date_created\":… (truncated)\n    ```", "```py\n    class BookViewSet(viewsets.ReadOnlyModelViewSet):\n        queryset = Book.objects.all()\n        serializer_class = BookSerializer\n        authentication_classes = []\n        permission_classes = []\n    ```"]