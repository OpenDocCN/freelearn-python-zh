["```py\n(myproject_env)$ pip install selenium\n\n```", "```py\n    # locations/tests.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from time import sleep\n    from django.test import LiveServerTestCase\n    from django.contrib.contenttypes.models import ContentType\n    from django.contrib.auth.models import User\n    from selenium import webdriver\n    from selenium.webdriver.support.ui import WebDriverWait\n    from likes.models import Like\n    from .models import Location\n\n    class LiveLocationTest(LiveServerTestCase):\n        @classmethod\n        def setUpClass(cls):\n            super(LiveLocationTest, cls).setUpClass()\n            cls.browser = webdriver.Firefox()\n            cls.browser.delete_all_cookies()\n            cls.location = Location.objects.create(\n                title=\"Haus der Kulturen der Welt\",\n                slug=\"hkw\",\n                small_image=\"locations/2015/11/\"\n                    \"20151116013056_small.jpg\",\n                medium_image=\"locations/2015/11/\"\n                    \"20151116013056_medium.jpg\",\n                large_image=\"locations/2015/11/\"\n                    \"20151116013056_large.jpg\",\n            )\n            cls.username = \"test-admin\"\n            cls.password = \"test-admin\"\n            cls.superuser = User.objects.create_superuser(\n                username=cls.username,\n                password=cls.password,\n                email=\"\",\n            )\n\n        @classmethod\n        def tearDownClass(cls):\n            super(LiveLocationTest, cls).tearDownClass()\n            cls.browser.quit()\n            cls.location.delete()\n            cls.superuser.delete()\n\n        def test_login_and_like(self):\n            # login\n            self.browser.get(\"%(website)s/admin/login/\"\n                \"?next=/locations/%(slug)s/\" % {\n                \"website\": self.live_server_url,\n                \"slug\": self.location.slug,\n            })\n            username_field = \\\n                self.browser.find_element_by_id(\"id_username\")\n            username_field.send_keys(self.username)\n            password_field = \\\n                self.browser.find_element_by_id(\"id_password\")\n            password_field.send_keys(self.password)\n            self.browser.find_element_by_css_selector(\n                'input[type=\"submit\"]'\n            ).click()\n            WebDriverWait(self.browser, 10).until(\n                lambda x: self.browser.\\\n                    find_element_by_css_selector(\n                        \".like-button\"\n                    )\n            )\n            # click on the \"like\" button\n            like_button = self.browser.\\\n                find_element_by_css_selector('.like-button')\n            is_initially_active = \\\n                \"active\" in like_button.get_attribute(\"class\")\n            initial_likes = int(self.browser.\\\n                find_element_by_css_selector(\n                    \".like-badge\"\n                ).text)\n\n            sleep(2) # remove this after the first run\n\n            like_button.click()\n            WebDriverWait(self.browser, 10).until(\n                lambda x: int(\n                    self.browser.find_element_by_css_selector(\n                        \".like-badge\"\n                    ).text\n                ) != initial_likes\n            )\n            likes_in_html = int(\n                self.browser.find_element_by_css_selector(\n                    \".like-badge\"\n                ).text\n            )\n            likes_in_db = Like.objects.filter(\n                content_type=ContentType.objects.\\\n                    get_for_model(Location),\n                object_id=self.location.pk,\n            ).count()\n\n            sleep(2) # remove this after the first run\n\n            self.assertEqual(likes_in_html, likes_in_db)\n            if is_initially_active:\n                self.assertLess(likes_in_html, initial_likes)\n            else:\n                self.assertGreater(\n                    likes_in_html, initial_likes\n                )\n\n            # click on the \"like\" button again to switch back\n            # to the previous state\n            like_button.click()\n            WebDriverWait(self.browser, 10).until(\n                lambda x: int(\n                    self.browser.find_element_by_css_selector(\n                        \".like-badge\"\n                    ).text\n                ) == initial_likes\n            )\n\n            sleep(2) # remove this after the first run\n    ```", "```py\n    # myproject/urls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf.urls import patterns, include, url\n    from django.conf import settings\n    from django.conf.urls.static import static\n    from django.contrib.staticfiles.urls import \\\n        staticfiles_urlpatterns\n\n    urlpatterns = patterns(\"\",# â€¦\n    )\n\n    urlpatterns += staticfiles_urlpatterns()\n    urlpatterns += static(\n     settings.STATIC_URL,\n     document_root=settings.STATIC_ROOT\n    )\n    urlpatterns += static(\n        settings.MEDIA_URL,\n        document_root=settings.MEDIA_ROOT\n    )\n    ```", "```py\n    (myproject_env)$ python manage.py collectstatic --noinput\n\n    ```", "```py\n    (myproject_env)$ python manage.py test locations\n    Creating test database for alias 'default'...\n    .\n    --------------------------------------------------------\n    Ran 1 test in 19.158s\n\n    OK\n    Destroying test database for alias 'default'...\n\n    ```", "```py\n(myproject_env)$ pip install mock\n\n```", "```py\n    # likes/tests.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import mock\n    import json\n    from django.contrib.contenttypes.models import ContentType\n    from django.contrib.auth.models import User\n    from django.test import SimpleTestCase\n    from locations.models import Location\n\n    class JSSetLikeViewTest(SimpleTestCase):\n        @classmethod\n        def setUpClass(cls):\n            super(JSSetLikeViewTest, cls).setUpClass()\n            cls.location = Location.objects.create(\n                title=\"Haus der Kulturen der Welt\",\n                slug=\"hkw\",\n                small_image=\"locations/2015/11/\"\n                    \"20151116013056_small.jpg\",\n                medium_image=\"locations/2015/11/\"\n                    \"20151116013056_medium.jpg\",\n                large_image=\"locations/2015/11/\"\n                    \"20151116013056_large.jpg\",\n            )\n            cls.content_type = \\\n                ContentType.objects.get_for_model(Location)\n            cls.username = \"test-admin\"\n            cls.password = \"test-admin\"\n            cls.superuser = User.objects.create_superuser(\n                username=cls.username,\n                password=cls.password,\n                email=\"\",\n            )\n\n        @classmethod\n        def tearDownClass(cls):\n            super(JSSetLikeViewTest, cls).tearDownClass()\n            cls.location.delete()\n            cls.superuser.delete()\n\n        def test_authenticated_json_set_like(self):\n            from .views import json_set_like\n            mock_request = mock.Mock()\n            mock_request.user = self.superuser\n            mock_request.method = \"POST\"\n            response = json_set_like(\n                mock_request,\n                self.content_type.pk,\n                self.location.pk\n            )\n            expected_result = json.dumps({\n                \"success\": True,\n                \"action\": \"added\",\n                \"obj\": self.location.title,\n                \"count\": Location.objects.count(),\n            })\n            self.assertJSONEqual(\n                response.content,\n                expected_result\n            )\n\n        def test_anonymous_json_set_like(self):\n            from .views import json_set_like\n            mock_request = mock.Mock()\n            mock_request.user.is_authenticated.return_value = \\\n                False\n            mock_request.method = \"POST\"\n            response = json_set_like(\n                mock_request,\n                self.content_type.pk,\n                self.location.pk\n            )\n            expected_result = json.dumps({\n                \"success\": False,\n            })\n            self.assertJSONEqual(\n                response.content,\n                expected_result\n            )\n    ```", "```py\n    (myproject_env)$ python manage.py test likes\n    Creating test database for alias 'default'...\n    ..\n    --------------------------------------------------------\n    Ran 2 tests in 0.093s\n\n    OK\n    Destroying test database for alias 'default'...\n\n    ```", "```py\ndef json_set_like(request, content_type_id, object_id):\n    # ...all the view logic goes here...\n    return HttpResponse(\n        json_str,\n        content_type=\"text/javascript; charset=utf-8\"\n    )\n```", "```py\n>>> import mock\n>>> m = mock.Mock()\n>>> m.whatever.anything().whatsoever\n<Mock name='mock.whatever.anything().whatsoever' id='4464778896'>\n\n```", "```py\n    # bulletin_board/tests.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.contrib.auth.models import User\n    from django.core.urlresolvers import reverse\n    from rest_framework import status\n    from rest_framework.test import APITestCase\n    from .models import Category, Bulletin\n\n    class BulletinTests(APITestCase):\n        @classmethod\n        def setUpClass(cls):\n            super(BulletinTests, cls).setUpClass()\n            cls.superuser, created = User.objects.\\\n                get_or_create(\n                    username=\"test-admin\",\n                )\n            cls.superuser.is_active = True\n            cls.superuser.is_superuser = True\n            cls.superuser.save()\n\n            cls.category = Category.objects.create(\n                title=\"Movies\"\n            )\n\n            cls.bulletin = Bulletin.objects.create(\n                bulletin_type=\"searching\",\n                category=cls.category,\n                title=\"The Matrix\",\n                description=\"There is no Spoon.\",\n                contact_person=\"Aidas Bendoraitis\",\n            )\n            cls.bulletin_to_delete = Bulletin.objects.create(\n                bulletin_type=\"searching\",\n                category=cls.category,\n                title=\"Animatrix\",\n                description=\"Trinity: \"\n                    \"There's a difference, Mr. Ash, \"\n                    \"between a trap and a test.\",\n                contact_person=\"Aidas Bendoraitis\",\n            )\n\n        @classmethod\n        def tearDownClass(cls):\n            super(BulletinTests, cls).tearDownClass()\n            cls.category.delete()\n            cls.bulletin.delete()\n            cls.superuser.delete()\n    ```", "```py\n    def test_list_bulletins(self):\n        url = reverse(\"rest_bulletin_list\")\n        data = {}\n        response = self.client.get(url, data, format=\"json\")\n        self.assertEqual(\n            response.status_code, status.HTTP_200_OK\n        )\n        self.assertEqual(\n            response.data[\"count\"], Bulletin.objects.count()\n        )\n    ```", "```py\n    def test_get_bulletin(self):\n        url = reverse(\"rest_bulletin_detail\", kwargs={\n            \"pk\": self.bulletin.pk\n        })\n        data = {}\n        response = self.client.get(url, data, format=\"json\")\n        self.assertEqual(\n            response.status_code, status.HTTP_200_OK\n        )\n        self.assertEqual(response.data[\"id\"], self.bulletin.pk)\n        self.assertEqual(\n            response.data[\"bulletin_type\"],\n            self.bulletin.bulletin_type\n        )\n        self.assertEqual(\n            response.data[\"category\"][\"id\"],\n            self.category.pk\n        )\n        self.assertEqual(\n            response.data[\"title\"],\n            self.bulletin.title\n        )\n        self.assertEqual(\n            response.data[\"description\"],\n            self.bulletin.description\n        )\n        self.assertEqual(\n            response.data[\"contact_person\"],\n            self.bulletin.contact_person\n        )\n    ```", "```py\n    def test_create_bulletin_allowed(self):\n        # login\n        self.client.force_authenticate(user=self.superuser)\n\n        url = reverse(\"rest_bulletin_list\")\n        data = {\n            \"bulletin_type\": \"offering\",\n            \"category\": {\"title\": self.category.title},\n            \"title\": \"Back to the Future\",\n            \"description\": \"Roads? Where we're going, \"\n                \"we don't need roads.\",\n            \"contact_person\": \"Aidas Bendoraitis\",\n        }\n        response = self.client.post(url, data, format=\"json\")\n        self.assertEqual(\n            response.status_code, status.HTTP_201_CREATED\n        )\n        self.assertTrue(Bulletin.objects.filter(\n            pk=response.data[\"id\"]\n        ).count() == 1)\n\n        # logout\n        self.client.force_authenticate(user=None)\n    ```", "```py\n    def test_create_bulletin_restricted(self):\n        # make sure the user is logged out\n        self.client.force_authenticate(user=None)\n\n        url = reverse(\"rest_bulletin_list\")\n        data = {\n            \"bulletin_type\": \"offering\",\n            \"category\": {\"title\": self.category.title},\n            \"title\": \"Back to the Future\",\n            \"description\": \"Roads? Where we're going, \"\n                \"we don't need roads.\",\n            \"contact_person\": \"Aidas Bendoraitis\",\n        }\n        response = self.client.post(url, data, format=\"json\")\n        self.assertEqual(\n            response.status_code, status.HTTP_403_FORBIDDEN\n        )\n    ```", "```py\n    def test_change_bulletin_allowed(self):\n        # login\n        self.client.force_authenticate(user=self.superuser)\n\n        url = reverse(\"rest_bulletin_detail\", kwargs={\n            \"pk\": self.bulletin.pk\n        })\n\n        # change only title\n        data = {\n            \"bulletin_type\": self.bulletin.bulletin_type,\n            \"category\": {\n                \"title\": self.bulletin.category.title\n            },\n            \"title\": \"Matrix Resurrection\",\n            \"description\": self.bulletin.description,\n            \"contact_person\": self.bulletin.contact_person,\n        }\n        response = self.client.put(url, data, format=\"json\")\n        self.assertEqual(\n            response.status_code, status.HTTP_200_OK\n        )\n        self.assertEqual(response.data[\"id\"], self.bulletin.pk)\n        self.assertEqual(\n            response.data[\"bulletin_type\"], \"searching\"\n        )\n\n        # logout\n        self.client.force_authenticate(user=None)\n    ```", "```py\n    def test_change_bulletin_restricted(self):\n        # make sure the user is logged out\n        self.client.force_authenticate(user=None)\n\n        url = reverse(\"rest_bulletin_detail\", kwargs={\n            \"pk\": self.bulletin.pk\n        })\n        # change only title\n        data = {\n            \"bulletin_type\": self.bulletin.bulletin_type,\n            \"category\": {\n                \"title\": self.bulletin.category.title\n            },\n            \"title\": \"Matrix Resurrection\",\n            \"description\": self.bulletin.description,\n            \"contact_person\": self.bulletin.contact_person,\n        }\n        response = self.client.put(url, data, format=\"json\")\n        self.assertEqual(\n            response.status_code, status.HTTP_403_FORBIDDEN\n        )\n    ```", "```py\n    def test_delete_bulletin_allowed(self):\n        # login\n        self.client.force_authenticate(user=self.superuser)\n\n        url = reverse(\"rest_bulletin_detail\", kwargs={\n            \"pk\": self.bulletin_to_delete.pk\n        })\n        data = {}\n        response = self.client.delete(url, data, format=\"json\")\n        self.assertEqual(\n            response.status_code, status.HTTP_204_NO_CONTENT\n        )\n\n        # logout\n        self.client.force_authenticate(user=None)\n    ```", "```py\n    def test_delete_bulletin_restricted(self):\n        # make sure the user is logged out\n        self.client.force_authenticate(user=None)\n\n        url = reverse(\"rest_bulletin_detail\", kwargs={\n            \"pk\": self.bulletin_to_delete.pk\n        })\n        data = {}\n        response = self.client.delete(url, data, format=\"json\")\n        self.assertEqual(\n            response.status_code, status.HTTP_403_FORBIDDEN\n        )\n    ```", "```py\n    (myproject_env)$ python manage.py test bulletin_board\n    Creating test database for alias 'default'...\n    ........\n    --------------------------------------------------------\n    Ran 8 tests in 0.081s\n\n    OK\n    Destroying test database for alias 'default'...\n\n    ```", "```py\n(myproject_env)$ pip install cookiecutter\n\n```", "```py\n    (myapp_env)$ cookiecutter \\\n    https://github.com/pydanny/cookiecutter-djangopackage.git\n\n    ```", "```py\n    full_name [Your full name here]: Aidas Bendoraitis\n    email [you@example.com]: aidas@bendoraitis.lt\n    github_username [yourname]: archatas\n    project_name [dj-package]: django-likes\n    repo_name [dj-package]: django-likes\n    app_name [djpackage]: likes\n    project_short_description [Your project description goes here]: Django-likes allows your website users to like any object.\n    release_date [2015-10-02]:\n    year [2015]:\n    version [0.1.0]:\n\n    ```", "```py\n    (myapp_env)$ pip install -r requirements-test.txt\n    (myapp_env)$ python runtests.py\n\n    ```", "```py\n    (myapp_env)$ python setup.py sdist\n\n    ```", "```py\n    (myproject_env)$ pip install django-likes-0.1.0.tar.gz\n    (myproject_env)$ pip uninstall django-likes\n\n    ```", "```py\n    (myapp_env)$ python setup.py register\n    (myapp_env)$ python setup.py publish\n\n    ```", "```py\n    # myproject/conf/base.py or myproject/settings.py\n    LOGGING = {\n        \"version\": 1,\n        \"disable_existing_loggers\": False,\n        \"filters\": {\n            \"require_debug_false\": {\n                \"()\": \"django.utils.log.RequireDebugFalse\",\n            },\n            \"require_debug_true\": {\n                \"()\": \"django.utils.log.RequireDebugTrue\",\n            },\n        },\n        \"handlers\": {\n            \"console\": {\n                \"level\": \"INFO\",\n                \"filters\": [\"require_debug_true\"],\n                \"class\": \"logging.StreamHandler\",\n            },\n            \"null\": {\n                \"class\": \"django.utils.log.NullHandler\",\n            },\n            \"mail_admins\": {\n                \"level\": \"ERROR\",\n                \"filters\": [\"require_debug_false\"],\n                \"class\": \"django.utils.log.AdminEmailHandler\",\n     \"include_html\": True,\n            }\n        },\n        \"loggers\": {\n            \"django\": {\n                \"handlers\": [\"console\"],\n            },\n            \"django.request\": {\n                \"handlers\": [\"mail_admins\"],\n                \"level\": \"ERROR\",\n                \"propagate\": False,\n            },\n            \"django.security\": {\n                \"handlers\": [\"mail_admins\"],\n                \"level\": \"ERROR\",\n                \"propagate\": False,\n            },\n            \"py.warnings\": {\n                \"handlers\": [\"console\"],\n            },\n        }\n    }\n    ```", "```py\n        $ ssh root@myproject.com\n        root@myproject.com's password:\n\n        $ nano /etc/mysql/my.cnf\n\n        ```", "```py\n        [client]\n        default-character-set=utf8\n\n        [mysql]\n        default-character-set=utf8\n\n        [mysqld]\n        collation-server=utf8_unicode_ci\n        init-connect='SET NAMES utf8'\n        character-set-server=utf8\n\n        ```", "```py\n        $ /etc/init.d/mysql restart\n\n        ```", "```py\n    $ ssh myproject@myproject.com\n    myproject@myproject.com's password:\n\n    $ virtualenv . --system-site-packages\n    $ echo source ~/bin/activate >> .bashrc\n    $ source ~/bin/activate\n    (myproject)myproject@server$\n\n    ```", "```py\n        (myproject)myproject@server$ ssh-keygen\n        (myproject)myproject@server$ ssh-agent /bin/bash\n        (myproject)myproject@server$ ssh-add ~/.ssh/id_rsa\n        (myproject)myproject@server$ cat ~/.ssh/id_rsa.pub\n\n        ```", "```py\n    (myproject)myproject@server$ git clone \\\n    git@bitbucket.org:somebitbucketuser/myproject.git myproject\n\n    ```", "```py\n    (myproject)myproject@server$ pip install -r requirements.txt\n\n    ```", "```py\n    # /home/myproject/project/myproject/myproject/local_settings.py\n    DATABASES = {\n        \"default\": {\n            \"ENGINE\": \"django.db.backends.mysql\",\n            \"NAME\": \"myproject\",\n            \"USER\": \"myproject\",\n            \"PASSWORD\": \"mypassword\",\n        }\n    }\n    PREPEND_WWW = True\n    DEBUG = False\n    ALLOWED_HOSTS = [\"myproject.com\"]\n    ```", "```py\n    (myproject)myproject@server$ python manage.py dbshell < \\\n    ~/db_backups/db.sql\n\n    ```", "```py\n    (myproject)myproject@server$ python manage.py collectstatic \\\n    --noinput\n\n    ```", "```py\n    # /home/myproject/public_html/my.wsgi\n    #!/home/myproject/bin/python\n    # -*- coding: utf-8 -*-\n    import os, sys, site\n    django_path = os.path.abspath(\n        os.path.join(os.path.dirname(__file__),\n        \"../lib/python2.6/site-packages/\"),\n    )\n    site.addsitedir(django_path)\n    project_path = os.path.abspath(\n        os.path.join(os.path.dirname(__file__),\n        \"../project/myproject\"),\n    )\n    sys.path += [project_path]\n    os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"myproject.settings\"\n    from django.core.wsgi import get_wsgi_application\n    application = get_wsgi_application()\n    ```", "```py\n    # /home/myproject/public_html/.htaccess\n    AddHandler wsgi-script .wsgi\n    DirectoryIndex index.html\n    RewriteEngine On\n    RewriteBase /\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME}/index.html !-f\n    RewriteCond %{REQUEST_URI} !^/media/\n    RewriteCond %{REQUEST_URI} !^/static/\n    RewriteRule ^(.*)$ /my.wsgi/$1 [QSA,L]\n    ```", "```py\n    # /home/myproject/public_html/.htaccess_maintenance\n    AddHandler wsgi-script .wsgi\n    DirectoryIndex index.html\n    RewriteEngine On\n    RewriteBase /\n    RewriteCond %{REMOTE_HOST} !^1\\.2\\.3\\.4$\n    RewriteCond %{REQUEST_URI} !/temporarily-offline\\.html\n    RewriteCond %{REQUEST_URI} !^/media/\n    RewriteCond %{REQUEST_URI} !^/static/\n    RewriteRule .* /temporarily-offline.html [R=302,L]\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME}/index.html !-f\n    RewriteCond %{REQUEST_URI} !^/media/\n    RewriteCond %{REQUEST_URI} !^/static/\n    RewriteRule ^(.*)$ /my.wsgi/$1 [QSA,L]\n    ```", "```py\n    <!-- /home/myproject/public_html/temporarily-offline.html -->\n    The site is being updated... Please come back later.\n    ```", "```py\n        $ nano /etc/apache2/sites-available/myproject.mydomain.conf\n\n        ```", "```py\n        Options -Indexes\n        AliasMatch ^/static/\\d+/(.*) \\\n            \"/home/myproject/project/myproject/static/$1\"\n        AliasMatch ^/media/(.*) \\\n            \"/home/myproject/project/myproject/media/$1\"\n        <FilesMatch \"\\.(ico|pdf|flv|jpe?g|png|gif|js|css|swf)$\">\n            ExpiresActive On\n            ExpiresDefault \"access plus 1 year\"\n        </FilesMatch>\n        ```", "```py\n        $ /etc/init.d/apache2 restart\n\n        ```", "```py\n    (myproject)myproject@server$ mkdir commands\n    (myproject)myproject@server$ mkdir db_backups\n    (myproject)myproject@server$ mkdir logs\n\n    ```", "```py\n    # /home/myproject/commands/cleanup.sh\n    #! /usr/bin/env bash\n    PROJECT_PATH=/home/myproject\n    CRON_LOG_FILE=${PROJECT_PATH}/logs/cleanup.log\n\n    echo \"Cleaning up the database\" > ${CRON_LOG_FILE}\n    date >> ${CRON_LOG_FILE}\n\n    cd ${PROJECT_PATH}\n    . bin/activate\n    cd project/myproject\n    python manage.py cleanup --traceback >> \\\n    ${CRON_LOG_FILE}  2>&1\n    ```", "```py\n    (myproject)myproject@server$ chmod +x cleanup.sh\n\n    ```", "```py\n    # /home/myproject/commands/cleanup.sh\n    #! /usr/bin/env bash\n    PROJECT_PATH=/home/myproject\n    CRON_LOG_FILE=${PROJECT_PATH}/logs/backup_db.log\n    WEEK_DATE=$(LC_ALL=en_US.UTF-8 date +\"%w-%A\")\n    BACKUP_PATH=${PROJECT_PATH}/db_backups/${WEEK_DATE}.sql\n    DATABASE=myproject\n    USER=my_db_user\n    PASS=my_db_password\n\n    EXCLUDED_TABLES=(\n    django_session\n    )\n\n    IGNORED_TABLES_STRING=''\n    for TABLE in \"${EXCLUDED_TABLES[@]}\"\n    do :\n        IGNORED_TABLES_STRING+=\\\n        \" --ignore-table=${DATABASE}.${TABLE}\"\n    done\n\n    echo \"Creating DB Backup\" > ${CRON_LOG_FILE}\n    date >> ${CRON_LOG_FILE}\n\n    cd ${PROJECT_PATH}\n    mkdir -p db_backups\n\n    echo \"Dump structure\" >> ${CRON_LOG_FILE}\n    mysqldump -u ${USER} -p${PASS} --single-transaction \\\n    --no-data ${DATABASE} > ${BACKUP_PATH} 2>> ${CRON_LOG_FILE}\n\n    echo \"Dump content\" >> ${CRON_LOG_FILE}\n    mysqldump -u ${USER} -p${PASS} ${DATABASE} \\\n    ${IGNORED_TABLES_STRING} >> ${BACKUP_PATH} 2>> \\\n    ${CRON_LOG_FILE}\n    ```", "```py\n    (myproject)myproject@server$ chmod +x backup_db.sh\n\n    ```", "```py\n    (myproject)myproject@server$ ./cleanup.sh\n    (myproject)myproject@server$ ./backup_db.sh\n\n    ```", "```py\n    00 01 * * * /home/myproject/commands/cleanup.sh\n    00 02 * * * /home/myproject/commands/backup_db.sh\n\n    ```", "```py\n    (myproject)myproject@server$ crontab -e crontab.txt\n\n    ```", "```py\n00 01 * * * /home/myproject/commands/cleanup.sh\n\n```", "```py\n(myproject_env)$ fab staging deploy\n\n```", "```py\n$ pip install fabric\n\n```", "```py\n# fabfile.py\n# -*- coding: UTF-8 -*-\nfrom fabric.api import env, run, prompt, local, get, sudo\nfrom fabric.colors import red, green\nfrom fabric.state import output\n\nenv.environment = \"\"\nenv.full = False\noutput['running'] = False\n\nPRODUCTION_HOST = \"myproject.com\"\nPRODUCTION_USER = \"myproject\"\n\ndef dev():\n    \"\"\" chooses development environment \"\"\"\n    env.environment = \"dev\"\n    env.hosts = [PRODUCTION_HOST]\n    env.user = PRODUCTION_USER\n    print(\"LOCAL DEVELOPMENT ENVIRONMENT\\n\")\n\ndef staging():\n    \"\"\" chooses testing environment \"\"\"\n    env.environment = \"staging\"\n    env.hosts = [\"staging.myproject.com\"]\n    env.user = \"myproject\"\n    print(\"STAGING WEBSITE\\n\")\n\ndef production():\n    \"\"\" chooses production environment \"\"\"\n    env.environment = \"production\"\n    env.hosts = [PRODUCTION_HOST]\n    env.user = PRODUCTION_USER\n    print(\"PRODUCTION WEBSITE\\n\")\n\ndef full():\n    \"\"\" all commands should be executed without questioning \"\"\"\n    env.full = True\n\ndef deploy():\n    \"\"\" updates the chosen environment \"\"\"\n    if not env.environment:\n        while env.environment not in (\"dev\", \"staging\",\n            \"production\"):\n            env.environment = prompt(red('Please specify target'\n                'environment (\"dev\", \"staging\", or '\n                '\"production\"): '))â€©            print\n    globals()[\"_update_%s\" % env.environment]()\n```", "```py\n    def _update_dev():\n        \"\"\" updates development environment \"\"\"\n        run(\"\")  # password request\n        print\n\n        if env.full or \"y\" == prompt(red(\"Get latest \"\n            \"production database (y/n)?\"), default=\"y\"):\n            print(green(\" * creating production-database \"\n                \"dump...\"))\n            run(\"cd ~/db_backups/ && ./backup_db.sh --latest\")\n            print(green(\" * downloading dump...\"))\n            get(\"~/db_backups/db_latest.sql\",\n                \"tmp/db_latest.sql\")\n            print(green(\" * importing the dump locally...\"))\n            local(\"python manage.py dbshell < \"\n                \"tmp/db_latest.sql && rm tmp/db_latest.sql\")\n            print\n            if env.full or \"y\" == prompt(\"Call prepare_dev \"\n               \"command (y/n)?\", default=\"y\"):\n                print(green(\" * preparing data for \"\n                    \"development...\"))\n                local(\"python manage.py prepare_dev\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Download media \"\n            \"uploads (y/n)?\"), default=\"y\"):\n            print(green(\" * creating an archive of media \"\n                \"uploads...\"))\n            run(\"cd ~/project/myproject/media/ \"\n                \"&& tar -cz -f \"\n                \"~/project/myproject/tmp/media.tar.gz *\")\n            print(green(\" * downloading archive...\"))\n            get(\"~/project/myproject/tmp/media.tar.gz\",\n                \"tmp/media.tar.gz\")\n            print(green(\" * extracting and removing archive \"\n                \"locally...\"))\n            for host in env.hosts:\n                local(\"cd media/ \"\n                    \"&& tar -xzf ../tmp/media.tar.gz \"\n                    \"&& rm tmp/media.tar.gz\")\n            print(green(\" * removing archive from the \"\n                \"server...\"))\n            run(\"rm ~/project/myproject/tmp/media.tar.gz\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Update code (y/n)?\"),\n            default=\"y\"):\n            print(green(\" * updating code...\"))\n            local(\"git pull\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Migrate database \"\n            \"schema (y/n)?\"), default=\"y\"):\n            print(green(\" * migrating database schema...\"))\n            local(\"python manage.py migrate --no-initial-data\")\n            local(\"python manage.py syncdb\")\n        print\n    ```", "```py\n    def _update_staging():\n        \"\"\" updates testing environment \"\"\"\n        run(\"\")  # password request\n        print\n\n        if env.full or \"y\" == prompt(red(\"Set under-\"\n            \"construction screen (y/n)?\"), default=\"y\"):\n            print(green(\" * Setting maintenance screen\"))\n            run(\"cd ~/public_html/ \"\n                \"&& cp .htaccess_under_construction .htaccess\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Stop cron jobs \"\n            \" (y/n)?\"), default=\"y\"):\n            print(green(\" * Stopping cron jobs\"))\n            sudo(\"/etc/init.d/cron stop\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Get latest \"\n            \"production database (y/n)?\"), default=\"y\"):\n            print(green(\" * creating production-database \"\n                \"dump...\"))\n            run(\"cd ~/db_backups/ && ./backup_db.sh --latest\")\n            print(green(\" * downloading dump...\"))\n            run(\"scp %(user)s@%(host)s:\"\n                \"~/db_backups/db_latest.sql \"\n                \"~/db_backups/db_latest.sql\" % {\n                    \"user\": PRODUCTION_USER,\n                    \"host\": PRODUCTION_HOST,\n                }\n            )\n            print(green(\" * importing the dump locally...\"))\n            run(\"cd ~/project/myproject/ && python manage.py \"\n                \"dbshell < ~/db_backups/db_latest.sql\")\n            print\n            if env.full or \"y\" == prompt(red(\"Call \"\n                \" prepare_staging command (y/n)?\"),\n                default=\"y\"):\n                print(green(\" * preparing data for \"\n                    \" testing...\"))\n                run(\"cd ~/project/myproject/ \"\n                    \"&& python manage.py prepare_staging\")\n        print\n        if env.full or \"y\" == prompt(red(\"Get latest media \"\n            \" (y/n)?\"), default=\"y\"):\n            print(green(\" * updating media...\"))\n            run(\"scp -r %(user)s@%(host)s:\"\n                \"~/project/myproject/media/* \"\n                \" ~/project/myproject/media/\" % {\n                    \"user\": PRODUCTION_USER,\n                    \"host\": PRODUCTION_HOST,\n                }\n            )\n        print\n\n        if env.full or \"y\" == prompt(red(\"Update code (y/n)?\"),\n            default=\"y\"):\n            print(green(\" * updating code...\"))\n            run(\"cd ~/project/myproject \"\n                \"&& git pull\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Collect static \"\n            \"files (y/n)?\"), default=\"y\"):\n            print(green(\" * collecting static files...\"))\n            run(\"cd ~/project/myproject \"\n                \"&& python manage.py collectstatic --noinput\")\n        print\n\n        if env.full or \"y\" == prompt(red('Migrate database \"\n            \" schema (y/n)?'), default=\"y\"):\n            print(green(\" * migrating database schema...\"))\n            run(\"cd ~/project/myproject \"\n                \"&& python manage.py migrate \"\n                \"--no-initial-data\")\n            run(\"cd ~/project/myproject \"\n                \"&& python manage.py syncdb\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Restart webserver \"\n            \"(y/n)?\"), default=\"y\"):\n            print(green(\" * Restarting Apache\"))\n            sudo(\"/etc/init.d/apache2 graceful\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Start cron jobs \"\n            \"(y/n)?\"), default=\"y\"):\n            print(green(\" * Starting cron jobs\"))\n            sudo(\"/etc/init.d/cron start\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Unset under-\"\n            \"construction screen (y/n)?\"), default=\"y\"):\n            print(green(\" * Unsetting maintenance screen\"))\n            run(\"cd ~/public_html/ \"\n                \"&& cp .htaccess_live .htaccess\")\n        print\n    ```", "```py\n    def _update_production():\n        \"\"\" updates production environment \"\"\"\n        if \"y\" != prompt(red(\"Are you sure you want to \"\n            \"update \" + red(\"production\", bold=True) + \\\n            \" website (y/n)?\"), default=\"n\"):\n            return\n\n        run(\"\")  # password request\n        print\n\n        if env.full or \"y\" == prompt(red(\"Set under-\"\n            \"construction screen (y/n)?\"), default=\"y\"):\n            print(green(\" * Setting maintenance screen\"))\n            run(\"cd ~/public_html/ \"\n                \"&& cp .htaccess_under_construction .htaccess\")\n        print\n        if env.full or \"y\" == prompt(red(\"Stop cron jobs\"\n            \" (y/n)?\"), default=\"y\"):\n            print(green(\" * Stopping cron jobs\"))\n            sudo(\"/etc/init.d/cron stop\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Backup database \"\n            \"(y/n)?\"), default=\"y\"):\n            print(green(\" * creating a database dump...\"))\n            run(\"cd ~/db_backups/ \"\n                \"&& ./backup_db.sh\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Update code (y/n)?\"),\n            default=\"y\"):\n            print(green(\" * updating code...\"))\n            run(\"cd ~/project/myproject/ \"\n                \"&& git pull\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Collect static \"\n            \"files (y/n)?\"), default=\"y\"):\n            print(green(\" * collecting static files...\"))\n            run(\"cd ~/project/myproject \"\n                \"&& python manage.py collectstatic --noinput\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Migrate database \"\n            \"schema (y/n)?\"), default=\"y\"):\n            print(green(\" * migrating database schema...\"))\n            run(\"cd ~/project/myproject \"\n                \"&& python manage.py migrate \"\n                \"--no-initial-data\")\n            run(\"cd ~/project/myproject \"\n                \"&& python manage.py syncdb\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Restart webserver \"\n            \"(y/n)?\"), default=\"y\"):\n            print(green(\" * Restarting Apache\"))\n            sudo(\"/etc/init.d/apache2 graceful\")\n        print\n        if env.full or \"y\" == prompt(red(\"Start cron jobs \"\n            \"(y/n)?\"), default=\"y\"):\n            print(green(\" * Starting cron jobs\"))\n            sudo(\"/etc/init.d/cron start\")\n        print\n\n        if env.full or \"y\" == prompt(red(\"Unset under-\"\n            \"construction screen (y/n)?\"), default=\"y\"):\n            print(green(\" * Unsetting maintenance screen\"))\n            run(\"cd ~/public_html/ \"\n                \"&& cp .htaccess_live .htaccess\")\n        print\n    ```", "```py\n(myproject_env)$ fab --list\nAvailable commands:\n deploy      updates the chosen environment\n dev         chooses development environment\n full        all commands should be executed without questioning\n production  chooses production environment\n staging     chooses testing environment\n\n```", "```py\n    (myproject_env)$ fab dev deploy\n\n    ```", "```py\n    Get latest production database (y/n)? [y] _\n\n    ```", "```py\n    (myproject_env)$ fab staging deploy\n\n    ```", "```py\n    (myproject_env)$ fab production deploy\n\n    ```", "```py\n(myproject_env)$ fab dev full deploy\n\n```", "```py\nscp -r myproject_user@myproject.com:/path/on/production/server/* \\\n/path/on/staging/server/\n\n```", "```py\nprint(green(\" * migrating database schema...\"))\n\n```", "```py\n# ~/db_backups/backup_db.sh\n#!/bin/bash\nif [[ $1 = '--latest' ]]\nthen\n    today=\"latest\"\nelse\n    today=$(date +%Y-%m-%d-%H%M)\nfi\nmysqldump --opt -u my_db_user -pmy_db_password myproject > \\\n    db_$today.sql\n```", "```py\n$ chmod +x backup_db.sh\n\n```", "```py\n$ ./backup_db.sh\n\n```", "```py\n$ ./backup_db.sh --latest\n\n```"]