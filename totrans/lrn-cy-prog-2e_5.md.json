["```py\n#ifndef __MY_HEADER_H__\n#define __MY_HEADER_H__\n\nnamespace mynamespace {\n….\n}\n\n#endif //__MY_HEADER_H__\n```", "```py\ncdef extern from \"header.h\" namespace \"mynamespace\":\n    …\n```", "```py\nimport cythonfile\ncythonfile.mynamespace.attribute\n\n```", "```py\n#ifndef __MY_HEADER_H__\n#define __MY_HEADER_H__\n\nnamespace mynamespace {\n  void myFunc (void);\n\n  class myClass {\n  public:\n    int x;\n    void printMe (void);\n  };\n}\n\n#endif //__MY_HEADER_H__\n```", "```py\ncdef extern from \"myheader.h\" namespace \"mynamespace\":\n    void myFunc ()\n    cppclass myClass:\n        int x\n        void printMe ()\n```", "```py\n class Car {\n    int doors;\n    int wheels;\n  public:\n Car ();\n ~Car ();\n    void printCar (void);\n    void setWheels (int x) { wheels = x; };\n    void setDoors (int x) { doors = x; };\n  };\n```", "```py\ncdef extern from \"cppcode.h\" namespace \"mynamespace\":\n    cppclass Car:\n Car ()\n        void printCar ()\n        void setWheels (int)\n        void setDoors (int)\n```", "```py\ncdef Car * c = new Car ()\n```", "```py\ndel c\n\n```", "```py\n$ cd chapter5/cppalloc; make; ./test\nCar constructor\nCar has 3 doors and 4 wheels\nCar destructor\n\n```", "```py\ncdef Car c\n```", "```py\ncpycode.pyx:13:6: Deletion of non-heap C++ object\n\n```", "```py\nnamespace mynamespace {\n  class mycppexcept: public std::exception {\n virtual const char * what () const throw () {\n return \"C++ exception happened\";\n    }\n  };\n\n  void myFunc (void) throw (mycppexcept);\n}\n```", "```py\nvoid mynamespace::myFunc (void) throw (mynamespace::mycppexcept) {\n  mynamespace::mycppexcept ex;\n  cout << \"About to throw an exception!\" << endl;\n throw ex;\n}\n```", "```py\ncdef extern from \"myheader.h\" namespace \"mynamespace\":\n    void myFunc () except +RuntimeError\n\n```", "```py\n>>> import cpycode\nAbout to throw an exception!\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"cpycode.pyx\", line 3, in init cpycode (cpycode.cpp:763)\n myFunc ()\nRuntimeError: C++ exception happened\n>>> ^D\n\n```", "```py\ntry:\n...\nexcept RuntimeError:\n...\n```", "```py\n$ cd chapter5/cppexceptions; make; python\nPython 2.7.2 (default, Oct 11 2012, 20:14:37)\n[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import cpycode\nAbout to throw an exception!\nSegmentation fault: 11\n\n```", "```py\nfrom libcpp cimport bool\n\n```", "```py\nfrom cpython cimport bool\n\n```", "```py\ncdef foobar (int)\ncdef foobar (int, int)\n…\n```", "```py\nnamespace mynamespace {\n  class Car {\n    int doors;\n    int wheels;\n  public:\n    Car ();\n    ~Car ();\n Car * operator+(Car *);\n    void printCar (void);\n    void setWheels (int x) { wheels = x; };\n    void setDoors (int x) { doors = x; };\n  };\n};\n```", "```py\nInvalid operand types for '+' (Car *; Car *)\n\n```", "```py\ncdef extern from \"cppcode.h\" namespace \"mynamespace\":\n    cppclass Car:\n        Car ()\n Car * operator+ (Car *)\n        void printCar ()\n        void setWheels (int)\n        void setDoors (int)\n```", "```py\ncdef Car * ccc = c[0] + cc\nccc.printCar ()\n```", "```py\n$ cd chapter5/cppoverloading; make; ./test\nCar constructor\nCar constructor\nCar has 3 doors and 4 wheels\nCar has 6 doors and 8 wheels\ninside operator +\nCar constructor\nCar has 9 doors and 12 wheels\n\n```", "```py\ncppclass LinkedList[T]:\n        LinkedList ()\n        void append (T)\n        int getLength ()\n...\n```", "```py\nnamespace mynamespace {\n  class myClass {\n    public:\n static void myStaticMethod (void);\n  };\n}\n```", "```py\ncdef extern from \"header.h\" namespace \"mynamespace::myClass\":\n    void myStaticMethod ()\n\n```", "```py\nextern \"C\" { … }\n```", "```py\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\n\nsetup (ext_modules = cythonize(\n    \"mycython.pyx\",\n    sources = [\"mysource.cc\"],\n language = \"c++\",\n))\n```", "```py\nclass MessageServer(threading.Thread):\n\n    _port = None\n\n    def __init__ (self, port):\n        threading.Thread.__init__(self)\n        # self.daemon = True\n        self._port = port\n\n    @property\n    def roster(self):\n        return _ROSTER\n\n    @property\n    def port(self):\n        return self._port\n\n    @staticmethod\n    def set_callbacks():\n        SetConnectCallback(pyconnect_callback)\n        SetDisconnectCallback(pydisconnect_callback)\n        SetReadCallback(pyread_callback)\n\n    def stop(self):\n        with nogil:\n            StopServer();\n\n    def run(self):\n        logging.info(\"Starting Server on localhost:%i\" % self.port)\n        MessageServer.set_callbacks()\n        cdef int cport = self.port\n        with nogil:\n            StartServer(cport)\n        logging.info(\"Message Server Finished\")\n\n```", "```py\n   # start libevent server\n    message_server = MessageServer(port)\n    message_server.start()\n```", "```py\nfrom flask import Flask\nfrom flask import jsonify\n\napp = Flask(\"DashboardExample\")\ndashboard = None\n\n@app.route(\"/\")\ndef status():\n    return jsonify(dashboard.roster.client_list())\n\nclass Dashboard:\n\n    _port = None\n    _roster = None\n\n    def __init__(self, port, roster):\n        global dashboard\n        self._port = port\n        self._roster = roster\n        dashboard = self\n\n    @property\n    def port(self):\n        return self._port\n\n    @property\n    def roster(self):\n        return self._roster\n\n    def start(self):\n        app.run(port=self.port)\n```", "```py\n# start webserver\ndashboard = Dashboard(port, roster)\ndashboard.start()\n```", "```py\n   # stop message server\nmessage_server.stop()\n```", "```py\n[MessageServer]\nport = 8080\nwebport = 8081\n```", "```py\nclass Roster:\n\n    _clients = { }\n\n    def handle_connect_event(self, client):\n        \"\"\"\n        :returns True if client already exists else false\n        \"\"\"\n        logging.info(\"connect: %s\" % client)\n        if client in self._clients:\n            return True\n        self._clients[client] = None\n        return False;\n\n    def handle_disconnect_event(self, client):\n        logging.info(\"disconnect: %s\" % client)\n        self._clients.pop(client, None)\n\n    def handle_read_event(self, client, message):\n        logging.info(\"read: %s:[%s]\" % (client, message))\n        self._clients[client] = message\n\n    def client_list(self):\n        return self._clients\n```", "```py\n$ python server --config=config.cfg\n```", "```py\n$ telnet localhost 8080\n```", "```py\n$ curl -X GET localhost:8081\n{\n  \"127.0.0.1\": \"Hello World\"\n}\n```", "```py\n PyGILState_STATE gilstate_save = PyGILState_Ensure();\n readcb (client, (char *)data);\n PyGILState_Release(gilstate_save);\n```", "```py\n  PyGILState_STATE gilstate_save = PyGILState_Ensure();\n discb (client, NULL);\n PyGILState_Release(gilstate_save);\n```", "```py\n PyGILState_STATE gilstate_save = PyGILState_Ensure();\n  if (!conncb (NULL, inet_ntoa (client_addr.sin_addr)))\n    {\n…\n    }\n else\n    close (client_fd);\n PyGILState_Release(gilstate_save);\n\n```", "```py\nfrom libcpp.vector cimport vector\n\nPASSED = False\n\ncdef vector[int] vect\ncdef int i\nfor i in range(10):\n    vect.push_back(i)\nfor i in range(10):\n    print vect[i]\n\nPASSED = True\n```", "```py\nfrom libcpp.map cimport map\n\nPASSED = False\n\ncdef map[int,int] mymap\ncdef int i\nfor i in range (10):\n    mymap[i] = (i + 1)\n\nfor i in range (10):\n    print mymap[i]\n\nPASSED = True\n```", "```py\n#!/usr/bin/env python\nprint \"Cython C++ Unit test executor\"\n\nprint \"[TEST] std::map\"\nimport testmap\nassert testmap.PASSED\nprint \"[PASS]\"\n\nprint \"[TEST] std::vec\"\nimport testvec\nassert testvec.PASSED\nprint \"[PASS]\"\n\nprint \"Done...\"\n```", "```py\ncimport cython\n\n@cython.final\ncdef class A: pass\n\ncdef class B (A): pass\n```", "```py\npycode.pyx:7:5: Base class 'A' of type 'B' is final\n\n```", "```py\n ls -liah\ntotal 480184\n7849156 drwxr-xr-x   5 redbrain  staff   170B 25 Jul 16:42 ./\n5803438 drwxr-xr-x  11 redbrain  staff   374B 25 Jul 16:41 ../\n7849208 -rw-r--r--@  1 redbrain  staff   222M  9 Mar 04:27 EPAXMLDownload.xml\n7849030 -rw-r--r--@  1 redbrain  staff    12M 25 Jul 16:38 EPAXMLDownload.zip\n7849174 -rw-r--r--   1 redbrain  staff    57B 25 Jul 16:42 README\n\n```", "```py\nfrom xml.etree import ElementTree as etree\n\n```", "```py\n xmlroot = etree.parse (__xmlFile)\n```", "```py\nheaders = xmlroot.findall ('Header')\nfacs = xmlroot.findall ('FacilitySite')\n```", "```py\n   try:\n        fd = open (__output, \"wb\")\n        for i in facs:\n            location = \"\"\n            for y in i:\n                if isinstance (y.text, basestring):\n                    location += y.tag + \": \" + y.text + '\\n'\n            fd.write (location)\n    # There is some dodgy unicode character\n    # python doesn't like just ignore it\n    except UnicodeEncodeError: pass\n    except:\n        print \"Unexpected error:\", sys.exc_info()[0]\n        raise\n    finally:\n        if fd: fd.close ()\n```", "```py\n10-4-5-52:bigData redbrain$ time python pyparse.py\nUSEPA Geospatial DataEnvironmental Protection AgencyUSEPA Geospatial DataThis XML file was produced by US EPA and contains data specifying the locations of EPA regulated facilities or cleanups that are being provided by EPA for use by commercial mapping services and others with an interest in using this information. Updates to this file are produced on a regular basis by EPA and those updates as well as documentation describing the contents of the file can be found at URL:http://www.epa.gov/enviro\nMAR-08-2013\n[INFO] Number of Facilties 118421\n[INFO] Dumping facilities to xmlout.dat\n\nreal    2m21.936s\nuser    1m58.260s\nsys     0m9.5800s\n\n```", "```py\n10-4-5-52:bigData redbrain$ sudo pip install lxml\n\n```", "```py\nfrom lxml import etree\n\n```", "```py\n10-4-5-52:bigData redbrain$ time ./cpyparse\nUSEPA Geospatial DataEnvironmental Protection AgencyUSEPA Geospatial DataThis XML file was produced by US EPA and contains data specifying the locations of EPA regulated facilities or cleanups that are being provided by EPA for use by commercial mapping services and others with an interest in using this information. Updates to this file are produced on a regular basis by EPA and those updates as well as documentation describing the contents of the file can be found at URL:http://www.epa.gov/enviro\nMAR-08-2013\n[INFO] Number of Facilties 118421\n[INFO] Dumping facilities to xmlout.dat\n\nreal    0m7.874s\nuser    0m5.307s\nsys     0m1.839s\n\n```", "```py\n10-4-5-52:bigData redbrain$ md5 xmlout.dat xmlout.dat.cython\nMD5 (xmlout.dat.python) = c2103a2252042f143489216b9c238283\nMD5 (xmlout.dat.cython) = c2103a2252042f143489216b9c238283\n\n```"]