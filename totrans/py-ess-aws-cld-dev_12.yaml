- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Reference Project on AWS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS上的参考项目
- en: In this chapter, we are going to create a sample application with Python on
    AWS. This is the final chapter of the book. We have learned about different AWS
    services and implemented sample Python applications with these services. In this
    chapter, we will use multiple services to create an end-to-end Python application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Python在AWS上创建一个示例应用程序。这是本书的最后一章。我们已经了解了不同的AWS服务，并使用这些服务实现了示例Python应用程序。在本章中，我们将使用多个服务创建一个端到端的Python应用程序。
- en: 'The chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: What have we learned?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们学到了什么？
- en: Introducing the end-to-end Python application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍端到端的Python应用程序
- en: The coding of the Python application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python应用程序的编码
- en: What have we learned?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们学到了什么？
- en: 'AWS has more than a hundred services, and we have learned about the important
    Python-related services. Let’s walk through those services:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: AWS拥有超过一百项服务，我们已经了解了重要的Python相关服务。让我们浏览这些服务：
- en: '**Lambda**: Lambda is a cloud computing service that allows you to run Python
    applications. You don’t need to provision any server; Lambda manages the infrastructure.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lambda**：Lambda是一种云计算服务，允许您运行Python应用程序。您不需要配置任何服务器；Lambda管理基础设施。'
- en: '**EC2**: EC2 provides a server machine in the cloud. You can create a server
    and install the required applications, or whatever you want.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EC2**：EC2在云中提供服务器机器。您可以创建服务器并安装所需的应用程序，或您想要的任何东西。'
- en: '**Elastic Beanstalk**: Elastic Beanstalk is used to deploy Python-based web
    applications.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Elastic Beanstalk**：Elastic Beanstalk用于部署基于Python的Web应用程序。'
- en: '**CloudWatch**: CloudWatch is a logging and monitoring service on AWS. You
    can easily track your services.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CloudWatch**：CloudWatch是AWS上的日志和监控服务。您可以轻松跟踪您的服务。'
- en: '**RDS**: RDS is a relational database service on AWS. If you need a database,
    you can easily create it without managing the server.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RDS**：RDS是AWS上的关系数据库服务。如果您需要数据库，您可以轻松创建它而无需管理服务器。'
- en: '**API Gateway**: API Gateway is used to create, maintain, and publish an application
    programming interface.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API Gateway**：API Gateway用于创建、维护和发布应用程序编程接口。'
- en: '**DynamoDB**: DynamoDB is a key-value database that is used to query and store
    billions of records on AWS. It is also a **NoSQL database**.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DynamoDB**：DynamoDB是一种用于在AWS上查询和存储数十亿记录的键值数据库。它也是一个**NoSQL数据库**。'
- en: '**AWS Glue**: AWS Glue is a data integration service that is used for ETL.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Glue**：AWS Glue是一种用于ETL的数据集成服务。'
- en: Introducing the Python application
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Python应用程序
- en: 'Let us understand the high-level architecture of the Python application:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解Python应用程序的高级架构：
- en: '![](img/Figure_12.01_B19195.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.01_B19195.jpg)'
- en: Figure 12.1 – Project architecture
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 项目架构
- en: The application collects images to be stored in S3 buckets. The API gateway
    is used for integration between clients and the Lambda service. Lambda retrieves
    the information and puts data into S3.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序收集要存储在S3存储桶中的图像。API网关用于客户端和Lambda服务之间的集成。Lambda检索信息并将数据放入S3。
- en: The coding of the Python application
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python应用程序的编码
- en: Let’s implement the application step by step.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步实现应用程序。
- en: Creating S3 buckets to store images
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用于存储图像的S3存储桶
- en: 'In this subsection, we are going to create an S3 bucket to hold images, which
    is uploaded via API Gateway. S3 will store the image and provide it whenever requested:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将创建一个S3存储桶来存储通过API Gateway上传的图像。S3将存储图像并在请求时提供：
- en: 'Create a bucket and click the **Create bucket** button at the bottom of the
    page:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建存储桶并点击页面底部的**创建存储桶**按钮：
- en: '![](img/Figure_12.02_B19195.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.02_B19195.jpg)'
- en: Figure 12.2 – An S3 bucket
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – S3存储桶
- en: 'We filled in the `python-book-image`; you can use whatever you want. After
    adding the **bucket name**, click **Create bucket** to create a new bucket:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们填写了`python-book-image`；您可以使用任何您想要的。在添加**存储桶名称**后，点击**创建存储桶**以创建一个新的存储桶：
- en: '![](img/Figure_12.03_B19195.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.03_B19195.jpg)'
- en: Figure 12.3 – Bucket configuration
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 存储桶配置
- en: We have created an S3 bucket.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建了一个S3存储桶。
- en: Creating Lambda code
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Lambda代码
- en: 'In this subsection, we are going to implement a Lambda code that accepts the
    image upload request from API Gateway and stores the image in the S3 bucket:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将实现一个Lambda代码，该代码接受来自API Gateway的图像上传请求并将图像存储在S3存储桶中：
- en: 'Create a Lambda function via the AWS Management Console. You can see the **Function
    name** field of the Lambda function and **Runtime** in the following screenshot
    within the Lambda creation step:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过AWS管理控制台创建Lambda函数。您可以在以下截图中的Lambda创建步骤中看到Lambda函数的**函数名称**字段和**运行时**：
- en: '![](img/Figure_12.04_B19195.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.04_B19195.jpg)'
- en: Figure 12.4 – The Lambda function
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – Lambda函数
- en: 'Paste the following code to the Lambda code source:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码粘贴到Lambda代码源中：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once pasted, deploy the Lambda function by clicking the **Deploy** button:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 粘贴完成后，通过点击**部署**按钮部署Lambda函数：
- en: '![](img/Figure_12.05_B19195.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.05_B19195.jpg)'
- en: Figure 12.5 – Lambda deployment
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – Lambda部署
- en: Let’s take a look at the code details. First, we import the `json`, `base64`,
    and `boto3` libraries. The `json` library is used to parse data, which comes in
    JSON format, and `boto3` is used to upload files to S3 as well as generate a URL
    for retrieving the file. In addition to that, `base64` is used to decode and encode
    the image.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码的细节。首先，我们导入`json`、`base64`和`boto3`库。`json`库用于解析JSON格式的数据，`boto3`用于将文件上传到S3以及生成用于检索文件的URL。此外，`base64`用于解码和编码图像。
- en: 'The following lines of code are parsing the parameters and decoding the contents
    of the image to store S3\. Hence, we can use the bucket name and S3 filename.
    The bucket name is represented as `bucket` in the code and the S3 filename is
    represented as `s3_file_name`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行正在解析参数并将图像内容解码以存储到S3。因此，我们可以使用存储桶名称和S3文件名。代码中存储桶名称表示为`bucket`，S3文件名表示为`s3_file_name`：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once we have parameters, we can use the `boto3` library to upload the file
    from local to S3:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有参数，我们可以使用`boto3`库将文件从本地上传到S3：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have implemented the code for the application. In order to run this code,
    we have to create permissions, the steps for which are explained in the next subsection.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经实现了应用程序的代码。为了运行此代码，我们必须创建权限，其步骤将在下一小节中解释。
- en: Creating permissions for the services
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建服务权限
- en: 'We are now going to create permissions to upload a file to S3 and call a Lambda
    function from API Gateway:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建权限以将文件上传到S3并从API Gateway调用Lambda函数：
- en: 'Open the IAM role and create a new role for **Lambda**:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IAM角色并创建一个新的角色用于**Lambda**：
- en: '![](img/Figure_12.06_B19195.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.06_B19195.jpg)'
- en: Figure 12.6 – Creating a role
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – 创建角色
- en: 'Select **AmazonS3FullAccess** and **CloudWatchFullAccess** from the list:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择**AmazonS3FullAccess**和**CloudWatchFullAccess**：
- en: '![](img/Figure_12.07_B19195.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.07_B19195.jpg)'
- en: Figure 12.7 – Adding policies
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – 添加策略
- en: 'Click the **Next** button:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮：
- en: '![](img/Figure_12.08_B19195.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.08_B19195.jpg)'
- en: Figure 12.8 – Adding policies
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 – 添加策略
- en: 'Add the role name:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加角色名称：
- en: '![](img/Figure_12.09_B19195.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.09_B19195.jpg)'
- en: Figure 12.9 – Naming the role
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9 – 命名角色
- en: 'Complete creating the role by clicking the **Create** **role** button:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**创建角色**按钮完成创建角色：
- en: '![](img/Figure_12.10_B19195.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.10_B19195.jpg)'
- en: Figure 12.10 – Create role
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10 – 创建角色
- en: 'After creating the role, you will see the role on the list:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建角色后，您将在列表中看到该角色：
- en: '![](img/Figure_12.11_B19195.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.11_B19195.jpg)'
- en: Figure 12.11 – The role on the list
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11 – 列表中的角色
- en: In this subsection, we have created a role to be used in the Lambda function
    to execute the code. Let’s attach the role to the Lambda function.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们创建了一个用于Lambda函数执行代码的角色。现在让我们将此角色附加到Lambda函数。
- en: Attaching the role to the Lambda function
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将角色附加到Lambda函数
- en: 'We are now going to add permissions to the Lambda function:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将向Lambda函数添加权限：
- en: 'Open the Lambda function and click **Permissions** under the **Configuration**
    tab:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Lambda函数并点击**配置**选项卡下的**权限**：
- en: '![](img/Figure_12.12_B19195.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.12_B19195.jpg)'
- en: Figure 12.12 – Lambda permissions
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12 – Lambda权限
- en: 'Edit the permissions and select **LambdaPolicy** from the existing role. This
    role was created in the previous subsection:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑权限并从现有角色中选择**LambdaPolicy**。此角色在上一小节中已创建：
- en: '![](img/Figure_12.13_B19195.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.13_B19195.jpg)'
- en: Figure 12.13 – Attaching the permission
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13 – 添加权限
- en: With this configuration, Lambda is able to execute the code. It is time to start
    implementing API Gateway, which will use a Lambda function as a backed function.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此配置，Lambda能够执行代码。现在是时候开始实现API Gateway了，它将使用Lambda函数作为后端函数。
- en: Creating an API gateway to upload the image
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用于上传图像的API网关
- en: 'In this step, we are going to create an API gateway to upload the image:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the API Gateway service and create a REST API:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.14_B19195.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – Creating a REST API
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide a name for the REST API. We will use the name `UploadImageToS3` in
    this subsection:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.15_B19195.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: Figure 12.15 – Naming the REST API
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Actions** drop-down list, click **Create Method**:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.16_B19195.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: Figure 12.16 – Creating a method
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **POST** from the available options:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.17_B19195.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: Figure 12.17 – The POST method
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use **Lambda Function** as the integration type and scroll down to
    click **Save**:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.18_B19195.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: Figure 12.18 – Lambda integration
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'The API is ready to use. Enable the CORS policy as we explained in [*Chapter
    9*](B19195_09.xhtml#_idTextAnchor013), then click **Deploy API** in the **Actions**
    drop-down list:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.19_B19195.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: Figure 12.19 – Deploying the API
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'We are ready to deploy the API. Add a stage name and click **Deploy**:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.20_B19195.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: Figure 12.20 – Naming the stage
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: In the **Export** tab, there are multiple alternatives to call the API. We will
    use Postman to call the API. **Postman** is a platform that allows you to build
    and test the API. For this application, you can also test another platform such
    as **Swagger**. Postman is an easy way to use and test an API. In the following
    subsection, we will explain how to download and use it. Since it is simpler in
    terms of installation and use, I will proceed with Postman.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Export as Swagger + Postman Extensions** icon; you can export
    and download either the JSON or YAML format:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_12.21_B19195.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: Figure 12.21 – Exporting the API
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: This file will be used in Postman to test the API.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Using Postman to test the API
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have completed the implementation. In this step, we are going to test the
    API via Postman:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and install Postman from the following website: [https://www.postman.com/](https://www.postman.com/).'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Postman application, click the **Import** button:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.22_B19195.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: Figure 12.22 – Importing the API
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the JSON file that we downloaded within API Gateway and click **Open**:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.23_B19195.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: Figure 12.23 – Importing the JSON
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see confirmation of the API. Click **Import** as a final step:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.24_B19195.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: Figure 12.24 – Import the JSON
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have imported the API, you are ready to call the API. In the **POST**
    section, select the **raw** request type with **JSON** as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.25_B19195.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: Figure 12.25 – The raw parameter
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the following JSON to call the API:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let’s break down the JSON file:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '`image_base64` represents the `base64` code of a sample image that is going
    to be saved to the S3 bucket. You can also convert a sample image to `base64`
    code with libraries and online converters.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `bucket` parameter represents the location of the S3 bucket.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bucket` 参数表示 S3 存储桶的位置。'
- en: '`s3_file_name` represents the name and extension of the content.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s3_file_name` 表示内容的名称和扩展名。'
- en: 'This can be seen in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在以下屏幕截图中看到：
- en: '![](img/Figure_12.26_B19195.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.26_B19195.jpg)'
- en: Figure 12.26 – Request JSON
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.26 – 请求 JSON
- en: 'Click the **Send** button in order to call the API. Once you click it, you
    can see the response of the API:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **发送** 按钮以调用 API。一旦点击，您就可以看到 API 的响应：
- en: '![](img/Figure_12.27_B19195.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.27_B19195.jpg)'
- en: Figure 12.27 – JSON response
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.27 – JSON 响应
- en: We have successfully called the API. Let’s check with the S3 bucket whether
    the image is uploaded.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功调用 API。现在让我们检查 S3 存储桶，看看图片是否已上传。
- en: 'Open the `python-book-image` S3 bucket and see the uploaded `jpeg` file:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `python-book-image` S3 存储桶，查看上传的 `jpeg` 文件：
- en: '![](img/Figure_12.28_B19195.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.28_B19195.jpg)'
- en: Figure 12.28 – S3 content
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.28 – S3 内容
- en: 'Download the file and check the sample image. When you download it, you will
    see a very small point. You can make it bigger by clicking the **+** magnifying
    glass icon on your image viewer to see it clearly:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载文件并检查示例图片。当您下载时，您会看到一个非常小的点。您可以通过在图片查看器上点击 **+** 放大镜图标来将其放大，以便清楚地看到：
- en: '![](img/Figure_12.29_B19195.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_12.29_B19195.jpg)'
- en: Figure 12.29 – The image
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.29 – 图片
- en: Congratulations! You have successfully uploaded the image using API Gateway,
    Lambda, and S3 services.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功使用 API Gateway、Lambda 和 S3 服务上传了图片。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have created an application to upload an image using API
    Gateway, Lambda, and S3\. The image is converted to `base64` to be stored in S3\.
    One of the best aspects of using Lambda, S3, and API Gateway is that we haven’t
    provisioned any server. Lambda, S3, and API Gateway are serverless and we don’t
    need to manage the infrastructure. AWS manages and handles it for you.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个应用程序，使用 API Gateway、Lambda 和 S3 上传图片。图片被转换为 `base64` 格式以存储在 S3 中。使用
    Lambda、S3 和 API Gateway 的一个最佳方面是我们没有配置任何服务器。Lambda、S3 和 API Gateway 是无服务器的，我们不需要管理基础设施。AWS
    会为您管理和处理这些。
- en: We have finished all the chapters and learned how to use the most common AWS
    services with Python. I hope all the chapters have provided you with good knowledge
    about AWS. Following this, you can implement more complex Python projects with
    these services as well as use more services within AWS.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了所有章节，并学习了如何使用 Python 操作最常用的 AWS 服务。我希望所有章节都能为您提供关于 AWS 的良好知识。在此基础上，您还可以使用这些服务以及
    AWS 内部的更多服务来实现更复杂的 Python 项目。
