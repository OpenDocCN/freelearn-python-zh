- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reference Project on AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to create a sample application with Python on
    AWS. This is the final chapter of the book. We have learned about different AWS
    services and implemented sample Python applications with these services. In this
    chapter, we will use multiple services to create an end-to-end Python application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What have we learned?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the end-to-end Python application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The coding of the Python application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What have we learned?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS has more than a hundred services, and we have learned about the important
    Python-related services. Let’s walk through those services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lambda**: Lambda is a cloud computing service that allows you to run Python
    applications. You don’t need to provision any server; Lambda manages the infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EC2**: EC2 provides a server machine in the cloud. You can create a server
    and install the required applications, or whatever you want.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elastic Beanstalk**: Elastic Beanstalk is used to deploy Python-based web
    applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CloudWatch**: CloudWatch is a logging and monitoring service on AWS. You
    can easily track your services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RDS**: RDS is a relational database service on AWS. If you need a database,
    you can easily create it without managing the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API Gateway**: API Gateway is used to create, maintain, and publish an application
    programming interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DynamoDB**: DynamoDB is a key-value database that is used to query and store
    billions of records on AWS. It is also a **NoSQL database**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Glue**: AWS Glue is a data integration service that is used for ETL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Python application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us understand the high-level architecture of the Python application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_12.01_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – Project architecture
  prefs: []
  type: TYPE_NORMAL
- en: The application collects images to be stored in S3 buckets. The API gateway
    is used for integration between clients and the Lambda service. Lambda retrieves
    the information and puts data into S3.
  prefs: []
  type: TYPE_NORMAL
- en: The coding of the Python application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s implement the application step by step.
  prefs: []
  type: TYPE_NORMAL
- en: Creating S3 buckets to store images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this subsection, we are going to create an S3 bucket to hold images, which
    is uploaded via API Gateway. S3 will store the image and provide it whenever requested:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a bucket and click the **Create bucket** button at the bottom of the
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.02_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – An S3 bucket
  prefs: []
  type: TYPE_NORMAL
- en: 'We filled in the `python-book-image`; you can use whatever you want. After
    adding the **bucket name**, click **Create bucket** to create a new bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.03_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – Bucket configuration
  prefs: []
  type: TYPE_NORMAL
- en: We have created an S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Lambda code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this subsection, we are going to implement a Lambda code that accepts the
    image upload request from API Gateway and stores the image in the S3 bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Lambda function via the AWS Management Console. You can see the **Function
    name** field of the Lambda function and **Runtime** in the following screenshot
    within the Lambda creation step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.04_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – The Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the following code to the Lambda code source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once pasted, deploy the Lambda function by clicking the **Deploy** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.05_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – Lambda deployment
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at the code details. First, we import the `json`, `base64`,
    and `boto3` libraries. The `json` library is used to parse data, which comes in
    JSON format, and `boto3` is used to upload files to S3 as well as generate a URL
    for retrieving the file. In addition to that, `base64` is used to decode and encode
    the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines of code are parsing the parameters and decoding the contents
    of the image to store S3\. Hence, we can use the bucket name and S3 filename.
    The bucket name is represented as `bucket` in the code and the S3 filename is
    represented as `s3_file_name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have parameters, we can use the `boto3` library to upload the file
    from local to S3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We have implemented the code for the application. In order to run this code,
    we have to create permissions, the steps for which are explained in the next subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Creating permissions for the services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to create permissions to upload a file to S3 and call a Lambda
    function from API Gateway:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the IAM role and create a new role for **Lambda**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.06_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – Creating a role
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **AmazonS3FullAccess** and **CloudWatchFullAccess** from the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.07_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – Adding policies
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Next** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.08_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – Adding policies
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the role name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.09_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – Naming the role
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete creating the role by clicking the **Create** **role** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.10_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – Create role
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the role, you will see the role on the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.11_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – The role on the list
  prefs: []
  type: TYPE_NORMAL
- en: In this subsection, we have created a role to be used in the Lambda function
    to execute the code. Let’s attach the role to the Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: Attaching the role to the Lambda function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to add permissions to the Lambda function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Lambda function and click **Permissions** under the **Configuration**
    tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.12_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – Lambda permissions
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the permissions and select **LambdaPolicy** from the existing role. This
    role was created in the previous subsection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.13_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – Attaching the permission
  prefs: []
  type: TYPE_NORMAL
- en: With this configuration, Lambda is able to execute the code. It is time to start
    implementing API Gateway, which will use a Lambda function as a backed function.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an API gateway to upload the image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this step, we are going to create an API gateway to upload the image:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the API Gateway service and create a REST API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.14_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – Creating a REST API
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide a name for the REST API. We will use the name `UploadImageToS3` in
    this subsection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.15_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.15 – Naming the REST API
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Actions** drop-down list, click **Create Method**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.16_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.16 – Creating a method
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **POST** from the available options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.17_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.17 – The POST method
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use **Lambda Function** as the integration type and scroll down to
    click **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.18_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.18 – Lambda integration
  prefs: []
  type: TYPE_NORMAL
- en: 'The API is ready to use. Enable the CORS policy as we explained in [*Chapter
    9*](B19195_09.xhtml#_idTextAnchor013), then click **Deploy API** in the **Actions**
    drop-down list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.19_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.19 – Deploying the API
  prefs: []
  type: TYPE_NORMAL
- en: 'We are ready to deploy the API. Add a stage name and click **Deploy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.20_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.20 – Naming the stage
  prefs: []
  type: TYPE_NORMAL
- en: In the **Export** tab, there are multiple alternatives to call the API. We will
    use Postman to call the API. **Postman** is a platform that allows you to build
    and test the API. For this application, you can also test another platform such
    as **Swagger**. Postman is an easy way to use and test an API. In the following
    subsection, we will explain how to download and use it. Since it is simpler in
    terms of installation and use, I will proceed with Postman.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Export as Swagger + Postman Extensions** icon; you can export
    and download either the JSON or YAML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_12.21_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.21 – Exporting the API
  prefs: []
  type: TYPE_NORMAL
- en: This file will be used in Postman to test the API.
  prefs: []
  type: TYPE_NORMAL
- en: Using Postman to test the API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have completed the implementation. In this step, we are going to test the
    API via Postman:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and install Postman from the following website: [https://www.postman.com/](https://www.postman.com/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Postman application, click the **Import** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.22_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.22 – Importing the API
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the JSON file that we downloaded within API Gateway and click **Open**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.23_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.23 – Importing the JSON
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see confirmation of the API. Click **Import** as a final step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.24_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.24 – Import the JSON
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have imported the API, you are ready to call the API. In the **POST**
    section, select the **raw** request type with **JSON** as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.25_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.25 – The raw parameter
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the following JSON to call the API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break down the JSON file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`image_base64` represents the `base64` code of a sample image that is going
    to be saved to the S3 bucket. You can also convert a sample image to `base64`
    code with libraries and online converters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `bucket` parameter represents the location of the S3 bucket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s3_file_name` represents the name and extension of the content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_12.26_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.26 – Request JSON
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Send** button in order to call the API. Once you click it, you
    can see the response of the API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.27_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.27 – JSON response
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully called the API. Let’s check with the S3 bucket whether
    the image is uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `python-book-image` S3 bucket and see the uploaded `jpeg` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.28_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.28 – S3 content
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the file and check the sample image. When you download it, you will
    see a very small point. You can make it bigger by clicking the **+** magnifying
    glass icon on your image viewer to see it clearly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_12.29_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.29 – The image
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully uploaded the image using API Gateway,
    Lambda, and S3 services.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have created an application to upload an image using API
    Gateway, Lambda, and S3\. The image is converted to `base64` to be stored in S3\.
    One of the best aspects of using Lambda, S3, and API Gateway is that we haven’t
    provisioned any server. Lambda, S3, and API Gateway are serverless and we don’t
    need to manage the infrastructure. AWS manages and handles it for you.
  prefs: []
  type: TYPE_NORMAL
- en: We have finished all the chapters and learned how to use the most common AWS
    services with Python. I hope all the chapters have provided you with good knowledge
    about AWS. Following this, you can implement more complex Python projects with
    these services as well as use more services within AWS.
  prefs: []
  type: TYPE_NORMAL
