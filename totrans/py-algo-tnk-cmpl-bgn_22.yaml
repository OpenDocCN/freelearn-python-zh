- en: Chapter 14
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第14章
- en: Manipulating Strings
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 操作字符串
- en: 14.1 Introduction
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.1 简介
- en: Generally speaking, a string is anything that you can type using the keyboard,
    including letters, symbols (such as &, *, and @), and digits. In Python, a string
    is always enclosed in single or double quotes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，字符串是你可以用键盘输入的任何内容，包括字母、符号（如 &、* 和 @）和数字。在 Python 中，字符串总是用单引号或双引号括起来。
- en: Below is a Python program that uses strings.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用字符串的 Python 程序。
- en: a = "Everything enclosed in double quotes is a string, even the numbers:"
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: a = "双引号括起来的任何内容都是字符串，即使是数字："
- en: b = "3, 54, 731"
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: b = "3, 54, 731"
- en: print(a, b)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: print(a, b)
- en: print("You can even mix letters, symbols and digits like this:")
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: print("你甚至可以像这样混合字母、符号和数字：")
- en: print("3 + 4 equals 7")
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: print("3 + 4 等于 7")
- en: 'Many times programs deal with data that comes in the form of strings (text).
    Strings are everywhere—from word processors, to web browsers, to text messaging
    programs. Many exercises in this book actually make extensive use of strings.
    Even though Python supports many useful functions and methods for manipulating
    strings, this chapter covers only those functions and methods that are necessary
    for this book''s purpose. However, if you need even more information you can visit
    one of the following addresses:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序处理的数据都是以字符串（文本）的形式出现的。字符串无处不在——从文字处理器到网页浏览器，再到短信程序。本书中的许多练习实际上大量使用了字符串。尽管
    Python 支持许多用于操作字符串的有用函数和方法，但本章仅涵盖本书目的所需的那些函数和方法。然而，如果你需要更多信息，你可以访问以下地址之一：
- en: '[https://tinyurl.com/ybzmkpu3](https://tinyurl.com/ybzmkpu3)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://tinyurl.com/ybzmkpu3](https://tinyurl.com/ybzmkpu3)'
- en: '[https://docs.python.org/3.13/library/stdtypes.html#string-methods](https://docs.python.org/3.13/library/stdtypes.html#string-methods)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3.13/library/stdtypes.html#string-methods](https://docs.python.org/3.13/library/stdtypes.html#string-methods)'
- en: .![Image](img/chapter14-01.png)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter14-01.png)
- en: '![](img/notice.jpg)Python string functions and methods can be used when there
    is a need to manipulate a string, for example, to isolate a number of characters
    from the string, remove spaces that might exist at the beginning of it, or convert
    all of its characters to uppercase.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)当需要操作字符串时，可以使用 Python 字符串函数和方法，例如，从字符串中隔离一些字符，移除可能存在于其开头处的空格，或将所有字符转换为大写。'
- en: '![](img/remember.jpg)Functions and methods are nothing more than small subprograms
    that solve small problems.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)函数和方法不过是解决小问题的小程序。'
- en: 14.2 The Position of a Character in a String
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.2 字符串中字符的位置
- en: Let's use the text “Hello World” in the following example. The string consists
    of 11 characters (including the space character between the two words). Python
    numerates characters assuming that the first one is at position 0, the second
    one is at position 1, and so on. The position of each character is shown here.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下面的例子中使用文本“Hello World”。这个字符串由11个字符组成（包括两个单词之间的空格字符）。Python 假设第一个字符位于位置0，第二个字符位于位置1，以此类推。每个字符的位置如下所示。
- en: '![Image](img/chapter14-02.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter14-02.png)'
- en: '![](img/remember.jpg)A space is a character just like any other character.
    Just because nobody can see it, it doesn''t mean it doesn''t exist!'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)空格和其他字符一样，是一个字符。只是因为没有人能看到它，并不意味着它不存在！'
- en: 14.3 Useful String Functions/Methods (Subprograms), and More
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.3 有用的字符串函数/方法（子程序）以及更多
- en: Trimming
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 修剪
- en: Trimming is the process of removing whitespace characters from the beginning
    or the end of a string.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 修剪是从字符串的开始或结束处移除空白字符的过程。
- en: 'Some of the whitespace characters that are removed with the trimming process
    are:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在修剪过程中移除的一些空白字符包括：
- en: ►an ordinary space
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ►一个普通空格
- en: ►a tab
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: ►一个制表符
- en: ►a new line (line feed)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: ►一个新行（换行符）
- en: ►a carriage return
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ►一个回车符
- en: For example, you can trim any spaces that the user mistakenly entered at the
    end or at the beginning of a string.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以修剪用户错误地输入在字符串开头或结尾的任何空格。
- en: The method that you can use to trim a string is
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下方法来修剪字符串
- en: subject.strip()
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: subject.strip()
- en: This method returns a copy of subject in which any whitespace characters are
    removed from both the beginning and the end of the subject string.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回一个副本，其中从主题字符串的开始和结束处移除了任何空白字符。
- en: Example
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3a'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3a'
- en: a = "       Hello       "
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: a = "      Hello      "
- en: b = a.strip()
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: b = a.strip()
- en: 'print(b, "Poseidon!")    #It displays: Hello Poseidon!'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(b, "Poseidon!")    #它显示：Hello Poseidon!'
- en: 'print(a, "Poseidon!")    #It displays:       Hello       Poseidon!'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: print(a, "Poseidon!")    #它显示：       Hello       Poseidon!
- en: '![](img/notice.jpg)Note that the content of variable a is not altered. If you
    do need to alter its content, you can use the statement a = a.strip()'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/notice.jpg)注意，变量a的内容未更改。如果您确实需要更改其内容，可以使用语句a = a.strip()'
- en: String replacement
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串替换
- en: subject.replace(search, replace)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: subject.replace(search, replace)
- en: This method searches in subject and returns a copy of it in which all occurrences
    of the search string are replaced with the replace string.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在subject中搜索并返回一个副本，其中所有搜索字符串的实例都被替换字符串替换。
- en: Example
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3b'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3b'
- en: a = "I am newbie in Java. Java rocks!"
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: a = "I am newbie in Java. Java rocks!"
- en: b = a.replace("Java", "Python")
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: b = a.replace("Java", "Python")
- en: 'print(b)            #It displays: I am newbie in Python. Python rocks'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)            #它显示：I am newbie in Python. Python rocks
- en: 'print(a)            #It displays: I am newbie in Java. Java rocks'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)            #它显示：I am newbie in Java. Java rocks
- en: '![](img/notice.jpg)Note that the content of variable a is not altered. If you
    do need to alter its content, you can use the statement a = a.replace("Java",
    "Python")'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/notice.jpg)注意，变量a的内容未更改。如果您确实需要更改其内容，可以使用语句a = a.replace("Java", "Python")'
- en: Counting the number of characters
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 计算字符数
- en: len(subject)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: len(subject)
- en: This function returns the length of subject or, in other words, the number of
    characters subject consists of.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回subject的长度，换句话说，subject由多少个字符组成。
- en: Example
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3c'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3c'
- en: a = "Hello Olympians!"
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Hello Olympians!"
- en: 'print(len(a))           #It displays: 16'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(len(a))           #它显示：16'
- en: b = "I am newbie in Python"
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: b = "I am newbie in Python"
- en: k = len(b)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: k = len(b)
- en: 'print(k)                #It displays: 21'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: print(k)                #它显示：21
- en: '![](img/remember.jpg)A character includes anything you can type using the keyboard,
    such as letters, symbols, digits, and space characters.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)一个字符包括您可以使用键盘输入的任何内容，例如字母、符号、数字和空格字符。'
- en: Finding string position
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 查找字符串位置
- en: subject.find(search)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: subject.find(search)
- en: This method returns the numerical position of the first occurrence of search
    in subject, or −1 if search is not found.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回搜索在subject中的首次出现的数值位置，如果未找到搜索项，则返回-1。
- en: Example
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3d'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3d'
- en: a = "I am newbie in Python. Python rocks!"
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: a = "I am newbie in Python. Python rocks!"
- en: i = a.find("newbie")
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: i = a.find("newbie")
- en: 'print(i)                #It displays: 5'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)                #它显示：5
- en: 'print(a.find("Python")) #It displays: 15'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a.find("Python")) #它显示：15'
- en: 'print(a.find("Java"))   #It displays: -1'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a.find("Java"))   #它显示：-1'
- en: '![](img/remember.jpg)The first character is at position 0.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)第一个字符位于位置0。'
- en: Converting to lowercase
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为小写
- en: subject.lower()
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: subject.lower()
- en: This method returns a copy of subject in which all the letters of the string
    subject are converted to lowercase.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回一个副本，其中字符串subject的所有字母都被转换为小写。
- en: Example
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3e'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3e'
- en: a = "My NaMe is JohN"
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: a = "My NaMe is JohN"
- en: b = a.lower()
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: b = a.lower()
- en: 'print(b)            #It displays: my name is john'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)            #它显示：my name is john
- en: 'print(a)            #It displays: My NaMe is JohN'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)            #它显示：My NaMe is JohN
- en: '![](img/notice.jpg)Note that the content of variable a is not altered. If you
    do need to alter its content, you can use the statement a = a.lower()'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/notice.jpg)注意，变量a的内容未更改。如果您确实需要更改其内容，可以使用语句a = a.lower()'
- en: Converting to uppercase
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为大写
- en: subject.upper()
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: subject.upper()
- en: This method returns a copy of subject in which all the letters of the string
    subject are converted to uppercase.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回一个副本，其中字符串subject的所有字母都被转换为大写。
- en: Example
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3f'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3f'
- en: a = "My NaMe is JohN"
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: a = "My NaMe is JohN"
- en: b = a.upper()
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: b = a.upper()
- en: 'print(b)            #It displays: MY NAME IS JOHN'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)            #它显示：MY NAME IS JOHN
- en: 'print(a)            #It displays: My NaMe is JohN'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)            #它显示：My NaMe is JohN
- en: '![](img/notice.jpg)Note that the content of variable a is not altered. If you
    do need to alter its content, you can use the statement a = a.upper()'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/notice.jpg)注意，变量a的内容未更改。如果您确实需要更改其内容，可以使用语句a = a.upper()'
- en: Example
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3g'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3g'
- en: a = "I am newbie in Java. Java rocks!"
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: a = "I am newbie in Java. Java rocks!"
- en: b = a.replace("Java", "Python").upper()
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: b = a.replace("Java", "Python").upper()
- en: 'print(b)            #It displays: I AM NEWBIE IN PYTHON. PYTHON ROCKS'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)            #它显示：I AM NEWBIE IN PYTHON. PYTHON ROCKS
- en: '![](img/notice.jpg)Note how the method replace() is chained to the method upper().
    The result of the first method is used as a subject for the second method. This
    is a writing style that most programmers prefer to follow because it helps to
    save a lot of code lines. Of course you can chain as many methods as you wish,
    but if you chain too many of them, no one will be able to understand your code.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意方法 replace() 是链接到方法 upper() 的。第一个方法的结果被用作第二个方法的主题。这种写作风格是大多数程序员更喜欢遵循的，因为它有助于节省大量的代码行。当然，你可以链接任意多的方法，但如果链接太多，没有人会理解你的代码。'
- en: Retrieving an individual character from a string
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 从字符串中检索单个字符
- en: subject[index]
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: subject[index]
- en: This returns the character located at subject's specified index. As already
    mentioned, the string indexes start from zero. You can use index 0 to access the
    first character, index 1 to access the second character, and so on. The index
    of the last character is 1 less than the length of the string.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回位于 subject 指定索引处的字符。如前所述，字符串索引从 0 开始。你可以使用索引 0 来访问第一个字符，索引 1 来访问第二个字符，依此类推。最后一个字符的索引是字符串长度减
    1。
- en: '![](img/notice.jpg)The notation subject[index] is called “substring notation”.
    The substring notation lets you refer to individual characters within a string.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)表示法 subject[index] 被称为“子串表示法”。子串表示法允许你引用字符串中的单个字符。'
- en: Example
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3h'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3h'
- en: a = "Hello World"
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Hello World"
- en: 'print(a[0])         #It displays the first letter: H'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a[0])         #它显示第一个字母：H'
- en: 'print(a[6])         #It displays: W'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a[6])         #它显示：W'
- en: 'print(a[10])        #It displays: d'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: print(a[10])        #它显示：d
- en: '![](img/notice.jpg)Note that the space between the words “Hello” and “World”
    is considered a character as well. So, the letter W exists in position 6 and not
    in position 5.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意，“Hello”和“World”之间的空格也被视为一个字符。因此，字母 W 存在于位置 6，而不是位置 5。'
- en: If you attempt to use an invalid index such as an index greater than the length
    of the string, Python throws an error message as shown in Figure 14–1.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试使用无效的索引，例如大于字符串长度的索引，Python 会抛出一个错误信息，如图 14–1 所示。
- en: '![Image](img/chapter14-03.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter14-03.png)'
- en: Figure 14–1 An error message indicating an invalid index
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14–1 表示无效索引的错误信息
- en: '![](img/remember.jpg)String indexes must be in a range from 0 to one less than
    the length of the string.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)字符串索引必须在 0 到字符串长度减 1 的范围内。'
- en: If you want to start counting from the end of the string (instead of the beginning)
    you can use negative indexes. For example, an index of −1 refers to the right-most
    character.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想从字符串的末尾开始计数（而不是从开头），你可以使用负索引。例如，索引为 −1 指的是最右边的字符。
- en: In the text «Hello World», the position (using negative indexes) of each character
    is shown here.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本“Hello World”中，每个字符的位置（使用负索引）在此显示。
- en: '![Image](img/chapter14-04.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter14-04.png)'
- en: Example
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3i'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3i'
- en: a = "Hello World"
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Hello World"
- en: 'print(a[-1])      #It displays the last letter: d'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: print(a[-1])      #它显示最后一个字母：d
- en: 'print(a[-3])      #It displays: r'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: print(a[-3])      #它显示：r
- en: 'print(a[-11])     #It displays: H'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a[-11])     #它显示：H'
- en: Another way of extracting single characters from strings in Python is to unpack
    them into individual variables.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中从字符串中提取单个字符的另一种方法是解包到单独的变量中。
- en: Example
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3j'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3j'
- en: name = "Zeus"
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: name = "Zeus"
- en: a, b, c, d = name
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: a, b, c, d = name
- en: 'print(a)     #It displays: Z'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a)     #它显示：Z'
- en: 'print(b)     #It displays: e'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(b)     #它显示：e'
- en: 'print(c)     #It displays: u'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(c)     #它显示：u'
- en: 'print(d)     #It displays: s'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(d)     #它显示：s'
- en: '![](img/notice.jpg)This last approach requires you to know in advance how many
    characters are in the string. If the number of variables you supply does not match
    the number of characters in the string, Python throws an error.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)这种最后的方法要求你事先知道字符串中有多少个字符。如果你提供的变量数量与字符串中的字符数量不匹配，Python
    会抛出一个错误。'
- en: Getting part of a string (Slice Notation)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 获取字符串的一部分（切片表示法）
- en: 'subject[[beginIndex] : [endIndex] [: step]]'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 'subject[[beginIndex] : [endIndex] [: step]]'
- en: This notation returns a portion of subject. Specifically, it returns the substring
    starting from position beginIndex and running up to, but not including, position
    endIndex or up to the end of subject, whichever comes first. Both arguments beginIndex
    and endIndex are optional. If beginIndex is omitted, the substring starting from
    position 0 and running up to, but not including, position endIndex is returned.
    If endIndex is omitted, the substring starting from position beginIndex until
    the end of subject is returned.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这种表示法返回主题的一部分。具体来说，它返回从位置 beginIndex 开始，直到但不包括 endIndex 的子字符串，或者直到主题的末尾，以先到者为准。两个参数
    beginIndex 和 endIndex 都是可选的。如果省略 beginIndex，则返回从位置 0 开始，直到但不包括 endIndex 的子字符串。如果省略
    endIndex，则返回从位置 beginIndex 开始直到主题末尾的子字符串。
- en: The last argument step is optional as well. If omitted, its default value is
    1\. If supplied, it defines the number of characters you want to move forward
    after each character is retrieved from the original string.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个参数 step 也是可选的。如果省略，则默认值为 1。如果提供，则定义每次从原始字符串中检索字符后要前进的字符数。
- en: '![](img/notice.jpg)“Slicing” in Python is a mechanism to select a range of
    elements (here characters) from a sequence (here a string).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)"Python 中的“切片”是一种选择序列（此处为字符串）中一系列元素（此处为字符）的机制。'
- en: Example
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3k'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png)file_14.3k'
- en: a = "Hello World"
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Hello World"
- en: 'print(a[7:9])       #It displays: or'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a[7:9])       #它显示：or'
- en: 'print(a[7:900])     #It displays: orld'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a[7:900])     #它显示：orld'
- en: 'print(a[4:10:2])    #Step is set to 2\. It displays: oWr'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: print(a[4:10:2])    #步长设置为 2。它显示：oWr
- en: 'print(a[7:])        #It displays: orld'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: print(a[7:])        #它显示：orld
- en: 'print(a[:3])        #It displays: Hel'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: print(a[:3])        #它显示：Hel
- en: If you want to start counting from the end of the string (instead of the beginning)
    use negative indexes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要从字符串的末尾开始计数（而不是从开头），请使用负索引。
- en: Example
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3l'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png)file_14.3l'
- en: a = "Hello World"
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Hello World"
- en: 'print(a[-4:-2])     #It displays: or'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a[-4:-2])     #它显示：or'
- en: 'print(a[-3:])       #It displays: rld'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a[-3:])       #它显示：rld'
- en: 'print(a[:-3])       #It displays: Hello Wo'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a[:-3])       #它显示：Hello Wo'
- en: 'print(a[3:-2])      #It displays: lo Wor'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: print(a[3:-2])      #它显示：lo Wor
- en: Converting a number to string
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将数字转换为字符串
- en: str(number)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: str(number)
- en: This function returns a string version of number or, in other words, it converts
    a number (real or integer) into a string.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数返回数字的字符串版本，换句话说，它将一个数字（实数或整数）转换为字符串。
- en: Example
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_14.3m'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png)file_14.3m'
- en: 'age = int(input("Enter your age: "))'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: age = int(input("请输入你的年龄："))
- en: newAge = age + 10
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: newAge = age + 10
- en: message = "You 'll be " + str(newAge) + " years old in 10 years from now!"
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: message = "You 'll be " + str(newAge) + " years old in 10 years from now!"
- en: print(message)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: print(message)
- en: Exercise 14.3-1 Displaying a String Backwards
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 14.3-1 显示字符串的反向
- en: Write a Python program that prompts the user to enter any string with four letters
    and then displays its contents backwards. For example, if the string entered is
    “Zeus”, the program must display “sueZ”.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，提示用户输入任何四个字母的字符串，然后显示其反向内容。例如，如果输入的字符串是“Zeus”，则程序必须显示“sueZ”。
- en: Solution
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Below, three approaches are presented below.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 下面将介绍三种方法。
- en: First approach
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: Let's say that user's input is assigned to variable s. You can access the fourth
    character using s[3], the third character using s[2], and so on. The Python program
    is shown here.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户的输入被分配给变量 s。你可以使用 s[3] 访问第四个字符，使用 s[2] 访问第三个字符，以此类推。下面的 Python 程序展示了这一点。
- en: '![](img/my_exercise_header.png) file_14.3-1a'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png)file_14.3-1a'
- en: 's = input("Enter a word with four letters: ")'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: s = input("请输入一个四个字母的单词：")
- en: sReversed = s[3] + s[2] + s[1] + s[0]
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: sReversed = s[3] + s[2] + s[1] + s[0]
- en: print(sReversed)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: print(sReversed)
- en: Second approach
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: This approach unpacks the four letters into four individual variables, as shown
    here.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将四个字母解包到四个单独的变量中，如下所示。
- en: '![](img/my_exercise_header.png) file_14.3-1b'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png)file_14.3-1b'
- en: 's = input("Enter a word with four letters: ")'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: s = input("请输入一个四个字母的单词：")
- en: letter1, letter2, letter3, letter4 = s
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: letter1, letter2, letter3, letter4 = s
- en: sReversed = letter4 + letter3 + letter2 + letter1
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: sReversed = letter4 + letter3 + letter2 + letter1
- en: print(sReversed)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: print(sReversed)
- en: Third approach
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法
- en: This approach uses the slice notation and the negative value of −1 for argument
    step.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使用切片表示法和 step 参数的负值 -1。
- en: '![](img/my_exercise_header.png) file_14.3-1c'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png)file_14.3-1c'
- en: 's = input("Enter a word with four letters: ")'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: s = input("请输入一个四个字母的单词：")
- en: sReversed = s[::-1]
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: sReversed = s[::-1]
- en: print(sReversed)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: print(sReversed)
- en: '![](img/notice.jpg)The advantage of this approach is that the user is allowed
    to enter any string, no matter how short or long!'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)这种方法的优点是用户可以输入任何字符串，无论多短或多长！'
- en: Exercise 14.3-2 Switching the Order of Names
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习14.3-2：交换名字的顺序
- en: Write a Python program that prompts the user to enter in one single string both
    first and last name. In the end, the program must change the order of the two
    names.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入一个字符串，包含他们的名字和姓氏。最后，程序必须改变两个名字的顺序。
- en: Solution
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: This exercise is not the same as the one that you learned in Exercises [8.1-3](chapter08.html#toc_4)
    and [8.1-4](chapter08.html#toc_5), which swapped the numeric values of two variables.
    In this exercise both the first and last names are entered in one single string,
    so the first thing that the program must do is split the string and assign each
    name to a different variable. If you manage to do so, then you can just rejoin
    them in a different order.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习与你在练习[8.1-3](chapter08.html#toc_4)和[8.1-4](chapter08.html#toc_5)中学到的练习不同，后者交换了两个变量的数值。在这个练习中，名字和姓氏都输入在一个单独的字符串中，因此程序必须首先分割字符串，并将每个名字分配给不同的变量。如果你能这样做，然后你就可以以不同的顺序重新连接它们。
- en: Let's try to understand this exercise using an example. The string that you
    must split and the position of its individual character are shown here.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来尝试理解这个练习。必须分割的字符串及其各个字符的位置在这里显示。
- en: '![Image](img/chapter14-05.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/chapter14-05.png)'
- en: The character that visually separates the first name from the last name is the
    space character between them. The problem here is that this character is not always
    at position 3\. Someone can have a short first name like “Tom” and someone else
    can have a longer one like “Robert”. Thus, you need something that actually finds
    the position of the space character regardless of the content of the string.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 将第一个名字和最后一个名字在视觉上分开的字符是它们之间的空格字符。问题是这个字符并不总是位于位置3。有人可能有像“Tom”这样的短名字，而另一个人可能有像“Robert”这样的长名字。因此，你需要一种能够找到空格字符位置的方法，而不管字符串的内容如何。
- en: Method find() is what you are looking for! If you use it to find the position
    of the space character in the string “Tom Smith”, it returns the value 3\. But
    if you use it to find the space character in another string, such as “Angelina
    Brown”, it returns the value 8 instead.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 方法find()正是你所需要的！如果你用它来查找字符串“Tom Smith”中空格字符的位置，它返回值3。但如果你用它来查找另一个字符串中的空格字符，比如“Angelina
    Brown”，它返回的值是8。
- en: '![](img/notice.jpg)The value 3 is not just the position where the space character
    exists. It also represents the number of characters that the word “Tom” contains!
    The same applies to the value 8 that is returned for the string “Angelina Brown”.
    It represents both the position where the space character exists and the number
    of characters that the word “Angelina” contains!'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)数字3不仅仅表示空格字符所在的位置。它还代表单词“Tom”包含的字符数！同样的情况也适用于返回字符串“Angelina
    Brown”的值8。它既表示空格字符所在的位置，也代表单词“Angelina”包含的字符数！'
- en: The Python program for this algorithm is shown here.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法的Python程序如下所示。
- en: '![](img/my_exercise_header.png) file_14.3-2'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_14.3-2'
- en: 'fullName = input("Enter your full name: ")'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 'fullName = input("Enter your full name: ")'
- en: '#Find the position of space character. This is also the number'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '#找到空格字符的位置。这也是第一个名字包含的字符数'
- en: '#of characters first name contains'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '#第一个名字包含的字符数'
- en: spacePos = fullName.find(" ")
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: spacePos = fullName.find(" ")
- en: '#Get spacePos number of characters starting from position 0'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '#从0位置开始获取spacePos个字符'
- en: name1 = fullName[:spacePos]
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: name1 = fullName[:spacePos]
- en: '#Get the rest of the characters starting from position spacePos + 1'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '#从spacePos + 1位置开始获取剩余的字符'
- en: name2 = fullName[spacePos + 1:]
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: name2 = fullName[spacePos + 1:]
- en: fullName = name2 + " " + name1
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: fullName = name2 + " " + name1
- en: print(fullName)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: print(fullName)
- en: '![](img/remember.jpg)The notation subject[beginIndex : endIndex] returns a
    portion of subject. Specifically, it returns the substring starting from beginIndex
    position and running up to but not including endIndex position.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![记住](img/remember.jpg)表示法subject[beginIndex : endIndex]返回subject的一部分。具体来说，它返回从beginIndex位置开始的子串，直到但不包括endIndex位置。'
- en: '![](img/notice.jpg)Note that this program cannot be applied to a Spanish name
    such as “Maria Teresa García Ramírez de Arroyo”. The reason is obvious!'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)请注意，这个程序不能应用于像“Maria Teresa García Ramírez de Arroyo”这样的西班牙名字。原因很明显！'
- en: Exercise 14.3-3 Creating a Login ID
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习14.3-3：创建登录ID
- en: Write a Python program that prompts the user to enter their last name and then
    creates a login ID from the first four letters of the name (in lowercase) and
    a three-digit random integer.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，提示用户输入他们的姓氏，然后从名字的前四个字母（小写）和一个三位随机整数创建一个登录 ID。
- en: Solution
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: To create a random integer you can use the randrange() function. Since you need
    a random integer of three digits, the range must be between 100 and 999.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个随机整数，可以使用 randrange() 函数。由于你需要一个三位数的随机整数，范围必须在 100 到 999 之间。
- en: The Python program for this algorithm is shown here.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法的 Python 程序如下所示。
- en: '![](img/my_exercise_header.png) file_14.3-3'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3-3'
- en: from random import randrange
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: from random import randrange
- en: 'lastName = input("Enter last name: ")'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 'lastName = input("Enter last name: ")'
- en: '#Get random integer between 100 and 999'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '# 获取 100 到 999 之间的随机整数'
- en: randomInt = randrange(100, 1000)
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: randomInt = randrange(100, 1000)
- en: print(lastName[:4].lower() + str(randomInt))
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: print(lastName[:4].lower() + str(randomInt))
- en: '![](img/notice.jpg)Note that the notation lastName[:4] returns the substring
    starting from position 0 and running up to but not including position 4.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意，表示法 lastName[:4] 返回从位置 0 开始，到但不包括位置 4 的子串。'
- en: Exercise 14.3-4 Creating a Random Word
  id: totrans-220
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 14.3-4 创建随机单词
- en: Write a Python program that displays a random word consisting of three letters.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，显示一个由三个字母组成的随机单词。
- en: Solution
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: To create a random word you need a variable which contains all 26 letters of
    the English alphabet. Then you can use the randrange() function to choose a random
    letter between position 0 and 25.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个随机单词，你需要一个包含所有 26 个英文字母的变量。然后你可以使用 randrange() 函数来选择一个介于位置 0 和 25 之间的随机字母。
- en: The Python program for this algorithm is shown here.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法的 Python 程序如下所示。
- en: '![](img/my_exercise_header.png) file_14.3-4a'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3-4a'
- en: from random import randrange
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: from random import randrange
- en: alphabet = "abcdefghijklmnopqrstuvwxyz"
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: alphabet = "abcdefghijklmnopqrstuvwxyz"
- en: randomWord = alphabet[randrange(26)] + alphabet[randrange(26)] + alphabet[randrange(26)]
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: randomWord = alphabet[randrange(26)] + alphabet[randrange(26)] + alphabet[randrange(26)]
- en: print(randomWord)
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: print(randomWord)
- en: '![](img/notice.jpg)Note that the function randrange(26) is called three times
    and each time it may return a different random integer between 0 and 25.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意，randrange(26) 函数被调用了三次，每次都可能返回一个介于 0 和 25 之间的不同随机整数。'
- en: You can also use the len() function to get the length of variable alphabet as
    shown here.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 len() 函数来获取变量 alphabet 的长度，如下所示。
- en: '![](img/my_exercise_header.png) file_14.3-4b'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3-4b'
- en: from random import randrange
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: from random import randrange
- en: alphabet = "abcdefghijklmnopqrstuvwxyz"
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: alphabet = "abcdefghijklmnopqrstuvwxyz"
- en: randomWord = alphabet[randrange(len(alphabet))] +    \
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: randomWord = alphabet[randrange(len(alphabet))] + \
- en: alphabet[randrange(len(alphabet))] +    \
  id: totrans-236
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: alphabet[randrange(len(alphabet))] + \
- en: alphabet[randrange(len(alphabet))]
  id: totrans-237
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: alphabet[randrange(len(alphabet))]
- en: print(randomWord)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: print(randomWord)
- en: '![](img/remember.jpg)You can nest one subprogram within another. Note how the
    function len() is nested within the function randrange(). The result of the inner
    (nested) function is used as an argument for the outer function.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)你可以在一个子程序中嵌套另一个子程序。注意函数 len() 是嵌套在函数 randrange() 中的。内部（嵌套）函数的结果被用作外部函数的参数。'
- en: '![](img/notice.jpg)In Python, you can break up a long line amongst multiple
    lines using the backslash ( \ ) character at the end of each line (except the
    last one).'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在 Python 中，你可以使用每个行尾的回车符（\）将长行拆分为多行（除了最后一行）。'
- en: Exercise 14.3-5 Finding the Sum of Digits
  id: totrans-241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 14.3-5 求数字之和
- en: Write a Python program that prompts the user to enter a three-digit integer
    and then calculates the sum of its digits. Solve this exercise without using the
    integer quotient ( // ) and the integer remainder ( % ) operators.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，提示用户输入一个三位整数，然后计算其数字之和。在不使用整数商（//）和整数余数（%）运算符的情况下解决这个练习。
- en: Solution
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Now you may wonder why this exercise is placed in this chapter, which primarily
    focuses on string manipulation. You might argue that you already know how to split
    a three-digit integer into its three digits and assign each digit to a separate
    variable as you did learn a method in [Chapter 13](chapter13.html) using the integer
    quotient ( // ) and the integer remainder ( % ) operators. So, why is this exercise
    discussed here again?
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会想知道为什么这个练习被放在这个章节，这个章节主要关注字符串操作。你可能会争辩说，你已经知道如何将三位整数拆分为其三个数字，并将每个数字分配给一个单独的变量，就像你在第
    13 章学习的方法一样，使用了整数商（//）和整数余数（%）运算符。那么，为什么这个练习又在这里讨论呢？
- en: The reason is that Python is a very powerful language and you can use its magic
    forces to solve this exercise in a totally different way. The main idea is to
    convert the user-provided integer to type string.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是 Python 是一种非常强大的语言，你可以使用它的魔法力量以完全不同的方式解决这个练习。主要思想是将用户提供的整数转换为字符串类型。
- en: First approach
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: In this approach each digit (each character) is assigned to individual variables.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，每个数字（每个字符）被分配给单独的变量。
- en: '![](img/my_exercise_header.png) file_14.3-5a'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3-5a'
- en: 'number = int(input("Enter an three-digit integer: "))'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: number = int(input("输入一个三位整数："))
- en: sNumber = str(number)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: sNumber = str(number)
- en: digit1 = sNumber[0]
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: digit1 = sNumber[0]
- en: digit2 = sNumber[1]
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: digit2 = sNumber[1]
- en: digit3 = sNumber[2]
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: digit3 = sNumber[2]
- en: total = int(digit1) + int(digit2) + int(digit3)
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: total = int(digit1) + int(digit2) + int(digit3)
- en: print(total)
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: '![](img/notice.jpg)As variables digit1, digit2, and digit3 are of type string,
    you need to use the int() function to convert them to integers before finding
    their sum in the variable total.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)由于变量 digit1、digit2 和 digit3 是字符串类型，在将它们的和找到变量 total 中之前，需要使用
    int() 函数将它们转换为整数。'
- en: Second approach
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: In this approach each digit (each character) is unpacked into individual variables.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，每个数字（每个字符）都被解包到单独的变量中。
- en: '![](img/my_exercise_header.png) file_14.3-5b'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_14.3-5b'
- en: 'number = int(input("Enter an three-digit integer: "))'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: number = int(input("输入一个三位整数："))
- en: digit1, digit2, digit3 = str(number)
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: digit1, digit2, digit3 = str(number)
- en: total = int(digit1) + int(digit2) + int(digit3)
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: total = int(digit1) + int(digit2) + int(digit3)
- en: print(total)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: '14.4 Review Questions: True/False'
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.4 复习问题：真/假
- en: Choose true or false for each of the following statements.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择真或假。
- en: 1)A string is anything that you can type using the keyboard.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 任何你可以用键盘输入的东西都是字符串。
- en: 2)Strings must be enclosed in parentheses.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 字符串必须用括号括起来。
- en: 3)The phrase “Hi there!” contains 8 characters.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 3) 短语“Hi there!”包含 8 个字符。
- en: 4)In the phrase “Hi there!” the letter “t” is at position 3.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 4) 在短语“Hi there!”中，字母“t”位于位置 3。
- en: 5)The statement y = a[1] assigns the second character of the string contained
    in variable a to variable y.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 5) 语句 `y = a[1]` 将变量 a 中包含的字符串的第二个字符赋给变量 y。
- en: 6)The following code fragment satisfies the property of definiteness.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 6) 以下代码片段满足确定性的属性。
- en: a = "Hello"
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Hello"
- en: y = a[5]
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: y = a[5]
- en: 7)Trimming is the process of removing whitespace characters from the beginning
    or the end of a string.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 7) 去除空白是移除字符串开头或结尾的空白字符的过程。
- en: 8)The statement y = "Hello         Aphrodite".strip() assigns the value “HelloAphrodite”
    to variable y.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 8) 语句 `y = "Hello            Aphrodite".strip()` 将值“HelloAphrodite”赋给变量 y。
- en: 9)The statement print("Hi there!".replace("Hi", "Hello")) displays the message
    “Hello there!”.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 9) 语句 `print("Hi there!".replace("Hi", "Hello"))` 显示的消息是“Hello there!”。
- en: 10)The following code fragment assigns the value 4 to variable index.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 10) 以下代码片段将值 4 赋予变量 index。
- en: a = "Hi there"
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Hi there"
- en: index = a.find("the")
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: index = a.find("the")
- en: 11)The statement print("hello there!".upper()) displays the message “Hello There!”.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 11) 语句 `print("hello there!".upper())` 显示的消息是“Hello There!”。
- en: 12)The following code fragment displays the message “Hello there!”.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 12) 以下代码片段显示消息“Hello there!”。
- en: a = "Hello there!"
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Hello there!"
- en: print(a[:])
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: print(a[:])
- en: 13)The statement print(a[:len(a)]) displays some letters of the variable a.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 13) 语句 `print(a[:len(a)])` 显示变量 a 的某些字母。
- en: 14)The statement print(a) is equivalent to the statement print(a[:len(a):]).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 14) 语句 `print(a)` 等价于语句 `print(a[:len(a):])`。
- en: 15)The following code fragment displays the word “HELLO”.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 15) 以下代码片段显示单词“HELLO”。
- en: y = "hello there!"
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: y = "hello there!"
- en: print(y[:5].upper())
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: print(y[:5].upper())
- en: 16)The statement print(a[len(a) - 1])is equivalent to the statement print(a[−1]).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 16) 语句 `print(a[len(a) - 1])` 等价于语句 `print(a[−1])`。
- en: 17)The following code fragment displays the value of 23.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 17) 以下代码片段显示值 23。
- en: a = 2023
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: a = 2023
- en: print(str(a)[2:4])
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: print(str(a)[2:4])
- en: '14.5 Review Questions: Multiple Choice'
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.5 复习问题：多项选择题
- en: Select the correct answer for each of the following statements.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择正确答案。
- en: 1)Which of the following is not a string?
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 以下哪项不是字符串？
- en: a)“Hello there!”
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: a)“Hello there!”
- en: b)“13”
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: b)“13”
- en: c)“13.5”
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: c)“13.5”
- en: d)All of the above are strings.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有都是字符串。
- en: 2)In which position does the space character in the string “Hello Zeus!”, exist?
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 在字符串“Hello Zeus!”中，空格字符存在于哪个位置？
- en: a)6
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: a)6
- en: b)5
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: b)5
- en: c)Space is not a character.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: c)空格不是一个字符。
- en: d)none of the above
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 3)The statement print(a[len(a) − 2]) displays
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 3) 语句 `print(a[len(a) − 2])` 显示
- en: a)the last character of variable a.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: a)变量 a 的最后一个字符。
- en: b)the second to last character of variable a.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: b) 变量a的倒数第二个字符。
- en: c)The statement is not valid.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: c) 该语句无效。
- en: 4)The statement
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 4) 以下语句
- en: y = a.strip().replace("a", "b").replace("w", "y")
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: y = a.strip().replace("a", "b").replace("w", "y")
- en: is equivalent to the statement
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 等价于以下语句
- en: a)y = a.replace("a", "b").replace("w", "y").strip()
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: a) y = a.replace("a", "b").replace("w", "y").strip()
- en: b)y = a.replace("a", "b").strip().replace("w", "y")
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: b) y = a.replace("a", "b").strip().replace("w", "y")
- en: c)y = a.strip().replace("w", "y").replace("a", "b")
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: c) y = a.strip().replace("w", "y").replace("a", "b")
- en: d)all of the above
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上都是
- en: 5)The statement a.replace(" ", "")
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 5) 语句 a.replace(" ", "")
- en: a)adds a space between each letter in the variable a.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: a) 在变量a中的每个字母之间添加一个空格。
- en: b)removes all space characters from the variable a.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: b) 从变量a中删除所有空格字符。
- en: c)empties the variable a.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: c) 清空变量a。
- en: 6)The statement "  Hello  ".replace(" ", "") is equivalent to the statement
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 6) 语句 "Hello ".replace(" ", "") 等价于以下语句
- en: a)"  Hello  ".replace("", " "
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: a) "Hello ".replace("", " ")
- en: b)"  Hello  ".strip()
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: b) "Hello ".strip()
- en: c)all of the above
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: c) 以上都是
- en: d)none of the above
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上都不是
- en: 7)The following code fragment
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 7) 以下代码片段
- en: a = ""
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: a = ""
- en: print(len(a))
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: print(len(a))
- en: displays
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 显示
- en: a)nothing.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: a) 什么也不做。
- en: b)1.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: b) 1.
- en: c)0.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: c) 0.
- en: d)The statement is invalid.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: d) 该语句无效。
- en: e)none of the above
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: e) 以上都不是
- en: 8)Which value assigns the following code fragment to the variable Shakespeare?
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 8) 以下代码片段将哪个值赋给变量Shakespeare？
- en: toBeOrNotToBe = "2b Or Not 2b"
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: toBeOrNotToBe = "2b Or Not 2b"
- en: Shakespeare = toBeOrNotToBe.find("b")
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: Shakespeare = toBeOrNotToBe.find("b")
- en: a)1
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: a) 1
- en: b)2
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: b) 2
- en: c)11
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: c) 11
- en: d)none of the above
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上都不是
- en: 9)What does the following code fragment do?
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 9) 以下代码片段做什么？
- en: a = "Hi there"
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Hi there"
- en: b = a[a.find(" ") + 1:]
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: b = a[a.find(" ") + 1:]
- en: a)It assigns the word “Hi” to the variable b.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: a) 它将单词“Hi”赋给变量b。
- en: b)It assigns a space character to the variable b.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: b) 它将一个空格字符赋给变量b。
- en: c)It assigns the word “there” to the variable b.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: c) 它将单词“there”赋给变量b。
- en: d)none of the above
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上都不是
- en: 10)The following code fragment
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 10) 以下代码片段
- en: a = 15
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: a = 15
- en: b = 5
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: b = 5
- en: print(str(a) + str(b))
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: print(str(a) + str(b))
- en: displays
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 显示
- en: a)155.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: a) 155.
- en: b)10.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: b) 10.
- en: c)15 + 5
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: c) 15 + 5
- en: d)none of the above
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上都不是
- en: 14.6 Review Exercises
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14.6 复习练习
- en: Complete the following exercises.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Write a Python program that creates and displays a random word consisting
    of five letters. The first letter must be a capital letter.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 编写一个Python程序，创建并显示一个由五个字母组成的随机单词。第一个字母必须是大写字母。
- en: 2)Write a Python program that prompts the user to enter their name and then
    creates a secret password consisting of three letters (in lowercase) randomly
    picked up from their name, and a random four-digit number. For example, if the
    user enters “Vassilis Bouras” a secret password can probably be one of “sar1359”
    or “vbs7281” or “bor1459”. Space characters are not allowed in the secret password.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 编写一个Python程序，提示用户输入他们的名字，然后创建一个由从他们的名字中随机挑选的三个小写字母和一个随机四位数组成的秘密密码。例如，如果用户输入“Vassilis
    Bouras”，一个秘密密码可能是“sar1359”或“vbs7281”或“bor1459”。秘密密码中不允许有空格字符。
- en: 3)Write a Python program that prompts the user to enter a three-digit integer
    and then reverses it. For example, if the user enters the number 375, the number
    573 must be displayed. Solve this exercise without using the integer quotient
    ( // ) and the integer remainder ( % ) operators.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 3) 编写一个Python程序，提示用户输入一个三位整数，然后将其反转。例如，如果用户输入数字375，则必须显示数字573。解决此练习时，不得使用整数商（//）和整数余数（%）运算符。
- en: 4)Write a Python program that prompts the user to enter their first name, middle
    name, and last name and displays them formatted in all the following ways.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 4) 编写一个Python程序，提示用户输入他们的名字、中间名和姓氏，并以以下所有方式显示格式化后的结果。
- en: FirstName MiddleName LastName
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 首字母 MiddleName 姓氏
- en: FirstName M. LastName (where M is the first letter of the middle name)
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 首字母 M. 姓氏 (其中M是中间名首字母)
- en: LastName F. (where F is the first letter of the first name)
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 姓氏 F. (其中F是第一个名字的首字母)
- en: Furthermore, the program must ensure that regardless of how the user enters
    their name, it will always be displayed with the first letter capitalized and
    the rest in lowercase.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，程序必须确保无论用户如何输入他们的名字，它都会始终以首字母大写，其余字母小写的方式显示。
- en: 'For example, assume that the user enters the following:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设用户输入以下内容：
- en: 'First name: Aphrodite'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 名字：Aphrodite
- en: 'Middle name: MARIA'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 中间名：MARIA
- en: 'Last name: boura'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 姓氏：boura
- en: 'The program must display the user''s name formatted in all the following ways:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 程序必须以以下方式显示用户的名字格式：
- en: Aphrodite Maria Boura
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: Aphrodite Maria Boura
- en: Aphrodite M. Boura
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: Aphrodite M. Boura
- en: Boura A.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: Boura A.
- en: '5)Some words such as “revolutionary” and “internationalization” are so lengthy
    that writing them out repeatedly can become quite tiresome. In such cases, these
    words can be replaced with a special abbreviation which is made like this: you
    keep the first and the last letter of a word and insert the number of letters
    between them. For instance, “revolutionary” becomes “r11y” and “internationalization”
    becomes “i18n”.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 5)一些词如“革命性的”和“国际化”的长度非常长，反复书写它们会变得相当累人。在这种情况下，这些词可以用一个特殊的缩写来代替，其制作方法如下：你保留一个词的首字母和尾字母，并在它们之间插入字母的数量。例如，“革命性的”变为“r11y”，“国际化”变为“i18n”。
- en: Write a Python program that lets the user enter a long word and displays its
    abbreviation.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，让用户输入一个长词并显示其缩写。
