- en: Chapter 14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Manipulating Strings
  prefs: []
  type: TYPE_NORMAL
- en: 14.1 Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generally speaking, a string is anything that you can type using the keyboard,
    including letters, symbols (such as &, *, and @), and digits. In Python, a string
    is always enclosed in single or double quotes.
  prefs: []
  type: TYPE_NORMAL
- en: Below is a Python program that uses strings.
  prefs: []
  type: TYPE_NORMAL
- en: a = "Everything enclosed in double quotes is a string, even the numbers:"
  prefs: []
  type: TYPE_NORMAL
- en: b = "3, 54, 731"
  prefs: []
  type: TYPE_NORMAL
- en: print(a, b)
  prefs: []
  type: TYPE_NORMAL
- en: print("You can even mix letters, symbols and digits like this:")
  prefs: []
  type: TYPE_NORMAL
- en: print("3 + 4 equals 7")
  prefs: []
  type: TYPE_NORMAL
- en: 'Many times programs deal with data that comes in the form of strings (text).
    Strings are everywhere—from word processors, to web browsers, to text messaging
    programs. Many exercises in this book actually make extensive use of strings.
    Even though Python supports many useful functions and methods for manipulating
    strings, this chapter covers only those functions and methods that are necessary
    for this book''s purpose. However, if you need even more information you can visit
    one of the following addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://tinyurl.com/ybzmkpu3](https://tinyurl.com/ybzmkpu3)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3.13/library/stdtypes.html#string-methods](https://docs.python.org/3.13/library/stdtypes.html#string-methods)'
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter14-01.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Python string functions and methods can be used when there
    is a need to manipulate a string, for example, to isolate a number of characters
    from the string, remove spaces that might exist at the beginning of it, or convert
    all of its characters to uppercase.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)Functions and methods are nothing more than small subprograms
    that solve small problems.'
  prefs: []
  type: TYPE_NORMAL
- en: 14.2 The Position of a Character in a String
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's use the text “Hello World” in the following example. The string consists
    of 11 characters (including the space character between the two words). Python
    numerates characters assuming that the first one is at position 0, the second
    one is at position 1, and so on. The position of each character is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter14-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/remember.jpg)A space is a character just like any other character.
    Just because nobody can see it, it doesn''t mean it doesn''t exist!'
  prefs: []
  type: TYPE_NORMAL
- en: 14.3 Useful String Functions/Methods (Subprograms), and More
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Trimming
  prefs: []
  type: TYPE_NORMAL
- en: Trimming is the process of removing whitespace characters from the beginning
    or the end of a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the whitespace characters that are removed with the trimming process
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: ►an ordinary space
  prefs: []
  type: TYPE_NORMAL
- en: ►a tab
  prefs: []
  type: TYPE_NORMAL
- en: ►a new line (line feed)
  prefs: []
  type: TYPE_NORMAL
- en: ►a carriage return
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can trim any spaces that the user mistakenly entered at the
    end or at the beginning of a string.
  prefs: []
  type: TYPE_NORMAL
- en: The method that you can use to trim a string is
  prefs: []
  type: TYPE_NORMAL
- en: subject.strip()
  prefs: []
  type: TYPE_NORMAL
- en: This method returns a copy of subject in which any whitespace characters are
    removed from both the beginning and the end of the subject string.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3a'
  prefs: []
  type: TYPE_NORMAL
- en: a = "       Hello       "
  prefs: []
  type: TYPE_NORMAL
- en: b = a.strip()
  prefs: []
  type: TYPE_NORMAL
- en: 'print(b, "Poseidon!")    #It displays: Hello Poseidon!'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a, "Poseidon!")    #It displays:       Hello       Poseidon!'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the content of variable a is not altered. If you
    do need to alter its content, you can use the statement a = a.strip()'
  prefs: []
  type: TYPE_IMG
- en: String replacement
  prefs: []
  type: TYPE_NORMAL
- en: subject.replace(search, replace)
  prefs: []
  type: TYPE_NORMAL
- en: This method searches in subject and returns a copy of it in which all occurrences
    of the search string are replaced with the replace string.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3b'
  prefs: []
  type: TYPE_NORMAL
- en: a = "I am newbie in Java. Java rocks!"
  prefs: []
  type: TYPE_NORMAL
- en: b = a.replace("Java", "Python")
  prefs: []
  type: TYPE_NORMAL
- en: 'print(b)            #It displays: I am newbie in Python. Python rocks'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a)            #It displays: I am newbie in Java. Java rocks'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the content of variable a is not altered. If you
    do need to alter its content, you can use the statement a = a.replace("Java",
    "Python")'
  prefs: []
  type: TYPE_IMG
- en: Counting the number of characters
  prefs: []
  type: TYPE_NORMAL
- en: len(subject)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the length of subject or, in other words, the number of
    characters subject consists of.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3c'
  prefs: []
  type: TYPE_NORMAL
- en: a = "Hello Olympians!"
  prefs: []
  type: TYPE_NORMAL
- en: 'print(len(a))           #It displays: 16'
  prefs: []
  type: TYPE_NORMAL
- en: b = "I am newbie in Python"
  prefs: []
  type: TYPE_NORMAL
- en: k = len(b)
  prefs: []
  type: TYPE_NORMAL
- en: 'print(k)                #It displays: 21'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)A character includes anything you can type using the keyboard,
    such as letters, symbols, digits, and space characters.'
  prefs: []
  type: TYPE_NORMAL
- en: Finding string position
  prefs: []
  type: TYPE_NORMAL
- en: subject.find(search)
  prefs: []
  type: TYPE_NORMAL
- en: This method returns the numerical position of the first occurrence of search
    in subject, or −1 if search is not found.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3d'
  prefs: []
  type: TYPE_NORMAL
- en: a = "I am newbie in Python. Python rocks!"
  prefs: []
  type: TYPE_NORMAL
- en: i = a.find("newbie")
  prefs: []
  type: TYPE_NORMAL
- en: 'print(i)                #It displays: 5'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a.find("Python")) #It displays: 15'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a.find("Java"))   #It displays: -1'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The first character is at position 0.'
  prefs: []
  type: TYPE_NORMAL
- en: Converting to lowercase
  prefs: []
  type: TYPE_NORMAL
- en: subject.lower()
  prefs: []
  type: TYPE_NORMAL
- en: This method returns a copy of subject in which all the letters of the string
    subject are converted to lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3e'
  prefs: []
  type: TYPE_NORMAL
- en: a = "My NaMe is JohN"
  prefs: []
  type: TYPE_NORMAL
- en: b = a.lower()
  prefs: []
  type: TYPE_NORMAL
- en: 'print(b)            #It displays: my name is john'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a)            #It displays: My NaMe is JohN'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the content of variable a is not altered. If you
    do need to alter its content, you can use the statement a = a.lower()'
  prefs: []
  type: TYPE_IMG
- en: Converting to uppercase
  prefs: []
  type: TYPE_NORMAL
- en: subject.upper()
  prefs: []
  type: TYPE_NORMAL
- en: This method returns a copy of subject in which all the letters of the string
    subject are converted to uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3f'
  prefs: []
  type: TYPE_NORMAL
- en: a = "My NaMe is JohN"
  prefs: []
  type: TYPE_NORMAL
- en: b = a.upper()
  prefs: []
  type: TYPE_NORMAL
- en: 'print(b)            #It displays: MY NAME IS JOHN'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a)            #It displays: My NaMe is JohN'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the content of variable a is not altered. If you
    do need to alter its content, you can use the statement a = a.upper()'
  prefs: []
  type: TYPE_IMG
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3g'
  prefs: []
  type: TYPE_NORMAL
- en: a = "I am newbie in Java. Java rocks!"
  prefs: []
  type: TYPE_NORMAL
- en: b = a.replace("Java", "Python").upper()
  prefs: []
  type: TYPE_NORMAL
- en: 'print(b)            #It displays: I AM NEWBIE IN PYTHON. PYTHON ROCKS'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note how the method replace() is chained to the method upper().
    The result of the first method is used as a subject for the second method. This
    is a writing style that most programmers prefer to follow because it helps to
    save a lot of code lines. Of course you can chain as many methods as you wish,
    but if you chain too many of them, no one will be able to understand your code.'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving an individual character from a string
  prefs: []
  type: TYPE_NORMAL
- en: subject[index]
  prefs: []
  type: TYPE_NORMAL
- en: This returns the character located at subject's specified index. As already
    mentioned, the string indexes start from zero. You can use index 0 to access the
    first character, index 1 to access the second character, and so on. The index
    of the last character is 1 less than the length of the string.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The notation subject[index] is called “substring notation”.
    The substring notation lets you refer to individual characters within a string.'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3h'
  prefs: []
  type: TYPE_NORMAL
- en: a = "Hello World"
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[0])         #It displays the first letter: H'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[6])         #It displays: W'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[10])        #It displays: d'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the space between the words “Hello” and “World”
    is considered a character as well. So, the letter W exists in position 6 and not
    in position 5.'
  prefs: []
  type: TYPE_NORMAL
- en: If you attempt to use an invalid index such as an index greater than the length
    of the string, Python throws an error message as shown in Figure 14–1.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter14-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14–1 An error message indicating an invalid index
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)String indexes must be in a range from 0 to one less than
    the length of the string.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to start counting from the end of the string (instead of the beginning)
    you can use negative indexes. For example, an index of −1 refers to the right-most
    character.
  prefs: []
  type: TYPE_NORMAL
- en: In the text «Hello World», the position (using negative indexes) of each character
    is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter14-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3i'
  prefs: []
  type: TYPE_NORMAL
- en: a = "Hello World"
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[-1])      #It displays the last letter: d'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[-3])      #It displays: r'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[-11])     #It displays: H'
  prefs: []
  type: TYPE_NORMAL
- en: Another way of extracting single characters from strings in Python is to unpack
    them into individual variables.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3j'
  prefs: []
  type: TYPE_NORMAL
- en: name = "Zeus"
  prefs: []
  type: TYPE_NORMAL
- en: a, b, c, d = name
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a)     #It displays: Z'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(b)     #It displays: e'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(c)     #It displays: u'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(d)     #It displays: s'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)This last approach requires you to know in advance how many
    characters are in the string. If the number of variables you supply does not match
    the number of characters in the string, Python throws an error.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting part of a string (Slice Notation)
  prefs: []
  type: TYPE_NORMAL
- en: 'subject[[beginIndex] : [endIndex] [: step]]'
  prefs: []
  type: TYPE_NORMAL
- en: This notation returns a portion of subject. Specifically, it returns the substring
    starting from position beginIndex and running up to, but not including, position
    endIndex or up to the end of subject, whichever comes first. Both arguments beginIndex
    and endIndex are optional. If beginIndex is omitted, the substring starting from
    position 0 and running up to, but not including, position endIndex is returned.
    If endIndex is omitted, the substring starting from position beginIndex until
    the end of subject is returned.
  prefs: []
  type: TYPE_NORMAL
- en: The last argument step is optional as well. If omitted, its default value is
    1\. If supplied, it defines the number of characters you want to move forward
    after each character is retrieved from the original string.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)“Slicing” in Python is a mechanism to select a range of
    elements (here characters) from a sequence (here a string).'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3k'
  prefs: []
  type: TYPE_NORMAL
- en: a = "Hello World"
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[7:9])       #It displays: or'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[7:900])     #It displays: orld'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[4:10:2])    #Step is set to 2\. It displays: oWr'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[7:])        #It displays: orld'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[:3])        #It displays: Hel'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to start counting from the end of the string (instead of the beginning)
    use negative indexes.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3l'
  prefs: []
  type: TYPE_NORMAL
- en: a = "Hello World"
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[-4:-2])     #It displays: or'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[-3:])       #It displays: rld'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[:-3])       #It displays: Hello Wo'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a[3:-2])      #It displays: lo Wor'
  prefs: []
  type: TYPE_NORMAL
- en: Converting a number to string
  prefs: []
  type: TYPE_NORMAL
- en: str(number)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns a string version of number or, in other words, it converts
    a number (real or integer) into a string.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3m'
  prefs: []
  type: TYPE_NORMAL
- en: 'age = int(input("Enter your age: "))'
  prefs: []
  type: TYPE_NORMAL
- en: newAge = age + 10
  prefs: []
  type: TYPE_NORMAL
- en: message = "You 'll be " + str(newAge) + " years old in 10 years from now!"
  prefs: []
  type: TYPE_NORMAL
- en: print(message)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.3-1 Displaying a String Backwards
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter any string with four letters
    and then displays its contents backwards. For example, if the string entered is
    “Zeus”, the program must display “sueZ”.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Below, three approaches are presented below.
  prefs: []
  type: TYPE_NORMAL
- en: First approach
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that user's input is assigned to variable s. You can access the fourth
    character using s[3], the third character using s[2], and so on. The Python program
    is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3-1a'
  prefs: []
  type: TYPE_NORMAL
- en: 's = input("Enter a word with four letters: ")'
  prefs: []
  type: TYPE_NORMAL
- en: sReversed = s[3] + s[2] + s[1] + s[0]
  prefs: []
  type: TYPE_NORMAL
- en: print(sReversed)
  prefs: []
  type: TYPE_NORMAL
- en: Second approach
  prefs: []
  type: TYPE_NORMAL
- en: This approach unpacks the four letters into four individual variables, as shown
    here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3-1b'
  prefs: []
  type: TYPE_NORMAL
- en: 's = input("Enter a word with four letters: ")'
  prefs: []
  type: TYPE_NORMAL
- en: letter1, letter2, letter3, letter4 = s
  prefs: []
  type: TYPE_NORMAL
- en: sReversed = letter4 + letter3 + letter2 + letter1
  prefs: []
  type: TYPE_NORMAL
- en: print(sReversed)
  prefs: []
  type: TYPE_NORMAL
- en: Third approach
  prefs: []
  type: TYPE_NORMAL
- en: This approach uses the slice notation and the negative value of −1 for argument
    step.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3-1c'
  prefs: []
  type: TYPE_NORMAL
- en: 's = input("Enter a word with four letters: ")'
  prefs: []
  type: TYPE_NORMAL
- en: sReversed = s[::-1]
  prefs: []
  type: TYPE_NORMAL
- en: print(sReversed)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The advantage of this approach is that the user is allowed
    to enter any string, no matter how short or long!'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.3-2 Switching the Order of Names
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter in one single string both
    first and last name. In the end, the program must change the order of the two
    names.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This exercise is not the same as the one that you learned in Exercises [8.1-3](chapter08.html#toc_4)
    and [8.1-4](chapter08.html#toc_5), which swapped the numeric values of two variables.
    In this exercise both the first and last names are entered in one single string,
    so the first thing that the program must do is split the string and assign each
    name to a different variable. If you manage to do so, then you can just rejoin
    them in a different order.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try to understand this exercise using an example. The string that you
    must split and the position of its individual character are shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter14-05.png)'
  prefs: []
  type: TYPE_IMG
- en: The character that visually separates the first name from the last name is the
    space character between them. The problem here is that this character is not always
    at position 3\. Someone can have a short first name like “Tom” and someone else
    can have a longer one like “Robert”. Thus, you need something that actually finds
    the position of the space character regardless of the content of the string.
  prefs: []
  type: TYPE_NORMAL
- en: Method find() is what you are looking for! If you use it to find the position
    of the space character in the string “Tom Smith”, it returns the value 3\. But
    if you use it to find the space character in another string, such as “Angelina
    Brown”, it returns the value 8 instead.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The value 3 is not just the position where the space character
    exists. It also represents the number of characters that the word “Tom” contains!
    The same applies to the value 8 that is returned for the string “Angelina Brown”.
    It represents both the position where the space character exists and the number
    of characters that the word “Angelina” contains!'
  prefs: []
  type: TYPE_NORMAL
- en: The Python program for this algorithm is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3-2'
  prefs: []
  type: TYPE_NORMAL
- en: 'fullName = input("Enter your full name: ")'
  prefs: []
  type: TYPE_NORMAL
- en: '#Find the position of space character. This is also the number'
  prefs: []
  type: TYPE_NORMAL
- en: '#of characters first name contains'
  prefs: []
  type: TYPE_NORMAL
- en: spacePos = fullName.find(" ")
  prefs: []
  type: TYPE_NORMAL
- en: '#Get spacePos number of characters starting from position 0'
  prefs: []
  type: TYPE_NORMAL
- en: name1 = fullName[:spacePos]
  prefs: []
  type: TYPE_NORMAL
- en: '#Get the rest of the characters starting from position spacePos + 1'
  prefs: []
  type: TYPE_NORMAL
- en: name2 = fullName[spacePos + 1:]
  prefs: []
  type: TYPE_NORMAL
- en: fullName = name2 + " " + name1
  prefs: []
  type: TYPE_NORMAL
- en: print(fullName)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The notation subject[beginIndex : endIndex] returns a
    portion of subject. Specifically, it returns the substring starting from beginIndex
    position and running up to but not including endIndex position.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that this program cannot be applied to a Spanish name
    such as “Maria Teresa García Ramírez de Arroyo”. The reason is obvious!'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.3-3 Creating a Login ID
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter their last name and then
    creates a login ID from the first four letters of the name (in lowercase) and
    a three-digit random integer.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: To create a random integer you can use the randrange() function. Since you need
    a random integer of three digits, the range must be between 100 and 999.
  prefs: []
  type: TYPE_NORMAL
- en: The Python program for this algorithm is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3-3'
  prefs: []
  type: TYPE_NORMAL
- en: from random import randrange
  prefs: []
  type: TYPE_NORMAL
- en: 'lastName = input("Enter last name: ")'
  prefs: []
  type: TYPE_NORMAL
- en: '#Get random integer between 100 and 999'
  prefs: []
  type: TYPE_NORMAL
- en: randomInt = randrange(100, 1000)
  prefs: []
  type: TYPE_NORMAL
- en: print(lastName[:4].lower() + str(randomInt))
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the notation lastName[:4] returns the substring
    starting from position 0 and running up to but not including position 4.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.3-4 Creating a Random Word
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that displays a random word consisting of three letters.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: To create a random word you need a variable which contains all 26 letters of
    the English alphabet. Then you can use the randrange() function to choose a random
    letter between position 0 and 25.
  prefs: []
  type: TYPE_NORMAL
- en: The Python program for this algorithm is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3-4a'
  prefs: []
  type: TYPE_NORMAL
- en: from random import randrange
  prefs: []
  type: TYPE_NORMAL
- en: alphabet = "abcdefghijklmnopqrstuvwxyz"
  prefs: []
  type: TYPE_NORMAL
- en: randomWord = alphabet[randrange(26)] + alphabet[randrange(26)] + alphabet[randrange(26)]
  prefs: []
  type: TYPE_NORMAL
- en: print(randomWord)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the function randrange(26) is called three times
    and each time it may return a different random integer between 0 and 25.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the len() function to get the length of variable alphabet as
    shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3-4b'
  prefs: []
  type: TYPE_NORMAL
- en: from random import randrange
  prefs: []
  type: TYPE_NORMAL
- en: alphabet = "abcdefghijklmnopqrstuvwxyz"
  prefs: []
  type: TYPE_NORMAL
- en: randomWord = alphabet[randrange(len(alphabet))] +    \
  prefs: []
  type: TYPE_NORMAL
- en: alphabet[randrange(len(alphabet))] +    \
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: alphabet[randrange(len(alphabet))]
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(randomWord)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)You can nest one subprogram within another. Note how the
    function len() is nested within the function randrange(). The result of the inner
    (nested) function is used as an argument for the outer function.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In Python, you can break up a long line amongst multiple
    lines using the backslash ( \ ) character at the end of each line (except the
    last one).'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.3-5 Finding the Sum of Digits
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter a three-digit integer
    and then calculates the sum of its digits. Solve this exercise without using the
    integer quotient ( // ) and the integer remainder ( % ) operators.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Now you may wonder why this exercise is placed in this chapter, which primarily
    focuses on string manipulation. You might argue that you already know how to split
    a three-digit integer into its three digits and assign each digit to a separate
    variable as you did learn a method in [Chapter 13](chapter13.html) using the integer
    quotient ( // ) and the integer remainder ( % ) operators. So, why is this exercise
    discussed here again?
  prefs: []
  type: TYPE_NORMAL
- en: The reason is that Python is a very powerful language and you can use its magic
    forces to solve this exercise in a totally different way. The main idea is to
    convert the user-provided integer to type string.
  prefs: []
  type: TYPE_NORMAL
- en: First approach
  prefs: []
  type: TYPE_NORMAL
- en: In this approach each digit (each character) is assigned to individual variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3-5a'
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter an three-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: sNumber = str(number)
  prefs: []
  type: TYPE_NORMAL
- en: digit1 = sNumber[0]
  prefs: []
  type: TYPE_NORMAL
- en: digit2 = sNumber[1]
  prefs: []
  type: TYPE_NORMAL
- en: digit3 = sNumber[2]
  prefs: []
  type: TYPE_NORMAL
- en: total = int(digit1) + int(digit2) + int(digit3)
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)As variables digit1, digit2, and digit3 are of type string,
    you need to use the int() function to convert them to integers before finding
    their sum in the variable total.'
  prefs: []
  type: TYPE_NORMAL
- en: Second approach
  prefs: []
  type: TYPE_NORMAL
- en: In this approach each digit (each character) is unpacked into individual variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_14.3-5b'
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter an three-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: digit1, digit2, digit3 = str(number)
  prefs: []
  type: TYPE_NORMAL
- en: total = int(digit1) + int(digit2) + int(digit3)
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: '14.4 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)A string is anything that you can type using the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Strings must be enclosed in parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: 3)The phrase “Hi there!” contains 8 characters.
  prefs: []
  type: TYPE_NORMAL
- en: 4)In the phrase “Hi there!” the letter “t” is at position 3.
  prefs: []
  type: TYPE_NORMAL
- en: 5)The statement y = a[1] assigns the second character of the string contained
    in variable a to variable y.
  prefs: []
  type: TYPE_NORMAL
- en: 6)The following code fragment satisfies the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: a = "Hello"
  prefs: []
  type: TYPE_NORMAL
- en: y = a[5]
  prefs: []
  type: TYPE_NORMAL
- en: 7)Trimming is the process of removing whitespace characters from the beginning
    or the end of a string.
  prefs: []
  type: TYPE_NORMAL
- en: 8)The statement y = "Hello         Aphrodite".strip() assigns the value “HelloAphrodite”
    to variable y.
  prefs: []
  type: TYPE_NORMAL
- en: 9)The statement print("Hi there!".replace("Hi", "Hello")) displays the message
    “Hello there!”.
  prefs: []
  type: TYPE_NORMAL
- en: 10)The following code fragment assigns the value 4 to variable index.
  prefs: []
  type: TYPE_NORMAL
- en: a = "Hi there"
  prefs: []
  type: TYPE_NORMAL
- en: index = a.find("the")
  prefs: []
  type: TYPE_NORMAL
- en: 11)The statement print("hello there!".upper()) displays the message “Hello There!”.
  prefs: []
  type: TYPE_NORMAL
- en: 12)The following code fragment displays the message “Hello there!”.
  prefs: []
  type: TYPE_NORMAL
- en: a = "Hello there!"
  prefs: []
  type: TYPE_NORMAL
- en: print(a[:])
  prefs: []
  type: TYPE_NORMAL
- en: 13)The statement print(a[:len(a)]) displays some letters of the variable a.
  prefs: []
  type: TYPE_NORMAL
- en: 14)The statement print(a) is equivalent to the statement print(a[:len(a):]).
  prefs: []
  type: TYPE_NORMAL
- en: 15)The following code fragment displays the word “HELLO”.
  prefs: []
  type: TYPE_NORMAL
- en: y = "hello there!"
  prefs: []
  type: TYPE_NORMAL
- en: print(y[:5].upper())
  prefs: []
  type: TYPE_NORMAL
- en: 16)The statement print(a[len(a) - 1])is equivalent to the statement print(a[−1]).
  prefs: []
  type: TYPE_NORMAL
- en: 17)The following code fragment displays the value of 23.
  prefs: []
  type: TYPE_NORMAL
- en: a = 2023
  prefs: []
  type: TYPE_NORMAL
- en: print(str(a)[2:4])
  prefs: []
  type: TYPE_NORMAL
- en: '14.5 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Which of the following is not a string?
  prefs: []
  type: TYPE_NORMAL
- en: a)“Hello there!”
  prefs: []
  type: TYPE_NORMAL
- en: b)“13”
  prefs: []
  type: TYPE_NORMAL
- en: c)“13.5”
  prefs: []
  type: TYPE_NORMAL
- en: d)All of the above are strings.
  prefs: []
  type: TYPE_NORMAL
- en: 2)In which position does the space character in the string “Hello Zeus!”, exist?
  prefs: []
  type: TYPE_NORMAL
- en: a)6
  prefs: []
  type: TYPE_NORMAL
- en: b)5
  prefs: []
  type: TYPE_NORMAL
- en: c)Space is not a character.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 3)The statement print(a[len(a) − 2]) displays
  prefs: []
  type: TYPE_NORMAL
- en: a)the last character of variable a.
  prefs: []
  type: TYPE_NORMAL
- en: b)the second to last character of variable a.
  prefs: []
  type: TYPE_NORMAL
- en: c)The statement is not valid.
  prefs: []
  type: TYPE_NORMAL
- en: 4)The statement
  prefs: []
  type: TYPE_NORMAL
- en: y = a.strip().replace("a", "b").replace("w", "y")
  prefs: []
  type: TYPE_NORMAL
- en: is equivalent to the statement
  prefs: []
  type: TYPE_NORMAL
- en: a)y = a.replace("a", "b").replace("w", "y").strip()
  prefs: []
  type: TYPE_NORMAL
- en: b)y = a.replace("a", "b").strip().replace("w", "y")
  prefs: []
  type: TYPE_NORMAL
- en: c)y = a.strip().replace("w", "y").replace("a", "b")
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: 5)The statement a.replace(" ", "")
  prefs: []
  type: TYPE_NORMAL
- en: a)adds a space between each letter in the variable a.
  prefs: []
  type: TYPE_NORMAL
- en: b)removes all space characters from the variable a.
  prefs: []
  type: TYPE_NORMAL
- en: c)empties the variable a.
  prefs: []
  type: TYPE_NORMAL
- en: 6)The statement "  Hello  ".replace(" ", "") is equivalent to the statement
  prefs: []
  type: TYPE_NORMAL
- en: a)"  Hello  ".replace("", " "
  prefs: []
  type: TYPE_NORMAL
- en: b)"  Hello  ".strip()
  prefs: []
  type: TYPE_NORMAL
- en: c)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 7)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: a = ""
  prefs: []
  type: TYPE_NORMAL
- en: print(len(a))
  prefs: []
  type: TYPE_NORMAL
- en: displays
  prefs: []
  type: TYPE_NORMAL
- en: a)nothing.
  prefs: []
  type: TYPE_NORMAL
- en: b)1.
  prefs: []
  type: TYPE_NORMAL
- en: c)0.
  prefs: []
  type: TYPE_NORMAL
- en: d)The statement is invalid.
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 8)Which value assigns the following code fragment to the variable Shakespeare?
  prefs: []
  type: TYPE_NORMAL
- en: toBeOrNotToBe = "2b Or Not 2b"
  prefs: []
  type: TYPE_NORMAL
- en: Shakespeare = toBeOrNotToBe.find("b")
  prefs: []
  type: TYPE_NORMAL
- en: a)1
  prefs: []
  type: TYPE_NORMAL
- en: b)2
  prefs: []
  type: TYPE_NORMAL
- en: c)11
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 9)What does the following code fragment do?
  prefs: []
  type: TYPE_NORMAL
- en: a = "Hi there"
  prefs: []
  type: TYPE_NORMAL
- en: b = a[a.find(" ") + 1:]
  prefs: []
  type: TYPE_NORMAL
- en: a)It assigns the word “Hi” to the variable b.
  prefs: []
  type: TYPE_NORMAL
- en: b)It assigns a space character to the variable b.
  prefs: []
  type: TYPE_NORMAL
- en: c)It assigns the word “there” to the variable b.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 10)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: a = 15
  prefs: []
  type: TYPE_NORMAL
- en: b = 5
  prefs: []
  type: TYPE_NORMAL
- en: print(str(a) + str(b))
  prefs: []
  type: TYPE_NORMAL
- en: displays
  prefs: []
  type: TYPE_NORMAL
- en: a)155.
  prefs: []
  type: TYPE_NORMAL
- en: b)10.
  prefs: []
  type: TYPE_NORMAL
- en: c)15 + 5
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 14.6 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Write a Python program that creates and displays a random word consisting
    of five letters. The first letter must be a capital letter.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Write a Python program that prompts the user to enter their name and then
    creates a secret password consisting of three letters (in lowercase) randomly
    picked up from their name, and a random four-digit number. For example, if the
    user enters “Vassilis Bouras” a secret password can probably be one of “sar1359”
    or “vbs7281” or “bor1459”. Space characters are not allowed in the secret password.
  prefs: []
  type: TYPE_NORMAL
- en: 3)Write a Python program that prompts the user to enter a three-digit integer
    and then reverses it. For example, if the user enters the number 375, the number
    573 must be displayed. Solve this exercise without using the integer quotient
    ( // ) and the integer remainder ( % ) operators.
  prefs: []
  type: TYPE_NORMAL
- en: 4)Write a Python program that prompts the user to enter their first name, middle
    name, and last name and displays them formatted in all the following ways.
  prefs: []
  type: TYPE_NORMAL
- en: FirstName MiddleName LastName
  prefs: []
  type: TYPE_NORMAL
- en: FirstName M. LastName (where M is the first letter of the middle name)
  prefs: []
  type: TYPE_NORMAL
- en: LastName F. (where F is the first letter of the first name)
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the program must ensure that regardless of how the user enters
    their name, it will always be displayed with the first letter capitalized and
    the rest in lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, assume that the user enters the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First name: Aphrodite'
  prefs: []
  type: TYPE_NORMAL
- en: 'Middle name: MARIA'
  prefs: []
  type: TYPE_NORMAL
- en: 'Last name: boura'
  prefs: []
  type: TYPE_NORMAL
- en: 'The program must display the user''s name formatted in all the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Aphrodite Maria Boura
  prefs: []
  type: TYPE_NORMAL
- en: Aphrodite M. Boura
  prefs: []
  type: TYPE_NORMAL
- en: Boura A.
  prefs: []
  type: TYPE_NORMAL
- en: '5)Some words such as “revolutionary” and “internationalization” are so lengthy
    that writing them out repeatedly can become quite tiresome. In such cases, these
    words can be replaced with a special abbreviation which is made like this: you
    keep the first and the last letter of a word and insert the number of letters
    between them. For instance, “revolutionary” becomes “r11y” and “internationalization”
    becomes “i18n”.'
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter a long word and displays its
    abbreviation.
  prefs: []
  type: TYPE_NORMAL
