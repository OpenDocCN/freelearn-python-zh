["```py\nimport os\n\ndef report():\n\t\tresponse.title = \"web2py sample report\"\n\t# include a chart from google chart\n\turl = \"http://chart.apis.google.com/chart?cht=p3&chd=t:60,\n\t\t40&chs=500x200&chl=Hello|World&.png\"\n\tchart = IMG(_src=url, _width=\"250\",_height=\"100\")\n\n\t# create a small table with some data:\n\trows = [THEAD(TR(TH(\"Key\",_width=\"70%\"),\n\t\tTH(\"Value\",_width=\"30%\"))),\n\t\tTBODY(TR(TD(\"Hello\"),TD(\"60\")),\n\t\tTR(TD(\"World\"),TD(\"40\")))]\n\n\ttable = TABLE(*rows, _border=\"0\", _align=\"center\", _width=\"50%\")\n\nif request.extension==\"pdf\":\n\tfrom gluon.contrib.pyfpdf import FPDF, HTMLMixin\n\n# create a custom class with the required functionalities\nclass MyFPDF(FPDF, HTMLMixin):\n\tdef header(self):\n\t\t\"hook to draw custom page header (logo and title)\"\n\n\t\t# remember to copy logo_pb.png to static/images (and remove\n\t\t#alpha channel)\n\t\tlogo=os.path.join(request.folder,\"static\",\"images\",\n\t\t\t\t\t\t\"logo_pb.png\")\n\t\tself.image(logo,10,8,33)\n\t\tself.set_font('Arial','B',15)\n\t\tself.cell(65) # padding\n\t\tself.cell(60,10,response.title,1,0,'C')\n\t\tself.ln(20)\n\tdef footer(self):\n\t\t\"hook to draw custom page footer (printing page numbers)\"\n\t\tself.set_y(-15)\n\t\tself.set_font('Arial','I',8)\n\t\ttxt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages())\n\t\tself.cell(0,10,txt,0,0,'C')\n\t\tpdf=MyFPDF()\n\n\t\t# create a page and serialize/render HTML objects\n\t\tpdf.add_page()\n\t\tpdf.write_html(table.xml())\n\t\tpdf.write_html(CENTER(chart).xml())\n\t\t# prepare PDF to download:\n\t\tresponse.headers['Content-Type']='application/pdf'\n\t\treturn pdf.output(dest='S')\n\n# else normal html view:\nreturn dict(chart=chart, table=table)\n\n```", "```py\nif request.extension=='pdf':\n\t...\n\tpdf=MyFPDF()\n\t...\n\treturn pdf.output(dest='S')\n\n```", "```py\npdf.write_html(table.xml())\npdf.write_html(CENTER(chart).xml())\n\n```", "```py\ndef listing():\n\tresponse.title = \"web2py sample listing\"\n\n\t# define header and footers:\n\thead = THEAD(TR(TH(\"Header 1\",_width=\"50%\"),\n\tTH(\"Header 2\",_width=\"30%\"),\n\tTH(\"Header 3\",_width=\"20%\"),\n\t_bgcolor=\"#A0A0A0\"))\n\tfoot = TFOOT(TR(TH(\"Footer 1\",_width=\"50%\"),\n\tTH(\"Footer 2\",_width=\"30%\"),\n\tTH(\"Footer 3\",_width=\"20%\"),\n\t_bgcolor=\"#E0E0E0\"))\n\n\t# create several rows:\n\trows = []\n\tfor i in range(1000):\n\t\tcol = i % 2 and \"#F0F0F0\" or \"#FFFFFF\"\n\t\trows.append(TR(TD(\"Row %s\" %i),\n\t\tTD(\"something\", _align=\"center\"),\n\t\tTD(\"%s\" % i, _align=\"right\"),\n\t\t_bgcolor=col))\n\n\t# make the table object\n\tbody = TBODY(*rows)\n\ttable = TABLE(*[head,foot, body],\n\t_border=\"1\", _align=\"center\", _width=\"100%\")\n\n\tif request.extension==\"pdf\":\n\t\tfrom gluon.contrib.pyfpdf import FPDF, HTMLMixin\n\t\t# define our FPDF class (move to modules if it is reused\n\n\t\tclass MyFPDF(FPDF, HTMLMixin):\n\t\t\tdef header(self):\n\t\t\t\tself.set_font('Arial','B',15)\n\t\t\t\tself.cell(0,10, response.title ,1,0,'C')\n\t\t\t\tself.ln(20)\n\t\t\tdef footer(self):\n\t\t\t\tself.set_y(-15)\n\t\t\t\tself.set_font('Arial','I',8)\n\t\t\t\ttxt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages())\n\t\t\t\tself.cell(0,10,txt,0,0,'C')\n\n\tpdf=MyFPDF()\n\n\t# first page:\n\tpdf.add_page()\n\tpdf.write_html(table.xml())\n\tresponse.headers['Content-Type']='application/pdf'\n\treturn pdf.output(dest='S')\n# else return normal html view:\nreturn dict(table=table)\n\n```", "```py\n    def _():\n    \tPAPER_FORMATS = [\"A4\",\"legal\",\"letter\"]\n    \tELEMENT_TYPES = {'T':'Text', 'L':'Line', 'I':'Image', 'B':'Box',\n    \t\t'BC':'BarCode'}\n    \tFONTS = ['Arial', 'Courier', 'Helvetica', 'Times-Roman',\n    \t\t'Symbol','ZapfDingbats']\n    \tALIGNS = {'L':'Left', 'R':'Right', 'C':'Center',\n    \t\t'J':'Justified'}\n    \tNE = IS_NOT_EMPTY()\n\n    \tdb.define_table(\"pdf_template\",\n    \t\tField(\"pdf_template_id\",\"id\"),\n    \t\tField(\"title\"),\n    \t\tField(\"format\", requires=IS_IN_SET(PAPER_FORMATS)),\n    \t\tformat = '%(title)s')\n\n    \tdb.define_table(\"pdf_element\",\n    \t\tField(\"pdf_template_id\", db.pdf_template),\n    \t\tField(\"name\", requires=NE),\n    \t\tField(\"type\", length=2, requires=IS_IN_SET(ELEMENT_TYPES)),\n    \t\tField(\"x1\", \"double\", requires=NE),\n    \t\tField(\"y1\", \"double\", requires=NE),\n    \t\tField(\"x2\", \"double\", requires=NE),\n    \t\tField(\"y2\", \"double\", requires=NE),\n    \t\tField(\"font\", default=\"Arial\", requires=IS_IN_SET(FONTS)),\n    \t\tField(\"size\", \"double\", default=\"10\", requires=NE),\n    \t\tField(\"bold\", \"boolean\"),\n    \t\tField(\"italic\", \"boolean\"),\n    \t\tField(\"underline\", \"boolean\"),\n    \t\tField(\"foreground\", \"integer\", default=0x000000, comment=\"Color text\"),\n    \t\tField(\"background\", \"integer\", default=0xFFFFFF, comment=\"Fill\n    \t\t\tcolor\"),\n    \t\tField(\"align\", \"string\", length=1, default=\"L\",\n    \t\t\trequires=IS_IN_SET(ALIGNS)),\n    \t\tField(\"text\", \"text\", comment=\"Default text\"),\n    \t\tField(\"priority\", \"integer\", default=0, comment=\"Z-Order\"))\n    _()\n\n    ```", "```py\n    # coding: utf8\n    import os, os.path\n    from gluon.contrib.pyfpdf import Template\n    def create_label():\n    \tpdf_template_id = db.pdf_template.insert(title=\"sample badge\",\n    \t\t\t\t\t\t\t\t\t\t\t\tformat=\"A4\")\n\n    \t# configure optional background image and insert his element\n    \tpath_to_image = os.path.join(request.folder, 'static','42.png')\n    \tif path_to_image:\n    \t\tdb.pdf_element.insert(pdf_template_id=pdf_template_id,\n    \t\t\tname='background', type='I', x1=0.0, y1=0.0, x2=85.23,\n    \t\t\ty2=54.75, font='Arial', size=10.0, bold=False, italic=False,\n    \t\t\tunderline=False, foreground=0, background=16777215, align='L',\n    \t\t\ttext=path_to_image, priority=-1)\n\n    \t\t# insert name, company_name, number and attendee type elements:\n    \t\tdb.pdf_element.insert(pdf_template_id=pdf_template_id,\n    \t\t\tname='name', type='T', x1=4.0, y1=25.0, x2=62.0, y2=30.0,\n    \t\t\tfont='Arial', size=12.0, bold=True,\n    \t\t\titalic=False,\n    \t\t\tunderline=False, foreground=0, background=16777215, align='L',\n    \t\t\ttext='', priority=0)\n    \t\tdb.pdf_element.insert(pdf_template_id=pdf_template_id,\n    \t\t\tname='company_name', type='T', x1=4.0, y1=30.0, x2=50.0,\n    \t\t\ty2=34.0, font='Arial', size=10.0, bold=False, italic=False,\n    \t\t\tunderline=False, foreground=0, background=16777215, align='L',\n    \t\t\ttext='', priority=0)\n    \t\tdb.pdf_element.insert(pdf_template_id=pdf_template_id,\n    \t\t\tname='no', type='T', x1=4.0, y1=34.0, x2=80.0, y2=38.0,\n    \t\t\tfont='Arial', size=10.0, bold=False, italic=False,\n    \t\t\tunderline=False, foreground=0, background=16777215, align='R',\n    \t\t\ttext='', priority=0)\n    \t\tdb.pdf_element.insert(pdf_template_id=pdf_template_id,\n    \t\t\tname='attendee_type', type='T', x1=4.0, y1=38.0, x2=50.0,\n    \t\t\ty2=42.0, font='Arial', size=10.0, bold=False, italic=False,\n    \t\t\tunderline=False, foreground=0, background=16777215, align='L',\n    \t\t\ttext='', priority=0)\n    \t\treturn dict(pdf_template_id=pdf_template_id)\n\n    def copy_labels():\n    \t# read base label/badge elements from db\n    \tbase_pdf_template_id = 1\n    \telements = db(db.pdf_element.pdf_template_id==\\\n    \tbase_pdf_template_id).select(orderby=db.pdf_element.priority)\n\n    \t# set up initial offset and width and height:\n    \tx0, y0 = 10, 10\n    \tdx, dy = 85.5, 55\n\n    \t# create new template to hold several labels/badges:\n    \trows, cols = 5, 2\n    \tpdf_template_id = db.pdf_template.insert(title=\"sample badge\\\n    \t%s rows %s cols\" % (rows, cols), format=\"A4\")\n\n    \t# copy the base elements:\n    \tk = 0\n    \t\tfor i in range(rows):\n    \t\t\tfor j in range(cols):\n    \t\t\t\tk += 1\n    \t\t\t\tfor e in elements:\n    \t\t\t\t\te = dict(element)\n    \t\t\t\t\te['name'] = \"%s%02d\" % (e['name'], k)\n    \t\t\t\t\te['pdf_template_id'] = pdf_template_id\n    \t\t\t\t\te['x1'] = e['x1'] + x0 + dx*j\n    \t\t\t\t\te['x2'] = e['x2'] + x0 + dx*j\n    \t\t\t\t\te['y1'] = e['y1'] + y0 + dy*i\n    \t\t\t\t\te['y2'] = e['y2'] + y0 + dy*i\n    \t\t\t\t\tdel e['update_record']\n    \t\t\t\t\tdel e['delete_record']\n    \t\t\t\t\tdel e['id']\n    \t\t\t\t\tdb.pdf_element.insert(**e)\n    \treturn {'new_pdf_template_id': pdf_template_id}\n\n    def speakers_badges():\n    \t# set template to use from the db:\n    \tpdf_template_id = 2\n\n    \t# query registered users and generate speaker labels\n    \tspeakers = db(db.auth_user.id>0).select(orderby=\n    \tdb.auth_user.last_name|db.auth_user.first_name)\n    \tcompany_name = \"web2conf\"\n    \tattendee_type = \"Speaker\"\n\n    \t# read elements from db\n    \telements = db(db.pdf_element.pdf_template_id==\n    \tpdf_template_id).select(orderby=db.pdf_element.priority)\n    \tf = Template(format=\"A4\",\n    \t\t\t\telements = elements,\n    \t\t\t\ttitle=\"Speaker Badges\", author=\"web2conf\",\n    \t\t\t\tsubject=\"\", keywords=\"\")\n\n    \t# calculate pages:\n    \tlabel_count = len(speakers)\n    \tmax_labels_per_page = 5*2\n    \tpages = label_count / (max_labels_per_page - 1)\n    \tif label_count % (max_labels_per_page - 1): pages = pages + 1\n\n    \t# fill placeholders for each page\n    \tfor page in range(1, pages+1):\n    \t\tf.add_page()\n    \t\tk = 0\n    \t\tli = 0\n    \t\tfor speaker in speakers:\n    \t\t\tk = k + 1\n    \t\t\tif k > page * (max_labels_per_page ):\n    \t\t\t\tbreak\n    \t\t\tif k > (page - 1) * (max_labels_per_page ):\n    \t\t\t\tli += 1\n\n    \t\t#f['item_quantity%02d' % li] = it['qty']\n    \t\tf['name%02d' % li] = unicode(\"%s %s\" % (speaker.first_name,\n    \t\t\t\t\t\t\t\t\t\t\t\tspeaker.last_name), \"utf8\")\n    \t\tf['company_name%02d' % li] = unicode(\"%s %s\" % \\\n    \t\t\t(company_name, \"\"), \"utf8\")\n    \t\tf['attendee_type%02d' % li] = attendee_type\n\n    \t\t##f['no%02d' % li] = li\n    \tresponse.headers['Content-Type']='application/pdf'\n    \treturn f.render('badge.pdf', dest='S')\n\n    ```", "```py\n    # coding: utf8\n\n    from gluon.contrib.pyfpdf import Template\n    import os.path\n    import random\n    from decimal import Decimal\n\n    def invoice():\n    \t# set sample invoice pdf_template_id:\n    \tinvoice_template_id = 3\n\n    \t# generate sample invoice (according to Argentina's regulations)\n\n    \t# read elements from db\n    \telements = db(db.pdf_element.pdf_template_id==\n    \t\tinvoice_template_id).select(orderby=db.pdf_element.priority)\n\n    \tf = Template(format=\"A4\",\n    \t\telements = elements,\n    \t\ttitle=\"Sample Invoice\", author=\"Sample Company\",\n    \t\tsubject=\"Sample Customer\", keywords=\"Electronic TAX Invoice\")\n\n    \t# create some random invoice line items and detail data\n    \tdetail = \"Lorem ipsum dolor sit amet, consectetur. \" * 5\n    \titems = []\n    \tfor i in range(1, 30):\n    \t\tds = \"Sample product %s\" % i\n    \t\tqty = random.randint(1,10)\n    \t\tprice = round(random.random()*100,3)\n    \t\tcode = \"%s%s%02d\" % (chr(random.randint(65,90)),\n    \t\t\tchr(random.randint(65,90)),i)\n    \t\titems.append(dict(code=code, unit='u',\n    \t\t\tqty=qty, price=price,\n    \t\t\tamount=qty*price,\n    \t\t\tds=\"%s: %s\" % (i,ds)))\n\n    \t# divide and count lines\n    \tlines = 0\n    \tli_items = []\n    \tfor it in items:\n    \t\tqty = it['qty']\n    \t\tcode = it['code']\n    \t\tunit = it['unit']\n    \t\tfor ds in f.split_multicell(it['ds'], 'item_description01'):\n    \t\t\t# add item description line (without price nor amount)\n    \t\t\tli_items.append(dict(code=code, ds=ds, qty=qty, unit=unit,\n    \t\t\t\tprice=None, amount=None))\n    \t\t\t# clean qty and code (show only at first)\n    \t\t\tunit = qty = code = None\n    \t\t\t# set last item line price and amount\n    \t\t\tli_items[-1].update(amount = it['amount'],\n    \t\t\t\tprice = it['price'])\n\n    \t# split detail into each line description\n    \tobs=\"\\n<U>Detail:</U>\\n\\n\" + detail\n    \tfor ds in f.split_multicell(obs, 'item_description01'):\n    \t\tli_items.append(dict(code=code, ds=ds, qty=qty, unit=unit,\n    \t\t\tprice=None, amount=None))\n\n    \t# calculate pages:\n    \tlines = len(li_items)\n    \tmax_lines_per_page = 24\n    \tpages = lines / (max_lines_per_page - 1)\n    \tif lines % (max_lines_per_page - 1): pages = pages + 1\n\n    \t# fill placeholders for each page\n    \tfor page in range(1, pages+1):\n    \t\tf.add_page()\n    \t\tf['page'] = 'Page %s of %s' % (page, pages)\n    \t\tif pages>1 and page<pages:\n    \t\t\ts = 'Continues on page %s' % (page+1)\n    \t\telse:\n    \t\t\ts = ''\n    \t\t\tf['item_description%02d' % (max_lines_per_page+1)] = s\n    \t\t\tf[\"company_name\"] = \"Sample Company\"\n    \t\t\tf[\"company_logo\"] = os.path.join(request.folder,\"static\",\n    \t\t\t\t\"images\",\"logo_pb.png\")\n    \t\t\tf[\"company_header1\"] = \"Some Address - somewhere -\"\n    \t\t\tf[\"company_header2\"] = \"http://www.example.com\"\n    \t\t\tf[\"company_footer1\"] = \"Tax Code ...\"\n    \t\t\tf[\"company_footer2\"] = \"Tax/VAT ID ...\"\n    \t\t\tf['number'] = '0001-00001234'\n    \t\t\tf['issue_date'] = '2010-09-10'\n    \t\t\tf['due_date'] = '2099-09-10'\n    \t\t\tf['customer_name'] = \"Sample Client\"\n    \t\t\tf['customer_address'] = \"Siempreviva 1234\"\n\n    \t\t\t# print line item...\n    \t\t\tli = 0\n    \t\t\tk = 0\n    \t\t\ttotal = Decimal(\"0.00\")\n    \t\t\tfor it in li_items:\n    \t\t\t\tk = k + 1\n\n    \t\t\tif k > page * (max_lines_per_page - 1):\n    \t\t\t\tbreak\n\n    \t\t\tif it['amount']:\n    \t\t\t\ttotal += Decimal(\"%.6f\" % it['amount'])\n\n    \t\t\tif k > (page - 1) * (max_lines_per_page - 1):\n    \t\t\t\tli += 1\n\n    \t\t\tif it['qty'] is not None:\n    \t\t\t\tf['item_quantity%02d' % li] = it['qty']\n\n    \t\t\tif it['code'] is not None:\n    \t\t\t\tf['item_code%02d' % li] = it['code']\n\n    \t\t\tif it['unit'] is not None:\n    \t\t\t\tf['item_unit%02d' % li] = it['unit']\n    \t\t\t\tf['item_description%02d' % li] = it['ds']\n\n    \t\t\tif it['price'] is not None:\n    \t\t\t\tf['item_price%02d' % li] = \"%0.3f\" % it['price']\n\n    \t\t\tif it['amount'] is not None:\n    \t\t\t\tf['item_amount%02d' % li] = \"%0.2f\" % it['amount']\n\n    \t\t\t\t# last page? print totals:\n    \t\t\t\tif pages == page:\n    \t\t\t\t\tf['net'] = \"%0.2f\" % (total/Decimal(\"1.21\"))\n    \t\t\t\t\tf['vat'] = \"%0.2f\" % (total*(1-1/Decimal(\"1.21\")))\n    \t\t\t\t\tf['total_label'] = 'Total:'\n    \t\t\t\telse:\n    \t\t\t\t  f['total_label'] = 'SubTotal:'\n    \t\t\t\t\tf['total'] = \"%0.2f\" % total\n    response.headers['Content-Type']='application/pdf'\n    return f.render('invoice.pdf', dest='S')\n\n    ```"]