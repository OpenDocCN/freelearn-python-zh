["```py\n>>> import sys\n>>> print(sys.version)\n3.12.2 (main, Feb 14 2024, 14:16:36) [Clang 15.0.0 (clang-1500.1.0.2.5)] \n```", "```py\n$ sudo apt-get update \n```", "```py\n$ python\nPython 3.12.2 (main, Feb 14 2024, 14:16:36)\n[Clang 15.0.0 (clang-1500.1.0.2.5)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n```", "```py\n$ sudo apt-get install python3.12-venv \n```", "```py\nfab@m1:~/code$ mkdir my-project  # step 1\nfab@m1:~/code$ cd my-project\nfab@m1:~/code/my-project$ which python3.12  # check system python\n/usr/bin/python3.12  # <-- system python3.12\nfab@m1:~/code/my-project$ python3.12 -m venv lpp4ed  # step 2\nfab@m1:~/code/my-project$ source ./lpp4ed/bin/activate  # step 3\n# check python again: now using the virtual environment's one\n(lpp4ed) fab@m1:~/code/my-project$ which python\n/Users/fab/code/my-project/lpp4ed/bin/python\n(lpp4ed) fab@m1:~/code/my-project$ python  # step 4\nPython 3.12.2 (main, Feb 14 2024, 14:16:36)\n→ [Clang 15.0.0 (clang-1500.1.0.2.5)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> exit()\n(lpp4ed) fab@m1:~/code/my-project$ deactivate  # step 5\nfab@m1:~/code/my-project$ \n```", "```py\nPS C:\\Users\\H\\Code> mkdir my-project  # step 1\nPS C:\\Users\\H\\Code> cd .\\my-project\\\n# check installed python versions\nPS C:\\Users\\H\\Code\\my-project> py --list-paths\n -V:3.12 *\n→ C:\\Users\\H\\AppData\\Local\\Programs\\Python\\Python312\\python.exe\nPS C:\\Users\\H\\Code\\my-project> py -3.12 -m venv lpp4ed  # step 2\nPS C:\\Users\\H\\Code\\my-project> .\\lpp4ed\\Scripts\\activate  # step 3\n# check python versions again: now using the virtual environment's\n(lpp4ed) PS C:\\Users\\H\\Code\\my-project> py --list-paths\n  *\n→ C:\\Users\\H\\Code\\my-project\\lpp4ed\\Scripts\\python.exe\n -V:3.12\n→ C:\\Users\\H\\AppData\\Local\\Programs\\Python\\Python312\\python.exe\n(lpp4ed) PS C:\\Users\\H\\Code\\my-project> python  # step 4\nPython 3.12.2 (tags/v3.12.2:6abddd9, Feb  6 2024, 21:26:36)\n→ [MSC v.1937 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more\n→ information.\n>>> exit()\n(lpp4ed) PS C:\\Users\\H\\Code\\my-project> deactivate  # step 5\nPS C:\\Users\\H\\Code\\my-project> \n```", "```py\nfab@m1:~/code$ mkdir my-project\nfab@m1:~/code$ cd my-project\nfab@m1:~/code/my-project$ python3.12 -m venv lpp4ed\nfab@m1:~/code/my-project$ source ./lpp4ed/bin/activate\n(lpp4ed) fab@m1:~/code/my-project$ cat requirements.txt\ndjango==5.0.3\nrequests==2.31.0\n# the following instruction shows how to use pip to install\n# requirements from a file\n(lpp4ed) fab@m1:~/code/my-project$ pip install -r requirements.txt\nCollecting django==5.0.3 (from -r requirements.txt (line 1))\n  Using cached Django-5.0.3-py3-none-any.whl.metadata (4.2 kB)\nCollecting requests==2.31.0 (from -r requirements.txt (line 2))\n  Using cached requests-2.31.0-py3-none-any.whl.metadata (4.6 kB)\n  ... more collecting omitted ...\nInstalling collected packages: ..., requests, django\nSuccessfully installed ... django-5.0.3 requests-2.31.0\n(lpp4ed) fab@m1:~/code/my-project$ \n```", "```py\n(lpp4ed) fab@m1 ~/code/lpp4ed$ python\nPython 3.12.2 (main, Feb 14 2024, 14:16:36)\n[Clang 15.0.0 (clang-1500.1.0.2.5)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more\ninformation.\n>>> \n```", "```py\n>>> 3 + 7\n10\n>>> 10 / 4\n2.5\n>>> 2 ** 1024\n179769313486231590772930519078902473361797697894230657273430081157\n732675805500963132708477322407536021120113879871393357658789768814\n416622492847430639474124377767893424865485276302219601246094119453\n082952085005768838150682342462881473913110540827237163350510684586\n298239947245938479716304835356329624224137216 \n```", "```py\n$ tree -v example \n```", "```py\nexample\n├── core.py\n├── run.py\n└── util\n    ├── __init__.py\n    ├── db.py\n    ├── maths.py\n    └── network.py \n```", "```py\n$ tree -v files_only \n```", "```py\nfiles_only\n├── core.py\n├── db.py\n├── maths.py\n├── network.py\n└── run.py \n```", "```py\n>>> from math import factorial\n>>> factorial(5)\n120 \n```", "```py\n>>> n = 3  # integer number\n>>> address = \"221b Baker Street, NW1 6XE, London\"  # Sherlock Holmes' address\n>>> employee = {\n...     'age': 45,\n...     'role': 'CTO',\n...     'SSN': 'AB1234567',\n... }\n>>> # let us print them\n>>> n\n3\n>>> address\n'221b Baker Street, NW1 6XE, London'\n>>> employee\n{'age': 45, 'role': 'CTO', 'SSN': 'AB1234567'}\n>>> other_name\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'other_name' is not defined\n>>> \n```", "```py\nfrom library.second_floor.section_x.row_three import book \n```", "```py\n# scopes1.py\n# Local versus Global\n# we define a function, called local\ndef local():\n    age = 7\n    print(age)\n# we define age within the global scope\nage = 5\n# we call, or `execute` the function local\nlocal()\nprint(age) \n```", "```py\n$ python scopes1.py \n```", "```py\n# scopes2.py\n# Local versus Global\ndef local():\n    # age does not belong to the scope defined by the local\n    # function so Python will keep looking into the next enclosing\n    # scope. age is finally found in the global scope.\n    print(age, 'printing from the local scope')\nage = 5\nprint(age, 'printing from the global scope')\nlocal() \n```", "```py\n$ python scopes2.py\n5 printing from the global scope\n5 printing from the local scope \n```", "```py\n# scopes3.py\n# Local, Enclosing and Global\ndef enclosing_func():\n    age = 13\n    def local():\n        # age does not belong to the scope defined by the local\n        # function so Python will keep looking into the next\n        # enclosing scope. This time age is found in the enclosing\n        # scope\n        print(age, 'printing from the local scope')\n    # calling the function local\n    local()\nage = 5\nprint(age, 'printing from the global scope')\nenclosing_func() \n```", "```py\n$ python scopes3.py\n5, 'printing from the global scope'\n13, 'printing from the local scope' \n```", "```py\n>>> import this\nThe Zen of Python, by Tim Peters\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those! \n```"]