- en: Chapter 7. Alex Martelli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Alex Martelli](img/B08180_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Alex Martelli is an Italian computer engineer. He is the author of the first
    two editions of *Python in a Nutshell* and the co-author of the first two editions
    of *Python Cookbook* and the third edition of *Python in a Nutshell*. Alex is
    a fellow of the Python Software Foundation (PSF) and the winner of both the 2002
    Activators' Choice Award and the 2006 Frank Willison Memorial Award for contributions
    to the Python community. Since 2005, he has worked for Google, and today he is
    a senior staff engineer and tech lead of the team providing community support
    for Google Cloud Platform. Alex is an active contributor to Stack Overflow and
    a frequent speaker at technical conferences.
  prefs: []
  type: TYPE_NORMAL
- en: '**Discussion themes: Python books, v2.7/v3.x, Python at Google.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Catch up with Alex Martelli here: @aleaxi**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Mike Driscoll**: Could you give us a little background information about
    yourself?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli**: I graduated in electrical engineering back in my home country,
    Italy. I then started looking around for jobs where I could design integrated
    circuits. Designing other kinds of systems sounded cool, but integrated circuits
    were where it was at.'
  prefs: []
  type: TYPE_NORMAL
- en: At the time, most really interesting design was being done by American firms,
    so I ended up with my very first job being in America, specifically with Texas
    Instruments (TI), which is still around.
  prefs: []
  type: TYPE_NORMAL
- en: TI was very prominent, with both consumer products and a lot of very interesting
    chips. We apparently weren't very compatible though, because the style of working
    in TI included starting a lot of projects and terminating them very abruptly.
    I found myself in the terminated project teams over and over again.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''I found myself in the terminated project teams over and
    over again.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I can't blame TI for that. They were trying to minimize disruption in engineers'
    lives, and as the youngest guy, and an immigrant, I obviously had no roots in
    any specific place. In less than a year, I ended up working in Dallas, Austin,
    Houston and Lubbock. That's four different labs in less than a year!
  prefs: []
  type: TYPE_NORMAL
- en: It was a bit stressful, so I restarted talks with IBM Research that I had blocked
    when I got the interesting offer from TI. It's not widely known, but IBM used
    to make some of the most innovative integrated circuits in the business, especially
    at research level, where they wouldn't be mass-produced, but be proofs of concept.
    IBM still has incredible technology in the field.
  prefs: []
  type: TYPE_NORMAL
- en: I remember around that time, IBM got a Nobel Prize for spelling out the word
    IBM in single atoms, with a very novel use of an electron microscope to place
    atoms, rather than observe them. It still strikes me as a science fiction event.
  prefs: []
  type: TYPE_NORMAL
- en: IBM, at some point, decided that it wanted a research lab in Italy, specifically
    Rome, and asked for volunteers. Of course, I volunteered. It would give me an
    interesting perspective and get me back to my home country, with better cappuccinos
    and pasta being the main attractions! So I found myself back in Italy in the 80s
    and my career kept developing from there.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: How did you end up becoming a computer programmer?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: So that was at IBM. We had just finished developing this prototype
    image processing machine which, for the time, was incredible. It had dedicated
    chips, a big frame buffer and a monitor that cost a fortune at the time (though
    it would be considered nothing special nowadays).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''We had just finished developing this prototype image processing
    machine which, for the time, was incredible.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At the celebration for the successful launch of our prototype, a director came
    up to me and said, "Congratulations to you and all the team. It's a pity that
    the prototype will now be gathering dust in a corner." To which I replied, "Why
    should it gather dust in a corner? We have at IBM Research a lot of scientists
    in all sorts of disciplines, and there's demand from astronomers to geologists."
  prefs: []
  type: TYPE_NORMAL
- en: '"Yeah right," he said, "but your device doesn''t support the programming languages
    scientists use, such as Fortran and APL. To use the device, you need to write
    a channel program." The geologists and astronomers just didn''t do those. It would
    require a substantial software project to build all of the interfaces and libraries
    they needed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I then said, "Well, can''t we put together a small team to build that software?"
    So he challenged me: "How many people do you think it would need?"'
  prefs: []
  type: TYPE_NORMAL
- en: I was really keen to have 'my' machine see use, rather than gather dust, so
    I shot very low. I said, "Maybe three?"
  prefs: []
  type: TYPE_NORMAL
- en: He replied, "Okay, I can put in the people. So you go and put together the team.
    Show me something working in six months."
  prefs: []
  type: TYPE_NORMAL
- en: That's how you get to be a director at IBM I imagine. Not exactly by setting
    low bars. So I had to improvise becoming a small-level manager (I think technical
    lead is the correct term). I needed to teach myself enough software to start writing
    the channel programs, incorporating them into libraries, and finding out what
    algorithms they wanted in a library, especially those which could be accelerated
    by this very powerful peripheral.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So did you succeed?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: After six months, we had a proof of concept that barely worked,
    but we were given the go-ahead to continue. In the end, it took a couple of years,
    but we did deliver working libraries for APL and Fortran as desired. That was
    actually very significant.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''We did deliver working libraries for APL and Fortran as
    desired. That was actually very significant.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It made this beautiful piece of hardware meaningful. It was actually usable
    by scientists and other programmers for powerful image processing and visualization.
    Without the intermediate software, they wouldn't teach themselves the assembly
    programming and channel programming to do that.
  prefs: []
  type: TYPE_NORMAL
- en: The problem, from my viewpoint, was that for over two years, I had done no hardware
    design at all. I had not even followed what was going on in the field. Hardware
    design, especially at an integrated circuit level, tended to get about a revolution
    per year, at the time. So if you weren't very much on top of the game, then you
    lost track.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Is that why you moved towards software?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: Well, I had to realize that despite my years of experience, I
    could be run circles around by any bright guy fresh out of college, with the latest
    technologies and tools under his fingers.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, I also had to realize that even the most simple kind of management
    and software was a huge added value to the stuff that I really wanted to do, which
    was to make cool systems with dedicated integrated circuits.
  prefs: []
  type: TYPE_NORMAL
- en: So, on the slippery slope a few years later, I had to admit that I wasn't actually
    able to design decent modern hardware anymore. It was more and more software and
    management all the way. I think there are a lot of people in similar situations,
    who start out on the hardware side and then gradually realize that their hardware
    isn't really solving problems.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''A lot of people...start out on the hardware side and then
    gradually realize that their hardware isn''t really solving problems.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: My daughter is in a similar situation now. She's got a Ph.D. in telecommunication
    engineering (advanced radio systems) and she was very keen to focus on hardware.
    Nowadays, her working days tend to be about three-quarters software. That's because
    essentially, all networking, more and more down to the lower levels, is software-driven.
  prefs: []
  type: TYPE_NORMAL
- en: You don't design a specialized antenna, which works by itself, with no intelligence
    and no software. These days, your apparatus has to have a dazzling array of antennas
    and enough intelligence to find out which ones should be activated at some point,
    based on the signal quality. That is far beyond what radio meant back when I graduated,
    but it's very much the software networking of today.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So how did you end up getting into Python itself?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: Oh, that''s a different funny story. Years after my first introduction
    to the beguiling world of software, I had written an experimental system, on my
    own time and using my own equipment, to develop certain ideas about the game of
    contract bridge.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Contract bridge was invented in the 1920s by Harold Vanderbilt. Until about
    the time that I started dabbling with the game, there was little mathematical
    theory on it. There was one major exception: Émile Borel, the great mathematician,
    wrote a book on the mathematical theory of bridge.'
  prefs: []
  type: TYPE_NORMAL
- en: By the time that I came along, computers had become strong, powerful and cheap
    enough to be used for recreational things, without necessarily a big payoff. So
    I resurrected an idea that had been first expressed as a thought experiment in
    the 1930s, and put it into practice on my new PC.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''I resurrected an idea that had been first expressed as a
    thought experiment in the 1930s.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Perhaps I acted like a typical hardware guy turned to software, because my solution
    wasn't exactly organized as a nice programming system; it was a horrid mix of
    so many programming languages. I lost count from Modula-3 to Perl, and from Visual
    Basic to Scheme, but the whole thing worked!
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Did the program play a lot of games successfully?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: The program actually played each hand a million times and recorded
    the results. It confirmed the incredible intuition of Ely Culbertson, who was
    the brightest figure of bridge back in the 1920s and 1930s.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So I wrote everything up as a research paper and submitted it to the most prestigious
    magazine in the field: The Bridge World. The editor was enthusiastic and worked
    with me to vastly improve the paper. My research was published in January and
    February of the year 2000, in The Bridge World.'
  prefs: []
  type: TYPE_NORMAL
- en: After that, I started getting communications from bridge players, including
    champions, asking me, "Hey, can you apply your theory and your method to this
    particular problem I'm struggling with?"
  prefs: []
  type: TYPE_NORMAL
- en: I was quite happy to accommodate them, except that the whole thing was so fragile
    and each time I changed a comma here, something broke over there. It was a mess!
    So I decided, despite it being usually considered a trap, that the whole system
    needed to be rewritten. I wanted it to be in, as much as possible, a single language,
    but exactly which single language was a real problem!
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So did you find the language that you were looking for?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: The only language with enough power would have been Lisp. I honestly
    always had a strong predilection for Scheme, but maybe that had something to do
    with the hardware background of Scheme itself.'
  prefs: []
  type: TYPE_NORMAL
- en: The problem was that the free editions that I could get, just didn't have enough
    libraries for all of the auxiliary tasks that I needed to do. It was a personal
    project and I was already pouring a lot of hours into it, but I didn't want to
    spend money as well. A colleague said, "Hey, you should try this brand-new language
    that's coming out. It's all the rage and it's known as Python."
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''A colleague said, "Hey, you should try this brand-new language
    that''s coming out. It''s all the rage and it''s known as Python."''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I said, "Oh, come on! I know at least a dozen languages. The last thing I need
    is to learn yet another!" He kept insisting, and I had a lot of respect for this
    guy, so I finally gave in and gave it a try. I set myself a little task to solve
    with this brand-new language, to see how far along I got.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''I said, "Oh, come on! I know at least a dozen languages.
    The last thing I need is to learn yet another!"''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Another thing that I didn't know much about in the late 1990s was the newfangled
    'web'. It seemed interesting, so I decided to develop a website. I taught myself
    the web technologies, and the Python programming language, all within a weekend!
    As I said, you have to be somewhat ambitious in this field if you want to get
    anything done!
  prefs: []
  type: TYPE_NORMAL
- en: I started hacking on a Friday night and kept looking at the manual. At some
    point, I started looking much less at the manual, because if I just guessed how
    Python would work by analogy with how it worked elsewhere, then I was right more
    than 90% of the time. The language seemed to be designed just for my brain and
    worked exactly the way that my brain did.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''That language seemed to be designed just for my brain and
    worked exactly the way that my brain did.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By early Saturday afternoon, I was done. I had a working CGI and web application
    that was computing the conditional probabilities of the division of suits in the
    game of contract bridge! Now, what could I do with the rest of the weekend?
  prefs: []
  type: TYPE_NORMAL
- en: I said, "I know, it's good, but it's only in Italian, and this may be interesting
    for readers in other languages. Let me make a multilingual version also in English
    or French, which are two other languages that I speak decently."
  prefs: []
  type: TYPE_NORMAL
- en: I realized that I needed a templating system. So I sniffed around for a templating
    system for Python without much success. I tried using Gofer and other tools of
    the time.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, I decided to just write a templating system myself! I named it Yet
    Another Python Template Utility (YAPTU). By Sunday, it was working fine. So I
    packed it up, sent it to one of the places you distributed free software back
    then and I had my working website.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Did you get any interest?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: YAPTU actually attracted the attention of a guy who, at the time,
    happened to be doing the website for computer science at the University of California,
    Berkeley. He found YAPTU to be the best templating utility. He had already decided
    to use Python and so he made some improvements, then sent me a patch file. We
    started discussing things and then made friends.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''We started discussing things and then made friends. The
    guy was Peter Norvig, who is now director of research at Google...''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The guy was Peter Norvig, who is now director of research at Google and author
    of the bestselling programming book *Artificial Intelligence: A Modern Approach*.
    So Python was already starting to give me interesting connections at the time.'
  prefs: []
  type: TYPE_NORMAL
- en: I tried pushing Python at work, but unfortunately without much success. Decision-making
    was in the hands of professional management and they knew that the future was
    Windows. Nothing else would survive, even though our programs were mostly intended
    for Unix workstations. It is true that these days, you can hardly buy a Unix workstation
    anywhere; it's all PCs with Linux or Windows. So in that sense, their vision was
    correct.
  prefs: []
  type: TYPE_NORMAL
- en: I didn't particularly like the fact that our programming languages were to be
    restricted to what Microsoft really wanted to support. I could never get official
    approval from top management. What I had to do was sneak Python into places where
    top management wouldn't notice, such as all the testing framework that we had,
    which was a hack of shell scripting `haha.bat` files.
  prefs: []
  type: TYPE_NORMAL
- en: That was before the .cmd era in Windows. They all became very useful and maintainable
    Python scripts, but it was a little unsatisfactory. I was spending all my working
    day debugging problems with Microsoft Fortran compiler, and then doing Python
    only in the ripples of time that I could steal here and there.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Slightly different topic, but how did you end up becoming an
    author of books on Python?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: I loved Python so much that I wanted to give back. I wanted to
    pay back the enormous gift that Guido van Rossum and everybody in the Python community
    had made to me, and everybody else, by developing this language.'
  prefs: []
  type: TYPE_NORMAL
- en: What could I do? Well, there was this Usenet group called comp.lang.python,
    where people asked and answered questions. I have always had a knack for helping
    people out with technical questions. So, despite being a total newbie at the language,
    I started following. Whenever I noticed a question that I thought I could answer
    productively and constructively, I did so, and apparently with a lot of success!
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''I have always had a knack for helping people out with technical
    questions.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'After just a few months, one of the old-timers of the Python community nicknamed
    me the Martelli Bot. Apparently, I was the third "bot" in the Python community.
    The point being that a huge amount of answers, which were always correct, qualified
    you as a bot. The guy who came up with the funny nickname, by the way, was Steve
    Holden, and I''m honored to say that he is one of my co-authors on my latest book:
    the third edition of *Python in a Nutshell*.'
  prefs: []
  type: TYPE_NORMAL
- en: So anyway, this gained me street credibility in the Python community, and gave
    me the courage to get in touch with O'Reilly, noticing that there was no *Python
    in a Nutshell*. I said, "Hey, maybe I, perhaps with a more experienced co-author,
    could do something about it?"
  prefs: []
  type: TYPE_NORMAL
- en: They said, "Why do you need a co-author? Send us a sample chapter and a chapter
    plan." It developed from there.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''I said, "Hey, maybe I, perhaps with a more experienced co-author,
    could do something about it?"''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Driscoll**: How did you find writing *Python Cookbook*?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: I had to take a little detour to co-write *Python Cookbook*,
    which had lost an author in the middle of early planning. It was fun because those
    were recipes from the community, but rephrased and adapted to actually usefully
    address the silly problem.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I contributed a lot of recipes on the ActiveState site as well. That was always
    fun! That was the equivalent of what would now be Stack Overflow. Questions and
    answers on technical issues about a specific topic have become well-served by
    Stack Overflow. I am very active on there: I''m the second top poster on the Python
    tag, and front page top 0.001% in reputation.'
  prefs: []
  type: TYPE_NORMAL
- en: Incidentally, Stack Overflow's chief data scientist has just published a study
    about the popularity of programming languages, and how it changes with time based
    on tags and questions on Stack Overflow. The language with the fastest growing
    popularity is Python.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''The forecast is that Python will become the most popular
    programming language and the one with the most active developers by early 2019.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The forecast is that Python will become the most popular programming language
    and the one with the most active developers by early 2019\. Right now, it's just
    below Java and JavaScript, but it has passed everything else. Perl has disappeared,
    Ruby has disappeared, and C# is going down sharply. Only Java and JavaScript hold,
    but they're very flat, while Python is growing gangbusters.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''Only Java and JavaScript hold, but they''re very flat, while
    Python is growing gangbusters.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There is a 27% year-over-year growth in volume from a large base. I found that
    an interesting confirmation of the article earlier this year, from Spectrum Magazine,
    which proclaimed Python to be the most popular programming language this year.
  prefs: []
  type: TYPE_NORMAL
- en: That was based on a kind of subjective mix of very different indications, such
    as job offers, courses, and seminars. Whereas Stack Overflow's study was totally
    quantitative, totally objective, and just based on an incredibly large volume
    of data. They both came to exactly the same conclusion, except that Stack Overflow,
    of course, could quantify things much better and more precisely.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So could you describe anything that you''ve learned as an author
    of books?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: Well, first of all, no matter how well you think you know a language,
    you''re probably wrong until you''ve written a couple of books in that language.'
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, you write with the cooperation of a patient, but firm, editor whose
    role is knowing the language, how it looks on the printed page, and how readers
    will absorb it.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, English is my third language, so I never thought I had a particularly
    strong claim to having a command of it. But writing the books improved my understanding
    of exactly where, at least in written English, the problems are.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''We''ll keep using programming languages because of the inherent
    ambiguity, power, and difficulty of natural language.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'It''s amazing how powerful, rich, and difficult a tool natural language is.
    That''s why we''ll keep using programming languages: because of the inherent ambiguity,
    power, and difficulty of natural language. It''s impossible to express things
    with absolute precision there.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Can you give an example?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: There was an anecdote I read once in the mailing list, about
    the risks of automation and computing. It was about a formally-defined system
    to route ambulances in a large urban area. So obviously it was literally a life-and-death
    task.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the things written down originally in natural language, and one of the
    constraints, was that when a call to the emergency number came, and the symptoms
    were identified as those of a stroke, an ambulance would be there in no more than
    15 minutes (the maximum time that would still give you a good chance).
  prefs: []
  type: TYPE_NORMAL
- en: When the system was translated from natural language to proven correct programming,
    many things improved, except that there were a small, but worrying, number of
    cases where the ambulance had been scheduled and then it never showed up. So what
    happened was natural language just didn't map into formal logic.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''Natural language just didn''t map into formal logic.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Remember, it was an urban area, with traffic. Although an ambulance may have
    been blasting its sirens, it may still have been blocked for minutes and minutes.
    If this happened, when 15 minutes and 0.01 seconds had passed, the system deduced
    that the ambulance must already have arrived, because one of the postulates is
    that the ambulance always arrives in less than 15 minutes. So if an ambulance
    had already arrived, it would have been useless to send another one there too.
    This meant that it got rerouted.
  prefs: []
  type: TYPE_NORMAL
- en: In natural language, when we say that the ambulance must be there in less than
    15 minutes, it's not a postulate because it's aspirational. What we really mean
    is it's absolutely important and by all means, please get the ambulance there
    that fast. It doesn't mean if you don't make it, then forget it because 15 minutes
    and 1 second is useless. It's undesirable, but better than nothing!
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''When you''re in a programming language, your assertion is
    much simpler: you say what happens.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'That''s one tiny example of how natural language trips you up all the time.
    When you''re in a programming language, your assertion is much simpler: you say
    what happens. If this isn''t true, then you raise an exception. In natural language,
    there''s so much background that you take for granted inevitably. This includes
    all common knowledge and what it means to be a human being in this culture.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So can you describe any of your most interesting interactions
    with the readers of your books?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: There have been a few! I''m probably thinking some of the most
    interesting ones were at work, where a colleague would come up to me and say,
    "So, I''m observing this strange behavior of..." some program or function they
    had just written.'
  prefs: []
  type: TYPE_NORMAL
- en: I would take a look and spot the problem and help them to fix it. That was not
    so much based on me knowing Python any better, but on me having what I call *debugger
    eyes*. If you give me a page of text with one typo, for some reason I see the
    typo before I see the context of anything else. That is actually very helpful
    in programming, as it is in circuit design.
  prefs: []
  type: TYPE_NORMAL
- en: People used to say, "So, I always meant to ask you, are you the Alex Martelli
    who wrote that book?" It was kind of fun to say, "Yeah, that was me, in my copious
    spare time!"
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''You need kudos too, not just hard-core results.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That kind of made my day. It doesn't happen much anymore, because I've been
    at my current employer for 12 and a half years and people started to know me well
    enough. I mean it's not objectively productive, but hey! You need kudos too, not
    just hard-core results.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So do you think that Python 2.7 is dead?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: The third edition of *Python in a Nutshell* had a problem. I
    think we were right that Python 2.7 is far from dead.'
  prefs: []
  type: TYPE_NORMAL
- en: Probably, the vast majority of the lines of Python currently deployed in production
    are Python 2.7, or other Python 2 versions, but those could move to 2.7 with hardly
    any effort. So obviously Python 2.7 is not going anywhere. It's actually probably
    going away in 2020 when the Python Software Foundation (PSF) officially stops
    supporting it (though I bet some entrepreneurs will offer ongoing support on a
    commercial basis). So it was crucial to also cover Python 3, 3.5, and 3.6, which
    were the recent releases and forthcoming releases as we planned and wrote the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''Python 2.7 is far from dead.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It's too early right now to drop 2.7\. So we have a book that covers both, and
    that makes it redundant if you only care about one of them. That's a problem that
    will go away by the next edition. Of course, we will be Python 3 something only
    and no 2.7 need apply.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of stuff will remain in 2.7, probably because it's just too much of a
    code base. YouTube, for example, is essentially a Python system. There's millions
    of lines of super-optimized 2.7 and honestly, it's too hard to justify migrating
    it all from a business standpoint. We can't say let's rewrite X million lines
    of code, given the amount of optimization that has gone into YouTube for more
    than 10 years.
  prefs: []
  type: TYPE_NORMAL
- en: If rewriting were to slow YouTube down by 10%, can you quantify the cost of
    that, not just to Google, but to everybody, what with YouTube traffic making up
    so large a fraction of the internet's bandwidth? A 10% performance impact would
    severely make life worse for everybody. We can't afford that! So that'll go by
    other directions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So what are some of Python''s current problems as a language?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: So, if I had a magic wand and could go back to just before the
    first version of Python was published, and could make only one change, I would
    make it case insensitive.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''Many of the best languages were case insensitive. That,
    to me, would be the greatest improvement.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I know since the C programming language came and dominated the scene, people
    think of case insensitive as weird. But from Fortran, to Pascal, to Ada, many
    of the best languages were case insensitive. That, to me, would be the greatest
    improvement.
  prefs: []
  type: TYPE_NORMAL
- en: You may not notice it so much in a Western culture, but the very concept of
    lowercase and uppercase is completely artificial. They are very much an artifact
    of our culture and of how we happen to have developed writing.
  prefs: []
  type: TYPE_NORMAL
- en: I loved the Macintosh file system, because when you created a file uppercase
    F-O-O (`FOO`), it preserved that case. But if you looked for lowercase `foo`,
    it still gave you the file. This is much more likely to be what you want as a
    human being.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''Voice input has suddenly become an absolutely major approach
    to input.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Think of the voice recognition system. Voice input has suddenly become an absolutely
    major approach to input, because phones make it so much easier to speak to them,
    than to use their little keyboards. Having to maintain case distinction is a killer
    in that situation and shows up how totally artificial it is! Specifying uppercase
    or lowercase is just not natural pronunciation.
  prefs: []
  type: TYPE_NORMAL
- en: I find myself in a tiny minority wishing for case insensitive Python. It's true
    that just about every language that competes with Python is also case sensitive,
    so I guess it's a defect shared by just about every popular language today.
  prefs: []
  type: TYPE_NORMAL
- en: Something that Python does differently from other languages, and it would be
    a better language if it did it the same way, is one of the Python keywords. One
    of the most popular keywords is `def`, which is used to define a function. The
    problem is it's not a keyword and it's not a word. It doesn't mean anything! You
    know which language does it right there? JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: How does JavaScript differ?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: The equivalent keyword is `function`. I can''t imagine why Python
    didn''t use `function` to start with. It''s so obvious! `function` is four more
    characters to type, but big deal! Any editor will AutoComplete for you, right?'
  prefs: []
  type: TYPE_NORMAL
- en: I know technically speaking, saying `def foo` or `function foo` makes absolutely
    no difference. But I focus on the very little usability and understandability
    glitches.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''Python is possibly the most usable and most understandable
    programming language there has ever been.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Python is possibly the most usable and most understandable programming language
    there has ever been. So those few places where it isn't kind of stand out more.
  prefs: []
  type: TYPE_NORMAL
- en: Python has only one kind of range and it's always going to be upper bound excluded,
    so it's much more consistent and much more clear. The places where a completely
    arbitrary word, such as `def`, is used is where the language could have been just
    as easily designed to use a readable word like `function`.
  prefs: []
  type: TYPE_NORMAL
- en: If people were completely terrified by the long word `function`, I would allow
    'fun'. It's kind of a joke. After all, the language is named after Monty Python,
    so you can take 'fun' as an abbreviation of `function`, or simply select it because
    using Python is fun. It would still be better than `def`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What do you think are Python''s greatest strengths?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: I actually answered this one while dealing with the glitches.
    The strengths are the clarity and consistency of Python and the aspirational goal
    the language has, to have only one natural and obvious way to do things.'
  prefs: []
  type: TYPE_NORMAL
- en: We can't quite get there of course, because for example, addition is commutative,
    so *a + b* and *b + a* are two ways to express the sum and Python cannot change
    that. But it's aspirational and it really helps to make somebody else's code much
    more readable to you on the first pass.
  prefs: []
  type: TYPE_NORMAL
- en: If they're at all a good Pythonista, or even a beginner, they will in most cases
    have chosen the one obvious way, because it does tend to be obvious. Where they
    haven't, and you show them what it would have been, it's much easier to convince
    them. So this kind of aspirational attempt to give one obvious way to express
    things is part of what makes the language so clear, so useful and so usable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''This kind of aspirational attempt to give one obvious way
    to express things is part of what makes the language so clear, so useful and so
    usable.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The fact that Python has extended to be used in just about every application
    niche you can think of, I believe descends from this clarity and conceptual simplicity.
    It really makes it easy to jump aboard.
  prefs: []
  type: TYPE_NORMAL
- en: Not everybody's brain will be such a perfect match for Python as mine is. I'm
    not saying every experienced programmer will teach themselves Python within one
    weekend, but it's a language where it can happen. Despite liking a lot of things
    in other languages, such as Rust, I can't imagine somebody doing the same in Rust
    in a weekend.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So where do you see Python going in the future?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: Everywhere! You know, one of the greatest scientific results
    of the last few years was the discovery of gravitational waves.'
  prefs: []
  type: TYPE_NORMAL
- en: We had a couple of keynotes at the PyCon Italia conference. Python code was
    there as the common language to control all of the instrumentation responsible
    for gathering the data, which eventually showed that two black holes were slamming
    into each other and sending out those waves.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''Python was there directing the data processing.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Incidentally, if I recall correctly, for several seconds just the waves sent
    by that one event produced more energy than all the rest of the universe was sending
    together. That's quite a phenomenon and Python was there directing the data processing.
    That is, overseeing all of the cleaning, analysis, and correlation of those measurements,
    to interpret them as an incredibly powerful short-duration event, incredibly far
    away. That clash happened billions of years ago and it's just the waves that are
    getting here right now. That's one example.
  prefs: []
  type: TYPE_NORMAL
- en: Science, of course, is fascinating because of that. More and more I end up chatting
    with big internet companies that still prefer to, for their core applications,
    use other programming languages. They do this because that's what the founder
    knew, and they have to accommodate Python only because they buy other companies.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of purchases are going on in the high-tech field. More often than not,
    those other companies are using Python, because that's part of what makes them
    successful. They're twice, or three times more productive than the guys who are
    using lesser languages.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Do you think more companies will start using Python?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: Yes, any big company needs to adopt Python as one of the things
    admitted in its production systems. The launch of TensorFlow showed to me that
    Python will definitely be there at the forefront of machine learning and artificial
    intelligence.'
  prefs: []
  type: TYPE_NORMAL
- en: Even if the internals are in super-optimized C++ and assembly language, at the
    application level the business logic will be in Python, because it makes no sense
    to spend the energy to remake it otherwise. So TensorFlow is Python at the core.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''The launch of TensorFlow showed to me that Python will definitely
    be there at the forefront of machine learning and artificial intelligence.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'I cannot imagine niches where Python will never be. But let''s discuss the
    exception: embedded systems. Python traditional implementations are not incredibly
    spare users of memory. In an embedded system, you need to have that. However,
    if not Python itself, some dialect can address that problem.'
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, the dialect of Python that addresses the embedded language device
    programming Internet of things world is known as MicroPython. The BBC, I hear,
    is distributing, or has distributed, something like a million devices running
    MicroPython to schoolchildren.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So is this Python?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: It''s not full Python, because it has to put some constraints
    on memory use.'
  prefs: []
  type: TYPE_NORMAL
- en: You cannot just dynamically allocate memory in a two-dollar device. It's got
    to have 64K, or a fixed amount of memory. But you can still, with some limitations
    about this dynamic allocation, do a lot of your programming.
  prefs: []
  type: TYPE_NORMAL
- en: There are some implementation peculiarities that in the past have blocked Python
    from some applications, but they're being attacked. I know that Larry Hastings
    is slaving away at removing the Global Interpreter Lock (GIL). Despite what people
    think, the GIL is irrelevant to 90% of applications, but it is a killer for the
    10% which desperately need to use the increasing number of cores that chip manufacturers
    stuff in.
  prefs: []
  type: TYPE_NORMAL
- en: If you have an algorithm optimized to use all of the 32 or 64 cores, then removing
    the GIL will make a huge difference for that tiny niche. Gradually, the limitations
    will go away.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''At the heart of operating systems, I do not believe we''ll
    see much more Python than we do today.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At the heart of operating systems, I do not believe we'll see much more Python
    than we do today. Python could be there where dynamic allocation is okay, but
    that's a small part of a kernel. Maybe some device drivers that are not time-critical
    can do that. But mostly, I see Python as running in user space, not in kernel
    space.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Why is that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: The kernels will need lower-level languages, and incidentally
    they are desperately starting to need better ones than C, which is why I''m looking
    into Rust.'
  prefs: []
  type: TYPE_NORMAL
- en: I would really like to see an experimental and simple OS kernel written in Rust.
    Anyway, it certainly has the potential for it. Python doesn't really, because
    of memory allocation. Also, the MicroPython trick doesn't really work all that
    well, because you do need some dynamism. Controlling paging is really hard there.
    But apart from that super hard, super core level, I do not see any limit. I can't
    even say the sky's the limit because gravitational waves are very much in the
    sky, yet we conquered those.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''I can''t even say the sky''s the limit because gravitational
    waves are very much in the sky, yet we conquered those.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The only thing I can think of is that we still have a way to go with mobile
    development with Python. I hear good things, but I have no personal experience
    with Kivy.
  prefs: []
  type: TYPE_NORMAL
- en: It's a real pity, because I remember Guido chatting with Andy Rubin when they
    were both at Google, and trying to convince Andy that beyond Java, Android needed
    an application-level programming language that was much easier to use. Andy stuck
    to his idea that adding more languages makes things harder for programmers. It's
    not true! Unfortunately, Andy was the one in charge of the project, so Guido couldn't
    make any headway. But it would be a different world if I'd managed to be more
    convincing somehow.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So what''s it like to work at Google?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: I have found it all I hoped for when I interviewed there 13 years
    ago and possibly more!'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, for me, it has been the culmination of a long and very varied career.
    So my expectations were not the shiny-eyed ones of somebody fresh out of some
    college. They were tempered by having observed what happens in reality in firms
    operating in the marketplace. Nevertheless, it got easily surpassed and I'm not
    even sure it's so much about the firm, because it's about the people. Well okay,
    a firm is made up of its people. The people being absolutely incredible is what
    makes the place absolutely incredible.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, the secret is to have a bunch of awesome people! Now that was probably
    easier when Google had 70 employees, rather than 70,000\. I mean, I'm not saying
    it's easy to find 70 great people, but it's certainly harder to find 70,000! It
    doesn't have to be 100% I guess, but it should be close to 100% awesome people.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''In the end, the secret is to have a bunch of awesome people!''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'By awesome people, I don''t necessarily mean just brilliant. I''m sure it''s
    much easier to find brilliant people than to find the right kind of people, who
    care for the end-users, their colleagues and their partners on a human level.
    I mean it''s important being bright and everything, but a bright asshole can do
    more damage than a dim one, right? So what you want first is the people who care:
    people who are emotionally invested in the success of their teams, their suppliers,
    and their users.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Is there a magic to finding that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: I don''t think so! You can read all the books published out there,
    but I just don''t think so! Because faking being so caring and things in an interview
    is much easier than actually being so year after year. So you could get it wrong.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''Anything you do can potentially be amplified and can have
    an impact that''s completely disproportionate.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: On a technical level, the whole size of the company poses problems and challenges
    of course. But it's also where you can get the greatest satisfaction from work.
    Anything you do can potentially be amplified and can have an impact that's completely
    disproportionate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just to give you one example: I did say I am active on Stack Overflow. Part
    of that is the job I do today, which is tech support for Google Cloud Platform,
    and this in good part happens through Stack Overflow. Well, Stack Overflow itself
    tells me I have helped more than 50 million people. Now, I don''t know how they
    guess, but I certainly hope it''s true! I would have met my goal of paying back
    all of the help that I was given by others and then some.'
  prefs: []
  type: TYPE_NORMAL
- en: I know I haven't reached anywhere like that order of magnitude with my books.
    If I'm lucky, my books may have helped, including multiple readers per copy, a
    million people. It just doesn't get to 50 million. That's what being at Google
    can mean.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Are there any downsides to this?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: Of course, beware! A mistake gets amplified just as much! A little
    oops, and you send some system down for an hour. Whoops! Now you have inconvenienced
    at the very least 50 million people. But I like playing on this larger-than-life
    scenario.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''Teaching something, so helping out somebody who''s having
    a problem, can be the best way to learn about that issue yourself.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Teaching something, so helping out somebody who's having a problem, can be the
    best way to learn about that issue yourself. You're looking at it from the outside
    in a sense, but then getting in, getting involved, and getting engaged. You can
    exit from the experience with a much better understanding of that subject.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: How does Google use Python?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: Okay, so it''s a long story, but let''s start before Google existed.
    A book I strongly recommend is *In the Plex* by Steven Levy. He was given unprecedented
    access to Google and Googlers to write this book.'
  prefs: []
  type: TYPE_NORMAL
- en: One thing I learned from that book is that, well before Google had a name, Larry
    Page in his Stanford University dormitory was trying to write a spider to get
    a copy of the web onto local machines, to process and experiment with. He wanted
    to use this new language, Java 1.0 beta, but the whole thing kept crashing. So
    Larry turned to his dormitory roommate asking, "Hey, can you help me here? I just
    can't get this program to run!"
  prefs: []
  type: TYPE_NORMAL
- en: The roommate took a look and then said, "Well, of course not! It's that junk
    Java thing! Come on! Let's use a real programming language!"
  prefs: []
  type: TYPE_NORMAL
- en: Larry got Python and 100 lines of Python later, the first spider was born, and
    a copy of the web was finding its way to the computer in this dormitory room.
    So in a sense, without Python to help write the very first spider, Google might
    never have been born!
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''Without Python to help write the very first spider, Google
    might never have been born!''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The spider is such a crucial program that it must have been rewritten a million
    times, and I'm pretty sure right now it's the most optimized bit of C++ you can
    imagine. I haven't looked at it for years, but the creation history is still valid.
    The next big role for Python and Google was as a unifying language for all of
    the deep infrastructure tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What was your role at that time?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: That''s where I came in as an uber tech leader for infrastructure.
    Instead of Bash, Perl, and other powerful, but harder to read languages, everything
    had to be recast into Python.'
  prefs: []
  type: TYPE_NORMAL
- en: That was my first job and essentially my team and I went around working with
    reliability engineers, system administrators, and so on, who had written very
    useful utilities in Bash or Perl. We understood exactly what was going on, rewrote
    them, and productionized them in Python. It was a hundred times more readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next big hit was Google''s attempt to address the market for streaming
    videos. If you''ve ever heard of a project called Google Video, that was where
    Google would hold all the videos, show them to you, and let you search for them.
    It had, for the time, very substantial investment behind it: hundreds of brilliant
    engineers and hardware resources like there was no tomorrow.'
  prefs: []
  type: TYPE_NORMAL
- en: Google Video kept losing the feature battle to this tiny start-up a few miles
    away. Each time this little start-up unveiled a new successful feature that customers
    liked a lot, our engineers would scramble to put up something similar and take
    a month or two. Each time we launched something new and innovative, that little
    start-up had it done in a week!
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Did you find out how the start-up was moving so quickly?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: Eventually, we bought that little start-up and we found out how
    20 developers ran circles around our hundreds of great developers. The solution
    was very simple! Those 20 guys were using Python. We were using C++. So, that
    was YouTube and still is.'
  prefs: []
  type: TYPE_NORMAL
- en: '**lex Martelli: ''We found out how 20 developers ran circles around our hundreds
    of great developers. The solution was very simple! Those 20 guys were using Python.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: YouTube, of course, took many years to fully develop and especially to monetize,
    because the amount of resources it was using was huge! It grew in popularity gradually
    and it's a great success story for Python.
  prefs: []
  type: TYPE_NORMAL
- en: Other areas of user-facing code vary. Sometimes Python is at the forefront,
    for example Google App Engine (our first foray into cloud, and still a very innovative
    product to this day) had Python as the first supported language. For years Python
    was the only language you could use there. Then Java was added and then others.
    But Python remains the most popular language used by customers on App Engine.
  prefs: []
  type: TYPE_NORMAL
- en: There is other stuff in the Google Cloud Platform where we have to, for technical
    reasons, limit the languages that our customers can use to program. Python is
    typically always number one or number two. TensorFlow may be another great example
    there. I mentioned it earlier, but the point is that TensorFlow is the most popular
    GitHub downloading there has been for a long time.
  prefs: []
  type: TYPE_NORMAL
- en: The existence of App Engine has biased a lot of internal tools. The ones that
    could be deployed on an internal-facing version of App Engine could use Python
    by preference, and the setup is sufficiently general that you can do almost everything
    that way. So in practice, from the day I joined Google 12 and a half years ago,
    I've had to do a little C++, especially when I was fixing existing systems. But
    it's been essentially all Python all the way for me.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Is there anything else that you''d like to discuss?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Martelli**: I''d like to discuss the role of Python in education. At one
    point, maybe over 10 years ago, there was even a funded project that Guido worked
    on to put Python in a core role for education. It was never really finished. Some
    great things came out of it, but the taking over of education just didn''t happen.'
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, Python is the number one programming language used in college introductory
    courses. It overtook Java and others quite a while ago. But in high school, that's
    not the case. It seems that with the importance of computers growing, just a basic
    level of understanding is appropriate for most high school students. They're using
    an unholy mix of languages.
  prefs: []
  type: TYPE_NORMAL
- en: So what could we do to make Python more attractive for this role? What I'm thinking
    is that having it online and able to be run through a browser would be good. There
    are several sites that offer such features, but not in scalable and uniform ways.
  prefs: []
  type: TYPE_NORMAL
- en: I think that the Python Software Foundation (PSF) could put an effort behind
    it. Why is that? Well, because Chromebooks are the leading machines in education
    today. By far, more Chromebooks are selling to schools than all other kinds of
    devices put together. Why? They're cheap, they're powerful enough, they're secure
    and they're very easy to control from the administrator's viewpoint.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alex Martelli: ''I think Python does not need changes, but infrastructure
    work to make a highly available site for schools.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Whatever you can do on a Chromebook, meaning essentially on a good browser on
    the web, is much easier to get into the curriculum than something you have to
    install on whatever operating system.
  prefs: []
  type: TYPE_NORMAL
- en: I think Python does not need changes, but infrastructure work to make a highly
    available site for schools with the kind of features schools need, such as administrator
    control. This would make a real difference to the lives of millions of schoolchildren.
    So that's my plea for anybody who's wondering what cool project they could start
    next with Python.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Thank you, Alex Martelli.'
  prefs: []
  type: TYPE_NORMAL
