- en: Chapter 7. Alex Martelli
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。亚历克斯·马尔蒂
- en: '![Alex Martelli](img/B08180_01_01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![亚历克斯·马尔蒂](img/B08180_01_01.jpg)'
- en: Alex Martelli is an Italian computer engineer. He is the author of the first
    two editions of *Python in a Nutshell* and the co-author of the first two editions
    of *Python Cookbook* and the third edition of *Python in a Nutshell*. Alex is
    a fellow of the Python Software Foundation (PSF) and the winner of both the 2002
    Activators' Choice Award and the 2006 Frank Willison Memorial Award for contributions
    to the Python community. Since 2005, he has worked for Google, and today he is
    a senior staff engineer and tech lead of the team providing community support
    for Google Cloud Platform. Alex is an active contributor to Stack Overflow and
    a frequent speaker at technical conferences.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 亚历克斯·马尔蒂是一位意大利计算机工程师。他是《Python 精粹》第一版和第二版的作者，也是《Python 烹饪秘籍》第一版和第二版以及《Python
    精粹》第三版的合著者。亚历克斯是 Python 软件基金会（PSF）的会员，也是 2002 年激活者选择奖和 2006 年弗兰克·威利森纪念奖的获得者，这些奖项是为了表彰他对
    Python 社区的贡献。自 2005 年以来，他一直在谷歌工作，如今他是为谷歌云平台提供社区支持的团队的高级工程师和技术负责人。亚历克斯是 Stack Overflow
    的活跃贡献者，也是技术会议上的常客演讲者。
- en: '**Discussion themes: Python books, v2.7/v3.x, Python at Google.**'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**讨论主题：Python 书籍、v2.7/v3.x、谷歌的 Python**。'
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Catch up with Alex Martelli here: @aleaxi**'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**与亚历克斯·马尔蒂保持联系：@aleaxi**'
- en: '**Mike Driscoll**: Could you give us a little background information about
    yourself?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**迈克·德里斯科尔**：你能给我们提供一些关于你自己的背景信息吗？'
- en: '**Alex Martelli**: I graduated in electrical engineering back in my home country,
    Italy. I then started looking around for jobs where I could design integrated
    circuits. Designing other kinds of systems sounded cool, but integrated circuits
    were where it was at.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂**：我在我的祖国意大利获得了电气工程学位。然后我开始寻找可以设计集成电路的工作。设计其他类型的系统听起来很酷，但集成电路才是当时的热门。'
- en: At the time, most really interesting design was being done by American firms,
    so I ended up with my very first job being in America, specifically with Texas
    Instruments (TI), which is still around.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，大多数真正有趣的设计都是由美国公司完成的，所以我最终在美国找到了我的第一份工作，具体是在德州仪器（TI），这家公司至今仍在运营。
- en: TI was very prominent, with both consumer products and a lot of very interesting
    chips. We apparently weren't very compatible though, because the style of working
    in TI included starting a lot of projects and terminating them very abruptly.
    I found myself in the terminated project teams over and over again.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 德州仪器（TI）非常突出，既有消费产品，也有很多非常有趣的芯片。但我们显然并不兼容，因为 TI 的工作风格包括开始很多项目，然后非常突然地终止它们。我发现自己一次又一次地陷入被终止的项目团队中。
- en: '**Alex Martelli: ''I found myself in the terminated project teams over and
    over again.''**'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂**：“我发现自己一次又一次地陷入被终止的项目团队中。”'
- en: I can't blame TI for that. They were trying to minimize disruption in engineers'
    lives, and as the youngest guy, and an immigrant, I obviously had no roots in
    any specific place. In less than a year, I ended up working in Dallas, Austin,
    Houston and Lubbock. That's four different labs in less than a year!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我不能责怪德州仪器（TI）这样做。他们试图最小化对工程师生活的影响，作为最年轻的人，以及一个移民，我在任何特定的地方显然都没有根基。不到一年，我就结束了在达拉斯、奥斯汀、休斯顿和拉伯克的工作。不到一年就在四个不同的实验室工作了！
- en: It was a bit stressful, so I restarted talks with IBM Research that I had blocked
    when I got the interesting offer from TI. It's not widely known, but IBM used
    to make some of the most innovative integrated circuits in the business, especially
    at research level, where they wouldn't be mass-produced, but be proofs of concept.
    IBM still has incredible technology in the field.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点压力，所以我重新开始与 IBM 研究所的谈判，当时我拒绝了 TI 的有趣提议。这并不广为人知，但 IBM 曾经制造过一些商业中最具创新性的集成电路，尤其是在研究层面，那里不会大规模生产，而是作为概念验证。IBM
    在该领域仍然拥有令人难以置信的技术。
- en: I remember around that time, IBM got a Nobel Prize for spelling out the word
    IBM in single atoms, with a very novel use of an electron microscope to place
    atoms, rather than observe them. It still strikes me as a science fiction event.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得大约在那个时候，IBM 因为用单个原子拼写出 IBM 这个词而获得了诺贝尔奖，这是一种非常新颖的电子显微镜使用方法，用来放置原子而不是观察它们。这仍然让我觉得像是一场科幻事件。
- en: IBM, at some point, decided that it wanted a research lab in Italy, specifically
    Rome, and asked for volunteers. Of course, I volunteered. It would give me an
    interesting perspective and get me back to my home country, with better cappuccinos
    and pasta being the main attractions! So I found myself back in Italy in the 80s
    and my career kept developing from there.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，IBM决定它想在意大利建立一个研究实验室，具体是在罗马，并征求志愿者。当然，我自愿参加了。这将给我一个有趣的视角，并让我回到我的祖国，更好的卡布奇诺和意大利面是主要的吸引力！所以我在80年代又回到了意大利，我的职业生涯也从那里开始发展。
- en: '**Driscoll**: How did you end up becoming a computer programmer?'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你是如何成为计算机程序员的？'
- en: '**Martelli**: So that was at IBM. We had just finished developing this prototype
    image processing machine which, for the time, was incredible. It had dedicated
    chips, a big frame buffer and a monitor that cost a fortune at the time (though
    it would be considered nothing special nowadays).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔蒂**：所以这是在IBM的时候。我们刚刚完成开发这个原型图像处理机，在当时，这真是令人难以置信。它有专用芯片，一个大型的帧缓冲器，以及当时价格不菲的显示器（尽管现在它可能被认为没什么特别）。'
- en: '**Alex Martelli: ''We had just finished developing this prototype image processing
    machine which, for the time, was incredible.''**'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂：''我们刚刚完成开发这个原型图像处理机，在当时，这真是令人难以置信。''**'
- en: At the celebration for the successful launch of our prototype, a director came
    up to me and said, "Congratulations to you and all the team. It's a pity that
    the prototype will now be gathering dust in a corner." To which I replied, "Why
    should it gather dust in a corner? We have at IBM Research a lot of scientists
    in all sorts of disciplines, and there's demand from astronomers to geologists."
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们原型机成功发射的庆祝会上，一位总监走过来对我说：“恭喜你和所有团队成员。遗憾的是，这个原型机现在将要在角落里闲置了。”我回答说：“为什么它要在角落里闲置呢？在IBM研究部，我们有来自各个学科的许多科学家，天文学家到地质学家都有需求。”
- en: '"Yeah right," he said, "but your device doesn''t support the programming languages
    scientists use, such as Fortran and APL. To use the device, you need to write
    a channel program." The geologists and astronomers just didn''t do those. It would
    require a substantial software project to build all of the interfaces and libraries
    they needed.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “是啊，对吧，”他说，“但你的设备不支持科学家使用的编程语言，比如Fortran和APL。要使用这个设备，你需要编写一个通道程序。”地质学家和天文学家根本不做这些。这需要一个大型的软件开发项目来构建他们需要的所有接口和库。
- en: 'I then said, "Well, can''t we put together a small team to build that software?"
    So he challenged me: "How many people do you think it would need?"'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我接着说：“嗯，我们能不能组建一个小团队来开发那个软件？”于是他挑战我说：“你认为需要多少人？”
- en: I was really keen to have 'my' machine see use, rather than gather dust, so
    I shot very low. I said, "Maybe three?"
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常渴望“我的”机器能够被使用，而不是闲置，所以我提出了一个非常低的数字。“也许三个？”
- en: He replied, "Okay, I can put in the people. So you go and put together the team.
    Show me something working in six months."
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 他回答道：“好的，我可以安排人员。那么你就去组建团队。六个月内给我展示一些可以工作成果。”
- en: That's how you get to be a director at IBM I imagine. Not exactly by setting
    low bars. So I had to improvise becoming a small-level manager (I think technical
    lead is the correct term). I needed to teach myself enough software to start writing
    the channel programs, incorporating them into libraries, and finding out what
    algorithms they wanted in a library, especially those which could be accelerated
    by this very powerful peripheral.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我想这就是你成为IBM总监的方式吧。并不是通过设定低标准。所以我不得不临时担任一个低级别管理者（我认为技术负责人这个术语更准确）。我需要自学足够的软件知识来开始编写通道程序，将它们集成到库中，并找出他们希望在库中使用的算法，特别是那些可以通过这个非常强大的外围设备加速的算法。
- en: '**Driscoll**: So did you succeed?'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：那么你成功了吗？'
- en: '**Martelli**: After six months, we had a proof of concept that barely worked,
    but we were given the go-ahead to continue. In the end, it took a couple of years,
    but we did deliver working libraries for APL and Fortran as desired. That was
    actually very significant.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔蒂**：六个月后，我们有一个勉强可以工作的概念验证，但我们被允许继续进行。最终，这花了几年时间，但我们确实按照预期交付了APL和Fortran的工作库。这实际上是非常有意义的。'
- en: '**Alex Martelli: ''We did deliver working libraries for APL and Fortran as
    desired. That was actually very significant.''**'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂：''我们确实按照预期交付了APL和Fortran的工作库。这实际上是非常有意义的。''**'
- en: It made this beautiful piece of hardware meaningful. It was actually usable
    by scientists and other programmers for powerful image processing and visualization.
    Without the intermediate software, they wouldn't teach themselves the assembly
    programming and channel programming to do that.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它使这块美丽的硬件变得有意义。实际上，它可以为科学家和其他程序员提供强大的图像处理和可视化。没有中间软件，他们不会自学汇编编程和通道编程来完成这项工作。
- en: The problem, from my viewpoint, was that for over two years, I had done no hardware
    design at all. I had not even followed what was going on in the field. Hardware
    design, especially at an integrated circuit level, tended to get about a revolution
    per year, at the time. So if you weren't very much on top of the game, then you
    lost track.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从我的观点来看，问题是我已经两年多没有进行任何硬件设计了。我甚至没有关注该领域的发展。当时，硬件设计，尤其是在集成电路层面，每年大约有一次革命。所以如果你不是非常了解游戏，那么你就会失去方向。
- en: '**Driscoll**: Is that why you moved towards software?'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：这就是你转向软件的原因吗？'
- en: '**Martelli**: Well, I had to realize that despite my years of experience, I
    could be run circles around by any bright guy fresh out of college, with the latest
    technologies and tools under his fingers.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**Martelli**：嗯，我必须意识到，尽管我有多年的经验，但我可能被任何刚从大学毕业、掌握最新技术和工具的聪明人绕圈子。'
- en: On the other hand, I also had to realize that even the most simple kind of management
    and software was a huge added value to the stuff that I really wanted to do, which
    was to make cool systems with dedicated integrated circuits.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我也必须意识到，即使是 simplest 的管理软件，对于我真正想做的事情来说，也是一种巨大的增值，那就是用专用集成电路制作酷炫的系统。
- en: So, on the slippery slope a few years later, I had to admit that I wasn't actually
    able to design decent modern hardware anymore. It was more and more software and
    management all the way. I think there are a lot of people in similar situations,
    who start out on the hardware side and then gradually realize that their hardware
    isn't really solving problems.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在几年后的滑坡上，我不得不承认，我实际上已经无法再设计出体面的现代硬件了。一切越来越趋向于软件和管理。我认为有很多类似情况的人，他们最初从硬件方面开始，然后逐渐意识到他们的硬件并没有真正解决问题。
- en: '**Alex Martelli: ''A lot of people...start out on the hardware side and then
    gradually realize that their hardware isn''t really solving problems.''**'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Alex Martelli**：''很多人...最初从硬件方面开始，然后逐渐意识到他们的硬件并没有真正解决问题。’'
- en: My daughter is in a similar situation now. She's got a Ph.D. in telecommunication
    engineering (advanced radio systems) and she was very keen to focus on hardware.
    Nowadays, her working days tend to be about three-quarters software. That's because
    essentially, all networking, more and more down to the lower levels, is software-driven.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我女儿现在也处于类似的情况。她拥有电信工程（高级无线电系统）的博士学位，并且非常热衷于专注于硬件。如今，她的工作日大约有四分之三是在做软件。这是因为本质上，所有网络，越来越多地深入到低层，都是由软件驱动的。
- en: You don't design a specialized antenna, which works by itself, with no intelligence
    and no software. These days, your apparatus has to have a dazzling array of antennas
    and enough intelligence to find out which ones should be activated at some point,
    based on the signal quality. That is far beyond what radio meant back when I graduated,
    but it's very much the software networking of today.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你不会设计一个单独的、没有智能和软件的专用天线。如今，你的设备必须拥有令人眼花缭乱的众多天线，以及足够的智能来找出在某个时刻应该激活哪些天线，基于信号质量。这远远超出了我毕业时对无线电的理解，但它确实是当今的软件网络。
- en: '**Driscoll**: So how did you end up getting into Python itself?'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：那么你是如何最终接触到Python本身的？'
- en: '**Martelli**: Oh, that''s a different funny story. Years after my first introduction
    to the beguiling world of software, I had written an experimental system, on my
    own time and using my own equipment, to develop certain ideas about the game of
    contract bridge.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**Martelli**：哦，那是一个不同有趣的故事。在我第一次接触到迷人的软件世界多年之后，我利用自己的时间和设备，独自开发了一套关于桥牌的想法的实验系统。'
- en: 'Contract bridge was invented in the 1920s by Harold Vanderbilt. Until about
    the time that I started dabbling with the game, there was little mathematical
    theory on it. There was one major exception: Émile Borel, the great mathematician,
    wrote a book on the mathematical theory of bridge.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 桥牌是在20世纪20年代由哈罗德·范德比尔特发明的。直到我开始涉猎这项游戏的时候，关于桥牌的数学理论很少。有一个主要的例外：伟大的数学家埃米尔·波雷尔，他写了一本关于桥牌数学理论的书。
- en: By the time that I came along, computers had become strong, powerful and cheap
    enough to be used for recreational things, without necessarily a big payoff. So
    I resurrected an idea that had been first expressed as a thought experiment in
    the 1930s, and put it into practice on my new PC.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 到我出现的时候，计算机已经变得足够强大、强大和便宜，可以用于娱乐用途，而不一定需要大的回报。所以我复活了一个在20世纪30年代首次作为思想实验提出的主意，并在我的新个人电脑上付诸实践。
- en: '**Alex Martelli: ''I resurrected an idea that had been first expressed as a
    thought experiment in the 1930s.''**'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂：''我复活了一个在20世纪30年代首次作为思想实验提出的主意。''**'
- en: Perhaps I acted like a typical hardware guy turned to software, because my solution
    wasn't exactly organized as a nice programming system; it was a horrid mix of
    so many programming languages. I lost count from Modula-3 to Perl, and from Visual
    Basic to Scheme, but the whole thing worked!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我表现得像一位典型的硬件专家转向软件，因为我的解决方案并没有组织成一个漂亮的编程系统；它是由许多编程语言组成的糟糕混合体。我从Modula-3到Perl，再到Visual
    Basic和Scheme，已经数不清了，但整个系统确实运行起来了！
- en: '**Driscoll**: Did the program play a lot of games successfully?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：程序玩了很多游戏并成功了吗？**'
- en: '**Martelli**: The program actually played each hand a million times and recorded
    the results. It confirmed the incredible intuition of Ely Culbertson, who was
    the brightest figure of bridge back in the 1920s and 1930s.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔蒂：程序实际上玩了一百万次每一手牌，并记录了结果。它证实了Ely Culbertson的非凡直觉，他是20世纪20年代和30年代桥牌界最杰出的人物。**'
- en: 'So I wrote everything up as a research paper and submitted it to the most prestigious
    magazine in the field: The Bridge World. The editor was enthusiastic and worked
    with me to vastly improve the paper. My research was published in January and
    February of the year 2000, in The Bridge World.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我将所有内容写成了一篇研究论文，并提交给了该领域最负盛名的杂志：《世界桥牌》。编辑非常热情，并和我一起大幅改进了这篇论文。我的研究在2000年1月和2月发表在《世界桥牌》杂志上。
- en: After that, I started getting communications from bridge players, including
    champions, asking me, "Hey, can you apply your theory and your method to this
    particular problem I'm struggling with?"
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我开始收到桥牌选手的来信，包括冠军选手，他们问我：“嘿，你能将你的理论和你的方法应用到我在这个特定问题上遇到的困难吗？”
- en: I was quite happy to accommodate them, except that the whole thing was so fragile
    and each time I changed a comma here, something broke over there. It was a mess!
    So I decided, despite it being usually considered a trap, that the whole system
    needed to be rewritten. I wanted it to be in, as much as possible, a single language,
    but exactly which single language was a real problem!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我很乐意满足他们的要求，但整个事情非常脆弱，每次我改变这里的逗号，那里就会出问题。真是一团糟！所以我决定，尽管这通常被认为是一个陷阱，但整个系统需要重写。我希望它尽可能使用单一的语言，但到底哪种单一语言确实是个问题！
- en: '**Driscoll**: So did you find the language that you were looking for?'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：那么，你找到了你正在寻找的语言吗？**'
- en: '**Martelli**: The only language with enough power would have been Lisp. I honestly
    always had a strong predilection for Scheme, but maybe that had something to do
    with the hardware background of Scheme itself.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔蒂：唯一有足够力量的语言将是Lisp。我确实一直对Scheme有强烈的偏好，但也许这与Scheme本身的硬件背景有关。**'
- en: The problem was that the free editions that I could get, just didn't have enough
    libraries for all of the auxiliary tasks that I needed to do. It was a personal
    project and I was already pouring a lot of hours into it, but I didn't want to
    spend money as well. A colleague said, "Hey, you should try this brand-new language
    that's coming out. It's all the rage and it's known as Python."
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是我能得到的免费版本，根本不够我完成所有辅助任务所需的库。这是一个个人项目，我已经投入了很多小时，但我不想再花钱了。一位同事说：“嘿，你应该试试即将推出的这种全新的语言。它非常流行，被称为Python。”
- en: '**Alex Martelli: ''A colleague said, "Hey, you should try this brand-new language
    that''s coming out. It''s all the rage and it''s known as Python."''**'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂：''一位同事说：“嘿，你应该试试即将推出的这种全新的语言。它非常流行，被称为Python。”''**'
- en: I said, "Oh, come on! I know at least a dozen languages. The last thing I need
    is to learn yet another!" He kept insisting, and I had a lot of respect for this
    guy, so I finally gave in and gave it a try. I set myself a little task to solve
    with this brand-new language, to see how far along I got.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我说：“哦，得了吧！我至少知道十种语言。我最不需要的就是再学一种！”他一直坚持，我对这个人非常尊重，所以我最终屈服了，并试了试。我给自己设定了一个小任务，用这种全新的语言来解决，看看我能走多远。
- en: '**Alex Martelli: ''I said, "Oh, come on! I know at least a dozen languages.
    The last thing I need is to learn yet another!"''**'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂利：''我说，''哦，得了吧！我至少知道十种语言。我最不需要的就是再学一种新语言！''**'
- en: Another thing that I didn't know much about in the late 1990s was the newfangled
    'web'. It seemed interesting, so I decided to develop a website. I taught myself
    the web technologies, and the Python programming language, all within a weekend!
    As I said, you have to be somewhat ambitious in this field if you want to get
    anything done!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件事是在20世纪90年代末，我对“网络”这个新事物所知甚少。它看起来很有趣，所以我决定开发一个网站。我在一个周末内自学了网络技术，以及Python编程语言！正如我所说，如果你想在这一领域有所作为，你必须多少有些雄心壮志！
- en: I started hacking on a Friday night and kept looking at the manual. At some
    point, I started looking much less at the manual, because if I just guessed how
    Python would work by analogy with how it worked elsewhere, then I was right more
    than 90% of the time. The language seemed to be designed just for my brain and
    worked exactly the way that my brain did.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我是在周五晚上开始编程的，并且一直在查看手册。在某个时候，我开始越来越少地查看手册，因为如果我只是通过类比其他地方的工作方式来猜测Python的工作方式，那么我90%以上的时间都是正确的。这个语言似乎是为我的大脑设计的，并且完全按照我的大脑的方式工作。
- en: '**Alex Martelli: ''That language seemed to be designed just for my brain and
    worked exactly the way that my brain did.''**'
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂利：''那个语言似乎是为我的大脑设计的，并且完全按照我的大脑的方式工作。''**'
- en: By early Saturday afternoon, I was done. I had a working CGI and web application
    that was computing the conditional probabilities of the division of suits in the
    game of contract bridge! Now, what could I do with the rest of the weekend?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 到了周六下午早些时候，我已经完成了。我开发了一个可以计算桥牌游戏中花色分配条件的条件概率的CGI和Web应用程序！现在，我可以用剩下的周末时间做些什么呢？
- en: I said, "I know, it's good, but it's only in Italian, and this may be interesting
    for readers in other languages. Let me make a multilingual version also in English
    or French, which are two other languages that I speak decently."
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我说：“我知道，它很好，但它只有意大利语，这可能对其他语言的读者也很有趣。让我也制作一个多语言版本，包括英语或法语，这两种语言我都说得很好。”
- en: I realized that I needed a templating system. So I sniffed around for a templating
    system for Python without much success. I tried using Gofer and other tools of
    the time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我意识到我需要一个模板系统。所以我四处寻找Python的模板系统，但并没有太多成功。我尝试使用Gofer和其他当时的工具。
- en: In the end, I decided to just write a templating system myself! I named it Yet
    Another Python Template Utility (YAPTU). By Sunday, it was working fine. So I
    packed it up, sent it to one of the places you distributed free software back
    then and I had my working website.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我决定自己编写一个模板系统！我把它命名为“另一个Python模板工具”（YAPTU）。到了周日，它运行得很好。所以我把它打包起来，发送到当时分发免费软件的一个地方，我就有了我的工作网站。
- en: '**Driscoll**: Did you get any interest?'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：你有没有引起任何兴趣？**'
- en: '**Martelli**: YAPTU actually attracted the attention of a guy who, at the time,
    happened to be doing the website for computer science at the University of California,
    Berkeley. He found YAPTU to be the best templating utility. He had already decided
    to use Python and so he made some improvements, then sent me a patch file. We
    started discussing things and then made friends.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔蒂利：** YAPTU实际上吸引了一个当时恰好负责加州大学伯克利分校计算机科学网站的人的注意。他认为YAPTU是最好的模板工具。他之前已经决定使用Python，因此他做了一些改进，然后发给我一个补丁文件。我们开始讨论事情，然后成为了朋友。'
- en: '**Alex Martelli: ''We started discussing things and then made friends. The
    guy was Peter Norvig, who is now director of research at Google...''**'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂利：''我们开始讨论事情，然后成为了朋友。那个人是彼得·诺维格，他现在是谷歌的研究总监...''**'
- en: 'The guy was Peter Norvig, who is now director of research at Google and author
    of the bestselling programming book *Artificial Intelligence: A Modern Approach*.
    So Python was already starting to give me interesting connections at the time.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那个人是彼得·诺维格，他现在是谷歌的研究总监，也是畅销书《人工智能：现代方法》的作者。所以Python在那个时期已经开始给我带来有趣的联系了。
- en: I tried pushing Python at work, but unfortunately without much success. Decision-making
    was in the hands of professional management and they knew that the future was
    Windows. Nothing else would survive, even though our programs were mostly intended
    for Unix workstations. It is true that these days, you can hardly buy a Unix workstation
    anywhere; it's all PCs with Linux or Windows. So in that sense, their vision was
    correct.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我试图在工作中推广Python，但不幸的是没有取得多大成功。决策权掌握在专业管理层手中，他们知道未来是Windows。我们的程序虽然主要是为Unix工作站设计的，但其他什么都不会存活。确实，如今你几乎在任何地方都买不到Unix工作站；到处都是装有Linux或Windows的PC。从这个意义上说，他们的愿景是正确的。
- en: I didn't particularly like the fact that our programming languages were to be
    restricted to what Microsoft really wanted to support. I could never get official
    approval from top management. What I had to do was sneak Python into places where
    top management wouldn't notice, such as all the testing framework that we had,
    which was a hack of shell scripting `haha.bat` files.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不喜欢我们的编程语言被限制在微软真正想要支持的范围之内。我永远无法从高层管理获得官方批准。我不得不偷偷地将Python引入高层管理不会注意到的地方，比如我们所有的测试框架，这是一个对shell脚本`haha.bat`文件的修改。
- en: That was before the .cmd era in Windows. They all became very useful and maintainable
    Python scripts, but it was a little unsatisfactory. I was spending all my working
    day debugging problems with Microsoft Fortran compiler, and then doing Python
    only in the ripples of time that I could steal here and there.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 那是在Windows的.cmd时代之前。它们都变成了非常有用且易于维护的Python脚本，但有一点不尽如人意。我整天都在调试Microsoft Fortran编译器的问题，然后在能偷到的时间碎片里做Python。
- en: '**Driscoll**: Slightly different topic, but how did you end up becoming an
    author of books on Python?'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：稍微换个话题，你是如何成为Python书籍作者的？'
- en: '**Martelli**: I loved Python so much that I wanted to give back. I wanted to
    pay back the enormous gift that Guido van Rossum and everybody in the Python community
    had made to me, and everybody else, by developing this language.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**Martelli**：我非常喜欢Python，所以我想回报。我想回报Guido van Rossum和Python社区中的每一个人给予我的巨大礼物，他们通过开发这种语言为我们所有人做出了贡献。'
- en: What could I do? Well, there was this Usenet group called comp.lang.python,
    where people asked and answered questions. I have always had a knack for helping
    people out with technical questions. So, despite being a total newbie at the language,
    I started following. Whenever I noticed a question that I thought I could answer
    productively and constructively, I did so, and apparently with a lot of success!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我能做什么呢？嗯，有一个名为comp.lang.python的Usenet群组，人们在那里提问和回答问题。我总是擅长帮助人们解决技术问题。所以，尽管我对这种语言是个新手，我还是开始关注。每当我发现一个我认为可以富有成效和建设性地回答的问题，我都会这样做，而且显然取得了很大的成功！
- en: '**Alex Martelli: ''I have always had a knack for helping people out with technical
    questions.''**'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Alex Martelli**：“我总是擅长帮助人们解决技术问题。”'
- en: 'After just a few months, one of the old-timers of the Python community nicknamed
    me the Martelli Bot. Apparently, I was the third "bot" in the Python community.
    The point being that a huge amount of answers, which were always correct, qualified
    you as a bot. The guy who came up with the funny nickname, by the way, was Steve
    Holden, and I''m honored to say that he is one of my co-authors on my latest book:
    the third edition of *Python in a Nutshell*.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅几个月后，Python社区的一位资深人士给我起了个昵称叫Martelli Bot。显然，我是Python社区中的第三个“机器人”。这个昵称的意思是，大量的总是正确的答案使你被认定为机器人。顺便说一句，给我起这个有趣昵称的人是Steve
    Holden，我很荣幸地说，他是我的合著者之一，我的最新书籍《Python in a Nutshell》的第三版。
- en: So anyway, this gained me street credibility in the Python community, and gave
    me the courage to get in touch with O'Reilly, noticing that there was no *Python
    in a Nutshell*. I said, "Hey, maybe I, perhaps with a more experienced co-author,
    could do something about it?"
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所以无论如何，这让我在Python社区赢得了街头信誉，并给了我勇气去接触O'Reilly，注意到那里没有*Python in a Nutshell*。我说：“嘿，也许我，或许和一个更有经验的合著者，可以在这方面做些什么？”
- en: They said, "Why do you need a co-author? Send us a sample chapter and a chapter
    plan." It developed from there.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 他们说：“你为什么需要一个合著者？给我们发一个样章和章节计划。”事情就这样发展起来。
- en: '**Alex Martelli: ''I said, "Hey, maybe I, perhaps with a more experienced co-author,
    could do something about it?"''**'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Alex Martelli**：“我说，‘嘿，也许我，或许和一个更有经验的合著者，可以在这方面做些什么？’”'
- en: '**Driscoll**: How did you find writing *Python Cookbook*?'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：你是如何找到写*Python Cookbook*的机会的？'
- en: '**Martelli**: I had to take a little detour to co-write *Python Cookbook*,
    which had lost an author in the middle of early planning. It was fun because those
    were recipes from the community, but rephrased and adapted to actually usefully
    address the silly problem.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**Martelli**：我不得不稍微绕一下弯路，共同编写《Python Cookbook》，因为在早期规划中途失去了一位作者。这很有趣，因为那些是来自社区的食谱，但经过重新表述和调整，实际上可以有效地解决那些愚蠢的问题。'
- en: 'I contributed a lot of recipes on the ActiveState site as well. That was always
    fun! That was the equivalent of what would now be Stack Overflow. Questions and
    answers on technical issues about a specific topic have become well-served by
    Stack Overflow. I am very active on there: I''m the second top poster on the Python
    tag, and front page top 0.001% in reputation.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我还在ActiveState网站上贡献了很多食谱。那总是很有趣！那相当于现在的Stack Overflow。关于特定主题的技术问题的问题和答案在Stack
    Overflow上得到了很好的服务。我在那里非常活跃：我是Python标签的第二大帖主，在声誉排名中位于首页前0.001%。
- en: Incidentally, Stack Overflow's chief data scientist has just published a study
    about the popularity of programming languages, and how it changes with time based
    on tags and questions on Stack Overflow. The language with the fastest growing
    popularity is Python.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，Stack Overflow的首席数据科学家刚刚发表了一项关于编程语言流行度及其如何随时间变化的研究，这是基于Stack Overflow上的标签和问题。最受欢迎且增长最快的编程语言是Python。
- en: '**Alex Martelli: ''The forecast is that Python will become the most popular
    programming language and the one with the most active developers by early 2019.''**'
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Alex Martelli**：“预测是Python将成为最受欢迎的编程语言，并且到2019年初将成为开发者最活跃的语言。”'
- en: The forecast is that Python will become the most popular programming language
    and the one with the most active developers by early 2019\. Right now, it's just
    below Java and JavaScript, but it has passed everything else. Perl has disappeared,
    Ruby has disappeared, and C# is going down sharply. Only Java and JavaScript hold,
    but they're very flat, while Python is growing gangbusters.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 预测是Python将成为最受欢迎的编程语言，并且到2019年初将成为开发者最活跃的语言。目前，它仅低于Java和JavaScript，但它已经超过了其他所有语言。Perl已经消失，Ruby已经消失，C#正在急剧下降。只有Java和JavaScript还在，但它们非常平稳，而Python则增长迅猛。
- en: '**Alex Martelli: ''Only Java and JavaScript hold, but they''re very flat, while
    Python is growing gangbusters.''**'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Alex Martelli**：“只有Java和JavaScript还在，但它们非常平稳，而Python则增长迅猛。”'
- en: There is a 27% year-over-year growth in volume from a large base. I found that
    an interesting confirmation of the article earlier this year, from Spectrum Magazine,
    which proclaimed Python to be the most popular programming language this year.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个大的基数来看，年增长率达到了27%。我发现这证实了今年早些时候Spectrum杂志发表的一篇文章，该文章宣称Python是今年最受欢迎的编程语言。
- en: That was based on a kind of subjective mix of very different indications, such
    as job offers, courses, and seminars. Whereas Stack Overflow's study was totally
    quantitative, totally objective, and just based on an incredibly large volume
    of data. They both came to exactly the same conclusion, except that Stack Overflow,
    of course, could quantify things much better and more precisely.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基于一种主观的混合，包括非常不同的指示，如工作机会、课程和研讨会。而Stack Overflow的研究则是完全定量、完全客观的，并且仅基于一个极其庞大的数据量。他们得出了完全相同的结论，只不过Stack
    Overflow当然能够更精确地量化这些事情。
- en: '**Driscoll**: So could you describe anything that you''ve learned as an author
    of books?'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：那么，你能描述一下作为书籍作者你学到的东西吗？'
- en: '**Martelli**: Well, first of all, no matter how well you think you know a language,
    you''re probably wrong until you''ve written a couple of books in that language.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**Martelli**：首先，无论你认为你对一种语言了解得多好，直到你用那种语言写了几本书，你很可能都是错的。'
- en: Ideally, you write with the cooperation of a patient, but firm, editor whose
    role is knowing the language, how it looks on the printed page, and how readers
    will absorb it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你应该与一个耐心而坚定的编辑合作写作，其角色是了解语言、它在印刷页上的外观以及读者如何吸收它。
- en: Of course, English is my third language, so I never thought I had a particularly
    strong claim to having a command of it. But writing the books improved my understanding
    of exactly where, at least in written English, the problems are.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，英语是我的第三语言，所以我从未认为我有特别强的掌握它的能力。但写书提高了我对至少在书面英语中问题的理解。
- en: '**Alex Martelli: ''We''ll keep using programming languages because of the inherent
    ambiguity, power, and difficulty of natural language.''**'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Alex Martelli**：“我们会继续使用编程语言，因为自然语言的固有歧义、强大和难度。”'
- en: 'It''s amazing how powerful, rich, and difficult a tool natural language is.
    That''s why we''ll keep using programming languages: because of the inherent ambiguity,
    power, and difficulty of natural language. It''s impossible to express things
    with absolute precision there.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 自然语言是多么强大、丰富和困难的一个工具，这真是令人惊讶。这就是为什么我们会继续使用编程语言：因为自然语言固有的歧义性、强大性和困难性。在那里用绝对精确的方式表达事物是不可能的。
- en: '**Driscoll**: Can you give an example?'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔问：“你能举一个例子吗？”**'
- en: '**Martelli**: There was an anecdote I read once in the mailing list, about
    the risks of automation and computing. It was about a formally-defined system
    to route ambulances in a large urban area. So obviously it was literally a life-and-death
    task.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔蒂利说：“我在邮件列表中读过一个轶事，关于自动化和计算的风险。它是一个在大城市区域正式定义的系统，用于调度救护车。显然，这是一个生死攸关的任务。”**'
- en: One of the things written down originally in natural language, and one of the
    constraints, was that when a call to the emergency number came, and the symptoms
    were identified as those of a stroke, an ambulance would be there in no more than
    15 minutes (the maximum time that would still give you a good chance).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在最初用自然语言写下的内容以及约束条件之一是，当接到紧急电话，并且症状被识别为中风时，救护车将在不超过15分钟的时间内到达（这仍然是给你留下良好机会的最大时间）。
- en: When the system was translated from natural language to proven correct programming,
    many things improved, except that there were a small, but worrying, number of
    cases where the ambulance had been scheduled and then it never showed up. So what
    happened was natural language just didn't map into formal logic.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统从自然语言翻译成经过验证的正确编程时，许多事情都得到了改善，除了有少数但令人担忧的情况，救护车已经被安排，但从未出现。所以发生的事情是自然语言根本无法映射到形式逻辑。
- en: '**Alex Martelli: ''Natural language just didn''t map into formal logic.''**'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂利说：“自然语言根本无法映射到形式逻辑。”**'
- en: Remember, it was an urban area, with traffic. Although an ambulance may have
    been blasting its sirens, it may still have been blocked for minutes and minutes.
    If this happened, when 15 minutes and 0.01 seconds had passed, the system deduced
    that the ambulance must already have arrived, because one of the postulates is
    that the ambulance always arrives in less than 15 minutes. So if an ambulance
    had already arrived, it would have been useless to send another one there too.
    This meant that it got rerouted.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这是一个城市地区，有交通。尽管救护车可能一直在鸣响警报，但它可能仍然被阻塞了数分钟。如果发生这种情况，当15分钟和0.01秒过去后，系统推断救护车已经到达，因为其中一个假设是救护车总是会在15分钟内到达。所以如果救护车已经到达，再派另一辆去那里就没有用了。这意味着它被重新调度了。
- en: In natural language, when we say that the ambulance must be there in less than
    15 minutes, it's not a postulate because it's aspirational. What we really mean
    is it's absolutely important and by all means, please get the ambulance there
    that fast. It doesn't mean if you don't make it, then forget it because 15 minutes
    and 1 second is useless. It's undesirable, but better than nothing!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在自然语言中，当我们说救护车必须在15分钟内到达时，这不是一个公理，因为它是一个愿望。我们真正意思是这绝对重要，无论如何，请尽快让救护车到达那里。这不意味着如果你没有做到，就放弃它，因为15分钟和1秒是无用的。这是不理想的，但总比没有好！
- en: '**Alex Martelli: ''When you''re in a programming language, your assertion is
    much simpler: you say what happens.''**'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂利说：“当你处于编程语言中时，你的断言要简单得多：你说会发生什么。”**'
- en: 'That''s one tiny example of how natural language trips you up all the time.
    When you''re in a programming language, your assertion is much simpler: you say
    what happens. If this isn''t true, then you raise an exception. In natural language,
    there''s so much background that you take for granted inevitably. This includes
    all common knowledge and what it means to be a human being in this culture.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是自然语言如何让你不断陷入困境的一个小例子。当你处于编程语言中时，你的断言要简单得多：你说会发生什么。如果这不是真的，那么你抛出一个异常。在自然语言中，有太多的背景知识你不可避免地认为是理所当然的。这包括所有常识以及在这个文化中成为一个人意味着什么。
- en: '**Driscoll**: So can you describe any of your most interesting interactions
    with the readers of your books?'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔问：“所以你能描述一下你与你的书读者的最有趣的互动吗？”**'
- en: '**Martelli**: There have been a few! I''m probably thinking some of the most
    interesting ones were at work, where a colleague would come up to me and say,
    "So, I''m observing this strange behavior of..." some program or function they
    had just written.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔蒂利**：有几个！我可能认为其中一些最有趣的是在工作中，一位同事会走过来对我说，“所以，我注意到...”他们刚刚编写的一些程序或函数的奇怪行为。'
- en: I would take a look and spot the problem and help them to fix it. That was not
    so much based on me knowing Python any better, but on me having what I call *debugger
    eyes*. If you give me a page of text with one typo, for some reason I see the
    typo before I see the context of anything else. That is actually very helpful
    in programming, as it is in circuit design.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我会看看并找出问题，并帮助他们修复它。这并不是因为我比其他人更了解Python，而是因为我有所谓的*调试器眼睛*。如果你给我一页文本，其中有一个打字错误，出于某种原因，我会在看到其他任何内容的上下文之前看到这个打字错误。这实际上在编程中非常有帮助，就像在电路设计中一样。
- en: People used to say, "So, I always meant to ask you, are you the Alex Martelli
    who wrote that book?" It was kind of fun to say, "Yeah, that was me, in my copious
    spare time!"
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 人们过去常说，“所以，我总是想问你，你是写那本书的Alex Martelli吗？”说“是的，那是我，在我那充裕的业余时间！”还挺有趣的！
- en: '**Alex Martelli: ''You need kudos too, not just hard-core results.''**'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂利：“你也需要认可，而不仅仅是硬核的结果。”**'
- en: That kind of made my day. It doesn't happen much anymore, because I've been
    at my current employer for 12 and a half years and people started to know me well
    enough. I mean it's not objectively productive, but hey! You need kudos too, not
    just hard-core results.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我的一天变得很愉快。这种情况现在很少发生了，因为我已经在现在的雇主那里工作了12年半，人们已经足够了解我了。我的意思是，这并不是客观上有生产力的，但嘿！你也需要认可，而不仅仅是硬核的结果。
- en: '**Driscoll**: So do you think that Python 2.7 is dead?'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你认为Python 2.7已经死去了吗？'
- en: '**Martelli**: The third edition of *Python in a Nutshell* had a problem. I
    think we were right that Python 2.7 is far from dead.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔蒂利**：*Python in a Nutshell*的第三版有一个问题。我认为我们是对的，Python 2.7远未死去。'
- en: Probably, the vast majority of the lines of Python currently deployed in production
    are Python 2.7, or other Python 2 versions, but those could move to 2.7 with hardly
    any effort. So obviously Python 2.7 is not going anywhere. It's actually probably
    going away in 2020 when the Python Software Foundation (PSF) officially stops
    supporting it (though I bet some entrepreneurs will offer ongoing support on a
    commercial basis). So it was crucial to also cover Python 3, 3.5, and 3.6, which
    were the recent releases and forthcoming releases as we planned and wrote the
    book.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可能，目前部署在生产中的大多数Python代码行都是Python 2.7，或其他Python 2版本，但它们几乎可以不费吹灰之力迁移到2.7。所以显然Python
    2.7不会消失。实际上，它可能会在2020年消失，那时Python软件基金会（PSF）将正式停止支持它（尽管我打赌一些企业家会以商业为基础提供持续支持）。因此，涵盖Python
    3、3.5和3.6也很关键，它们是我们计划和撰写本书时的最新发布和即将发布的版本。
- en: '**Alex Martelli: ''Python 2.7 is far from dead.''**'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂利：“Python 2.7远未死去。”**'
- en: It's too early right now to drop 2.7\. So we have a book that covers both, and
    that makes it redundant if you only care about one of them. That's a problem that
    will go away by the next edition. Of course, we will be Python 3 something only
    and no 2.7 need apply.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在放弃2.7还为时过早。所以我们有一本书涵盖了两者，如果你只关心其中一个，这就会变得多余。这是下一个版本将解决的问题。当然，我们只会是Python 3某个版本，不再需要2.7。
- en: A lot of stuff will remain in 2.7, probably because it's just too much of a
    code base. YouTube, for example, is essentially a Python system. There's millions
    of lines of super-optimized 2.7 and honestly, it's too hard to justify migrating
    it all from a business standpoint. We can't say let's rewrite X million lines
    of code, given the amount of optimization that has gone into YouTube for more
    than 10 years.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 许多东西将保留在2.7中，可能是因为它只是一个庞大的代码库。例如，YouTube本质上是一个Python系统。有数百万行超级优化的2.7代码，坦白说，从商业角度来看，很难证明将所有这些代码都迁移过来是合理的。考虑到YouTube过去10多年投入的优化量，我们不能说重写X百万行代码。
- en: If rewriting were to slow YouTube down by 10%, can you quantify the cost of
    that, not just to Google, but to everybody, what with YouTube traffic making up
    so large a fraction of the internet's bandwidth? A 10% performance impact would
    severely make life worse for everybody. We can't afford that! So that'll go by
    other directions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果重写能让YouTube的速度慢10%，你能量化这种成本吗？不仅仅是对于谷歌，对于每个人，考虑到YouTube流量占据了互联网带宽的很大一部分？10%的性能影响将严重恶化每个人的生活。我们负担不起！所以这会通过其他途径进行。
- en: '**Driscoll**: So what are some of Python''s current problems as a language?'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：那么，Python作为一门语言目前有哪些问题？'
- en: '**Martelli**: So, if I had a magic wand and could go back to just before the
    first version of Python was published, and could make only one change, I would
    make it case insensitive.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔泰利**：那么，如果我有魔法棒，可以回到Python第一版发布之前，并且只能做出一个改变，我会让它不区分大小写。'
- en: '**Alex Martelli: ''Many of the best languages were case insensitive. That,
    to me, would be the greatest improvement.''**'
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔泰利**：“许多最好的语言都是不区分大小写的。对我来说，这将是最伟大的改进。”'
- en: I know since the C programming language came and dominated the scene, people
    think of case insensitive as weird. But from Fortran, to Pascal, to Ada, many
    of the best languages were case insensitive. That, to me, would be the greatest
    improvement.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道自从C语言出现并主导了场景以来，人们认为不区分大小写很奇怪。但从Fortran到Pascal再到Ada，许多最好的语言都是不区分大小写的。对我来说，这将是最伟大的改进。
- en: You may not notice it so much in a Western culture, but the very concept of
    lowercase and uppercase is completely artificial. They are very much an artifact
    of our culture and of how we happen to have developed writing.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不会在西方文化中注意到这一点，但小写和大写的概念完全是人为的。它们在很大程度上是我们文化和我们偶然发展起来的写作方式的产物。
- en: I loved the Macintosh file system, because when you created a file uppercase
    F-O-O (`FOO`), it preserved that case. But if you looked for lowercase `foo`,
    it still gave you the file. This is much more likely to be what you want as a
    human being.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常喜欢Macintosh文件系统，因为当你创建一个文件大写F-O-O（`FOO`）时，它会保留那个大小写。但如果你查找小写`foo`，它仍然会给你那个文件。这对于人类来说更有可能符合你的需求。
- en: '**Alex Martelli: ''Voice input has suddenly become an absolutely major approach
    to input.''**'
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔泰利**：“语音输入突然成为了一种绝对主要的输入方式。”'
- en: Think of the voice recognition system. Voice input has suddenly become an absolutely
    major approach to input, because phones make it so much easier to speak to them,
    than to use their little keyboards. Having to maintain case distinction is a killer
    in that situation and shows up how totally artificial it is! Specifying uppercase
    or lowercase is just not natural pronunciation.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 想想语音识别系统。语音输入突然成为了一种绝对主要的输入方式，因为手机使得与它们说话比使用它们的小键盘要容易得多。在这种情况下，必须保持大小写区分是一个杀手锏，这也显示了它是多么地完全人为！指定大写或小写根本不是自然的发音。
- en: I find myself in a tiny minority wishing for case insensitive Python. It's true
    that just about every language that competes with Python is also case sensitive,
    so I guess it's a defect shared by just about every popular language today.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现自己属于一个极少数的人，希望Python不区分大小写。确实，几乎与Python竞争的每一种语言都是大小写敏感的，所以我想这几乎是今天所有流行语言的缺陷。
- en: Something that Python does differently from other languages, and it would be
    a better language if it did it the same way, is one of the Python keywords. One
    of the most popular keywords is `def`, which is used to define a function. The
    problem is it's not a keyword and it's not a word. It doesn't mean anything! You
    know which language does it right there? JavaScript.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Python与其他语言不同的地方之一，如果它以同样的方式做，它将是一个更好的语言，那就是Python的关键词之一。最受欢迎的关键词之一是 `def`，它用于定义一个函数。问题是它既不是一个关键词，也不是一个单词。它没有任何意义！你知道哪个语言做得对吗？JavaScript。
- en: '**Driscoll**: How does JavaScript differ?'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：JavaScript有什么不同？'
- en: '**Martelli**: The equivalent keyword is `function`. I can''t imagine why Python
    didn''t use `function` to start with. It''s so obvious! `function` is four more
    characters to type, but big deal! Any editor will AutoComplete for you, right?'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔泰利**：等效的关键词是 `function`。我无法想象Python为什么一开始不用 `function`。这显然是显而易见的！`function`
    要多打四个字符，但那又怎样！任何编辑器都会自动完成，对吧？'
- en: I know technically speaking, saying `def foo` or `function foo` makes absolutely
    no difference. But I focus on the very little usability and understandability
    glitches.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道从技术角度讲，说 `def foo` 或 `function foo` 完全没有区别。但我关注的是那些微小的可用性和可理解性缺陷。
- en: '**Alex Martelli: ''Python is possibly the most usable and most understandable
    programming language there has ever been.''**'
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔泰利**：“Python可能是历史上最易用和最易理解的编程语言。”'
- en: Python is possibly the most usable and most understandable programming language
    there has ever been. So those few places where it isn't kind of stand out more.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Python可能是历史上最易用和最易理解的编程语言。所以，它不那么友好的那些地方就更加突出。
- en: Python has only one kind of range and it's always going to be upper bound excluded,
    so it's much more consistent and much more clear. The places where a completely
    arbitrary word, such as `def`, is used is where the language could have been just
    as easily designed to use a readable word like `function`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Python只有一种范围类型，而且总是不包括上界，因此它更加一致和清晰。那些使用完全任意的单词，如`def`的地方，语言本可以设计成使用像`function`这样的可读性单词。
- en: If people were completely terrified by the long word `function`, I would allow
    'fun'. It's kind of a joke. After all, the language is named after Monty Python,
    so you can take 'fun' as an abbreviation of `function`, or simply select it because
    using Python is fun. It would still be better than `def`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果人们完全被长单词`function`吓到，我会允许使用`fun`。这有点像是个玩笑。毕竟，这种语言是以蒙提·派森命名的，所以你可以把`fun`看作是`function`的缩写，或者简单地选择它，因为使用Python很有趣。这总比`def`要好。
- en: '**Driscoll**: What do you think are Python''s greatest strengths?'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：你认为Python最大的优势是什么？'
- en: '**Martelli**: I actually answered this one while dealing with the glitches.
    The strengths are the clarity and consistency of Python and the aspirational goal
    the language has, to have only one natural and obvious way to do things.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**Martelli**：我实际上是在处理故障时回答这个问题的。Python的优势在于其清晰性和一致性，以及语言所追求的目标，即只有一种自然且明显的方式来做事。'
- en: We can't quite get there of course, because for example, addition is commutative,
    so *a + b* and *b + a* are two ways to express the sum and Python cannot change
    that. But it's aspirational and it really helps to make somebody else's code much
    more readable to you on the first pass.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们无法完全达到那里，因为例如，加法是交换的，所以`a + b`和`b + a`是表达和的两种方式，Python无法改变这一点。但这是一个追求的目标，并且它确实有助于使别人的代码在你第一次阅读时更加易于理解。
- en: If they're at all a good Pythonista, or even a beginner, they will in most cases
    have chosen the one obvious way, because it does tend to be obvious. Where they
    haven't, and you show them what it would have been, it's much easier to convince
    them. So this kind of aspirational attempt to give one obvious way to express
    things is part of what makes the language so clear, so useful and so usable.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果他们至少是一个好的Pythonista，或者甚至是一个初学者，他们大多数情况下会选择那种明显的方式，因为它确实倾向于明显。在他们没有选择，而你向他们展示它本可以是怎样的情况下，说服他们要容易得多。所以这种追求给出一种明显表达方式的尝试是使语言如此清晰、有用和易用的原因之一。
- en: '**Alex Martelli: ''This kind of aspirational attempt to give one obvious way
    to express things is part of what makes the language so clear, so useful and so
    usable.''**'
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Alex Martelli**：“这种追求给出一种明显表达方式的尝试是使语言如此清晰、有用和易用的原因之一。”'
- en: The fact that Python has extended to be used in just about every application
    niche you can think of, I believe descends from this clarity and conceptual simplicity.
    It really makes it easy to jump aboard.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Python扩展到几乎可以用于你所能想到的每一个应用领域，我认为这源于这种清晰性和概念上的简单性。它确实使得人们很容易上手。
- en: Not everybody's brain will be such a perfect match for Python as mine is. I'm
    not saying every experienced programmer will teach themselves Python within one
    weekend, but it's a language where it can happen. Despite liking a lot of things
    in other languages, such as Rust, I can't imagine somebody doing the same in Rust
    in a weekend.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是每个人的大脑都会像我的那样完美匹配Python。我并不是说每个有经验的程序员都能在周末内自学Python，但Python是一种可以实现这种情况的语言。尽管我喜欢其他语言中的很多事物，比如Rust，但我无法想象有人在周末内用Rust做到同样的事情。
- en: '**Driscoll**: So where do you see Python going in the future?'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：那么你认为Python的未来在哪里？'
- en: '**Martelli**: Everywhere! You know, one of the greatest scientific results
    of the last few years was the discovery of gravitational waves.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**Martelli**：到处都是！你知道，过去几年最伟大的科学成果之一就是引力波的发现。'
- en: We had a couple of keynotes at the PyCon Italia conference. Python code was
    there as the common language to control all of the instrumentation responsible
    for gathering the data, which eventually showed that two black holes were slamming
    into each other and sending out those waves.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在PyCon Italia会议上举办了几场关键演讲。Python代码作为通用语言，控制着所有负责收集数据的仪器，最终显示了两颗黑洞正在相互碰撞并发出那些波。
- en: '**Alex Martelli: ''Python was there directing the data processing.''**'
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Alex Martelli**：“Python在那里指导数据处理。”'
- en: Incidentally, if I recall correctly, for several seconds just the waves sent
    by that one event produced more energy than all the rest of the universe was sending
    together. That's quite a phenomenon and Python was there directing the data processing.
    That is, overseeing all of the cleaning, analysis, and correlation of those measurements,
    to interpret them as an incredibly powerful short-duration event, incredibly far
    away. That clash happened billions of years ago and it's just the waves that are
    getting here right now. That's one example.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，如果我记得正确的话，仅仅由那个事件产生的波浪在几秒钟内产生的能量比整个宇宙一起发送的能量还要多。这是一个相当的现象，Python在那里指导数据处理。也就是说，监督所有这些测量数据的清理、分析和相关性，以将它们解释为一种极其强大、持续时间极短的远程事件。那个冲突发生在数十亿年前，而现在正是那些波浪到达这里。这是一个例子。
- en: Science, of course, is fascinating because of that. More and more I end up chatting
    with big internet companies that still prefer to, for their core applications,
    use other programming languages. They do this because that's what the founder
    knew, and they have to accommodate Python only because they buy other companies.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，科学之所以迷人，正是因为如此。我越来越多地与大型互联网公司聊天，这些公司仍然倾向于，对于它们的核心应用，使用其他编程语言。他们这样做是因为创始人知道这一点，他们不得不适应Python，仅仅是因为他们收购了其他公司。
- en: A lot of purchases are going on in the high-tech field. More often than not,
    those other companies are using Python, because that's part of what makes them
    successful. They're twice, or three times more productive than the guys who are
    using lesser languages.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 高科技领域正在进行大量的收购。很多时候，那些其他公司都在使用Python，因为这是他们成功的一部分。他们的生产力是使用较少语言的人的两倍或三倍。
- en: '**Driscoll**: Do you think more companies will start using Python?'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：你认为更多的公司会开始使用Python吗？'
- en: '**Martelli**: Yes, any big company needs to adopt Python as one of the things
    admitted in its production systems. The launch of TensorFlow showed to me that
    Python will definitely be there at the forefront of machine learning and artificial
    intelligence.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**Martelli**：是的，任何大型公司都需要在其生产系统中采用Python作为被接受的事物之一。TensorFlow的发布向我表明，Python肯定会在机器学习和人工智能的前沿。'
- en: Even if the internals are in super-optimized C++ and assembly language, at the
    application level the business logic will be in Python, because it makes no sense
    to spend the energy to remake it otherwise. So TensorFlow is Python at the core.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 即使内部使用超级优化的C++和汇编语言，在应用层面，业务逻辑将使用Python，因为花费精力重新制作它没有意义。所以TensorFlow的核心是Python。
- en: '**Alex Martelli: ''The launch of TensorFlow showed to me that Python will definitely
    be there at the forefront of machine learning and artificial intelligence.''**'
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Alex Martelli**：“TensorFlow的发布向我表明，Python肯定会在机器学习和人工智能的前沿。”'
- en: 'I cannot imagine niches where Python will never be. But let''s discuss the
    exception: embedded systems. Python traditional implementations are not incredibly
    spare users of memory. In an embedded system, you need to have that. However,
    if not Python itself, some dialect can address that problem.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我想象不出Python永远不会被使用的细分市场。但让我们讨论一个例外：嵌入式系统。Python的传统实现并不是内存使用非常节省的用户。在嵌入式系统中，你需要有这一点。然而，如果不是Python本身，某些方言可以解决这个问题。
- en: Specifically, the dialect of Python that addresses the embedded language device
    programming Internet of things world is known as MicroPython. The BBC, I hear,
    is distributing, or has distributed, something like a million devices running
    MicroPython to schoolchildren.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，针对嵌入式语言设备编程物联网世界的Python方言被称为MicroPython。我听说，BBC正在分发，或者已经分发了大约一百万台运行MicroPython的设备给学童。
- en: '**Driscoll**: So is this Python?'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**：那么这是Python吗？'
- en: '**Martelli**: It''s not full Python, because it has to put some constraints
    on memory use.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**Martelli**：这不是完整的Python，因为它必须对内存使用施加一些限制。'
- en: You cannot just dynamically allocate memory in a two-dollar device. It's got
    to have 64K, or a fixed amount of memory. But you can still, with some limitations
    about this dynamic allocation, do a lot of your programming.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能在两美元的设备上仅仅动态分配内存。它必须要有64K，或者一定量的固定内存。但即使在这种动态分配的限制下，你仍然可以做很多编程工作。
- en: There are some implementation peculiarities that in the past have blocked Python
    from some applications, but they're being attacked. I know that Larry Hastings
    is slaving away at removing the Global Interpreter Lock (GIL). Despite what people
    think, the GIL is irrelevant to 90% of applications, but it is a killer for the
    10% which desperately need to use the increasing number of cores that chip manufacturers
    stuff in.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '过去有一些实现上的特殊性阻碍了 Python 在某些应用中使用，但现在它们正在被攻击。我知道拉里·黑斯蒂斯正在努力移除全局解释器锁（GIL）。尽管人们认为
    GIL 对 90% 的应用来说无关紧要，但它对那 10% 需要使用芯片制造商塞入的越来越多的核心的应用来说是一个杀手。 '
- en: If you have an algorithm optimized to use all of the 32 or 64 cores, then removing
    the GIL will make a huge difference for that tiny niche. Gradually, the limitations
    will go away.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个优化以使用所有 32 或 64 个核心的算法，那么移除 GIL 将对那个小利基产生巨大的影响。逐渐，限制将消失。
- en: '**Alex Martelli: ''At the heart of operating systems, I do not believe we''ll
    see much more Python than we do today.''**'
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔泰利：''在操作系统的核心，我不相信我们会看到比现在更多的 Python。''**'
- en: At the heart of operating systems, I do not believe we'll see much more Python
    than we do today. Python could be there where dynamic allocation is okay, but
    that's a small part of a kernel. Maybe some device drivers that are not time-critical
    can do that. But mostly, I see Python as running in user space, not in kernel
    space.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作系统的核心，我不相信我们会看到比现在更多的 Python。Python 可以在动态分配是可接受的地方存在，但这只是内核的一小部分。也许一些非时间敏感的设备驱动程序可以做到这一点。但大多数情况下，我看到
    Python 是在用户空间运行，而不是在内核空间。
- en: '**Driscoll**: Why is that?'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：**为什么？'
- en: '**Martelli**: The kernels will need lower-level languages, and incidentally
    they are desperately starting to need better ones than C, which is why I''m looking
    into Rust.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔泰利：**内核将需要更低级别的语言，顺便说一句，它们迫切需要比 C 更好的语言，这就是我为什么在研究 Rust 的原因。'
- en: I would really like to see an experimental and simple OS kernel written in Rust.
    Anyway, it certainly has the potential for it. Python doesn't really, because
    of memory allocation. Also, the MicroPython trick doesn't really work all that
    well, because you do need some dynamism. Controlling paging is really hard there.
    But apart from that super hard, super core level, I do not see any limit. I can't
    even say the sky's the limit because gravitational waves are very much in the
    sky, yet we conquered those.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的很想看到一个用 Rust 编写的实验性和简单的操作系统内核。无论如何，它确实有这个潜力。Python 并没有，因为内存分配的问题。此外，MicroPython
    的技巧并不真正有效，因为你确实需要一些动态性。在那里控制分页真的很困难。但除了那个超级困难、超级核心级别之外，我看不出有任何限制。我甚至不能说天高任鸟飞，因为引力波确实在天空中，但我们已经征服了它们。
- en: '**Alex Martelli: ''I can''t even say the sky''s the limit because gravitational
    waves are very much in the sky, yet we conquered those.''**'
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔泰利：''我甚至不能说天高任鸟飞，因为引力波确实在天空中，但我们已经征服了它们。''**'
- en: The only thing I can think of is that we still have a way to go with mobile
    development with Python. I hear good things, but I have no personal experience
    with Kivy.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我唯一能想到的是，我们在 Python 移动开发方面还有很长的路要走。我听到一些好消息，但我没有与 Kivy 的个人经验。
- en: It's a real pity, because I remember Guido chatting with Andy Rubin when they
    were both at Google, and trying to convince Andy that beyond Java, Android needed
    an application-level programming language that was much easier to use. Andy stuck
    to his idea that adding more languages makes things harder for programmers. It's
    not true! Unfortunately, Andy was the one in charge of the project, so Guido couldn't
    make any headway. But it would be a different world if I'd managed to be more
    convincing somehow.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很遗憾，因为我记得吉多在谷歌时和安迪·鲁宾聊天，试图说服安迪，除了 Java 之外，Android 还需要一个更容易使用的应用级编程语言。安迪坚持他的观点，认为添加更多语言会让程序员更难。这不是真的！不幸的是，安迪是项目负责人，所以吉多无法取得任何进展。但如果我们能以某种方式更有说服力，那将是一个不同的世界。
- en: '**Driscoll**: So what''s it like to work at Google?'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔：**在谷歌工作是什么样的体验？'
- en: '**Martelli**: I have found it all I hoped for when I interviewed there 13 years
    ago and possibly more!'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔泰利：**我在那里面试时找到的正是我所希望的，可能还有更多！'
- en: Of course, for me, it has been the culmination of a long and very varied career.
    So my expectations were not the shiny-eyed ones of somebody fresh out of some
    college. They were tempered by having observed what happens in reality in firms
    operating in the marketplace. Nevertheless, it got easily surpassed and I'm not
    even sure it's so much about the firm, because it's about the people. Well okay,
    a firm is made up of its people. The people being absolutely incredible is what
    makes the place absolutely incredible.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，对我来说，这已经是我漫长而多样化的职业生涯的巅峰。所以我的期望并不是像刚从大学出来的那些人那样充满憧憬。它们是通过观察在市场上运营的公司中发生的事情而变得成熟的。尽管如此，它很容易就被超越了，我甚至不确定这更多是关于公司，因为这是关于人。好吧，一个公司是由其人组成的。人们绝对出色是这个地方绝对出色的原因。
- en: In the end, the secret is to have a bunch of awesome people! Now that was probably
    easier when Google had 70 employees, rather than 70,000\. I mean, I'm not saying
    it's easy to find 70 great people, but it's certainly harder to find 70,000! It
    doesn't have to be 100% I guess, but it should be close to 100% awesome people.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，秘诀就是拥有一群出色的人！现在，当谷歌有7000名员工时，这可能比有70000名员工时更容易。我的意思是，我不是说找到70个优秀的人很容易，但找到70000个肯定更难！我想，它不必是100%，但应该接近100%的出色人。
- en: '**Alex Martelli: ''In the end, the secret is to have a bunch of awesome people!''**'
  id: totrans-166
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂：''最终，秘诀就是拥有一群出色的人！''**'
- en: 'By awesome people, I don''t necessarily mean just brilliant. I''m sure it''s
    much easier to find brilliant people than to find the right kind of people, who
    care for the end-users, their colleagues and their partners on a human level.
    I mean it''s important being bright and everything, but a bright asshole can do
    more damage than a dim one, right? So what you want first is the people who care:
    people who are emotionally invested in the success of their teams, their suppliers,
    and their users.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 通过出色的人，我并不一定是指仅仅聪明。我确信找到聪明人比找到正确类型的人更容易，这些人从人类层面上关心最终用户、同事和合作伙伴。我的意思是，聪明很重要，但一个聪明的混蛋可能比一个笨拙的人造成的损害更大，对吧？所以你首先想要的是关心的人：那些在情感上投入团队、供应商和用户成功的人。
- en: '**Driscoll**: Is there a magic to finding that?'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：找到这样的秘诀有魔法吗？'
- en: '**Martelli**: I don''t think so! You can read all the books published out there,
    but I just don''t think so! Because faking being so caring and things in an interview
    is much easier than actually being so year after year. So you could get it wrong.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔蒂**：我不这么认为！你可以读遍所有出版的书籍，但我真的不这么认为！因为在面试中假装关心和做其他事情比真正年复一年地这样做要容易得多。所以你可能会出错。'
- en: '**Alex Martelli: ''Anything you do can potentially be amplified and can have
    an impact that''s completely disproportionate.''**'
  id: totrans-170
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔蒂：''你做的任何事情都可能被放大，并产生完全不成比例的影响。''**'
- en: On a technical level, the whole size of the company poses problems and challenges
    of course. But it's also where you can get the greatest satisfaction from work.
    Anything you do can potentially be amplified and can have an impact that's completely
    disproportionate.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术层面上，整个公司的规模当然会带来问题和挑战。但这也是你可以从工作中获得最大满足感的地方。你做的任何事情都可能被放大，并产生完全不成比例的影响。
- en: 'Just to give you one example: I did say I am active on Stack Overflow. Part
    of that is the job I do today, which is tech support for Google Cloud Platform,
    and this in good part happens through Stack Overflow. Well, Stack Overflow itself
    tells me I have helped more than 50 million people. Now, I don''t know how they
    guess, but I certainly hope it''s true! I would have met my goal of paying back
    all of the help that I was given by others and then some.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 只举一个例子：我确实说过我在Stack Overflow上很活跃。这其中的部分原因是我在今天的工作，那就是为谷歌云平台提供技术支持，而这大部分是通过Stack
    Overflow完成的。好吧，Stack Overflow本身告诉我我已经帮助了超过5000万人。现在，我不知道他们是怎么猜测的，但我确实希望这是真的！我达到了回报所有别人给我的帮助，甚至更多的目标。
- en: I know I haven't reached anywhere like that order of magnitude with my books.
    If I'm lucky, my books may have helped, including multiple readers per copy, a
    million people. It just doesn't get to 50 million. That's what being at Google
    can mean.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道我还没有达到我的书所达到的那个数量级。如果我有幸，我的书可能帮助了包括每本书的多个读者在内的一百万人。但它并没有达到5000万。这就是在谷歌工作的意义。
- en: '**Driscoll**: Are there any downsides to this?'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：这有什么缺点吗？'
- en: '**Martelli**: Of course, beware! A mistake gets amplified just as much! A little
    oops, and you send some system down for an hour. Whoops! Now you have inconvenienced
    at the very least 50 million people. But I like playing on this larger-than-life
    scenario.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔泰利**：当然，要小心！一个错误会被放大同样多！一个小小的失误，你可能会让某个系统瘫痪一个小时。哎呀！现在至少让5000万人感到不便。但我喜欢玩这种超现实场景。'
- en: '**Alex Martelli: ''Teaching something, so helping out somebody who''s having
    a problem, can be the best way to learn about that issue yourself.''**'
  id: totrans-176
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔泰利**：“教授某事，帮助有问题的某人，可能是了解该问题的最佳方式。”'
- en: Teaching something, so helping out somebody who's having a problem, can be the
    best way to learn about that issue yourself. You're looking at it from the outside
    in a sense, but then getting in, getting involved, and getting engaged. You can
    exit from the experience with a much better understanding of that subject.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 教授某事，帮助有问题的某人，可能是了解该问题的最佳方式。你从外部看这个问题，但随后深入其中，参与其中，并投入其中。你可以带着对该主题的更深入理解退出这个经历。
- en: '**Driscoll**: How does Google use Python?'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：谷歌是如何使用Python的？'
- en: '**Martelli**: Okay, so it''s a long story, but let''s start before Google existed.
    A book I strongly recommend is *In the Plex* by Steven Levy. He was given unprecedented
    access to Google and Googlers to write this book.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔泰利**：好吧，这是一个很长的故事，但让我们从谷歌存在之前开始。我强烈推荐的一本书是史蒂文·列维的《在plex中》。他被赋予了前所未有的访问权限，以便为谷歌和谷歌人写这本书。'
- en: One thing I learned from that book is that, well before Google had a name, Larry
    Page in his Stanford University dormitory was trying to write a spider to get
    a copy of the web onto local machines, to process and experiment with. He wanted
    to use this new language, Java 1.0 beta, but the whole thing kept crashing. So
    Larry turned to his dormitory roommate asking, "Hey, can you help me here? I just
    can't get this program to run!"
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 从那本书中，我学到的就是，在谷歌还不是一个名字之前，拉里·佩奇在他斯坦福大学的宿舍里，正在尝试编写一个蜘蛛程序，将网络内容复制到本地机器上，以便进行处理和实验。他想要使用这种新的语言，Java
    1.0 beta，但整个系统一直崩溃。所以拉里转向他的宿舍室友问道：“嘿，你能帮我一下吗？我就是无法让这个程序运行！”
- en: The roommate took a look and then said, "Well, of course not! It's that junk
    Java thing! Come on! Let's use a real programming language!"
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 室友看了一眼然后说：“当然不是！是那个垃圾Java！来吧！让我们使用真正的编程语言！”
- en: Larry got Python and 100 lines of Python later, the first spider was born, and
    a copy of the web was finding its way to the computer in this dormitory room.
    So in a sense, without Python to help write the very first spider, Google might
    never have been born!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 拉里得到了Python，100行Python代码后，第一个蜘蛛程序诞生了，网络内容开始在这个宿舍房间里找到其路径。所以从某种意义上说，如果没有Python来帮助编写第一个蜘蛛程序，谷歌可能永远都不会诞生！
- en: '**Alex Martelli: ''Without Python to help write the very first spider, Google
    might never have been born!''**'
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马尔泰利**：“如果没有Python来帮助编写第一个蜘蛛程序，谷歌可能永远都不会诞生！”'
- en: The spider is such a crucial program that it must have been rewritten a million
    times, and I'm pretty sure right now it's the most optimized bit of C++ you can
    imagine. I haven't looked at it for years, but the creation history is still valid.
    The next big role for Python and Google was as a unifying language for all of
    the deep infrastructure tasks.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这个蜘蛛程序如此关键，它肯定已经被重写了一百万次，我相当确信现在它是最优化的C++代码之一。我已经很多年没有看过它了，但它的创作历史仍然有效。Python和谷歌的下一个重大角色是作为所有深层基础设施任务的统一语言。
- en: '**Driscoll**: What was your role at that time?'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：当时你在谷歌扮演什么角色？'
- en: '**Martelli**: That''s where I came in as an uber tech leader for infrastructure.
    Instead of Bash, Perl, and other powerful, but harder to read languages, everything
    had to be recast into Python.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔泰利**：这就是我作为基础设施的超级技术领导者的介入之处。而不是使用Bash、Perl和其他强大但难以阅读的语言，所有东西都必须重新用Python编写。'
- en: That was my first job and essentially my team and I went around working with
    reliability engineers, system administrators, and so on, who had written very
    useful utilities in Bash or Perl. We understood exactly what was going on, rewrote
    them, and productionized them in Python. It was a hundred times more readable.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 那是我的第一份工作，基本上我和我的团队四处走动，与可靠性工程师、系统管理员等等合作，他们已经在Bash或Perl中编写了非常有用的工具。我们完全理解发生了什么，然后用Python重新编写它们，并在Python中实现它们。它是一百倍的可读性。
- en: 'The next big hit was Google''s attempt to address the market for streaming
    videos. If you''ve ever heard of a project called Google Video, that was where
    Google would hold all the videos, show them to you, and let you search for them.
    It had, for the time, very substantial investment behind it: hundreds of brilliant
    engineers and hardware resources like there was no tomorrow.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个重大突破是谷歌试图解决流媒体视频市场的需求。如果你听说过一个名为 Google Video 的项目，那里就是谷歌存放所有视频，展示给你，并让你搜索它们的地方。在当时，它背后有非常实质性的投资：数百名杰出的工程师和像明天就没有了那样的硬件资源。
- en: Google Video kept losing the feature battle to this tiny start-up a few miles
    away. Each time this little start-up unveiled a new successful feature that customers
    liked a lot, our engineers would scramble to put up something similar and take
    a month or two. Each time we launched something new and innovative, that little
    start-up had it done in a week!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Google Video 一直在与几英里外的一个小公司争夺功能战。每次这个小小的初创公司推出一个客户非常喜欢的新功能，我们的工程师就会急忙推出类似的东西，需要一个月或两个月。每次我们推出新的创新产品，那个小公司在一周内就完成了！
- en: '**Driscoll**: Did you find out how the start-up was moving so quickly?'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 你发现那个初创公司是如何快速发展的吗？'
- en: '**Martelli**: Eventually, we bought that little start-up and we found out how
    20 developers ran circles around our hundreds of great developers. The solution
    was very simple! Those 20 guys were using Python. We were using C++. So, that
    was YouTube and still is.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**Martelli**: 最后，我们收购了那个小公司，我们发现20个开发者如何绕过我们数百名优秀的开发者。解决方案非常简单！那20个人都在使用 Python。我们当时使用
    C++。所以，那是 YouTube，现在仍然是。'
- en: '**lex Martelli: ''We found out how 20 developers ran circles around our hundreds
    of great developers. The solution was very simple! Those 20 guys were using Python.''**'
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**lex Martelli**: “我们发现20个开发者如何绕过我们数百名优秀的开发者。解决方案非常简单！那20个人都在使用 Python。”'
- en: YouTube, of course, took many years to fully develop and especially to monetize,
    because the amount of resources it was using was huge! It grew in popularity gradually
    and it's a great success story for Python.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，YouTube 的完全开发和特别是盈利需要很多年，因为它所使用的资源量巨大！它的受欢迎程度逐渐增长，这是 Python 的一个伟大成功故事。
- en: Other areas of user-facing code vary. Sometimes Python is at the forefront,
    for example Google App Engine (our first foray into cloud, and still a very innovative
    product to this day) had Python as the first supported language. For years Python
    was the only language you could use there. Then Java was added and then others.
    But Python remains the most popular language used by customers on App Engine.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面代码的其他领域各不相同。有时 Python 是最前沿的，例如 Google App Engine（我们第一次涉足云，至今仍是一个非常创新的产品）最初支持的语言是
    Python。多年来，Python 是那里唯一可以使用的语言。然后添加了 Java，然后又添加了其他语言。但 Python 仍然是 App Engine 上客户使用最流行的语言。
- en: There is other stuff in the Google Cloud Platform where we have to, for technical
    reasons, limit the languages that our customers can use to program. Python is
    typically always number one or number two. TensorFlow may be another great example
    there. I mentioned it earlier, but the point is that TensorFlow is the most popular
    GitHub downloading there has been for a long time.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google Cloud Platform 的其他领域，我们出于技术原因，必须限制客户可以使用的编程语言。Python 通常总是排名第一或第二。TensorFlow
    可能是另一个很好的例子。我之前提到过，但重点是 TensorFlow 已经很长时间是 GitHub 上最受欢迎的下载。
- en: The existence of App Engine has biased a lot of internal tools. The ones that
    could be deployed on an internal-facing version of App Engine could use Python
    by preference, and the setup is sufficiently general that you can do almost everything
    that way. So in practice, from the day I joined Google 12 and a half years ago,
    I've had to do a little C++, especially when I was fixing existing systems. But
    it's been essentially all Python all the way for me.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: App Engine 的存在已经影响了大量内部工具。那些可以部署在面向内部版本的 App Engine 上的工具更倾向于使用 Python，而且配置足够通用，你可以用这种方式做几乎所有的事情。所以实际上，从我12年半前加入谷歌以来，我不得不做一点
    C++，尤其是在我修复现有系统的时候。但对我来说，基本上一直都是 Python。
- en: '**Driscoll**: Is there anything else that you''d like to discuss?'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 你还有其他什么想讨论的吗？'
- en: '**Martelli**: I''d like to discuss the role of Python in education. At one
    point, maybe over 10 years ago, there was even a funded project that Guido worked
    on to put Python in a core role for education. It was never really finished. Some
    great things came out of it, but the taking over of education just didn''t happen.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**马特利**：我想讨论Python在教育中的作用。在某个时候，可能是在10年前，甚至有一个由Guido负责的资助项目，旨在将Python定位为教育领域的核心角色。但这从未真正完成。虽然从中产生了许多优秀的东西，但Python在教育领域的普及并没有发生。'
- en: Nowadays, Python is the number one programming language used in college introductory
    courses. It overtook Java and others quite a while ago. But in high school, that's
    not the case. It seems that with the importance of computers growing, just a basic
    level of understanding is appropriate for most high school students. They're using
    an unholy mix of languages.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Python是大学入门课程中使用的第一大编程语言。它早已超越了Java和其他语言。但在高中，情况并非如此。随着计算机重要性的增长，对于大多数高中生来说，仅仅具备基本理解就足够了。他们使用的是各种语言的混合体。
- en: So what could we do to make Python more attractive for this role? What I'm thinking
    is that having it online and able to be run through a browser would be good. There
    are several sites that offer such features, but not in scalable and uniform ways.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们能为使Python更适合这个角色做些什么呢？我考虑的是，如果Python可以在线运行并通过浏览器访问，那将是个好事。有几个网站提供了这样的功能，但它们并不是以可扩展和统一的方式提供的。
- en: I think that the Python Software Foundation (PSF) could put an effort behind
    it. Why is that? Well, because Chromebooks are the leading machines in education
    today. By far, more Chromebooks are selling to schools than all other kinds of
    devices put together. Why? They're cheap, they're powerful enough, they're secure
    and they're very easy to control from the administrator's viewpoint.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Python软件基金会（PSF）可以在它上面投入一些努力。为什么这么说呢？因为Chromebook现在是教育领域的领先设备。到目前为止，卖往学校的Chromebook数量超过了所有其他类型设备的总和。为什么？因为它们便宜，性能足够强大，安全性高，并且从管理员的角度来看，它们非常容易控制。
- en: '**Alex Martelli: ''I think Python does not need changes, but infrastructure
    work to make a highly available site for schools.''**'
  id: totrans-202
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**亚历克斯·马特利**：“我认为Python不需要改变，但需要基础设施工作，以建立一个对学校高度可用的网站。”'
- en: Whatever you can do on a Chromebook, meaning essentially on a good browser on
    the web, is much easier to get into the curriculum than something you have to
    install on whatever operating system.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你能在Chromebook上做什么，也就是说，基本上在网络上一个好的浏览器上，都比在任意操作系统上安装的东西更容易融入课程。
- en: I think Python does not need changes, but infrastructure work to make a highly
    available site for schools with the kind of features schools need, such as administrator
    control. This would make a real difference to the lives of millions of schoolchildren.
    So that's my plea for anybody who's wondering what cool project they could start
    next with Python.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Python不需要改变，但需要基础设施工作，以建立一个对学校高度可用的网站，提供学校所需的功能，例如管理员控制。这将真正改变数百万学生的生活。所以，这是我向那些正在思考他们可以用Python启动什么酷炫项目的人的呼吁。
- en: '**Driscoll**: Thank you, Alex Martelli.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：感谢你，亚历克斯·马特利。'
