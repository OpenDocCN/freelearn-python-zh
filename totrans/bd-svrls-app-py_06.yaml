- en: Scaling Up Serverless Architectures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展无服务器架构
- en: So far, we have learned how to build, monitor, and log serverless functions.
    In this chapter, we will be learning concepts and engineering techniques that
    will help scale up serverless applications to be distributed, and that will also
    enable them to handle heavy workloads with high standards of security and throughput.
    In this chapter, we will also use some third-party tools, such as Ansible, to
    scale up our Lambda functions. We will be scaling up our Lambda functions to spawn
    a distributed serverless architecture, which will involve spawning multiple servers
    (or instances in the AWS environment). You therefore need to keep that in mind
    while following the examples mentioned in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何构建、监控和记录无服务器函数。在本章中，我们将学习有助于扩展无服务器应用以实现分布式，并能够以高安全性和吞吐量处理重负载的概念和工程技术。在本章中，我们还将使用一些第三方工具，如
    Ansible，来扩展我们的 Lambda 函数。我们将扩展 Lambda 函数以生成分布式无服务器架构，这将涉及生成多个服务器（或 AWS 环境中的实例）。因此，在遵循本章中提到的示例时，您需要记住这一点。
- en: This chapter assumes a working knowledge of a provisioning tool, such as **Ansible**,
    **Chef**, and so on. You can quickly read up on or refresh your knowledge of these
    on their respective sites, where they have quick tutorials. If not, then you can
    safely skip this chapter and move on to the next.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设您对配置工具（如 **Ansible**、**Chef** 等）有一定的了解。您可以在各自的网站上快速查阅或更新这些知识，那里有快速教程。如果没有，您可以安全地跳过本章，继续阅读下一章。
- en: 'This chapter consists of five sections, which cover all of the basics of scaling
    up serverless architectures and will set you up for building bigger, complex serverless
    architectures:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含五个部分，涵盖了扩展无服务器架构的所有基础知识，并为您构建更大、更复杂的无服务器架构奠定了基础：
- en: Third-party orchestration tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方编排工具
- en: The creation and termination of servers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器创建和终止
- en: Security best practices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全最佳实践
- en: Difficulties of scaling up
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展的困难
- en: Handling difficulties
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理困难
- en: Third-party orchestration tools
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方编排工具
- en: 'In this section, we will learn and become versed in the concept of infrastructure
    provisioning and orchestration. We will be exploring a couple of tools, namely
    Chef and Ansible. Let''s get started by following these steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习并精通基础设施配置和编排的概念。我们将探索几个工具，即 Chef 和 Ansible。让我们按照以下步骤开始：
- en: 'We will begin with getting introduced to Chef. You can visit the official website
    of Chef at [https://www.chef.io/chef/](https://www.chef.io/chef/):'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从了解 Chef 开始。您可以访问 Chef 的官方网站 [https://www.chef.io/chef/](https://www.chef.io/chef/)：
- en: '![](img/00209.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00209.jpeg)'
- en: 'Chef has a very good set of tutorials for getting your hands dirty. These are
    organized in the form of mini 10 to 15 minute tutorials for easy consumption.
    Head over to [https://learn.chef.io/](https://learn.chef.io/) to access them:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Chef 提供了一套非常好的教程，可以帮助您快速上手。这些教程以 10 到 15 分钟的小教程形式组织，便于阅读。前往 [https://learn.chef.io/](https://learn.chef.io/)
    访问它们：
- en: '![](img/00210.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00210.jpeg)'
- en: 'For getting started with infrastructure provisioning and orchestrating, you
    can refer to the Chef documentation here: [https://docs.chef.io/](https://docs.chef.io/).
    The page looks like this:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始学习基础设施配置和编排，您可以参考 Chef 文档，网址为 [https://docs.chef.io/](https://docs.chef.io/)。页面看起来是这样的：
- en: '![](img/00211.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00211.jpeg)'
- en: 'You can refer to the AWS Driver Resources page in the documentation to understand
    how to interact with various AWS services via Chef at: [https://docs.chef.io/provisioning_aws.html](https://docs.chef.io/provisioning_aws.html).
    The page looks like this:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在文档中的 AWS 驱动资源页面了解如何通过 Chef 与各种 AWS 服务交互：[https://docs.chef.io/provisioning_aws.html](https://docs.chef.io/provisioning_aws.html)。页面看起来是这样的：
- en: '![](img/00212.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00212.jpeg)'
- en: 'You can also refer to the aws Cookbook for the same purpose, too. This resource
    has very good documentation and APIs for interacting with several AWS services.
    The URL of this documentation is [https://supermarket.chef.io/cookbooks/aws](https://supermarket.chef.io/cookbooks/aws).
    The page looks like this:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以参考 aws Cookbook 来达到同样的目的。这个资源提供了非常好的文档和 API，用于与多个 AWS 服务交互。该文档的网址是 [https://supermarket.chef.io/cookbooks/aws](https://supermarket.chef.io/cookbooks/aws)。页面看起来是这样的：
- en: '![](img/00213.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00213.jpeg)'
- en: 'A detailed description of the cookbook can be seen when you scroll down, directly
    after the title of the cookbook:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在食谱标题下方向下滚动时，可以看到食谱的详细描述：
- en: '![](img/00214.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00214.jpeg)'
- en: One other good tool for provisioning and orchestrating software resources is
    Ansible. This helps software engineers write code for automating several parts
    of their infrastructure via *yaml scripts*. Similar to the Chef environment, these
    scripts are called **cookbooks**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个用于配置和编排软件资源的优秀工具是 Ansible。这有助于软件工程师通过 *yaml 脚本* 自动化他们基础设施的多个部分。与 Chef 环境相似，这些脚本被称为
    **cookbooks**。
- en: 'We will be using this tool for learning how to provision our infrastructure
    in the subsequent sections. The documentation for Ansible can be found at [http://docs.ansible.com/](http://docs.ansible.com/):'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在后续章节中使用这个工具来学习如何在我们的基础设施中配置资源。Ansible 的文档可以在以下网址找到：[http://docs.ansible.com/](http://docs.ansible.com/)：
- en: '![](img/00215.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00215.jpeg)'
- en: The product, ANSIBLE TOWER, is out of scope for this book. We will be learning
    and be working with ANSIBLE CORE, which is the flagship product of Ansible and
    its parent company, Red Hat.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本书不涉及 ANSIBLE TOWER 产品。我们将学习并使用 ANSIBLE CORE，这是 Ansible 及其母公司 Red Hat 的旗舰产品。
- en: 'Ansible has a very helpful video for helping you better understand and make
    sense of the tool. It can be accessed when you click on the Quick Start Video
    link in the documentation page:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ansible 提供了一个非常有帮助的视频，可以帮助你更好地理解和掌握这个工具。你可以在文档页面点击“快速入门视频”链接来访问它：
- en: '![](img/00216.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00216.jpeg)'
- en: 'After watching the video, you can proceed to understand the product from the
    documentation itself. The complete documentation of Ansible can be accessed at: [http://docs.ansible.com/ansible/latest/index.html](http://docs.ansible.com/ansible/latest/index.html):'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观看视频后，你可以直接从文档本身开始理解产品。Ansible 的完整文档可以在以下网址访问：[http://docs.ansible.com/ansible/latest/index.html](http://docs.ansible.com/ansible/latest/index.html)：
- en: '![](img/00217.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00217.jpeg)'
- en: 'The EC2 module is the one we will be using for provisioning and orchestrating
    our AWS EC2 instances. This part of the documentation has a very clear explanation
    and demonstration of starting up and terminating EC2 instances, along with adding
    and mounting volumes; it also enables us to provision our EC2 instances into our
    own specific **Virtual Private Cloud** (**VPC**) and/or in our own **Security
    Groups** (**SGs**). The EC2 documentation screen looks like this:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: EC2 模块是我们将用于配置和编排我们的 AWS EC2 实例的工具。本部分的文档对启动和终止 EC2 实例、添加和挂载卷有非常清晰的解释和演示；它还使我们能够将我们的
    EC2 实例配置到我们自己的特定 **虚拟私有云**（**VPC**）和/或我们自己的 **安全组**（**SGs**）中。EC2 文档屏幕看起来像这样：
- en: '![](img/00218.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00218.jpeg)'
- en: 'You can find this at the following URL of Ansible Core''s documentation: [http://docs.ansible.com/ansible/latest/ec2_module.html](http://docs.ansible.com/ansible/latest/ec2_module.html).
    When you scroll down further, you can see several examples of how to use the EC2
    module of Ansible for various tasks concerning AWS EC2 instances. Some of them
    can be seen as follows:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在以下 Ansible 核心文档的网址找到它：[http://docs.ansible.com/ansible/latest/ec2_module.html](http://docs.ansible.com/ansible/latest/ec2_module.html)。当你继续向下滚动时，你可以看到如何使用
    Ansible 的 EC2 模块来完成各种与 AWS EC2 实例相关的任务的几个示例。以下是一些示例：
- en: '![](img/00219.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00219.jpeg)'
- en: The creation and termination of servers
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器创建和终止
- en: 'In this chapter, we will learn how to use some third-party tools that will
    help us in building the required architecture. Like all of the sections in this
    chapter, the information will be broken down into steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用一些第三方工具，这些工具将帮助我们构建所需的架构。与本章的所有部分一样，信息将被分解成步骤：
- en: 'The first tool we will be learning about is Ansible. It is a provisioning and
    orchestrating tool, that helps in automating several parts of an infrastructure.
    Depending on when you are reading this book, the Ansible project''s homepage ([https://www.ansible.com/](https://www.ansible.com/))
    will look something like this:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先学习的是 Ansible。它是一个配置和编排工具，有助于自动化基础设施的多个部分。根据你阅读本书的时间，Ansible 项目的首页（[https://www.ansible.com/](https://www.ansible.com/））看起来可能如下所示：
- en: '![](img/00220.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00220.jpeg)'
- en: 'The installation process for Ansible is different for different operating systems.
    The instructions for some popular operating systems are as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ansible 的安装过程因操作系统而异。以下是一些流行操作系统的安装说明：
- en: '**For Ubuntu**:'
  id: totrans-40
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**针对 Ubuntu**:'
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**For Linux**:'
  id: totrans-42
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**针对 Linux**:'
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**For OS X**:'
  id: totrans-44
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**针对 OS X**:'
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we will understand the concept of **nohup**. So, you don't need to have
    a persistent SSH connection to the server for making a `nohup` command run, therefore
    we will be using this technique for running our master–server architecture (to
    know more about nohup refer to: [https://en.wikipedia.org/wiki/Nohup](https://en.wikipedia.org/wiki/Nohup)).
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将了解**nohup**的概念。因此，你不需要保持对服务器的持久SSH连接来运行`nohup`命令，因此我们将使用这项技术来运行我们的主-服务器架构（了解更多关于nohup的信息，请参阅：[https://en.wikipedia.org/wiki/Nohup](https://en.wikipedia.org/wiki/Nohup))。
- en: Let's look at its definition on Wikipedia (from the time of writing this book), **nohup** is
    a POSIX command to ignore the HUP (hangup) signal. The HUP signal is, by convention,
    the way a terminal warns dependent processes of logout.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看维基百科上的定义（从撰写本书的时间），**nohup**是一个POSIX命令，用于忽略HUP（挂起）信号。按照惯例，HUP信号是终端警告依赖进程注销的方式。
- en: 'We will now learn how to provision servers from Ansible, SSH into them, run
    a simple `apt-get update` task in them, and terminate them. From this, you will
    learn how to write Ansible scripts, as well as understand how Ansible handles
    the provisioning of cloud resources. The following Ansible script will help you
    understand how to provision an EC2 instance:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将学习如何从Ansible配置服务器，SSH进入它们，在它们中运行一个简单的`apt-get update`任务，并终止它们。通过这个过程，你将学习如何编写Ansible脚本，以及了解Ansible如何处理云资源的配置。以下Ansible脚本将帮助你理解如何配置EC2实例：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The values in the `{{ }}` brackets need to be filled in as per your convenience
    and specifications. The preceding code will create an EC2 instance in your console
    and name it, as per the specification which is given in the `{{ Instance_Name
    }}` section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{ }}`括号中的值需要根据你的方便和规格进行填写。前面的代码将在你的控制台中创建一个EC2实例，并根据`{{ Instance_Name }}`部分中给出的规格为其命名。'
- en: 'The `ansible.cfg` file should include all of the details which give instructions
    about the control path, the details regarding the forwarding agent, and also the
    path to the EC2 instance key. The `ansible.cfg` file should look like this:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ansible.cfg`文件应包含所有提供关于控制路径、代理转发细节以及EC2实例密钥路径的指令的详细信息。`ansible.cfg`文件应如下所示：'
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When you execute this code using `ansible-playbook -vvv < name-of-playbook
    >.yml`, you can see the EC2 instance being created in your EC2 console:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你使用`ansible-playbook -vvv < name-of-playbook >.yml`执行此代码时，你可以在你的EC2控制台中看到正在创建的EC2实例：
- en: '![](img/00221.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00221.jpeg)'
- en: 'Now, we will terminate the instance which we have just created via Ansible.
    This will also be done in an Ansible script, similar to how we provisioned the
    instance. The following code does this:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过Ansible终止我们刚刚创建的实例。这也会在Ansible脚本中完成，类似于我们配置实例的方式。以下代码会这样做：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'So, now you can see the instance being terminated in the console. Note that
    the code is the same up until the tasks, such as provisioning and terminating
    instances, so you can copy and paste from the provisioning task:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以在控制台中看到实例正在被终止。请注意，代码在任务（如配置和终止实例）之前是相同的，所以你可以从配置任务复制粘贴：
- en: '![](img/00222.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00222.jpeg)'
- en: So, we have successfully learned how to provision and terminate EC2 instances
    via an Ansible script. We will use this knowledge for provisioning and will be
    terminating EC2 instances at the same time.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经成功地学习了如何通过Ansible脚本配置和终止EC2实例。我们将使用这些知识进行配置，并同时终止EC2实例。
- en: 'Making a small change to the provisioning code in the yaml script we used previously,
    we can provision multiple servers (EC2 instances) at the same time, by simply
    adding the `count` parameter. The following code will provision the number of
    instances mentioned in the *jinja template*, beside the `count` parameter. In
    our example, it is `ninstances`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们之前使用的yaml脚本中的配置代码上进行微小修改，我们可以通过简单地添加`count`参数同时配置多个服务器（EC2实例）。以下代码将根据`jinja模板`中指定的数量配置实例。在我们的例子中，它是`ninstances`：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, as we have our Ansible script ready, we will now use it to start our infrastructure
    from the Lambda function. For that, we will make use of our knowledge of nohup.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，既然我们的Ansible脚本已经准备好了，我们将使用它从Lambda函数启动我们的基础设施。为此，我们将利用我们对nohup的知识。
- en: 'In your Lambda function, all you need to do is to write the logic for creating
    a server, and then do some basic installations using the library, `paramiko`,
    and then run the Ansible script in a nohup mode, as shown here:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Lambda函数中，你只需要编写创建服务器的逻辑，然后使用`paramiko`库进行一些基本的安装，然后以nohup模式运行Ansible脚本，如下所示：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Security best practices
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全最佳实践
- en: Ensuring high-level security has always been a major problem for microservices.
    There are multiple levels of software that you need to keep in mind while designing
    the security layers. The engineers need to define the security protocols for each
    of the services and then also define the protocols for the data interaction and
    transfer between each service.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 确保高级别的安全性一直是微服务的一个主要问题。在设计安全层时，你需要考虑多个软件级别。工程师需要为每个服务定义安全协议，然后还要定义服务之间以及数据交互和传输的协议。
- en: You have to keep all these aspects in mind before architecting distributed serverless
    systems, where (almost) each Ansible task is a microservice. In this section,
    we will understand how to architect the security protocols, and also monitor them
    using some of AWS's built-in services.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计分布式无服务器系统之前，你必须牢记所有这些方面，其中（几乎）每个 Ansible 任务都是一个微服务。在本节中，我们将了解如何设计安全协议，并使用
    AWS 的一些内置服务来监控它们。
- en: 'We will go through a step-by-step understanding of how to write security protocols
    for our serverless architectures:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐步了解如何为我们的无服务器架构编写安全协议：
- en: 'Firstly, whenever you are creating a session inside your AWS Python scripts
    using **Boto**, try to create temporary credentials using the **AWS Secure Token
    Service** (**STS**), which creates temporary credentials for a specific period of
    time:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，每次你在 AWS Python 脚本内部创建会话时使用 **Boto**，尽量使用 **AWS Secure Token Service**（**STS**）创建临时凭证，它为特定时间段创建临时凭证：
- en: '![](img/00223.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00223.jpeg)'
- en: You can look at the documentation of the STS at: [https://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html](https://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下位置查看 STS 的文档：[https://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html](https://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html)。
- en: 'The AssumeRole API of the STS service enables programmers to assumes IAM roles
    into their code:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: STS 服务的 AssumeRole API 允许程序员在代码中假定 IAM 角色：
- en: '![](img/00224.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00224.jpeg)'
- en: You can find its documentation on the following page: [https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下页面找到它的文档：[https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html)
- en: 'The Python version of this can be referred to, in the `boto3` documentation:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在 `boto3` 文档中参考此 Python 版本：
- en: '![](img/00225.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00225.jpeg)'
- en: This documentation can be found here: [http://boto3.readthedocs.io/en/latest/reference/services/sts.html](http://boto3.readthedocs.io/en/latest/reference/services/sts.html).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此文档可以在以下位置找到：[http://boto3.readthedocs.io/en/latest/reference/services/sts.html](http://boto3.readthedocs.io/en/latest/reference/services/sts.html)。
- en: 'Scrolling down, you can find the usage of the AssumeRole API in Python:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动页面，你可以找到 AssumeRole API 在 Python 中的用法：
- en: '![](img/00226.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00226.jpeg)'
- en: 'Proper care should be taken so that the data exchange between microservices
    and/or between the microservices and other AWS resources happens securely with
    authentication. For example, the developer can configure S3 buckets to restrict
    actions such as unencrypted uploads, downloads, and insecure file transfers. The
    bucket policy can be written as follows to ensure all of these things are taken
    care of:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应当注意适当的安全措施，以确保微服务之间以及微服务与其他 AWS 资源之间的数据交换在认证下安全进行。例如，开发者可以配置 S3 桶以限制诸如未加密上传、下载和不安全的文件传输等操作。桶策略可以编写如下，以确保所有这些事项都得到妥善处理：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once you have finished writing the bucket policy, you can update it in the
    Bucket Policy section of S3:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你完成了桶策略的编写，你可以在 S3 的桶策略部分更新它：
- en: '![](img/00227.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00227.jpeg)'
- en: 'AWS Config provides a very useful interface for monitoring several security
    threats and helps in efficiently avoiding or catching them. The dashboard of AWS
    Config looks like this:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Config 提供了一个非常实用的接口，用于监控多个安全威胁，并有助于有效地避免或捕捉它们。AWS Config 的仪表板看起来如下所示：
- en: '![](img/00228.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00228.jpeg)'
- en: 'You can see that the dashboard shows 2 non-compliant resource(s) which means
    that two of my AWS resources are not complying with the rules that I have put
    into config. Let''s have a look at these rules:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以看到仪表板显示了 2 个不合规的资源（资源），这意味着我的两个 AWS 资源没有遵守我放入配置中的规则。让我们来看看这些规则：
- en: '![](img/00229.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00229.jpeg)'
- en: 'This means that we have two AWS S3 buckets which do not have SSL requests turned
    on via the bucket policy. Once you click on the Rules link, you can see more details
    which include the bucket(s) names, and also the timestamps at which these configuration
    changes have been recorded:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们有两个AWS S3存储桶，它们通过存储桶策略没有开启SSL请求。一旦您点击“规则”链接，您可以看到更多详细信息，包括存储桶（s）的名称，以及记录这些配置更改的时间戳：
- en: '![](img/00230.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00230.jpeg)'
- en: Identifying and handling difficulties in scaling
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别和处理扩展中的困难
- en: Scaling up distributed serverless systems comes with its own set of engineering
    roadblocks and problems, and the fact that the concept of serverless systems is
    still in a very infantile stage, means that most of those problems are still unsolved.
    But, that shouldn't stop us from trying to solve and work around these roadblocks.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展分布式无服务器系统伴随着其自身的工程障碍和问题，而服务器无服务器系统的概念仍然处于非常幼稚的阶段，这意味着大多数这些问题仍然没有解决。但这不应该阻止我们尝试解决和绕过这些障碍。
- en: 'We will try and understand some of these roadblocks, and also learn how to
    solve or work around them, as discussed here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试理解一些这些障碍，并学习如何解决或绕过它们，正如这里所讨论的：
- en: This is more of an architect's mistake rather than a roadblock. However, it
    is important to address this as one too many architects/software engineers fell
    and fall into the overestimation or the underestimation trap. The problem we will
    try to address is the exact number of instances you have to launch when scaling
    up. In most self-hosted MapReduce-style systems, it is taken care of out of the
    box.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这更多的是一个架构师错误，而不是一个障碍。然而，解决这个问题也很重要，因为太多的架构师/软件工程师都陷入了高估或低估的陷阱。我们将尝试解决的问题是在扩展时需要启动的确切实例数量。在大多数自托管的MapReduce风格系统中，这通常是默认处理的。
- en: This problem can be taken care of, by properly benchmarking the workloads beforehand
    on different types of instances, and scale accordingly. Let's understand this
    by taking an example of a machine learning pipeline. Thanks to our benchmarking
    efforts, we already know that an *m3.medium* instance can handle 100 files in
    10 minutes. So, if my workload has 202 files and I want it to be completed in
    close to 10 minutes, I would like to have two such instances for handling this.
    Even if we don't know the workloads in advance, we can write a Python script for
    getting that number from wherever the data is, be it an SQS queue pointer, or
    S3, or some other database; and that number can be entered into the Ansible script
    and make the playbook run.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过事先在不同类型的实例上对工作负载进行适当的基准测试，并相应地进行扩展，可以解决这个问题。让我们通过一个机器学习管道的例子来理解这一点。多亏了我们的基准测试努力，我们已经知道一个*m3.medium*实例可以在10分钟内处理100个文件。所以，如果我的工作负载有202个文件，并且我想在接近10分钟内完成，我想要两个这样的实例来处理这个任务。即使我们事先不知道工作负载，我们也可以编写一个Python脚本来从数据源获取那个数字，无论是SQS队列指针、S3还是其他数据库；然后那个数字可以输入到Ansible脚本中，使playbook运行。
- en: As we have already learned about handling security in huge serverless systems,
    we will keep this short. There are several complex data movements happening inside
    a large distributed serverless workload. Using proper security protocols and monitoring
    them, as mentioned in detail in the previous security section, will help in overcoming
    this problem.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们已经学习了如何在大型无服务器系统中处理安全问题，我们将简要介绍。在大型分布式无服务器工作负载内部发生着多种复杂的数据移动。使用适当的协议并对其进行监控，如前一个安全部分中详细提到的，将有助于克服这个问题。
- en: Logging is a major problem in distributed serverless systems, which is also
    still unsolved completely. As the systems and containers are destroyed once the
    workload has been completed, logging has been a very difficult task to undertake. There
    are several ways you can log the workflow. The most popular ones are logging every
    Ansible task separately, and one where the last Ansible task is to zip up the
    logs and send the zipped file to a data store, such as S3 or Logstash. The last
    one is the most preferred way as it captures the execution flow better, as the
    entire log trace is in a single file.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录是分布式无服务器系统中的一个主要问题，这个问题也完全未解决。由于系统和容器在工作负载完成后被销毁，因此日志记录是一个非常困难的任务。您可以通过几种方式记录工作流程。最受欢迎的方法是分别记录每个Ansible任务，以及最后一个Ansible任务是压缩日志并发送压缩文件到数据存储，如S3或Logstash。最后一个方法是最受欢迎的，因为它更好地捕捉了执行流程，因为整个日志跟踪都在一个文件中。
- en: 'Monitoring is similar to logging. Monitoring these systems is also mostly an
    unsolved problem. As the servers are all terminated once the workload is run,
    we can''t poll for historic logs from the servers, and latency also will not be
    tolerated, or more precisely, will not be possible. Monitor every task of Ansible
    by having a task after each, that sends a custom metric to CloudWatch upon a condition
    that the previous task has executed successfully or not. This will look something
    like this:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控与日志记录类似。监控这些系统也是一个未解决的问题。由于服务器一旦运行工作负载就会被终止，我们无法从服务器中轮询历史日志，延迟也无法被容忍，或者更确切地说，将不可能实现。通过在每个Ansible任务之后添加一个任务，该任务在先前任务成功执行或未成功执行的情况下向CloudWatch发送自定义指标来监控每个Ansible任务。这看起来可能像这样：
- en: '![](img/00231.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00231.jpeg)'
- en: Debugging trial runs can also become very frustrating, very fast. This is because,
    if you are not quick, the entire system can be terminated before you even get
    a chance to look at the logs. Also, Ansible emits very verbose logs while debugging,
    which might seem overwhelming when spawning several instances.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试试运行也可能变得非常令人沮丧，而且非常快。这是因为，如果您不够快，整个系统可能会在您有机会查看日志之前就被终止。此外，Ansible在调试时会产生非常冗长的日志，当生成多个实例时可能会显得令人难以承受。
- en: Some basic Unix hacks can help in handling these problems. The most important
    one is to monitor the tail of the log file, about 50 lines or so. This helps in
    not getting overwhelmed by the huge amount of logs, and it also keeps an eye on
    the execution of the Ansible notebook.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些基本的Unix技巧可以帮助处理这些问题。其中最重要的一点是监控日志文件的尾部，大约50行左右。这有助于避免被大量日志所淹没，并且还能关注Ansible笔记本的执行情况。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to scale up our serverless architecture(s)
    to being massively distributed serverless infrastructure(s). We have learned how
    to build on our existing knowledge of building and deploying Lambda infrastructures
    to handle massive workloads.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将我们的无服务器架构扩展到大规模分布式的无服务器基础设施。我们学习了如何利用我们构建和部署Lambda基础设施的现有知识来处理大量工作负载。
- en: We have learned to use the concept of nohup to use our Lambda function as a
    launch board for building a master-worker architecture that takes parallel computing
    into account. We have learned how to leverage configuration and orchestration
    tools, such as Ansible and Chef, to spawn and orchestrate multiple EC2 instances.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了使用nohup的概念，将我们的Lambda函数作为构建考虑并行计算的master-worker架构的发射板。我们已经学会了如何利用配置和编排工具，如Ansible和Chef，来生成和编排多个EC2实例。
- en: The knowledge gained from this chapter will open doors for building many complex
    infrastructures which can handle data and requests, both in terms of size and
    speed. This will allow you to operate multiple microservices closely intertwined
    together. This will also help you to build MapReduce-style systems and interact
    with other AWS services, seamlessly.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章获得的知识将为构建许多复杂的基础设施打开大门，这些基础设施可以处理数据和请求，无论是从规模还是速度上。这将使您能够操作紧密交织在一起的多项微服务。这还将帮助您构建类似MapReduce的系统，并与其他AWS服务无缝交互。
