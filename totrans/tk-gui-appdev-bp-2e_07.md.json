["```py\nimport json, collections, functools, math\n```", "```py\npip3 install simpleaudio\n```", "```py\nroot = Tk()\nSCREEN_WIDTH = root.winfo_screenwidth()\nSCREEN_HEIGHT = root.winfo_screenheight()\nSCREEN_X_CENTER = (SCREEN_WIDTH - WINDOW_WIDTH) / 2\nSCREEN_Y_CENTER = (SCREEN_HEIGHT - WINDOW_HEIGHT) / 2\nroot.geometry('%dx%d+%d+%d' % (WINDOW_WIDTH, WINDOW_HEIGHT, SCREEN_X_CENTER,  SCREEN_Y_CENTER))\nroot.resizable(False, False)\nPianoTutor(root)\nroot.mainloop()\n```", "```py\nclass PianoTutor:\n\n  def __init__(self, root):\n    self.root = root\n    self.root.title('Piano Tutor')\n    self.build_mode_selector_frame()\n    self.build_score_sheet_frame()\n    self.build_controls_frame()\n    self.build_keyboard_frame()\n    self.build_chords_frame()\n    self.build_progressions_frame()\n    self.build_scales_frame()\n```", "```py\n def build_score_sheet_frame(self):\n   self.score_sheet_frame = Frame(self.root, width=WINDOW_WIDTH, height=                    \n                      SCORE_DISPLAY_HEIGHT, background='SteelBlue1')\n   self.score_sheet_frame.grid_propagate(False)\n   Label(self.score_sheet_frame, text='placeholder for score sheet',  \n                       background='SteelBlue1').grid(row=1, column=1)\n   self.score_sheet_frame.grid(row=1, column=0)\n```", "```py\nself.mode_selector.bind(\"<<ComboboxSelected>>\", self.on_mode_changed)\n```", "```py\ndef on_mode_changed(self, event):\n  selected_mode = self.mode_selector.get()\n  if selected_mode == 'Scales':\n    self.show_scales_frame()\n  elif selected_mode == 'Chords':\n    self.show_chords_frame()\n  elif selected_mode == 'Chord Progressions':\n    self.show_progressions_frame()\n\ndef show_scales_frame(self):\n  self.chords_frame.grid_remove()\n  self.progressions_frame.grid_remove()\n  self.scales_frame.grid()\n\ndef show_chords_frame(self):\n  self.chords_frame.grid()\n  self.progressions_frame.grid_remove()\n  self.scales_frame.grid_remove()\n\ndef show_progressions_frame(self):\n  self.chords_frame.grid_remove()\n  self.progressions_frame.grid()\n  self.scales_frame.grid_remove()\n```", "```py\nWHITE_KEY_IMAGE = '../pictures/white_key.gif'\nWHITE_KEY_PRESSED_IMAGE = '../pictures/white_key_pressed.gif'\nBLACK_KEY_IMAGE = '../pictures/black_key.gif'\nBLACK_KEY_PRESSED_IMAGE = '../pictures/black_key_pressed.gif'\n```", "```py\n def create_key(self, img, key_name, x_coordinate):\n   key_image = PhotoImage(file=img)\n   label = Label(self.keyboard_frame, image=key_image, border=0)\n   label.image = key_image\n   label.place(x=x_coordinate, y=0)\n   label.name = key_name\n   label.bind('<Button-1>', self.on_key_pressed)\n   label.bind('<ButtonRelease-1>', self.on_key_released)\n   self.keys.append(label)\n   return label\n```", "```py\ndef on_key_pressed(self, event):\n  print(event.widget.name + ' pressed') \n  self.change_image_to_pressed(event)\n\ndef on_key_released(self, event):\n  print(event.widget.name + ' released' ) \n  self.change_image_to_unpressed(event)\n```", "```py\ndef change_image_to_pressed(self, event):\n if len(event.widget.name) == 2:\n   img = WHITE_KEY_PRESSED_IMAGE\n elif len(event.widget.name) == 3:\n   img = BLACK_KEY_PRESSED_IMAGE\n key_img = PhotoImage(file=img)\n event.widget.configure(image=key_img)\n event.widget.image = key_img\n\ndef change_image_to_unpressed(self, event):\n  if len(event.widget.name) == 2:\n    img = WHITE_KEY_IMAGE\n  elif len(event.widget.name) == 3:\n    img = BLACK_KEY_IMAGE\n  key_img = PhotoImage(file=img)\n  event.widget.configure(image=key_img)\n  event.widget.image = key_img\n```", "```py\nWHITE_KEY_X_COORDINATES = [0,40, 80,120, 160, 200, 240,280, 320, 360, 400, 440, 480,520]\nBLACK_KEY_X_COORDINATES = [30,70,150,190, 230, 310, 350, 430,470, 510]\n```", "```py\n def build_keyboard_frame(self):\n   self.keyboard_frame = Frame(self.root, width=WINDOW_WIDTH, \n               height=KEYBOARD_HEIGHT,   background='LavenderBlush2')\n   self.keyboard_frame.grid_propagate(False)\n   self.keyboard_frame.grid(row=4, column=0, sticky=\"nsew\")\n   for index, key in enumerate(WHITE_KEY_NAMES):\n     x = WHITE_KEY_X_COORDINATES[index]\n     self.create_key(WHITE_KEY_IMAGE, key, x )\n   for index, key in enumerate(BLACK_KEY_NAMES):\n     x = BLACK_KEY_X_COORDINATES[index]\n     self.create_key(BLACK_KEY_IMAGE, key, x)\n```", "```py\nimport simpleaudio as sa\nfrom _thread import start_new_thread\nimport time\n\ndef play_note(note_name):\n wave_obj = sa.WaveObject.from_wave_file('sounds/' + note_name + '.wav')\n wave_obj.play()\n\ndef play_scale(scale):\n for note in scale:\n   play_note(note)\n   time.sleep(0.5)\n\ndef play_scale_in_new_thread(scale):\n  start_new_thread(play_scale,(scale,))\n\ndef play_chord(scale):\n  for note in scale:\n    play_note(note)\n\ndef play_chord_in_new_thread(chord):\n  start_new_thread(play_chord,(chord,))\n```", "```py\nfrom audio import play_note    \n```", "```py\ndef on_key_pressed(self, event):\n play_note(event.widget.name)\n self.change_image_to_pressed(event)\n```", "```py\n{\n \"Major\": [ 0, 2, 4, 5, 7, 9, 11 ],\n \"Minor\": [ 0, 2, 3, 5, 7, 8, 10 ],\n \"Harmonic minor\": [ 0, 2, 3, 5, 7, 8, 11 ],\n \"Melodic minor\": [ 0, 2, 3, 5, 7, 9, 11 ],\n \"Major blues\": [ 0, 2, 3, 4, 7, 9 ],\n \"Minor blues\": [ 0, 3, 5, 6, 7, 10 ],\n...\n}\n```", "```py\nB, B+2, B+3, B+5, B+7, B+9 and B+11 keys\n```", "```py\nimport json\n```", "```py\ndef load_json_files(self):\n  with open(SCALES_JSON_FILE, 'r') as f:\n    self.scales = json.load(f, object_pairs_hook=OrderedDict)\n```", "```py\nself.keys_to_highlight = []  \n```", "```py\ndef highlight_key(self, key_name):\n if len(key_name) == 2:\n   img = WHITE_KEY_PRESSED_IMAGE\n elif len(key_name) == 3:\n   img = BLACK_KEY_PRESSED_IMAGE\n key_img = PhotoImage(file=img)\n for widget in self.keys:\n  if widget.name == key_name:\n    widget.configure(image=key_img)\n    widget.image = key_img\n\ndef highlight_list_of_keys(self, key_names):\n  for key in key_names:\n     self.highlight_key(key)\n```", "```py\ndef remove_key_highlight(self, key_name):\n  if len(key_name) == 2:\n    img = WHITE_KEY_IMAGE\n  elif len(key_name) == 3:\n    img = BLACK_KEY_IMAGE\n  key_img = PhotoImage(file=img)\n  for widget in self.keys:\n   if widget.name == key_name:\n    widget.configure(image=key_img)\n    widget.image = key_img\n\ndef remove_all_key_highlights(self):\n  for key in self.keys_to_highlight:\n    self.remove_key_highlight(key)\n  self.keys_to_highlight = []\n```", "```py\ndef on_scale_changed(self, event):\n  self.remove_all_key_highlights()\n  self.find_scale(event)\n\ndef on_scale_key_changed(self, event):\n  self.remove_all_key_highlights()\n  self.find_scale(event)\n```", "```py\ndef find_scale(self, event=None):\n self.selected_scale = self.scale_selector.get()\n self.scale_selected_key = self.scale_key_selector.get()\n index_of_selected_key = KEYS.index(self.scale_selected_key)\n self.keys_to_highlight = [ ALL_KEYS[i+index_of_selected_key] \\\n for i in self.scales[self.selected_scale]]\n self.highlight_list_of_keys(self.keys_to_highlight)\n play_scale_in_new_thread(self.keys_to_highlight)\n```", "```py\n{\n \"Major\" : [0, 4, 7],\n \"Minor\" : [0, 3, 7],\n \"Sus4\" : [0, 5, 7],\n \"5\" : [0, 4, 6],\n \"Diminished\" : [0, 3, 6],\n ...\n}\n```", "```py\nC#,    (C# + 4 semitones) ,      (C# + 7 semitones) \n```", "```py\nCHORDS_JSON_FILE = '../json/chords.json'\n```", "```py\n with open(CHORDS_JSON_FILE, 'r') as f:\n   self.chords = json.load(f, object_pairs_hook=OrderedDict)\n```", "```py\nself.chords_selector = ttk.Combobox(self.chords_frame,  values=[k for k \n  in self.chords.keys()])\nself.chords_selector.current(0)\nself.chords_selector.bind(\"<<ComboboxSelected>>\", self.on_chord_changed)\nself.chords_selector.grid(row=1, column=1, sticky='e', padx=10, \n  pady=10)\nself.chords_key_selector = ttk.Combobox(self.chords_frame, values=[k  \n  for k in KEYS])\nself.chords_key_selector.current(0)\nself.chords_key_selector.bind(\"<<ComboboxSelected>>\", self.on_chords_key_changed)\n```", "```py\ndef on_chord_changed(self, event):\n  self.remove_all_key_highlights()\n  self.find_chord(event)\n\ndef on_chords_key_changed(self, event):\n  self.remove_all_key_highlights()\n  self.find_chord(event)\n```", "```py\ndef find_chord(self, event=None):\n  self.selected_chord = self.chords_selector.get()\n  self.chords_selected_key = self.chords_key_selector.get()\n  index_of_selected_key = KEYS.index(self.chords_selected_key)\n  self.keys_to_highlight = [ ALL_KEYS[i+index_of_selected_key] for \\\n                         i in self.chords[self.selected_chord]]\n  self.highlight_list_of_keys(self.keys_to_highlight)\n  play_chord_in_new_thread(self.keys_to_highlight)\n```", "```py\n def on_mode_changed(self, event):\n   self.remove_all_key_highlights()\n   selected_mode = self.mode_selector.get()\n   if selected_mode == 'Scales':\n     self.show_scales_frame()\n     self.find_scale()\n   elif selected_mode == 'Chords':\n     self.show_chords_frame()\n     self.find_chord()\n   elif selected_mode == 'Chord Progressions':\n     self.show_progressions_frame()\n```", "```py\n{\n \"Major\": {\n \"I-IV-V\": [ \"0\", \"5\", \"7\" ],\n \"ii-V-I\": [ \"2\", \"7\", \"0\" ],\n \"I-V-vi-IV\": [ \"0\", \"7\", \"9\", \"5\" ],\n... more here},\n \"Minor\": {\n \"i-VI-VII\": [ \"0\", \"9\", \"11\"],\n \"i-iv-VII\": [ \"0\", \"5\", \"11\"],\n \"i-iv-v\": [ \"0\", \"5\", \"7\" ],\n..more here\n}\n }\n```", "```py\n \"ii-V-I\": [ \"2\", \"7\", \"0\" ]\n```", "```py\nPROGRESSIONS_JSON_FILE = '../json/progressions.json'\n```", "```py\n with open(PROGRESSIONS_JSON_FILE, 'r') as f:\n    self.progressions = json.load(f, object_pairs_hook=OrderedDict)\n```", "```py\ndef on_progression_scale_changed(self, event):\n selected_progression_scale = self.progression_scale_selector.get()\n progressions = [k for k in  \n   self.progressions[selected_progression_scale].keys()]\n self.progression_selector['values'] = progressions\n self.progression_selector.current(0)\n self.show_progression_buttons()\n\ndef on_progression_key_changed(self,event):\n self.show_progression_buttons()\n\ndef on_progression_changed(self,event):\n self.show_progression_buttons()\n```", "```py\ndef show_progression_buttons(self):\n self.destroy_current_progression_buttons()\n selected_progression_scale = self.progression_scale_selector.get()\n selected_progression = self.progression_selector.get().split('-')\n self.progression_buttons = []\n for i in range(len(selected_progression)):\n   self.progression_buttons.append(Button(self.progressions_frame,                     \n         text=selected_progression[i],\n         command=partial(self.on_progression_button_clicked, i)))\n   sticky = 'W' if i == 0 else 'E' \n   col = i if i > 1 else 1\n   self.progression_buttons[i].grid(column=col, row=2, sticky=sticky, \n     padx=10)\n```", "```py\ndef destroy_current_progression_buttons(self):\n for buttons in self.progression_buttons:\n    buttons.destroy()\n```", "```py\ndef on_progression_button_clicked(self, i):\n  self.remove_all_key_highlights()\n  selected_progression = self.progression_selector.get().split('-')[i]\n  if any(x.isupper() for x in selected_progression):\n     selected_chord = 'Major'\n  else: \n    selected_chord = 'Minor'\n  key_offset = ROMAN_TO_NUMBER[selected_progression]\n  selected_key = self.progression_key_selector.get() \n  index_of_selected_key = (KEYS.index(selected_key)+ key_offset)% 12\n  self.keys_to_highlight = [ ALL_KEYS[j+index_of_selected_key] for j in   \n                             self.chords[selected_chord]]\n  self.highlight_list_of_keys(self.keys_to_highlight)\n  play_chord_in_new_thread(self.keys_to_highlight)\n```", "```py\nROMAN_TO_NUMBER = { 'I':0, 'II': 2, 'III':4, 'IV':5, 'V': 7, 'VI':9, 'VII': 11, 'i':0, 'ii': 2, 'iii':4, 'iv':5, 'v': 7, 'vi':9, 'vii': 11}\n```", "```py\nclass ScoreMaker:\n\nNOTES = ['C1','D1', 'E1', 'F1', 'G1','A1', 'B1', 'C2','D2', 'E2', 'F2', 'G2','A2', 'B2']\n```", "```py\ndef __init__(self, container):\n   self.canvas = Canvas(container, width=500, height = 110)\n   self.canvas.grid(row=0, column = 1)\n   container.update_idletasks() \n   self.canvas_width = self.canvas.winfo_width()\n   self.treble_clef_image = PhotoImage(file='../pictures/treble-clef.gif')\n   self.sharp_image = PhotoImage(file='../pictures/sharp.gif')\n\n```", "```py\n def _draw_five_lines(self):\n   w = self.canvas_width\n   self.canvas.create_line(0,40,w,40, fill=\"#555\")\n   self.canvas.create_line(0,50,w,50, fill=\"#555\")\n   self.canvas.create_line(0,60,w,60, fill=\"#555\")\n   self.canvas.create_line(0,70,w,70, fill=\"#555\")\n   self.canvas.create_line(0,80,w,80, fill=\"#555\")\n```", "```py\n def _create_treble_staff(self):\n  self._draw_five_lines()\n  self.canvas.create_image(10, 20, image=self.treble_clef_image, anchor=NW)\n```", "```py\nimport itertools \nself.x_counter = itertools.count(start=50, step=30)\n```", "```py\n def _draw_single_note(self, note, is_in_chord=False):\n   is_sharp = \"#\" in note \n   note = note.replace(\"#\",\"\")\n   radius = 9\n   if is_in_chord:\n     x = 75\n   else: \n     x = next(self.x_counter)\n   i = self.NOTES.index(note)\n   y = 85-(5*i)\n   self.canvas.create_oval(x,y,x+radius, y+ radius, fill=\"#555\")\n   if is_sharp:\n     self.canvas.create_image(x-10,y, image=self.sharp_image, anchor=NW)\n   if note==\"C1\":\n     self.canvas.create_line(x-5,90,x+15, 90, fill=\"#555\")\n   elif note==\"G2\":\n     self.canvas.create_line(x-5,35,x+15, 35, fill=\"#555\")\n   elif note==\"A2\":\n     self.canvas.create_line(x-5,35,x+15, 35, fill=\"#555\")\n   elif note==\"B2\":\n     self.canvas.create_line(x-5,35,x+15, 35, fill=\"#555\")\n     self.canvas.create_line(x-5,25,x+15, 25, fill=\"#555\") \n```", "```py\ni = self.NOTES.index(note)\ny = 85-(5*i)\n```", "```py\nself.canvas.create_oval(x,y,x+radius, y+ radius, fill=\"#555\")\n```", "```py\ndef draw_notes(self, notes):\n  self._clean_score_sheet()\n  self._create_treble_staff()\n  for note in notes:\n    self._draw_single_note(note)\n\ndef draw_chord(self, chord):\n  self._clean_score_sheet()\n  self._create_treble_staff()\n  for note in chord:\n    self._draw_single_note(note, is_in_chord=True)\n```", "```py\nfrom score_maker import ScoreMaker\n```", "```py\nself.score_maker = ScoreMaker(self.score_sheet_frame) \n```", "```py\nself.score_maker.draw_notes(self.keys_to_highlight)\n```", "```py\nself.score_maker.draw_chord(self.keys_to_highlight)\n```", "```py\nfrom tkinter import Tk, Button\nroot = Tk()\n\nfor x in range(10):\n btn = Button(root, text=x )\n btn.grid(column=x, row=1, sticky='nsew')\n\nroot.mainloop()\n```", "```py\nfrom tkinter import Tk, Button, Grid\n\nroot = Tk()\n\nfor x in range(10):\n Grid.rowconfigure(root, x, weight=1)\n Grid.columnconfigure(root, x, weight=1)\n btn = Button(root, text=x )\n btn.grid(column=x, row=1, sticky='nsew')\n\nroot.mainloop()\n```", "```py\nGrid.rowconfigure(root, x, weight=1)\nGrid.columnconfigure(root, x, weight=1) \n```", "```py\n Grid.rowconfigure(root, x, weight=0)\n Grid.columnconfigure(root, x, weight=0)\n```", "```py\n Grid.rowconfigure(root, x, weight=x)\n Grid.columnconfigure(root, x, weight=x)\n```", "```py\n Grid.rowconfigure(root, 2, weight=1)\n Grid.columnconfigure(root, 2, weight=1)\n```", "```py\nfrom tkinter import Tk, Label, Pack\n\nroot= Tk()\nlabel = Label(root, text = 'I am a Frame', bg='red')\nlabel.pack(fill='both', expand=True)\n\ndef on_label_resized(event):\n  print('New Width', label.winfo_width())\n  print('New Height', label.winfo_height())\n\nlabel.bind(\"<Configure>\", on_label_resized)\nroot.mainloop()\n```"]