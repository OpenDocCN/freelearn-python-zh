["```py\n# Using a scrolled Text control \nscrol_w = 40; scrol_h = 10     # increase sizes\nself.scrol = scrolledtext.ScrolledText(mighty, width=scrol_w, \nheight=scrol_h, wrap=tk.WORD)\nself.scrol.grid(column=0, row=3, sticky='WE', columnspan=3)\n```", "```py\n# Adding a Spinbox widget\nself.spin = Spinbox(mighty, values=(1, 2, 4, 42, 100), width=5, \nbd=9, command=self._spin) \nself.spin.grid(column=0, row=2, sticky='W') # align left, use sticky\n```", "```py\n# Adding a Textbox Entry widget\nself.name = tk.StringVar()\nself.name_entered = ttk.Entry(mighty, width=24, \n# increase width\ntextvariable=self.name)\nself.name_entered.grid(column=0, row=1, sticky='W')\n```", "```py\nttk.Label(mighty, text=\"Choose a number:\").grid(column=1, row=0)\nnumber = tk.StringVar()\nself.number_chosen = ttk.Combobox(mighty, width=14, \n# increase width\ntextvariable=number, state='readonly')\nself.number_chosen['values'] = (1, 2, 4, 42, 100)\nself.number_chosen.grid(column=1, row=1)\nself.number_chosen.current(0)\n```", "```py\n#======================\n# imports\n#======================\nimport tkinter as tk\n...\nfrom threading import Thread\n```", "```py\nclass OOP(): \n    def method_in_a_thread(self):\n        print('Hi, how are you?')\n```", "```py\n#======================\n# Start GUI\n#======================\noop = OOP()\n\n# Running methods in Threads\nrun_thread = Thread(target=oop.method_in_a_thread)  # create Thread\n\noop.win.mainloop()\n```", "```py\n# Button callback\ndef click_me(self): \n    self.action.configure(text='Hello ' + self.name.get() + ' ' \n    + self.number_chosen.get())\n    # Non-threaded code with sleep freezes the GUI\n    for idx in range(10):\n        sleep(5)\n        self.scrol.insert(tk.INSERT, str(idx) + 'n')\n```", "```py\n# Running methods in Threads\ndef create_thread(self):\n    self.run_thread = Thread(target=self.method_in_a_thread) \n    self.run_thread.start()              # start the thread\n\n# Button callback\ndef click_me(self): \n    self.action.configure(text='Hello ' + self.name.get())\n    self.create_thread()\n```", "```py\n# Running methods in Threads\ndef create_thread(self):\n    self.run_thread = \n    Thread(target=self.method_in_a_thread) \n    self.run_thread.start()              # start the thread\n    print(self.run_thread)\n```", "```py\ndef method_in_a_thread(self):\n    print('Hi, how are you?')\n    for idx in range(10):\n        sleep(5)\n        self.scrol.insert(tk.INSERT, str(idx) + 'n')\n```", "```py\n# Running methods in Threads \ndef create_thread(self):\n    self.run_thread = Thread(target=self.method_in_a_thread, \n    args=[8]) \n    self.run_thread.start() \n    print(self.run_thread)\nprint('createThread():', self.run_thread.isAlive())\n```", "```py\ndef method_in_a_thread(self, num_of_loops=10): \n    for idx in range(num_of_loops): \n        sleep(1) \n        self.scrol.insert(tk.INSERT, str(idx) + 'n') \n    sleep(1) \n    print('method_in_a_thread():', self.run_thread.isAlive())\n```", "```py\n# Running methods in Threads \ndef create_thread(self):\n    self.run_thread = Thread(target=self.method_in_a_thread, \n    args=[8]) \n    self.run_thread.setDaemon(True)         # <=== add this line\n    self.run_thread.start()\n    print(self.run_thread)\n```", "```py\n# Running methods in Threads \ndef create_thread(self):\n    run_thread = Thread(target=self.method_in_a_thread, args=[8]) \n    run_thread.start()\n```", "```py\nfrom threading import Thread \nfrom queue import Queue\n```", "```py\ndef use_queues(self): \n    gui_queue = Queue()        # create queue instance \n    print(gui_queue)           # print instance\n```", "```py\n# Button callback\ndef click_me(self): \n    self.action.configure(text='Hello ' + self.name.get())\n    self.create_thread()\n    self.use_queues()\n```", "```py\n# Create Queue instance   \ndef use_queues(self):\n    gui_queue = Queue() \n    print(gui_queue)\n    gui_queue.put('Message from a queue') \n    print(gui_queue.get())\n```", "```py\n# Create Queue instance \ndef use_queues(self):\n    gui_queue = Queue() \n    print(gui_queue)\n    for idx in range(10):\n        gui_queue.put('Message from a queue: ' + str(idx))\n    print(gui_queue.get())\n```", "```py\n# Create Queue instance \ndef use_queues(self):\n    gui_queue = Queue() \n    print(gui_queue)\n    for idx in range(10):\n        gui_queue.put('Message from a queue: ' + str(idx))\n    while True: \n        print(gui_queue.get())\n```", "```py\n# Running methods in Threads \ndef create_thread(self):\n    self.run_thread = Thread(target=self.method_in_a_thread, \n    args=[8])                    \n    self.run_thread.setDaemon(True) \n    self.run_thread.start()\n\n    # start queue in its own thread\n    write_thread = Thread(target=self.use_queues, daemon=True)\n    write_thread.start()\n```", "```py\n# Button callback\ndef click_me(self): \n    self.action.configure(text='Hello ' + self.name.get())\n    self.create_thread()\n    # now started as a thread in create_thread()\n    # self.use_queues()\n```", "```py\ndef write_to_scrol(inst):\n    print('hi from Queue', inst)\n    for idx in range(10): \n        inst.gui_queue.put('Message from a queue: ' + \n str(idx)) \n    inst.create_thread(6)\n```", "```py\nimport Ch06_Code.Queues as bq    # bq; background queue\n\nclass OOP(): \n    # Button callback \n    def click_me(self): \n        # Passing in the current class instance (self) \n        print(self) \n        bq.write_to_scrol(self)\n```", "```py\nclass OOP(): \n    def __init__(self): \n        # Create a Queue \n        self.gui_queue = Queue()\n```", "```py\ndef use_queues(self): \n    # Now using a class instance member Queue \n    while True: \n        print(self.gui_queue.get())\n```", "```py\n    def write_to_scrol(inst): \n        print('hi from Queue', inst) \n        inst.create_thread(6)\n```", "```py\n    def write_to_scrol(inst): \n        print('hi from Queue', inst) \n        for idx in range(10): \n            inst.gui_queue.put('Message from a queue: ' + str(idx)) \n        inst.create_thread(6)\n```", "```py\n########################################################### \ndef create_widgets(self): \n    # Create Tab Control\n    tabControl = ttk.Notebook(self.win)   \n    # Add a second tab\n    tab2 = ttk.Frame(tabControl)           \n    # Make second tab visible\n    tabControl.add(tab2, text='Tab 2')     \n\n# Create Manage Files Frame  \nmngFilesFrame = ttk.LabelFrame(tab2, text=' Manage Files: ') \nmngFilesFrame.grid(column=0, row=1, sticky='WE', padx=10, pady=5) \n\n# Button Callback \ndef getFileName(): \n    print('hello from getFileName') \n\n# Add Widgets to Manage Files Frame \nlb = ttk.Button(mngFilesFrame, text=\"Browse to File...\", \ncommand=getFileName) \nlb.grid(column=0, row=0, sticky=tk.W)  \n\nfile = tk.StringVar() \nself.entryLen = scrol_w \nself.fileEntry = ttk.Entry(mngFilesFrame, width=self.entryLen, \ntextvariable=file) \nself.fileEntry.grid(column=1, row=0, sticky=tk.W) \n\nlogDir = tk.StringVar() \nself.netwEntry = ttk.Entry(mngFilesFrame, \nwidth=self.entryLen, textvariable=logDir) \nself.netwEntry.grid(column=1, row=1, sticky=tk.W)  \n\ndef copyFile(): \n    import shutil \n    src = self.fileEntry.get() \n    file = src.split('/')[-1] \n    dst = self.netwEntry.get() + ''+ file \n    try: \n        shutil.copy(src, dst) \n        msg.showinfo('Copy File to Network', 'Succes: \n        File copied.') \n    except FileNotFoundError as err: \n        msg.showerror('Copy File to Network', '*** Failed to copy \n        file! ***\\n\\n' + str(err)) \n    except Exception as ex: \n        msg.showerror('Copy File to Network', '*** Failed to copy \n        file! ***\\n\\n' + str(ex)) \n\ncb = ttk.Button(mngFilesFrame, text=\"Copy File To : \", \ncommand=copyFile) \ncb.grid(column=0, row=1, sticky=tk.E) \n\n# Add some space around each label \nfor child in mngFilesFrame.winfo_children(): \n    child.grid_configure(padx=6, pady=6)\n```", "```py\nfrom tkinter import filedialog as fd \nfrom os import path\n```", "```py\ndef getFileName(): \n    print('hello from getFileName') \n    fDir  = path.dirname(__file__) \n    fName = fd.askopenfilename(parent=self.win, initialdir=fDir)\n```", "```py\n# Adding a Textbox Entry widget \nself.name = tk.StringVar()\nself.name_entered = ttk.Entry(mighty, width=24, textvariable=self.name)\nself.name_entered.grid(column=0, row=1, sticky='W') \nself.name_entered.delete(0, tk.END)\nself.name_entered.insert(0, '< default name >')\n```", "```py\n# Module level GLOBALS \nGLOBAL_CONST = 42 \nfDir   = path.dirname(__file__) \nnetDir = fDir + 'Backup' \n\ndef __init__(self): \n    self.createWidgets()        \n    self.defaultFileEntries() \n\ndef defaultFileEntries(self): \n    self.fileEntry.delete(0, tk.END) \n    self.fileEntry.insert(0, fDir)  \n    if len(fDir) > self.entryLen: \n        self.fileEntry.config(width=len(fDir) + 3) \n        self.fileEntry.config(state='readonly') \n\n    self.netwEntry.delete(0, tk.END) \n    self.netwEntry.insert(0, netDir)  \n    if len(netDir) > self.entryLen: \n        self.netwEntry.config(width=len(netDir) + 3)\n```", "```py\n# Module level GLOBALS \nGLOBAL_CONST = 42 \n\nfrom os import makedirs \nfDir   = path.dirname(__file__) \nnetDir = fDir + 'Backup'  \nif not path.exists(netDir): \n    makedirs(netDir, exist_ok = True)\n```", "```py\nfrom tkinter import messagebox as msg\ndef copyFile(): \n    import shutil                   #import module within function\n    src = self.fileEntry.get() \n    file = src.split('/')[-1] \n    dst = self.netwEntry.get() + ''+ file \n    try: \n        shutil.copy(src, dst) \n        msg.showinfo('Copy File to Network', 'Succes: File \n        copied.') \n    except FileNotFoundError as err: \n        msg.showerror('Copy File to Network', \n        '*** Failed to copy file! ***\\n\\n' + str(err)) \n    except Exception as ex: \n        msg.showerror('Copy File to Network', \n        '*** Failed to copy file! ***\\n\\n' + str(ex))\n```", "```py\n    # Place cursor into name Entry \n    # name_entered.focus()                 # commented out             \n    tabControl.select(1)                   # displayTab 2 at GUI startup \n```", "```py\nfrom socketserver import BaseRequestHandler, TCPServer \n\nclass RequestHandler(BaseRequestHandler): \n    # override base class handle method \n    def handle(self): \n        print('Server connected to: ', self.client_address) \n        while True: \n            rsp = self.request.recv(512) \n            if not rsp: break \n            self.request.send(b'Server received: ' + rsp) \n\ndef start_server(): \n    server = TCPServer(('', 24000), RequestHandler) \n    server.serve_forever()\n```", "```py\n# using TCP/IP\nfrom socket import socket, AF_INET, SOCK_STREAM \n\ndef write_to_scrol_TCP(inst): \n    print('hi from Queue', inst) \n    sock = socket(AF_INET, SOCK_STREAM) \n    sock.connect(('localhost', 24000)) \n    for idx in range(10): \n    sock.send(b'Message from a queue: ' + bytes(str(idx).encode()) ) \n        recv = sock.recv(8192).decode() \n        inst.gui_queue.put(recv)       \n    inst.create_thread(6)\n```", "```py\nclass OOP(): \n    def __init__(self): \n        # Start TCP/IP server in its own thread \n        svrT = Thread(target=start_server, daemon=True) \n        svrT.start()\n```", "```py\nsock.send(b'Message from a queue: ' + bytes(str(idx).encode()) )\n```", "```py\nfrom urllib.request import urlopen \nlink = 'http://python.org/'  \ntry:\n    http_rsp = urlopen(link)\n    print(http_rsp)\n    html = http_rsp.read()\n    print(html)\n    html_decoded = html.decode()\n    print(html_decoded) \nexcept Exception as ex:\n    print('*** Failed to get Html! ***\\n\\n' + str(ex)) \nelse:\n    return html_decoded\n```", "```py\nfrom urllib.request import urlopen \nlink = 'http://python.org/'  \n\ndef get_html():\n    try:\n        http_rsp = urlopen(link)\n        print(http_rsp)\n        html = http_rsp.read()\n        print(html)\n        html_decoded = html.decode()\n        print(html_decoded) \n    except Exception as ex:\n        print('*** Failed to get Html! ***\\n\\n' + str(ex)) \n    else:\n        return html_decoded\n```", "```py\nimport Ch06_Code.URL as url\n\n# Button callback \ndef click_me(self): \n    self.action.configure(text='Hello ' + self.name.get())\n    bq.write_to_scrol(self) \n    sleep(2)\n    html_data = url.get_html()\n    print(html_data)\n    self.scrol.insert(tk.INSERT, html_data)\n```"]