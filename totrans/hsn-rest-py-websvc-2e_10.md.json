["```py\nPATCH http://localhost:8888/hexacopters/1 \n```", "```py\nGET http://localhost:8888/hexacopters/1\n```", "```py\nPATCH http://localhost:8888/led/{id} \n```", "```py\nGET http://localhost:8888/led/{id} \n```", "```py\nGET http://localhost:8888/altimeter/1?unit=feet\n```", "```py\nGET http://localhost:8888/altimeter/1?unit=meters\n```", "```py\nfrom time import sleep \nfrom random import randint \n\nclass HexacopterStatus: \n    def __init__(self, motor_speed, is_turned_on): \n        self.motor_speed = motor_speed \n        self.is_turned_on = is_turned_on \n\nclass Hexacopter: \n    MIN_MOTOR_SPEED = 0 \n    MAX_MOTOR_SPEED = 500 \n\n    def __init__(self): \n        self._motor_speed = self.__class__.MIN_MOTOR_SPEED \n        self._is_turned_on = False \n\n    @property \n    def motor_speed(self): \n        return self._motor_speed \n\n    @motor_speed.setter     \n    def motor_speed(self, value): \n        if value < self.__class__.MIN_MOTOR_SPEED: \n            raise ValueError('The minimum speed is {0}'.format(self.__class__.MIN_MOTOR_SPEED)) \n        if value > self.__class__.MAX_MOTOR_SPEED: \n            raise ValueError('The maximum speed is {0}'.format(self.__class__.MAX_MOTOR_SPEED)) \n        sleep(2) \n        self._motor_speed = value \n        self._is_turned_on = (self.motor_speed is not 0) \n\n    @property \n    def is_turned_on(self): \n        return self._is_turned_on \n\n    @property \n    def status(self): \n        sleep(3) \n        return HexacopterStatus(self.motor_speed, self.is_turned_on) \n```", "```py\nclass LightEmittingDiode: \n    MIN_BRIGHTNESS_LEVEL = 0 \n    MAX_BRIGHTNESS_LEVEL = 255 \n\n    def __init__(self, id, description): \n        self.id = id \n        self.description = description \n        self._brightness_level = self.__class__.MIN_BRIGHTNESS_LEVEL \n\n    @property \n    def brightness_level(self): \n        sleep(1) \n        return self._brightness_level \n\n    @brightness_level.setter \n    def brightness_level(self, value): \n        if value < self.__class__.MIN_BRIGHTNESS_LEVEL: \n            raise ValueError('The minimum brightness level is {0}'.format(self.__class__.MIN_BRIGHTNESS_LEVEL)) \n        if value > self.__class__.MAX_BRIGHTNESS_LEVEL: \n            raise ValueError('The maximum brightness level is {0}'.format(self.__class__.MAX_BRIGHTNESS_LEVEL)) \n        sleep(2) \n        self._brightness_level = value\n```", "```py\nclass Altimeter: \n    @property \n    def altitude(self): \n        sleep(1) \n        return randint(0, 3000) \n```", "```py\nclass Drone: \n    def __init__(self): \n        self.hexacopter = Hexacopter() \n        self.altimeter = Altimeter() \n        self.red_led = LightEmittingDiode(1, 'Red LED') \n        self.green_led = LightEmittingDiode(2, 'Green LED') \n        self.blue_led = LightEmittingDiode(3, 'Blue LED') \n        self.leds = { \n            self.red_led.id: self.red_led, \n            self.green_led.id: self.green_led, \n            self.blue_led.id: self.blue_led} \n```", "```py\nclass Application(web.Application): \n    def __init__(self, **kwargs): \n        handlers = [ \n            (r\"/hexacopters/([0-9]+)\", HexacopterHandler), \n            (r\"/leds/([0-9]+)\", LedHandler), \n            (r\"/altimeters/([0-9]+)\", AltimeterHandler), \n        ] \n        super(Application, self).__init__(handlers, **kwargs) \n\nif __name__ == \"__main__\": \n    application = Application() \n    port = 8888 \n    print(\"Listening at port {0}\".format(port)) \n    application.listen(port) \n    tornado_ioloop = ioloop.IOLoop.instance() \n    periodic_callback = ioloop.PeriodicCallback(lambda: None, 500) \n    periodic_callback.start() \n    tornado_ioloop.start()\n```", "```py\n    python drone_service.py\n```", "```py\n    Listening at port 8888\n```", "```py\n    http PATCH \":8888/hexacopters/1\" motor_speed_in_rpm=50\n```", "```py\n curl -iX PATCH -H \"Content-Type: application/json\" -d '{\"motor_speed_in_rpm\":50}' \"localhost:8888/hexacopters/1\"\n\n```", "```py\n{  \n   \"motor_speed_in_rpm\": 50 \n} \n```", "```py\n    HTTP/1.1 200 OK\n    Content-Length: 48\n    Content-Type: application/json; charset=UTF-8\n    Date: Tue, 30 Oct 2018 17:01:06 GMT\n    Server: TornadoServer/5.1.1\n\n    {\n    \"is_turned_on\": true, \n        \"motor_speed_in_rpm\": 50\n    }\n\n```", "```py\n    http \":8888/hexacopters/1\"\n```", "```py\n    curl -iX GET -H \"localhost:8888/hexacopters/1\"\n```", "```py\n    HTTP/1.1 200 OK\n    Content-Length: 48\n    Content-Type: application/json; charset=UTF-8\n    Date: Tue, 30 Oct 2018 17:06:10 GMT\n    Etag: \"172316bfc38ea5a04857465b888cff65c72a228c\"\n    Server: TornadoServer/5.1.1\n\n    {\n    \"is_turned_on\": true, \n        \"motor_speed_in_rpm\": 50\n    }\n\n```", "```py\n    I've started setting the hexacopter's motor speed\n    I've finished setting the hexacopter's motor speed\n    I've started retrieving the hexacopter's status\n    I've finished retrieving the hexacopter's status\n```", "```py\n    http \":8888/hexacopters/5\"\n```", "```py\n    curl -iX GET \"localhost:8888/hexacopters/5\"\n```", "```py\n    HTTP/1.1 404 Not Found\n    Content-Length: 0\n    Content-Type: text/html; charset=UTF-8\n    Date: Tue, 30 Oct 2018 17:22:13 GMT\n    Server: TornadoServer/5.1.1\n```", "```py\n    http \":8888/altimeters/1?unit=meters\"\n```", "```py\n    curl -iX GET -H \"localhost:8888/altimeters/1?unit=meters\"\n```", "```py\n    HTTP/1.1 200 OK\n    Content-Length: 49\n    Content-Type: application/json; charset=UTF-8\n    Date: Tue, 30 Oct 2018 17:35:59 GMT\n    Etag: \"e6bef0812295935473bbef8883a144a7740d4838\"\n    Server: TornadoServer/5.1.1\n\n    {\n    \"altitude\": 126.7968, \n        \"unit\": \"meters\"\n    }\n\n```", "```py\n    http \":8888/altimeters/1\" \n```", "```py\n    curl -iX GET -H \"localhost:8888/altimeters/1\"\n```", "```py\n    HTTP/1.1 200 OK\n    Content-Length: 33\n    Content-Type: application/json; charset=UTF-8\n    Date: Tue, 30 Oct 2018 17:38:58 GMT\n    Etag: \"985cc8ce1bddf8a96b2a06a76d14faaa5bc03c9b\"\n    Server: TornadoServer/5.1.1\n\n    {\n    \"altitude\": 263, \n        \"unit\": \"feet\"\n    }\n\n```", "```py\n    pytest --cov -v  \n```", "```py\n================================================ test session starts =================================================\nplatform darwin -- Python 3.7.1, pytest-4.0.2, py-1.7.0, pluggy-0.8.0 -- /Users/gaston/HillarPythonREST2/Tornado01/bin/python3\ncachedir: .pytest_cache\nrootdir: /Users/gaston/HillarPythonREST2/Tornado01, inifile: \nsetup.cfg\nplugins: tornasync-0.5.0, cov-2.6.0\ncollected 1 item \n\ntests.py::test_set_and_get_leds_brightness_levels PASSED                                                       [100%]\n\n ---------- coverage: platform darwin, python 3.6.6-final-0 -----------\n -\n    Name                     Stmts   Miss Branch BrPart  Cover\n    ----------------------------------------------------------\n    async_drone_service.py     141     81     20      4    40%\n    drone.py                    63     23     10      3    59%\n    ----------------------------------------------------------\n    TOTAL                      204    104     30      7    46%\n\n```", "```py\n    coverage report -m\n```", "```py\nName                     Stmts   Miss Branch BrPart  Cover   Missing\n---------------------------------------------------------------------\nasync_drone_service.py     141     81     20      4    40%   20-32, 36, \n40-67, 71-73, 84-86, 107-109, 114-116, 129-135, 148-168, 172, 186-193, 83->84, 106->107, 112->114, 185->186\ndrone.py                    63     23     10      3    59%   7-8, 21, 25-31, 35, 39-40, 60, 62, 70-71, 88-93, 59->60, 61->62, 87->88\n----------------------------------------------------------------------\nTOTAL                      204    104     30      7    46%\n\n```", "```py\n    coverage html\n```"]