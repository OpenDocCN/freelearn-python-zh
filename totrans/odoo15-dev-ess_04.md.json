["```py\nclass Book(models.Model):\n    _name = \"library.book\"\n    _description = \"Book\"\n    _order = \"name, date_published desc\"\n```", "```py\n    _recname = \"name\"\n    _table = \"library_book\"\n    _log_access = True\n    _auto = True\n```", "```py\n    def init(self):\n        tools.drop_view_if_exists(self.env.cr, self._table)\n        self.env.cr.execute(\n            \"CREATE or REPLACE VIEW %s as (%s)\"\n            % (self._table, self._query())\n        )  \n```", "```py\nclass Book(models.Model):\n    _name = \"library.book\"\n    _description = \"Book\"\n    # String fields:\n    name = fields.Char(\"Title\")\n    isbn = fields.Char(\"ISBN\")\n    book_type = fields.Selection(\n        [(\"paper\",\"Paperback\"),\n         (\"hard\",\"Hardcover\"),\n         (\"electronic\",\"Electronic\"),\n         (\"other\", \"Other\")],\n        \"Type\")\n    notes = fields.Text(\"Internal Notes\") \n    descr = fields.Html(\"Description\") \n    # Numeric fields:\n    copies = fields.Integer(default=1)\n    avg_rating = fields.Float(\"Average Rating\", (3, 2))\n    price = fields.Monetary(\"Price\", \"currency_id\") \n    # price helper\n    currency_id = fields.Many2one(\"res.currency\")  \n    # Date and time fields:\n    date_published = fields.Date()\n    last_borrow_date = fields.Datetime(\n        \"Last Borrowed On\",\n         default=lambda self: fields.Datetime.now()) \n    # Other fields:\n    active = fields.Boolean(\"Active?\")\n    image = fields.Binary(\"Cover\") \n    # Relational Fields\n    publisher_id = fields.Many2one(\n        \"res.partner\", string=\"Publisher\")\n    author_ids = fields.Many2many(\n        \"res.partner\", string=\"Authors\")\n```", "```py\n    name = fields.Char(\n        \"Title\",\n        default=None,\n        help=\"Book cover title.\",\n        readonly=False,\n        required=True,\n        index=True,\n        copy=False,\n        deprecated=True,\n        groups=\"\",\n        states={},\n    )\n```", "```py\n    last_borrow_date = fields.Datetime(\n        \"Last Borrowed On\",\n        default=lambda self: fields.Datetime.now(),\n    )\n```", "```py\n    def _default_last_borrow_date(self):\n        return fields.Datetime.now()\n    last_borrow_date = fields.Datetime(\n        \"Last Borrowed On\",\n        default=_default_last_borrow_date,\n    )\n```", "```py\n    last_borrow_date = fields.Datetime(\n        \"Last Borrowed On\",\n        default=\"_default_last_borrow_date\",\n    ) \n    def _default_last_borrow_date(self):\n        return fields.Datetime.now()\n```", "```py\n        publisher_id = fields.Many2one(\n            \"res.partner\", \"Publisher\")\n```", "```py\nfrom odoo import fields, models\nclass Partner(models.Model):\n    _inherit = \"res.partner\"\npublished_book_ids = fields.One2many(\n        \"library.book\",\n        \"publisher_id\",\n        string=\"Published Books\")\n```", "```py\nfrom . import library_book\nfrom . import res_partner\n```", "```py\nclass Book(models.Model)\n    _name = \"library.book\"\n    author_ids = fields.Many2many(\n        \"res.partner\",\n        string=\"Authors\")\n```", "```py\nclass Partner(models.Model): \n    _inherit = \"res.partner\"\n    book_ids = fields.Many2many(\n        \"library.book\",\n        string=\"Authored Books\")\n```", "```py\n# Book <-> Authors relation (using positional args)\nauthor_ids = fields.Many2many( \n    \"res.partner\",\n    \"library_book_res_partner_rel\",\n    \"a_id\",\n    \"b_id\",\n    \"Authors\")\n```", "```py\n# Book <-> Authors relation (using keyword args)\nauthor_ids = fields.Many2many(\n    comodel_name=\"res.partner\", \n    relation=\"library_book_res_partner_rel\",\n    column1=\"a_id\",\n    column2=\"b_id\",\n    string=\"Authors\")\n```", "```py\nfrom odoo import api, fields, models\nclass BookCategory(models.Model):\n    _name = \"library.book.category\"\n    _description = \"Book Category\"\n    _parent_store = True\n    name = fields.Char(translate=True, required=True)\n    # Hierarchy fields\n    parent_id = fields.Many2one(\n        \"library.book.category\",\n        \"Parent Category\",\n        ondelete=\"restrict\")\n    parent_path = fields.Char(index=True)\n    # Optional, but nice to have:\n    child_ids = fields.One2many(\n        \"library.book.category\",\n\"parent_id\",\n        \"Subcategories\")\n```", "```py\nfrom . import library_book_category\nfrom . import library_book\nfrom . import res_partner\n```", "```py\n    highlighted_id = fields.Reference(\n        [(\"library.book\", \"Book\"), (\"res.partner\",\n           \"Author\")],\n        \"Category Highlight\",\n    )\n```", "```py\n    publisher_country_id = fields.Many2one(\n        \"res.country\", string=\"Publisher Country\",\n        compute=\"_compute_publisher_country\",\n    )\n    @api.depends(\"publisher_id.country_id\")\n    def _compute_publisher_country(self):\n        for book in self:\nbook.publisher_country_id = \n              book.publisher_id.country_id\n```", "```py\n    publisher_country_id = fields.Many2one(\n        \"res.country\",\n        string=\"Publisher Country\",\n        compute=\"_compute_publisher_country\",\n        inverse=\"_inverse_publisher_country\",\n        search=\"_search_publisher_country\",\n    )\n```", "```py\n    def _inverse_publisher_country(self):\n        for book in self:\n            book.publisher_id.country_id = \n              book.publisher_country_id\n```", "```py\n    def _search_publisher_country(self, operator, value):\n       return [\n            (\"publisher_id.country_id\", operator, value)\n        ]\n\"\n```", "```py\n    publisher_country_id = fields.Many2one(\n        \"res.country\",\n        string=\"Publisher Country\",\n        related=\"publisher_id.country_id\",\n    )\n```", "```py\n    _sql_constraints = [\n        (\"library_book_name_date_uq\",\n         \"UNIQUE (name, date_published)\",\n        \"Title and publication date must be unique.\"),\n        (\"library_book_check_date\",\n         \"CHECK (date_published <= current_date)\",\n         \"Publication date must not be in the future.\"),\n    ]\n```", "```py\nfrom odoo.exceptions import ValidationError\n```", "```py\n    @api.constrains(\"isbn\")\n    def _constrain_isbn_valid(self):\n        for book in self:\n            if book.isbn and not book._check_isbn():\n                raise ValidationError(\n                    \"%s is an invalid ISBN\" % book.isbn)\n```"]