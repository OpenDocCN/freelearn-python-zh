- en: Chapter 2. Configuring a Test Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 配置测试项目
- en: 'In this chapter, exclusive focus is on the structure and files contained in
    test. The topic has already been touched upon briefly in the first chapter, but
    a closer look at them would help set the background for further exploration as
    tests are the most important feature of the Robot Framework. The following major
    topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于测试的结构和包含的文件。这个主题已经在第一章中简要提及，但更深入地了解它们将有助于为进一步的探索奠定基础，因为测试是Robot Framework最重要的特性。本章将涵盖以下主要内容：
- en: Creating a Robot Framework test file and a testsuite.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Robot Framework测试文件和测试套件。
- en: Understanding differences in syntax across different file formats used in configuration.
    Gaining knowledge about the different configuration files.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解在不同文件格式配置中的语法差异。了解不同的配置文件。
- en: Understanding and utilizing setup and teardown operations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和利用设置和清理操作
- en: Increasing automation through test re-use
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过测试重用提高自动化程度
- en: We will start by explaining, what a test is and how it can be defined. Different
    type of tests and common naming conventions along with examples will be explained
    thereafter. Test file structure and their supported formats will be understood
    by the end of the chapter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先解释什么是测试以及如何定义它。接下来将解释不同类型的测试和常见的命名规范，并附上示例。到本章结束时，我们将理解测试文件的结构和它们支持的格式。
- en: The Robot Framework makes it very easy to change the test configuration used
    in a project once the project has properly been set up. However, it is best to
    understand what tests really are, and how should they be organized before diving
    deep into specific implementation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目被正确设置，Robot Framework使得更改项目中使用的测试配置变得非常容易。然而，在深入具体实现之前，最好理解测试到底是什么，以及应该如何组织它们。
- en: Similar to the development of conventional software, tests can either be created
    in top-down manner with the big picture upfront or a bottoms-up approach, where
    the tests are created first and integrated later.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统软件开发类似，测试可以以自顶向下的方式创建，先有整体视图，或者以自底向上的方式创建，先创建测试，然后集成。
- en: In the Robot Framework, you are encouraged to follow the top-down approach where
    the test structure is created first, before creating and writing down the actual
    implementation. While this is not enforced, it is useful towards writing big and
    sustainable tests and is the recommended way of creating a test.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Robot Framework中，鼓励遵循自顶向下的方法，即首先创建测试结构，然后再创建和记录实际的实现。虽然这不是强制性的，但对于编写大型且可持续的测试很有用，并且是创建测试的推荐方式。
- en: Tests are organized in a tree-style structure that consists of testsuite, testcase,
    and testaction. This convention has been followed in most of the structured testing
    and is a widely followed convention. A testsuite is a collection of different
    tests and other testsuites, and provides a logical unit for a set to perform tests.
    A testcase is a complete test for a particular task. A testaction is the smallest
    element in any test and is atomic in nature, which only validates a given condition.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 测试以树状结构组织，包括测试套件、测试用例和测试操作。这种规范在大多数结构化测试中都被遵循，并且是一个广泛遵循的规范。测试套件是一组不同的测试和其他测试套件，为执行测试提供逻辑单元。测试用例是对特定任务的完整测试。测试操作是任何测试中最小的元素，在本质上具有原子性，它仅验证给定条件。
- en: Test naming conventions
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试命名规范
- en: Test naming conventions are important for the standardization and coherence
    of the tests. It also indicative of the quality of tests as the naming and placement
    of tests; and the use case scenarios indicate their order and relevance, which
    can be very useful when the tests are maintained in future.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 测试命名规范对于测试的标准化和一致性至关重要。它也反映了测试的质量，因为测试的命名和位置；以及用例场景表明了它们的顺序和相关性，这在未来维护测试时非常有用。
- en: Creating an execution order
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建执行顺序
- en: In order to name tests, the Robot Framework is very peculiar; it uses the configuration
    file and folder names to determine the execution order and test naming.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了命名测试，Robot Framework非常独特；它使用配置文件和文件夹名称来确定执行顺序和测试命名。
- en: 'For example, consider the following arrangement of different test files and
    folders in the test project in the file system:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下在文件系统中测试项目中不同测试文件和文件夹的排列：
- en: application/
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: application/
- en: '`tests/`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`tests/`'
- en: '`Test1.txt`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`Test1.txt`'
- en: '`Other tests/`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Other tests/`'
- en: '`Another test.txt`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`Another test.txt`'
- en: 'Running the pybot in the application folder will result in creation of different
    testsuites in the report based on the order of their presence in the file system.
    The following screenshot shows the file structure of a Robot Framework test:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序文件夹中运行 pybot 将根据它们在文件系统中的存在顺序在报告中创建不同的测试套件。以下屏幕截图显示了 Robot Framework 测试的文件结构：
- en: '![Creating an execution order](img/3033OS_02_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![创建执行顺序](img/3033OS_02_01.jpg)'
- en: 'After running, the tree command lists out the file/folder hierarchy. Here,
    the Robot Framework will infer the test hierarchy, group the tests, and nest test
    suites in form of files and folders. From this example, you can observe the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 运行后，tree 命令列出文件/文件夹层次结构。在这里，Robot Framework 将推断测试层次结构，将测试分组，并以文件和文件夹的形式嵌套测试套件。从这个例子中，你可以观察到以下内容：
- en: The `testsuites` folder will be the root test suite.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testsuites` 文件夹将是根测试套件。'
- en: The folders such as `1__first_test` beneath the `testsuites` folder will act
    as nested test suites.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `testsuites` 文件夹下如 `1__first_test` 这样的文件夹将作为嵌套测试套件。
- en: The test files contained within these folders will be the further nested test
    suites.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些文件夹中包含的测试文件将是进一步嵌套的测试套件。
- en: 'For example, tests contained in `testsuites/2__different_file_formats/2__a_tsv_file_test.txt`
    will be nested, which can better be explained from the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，包含在 `testsuites/2__different_file_formats/2__a_tsv_file_test.txt` 中的测试将被嵌套，这可以从以下屏幕截图中得到更好的解释：
- en: '![Creating an execution order](img/3033OS_02_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![创建执行顺序](img/3033OS_02_02.jpg)'
- en: Test suite hierarchy is detailed in the log file. In order to organize the results,
    it is important to ensure proper naming. So, instead of using spaces, underscore
    "_" should be used (as demonstrated in the preceding example).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试套件层次结构在日志文件中详细说明。为了组织结果，确保适当的命名很重要。因此，而不是使用空格，应使用下划线 "_"（如前例所示）。
- en: In order to get proper ordering irrespective of the test names, prefixing the
    test configuration with numbers can be done.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了在不考虑测试名称的情况下获得正确的顺序，可以在测试配置前加上数字。
- en: Test randomization
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试随机化
- en: 'Sometimes, there may be requirement to explicitly disregard the execution order
    and run tests in random order. In that case, you can use the randomize option
    in the pybot command. This has the following options:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，可能需要明确忽略执行顺序并随机运行测试。在这种情况下，可以在 pybot 命令中使用随机化选项。此选项有以下几种：
- en: 'To randomize all the test suites as well as the tests contained within them:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要随机化所有测试套件以及它们包含的测试：
- en: '[PRE0]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To randomize suites without affecting the tests contained within the lowest
    level suite:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要随机化套件而不影响最低级套件中包含的测试：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To randomize only the tests within the suites, the suite execution order is
    unchanged:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要仅随机化套件中的测试，套件执行顺序保持不变：
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To remove any randomization, if set in the command line:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在命令行中设置，要移除任何随机化：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The command arguments are read from left to right, and randomize option can
    come more than once.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令参数从左到右读取，随机化选项可以多次出现。
- en: 'In case of applying proper naming conventions like the following example, the
    example''s test hierarchy will result in more understandable tests and the execution
    order of the tests can be easily predetermined. You can now easily infer the order
    of execution and hierarchy that will be present in the following order:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用适当的命名约定，如以下示例所示，示例的测试层次结构将导致更易于理解的测试，并且测试的执行顺序可以轻松预知。现在你可以轻松推断出以下顺序的执行顺序和层次结构：
- en: '`application/`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`application/`'
- en: '`testsuites/`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`testsuites/`'
- en: '`1__Software_initialization.txt`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`1__Software_initialization.txt`'
- en: '`2__main_screen_checks.txt`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`2__main_screen_checks.txt`'
- en: '`3__test_aux_controls/`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`3__test_aux_controls/`'
- en: '`1__check_user_details.txt`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`1__check_user_details.txt`'
- en: '`2__check_aux_control.txt`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`2__check_aux_control.txt`'
- en: '`4__check_values/`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`4__check_values/`'
- en: '`1__primary_values.txt`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`1__primary_values.txt`'
- en: '`2__footer.txt`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`2__footer.txt`'
- en: '`3__links_to_other_controls.txt`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`3__links_to_other_controls.txt`'
- en: '`....`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`....`'
- en: It is noteworthy that the only exception to this naming rule is in form of initialization
    files, which are named as `__init__` followed by the extension as used in other
    test files. As there is only one `init` file per folder, it is clear that such
    a file contains information about its folder and the information contained in
    it pertains to the test suite itself.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，此命名规则的唯一例外是初始化文件，其命名方式为 `__init__` 后跟其他测试文件中使用的扩展名。由于每个文件夹只有一个 `init`
    文件，因此可以清楚地看出此类文件包含有关其文件夹的信息，以及其中包含的信息与测试套件本身相关。
- en: Test file structure
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试文件结构
- en: 'So far, it has been demonstrated that whitespaces play an important role in
    configuration files. The test configuration is written in a tabular format with
    each column having separate elements such as test element. The Robot Framework
    allows flexibility in specifying the separations among the different columns in
    a test file as well as supporting different formats for the test files, which
    you can choose at your discretion. Note that depending upon the file extension;
    a suitable parser is selected during runtime. Some of the supported formats are
    as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，已经证明空白字符在配置文件中起着重要的作用。测试配置以表格格式编写，每个列包含不同的元素，例如测试元素。Robot Framework 允许在测试文件中指定不同列之间的分隔具有灵活性，同时也支持不同的测试文件格式，您可以根据自己的意愿选择。请注意，根据文件扩展名，在运行时选择合适的解析器。以下是一些支持的格式：
- en: HTML
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML
- en: TSV
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TSV
- en: Plaintext
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯文本
- en: Piped text
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道文本
- en: RestructuredText
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RestructuredText
- en: HTML format
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML格式
- en: 'In an HTML format, the HTML is read, which comprises of different tables for
    different portions of the test configuration. For each table, the first heading
    element is read and based on this information; the rest of the table is understood.
    A word of caution! Any data that is outside the recognized table is discarded.
    You can understand this better with the help of following example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML格式中，读取HTML，它包含不同部分的测试配置的不同表格。对于每个表格，读取第一个标题元素，并根据此信息理解表格的其余部分。请注意！任何位于已识别表格之外的数据都将被丢弃。您可以通过以下示例更好地理解这一点：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)，并注册以直接将文件通过电子邮件发送给您。
- en: Note that in the first column of table heading denotes the table name and it
    decides the subsequent execution of all elements contained in that table. This
    is followed by other headings that signify the position and order of other data.
    The rest of table contents populate the desired information in the specified order.
    Here, instead of delimiting the data by two spaces, it is present in different
    columns of the table. This method needs most overhead and verbose metadata, but
    the tests are very viewer-friendly and confusion of how much space to keep is
    also reduced as you can view these files easily in web browsers as well as edit
    in HTML editors.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在表格标题的第一列表示表名，它决定了该表中包含的所有元素的后续执行。随后是其他标题，表示其他数据的位量和顺序。表格的其余内容按照指定顺序填充所需信息。在这里，数据不是通过两个空格分隔，而是存在于表格的不同列中。这种方法需要最多的开销和冗长的元数据，但测试非常易于查看，并且减少了关于保持多少空格的混淆，因为您可以在网页浏览器中轻松查看这些文件，也可以在HTML编辑器中编辑。
- en: TSV format
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TSV格式
- en: In the tab separated value format, one can specify the different columns by
    passing the values separated by single tabs. One of the astounding features of
    this format is that it can be opened in any spreadsheet application, which gives
    you and other users greater control over the test configuration files. If the
    text editor in use supports viewing of whitespace (spaces and tabs), then it is
    a good idea to enable it in order to keep the tab separated test without any errors,
    as users can invariably mix the two, causing the tests to malfunction. Another
    appropriate way to create and maintain these tests is to use the spreadsheet application
    alone, which will reduce the chances of corrupting the test. On a spreadsheet
    (as shown in the following screenshot), the test file is more natural and intuitive
    to use as the columns are properly differentiated. If you are having prior experience
    in developing spreadsheet solutions but are new to the Robot Framework, your learning
    curve is considerably reduced and you may feel at ease while writing and maintaining
    tests in spreadsheets, which can also be formatted for better visibility and ease
    of use.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在制表符分隔值格式中，可以通过传递由单个制表符分隔的值来指定不同的列。这种格式的令人惊叹的特性之一是它可以在任何电子表格应用程序中打开，这为您和其他用户提供了对测试配置文件的更大控制。如果正在使用的文本编辑器支持查看空白（空格和制表符），那么启用它是一个好主意，以便在没有错误的情况下保持制表符分隔的测试，因为用户不可避免地会混合两者，导致测试出现故障。创建和维护这些测试的另一种适当方法是仅使用电子表格应用程序，这会降低损坏测试的机会。在电子表格中（如下面的截图所示），测试文件的使用更加自然和直观，因为列被正确区分。如果您在开发电子表格解决方案方面有经验，但对Robot
    Framework却很陌生，那么您的学习曲线将大大降低，您在编写和维护电子表格中的测试时可能会感到更加自在，这些测试也可以格式化以增强可见性和易用性。
- en: '![TSV format](img/3033OS_02_03.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![TSV格式](img/3033OS_02_03.jpg)'
- en: Plaintext format
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 明文格式
- en: If test configuration file display is not an issue, then plaintext file is the
    best option as it is most readable and contains much less metadata, which makes
    version control easier. This method is the most widely used in this framework.
    However, you have to take care to ensure that the elements are properly separated
    and the column elements are delimited by two whitespace characters. If the arguments
    used in tests are small and have limited columns, then this is the appropriate
    display format. The syntax and placement of the elements in this way first require
    some acclimatization, but it becomes easier to create and modify test cases in
    this format as you do not need anything apart from a text editor for creating
    and updating the tests. Since the whitespaces need to be at least two or more,
    there is no way that more than a single empty column can be left in place. This
    might not seem problematic, but is quite handy, especially in situations where
    there is a need to provide for explicit whitespace separation for more than a
    single column.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试配置文件显示不是问题，那么明文文件是最佳选择，因为它最易读，并且包含的元数据很少，这使得版本控制更容易。这种方法在此框架中应用最广泛。然而，你必须注意确保元素被正确分隔，并且列元素由两个空白字符分隔。如果测试中使用的参数数量少且列数有限，那么这是合适的显示格式。以这种方式排列元素的语言和位置首先需要一些适应，但随着你对这种格式的使用，创建和修改测试用例会变得更容易，因为你不需要除了文本编辑器之外的其他东西来创建和更新测试。由于空白至少需要两个或更多，因此不可能留下多于一个空列。这看起来可能不是问题，但实际上非常方便，尤其是在需要为多个列提供显式空白分隔的情况下。
- en: Pipe-separated format
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道分隔格式
- en: 'Very closely resembling the previous format is the pipe separated format that
    uses pipe characters within the document to delimit the different columns. This
    is used where different lines contain varying number of arguments that are hard
    to spot. Consider the following snippet of a test:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的格式非常相似的是管道分隔格式，它在文档中使用管道字符来分隔不同的列。这用于不同行包含不同数量参数的情况，这些参数难以识别。考虑以下测试片段：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The verbosity of the test, in this case, makes it harder to read and understand
    the test. Even worse, if someone is modifying it, he can introduce errors by accident.
    For instance, the documentation has been updated as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，测试的冗长性使得阅读和理解测试变得更加困难。更糟糕的是，如果有人正在修改它，他可能会意外地引入错误。例如，文档已按以下方式更新：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you observe the whitespace at the end of `[Documentation]`, there is only
    a single space, which clubs both the `Documentation` keyword and its argument
    into one and the Robot Framework cannot understand this, causing it to fail.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您观察`[Documentation]`末尾的空白，只有一个空格，这会将`Documentation`关键字及其参数合并为一个，Robot Framework无法理解这一点，导致其失败。
- en: 'In order to rectify in the same text file itself, the Robot Framework offers
    the flexibility to use a pipe symbol ( `|` ) instead of two spaces. Barring the
    first character of line, this symbol is surrounded by spaces on both sides, so
    the preceding test becomes:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在同一个文本文件中纠正这个问题，Robot Framework提供了使用管道符号（`|`）而不是两个空格的灵活性。除了行的第一个字符外，此符号在两侧都由空格包围，因此前面的测试变为：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is more readable as the columns are now separated by the pipe. Note that
    the ending pipe at third line is not present as placement of pipe at the end of
    last column at any line is optional. If required within any column as a normal
    text, the pipe can be escaped using the backspace character. The escape string
    being (`\|`). Another advantage that this format offers over the plaintext format
    is that multiple columns can explicitly be declared empty and the test can still
    run correctly. This coupled with specific placement of the text in exactly the
    desired columns leads to creation of tests having very specific structure. Pipelines
    are also required to nest test structure in the presence of loops within the tests,
    which is similar to the indentation found in Python programming but is impossible
    in the Robot Framework as more than two whitespaces do not constitute an empty
    column or an indent in the test code (more on this later while discussing iteration
    within tests).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于列现在由管道符号分隔，因此这种格式更易于阅读。请注意，第三行的结束管道符号不存在，因为在任何行的最后一列的管道符号位置是可选的。如果需要在任何列中作为普通文本，可以使用退格字符来转义管道符号。转义字符串为（`\|`）。此格式相对于纯文本格式提供的另一个优点是，可以明确声明多个列为空，并且测试仍然可以正确运行。这与在特定列中精确放置文本相结合，导致创建具有非常特定结构的测试。在测试中存在循环的情况下，还需要管道符号来嵌套测试结构，这与Python编程中发现的缩进类似，但在Robot
    Framework中不可能，因为超过两个空格不构成空列或缩进（关于测试中的迭代将在稍后讨论）。
- en: Restructured text format
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新结构化文本格式
- en: The **ReStructuredText** (**reST**) text format is familiar with any Python
    developer as it is used in Python documentation. It is a plaintext based markup
    that can easily be used to create highly formatted documents, tables, and so on
    using only a simple text file and a predefined set of markers. The advantage that
    it offers is very lesser metadata is used and the file contains majority of text
    that can easily be version controller, edited, differentiated, and well as searched.
    The rest mark-up offers advantages of both the HTML as well as plaintext file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**ReStructuredText**（**reST**）文本格式对任何Python开发者来说都很熟悉，因为它用于Python文档。它是一种基于纯文本的标记，可以使用简单的文本文件和预定义的标记集轻松创建高度格式化的文档、表格等。它提供的优势是使用的元数据非常少，文件包含大部分文本，可以轻松地进行版本控制、编辑、区分以及搜索。rest标记提供了HTML和纯文本文件的优势。'
- en: Similar to the HTML format, the test data is defined within tables and the Robot
    Framework looks up for the first element of the table to determine whether or
    not the table is a valid test table and, if this is correct, then its type is
    determined and the rest of the elements are processed accordingly. In this format,
    empty cells in the first column need to have a `\` or a `..` symbol.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 与HTML格式类似，测试数据是在表格中定义的，Robot Framework会查找表格的第一个元素以确定该表格是否为有效的测试表格，如果是正确的，则确定其类型，并相应地处理其余元素。在此格式中，第一列中的空单元格需要有一个`\`或一个`..`符号。
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As tools to process rest markup are part of the docutils project, you will need
    to have Python docutils module installed in the Python instance that is executing
    the tests. The Robot Framework internally converts the rest files into HTML documents
    and in case of problems with this format; other tools can be used to convert rest
    structured documents into HTML, which can be used to run the tests.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于处理rest标记的工具是docutils项目的一部分，因此您需要在执行测试的Python实例中安装Python docutils模块。Robot Framework内部将rest文件转换为HTML文档，如果此格式存在问题，则可以使用其他工具将rest结构化文档转换为HTML，这可以用于运行测试。
- en: This is the flexibility of the Robot Framework, which allows you to have different
    file formats and structures. There is more to such flexibility in the style of
    writing tests, which will be covered in further chapters.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Robot Framework的灵活性，允许您拥有不同的文件格式和结构。在测试编写风格方面的这种灵活性还有更多内容，将在后续章节中介绍。
- en: Test configuration files
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试配置文件
- en: As mentioned before, the tests are stored in files and are clubbed in folders
    that act as test suite for the files. A test file can contain different sections,
    which can optionally be moved into other files dedicated specifically towards
    the work of that particular section. Thus reducing the length and complexity of
    the actual test file, which is helpful if the test size is very large.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，测试存储在文件中，并组合在文件夹中，这些文件夹充当测试套件。一个测试文件可以包含不同的部分，这些部分可以可选地移动到其他文件中，专门针对该特定部分的工作。这样，可以减少实际测试文件的长度和复杂性，这对于测试大小非常大时非常有帮助。
- en: 'The test configuration files apart from the actual test files and folders are:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实际的测试文件和文件夹之外，测试配置文件还包括：
- en: Suite initialization files
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 套件初始化文件
- en: A folder in the Robot Framework denotes a test suite for all the files and subfolders
    contained in it. As there is no way to specify metadata of the test suite except
    for the folder name, there is a provision for special files that pertain to the
    folder in which they are placed. As with specifying a directory as a module in
    Python, initialization files have to be named as `__init__` and their extension
    can be any valid extensions allowed by the Robot Framework. The format of these
    files is the same as test case files, but apart from few exceptions, the test
    case options are not allowed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework中的一个文件夹表示包含其所有文件和子文件夹的测试套件。由于除了文件夹名称外没有其他方式可以指定测试套件的元数据，因此为放置在其中的文件夹提供了特殊文件。与将目录指定为Python模块一样，初始化文件必须命名为`__init__`，并且它们的扩展名可以是Robot
    Framework允许的任何有效扩展名。这些文件的格式与测试用例文件相同，但除了少数例外，不允许使用测试用例选项。
- en: The configuration specified here overlaps with the allowable configuration in
    test case files as well in case of defining tags, setup, and teardown actions
    as well as test case timeouts. However, the changes overridden in these files
    are applicable to the entire test suite in which this initialization file exists.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义标签、设置、清理操作以及测试用例超时的情况下，这里指定的配置与测试用例文件中允许的配置重叠。然而，这些文件中覆盖的更改适用于包含此初始化文件的整个测试套件。
- en: 'One setting that deserves a considerable mention is the presence of suite `setup`
    and `teardown`. These only get executed once before and after the execution of
    all the tests present in the given test suite as well as in any sub-test suites
    as well. Also, if there are any sub test suites within the test suite, then the
    initialization files of these will be run likewise too. An example for this could
    be as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，套件`setup`和`teardown`的存在。这些只在给定测试套件以及任何子测试套件中的所有测试执行之前和之后执行一次。此外，如果测试套件中有任何子测试套件，则这些初始化文件也将以同样的方式运行。以下是一个示例：
- en: '`| Setting | Value | Value |`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`| 设置 | 值 | 值 |`'
- en: '`| Documentation | suite init file |`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`| 文档 | 套件初始化文件 |`'
- en: '`| Suite Setup | Log | This is the setup method for the entire suite |`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`| 套件设置 | 记录 | 这是整个套件的设置方法 |`'
- en: '`| Force Tags | example |`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`| 强制标签 | example |`'
- en: '`| Suite Teardown | Log | This suite has ended |`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`| 套件清理 | 记录 | 此套件已结束 |`'
- en: External variable files
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外部变量文件
- en: These are the files that contain the variables used in the test cases. The main
    purpose of specifying the variables in an external file is to follow the **DRY**
    (**Don't Repeat Yourself**) principle to minimize duplication as well as make
    changes into the variables at a single place without changing the rest of the
    test. These files provide the variables that they create to other files that require
    variable information, which is different from the variable section of the test,
    or the variable table which is only applicable for the test case in which it is
    defined.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件包含测试用例中使用的变量。在外部文件中指定变量的主要目的是遵循**DRY**（**不要重复自己**）原则，以最小化重复，并可以在不更改测试其余部分的情况下，在单个位置更改变量。这些文件提供的变量被创建为其他需要变量信息的文件，这与测试的变量部分不同，或者与仅适用于定义的测试用例的变量表不同。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that variable names are case-sensitive. In order to differentiate between
    variables and other keywords, keep in mind that generally the variables are kept
    in uppercase but there is no such rule.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，变量名是区分大小写的。为了区分变量和其他关键字，请记住，通常变量使用大写字母，但并没有这样的规则。
- en: The variables are defined as `${Variable Name}` for normal, single-valued variables
    and as `@{Variable Name}` for a variable containing a list of different values.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 变量定义为 `${变量名}` 用于普通、单值变量，以及定义为 `@{变量名}` 用于包含不同值列表的变量。
- en: In a test configuration file, when only the variable table is specified, then
    the test file becomes a variable file and on its usage, only the table starting
    with variables will be considered.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试配置文件中，当只指定变量表时，测试文件变为变量文件，并且在其使用时，只有以变量开始的表将被考虑。
- en: Structure
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构
- en: 'A variable file can typically store a large amount and type of variables. For
    example a variable file can have the following structure that declares various
    types of variables:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 变量文件通常可以存储大量和不同类型的变量。例如，变量文件可以具有以下结构，声明各种类型的变量：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Python/Java files containing variables
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包含变量的 Python/Java 文件
- en: The variables can also be created in a Python or a Java file as in certain cases
    a Python or a Java class might need to save some dynamic data value at runtime,
    which can be passed to the tests in need. Only restrictive thing is that the python
    class name should be the same as its module and the Java class must not be in
    any kind of package. The easiest way to do this is to place the Python/ Java source
    in the same location as the test file itself (but is not recommended if you are
    having a separate application or a large number of tests/scripts). If you need
    to refer some value from external service or application, then the source file
    used can be referred to populate its variables which can be used in the tests.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 变量也可以在 Python 或 Java 文件中创建，因为在某些情况下，Python 或 Java 类可能需要在运行时保存一些动态数据值，这些值可以传递给需要测试的测试。唯一限制性的是，Python
    类名应与其模块相同，Java 类不得在任何类型的包中。最简单的方法是将 Python/Java 源文件放置在与测试文件相同的目录中（但如果您有一个独立的应用程序或大量测试/脚本，则不建议这样做）。如果您需要从外部服务或应用程序引用某些值，则可以引用用于填充其变量的源文件，这些变量可以在测试中使用。
- en: 'For instance, a hash can be set/modified as variable in the Python file as:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 Python 文件中，哈希可以设置为/修改为变量，如下所示：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And in a Java file it can be modified as:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 文件中，它也可以被修改如下：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Also, it can be used in the tests as:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它也可以在测试中使用，例如：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Just as with any other variable defined in the test itself the variables specified
    in these programs can be used.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在测试本身中定义的任何其他变量一样，这些程序中指定的变量也可以使用。
- en: In a similar manner, there is a provision for getting variables from a special
    function in the Python/Java code as `get_variables`/`getVariables`. The variables
    have to be prefixed with `LIST` keyword failing, which they will be assumed as
    scalars and can only have a single value.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，Python/Java 代码中的特殊函数提供了从 `get_variables`/`getVariables` 获取变量的功能。变量必须以
    `LIST` 关键字为前缀，否则它们将被假定是标量，并且只能有一个值。
- en: Tip
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The variables as well as function setting these variable are visible to the
    Robot Framework tests if they have default or higher scope in the classes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果变量及其设置这些变量的函数在类中有默认或更高的作用域，它们对 Robot Framework 测试是可见的。
- en: While the variable defined in Java is usable only with Jython runtime, one can
    use the Python file in any Robot Framework runtime, as all runtimes basically
    descend from Python.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Java 中定义的变量只能与 Jython 运行时一起使用，但可以使用 Python 文件在任何 Robot Framework 运行时中，因为所有运行时基本上都源自
    Python。
- en: 'To use the variables present in a resource file into a test case, variables
    keyword followed by the absolute or relative path to the variable file (the `.class`
    or `.py` as the case may be) can be given. And the variables defined in the variable
    file can be used as they were defined in the variables table within the file itself
    like the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要将资源文件中存在的变量用于测试用例，可以给出变量关键字后跟变量文件的绝对或相对路径（根据情况，可以是 `.class` 或 `.py` 文件），并且可以在文件本身内部的变量表中像定义变量一样使用这些变量，如下所示：
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Resource files
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源文件
- en: Resource files are necessity when there is need to save the variable data as
    well as higher level user keywords. The term user keyword will be explained in
    this book later on, but it is suffice to say that a user keyword is basically
    a keyword that is not present in any library but in the same file or an external
    resource file.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要保存变量数据以及高级用户关键字时，资源文件是必需的。用户关键字的术语将在本书后面解释，但可以说，用户关键字基本上是一个不在任何库中而是在同一文件或外部资源文件中的关键字。
- en: Structure
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构
- en: The resource file cannot have test cases. Apart from this, it is the same as
    the test case file. In the actual test case file, this file will have to be imported
    by the name of Resource under the settings table. After specifying the resource,
    the file path has to be submitted, which can be absolute or relative to the test
    case in question.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 资源文件不能包含测试用例。除此之外，它与测试用例文件相同。在实际的测试用例文件中，此文件必须通过设置表中的“资源”名称导入。指定资源后，必须提交文件路径，可以是相对于测试用例的绝对路径或相对路径。
- en: 'As mentioned, the resource files specify the variables and custom user keywords,
    so it contain the tables for the variable definition and keyword definition along
    with the settings table that can allow for import of some external library as
    the user keywords might be there to act as an alias for some external library.
    An example of resource file can be as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，资源文件指定了变量和自定义用户关键字，因此它包含变量定义表和关键字定义表，以及可以允许导入某些外部库的设置表，因为用户关键字可能作为某些外部库的别名。以下是一个资源文件的示例：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The creation of keywords adds to the available syntax in the tests and inside
    the test file, this can easily be used.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字的创建增加了测试中可用的语法，并在测试文件内部可以轻松使用。
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Test setup and teardown
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试设置和拆卸
- en: During testing, there is a need for performing certain tasks that have to be
    carried out at specific times during the execution of the tests. These operations
    are typically carried out before and after the tests. These are known as test
    setup and teardown (often known as pre-conditions and post-condition) and are
    present universally across different structured tests, such as unit, functional,
    and even acceptance testing.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试过程中，需要在测试执行期间特定时间执行某些任务。这些操作通常在测试前后进行。这些被称为测试设置和拆卸（通常称为前置条件和后置条件），它们在结构化测试中普遍存在，例如单元测试、功能测试，甚至是验收测试。
- en: A test setup occurs before the beginning of a test and a test teardown occurs
    after the execution of a test. It is worth mentioning that a test teardown runs
    after the test irrespective of whether it is a success or a failure. The only
    condition when it will not execute is the unconditional termination of the test,
    which occurs during a test error. These portions of test contain pre-conditions
    needed for tests such as opening of the web browser to a particular page, setting
    up a database connection and so on. And when the test gets completed, closing
    the opened connections, browsers, or resources and ensuring any further operation
    do not carry any repercussions of the actions undertaken during the tests.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 测试设置发生在测试开始之前，测试拆卸发生在测试执行之后。值得注意的是，无论测试成功还是失败，测试拆卸都会在测试之后运行。唯一不会执行的条件是测试的无条件终止，这发生在测试错误期间。这些测试部分包含测试所需的预条件，例如打开特定网页的网页浏览器、设置数据库连接等。当测试完成后，关闭打开的连接、浏览器或资源，并确保任何后续操作都不会带来测试期间采取行动的任何后果。
- en: 'Role of setup/teardown in automated testing are as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 设置/拆卸在自动化测试中的作用如下：
- en: Setup Test Environment
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置测试环境
- en: Create test environment
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建测试环境
- en: Load initial test data
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载初始测试数据
- en: Repeat for each test
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对每个测试重复
- en: Set up individual test requirements
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置单个测试要求
- en: Perform operations and assert conditions
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行操作并断言条件
- en: Clean up resources used for test
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理用于测试的资源
- en: Summarize/save useful information
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总结/保存有用信息
- en: Restore environment state to its initial condition
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复环境状态到初始条件
- en: Analysis of the test execution
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试执行分析
- en: The setup and teardown operations can be applied to both test as well as test
    suite level. It is not applicable within the tests. If there is a need to insert
    it between different statements in the tests, there are chances that the tests
    are not written correctly and the test structure needs to be relooked and refactored
    into smaller tests and parameterized according to the requirements pertain to
    stories for individual tests.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 设置和销毁操作可以应用于测试以及测试套件级别。它不适用于测试内部。如果需要在测试中的不同语句之间插入它，那么可能意味着测试编写不正确，并且需要重新审视和重构测试结构，将其分解成更小的测试，并根据与单个测试相关的需求进行参数化。
- en: 'Being a robust framework in itself, the Robot Framework offers the capabilities
    of using these operations under both test suites as well as individual tests.
    For test suite, one can use the initialization file and for individual tests.
    The settings table in the test file itself can be utilized that can contain test
    setup and test teardown settings or even inside the test case itself in form of
    setup and teardown action. Using `None` after specifying a condition signifies
    that particular operation is not possible. A brief overview of some feature is
    provided as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 作为自身的一个强大框架，Robot Framework提供了在测试套件以及单个测试中使用这些操作的能力。对于测试套件，可以使用初始化文件；对于单个测试，可以利用测试文件本身的设置表，其中可以包含设置和销毁设置，甚至可以在测试用例本身中以设置和销毁操作的形式存在。指定条件后使用`None`表示该特定操作不可行。以下是一些功能的简要概述：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The test setup and teardown thus offer a way for us to take the repetitive portions
    of tests at a single place and do not repeat same set of instructions all over
    the place, thus setting up scene for test automation and re-use through test parameterization.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，测试设置和销毁提供了一种方法，使我们能够将测试的重复部分集中在一个地方，从而避免在各个地方重复相同的指令集，为通过测试参数化实现测试自动化和重用创造了条件。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, various files involved in the Robot Framework test creation
    and configuration together with the test naming conventions for different components
    such as, test suite, test case, and test action were discussed and the execution
    order management was detailed. As the test file format is quite different from
    any other test, it was exhaustively discussed as well. The use of variables as
    well as extra files are also discussed as these promote test code re-use and separate
    the test contents. Finally, the test environment management through test setup
    and teardown was discussed, which is essential if the tests require any prior
    dependency.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，讨论了涉及Robot Framework测试创建和配置的各种文件，以及不同组件（如测试套件、测试用例和测试操作）的测试命名约定。同时详细介绍了执行顺序管理。由于测试文件格式与其他任何测试都相当不同，因此也进行了详尽的讨论。还讨论了变量的使用以及额外文件的使用，因为这些可以促进测试代码的重用并分离测试内容。最后，讨论了通过设置和销毁操作进行测试环境管理，这对于测试需要任何先决依赖项是必不可少的。
- en: This serves as the groundwork for further work over the framework and as the
    basic syntaxes mentioned here are covered, the test automation and re-use will
    be discussed in the next chapter that continues from the work that has been covered
    here in order to automate and re-use existing tests.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这为在框架上进一步工作奠定了基础，并且随着这里提到的基本语法的覆盖，下一章将讨论测试自动化和重用，该章节将继续在这里所涵盖的工作，以自动化和重用现有测试。
