["```py\n\nelif litV[0]   == '%': literal = int(litV[1:],2)     # If first % convert binary to integer\nelif litV[0:2] == '0B':literal = int(litV[2:],2)     # If prefix 0B convert binary to integer\nelif litV[0:1] == '$': literal = int(litV[1:],16)    # If $, convert hex string to integer\nelif litV[0:2] == '0X':literal = int(litV[2:],16)    # If 0x convert hex string to integer\n```", "```py\n\nHello. Input operations in the form 23 * 4\\. Type E to end.\nType first number 12\nType operator + or - or / or * +\nType second number 7\nResult =  19\nType first number 15\nType operator + or - or / or * -\nType second number 8\nResult =  7\nType first number 55\nType operator + or - or / or * /\nType second number 5\nResult =  11\nType first number 2\nType operator + or - or / or * E\nProgram ended\n```", "```py\n\nX1 = a + b    Addition\nX2 = a – b    Subtraction\nX3 = a * b    Multiplication\nX4 = a / b    Division\n```", "```py\n\ntotalPopulation = 8024\n```", "```py\n\ntotalPopulation = totalPopulation + 24\n```", "```py\n\nhours = 12           # Set the value of the variable hours to 12\n```", "```py\nallTime = hours + 3    # Add 3 to the hours and assign a result to a new variable, allTime\n```", "```py\n\nradius = 2.5                # Define the radius as 2.5\npi = 3.142                  # Define the value of pi\narea = pi*radius*radius     # Calculate the area of a circle\nprint(area)                 # The print function prints the value of the area on the display\n```", "```py\n\nwagesFred = hoursWorkedFred*12 + hourOvertimeFred*18\n```", "```py\n\nn = int(input(\"How many integers are you adding? \"))\ns = n * (n + 1)/2\nprint(\"Sum of \",n, \" integers is\",s)    # We used double quotes \" instead of single\n```", "```py\n\nmyTest = [63, 67, 70, 90, 71, 83, 70, 76]\n```", "```py\n\nroomTemps = [15,17,14,23,22,19]                       # A list of six integers\nwords     = ['this', 'that', 'then']                  # A list of three strings\nx47       = [x21,timeSlot,oldValue]                   # A list of three variables\nopCodes   = [['add',3,4],['jmp',12,1],['stop',0,0]]   # A list of three lists\nmixedUp   = [15,time,'test',x[4]]                     # A list of mixed elements\n```", "```py\ninputs    = []                                        # An empty list\n```", "```py\n\nveg1 = ['potatoes', 'onions', 'tomatoes']         # A list of three strings\n```", "```py\n\nopClass = 4                      # Define opClass\naddOp   = ['add', opClass]       # A list with an instruction name and its class\n```", "```py\n\ntoBuy = len(veg1)    # Determine the length of list veg1 (number of items in it)\n```", "```py\n\nq = 'abcdefgh'\nprint(len(q))\n```", "```py\n\nfruit1 = ['apples', 'oranges', 'grapes', 'bananas']\n```", "```py\n\ntotalShopping = len(veg1) + len(fruit1)\n```", "```py\n\nprint('Number of things to buy ', totalShopping)\n```", "```py\nThings to buy 7\n```", "```py\n\nTotal items to buy 7 These are: ['apples', 'oranges', 'grapes', 'bananas']\n```", "```py\n\nfruit1 = ['apples', 'oranges', 'grapes', 'bananas']\nprint('Fruit1 as list = ', fruit1)\nfruit1 = (' ').join(fruit1)                # This function joins the individual strings\nprint('Fruit1 as string = ', fruit1)\n```", "```py\n\nFruit1 as list =  ['apples', 'oranges', 'grapes', 'bananas']\nFruit1 as string =  apples oranges grapes bananas\n```", "```py\n\nz = 9                        # Set z to 9\nif x > 5: z = 20           # If x is greater than 5, then make the value of z equal to 20.\n```", "```py\n\nif condition: action         # The colon is mandatory, and indicates the end of the condition\n```", "```py\n\ncold = 15                        # Define the temperature at which we turn on the heater\nhot = 25                         # The temperature at which we turn on the cooler\nnowTemp = getTemp()              # getTemp() is a function that reads the thermometer\nif nowTemp < cold: heat(on)      # If too cold, then turn on the heater\nif nowTemp > hot:  cool(on)      # If too hot, then turn on the cooler\nif nowTemp > cold: heat(off)     # If not cold, then turn off the heater\nif nowTemp < hot:  cool(off)     # If not hot, then turn off the cooler\n```", "```py\n\nx == y\nx != y\nx >  y\nx <  y\n```", "```py\n\n>>> x = 3\n>>> y = 4\n>>> x == y\nFalse\n>>> x + 1 == y\nTrue\n```", "```py\n\nif x < 5: y = 0\nif x > 4 and x < 8: y = 1    # A compound test. Is x greater than 4 AND x is less than 8\nif x > 7: y = 2\n```", "```py\nif (x > 4 and x < 8) or (z == 5): y = 1\n```", "```py\n\nx =  0 y =  0\nx =  1 y =  0\nx =  2 y =  0\nx =  3 y =  0\nx =  4 y =  0\nx =  5 y =  1\nx =  6 y =  1\nx =  7 y =  1\nx =  8 y =  2\nx =  9 y =  2\n```", "```py\n\nif   x < 5:          # Is x less than 5?\n     y = 0           # If x is less than 5, then y = 0\nelse:\n```", "```py\n     y = 3           # otherwise, y is 3\n```", "```py\n\nif   x < 5:                # Is x less than 5?\n     y = 0                 # If x is less than 5, then y = 0\nelif x > 4 and x < 8:      # If x is not less than 5, test whether it's between 5 and 7\n     y = 1                 # If x is between 5 and 7, then set y to 1\nelif x > 7:                # If both previous tests fail, then test whether x is 8 or more\n     y = 2\nprint('x and y ', x, y)\n```", "```py\n\nlookup  = [0,0,0,0,0,1,1,1,2,2,2]      # Create a lookup table\ny = lookup[x]                          # Read the value of y from the lookup table\n```", "```py\n\nmyFile = 'E:/simPython/c.txt'          # This is my source text file on my computer\nwith open(myFile,'r') as sFile:        # Open the file for reading (indicated by 'r')\n    newFile = sFile.readlines()        # Read the code and copy to newFile.\n```", "```py\n\nopen('thisFile')                       # Open a file\nopen('thatFile', 'r')                  # Open a file for reading\nopen('thatFile', 'w')                  # Open a file for writing\n```", "```py\n\n#                                               # Test reading a file\nwith open(\"E:\\simPython.txt\",'r') as example:   # Open the file for reading\n    theText = example.readlines()               # Read the file example\nprint('The source file ',theText)               # Display the file\nfor i in range(0,len(theText)):                 # This loop scans the file\n    theText[i] = theText[i].rstrip()            # rstrip() removes end-of-file markers\nprint('The source file ',theText)\n```", "```py\n\n%Run testRead.py\nThe source file  ['# test file\\n', 'NOP\\n', ' LDRL 5\\n', ' NOP\\n', 'STOP']\nThe source file  ['# test file', 'NOP', ' LDRL 5', ' NOP', 'STOP']\n```", "```py\n\n# Simple algorithm to detect consecutive tokens\nmaxRed = int(input(\"How many red tokens are you looking for? \"))\ngo = 1\nnumRed = 0\nwhile go == 1:\n    y = input(\"Which token is it? Red or white? \")\n    if y == 'w': numRed = 0\n    else:        numRed = numRed + 1\n    if numRed == maxRed: go = 0\n```", "```py\nprint(maxRed, \"Reds found\")\n```", "```py\n\nHow many red tokens are you looking for? 3\nWhich token is it? Red or white? r\nWhich token is it? Red or white? r\nWhich token is it? Red or white? w\nWhich token is it? Red or white? r\nWhich token is it? Red or white? w\nWhich token is it? Red or white? w\nWhich token is it? Red or white? w\nWhich token is it? Red or white? r\nWhich token is it? Red or white? r\nWhich token is it? Red or white? r\n3 Reds found\n```", "```py\n\nfriends = ['John', 'Jenny', 'Rumpelstiltskin']\n```", "```py\n\na.    [20] = 5\nb.    [20] ← 6\nc.    [20] ← [6]\nd.    [12] ← [3] + 4\ne.    [19] ← [7] + [8]\nf.    [4] ← [[2]]\n```", "```py\n\nmem = [0,0,0,0,0,0,0,0]         # Create 8-location memory. All locations set to zero\n```", "```py\n\nmem = [0]*128                   # Create memory with 128 locations, all set to 0\n```", "```py\n\nmem[3] ← 4                      # Load location 3 with 4\\. Note this is RTL not Python\nmem[5] ← 9                      # Load location 5 with 9\nsum    ← mem[3] + mem[5]        # Add contents of locations 3 and  5, and put result in sum\nmem[6] ← sum                    # Store sum in location 6\n```", "```py\n\nmem = [0]*8                     # Create memory with 8 locations, all set to 0\\. This is Python\nmem[3] = 4                      # Load location 3 with 4\nmem[5] = 9                      # Load location 5 with 9\nsum    = mem[3] + mem[5]        # Add locations 3 and 5 and assign result to sum\nmem[6] = sum                    # Store sum in location 6\nprint('mem[6] =', mem[6])       # Print contents of location 6\nprint('Memory =', mem)          # Print all memory locations\n```", "```py\n\nmem[mem[0]]← mem[mem[1]] + mem[mem[2]]\n```", "```py\n\n[[0]]← [[1]] + [[2]]\n```", "```py\n\nmem = [7,5,4,0,3,9,0,0]           # Preset the memory. Unspecified locations are set to 0\npointer0 = mem[0]                 # Get pointer 0 to result\npointer1 = mem[1]                 # Get pointer 1 to source 1\npointer2 = mem[2]                 # Get pointer 2 to source 2\nsource1  = mem[pointer1]          # Get source data 1\nsource2  = mem[pointer2]          # Get source data 2\nresult   = source1 + source2      # Do the addition\nmem[pointer0] = result            # Store result at the location pointed at by pointer 0\nprint('Memory =', mem)            # Print all memory locations\n```"]