["```py\nhttp POST :5000/api/categories/ name='Information'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Information\"}'\n    :5000/api/categories/\n\n```", "```py\nHTTP/1.0 400 BAD REQUEST\nContent-Length: 282\nContent-Type: application/json\nDate: Mon, 15 Aug 2016 03:53:27 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"error\": \"(psycopg2.IntegrityError) duplicate key value violates unique\n         constraint \"category_name_key\"\\nDETAIL:  Key (name)=(Information)\n         already exists.\\n [SQL: 'INSERT INTO category (name) VALUES (%(name)s)\n         RETURNING category.id'] [parameters: {'name': 'Information'}]\"\n}\n\n```", "```py\n    @classmethod \n    def is_unique(cls, id, name): \n        existing_category = cls.query.filter_by(name=name).first() \n        if existing_category is None: \n            return True \n        else: \n            if existing_category.id == id: \n                return True \n            else: \n                return False \n\n```", "```py\n    def post(self): \n        request_dict = request.get_json() \n        if not request_dict: \n            resp = {'message': 'No input data provided'} \n            return resp, status.HTTP_400_BAD_REQUEST \n        errors = category_schema.validate(request_dict) \n        if errors: \n            return errors, status.HTTP_400_BAD_REQUEST \n        category_name = request_dict['name'] \n        if not Category.is_unique(id=0, name=category_name): \n            response = {'error': 'A category with the same name already exists'} \n            return response, status.HTTP_400_BAD_REQUEST \n        try:  \n            category = Category(category_name) \n            category.add(category) \n            query = Category.query.get(category.id) \n            result = category_schema.dump(query).data \n            return result, status.HTTP_201_CREATED \n            except SQLAlchemyError as e: \n            db.session.rollback() \n            resp = {\"error\": str(e)} \n            return resp, status.HTTP_400_BAD_REQUEST \n\n```", "```py\n    def patch(self, id): \n        category = Category.query.get_or_404(id) \n        category_dict = request.get_json() \n        if not category_dict: \n            resp = {'message': 'No input data provided'} \n            return resp, status.HTTP_400_BAD_REQUEST \n        errors = category_schema.validate(category_dict) \n        if errors: \n            return errors, status.HTTP_400_BAD_REQUEST \n        try: \n            if 'name' in category_dict: \n                category_name = category_dict['name']  \n                if Category.is_unique(id=id, name=category_name): \n                    category.name = category_name \n                else: \n                    response = {'error': 'A category with the same name already\n exists'} \n                    return response, status.HTTP_400_BAD_REQUEST \n            category.update() \n            return self.get(id) \n                except SQLAlchemyError as e: \n                db.session.rollback() \n                resp = {\"error\": str(e)} \n                return resp, status.HTTP_400_BAD_REQUEST \n\n```", "```py\nhttp POST :5000/api/categories/ name='Information'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Information\"}'\n    :5000/api/categories/\n\n```", "```py\nHTTP/1.0 400 BAD REQUEST\nContent-Length: 64\nContent-Type: application/json\nDate: Mon, 15 Aug 2016 04:38:43 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"error\": \"A category with the same name already exists\"\n}\n\n```", "```py\n    @classmethod \n    def is_unique(cls, id, message): \n        existing_message = cls.query.filter_by(message=message).first() \n        if existing_message is None: \n            return True \n        else: \n            if existing_message.id == id: \n                return True \n            else: \n                return False \n\n```", "```py\n    def post(self): \n        request_dict = request.get_json() \n        if not request_dict: \n            response = {'message': 'No input data provided'} \n            return response, status.HTTP_400_BAD_REQUEST \n        errors = message_schema.validate(request_dict) \n        if errors: \n            return errors, status.HTTP_400_BAD_REQUEST \n        message_message = request_dict['message'] \n        if not Message.is_unique(id=0, message=message_message): \n            response = {'error': 'A message with the same message already\n exists'} \n            return response, status.HTTP_400_BAD_REQUEST \n        try: \n            category_name = request_dict['category']['name'] \n            category = Category.query.filter_by(name=category_name).first() \n            if category is None: \n                # Create a new Category \n                category = Category(name=category_name) \n                db.session.add(category) \n            # Now that we are sure we have a category \n            # create a new Message \n            message = Message( \n                message=message_message, \n                duration=request_dict['duration'], \n                category=category) \n            message.add(message) \n            query = Message.query.get(message.id) \n            result = message_schema.dump(query).data \n            return result, status.HTTP_201_CREATED \n        except SQLAlchemyError as e: \n            db.session.rollback() \n            resp = {\"error\": str(e)} \n            return resp, status.HTTP_400_BAD_REQUEST \n\n```", "```py\n    def patch(self, id): \n        message = Message.query.get_or_404(id) \n        message_dict = request.get_json(force=True) \n        if 'message' in message_dict: \n            message_message = message_dict['message']  \n            if Message.is_unique(id=id, message=message_message): \n                message.message = message_message \n            else: \n                response = {'error': 'A message with the same message already\n exists'} \n                return response, status.HTTP_400_BAD_REQUEST \n        if 'duration' in message_dict: \n            message.duration = message_dict['duration'] \n        if 'printed_times' in message_dict: \n            message.printed_times = message_dict['printed_times'] \n        if 'printed_once' in message_dict: \n            message.printed_once = message_dict['printed_once'] \n        dumped_message, dump_errors = message_schema.dump(message) \n        if dump_errors: \n            return dump_errors, status.HTTP_400_BAD_REQUEST \n        validate_errors = message_schema.validate(dumped_message) \n        if validate_errors: \n            return validate_errors, status.HTTP_400_BAD_REQUEST \n        try: \n            message.update() \n            return self.get(id) \n        except SQLAlchemyError as e: \n                db.session.rollback() \n                resp = {\"error\": str(e)} \n                return resp, status.HTTP_400_BAD_REQUEST \n\n```", "```py\nhttp POST :5000/api/messages/ message='Checking temperature sensor' duration=25 category=\"Information\"\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Checking temperature sensor\", \"duration\":25, \"category\": \"Information\"}' :5000/api/messages/\n\n```", "```py\nHTTP/1.0 400 BAD REQUEST\nContent-Length: 66\nContent-Type: application/json\nDate: Mon, 15 Aug 2016 04:55:46 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"error\": \"A message with the same message already exists\"\n}\n\n```", "```py\nhttp PATCH :5000/api/messages/1 printed_once=true printed_times=1\n\n```", "```py\ncurl -iX PATCH -H \"Content-Type: application/json\" -d '{\"printed_once\":\"true\", \"printed_times\":1}' :5000/api/messages/1\n\n```", "```py\n{ \n    \"printed_once\": true, \n    \"printed_times\": 1 \n} \n\n```", "```py\nHTTP/1.0 200 OK\nContent-Length: 368\nContent-Type: application/json\nDate: Tue, 09 Aug 2016 22:38:39 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-08T12:18:43.260474+00:00\", \n \"duration\": 5, \n \"id\": 1, \n \"message\": \"Checking temperature sensor\", \n \"printed_once\": true, \n \"printed_times\": 1, \n \"url\": \"http://localhost:5000/api/messages/1\"\n}\n\n```", "```py\nhttp POST :5000/api/messages/ message='Initializing light controller' duration=25 category=\"Information\"\nhttp POST :5000/api/messages/ message='Initializing light sensor' duration=20 category=\"Information\"\nhttp POST :5000/api/messages/ message='Checking pressure sensor' duration=18 category=\"Information\"\nhttp POST :5000/api/messages/ message='Checking gas sensor' duration=14 category=\"Information\"\nhttp POST :5000/api/messages/ message='Setting ADC resolution' duration=22 category=\"Information\"\nhttp POST :5000/api/messages/ message='Setting sample rate' duration=15 category=\"Information\"\nhttp POST :5000/api/messages/ message='Initializing pressure sensor' duration=18 category=\"Information\"\nhttp POST :5000/api/messages/ message='Initializing gas sensor' duration=16 category=\"Information\"\nhttp POST :5000/api/messages/ message='Initializing proximity sensor' duration=5 category=\"Information\"\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\" Initializing light controller\", \"duration\":25, \"category\": \"Information\"}' :5000/api/messages/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Initializing light sensor\", \"duration\":20, \"category\": \"Information\"}' :5000/api/messages/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Checking pressure sensor\", \"duration\":18, \"category\": \"Information\"}' :5000/api/messages/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Checking gas sensor\", \"duration\":14, \"category\": \"Information\"}' :5000/api/messages/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Setting ADC resolution\", \"duration\":22, \"category\": \"Information\"}' :5000/api/messages/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Setting sample rate\", \"duration\":15, \"category\": \"Information\"}' :5000/api/messages/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Initializing pressure sensor\", \"duration\":18, \"category\": \"Information\"}' :5000/api/messages/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Initializing gas sensor\", \"duration\":16, \"category\": \"Information\"}' :5000/api/messages/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Initializing proximity sensor\", \"duration\":5, \"category\": \"Information\"}' :5000/api/messages/\n\n```", "```py\nPAGINATION_PAGE_SIZE = 5 \nPAGINATION_PAGE_ARGUMENT_NAME = 'page' \n\n```", "```py\nfrom flask import url_for \nfrom flask import current_app \n\nclass PaginationHelper(): \n    def __init__(self, request, query, resource_for_url, key_name, schema): \n        self.request = request \n        self.query = query \n        self.resource_for_url = resource_for_url \n        self.key_name = key_name \n        self.schema = schema \n        self.results_per_page = current_app.config['PAGINATION_PAGE_SIZE'] \n        self.page_argument_name =\n        current_app.config['PAGINATION_PAGE_ARGUMENT_NAME'] \n\n    def paginate_query(self): \n        # If no page number is specified, we assume the request wants page #1 \n        page_number = self.request.args.get(self.page_argument_name, 1, type=int) \n        paginated_objects = self.query.paginate( \n            page_number, \n            per_page=self.results_per_page, \n            error_out=False) \n        objects = paginated_objects.items \n        if paginated_objects.has_prev: \n            previous_page_url = url_for( \n                self.resource_for_url,  \n                page=page_number-1,  \n                _external=True) \n        else: \n            previous_page_url = None \n        if paginated_objects.has_next: \n            next_page_url = url_for( \n                self.resource_for_url, \n                page=page_number+1, \n                _external=True) \n        else: \n            next_page_url = None \n        dumped_objects = self.schema.dump(objects, many=True).data \n        return ({ \n            self.key_name: dumped_objects, \n            'previous': previous_page_url, \n            'next': next_page_url, \n            'count': paginated_objects.total \n        }) \n\n```", "```py\nfrom helpers import PaginationHelper \n\nclass MessageListResource(Resource): \n    def get(self): \n        pagination_helper = PaginationHelper( \n            request, \n            query=Message.query, \n            resource_for_url='api.messagelistresource', \n            key_name='results', \n            schema=message_schema) \n        result = pagination_helper.paginate_query() \n        return result\n\n```", "```py\nhttp :5000/api/messages/\n\n```", "```py\ncurl -iX GET :5000/api/messages/\n\n```", "```py\nHTTP/1.0 200 OK\nContent-Length: 2521\nContent-Type: application/json\nDate: Wed, 10 Aug 2016 18:26:44 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"count\": 12, \n \"results\": [\n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-08T12:27:30.124511+00:00\", \n \"duration\": 8, \n \"id\": 2, \n \"message\": \"Checking light sensor\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/2\"\n }, \n {\n \"category\": {\n \"id\": 3, \n \"name\": \"Error\", \n \"url\": \"http://localhost:5000/api/categories/3\"\n }, \n \"creation_date\": \"2016-08-08T14:20:22.103752+00:00\", \n \"duration\": 10, \n \"id\": 3, \n \"message\": \"Temperature sensor error\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/3\"\n }, \n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-08T12:18:43.260474+00:00\", \n \"duration\": 5, \n \"id\": 1, \n \"message\": \"Checking temperature sensor\", \n \"printed_once\": true, \n \"printed_times\": 1, \n \"url\": \"http://localhost:5000/api/messages/1\"\n }, \n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-09T20:18:26.648071+00:00\", \n \"duration\": 25, \n \"id\": 4, \n \"message\": \"Initializing light controller\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/4\"\n }, \n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-09T20:19:16.174807+00:00\", \n \"duration\": 20, \n \"id\": 5, \n \"message\": \"Initializing light sensor\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/5\"\n }\n ], \n \"next\": \"http://localhost:5000/api/messages/?page=2\", \n \"previous\": null\n}\n\n```", "```py\nhttp ':5000/api/messages/?page=1'\n\n```", "```py\ncurl -iX GET ':5000/api/messages/?page=1'\n\n```", "```py\nhttp ':5000/api/messages/?page=2'\n\n```", "```py\ncurl -iX GET ':5000/api/messages/?page=2'\n\n```", "```py\nHTTP/1.0 200 OK\nContent-Length: 2557\nContent-Type: application/json\nDate: Wed, 10 Aug 2016 19:51:50 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"count\": 12, \n \"next\": \"http://localhost:5000/api/messages/?page=3\", \n \"previous\": \"http://localhost:5000/api/messages/?page=1\", \n \"results\": [\n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-09T20:19:22.335600+00:00\", \n \"duration\": 18, \n \"id\": 6, \n \"message\": \"Checking pressure sensor\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/6\"\n }, \n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-09T20:19:26.189009+00:00\", \n \"duration\": 14, \n \"id\": 7, \n \"message\": \"Checking gas sensor\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/7\"\n }, \n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-09T20:19:29.854576+00:00\", \n \"duration\": 22, \n \"id\": 8, \n \"message\": \"Setting ADC resolution\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/8\"\n }, \n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-09T20:19:33.838977+00:00\", \n \"duration\": 15, \n \"id\": 9, \n \"message\": \"Setting sample rate\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/9\"\n }, \n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-09T20:19:37.830843+00:00\", \n \"duration\": 18, \n \"id\": 10, \n \"message\": \"Initializing pressure sensor\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/10\"\n }\n ]\n}\n\n```", "```py\nhttp ':5000/api/messages/?page=3'\n\n```", "```py\ncurl -iX GET ':5000/api/messages/?page=3'\n\n```", "```py\nHTTP/1.0 200 OK\nContent-Length: 1090\nContent-Type: application/json\nDate: Wed, 10 Aug 2016 20:02:00 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"count\": 12, \n \"next\": null, \n \"previous\": \"http://localhost:5000/api/messages/?page=2\", \n \"results\": [\n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-09T20:19:41.645628+00:00\", \n \"duration\": 16, \n \"id\": 11, \n \"message\": \"Initializing gas sensor\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/11\"\n }, \n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-09T20:19:45.304391+00:00\", \n \"duration\": 5, \n \"id\": 12, \n \"message\": \"Initializing proximity sensor\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/12\"\n }\n ]\n}\n\n```", "```py\npip install Flask-HTTPAuth\n\n```", "```py\nInstalling collected packages: Flask-HTTPAuth\n Running setup.py install for Flask-HTTPAuth\nSuccessfully installed Flask-HTTPAuth-3.2.1\n\n```", "```py\npip install passlib\n\n```", "```py\nInstalling collected packages: passlib\nSuccessfully installed passlib-1.6.5\n\n```", "```py\nfrom passlib.apps import custom_app_context as password_context \nimport re \n\nclass User(db.Model, AddUpdateDelete): \n    id = db.Column(db.Integer, primary_key=True) \n    name = db.Column(db.String(50), unique=True, nullable=False) \n    # I save the hashed password \n    hashed_password = db.Column(db.String(120), nullable=False) \n    creation_date = db.Column(db.TIMESTAMP, server_default=db.func.current_timestamp(), nullable=False) \n\n    def verify_password(self, password): \n        return password_context.verify(password, self.hashed_password) \n\n    def check_password_strength_and_hash_if_ok(self, password): \n        if len(password) < 8: \n            return 'The password is too short', False \n        if len(password) > 32: \n            return 'The password is too long', False \n        if re.search(r'[A-Z]', password) is None: \n            return 'The password must include at least one uppercase letter',\n            False \n        if re.search(r'[a-z]', password) is None: \n            return 'The password must include at least one lowercase letter',\n            False \n        if re.search(r'\\d', password) is None: \n            return 'The password must include at least one number', False \n        if re.search(r\"[ !#$%&'()*+,-./[\\\\\\]^_`{|}~\"+r'\"]', password) is None: \n            return 'The password must include at least one symbol', False \n        self.hashed_password = password_context.encrypt(password) \n        return '', True \n\n    def __init__(self, name): \n        self.name = name \n\n```", "```py\nclass UserSchema(ma.Schema): \n    id = fields.Integer(dump_only=True) \n    name = fields.String(required=True, validate=validate.Length(3)) \n    url = ma.URLFor('api.userresource', id='<id>', _external=True) \n\n```", "```py\nfrom flask_httpauth import HTTPBasicAuth \nfrom flask import g \nfrom models import User, UserSchema \n\nauth = HTTPBasicAuth() \n\n@auth.verify_password \ndef verify_user_password(name, password): \n    user = User.query.filter_by(name=name).first() \n    if not user or not user.verify_password(password): \n        return False \n    g.user = user \n    return True \n\nclass AuthRequiredResource(Resource): \n    method_decorators = [auth.login_required] \n\n```", "```py\nclass MessageResource(Resource): \nclass MessageListResource(Resource): \nclass CategoryResource(Resource): \nclass CategoryListResource(Resource): \n\n```", "```py\nclass MessageResource(AuthRequiredResource): \nclass MessageListResource(AuthRequiredResource): \nclass CategoryResource(AuthRequiredResource): \nclass CategoryListResource(AuthRequiredResource): \n\n```", "```py\nclass UserResource(AuthRequiredResource): \n    def get(self, id): \n        user = User.query.get_or_404(id) \n        result = user_schema.dump(user).data \n        return result \n\n```", "```py\nclass UserListResource(Resource): \n    @auth.login_required \n    def get(self): \n        pagination_helper = PaginationHelper( \n            request, \n            query=User.query, \n            resource_for_url='api.userlistresource', \n            key_name='results', \n            schema=user_schema) \n        result = pagination_helper.paginate_query() \n        return result \n\n    def post(self): \n        request_dict = request.get_json() \n        if not request_dict: \n            response = {'user': 'No input data provided'} \n            return response, status.HTTP_400_BAD_REQUEST \n        errors = user_schema.validate(request_dict) \n        if errors: \n            return errors, status.HTTP_400_BAD_REQUEST \n        name = request_dict['name'] \n        existing_user = User.query.filter_by(name=name).first() \n        if existing_user is not None: \n            response = {'user': 'An user with the same name already exists'} \n            return response, status.HTTP_400_BAD_REQUEST \n        try: \n            user = User(name=name) \n            error_message, password_ok = \\ \n                user.check_password_strength_and_hash_if_ok(request_dict['password']) \n            if password_ok: \n                user.add(user) \n                query = User.query.get(user.id) \n                result = user_schema.dump(query).data \n                return result, status.HTTP_201_CREATED \n            else: \n                return {\"error\": error_message}, status.HTTP_400_BAD_REQUEST \n        except SQLAlchemyError as e: \n            db.session.rollback() \n            resp = {\"error\": str(e)} \n            return resp, status.HTTP_400_BAD_REQUEST \n\n```", "```py\napi.add_resource(UserListResource, '/users/') \napi.add_resource(UserResource, '/users/<int:id>') \n\n```", "```py\npython migrate.py db migrate\n\n```", "```py\nINFO [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO [alembic.runtime.migration] Will assume transactional DDL.\nINFO [alembic.autogenerate.compare] Detected added table 'user'\nINFO [alembic.ddl.postgresql] Detected sequence named 'message_id_seq' as owned by integer column 'message(id)', assuming SERIAL and omitting\nGenerating\n /Users/gaston/PythonREST/Flask02/api/migrations/versions/c8c45e615f6d_.py ... done\n\n```", "```py\n\"\"\"empty message \n\nRevision ID: c8c45e615f6d \nRevises: 417543056ac3 \nCreate Date: 2016-08-11 17:31:44.989313 \n\n\"\"\" \n\n# revision identifiers, used by Alembic. \nrevision = 'c8c45e615f6d' \ndown_revision = '417543056ac3' \n\nfrom alembic import op \nimport sqlalchemy as sa \n\ndef upgrade(): \n    ### commands auto generated by Alembic - please adjust! ### \n    op.create_table('user', \n    sa.Column('id', sa.Integer(), nullable=False), \n    sa.Column('name', sa.String(length=50), nullable=False), \n    sa.Column('hashed_password', sa.String(length=120), nullable=False), \n    sa.Column('creation_date', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), \n    sa.PrimaryKeyConstraint('id'), \n    sa.UniqueConstraint('name') \n    ) \n    ### end Alembic commands ### \n\ndef downgrade(): \n    ### commands auto generated by Alembic - please adjust! ### \n    op.drop_table('user') \n    ### end Alembic commands ### \n\n```", "```py\npython migrate.py db upgrade\n\n```", "```py\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade 417543056ac3 ->\n    c8c45e615f6d, empty message\n\n```", "```py\npsql --username=user_name --dbname=messages --command=\"\\dt\"\n\n```", "```py\n **List of relations** \n **Schema |      Name       | Type  |   Owner** \n **--------+-----------------+-------+-----------** \n **public | alembic_version | table | user_name** \n **public | category        | table | user_name** \n **public | message         | table | user_name** \n **public | user            | table | user_name** \n(4 rows)\n\n```", "```py\npsql --username=user_name --dbname=messages --command=\"SELECT * FROM\n    public.user;\"\n\n```", "```py\npython run.py\n\n```", "```py\nhttp POST ':5000/api/messages/?page=1'\n\n```", "```py\ncurl -iX GET ':5000/api/messages/?page=1'\n\n```", "```py\nHTTP/1.0 401 UNAUTHORIZED\nContent-Length: 19\nContent-Type: text/html; charset=utf-8\nDate: Mon, 15 Aug 2016 01:16:36 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\nWWW-Authenticate: Basic realm=\"Authentication Required\"\n\n```", "```py\nhttp POST :5000/api/users/ name='brandon' password='brandonpassword'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\": \"brandon\",\n    \"password\": \"brandonpassword\"}' :5000/api/users/\n\n```", "```py\nHTTP/1.0 400 BAD REQUEST \nContent-Length: 75 \nContent-Type: application/json \nDate: Mon, 15 Aug 2016 01:29:55 GMT \nServer: Werkzeug/0.11.10 Python/3.5.1 \n\n{ \n    \"error\": \"The password must include at least one uppercase letter\" \n} \n\n```", "```py\nhttp POST :5000/api/users/ name='brandon' password='iA4!V3riS#c^R9'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\": \"brandon\", \"password\": \"iA4!V3riS#c^R9\"}' :5000/api/users/\n\n```", "```py\nHTTP/1.0 201 CREATED\nContent-Length: 87\nContent-Type: application/json\nDate: Mon, 15 Aug 2016 01:33:23 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"id\": 1, \n \"name\": \"brandon\", \n \"url\": \"http://localhost:5000/api/users/1\"\n}\n\n```", "```py\nhttp -a 'brandon':'iA4!V3riS#c^R9' ':5000/api/messages/?page=1'\n\n```", "```py\ncurl --user 'brandon':'iA4!V3riS#c^R9' -iX GET ':5000/api/messages/?page=1'\n\n```"]