- en: '[*Chapter 7*](B16119_07_Final_PD_ePub.xhtml#_idTextAnchor194): Recordsets –
    Working with Model Data'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第 7 章*](B16119_07_Final_PD_ePub.xhtml#_idTextAnchor194)：记录集 – 与模型数据交互'
- en: In the previous chapters, we gave an overview of model creation and loading
    data into models. Now that we have a data model and some data to work with, it's
    time to learn more about how to programmatically interact with it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们概述了模型创建和将数据加载到模型中的过程。现在我们已经有了数据模型和一些可以操作的数据，是时候学习如何以编程方式与之交互了。
- en: A business application needs business logic to compute data, perform validations,
    or automate operations. The **Odoo** framework API provides the tools for a developer
    to implement this business logic. Most of the time, this means querying, transforming,
    and writing data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个商业应用程序需要业务逻辑来计算数据、执行验证或自动化操作。**Odoo** 框架 API 为开发者提供了实现这种业务逻辑的工具。大多数情况下，这意味着查询、转换和写入数据。
- en: Odoo implements an **Object-Relational Mapping** (**ORM**) layer on top of the
    lower level database. The ORM objects provide the **Application Programming Interface**
    (**API**) to be used to interact with the data. This API provides an execution
    environment and the creation of **recordsets**, that are objects used to work
    the data stored in the database.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 在底层数据库之上实现了一个 **对象关系映射**（**ORM**）层。ORM 对象提供了 **应用程序编程接口**（**API**），用于与数据交互。此
    API 提供了执行环境和创建 **记录集**，这些是用于操作数据库中存储的数据的对象。
- en: This chapter explains how to use the execution environment and recordsets so
    that you have all the tools needed to implement the business processes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了如何使用执行环境和记录集，以便你拥有实现业务流程所需的所有工具。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using the shell command to interactively explore the ORM API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 shell 命令交互式探索 ORM API
- en: Understanding the execution environment and context
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解执行环境和上下文
- en: Querying data using recordsets and domains
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用记录集和域查询数据
- en: Accessing data in recordsets
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问记录集中的数据
- en: Writing to records
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向记录写入
- en: Working with date and time
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与日期和时间交互
- en: Working with recordsets
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与记录集交互
- en: Transactions and low-level SQL
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务和低级 SQL
- en: By the end of this chapter, you should be able to use Odoo code to perform all
    of these actions, and you will also be ready to use these tools to implement your
    own business processes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够使用 Odoo 代码执行所有这些操作，并且你也将准备好使用这些工具来实现你自己的业务流程。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code examples in this chapter will be executed in an interactive shell and
    do not require any code from the previous chapters. A copy of the code can be
    found in the `ch07/ch07_recorsets_code.py` file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码示例将在交互式 shell 中执行，不需要前几章中的任何代码。代码的副本可以在 `ch07/ch07_recorsets_code.py`
    文件中找到。
- en: Using the shell command
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 shell 命令
- en: '`shell` command option. These commands can be executed interactively to better
    understand how they work.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`shell` 命令选项。这些命令可以交互式执行，以更好地理解它们的工作方式。'
- en: 'To use it, add the `shell` command when starting Odoo, plus any Odoo options
    that we would usually use when starting Odoo:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，请在启动 Odoo 时添加 `shell` 命令以及我们通常在启动 Odoo 时使用的任何 Odoo 选项：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will initiate the usual server startup sequence in the terminal, but instead
    of launching an HTTP server listening for requests, it will start a Python prompt
    waiting for input.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在终端中启动通常的服务器启动序列，但不会启动一个监听请求的 HTTP 服务器，而是启动一个等待输入的 Python 提示符。
- en: This interactive command interface simulates the environment found inside a
    `class` method, running under the `OdooBot` superuser. The `self` variable is
    available and is set to the `OdooBot` superuser record object.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个交互式命令接口模拟了在 `class` 方法内部找到的环境，在 `OdooBot` 超级用户下运行。`self` 变量可用，并设置为 `OdooBot`
    超级用户记录对象。
- en: 'For example, these commands inspect the `self` recordset:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下命令检查 `self` 记录集：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous commands print out the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令打印出以下内容：
- en: The `self` variable contains a `res.users` recordset containing a record with
    `ID 1`.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self` 变量包含一个 `res.users` 记录集，其中包含一个 `ID 1` 的记录。'
- en: The recordset model name, inspecting `self._name`, is `res.users`, as expected.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 `self._name` 的记录集模型名称是 `res.users`，正如预期的那样。
- en: The value for the record `name` field is `OdooBot`.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录字段 `name` 的值为 `OdooBot`。
- en: The value for the record `login` field is `__system__`.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录字段 `login` 的值为 `__system__`。
- en: Changes in Odoo 12
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Odoo 12 的变化
- en: The `ID 1` superuser changed from `admin` to the internal `__system__` user.
    The `admin` user is now the `ID 2` user, and not a superuser, although the Odoo
    standard apps are careful to automatically grant it full access to them. The main
    reason for this change was to avoid having users perform day-to-day activities
    with the superuser account. Doing so is dangerous because this change bypasses
    all access rules and may cause inconsistent data, such as cross-company relationships.
    It's now meant to be used only for troubleshooting or very specific cross-company
    operations.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ID 1` 超级用户从 `admin` 更改为内部的 `__system__` 用户。`admin` 用户现在是 `ID 2` 用户，不再是超级用户，尽管
    Odoo 标准应用程序会小心地自动授予它对它们的完全访问权限。进行这种更改的主要原因是为了避免用户使用超级用户账户执行日常活动。这样做是危险的，因为这种更改绕过了所有访问规则，可能会导致不一致的数据，例如跨公司关系。现在它仅用于故障排除或非常具体的跨公司操作。'
- en: As with Python, to exit the prompt, press *Ctrl* + *D*. This will also close
    the server process and return to the system shell prompt.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 一样，要退出提示符，请按 *Ctrl* + *D*。这将关闭服务器进程并返回到系统外壳提示符。
- en: We now know how to start an Odoo shell session. This is important for us to
    discover the Odoo API features. So, let's use it to explore the execution environment.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道了如何启动 Odoo 壳会话。这对于我们探索 Odoo API 功能非常重要。因此，让我们使用它来探索执行环境。
- en: The execution environment
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行环境
- en: Odoo recordsets operate in an **environment** context, providing relevant information
    about the context where the operation was triggered. For example, the database
    cursor being used, the current Odoo user, and more.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 记录集在 **环境** 上下文中操作，提供有关触发操作上下文的相关信息。例如，正在使用的数据库游标、当前 Odoo 用户等。
- en: Python code running inside a model method has access to the `self` recordset
    variable, and the local environment can be accessed with `self.env`. The server
    shell environment also provides a `self` reference in a similar way to what is
    found inside a method.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型方法内部运行的 Python 代码可以访问 `self` 记录集变量，并且可以通过 `self.env` 访问局部环境。服务器外壳环境也以类似方式提供
    `self` 引用，就像在方法内部找到的那样。
- en: In this section, we will learn about the attributes made available by the execution
    environment and how to use them.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解执行环境提供的属性以及如何使用它们。
- en: Environment attributes
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境属性
- en: As we have seen, `self` is a recordset. Recordsets carry environment information
    with them such as the user browsing the data and additional context-related information
    (for example, the active language and time zone).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，`self` 是一个记录集。记录集携带环境信息，例如浏览数据的用户和额外的上下文相关信息（例如，活动语言和时间区域）。
- en: 'The current environment can be accessed using the `env` attribute of a recordset,
    as shown in this example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用记录集的 `env` 属性访问当前环境，如下例所示：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The execution environment in `self.env` has the following attributes available:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `self.env` 中的执行环境有以下属性可用：
- en: The `env.cr` attribute is the database cursor being used.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env.cr` 属性是正在使用的数据库游标。'
- en: The `env.user` attribute is the record for the current user.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env.user` 属性是当前用户的记录。'
- en: The `env.uid` attribute is the ID for the session user. It is the same as `env.user.id`.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env.uid` 属性是会话用户的 ID。它与 `env.user.id` 相同。'
- en: The `env.context` attribute is an immutable dictionary containing the session
    context data.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env.context` 属性是一个不可变的字典，包含会话上下文数据。'
- en: The `env.company` attribute is the active company.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env.company` 属性是活动公司。'
- en: The `env.companies` attributes are the user's allowed companies.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env.companies` 属性是用户允许的公司。'
- en: Changes in Odoo 13
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Odoo 13 的变化
- en: The `env.company` and `env.companies` attributes were introduced in Odoo 13\.
    In previous versions, this information was read from the user record by using
    `env.user.company_id` and `env.user.company_ids`.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`env.company` 和 `env.companies` 属性是在 Odoo 13 中引入的。在之前的版本中，此信息是通过使用 `env.user.company_id`
    和 `env.user.company_ids` 从用户记录中读取的。'
- en: 'The environment also provides access to the registry where all installed models
    are available. For example, `self.env["res.partner"]` returns a reference to the
    `partner` model. We can then use `search()` or `browse()` on it to create recordsets:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 环境还提供了对所有已安装模型可用的注册表的访问权限。例如，`self.env["res.partner"]` 返回对 `partner` 模型的引用。然后我们可以使用
    `search()` 或 `browse()` 在其上创建记录集：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, the returned recordset for the `res.partner` model contains
    three records, with IDs `14`, `26`, `33`, and `27`. The recordset is not ordered
    by ID, as the default order for the corresponding model was used. In the case
    of the partner model, the default object `_order` is `display_name`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，返回给`res.partner`模型的记录集包含三个记录，ID分别为`14`、`26`、`33`和`27`。记录集不是按ID排序的，因为使用了对应模型的默认顺序。在合作伙伴模型的情况下，默认对象`_order`是`display_name`。
- en: The environment context
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境上下文
- en: The `context` object is a dictionary carrying session data that can be used
    on both the client-side user interface and the server-side ORM and business logic.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`context`对象是一个字典，携带会话数据，可以在客户端用户界面和服务器端ORM及业务逻辑中使用。'
- en: From the client side, it can carry information from one view to the next—such
    as the ID of the record active on the previous view after following a link or
    a button—or it can provide default values to be used in the next view.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从客户端来看，它可以携带信息从一个视图传递到下一个视图——例如，在跟随链接或按钮后，上一个视图上活动的记录ID——或者它可以为下一个视图提供默认值。
- en: On the server side, some recordset field values can depend on the locale settings
    provided by the context. In particular, the `lang` key affects the value of the
    translatable fields.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，某些记录集字段值可以依赖于上下文提供的区域设置。特别是，`lang`键影响可翻译字段的值。
- en: Context can also provide signals for server-side code. For example, the `active_test`
    key, when set to `False`, changes the behavior of the ORM `search()` method so
    that it does not apply the automatic filter on inactive records, ignoring the
    `active` record field.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文还可以为服务器端代码提供信号。例如，当`active_test`键设置为`False`时，它会改变ORM `search()`方法的行为，使其不对非活动记录应用自动过滤器，忽略`active`记录字段。
- en: 'An initial context from the web client looks like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Web客户端的初始上下文看起来像这样：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, you can see the `lang` key with the user language and `tz` with the time
    zone information. The content in records might be different depending on the current
    context:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到带有用户语言的`lang`键和带有时区信息的`tz`。根据当前上下文，记录中的内容可能不同：
- en: Translated fields can have different values depending on the active `lang` language.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译字段可以根据活动的`lang`语言有不同的值。
- en: Datetime fields, when returned to clients, can show different times depending
    on the active `tz` timezone.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期时间字段在返回给客户端时，可以根据活动的`tz`时区显示不同的时间。
- en: 'When opening a view from a link or a button in a previous view, the web client
    will automatically add a few keys to the context, providing information on the
    record we are navigating from:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当从一个视图的链接或按钮打开视图时，Web客户端将自动将一些键添加到上下文中，提供有关我们正在导航的记录的信息：
- en: '`active_model` is the previous model name.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_model`是之前的模型名称。'
- en: '`active_id` is the ID of the original record the user was positioned at.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_id`是用户定位的原始记录的ID。'
- en: '`active_ids` is a list of the IDs selected in cases where the user is navigating
    from a list view.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active_ids`是在用户从列表视图导航时选择的ID列表。'
- en: Wizard assistants frequently use these keys to find the records they are expected
    to act on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 向导助手经常使用这些键来找到他们预期要操作的记录。
- en: 'The context can be used to set default values and activate default filters
    on the target web client view by using keys with these specific prefixes:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用具有这些特定前缀的键来使用上下文设置目标Web客户端视图的默认值并激活默认过滤器：
- en: 'The `default_` prefix added to a field name sets a default value for that field.
    For example, `{''default_user_id'': uid}` sets the current user as a default value.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '添加到字段名称的`default_`前缀为该字段设置默认值。例如，`{''default_user_id'': uid}`将当前用户设置为默认值。'
- en: 'The `default_search_` prefix added to a filter name will automatically enable
    that filter. For example, `{''default_search_filter_my_tasks'': 1}` activates
    the filter with name `filter_my_books`.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '添加到过滤器名称的`default_search_`前缀将自动启用该过滤器。例如，`{''default_search_filter_my_tasks'':
    1}`激活名为`filter_my_books`的过滤器。'
- en: These prefixes are frequently used in `<field context="{...}">` elements.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些前缀经常用于`<field context="{...}">`元素中。
- en: Modifying the recordset execution environment and context
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改记录集执行环境和上下文
- en: The recordset execution context can be modified to take advantage of the behaviors
    described in the previous section or to add information to be used in methods
    called on that recordset.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 记录集执行上下文可以被修改以利用上一节中描述的行为，或者向调用该记录集的方法中添加信息。
- en: 'The environment and its context can be modified through the following methods.
    Each of these returns a new recordset, along with a copy of the original with
    a modified environment:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下方法修改环境和其上下文。这些方法中的每一个都返回一个新的记录集，以及一个带有修改后的环境的原始副本：
- en: The `<recordset>.with_context(<dictionary>)` method replaces the context with
    the one provided in the dictionary.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<recordset>.with_context(<dictionary>)`方法用提供的字典中的上下文替换上下文。'
- en: The `<recordset>.with_context(key=value, ...)` method modifies the context by
    setting the provided attributes on it.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<recordset>.with_context(key=value, ...)`方法通过在它上设置提供的属性来修改上下文。'
- en: The `<recordset>.sudo([flag=True])` method enables or disables the superuser
    mode, allowing it to bypass security rules. The context user is kept the same.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<recordset>.sudo([flag=True])`方法启用或禁用超级用户模式，允许它绕过安全规则。上下文用户保持不变。'
- en: The `<recordset>.with_user(<user>)` method modifies the user to the one provided,
    which is either a user record or an ID number.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<recordset>.with_user(<user>)`方法将用户修改为提供的用户，该用户可以是用户记录或ID号。'
- en: The `<recordset>.with_company(<company>)` method modifies the company to the
    one provided, which is either a company record or an ID number.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<recordset>.with_company(<company>)`方法将公司修改为提供的公司，该公司可以是公司记录或ID号。'
- en: The `<recordset>.with_env(<env>)` method modifies the full environment of the
    recordset to the one provided.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<recordset>.with_env(<env>)`方法将记录集的完整环境修改为提供的环境。'
- en: Changes in Odoo 13
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Odoo 13中的更改
- en: The `with_user()` and `with_company()` methods were introduced in Odoo 13\.
    To switch users, previous versions used the `sudo([<user>])` method, which could
    be provided to a specific user to switch to the superuser context. To switch companies,
    previous versions used `with_context(force=company=<id>)`, setting a `context`
    key that was checked in the relevant business logic.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`with_user()`和`with_company()`方法是在Odoo 13中引入的。为了切换用户，旧版本使用`sudo([<user>])`方法，该方法可以提供给特定用户以切换到超级用户上下文。为了切换公司，旧版本使用`with_context(force=company=<id>)`，设置一个在相关业务逻辑中检查的`context`键。'
- en: 'Additionally, the environment object provides the `env.ref()` function, taking
    a string with an external identifier and returning the corresponding record, as
    shown in the following example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，环境对象提供了`env.ref()`函数，它接受一个带有外部标识符的字符串，并返回相应的记录，如下面的示例所示：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the external identifier does not exist, a `ValueError` exception is raised.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果外部标识符不存在，将引发一个`ValueError`异常。
- en: We learned more about the execution environments when running Python code in
    the Odoo server. The next step is to interact with data. In this case, the first
    thing to learn is how to query data and create recordsets, which is discussed
    in the next section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Odoo服务器中运行Python代码时，我们学习了更多关于执行环境的知识。下一步是与数据交互。在这种情况下，首先要学习的是如何查询数据和创建记录集，这将在下一节中讨论。
- en: Querying data with recordsets and domains
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用记录集和域查询数据
- en: Odoo business logic will need to read data from the database to perform actions
    based on it. This is done through *recordsets*, which query the raw data and expose
    it as Python objects we can manipulate.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo业务逻辑需要从数据库中读取数据以执行基于它的操作。这是通过*记录集*完成的，它查询原始数据并将其暴露为我们可以操作的Python对象。
- en: Odoo Python will usually be running in a class method, where `self` represents
    the recordset to work with. In some cases, we need to create recordsets for other
    models. For that, we should get a reference to the models and then query it to
    create the recordset.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo Python通常在类方法中运行，其中`self`代表要处理的记录集。在某些情况下，我们需要为其他模型创建记录集。为此，我们应该获取模型的引用，然后查询它以创建记录集。
- en: The environment object, usually accessible as `self.env`, holds references to
    all the models available, and these can be accessed using dictionary-like syntax.
    For example, to get a reference to the `partner` model, use `self.env['res.partner']`
    or `self.env.get('res.partner')`. This model reference can then be used to create
    recordsets, as we will see next.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 环境对象，通常可通过`self.env`访问，持有对所有可用模型的引用，并且可以使用类似字典的语法访问它们。例如，要获取`partner`模型的引用，请使用`self.env['res.partner']`或`self.env.get('res.partner')`。然后，可以使用此模型引用创建记录集，正如我们将在下面看到的那样。
- en: Creating recordsets
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建记录集
- en: The `search()` method takes a domain expression and returns a recordset with
    the records matching those conditions. For example, `[('name', 'like', 'Azure')]`
    will return all records with a `name` field containing `Azure`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`search()`方法接受一个域表达式，并返回一个与这些条件匹配的记录集。例如，`[(''name'', ''like'', ''Azure'')]`将返回所有包含`name`字段为`Azure`的记录。'
- en: If the model has the `active` special field then by default, only the records
    with `active=True` will be considered.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模型有`active`特殊字段，则默认情况下，只有`active=True`的记录将被考虑。
- en: 'The following keyword arguments can also be used:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下关键字参数也可以使用：
- en: The `order` keyword is a string to be used as the `ORDER BY` clause in the database
    query. This is usually a comma-separated list of field names. Each field name
    may be followed by the `DESC` keyword to indicate a descending order.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order`关键字是作为数据库查询中的`ORDER BY`子句使用的字符串。这通常是一个字段名的逗号分隔列表。每个字段名后面可以跟`DESC`关键字来表示降序。'
- en: The `limit` keyword sets a maximum number of records to retrieve.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limit`关键字设置要检索的最大记录数。'
- en: The `offset` keyword ignores the first `n` results; it can be used with `limit`
    to query blocks of records at a time.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offset`关键字忽略前`n`个结果；它可以与`limit`一起使用，以每次查询记录块。'
- en: Sometimes, we just need to know the number of records meeting certain conditions.
    For that, we can use `search_count()`, which returns the record count instead
    of a recordset in a more efficient way.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们只需要知道满足某些条件的记录数量。为此，我们可以使用`search_count()`，它以更有效的方式返回记录计数而不是记录集。
- en: The `browse()` method takes a list of IDs or a single ID and returns a recordset
    with those records. This can be convenient in cases where we already know the
    IDs of the records we want.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`browse()`方法接受一个ID列表或单个ID，并返回包含这些记录的记录集。在已知我们想要的记录的ID的情况下，这可能是方便的。'
- en: 'For example, to get all the partner records containing `Lumber` in the display
    name, use the following `search()` call:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要获取所有显示名称中包含`Lumber`的合作伙伴记录，可以使用以下`search()`调用：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the case the IDs to query are known, use a `browse()` call, as in the following
    example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在已知要查询的ID的情况下，使用`browse()`调用，如下例所示：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Most of the time the IDs are not known, so the `search()` method is used more
    often than `browse()`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，ID是未知的，所以`search()`方法比`browse()`方法使用得更频繁。
- en: To make good use of `search()`, a good understanding of the domain filter syntax
    is needed. So, we will focus on this in the next section.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要充分利用`search()`，需要对域过滤器语法有良好的理解。因此，我们将在下一节中关注这一点。
- en: Domain expressions
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 域表达式
- en: 'A `WHERE` expressions that are used to query the database. A `(''<field>'',
    ''<operator>'', <value>)` tuple. For example, the following is a valid domain
    expression, with a single condition: `[(''is_done'', ''='', False)]`. A domain
    expression with no conditions is also allowed. This translates to an empty list
    (`[]`) and the result is a query returning all records.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 用于查询数据库的`WHERE`表达式。一个`('<field>', '<operator>', <value>)`元组。例如，以下是一个有效的域表达式，包含单个条件：`[('is_done',
    '=', False)]`。没有条件的域表达式也是允许的。这翻译为一个空列表（`[]`），结果是返回所有记录的查询。
- en: 'There are actually two possible evaluation contexts for domains: on the client
    side, such as in *window actions* and web client *views*, and on the server side,
    such as in security *record rules* and model method Python code. What can be used
    in the `<field>` and `<value>` elements may depend on the evaluation context.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，域有两个可能的评估上下文：客户端，例如在*窗口操作*和Web客户端*视图中*，以及服务器端，例如在安全*记录规则*和模型方法Python代码中。在`<field>`和`<value>`元素中可以使用的内容可能取决于评估上下文。
- en: 'Next, we will look at a detailed explanation for each element of a domain condition:
    **field**, **operator**, and **value**.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将详细解释域条件中的每个元素：**字段**、**运算符**和**值**。
- en: The field element of a domain condition
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 域条件的字段元素
- en: The first condition element is a string with the name of the field being filtered.
    When the domain expression is used on the server side, the field element can use
    dot-notation to access the values of related models. For example, we could use
    something like `'publisher_id.name'`, or even `'publisher_id.country_id.name'`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个条件元素是一个字符串，包含正在过滤的字段名称。当在服务器端使用域表达式时，字段元素可以使用点符号来访问相关模型的值。例如，我们可以使用类似`'publisher_id.name'`的东西，甚至`'publisher_id.country_id.name'`。
- en: On the client side, dot-notation is not allowed, and only simple field names
    can be used.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，不允许使用点符号，只能使用简单的字段名。
- en: Tip
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: In cases where a related record value is needed for a client-side domain expression
    because dot-notation can't be used, the solution is to add to the model a related
    field by using a `related=` attribute. This way, the value is accessible as a
    directly accessible model field.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要客户端域表达式中的相关记录值，但点符号无法使用的情况下，解决方案是在模型中通过使用`related=`属性添加一个相关字段。这样，值就可以作为直接可访问的模型字段来访问。
- en: The operator element of a domain condition
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 域条件运算符元素
- en: 'The second condition element is the operator to apply on the field being filtered.
    What follows is a list of the allowed operators:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个条件元素是应用于被过滤字段的运算符。以下是允许的运算符列表：
- en: '![](img/Table_7.1_B16119.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Table_7.1_B16119.jpg)'
- en: These operators are applied to the field provided in the first element, using
    the value provided in the third element. For example, `('shipping_address_id',
    'child_of', partner_id)` checks the evaluation context for a `partner_id` variable
    and reads its value. The database is queried on the `shipping_address_id` field,
    selecting the records where that address is a child of the one identified in the
    `partner_id` value.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这些运算符应用于第一个元素提供的字段，使用第三个元素提供的值。例如，`('shipping_address_id', 'child_of', partner_id)`检查评估上下文中的`partner_id`变量并读取其值。数据库在`shipping_address_id`字段上查询，选择那些地址是`partner_id`值中标识的地址的子地址的记录。
- en: The value element of a domain condition
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 域条件值元素
- en: The third element is evaluated as a Python expression. It can use literal values,
    such as numbers, Booleans, strings, or lists, and can use fields and identifiers
    available in the evaluation context.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个元素被评估为Python表达式。它可以使用字面值，如数字、布尔值、字符串或列表，并且可以使用评估上下文中可用的字段和标识符。
- en: Record objects are not accepted values. Instead, the corresponding ID values
    should be used. For example, don't use `[('user_id', '=', user)]` – instead, use
    `[('user_id', '=', user``)]`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 记录对象不是接受值。相反，应使用相应的ID值。例如，不要使用`[('user_id', '=', user)]` - 而应使用`[('user_id',
    '=', user)]`。
- en: 'For record rules, the evaluation context has the following names available:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于记录规则，评估上下文有以下名称可用：
- en: '`user`: A record for the current user (equivalent to `self.env.user`). Use
    `user.id` to get the corresponding ID.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`: 当前用户的记录（相当于`self.env.user`）。使用`user.id`获取相应的ID。'
- en: '`company_id`: The ID of a record for the active company (equivalent to `self.env.company.id`).'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`company_id`: 活动公司的记录ID（相当于`self.env.company.id`）。'
- en: '`company_ids`: A list of IDs for the allowed companies (equivalent to `self.env.companies.ids`).'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`company_ids`: 允许的公司ID列表（相当于`self.env.companies.ids`）。'
- en: '`time`: The Python time module, exposing date and time functions. The official
    reference can be found at [https://docs.python.org/3/library/time.html](https://docs.python.org/3/library/time.html).'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time`: Python时间模块，提供日期和时间函数。官方参考可以在[https://docs.python.org/3/library/time.html](https://docs.python.org/3/library/time.html)找到。'
- en: Changes in Odoo 13
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Odoo 13中的变更
- en: The `company_id` and `company_ids` context values are available for record rule
    evaluation since Odoo 13, and the approach from the previous version, using `user.company_id.id`,
    should not be used anymore. For example, the previously frequently used `['|',
    ('company_id', '=', False), ('company_id', 'child_of', [user.company_id.id])]`
    domain should now be written as `[('company_id', 'in', company_ids)]`.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自Odoo 13以来，`company_id`和`company_ids`上下文值可用于记录规则评估，并且不应再使用之前版本的方案，即使用`user.company_id.id`。例如，之前经常使用的`['|',
    ('company_id', '=', False), ('company_id', 'child_of', [user.company_id.id])]`域现在应写为`[('company_id',
    'in', company_ids)]`。
- en: Searching on to-many fields
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在多对多字段上搜索
- en: When the searched field is a *to-many*, the operator is applied to each of the
    field values, and the evaluated record is included in the result if any of the
    field values match the domain condition.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当搜索字段是*多对多*时，运算符应用于每个字段值，如果任何字段值匹配域条件，则评估的记录将包含在结果中。
- en: The `=` and `in` operators behave like a *contains* operation. They both check
    if *any* of the field values match any of the list of values searched for. Symmetrically,
    the `!=` and `not in` operators check that *none* of the field values match any
    of the list of values searched for.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`=`和`in`运算符的行为类似于*包含*操作。它们都检查字段值是否与搜索值列表中的任何值匹配。对称地，`!=`和`not in`运算符检查字段值是否与搜索值列表中的任何值都不匹配。'
- en: Composing a domain expression with multiple conditions
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用多个条件组合域表达式
- en: A domain expression is a list of items and can contain several condition tuples.
    By default, these conditions will implicitly be combined using the AND logical
    operator. This means that it will only return records meeting all of the conditions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 域表达式是一系列项目，可以包含多个条件元组。默认情况下，这些条件将隐式地使用AND逻辑运算符组合。这意味着它将只返回满足所有条件的记录。
- en: Explicit logic operators can also be used – for example, the ampersand symbol
    (`&`) for AND operations (the default) and the pipe symbol (`|`) for OR operations.
    These will operate on the next two items, working in a recursive way. We'll look
    at this in more detail in a moment.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用显式逻辑操作符——例如，使用&符号（默认）进行AND操作，使用|符号进行OR操作。这些将在下一个两个项上操作，以递归方式工作。我们稍后会更详细地讨论这一点。
- en: For a slightly more formal definition, a domain expression uses prefix notation,
    also known as **Polish notation** (**PN**), where operators precede operands.
    The AND and OR operators are binary operators, while NOT is a unary operator.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个稍微正式的定义，域表达式使用前缀表示法，也称为**波兰表示法**（**PN**），其中操作符位于操作数之前。AND和OR操作符是二元操作符，而NOT是一元操作符。
- en: The exclamation point (`!`) represents the NOT operator and it operates on the
    following item. So, it should be placed before the item to be negated. For example,
    the `['!', ('is_done','=',True)]` expression will filter all *not done* records.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 感叹号（`!`）代表NOT操作符，它作用于后续项。因此，它应该放在要取反的项之前。例如，`['!', ('is_done','=',True)]`表达式将过滤所有*未完成*的记录。
- en: Operator items, such as (`!`) or (`|`), can be nested, allowing the definition
    of `AND`/`OR`/`NOT` complex conditions. Let's illustrate this with an example.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符项，例如（`!`）或（`|`），可以嵌套，允许定义`AND`/`OR`/`NOT`复杂条件。让我们用一个例子来说明这一点。
- en: 'In server-side record rules, we can find domain expressions similar to this
    one:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端记录规则中，我们可以找到类似于这个的域表达式：
- en: '[PRE8]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This domain filters all of the records where:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此域过滤所有记录，其中：
- en: '- the current user is a follower, or'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '- 当前用户是关注者，或'
- en: '- the current user is the record''s responsible (user_id), or'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '- 当前用户是记录的责任人（user_id），或'
- en: '- the record has no responsible user set.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '- 记录没有设置责任用户。 '
- en: 'The following diagram illustrates the abstract syntax tree representation of
    the previous domain expression example:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了之前域表达式示例的抽象语法树表示：
- en: '![Figure 7.1 – A diagram illustrating a composed domain expression'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1 – 一个说明组合域表达式的图]'
- en: '](img/Figure_7.1_B16119.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.1_B16119.jpg)'
- en: Figure 7.1 – A diagram illustrating a composed domain expression
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 一个说明组合域表达式的图
- en: The first `|` (*OR*) operator acts on the follower's condition plus the result
    of the next condition. The next condition is again the union of two other conditions
    - records where either the user ID is set to the current user, or the user ID
    is not set.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`|`（或`OR`）操作符作用于后续条件加上下一个条件的结果。下一个条件又是两个其他条件的并集——记录中用户ID设置为当前用户，或者用户ID未设置。
- en: Special domain conditions
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊域条件
- en: Some special domain conditions are also supported for the cases where an *always
    true* or *always false* expression is needed.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要始终为真或始终为假的表达式的场景，也支持一些特殊的域条件。
- en: 'The `(1, "=", 1)` condition represents an *always true* expression. It can
    be used on record rules to give a higher user group access to all records, previously
    limited by a lower user group. For example, it is used on the `User: All Documents`
    group, to override the record access limitation in the inherited `User: Own Documents
    only` group. For an example of this, see `addons/sales_team/security/sales_team_security.xml`
    in the Odoo source code.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`(1, "=", 1)`条件代表一个*始终为真*的表达式。它可以用于记录规则，以赋予更高用户组对所有记录的访问权限，这些记录之前由较低用户组限制。例如，它用于`User:
    All Documents`组，以覆盖继承的`User: Own Documents only`组中的记录访问限制。有关此示例，请参阅Odoo源代码中的`addons/sales_team/security/sales_team_security.xml`。'
- en: The `(0, "=", 1)` condition is also supported and represents an *always false*
    expression.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`(0, "=", 1)`条件也得到支持，它代表一个*始终为假*的表达式。'
- en: Grouping by fields and aggregate data
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按字段和聚合数据分组
- en: 'Sometimes, we need to group records by their data field. Odoo can do this using
    the `read_group()` method. The method arguments are as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要根据数据字段对记录进行分组。Odoo可以使用`read_group()`方法来完成这项工作。该方法参数如下：
- en: The `domain` argument is a list with a domain expression to filter the records
    to retrieve.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain`参数是一个包含域表达式以过滤要检索的记录的列表。'
- en: 'The `fields` argument is a list of field names, along with an aggregation function
    to apply in the format of `field:aggr`. Aggregation functions are the ones allowed
    by `sum`, `avg`, `min`, `max`, `count`, and `count_distinct`. For example: `["subtotal:sum"]`.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields`参数是一个字段名称列表，以及要应用的聚合函数，格式为`field:aggr`。聚合函数是允许使用`sum`、`avg`、`min`、`max`、`count`和`count_distinct`的函数。例如：`["subtotal:sum"]`。'
- en: The `groupby` argument is a list with the data field names to group by.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupby`参数是一个包含要按其分组的字段名称的列表。'
- en: The `limit` argument is an optional maximum number of groups to return.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limit`参数是一个可选的最大组数返回数。'
- en: The `offset` argument is an optional number of records to skip.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offset`参数是一个可选的数字，表示要跳过的记录数。'
- en: The `orderby` argument is an optional string with an *order by* clause to apply
    to the result (similar to what `search()` supports).
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orderby`参数是一个可选的字符串，包含要应用于结果的*排序*子句（类似于`search()`支持的）。'
- en: The `lazy` argument, if set to `True`, only groups by the first field, and adds
    the remaining group of fields to the `__context` result. This argument defaults
    to `True`, so set it to `False` to have all *group by fields* immediately applied.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果将`lazy`参数设置为`True`，则仅按第一个字段分组，并将剩余的分组字段添加到`__context`结果中。此参数默认为`True`，因此将其设置为`False`以立即应用所有*分组字段*。
- en: 'Here is an example grouping partner record by country, and count the number
    of different states found:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个按国家分组伙伴记录并计算找到的不同州数量的示例：
- en: '[PRE9]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This returned a list with a single group result for the `233` country ID. Running
    `self.env["res.country"].browse(233).name`, we can see that the country is `United
    Sates`. The `__count` key shows that there are `4` partners in the `233` country
    ID, and the `state_id` object shows the `count` distinct aggregation results:
    `1` distinct state is used by these partners.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回了一个包含单个组结果的列表，对应于`233`国家ID。运行`self.env["res.country"].browse(233).name`，我们可以看到国家是`United
    Sates`。`__count`键显示在`233`国家ID中有`4`个合作伙伴，`state_id`对象显示了`count`不同的聚合结果：这些合作伙伴使用了`1`个不同的州。
- en: We now know how to create recordsets. Next, we will want to read the data in
    them. In many cases, this is a trivial operation, but for some field types, there
    are a few details involved that are worth noting. The next section will help us
    with that.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道了如何创建记录集。接下来，我们希望读取它们中的数据。在许多情况下，这是一个简单的操作，但对于某些字段类型，有一些需要注意的细节。下一节将帮助我们了解这些。
- en: Accessing data in recordsets
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问记录集中的数据
- en: Once we have a recordset, we want to inspect the data contained in it. So, in
    the following sections, we will explore how to access data in recordsets.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有一个记录集，我们希望检查其中包含的数据。因此，在以下章节中，我们将探讨如何访问记录集中的数据。
- en: We can get field values for individual records called *singletons*. Relational
    fields have special properties, and we can use dot-notation to navigate through
    linked records. Finally, we will discuss some considerations for when we need
    to handle date and time records and convert them between different formats.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以获取称为*单例*的个别记录的字段值。关系字段具有特殊属性，我们可以使用点符号遍历链接的记录。最后，我们将讨论在需要处理日期和时间记录并将它们转换为不同格式时的一些考虑因素。
- en: Accessing individual record data
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问单个记录数据
- en: When a recordset has only one record it is called a **singleton**. Singletons
    are still recordsets and can be used wherever a recordset is expected.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当记录集中只有一个记录时，它被称为**单例**。单例仍然是记录集，可以在需要记录集的任何地方使用。
- en: 'But unlike multi-element recordsets, singletons can access their fields using
    dot-notation, as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 但与多元素记录集不同，单例可以使用点符号访问其字段，如下所示：
- en: '[PRE10]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the next example, we can see that the same `self` singleton recordset also
    behaves as a recordset, and we can iterate it. It has only one record, so only
    one name is printed out:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们可以看到相同的`self`单例记录集也表现得像一个记录集，我们可以迭代它。它只有一个记录，因此只打印出一个名称：
- en: '[PRE11]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Trying to access field values in recordsets with more than one record will result
    in an error, so this can be an issue in cases where we are not sure if we are
    working with a singleton recordset.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在包含多个记录的记录集中访问字段值将导致错误，因此这可能在不确定是否正在处理单例记录集的情况下成为一个问题。
- en: Tip
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Although using dot-notation to access fields won't work on multiple records,
    it is possible to access them in bulk by mapping the values to a recordset. This
    is done using `mapped()`. For example, `rset.mapped("name")` returns a list with
    the `name` values.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用点符号访问字段在多个记录上不会工作，但可以通过将值映射到记录集来批量访问它们。这是通过使用`mapped()`完成的。例如，`rset.mapped("name")`返回一个包含`name`值的列表。
- en: For methods designed to work only with a singleton, we can check this using
    `self.ensure_one()` at the beginning. It will raise an error if `self` is not
    a singleton.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仅设计用于与单例一起工作的方法，我们可以在开始时使用`self.ensure_one()`进行检查。如果`self`不是一个单例，它将引发错误。
- en: Tip
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `ensure_one()` function also raises an error if the record is empty. To
    check if a `rset` has one or zero records, you can use `rset or rset.ensure_one()`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`ensure_one()` 函数如果记录为空也会引发错误。要检查 `rset` 是否有一个或零个记录，你可以使用 `rset or rset.ensure_one()`。'
- en: An empty record is also a singleton. This is convenient because accessing field
    values will return a `None` value instead of raising an error. This is also true
    for relational fields, and accessing related records using dot notation won't
    raise errors.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 空记录也是一个单例。这很方便，因为访问字段值将返回一个 `None` 值而不是引发错误。这也适用于关系字段，使用点符号访问相关记录不会引发错误。
- en: 'So, in practice, there is no need to check for an empty recordset before accessing
    their field values. For example, instead of `if record: print(record.name)`, we
    can safely write the simpler `print(record.name)` method. A default value for
    an empty value can also be provided by using an `or` condition: `print(record.name``)`.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '因此，在实际操作中，在访问字段值之前没有必要检查空记录集。例如，而不是 `if record: print(record.name)`，我们可以安全地写出更简单的
    `print(record.name)` 方法。也可以通过使用 `or` 条件提供一个空值的默认值：`print(record.name or '''')`。'
- en: Accessing relational fields
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问关系字段
- en: As we saw earlier, models can have relational fields—**many-to-one**, **one-to-many**,
    and **many-to-many**. These field types have recordsets as values.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，模型可以有关系字段——**多对一**、**一对多**和**多对多**。这些字段类型具有记录集作为值。
- en: 'In the case of many-to-one fields, the value can be a singleton or an empty
    recordset. In both cases, we can directly access their field values. As an example,
    the following instructions are correct and safe:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在多对一字段的情况下，值可以是单例或空记录集。在这两种情况下，我们可以直接访问它们的字段值。例如，以下指令是正确且安全的：
- en: '[PRE12]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'An empty recordset conveniently also behaves like a singleton, and accessing
    its fields does not return an error but just returns `False`. Because of this,
    we can traverse records using dot-notation without worrying about errors from
    empty values, as shown here:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 空记录集方便地也表现得像一个单例，访问其字段不会返回错误，而是只返回 `False`。正因为如此，我们可以使用点符号来遍历记录，而不用担心空值引起的错误，如下所示：
- en: '[PRE13]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Accessing date and time values
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问日期和时间值
- en: 'In recordsets, `date` and `datetime` values are represented as native Python
    objects. For example, when we look up the last login date for the `admin` user:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在记录集中，`date` 和 `datetime` 值被表示为原生的 Python 对象。例如，当我们查找 `admin` 用户的最后登录日期时：
- en: '[PRE14]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Since the `date` and `datetime` values are Python objects, they have all of
    the manipulation features available for these objects.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `date` 和 `datetime` 值是 Python 对象，它们具有适用于这些对象的所有操作功能。
- en: Changes in Odoo 12
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12 的变化
- en: The `date` and `datetime` field values are now represented as Python objects,
    unlike previous Odoo versions, where the `date` and `datetime` values were represented
    as text strings. These field type values can still be set using text representations
    in the same way as previous Odoo versions.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`date` 和 `datetime` 字段值现在表示为 Python 对象，与之前的 Odoo 版本不同，那时 `date` 和 `datetime`
    值被表示为文本字符串。这些字段类型值仍然可以使用文本表示来设置，就像之前的 Odoo 版本一样。'
- en: 'Dates and times are stored in the database in a native `datetime` values seen
    on recordsets are also in UTC. When presented to the user by the web client, the
    `datetime` values are converted into the user''s time zone by using the current
    session''s time zone setting that is stored in the context `tz` key, for example,
    `{''tz'': ''Europe/Brussels''}`. This conversion is a web client responsibility,
    as it isn''t done by the server.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '日期和时间存储在数据库中为原生的 `datetime` 值，在记录集中看到的也是 UTC。当网络客户端向用户展示时，`datetime` 值会通过使用存储在上下文
    `tz` 键中的当前会话时区设置进行转换，例如，`{''tz'': ''Europe/Brussels''}`。这种转换是网络客户端的责任，因为服务器没有执行这种转换。'
- en: For example, an 11:00 AM datetime value entered by a Brussels (UTC+1) user is
    stored in the database as 10:00 AM UTC, and will be seen by a New York (UTC-4)
    user as 06:00 AM. The Odoo server log message timestamps use the UTC time and
    not the local server time.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，布鲁塞尔（UTC+1）用户输入的 11:00 AM 日期时间值在数据库中存储为 10:00 AM UTC，并被纽约（UTC-4）用户看到为 06:00
    AM。Odoo 服务器日志消息的时间戳使用 UTC 时间而不是本地服务器时间。
- en: The opposite conversion—from the session time zone to UTC—also needs to be done
    by the web client when sending the user's `datetime` input back to the server.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 相反的转换——从会话时区到 UTC——也需要在将用户的 `datetime` 输入发送回服务器时由网络客户端完成。
- en: Tip
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember that the date and time data stored in the database and handled by the
    server code is always represented in UTC. Even the server log message timestamps
    are represented in UTC.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，数据库中存储并由服务器代码处理的数据日期和时间始终以协调世界时（UTC）表示。即使是服务器日志消息的时间戳也以UTC表示。
- en: We have now reviewed the details of how to access record data. However, our
    application will provide some automation for business processes, so inevitably
    we will also need to write to recordsets. Let's look at this in detail in the
    next section.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经回顾了如何访问记录数据的细节。然而，我们的应用程序将为业务流程提供一些自动化，因此不可避免地我们还需要写入记录集。让我们在下一节中详细探讨这一点。
- en: Writing to records
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入记录
- en: 'We have two different ways to write to records: using the object-style direct
    assignment or using the `write()` method. The `write()` method is the low-level
    method in charge of performing write operations, and it is still used directly
    when using the external API or when loading XML records. The object-style direct
    assignment was added later into the ORM model. It implements the **active record**
    pattern and can be used in Python code logic.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两种不同的方式来写入记录：使用对象风格的直接赋值或使用`write()`方法。`write()`方法是负责执行写入操作的低级方法，当使用外部API或加载XML记录时，它仍然被直接使用。对象风格的直接赋值后来被添加到ORM模型中。它实现了**活动记录**模式，可以在Python代码逻辑中使用。
- en: Changes in Odoo 13
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 13 的变更
- en: In Odoo 13, the ORM model introduced a new database writing approach called
    `flush()` method is automatically called to perform the corresponding database
    operations in a single go.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo 13中，ORM模型引入了一种新的数据库写入方法，称为`flush()`方法，它将自动调用以一次性执行相应的数据库操作。
- en: Next, we will look at both of these methods and their differences.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨这两种方法及其差异。
- en: Using object-style value assignments
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用对象风格的值赋值
- en: Recordsets implement the **active record pattern**. This means that we can assign
    values to them and these changes will be made persistent in the database. This
    is an intuitive and convenient way to manipulate data.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 记录集实现了**活动记录模式**。这意味着我们可以向它们分配值，这些更改将持久保存在数据库中。这是一种直观且方便的数据操作方式。
- en: Changes in Odoo 13
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 13 的变更
- en: Assigning values to a recordset with more than one record is supported as of
    Odoo 13\. Up to Odoo 12, only writing values to single records was supported,
    and the `write()` method had to be used to write to multiple records.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 从Odoo 13开始，支持向包含多个记录的记录集分配值。在Odoo 12之前，仅支持写入单个记录的值，并且必须使用`write()`方法来写入多个记录。
- en: 'Here is an example:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE15]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When using the *active record* pattern, the value of relational fields can be
    set by assigning a recordset.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用**活动记录**模式时，可以通过分配记录集来设置关系字段的值。
- en: 'Date and time fields can be assigned values as either Python native objects
    or string representations in the Odoo default format:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 日期和时间字段可以分配Python原生对象或Odoo默认格式的字符串表示的值：
- en: '[PRE16]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Binary fields should be assigned `base64` encoded values. For example, when
    having raw binary data read from a file, that value must be converted using `base64.b64encode()`
    before being assigned to a field:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制字段应分配`base64`编码的值。例如，当从文件中读取原始二进制数据时，该值必须在分配给字段之前使用`base64.b64encode()`进行转换：
- en: '[PRE17]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When assigning values on many-to-one fields, the value assigned must be a single
    record (that is, a **singleton recordset**).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 当在多对一字段上分配值时，分配的值必须是一个单一记录（即，一个**单例记录集**）。
- en: For to-many fields, the value can also be assigned with a recordset, replacing
    the list of linked records (if any) with a new one. Here, a recordset of any size
    is allowed.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多对多字段，值也可以使用记录集分配，用新的记录集替换（如果有的话）链接的记录列表。在这里，允许任何大小的记录集。
- en: 'To set an empty value on a relational field, set it with `None` or `False`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要在关系字段上设置空值，请使用`None`或`False`：
- en: '[PRE18]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: To append or remove a record on the assigned list, use the record manipulation
    operations.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要在分配的列表中追加或删除记录，请使用记录操作。
- en: 'For example, imagine a company record also has a related partner record that
    is used to hold address details. Suppose that we want to add the current user
    as a company child contact. This can be done with the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一家公司记录还有一个相关的合作伙伴记录，用于存储地址详情。假设我们想将当前用户添加为公司子联系人的联系人。这可以通过以下方式完成：
- en: '[PRE19]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, the pipe operator (`|`) was used to join a record to obtain a larger recordset.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，管道运算符（`|`）被用来连接记录以获得更大的记录集。
- en: 'The compact append and assign operator (`|=`) could have been used for the
    same effect:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 紧凑的追加和赋值运算符（`|=`）可以用于达到相同的效果：
- en: '[PRE20]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: More details on record manipulation operations are given later in this chapter
    in the *Composing recordsets* section.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 本章后面的 *组合记录集* 部分提供了关于记录操作操作的更多详细信息。
- en: Using the write() method
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `write()` 方法
- en: The `write()` method can also be used to update data in records. It accepts
    a dictionary with the field names and values to assign. It can be more convenient
    to use in some cases, for example, where the dictionary is prepared first, and
    the assignment is performed later. It is also useful in older versions of Odoo
    (up to Odoo 12) for cases where direct assignment can't be used.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`write()` 方法也可以用于更新记录中的数据。它接受一个包含要分配的字段名称和值的字典。在某些情况下，例如字典首先准备，然后执行分配，它可能更方便。在
    Odoo 的较旧版本（直到 Odoo 12）中，对于无法直接分配的情况，它也很有用。'
- en: 'The `write()` method receives a dictionary with the fields and values to assign
    and updates the recordset with them:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`write()` 方法接收一个包含字段和要分配的值的字典，并使用这些值更新记录集：'
- en: '[PRE21]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Date and time fields can be assigned with values of the corresponding Python
    objects or by using string text representations, just like with object-style assignments.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 日期和时间字段可以使用相应的 Python 对象的值或使用字符串文本表示来分配，就像使用对象样式赋值一样。
- en: Since Odoo 13, `write()` can use recordsets to set values on to-one and to-many
    relational fields, just like with object-style assignments.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 自 Odoo 13 以来，`write()` 可以使用记录集在单对一和多对多关系字段上设置值，就像使用对象样式赋值一样。
- en: Changes in Odoo 13
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 13 的变化
- en: The `write()` method can use recordsets to assign values on relational fields.
    Up to Odoo 12, many-to-one fields were set using an ID value, and to-many fields
    were set using a special syntax, for example, `(4, <id>, _)` to add a record and
    `(6, 0, [<ids>])` to set the full record list. This syntax is discussed in more
    detail in [*Chapter 5*](B16119_05_Final_PD_ePub.xhtml#_idTextAnchor146), *Importing,
    Exporting, and Module Data*.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`write()` 方法可以使用记录集在关系字段上分配值。在 Odoo 12 之前，多对一字段使用 ID 值设置，多对多字段使用特殊语法设置，例如，`(4,
    <id>, _)` 用于添加记录，`(6, 0, [<ids>])` 用于设置完整的记录列表。此语法在 [*第 5 章*](B16119_05_Final_PD_ePub.xhtml#_idTextAnchor146)
    *导入、导出和模块数据* 中有更详细的讨论。'
- en: For example, suppose we have two Partner records, `address1` and `address2`,
    and we want to set them on the `self.child_ids` field.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有两个合作伙伴记录，`address1` 和 `address2`，我们想在 `self.child_ids` 字段上设置它们。
- en: 'Using the `write()` method, we would use the following:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `write()` 方法，我们会这样做：
- en: '[PRE22]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Another option (needed for versions before Odoo 13) is as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项（适用于 Odoo 13 之前的版本）如下：
- en: '[PRE23]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `write()` method is used to write dates on existing records. But we also
    need to create and delete records, which we will discuss in the next section.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`write()` 方法用于在现有记录上写入日期。但我们也需要创建和删除记录，我们将在下一节中讨论。'
- en: Creating and deleting records
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和删除记录
- en: The `create()` and `unlink()` model methods allow us to create and delete existing
    records, respectively.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`create()` 和 `unlink()` 模型方法允许我们分别创建和删除现有记录。'
- en: 'The `create()` method takes a dictionary with the fields and values for the
    record to be created, using the same syntax as `write()`. Default values are automatically
    applied as expected, as shown in this example:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`create()` 方法接受一个包含要创建的记录的字段和值的字典，使用与 `write()` 相同的语法。默认值会自动应用，正如本例所示：'
- en: '[PRE24]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `unlink()` method deletes the records in the recordset, as done in the
    next example:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`unlink()` 方法删除记录集中的记录，如下例所示：'
- en: '[PRE25]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `unlink()` method returns a `True` value. Also, during the `delete` operation,
    it triggers log messages informing the cascade deletion of related records, such
    as Chatter messages and followers.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`unlink()` 方法返回一个 `True` 值。此外，在 `delete` 操作期间，它会触发日志消息，通知相关记录的级联删除，例如聊天消息和关注者。'
- en: Another way to create a record is to duplicate an existing one. The `copy()`
    model method is available for this. It accepts an optional argument with a dictionary,
    which contains values to override when creating the new record.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 创建记录的另一种方法是复制现有的一个。为此，可以使用 `copy()` 模型方法。它接受一个可选的字典参数，其中包含在创建新记录时覆盖的值。
- en: 'For example, to create a new user from the `demo` user, we could use the following:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要从 `demo` 用户创建一个新用户，我们可以使用以下方法：
- en: '[PRE26]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The fields with the `copy=False` attribute won't be automatically copied. To-many
    relational fields have this flag disabled by default, so they won't be copied.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 `copy=False` 属性的字段不会自动复制。多对多关系字段默认禁用此标志，因此它们不会复制。
- en: In the previous sections, we have learned how to access data in recordsets and
    create and write to recordsets. However, there are some field types that deserve
    more attention. In the next section, we will discuss specific techniques for working
    with date and time fields.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经学习了如何在记录集中访问数据以及如何创建和写入记录集。然而，有一些字段类型值得更多关注。在下一节中，我们将讨论处理日期和时间字段的具体技术。
- en: Working with date and time fields
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与日期和时间字段一起工作
- en: In the *Accessing data in recordsets* section, we saw how to read date and time
    values from records. It is common to also need to perform date calculations and
    to convert dates between their native format and string representations. Here,
    we will see how to perform these kinds of operations.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在*访问记录集中的数据*部分，我们看到了如何从记录中读取日期和时间值。通常还需要执行日期计算以及将日期在它们的本地格式和字符串表示之间进行转换。在这里，我们将了解如何执行这些类型的操作。
- en: Odoo provides a few useful functions to create new date and time objects.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo提供了一些有用的函数来创建新的日期和时间对象。
- en: 'The `odoo.fields.Date` object provides these helper functions:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`odoo.fields.Date`对象提供以下辅助函数：'
- en: The `fields.Date.today()` function returns a string with the current date in
    the format expected by the server, using UTC as a reference. This is adequate
    to compute default values. It can be used directly in a date field definition
    by using `default=fields.Date.today`.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Date.today()`函数返回一个字符串，其中包含服务器期望的当前日期格式，使用UTC作为参考。这足以计算默认值。它可以直接在日期字段定义中使用`default=fields.Date.today`。'
- en: The `fields.Date.context_today(record, timestamp=None)` function returns a string
    with the current date in the session's context. The time zone value is taken from
    the record's context. The optional `timestamp` parameter is a `datetime` object
    and will be used instead of the current time if provided.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Date.context_today(record, timestamp=None)`函数返回一个字符串，其中包含会话上下文中的当前日期。时区值取自记录的上下文。可选的`timestamp`参数是一个`datetime`对象，如果提供，将使用它而不是当前时间。'
- en: 'The `odoo.fields.Datetime` objects provide these datetime creation functions:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`odoo.fields.Datetime`对象提供以下日期时间创建函数：'
- en: The `fields.Datetime.now()` function returns a string with the current `datetime`
    in the format expected by the server, using UTC as a reference. This is adequate
    to compute default values. It can be used directly in a `datetime` field definition
    by using `default=fields.Datetime.now`.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Datetime.now()`函数返回一个字符串，其中包含服务器期望的当前`datetime`格式，使用UTC作为参考。这足以计算默认值。它可以直接在`datetime`字段定义中使用`default=fields.Datetime.now`。'
- en: The `fields.Datetime.context_timestamp(record, timestamp)` function converts
    a naive `datetime` value (without time zone) into a time zone-aware `datetime`
    value. The time zone is extracted from the record's context, hence the name of
    the function.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Datetime.context_timestamp(record, timestamp)`函数将一个无知的`datetime`值（没有时区）转换为时区感知的`datetime`值。时区是从记录的上下文中提取的，因此函数名为`context_timestamp`。'
- en: Adding and subtracting time
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加和减去时间
- en: Date objects can be compared and subtracted to find the time elapsed between
    both dates. This time elapsed is a `timedelta` object. A `timedelta` object can
    be added to or subtracted from `date` and `datetime` objects, performing date
    arithmetic.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 日期对象可以进行比较和减法，以找到两个日期之间的时间差。这个时间差是一个`timedelta`对象。`timedelta`对象可以添加到或从`date`和`datetime`对象中减去，执行日期算术。
- en: 'These objects are provided by the Python standard library `datetime` module.
    Here is a sample of the essential operations we can do with them:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对象由Python标准库`datetime`模块提供。以下是我们可以用它们进行的必要操作的示例：
- en: '[PRE27]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: A full reference for the `date`, `datetime`, and `timedelta` data types can
    be found at [https://docs.python.org/3/library/datetime.html](https://docs.python.org/3/library/datetime.html).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`date`、`datetime`和`timedelta`数据类型的完整参考可以在[https://docs.python.org/3/library/datetime.html](https://docs.python.org/3/library/datetime.html)找到。'
- en: The `timedelta` object supports weeks, days, hours, seconds, and more. But it
    doesn't support years or months.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`timedelta`对象支持周、天、小时、秒等。但它不支持年或月。'
- en: 'To perform date arithmetic using months or years, we should use the `relativedelta`
    object. Here is an example of adding one year and one month:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用月份或年来执行日期算术，我们应该使用`relativedelta`对象。以下是一个添加一年一个月的示例：
- en: '[PRE28]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `relativedelta` object supports advanced date arithmetic, including leap
    years and Easter calculations. The documentation for it can be found at [https://dateutil.readthedocs.io](https://dateutil.readthedocs.io).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`relativedelta`对象支持高级日期算术，包括闰年和复活节计算。有关它的文档可以在[https://dateutil.readthedocs.io](https://dateutil.readthedocs.io)找到。'
- en: 'Odoo also provides a few additional functions in the `odoo.tools.date_utils`
    module:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 还在 `odoo.tools.date_utils` 模块中提供了一些额外的函数：
- en: The `start_of(value, granularity)` function returns the start of a time period
    with the specified granularity, which is a string value with one of `year`, `quarter`,
    `month`, `week`, `day`, or `hour`.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_of(value, granularity)` 函数返回具有指定粒度的时间段的开始，这是一个字符串值，可以是 `year`、`quarter`、`month`、`week`、`day`
    或 `hour`。'
- en: The `end_of(value, granularity)` function returns the end of a time period with
    the specified granularity.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end_of(value, granularity)` 函数返回具有指定粒度的时间段的结束。'
- en: The `add(value, **kwargs)` function adds a time interval to the given value.
    The `**kwargs` arguments are to be used by a `relativedelta` object to define
    the time interval. These arguments can be `years`, `months`, `weeks`, `days`,
    `hours`, `minutes`, and so on.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add(value, **kwargs)` 函数向给定值添加时间间隔。`**kwargs` 参数应由 `relativedelta` 对象使用来定义时间间隔。这些参数可以是
    `years`、`months`、`weeks`、`days`、`hours`、`minutes` 等。'
- en: The `subtract(value, **kwargs)` function subtracts a time interval from the
    given value.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subtract(value, **kwargs)` 函数从给定值中减去时间间隔。'
- en: These utility functions are also exposed in the `odoo.fields.Date` and the `odoo.fields.Datetime`
    objects.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实用函数也暴露在 `odoo.fields.Date` 和 `odoo.fields.Datetime` 对象中。
- en: 'Here are a few examples using the previous functions:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些使用先前函数的示例：
- en: '[PRE29]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Converting date and time objects to text representations
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将日期和时间对象转换为文本表示
- en: There will be cases where we need to convert a Python `date` object into a text
    representation. This may be needed, for example, to prepare a user message or
    to format data to send to another system.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会需要将 Python `date` 对象转换为文本表示。这可能需要，例如，准备用户消息或格式化数据以发送到另一个系统。
- en: 'The Odoo field objects provide helper functions to convert the native Python
    objects to string representations:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 字段对象提供辅助函数，用于将原生 Python 对象转换为字符串表示形式：
- en: The `fields.Date.to_string(value)` function converts a `date` object into a
    string in the format expected by the Odoo server.
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Date.to_string(value)` 函数将 `date` 对象转换为 Odoo 服务器期望的格式字符串。'
- en: The `fields.Datetime.to_string(value)` function converts a `datetime` object
    into a string in the format expected by the Odoo server.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Datetime.to_string(value)` 函数将 `datetime` 对象转换为 Odoo 服务器期望的格式字符串。'
- en: 'These use the Odoo server predefined defaults, which are defined in the following
    constants:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这些使用 Odoo 服务器预定义的默认值，这些默认值在以下常量中定义：
- en: '`odoo.tools.DEFAULT_SERVER_DATE_FORMAT`'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`odoo.tools.DEFAULT_SERVER_DATE_FORMAT`'
- en: '`odoo.tools.DEFAULT_SERVER_DATETIME_FORMAT`'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`odoo.tools.DEFAULT_SERVER_DATETIME_FORMAT`'
- en: These map to `%Y-%m-%d` and `%Y-%m-%d %H:%M:%S`, respectively.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这些分别对应于 `%Y-%m-%d` 和 `%Y-%m-%d %H:%M:%S`。
- en: The `date.strftime` and `datetime.strftime` functions accept a format string
    parameter that can be used for other conversions to text.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`date.strftime` 和 `datetime.strftime` 函数接受一个格式字符串参数，可用于其他转换为文本。'
- en: 'For example, consider the following:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下内容：
- en: '[PRE30]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Further details on the available format codes can be found at [https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 可用格式代码的更多详细信息可以在 [https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)
    找到。
- en: Converting text-represented dates and times
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换表示为文本的日期和时间
- en: There are cases where dates arrive formatted as text strings and need to be
    converted to Python `date` or `datetime` objects. This was frequently needed up
    to Odoo 11, where stored dates were read as text representations. Some tools are
    provided to help with this conversion from text into native data types and then
    back into text.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 有时日期以文本字符串的格式到达，需要将其转换为 Python `date` 或 `datetime` 对象。在 Odoo 11 之前，这通常是必需的，其中存储的日期被读取为文本表示。提供了一些工具来帮助将文本转换为原生数据类型，然后再将其转换回文本。
- en: 'To facilitate this conversion between formats, the `fields.Date` and `fields.Datetime`
    objects provide these functions:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于在格式之间进行转换，`fields.Date` 和 `fields.Datetime` 对象提供这些函数：
- en: The `fields.Date.to_date` function converts a string into a `date` object.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Date.to_date` 函数将字符串转换为 `date` 对象。'
- en: The `fields.Datetime.to_datetime(value)` function converts a string into a `datetime`
    object.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields.Datetime.to_datetime(value)` 函数将字符串转换为 `datetime` 对象。'
- en: 'An example of a usage of `to_datetime` is as follows:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`to_datetime` 函数的一个使用示例如下：'
- en: '[PRE31]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding example uses the Odoo internal date format to parse the provided
    string and convert it into a Python `datetime` object.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例使用Odoo内部日期格式解析提供的字符串，并将其转换为Python `datetime`对象。
- en: 'For other date and time formats, the `strptime` method from the `date` and
    `datetime` object can be used:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他日期和时间格式，可以使用`date`和`datetime`对象的`strptime`方法：
- en: '[PRE32]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In most cases, the text-represented time will not be in UTC, as expected by
    the Odoo server. The time must be converted to UTC before it can be stored in
    the Odoo database.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，文本表示的时间不会在UTC中，正如Odoo服务器所期望的那样。在将其存储在Odoo数据库之前，必须将时间转换为UTC。
- en: 'For example, if the user is in the Europe/Brussels timezone (at +1:00 hours
    from UTC) the `2020-12-01 00:30:00` user time should be stored in UTC as `2020-11-30
    23:30:00`. Here is the code recipe for this:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果用户位于欧洲/布鲁塞尔时区（UTC+1小时），则`2020-12-01 00:30:00`的用户时间应存储为UTC的`2020-11-30 23:30:00`。以下是实现此功能的代码示例：
- en: '[PRE33]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This code gets the user time zone name from the context and then uses it to
    convert the naive date to a time zone-aware date. The final step is to convert
    the client time zone date to a UTC date by using `astimezone(pytz.utc)`.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码从上下文中获取用户时区名称，然后使用它将原始日期转换为时区感知的日期。最后一步是通过使用`astimezone(pytz.utc)`将客户端时区日期转换为UTC日期。
- en: We've now learned specific techniques to work with date and time in Odoo. There
    are also specific techniques to work with recordsets and the values stored in
    relational fields, which we'll discuss in the next section.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学习了在Odoo中处理日期和时间的具体技术。还有专门的技术用于处理记录集和存储在关系字段中的值，我们将在下一节中讨论这些技术。
- en: Working with recordsets
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与记录集一起工作
- en: A **recordset** is a collection of records, and Python business logic frequently
    needs to use them. There are several operations that can be performed on recordsets,
    such as mapping and filtering. We can also compose new recordsets by adding or
    removing records. Other common operations are inspecting the contents of a recordset
    to check if a particular record is there or not, for example.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '**记录集**是一组记录，Python业务逻辑经常需要使用它们。可以在记录集上执行几种操作，例如映射和过滤。我们还可以通过添加或删除记录来组合新的记录集。其他常见操作包括检查记录集的内容，以检查特定记录是否存在，例如。'
- en: Changes in Odoo 10
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 10 的变化
- en: Since Odoo 10, recordset manipulation has preserved the record order. This is
    unlike previous Odoo versions, where recordset manipulation was not guaranteed
    to preserve the record order, although addition and slicing maintained the record
    order.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 自Odoo 10以来，记录集操作保留了记录顺序。这与之前的Odoo版本不同，在之前的版本中，记录集操作不保证保留记录顺序，尽管添加和切片保持了记录顺序。
- en: Recordset operations
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录集操作
- en: Recordsets have a few functions available to perform useful actions on them,
    such as **sorting** or **filtering records**.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 记录集有一些可用的函数，可以执行对它们有用的操作，例如**排序**或**过滤记录**。
- en: 'These are the supported functions and attributes:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是支持的函数和属性：
- en: The `recordset.ids` attribute returns a list with the IDs of the recordset elements.
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recordset.ids` 属性返回一个包含记录集元素ID的列表。'
- en: The `recordset.ensure_one()` function checks whether it's a single record (that
    is, a singleton); if it's not, a `ValueError` exception is raised.
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recordset.ensure_one()` 函数检查它是否是单个记录（即单例）；如果不是，将引发`ValueError`异常。'
- en: The `recordset.filtered(<function or str>)` function returns a filtered recordset,
    and this function is a test function to filter records. The argument can instead
    be a string containing a dot-separated sequence of fields to evaluate. The records
    evaluating to a truthy value are selected.
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recordset.filtered(<函数或字符串>)` 函数返回一个过滤后的记录集，这是一个测试函数，用于过滤记录。参数也可以是一个包含点分隔的字段序列的字符串。评估为真值（truthy
    value）的记录将被选中。'
- en: The `recordset.mapped(<function or str>)` function returns a list of values,
    and the function returns a value for each record. The argument can instead be
    a string containing a dot-separated sequence of fields to evaluate to reach the
    field to return. To-many relations are safe to use in the field sequence.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recordset.mapped(<函数或字符串>)` 函数返回一个值列表，并为每条记录返回一个值。参数也可以是一个包含点分隔的字段序列的字符串，用于评估以到达要返回的字段。在字段序列中，多对一关系是安全使用的。'
- en: The `recordset.sorted(<function ot str>)` function returns the recordset with
    a specific element order. The function returns a value for each record, which
    are used to sort the recordset. The argument can instead be a string with the
    name of the field to sort by. Note that a dot-notation sequence of fields is not
    allowed. An optional `reverse=True` argument is also available.
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recordset.sorted(<function ot str>)` 函数返回具有特定元素顺序的记录集。该函数为每个记录返回一个值，这些值用于对记录集进行排序。参数可以是一个字符串，包含要排序的字段名称。请注意，不允许使用字段名称的点表示法序列。还有一个可选的
    `reverse=True` 参数。'
- en: 'Here are some usage examples for these functions:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这些函数的一些使用示例：
- en: '[PRE34]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The composition of a recordset
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录集的组合
- en: 'Recordsets are immutable, meaning that their values can''t be directly modified.
    Instead, we can compose a new recordset based on existing ones. **Slice notation**,
    which is commonly used with Python lists, can be used on recordsets to extract
    a subset of the records. Here are a few examples:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 记录集是不可变的，这意味着它们的值不能直接修改。相反，我们可以根据现有的记录集组合一个新的记录集。**切片表示法**，通常与Python列表一起使用，可以用于记录集以提取记录的子集。以下是一些示例：
- en: '`rs[0]` and `rs[-1]` retrieve the first element and the last element, respectively.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rs[0]` 和 `rs[-1]` 分别检索第一个元素和最后一个元素。'
- en: '`rs[1:]` results in a copy of the recordset without the first element.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rs[1:]` 结果是一个不包含第一个元素的记录集副本。'
- en: '`rs[:1]` returns the first element of the recordset.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rs[:1]` 返回记录集的第一个元素。'
- en: Tip
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'For a fail-safe way to retrieve the first element of a recordset, use `rs[:1]`
    instead of `rs[0]`. The latter results in an error if `rs` is empty, whereas the
    former will just return an empty recordset in this case. Another option is to
    use the `first()` function from the `odoo.fields` module: `fields.first(rs)`.'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了安全地检索记录集的第一个元素，请使用 `rs[:1]` 而不是 `rs[0]`。后者如果 `rs` 为空，将导致错误，而前者在这种情况下将只返回一个空记录集。另一种选择是使用
    `odoo.fields` 模块中的 `first()` 函数：`fields.first(rs)`。
- en: 'Recordsets also support the following set operations:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 记录集还支持以下集合操作：
- en: The  `rs1 | rs2` operation is a *union* set operation and results in a recordset
    with all elements from both recordsets. This is a set-like operation and won't
    result in duplicate elements.
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rs1 | rs2` 操作是一个**并集**集操作，结果是一个包含两个记录集中所有元素的记录集。这是一个类似集合的操作，不会导致重复元素。'
- en: For example, `self.env.user | self.env.user` returns a single record, such as
    `res.users(1,)`.
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，`self.env.user | self.env.user` 返回一个记录，例如 `res.users(1,)`。
- en: The  `rs1 & rs2` operation is an *intersection* set operation and results in
    a recordset with only the elements present in both recordsets.
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rs1 & rs2` 操作是一个**交集**集操作，结果是一个只包含两个记录集中都存在的元素的记录集。'
- en: The  `rs1 - rs2` operation is a *difference* set operation and results in a
    recordset with the `rs1` elements not present in `rs2`.
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rs1 - rs2` 操作是一个**差集**操作，结果是一个不包含在 `rs2` 中的 `rs1` 元素的记录集。'
- en: Tip
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: Recordsets also support the addition operation (`+`), however, it should be
    avoided. It has a different behavior from the union operation (`|`) and allows
    for duplicate elements in a recordset. However, this is rarely what we want. For
    example, `self.env.user + self.env.user` returns two records, such as `res.users(1,
    1)`.
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记录集也支持加法操作（`+`），但是应该避免使用。它与并集操作（`|`）的行为不同，并允许记录集中有重复的元素。然而，这很少是我们想要的。例如，`self.env.user
    + self.env.user` 返回两个记录，例如 `res.users(1, 1)`。
- en: 'We can use these operations directly with a value assignment for shorter notation:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接使用值赋值来使用这些操作，以获得更短的表示法：
- en: The `self.author_ids |= author1` operation adds the `author1` record if it is
    not in the recordset.
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.author_ids |= author1` 操作如果 `author1` 记录不在记录集中，则添加该记录。'
- en: The `self.author_ids &= author1` operation keeps only the records also present
    in the `author1` recordset.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.author_ids &= author1` 操作仅保留也存在于 `author1` 记录集中的记录。'
- en: The `self.author_ids -= author1` operation removes the specific `author1` record
    if it is present in the recordset.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.author_ids -= author1` 操作如果 `author1` 记录存在于记录集中，则删除该特定 `author1` 记录。'
- en: Recordset accumulation
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录集累积
- en: 'In some cases, we want to loop through some logic and accumulate records resulting
    from each iteration of the loop. The ORM way to accumulate a recordset is to start
    with an empty recordset and then add records to it. To get an empty recordset,
    create a reference to the model. For example, consider the following:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们希望遍历一些逻辑并累积循环每次迭代的记录。使用ORM累积记录集的方法是从一个空记录集开始，然后向其中添加记录。要获取一个空记录集，创建对模型的引用。例如，考虑以下内容：
- en: '[PRE35]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The previous code loops three times and on each loop it creates a new partner
    record before accumulating it to the `recs` recordset. As it is a recordset, the
    `recs` variable can be used in cases where recordsets are expected, such as assigning
    a value to a to-many field.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码循环三次，在每次循环中，在将记录累积到 `recs` 记录集之前，都会创建一个新的合作伙伴记录。由于它是一个记录集，`recs` 变量可以在需要记录集的情况下使用，例如，将值分配给多对一字段。
- en: However, accumulating recordsets is not time-efficient and should be avoided
    inside loops. The reason for this is that Odoo recordsets are immutable objects
    and any operation on a recordset implies copying it to get the modified version.
    When appending a record to a recordset, the original recordset is not modified.
    Instead, a copy of it is made with the record appended to it. This copy operation
    consumes time, and the larger the recordset is, the longer it takes.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，累积记录集不是时间效率高的操作，应该避免在循环中使用。原因在于 Odoo 记录集是不可变对象，对记录集的任何操作都意味着复制它以获取修改后的版本。当向记录集中追加记录时，原始记录集不会被修改。相反，会创建一个带有追加记录的它的副本。这种复制操作消耗时间，记录集越大，所需时间越长。
- en: As a result, alternatives should be considered. For the preceding example, we
    could have accumulated all of the record data dictionaries in a Python list and
    then made a single `create()` call to create all of the records. This is possible
    because the `create()` method can accept a list of dictionaries.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，应该考虑其他替代方案。对于前面的例子，我们可以在 Python 列表中累积所有记录的数据字典，然后通过单个 `create()` 调用创建所有记录。这是可能的，因为
    `create()` 方法可以接受字典列表。
- en: 'So, the loop could look like this:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，循环可能看起来像这样：
- en: '[PRE36]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: However, this solution won't work in all cases. Another option is to use a Python
    list to accumulate records. Python lists are mutable objects, and appending elements
    is an efficient operation for them. As Python lists are not actually recordsets,
    this option can't be used where a recordset is expected, for example, an assignment
    to a to-many field.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个解决方案并不适用于所有情况。另一种选择是使用 Python 列表来累积记录。Python 列表是可变对象，对于它们来说，追加元素是一个高效的操作。由于
    Python 列表实际上不是记录集，因此这个选项不能用于需要记录集的地方，例如，对一个多对一字段进行赋值。
- en: 'The following is an example of accumulating records to a Python list:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将记录累积到 Python 列表的示例：
- en: '[PRE37]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The previous examples illustrate a few techniques that can be used in loops
    to build recordsets from individual elements. However, there are many cases where
    the loop is not strictly needed and operations such as `mapped()` and `filtered()`
    can provide more efficient ways to achieve the desired aim.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的例子说明了在循环中可以使用的几种技术，用于从单个元素构建记录集。然而，有许多情况下循环不是严格必要的，`mapped()` 和 `filtered()`
    等操作可以提供更有效的方法来实现目标。
- en: Recordset comparisons
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录集比较
- en: There are cases where we need to compare the content of a recordset to decide
    what further action is needed. Recordsets support the expected comparison operations.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们需要比较记录集的内容以决定需要采取的进一步行动。记录集支持预期的比较操作。
- en: 'To check if a `<rec>` record is an element of a `<my_recordset>` recordset,
    the following code can be used:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 `<rec>` 记录是否是 `<my_recordset>` 记录集中的元素，可以使用以下代码：
- en: '`<rec> in <my_recordset>`'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<rec> in <my_recordset>`'
- en: '`<rec> not in <my_recordset>`'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<rec> not in <my_recordset>`'
- en: 'Recordsets can also be compared to check if one is contained in another. To
    compare two recordsets, use `set1` and `set2`:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 记录集也可以进行比较，以检查一个是否包含在另一个中。要比较两个记录集，使用 `set1` 和 `set2`：
- en: Using `set1 <= set2` and `set1 < set2` returns `True` if all of the elements
    in `set1` are also in `set2`. The `<` operators return `False` if both recordsets
    have the same elements.
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `set1 <= set2` 和 `set1 < set2` 返回 `True`，如果 `set1` 中的所有元素也都在 `set2` 中。如果两个记录集具有相同的元素，`<`
    操作符返回 `False`。
- en: Using `set1 >= set2` and `set1 > set2` returns `True` if all of the elements
    in `set2` are also in `set1`. The `>` operators return `False` if both recordsets
    have the same elements.
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `set1 >= set2` 和 `set1 > set2` 返回 `True`，如果 `set2` 中的所有元素也都在 `set1` 中。如果两个记录集具有相同的元素，`>`
    操作符返回 `False`。
- en: Transactions and low-level SQL
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务和低级 SQL
- en: ORM methods that are called from a client run in a *transaction*. Transactions
    ensure correctness in the case of concurrent writes or failures. During a transaction,
    the data records used are locked, protecting them from other concurrent transactions
    and ensuring that they are not unexpectedly changed. In case of failure, all the
    transaction changes are rolled back, returning to the initial state.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 从客户端调用的ORM方法在*事务*中运行。事务确保在并发写入或失败的情况下正确性。在事务期间，使用的数据记录被锁定，保护它们免受其他并发事务的影响，并确保它们不会被意外更改。在发生故障的情况下，所有事务更改都会回滚，返回到初始状态。
- en: Transaction support is provided by the PostgreSQL database. When an ORM method
    is called from a client, a new transaction is initiated. If an error occurs during
    the method execution, any changes that have been made are reverted. If the method
    execution completes with no errors, then the changes made are committed, making
    them effective and visible to all other transactions.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 事务支持由PostgreSQL数据库提供。当从客户端调用ORM方法时，会启动一个新的事务。如果在方法执行期间发生错误，所做的任何更改都会被撤销。如果方法执行完成后没有错误，则所做的更改会被提交，使其生效并对所有其他事务可见。
- en: This is automatically handled for us, and we usually don't need to worry about
    it. However, in some advanced use cases, it might be useful to have control over
    the current transaction.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 这会自动为我们处理，我们通常不需要担心。然而，在某些高级用例中，可能需要控制当前事务。
- en: Changes in Odoo 13
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 13的变化
- en: Since Odoo 13, database write operations are not done while the method is running.
    Instead, they accumulate in a memory cache, and the actual database writing is
    delayed to the end of the execution of the method, which is performed by a `flush()`
    call that is invoked automatically at that point.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 自Odoo 13以来，数据库写入操作不是在方法运行时执行的。相反，它们累积在内存缓存中，实际的数据库写入被延迟到方法执行的末尾，这是通过在这一点上自动调用的`flush()`调用来完成的。
- en: Controlling database transactions
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制数据库事务
- en: There are cases where controlling the transaction can be useful and the `self.env.cr`
    database cursor can be used for this. An example of this is looping through records
    to perform an operation on each of them, where we want to skip the ones with operation
    errors without affecting the other ones.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些情况下，控制事务可能是有用的，可以使用`self.env.cr`数据库游标来实现这一点。一个例子是遍历记录并对每个记录执行操作，我们希望跳过有操作错误的那些，而不影响其他记录。
- en: 'For this, the object provides the following:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个，对象提供了以下：
- en: '`self.env.cr.commit()` commits the transaction''s buffered write operations,
    making them effective in the database.'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.env.cr.commit()`提交事务的缓冲写入操作，使它们在数据库中生效。'
- en: '`self.env.cr.rollback()` cancels the transaction''s `write` operations since
    the last commit or all of them if no commit was made.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.env.cr.rollback()`取消自上次提交以来的事务`write`操作，如果没有提交，则取消所有操作。'
- en: Tip
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: An Odoo `shell` session mimics a method execution context. This means that the
    database writes are not performed until `self.env.cr.commit()` is called.
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Odoo `shell`会话模拟方法执行上下文。这意味着数据库写入不会在`self.env.cr.commit()`被调用之前执行。
- en: Executing raw SQL
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行原始SQL
- en: SQL can be run directly in the database by using the cursor `execute()` method.
    This takes a string with the SQL statement to run and a second optional argument
    with the values to use as parameters for the SQL.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用游标`execute()`方法直接在数据库中运行SQL。这需要一个要运行的SQL语句的字符串和一个作为SQL参数值的第二个可选参数。
- en: 'The values parameter can be a tuple or a dict. When using a tuple, the parameters
    are replaced with `%s`, and when using a dict, they are replaced with `%(<name>)s`.
    Here are examples of both approaches:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 值参数可以是一个元组或一个字典。当使用元组时，参数被替换为`%s`，而当使用字典时，它们被替换为`%(<name>)s`。以下是两种方法的示例：
- en: '[PRE38]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Any of the previous instructions run the SQL, replacing the parameters and preparing
    a cursor with the results that needs to be fetched. More details on this can be
    found in the `psycopg2` documentation at [https://www.psycopg.org/docs/usage.html#query-parameters](https://www.psycopg.org/docs/usage.html#query-parameters).
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的任何指令都会运行SQL，替换参数并准备一个需要检索结果的游标。更多详情可以在`psycopg2`文档的[https://www.psycopg.org/docs/usage.html#query-parameters](https://www.psycopg.org/docs/usage.html#query-parameters)中找到。
- en: Caution!
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 注意！
- en: With `cr.execute()`, we should not directly compose the SQL query concatenating
    parameters. Doing so is known to be a security risk that can be exploited through
    SQL injection attacks. Always use the `%s` placeholders with the second parameter
    to pass values.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `cr.execute()` 时，我们不应直接通过连接参数来组合 SQL 查询。这样做是已知的，存在安全风险，可能会被 SQL 注入攻击利用。始终使用
    `%s` 占位符与第二个参数一起传递值。
- en: 'To fetch the results, the `fetchall()` function can be used, returning the
    rows'' `tuples`:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取结果，可以使用 `fetchall()` 函数，返回行的 `元组`：
- en: '[PRE39]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `dictfetchall()` function can also be used to retrieve records as dicts:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`dictfetchall()` 函数也可以用来检索记录作为字典：'
- en: '[PRE40]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Tip
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `self.env.cr` database cursor object is an Odoo-specific wrapper around
    the PostgreSQL library, `psycopg2`. This means that the `psycopg2` documentation
    is helpful to understand how to fully use the object:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.env.cr` 数据库游标对象是围绕 PostgreSQL 库 `psycopg2` 的 Odoo 特定包装器。这意味着 `psycopg2`
    文档对于理解如何完全使用该对象是有帮助的：'
- en: '[https://www.psycopg.org/docs/cursor.html](https://www.psycopg.org/docs/cursor.html)'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.psycopg.org/docs/cursor.html](https://www.psycopg.org/docs/cursor.html)'
- en: It is also possible to run `UPDATE` and `INSERT`. The Odoo environment relies
    on a data cache, and it may become inconsistent with the database when these DML
    instructions are executed. For this reason, after running using raw DML, the environment
    cached should be invalidated by using `self.env.cache.invalidate(fnames=None,
    ids=None)`.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以运行 `UPDATE` 和 `INSERT`。Odoo 环境依赖于数据缓存，当执行这些 DML 指令时，可能与数据库不一致。因此，在运行原始 DML
    后，应使用 `self.env.cache.invalidate(fnames=None, ids=None)` 来使环境缓存失效。
- en: '`fnames` is a list with the names of the fields to invalidate and refresh.
    If this is not provided, all fields will be invalidated.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`fnames` 是一个包含要使无效和刷新的字段名称的列表。如果没有提供，则所有字段都将使无效。'
- en: '`ids` is a list with the record IDs to invalidate and refresh. If this is not
    provided, all will be invalidated.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`ids` 是一个包含要使无效和刷新的记录 ID 的列表。如果没有提供，则所有记录都将使无效。'
- en: Caution!
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 注意！
- en: Executing SQL directly in the database bypasses the ORM validations and dependencies
    and can lead to inconsistent data. You should use it only if you're sure of what
    you are doing.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在数据库中执行 SQL 语句绕过了 ORM 验证和依赖，可能导致数据不一致。只有在你确定自己在做什么的情况下才应使用它。
- en: Summary
  id: totrans-393
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to work with model data to perform **CRUD**
    operations—that is, **creating**, **reading**, **updating**, and **deleting**
    data—and all the techniques needed to make use of and manipulate *recordsets*.
    This provides the foundation needed for us to implement our business logic and
    automation code.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用模型数据来执行 **CRUD** 操作——即 **创建**、**读取**、**更新** 和 **删除** 数据——以及使用和操作
    *记录集* 所需的所有技术。这为我们实现业务逻辑和自动化代码提供了所需的基础。
- en: To experiment with the ORM API, we used the Odoo interactive shell. We ran our
    commands in an environment accessible through `self.env`. The environment is similar
    to the one provided in the model method, and so it is a useful playground for
    exploring the Odoo API.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 要实验 ORM API，我们使用了 Odoo 交互式外壳。我们在通过 `self.env` 访问的环境中运行我们的命令。该环境类似于模型方法中提供的环境，因此它是一个探索
    Odoo API 的有用游乐场。
- en: The environment allows us to query data from any Odoo model that is made available
    as a recordset. We learned about the different ways to create recordsets and then
    how to read the data provided, including special data types such as dates, binary
    values, and relational fields.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 环境允许我们从任何作为记录集提供的 Odoo 模型中查询数据。我们学习了创建记录集的不同方法，然后是如何读取提供的数据，包括日期、二进制值和关系字段等特殊数据类型。
- en: Another fundamental capability in Odoo is to write back data. In this chapter,
    we also learned how to create new records, write to existing records, and delete
    records.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 的另一个基本功能是写回数据。在本章中，我们还学习了如何创建新记录、写入现有记录以及删除记录。
- en: We also looked at working with date and time values by using the Python built-in
    tools and a few additional helper functions included in the Odoo framework.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还通过使用 Python 内置工具和 Odoo 框架中包含的一些辅助函数，研究了如何处理日期和时间值。
- en: Recordsets can be manipulated to add elements, filter out records, reorder,
    or accumulate values, as well as to compare them or check for the inclusion of
    particular records. Any of these operations may be needed when implementing business
    logic, and this chapter presented the essential techniques for all of these.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 记录集可以被操作以添加元素、过滤记录、重新排序或累积值，以及比较它们或检查特定记录的包含情况。在实现业务逻辑时，可能需要这些操作中的任何一个，本章介绍了实现所有这些操作的基本技术。
- en: Finally, in some cases, we may need to skip using the ORM model and use low-level
    SQL operations to directly access the database or have finer control over transactions.
    These allow us to address the occasional cases where the ORM model is not the
    best tool for the job.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在某些情况下，我们可能需要跳过使用ORM模型，并使用低级SQL操作直接访问数据库或对事务有更精细的控制。这些操作允许我们解决偶尔出现的ORM模型不是最佳工具的情况。
- en: With all these tools under our belt, we are ready for the next chapter, where
    we will add the business logic layer for our models and implement model methods
    that use the ORM API to automate actions.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握所有这些工具后，我们为下一章做好了准备，下一章我们将为我们的模型添加业务逻辑层，并实现使用ORM API来自动化操作的模式方法。
- en: Further reading
  id: totrans-402
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The official Odoo documentation for recordsets can be found at [https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html).
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 官方Odoo文档中的记录集信息可以在[https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/orm.html)找到。
