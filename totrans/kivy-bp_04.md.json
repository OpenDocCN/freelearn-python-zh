["```py\npip install -U twisted\n\n```", "```py\nif ':' not in message\n    then\n        // it's a CONNECT message\n        add this connection to user list\n    else\n        // it's a chat message\n        nickname, text := message.split on ':'\n        for each user in user list\n            if not the same user:\n                send \"{nickname} said: {text}\"\n```", "```py\nfrom twisted.internet import protocol, reactor\n\ntransports = set()\n\nclass Chat(protocol.Protocol):\n    def dataReceived(self, data):\n        transports.add(self.transport)\n\n        if ':' not in data:\n            return\n\n        user, msg = data.split(':', 1)\n\n        for t in transports:\n            if t is not self.transport:\n                t.write('{0} says: {1}'.format(user, msg))\n\nclass ChatFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return Chat()\n\nreactor.listenTCP(9096, ChatFactory())\nreactor.run()\n```", "```py\npython server.py\n\n```", "```py\ntelnet 127.0.0.1 9096\n\n```", "```py\nCONNECT\nUser A:Hello, world!\n\n```", "```py\nScreenManager:\n    Screen:\n        name: 'login'\n\n        BoxLayout:\n            # other UI controls -- not shown\n\n            Button:\n                text: 'Connect'\n                on_press: root.current = 'chatroom'\n\n    Screen:\n        name: 'chatroom'\n\n        BoxLayout:\n            # other UI controls -- not shown\n\n            Button:\n                text: 'Disconnect'\n                on_press: root.current = 'login'\n\n```", "```py\n#:import RiseInTransition kivy.uix.screenmanager.RiseInTransition\n```", "```py\nScreenManager:\n    transition: RiseInTransition()\n```", "```py\nScreen:\n    name: 'login'\n\n    BoxLayout:\n        orientation: 'vertical'\n\n        GridLayout:\n            Label:\n                text: 'Server:'\n\n            TextInput:\n                id: server\n                text: '127.0.0.1'\n\n            Label:\n                text: 'Nickname:'\n\n            TextInput:\n                id: nickname\n                text: 'Kivy'\n\n        Button:\n            text: 'Connect'\n            on_press: root.current = 'chatroom'\n```", "```py\n<TextInput>:\n    multiline: False\n    padding: [10, 0.5 * (self.height â€“ self.line_height)]\n```", "```py\n<ChatLabel@Label>:\n    text_size: (self.width, None)  # Step 1\n    halign: 'left'\n    valign: 'top'\n    size_hint: (1, None)  # Step 2\n    height: self.texture_size[1]  # Step 3\n\nScrollView:\n    ChatLabel:\n        text: 'Insert very long text with line\\nbreaks'\n```", "```py\nScreen:\n    name: 'chatroom'\n\n    BoxLayout:\n        orientation: 'vertical'\n\n        Button:\n            text: 'Disconnect'\n            on_press: root.current = 'login'\n\n        ScrollView:\n            ChatLabel:\n                id: chat_logs\n                text: 'User says: foo\\nUser says: bar'\n\n        BoxLayout:\n            height: 90\n            orientation: 'horizontal'\n            padding: 0\n            size_hint: (1, None)\n\n            TextInput:\n                id: message\n\n            Button:\n                text: 'Send'\n                size_hint: (0.3, 1)\n```", "```py\n<ScrollView>:\n    canvas.before:\n        Color:\n            rgb: 1, 1, 1\n        Rectangle:\n            pos: self.pos\n            size: self.size\n```", "```py\n#:import C kivy.utils.get_color_from_hex\n\n<ChatLabel@Label>:\n    color: C('#101010')\n```", "```py\nimport select, socket, sys\n```", "```py\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('127.0.0.1', 9096))\ns.send('CONNECT')\n```", "```py\nrlist = (sys.stdin, s)\nwhile 1:\n    read, write, fail = select.select(rlist, (), ())\n    for sock in read:\n        if sock == s:  # receive message from server\n            data = s.recv(4096)\n            print(data)\n        else:  # send message entered by user\n            msg = sock.readline()\n            s.send(msg)\n```", "```py\nfrom kivy.support import install_twisted_reactor\ninstall_twisted_reactor()\n\nfrom twisted.internet import reactor, protocol\n```", "```py\nclass ChatClientFactory(protocol.ClientFactory):\n    protocol = ChatClient\n\n    def __init__(self, app):\n        self.app = app\n```", "```py\nclass ChatClient(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write('CONNECT')\n        self.factory.app.on_connect(self.transport)\n\n    def dataReceived(self, data):\n        self.factory.app.on_message(data)\n```", "```py\nButton:  # Connect button, found on login screen\n    text: 'Connect'\n    on_press: app.connect()\n\nButton:  # Disconnect button, on chatroom screen\n    text: 'Disconnect'\n    on_press: app.disconnect()\n\nTextInput:  # Message input, on chatroom screen\n    id: message\n    on_text_validate: app.send_msg()\n\nButton:  # Message send button, on chatroom screen\n    text: 'Send'\n    on_press: app.send_msg()\n```", "```py\nclass ChatApp(App):\n    def connect(self):\n        host = self.root.ids.server.text\n        self.nick = self.root.ids.nickname.text\n        reactor.connectTCP(host, 9096,\n                           ChatClientFactory(self))\n```", "```py\n# From here on these are methods of the ChatApp class\ndef on_connect(self, conn):\n    self.conn = conn\n    self.root.current = 'chatroom'\n```", "```py\ndef send_msg(self):\n    msg = self.root.ids.message.text\n    self.conn.write('%s:%s' % (self.nick, msg))\n    self.root.ids.chat_logs.text += ('%s says: %s\\n' %\n                                     (self.nick, msg))\n    self.root.ids.message.text = ''\n```", "```py\ndef on_message(self, msg):\n    self.root.ids.chat_logs.text += msg + '\\n'\n```", "```py\n    def disconnect(self):\n        if self.conn:\n            self.conn.loseConnection()\n            del self.conn\n        self.root.current = 'login'\n        self.root.ids.chat_logs.text = ''\n```", "```py\ncolors = ['7F8C8D', 'C0392B', '2C3E50', '8E44AD', '27AE60']\n\nclass Chat(protocol.Protocol):\n    def connectionMade(self):\n        self.color = colors.pop()\n        colors.insert(0, self.color)\n```", "```py\nimport itertools\ncolors = itertools.cycle(('7F8C8D', 'C0392B', '2C3E50', '8E44AD', '27AE60'))\ndef connectionMade(self):\n    self.color = colors.next()\n    # next(colors) in Python 3\n```", "```py\nfor t in transports:\n    if t is not self.transport:\n        t.write('[b][color={}]{}:[/color][/b] {}'\n                .format(self.color, user, msg))\n```", "```py\ndef send_msg(self):\n    msg = self.root.ids.message.text\n    self.conn.write('%s:%s' % (self.nick, msg))\n    self.root.ids.chat_logs.text += (\n        '[b][color=2980B9]{}:[/color][/b] {}\\n'\n        .format(self.nick, msg))\n```", "```py\n<ChatLabel@Label>:\n    markup: True\n```", "```py\ndef esc_markup(msg):\n    return (msg.replace('&', '&amp;')\n            .replace('[', '&bl;')\n            .replace(']', '&br;'))\n```", "```py\nt.write('[b][color={}]{}:[/color][/b] {}'\n        .format(self.color, user,\n                esc_markup(msg)))\n```", "```py\nself.root.ids.chat_logs.text += (\n    '[b][color=2980B9]{}:[/color][/b] {}\\n'\n    .format(self.nick, esc_markup(msg)))\n```"]