- en: Chapter 17. Luciano Ramalho
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Luciano Ramalho](img/B08180_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Luciano Ramalho is a Brazilian software engineer and a fellow of the Python
    Software Foundation (PSF). He is a technical principal at ThoughtWorks, a design
    software company. Luciano previously taught Python web development in the Brazilian
    banking, media, and government sectors. He is the author of *Fluent Python* and
    served as a council member for the Brazilian Python Association for four years.
    Luciano regularly speaks at international Python conferences. He co-owns Python.pro.br,
    a training company and co-founded Garoa Hacker Clube, the first hackerspace in
    Brazil.
  prefs: []
  type: TYPE_NORMAL
- en: '**Discussion themes: Python books, APyB, v2.7/v3.x.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Catch up with Luciano Ramalho here: @ramalhoorg**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Mike Driscoll**: Could you give a little background about yourself, Luciano?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Luciano Ramalho**: Sure, I''m a self-taught programmer. I was born in Brazil
    in 1963\. When I was 15 years old, in 1978, I saw the Lunar Lander game running
    on a HP-25 calculator and became excited about the possibilities of combining
    programmable calculators and board games, which were my main geek passion at the
    time.'
  prefs: []
  type: TYPE_NORMAL
- en: Later that year, my father's employer gave him a TI-58 calculator, which I promptly
    borrowed and never returned. My first interesting program was a port of the Lunar
    Lander from the HP to the TI language (both were assembly-like languages).
  prefs: []
  type: TYPE_NORMAL
- en: In 1981 I spent a year as an exchange student in Harrisburg, IL, and I was one
    of two volunteers that taught ourselves to program on the Apple II computers that
    the high school library had just received; no one else in the school knew what
    to do with them.
  prefs: []
  type: TYPE_NORMAL
- en: After I came back to Brazil, my first job was translating Apple II software
    manuals to Portuguese, and my second job was teaching programming, which became
    a lifelong passion for me.
  prefs: []
  type: TYPE_NORMAL
- en: '**Luciano Ramalho: ''My second job was teaching programming, which became a
    lifelong passion for me.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since then, I've spent about half of my time being a programmer and half of
    my time being a teacher. I worked as a programmer for 8-bit educational software,
    CP/M standalone business apps, Windows client-server apps, Windows and macOS CD-ROMs,
    and on backend systems running on Unix for some of the earliest web portals in
    Brazil.
  prefs: []
  type: TYPE_NORMAL
- en: I had a couple of small companies (a desktop publishing bureau, a software house
    and a training company) and now I am proud to be a principal consultant at ThoughtWorks.
  prefs: []
  type: TYPE_NORMAL
- en: Today, the kind of programming that I like to do the most, is example code to
    illustrate new concepts in languages, APIs, and platforms. I'm very interested
    in DX (developer experience) as well. I really enjoy the challenge of coding the
    simplest example that can demonstrate an idea and still be interesting (not just
    `foo` and `bar` abstractions). That's why I call myself *a stand-up programmer*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Why did you become a programmer?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: I became a programmer because I enjoy programming as much as I
    enjoy playing board games.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I see a very strong parallel: the keywords and functions provided by a language
    are like the playing pieces and other game resources at your disposal, which you
    must arrange to achieve the desired effect. The language semantics are like the
    game rules. If a language has syntactic macros, then that''s like being able to
    create completely new pieces during a game - a very powerful ability.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Luciano Ramalho: ''I became a programmer because I enjoy programming as much
    as I enjoy playing board games.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Besides being fun, programming lets us have a huge impact in the world, and
    I try to always have a positive impact.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Why Python?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: I learned more than a dozen languages before Python, and I''ve
    studied at least half a dozen after it. But Python is the one that I''ve used
    for the longest time throughout my career.'
  prefs: []
  type: TYPE_NORMAL
- en: Python fits my brain, as the saying goes. I find it elegant yet practical, simple
    but not simplistic, consistent but not rigid or limiting. After a while, I also
    made many friends in the Python community, so that became a huge reason to stick
    with it, even when sometimes I longed for something different.
  prefs: []
  type: TYPE_NORMAL
- en: I stumbled upon Python in 1998 when I was learning the OO features of Perl 5,
    which I'd been using for web development. At the time, whenever someone in the
    Perl mailing lists asked about the OO-way of doing something, comparisons to Python
    came up. After two or three such mentions of Python, I decided to look it up.
  prefs: []
  type: TYPE_NORMAL
- en: '**Luciano Ramalho: ''I read Guido van Rossum''s tutorial and fell in love with
    the language. It combined the best qualities of Perl and Java.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I read Guido van Rossum's tutorial and fell in love with the language. It combined
    the best qualities of Perl and Java, the two languages that I was using most at
    the time. Python was a *real* OO language with a decent class library, like Java,
    but it was also concise and practical, like Perl, and more readable, consistent,
    and pleasant to use than both. I think that Python is a masterpiece of language
    design.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What do you think makes Python such a good language for AI and
    machine learning?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: The most important and immediate reason is that the NumPy and
    SciPy libraries enable projects such as scikit-learn, which is currently almost
    a de facto standard tool for machine learning.'
  prefs: []
  type: TYPE_NORMAL
- en: The reason why NumPy, SciPy, scikit-learn, and so many other libraries were
    created in the first place is because Python has some features that make it very
    attractive for scientific computing. Python has a simple and consistent syntax
    which makes programming more accessible to people who are not software engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason is operator overloading, which enables code that is readable
    and concise. Then there's Python's buffer protocol (PEP 3118), which is a standard
    for external libraries to interoperate efficiently with Python when processing
    array-like data structures. Finally, Python benefits from a rich ecosystem of
    libraries for scientific computing, which attracts more scientists and creates
    a virtuous cycle.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What could make Python a better language for AI and machine learning?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: The biggest challenge for AI and machine learning projects in
    Python is deploying to production with all of the external dependencies required
    by such projects. Containers help a lot, but it''s never easy.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: How did you become an author, Luciano?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: *Fluent Python* was the fourth book that I started, but the first
    that I finished. Writing a book takes a lot of time and it''s easy to underestimate
    the required effort.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In 2013, I submitted a talk proposal for OSCON and was accepted. While I was
    at the conference, I approached the O''Reilly booth with four slides of a presentation
    on my iPad: book title, about me, and two slides of outline. They were interested
    and sent me the template for a book proposal. A couple of months later, I had
    signed a contract and got a small advance.'
  prefs: []
  type: TYPE_NORMAL
- en: I worked on the book part-time initially. During that time, Meghan Blanchette,
    the editor, was the only person reading it. She gave me some very valuable guidance,
    especially with the flow of the book.
  prefs: []
  type: TYPE_NORMAL
- en: About nine months into the project, the first deadline was approaching and I
    would not make it. The O'Reilly contract included a clause that allowed a co-author
    to be imposed if I had a problem delivering. But *Fluent Python* was a very personal
    project for me, so I decided to quit all of my other freelance engagements and
    just focus on the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'I worked for another nine months, probably around 50 hours a week, and finished
    it. During that second half, the tech editors joined the project. The reviewers
    were all people that I admire: Alex Martelli, Anna Ravenscroft, Lennart Regebro,
    and Leonardo Rochael. Victor Stinner focused on the chapter about asyncio, which
    was a new topic for the rest of us. They all gave me a lot of excellent feedback
    and encouragement.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What did you learn from writing *Fluent Python*?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: I learned a lot about Python. While writing, I explored parts
    of the standard library that I had never visited before.'
  prefs: []
  type: TYPE_NORMAL
- en: I grokked uniquely Pythonic language features like attribute descriptors and
    `yield from` expressions. I finally discovered why a Python program on Windows
    has no problem printing to cmd.exe console, but crashes with `UnicodeEncodeError`
    when its output is redirected to a file.
  prefs: []
  type: TYPE_NORMAL
- en: I learned a lot more about Python. I also learned the value of being yourself.
    Being passionate about a subject and knowing it well are good foundations for
    creating content.
  prefs: []
  type: TYPE_NORMAL
- en: '**Luciano Ramalho: ''I also learned the value of being yourself. Being passionate
    about a subject and knowing it well are good foundations for creating content.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I'm an avid reader, which is essential for writing. I am also very opinionated
    about language design. As a reader, I had been annoyed by technical authors who
    mixed facts and opinions in their writing, so I came up with the idea of the Soapbox
    sections at the end of each chapter. I could offer my opinions, while also making
    it clear to readers that they could skip that part. The Soapboxes were fun to
    write, and several reviewers enjoyed them as well. So that's an example of how
    being myself worked very well.
  prefs: []
  type: TYPE_NORMAL
- en: The Python community is made up of people who love to share what they know,
    and they deserve credit. So I kept notes of all the important references that
    I used during the book, including not only other books, but also blog posts, videos,
    and even StackOverflow answers. I shared these notes with readers in the *Further
    Reading* sections. That is also a feature of the book that some reviewers have
    praised.
  prefs: []
  type: TYPE_NORMAL
- en: '****Luciano Ramalho: ''The Python community is made up of people** **who love
    to share what they know, and they deserve credit. So I kept notes of all the important
    references.''****'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: On a personal level, writing *Fluent Python* and witnessing its success in reviews
    and sales was great for my self-esteem, after I had failed at writing a book on
    three prior attempts. So I guess one lesson is that it pays to persevere and go
    all-in when you believe in a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some readers have offered me a lot of great feedback, and the most prolific
    of them became a good friend: Elias Dorneles. So another lesson is the importance
    of being open to feedback, and offering people the opportunity to give it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What would you do differently if you could start over?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: I''d write a shorter book! My original plan was to write 300 pages,
    but in the end it came to 770.'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, I could have written five shorter books, because each part of
    *Fluent Python* from II to VI works pretty well independently. But the resulting
    volume set would have been more expensive for readers, and perhaps would not have
    resulted in the same level of recognition and sales.
  prefs: []
  type: TYPE_NORMAL
- en: I have no regrets, because I've come to believe that whatever happens is the
    only thing that could have. I learned this from author Bruce Eckel, as one of
    the rules for open space events.
  prefs: []
  type: TYPE_NORMAL
- en: '**Luciano Ramalho: ''Whatever happens is the only thing that could have. I
    learned this from author Bruce Eckel, as one of the rules for open space events.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Driscoll**: How did you end up co-founding the Brazilian Python Association?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: The Brazilian Python community grew organically around a couple
    of mailing lists and a wiki created by Osvaldo Santana. I was already using Python
    as my main language, and I had written a tutorial for a magazine, but it was Osvaldo''s
    wiki that encouraged me to engage with the wider community.'
  prefs: []
  type: TYPE_NORMAL
- en: Many of us would get together every year at FISL, which was the largest FOSS
    conference in Brazil. It's incredible how meeting face-to-face, and going out
    for beers, can strengthen a community that started online.
  prefs: []
  type: TYPE_NORMAL
- en: '**Luciano Ramalho: ''It''s incredible how meeting face-to-face, and going out
    for beers, can strengthen a community that started online.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Rodrigo Senra organized the first Brazilian Python conference, and Jean Ferri
    the second. Running those conferences without a formal support entity was difficult:
    the organizers couldn''t sign contracts, issue invoices, or collect sponsorships
    in the name of a vague community. So at one FISL, we decided to create the Brazilian
    Python Foundation.'
  prefs: []
  type: TYPE_NORMAL
- en: We faced months of bureaucracy when we learned that foundation is a reserved
    word under Brazilian law. In order to be a foundation, we needed a five-year plan
    of action. We needed some staff and an endowment large enough to fund our staff
    and all of our plans for at least five years. So we had to change our plans and
    become the more humble Brazilian Python Association (APyB)!
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we succeeded due to our perseverance and the resourcefulness of
    Dorneles Tremea, our first managing director and my successor as president of
    the APyB.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: I''ve heard some people challenge the value of APyB. What''s
    your response to such criticism?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: Yes, I know that some people have questioned the usefulness of
    APyB, which does demand some time from its volunteer president and directors after
    all. My main argument in the defense of APyB is that we tried doing without it
    and it was worse.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So what open source projects are you working on right now?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: Actually, none at this time! I did start the `pingo` project,
    which is a device-independent API for programming devices with GPIO interfaces.
    But I only managed to attract Lucas Vido as a solid contributor. Both of us got
    busy with other things, so the project is abandoned right now. I''d like to reboot
    it, but I don''t know when I''ll be able to do that.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the code and slides from my conference talks and tutorials is open content.
    I have over 50 presentations shared for anyone who wants to see them: [https://speakerdeck.com/ramalho](https://speakerdeck.com/ramalho).
    All of these talks are also on GitHub in the `/fluentpython organization` and
    in my personal GitHub account (`/ramalho`.)'
  prefs: []
  type: TYPE_NORMAL
- en: I've started writing open content for learning Go. It's more likely that my
    next open source project will be a book or some other content, rather than applications
    or libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Oh, that''s great that you''re thinking about writing another
    book! So do you have any advice for aspiring authors?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: Well, I''m no economist, but I think that writing books is just
    as likely to pay your bills as playing the guitar, so don''t do it for the money,
    but for the love of your subject.'
  prefs: []
  type: TYPE_NORMAL
- en: Also, be ready for a very long journey. Have savings, so you can take some time
    off just to write if needed. Two very successful authors that I know have told
    me that most of the experiences that they have had with co-authors were bad. So
    I guess there's no easy way out of the long and mostly lonely journey of being
    an author!
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Have you considered self-publishing at all?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: Yes, I have, but while there are several self-publishing alternatives,
    I think that it''s worthwhile to do at least your first book with a good publisher
    if you can. The first reason is all of the support that you get from a good editor
    and your technical reviewers. The second reason is the recognition that you get
    from having a well-known brand promoting your work and adorning its cover.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: When you''re writing a book, do you create the code before you
    start writing or not?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: I believe that code examples are the heart of any programming
    book: you can''t have an excellent book without excellent examples. David Geary,
    the author of the classic *Graphic Java* books, once wrote that writing a programming
    book is essentially coming up with enlightening examples, then surrounding them
    with explanations. I took his advice and it worked very well for me.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Luciano Ramalho: ''I believe that code examples are the heart of any programming
    book: you can''t have an excellent book without excellent examples.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So while the hardest part for me is certainly coming up with the examples, I
    had created a lot of the code before I started writing. I definitely didn't start
    with an empty text file and a blank screen!
  prefs: []
  type: TYPE_NORMAL
- en: Many of the examples and explanations that are in *Fluent Python* are ones that
    I'd developed over more than 10 years of teaching and speaking about Python. I
    did also create many more specifically for the book, and in fact many examples
    that I never used in the book, because they either became too complicated, or
    I had then thought of better examples.
  prefs: []
  type: TYPE_NORMAL
- en: '**Luciano Ramalho: ''Here is a great learning point for all Python teachers:
    we must learn to let go of our examples and writing.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here is a great learning point for all Python teachers: we must learn to let
    go of our examples and writing, when necessary, no matter how much work we''ve
    put into them. So when, as teachers and authors, we find a better approach, or
    we realize that we''ve just gone too far, then it''s important that we let go
    of our examples and move on for our readers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I know already that I will try to drop even more material like this when I
    work on my next book. I also think about this as a teacher. The writer and aviator
    Antoine de Saint-Exupéry said in the context of airplane design: "It seems that
    perfection is attained not when there is nothing more to add, but when there is
    nothing more to remove."'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What are you most excited about in Python today?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: Besides the runaway success of Python in data science, I am also
    excited about the potential of the `async/await` keywords to enable asynchronous
    programming, not only through the standard `asyncio` library, but also through
    third-party libraries such as Trio.'
  prefs: []
  type: TYPE_NORMAL
- en: Regarding Python 3.7, the addition that most excites me is PEP 557, which introduces
    a standard way of creating classes with explicit data attributes. This is something
    that libraries such as ORMs had to reinvent repeatedly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What do you think about Python 2.7? Should people move to the
    latest version?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: Yes, people should totally move over to Python 3.6\. The language
    is evolving nicely and most libraries have been ported for years now. However,
    not everyone can afford to make the move.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Luciano Ramalho: ''Yes, people should totally move over to Python 3.6\. The
    language is evolving nicely and most libraries have been ported for years now.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The trickiest part is sorting out the issue with `strings` versus `bytes`. This
    is a very positive change, but one that can't be automated, because in Python
    2.7 `strings` are sometimes handled as human text and sometimes as `raw bytes`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What changes would you like to see in future Python releases?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ramalho**: I''d like to see the Global Interpreter Lock (GIL) gone, so that
    we could leverage all processor cores when using `threads` for CPU intensive work.
    Unfortunately, the latest effort to do so, by Larry Hastings, seems to have stalled
    in mid-2017.'
  prefs: []
  type: TYPE_NORMAL
- en: The main problem is that removing the GIL would break most (or all, depending
    on who you ask) external libraries that rely on the Python/C API. One fact that
    most people don't realize is that without the GIL, writing an extension for Python
    in another language would be much more complicated. So, although we wish that
    the GIL did not exist, in reality it is a cornerstone of the success of Python.
  prefs: []
  type: TYPE_NORMAL
- en: Eric Snow, a Python core developer, wrote that the GIL is more of a PR issue.
    Yes, it is possible to write highly concurrent I/O-bound code using Python `threads`
    or asynchronous libraries. But when such a project grows, or is heavily stressed,
    CPU-intensive bottlenecks emerge. Those bottlenecks are extremely hard to find
    in threaded code, but they slow down everything because of the GIL.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe only a fraction of Python projects is seriously affected by the GIL today,
    but CPUs are getting more cores and not getting faster, so leveraging multiple
    cores is becoming more and more important ([https://mail.python.org/pipermail/python-ideas/2015-June/034177.html](https://mail.python.org/pipermail/python-ideas/2015-June/034177.html)
    or [https://lwn.net/Articles/650521/)](https://lwn.net/Articles/650521/).
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Thank you, Luciano Ramalho.'
  prefs: []
  type: TYPE_NORMAL
