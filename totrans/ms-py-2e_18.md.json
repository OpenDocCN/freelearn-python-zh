["```py\n{distribution}-{version}[-{build tag}]-{python tag}-{abi tag}-{platform tag}.whl \n```", "```py\n$ pip3 install --no-binary ... \n```", "```py\n$ apt install python3-pip \n```", "```py\n$ pip3 install --upgrade pip setuptools wheel \n```", "```py\n$ poetry new .\nCreated package t_00_basic_pyproject in . \n```", "```py\nREADME.rst\npyproject.toml\nt_00_basic_pyproject\nt_00_basic_pyproject/__init__.py\ntests\ntests/__init__.py\ntests/test_t_00_basic_pyproject.py \n```", "```py\n[tool.poetry]\nname = \"T_00_basic_pyproject\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick van Hattem <Wolph@wol.ph>\"]\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\" \n```", "```py\n$ git config --global user.email 'your@email.tld'\n$ git config --global user.name 'Your Name' \n```", "```py\n$ pip3 install --editable <package-directory> \n```", "```py\n$ pip3 install --editable . \n```", "```py\n$ poetry install \n```", "```py\n$ poetry shell\n(name-of-your-project) $ \n```", "```py\n[tool.poetry]\n...\npackages = [\n    {include=\"T_00_basic_pyproject\"},\n    {include=\"some_directory/**/*.py\"},\n] \n```", "```py\n[tool.poetry]\n...\ninclude = [\"CHANGELOG.rst\"]\nexclude = [\"T_00_basic_pyproject/local.py\"] \n```", "```py\n[tool.poetry.scripts]\nour_command = 'T_00_basic_pyproject.main:run' \n```", "```py\n$ poetry add progressbar2\nUsing version ^4.0.0 for progressbar2\n... \n```", "```py\n[tool.poetry.dependencies]\n...\nprogressbar2 = \"^4.0.0\" \n```", "```py\n$ poetry update\nUpdating dependencies\n...\nPackage operations: 0 installs, 1 update, 0 removals\n  â€¢ Updating progressbar2 (3.5.0 -> 3.55.0) \n```", "```py\n$ poetry build\nBuilding T_00_basic_pyproject (0.1.0)\n  - Building sdist\n  - Built T_00_basic_pyproject-0.1.0.tar.gz\n  - Building wheel\n  - Built T_00_basic_pyproject-0.1.0-py3-none-any.whl \n```", "```py\nbuild = \"build_extension.py\" \n```", "```py\nimport pathlib\nimport setuptools\n\n# Get the current directory\nPROJECT_PATH = pathlib.Path(__file__).parent\n\n# Create the extension object with the references to the C source\nsum_of_squares = setuptools.Extension('sum_of_squares', sources=[\n    # Get the relative path to sum_of_squares.c\n    str(PROJECT_PATH / 'sum_of_squares.c'),\n])\n\ndef build(setup_kwargs):\n    setup_kwargs['ext_modules'] = [sum_of_squares] \n```", "```py\n$ poetry build\nBuilding T_01_pyproject_extensions (0.1.0)\n  - Building sdist\n  - Built T_01_pyproject_extensions-0.1.0.tar.gz\n  - Building wheel\nrunning build\nrunning build_py\ncreating build\n...\nrunning build_ext\nbuilding 'sum_of_squares' extension\n... \n```", "```py\n$ pip3 install -U pip wheel setuptools \n```", "```py\n$ pip3 install build\n... \n```", "```py\nimport setuptools\n\nif __name__ == '__main__':\n    setuptools.setup(\n        name='T_02_basic_setup_py',\n        version='0.1.0',\n        packages=setuptools.find_packages(),\n        url='https://wol.ph/',\n        author='Rick van Hattem',\n        author_email='wolph@wol.ph',\n    ) \n```", "```py\n[metadata]\nname = T_03_basic_setup_cfg\nversion = 0.1.0\nurl='https://wol.ph/',\nauthor='Rick van Hattem',\nauthor_email='wolph@wol.ph',\n\n[options]\npackages = find: \n```", "```py\n[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\" \n```", "```py\n$ python3 setup.py develop \n```", "```py\n$ pip3 install -e . \n```", "```py\nsetuptools.find_packages(\n    include=['a', 'b', 'c.*'],\n    exclude=['a.excluded'],\n) \n```", "```py\n[options]\npackages = find:\n\n[options.packages.find]\ninclude =\n    a\n    b\n    c.*\nexclude = a.excluded \n```", "```py\n setuptools.setup(\n        ...\n        include_package_data=True,\n    ) \n```", "```py\n# Include all documentation files\ninclude-recursive *.rst\ninclude LICENSE\n\n# Include docs and tests\ngraft tests\ngraft docs\n\n# Skip compiled python files\nglobal-exclude *.py[co]\n\n# Remove all build directories\nprune docs/_build\nprune build\nprune dist \n```", "```py\n setuptools.setup(\n        ...\n        package_data={\n            # Include all documentation files\n            '': ['*.rst'],\n\n            # Include docs and tests\n            'tests': ['*'],\n            'docs': ['*'],\n        },\n        exclude_package_data={\n            '': ['*.pyc', '*.pyo'],\n            'dist': ['*'],\n            'build': ['*'],\n        },\n    ) \n```", "```py\n[options]\n...\ninclude_package_data=True,\n\n[options.package_data]\n# Include all documentation files\n* = *.rst\n\n# Include docs and tests\ntests = *\ndocs = *\n\n[options.exclude_package_data]\n* = *.pyc, *.pyo\ndist = *\nbuild = * \n```", "```py\n$ pip3 install \"portalocker[redis]\" \n```", "```py\nsetuptools.setup(\n    ...\n    setup_requires=['pytest-runner'],\n    install_requires=['portalocker'],\n    extras_require={\n        'docs': ['sphinx'],\n        'tests': ['pytest'],\n    },\n) \n```", "```py\n[build-system]\nrequires =\n    setuptools\n    wheel\n\n[options]\ninstall_requires =\n    portalocker\n\n[options.extras_require]\ndocs = sphinx\ntests = pytest \n```", "```py\nsetuptools.setup(\n...\n    entry_points={\n        'console_scripts': [\n            'our_command = T_02_basic_setup_py.main:run',\n        ],\n    }, \n```", "```py\n[options.entry_points]\nconsole_scripts =\n    our_command = T_03_basic_setup_cfg.main:run \n```", "```py\n$ python3 setup.py our_command \n```", "```py\n[options.entry_points]\nour.custom.plugins =\n    some_plugin = T_03_basic_setup_cfg.some_plugin:run \n```", "```py\n>>> from importlib import metadata\n\n>>> metadata.entry_points()['our.custom.plugins']\n[EntryPoint(name='some_plugin', value='...some_plugin:run', ...] \n```", "```py\n$ python3 setup.py build sdist bdist_wheel\nrunning build\n...\ncreating 'dist/T_02_basic_setup-0.1.0-py3-none-any.whl' and adding ... \n```", "```py\n$ python3 -m build\n* Creating venv isolated environment...\n...\nSuccessfully built T_02_basic_setup-0.1.0.tar.gz and T_02_basic_setup-0.1.0-py3-none-any.whl \n```", "```py\n setuptools.setup(\n        ...\n        project_urls=dict(\n            docs='https://progressbar-2.readthedocs.io/',\n        ),\n    ) \n```", "```py\n[options]\nproject_urls=\n    docs=https://progressbar-2.readthedocs.io/ \n```", "```py\n[tool.poetry.urls]\ndocs='https://progressbar-2.readthedocs.io/' \n```", "```py\n$ poetry config repositories.testpypi https://test.pypi.org/simple/\n$ poetry config pypi-token.testpypi <token> \n```", "```py\n$ poetry publish --repository=testpypi \n```", "```py\n$ twine upload --repository testpypi dist/* \n```", "```py\nimport setuptools\n\nsum_of_squares = setuptools.Extension('sum_of_squares', sources=[\n    # Get the relative path to sum_of_squares.c\n    str(PROJECT_PATH / 'sum_of_squares.c'),\n])\n\nsetuptools.setup(\n    name='T_04_C_extensions',\n    version='0.1.0',\n    ext_modules=[sum_of_squares],\n) \n```", "```py\n#ifdef DEBUG\n/* your debug code here */\n#endif \n```", "```py\nexts = [(Extension(\"PIL._imaging\", files, libraries=libs,\n    define_macros=defs))] \n```", "```py\nif feature.freetype:\n    exts.append(Extension(\n        \"PIL._imagingft\", [\"_imagingft.c\"], libraries=[\"freetype\"])) \n```", "```py\nfrom setuptools import setup\nfrom Cython.Build import cythonize\n\nsetup(\n    ext_modules = cythonize(\"src/*.pyx\")\n) \n```", "```py\n$ python3 setup.py build\nTraceback (most recent call last):\n  File \"setup.py\", line 2, in <module>\n    import Cython\nImportError: No module named 'Cython' \n```", "```py\nimport setuptools\n\nsetuptools.setup(\n    name='T_05_cython',\n    version='0.1.0',\n    ext_modules=[\n        setuptools.Extension(\n            'sum_of_squares',\n            sources=['T_05_cython/sum_of_squares.pyx'],\n        ),\n    ],\n    setup_requires=['cython'],\n) \n```", "```py\n$ python3 setup.py build\nrunning build\nrunning build_ext\ncythoning T_05_cython/sum_of_squares.pyx to T_05_cython/sum_of_squares.c\nbuilding 'sum_of_squares' extension\n... \n```", "```py\n$ python3\n>>> import pyximport\n\n>>> pyximport.install()\n(None, <pyximport.pyximport.PyxImporter object at ...>)\n\n>>> from T_05_cython import sum_of_squares\n\n>>> sum_of_squares.sum_of_squares(10)\n14 \n```", "```py\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test(self):\n        pass \n```", "```py\n$ python3 -m unittest -v test\nrunning test\n... \n```", "```py\n[options.extras_require]\ntests = pytest \n```", "```py\n$ pip3 install -e '.[tests]' \n```", "```py\n$ py.test \n```"]