["```py\nfrom google.appengine.api import channel\nfrom utils import get_notification_client_id\nimport json\n```", "```py\nclass GetTokenHandler(webapp2.RequestHandler):\n    def get(self):\n        user = users.get_current_user()\n        if user is None:\n            self.abort(401)\n\n        client_id = get_notification_client_id(user)\n        token = channel.create_channel(client_id, 60)\n\n        self.response.headers['Content-Type'] = 'application/json'\n        self.response.write(json.dumps({'token': token}))\n```", "```py\ndef get_notification_client_id(user):\n    return 'notify-' + user.user_id()\n```", "```py\napp = webapp2.WSGIApplication([\n    (r'/', MainHandler),\n    (r'/media/(?P<file_name>[\\w.]{0,256})', MediaHandler),\n    (r'/shrink', ShrinkHandler),\n    (r'/shrink_all', ShrinkCronJob),\n    (r'/toggle/(?P<note_key>[\\w\\-]+)/(?P<item_index>\\d+)', ToggleHandler),\n    (r'/_ah/mail/create@book-123456\\.appspotmail\\.com', CreateNoteHandler),\n    (r'/notify_token', GetTokenHandler),\n], debug=True)\n```", "```py\ndef receive(self, mail_message):\n    email_pattern = re.compile(r'([\\w\\-\\.]+@(\\w[\\w\\-]+\\.)+[\\w\\-]+)')\n    match = email_pattern.findall(mail_message.sender)\n    email_addr = match[0][0] if match else ''\n\n    try:\n        user = users.User(email_addr)\n        user = self._reload_user(user)\n    except users.UserNotFoundError:\n        return self.error(403)\n\n    title = mail_message.subject\n    content = ''\n    for content_t, body in mail_message.bodies('text/plain'):\n        content += body.decode()\n\n    attachments = getattr(mail_message, 'attachments', None)\n\n    self._create_note(user, title, content, attachments)\n    channel.send_message(get_notification_client_id(user),\n                        json.dumps(\"A new note was created! \"\n                                   \"Refresh the page to see it.\"))\n```", "```py\n  <!-- Javascript here -->\n  <script type=\"text/javascript\" src=\"img/jsapi\"></script>\n</body>\n</html>\n```", "```py\n(function(window){\n \"use strict\"; \n\n var a = 'foo';\n\n function private(){\n // do something\n } \n\n})(this);\n\n```", "```py\n <!-- Javascript here -->\n <script type=\"text/javascript\" src=\"img/jsapi\"></script>\n <script type=\"text/javascript\" src=\"img/client.js\"></script>\n</body>\n</html>\n```", "```py\n(function (window) {\n  \"use strict\";\n\n  // get channel token from the backend and connect\n  var init = function() {\n    var tokenReq = new XMLHttpRequest();\n    tokenReq.onload = function () {\n\n      var token = JSON.parse(this.responseText).token;\n      console.log(token);\n\n    };\n    tokenReq.open(\"get\", \"/notify_token\", true);\n    tokenReq.send();\n  };\n\n  init();\n\n}(this));\n```", "```py\n(function (window) {\n  \"use strict\";\n\n  // create a channel and connect the socket\n  var setupChannel = function(token) {\n    var channel = new goog.appengine.Channel(token);\n    var socket = channel.open();\n\n    socket.onopen = function() {\n      console.log('Channel opened!');\n    };\n\n    socket.onclose = function() {\n      console.log('goodbye');\n    };\n  };\n\n  // get channel token from the backend and connect\n  var init = function() {\n    var tokenReq = new XMLHttpRequest();\n    tokenReq.onload = function () {\n\n      var token = JSON.parse(this.responseText).token;\n      setupChannel(token);\n\n    };\n    tokenReq.open(\"get\", \"/notify_token\", true);\n    tokenReq.send();\n  };\n\n  init();\n\n}(this));\n```", "```py\ntoken = channel.create_channel(client_id, 1)\n```", "```py\n    socket.onopen = function() {\n      console.log('Channel opened!');\n    };\n\n    socket.onerror = function(err) {\n      // reconnect on timeout\n      if (err.code == 401) {\n        init();\n      }\n    };\n\n    socket.onclose = function() {\n      console.log('goodbye');\n    };\n```", "```py\n    socket.onopen = function() {\n      console.log('Channel opened!');\n    };\n\n    socket.onmessage = function (msg) {\n      window.alert(msg.data);\n    };\n\n    socket.onerror = function(err) {\n      // reconnect on timeout\n      if (err.code == 401) {\n        init();\n      }\n    };\n```", "```py\ninbound_services:\n- mail\n- channel_presence\n```", "```py\nclass ClientConnectedHandler(webapp2.RequestHandler):\n    def post(self):\n        logging.info('{} has connected'.format(self.request.get('from')))\n\nclass ClientDisconnectedHandler(webapp2.RequestHandler):\n    def post(self):\n        logging.info('{} has disconnected'.format(self.request.get('from')))\n```"]