- en: '*Chapter 5*: Exploring Compilers'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*：探索编译器'
- en: Python is a mature and widely used language, and there is great interest in
    improving its performance by compiling functions and methods directly to machine
    code rather than executing instructions in the interpreter. We have already seen
    a compiler example in [*Chapter 4*](B17499_04_Final_SS_ePub.xhtml#_idTextAnchor068),
    *C Performance with Cython*, where Python code is enhanced with types, compiled
    to efficient C code, and the interpreter calls are sidestepped.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种成熟且广泛使用的语言，人们对其性能的改进非常感兴趣，这可以通过直接将函数和方法编译成机器代码来实现，而不是在解释器中执行指令。我们已经在[*第四章*](B17499_04_Final_SS_ePub.xhtml#_idTextAnchor068)中看到了一个编译器示例，即使用
    Cython 进行 C 性能，其中 Python 代码通过类型增强，编译成高效的 C 代码，并且解释器调用被绕过。
- en: In this chapter, we will explore two projects, Numba and PyPy, that approach
    compilation in a slightly different way. **Numba** is a library designed to compile
    small functions on the fly. Instead of transforming Python code to C, Numba analyzes
    and compiles Python functions directly to machine code. **PyPy** is a replacement
    interpreter that works by analyzing the code at runtime and optimizing the slow
    loops automatically.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨两个项目，Numba 和 PyPy，它们以略微不同的方式处理编译。**Numba** 是一个设计用于即时编译小函数的库。Numba
    不是将 Python 代码转换为 C 代码，而是直接分析和编译 Python 函数到机器代码。**PyPy** 是一个替换解释器，它通过在运行时分析代码并自动优化慢速循环来工作。
- en: These tools are called **Just-In-Time** (**JIT**) compilers because the compilation
    is performed at runtime rather than before running the code (in other cases, the
    compiler is called **Ahead-Of-Time** or **AOT**).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具被称为**即时编译器**（**JIT**），因为编译是在运行时而不是在运行代码之前进行的（在其他情况下，编译器被称为**编译时**或**AOT**）。
- en: 'The list of topics to be covered in this chapter is as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖的主题列表如下：
- en: Getting started with Numba
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Numba 入门
- en: The PyPy project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyPy 项目
- en: Other interesting projects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他有趣的项目
- en: Overall, Numba and PyPy offer us flexibility in leveraging JIT compilation to
    accelerate our programs. This chapter adds another instrument to our toolbox for
    improving the speed of Python applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Numba 和 PyPy 为我们提供了利用 JIT 编译来加速程序的灵活性。本章为我们提供了另一个工具，用于提高 Python 应用程序的速度。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code files for this chapter can be accessed through this link: [https://github.com/PacktPublishing/Advanced-Python-Programming-Second-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Advanced-Python-Programming-Second-Edition/tree/main/Chapter05).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以通过以下链接访问：[https://github.com/PacktPublishing/Advanced-Python-Programming-Second-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Advanced-Python-Programming-Second-Edition/tree/main/Chapter05).
- en: Getting started with Numba
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Numba 入门
- en: Numba was started in 2012 by Travis Oliphant, the original author of NumPy,
    as a library for compiling individual Python functions at runtime using the **Low-Level
    Virtual Machine** (**LLVM**) toolchain.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Numba 是由 NumPy 的原始作者 Travis Oliphant 在 2012 年启动的，作为一个在运行时使用 **低级虚拟机**（**LLVM**）工具链编译单个
    Python 函数的库。
- en: LLVM is a set of tools designed to write compilers. LLVM is language-agnostic
    and is used to write compilers for a wide range of languages (an important example
    is the Clang compiler). One of the core aspects of LLVM is the intermediate representation
    (the LLVM IR), a very low-level, platform-agnostic language-like assembly, that
    can be compiled to machine code for the specific target platform.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM 是一套用于编写编译器的工具。LLVM 是语言无关的，用于编写广泛语言的编译器（一个重要例子是 Clang 编译器）。LLVM 的一个核心方面是中间表示（LLVM
    IR），这是一种非常低级、平台无关的类似汇编的语言，可以编译为特定目标平台的机器代码。
- en: Numba works by inspecting Python functions and compiling them, using LLVM, to
    the IR. As we saw in the last chapter, speed gains can be obtained when we introduce
    types for variables and functions. Numba implements clever algorithms to guess
    the types (this is called **type inference**) and compiles type-aware versions
    of the functions for fast execution.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Numba 通过检查 Python 函数并将它们编译为使用 LLVM 的 IR 来工作。正如我们在上一章中看到的，当我们为变量和函数引入类型时，可以获得速度提升。Numba
    实现了聪明的算法来猜测类型（这被称为**类型推断**），并为快速执行编译了类型感知版本的函数。
- en: Note that Numba was developed to improve the performance of numerical code.
    The development efforts often prioritize the optimization of applications that
    intensively use NumPy arrays.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Numba 是为了提高数值代码的性能而开发的。开发工作通常优先考虑优化那些大量使用 NumPy 数组的应用程序。
- en: Important Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Numba is evolving fast and can have substantial improvements between releases
    and, sometimes, backward-incompatible changes. To keep up, ensure that you refer
    to the release notes for each version. In the rest of this chapter, we will use
    Numba version 0.53.1; ensure that you install the correct version to avoid any
    error by using `pip install numba==0.53.1`. The complete code examples in this
    chapter can be found in the `Numba.ipynb` notebook.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Numba 正在快速发展，版本之间可能会有实质性的改进，有时甚至会出现向后不兼容的更改。为了跟上进度，请确保您参考每个版本的发布说明。在本章的其余部分，我们将使用
    Numba 版本 0.53.1；请确保您安装正确的版本，以避免使用 `pip install numba==0.53.1` 时出现任何错误。本章中的完整代码示例可以在
    `Numba.ipynb` 笔记本中找到。
- en: For the rest of this section, we will explore different aspects of Numba usage
    such as type specializations and JIT classes, as well as its limitations. First,
    we will discuss how to integrate Numba into a Python program via decorators.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的其余部分，我们将探讨 Numba 的不同方面，例如类型特化和 JIT 类，以及其局限性。首先，我们将讨论如何通过装饰器将 Numba 集成到 Python
    程序中。
- en: Using Numba decorators
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Numba 装饰器
- en: 'In most cases, the way we point Numba to specific Python functions is via decorators.
    Let''s see how to do this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，我们通过装饰器将 Numba 指向特定的 Python 函数。让我们看看如何做到这一点：
- en: 'As a first example, we will implement a function that calculates the sum of
    the squares of an array. The function definition is as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为第一个示例，我们将实现一个计算数组平方和的函数。函数定义如下：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To set up this function with Numba, it is sufficient to apply the `nb.jit`
    decorator:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 Numba 设置此函数，只需应用 `nb.jit` 装饰器即可：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `nb.jit` decorator won't do much when applied. However, when the function
    is invoked for the first time, Numba will detect the type of the input argument,
    `a`, and compile a specialized, performant version of the original function.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用 `nb.jit` 装饰器时，它不会做太多。然而，当函数第一次被调用时，Numba 将检测输入参数 `a` 的类型，并编译原始函数的专用、高效版本。
- en: 'To measure the performance gain obtained by the Numba compiler, we can compare
    the timings of the original and the specialized functions. The original, undecorated
    function can be easily accessed through the `py_func` attribute. The timings for
    the two functions are as follows:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要衡量 Numba 编译器带来的性能提升，我们可以比较原始函数和专用函数的计时。原始的未装饰函数可以通过 `py_func` 属性轻松访问。两个函数的计时如下：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: From the previous code, you can see how the Numba version (12.8 µs) is one order
    of magnitude faster than the Python version (4.3 ms).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，你可以看到 Numba 版本（12.8 µs）比 Python 版本（4.3 ms）快一个数量级。
- en: 'We can also compare how this implementation stacks up against NumPy standard
    operators:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以比较这种实现与 NumPy 标准运算符的对比：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this case, the Numba compiled function is marginally slower than NumPy vectorized
    operations, although this difference might change across different runs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，Numba 编译的函数在速度上略慢于 NumPy 向量化操作，尽管这种差异可能会在不同的运行中发生变化。
- en: Considering that all we needed to do was apply a simple decorator to obtain
    an incredible speed up over different data types, it's no wonder that what Numba
    does looks like magic. In the following sections, we will dig deeper to understand
    how Numba works and evaluate the benefits and limitations of the Numba compiler.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们只需要应用一个简单的装饰器就能在不同数据类型上获得惊人的速度提升，Numba 所做的看起来就像是魔法也就不足为奇了。在接下来的几节中，我们将深入了解
    Numba 的工作原理，并评估 Numba 编译器的优缺点。
- en: Type specializations
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型特化
- en: 'As shown earlier, the `nb.jit` decorator works by compiling a specialized version
    of the function once it encounters a new argument type. To better understand how
    this works, we can inspect the decorated function in the `sum_sq` example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`nb.jit` 装饰器通过在遇到新的参数类型时编译函数的专用版本来工作。为了更好地理解其工作原理，我们可以检查 `sum_sq` 示例中的装饰函数：
- en: 'Numba exposes the specialized types using the `signatures` attribute. Right
    after the `sum_sq` definition, we can inspect the available specialization by
    accessing `sum_sq.signatures`, as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Numba 使用 `signatures` 属性公开专用类型。在 `sum_sq` 定义之后，我们可以通过访问 `sum_sq.signatures`
    来检查可用的特化，如下所示：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we call this function with a specific argument, for instance, an array of
    `float64` numbers, we can see how Numba compiles a specialized version on the
    fly. If we also apply the function on an array of `float32`, we can see how a
    new entry is added to the `sum_sq.signatures` list:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们用特定的参数调用此函数，例如一个 `float64` 数字数组，我们可以看到 Numba 如何即时编译一个专用版本。如果我们也在 `float32`
    数组上应用此函数，我们可以看到如何向 `sum_sq.signatures` 列表中添加一个新条目：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It is possible to explicitly compile the function for certain types by passing
    a signature to the `nb.jit` function.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过向 `nb.jit` 函数传递签名来显式为某些类型编译函数。
- en: 'An individual signature can be passed as a tuple that contains the type we
    would like to accept. Numba provides a great variety of types that can be found
    in the `nb.types` module, and they are also available in the top-level `nb` namespace.
    If we want to specify an array of a specific type, we can use the slicing operator,
    `[:]`, on the type itself. In the following example, we demonstrate how to declare
    a function that takes an array of `float64` as its only argument:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以将单个签名作为包含我们希望接受的类型的元组传递。Numba 提供了 `nb.types` 模块中可以找到的多种类型，它们也存在于顶级 `nb` 命名空间中。如果我们想指定特定类型的数组，我们可以在类型本身上使用切片运算符
    `[:]`。以下示例中，我们演示了如何声明一个只接受 `float64` 数组作为其唯一参数的函数：
- en: '[PRE6]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that when we explicitly declare a signature, we are prevented from using
    other types, as demonstrated in the following example. If we try to pass an array,
    `x`, as `float32`, Numba will raise a `TypeError` exception:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，当我们显式声明签名时，我们将无法使用其他类型，以下示例中已演示。如果我们尝试将数组 `x` 作为 `float32` 传递，Numba 将引发 `TypeError`
    异常：
- en: '[PRE7]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Another way to declare signatures is through type strings. For example, a function
    that takes `float64` as input and returns `float64` as output can be declared
    with the `float64(float64)` string. Array types can be declared using a `[:]`
    suffix. To put this together, we can declare a signature for our `sum_sq` function,
    as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明签名的另一种方式是通过类型字符串。例如，一个输入为 `float64` 并返回 `float64` 的函数可以使用 `float64(float64)`
    字符串声明。可以使用 `[:]` 后缀声明数组类型。将它们组合起来，我们可以为我们的 `sum_sq` 函数声明一个签名，如下所示：
- en: '[PRE8]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also pass multiple signatures by passing a list:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以通过传递一个列表来传递多个签名：
- en: '[PRE9]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: These APIs ensure that Numba has the correct information about what data type
    a function works with.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 API 确保了 Numba 有关于函数处理的数据类型的正确信息。
- en: Object mode versus native mode
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象模式与原生模式
- en: So far, we have shown how Numba behaves when handling a simple function. In
    this case, Numba worked exceptionally well, and we obtained great performance
    on arrays and lists.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经展示了 Numba 在处理简单函数时的行为。在这种情况下，Numba 工作得非常好，我们在数组和列表上获得了出色的性能。
- en: The degree of optimization obtainable from Numba depends on how well Numba can
    infer the variable types and how well it can translate those standard Python operations
    to fast type-specific versions. If this happens, the interpreter is sidestepped,
    and we can get performance gains such as those of Cython.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Numba 获得的优化程度取决于 Numba 可以推断变量类型的好坏以及它可以将这些标准 Python 操作转换为快速类型特定版本的好坏。如果发生这种情况，解释器就会被绕过，我们可以获得类似于
    Cython 的性能提升。
- en: When Numba cannot infer variable types, it will still try and compile the code,
    reverting to the interpreter when the types can't be determined or when certain
    operations are unsupported. In Numba, this is called **object mode** and contrasts
    with the interpreter-free scenario called **native mode**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Numba 无法推断变量类型时，它仍然会尝试编译代码，当类型无法确定或某些操作不受支持时，会回退到解释器。在 Numba 中，这被称为 **对象模式**，与称为
    **原生模式** 的无解释器场景形成对比。
- en: 'Numba provides a function called `inspect_types` that helps understand how
    effective the type inference was and which operations were optimized. Let''s see
    how to use the following function:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Numba 提供了一个名为 `inspect_types` 的函数，它有助于了解类型推断的有效性以及哪些操作被优化了。让我们看看如何使用以下函数：
- en: 'As an example, we can look at the types inferred for our `sum_sq` function:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，我们可以查看我们的 `sum_sq` 函数推断出的类型：
- en: '[PRE10]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When this function is called, Numba will print the type inferred for each specialized
    version of the function. The output consists of blocks that contain information
    about variables and types associated with them. For example, we can examine the
    `N = len(a)` line:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当此函数被调用时，Numba 将打印出为函数的每个专用版本推断出的类型。输出由包含与变量及其类型相关的信息的块组成。例如，我们可以检查 `N = len(a)`
    这一行：
- en: '[PRE11]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For each line, Numba prints a thorough description of variables, functions,
    and intermediate results. In the preceding example, you can see (on the second
    line) that the `a` argument is correctly identified as an array of `float64` numbers.
    At `LINE 4`, the input and return type of the `len` function is also correctly
    identified (and likely optimized) as taking an array of `float64` numbers and
    returning `int64`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一行，Numba都会打印变量、函数和中间结果的详细描述。在前面的例子中，你可以在第二行看到`a`参数被正确地识别为`float64`数字的数组。在`LINE
    4`，`len`函数的输入和返回类型也被正确地识别（并且可能已优化），它接受一个`float64`数字的数组并返回`int64`。
- en: If you scroll through the output, you can see how all the variables have a well-defined
    type. Therefore, we can be certain that Numba is able to compile the code quite
    efficiently. This form of compilation is called **native mode**.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你浏览输出，可以看到所有变量都有一个明确定义的类型。因此，我们可以确信Numba能够相当高效地编译代码。这种编译形式被称为**原生模式**。
- en: As a counterexample, we can see what happens if we write a function with unsupported
    operations. For example, as of version 0.53.1, Numba has limited support for string
    operations.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作为反例，我们可以看到如果我们编写一个包含不支持的操作的函数会发生什么。例如，截至版本0.53.1，Numba对字符串操作的支持有限。
- en: 'We can implement a function that concatenates a series of strings and compiles
    it as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以实现一个将一系列字符串连接起来的函数，并按如下方式编译：
- en: '[PRE12]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we can invoke this function with a list of strings and inspect the types:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用字符串列表调用此函数并检查其类型：
- en: '[PRE13]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Numba will return the output of the function for the `reflected list (unicode
    type)` type. We can, for instance, examine how the third line gets inferred. The
    output of `concatenate.inspect_types()` is reproduced here:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Numba将为`reflected list (unicode type)`类型的函数返回输出。例如，我们可以检查第三行是如何推断出来的。`concatenate.inspect_types()`的输出在此重现：
- en: '[PRE14]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can see that this time, each variable, or function is of the `unicode`
    or `str` type. Once again by timing the original and compiled function, we can
    note a significant improvement in performance:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，这次，每个变量或函数都是`unicode`或`str`类型。再次通过计时原始函数和编译函数，我们可以注意到性能有显著提升：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is because the Numba compiler is not able to optimize the code and adds
    some extra overhead to the function call.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Numba编译器无法优化代码，并在函数调用中添加一些额外的开销。
- en: An Equivalent Decorator
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 等效装饰器
- en: Note that from version 0.12, the more concise `@nb.njit` decorator could be
    used instead.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，从版本0.12开始，可以使用更简洁的`@nb.njit`装饰器来代替。
- en: Numba and NumPy
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Numba和NumPy
- en: Numba was originally developed to easily increase the performance of code that
    uses NumPy arrays. Currently, many NumPy features are implemented efficiently
    by the compiler. Here, we will see how to combine the two tools to achieve even
    better performance for universal functions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Numba最初是为了轻松提高使用NumPy数组的代码的性能而开发的。目前，许多NumPy功能都由编译器高效实现。在这里，我们将看到如何结合这两个工具，以实现通用函数的更好性能。
- en: Universal functions with Numba
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Numba的通用函数
- en: Universal functions are special functions defined in NumPy that can operate
    on arrays of different sizes and shapes according to the broadcasting rules. One
    of the best features of Numba is the implementation of fast `ufunc` instances.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数是NumPy中定义的特殊函数，可以根据广播规则在大小和形状不同的数组上操作。Numba的最佳特性之一是实现快速的`ufunc`实例。
- en: We have already seen some `ufunc` examples in [*Chapter 3*](B17499_03_Final_SS_ePub.xhtml#_idTextAnchor047),
    *Fast Array Operations with NumPy, Pandas, and Xarray*. For instance, the `np.log`
    function is a `ufunc` instance because it can accept scalars and arrays of different
    sizes and shapes. Also, universal functions that take multiple arguments still
    work according to the broadcasting rules. Examples of universal functions that
    take multiple arguments are `np.sum` and `np.difference`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[*第3章*](B17499_03_Final_SS_ePub.xhtml#_idTextAnchor047)中看到了一些`ufunc`示例，即使用NumPy、Pandas和Xarray进行快速数组操作。例如，`np.log`函数是一个`ufunc`实例，因为它可以接受标量和不同大小和形状的数组。此外，接受多个参数的通用函数仍然根据广播规则工作。接受多个参数的通用函数示例包括`np.sum`和`np.difference`。
- en: 'Universal functions can be defined in standard NumPy by implementing the scalar
    version and using the `np.vectorize` function to enhance the function with the
    broadcasting feature. As an example, let''s see how to write the *Cantor pairing
    function*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准的NumPy中，可以通过实现标量版本并使用`np.vectorize`函数来增强广播功能，从而定义通用函数。例如，让我们看看如何编写**康托尔配对函数**：
- en: 'A pairing function is a function that encodes two natural numbers into a single
    natural number so that you can easily interconvert between the two representations.
    The Cantor pairing function can be written as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配对函数是一个将两个自然数编码到单个自然数中的函数，这样你就可以轻松地在两种表示之间进行转换。康托尔配对函数可以写成以下形式：
- en: '[PRE16]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As already mentioned, it is possible to create a `ufunc` instance in pure Python
    using the `np.vectorized` decorator:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，可以使用 `np.vectorized` 装饰器在纯 Python 中创建 `ufunc` 实例：
- en: '[PRE17]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Except for the convenience, defining universal functions in pure Python is not
    very useful, as it requires a lot of function calls affected by interpreter overhead.
    For this reason, `ufunc` implementation is usually done in C or Cython, but Numba
    beats all these methods with its convenience.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了方便之外，在纯 Python 中定义通用函数并不很有用，因为它需要大量的函数调用，这些调用会受到解释器开销的影响。因此，`ufunc` 的实现通常是在
    C 或 Cython 中完成的，但 Numba 以其便利性超越了所有这些方法。
- en: All that is needed in order to perform the conversion is to use the equivalent
    decorator, `nb.vectorize`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行转换，只需要使用等效的装饰器，即 `nb.vectorize`。
- en: 'We can compare the speed of the standard `np.vectorized` version, which, in
    the following code, is called `cantor_py`, and the same function is implemented
    using standard NumPy operations:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以将标准 `np.vectorized` 版本的速度与以下代码中称为 `cantor_py` 的相同函数进行比较，该函数使用标准 NumPy 操作实现：
- en: '[PRE18]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can see how the Numba version beats all the other options by a large margin!
    Numba works extremely well because the function is simple and type inference is
    possible.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到 Numba 版本如何以很大的优势击败所有其他选项！Numba 工作得非常好，因为函数简单，且可以进行类型推断。
- en: Important Note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: An additional advantage of universal functions is that, since they depend on
    individual values, their evaluation can also be executed in parallel. Numba provides
    an easy way to parallelize such functions by passing the `target="cpu"` or `target="gpu"`
    keyword argument to the `nb.vectorize` decorator.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数的另一个优点是，由于它们依赖于单个值，它们的评估也可以并行执行。Numba 提供了一种简单的方法，通过将 `target="cpu"` 或 `target="gpu"`
    关键字参数传递给 `nb.vectorize` 装饰器来并行化此类函数。
- en: Generalized universal functions
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广义通用函数
- en: 'One of the main limitations of universal functions is that they must be defined
    on scalar values. A `gufunc`, is an extension of universal functions to procedures
    that take arrays. Let''s see how we can apply Numba to these functions:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数的主要局限性之一是它们必须在标量值上定义。`gufunc` 是通用函数的扩展，它将数组作为过程。让我们看看如何将 Numba 应用于这些函数：
- en: 'A classic example is matrix multiplication. In NumPy, matrix multiplication
    can be applied using the `np.matmul` function, which takes two 2D arrays and returns
    another 2D array. An example of the usage of `np.matmul` is as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个经典的例子是矩阵乘法。在 NumPy 中，可以使用 `np.matmul` 函数进行矩阵乘法，该函数接受两个二维数组并返回另一个二维数组。`np.matmul`
    的用法示例如下：
- en: '[PRE19]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As we saw in the previous subsection, a `ufunc` instance broadcasts the operation
    over arrays of *scalars*; its natural generalization will be to broadcast over
    an array of *arrays*. If, for instance, we take two arrays of 3 by 3 matrices,
    we will expect `np.matmul` to match the matrices and take their product.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`ufunc` 实例将操作广播到标量数组上；其自然推广将是广播到数组数组上。例如，如果我们取两个 3x3 矩阵的数组，我们将期望 `np.matmul`
    匹配矩阵并取它们的乘积。
- en: 'In the following example, we take two arrays containing 10 matrices of the
    `(3, 3)` shape. If we apply `np.matmul`, the product will be applied *matrix-wise*
    to obtain a new array containing the 10 results (which are, again, `(3, 3)` matrices):'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下示例中，我们取包含 10 个 `(3, 3)` 形状矩阵的两个数组。如果我们应用 `np.matmul`，乘法将按矩阵方式应用，以获得包含 10
    个结果的新数组（这些结果再次是 `(3, 3)` 矩阵）：
- en: '[PRE20]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The usual rules for broadcasting will work in a similar way. For example, if
    we have an array of `(3, 3)` matrices, which will have a shape of `(10, 3, 3)`,
    we can use `np.matmul` to calculate the matrix multiplication of each element
    with a single `(3, 3)` matrix. According to the broadcasting rules, we find that
    the single matrix will be repeated to obtain a size of `(10, 3, 3)`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 常规的广播规则将以类似的方式工作。例如，如果我们有一个 `(3, 3)` 矩阵的数组，它将具有 `(10, 3, 3)` 的形状，我们可以使用 `np.matmul`
    来计算每个元素与单个 `(3, 3)` 矩阵的矩阵乘法。根据广播规则，我们发现单个矩阵将被重复以获得 `(10, 3, 3)` 的大小：
- en: '[PRE21]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Numba supports the implementation of efficient generalized universal functions
    through the `nb.guvectorize` decorator. As an example, we will implement a function
    that computes the Euclidean distance between two arrays as a `gufunc` instance.
    To create a `gufunc` instance, we must define a function that takes the input
    arrays, plus an output array where we will store the result of our calculation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Numba 支持通过 `nb.guvectorize` 装饰器实现高效的通用函数。例如，我们将实现一个计算两个数组之间欧几里得距离的函数，作为一个 `gufunc`
    实例。要创建一个 `gufunc` 实例，我们必须定义一个函数，该函数接受输入数组，以及一个输出数组，我们将在这里存储计算结果。
- en: 'The `nb.guvectorize` decorator requires two arguments:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`nb.guvectorize` 装饰器需要两个参数：'
- en: The types of input and output – two 1D arrays as input and a scalar as output.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入和输出的类型——两个 1D 数组作为输入，一个标量作为输出。
- en: The so-called layout string, which is a representation of the input and output
    sizes; in our case, we take two arrays of the same size (denoted arbitrarily by
    `n`) and output a scalar.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所说的布局字符串，它是输入和输出大小的表示；在我们的例子中，我们取两个大小相同的数组（任意表示为 `n`）并输出一个标量。
- en: 'In the following example, we can see the implementation of the `euclidean`
    function using the `nb.guvectorize` decorator:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们可以看到使用 `nb.guvectorize` 装饰器实现 `euclidean` 函数的代码：
- en: '[PRE22]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There are a few very important points to be made. Predictably, we declared the
    `a` and `b` input types as `float64[:]` because they are 1D arrays. However, what
    about the output argument? Wasn't it supposed to be a scalar? Yes, but *Numba
    treats a scalar argument as arrays of size 1*. That's why it was declared as `float64[:]`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个非常重要的要点需要说明。可以预见的是，我们将输入类型 `a` 和 `b` 声明为 `float64[:]`，因为它们是 1D 数组。然而，输出参数呢？它不是应该是一个标量吗？是的，但
    *Numba 将标量参数视为大小为 1 的数组*。这就是为什么它被声明为 `float64[:]`。
- en: Similarly, the layout string indicates that we have two arrays of size `(n)`
    and the output is a scalar, denoted by empty brackets – `()`. However, the array
    out will be passed as an array of size 1\. Also, note that we don't return anything
    from the function; all the output must be written in the `out` array.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，布局字符串表示我们有两个大小为 `(n)` 的数组，输出是一个标量，用空括号表示 – `()`。然而，输出数组将被作为大小为 1 的数组传递。此外，请注意，我们从这个函数中不返回任何内容；所有输出都必须写入
    `out` 数组。
- en: Important Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The letter `n` in the layout string is completely arbitrary; you may choose
    to use `k` or other letters of your liking. Also, if you want to combine arrays
    of uneven sizes, you can use layout strings, such as `(n, m)`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 布局字符串中的字母 `n` 完全任意；你可以选择使用 `k` 或其他你喜欢的字母。此外，如果你想组合大小不等的数组，你可以使用布局字符串，例如 `(n,
    m)`。
- en: 'Our brand-new `euclidean` function can be conveniently used on arrays of different
    shapes, as shown in the following example:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们全新的 `euclidean` 函数可以方便地用于不同形状的数组，如下面的示例所示：
- en: '[PRE23]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'How does the speed of `euclidean` compare to standard NumPy? In the following
    code, we will benchmark a NumPy vectorized version with our previously defined
    `euclidean` function:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 欧几里得距离函数的速度与标准 NumPy 相比如何？在下面的代码中，我们将使用之前定义的 `euclidean` 函数与 NumPy 向量化版本进行基准测试：
- en: '[PRE24]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The Numba version, again, beats the NumPy version by a large margin!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，Numba 版本以很大的优势击败了 NumPy 版本！
- en: JIT classes
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JIT 类
- en: As of today, Numba doesn't support the optimization of generic Python objects.
    This limitation, however, doesn't have a huge impact on numerical codes, as they
    usually involve arrays and math operations exclusively.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Numba 不支持通用 Python 对象的优化。然而，这种限制对数值代码的影响并不大，因为它们通常只涉及数组和数学运算。
- en: Nevertheless, certain data structures are much more naturally implemented using
    objects; therefore, Numba provides support for defining classes that can be used
    and compiled to fast native code. Bear in mind that this is one of the newest
    (and almost experimental) features, and it is extremely useful, as it allows us
    to extend Numba to support fast data structures that are not easily implemented
    with arrays.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，某些数据结构更自然地使用对象来实现；因此，Numba 提供了对定义类以用于和编译为快速原生代码的支持。请记住，这是最新（几乎是实验性）的功能之一，它非常有用，因为它允许我们将
    Numba 扩展到支持快速数据结构，这些数据结构不容易用数组实现。
- en: 'As an example, we will show how to implement a simple linked list using *JIT
    classes*. A linked list can be implemented by defining a `Node` class that contains
    two fields – a value and the next item in the list. As you can see in the following
    figure, each **Node** connects to the next and holds a value, and the last **Node**
    contains a broken link, to which we assign a value of **None**:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将展示如何使用*JIT类*实现一个简单的链表。链表可以通过定义一个包含两个字段（值和列表中的下一个项）的`Node`类来实现。正如您在下面的图中可以看到的，每个**Node**连接到下一个，并持有值，最后一个**Node**包含一个断开的链接，我们将其赋值为**None**：
- en: '![Figure 5.1 – An illustration of a linked list ](img/Figure_5.1_B17499.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1 – 链表的示意图](img/Figure_5.1_B17499.jpg)'
- en: Figure 5.1 – An illustration of a linked list
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 链表的示意图
- en: 'We will explore various JIT-related features in the following steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下步骤中探索各种JIT相关功能：
- en: 'In Python, we can define the `Node` class as follows:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Python中，我们可以如下定义`Node`类：
- en: '[PRE25]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We can manage the collection of `Node` instances by creating another class,
    called `LinkedList`. This class will keep track of the head of the list (in the
    preceding figure, this corresponds to the `Node` instance and link it to the current
    head.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过创建另一个名为`LinkedList`的类来管理`Node`实例的集合。这个类将跟踪列表的头部（在先前的图中，这对应于`Node`实例，并将其链接到当前头部。
- en: 'In the following code, we develop the initialization function for `LinkedList`
    and the `LinkedList.push_back` method that inserts an element in the front of
    the list using the strategy outlined earlier:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们开发了`LinkedList`的初始化函数和`LinkedList.push_back`方法，该方法使用前面概述的策略在列表前面插入一个元素：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For debugging purposes, we can also implement the `LinkedList.show` method
    that traverses and prints each element in the list. The method is shown in the
    following snippet:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了调试目的，我们还可以实现一个`LinkedList.show`方法，该方法遍历并打印列表中的每个元素。该方法在下面的代码片段中显示：
- en: '[PRE27]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'At this point, we can test our `LinkedList` and see whether it behaves correctly.
    We can create an empty list, add a few elements, and print its content. Note that
    since we are pushing elements to the front of the list, the last elements inserted
    will be the first to be printed:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以测试我们的`LinkedList`，看看它是否表现正确。我们可以创建一个空列表，添加一些元素，并打印其内容。请注意，由于我们正在将元素推送到列表的前面，最后插入的元素将是第一个被打印的：
- en: '[PRE28]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Finally, we can implement a function, `sum_list`, that returns the sum of the
    elements in the linked list. We will use this method to time differences between
    the Numba and pure Python versions:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以实现一个函数，`sum_list`，它返回链表中元素的总和。我们将使用此方法来测量Numba和纯Python版本之间的差异：
- en: '[PRE29]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If we measure the execution time of the original `sum_list` version and the
    `nb.jit` version, we see that there is not much difference. The reason is that
    Numba cannot infer the type of classes:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们测量原始`sum_list`版本和`nb.jit`版本的执行时间，我们会看到没有太大的差异。原因是Numba无法推断类的类型：
- en: '[PRE30]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We can improve the performance of `sum_list` by compiling the `Node` and `LinkedList`
    classes using the `nb.jitclass` decorator.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过使用`nb.jitclass`装饰器编译`Node`和`LinkedList`类来提高`sum_list`的性能。
- en: The `nb.jitclass` decorator takes a single argument that contains the attribute
    types. In the `Node` class, the attribute types are `int64` for `value` and `Node`
    for `next`. The `nb.jitclass` decorator will also compile all the methods defined
    for the class. Before delving into the code, we need to make two observations.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`nb.jitclass`装饰器接受一个包含属性类型的单个参数。在`Node`类中，属性类型为`int64`的`value`和`Node`的`next`。`nb.jitclass`装饰器还将编译为该类定义的所有方法。在深入代码之前，我们需要注意两点。'
- en: First, the attribute declaration must be done before the class is defined, but
    how do we declare a type that we haven't defined yet? Numba provides the `nb.deferred_type()`
    function that can be used for this purpose.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，必须在定义类之前完成属性声明，但我们如何声明一个尚未定义的类型呢？Numba提供了`nb.deferred_type()`函数，可用于此目的。
- en: Second, the `next` attribute can be either `None` or a `Node` instance. This
    is what is called an optional type, and Numba provides a utility called `nb.optional`
    that lets you declare variables that can be (optionally) `None`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，`next`属性可以是`None`或`Node`实例。这被称为可选类型，Numba提供了一个名为`nb.optional`的实用工具，允许您声明可以（可选地）为`None`的变量。
- en: 'This `Node` class is illustrated in the following code sample. As you can see,
    `node_type` is predeclared using `nb.deferred_type()`. The attributes are declared
    as a list of pairs containing the attribute name and the type (also note the use
    of `nb.optional`). After the class declaration, we are required to declare the
    deferred type:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例展示了 `Node` 类。正如你所见，`node_type` 是使用 `nb.deferred_type()` 预声明的。属性被声明为一个包含属性名和类型的对列表（也请注意
    `nb.optional` 的使用）。在类声明之后，我们需要声明延迟类型：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `LinkedList` class can be easily compiled, as follows. All that''s needed
    is to define the `head` attribute and to apply the `nb.jitclass` decorator:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LinkedList` 类可以很容易地编译，如下所示。所需做的只是定义 `head` 属性并应用 `nb.jitclass` 装饰器：'
- en: '[PRE32]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can now measure the execution time of the `sum_list` function when we pass
    a JIT `LinkedList`:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以测量在传递一个 JIT `LinkedList` 给 `sum_list` 函数时的执行时间：
- en: '[PRE33]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Interestingly, when using a JIT class from a compiled function, we obtain a
    substantial performance improvement against the pure Python version. However,
    using the JIT class from the original `sum_list.py_func` actually results in a
    worse performance. Ensure that you use JIT classes only inside compiled functions!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，当使用编译函数中的 JIT 类时，我们获得了与纯 Python 版本相比的显著性能提升。然而，使用来自原始 `sum_list.py_func`
    的 JIT 类实际上会导致性能更差。确保你只在编译函数内部使用 JIT 类！
- en: Limitations in Numba
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Numba 的局限性
- en: 'There are some instances where Numba cannot properly infer the variable types.
    In the following example, we define a function that takes a nested list of integers
    and returns the sum of the element in every sublist. In this case, Numba will
    raise a warning:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些情况下，Numba 无法正确推断变量类型。在以下示例中，我们定义了一个函数，它接受一个整数嵌套列表并返回每个子列表中元素的总和。在这种情况下，Numba
    将引发警告：
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The problem with this code is that Numba is not able to determine the list
    type and fails. A way to fix this problem is to help the compiler determine the
    right type by initializing the list with a sample element and removing it at the
    end:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的问题在于 Numba 无法确定列表类型并失败。解决这个问题的一种方法是通过使用一个样本元素初始化列表，并在最后移除它来帮助编译器确定正确的类型：
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Among other features that are not yet implemented in the Numba compiler are
    function and class definitions, `list`, `set`, and `dict` comprehensions, generators,
    the `with` statement, and `try` and `except` blocks. Note, however, that many
    of these features may become supported in the future.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Numba 编译器中尚未实现的其他功能包括函数和类定义、`list`、`set` 和 `dict` 推导式、生成器、`with` 语句以及 `try`
    和 `except` 块。然而，请注意，许多这些功能可能会在未来得到支持。
- en: Overall, we have seen multiple approaches of working with Numba to speed up
    our applications, such as type specializations, NumPy's universal functions, and
    JIT classes. We will now move on to our second main topic in this chapter – PyPy.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，我们已经看到了多种使用 Numba 加速我们应用程序的方法，例如类型专业化、NumPy 的通用函数和 JIT 类。我们现在将进入本章的第二个主要主题——PyPy。
- en: The PyPy project
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyPy 项目
- en: PyPy is a very ambitious project at improving the performance of the Python
    interpreter. The way PyPy improves performance is by automatically compiling slow
    sections of the code at runtime.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: PyPy 是一个旨在提高 Python 解释器性能的非常雄心勃勃的项目。PyPy 提高性能的方式是在运行时自动编译代码中的慢速部分。
- en: PyPy is written in a special language called **RPython** (rather than C) that
    allows developers to implement advanced features and improvements quickly and
    reliably. RPython means **Restricted Python** because it implements a restricted
    subset of the Python language targeted to the compiler development.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: PyPy 是用一种称为 **RPython** 的特殊语言编写的（而不是 C 语言），它允许开发者快速且可靠地实现高级功能和改进。RPython 意味着
    **受限 Python**，因为它实现了一个针对编译器开发的 Python 语言子集。
- en: As of today, PyPy version 7.3.5 supports a lot of Python features and is a possible
    choice for a large variety of applications, such as game and web development.
    PyPy compiles code using a very clever strategy called **tracing JIT compilation**.
    At first, the code is executed normally using interpreter calls. PyPy then starts
    to profile the code and identifies the most intensive loops. After the identification
    takes place, the compiler then observes (*traces*) the operations and can compile
    its optimized, interpreter-free version.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Once an optimized version of the code is present, PyPy can run the slow loop
    much faster than the interpreted version.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: This strategy can be contrasted with what Numba does. In Numba, the units of
    compilation are methods and functions, while the PyPy focus is just slow loops.
    Overall, the focus of the projects is also very different, as Numba has limited
    scope for numerical code and requires a lot of instrumentation, while PyPy aims
    at replacing the CPython interpreter.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will demonstrate and benchmark PyPy on our particle simulator
    application. We will begin by setting up Python and then look at running a particle
    simulator in PyPy.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Setting up PyPy
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyPy is distributed as a precompiled binary that can be downloaded from [http://pypy.org/download.html](http://pypy.org/download.html),
    and it currently supports Python versions 2.7 and 3.7\. In this chapter, we will
    demonstrate the usage of the 3.7 version.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'Once PyPy is downloaded and unpacked, you can locate the interpreter in the
    `bin/pypy` directory relative to the unpacked archive. You can initialize a new
    virtual environment, where we can install additional packages using the following
    command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To activate the environment, we will use the following command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'At this point, you can verify that the binary Python is linked to the PyPy
    executable by typing `python -V`. At this point, we can go ahead and install some
    packages we may need. Note that PyPy may have limited support for software that
    uses the Python C API (most notably, packages such as `numpy` and `matplotlib`).
    We can go ahead and install them in the usual way:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: On certain platforms, the installation of `numpy` and `matplotlib` can be tricky.
    You can skip the installation step and remove any imports on these two packages
    from the scripts we will run.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Running a particle simulator in PyPy
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have successfully set up the PyPy installation, we can go ahead
    and run our particle simulator. As a first step, we will time the particle simulator
    from [*Chapter 1*](B17499_01_Final_SS_ePub.xhtml#_idTextAnchor015), *Benchmarking
    and Profiling*, on the standard Python interpreter. If the virtual environment
    is still active, you can issue the `deactivate` command to exit the environment:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'At this point, we can time our code using the `timeit` command-line interface:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We can reactivate the environment and run the exact same code from PyPy. On
    Ubuntu, you may have problems importing the `matplotlib.pyplot` module. You can
    try issuing the following `export` command to fix the issue or removing the `matplotlib`
    imports from `simul.py`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, we can go ahead and time the code using PyPy:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Note that we obtained a large (more than eight times) speed-up! PyPy, however,
    warns us that the `timeit` module can be unreliable. We can confirm our timings
    using the `perf` module, as suggested by PyPy:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This gives us a more reliable assurance that our speed-up is consistent. Overall,
    we can see that with a simple reinstallation of Python, we are able to achieve
    significant speed-up via PyPy.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Advanced PyPy
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Although not within the scope of this chapter, for more advanced usage of PyPy,
    one could integrate it with Pyglet for game development and PyLongs and Django
    for web development.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Overall, Numba and PyPy together offer us many options regarding how we might
    want to go about leveraging JIT compilers to supercharge our Python programs.
    In the next section, we examine several other options that may be of interest.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Other interesting projects
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the years, many projects attempted to improve Python performance through
    several strategies, and, sadly, many of them failed. As of today, there are a
    few projects that survive and hold the promise for a faster Python.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'Numba and PyPy are mature projects that are steadily improving over the years.
    Features are continuously being added, and they hold great promise for the future
    of Python:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '**Nuitka** is a program developed by Kay Hayen that compiles Python code to
    C. At the time of writing (version 0.6.15), it provides extreme compatibility
    with the Python language and produces efficient code that results in moderate
    performance improvements over CPython.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nuitka is quite different than Cython in the sense that it focuses on extreme
    compatibility with the Python language, and it doesn't extend the language with
    additional constructs.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '**Pyston** is a new interpreter developed by Dropbox that powers JIT compilers.
    It differs substantially from PyPy as it doesn''t employ a tracing JIT but rather
    a method-at-a-time JIT (similar to what Numba does). Pyston, like Numba, is also
    built on top of the LLVM compiler infrastructure.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pyston is in active development and supports both **Python 2.7** and **3.8**.
    Benchmarks show that it is faster than CPython but slower than PyPy; that said,
    it is still an interesting project to follow as new features are added and compatibility
    is increased.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have been introduced to four different JIT compilers. You
    may find in your own experience that, when developing an application, different
    situations and use cases may call for different compilers. It is, therefore, important
    to explore our options when it comes to using a JIT compiler to speed up our Python
    code.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Numba is a tool that compiles fast, specialized versions of Python functions
    at runtime. In this chapter, we learned how to compile, inspect, and analyze functions
    compiled by Numba. We also learned how to implement fast NumPy universal functions
    that are useful in a wide array of numerical applications. Finally, we implemented
    more complex data structures using the `nb.jitclass` decorator. Overall, Numba
    is built to accelerate numeric loops that are common in scientific computing.
    As we have seen, Numba works seamlessly with the popular NumPy library.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Tools such as PyPy allow us to run Python programs unchanged to obtain significant
    speed improvements. We demonstrated how to set up PyPy, and we assessed the performance
    improvements on our particle simulator application. We have also seen that, unlike
    Numba, PyPy doesn't operate on a function level but instead seeks to implement
    a more efficient interpreter for a whole Python program.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: We also, briefly, described the current ecosystem of the Python compilers and
    compared them with each other. These discussions will give you the confidence
    to explore and work with different JIT compilers and select the most appropriate
    for your applications. In the next chapter, we will see a specialized version
    of a JIT compiler that is optimized for machine learning operations and tasks.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are JIT compilers and why are they useful?
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does Numba determine the types of variables in a Python program? What happens
    when these variables are not of the type that Numba works well with?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the high-level idea of tracing a JIT compilation of PyPy?
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'More on JIT compilers: [https://www.freecodecamp.org/news/just-in-time-compilation-explained/](https://www.freecodecamp.org/news/just-in-time-compilation-explained/)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
