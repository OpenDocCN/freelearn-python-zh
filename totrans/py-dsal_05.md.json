["```py\ndef b(): \n    print('b') \n\ndef a(): \n    b() \n\na() \nprint(\"done\") \n\n```", "```py\n   somefunc(14, 'eggs', 'ham', 'spam') \n\n```", "```py\n    def somefunc(a, b, c, d): \n        print(\"function executed\")\n\n```", "```py\nclass Node: \n    def __init__(self, data=None): \n        self.data = data \n        self.next = None \n\n```", "```py\nclass Stack: \n    def __init__(self): \n        self.top = None \n        self.size = 0 \n\n```", "```py\n   def push(self, data): \n       node = Node(data) \n       if self.top: \n           node.next = self.top \n           self.top = node                 \n       else: \n           self.top = node \n       self.size += 1 \n\n```", "```py\n    def pop(self): \n        if self.top: \n            data = self.top.data \n            self.size -= 1  \n            if self.top.next: \n                self.top = self.top.next \n            else: \n                self.top = None \n            return data \n        else: \n            return None \n\n```", "```py\n    def peek(self): \n        if self.top \n            return self.top.data \n        else: \n            return None \n\n```", "```py\n    def check_brackets(statement): \n        stack = Stack() \n        for ch in statement: \n            if ch in ('{', '[', '('): \n                stack.push(ch) \n            if ch in ('}', ']', ')'): \n                last = stack.pop() \n            if last is '{' and ch is '}': \n                continue \n            elif last is '[' and ch is ']': \n                continue \n            elif last is '(' and ch is ')': \n                continue \n            else: \n                return False \n    if stack.size > 0: \n        return False \n    else: \n        return True \n\n```", "```py\nsl = ( \n   \"{(foo)(bar)}[hello](((this)is)a)test\", \n   \"{(foo)(bar)}[hello](((this)is)atest\", \n   \"{(foo)(bar)}[hello](((this)is)a)test))\" \n) \n\nfor s in sl: \n   m = check_brackets(s) \n   print(\"{}: {}\".format(s, m)) \n\n```", "```py\nclass ListQueue: \n    def __init__(self): \n        self.items = [] \n        self.size = 0 \n\n```", "```py\n    def enqueue(self, data): \n        self.items.insert(0, data) \n        self.size += 1 \n\n```", "```py\nself.size += 1 \n\n```", "```py\n    def dequeue(self):\n        data = self.items.pop()\n        self.size -= 1\n        return data\n\n```", "```py\nclass Queue: \n    def __init__(self): \n        self.inbound_stack = [] \n        self.outbound_stack = [] \n\n```", "```py\ndef enqueue(self, data): \n    self.inbound_stack.append(data) \n\n```", "```py\nqueue = Queue() \nqueue.enqueue(5) \nqueue.enqueue(6) \nqueue.enqueue(7) \nprint(queue.inbound_stack) \n\n```", "```py\n    [5, 6, 7]\n\n```", "```py\n    if not self.outbound_stack: \n        while self.inbound_stack: \n            self.outbound_stack.append(self.inbound_stack.pop()) \n    return self.outbound_stack.pop() \n\n```", "```py\nreturn self.outbound_stack.pop() \n\n```", "```py\nwhile self.inbound_stack: \n    self.outbound_stack.append(self.inbound_stack.pop()) \n\n```", "```py\nreturn self.outbound_stack.pop() \n\n```", "```py\nqueue = Queue() \nqueue.enqueue(5) \nqueue.enqueue(6) \nqueue.enqueue(7) \nprint(queue.inbound_stack) \nqueue.dequeue() \nprint(queue.inbound_stack) \nprint(queue.outbound_stack) \nqueue.dequeue() \nprint(queue.outbound_stack) \n\n```", "```py\n [5, 6, 7] \n [] \n [7, 6] \n [7] \n\n```", "```py\nclass Queue: \ndef __init__(self): \n        self.head = None \n        self.tail = None \n        self.count = 0 \n\n```", "```py\n    def enqueue(self, data): \n        new_node = Node(data, None, None) \n        if self.head is None: \n            self.head = new_node \n            self.tail = self.head \n        else: \n            new_node.prev = self.tail \n            self.tail.next = new_node \n            self.tail = new_node \n\n        self.count += 1 \n\n```", "```py\ndef dequeue(self): \ncurrent = self.head \n        if self.count == 1: \n            self.count -= 1 \n            self.head = None \n            self.tail = None \n        elif self.count > 1: \n            self.head = self.head.next \n            self.head.prev = None \n            self.count -= 1 \n\n```", "```py\nfrom random import randint \nclass Track: \n\n    def __init__(self, title=None): \n        self.title = title \n        self.length = randint(5, 10) \n\n```", "```py\ntrack1 = Track(\"white whistle\") \ntrack2 = Track(\"butter butter\") \nprint(track1.length) \nprint(track2.length) \n\n```", "```py\n    6\n 7\n\n```", "```py\nimport time \nclass MediaPlayerQueue(Queue): \n\n    def __init__(self): \n        super(MediaPlayerQueue, self).__init__() \n\n```", "```py\n    def add_track(self, track): \n        self.enqueue(track) \n\n```", "```py\ndef play(self): \n        while self.count > 0: \n            current_track_node = self.dequeue() \n            print(\"Now playing {}\".format(current_track_node.data.title)) \n            time.sleep(current_track_node.data.length) \n\n```", "```py\ntime.sleep(current_track_node.data.length) \n\n```", "```py\ntrack1 = Track(\"white whistle\") \ntrack2 = Track(\"butter butter\") \ntrack3 = Track(\"Oh black star\") \ntrack4 = Track(\"Watch that chicken\") \ntrack5 = Track(\"Don't go\") \n\n```", "```py\nprint(track1.length) \nprint(track2.length) \n>> 8 >> 9\n\n```", "```py\nmedia_player = MediaPlayerQueue() \n\n```", "```py\nmedia_player.add_track(track1) \nmedia_player.add_track(track2) \nmedia_player.add_track(track3) \nmedia_player.add_track(track4) \nmedia_player.add_track(track5) \nmedia_player.play() \n\n```", "```py\n    >>Now playing white whistle\n >>Now playing butter butter\n >>Now playing Oh black star\n >>Now playing Watch that chicken\n >>Now playing Don't go\n\n```"]