- en: Improving Our API and Adding Authentication to it with Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will improve the Django RESTful API with a PostgreSQL 10.5
    database that we started in the previous chapter. We will use many of the features
    included in Django REST framework to add new functions to the API and will add
    authentication-related security to it. We will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add unique constraints to the models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update a single field for a resource with the `PATCH` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take advantage of pagination
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize pagination classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand authentication, permissions, and throttling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add security-related data to the models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a customized permission class for object-level permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Persist the user that makes a request and configure permission policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a default value for a new required field in migrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compose requests with the necessary authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browse the API with authentication credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding unique constraints to the models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our API has some important issues that we need to solve quickly. Right now,
    we can create many ESRB ratings with the same description. We shouldn't be able
    to do so, and therefore, we will make the necessary changes to the `EsrbRating`
    model to add a unique constraint on the `description` field. We will also add
    a unique constraint on the `name` field for the `Game` and `Player` models. This
    way, we will learn the necessary steps to make changes to the constraints for
    many models and reflect the changes in the underlying database schema through
    migrations.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you quit the Django development server. Remember that you just need
    to press *Ctrl* + *C* in the Terminal or Command Prompt window in which it is
    running. ...
  prefs: []
  type: TYPE_NORMAL
- en: Updating a single field for a resource with the PATCH method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to the usage of generic class-based views, our API is able to update a single
    field for an existing resource, and therefore, we provide an implementation for
    the `PATCH` method. For example, we can use the `PATCH` method to update an existing
    game and set the value for its `played_once` and `played_times` field to `True`
    and `1`. We don't want to use the `PUT` method because this method is meant to
    replace an entire game. Remember that the `PATCH` method is meant to apply a delta
    to an existing game, and therefore, it is the appropriate method to just change
    the value of the `played_once` and `played_times` fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will compose and send an HTTP `PATCH` request to update an existing
    game, specifically, to update the value of the `played_once` and `played_times`
    fields and set them to `True` and `10`. Make sure you replace `2` with `id` of
    an existing game in your configuration. The code file for the sample is included
    in the `restful_python_2_07_01` folder, in the `Django01/cmd/cmd703.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_01` folder, in the `Django01/cmd/cmd704.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will compose and send an HTTP `PATCH` request with the
    specified JSON key-value pairs. The request has a number after `/games/`, and
    therefore, it will match `'^games/(?P<pk>[0-9]+)/$'` and run the `patch` method
    for the `views.GameDetail` class-based view. Remember that the `patch` method
    is defined in the `RetrieveUpdateDestroyAPIView` superclass and it ends up calling
    the `update` method defined in `mixins.UpdateModelMixin`. If the `Game` instance
    with the updated values for the `played_once` and `played_times` fields is valid
    and it was successfully persisted in the database, the call to the method will
    return the `200 OK` status code and the recently updated `Game` serialized to
    JSON in the response body.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines show a sample response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Taking advantage of pagination
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our database has a few rows for each of the tables that persist the models we
    have defined. However, after we start working with our API in a real-life production
    environment, we will have thousands of player scores, players, and games—although
    the ESRB ratings will still be few in number. We definitely have to prepare our
    API to deal with large result sets. Luckily, we can take advantage of the pagination
    features available in Django REST framework to make it easy to specify how we
    want large result sets to be split into individual pages of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will write commands to compose and send HTTP `POST` requests to create
    10 games that belong to one of the ESRB ratings we have created: `T (Teen)`. This
    way, ...'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing pagination classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `rest_framework.pagination.LimitOffsetPagination` class that we are using
    to provide paginated responses declares a `max_limit` class attribute that defaults
    to `None`. This attribute allows us to indicate the maximum allowable limit that
    can be specified by using the `limit` query parameter. With the default setting,
    there is no limit, and we will be able to process requests that specify a value
    for `1000000` for the `limit` query parameter.
  prefs: []
  type: TYPE_NORMAL
- en: We definitely don't want our API to be able to generate a response with a million
    player scores or players with a single request. Unluckily, there is no configuration
    setting that allows us to change the value that the class assigns to the `max_limit`
    class attribute. Thus, we are forced to create our customized version of the `limit`/`offset`
    pagination style provided by Django REST Framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file named `max_limit_pagination.py` within the `games_service/games`
    folder and enter the following code that declares the new `MaxLimitPagination`
    class. The code file for the sample is included in the `restful_python_2_07_03`
    folder, in the `Django01/games-service/games/max_limit_pagination.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The previous lines declare the `MaxLimitPagination` class as a subclass of the
    `rest_framework.pagination.LimitOffsetPagination` superclass and overrides the
    value specified for the `max_limit` class attribute with `8`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `settings.py` file in the `games_service/games_service` folder and
    replace the line that specified the value for the `DEFAULT_PAGINATION_CLASS` key
    in the dictionary named `REST_FRAMEWORK` with the highlighted line. The following
    lines show the new declaration of the dictionary named `REST_FRAMEWORK`. The code
    file for the sample is included in the `restful_python_2_07_03` folder, in the
    `Django01/games-service/games/settings.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now the generic views will use the recently declared `games.pagination.MaxLimitPagination`
    class, which provides a `limit`/`offset` based style with a maximum `limit` value
    equal to `8`. If a request specifies a value for a limit higher than `8`, the
    class will use the maximum limit value, that is, `8`, and we will never return
    more than `8` items in a paginated response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will write a command to compose and send an HTTP request to retrieve
    the first page for the games, specifically, an HTTP `GET` method to `/games/`
    with the `limit` value set to `20`. The code file for the sample is included in
    the `restful_python_2_07_03` folder, in the `Django01/cmd/cmd719.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_03` folder, in the `Django01/cmd/cmd720.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will use a limit value equal to `8`, instead of the indicated `20`,
    because we are using our customized pagination class. The result will provide
    us the first set with 10 game resources in the `results` key, the total number
    of games for the query in the `count` key, and a link to the next and previous
    pages in the `next` and `previous` keys. In this case, the result set is the first
    page, and therefore, the link to the next page in the `next` key is `http://localhost:8000/games/?limit=8&offset=8`.
    We will receive a `200 OK` status code in the response header and the first eight
    games in the `results` array. The following lines show the header and the first
    lines of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It is a good practice to configure a maximum limit to avoid generating huge
    responses.
  prefs: []
  type: TYPE_NORMAL
- en: Open a web browser and enter `http://localhost:8000/games/`. Replace `localhost`
    with the IP of the computer that is running the Django development server if you
    use another computer or device to run the browser. The Browsable API will compose
    and send an HTTP `GET` request to `/games/` and will display the results of its
    execution, that is, the headers and the JSON games list. Because we have configured
    pagination, the rendered web page will include the default pagination template
    associated with the base pagination class we are using, and will display the available
    page numbers at the upper-right corner of the web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the rendered web page after entering the URL
    in a web browser with the resource description game-list, and the three pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3767e01a-f090-45aa-9fdb-0fdc3afab667.png)'
  prefs: []
  type: TYPE_IMG
- en: Understanding authentication, permissions, and throttling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our current version of the API processes all incoming requests without requiring
    any kind of authentication. Django REST Framework allows us to easily use different
    authentication schemes to identify the user that originated the request or the
    token that signed the request. Then, we can use these credentials to apply the
    permission and throttling policies that will determine whether the request must
    be permitted or not. In a production environment, we can combine an authentication
    scheme with an API running under HTTPS. In our development configuration, we will
    continue working with the API under HTTP, but this is only valid for developing.
  prefs: []
  type: TYPE_NORMAL
- en: As happened with other configurations, ...
  prefs: []
  type: TYPE_NORMAL
- en: Adding security-related data to the models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will associate a game with a creator or owner. Only the authenticated users
    will be able to create new games. Only the creator of a game will be able to update
    it or delete it. All the requests that aren't authenticated will only have read-only
    access to games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `models.py` file in the `games_service/games` folder. Replace the
    code that declares the `Game` class with the following code. The new and edited
    lines are highlighted in the code listing. The code file for the sample is included
    in the `restful_python_2_07_04` folder, in the `Django01/games-service/games/models.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The new version of the `Game` model declares a new `owner` field that uses the
    `django.db.models.ForeignKey` class to provide a many-to-one relationship to the
    `auth.User` model, specifically, to the `django.contrib.auth.User` model. This
    `User` model represents the users within the Django authentication system. The
    `'games'` value specified for the `related_name` argument creates a backward relation
    from the `User` model to the `Game` model. This value indicates the name to use
    to relate a `User` object back to a `Game` object. This way, we will be able to
    access all the games owned by a specific user. Whenever we delete a user, we want
    all the games owned by this user to be deleted too, and therefore, we specify
    the `models.CASCADE` value for the `on_delete` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will run the `createsuperuser` subcommand for `manage.py` to create
    the superuser for Django that we will use to easily authenticate our requests.
    We will create more users later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The command will ask you for the username you want to use for the superuser.
    Enter the desired username and press *Enter*. We will use `your_games_super_user`
    as the username for this example. You will see a line similar to the following
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the command will ask you for the email address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Enter an email address, such as `your_games_super_user@example.com`, and press
    *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the command will ask you for the password for the new superuser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Enter your desired password and press *Enter*. In the examples, we will use
    `WCS3qn!a4ybX#` as the password.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command will ask you to enter the password again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter it and press *Enter*. If both entered passwords match, the superuser
    will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `serializers.py` file in the `games_service/games` folder. Add the
    following code after the last line that declares the imports, before the declaration
    of the `GameCategorySerializer` class. The code file for the sample is included
    in the `restful_python_2_07_04` folder, in the `Django01/games-service/games/serializers.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `UserGameSerializer` class is a subclass of the `HyperlinkedModelSerializer`
    superclass. We use this new serializer class to serialize the games related to
    a user. We just want to include the URL and the game's name, and therefore, the
    code specified `'url'` and `'name'` as members of the field tuple defined in the
    `Meta` inner class. We don't want to use the `GameSerializer` serializer class
    for the games related to a user because we want to serialize fewer fields, and
    therefore, we created the `UserGameSerializer` class.
  prefs: []
  type: TYPE_NORMAL
- en: The `UserSerializer` class is a subclass of the `HyperlinkedModelSerializer`
    superclass. This serializer class is related to the `django.contrib.auth.models.User`
    model. The `UserSerializer` class declares a `games` attribute as an instance
    of the previously explained `UserGameSerializer` with `many` and `read_only` equal
    to `True` because it is a one-to-many relationship and is read-only. We use the
    `games` name that we specified as the `related_name` string value when we added
    the `owner` field as a `models.ForeignKey` instance in the `Game` model. This
    way, the `games` field will provide us with an array of URLs and names for each
    game that belongs to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will make more changes to the `serializers.py` file in the `game``s_service/games`
    folder. We will add an `owner` field to the existing `GameSerializer` class. The
    following lines show the new code for the `GameSerializer` class. The new and
    edited lines are highlighted. The code file for the sample is included in the
    `restful_python_2_07_04` folder, in the `Django01/games-service/games/serializers.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now the `GameSerializer` class declares an `owner` attribute as an instance
    of the `serializers.ReadOnlyField` class with `source` equal to `'owner.username'`.
    This way, we will serialize the value for the `username` field of the related
    `django.contrib.auth.User` hold in the `owner` field. We use the `ReadOnlyField`
    class because the owner is automatically populated when an authenticated user
    creates a game, and therefore, it won't be possible to change the owner after
    a game has been created. This way, the `owner` field will provide us with the
    username that created the game. In addition, we added `'owner'` to the `fields`
    string tuple declared in the `Meta` inner class.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a customized permission class for object-level permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new Python file named `customized_permissions.py` within the `games_service/games`
    folder and enter the following code that declares the new `IsOwnerOrReadOnly`
    class. The code file for the sample is included in the `restful_python_2_07_04`
    folder, in the `Django01/games-service/games/customized_permissions.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `rest_framework.permissions.BasePermission` class is the base class from
    which all permission classes should inherit. ...
  prefs: []
  type: TYPE_NORMAL
- en: Persisting the user that makes a request and configuring permission policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to be able to list all the users and retrieve the details for a single
    user. We will create subclasses of the two following generic class views declared
    in the `rest_framework.generics` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ListAPIView`: Implements the `get` method that retrieves a listing of  `queryset`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RetrieveAPIView`: Implements the `get` method to retrieve a model instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open the `views.py` file in the `games_service/games` folder. Add the following
    code after the last line that declares the imports, before the declaration of
    the `GameCategoryList` class. The code file for the sample is included in the
    `restful_python_2_07_04` folder, in the `Django01/games-service/games/views.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Stay editing the `views.py` file in the `games_service/games` folder. Add the
    following highlighted lines to the `ApiRoot` class declared in the `views.py`
    file. This way, we will be able to navigate to the users related views through
    the Browsable API. The code file for the sample is included in the `restful_python_2_07_04`
    folder, in the `Django01/games-service/games/views.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Stay editing the `views.py` file in the `games_service/games` folder. Add the
    following highlighted lines to the `GameList` class-based view to override the
    `perform_create` method inherited from the `rest_framework.mixins.CreateModelMixin`
    superclass. Remember that the `generics.ListCreateAPIView` class inherits from
    `CreateModelMixin` class and other classes. The code in the new method will populate `owner`
    before a new `Game` instance is persisted in the database. In addition, the new
    code overrides the value for the `permission_classes` class attribute to configure
    permission policies for the class-based view. The code file for the sample is
    included in the `restful_python_2_07_04` folder, in the `Django01/games-service/games/views.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The code for the overridden `perform_create` method passes an additional `owner`
    field to the `create` method by setting a value for the `owner` argument for the
    call to the `serializer.save` method. The code sets the `owner` attribute to the
    value of `self.request.user`, that is, to the user associated to the request.
    This way, whenever a new game is persisted, it will save the user associated to
    the request as its owner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stay editing the `views.py` file in the `games_service/games` folder. Add the
    following highlighted lines to the `GameDetail` class-based view to override the
    value for the `permission_classes` class attribute to configure permission policies
    for the class-based view. The code file for the sample is included in the `restful_python_2_07_04`
    folder, in the `Django01/games-service/games/views.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We have included the `IsAuthenticatedOrReadOnly` class and our previously created
    `IsOwnerOrReadOnly` permission class in the `permission_classes` tuple for both
    the `GameList` and `GameDetail` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `urls.py` file in the `games_service/games` folder. Add the following
    elements to the `urlpatterns` string list. The new strings define the URL patterns
    that specify the regular expressions that have to be matched in the request to
    run a specific method for the previously created class-based views in the `views.py`
    file: `UserList` and `UserDetail`. The code file for the sample is included in
    the `restful_python_2_07_04` folder, in the `Django01/games-service/games/serializers.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open the `urls.py` file in the `games_service` folder, specifically, the
    `games_service/urls.py` file. The file defines the root URL configurations and
    we want to include the URL patterns to allow the Browsable API to display the
    login and logout views. The following lines show the new code with the added line
    highlighted. The code file for the sample is included in the `restful_python_2_07_04`
    folder, in the `Django01/games-service/games/serializers.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The new line adds the URL patterns defined in the `rest_framework.urls` module
    and associates them to the `^api-auth/ pattern`. The browsable API uses `api-auth/`
    as a prefix for all the view related to the user login and logout
  prefs: []
  type: TYPE_NORMAL
- en: Setting a default value for a new required field in migrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have persisted many games in our database and we have added a new `owner`
    field for the games that are a required field. We don't want to delete all the
    existing games, and therefore, we will take advantage of some features in Django
    that make it easy for us to make the changes in the underlying database without
    losing the existing data.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to retrieve the `id` for the superuser we have created to use it
    as the default owner for the existing games. Django will allow us to easily update
    the existing games to set the owner user for them.
  prefs: []
  type: TYPE_NORMAL
- en: Run the following commands to retrieve the `id` from the `auth_user` table for
    the row whose `username` matches `'superuser'`. Replace `your_games_super_user
    ...`
  prefs: []
  type: TYPE_NORMAL
- en: Composing requests with the necessary authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will write a command to compose and send an HTTP `POST` request to create
    a new game without authentication credentials. The code file for the sample is
    included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd721.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd722.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We will receive a `403 Forbidden` status code in the response header and a
    detailed message indicating that we didn''t provide authentication credentials
    in the JSON body. The following lines show a sample response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to create a new game, that is, to make a `POST` request to `/games/`,
    we need to provide authentication credentials by using HTTP authentication. Now
    we will compose and send an HTTP request to create a new game with authentication
    credentials, that is, with the superuser name and their password. Remember to
    replace `your_games_super_user` with the name you used for the superuser and `WCS3qn!a4ybX#`
    with the password you configured for this user. The code file for the sample is
    included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd723.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd724.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If the new `Game` with the user named `your_games_super_user` as its owner
    was successfully persisted in the database, the function returns an HTTP `201
    Created` status code and the recently-persisted `Game` serialized to JSON in the
    response body. The following lines show an example response for the HTTP request,
    with the new `Game` object in the JSON response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will compose and send an HTTP `PATCH` request to update the `played_once`
    and `played_times` field values for the previously created game with authentication
    credentials. However, in this case, we will use the other user we created in Django
    to authenticate the request. Remember to replace `gaston-hillar` with the name
    you used for the user and `FG$gI^76q#yA3v` with their password. In addition, replace
    `13` with the `id` generated for the previously-created game in your configuration.
    The code file for the sample is included in the `restful_python_2_07_04` folder,
    in the `Django01/cmd/cmd725.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd726.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We will receive a `403 Forbidden` status code in the response header and a
    detailed message indicating that we do not have permission to perform the action
    in the JSON body. The owner for the game we want to update is `your_games_super_user`
    and the authentication credentials for this request use a different user. Hence,
    the operation is rejected by the `has_object_permission` method in the `IsOwnerOrReadOnly`
    class. The following lines show a sample response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If we compose and send an HTTP request with the same authentication credentials
    for that resource with the `GET` method, we will be able to retrieve the game
    that the specified user doesn''t own. The request will work because `GET` is one
    of the safe methods and a user that is not the owner is allowed to read the game.
    Remember to replace `gaston-hillar` with the name you used for the user and `FG$gI^76q#yA3v`
    with their password. In addition, replace `13` with the ID generated for the previously
    created game in your configuration. The code file for the sample is included in
    the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd727.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd728.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Browsing the API with authentication credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a web browser and enter `http://localhost:8000/`. Replace `localhost` with
    the IP of the computer that is running the Django development server if you use
    another computer or device to run the browser. The Browsable API will compose
    and send a `GET` request to `/` and will display the results of its execution,
    that is, the API root. You will notice there is a Log in hyperlink at the upper-right
    corner.
  prefs: []
  type: TYPE_NORMAL
- en: Click Log in and the browser will display the Django REST Framework login page.
    Enter `gaston-hillar` in the username field, enter `FG$gI^76q#yA3v` in the password
    field, and click Log In. Now, you will be logged in as `gaston-hillar` and all
    the requests you compose and send through the Browsable API ...
  prefs: []
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see whether you can answer the following questions correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following lines define a field named `title` in a model that will
    generate a unique constraint on this field?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`title = django.db.models.CharField(max_length=250, unique=True)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`title = django.db.models.UniqueCharField(max_length=250)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`title = django.db.models.CharField(max_length=250, options=django.db.models.unique_constraint)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following lines define a field named `title` in a model that won't
    generate a unique constraint on this field?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`title = django.db.models.CharField(max_length=250, unique=False)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`title = django.db.models.NonUniqueCharField(max_length=250)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`title = django.db.models.CharField(max_length=250, options=django.db.models.allow_duplicates)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following setting's keys in the `REST_FRAMEWORK` dictionary specifies
    a global setting with the default pagination class that the generic views will
    use to provide paginated responses?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DEFAULT_PAGINATED_RESPONSE_PARSER`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DEFAULT_PAGINATION_CLASS`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DEFAULT_PAGINATED_RESPONSE_CLASS`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following pagination classes provides a limit/offset-based style
    in Django REST framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`rest_framework.pagination.LimitOffsetPaging`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`rest_framework.styles.LimitOffsetPagination`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`rest_framework.pagination.LimitOffsetPagination`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `rest_framework.authentication.BasicAuthentication` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Works with Django's session framework for authentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides an HTTP basic authentication against username and password
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides a simple token-based authentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `rest_framework.authentication.SessionAuthentication` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Works with Django's session framework for authentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides an HTTP basic authentication against username and password
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides a simple token-based authentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following setting''s keys in the `REST_FRAMEWORK` dictionary specifies
    a global setting with a tuple of string that indicates the classes we want to
    use for authentication?:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DEFAULT_AUTH_CLASSES`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`AUTHENTICATION_CLASSES`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DEFAULT_AUTHENTICATION_CLASSES`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we improved the RESTful API in many ways. We added unique constraints
    to the model and updated the database, we made it easy to update single fields
    with the `PATCH` method, and we took advantage of pagination.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we started working with authentication, permissions, and throttling. We
    added security-related data to the models and we updated the database. We made
    many changes in the different pieces of code to achieve a specific security goal
    and we took advantage of Django REST Framework's authentication and permissions
    features.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have built an improved and complex API that takes into account authentication
    and uses permission policies, we will use additional abstractions included in
    the framework, adding ...
  prefs: []
  type: TYPE_NORMAL
