- en: Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we learned about functions and scope of variable. In functions,
    we learned about defining a function, functions with arguments, functions with
    arguments and return type, functions with default arguments, functions with variable
    length arguments, and, finally, in functions, we saw how to use key-value pairs
    as variable length arguments. We covered the topic of scope variable and memory
    management. In this chapter, we will touch the essence of every programming language,
    that is, collections. Some of the topics under collections such as list, dictionary,
    and tuple have already been covered in the previous chapter. In this chapter,
    we will be looking at counter, deque, ordered dictionary, default dictionary,
    and named tuple.
  prefs: []
  type: TYPE_NORMAL
- en: Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While for people with some experience in programming this is not a new topic,
    but those who are just taking up programming for the first time, it is a topic
    that will raise quite a bit of curiosity in their minds. What is a collection?
    The answer to this question can be well understood by the day-to-day examples
    from our lives. Everyone has seen a collection of stamps, collection of books,
    or collection of flowers, and so on. So basically we group items in a collection.
    What type of items does a collection contain? Pretty sure this question would
    be the next one. Well, a collection can contain either one type of item, for example,
    a collection of flowers (here, the type is flowers) or the collection can be a
    hybrid collection, for example, a collection of books and magazines (here, the
    type being books and magazines). In Python programming, each collection has unique
    characteristic and can be used to achieve the desired outcome. All the collections
    are part of the `collections` module.
  prefs: []
  type: TYPE_NORMAL
- en: More about collections can be found at the website [https://docs.python.org/2/library/collections.html](https://docs.python.org/2/library/collections.html).
  prefs: []
  type: TYPE_NORMAL
- en: Counter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Counter is a container  and it tracks the frequency of values.
  prefs: []
  type: TYPE_NORMAL
- en: Container is a generic word, which can mean anything that can hold anything.
    For example, a bucket of water can be considered as container which contains water.
    Similarly, a list of guests can be considered as another container that holds
    the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It will be more clear with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image1-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we directly use the Python command line to show
    the example. Before using `Counter`, you will need to import the `collections`
    module. In the preceding example, we pass on a list of characters to `Counter`. The
    `Counter` processes the list and returns the frequency of each character. Here,
    frequency means how many times each character occurs within the list. The outcome
    is in the form of dictionary, where each character of the input list becomes a
    key and its frequency becomes value for that key. For example, `d` is the key
    and `4` is the value which means the character `d` has appeared four times in
    the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s view another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image2-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We provide sequence of strings directly to the `Counter`. Here, in this case,
    even empty spaces are taken into account and their frequency is calculated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, we create a list of movies and then pass on the list to the
    `Counter`, which returns the frequency of the movies present in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Update function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At any given time during programming, if there is a need to add more values
    to the existing counter, then the `update()` method can be used instead of creating
    a new counter. Let's look at the `update()` method of `Counter`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image4-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we try to update an empty `Counter` using the `update()`
    method and passing `"Locarno Caine"` to the method. Thereby, the `Counter` returns
    frequency of each character. Did you notice that empty space also has a frequency?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image5-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we use the `update()` method to update the existing
    sequence of strings provided to the `Counter`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image6-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding case, we used the `update()` method to increase the frequency
    of characters `"a"` and `"P"` to the existing sequence of strings. Here, we learned how
    the `update()` method can be used to update an empty counter, update the existing
    input to the counter, and increase the frequency of the existing input sequence
    of strings to the counter.
  prefs: []
  type: TYPE_NORMAL
- en: Usage of counters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far our examples were demonstrated using Python IDLE GUI. Now we will see
    the usage of counter by creating a Python file. For those who did not understand
    what is a Python file, read [Chapter 1](lrn-py-7d_ch01.html), *Getting Started
    with Python*, and then you can come back and continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the given example, we try to compare the stream of strings provided as input
    to the `Counter` with another stream of strings. In this case, `Counter` prints
    out only the frequency of the sequence of strings we want to compare and not the
    input string to the `Counter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image7-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Counter does not raise `KeyError` for unknown items. If a value is not found in
    the input string (as with `W`, `k`, and `?` in this example), then its count is
    `0`.
  prefs: []
  type: TYPE_NORMAL
- en: King Tutankhamen (or Tutankhamun) ruled Egypt as pharaoh for 10 years until
    his death at the age of 19, around 1324 B.C. He was barely known to the modern
    world until 1922, when British archaeologist, Howard Carter, chiseled through
    a doorway and entered the boy pharaoh’s tomb, which had remained sealed for more
    than 3,200 years. This information has been taken from [http://www.history.com/topics/ancient-history/tutankhamen](http://www.history.com/topics/ancient-history/tutankhamen).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at another example where we will deal with the basic file operations.
    Here, we will provide a text file, which has sentences and we will provide this
    file to counter as input. The following screenshot shows the text file with some
    texts that will serve as input to the counter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image8-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s look at the code for passing the text file as the input to the
    `Counter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding program gives the frequency of all the characters present in
    the text file. We will use the `open()` function to open the file in `read` mode
    and `file_txt` variable serves as handle to this file handling operation. We will
    use the for loop and update our counter with inputs from the file one by one.
    The outcome is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image8-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There could be a scenario where you might require to choose the first five letters
    of higher frequency. Here you can achieve the desired outcome using the `most_common()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the example for the preceding scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We have modified our example here and now we are trying to retrieve the first
    `5` letters of higher frequency. Here we have simply made use of the `most_common()`
    method of `Counter`. The outcome is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image9-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Operations of Python collection counter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Python collection counter, you can apply the sets operation such as addition,
    subtraction, union, and intersection. Let''s take one example to illustrate the
    set operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, in the preceding example, we are performing set operations on two counters.
    We have done addition, subtraction, union, and intersection on both the sets.
    The outcome is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image10-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Deque
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Deque double-ended queue. It can be visualized similar to a hollow tube or
    pipe, which is open at the both ends. Deques allows addition and removal of elements
    from either ends. It will be more clear with examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are providing input to deque `''India''` and we are printing the left-hand
    side and right-hand side elements of deque using the index and then we are removing
    a character `''a''` from the right-hand side of the deque using `remove()`. The
    output will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image11-5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `len()` function gives the length of the deque.
  prefs: []
  type: TYPE_NORMAL
- en: Populating deque
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have already read that deque is a double-ended queue, hence it means
    elements can be added from either side or the deque can be populated from either
    side. In order to add elements or populate the deque, we have four functions: `extend()`,
    `append()`, `extendleft()`, and `appendleft()`. Let''s take an example to illustrate
    how we can populate or add elements to both sides of the deque:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, in this case, we are providing `"Google"` as input to the deque. We then
    extend the list by passing `''raj''` as the input and it is extended to the right-hand
    side of the deque. We append another input to the right-hand side of the deque.
    In order to add elements to the left, we use `extendleft()` and `appendleft()`.
    The output of the program will clear the doubts as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image12-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The functions `extend()` and `append()` both add elements to any collection.
    The only difference is that `extend()` adds each element to the collection one
    by one, while `append()` considers all the elements as one and appends all at
    the end of the collection. For example, `extend(['Dunkirk','Calais'])` adds two
    elements `'Dunkirk'` and `'Calais'` one by one to the collection. While `append``(['Dunkirk','Calais'])`
    considers both of them as one element and adds to the end of the collection.
  prefs: []
  type: TYPE_NORMAL
- en: The `extendleft()` function iterates over its input and performs the equivalent
    of an `appendleft()` for each item. The final outcome is that the deque contains
    the input sequence in reverse order.
  prefs: []
  type: TYPE_NORMAL
- en: Deque consumption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deque can be consumed from either both ends or one end. For consuming deque
    elements or retrieval of elements, we use two functions: `pop()` and `popleft()`.
    It will be more clear with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we use `pop` to remove the elements one at a time from right end of the
    deque. In this case, char `b` is removed from the right end of the deque. The
    `popleft()` function removes element from the left end of the deque. Here, `popleft()`
    removed char `a` from the left end of the deque as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image13-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Deque rotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deque rotation allows rotation of items on either side. For right-side rotation,
    the notation is `(+n)` and for left-side rotation, the notation used is `(-n)`,
    where n is the number of rotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, using the `xrange()` function we generate a list of `5` numbers,
    which will serve as input to our deque. We rotate the deque on the right side
    and then on the left side. The results can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image14-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the output, we can observe that in the right rotation, items are shifted
    to the right direction. In the left rotation, the items are shifted to the left
    direction.
  prefs: []
  type: TYPE_NORMAL
- en: Ordered dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `OrderedDict` is a subclass of the dictionary and it remembers the order
    in which the elements are added:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the comparison between dictionary and ordered dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we create a normal dictionary and an ordered dictionary. Both the outputs
    are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image15-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we could see, the ordered dictionary has retained the order in which the
    elements were added.
  prefs: []
  type: TYPE_NORMAL
- en: Sorting of ordered dictionary based upon keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can sort the ordered dictionary using the `sorted()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take an example to understand the `sorted()` function. For a refresher
    on `sorted()` function, you can revisit [Chapter 4](lrn-py-7d_ch04.html), *Lists*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we create an ordered dictionary `d1` and then sort it using the `sorted()`
    function. The following output will make it more clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image16-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, the dictionary is sorted according to keys.
  prefs: []
  type: TYPE_NORMAL
- en: Sorting of ordered dictionary based upon values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also sort the ordered dictionary based upon values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the lambda function changes the key to its value. As ordered, the dictionary
    returns the `(key, value)` pair. The lambda function makes `key = value`, thus
    the ordered dictionary will be sorted by its value. Let''s take an example to
    understand the sorting of the ordered dictionary based upon values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can clearly see from the preceding example, the `lambda()` function
    converts `key` to `value` and we can see the output as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image17-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The lambda function is explained in the special function section.
  prefs: []
  type: TYPE_NORMAL
- en: Default dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have learned about regular dictionary and ordered dictionary. In this
    section, we will learn a special type of dictionary called default dictionary,
    which is provided by the `defaultdict` module of collections. A `defaultdict`
    works exactly the way a normal `dict` does, but it is initialized with a callable
    function called `default_factory()` that takes no arguments and provides a default
    value for a nonexistent key.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We will try to understand with two examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, our function or function `func` acts as a `default_factory` function.
    We have assigned `game["A"]= "Football"`, where  `"A"` is the key. If key is new
    (not found in the dictionary `"game"`), then `defaultdict` does not give an error;
    instead, it returns the default value, which is returned by the `default_factory()`
    function. So, for the new key `"C"`, the default value is `"Cricket"`. This will
    be more clear with the mentioned output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image18-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding task can be achieved by following the lambda function. Let''s
    understand with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we just used the lambda function, which initializes the default value
    of `"Cricket"` if any new key is encountered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image19-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, next we will use int as `default_factory` function. The default value
    for int is `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we just initialized the int value for any new key encountered. For `game["C"]`,
    the output returned is `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image20-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sample problem solved by the default dictionary - scenario one
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s consider a simple problem solved by default dictionary; here we would
    like to calculate the frequency of elements present in the list. Let''s examine
    the scenario with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As the default value is initialized with `0` we have incremented it with `1`,
    and, in this way, we can calculate the frequency of elements present in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image21-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sample problem solved by the default dictionary - scenario two
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s analyze a scenario where we have a list of tuple pairs. The list `tuple_list_county
    = [(''US'', ''Visconsin''), (''Germany'', ''Bavaria''), (''UK'', ''Bradfordshire''),
    (''India'', ''punjab''), (''China'', ''Shandong''), (''Canada'', ''Nova Scotia'')]`
    is the pair of `(Country, county)`. So our aim is to make our county or state
    as `key` and `country` as the list of values. Let''s do it with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the default value is the list itself. The first value of the tuple is
    fixed as `key` and the second value is appended:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Named tuple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python facilitates you to create your own data type. In the Python collection, `namedtuple`
    gives you a special feature to create your own data type. In the C language, you
    might have used struct to create your own data type. When you want to create a
    new data type, you would like to explore the answers to some questions as what
    should be the name of the new data type? What are the fields of the new data type?
    Let's discuss this with a syntax and an example of `namedtuple.`
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try to understand the syntax of `namedtuple`. In the preceding syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: The `typename` defines the name of the new data type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `field_names` can be a sequence of strings such as `['x', 'y']` or string
    in which values are whitespaced or `,` separated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If verbose is `False`, then the class definition would not be printed, it is
    a good idea to keep it `False`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If rename is `False`, then the invalid field names are automatically replaced
    with positional names, for example, `'def, age, empid'` is converted to `'_0 ,
    age, empid'` because `def` is a keyword
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s discuss with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we create a `namedtuple emp`, which will contain the name of the employee,
    his/her age and the employee ID. We print out the complete record along with `name`,
    `empid`, and what type of record `namedtuple` contains. In order to access the
    values of `namedtuple`, we use the `.` operator along with the name of the tuple.
    As the `namedtuple` contains the record type as `emp`, the outcome displays the
    same as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image23-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding values and creating a dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next example, we will understand how to add list values into `namedtuple`
    and how to make dictionary from `namedtuple`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, by using  `_make`, we can add a list into a `namedtuple` and by using
    `_asdict` we can create dictionary of `namedtuple`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image24-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, consider a scenario where you would like to replace a value from `namedtuple.`
    Like tuple, the `namedtuple` is also immutable. But you can use the  `_replace`
    function to replace the value from `namedtuple`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are simply using the dot (`.`) operator followed by the `_replace()`
    function and providing the new value as an input to the `_replace()` function.
    In this way, we can replace the existing value in a `namedtuple`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image25-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In collections, we learned about collections, and asked what are collections?
    What is their importance in any programming language? We learned about different
    types of collections, which are available in the Python programming language.
    We learned about module collection and its various members, which we import in
    our code. We also learned about counter, deque, ordered dictonary, default dictionary,
    and finally `namedtuple`. In the next chapter, we will take some object-oriented
    programming (OOPs) concepts and we will see how Python supports the OOPs concepts.
  prefs: []
  type: TYPE_NORMAL
