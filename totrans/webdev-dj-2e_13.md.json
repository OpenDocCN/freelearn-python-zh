["```py\n    csv_file = open('path to csv file')\n    ```", "```py\n    import csv\n    csv_data = csv.reader(csv_file)\n    ```", "```py\n    import csv\n    ```", "```py\n    csv_reader = csv.reader(csv_file)\n    ```", "```py\n    for csv_record in csv_data:\n        # do something\n    ```", "```py\n    csv_file.close()\n    ```", "```py\n    import csv\n    def read_csv(filename):\n        \"\"\"Read and output the details of CSV file.\"\"\"\n        try:\n           with open(filename, newline='') as csv_file:\n               csv_reader = csv.reader(csv_file)\n               for record in csv_reader:\n                   print(record)\n        except (IOError, OSError) as file_read_error:\n           print(\"Unable to open the csv file. Exception: {}\".format(file_read_error))\n    if __name__ == '__main__':\n        read_csv('market_cap.csv')\n    ```", "```py\n    try:\n           with open(filename, newline='') as csv_file:\n    ```", "```py\n    for record in csv_reader:\n        print(record)\n    ```", "```py\n    if __name__ == '__main__':\n        read_csv(market_cap.csv')\n    ```", "```py\n    python3 csv_reader.py\n    ```", "```py\n    csv_file = open('path to csv file', 'w')\n    ```", "```py\n    csv_writer = csv.writer(csv_file)\n    ```", "```py\n    record = ['value1', 'value2', 'value3']\n    csv_writer.writerow(record)\n    ```", "```py\n    records = [['value11', 'value12', 'value13'],\\\n               ['value21', 'value22', 'value23']]\n    csv_writer.writerows(records)\n    ```", "```py\n    csv_file.close()\n    ```", "```py\n    import csv\n    def write_csv(filename, header, data):\n        \"\"\"Write the provided data to the CSV file.\n        :param str filename: The name of the file \\\n            to which the data should be written\n        :param list header: The header for the \\\n            columns in csv file\n        :param list data: The list of list mapping \\\n            the values to the columns\n        \"\"\"\n        try:\n            with open(filename, 'w') as csv_file:\n                csv_writer = csv.writer(csv_file)\n                csv_writer.writerow(header)\n                csv_writer.writerows(data)\n        except (IOError, OSError) as csv_file_error:\n            print\\\n            (\"Unable to write the contents to csv file. Exception: {}\"\\\n             .format(csv_file_error))\n    ```", "```py\n     def write_csv(filename, header, data):\n    ```", "```py\n    with open(filename, 'w') as csv_file:\n    ```", "```py\n    csv_writer = csv.writer(csv_file)\n    ```", "```py\n    csv_writer.writerow(header)\n    ```", "```py\n    csv_writer.writerows(data)\n    ```", "```py\n    if __name__ == '__main__':\n        header = ['name', 'age', 'gender']\n        data = [['Richard', 32, 'M'], \\\n                ['Mumzil', 21, 'F'], \\\n                ['Melinda', 25, 'F']]\n        filename = 'sample_output.csv'\n        write_csv(filename, header, data)\n    ```", "```py\n    python3 csv_writer.py\n    ```", "```py\ndef read_csv(filename):\n    \"\"\"Read and output the details of CSV file.\"\"\"\n    try:\n       with open(filename, newline='') as csv_file:\n           csv_reader = csv.DictReader(csv_file)\n           for record in csv_reader:\n               print(record)\n    except (IOError, OSError) as file_read_error:\n        print\\\n        (\"Unable to open the csv file. Exception: {}\"\\\n        .format(file_read_error))\n```", "```py\npython3 csv_reader.py\n```", "```py\nprint(record.get('stock_symbol'))\n```", "```py\ndef write_csv(filename, header, data):\n    \"\"\"Write the provided data to the CSV file.\n    :param str filename: The name of the file \\\n        to which the data should be written\n    :param list header: The header for the \\\n        columns in csv file\n    :param list data: The list of dicts mapping \\\n        the values to the columns\n    \"\"\"\n    try:\n        with open(filename, 'w') as csv_file:\n            csv_writer = csv.DictWriter(csv_file, fieldnames=header)\n            csv_writer.writeheader()\n            csv_writer.writerows(data)\n    except (IOError, OSError) as csv_file_error:\n        print\\\n        (\"Unable to write the contents to csv file. Exception: {}\"\\\n        .format(csv_file_error))\n```", "```py\ndata = [{'name': Richard, 'age': 32, 'gender': 'M'}, \\\n        {'name': Mumzil', 'age': 21, 'gender':'F'}, \\\n        {'name': 'Melinda', 'age': 25, 'gender': 'F'}]\n```", "```py\nfile_handler = open('path to file', 'rb')\n```", "```py\npip install XlsxWriter\n```", "```py\nimport xlsxwriter\n```", "```py\nworkbook = xlsxwriter.Workbook(filename)\n```", "```py\nworksheet = workbook.add_worksheet()\n```", "```py\nworksheet.write(row_num, col_num, col_value)\n```", "```py\nworkbook.close()\n```", "```py\n    pip install XlsxWriter\n    ```", "```py\n    import xlsxwriter\n    def create_workbook(filename):\n        \"\"\"Create a new workbook on which we can work.\"\"\"\n        workbook = xlsxwriter.Workbook(filename)\n        return workbook\n    ```", "```py\n    def create_worksheet(workbook):\n        \"\"\"Add a new worksheet in the workbook.\"\"\"\n        worksheet = workbook.add_worksheet()\n        return worksheet\n    ```", "```py\n    def write_data(worksheet, data):\n        \"\"\"Write data to the worksheet.\"\"\"\n        for row in range(len(data)):\n            for col in range(len(data[row])):\n                worksheet.write(row, col, data[row][col])\n    ```", "```py\n    def close_workbook(workbook):\n        \"\"\"Close an opened workbook.\"\"\"\n        workbook.close()\n    ```", "```py\n    if __name__ == '__main__':\n        data = [['John Doe', 38], \\\n                ['Adam Cuvver', 22], \\\n                ['Stacy Martin', 28], \\\n                ['Tom Harris', 42]]\n        workbook = create_workbook('sample_workbook.xlsx')\n        worksheet = create_worksheet(workbook)\n        write_data(worksheet, data)\n        close_workbook(workbook)\n    ```", "```py\n    python3 xlsx_demo.py\n    ```", "```py\ndef write_data(worksheet, data):\n    \"\"\"Write data to the worksheet.\"\"\"\n    for row in range(len(data)):\n        for col in range(len(data[row])):\n            worksheet.write(row, col, data[row][col])\n    worksheet.write(len(data), 0, \"Avg. Age\") \n    # len(data) will give the next index to write to\n    avg_formula = \"=AVERAGE(B{}:B{})\".format(1, len(data))\n    worksheet.write(len(data), 1, avg_formula)\n```", "```py\n    pip install weasyprint\n    ```", "```py\n    from weasyprint import HTML\n    def generate_pdf(url, pdf_file):\n        \"\"\"Generate PDF version of the provided URL.\"\"\"\n        print(\"Generating PDF...\")\n        HTML(url).write_pdf(pdf_file)\n    ```", "```py\n    from weasyprint import HTML\n    ```", "```py\n    def generate_pdf(url, pdf_file):\n    ```", "```py\n    HTML(url).write_pdf(pdf_file)\n    ```", "```py\n    if __name__ == '__main__':\n        url = 'http://text.npr.org'\n        pdf_file = 'demo_page.pdf'\n        generate_pdf(url, pdf_file)\n    ```", "```py\n    python3 pdf_demo.py\n    ```", "```py\nfrom weasyprint import CSS, HTML\ndef generate_pdf(url, pdf_file):\n    \"\"\"Generate PDF version of the provided URL.\"\"\"\n    print(\"Generating PDF...\")\n    css = CSS(string='body{ font-size: 8px; }')\n    HTML(url).write_pdf(pdf_file, stylesheets=[css])\n```", "```py\npip install plotly\n```", "```py\nfrom plotly.graph_objs import graphs\nfigure = graphs.Figure()\n```", "```py\nscatter_plot = graphs.Scatter(x_axis_values, y_axis_values)\n```", "```py\nfigure.add_trace(scatter_plot)\n```", "```py\nfrom plotly.offline import plot\nvisualization_html = plot(figure, output_type='div')\n```", "```py\n    pip install plotly\n    ```", "```py\n    from plotly.offline import plot\n    import plotly.graph_objs as graphs\n    ```", "```py\n    def generate_scatter_plot(x_axis, y_axis):\n    ```", "```py\n        figure = graphs.Figure()\n    ```", "```py\n        scatter = graphs.Scatter(x=x_axis, y=y_axis)\n        figure.add_trace(scatter)\n    ```", "```py\n        return plot(figure, output_type='div')\n    ```", "```py\n    def generate_scatter_plot(x_axis, y_axis):\n        figure = graphs.Figure()\n        scatter = graphs.Scatter(x=x_axis, y=y_axis)\n        figure.add_trace(scatter)\n        return plot(figure, output_type='div')\n    ```", "```py\n    def generate_html(plot_html):\n        \"\"\"Generate an HTML page for the provided plot.\"\"\"\n        html_content = \"<html><head><title>Plot       Demo</title></head><body>{}</body></html>\".format(plot_html)\n        try:\n            with open('plot_demo.html', 'w') as plot_file:\n                plot_file.write(html_content)\n        except (IOError, OSError) as file_io_error:\n            print\\\n            (\"Unable to generate plot file. Exception: {}\"\\\n            .format(file_io_error))\n    ```", "```py\n    if __name__ == '__main__':\n        x = [1,2,3,4,5]\n        y = [3,8,7,9,2]\n        plot_html = generate_scatter_plot(x, y)\n        generate_html(plot_html)\n    ```", "```py\n    python3 scatter_plot_demo.py\n    ```", "```py\ndef user_profile(request):\n    username = request.user.get_username()\n    scatter_plot_html = scatter_plot_books_read(username)\n    return render(request, 'user_profile.html'),\\\n                 (context={'plt_div': scatter_plot_html})\n```", "```py\n    pip install plotly\n    ```", "```py\n    import datetime\n    from django.db.models import Count\n    from reviews.models import Review\n    ```", "```py\n    def get_books_read_by_month(username):\n        \"\"\"Get the books read by the user on per month basis.\n        :param: str The username for which the books needs to be returned\n        :return: dict of month wise books read\n        \"\"\"\n        current_year = datetime.datetime.now().year\n        books = Review.objects.filter\\\n                (creator__username__contains=username),\\\n                (date_created__year=current_year)\\\n                .values('date_created__month')\\\n                .annotate(book_count=Count('book__title'))\n        return books\n    ```", "```py\n    Review.objects.filter(creator__username__contains=username,date_created__year=current_year).values('date_created__month').annotate(book_count=Count('book__title'))\n    ```", "```py\n    from plotly.offline import plot\n    import plotly.graph_objects as graphs\n    from .utils import get_books_read_by_month\n    ```", "```py\n    @login_required\n    def profile(request):\n        user = request.user\n        permissions = user.get_all_permissions()\n        # Get the books read in different months this year\n        books_read_by_month = get_books_read_by_month(user.username)\n        \"\"\"\n        Initialize the Axis for graphs, X-Axis is months, \n        Y-axis is books read\n        \"\"\"\n        months = [i+1 for i in range(12)]\n        books_read = [0 for _ in range(12)]\n        # Set the value for books read per month on Y-Axis\n        for num_books_read in books_read_by_month:\n            list_index = num_books_read['date_created__month'] - 1\n            books_read[list_index] = num_books_read['book_count']\n        # Generate a scatter plot HTML\n        figure = graphs.Figure()\n        scatter = graphs.Scatter(x=months, y=books_read)\n        figure.add_trace(scatter)\n        figure.update_layout(xaxis_title=\"Month\"),\\\n                            (yaxis_title=\"No. of books read\")\n        plot_html = plot(figure, output_type='div')\n        # Add to template\n          return render(request, 'profile.html'),\\\n                       ({'user': user, 'permissions': permissions,\\\n                       'books_read_plot': plot_html})\n    ```", "```py\n    books_read_by_month = get_books_read_by_month(user.username)\n    ```", "```py\n    months = [i+1 for i in range(12)]\n    ```", "```py\n    books_read = [0 for _ in range(12)]\n    ```", "```py\n        for num_books_read in books_read_by_month:\n            list_index = num_books_read['date_created__month'] - 1\n            books_read[list_index] = num_books_read['book_count']\n    ```", "```py\n    figure = graphs.Figure()\n    scatter = graphs.Scatter(x=months, y=books_read)\n    figure.add_trace(scatter)\n    figure.update_layout(xaxis_title=\"Month\", \\\n                         yaxis_title=\"No. of books read\")\n    plot_html = plot(figure, output_type='div')\n    ```", "```py\n    return render(request, 'profile.html',\n           {'user': user, 'permissions': permissions,\\\n            'books_read_plot': plot_html}\n    ```", "```py\n    {% extends \"base.html\" %}\n    {% block title %}Bookr{% endblock %}\n    {% block heading %}Profile{% endblock %}\n    {% block content %}\n      <ul>\n          <li>Username: {{ user.username }} </li>\n          <li>Name: {{ user.first_name }} {{ user.last_name }}</li>\n          <li>Date Joined: {{ user.date_joined }} </li>\n          <li>Email: {{ user.email }}</li>\n          <li>Last Login: {{ user.last_login }}</li>\n          <li>Groups: {{ groups }}{% if not groups %}None{% endif %} </li>\n      </ul>\n    books_read_plot variable passed in the view function to be used inside our HTML template. Also note that autoescape is set to off for this variable. This is required because this variable contains HTML generated by the plotly library and if you allow Django to escape the HTML, you will only see raw HTML in the profile page and not a graph visualization.With this, you have successfully integrated the plot into the application.\n    ```", "```py\n    python manage.py runserver localhost:8080\n    ```"]