["```py\n>>>import collections\n>>>collections.Counter()\n\n```", "```py\nimport collections \n\nc = collections.Counter('King TutanKhamen was the youngest Pharoah')\nprint c\nfor letter in 'What a king?':\n print '%s : %d' % (letter, c[letter])\n\n```", "```py\nimport collections\n\nco = collections.Counter()\nfile_txt = open(\"Counter_input.txt\",\"r\")\nfor line in file_txt:\n        co.update(line.lower())\nprint co\n\n```", "```py\nmost_common(number) \n\n```", "```py\nimport collections\n\nco = collections.Counter()\nfile_txt = open(\"Counter_input.txt\",\"r\")\nfor line in file_txt:\n  co.update(line.lower())\n\nprint \"Most common:n\"\nfor letter, count in co.most_common(5):\n     print '%s: %7d' % (letter, count)\n\n```", "```py\nimport collections\n\nco1 = collections.Counter(['C','L','E','O','P','A','T','R','A'])\nco2 = collections.Counter('JULIUS CAESAR')\n\nprint co1\nprint co2\n\nprint \"addition n\",co1 + co2 # Prints addition of sets\nprint \"Subtractionn\", co1 - co2 # Prints substration of sets\n\nprint \"Union n\", co1 | co2 # Prints union of sets\nprint \"Intersection n\", co1 & co2  # Prints intersection of sets\n\n```", "```py\nimport collections \n\nde = collections.deque('India')\nprint 'deque:', de\nprint 'Lenght :', len(de)\nprint 'left end:', de[0]\nprint 'right end:', de[-1]\n\nde.remove('a')\n\nprint 'After removing:', de\n\n```", "```py\nimport collections\nd1 = collections.deque(\"Google\")\nprint d1\nd1.extend('raj')\nprint \"after extend :n\", d1\nd1.append('hi')\nprint \"After append :n\",d1\n\nd1.extendleft(\"de\")\nprint \"after extend leftn \", d1\n\nd1.appendleft(\"le\")\nprint \"after append leftn \", d1\n\n```", "```py\nimport collections\nd1 = collections.deque(\"abcdefghacmqdcb\")\nprint d1\nprint \"Poped element \",d1.pop()\nprint d1\nprint \"Poped left element \",d1.popleft()\nprint d1\n\n```", "```py\nimport collections\n\nd = collections.deque(xrange(6))\nprint \"Normal queue\", d\n\nd.rotate(2)\nprint \"nRight rotation :\", d\n\nd1 = collections.deque(xrange(6))\nd1.rotate(-2)\nprint \"nleft rotation :\", d1\n\n```", "```py\nd1 = collections.OrderedDict() \nd1 is ordered dictionary here.\n\n```", "```py\nimport collections \nprint 'Regular Dictionary'\nd = {}\nd['a']= 'SAS'\nd['b']= 'PYTHON'\nd['c']= 'R'\n\nfor k,v in d.items():\n  print k, \":\",v\n\nprint 'n Ordered dictionary'\n\nd1 = collections.OrderedDict()\nd1['a']= 'SAS'\nd1['b']= 'PYTHON'\nd1['c']= 'R'\n\nfor k,v in d1.items():\n       print k, \":\",v\n\n```", "```py\ndict = collections.OrderedDict(sorted(d1.items()))\ndict = New sorted dictionary\nd1= Original Order dictionary\n\n```", "```py\nimport collections \nprint 'n Order dictionary'\nd1 = collections.OrderedDict()\nd1['a']= 'SAS'\nd1['d']= 'PYTHON'\nd1['b']= 'JULIA'\nd1['f']= 'R'\nd1['c']= 'SPARK'\n\nfor k,v in d1.items():\n print k, \":\",v\nprint 'n Sorted Order dictionary'\ndict = collections.OrderedDict(sorted(d1.items()))\n\nfor k,v in dict.items():\n   print k, \":\",v\n\n```", "```py\n dict = collections.OrderedDict(sorted(d1.items(), key=lambda (k,v): v)) \n dict = New sorted dictionary \n d1=  Original Ordered dictionary \n\n```", "```py\nimport collections \nprint 'n Order dictionary'\nd1 = collections.OrderedDict()\nd1['a']= 'SAS'\nd1['d']= 'PYTHON'\nd1['b']= 'SAP HANNA'\nd1['f']= 'R'\nd1['c']= 'JULIA'\n\nfor k,v in d1.items():\n   print k, \":\",v\nprint 'n Sorted Order dictionary'\ndict = collections.OrderedDict(sorted(d1.items(), key=lambda (k,v): v))\n\nfor k,v in dict.items():\n      print k, \":\",v\n\n```", "```py\ndefaultdict(default_factory())\n\n```", "```py\nfrom collections import defaultdict\n\ndef func():\n        return \"Cricket\"\n\ngame = defaultdict(func)\n\ngame[\"A\"]= \"Football\"\ngame[\"B\"] = \"Badminton\"\n\nprint game \nprint game[\"A\"]\nprint game[\"B\"]\nprint game[\"C\"]\n\n```", "```py\nfrom collections import defaultdict\ngame = defaultdict(lambda : \"Cricket\")\n\ngame[\"A\"]= \"Football\"\ngame[\"B\"] = \"Badminton\"\n\nprint game \nprint game[\"A\"]\nprint game[\"B\"]\nprint game[\"C\"]\n\n```", "```py\nfrom collections import defaultdict\n\ngame = defaultdict(int)\n\ngame[\"A\"]= \"Football\"\ngame[\"B\"] = \"Badminton\"\n\nprint game \nprint game[\"A\"]\nprint game[\"B\"]\nprint game[\"C\"]\n\n```", "```py\nfrom collections import defaultdict\n\ngame = defaultdict(int)\n\nlist1 = ['cricket', 'badminton', 'hockey' 'rugby', 'golf', 'baseball' ,   'football']\n\nfor each in list1:\n        game[each]= game[each]+1\n\nprint game\n\n```", "```py\nfrom collections import defaultdict\n\ngame = defaultdict(list)\n\ntuple_list_county =  [('US', 'Visconsin'), ('Germany', 'Bavaria'), ('UK', 'Bradfordshire'), ('India', 'punjab'), ('China', 'Shandong'), ('Canada', 'Nova Scotia')]\n\nprint game[\"any_value\"]  \n\nfor k,v in tuple_list_county:\n      game[k].append(v)\n\nprint game\n\n```", "```py\ncollections.namedtuple(typename, field_names[, verbose=False][, rename=False])\n\n```", "```py\nimport collections\nemployee = collections.namedtuple('emp','name, age, empid')\n\nrecord1 = employee(\"Hamilton\", 28, 12365 ) \n\nprint \"Record is \", record1\nprint \"name of employee is \", record1.name\nprint \"age of employee is \", record1.empid\n\nprint \"type is \",type(record1)\n\n```", "```py\nimport collections\nemployee = collections.namedtuple('emp','name, age, empid')\nlist1 = ['BOB', 21, 34567]\nrecord2 =employee._make(list1)\nprint record2\nprint \"n\"\nprint (record2._asdict())\n\n```", "```py\nimport collections\nemployee = collections.namedtuple('emp','name, age, empid')\n\nrecord1 = employee(\"Marina\", 28, 12365 ) \n\nprint \"Record is \", record1\nprint \"n\"\nprint  record1._replace(age= 25)\nprint \"n\"\nprint \"Record is \", record1\nprint \"n\"\nrecord1 = record1._replace(age= 25)\nprint \"Record is \", record1\n\n```"]