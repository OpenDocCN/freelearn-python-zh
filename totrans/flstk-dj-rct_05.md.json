["```py\npip install pytest-django\n```", "```py\n[pytest]\nDJANGO_SETTINGS_MODULE=CoreRoot.settings\npython_files=tests.py test_*.py *_tests.py\n```", "```py\npytest\n```", "```py\n======================== test session starts ============================\nplatform linux -- Python 3.10.2, pytest-7.0.1, pluggy-1.0.0\ndjango: settings: CoreRoot.settings (from ini)\nrootdir: /home/koladev/PycharmProjects/Full-stack-Django-and-React, configfile: pytest.ini\nplugins: django-4.5.2\ncollected 0 items\n```", "```py\ndef test_sum():\n   assert add(1, 2) == 3\n```", "```py\ndef add(a, b):\n   return a + b\ndef test_sum():\n   assert sum(1, 2) == 3\n```", "```py\nimport pytest\nfrom core.user.models import User\ndata_user = {\n   \"username\": \"test_user\",\n   \"email\": \"test@gmail.com\",\n   \"first_name\": \"Test\",\n   \"last_name\": \"User\",\n   \"password\": \"test_password\"\n}\n```", "```py\n@pytest.mark.django_db\ndef test_create_user():\n   user = User.objects.create_user(**data_user)\n   assert user.username == data_user[\"username\"]\n   assert user.email == data_user[\"email\"]\n   assert user.first_name == data_user[\"first_name\"]\n   assert user.last_name == data_user[\"last_name\"]\n```", "```py\n=================================================================== short test summary info ===================================================================\nFAILED core/user/tests.py::test_create_user - RuntimeError: Database access not allowed, use the \"django_db\" mark, or the \"db\" or \"transactional_db\" fixture...\n```", "```py\ndata_superuser = {\n   \"username\": \"test_superuser\",\n   \"email\": \"testsuperuser@gmail.com\",\n   \"first_name\": \"Test\",\n   \"last_name\": \"Superuser\",\n   \"password\": \"test_password\"\n}\n```", "```py\n@pytest.mark.django_db\ndef test_create_superuser():\n   user = User.objects.create_superuser(**data_superuser)\n   assert user.username == data_superuser[\"username\"]\n   assert user.email == data_superuser[\"email\"]\n   assert user.first_name == data_superuser[\"first_name\"]\n   assert user.last_name == data_superuser[\"last_name\"]\n   assert user.is_superuser == True\n   assert user.is_staff == True\n```", "```py\nimport pytest\nfrom core.user.models import User\ndata_user = {\n   \"username\": \"test_user\",\n   \"email\": \"test@gmail.com\",\n   \"first_name\": \"Test\",\n   \"last_name\": \"User\",\n   \"password\": \"test_password\"\n}\n@pytest.fixture\ndef user(db) -> User:\n   return User.objects.create_user(**data_user)\n```", "```py\nimport pytest\nfrom core.fixtures.user import user\nfrom core.post.models import Post\n@pytest.mark.django_db\ndef test_create_post(user):\n   post = Post.objects.create(author=user,\n                              body=\"Test Post Body\")\n   assert post.body == \"Test Post Body\"\n   assert post.author == user\n```", "```py\nimport pytest\nfrom core.fixtures.user import user\nfrom core.post.models import Post\n@pytest.fixture\ndef post(db, user):\n   return Post.objects.create(author=user,\n                              body=\"Test Post Body\")\n```", "```py\nimport pytest\nfrom core.fixtures.user import user\nfrom core.fixtures.post import post\nfrom core.comment.models import Comment\n@pytest.mark.django_db\ndef test_create_comment(user, post):\n   comment = Comment.objects.create(author=user, post=post,\n     body=\"Test Comment Body\")\n   assert comment.author == user\n   assert comment.post == post\n   assert comment.body == \"Test Comment Body\"\n```", "```py\nimport pytest\nfrom rest_framework.test import APIClient\n@pytest.fixture\ndef client():\n   return APIClient()\n```", "```py\nimport pytest\nfrom rest_framework import status\nfrom core.fixtures.user import user\nclass TestAuthenticationViewSet:\n   endpoint = '/api/auth/'\n```", "```py\n...\n   def test_login(self, client, user):\n       data = {\n           \"username\": user.username,\n           \"password\": \"test_password\"\n       }\n       response = client.post(self.endpoint + \"login/\",\n                              data)\n       assert response.status_code == status.HTTP_200_OK\n       assert response.data['access']\n       assert response.data['user']['id'] ==\n         user.public_id.hex\n       assert response.data['user']['username'] ==\n         user.username\n       assert response.data['user']['email'] == user.email\n  ...\n```", "```py\n...\n   @pytest.mark.django_db\n   def test_register(self, client):\n       data = {\n           \"username\": \"johndoe\",\n           \"email\": \"johndoe@yopmail.com\",\n           \"password\": \"test_password\",\n           \"first_name\": \"John\",\n           \"last_name\": \"Doe\"\n       }\n       response = client.post(self.endpoint + \"register/\",\n                              data)\n       assert response.status_code ==\n         status.HTTP_201_CREATED\n   def test_refresh(self, client, user):\n      data = {\n           \"username\": user.username,\n           \"password\": \"test_password\"\n       }\n       response = client.post(self.endpoint + \"login/\",\n                                data)\n       assert response.status_code == status.HTTP_200_OK\n       data_refresh = {\n           \"refresh\":  response.data['refresh']\n       }\n       response = client.post(self.endpoint + \"refresh/\",\n                              data_refresh)\n       assert response.status_code == status.HTTP_200_OK\n       assert response.data['access']\n```", "```py\nfrom rest_framework import status\nfrom core.fixtures.user import user\nfrom core.fixtures.post import post\nclass TestPostViewSet:\n   endpoint = '/api/post/'\n```", "```py\n...\n   def test_list(self, client, user, post):\n       client.force_authenticate(user=user)\n       response = client.get(self.endpoint)\n       assert response.status_code == status.HTTP_200_OK\n       assert response.data[\"count\"] == 1\n   def test_retrieve(self, client, user, post):\n       client.force_authenticate(user=user)\n       response = client.get(self.endpoint +\n                             str(post.public_id) + \"/\")\n       assert response.status_code == status.HTTP_200_OK\n       assert response.data['id'] == post.public_id.hex\n       assert response.data['body'] == post.body\n       assert response.data['author']['id'] ==\n         post.author.public_id.hex\n```", "```py\n...\n   def test_create(self, client, user):\n       client.force_authenticate(user=user)\n       data = {\n           \"body\": \"Test Post Body\",\n           \"author\": user.public_id.hex\n       }\n       response = client.post(self.endpoint, data)\n       assert response.status_code ==\n         status.HTTP_201_CREATED\n       assert response.data['body'] == data['body']\n       assert response.data['author']['id'] ==\n         user.public_id.hex\n   def test_update(self, client, user, post):\n       client.force_authenticate(user=user)\n       data = {\n           \"body\": \"Test Post Body\",\n           \"author\": user.public_id.hex\n       }\n       response = client.put(self.endpoint +\n         str(post.public_id) + \"/\", data)\n       assert response.status_code == status.HTTP_200_OK\n       assert response.data['body'] == data['body']\n   def test_delete(self, client, user, post):\n       client.force_authenticate(user=user)\n       response = client.delete(self.endpoint +\n         str(post.public_id) + \"/\")\n       assert response.status_code ==\n         status.HTTP_204_NO_CONTENT\n```", "```py\n...\n   def test_list_anonymous(self, client, post):\n       response = client.get(self.endpoint)\n       assert response.status_code == status.HTTP_200_OK\n       assert response.data[\"count\"] == 1\n   def test_retrieve_anonymous(self, client, post):\n       response = client.get(self.endpoint +\n         str(post.public_id) + \"/\")\n       assert response.status_code == status.HTTP_200_OK\n       assert response.data['id'] == post.public_id.hex\n       assert response.data['body'] == post.body\n       assert response.data['author']['id'] ==\n         post.author.public_id.hex\n```", "```py\n...\ndef test_create_anonymous(self, client):\n       data = {\n           \"body\": \"Test Post Body\",\n           \"author\": \"test_user\"\n       }\n       response = client.post(self.endpoint, data)\n       assert response.status_code ==\n         status.HTTP_401_UNAUTHORIZED\n   def test_update_anonymous(self, client, post):\n       data = {\n           \"body\": \"Test Post Body\",\n           \"author\": \"test_user\"\n       }\n       response = client.put(self.endpoint +\n         str(post.public_id) + \"/\", data)\n       assert response.status_code ==\n         status.HTTP_401_UNAUTHORIZED\n   def test_delete_anonymous(self, client, post):\n       response = client.delete(self.endpoint +\n         str(post.public_id) + \"/\")\n       assert response.status_code ==\n         status.HTTP_401_UNAUTHORIZED\n```", "```py\nimport pytest\nfrom core.fixtures.user import user\nfrom core.fixtures.post import post\nfrom core.comment.models import Comment\n@pytest.fixture\ndef comment(db, user, post):\n   return Comment.objects.create(author=user, post=post,\n                                 body=\"Test Comment Body\")\n```", "```py\nfrom rest_framework import status\nfrom core.fixtures.user import user\nfrom core.fixtures.post import post\nfrom core.fixtures.comment import comment\nclass TestCommentViewSet:\n   # The comment resource is nested under the post resource\n   endpoint = '/api/post/'\n```", "```py\n...\ndef test_list(self, client, user, post, comment):\n       client.force_authenticate(user=user)\n       response = client.get(self.endpoint +\n         str(post.public_id) + \"/comment/\")\n       assert response.status_code == status.HTTP_200_OK\n       assert response.data[\"count\"] == 1\n   def test_retrieve(self, client, user, post, comment):\n       client.force_authenticate(user=user)\n       response = client.get(self.endpoint +\n                             str(post.public_id) +\n                             \"/comment/\" +\n                             str(comment.public_id) + \"/\")\n       assert response.status_code == status.HTTP_200_OK\n       assert response.data['id'] == comment.public_id.hex\n       assert response.data['body'] == comment.body\n       assert response.data['author']['id'] ==\n         comment.author.public_id.hex\n```", "```py\n...\n    def test_create(self, client, user, post):\n       client.force_authenticate(user=user)\n       data = {\n           \"body\": \"Test Comment Body\",\n           \"author\": user.public_id.hex,\n           \"post\": post.public_id.hex\n       }\n       response = client.post(self.endpoint +\n         str(post.public_id) + \"/comment/\", data)\n       assert response.status_code ==\n         status.HTTP_201_CREATED\n       assert response.data['body'] == data['body']\n       assert response.data['author']['id'] ==\n         user.public_id.hex\n   def test_update(self, client, user, post, comment):\n       client.force_authenticate(user=user)\n       data = {\n           \"body\": \"Test Comment Body Updated\",\n           \"author\": user.public_id.hex,\n           \"post\": post.public_id.hex\n       }\n       response = client.put(self.endpoint +\n                             str(post.public_id) +\n                             \"/comment/\" +\n                             str(comment.public_id) +\n                             \"/\", data)\n       assert response.status_code == status.HTTP_200_OK\n       assert response.data['body'] == data['body']\n   def test_delete(self, client, user, post, comment):\n       client.force_authenticate(user=user)\n       response = client.delete(self.endpoint +\n         str(post.public_id) + \"/comment/\" +\n         str(comment.public_id) + \"/\")\n       assert response.status_code ==\n         status.HTTP_204_NO_CONTENT\n```", "```py\n...\n   def test_list_anonymous(self, client, post, comment):\n       response = client.get(self.endpoint +\n                             str(post.public_id) +\n                             \"/comment/\")\n       assert response.status_code == status.HTTP_200_OK\n       assert response.data[\"count\"] == 1\n   def test_retrieve_anonymous(self, client, post,\n     comment):\n       response = client.get(self.endpoint +\n         str(post.public_id) + \"/comment/\" +\n         str(comment.public_id) + \"/\")\n       assert response.status_code == status.HTTP_200_OK\n```", "```py\n   def test_create_anonymous(self, client, post):\n       data = {}\n       response = client.post(self.endpoint +\n         str(post.public_id) + \"/comment/\", data)\n       assert response.status_code ==\n         status.HTTP_401_UNAUTHORIZED\n   def test_update_anonymous(self, client, post, comment):\n       data = {}\n       response = client.put(self.endpoint +\n         str(post.public_id) + \"/comment/\" +\n         str(comment.public_id) + \"/\", data)\n       assert response.status_code ==\n         status.HTTP_401_UNAUTHORIZED\n   def test_delete_anonymous(self, client, post, comment):\n       response = client.delete(self.endpoint +\n         str(post.public_id) + \"/comment/\" +\n         str(comment.public_id) + \"/\")\n       assert response.status_code ==\n         status.HTTP_401_UNAUTHORIZED\n```", "```py\nfrom rest_framework import status\nfrom core.fixtures.user import user\nfrom core.fixtures.post import post\nclass TestUserViewSet:\n   endpoint = '/api/user/'\n   def test_list(self, client, user):\n       pass\n   def test_retrieve(self, client, user):\n       pass\n   def test_create(self, client, user):\n       pass\n   def test_update(self, client, user):\n       pass\n```"]