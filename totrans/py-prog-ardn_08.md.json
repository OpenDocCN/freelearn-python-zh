["```py\n> ipconfig\n\n```", "```py\n$ ipconfig getifaddr en0\n\n```", "```py\n$ ifconfig | grep inet\n\n```", "```py\n$ ifconfig\n\n```", "```py\n$ hostname –I\n\n```", "```py\n#include <Ethernet.h>\n```", "```py\nbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };\n```", "```py\nEthernet.begin(mac);\n```", "```py\nIPAddress ip(192,168,1,177);\n```", "```py\nEthernet.begin(mac, ip);\n```", "```py\nEthernetServer server = EthernetServer(80);\n```", "```py\nserver.begin();\n```", "```py\nEthernetClient client;\nclient.connect(server, 80);\n```", "```py\nclient.connected()\n```", "```py\nbyte mac[] = {0x90, 0xA2, 0xDA, 0x0D, 0x3F, 0x62};\nIPAddress ip(10,0,0,75);\n```", "```py\nEthernetServer server(80);\n```", "```py\nEthernet.begin(mac, ip);\nserver.begin();\n```", "```py\nEthernetClient client = server.available();\n```", "```py\nwhile (client.connected()) {\n      if (client.available()) {\n        char c = client.read();\n        Serial.write(c);\n       # Response code\n}\n```", "```py\nif (c == '\\n' && currentLineIsBlank) {\n          // send a standard http response header\n          client.println(\"HTTP/1.1 200 OK\");\n          client.println(\"Content-Type: text/html\");\n          client.println(\"Connection: close\");\n          client.println(\"Refresh: 5\");\n          client.println();\n          client.println(\"<!DOCTYPE HTML>\");\n          client.println(\"<html>\");\n          float sensorReading = getHumidity(analogChannel, temperature);\n          client.print(\"Relative Humidity from HIH4030 is \");\n          client.print(sensorReading);\n          client.println(\" % <br />\");\n          client.println(\"</html>\");\n          break;\n        }\n```", "```py\nfloat getHumidity(int analogChannel, float temperature){\n  float supplyVolt = 5.0;\n  int HIH4030_Value = analogRead(analogChannel);\n  float analogReading = HIH4030_Value/1023.0 * supplyVolt;\n  float sensorReading = 161.0 * analogReading / supplyVolt - 25.8;\n  float humidityReading = sensorReading / (1.0546 - 0.0026 * temperature);\n  return humidityReading;\n}\n```", "```py\n$ sudo easy_install web.py\n$ sudo pip install web.py\n\n```", "```py\n> easy_install.exe web.py\n\n```", "```py\n>>> import web\n\n```", "```py\nimport web\nurls = (\n    '/', 'index'\n)\nclass index:\n    def GET(self):\n        return \"Hello, world!\"\nif __name__ == \"__main__\":\n    app = web.application(urls, globals())\n    app.run()\n```", "```py\n$ python webPyBasicExample.py 8888\n\n```", "```py\nurls = (\n    '/', 'index'\n)\n```", "```py\nurls = (\n    '/', 'index',\n    '/data', 'data',\n)\n```", "```py\ndef GET(self):\n  f = self.submit_form()\n  f.validates()\n  t = 75\n  return render.test(f,t);\n```", "```py\n    def POST(self):\n        f = self.submit_form()\n        f.validates()\n        c = f['Celsius'].value\n        t = c*(9.0/5.0) + 32\n        return render.test(f,t)\n```", "```py\nrender = web.template.render('templates')\n```", "```py\n$def with(form, i)\n<form method=\"POST\">\n    $:form.render()\n</form>\n<p>Value is: $:i </p>\n```", "```py\nreturn render.test(f, i);\n```", "```py\n    submit_form = form.Form(\n      form.Textbox('Celsius', description = 'Celsius'),\n      form.Button('submit', type=\"submit\", description='submit')\n    )\n```", "```py\n$def with(form, i)\n<form method=\"POST\">\n    $:form.render()\n</form>\n```", "```py\n void loop() {\n  int analogChannel = 0;\n  int HIH4030_Value = analogRead(analogChannel);\n  Serial.println(HIH4030_Value);\n  delay(200); \n}\n```", "```py\nimport serial\nport = serial.Serial('/dev/tty.usbmodemfa1331', 9600, timeout=1)\n```", "```py\nline = port.readline()\nif line:\n  data = float(line)\n  humidity = relativeHumidity(line, 25)\n```", "```py\nrender = web.template.render('templates')\n```", "```py\n<form method=\"POST\">\n    $:form.render()\n</form>\n<h3>Relative Humidity is:</h3>\n<p name=\"temp\">$humidity </p>\n```", "```py\nsubmit_form = form.Form(\n  form.Textbox('Temperature', description = 'Temperature'),\n  form.Button('submit', type=\"submit\", description='submit')\n  )\n```", "```py\nf = self.submit_form()\nf.validates()\n```", "```py\ndef GET(self):\n  f = self.submit_form()\n  f.validates()\n  line = port.readline()\n  if line:\n    data = float(line)\n    humidity = relativeHumidity(line, 25)\n    return render.base(f,humidity);\n  else:\n    return render.base(f, \"Not valid data\");\n```", "```py\ndef POST(self):\n  f = self.submit_form()\n  f.validates()\n  temperature = f['Temperature'].value\n  line = port.readline()\n  if line:\n    data = float(line)\n    humidity = relativeHumidity(line, float(temperature))\n    return render.base(f, humidity);\n  else:\n    return render.base(f, \"Not valid data\");\n```", "```py\nbyte mac[] = { 0x90, 0xA2, 0xDA, 0x00, 0x47, 0x28 };\nIPAddress ip(10,0,0,75);\n```", "```py\nchar server[] = \"10.0.0.20\";\n```", "```py\n  if (client.connect(server, 8080)) {\n    Serial.println(\"connected\");\n    // Make a HTTP request:\n    client.println(\"GET /data HTTP/1.1\");\n    client.println(\"Host: 10.0.0.20\");\n    client.println(\"Connection: close\");\n    client.println();\n  }\n```", "```py\n  String data;\n  data+=\"\";\n  data+=\"Humidity \";\n  data+=analogRead(analogChannel);\n```", "```py\n  if (client.connect(\"10.0.0.20\",8080)) {\n    Serial.println(\"connected\");\n    client.println(\"POST /data HTTP/1.1\");\n    client.println(\"Host: 10.0.0.20\");\n    client.println(\"Content-Type: application/x-www-form-urlencoded\");\n    client.println(\"Connection: close\");\n    client.print(\"Content-Length: \");\n    client.println(data.length());\n    client.println();\n    client.print(data);\n    client.println();\n    Serial.println(\"Data sent.\");\n  }\n```", "```py\nglobal temperature, humidity\ntemperature = 25\n```", "```py\nurls = ( \n    '/', 'index',\n    '/data','data',\n)\n```", "```py\nclass data:\n    def POST(self):\n        global humidity\n        i = web.input()\n        data = web.data()\n        data = data.split()[1]\n        humidity = relativeHumidity(data,temperature)\n        return humidity\n```", "```py\nif (client.connected()) {\n      if (client.find(\"Humidity\")){\n           # Fetch humidity sensor value\n           if (client.connect(\"10.0.0.20\",8080)) {\n           # Post humidity values\n          }\n      }\n      else{\n           # Fetch motion sensor value\n           if (client.connect(\"10.0.0.20\",8080)) {\n           # Post motion values\n          }\n      }\n     # Add delay\n}\n```", "```py\nform.Dropdown('dropdown',\n           [('Humidity','Humidity'),('Motion','Motion')]),\nform.Button('submit',\n          type=\"submit\", description='submit'))\n```", "```py\nclass data:\n    def GET(self):\n        return sensorType\n    def POST(self):\n        global humidity, motion\n        i = web.input()\n        data = web.data()\n        data = data.split()[1]\n        if sensorType == \"Humidity\":\n            humidity = relativeHumidity(data,temperature)\n            return humidity\n        else:\n            motion = data\n            return motion\n```", "```py\nC:\\> mosquitto\n\n```", "```py\n$ brew install mosquitto\n\n```", "```py\n$ sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa\n$ sudo apt-get update\n\n```", "```py\n$ sudo apt-get install mosquitto mosquitto-clients\n\n```", "```py\n$ ps aux | grep mosquitto\n\n```", "```py\n$ mosquitto\n\n```", "```py\n$ mosquitto_sub -h <Broker-IP> -t test\n\n```", "```py\n$ mosquitto_pub -h <Broker-IP> -t test -m Hello\n\n```", "```py\nbyte mac[]    = {  0x90, 0xA2, 0xDA, 0x0D, 0x3F, 0x62 };\nbyte server[] = { 10, 0, 0, 20 };\nbyte ip[]     = { 10, 0, 0, 75 };\n```", "```py\nEthernetClient ethClient;\nPubSubClient client(server, 1883, callback, ethClient);\n```", "```py\n  Ethernet.begin(mac, ip);\n  if (client.connect(\"arduinoClient\")) {\n    client.publish(\"outTopic\",\"hello world\");\n    client.subscribe(\"inTopic\");\n  }\n```", "```py\n  client.loop();\n```", "```py\n$ mosquitto_sub -t \"outTopic\"\n\n```", "```py\nvoid callback(char* topic, byte* payload, unsigned int length) {\n  // handle message arrived\n  Serial.print(topic);\n  Serial.print(':');\n  Serial.write(payload,length);\n  Serial.println();\n}\n```", "```py\nvoid loop()\n{\n  client.publish(\"outTopic\",\"From Arduino\");\n  delay(1000);\n  client.loop();\n}\n```", "```py\n$ mosquitto_pub – t \"inTopic\" –m \"Test\"\n\n```", "```py\n$ sudo pip install paho-mqtt\n\n```", "```py\n>>> import paho.mqtt.client\n\n```", "```py\nimport paho.mqtt.client as mq\n```", "```py\ncli = mq.Client('mosquittoPython')\ncli.on_message = onMessage\ncli.on_publish = onPublish\ncli.connect(\"10.0.0.20\", 1883, 15)\ncli.subscribe(\"outTopic\", 0)\npublishTest()\ncli.loop_forever()\n```", "```py\nimport threading\ndef publishTest():\n    cli.publish(\"inTopic\",\"From Python\")\n    threading.Timer(5, publishTest).start()\n```", "```py\ndef onMessage(mosq, obj, msg):\n    print msg.topic+\":\"+msg.payload\n```", "```py\ndef onPublish(mosq, obj, mid):\n    pass\n```", "```py\nif (client.connect(\"Arduino\")) {\n    client.publish(\"Arduino/connection\",\"Connected.\");\n  }\n```", "```py\nvoid loop()\n{\n  publishData();\n  delay(5000);\n  client.loop();\n}\n```", "```py\nvoid publishData()\n{\n  float humidity = getHumidity(22.0);\n  humidityC = dtostrf(humidity, 5, 2, message_buff2);\n  client.publish(\"Arduino/humidity\", humidityC);\n  delay(5000);\n  int motion = digitalRead(MotionPin);\n  motionC = dtostrf(motion, 5, 2, message_buff2);\n  client.publish(\"Arduino/motion\", motionC);\n}\n```", "```py\ncli.subscribe(\"Arduino/humidity\", 0)\ncli.subscribe(\"Arduino/motion\", 0)\n```", "```py\nimport httplib\n```", "```py\ndef onMessage(mosq, obj, msg):\n    print msg.topic\n    connection = httplib.HTTPConnection('10.0.0.20:8080')\n    if msg.topic == \"Arduino/motion\":\n        data = \"motion:\" + msg.payload\n        connection.request('POST', '/data', data)\n        postResult = connection.getresponse()\n        print postResult\n    elif msg.topic == \"Arduino/humidity\":\n        data = \"humidity:\" + msg.payload\n        connection.request('POST', '/data', data)\n        postResult = connection.getresponse()\n        print postResult\n    else:\n        pass\n    connection.close()\n```", "```py\nclass data:\n    def POST(self):\n        global motion, humidity\n        i = web.input()\n        data = web.data()\n        data = data.split(\":\")\n        if data[0] == \"humidity\":\n            humidity = data[1]\n        elif data[0] == \"motion\":\n            motion = data[1]\n        else:\n            pass\n        return \"Ok\" \n```", "```py\nclass index:\n    submit_form = form.Form(\n        form.Button('Refresh',\n                    type=\"submit\",\n                    description='refresh')\n    )\n    # GET function\n    def GET(self):\n        f = self.submit_form()\n        return render.base(f, humidity, motion)\n\n    # POST function\n    def POST(self):\n        f = self.submit_form()\n        return render.base(f, humidity, motion)\n```"]