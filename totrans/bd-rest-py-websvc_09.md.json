["```py\nPATCH http://localhost:8888/hexacopters/1 \n\n```", "```py\nGET http://localhost:8888/hexacopters/1 \n\n```", "```py\nPATCH http://localhost:8888/led/{id} \n\n```", "```py\nGET http://localhost:8888/led/{id} \n\n```", "```py\nGET http://localhost:8888/altimeter/1 \n\n```", "```py\n~/PythonREST/Tornado01\n\n```", "```py\n%USERPROFILE%\\PythonREST\\Tornado01\n\n```", "```py\npython3 -m venv ~/PythonREST/Tornado01\n\n```", "```py\npython -m venv %USERPROFILE%\\PythonREST\\Tornado01\n\n```", "```py\nsource ~/PythonREST/Torando01/bin/activate\n\n```", "```py\nsource ~/PythonREST/Torando01/bin/activate.csh\n\n```", "```py\nsource ~/PythonREST/Tornado01/bin/activate.fish\n\n```", "```py\n%USERPROFILE%\\PythonREST\\Tornado01\\Scripts\\activate.bat\n\n```", "```py\ncd $env:USERPROFILE\nPythonREST\\Tornado01\\Scripts\\Activate.ps1\n\n```", "```py\npip install tornado\n\n```", "```py\nCollecting tornado\n Downloading tornado-4.4.1.tar.gz (456kB)\nInstalling collected packages: tornado\n Running setup.py install for tornado\nSuccessfully installed tornado-4.4.1\n\n```", "```py\ndef is_informational(code): \n    return code >= 100 and code <= 199 \n\ndef is_success(code): \n    return code >= 200 and code <= 299 \n\ndef is_redirect(code): \n    return code >= 300 and code <= 399 \n\ndef is_client_error(code): \n    return code >= 400 and code <= 499 \n\ndef is_server_error(code): \n    return code >= 500 and code <= 599 \n\nHTTP_100_CONTINUE = 100 \nHTTP_101_SWITCHING_PROTOCOLS = 101 \nHTTP_200_OK = 200 \nHTTP_201_CREATED = 201 \nHTTP_202_ACCEPTED = 202 \nHTTP_203_NON_AUTHORITATIVE_INFORMATION = 203 \nHTTP_204_NO_CONTENT = 204 \nHTTP_205_RESET_CONTENT = 205 \nHTTP_206_PARTIAL_CONTENT = 206 \nHTTP_300_MULTIPLE_CHOICES = 300 \nHTTP_301_MOVED_PERMANENTLY = 301 \nHTTP_302_FOUND = 302 \nHTTP_303_SEE_OTHER = 303 \nHTTP_304_NOT_MODIFIED = 304 \nHTTP_305_USE_PROXY = 305 \nHTTP_306_RESERVED = 306 \nHTTP_307_TEMPORARY_REDIRECT = 307 \nHTTP_400_BAD_REQUEST = 400 \nHTTP_401_UNAUTHORIZED = 401 \nHTTP_402_PAYMENT_REQUIRED = 402 \nHTTP_403_FORBIDDEN = 403 \nHTTP_404_NOT_FOUND = 404 \nHTTP_405_METHOD_NOT_ALLOWED = 405 \nHTTP_406_NOT_ACCEPTABLE = 406 \nHTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407 \nHTTP_408_REQUEST_TIMEOUT = 408 \nHTTP_409_CONFLICT = 409 \nHTTP_410_GONE = 410 \nHTTP_411_LENGTH_REQUIRED = 411 \nHTTP_412_PRECONDITION_FAILED = 412 \nHTTP_413_REQUEST_ENTITY_TOO_LARGE = 413 \nHTTP_414_REQUEST_URI_TOO_LONG = 414 \nHTTP_415_UNSUPPORTED_MEDIA_TYPE = 415 \nHTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416 \nHTTP_417_EXPECTATION_FAILED = 417 \nHTTP_428_PRECONDITION_REQUIRED = 428 \nHTTP_429_TOO_MANY_REQUESTS = 429 \nHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431 \nHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451 \nHTTP_500_INTERNAL_SERVER_ERROR = 500 \nHTTP_501_NOT_IMPLEMENTED = 501 \nHTTP_502_BAD_GATEWAY = 502 \nHTTP_503_SERVICE_UNAVAILABLE = 503 \nHTTP_504_GATEWAY_TIMEOUT = 504 \nHTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505 \nHTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511 \n\n```", "```py\nfrom random import randint \nfrom time import sleep \n\nclass HexacopterStatus: \n    def __init__(self, motor_speed, turned_on): \n        self.motor_speed = motor_speed \n        self.turned_on = turned_on \n\nclass Hexacopter: \n    MIN_SPEED = 0 \n    MAX_SPEED = 1000 \n\n    def __init__(self): \n        self.motor_speed = self.__class__.MIN_SPEED \n        self.turned_on = False \n\n    def get_motor_speed(self): \n        return self.motor_speed \n\n    def set_motor_speed(self, motor_speed): \n        if motor_speed < self.__class__.MIN_SPEED: \n            raise ValueError('The minimum speed is {0}'.format(self.__class__.MIN_SPEED)) \n        if motor_speed > self.__class__.MAX_SPEED: \n            raise ValueError('The maximum speed is {0}'.format(self.__class__.MAX_SPEED)) \n        self.motor_speed = motor_speed \n        self.turned_on = (self.motor_speed is not 0) \n        sleep(2) \n        return HexacopterStatus(self.get_motor_speed(), self.is_turned_on()) \n\n    def is_turned_on(self): \n        return self.turned_on \n\n    def get_hexacopter_status(self): \n        sleep(3) \n        return HexacopterStatus(self.get_motor_speed(), self.is_turned_on()) \n\n```", "```py\nclass LightEmittingDiode: \n    MIN_BRIGHTNESS_LEVEL = 0 \n    MAX_BRIGHTNESS_LEVEL = 255 \n\n    def __init__(self, identifier, description): \n        self.identifier = identifier \n        self.description = description \n        self.brightness_level = self.__class__.MIN_BRIGHTNESS_LEVEL \n\n    def get_brightness_level(self): \n        sleep(1) \n        return self.brightness_level \n\n    def set_brightness_level(self, brightness_level): \n        if brightness_level < self.__class__.MIN_BRIGHTNESS_LEVEL: \n            raise ValueError('The minimum brightness level is {0}'.format(self.__class__.MIN_BRIGHTNESS_LEVEL)) \n        if brightness_level > self.__class__.MAX_BRIGHTNESS_LEVEL: \n            raise ValueError('The maximum brightness level is {0}'.format(self.__class__.MAX_BRIGHTNESS_LEVEL)) \n        sleep(2) \n        self.brightness_level = brightness_level \n\n```", "```py\nclass Altimeter: \n    def get_altitude(self): \n        sleep(1) \n        return randint(0, 3000) \n\n```", "```py\nclass Drone: \n    def __init__(self): \n        self.hexacopter = Hexacopter() \n        self.altimeter = Altimeter() \n        self.blue_led = LightEmittingDiode(1, 'Blue LED') \n        self.white_led = LightEmittingDiode(2, 'White LED') \n        self.leds = { \n            self.blue_led.identifier: self.blue_led, \n            self.white_led.identifier: self.white_led \n            } \n\n```", "```py\nimport status \nfrom datetime import date \nfrom tornado import web, escape, ioloop, httpclient, gen \nfrom drone import Altimeter, Drone, Hexacopter, LightEmittingDiode \n\ndrone = Drone() \n\nclass HexacopterHandler(web.RequestHandler): \n    SUPPORTED_METHODS = (\"GET\", \"PATCH\") \n    HEXACOPTER_ID = 1 \n\n    def get(self, id): \n        if int(id) is not self.__class__.HEXACOPTER_ID: \n            self.set_status(status.HTTP_404_NOT_FOUND) \n            return \n        print(\"I've started retrieving hexacopter's status\") \n        hexacopter_status = drone.hexacopter.get_hexacopter_status() \n        print(\"I've finished retrieving hexacopter's status\") \n        response = {  \n            'speed': hexacopter_status.motor_speed, \n            'turned_on': hexacopter_status.turned_on, \n            } \n        self.set_status(status.HTTP_200_OK) \n        self.write(response) \n\n    def patch(self, id): \n        if int(id) is not self.__class__.HEXACOPTER_ID: \n            self.set_status(status.HTTP_404_NOT_FOUND) \n            return \n        request_data = escape.json_decode(self.request.body)  \n        if ('motor_speed' not in request_data.keys()) or \\ \n            (request_data['motor_speed'] is None): \n            self.set_status(status.HTTP_400_BAD_REQUEST) \n            return \n        try: \n            motor_speed = int(request_data['motor_speed']) \n            print(\"I've started setting the hexacopter's motor speed\") \n            hexacopter_status = drone.hexacopter.set_motor_speed(motor_speed) \n            print(\"I've finished setting the hexacopter's motor speed\") \n            response = {  \n                'speed': hexacopter_status.motor_speed, \n                'turned_on': hexacopter_status.turned_on, \n                } \n            self.set_status(status.HTTP_200_OK) \n            self.write(response) \n        except ValueError as e: \n            print(\"I've failed setting the hexacopter's motor speed\") \n            self.set_status(status.HTTP_400_BAD_REQUEST) \n            response = { \n                'error': e.args[0] \n                } \n            self.write(response) \n\n```", "```py\nclass LedHandler(web.RequestHandler): \n    SUPPORTED_METHODS = (\"GET\", \"PATCH\") \n\n    def get(self, id): \n        int_id = int(id) \n        if int_id not in drone.leds.keys(): \n            self.set_status(status.HTTP_404_NOT_FOUND) \n            return \n        led = drone.leds[int_id] \n        print(\"I've started retrieving {0}'s status\".format(led.description)) \n        brightness_level = led.get_brightness_level() \n        print(\"I've finished retrieving {0}'s status\".format(led.description)) \n        response = { \n            'id': led.identifier, \n            'description': led.description, \n            'brightness_level': brightness_level \n            } \n        self.set_status(status.HTTP_200_OK) \n        self.write(response) \n\n    def patch(self, id): \n        int_id = int(id) \n        if int_id not in drone.leds.keys(): \n            self.set_status(status.HTTP_404_NOT_FOUND) \n            return \n        led = drone.leds[int_id] \n        request_data = escape.json_decode(self.request.body)  \n        if ('brightness_level' not in request_data.keys()) or \\ \n            (request_data['brightness_level'] is None): \n            self.set_status(status.HTTP_400_BAD_REQUEST) \n            return \n        try: \n            brightness_level = int(request_data['brightness_level']) \n            print(\"I've started setting the {0}'s brightness\n            level\".format(led.description)) \n            led.set_brightness_level(brightness_level) \n            print(\"I've finished setting the {0}'s brightness \n            level\".format(led.description)) \n            response = { \n                'id': led.identifier, \n                'description': led.description, \n                'brightness_level': brightness_level \n                } \n            self.set_status(status.HTTP_200_OK) \n            self.write(response) \n        except ValueError as e: \n            print(\"I've failed setting the {0}'s brightness\n            level\".format(led.description)) \n            self.set_status(status.HTTP_400_BAD_REQUEST) \n            response = { \n                'error': e.args[0] \n                } \n            self.write(response) \n\n```", "```py\nclass AltimeterHandler(web.RequestHandler): \n    SUPPORTED_METHODS = (\"GET\") \n    ALTIMETER_ID = 1 \n\n    def get(self, id): \n        if int(id) is not self.__class__.ALTIMETER_ID: \n            self.set_status(status.HTTP_404_NOT_FOUND) \n            return \n        print(\"I've started retrieving the altitude\") \n        altitude = drone.altimeter.get_altitude() \n        print(\"I've finished retrieving the altitude\") \n        response = {  \n            'altitude': altitude \n            } \n        self.set_status(status.HTTP_200_OK) \n        self.write(response) \n\n```", "```py\napplication = web.Application([ \n    (r\"/hexacopters/([0-9]+)\", HexacopterHandler), \n    (r\"/leds/([0-9]+)\", LedHandler), \n    (r\"/altimeters/([0-9]+)\", AltimeterHandler), \n], debug=True) \n\nif __name__ == \"__main__\": \n    port = 8888 \n    print(\"Listening at port {0}\".format(port)) \n    application.listen(port) \n    ioloop.IOLoop.instance().start() \n\n```", "```py\npython api.py\n\n```", "```py\nListening at port 8888\n\n```", "```py\npip install --upgrade httpie\n\n```", "```py\nhttp PATCH :8888/hexacopters/1 motor_speed=100\n\n```", "```py\ncurl -iX PATCH -H \"Content-Type: application/json\" -d '{\"motor_speed\":100}' \n    :8888/hexacopters/1\n\n```", "```py\n{  \n    \"motor_speed\": 100 \n} \n\n```", "```py\nHTTP/1.1 200 OK\nContent-Length: 33\nContent-Type: application/json; charset=UTF-8\nDate: Thu, 08 Sep 2016 02:02:27 GMT\nServer: TornadoServer/4.4.1\n{\n \"speed\": 100,\n \"turned_on\": true\n}\n\n```", "```py\nhttp :8888/hexacopters/1\n\n```", "```py\ncurl -iX GET -H :8888/hexacopters/1\n\n```", "```py\nHTTP/1.1 200 OK\nContent-Length: 33\nContent-Type: application/json; charset=UTF-8\nDate: Thu, 08 Sep 2016 02:26:00 GMT\nEtag: \"ff152383ca6ebe97e5a136166f433fbe7f9b4434\"\nServer: TornadoServer/4.4.1\n{\n \"speed\": 100,\n \"turned_on\": true\n}\n\n```", "```py\nI've started setting the hexacopter's motor speed\nI've finished setting the hexacopter's motor speed\nI've started retrieving hexacopter's status\nI've finished retrieving hexacopter's status\n\n```", "```py\nhttp :8888/hexacopters/8\n\n```", "```py\ncurl -iX GET :8888/hexacopters/8\n\n```", "```py\nHTTP/1.1 404 Not Found\nContent-Length: 0\nContent-Type: text/html; charset=UTF-8\nDate: Thu, 08 Sep 2016 04:31:53 GMT\nServer: TornadoServer/4.4.1\n\n```", "```py\n{ \n   \"brightness_level\": 128 \n} \n\n```"]