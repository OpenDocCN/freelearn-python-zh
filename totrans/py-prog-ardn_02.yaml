- en: Chapter 2. Working with the Firmata Protocol and the pySerial Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, you learned the fundamentals of the Python programming
    language and the Arduino hardware platform so that you could get started. If you
    are reading this chapter directly without going through the previous chapter,
    it is assumed that you have some level of expertise or working experience with
    these technologies. This chapter describes two important components that are required
    to bridge Arduino with Python:'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Firmata protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python's serial library called `pySerial`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although the Firmata protocol is useful to interface Arduino with Python, it
    can also be used as an independent tool to develop a large variety of applications.
  prefs: []
  type: TYPE_NORMAL
- en: It is time to take your Arduino hardware out and start getting your hands dirty.
    During the course of this chapter, you will require an LED, a breadboard, and
    a 1 kilo-ohm resistor as well as the components that you already used in the previous
    chapter, that is, Arduino Uno and a USB cable.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using any other variant of Arduino, you can obtain further information
    about it from [http://arduino.cc/en/Guide/HomePage](http://arduino.cc/en/Guide/HomePage)
    or the community-supported Arduino forum that is located at [http://forum.arduino.cc/](http://forum.arduino.cc/).
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the Arduino board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous chapter, this book supports all major operating
    systems, and this section will provide you with steps to connect and configure
    the Arduino board for these operating systems. In the previous chapter, we utilized
    example code to get started with the Arduino IDE. If you were unable to successfully
    communicate with Arduino by following the information given in the previous chapter,
    follow the instructions provided in this section to establish a connection between
    your computer and your Arduino. First, connect your Arduino board to your computer's
    USB port using a USB cable and follow the steps according to your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are using the latest version of Ubuntu Linux, once you connect the Arduino
    board and open the Arduino IDE, you will be asked to add your username to the
    dailout group, as displayed in the following screenshot. Click on the **Add**
    button and log out from the system. You don't need to restart the computer for
    the changes to take effect. Log in with the same username and open the Arduino
    IDE.
  prefs: []
  type: TYPE_NORMAL
- en: '![Linux](img/5938OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you don''t see this dialog box, check whether you can see the **Serial Port**
    option in the **Tools** menu of the Arduino IDE. It is possible that the installation
    of other programs might have added your username to the dailout group already.
    If you don''t get the dialog box and don''t have any options to select in **Serial
    Port**, execute the following script in the terminal, where `<username>` is your
    Linux username:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This script will add your username to the dialout group, and it should also
    work for other Linux versions. In Linux, the Arduino board mostly gets connected
    as `/dev/ttyACMx`, where `x` is the integer value and depends on your physical
    port address. If you are using any other distribution of Linux other than Ubuntu,
    you might want to check out the proper groups associated with the Arduino serial
    port from the Linux installation page ([http://playground.arduino.cc/Learning/Linux](http://playground.arduino.cc/Learning/Linux))
    of the Arduino website.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the Fedora Linux distribution, add the `uucp` and `lock` groups with the
    `dialout` group to control the serial port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Mac OS X
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Mac OS X, when you connect your Arduino through a serial port, the OS configures
    it as a network interface. In OS X Mavericks, once the Arduino board is connected,
    open **Network** from **System Preferences**. A dialog box should appear that
    states that a new network interface has been detected. Click on **OK** for **Thunderbolt
    Bridge** and then click on **Apply**. The following screenshot displays the dialog
    box to add a new network interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mac OS X](img/5938OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For OS X Lion or later versions, on connecting the Arduino board, a dialog box
    will appear that will ask you to add a new network interface. In this case, you
    will not have to navigate to your network preferences. If you see the network
    interface with the status **Not connected** and highlighted in red, don't worry
    about it as it should work just fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Arduino IDE and navigate to **Serial Port** from the **Tools** menu.
    You should be able to see options similar to those displayed in the following
    screenshot. The serial port on which the Arduino board is connected might vary
    according to your OS X version and the physical port to which it is connected.
    Make sure that you select a `tty` interface for a USB modem. As displayed in the
    following screenshot, the Arduino board is connected to the serial port `/dev/tty.usbmodemfd121`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mac OS X](img/5938OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The configuration of the Arduino serial port is very straightforward if you
    are using Windows. When you connect your Arduino board the very first time, the
    operating system will automatically install the necessary drivers by itself. Once
    this process is complete, select an appropriate COM port from the **Serial Port**
    option in the menu bar. From the main menu, navigate to **Tools** | **Serial Port**
    and select the COM port.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even after following the steps mentioned earlier, if you still don''t see the
    highlighted **Serial Port** option as displayed in the following screenshot, then
    you have got a problem. There can be two main reasons for this: the serial port
    is being used by another program or the Arduino USB drivers are not installed
    properly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If any program other than the Arduino IDE is using the specific serial port,
    terminate that program and restart the Arduino IDE. Sometimes in Linux, the `brltty`
    library conflicts with the Arduino serial interface. Remove this library, log
    out, and log back in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In Windows, reinstalling the Arduino IDE also works, as this process installs
    and configures the Arduino USB driver again.
  prefs: []
  type: TYPE_NORMAL
- en: '![Troubleshooting](img/5938OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Arduino board can be used by only one program at a time. It is very import
    to make sure that any previously used program or other services are not using
    the serial port or Arduino when you try to use the Arduino IDE. This check will
    become very important when we start using multiple programs to control Arduino
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that you can now select the serial port in the Arduino IDE, we can
    go ahead with compiling and uploading sketches to your Arduino board. The Arduino
    IDE ships with preinstalled example sketches with which you can play around. However,
    before we go ahead and start playing with complex examples, let's go through the
    next section, which explains the Firmata protocol and also guides you through
    step-by-step instructions to compile and upload a sketch.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Firmata protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before Arduino, the domain of microcontroller-based applications was limited
    to hardware programmers. Arduino made it simple for developers that came from
    other software fields and even for the non-coding community to develop microcontroller-based
    hardware applications. Arduino consists of a simple hardware design with a microcontroller
    and I/O pins to interface external devices. If one can write an Arduino sketch
    that can transfer the control of the microcontroller and these pins to an external
    software mechanism, then it will reduce one's efforts to upload Arduino sketches
    for every modification. This process can be performed by developing such an Arduino
    program that can then be controlled using a serial port. There exists a protocol
    called **Firmata**, which does exactly that.
  prefs: []
  type: TYPE_NORMAL
- en: What is Firmata?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firmata is a generic protocol that allows communication between the microcontroller
    and the software that is hosted on a computer. Any software from any computer
    host that is capable of serial communication can communicate with the microcontroller
    using Firmata. Firmata gives complete access of Arduino directly to the software
    and eliminates the processes of modifying and uploading Arduino sketches.
  prefs: []
  type: TYPE_NORMAL
- en: To utilize the Firmata protocol, a developer can upload a sketch that supports
    the protocol to the Arduino client as a onetime process. Afterwards, the developer
    can write custom software on the host computer and perform complex tasks. This
    software will provide commands via a serial port to the Arduino board that is
    equipped with Firmata. He or she can keep altering the logic on the host computer
    without interrupting the Arduino hardware.
  prefs: []
  type: TYPE_NORMAL
- en: The practice of writing custom Arduino sketches is still valid for standalone
    applications where the Arduino board has to perform a task locally. We will explore
    both these options in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about the Firmata protocol and its latest version from the
    official website at [http://www.firmata.org](http://www.firmata.org).
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a Firmata sketch to the Arduino board
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way to start testing the Firmata protocol is to upload a standard Firmata
    program to the Arduino board and use the testing software from the host. In this
    section, we are going to demonstrate a method to upload an Arduino sketch, which
    has this standard Firmata program, to the board. This is going to be the default
    method to upload any sketch in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementation of the Firmata protocol requires the latest version of the Firmata
    firmware and you don''t have to worry about writing it. The latest Arduino IDE
    ships with a standard version of the Firmata firmware, and we recommend that you
    use the latest IDE to avoid any conflict. Now, follow the following steps to upload
    the program to your Arduino board:'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the following screenshot, open the **StandardFirmata** sketch by
    navigating to **File** | **Examples** | **Firmata** | **StandardFirmata** in the
    Arduino IDE:![Uploading a Firmata sketch to the Arduino board](img/5938OS_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This action will open another sketchbook in a new window with the **StandardFirmata**
    sketch loaded in the editor. Do not modify anything in the sketch and go ahead
    with the compiling process that is described in the next step. It is important
    not to modify anything in the code as the test software that we are going to use
    complies with the latest unchanged firmware.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the **StandardFirmata** sketch is opened, the next step is to compile it
    for your Arduino board. In the previous section, we already connected the Arduino
    board to the computer and selected the proper serial port. However, if the new
    sketchbook has a different configuration than that, follow the steps from the
    previous section, that is, select the appropriate serial port and the Arduino
    board type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To compile the current sketch, click on the **Verify** icon from the toolbar
    as displayed in the following screenshot. You can also compile it by navigating
    to **Sketch** | **Verify / Compile** or clicking on *Ctrl* + *R* (*command* +
    *R* if you are using Mac OS X):![Uploading a Firmata sketch to the Arduino board](img/5938OS_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The compilation process should complete without any errors as we are using default
    example code from the IDE itself. Now it's time to upload the sketch to the board.
    Make sure that you have connected the board.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press the upload icon in the toolbar as displayed in the following screenshot.
    This action will upload the compiled code to your Arduino board:![Uploading a
    Firmata sketch to the Arduino board](img/5938OS_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On completion, you should see the **Done uploading.** text in the IDE, as displayed
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Uploading a Firmata sketch to the Arduino board](img/5938OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Your Arduino board is now ready with the latest Firmata firmware and is waiting
    for a request from your computer. Let's move on to the next section and start
    testing the Firmata protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Firmata protocol
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous chapter, we used an on-board LED at pin 13 to test the **Blink**
    program. This time, we are going to use an external LED to get you started with
    the assembly of hardware components using your Arduino board. As all the upcoming
    exercises and projects will require you to interface hardware components such
    as sensors and actuators to your Arduino board using a breadboard, we want you
    to start getting hands-on experience with wiring these components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now is the time to use the LED that we asked you to get at the beginning of
    the chapter. Before we start wiring the LED, let''s first understand the physics
    of it. The LED that you obtained should have two legs: a short one and a long
    one. The short leg is connected to the cathode of the LED and it needs to be connected
    to the ground via a resistor. As you can see in the following figure, we are using
    a 1 k-ohm resistor to ground the cathode of the LED. The long leg, which is connected
    to the anode, needs to connect to one of the digital pins of the Arduino board.'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the following figure, we have connected the anode to the digital
    pin number 13\. Look at the figure and wire the connection as displayed. Make
    sure that you disconnect the Arduino board from the host computer to avoid any
    kind of damage from static electricity.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the Firmata protocol](img/5938OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, we are going to use an LED to test some basic functionalities
    of the Firmata protocol. We have already uploaded the Firmata code to the Arduino
    board and we are ready to control the LED from the host computer.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding wiring figure was created using an open source tool called **Fritzing**.
    We are going to cover the Fritzing tool comprehensively in the next chapter, as
    it will be our standard software to create the wiring diagram before we perform
    the actual physical wiring.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are multiple ways to communicate with the Arduino board from the host
    computer using Firmata, such as writing your own program in Python using the supported
    library or using the prebuilt testing software. Starting from the next section,
    we are going to write our own programs to use Firmata, but at this stage, let''s
    use a freely available tool for testing purposes. The official Firmata website,
    [http://www.firmata.org](http://www.firmata.org), also provides test tools that
    you can download from the **Firmata Test Program** section on the main page. The
    website includes a different variant of the tool called `firmata_test` for different
    operating systems. Using the following steps, you can test the implementation
    of the Firmata protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the appropriate version of the `firmata_test` program to your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, connect your Arduino board with the LED to the host computer using the
    USB cable and run the downloaded `firmata_test` program. You will be able to see
    an empty window on the successful execution of the program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As displayed in the following screenshot, select the appropriate port from the
    drop-down menu. Make sure to select the same port that you used to upload the
    Arduino sketch.![Testing the Firmata protocol](img/5938OS_02_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, make sure that your Arduino IDE is not connected to the board
    using the same port number. As we mentioned earlier, the serial interface grants
    exclusive access to only one application at a time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you select the Arduino serial port, the program will load multiple drop-down
    boxes and buttons with labels that contain the pin number. You can see in the
    following screenshot that the program is loaded with 12 digital pins (from pin
    2 to pin 13) and six analog pins (from pin 14 to pin 19). As we are using the
    Arduino Uno board for our applications, the test program only loads pins that
    are part of Arduino Uno. If you are using Arduino Mega or any other board, the
    number of pins displayed in the program will be according to the pins supported
    by that particular variant of the Arduino board.![Testing the Firmata protocol](img/5938OS_02_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Working with the firmata_test program on Linux**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On a Linux platform, you might have to modify the property of the downloaded
    file and make it executable. From the same directory, run the following command
    in the terminal to make it executable:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you have changed the permissions, use the following command to run the
    program from the terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see in the program window, you have two other columns as well as
    the column containing the labels. The second column in the program lets you select
    the role for the appropriate pins. You can specify the role of digital pins (in
    the case of Arduino Uno, from 2 to 13) as input or output. As displayed in the
    following screenshot, you will see **Low** in the third column as soon as you
    select the role of pins 2 and 3 as input pins. This is correct, as we don't have
    any input connected to these pins. You can play with the program by changing the
    roles and values of multiple pins.![Testing the Firmata protocol](img/5938OS_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we have connected the LED to digital pin 13, we are not expecting any physical
    changes on the board while you are playing around with the other pins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, select pin 13 as an output pin and press the **Low** button. This will
    change the button's label to **High** and you will see that the LED is turned
    on. By performing this action, we have changed the logic of the digital pin 13
    to 1, that is, **High**, which translates to +5 volts at the pin. This potential
    will be sufficient to light the LED. You can change the level of pin 13 back to
    0 by clicking on the button again and turning it to **Low**. This will change
    the potential back to 0 volts.![Testing the Firmata protocol](img/5938OS_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The program that we used here is perfect to test the fundamentals, but it cannot
    be used to write complex applications using the Firmata protocol. In real-world
    applications, we really need to execute the Firmata methods using custom code,
    which in addition to switching the LED status also includes the implementation
    of smart logic and algorithms, interfacing other components, and so on. We are
    going to use Python for these applications, starting from the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with pySerial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You learned about the Firmata protocol in the previous section. This is an easy
    and quick way to start working with Arduino. Although the Firmata protocol helps
    you to develop complex applications from your computer without modifying the Arduino
    sketch, we are not ready to start coding these applications.
  prefs: []
  type: TYPE_NORMAL
- en: The first step towards writing these complex applications is to provide an interface
    between your programming environment and the Arduino via a serial port. In this
    book, you will be required to establish a connection between the Python interpreter
    and Arduino for every project that we develop.
  prefs: []
  type: TYPE_NORMAL
- en: Writing your own library, which includes implementation of functions and specifications
    to enable communication on a serial protocol, is an inconvenient and time consuming
    process. We are going to avoid that by using an open source, well maintained Python
    library called `pySerial`.
  prefs: []
  type: TYPE_NORMAL
- en: The `pySerial` library enables communication with Arduino by encapsulating the
    access for the serial port. This module provides access to the serial port settings
    through Python properties and allows you to configure the serial port directly
    through the interpreter. `pySerial` will be the bridge for any future communication
    between the Python and Arduino. Let's start by installing `pySerial`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing pySerial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We installed the package manager Setuptools in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Python and Arduino"), *Getting Started with Python and Arduino*.
    If you have skipped that chapter and are not sure about it, then please go through
    that section. If you already know how to install and configure Python library
    packages, skip these installation steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'From this stage, we are going to use only pip-based installation commands due
    to their obvious advantages that were described in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Python and Arduino"), *Getting Started with Python and Arduino*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal or command prompt and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Windows operating system does not require administrator-level user access
    to execute the command, but you should have root privileges to install Python
    packages in Unix-based operating systems, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to install the `pySerial` library from source, download the archive
    from [http://pypi.python.org/pypi/pyserial](http://pypi.python.org/pypi/pyserial),
    unpack it, and from the `pySerial` directory, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If Python and Setuptools are installed properly, you should see the following
    output at the command line after the installation is complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This means that you have successfully installed the `pySerial` library and you
    are good to go to the next section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, to check whether or not `pySerial` is successfully installed, start your
    Python interpreter and import the `pySerial` library using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Playing with a pySerial example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your Arduino board has the Firmata sketch **StandardFirmata** from the previous
    example. To play with `pySerial`, we are not going to use the Firmata protocol
    anymore. Instead, we are going to use another simple Arduino sketch that implements
    serial communication that can be captured on the Python interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sticking with the promise of not performing any coding for the Arduino sketch,
    let''s select an example sketch from the Arduino IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: As displayed in the following screenshot, navigate to **File** | **Examples**
    | **01\. Basics** | **DigitalReadSerial**.![Playing with a pySerial example](img/5938OS_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile and upload the program to the Arduino board using the same method that
    was described earlier. Select the appropriate serial port on which your Arduino
    is connected and make a note of it. As you can see in the sketch, this simple
    Arduino code transmits the status of digital pin 2 that is on the serial port
    with a baud rate of 9600 bps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Without disconnecting the Arduino board from your computer, open the Python
    interpreter. Then, execute the following commands on the Python interpreter. Make
    sure that you replace `/dev/ttyACM0` with the port name that you noted down earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On execution, you should get repeated `0` values in the Python interpreter.
    Press *Ctrl* + *C* to terminate this code. As you can see, the Arduino code will
    keep sending messages due to the loop function that was used in the sketch. We
    don't have anything connected to pin 2, and because of this, we are getting the
    status `0`, that is, `Low`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you know what you are doing, you can connect any digital sensor to pin 2
    and run the script again to see the changed status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding Python script, the `serial.Serial` method interfaces and opens
    the specified serial port, while the `readline()` method reads each line from
    this interface, terminated with `\n`, that is, the newline character.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The newline character is a special character that signifies the end of a line
    of text. It is also known as **End of Line** (**EOL**) or **Line feed + Carriage
    Return** (**LF + CR**). Learn more about the newline character at [http://en.wikipedia.org/wiki/Newline](http://en.wikipedia.org/wiki/Newline).
  prefs: []
  type: TYPE_NORMAL
- en: Bridging pySerial and Firmata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Firmata section, we already learned how useful it is to use the Firmata
    protocol instead of constantly modifying the Arduino sketch and uploading it for
    simple programs. `pySerial` is a simple library that provides a bridge between
    Arduino and Python via a serial port, but it lacks any support for the Firmata
    protocol. As mentioned earlier, the biggest benefit of Python can be described
    in one sentence, "There is a library for that." So, there exists a Python library
    called `pyFirmata` that is built on `pySerial` to support the Firmata protocol.
    There are a few other Python libraries that also support Firmata, but we will
    only be focusing on `pyFirmata` in this chapter. We will be extensively using
    this library for various upcoming projects as well:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by installing `pyFirmata` just like any other Python package by
    using Setuptools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the previous section, while testing `pySerial`, we uploaded the `DigitalSerialRead`
    sketch to the Arduino board.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To communicate using the Firmata protocol, you need to upload the **StandardFirmata**
    sketch again, just as we did in the *Uploading a Firmata sketch to the Arduino
    board* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have uploaded this sketch, open the Python interpreter and execute
    the following script. This script imports the `pyfirmata` library to the interpreter.
    It also defines the pin number and the port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After this, we need to associate the port with the microcontroller board type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While executing the previous script, two LEDs on the Arduino will flicker as
    the communication link between the Python interpreter and the board gets established.
    In the *Testing the Firmata protocol* section, we used a prebuilt program to turn
    an LED on and off. Once the Arduino board is associated to the Python interpreter,
    these functions can be performed directly from the prompt.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can now start playing with Arduino pins. Turn on the LED by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can turn off the LED by executing the following command. Here, in both
    commands, we set the state of digital pin 13 by passing values `1` (**High**)
    or `0` (**Low**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, you can also read the status of a pin from the prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we combined this script in an executable file with a `.py` extension, we
    can have a Python program that can be run directly to control the LED rather than
    running these individual scripts on a terminal. Later, this program can be extended
    to perform complex functions without writing or changing the Arduino sketch.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although we are running individual scripts at the Python prompt, we will be
    going through the process of creating Python executable files in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By introducing the Firmata library, we avoided writing any custom Arduino sketches
    in this chapter. We will continue this practice during the remaining part of this
    book and will only use or make custom sketches when required. In this chapter,
    you interacted with the Arduino board by making the LED blink, which is the easiest
    way to get started on a hardware project. Now it's time for your first project,
    where we are also going to make some more LEDs blink. One might ask the question
    that if we have already done it, then why do we need another project to make LEDs
    blink? Let's find out.
  prefs: []
  type: TYPE_NORMAL
