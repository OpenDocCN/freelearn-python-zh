["```py\ncisco@Client:~$ sudo ifconfig eth0 192.168.2.211 netmask 255.255.255.0\ncisco@Client:~$ sudo route add default gw 192.168.2.1\ncisco@Server:~$ sudo ifconfig eth0 192.168.2.212 netmask 255.255.255.0\ncisco@Server:~$ sudo route add default gw 192.168.2.1 \n```", "```py\n$ sudo apt update && sudo apt upgrade\n$ sudo apt-get install snmp \n```", "```py\n!\nip access-list standard permit_snmp\n permit <management station> log\n deny   any log\n!\nsnmp-server community secret RO permit_snmp\n! \n```", "```py\n$ snmpwalk -v2c -c secret 192.168.2.218 .1.3.6.1.4.1.9\niso.3.6.1.4.1.9.2.1.1.0 = STRING: \"\nBootstrap program is IOSv\n\"\niso.3.6.1.4.1.9.2.1.2.0 = STRING: \"reload\"\niso.3.6.1.4.1.9.2.1.3.0 = STRING: \"iosv-1\"\niso.3.6.1.4.1.9.2.1.4.0 = STRING: \"virl.info\"\n<skip> \n```", "```py\n$ snmpwalk -v2c -c secret 192.168.2.218 .1.3.6.1.4.1.9.2.1.61.0\niso.3.6.1.4.1.9.2.1.61.0 = STRING: \"cisco Systems, Inc.\n170 West Tasman Dr.\nSan Jose, CA  95134-1706\nU.S.A.\nPh +1-408-526-4000\nCustomer service 1-800-553-6387 or +1-408-526-7208\n24HR Emergency 1-800-553-2447 or +1-408-526-7209\nEmail Address tac@cisco.com\nWorld Wide Web http://www.cisco.com\" \n```", "```py\n$ snmpwalk -v2c -c secret 192.168.2.218 .1.3.6.1.4.1.9.2.1.61.1\niso.3.6.1.4.1.9.2.1.61.1 = No Such Instance currently exists at this OID \n```", "```py\n*Sep 17 23:32:10.155: %SEC-6-IPACCESSLOGNP: list permit_snmp permitted 0 192.168.2.126 -> 0.0.0.0, 1 packet \n```", "```py\n(venv) $ cd /tmp\n(venv) $ git clone https ://github.com/etingof/pyasn1.git\n(venv) $ cd pyasn1\n(venv) $ git checkout 0.2.3\n(venv) $ python3 setup.py install # notice the venv path \n```", "```py\n(venv) $ cd /tmp\n(venv) $ git clone https://github.com/etingof/pysnmp\n(venv) $ cd pysnmp/\n(venv) $ git checkout v4.3.10\n(venv) $ python3 setup.py install # notice the venv path \n```", "```py\n>>> from pysnmp.entity.rfc3413.oneliner import cmdgen\n>>> cmdGen = cmdgen.CommandGenerator()\n>>> cisco_contact_info_oid = \"1.3.6.1.4.1.9.2.1.61.0\" \n```", "```py\n>>> errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(\n        cmdgen.CommunityData('secret'),\n        cmdgen.UdpTransportTarget(('192.168.2.218', 161)),\n        cisco_contact_info_oid)\n>>> for name, val in varBinds:\n        print('%s=%s' % (name.prettyPrint(), str(val)))\n\nSNMPv2-SMI::enterprises.9.2.1.61.0=cisco Systems, Inc.\n170 West Tasman Dr.\nSan Jose, CA  95134-1706\nU.S.A.\nPh +1-408-526-4000\nCustomer service 1-800-553-6387 or +1-408-526-7208\n24HR Emergency 1-800-553-2447 or +1-408-526-7209\nEmail Address tac@cisco.com\nWorld Wide Web http://www.cisco.com\n>>> \n```", "```py\n#!/usr/bin/env/python3\nfrom pysnmp.entity.rfc3413.oneliner import cmdgen\ncmdGen = cmdgen.CommandGenerator()\nsystem_up_time_oid = \"1.3.6.1.2.1.1.3.0\"\ncisco_contact_info_oid = \"1.3.6.1.4.1.9.2.1.61.0\"\nerrorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(\n    cmdgen.CommunityData('secret'),\n    cmdgen.UdpTransportTarget(('192.168.2.218', 161)),\n    system_up_time_oid,\n    cisco_contact_info_oid\n)\n# Check for errors and print out results\nif errorIndication:\n    print(errorIndication)\nelse:\n    if errorStatus:\n        print('%s at %s' % (\n            errorStatus.prettyPrint(),\n            errorIndex and varBinds[int(errorIndex)-1] or '?'\n            )\n        )\n    else:\n        for name, val in varBinds:\n            print('%s = %s' % (name.prettyPrint(), str(val))) \n```", "```py\n$ python pysnmp_1.py\nSNMPv2-MIB::sysUpTime.0 = 599083\nSNMPv2-SMI::enterprises.9.2.1.61.0 = cisco Systems, Inc.\n170 West Tasman Dr.\nSan Jose, CA  95134-1706\nU.S.A.\nPh +1-408-526-4000\nCustomer service 1-800-553-6387 or +1-408-526-7208\n24HR Emergency 1-800-553-2447 or +1-408-526-7209\nEmail Address tac@cisco.com\nWorld Wide Web http://www.cisco.com \n```", "```py\n$ snmpwalk -v2c -c secret 172.16.1.189 .1.3.6.1.2.1.2.2.1.2\niso.3.6.1.2.1.2.2.1.2.1 = STRING: \"GigabitEthernet0/0\"\niso.3.6.1.2.1.2.2.1.2.2 = STRING: \"GigabitEthernet0/1\"\niso.3.6.1.2.1.2.2.1.2.3 = STRING: \"GigabitEthernet0/2\"\niso.3.6.1.2.1.2.2.1.2.4 = STRING: \"Null0\"\niso.3.6.1.2.1.2.2.1.2.5 = STRING: \"Loopback0\" \n```", "```py\nr1#sh int gig 0/0 | i packets\n  5 minute input rate 0 bits/sec, 0 packets/sec\n  5 minute output rate 0 bits/sec, 0 packets/sec\n     6872 packets input, 638813 bytes, 0 no buffer\n     4279 packets output, 393631 bytes, 0 underruns\n$ snmpwalk -v2c -c secret 192.168.2.218 .1.3.6.1.2.1.2.2.1.17.1\niso.3.6.1.2.1.2.2.1.17.1 = Counter32: 4292 \n```", "```py\n# Hostname OID\nsystem_name = '1.3.6.1.2.1.1.5.0'\n# Interface OID\ngig0_0_in_oct = '1.3.6.1.2.1.2.2.1.10.1'\ngig0_0_in_uPackets = '1.3.6.1.2.1.2.2.1.11.1'\ngig0_0_out_oct = '1.3.6.1.2.1.2.2.1.16.1'\ngig0_0_out_uPackets = '1.3.6.1.2.1.2.2.1.17.1' \n```", "```py\ndef snmp_query(host, community, oid):\n    errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(\n        cmdgen.CommunityData(community),\n        cmdgen.UdpTransportTarget((host, 161)),\n        oid\n    ) \n```", "```py\nresult = {}\nresult['Time'] = datetime.datetime.utcnow().isoformat()\nresult['hostname'] = snmp_query(host, community, system_name)\nresult['Gig0-0_In_Octet'] = snmp_query(host, community, gig0_0_in_oct)\nresult['Gig0-0_In_uPackets'] = snmp_query(host, community, gig0_0_in_uPackets)\nresult['Gig0-0_Out_Octet'] = snmp_query(host, community, gig0_0_out_oct)\nresult['Gig0-0_Out_uPackets'] = snmp_query(host, community, gig0_0_out_uPackets)\nwith open('/home/echou/Master_Python_Networking/Chapter7/results.txt', 'a') as f:\n    f.write(str(result))\n    f.write('\\n') \n```", "```py\n$ cat results.txt\n{'Gig0-0_In_Octet': '3990616', 'Gig0-0_Out_uPackets': '60077', 'Gig0-0_In_uPackets': '42229', 'Gig0-0_Out_Octet': '5228254', 'Time': '2017-03-06T02:34:02.146245', 'hostname': 'iosv-1.virl.info'}\n{'Gig0-0_Out_uPackets': '60095', 'hostname': 'iosv-1.virl.info', 'Gig0-0_Out_Octet': '5229721', 'Time': '2017-03-06T02:35:02.072340', 'Gig0-0_In_Octet': '3991754', 'Gig0-0_In_uPackets': '42242'}\n<skip> \n```", "```py\n$ chmod +x pysnmp_3.py\n# crontab configuration\n*/5 * * * * /home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter07/pysnmp_3.py \n```", "```py\n(venv) $ pip install matplotlib\n(venv) $ sudo apt install python3-tk \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> plt.plot([0,1,2,3,4], [0,10,20,30,40])\n[<matplotlib.lines.Line2D object at 0x7f932510df98>]\n>>> plt.ylabel('Something on Y')\n<matplotlib.text.Text object at 0x7f93251546a0>\n>>> plt.xlabel('Something on X')\n<matplotlib.text.Text object at 0x7f9325fdb9e8>\n>>> plt.show() \n```", "```py\n>>> plt.savefig('figure1.png') or\n>>> plt.savefig('figure1.pdf') \n```", "```py\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as dates \n```", "```py\nx_time = []\ny_value = []\nwith open('results.txt', 'r') as f:\n    for line in f.readlines():\n        # eval(line) reads in each line as dictionary instead of string\n        line = eval(line)\n        # convert to internal float\n        x_time.append(dates.datestr2num(line['Time']))\n        y_value.append(line['Gig0-0_Out_uPackets']) \n```", "```py\nplt.subplots_adjust(bottom=0.3)\nplt.xticks(rotation=80)\nplt.plot_date(x_time, y_value)\nplt.title('Router1 G0/0')\nplt.xlabel('Time in UTC')\nplt.ylabel('Output Unicast Packets')\nplt.savefig('matplotlib_1_result.png')\nplt.show() \n```", "```py\nplt.plot_date(x_time, y_value, \"-\") \n```", "```py\nx_time = []\nout_octets = []\nout_packets = []\nin_octets = []\nin_packets = []\nwith open('results.txt', 'r') as f:\n    for line in f.readlines():\n        # eval(line) reads in each line as dictionary instead of string\n        line = eval(line)\n        # convert to internal float\n        x_time.append(dates.datestr2num(line['Time']))\n        out_packets.append(line['Gig0-0_Out_uPackets'])\n        out_octets.append(line['Gig0-0_Out_Octet'])\n        in_packets.append(line['Gig0-0_In_uPackets'])\n        in_octets.append(line['Gig0-0_In_Octet']) \n```", "```py\n# Use plot_date to display x-axis back in date format\nplt.plot_date(x_time, out_packets, '-', label='Out Packets')\nplt.plot_date(x_time, out_octets, '-', label='Out Octets')\nplt.plot_date(x_time, in_packets, '-', label='In Packets')\nplt.plot_date(x_time, in_octets, '-', label='In Octets') \n```", "```py\nplt.title('Router1 G0/0')\nplt.legend(loc='upper left')\nplt.grid(True)\nplt.xlabel('Time in UTC')\nplt.ylabel('Values')\nplt.savefig('matplotlib_2_result.png')\nplt.show() \n```", "```py\n#!/usr/bin/env python3\n# Example from http://matplotlib.org/2.0.0/examples/pie_and_polar_charts/pie_demo_features.html\nimport matplotlib.pyplot as plt\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = 'TCP', 'UDP', 'ICMP', 'Others'\nsizes = [15, 30, 45, 10]\nexplode = (0, 0.1, 0, 0)  # Make UDP stand out\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.savefig('matplotlib_3_result.png')\nplt.show() \n```", "```py\n(venv)$ pip install pygal \n```", "```py\n>>> import pygal\n>>> line_chart = pygal.Line()\n>>> line_chart.title = 'Browser usage evolution (in %)'\n>>> line_chart.x_labels = map(str, range(2002, 2013))\n>>> line_chart.add('Firefox', [None, None,    0, 16.6,   25,   31, 36.4, 45.5, 46.3, 42.8, 37.1])\n<pygal.graph.line.Line object at 0x7f4883c52b38>\n>>> line_chart.add('Chrome',  [None, None, None, None, None, None,    0,  3.9, 10.8, 23.8, 35.3])\n<pygal.graph.line.Line object at 0x7f4883c52b38>\n>>> line_chart.add('IE',      [85.8, 84.6, 84.7, 74.5,   66, 58.6, 54.7, 44.8, 36.2, 26.6, 20.1])\n<pygal.graph.line.Line object at 0x7f4883c52b38>\n>>> line_chart.add('Others',  [14.2, 15.4, 15.3,  8.9,    9, 10.4,  8.9,  5.8,  6.7,  6.8,  7.5])\n<pygal.graph.line.Line object at 0x7f4883c52b38>\n>>> line_chart.render_to_file('pygal_example_1.svg') \n```", "```py\n#!/usr/bin/env python3\nimport pygal\nx_time = []\nout_octets = []\nout_packets = []\nin_octets = []\nin_packets = []\nwith open('results.txt', 'r') as f:\n    for line in f.readlines():\n        # eval(line) reads in each line as dictionary instead of string\n        line = eval(line)\n        x_time.append(line['Time'])\n        out_packets.append(float(line['Gig0-0_Out_uPackets']))\n        out_octets.append(float(line['Gig0-0_Out_Octet']))\n        in_packets.append(float(line['Gig0-0_In_uPackets']))\n        in_octets.append(float(line['Gig0-0_In_Octet'])) \n```", "```py\nline_chart = pygal.Line()\nline_chart.title = \"Router 1 Gig0/0\"\nline_chart.x_labels = x_time\nline_chart.add('out_octets', out_octets)\nline_chart.add('out_packets', out_packets)\nline_chart.add('in_octets', in_octets)\nline_chart.add('in_packets', in_packets)\nline_chart.render_to_file('pygal_example_2.svg') \n```", "```py\n#!/usr/bin/env python3\nimport pygal\nline_chart = pygal.Pie()\nline_chart.title = \"Protocol Breakdown\"\nline_chart.add('TCP', 15)\nline_chart.add('UDP', 30)\nline_chart.add('ICMP', 45)\nline_chart.add('Others', 10)\nline_chart.render_to_file('pygal_example_3.svg') \n```", "```py\n$ sudo apt-get install cacti \n```", "```py\niosv-1#sh ip access-lists permit_snmp | I 172.16.1.173 10 permit 172.16.1.173 log (6362 matches) \n```", "```py\n<skip>\nfor device in devices.keys():\n…\n    child.sendline''sh ip access-lists permit_snmp | i 172.16.1.17'')\n    child.expect(device_prompt)\n    output = child.before \n```", "```py\n''sh ip access-lists permit_snmp | i 172.16.1.173rn 10 permit 172.16.1.173 log (6428 matches)r'' \n```", "```py\nprint(str(output).split'''')[1].split()[0]) \n```", "```py\n$ ./cacti_1.py\n6428\n$ ./cacti_1.py\n6560\n$ ./cacti_1.py\n6758 \n```", "```py\n$ chmod a+x cacti_1.py\n$ sudo cp cacti_1.py /usr/share/cacti/site/scripts/ \n```"]