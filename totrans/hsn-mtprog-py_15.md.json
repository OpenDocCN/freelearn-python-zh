["```py\n    class InvoiceHandler(object):\n        def __init__(self):\n            self.next_action = None\n        def handle(self,calctax):\n            self.next_action.handle(calctax)\n    ```", "```py\n    class InputState(object):\n        state_ny = ['NYC','NY','New York','new york']\n        state_ca = ['CA', 'California', 'california']\n    ```", "```py\n    class Print_invoice(object):\n        def __init__(self,state):\n            self.state = state\n            self.header = 'State specific Sales tax is applicable \n                           for the state of ' + self.state\n    ```", "```py\n    class NYCHandler(InvoiceHandler):\n        def generate_invoice(self, header, state):\n            product = 'WashingMachine'\n            pricebeforetax = 450 + (450 * 0.19)\n            tax_rate = 0.4\n            local_rate = 0.055\n            tax = pricebeforetax * (tax_rate + local_rate)\n            finalsellingprice = pricebeforetax + tax\n            print('**************ABC Megamart*****************')\n            print('***********------------------**************')\n            print(header)\n            print('Product: ', product)\n            print('Tax: ', tax)\n            print('Total Price: ', finalsellingprice)\n            print('***********------------------**************') \n\n        def handle(self,print_invoice):\n            if print_invoice.state in InputState.state_ny:\n                self.generate_invoice(print_invoice.header, \n                                      print_invoice.state)\n            else:\n                super(NYCHandler, self).handle(print_invoice)\n    ```", "```py\n    class CAHandler(InvoiceHandler):\n        def generate_invoice(self, header, state):\n            product = 'WashingMachine'\n            pricebeforetax = 480 + (480 * 0.14)\n            tax_rate = 0.35\n            local_rate = 0.077\n            tax = pricebeforetax * (tax_rate + local_rate)\n            finalsellingprice = pricebeforetax + tax\n            print('**************ABC Megamart*****************')\n            print('***********------------------**************')\n            print(header)\n            print('Product: ', product)\n            print('Tax: ', tax)\n            print('Total Price: ', finalsellingprice)\n            print('***********------------------**************') \n\n        def handle(self,print_invoice):\n            if print_invoice.state in InputState.state_ca:\n                self.generate_invoice(print_invoice.header, \n                                      print_invoice.state)\n            else:\n                super(CAHandler, self).handle(print_invoice)\n    ```", "```py\n    class ExceptionHandler(InvoiceHandler):\n        def handle(self,print_invoice):\n            print(\"No branches in the state\")  \n    ```", "```py\n    def invoice_requestor(state):\n        invoice = Print_invoice(state)\n        nychandler = NYCHandler()\n        cahandler = CAHandler()\n        nychandler.next_action = cahandler\n        cahandler.next_action = ExceptionHandler()\n        nychandler.handle(invoice)\n    ```", "```py\ninvoice_requestor('CA')\n```", "```py\n**************ABC Megamart*****************\n```", "```py\n***********------------------**************\n```", "```py\nState specific Sales tax is applicable for the state of CA\n```", "```py\nProduct:  WashingMachine\n```", "```py\nTax:  233.6544\n```", "```py\nTotal Price:  780.8544\n```", "```py\n***********------------------**************\n```", "```py\ninvoice_requestor('NYC')\n```", "```py\n**************ABC Megamart*****************\n```", "```py\n***********------------------**************\n```", "```py\nState specific Sales tax is applicable for the state of NYC\n```", "```py\nProduct:  WashingMachine\n```", "```py\nTax:  243.6525\n```", "```py\nTotal Price:  779.1525\n```", "```py\n***********------------------**************\n```", "```py\ninvoice_requestor('TEXAS')\n```", "```py\nNo branches in the state\n```", "```py\n    from abc import ABC, abstractmethod\n    class Billing:\n        sales = {'purchase_price': 450,\n                  'profit_margin': 0.19,\n                  'tax_rate': 0.4,\n                  'discount_rate': 0.10\n                  }        \n        @abstractmethod\n        def apply_discount(self):\n            pass\n        @abstractmethod\n        def remove_discount(self):\n            pass\n    ```", "```py\n    class DiscountedBilling(Billing):\n        def apply_discount(self):\n            sales = self.sales\n            pricebeforetax = sales['purchase_price'] + \n                 sales['purchase_price'] * sales['profit_margin']\n            finalsellingprice = pricebeforetax + (pricebeforetax * \n            sales['tax_rate'])\n            sales['sellingPrice'] = finalsellingprice\n            discountedPrice = sales['sellingPrice'] * (1 – \n                              sales['discount_rate'])\n            return discountedPrice\n    ```", "```py\n    class ActualBilling(Billing):\n        def remove_discount(self):\n            sales = self.sales\n            pricebeforetax = sales['purchase_price'] + \n                 sales['purchase_price'] * sales['profit_margin']\n            actualprice = pricebeforetax + (pricebeforetax * \n                          sales['tax_rate'])\n            return actualprice\n    ```", "```py\n    class ExecuteBilling:\n        @abstractmethod\n        def exec_discount(self):\n            pass\n        @abstractmethod\n        def revoke_discount(self):\n            pass\n    ```", "```py\n    class ExecuteDiscountedBilling(ExecuteBilling):\n        def __init__(self, instance):\n            self.instance = instance        \n        def exec_discount(self):\n            print('Discount applied...')\n            return self.instance.apply_discount()        \n        def revoke_discount(self, revokeInstance):\n            revokeInstance.reset(ExecuteActualBilling(\n                                 ActualBilling()))\n            return revokeInstance.runcalc()\n    ```", "```py\n    class ExecuteActualBilling(ExecuteBilling):\n        def __init__(self, instance):\n            self.instance = instance\n\n        def exec_discount(self):\n            print('Discount removed...')\n            return self.instance.remove_discount()\n\n        def revoke_discount(self, revokeInstance):\n            revokeInstance.reset(ExecuteDiscountedBilling(\n                                 DiscountedBilling()))\n            return revokeInstance.runcalc()\n    ```", "```py\nclass RequestAction:\n    def __init__(self, action):\n        self.action = action\n    def reset(self, action):\n        print(\"Resetting command...\")\n        self.action = action\n    def runcalc(self):\n        return self.action.exec_discount()\n    def revert(self):\n        print(\"Reverting the previous action...\")\n        return self.action.revoke_discount(self)\n```", "```py\n    class Tester:\n        def __init__(self):\n            billing = Billing()\n            discount = \n                     ExecuteDiscountedBilling (DiscountedBilling())\n            actual = ExecuteActualBilling(ActualBilling())\n            requestor = RequestAction(discount)  \n            print(requestor.runcalc())\n            requestor.reset(actual)\n            print(requestor.runcalc())\n            print(requestor.revert())\n            print(requestor.revert())\n    ```", "```py\nTester()\n```", "```py\nDiscount applied...\n674.73\nResetting command...\nDiscount removed...\n749.7\nReverting the previous action...\nResetting command...\nDiscount applied...\n674.73\nReverting the previous action...\nResetting command...\nDiscount removed...\n749.7\n<__main__.Tester at 0x261f09e3b20>\n```", "```py\nclass SuperMarket():\n\n    def __init__(self,STRATEGY, items, name, scan, units, tax, \n                 itemtype = None):\n        self.STRATEGY = STRATEGY\n        self.items = items\n        self.name = name\n        self.scan = scan\n        self.units = units\n        self.tax = tax\n        self.itemtype = itemtype\n\n    def return_cart(self):\n        cartItems = []\n        for i in self.items:\n            cartItems.append(i)\n        return cartItems\n\n    def goto_counter(self):\n        countername = self.name\n        return countername\n```", "```py\n    def scan_bar_code(self):\n        codes = []\n        for i in self.scan:\n            codes.append(i)\n        return codes\n\n    def add_billing(self):\n        self.codes = self.scan_bar_code()\n        pricetag = []\n        for i in self.units:\n            pricetag.append(i)\n        bill = dict(zip(self.codes, pricetag))\n        return bill\n\n    def add_tax(self):\n        taxed = []\n        for i in self.tax:\n            taxed.append(i)\n        return taxed\n```", "```py\n        def calc_bill(self):\n            bill = self.add_billing()\n            items = []\n            cartItems = self.return_cart()\n            calc_bill = []\n            taxes = self.add_tax()\n            for item,tax in zip(bill.items(),taxes):\n                items.append(item[1])\n                calc_bill.append(item[1] + item[1]*tax)\n            finalbill = dict(zip(cartItems, calc_bill))\n            return finalbill\n\n        def print_invoice(self):\n            finalbill = self.calc_bill()\n            final_total = sum(finalbill.values())\n            print('**************ABC Megamart*****************')\n            print('***********------------------**************')\n            print('Counter Name: ', self.goto_counter())\n            for item,price in finalbill.items():\n                print(item,\": \", price)\n            print('Total:',final_total)\n            print('***********------------------**************')\n            print('***************PAID************************')\n    ```", "```py\n        def pipeline_template(self):\n            self.return_cart()\n            self.goto_counter()\n            self.STRATEGY.redirect_counter()\n            self.scan_bar_code()\n            self.add_billing()\n            self.add_tax()\n            self.calc_bill()\n            self.print_invoice()\n    ```", "```py\n    class VegeCounter():\n        def redirect_counter():\n            print(\"**************Move to Vege Counter**************\")\n    ```", "```py\n    class ElectronicsCounter():\n        def redirect_counter():\n            print(\"**************Move to Electronics \n                  Counter**************\")\n    ```", "```py\n    def run_pipeline(domain = SuperMarket):\n        domain.pipeline_template()\n    ```", "```py\n    run_pipeline(SuperMarket(STRATEGY = VegeCounter,\n               items = ['Onions','Tomatoes','Cabbage','Beetroot'],\n               name = ['Vegetable Counter'],\n               scan = [113323,3434332,2131243,2332783],\n               units = [10,15,12,14],\n               tax = [0.04,0.03,0.035,0.025],\n               itemtype = ['Vegetables'],\n               ))\n    ```", "```py\n    **************Move to Vege Counter**************\n    **************ABC Megamart*****************\n    ***********------------------**************\n    Counter Name:['Vegetable Counter']\n    Onions :10.4\n    Tomatoes :15.45\n    Cabbage :12.42\n    Beetroot :14.35\n    Total: 52.620000000000005\n    ***********------------------**************\n    ***************PAID************************\n    ```", "```py\n    run_pipeline(SuperMarket(STRATEGY = ElectronicsCounter,\n                        items = ['television','keyboard','mouse'],\n                        name = ['Electronics Counter'],\n                        scan = [113323,3434332,2131243],\n                        units = [100,16,14],\n                        tax = [0.04,0.03,0.035],\n                        itemtype = ['Electronics'],\n                        ))\n    ```", "```py\n**************Move to Electronics Counter**************\n**************ABC Megamart*****************\n***********------------------**************\nCounter Name:  ['Electronics Counter']\ntelevision :  104.0\nkeyboard :  16.48\nmouse :  14.49\nTotal: 134.97\n***********------------------**************\n***************PAID************************\n```"]