["```py\nself.context.p_changed_ = True\n\n```", "```py\nFrom persistent.list import PersistentList\nFrom persistent.dict import PersistentDict\n\n```", "```py\ninstall_requires=['setuptools',\n'grok',\n'grokui.admin',\n'z3c.testsetup',\n'megrok.form',\n# Add extra requirements here\n],\n\n```", "```py\n<blobstorage>\n<filestorage>\npath /<your directory>/todo/parts/data/Data.fs\n</filestorage>\nblob-dir /<your directory>/todo/parts/data/blobs\n</blobstorage>\n\n```", "```py\nclass IMessage(interface.Interface):\nsubject = schema.TextLine(title=u'Subject')\nmessage = schema.Text(title=u'Message text')\nattachment = BlobFile(title=u'Attachment',required=False)\n\n```", "```py\nfrom megrok.form.fields import BlobFile\n\n```", "```py\nclass Message(grok.Model):\ngrok.implements(IMessage, IMetadata, ISearchable)\nsubject = u''\nmessage = u''\ncontent_type = 'message'\ndef searchableText(self):\nreturn self.subject+self.message\n\n```", "```py\nclass AddMessageForm(grok.AddForm):\ngrok.context(Project)\ngrok.name('add_message')\ngrok.require('todo.changeitems')\nform_fields = grok.AutoFields(IMessage)\nlabel = \"Add a new message\"\ntemplate = grok.PageTemplateFile('custom_edit_form.pt')\n\n```", "```py\n@grok.action('Add message')\ndef add(self,**data):\nmessage = Message()\nmessage.creator = self.request.principal.title\nmessage.creation_date = datetime.datetime.now()\nmessage.modification_date = datetime.datetime.now()\nmessage.project = self.context\nmessage.project_name = self.context.__name__\nself.applyData(message,**data)\nid = str(self.context.next_id)\nself.context.next_id = self.context.next_id+1\nself.context[id] = message\nreturn self.redirect(self.url('messages'))\ndef setUpWidgets(self, ignore_request=False):\nsuper(AddMessageForm,self).setUpWidgets(ignore_request)\nself.widgets['subject'].displayWidth = 50\nself.widgets['message'].height = 12\n\n```", "```py\nclass ProjectMessages(grok.View):\ngrok.context(Project)\ngrok.name('messages')\ngrok.require('todo.view')\ngrok.template('master')\ndef update(self):\ncatalog = getUtility(ICatalog)\nself.messages = catalog.searchResults (content_type=('message','message'), project_name=(self.context.__name__,self.context.__name__))\n\n```", "```py\nclass ProjectMessagesViewlet(grok.Viewlet):\ngrok.viewletmanager(Main)\ngrok.context(Project)\ngrok.template('projectmessages_viewlet')\ngrok.view(ProjectMessages)\n\n```", "```py\n<div id=\"project\">\n<h1 id=\"apptitle\" onclick=\"editTitle();\" tal:content=\"context/title\">To-Do list manager</h1>\n<ul id=\"project-tabs\">\n<li><a tal:attributes=\"href python:view.url('index')\" title=\"Project lists\">Lists</a></li>\n<li><a tal:attributes=\"href python:view.url('messages')\" title=\"Project messages\">Messages</a></li>\n</ul>\n<h2>Here you can add new messages relating to this project.</h2>\n<p class=\"create\"><a href=\"add_message\">Create a new message</a></p>\n\n```", "```py\n<tal:block repeat=\"message view/messages\">\n<div class=\"message\">\n<h3><span tal:replace=\"message/subject\">subject</span>\n<a tal:define=\"url python:view.url('deletemessage')\" tal:attributes=\"href string:${url}?message=${message/__name__}\"> <img border=\"0\" tal:attributes=\"src static/bin_closed.png\" /></a>\n</h3>\n<p class=\"message_info\" tal:content=\"string:By ${message/creator}, on ${message/creation_date}\"> info </p>\n<p tal:content=\"message/message\">text</p>\n<p tal:condition=\"message/attachment\"> <a tal:attributes=\"href python:view.url(message,'download')\"> Download attachment </a> ( <span tal:replace=\"message/attachment/filename\">filename </span>, <span tal:replace=\"message/attachment/size\">size</span> bytes ) </p>\n</div>\n</tal:block>\n</div>\n\n```", "```py\nclass Download(grok.View):\ngrok.context(Message)\ngrok.require('todo.changeitems')\ndef update(self):\nself.data = self.context.attachment.data\nself.filename = self.context.attachment.filename\ndef render(self):\nself.response.setHeader('Content-Disposition', 'attachment; filename=%s;' % self.filename)\nreturn self.data\n\n```", "```py\ninstall_requires=['setuptools',\n'grok',\n'grokui.admin',\n'z3c.testsetup',\n'megrok.form',\n'zope.app.undo',\n# Add extra requirements here\n],\n\n```", "```py\n$ bin/zeopack -h localhost -p 8080 \n\n```", "```py\n$ bin/repozo -B -r backups -f todo/parts/data/Data.fs \n\n```", "```py\n$ bin/repozo -R -r backups -o RecoveredData.fs \n\n```", "```py\nfrom ZODB import FileStorage, DB\nimport transaction\nclass ZODBHandler(object):\ndef __init__(self, path):\nself.storage = FileStorage.FileStorage(path)\nself.db = DB(self.storage)\nself.connection = self.db.open()\nself.dbroot = self.connection.root()\ndef close(self):\nself.connection.close()\nself.db.close()\nself.storage.close()\n\n```", "```py\nif __name__ == _'_main__':\ndb = ZODBHandler('./Data.fs')\ndbroot = db.dbroot\ndbroot['pi'] = 3.14159265358979323\ndbroot['planet'] = 'Earth'\ndbroot['primes'] = [1, 2, 3, 5, 7, 11]\ndbroot['pycon'] = { 2009: 'Chicago', 2010: 'Atlanta' }\ntransaction.commit()\n\n```", "```py\nprint dbroot['primes']\n\n```", "```py\ndel dbroot['planet']\ntransaction.commit()\n\n```", "```py\nfrom persistent import Persistent\nclass Project(Persistent):\ndef __init__(self, title, kind, description):\nself.title = title\nself.kind = kind\nself.description = description\n\n```", "```py\ndbroot['project 1'] = Project('test project', 'business', 'A simple test project')\ndbroot['project 2'] = Project('another project', 'personal', 'a personal project')\ntransaction.commit()\nprint dbroot['project 1'].title\ndbroot['project 1'].title = 'new title'\ntransaction.commit()\n\n```"]