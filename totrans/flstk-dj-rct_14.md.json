["```py\n    name: Name of the Workflow\n    ```", "```py\n    on: push\n    ```", "```py\n    jobs:\n    ```", "```py\n     build-test:\n    ```", "```py\n       runs-on: ubuntu-latest\n    ```", "```py\n       steps:\n    ```", "```py\n       - uses: actions/checkout@v2\n    ```", "```py\n       - name: Listing files in a directory\n    ```", "```py\n         run: ls -a\n    ```", "```py\nname: Build, Test and Deploy Postagram\non:\n push:\n   branches: [ main ]\n```", "```py\nbuild-test:\n runs-on: ubuntu-latest\n steps:\n - uses: actions/checkout@v2\n - name: Injecting env vars\n   run: |\n     echo \"SECRET_KEY=test_foo\n           DATABASE_NAME=test_coredb\n           DATABASE_USER=test_core\n           DATABASE_PASSWORD=12345678\n           DATABASE_HOST=test_postagram_db\n           DATABASE_PORT=5432\n           POSTGRES_USER=test_core\n           POSTGRES_PASSWORD=12345678\n           POSTGRES_DB=test_coredb\n           ENV=TESTING\n           DJANGO_ALLOWED_HOSTS=127.0.0.1,localhost\n            \" >> .env\n```", "```py\n- name: Building containers\n run: |\n   docker-compose up -d --build\n```", "```py\n- name: Running Tests\n run: |\n   docker-compose exec -T api pytest\n```", "```py\n    git push\n    ```", "```py\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n    ```", "```py\n    cat .ssh/postagramapi.pub | ssh username@hostname_or_ipaddress 'cat >> .ssh/authorized_keys'\n    ```", "```py\ndeploy:\n  name: Deploying on EC2 via SSH\n  if: ${{ github.event_name == 'push' }}\n  needs: [build-test]\n  runs-on: ubuntu-latest\n  steps:\n  - name: Deploying Application on EC2\n    uses: appleboy/ssh-action@master\n    with:\n      host: ${{ secrets.SSH_EC2_IP }}\n      username: ${{ secrets.SSH_EC2_USER }}\n      key: ${{ secrets.SSH_PRIVATE_KEY }}\n      passphrase: ${{ secrets.SSH_PASSPHRASE }}\n      script: |\n        cd ~/.scripts\n        ./docker-ec2-deploy.sh\n```", "```py\n    #!/usr/bin/env bash\n    ```", "```py\n    TARGET='main'\n    ```", "```py\n    cd ~/api || exit\n    ```", "```py\n    ACTION_COLOR='\\033[1;90m'\n    ```", "```py\n    NO_COLOR='\\033[0m'\n    ```", "```py\n    echo -e ${ACTION_COLOR} Checking if we are on the target branch\n    ```", "```py\n    BRANCH=$(git rev-parse --abbrev-ref HEAD)\n    ```", "```py\n    if [ \"$BRANCH\" != ${TARGET} ]\n    ```", "```py\n    then\n    ```", "```py\n       exit 0\n    ```", "```py\n    fi\n    ```", "```py\n    # Checking if the repository is up to date.\n    ```", "```py\n    git fetch\n    ```", "```py\n    HEAD_HASH=$(git rev-parse HEAD)\n    ```", "```py\n    UPSTREAM_HASH=$(git rev-parse ${TARGET}@{upstream})\n    ```", "```py\n    if [ \"$HEAD_HASH\" == \"$UPSTREAM_HASH\" ]\n    ```", "```py\n    then\n    ```", "```py\n       echo -e \"${FINISHED}\"The current branch is up to date with origin/${TARGET}.\"${NO_COLOR}\"\n    ```", "```py\n         exit 0\n    ```", "```py\n    fi\n    ```", "```py\n# If there are new changes, we pull these changes.\ngit pull origin main;\n# We can now build and start the containers\ndocker compose up -d --build\nexit 0;\n```", "```py\nchmod +x docker-ec2-deploy.sh\n```", "```py\nSECRET_KEY=foo\nDATABASE_NAME=coredb\nDATABASE_USER=core\nDATABASE_PASSWORD=wCh29&HE&T83\nDATABASE_HOST=localhost\nDATABASE_PORT=5432\nPOSTGRES_USER=core\nPOSTGRES_PASSWORD=wCh29&HE&T83\nPOSTGRES_DB=coredb\nENV=PROD\nDJANGO_ALLOWED_HOSTS=EC2_IP_ADDRESS,EC2_INSTANCE_URL\n```"]