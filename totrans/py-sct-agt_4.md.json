["```py\nimport urllib.request\nimport urllib.parse\nimport json\n\n# 1\\. Build the URL.\nform = {\n    \"address\": \"333 waterside drive, norfolk, va, 23510\",\n    \"sensor\": \"false\",\n    #\"key\": Provide the API Key here if you're registered,\n}\nquery = urllib.parse.urlencode(form, safe=\",\")\nscheme_netloc_path = \"https://maps.googleapis.com/maps/api/geocode/json\"\nprint(scheme_netloc_path+\"?\"+query)\n\n# 2\\. Send the request; get the response.\nwith urllib.request.urlopen(scheme_netloc_path+\"?\"+query) as geocode:\n    print(geocode.info())\n    response= json.loads( geocode.read().decode(\"UTF-8\") )\n\n# 3\\. Process the response object.\nprint(response)\n```", "```py\nhttps://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=333+waterside+drive,+norfolk,+va,+23510\n\nContent-Type: application/json; charset=UTF-8\nDate: Sun, 13 Jul 2014 11:49:48 GMT\nExpires: Mon, 14 Jul 2014 11:49:48 GMT\nCache-Control: public, max-age=86400\nVary: Accept-Language\nAccess-Control-Allow-Origin: *\nServer: mafe\nX-XSS-Protection: 1; mode=block\nX-Frame-Options: SAMEORIGIN\nAlternate-Protocol: 443:quic\nConnection: close\n\n{'results': [{'address_components': [{'long_name': '333',\n                                      'short_name': '333',\n                                      'types': ['street_number']},\n                                     {'long_name': 'Waterside Festival Marketplace',\n                                      'short_name': 'Waterside Festival Marketplace',\n                                      'types': ['establishment']},\n                                     {'long_name': 'Waterside Drive',\n                                      'short_name': 'Waterside Dr',\n                                      'types': ['route']},\n                                     {'long_name': 'Norfolk',\n                                      'short_name': 'Norfolk',\n                                      'types': ['locality', 'political']},\n                                     {'long_name': 'Virginia',\n                                      'short_name': 'VA',\n                                      'types': ['administrative_area_level_1',\n                                                'political']},\n                                     {'long_name': 'United States',\n                                      'short_name': 'US',\n                                      'types': ['country', 'political']},\n                                     {'long_name': '23510',\n                                      'short_name': '23510',\n                                      'types': ['postal_code']}],\n              'formatted_address': '333 Waterside Drive, Waterside Festival Marketplace, Norfolk, VA 23510, USA',\n              'geometry': {'location': {'lat': 36.844305,\n                                        'lng': -76.29111999999999},\n                           'location_type': 'ROOFTOP',\n                           'viewport': {'northeast': {'lat': 36.84565398029149,\n                                                      'lng': -76.28977101970848},\n                                        'southwest': {'lat': 36.8429560197085,\n                                                      'lng': -76.29246898029149}}},\n              'types': ['street_address']}],\n 'status': 'OK'}\n{'lng': -76.29111999999999, 'lat': 36.844305}\n```", "```py\nprint( response['results'][0]['geometry']['location'])\n```", "```py\n{'lat': 36.844305, 'lng': -76.29111999999999}\n```", "```py\nform = {\n    \"address\": \"333 waterside drive, norfolk, va, 23510\",\n    \"sensor\": \"false\",\n    #\"key\": Provide the API Key here if you're registered,\n}\n```", "```py\nimport urllib.request\nimport urllib.parse\nimport json\n\n# 1\\. Build the URL.\nform = {\n    \"latlng\": \"36.844305,-76.29112\",\n    \"sensor\": \"false\",\n    #\"key\": Provide the API Key here if you're registered ,\n}\nquery = urllib.parse.urlencode(form, safe=\",\")\nscheme_netloc_path = \"https://maps.googleapis.com/maps/api/geocode/json\"\nprint(scheme_netloc_path+\"?\"+query)\n\n# 2\\.  Send the request; get the response\nwith urllib.request.urlopen(scheme_netloc_path+\"?\"+query) as geocode:\n    print(geocode.info())\n    response= json.loads( geocode.read().decode(\"UTF-8\") )\n\n# 3\\. Process the response object.\nfor alt in response['results']:\n    print(alt['types'], alt['formatted_address'])\n```", "```py\n['street_address'] 333 Waterside Drive, Waterside Festival Marketplace, Norfolk, VA 23510, USA\n['postal_code'] Norfolk, VA 23510, USA\n['locality', 'political'] Norfolk, VA, USA\n['administrative_area_level_1', 'political'] Virginia, USA\n['country', 'political'] United States\n```", "```py\nfrom math import radians, sin, cos, sqrt, asin\n\nMI= 3959\nNM= 3440\nKM= 6371\n\ndef haversine( point1, point2, R=MI ):\n    \"\"\"Distance between points.\n    point1 and point2 are two-tuples of latitude and longitude.\n    R is radius, R=MI computes in miles.\n    \"\"\"\n    lat_1, lon_1 = point1\n    lat_2, lon_2 = point2\n\n    Δ_lat = radians(lat_2 - lat_1)\n    Δ_lon = radians(lon_2 - lon_1)\n    lat_1 = radians(lat_1)\n    lat_2 = radians(lat_2)\n\n    a = sin(Δ_lat/2)**2 + cos(lat_1)*cos(lat_2)*sin(Δ_lon/2)**2\n    c = 2*asin(sqrt(a))\n\n    return R * c\n```", "```py\n>>> from ch_4_ex_3 import haversine\n>>> round(haversine((36.12, -86.67), (33.94, -118.40), R=6372.8), 5)\n2887.25995\n```", "```py\n    def geocode( address ):\n    ...  The previous processing ... \n    loc_dict= [r['geometry']['location'] for r in response['results']]\n    loc_pairs= [(l['lat'],l['lng']) for l in loc_dict]\n    return loc_pairs\n```", "```py\nbase = geocode( \"333 Waterside, Norfolk, VA, 23510\" )[0]\nloc1 = geocode( \"456 Granby St, Norfolk, VA\" )[0]\nloc2 = geocode( \"111 W Tazewell, Norfolk, VA\" )[0]\n```", "```py\nprint(\"Base\", base)\nprint(\"Loc1\", loc1, haversine(base, loc1))\nprint(\"Loc2\", loc2, haversine(base, loc2))\n```", "```py\nBase (36.8443027, -76.2910835)\nLoc1 (36.8525159, -76.2890381) 0.578671972401055\nLoc2 (36.8493341, -76.291527) 0.3485214316218753\n```", "```py\n>>> string.ascii_uppercase.replace(\"O\",\"\").replace(\"I\",\"\")\n'ABCDEFGHJKLMNPQRSTUVWXYZ'\n```", "```py\n>>> divmod(38+90,15)\n(8, 8)\n```", "```py\n>>> divmod( -76+180, 15 )\n(6, 14)\n```", "```py\ndef ll_2_georef( lat, lon ):\n    f_lat, f_lon = lat+90, lon+180\n    lat_0, lat_1 = divmod( int(f_lat), 15 )\n    lon_0, lon_1 = divmod( int(f_lon), 15 )\n    lat_m, lon_m = 6000*(f_lat-int(f_lat)), 6000*(f_lon-int(f_lon))\n    return \"{lon_0}{lat_0}{lon_1}{lat_1}{lon_m:04d}{lat_m:04d}\".format(\n        lon_0= georef_uppercase[lon_0],\n        lat_0= georef_uppercase[lat_0],\n        lon_1= georef_uppercase[lon_1],\n        lat_1= georef_uppercase[lat_1],\n        lon_m= int(lon_m),\n        lat_m= int(lat_m),\n    ) \n```", "```py\nlat, lon = 36+50.63/60, -(76+17.49/60)\nprint(lat, lon)\nprint(ll_2_georef(lat, lon))\n```", "```py\n36.843833333333336 -76.2915\nGJPG42515063\n```", "```py\ndef georef_2_ll( grid ):\n    lon_0, lat_0, lon_1, lat_1= grid[:4]\n    rest= grid[4:]\n    pos= len(rest)//2\n    if pos:\n        scale= { 4: 100, 3: 10, 2: 1 }[pos]\n        lon_frac, lat_frac = float(rest[:pos])/scale, float(rest[pos:])/scale\n    else:\n        lon_frac, lat_frac = 0, 0\n    lat= georef_uppercase.find(lat_0)*15+georef_uppercase.find(lat_1)+lat_frac/60\n    lon= georef_uppercase.find(lon_0)*15+georef_uppercase.find(lon_1)+lon_frac/60\n    return lat-90, lon-180\n```", "```py\n>>> float(\"5063\")/100\n50.63\n```", "```py\nprint( georef_2_ll( \"GJPG425506\" ) )\n```", "```py\n(36.843333333333334, -76.29166666666667)\n```", "```py\ndef ll_2_mh( lat, lon ):\n    def let_num( v ):\n        l, n = divmod( int(v), 10 )\n        return string.ascii_uppercase[l], string.digits[n]\n    f_lat= lat+90\n    f_lon= (lon+180)/2\n    y0, y1 = let_num( f_lat )\n    x0, x1 = let_num( f_lon )\n    f_lat= 240*(f_lat-int(f_lat))\n    f_lon= 240*(f_lon-int(f_lon))\n    y2, y3 = let_num( f_lat )\n    x2, x3 = let_num( f_lon )\n    f_lat= 240*(f_lat-int(f_lat))\n    f_lon= 240*(f_lon-int(f_lon))\n    y4, y5 = let_num( f_lat )\n    x4, x5 = let_num( f_lon )\n    return \"\".join( [\n        x0, y0, x1, y1, x2, y2, x3, y3, x4, y4, x5, y5 ] )\n```", "```py\n>>> f_lat= 36.84383\n>>> 240*(f_lat-int(f_lat))\n202.51919999999927\n>>> 240*.84383\n202.51919999999998\n```", "```py\nlat, lon = 36+50.63/60, -(76+17.49/60)\nprint( lat, lon )\nprint( ll_2_mh( lat, lon ) )\n```", "```py\n36.843833333333336 -76.28333333333333\nFM16UU52AM44\n```", "```py\ndef mh_2_ll( grid ):\n    lon= grid[0::2] # even positions\n    lat= grid[1::2] # odd positions\n    assert len(lon) == len(lat)\n    # Lookups will alternate letters and digits\n    decode = [ string.ascii_uppercase, string.digits,\n              string.ascii_uppercase, string.digits,\n              string.ascii_uppercase, string.digits,\n              ]\n    lons= [ lookup.find(char.upper()) for char, lookup in zip( lon, decode ) ]\n    lats= [ lookup.find(char.upper()) for char, lookup in zip( lat, decode ) ]\n    weights = [ 10.0, 1.0,\n               1/24, 1/240,\n               1/240/24, 1/240/240, ]\n    lon = sum( w*d for w,d in zip(lons, weights) )\n    lat = sum( w*d for w,d in zip(lats, weights) )\n    return lat-90, 2*lon-180\n```", "```py\n[(5, 10.0), (1, 1.0), (20, 0.0416), \n(6, 0.00416), (0, 0.00017361), \n(0, 1.7361e-05)]\n```", "```py\n[50.0, 1.0, 0.832, 0.024959999999999996, 0.0, 0.0]\n```", "```py\nprint( mh_2_ll( \"FM16UU62\" ) )\n```", "```py\n(36.84166666666667, -76.28333333333333)\n```", "```py\n>>> nac_uppercase= \"0123456789BCDFGHJKLMNPQRSTVWXZ\"\n>>> len(nac_uppercase)\n30\n>>> nac_uppercase[10]\n'B'\n>>> nac_uppercase.find('B')\n10\n```", "```py\ndef ll_2_nac( lat, lon ):\n    f_lon= (lon+180)/360\n    x0 = int(   f_lon*30)\n    x1 = int((  f_lon*30-x0)*30)\n    x2 = int((( f_lon*30-x0)*30-x1)*30)\n    x3 = int(.5+(((f_lon*30-x0)*30-x1)*30-x2)*30)\n\n    f_lat= (lat+90)/180\n    y0 = int(   f_lat*30 )\n    y1 = int((  f_lat*30-y0)*30)\n    y2 = int((( f_lat*30-y0)*30-y1)*30)\n    y3 = int(0.5+(((f_lat*30-y0)*30-y1)*30-y2)*30)\n\n    print( x0, x1, x2, x3, y0, y1, y2, y3 )\n    return \"\".join( [\n        nac_uppercase[x0], nac_uppercase[x1], \n        nac_uppercase[x2], nac_uppercase[x3],\n        \" \",\n        nac_uppercase[y0], nac_uppercase[y1], \n        nac_uppercase[y2], nac_uppercase[y3],\n    ])\n```", "```py\n>>> lon= -151.3947\n>>> f_lon= (lon+180)/360\n>>> f_lon\n0.07945916666666666\n>>> x0 = int(f_lon*30)  \n>>> x0\n2\n```", "```py\n>>> x1 = int((f_lon*30-x0)*30)\n>>> x1\n11\n```", "```py\n>>> x2 = int((( f_lon*30-x0)*30-x1)*30)\n>>> x2\n15\n>>> x3 = int(0.5+(((f_lon*30-x0)*30-x1)*30-x2)*30)\n>>> x3\n12 \n```", "```py\n    lat, lon = 43.6508, -151.3947\n    print( ll_2_nac( lat, lon ) )\n```", "```py\n    2CHD Q87M\n```", "```py\ndef nac_2_ll( grid ):\n    X, Y = grid[:4], grid[5:]\n    x = [nac_uppercase.find(c) for c in X]\n    y = [nac_uppercase.find(c) for c in Y]\n    lon = (x[0]/30+x[1]/30**2+x[2]/30**3+x[3]/30**4)*360-180\n    lat = (y[0]/30+y[1]/30**2+y[2]/30**3+y[3]/30**4)*180-90\n    return lat, lon\n```", "```py\n(x[0]/30+x[1]/30**2+x[2]/30**3+x[3]/30**4)\n```", "```py\nprint( nac_2_ll( \"2CHD Q87M\" ) )\n```", "```py\n(43.650888888888886, -151.39466666666667)\n```", "```py\nsome_place = { 'name': 'Secret Base', 'address': '333 Waterside Drive' }\n```", "```py\nsome_place['lat']= 36.844305\nsome_place['lng']= -76.29112\n```", "```py\nclass Restaurant:\n    def __init__(self, name, address):\n        self.name= name\n        self.address= address\n```", "```py\nsome_place= Restaurant( name='Secret Base', address='333 Waterside Drive' )\n```", "```py\nsome_place.lat= 36.844305\nsome_place.lng= -76.29112\n```", "```py\nfrom types import SimpleNamespace\nsome_place= SimpleNamespace( name='Secret Base', address='333 Waterside Drive' )\n```", "```py\nsome_place.lat= 36.844305\nsome_place.lng= -76.29112\n```", "```py\n>>> SimpleNamespace( **{'name': 'Secret Base', 'address': '333 Waterside Drive'} )\nnamespace(address='333 Waterside Drive', name='Secret Base')\n```", "```py\nsudo easy_install-3.3 beautifulsoup4 \n\n```", "```py\nscheme_host= \"http://healthspace.com\"\ndef get_food_list_by_name():\n    path= \"/Clients/VDH/Norfolk/Norolk_Website.nsf/Food-List-ByName\"\n    form = {\n        \"OpenView\": \"\",\n        \"RestrictToCategory\": \"FAA4E68B1BBBB48F008D02BF09DD656F\",\n        \"count\": \"400\",\n        \"start\": \"1\",\n    }\n    query= urllib.parse.urlencode( form )\n    with urllib.request.urlopen(scheme_host + path + \"?\" + query) as data:\n        soup= BeautifulSoup( data.read() )\n    return soup\n```", "```py\ndef food_table_iter( soup ):\n    \"\"\"Columns are 'Name', '', 'Facility Location', 'Last Inspection', \n    Plus an unnamed column with a RestrictToCategory key\n    \"\"\"\n    table= soup.html.body.table\n    for row in table.find_all(\"tr\"):\n        columns = [ td.text.strip() for td in row.find_all(\"td\") ]\n        for td in row.find_all(\"td\"):\n            if td.a:\n                url= urllib.parse.urlparse( td.a[\"href\"] )\n                form= urllib.parse.parse_qs( url.query )\n                columns.append( form['RestrictToCategory'][0] )\n        yield columns\n```", "```py\nfor row in  food_table_iter(get_food_list_by_name()):\n    print(row)\n```", "```py\n['Name', '', 'Facility Location', 'Last Inspection']\n[\"Todd's Refresher\", '', '150 W. Main St #100', '6-May-2014', '43F6BE8576FFC376852574CF005E3FC0']\n[\"'Chick-fil-A\", '', '1205 N Military Highway', '13-Jun-2014', '5BDECD68B879FA8C8525784E005B9926']\n```", "```py\ndef food_row_iter( table_iter ):\n    heading= next(table_iter)\n    assert ['Name', '', 'Facility Location', 'Last Inspection'] == heading\n    for row in table_iter:\n        yield SimpleNamespace(\n            name= row[0], address= row[2], last_inspection= row[3],\n            category= row[4]\n        ) \n```", "```py\nsoup= get_food_list_by_name()\nraw_columns=  food_table_iter(soup)\nfor business in food_row_iter( raw_column ):\n    print( business.name, business.address )\n```", "```py\ndef geocode_detail( business ):\n    scheme_netloc_path = \"https://maps.googleapis.com/maps/api/geocode/json\"\n    form = {\n        \"address\": business.address + \", Norfolk, VA\",\n        \"sensor\": \"false\",\n        #\"key\": An API Key, if you signed up for one,\n    }\n    query = urllib.parse.urlencode( form, safe=\",\" )\n    with urllib.request.urlopen( scheme_netloc_path+\"?\"+query ) as geocode:\n        response= json.loads( geocode.read().decode(\"UTF-8\") )\n    lat_lon = response['results'][0]['geometry']['location']\n    business.latitude= lat_lon['lat']\n    business.longitude= lat_lon['lng']\n    return business\n```", "```py\ndef get_food_facility_history( category_key ):\n    url_detail= \"/Clients/VDH/Norfolk/Norolk_Website.nsf/Food-FacilityHistory\"\n    form = {\n        \"OpenView\": \"\",\n        \"RestrictToCategory\": category_key\n    }\n    query= urllib.parse.urlencode( form )\n    with urllib.request.urlopen(scheme_host + url_detail + \"?\" + query) as data:\n        soup= BeautifulSoup( data.read() )\n    return soup\n```", "```py\ndef inspection_detail( business ):\n    soup= get_food_facility_history( business.category )\n    business.name2= soup.body.h2.text.strip()\n    table= soup.body.table\n    for row in table.find_all(\"tr\"):\n        column = list( row.find_all( \"td\" ) )\n        name= column[0].text.strip()\n        value= column[1].text.strip()\n        setattr( business, vdh_detail_translate[name], value )\n    return business\n```", "```py\nvdh_detail_translate = {\n    'Phone Number:': 'phone_number',\n    'Facility Type:': 'facility_type',     '# of Priority Foundation Items on Last Inspection:':\n        'priority_foundation_items',\n    '# of Priority Items on Last Inspection:': 'priority_items',\n    '# of Core Items on Last Inspection:': 'core_items',\n    '# of Critical Violations on Last Inspection:': 'critical_items',\n    '# of Non-Critical Violations on Last Inspection:': 'non_critical_items',\n}\n```", "```py\nsetattr( business, vdh_detail_translate[name], value )\n```", "```py\ndef choice_iter():\n    base= SimpleNamespace( address= '333 Waterside Drive' )\n    geocode_detail( base )\n    print( base ) # latitude= 36.844305, longitude= -76.29111999999999 )\n    soup= get_food_list_by_name()\n    for row in food_row_iter( food_table_iter( soup ) ):\n        geocode_detail( row )\n        inspection_detail( row )\n        row.distance= haversine(\n            (row.latitude, row.longitude),\n            (base.latitude, base.longitude) )\n        yield row\n```", "```py\nnamespace(address='333 Waterside Drive', latitude=36.844305, longitude=-76.29111999999999)\n```", "```py\nfor business in choice_iter():\n    if business.distance > .75: continue\n    if business.priority_foundation_items > 1: continue\n    if business.priority_items > 1: continue\n    if business.core_items > 1: continue\n    print( business )\n```", "```py\ndef get_chicago_json():\n    scheme_netloc_path= \"https://data.cityofchicago.org/api/views/4ijn-s7e5/rows.json\"\n    form = {\n        \"accessType\": \"DOWNLOAD\",\n        \"$where\": \"inspection_date>2014-01-01\",\n    }\n    query= urllib.parse.urlencode(form)\n    with urllib.request.urlopen( scheme_netloc_path+\"?\"+query ) as data:\n        with open(\"chicago_data.json\",\"w\") as output:\n            output.write( data.read() )\n```", "```py\ndef food_row_iter():\n    with open( \"chicago_data.json\", encoding=\"UTF-8\" ) as data_file:\n        inspections = json.load( data_file )\n    headings = [item['fieldName']\n        for item in inspections[\"meta\"][\"view\"][\"columns\"] ]\n    print( headings )\n    for row in inspections[\"data\"]:\n        data= SimpleNamespace(\n            **dict( zip( headings, row ) )\n        )\n        yield data\n```", "```py\ndef parse_details( business ):\n    business.latitude= float(business.latitude)\n    business.longitude= float(business.longitude)\n    if business.violations is None:\n        business.details = []\n    else:\n        business.details = [ v.strip() for v in business.violations.split(\"|\") ]\n    return business\n```", "```py\ndef choice_iter():\n    base= SimpleNamespace( address=\"3420 W GRACE ST\",\n        city= \"CHICAGO\", state=\"IL\", zip=\"60618\",\n        latitude=41.9503, longitude=-87.7138)\n    for row in food_row_iter():\n        try:\n            parse_details( row )\n            row.distance= haversine(\n                (row.latitude, row.longitude),\n                (base.latitude, base.longitude) )\n            yield row\n        except TypeError:\n            pass\n            # print( \"problems with\", row.dba_name, row.address )\n```", "```py\nfor business in choice_iter():\n    if business.distance > .25: continue\n    if business.results == \"Fail\": continue\n    print( business.dba_name,\n        business.address, business.results,\n        len(business.details) ) \n```"]