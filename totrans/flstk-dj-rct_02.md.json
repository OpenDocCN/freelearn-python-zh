["```py\nxxxxx.yyyyy.zzzzz\n```", "```py\n{\n    \"alg\": \"RSA\",\n    \"typ\": \"JWT\"\n}\n```", "```py\n{\n  \"id\": \"d1397699-f37b-4de0-8e00-948fa8e9bf2c\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n```", "```py\nRSA(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  secret)\n```", "```py\ndjango-admin startapp core\n```", "```py\nfrom django.apps import AppConfig\nclass CoreConfig(AppConfig):\n   default_auto_field = 'django.db.models.BigAutoField'\n   name = 'core'\n   label = 'core'\n```", "```py\n# Application definition\nINSTALLED_APPS = [\n   'django.contrib.admin',\n   'django.contrib.auth',\n   'django.contrib.contenttypes',\n   'django.contrib.sessions',\n   'django.contrib.messages',\n   'django.contrib.staticfiles',\n   'core'\n]\n```", "```py\ncd core && django-admin startapp user\n```", "```py\n├── admin.py\n├── apps.py\n├── __init__.py\n├── migrations\n│   └── __init__.py\n├── models.py\n├── tests.py\n└── views.py\n```", "```py\nimport uuid\nfrom django.contrib.auth.models import AbstractBaseUser,\n    BaseUserManager, PermissionsMixin\nfrom django.core.exceptions import ObjectDoesNotExist\nfrom django.db import models\nfrom django.http import Http404\nclass User(AbstractBaseUser, PermissionsMixin):\n   public_id = models.UUIDField(db_index=True, unique=True,\n       default=uuid.uuid4, editable=False)\n   username = models.CharField(db_index=True,\n       max_length=255, unique=True)\n   first_name = models.CharField(max_length=255)\n   last_name = models.CharField(max_length=255)\n   email = models.EmailField(db_index=True, unique=True)\n   is_active = models.BooleanField(default=True)\n   is_superuser = models.BooleanField(default=False)\n   created = models.DateTimeField(auto_now=True)\n   updated = models.DateTimeField(auto_now_add=True)\n   USERNAME_FIELD = 'email'\n   REQUIRED_FIELDS = ['username']\n   objects = UserManager()\n   def __str__(self):\n       return f\"{self.email}\"\n   @property\n   def name(self):\n       return f\"{self.first_name} {self.last_name}\"\n```", "```py\nclass UserManager(BaseUserManager):\n   def get_object_by_public_id(self, public_id):\n       try:\n           instance = self.get(public_id=public_id)\n           return instance\n       except (ObjectDoesNotExist, ValueError, TypeError):\n           return Http404\n   def create_user(self, username, email, password=None,\n        **kwargs):\n       \"\"\"Create and return a `User` with an email, phone\n           number, username and password.\"\"\"\n       if username is None:\n           raise TypeError('Users must have a username.')\n       if email is None:\n           raise TypeError('Users must have an email.')\n       if password is None:\n           raise TypeError('User must have an email.')\n       user = self.model(username=username,\n           email=self.normalize_email(email), **kwargs)\n       user.set_password(password)\n       user.save(using=self._db)\n       return user\n   def create_superuser(self, username, email, password,\n       **kwargs):\n       \"\"\"\n       Create and return a `User` with superuser (admin)\n           permissions.\n       \"\"\"\n       if password is None:\n           raise TypeError('Superusers must have a\n           password.')\n       if email is None:\n           raise TypeError('Superusers must have an\n               email.')\n       if username is None:\n           raise TypeError('Superusers must have an\n           username.')\n       user = self.create_user(username, email, password,\n           **kwargs)\n       user.is_superuser = True\n       user.is_staff = True\n       user.save(using=self._db)\n       return user\n```", "```py\nfrom django.apps import AppConfig\nclass UserConfig(AppConfig):\n   default_auto_field = 'django.db.models.BigAutoField'\n   name = 'core.user'\n   label = 'core_user'\nLet's register the application now:\n   'core',\n   'core.user'\n]\n```", "```py\n...\n   'core',\n   'core.user'\n]\n```", "```py\nAUTH_USER_MODEL = 'core_user.User'\n```", "```py\npython manage.py makemigrations\n```", "```py\nMigrations for 'core_user':\n  core/user/migrations/0001_initial.py\n    - Create model User\n```", "```py\npython manage.py migrate\n```", "```py\npython manage.py shell\n```", "```py\nPython 3.10.1 (main, Dec 21 2021, 17:46:38) [GCC 9.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from core.user.models import User\n>>> data_user = {\n... \"email\": \"testuser@yopmail.com\",\n... \"username\": \"john-doe\",\n... \"password\": \"12345\",\n... \"first_name\": \"John\",\n... \"last_name\": \"Doe\"\n... }\n>>> user =  User.objects.create_user(**data_user)\nThe user is created in the database. Let's access some properties of the user object.\n>>> user.name\n'John Doe'\n>>> user.email\n'testuser@yopmail.com'\n>>> user.password\n'pbkdf2_sha256$320000$NxM7JZ0cQ0OtDzCVusgvV7$fM1WZp7QhHC3QEajnb Bjo5rBPKO+Q8ONhDFkCV/gwcI='\n```", "```py\npip install djangorestframework django-filter\n```", "```py\nDjango==4.0.1\npsycopg2-binary==2.9.3\ndjangorestframework==3.13.1\ndjango-filter==21.1\n```", "```py\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\n```", "```py\nfrom rest_framework import serializers\nfrom core.user.models import User\nclass UserSerializer(serializers.ModelSerializer):\n   id = serializers.UUIDField(source='public_id',\n       read_only=True, format='hex')\n   created = serializers.DateTimeField(read_only=True)\n   updated = serializers.DateTimeField(read_only=True)\n   class Meta:\n       model = User\n       fields = ['id', 'username', 'first_name',\n           'last_name', 'bio', 'avatar', 'email',\n           'is_active', 'created', 'updated']\n       read_only_field = ['is_active']\n```", "```py\nfrom rest_framework.permissions import AllowAny\nfrom rest_framework import viewsets\nfrom core.user.serializers import UserSerializer\nfrom core.user.models import User\nclass UserViewSet(viewsets.ModelViewSet):\n   http_method_names = ('patch', 'get')\n   permission_classes = (AllowAny,)\n   serializer_class = UserSerializer\n   def get_queryset(self):\n       if self.request.user.is_superuser:\n           return User.objects.all()\n       return User.objects.exclude(is_superuser=True)\n   def get_object(self):\n    obj =\n    User.objects.get_object_by_public_id(self.kwargs['pk'])\n       self.check_object_permissions(self.request, obj)\n       return obj\n```", "```py\nfrom rest_framework import routers\nfrom core.user.viewsets import UserViewSet\nrouter = routers.SimpleRouter()\n# ##################################################################### #\n# ################### USER                       ###################### #\n# ##################################################################### #\nrouter.register(r'user', UserViewSet, basename='user')\nurlpatterns = [\n   *router.urls,\n]\n```", "```py\npython manage.py runserver\n```", "```py\nfrom rest_framework.permissions import IsAuthenticated\n...\nclass UserViewSet(viewsets.ModelViewSet):\n   http_method_names = ('patch', 'get')\n   permission_classes = (IsAuthenticated,)\n   serializer_class = UserSerializer\n...\n```", "```py\npip install djangorestframework-simplejwt\n```", "```py\n   …\n   # external packages apps\n   'rest_framework',\n   'rest_framework_simplejwt',\n   'core',\n   'core.user'\n]\n...\nREST_FRAMEWORK = {\n   'DEFAULT_AUTHENTICATION_CLASSES': (\n       'rest_framework_simplejwt.authentication\n           .JWTAuthentication',\n   ),\n   'DEFAULT_FILTER_BACKENDS':\n     ['django_filters.rest_framework.DjangoFilterBackend'],\n}\n```", "```py\ncd core && django-admin startapp auth\n```", "```py\nfrom django.apps import AppConfig\nclass AuthConfig(AppConfig):\n   default_auto_field = 'django.db.models.BigAutoField'\n   name = 'core.auth'\n   label = 'core_auth'\nAnd adding the new application to INSTALLED_APPS:\n...\n'core',\n   'core.user',\n   'core.auth'\n]\n...\n```", "```py\n├── apps.py\n├── __init__.py\n├── migrations\n│   ├── __init__.py\n├── serializers\n│   └── __init__.py\n├── tests.py\n├── viewsets\n│   └── __init__.py\n└── views.py\n```", "```py\nfrom rest_framework import serializers\nfrom core.user.serializers import UserSerializer\nfrom core.user.models import User\nclass RegisterSerializer(UserSerializer):\n   \"\"\"\n   Registration serializer for requests and user creation\n   \"\"\"\n   # Making sure the password is at least 8 characters\n       long, and no longer than 128 and can't be read\n   # by the user\n   password = serializers.CharField(max_length=128,\n       min_length=8, write_only=True, required=True)\n   class Meta:\n       model = User\n       # List of all the fields that can be included in a\n           request or a response\n       fields = ['id', 'bio', 'avatar', 'email',\n           'username', 'first_name', 'last_name',\n           'password']\n   def create(self, validated_data):\n       # Use the `create_user` method we wrote earlier for\n           the UserManager to create a new user.\n       return User.objects.create_user(**validated_data)\n```", "```py\nfrom rest_framework.response import Response\nfrom rest_framework.viewsets import ViewSet\nfrom rest_framework.permissions import AllowAny\nfrom rest_framework import status\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom core.auth.serializers import RegisterSerializer\nclass RegisterViewSet(ViewSet):\n   serializer_class = RegisterSerializer\n   permission_classes = (AllowAny,)\n   http_method_names = ['post']\n   def create(self, request, *args, **kwargs):\n       serializer =\n           self.serializer_class(data=request.data)\n       serializer.is_valid(raise_exception=True)\n       user = serializer.save()\n       refresh = RefreshToken.for_user(user)\n       res = {\n           \"refresh\": str(refresh),\n           \"access\": str(refresh.access_token),\n       }\n       return Response({\n           \"user\": serializer.data,\n           \"refresh\": res[\"refresh\"],\n           \"token\": res[\"access\"]\n       }, status=status.HTTP_201_CREATED)\n```", "```py\n ...\n# ##################################################################### #\n# ################### AUTH                       ###################### #\n# ##################################################################### #\nrouter.register(r'auth/register', RegisterViewSet,\n    basename='auth-register')\n...\n```", "```py\n{\n    \"username\": \"mouse21\",\n    \"first_name\": \"Mickey\",\n    \"last_name\": \"Mouse\",\n    \"password\": \"12345678\",\n    \"email\": \"mouse@yopmail.com\"\n}\n```", "```py\nfrom rest_framework_simplejwt.serializers import\n  TokenObtainPairSerializer\nfrom rest_framework_simplejwt.settings import api_settings\nfrom django.contrib.auth.models import update_last_login\nfrom core.user.serializers import UserSerializer\nclass LoginSerializer(TokenObtainPairSerializer):\n   def validate(self, attrs):\n       data = super().validate(attrs)\n       refresh = self.get_token(self.user)\n       data['user'] = UserSerializer(self.user).data\n       data['refresh'] = str(refresh)\n       data['access'] = str(refresh.access_token)\n       if api_settings.UPDATE_LAST_LOGIN:\n           update_last_login(None, self.user)\n       return data\n```", "```py\nfrom .register import RegisterSerializer\nfrom .login import LoginSerializer\n```", "```py\nfrom rest_framework.response import Response\nfrom rest_framework.viewsets import ViewSet\nfrom rest_framework.permissions import AllowAny\nfrom rest_framework import status\nfrom rest_framework_simplejwt.exceptions import TokenError,\n    InvalidToken\nfrom core.auth.serializers import LoginSerializer\nclass LoginViewSet(ViewSet):\n   serializer_class = LoginSerializer\n   permission_classes = (AllowAny,)\n   http_method_names = ['post']\n   def create(self, request, *args, **kwargs):\n       serializer =\n           self.serializer_class(data=request.data)\n       try:\n           serializer.is_valid(raise_exception=True)\n       except TokenError as e:\n           raise InvalidToken(e.args[0])\n       return Response(serializer.validated_data,\n           status=status.HTTP_200_OK)\n```", "```py\nfrom .register import RegisterViewSet\nfrom .login import LoginViewSet\n```", "```py\n...\nfrom core.auth.viewsets import RegisterViewSet,\n    LoginViewSet\nrouter = routers.SimpleRouter()\n# ##################################################################### #\n# ################### AUTH                       ###################### #\n# ##################################################################### #\nrouter.register(r'auth/register', RegisterViewSet,\n    basename='auth-register')\nrouter.register(r'auth/login', LoginViewSet,\n    basename='auth-login')\n...\n```", "```py\n{\n    \"password\": \"12345678\",\n    \"email\": \"mouse@yopmail.com\"\n}\n```", "```py\nfrom rest_framework.response import Response\nfrom rest_framework_simplejwt.views import TokenRefreshView\nfrom rest_framework.permissions import AllowAny\nfrom rest_framework import status\nfrom rest_framework import viewsets\nfrom rest_framework_simplejwt.exceptions import TokenError,\n    InvalidToken\nclass RefreshViewSet(viewsets.ViewSet, TokenRefreshView):\n   permission_classes = (AllowAny,)\n   http_method_names = ['post']\n   def create(self, request, *args, **kwargs):\n       serializer = self.get_serializer(data=request.data)\n       try:\n           serializer.is_valid(raise_exception=True)\n       except TokenError as e:\n           raise InvalidToken(e.args[0])\n       return Response(serializer.validated_data,\n           status=status.HTTP_200_OK)\nNow add the class in the __init__.py file.\nfrom .register import RegisterViewSet\nfrom .login import LoginViewSet\nfrom .refresh import RefreshViewSet\n```", "```py\nfrom .register import RegisterViewSet\nfrom .login import LoginViewSet\nfrom .refresh import RefreshViewSet\n```", "```py\nfrom core.auth.viewsets import RegisterViewSet,\n    LoginViewSet, RefreshViewSet\n...\nrouter.register(r'auth/refresh', RefreshViewSet,\n    basename='auth-refresh')\n...\n```"]