["```py\nfrom tkinter import messagebox as mBox\n```", "```py\n# Display a Message Box\n# Callback function\ndef _msgBox():\n    mBox.showinfo('Python Message Info Box', 'A Python GUI created using tkinter:\\nThe year is 2015.')   \n\n# Add another Menu to the Menu Bar and an item\nhelpMenu = Menu(menuBar, tearoff=0)\nhelpMenu.add_command(label=\"About\", command=_msgBox)\n```", "```py\n# Display a Message Box\ndef _msgBox():\n#    mBox.showinfo('Python Message Info Box', 'A Python GUI \n#      created using tkinter:\\nThe year is 2015.')\n    mBox.showwarning('Python Message Warning Box', 'A Python GUI created using tkinter:\\nWarning: There might be a bug in this code.')\n```", "```py\n# Display a Message Box\ndef _msgBox():\n#    mBox.showinfo('Python Message Info Box', 'A Python GUI \n#      created using tkinter:\\nThe year is 2015.')\n#    mBox.showwarning('Python Message Warning Box', 'A Python GUI \n#      created using tkinter:\\nWarning: There might be a bug in \n#      this code.')\n    mBox.showerror('Python Message Error Box', 'A Python GUI created using tkinter:\\nError: Houston ~ we DO have a serious PROBLEM!')\n```", "```py\n# Display a Message Box\ndef _msgBox():\n    answer = mBox.askyesno(\"Python Message Dual Choice Box\", \"Are you sure you really wish to do this?\")\n    print(answer)\n```", "```py\nIf answer == True:\n    <do something>\n```", "```py\nfrom tkinter import messagebox as mBox\nmBox.showinfo('A Python GUI created using tkinter:\\nThe year is 2015')\n```", "```py\nmBox.showinfo('', 'A Python GUI created using tkinter:\\nThe year is 2015')\n```", "```py\nfrom tkinter import messagebox as mBox\nfrom tkinter import Tk\nroot = Tk()\nroot.withdraw()\nmBox.showinfo('', 'A Python GUI created using tkinter:\\nThe year is 2015')\n```", "```py\nfrom tkinter import messagebox as mBox\nfrom tkinter import Tk\nroot = Tk()\nroot.withdraw()\nmBox.showinfo('This is a Title', 'A Python GUI created using tkinter:\\nThe year is 2015')\n```", "```py\nimport tkinter as tk\nwin = tk.Tk()               # Create instance\nwin.title(\"Python GUI\")     # Add a title\n```", "```py\n# Change the main windows icon\nwin.iconbitmap(r'C:\\Python34\\DLLs\\pyc.ico')\n```", "```py\n# Adding a Spinbox widget\nspin = Spinbox(monty, from_=0, to=10)\nspin.grid(column=0, row=2)\n```", "```py\nspin = Spinbox(monty, from_=0, to=10, width=5)\n```", "```py\nspin = Spinbox(monty, from_=0, to=10, width=5 , bd=8)\n```", "```py\n# Spinbox callback \ndef _spin():\n    value = spin.get()\n    print(value)\n    scr.insert(tk.INSERT, value + '\\n')\n\nspin = Spinbox(monty, from_=0, to=10, width=5, bd=8, command=_spin)\n```", "```py\n# Adding a Spinbox widget using a set of values\nspin = Spinbox(monty, values=(1, 2, 4, 42, 100), width=5, bd=8, command=_spin) \nspin.grid(column=0, row=2)\n```", "```py\n# Adding a second Spinbox widget \nspin = Spinbox(monty, values=(0, 50, 100), width=5, bd=20, command=_spin) \nspin.grid(column=1, row=2)\n```", "```py\nclass ToolTip(object):\n    def __init__(self, widget):\n        self.widget = widget\n        self.tipwindow = None\n        self.id = None\n        self.x = self.y = 0\n\n    def showtip(self, text):\n        \"Display text in tooltip window\"\n        self.text = text\n        if self.tipwindow or not self.text:\n            return\n        x, y, _cx, cy = self.widget.bbox(\"insert\")\n        x = x + self.widget.winfo_rootx() + 27\n        y = y + cy + self.widget.winfo_rooty() +27\n        self.tipwindow = tw = tk.Toplevel(self.widget)\n        tw.wm_overrideredirect(1)\n        tw.wm_geometry(\"+%d+%d\" % (x, y))\n\n        label = tk.Label(tw, text=self.text, justify=tk.LEFT,\n   background=\"#ffffe0\", relief=tk.SOLID, borderwidth=1,\n                      font=(\"tahoma\", \"8\", \"normal\"))\n\n        label.pack(ipadx=1)\n\n    def hidetip(self):\n        tw = self.tipwindow\n        self.tipwindow = None\n        if tw:\n            tw.destroy()\n\n#===========================================================\ndef createToolTip( widget, text):\n    toolTip = ToolTip(widget)\n    def enter(event):\n        toolTip.showtip(text)\n    def leave(event):\n        toolTip.hidetip()\n    widget.bind('<Enter>', enter)\n    widget.bind('<Leave>', leave)\n```", "```py\nclass AClass():\n    pass\ninstanceOfAClass = AClass()\nprint(instanceOfAClass)\n```", "```py\n# Add a Tooltip\ncreateToolTip(spin, 'This is a Spin control.')\n```", "```py\n# Using a scrolled Text control    \nscrolW  = 30; scrolH  =  3\nscr = scrolledtext.ScrolledText(monty, width=scrolW, height=scrolH, wrap=tk.WORD)\nscr.grid(column=0, row=3, sticky='WE', columnspan=3)\n\n# Add a Tooltip to the ScrolledText widget\ncreateToolTip(scr, 'This is a ScrolledText widget.')\n```", "```py\n# Add a Tooltip\ncreateToolTip(spin, 'This is a Spin control.')\n```", "```py\nclass ToolTip(object):\n    pass\n```", "```py\nclass ToolTip():\n    pass\n```", "```py\n# Tab Control introduced here --------------------------------\ntabControl = ttk.Notebook(win)          # Create Tab Control\n\ntab1 = ttk.Frame(tabControl)            # Create a tab \ntabControl.add(tab1, text='Tab 1')      # Add the tab\n\ntab2 = ttk.Frame(tabControl)            # Add a second tab\ntabControl.add(tab2, text='Tab 2')      # Make second tab visible\n\ntab3 = ttk.Frame(tabControl)            # Add a third tab\ntabControl.add(tab3, text='Tab 3')      # Make second tab visible\n\ntabControl.pack(expand=1, fill=\"both\")  # Pack to make visible\n# ~ Tab Control introduced here -------------------------------\n```", "```py\n# Tab Control 3 -------------------------------\ntab3 = tk.Frame(tab3, bg='blue')\ntab3.pack()\nfor orangeColor in range(2):\n    canvas = tk.Canvas(tab3, width=150, height=80, highlightthickness=0, bg='orange')\n    canvas.grid(row=orangeColor, column=orangeColor)\n```"]