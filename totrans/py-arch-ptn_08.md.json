["```py\nserver {\n\n    listen 80 default_server;\n\n    listen [::]:80 default_server;\n\n    error_log /dev/stdout;\n\n    access_log /dev/stdout;\n\n       root /opt/;\n\n    location /static/ {\n\n        autoindex on;\n\n        try_files $uri $uri/ =404;\n\n    }\n\n    location / {\n\n        proxy_set_header Host $host;\n\n        proxy_set_header X-Real-IP $remote_addr;\n\n         uwsgi_pass unix:///tmp/uwsgi.sock;\n\n         include uwsgi_params;\n\n    }\n\n} \n```", "```py\n listen 80 default_server;\n\n    listen [::]:80 default_server; \n```", "```py\n root /opt/;\n\n    location /static/ {\n\n        autoindex on;\n\n        try_files $uri $uri/ =404;\n\n    } \n```", "```py\n location / {\n\n       proxy_set_header Host $host;\n\n       proxy_set_header X-Real-IP $remote_addr;\n\n       include uwsgi_params;\n\n        uwsgi_pass unix:///tmp/uwsgi.sock;\n\n    } \n```", "```py\n proxy_set_header Host $host;\n\n       proxy_set_header X-Real-IP $remote_addr; \n```", "```py\nupstream uwsgibackends {\n\n  server unix:///tmp/uwsgi.sock;\n\n  server 192.168.1.117:8080;\n\n  server 10.0.0.6:8000;\n\n} \n```", "```py\nuwsgi_pass uwsgibackends; \n```", "```py\n access_log /dev/stdout;\n\n    error_log /dev/stdout; \n```", "```py\n error_log syslog:server=syslog_host:514;\n\n    access_log syslog:server=syslog_host:514,tag=nginx; \n```", "```py\n[uwsgi]\n\nchdir=/root/directory\n\nwsgi-file = webapplication/wsgi.py\n\nmaster=True\n\nsocket=/tmp/uwsgi.sock\n\nvacuum=True\n\nprocesses=1\n\nmax-requests=5000\n\n# Used to send commands to uWSGI\n\nmaster-fifo=/tmp/uwsgi-fifo \n```", "```py\nchdir=/root/directory \n```", "```py\ndef application(environ, start_response):\n\n    start_response('200 OK', [('Content-Type', 'text/plain')])\n\n    return [b'Body of the response\\n'] \n```", "```py\n>>> 'ca침칩n'.encode('utf-8')\n\nb'ca\\xc3\\xb1\\xc3\\xb3n' \n\n>>> b'ca\\xc3\\xb1\\xc3\\xb3n'.decode('utf-8')\n\n'ca침칩n' \n```", "```py\n>>> def mygenerator():\n\n...   yield 1\n\n...   yield 2\n\n...   yield 3\n\n>>> for i in mygenerator():\n\n...   print(i)\n\n...\n\n1\n\n2\n\n3 \n```", "```py\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"webapplication.settings\")\n\napplication = get_wsgi_application() \n```", "```py\nsocket=/tmp/uwsgi.sock\n\nvacuum=True \n```", "```py\nmaster=True\n\nprocesses=1 \n```", "```py\nmax-requests=5000\n\n# Used to send commands to uWSGI\n\nmaster-fifo=/tmp/uwsgi-fifo \n```", "```py\n# Used to send commands to uWSGI\n\nmaster-fifo=/tmp/uwsgi-fifo \n```", "```py\n# Generate a graceful reload\n\necho r >> /tmp/uwsgi-fifo\n\n# Graceful stop of the server\n\necho q >> /tmp/uwsgi-fifo \n```", "```py\nfrom django.urls import path\n\nfrom views import first_view, second_view\n\nurlpatterns = [\n\n    path('example/', first_view)\n\n    path('example/<int:parameter>/<slug:other_parameter>', second_view)\n\n] \n```", "```py\nfrom django.urls import re_path\n\nurlpatterns = [\n\n    re_path('example/(?P<parameter>\\d+)/', view)\n\n] \n```", "```py\nfrom django.urls import path\n\nurlpatterns = [\n\n    path('example/<str:parameter>/', first_view)\n\n    path('example/<int:parameter>/', second_view)\n\n] \n```", "```py\ndef example_view(request):\n\n    # create an empty form\n\n    form_content = Form()\n\n    if request.method == 'POST':\n\n        # Obtain the value\n\n           value = request.POST['my-value']\n\n           if validate(value):\n\n               # Perform actions based on the value\n\n            do_stuff()\n\n            content = 'Thanks for your answer'\n\n        else:\n\n            content = 'Sorry, this is incorrect' + form_content\n\n    elif request.method == 'GET':\n\n        content = form_content\n\n    return render(content) \n```", "```py\ndef display_form(form_content, message=''):\n\n    content = message + form_content\n\n    return content\n\ndef process_data(parameters, form_content):\n\n    # Obtain the value\n\n       if validate(parameters):\n\n           # Perform actions based on the value\n\n        do_stuff()\n\n        content = 'Thanks for your answer'\n\n    else:\n\n        message = 'Sorry, this is incorrect'\n\n        content = display_form(form_content , message)\n\n    return content\n\ndef example_view(request):\n\n    # create an empty form\n\n    form_content = Form()\n\n    if request.method == 'POST':\n\n        content = process_data(request.POST, form_content)\n\n    elif request.method == 'GET':\n\n        content = display_form(form_content)\n\n    return render(content) \n```", "```py\n    /example?param1=1&param2=text&param1=2 \n    ```", "```py\n    <QueryDict: {'param1': ['1', '2'], 'param2': ['text']}> \n    ```", "```py\n    >>> request.GET['param1']\n\n    2\n\n    >>> request.GET['param2']\n\n    text \n    ```", "```py\n>>> request.GET.getlist('param1')\n\n['1', '2'] \n```", "```py\nfrom django.http import HttpResponse\n\ndef my_view(request):\n\n    return HttpResponse(content=\"example text\", status_code=200) \n```", "```py\nresponse = HttpResponse()\n\nresponse.write('First part of the body')\n\nresponse.write('Second part of the body') \n```", "```py\nbody= ['Multiple ', 'data ', 'that ', 'will ', 'be ', 'composed']\n\nresponse = HttpResponse(content=body) \n```", "```py\nfrom django.http import HttpResponse\n\nfrom http import HTTPStatus\n\ndef my_view(request):\n\n    return HttpResponse(content=\"example text\", status_code=HTTPStatus.OK) \n```", "```py\nHttpResponse(content=img_data, content_type=\"image/png\") \n```", "```py\nheaders = {\n\n    'Content-Type': 'application/pdf',\n\n    'Content-Disposition': 'attachment; filename=\"report.pdf\"',\n\n}\n\nresponse = HttpResponse(content=img_data, headers=header) \n```", "```py\nresponse['Content-Disposition'] = 'attachment; filename=\"myreport.pdf\"'\n\ndel response['Content-Disposition'] \n```", "```py\nfrom django.http import JsonResponse\n\nresponse = JsonResponse({'example': 1, 'key': 'body'}) \n```", "```py\nfrom django.http import FileResponse\n\nfile_object = open('report.pdf', 'rb')\n\nresponse = FileResponse(file_object, is_attachment=True) \n```", "```py\nfrom django.shortcuts import render\n\ndef my_view(request):\n\n    ...\n\n    return render(request, 'mytemplate.html') \n```", "```py\ndef example_middleware(get_response):\n\n    # The example_middleware wraps the actual middleware\n\n    def middleware(request):\n\n        # Any code to be executed before the view\n\n        # should be located here\n\n        response = get_response(request)\n\n        # Code to be executed after the view\n\n        # should be located here\n\n        return response\n\n    return middleware \n```", "```py\nchain = middleware_one(middleware_two(my_view))\n\nfinal_response = chain(request) \n```", "```py\nfrom django.db import models\n\nclass Usr(models.Model):\n\n    username = models.CharField(max_length=50)\n\nclass Micropost(models.Model):\n\n    user = models.ForeignKey(Usr, on_delete=models.CASCADE,\n\n                             related_name='owner')\n\n    text = models.CharField(max_length=300)\n\n    referenced = models.ForeignKey(Usr, null=True,\n\n                                   on_delete=models.CASCADE,\n\n                                   related_name='reference')\n\n    timestamp = models.DateTimeField(auto_now=True \n```", "```py\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n\n    path('users/<username>/collection', views.MicropostsListView.as_view(),\n\n         name='user-collection'),\n\n    path('users/<username>/collection/<pk>', views.MicropostView.as_view(),\n\n         name='micropost-detail'),\n\n] \n```", "```py\n/api/users/<username>/collection\n\n/api/users/<username>/collection/<micropost_id> \n```", "```py\nfrom rest_framework.generics import ListCreateAPIView\n\nfrom .models import Micropost, Usr\n\nfrom .serializers import MicropostSerializer\n\nclass MicropostsListView(ListCreateAPIView):\n\n    serializer_class = MicropostSerializer\n\n    def get_queryset(self):\n\n        result = Micropost.objects.filter(\n\n             user__username=self.kwargs['username']\n\n        )\n\n        return result\n\n    def perform_create(self, serializer):\n\n        user = Usr.objects.get(username=self.kwargs['username'])\n\n        serializer.save(user=user) \n```", "```py\n def get_queryset(self):\n\n        result = Micropost.objects.filter(\n\n             user__username=self.kwargs['username']\n\n        )\n\n        return result \n```", "```py\n def perform_create(self, serializer):\n\n        user = Usr.objects.get(username=self.kwargs['username'])\n\n        serializer.save(user=user) \n```", "```py\nfrom rest_framework.generics import ListCreateAPIView\n\nfrom .models import Micropost, Usr\n\nfrom .serializers import MicropostSerializer\n\nclass MicropostView(RetrieveUpdateDestroyAPIView):\n\n    serializer_class = MicropostSerializer\n\n    def get_queryset(self):\n\n        result = Micropost.objects.filter(\n\n            user__username=self.kwargs['username']\n\n        )\n\n        return result \n```", "```py\nfrom .models import Micropost, Usr\n\nfrom rest_framework import serializers\n\nclass MicropostSerializer(serializers.ModelSerializer):\n\n    href = MicropostHyperlink(source='*', read_only=True)\n\n    text = serializers.CharField(max_length=255)\n\n    referenced = serializers.SlugRelatedField(queryset=Usr.objects.all(),\n\n                                             slug_field='username',\n\n                                             allow_null=True)\n\n    user = serializers.CharField(source='user.username', read_only=True)\n\n    class Meta:\n\n        model = Micropost\n\n        fields = ['href', 'id', 'text', 'referenced', 'timestamp', 'user'] \n```", "```py\nfrom .models import Micropost, Usr\n\nfrom rest_framework import serializers\n\nfrom rest_framework.reverse import reverse\n\nclass MicropostHyperlink(serializers.HyperlinkedRelatedField):\n\n    view_name = 'micropost-detail'\n\n    def get_url(self, obj, view_name, request, format):\n\n        url_kwargs = {\n\n            'pk': obj.pk,\n\n            'username': obj.user.username,\n\n        }\n\n        result = reverse(view_name, kwargs=url_kwargs, request=request,\n\n                         format=format)\n\n        return result\n\nclass MicropostSerializer(serializers.ModelSerializer):\n\n    href = MicropostHyperlink(source='*', read_only=True)\n\n    ... \n```"]