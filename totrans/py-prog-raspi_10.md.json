["```py\nsudo apt-get update sudo apt-get install alsa-utils mplayer python3-numpy\n\n```", "```py\n aplay -l **** List of PLAYBACK Hardware Devices **** card 0: ALSA [bcm2835 ALSA], device 0: bcm2835 \n         ALSA [bcm2835 ALSA] Subdevices: 8/8 Subdevice #0: subdevice #0 Subdevice #1: subdevice #1 Subdevice #2: subdevice #2 Subdevice #3: subdevice #3 Subdevice #4: subdevice #4 Subdevice #5: subdevice #5 Subdevice #6: subdevice #6 Subdevice #7: subdevice #7 card 0: ALSA [bcm2835 ALSA], device 1: bcm2835 \n         ALSA [bcm2835 IEC958/HDMI] Subdevices: 1/1 Subdevice #0: subdevice #0 card 1: Set [C-Media USB Headphone Set], \n         device 0: USB Audio [USB Audio] Subdevices: 1/1 Subdevice #0: subdevice #0\n\n```", "```py\n nano ~/.asoundrc\n\n```", "```py\n       pcm.!default {\n               type hw\n               card 1\n       }\n\n       ctl.!default {\n               type hw\n               card 1\n       }\n\n```", "```py\n aplay test.wav\n\n```", "```py\n arecord -f dat -D plughw:2 \n         --duration=10~/home/pi/rectest.wav\n\n```", "```py\n aplay rectest.wav\n\n```", "```py\n wget \n       https://static.houndify.com/sdks/python\n       /0.5.0/houndify_python3_sdk_0.5.0.tar.gz\n\n```", "```py\n tar -xvzf houndify_python3_sdk_0.5.0.tar.gzrm \n       houndify_python3_sdk_0.5.0.tar.gz\n\n```", "```py\n              client.setLocation(37.778724, -37.778724)\n\n```", "```py\n              cd houndify_python3_sdk_0.5.0/ \n              ./sample_wave.py <client_id> <client_key> \n              test_audio/whatistheweatherthere_nb.wav\n\n```", "```py\n              src=\"img/>              templates.min.js\"></script>'}}, 'TemplateName': \n              'VerticalTemplateList', 'AutoListen': False, \n              'WeatherCommandKind': 'ShowWeatherCurrentConditions', \n              'SpokenResponseLong': 'The weather is 45 degrees and\n              mostly clear in San Francisco.',\n\n```", "```py\n       { \n           \"action\": \"turn_light_on\"\n       }\n\n```", "```py\n       from gpiozero import OutputDevice\n\n```", "```py\n       class MyListener(houndify.HoundListener): \n         def __init__(self): \n           self.light = OutputDevice(3)\n\n```", "```py\n       def onFinalResponse(self, response): \n         if \"AllResults\" in response: \n           result = response[\"AllResults\"][0] \n           if result['CommandKind'] == \"ClientMatchCommand\": \n             if result[\"Result\"][\"action\"] == \"turn_light_on\": \n               self.light.on() \n             elif result[\"Result\"][\"action\"] == \"turn_light_off\": \n               self.light.off()\n\n```", "```py\n nano speech.sh\n\n```", "```py\n             #!/bin/bash \n say() { local IFS=+;/usr/bin/mplayer\n -ao alsa -really-quiet -noconsolecontrols \n \"http://translate.google.com/translate_tts?\n ie=UTF-8&client=tw-ob&q=$*&tl=En-us\"; } \n say $*\n\n```", "```py\n              chmod u+x speech.sh\n\n```", "```py\n              ~/speech.sh \"Hello, World!\"\n\n```", "```py\n              if result[\"Result\"][\"action\"] == \"turn_light_on\": \n                self.light.on() \n                os.system(\"~/speech.sh Turning Lights On\") \n              elif result[\"Result\"][\"action\"] == \"turn_light_off\": \n                self.light.off() \n                os.system(\"~/speech.sh Turning Lights Off\")\n\n```", "```py\nchmod +x voice_assistant_initial.py\n\n```", "```py\n./voice_assistant.py turn_lights_on.wav\n\n```", "```py\n       from gpiozero import Button, OutputDevice\n\n```", "```py\n       def trigger_function(): \n         os.system(\"aplay -D plughw:1,0 /home/pi/beep.wav\") \n         os.system(\"arecord -D plughw:2,0 -f S16_LE -d 5 \n         /home/pi/query.wav\") \n         os.system(\"aplay -D plughw:1,0 /home/pi/beep.wav\") \n         call_houndify()\n\n```", "```py\n       button = Button(4) \n       button.when_released = trigger_function\n\n```", "```py\nWhat is the weather in San Francisco?What is the weather in Santa Clara, California?Turn Lights OnTurn Lights Off\n\n```", "```py\nsudo pip3 install flask\n\n```", "```py\n       <table> \n           <tr> \n               <td> \n                   <input type=\"checkbox\" name=\"relay\" \n                    value=\"relay_0\">Motor</input> </br> \n               </td> \n           <td> \n               <input type=\"radio\" name=\"state_0\" value=\"On\">On\n               </input> \n                   <input type=\"radio\" name=\"state_0\" value=\"Off\" \n                   checked=\"checked\">Off</input>\n           </td> \n       </table>\n\n```", "```py\n       <td> \n          <input type=\"checkbox\" name=\"relay\" \n          value=\"relay_0\">Motor</input> </br> \n       </td> \n       <td> \n          <input type=\"radio\" name=\"state_0\" value=\"On\">On\n          </input> \n           <input type=\"radio\" name=\"state_0\" value=\"Off\" \n           checked=\"checked\">Off</input>   \n       </td>\n\n```", "```py\n       <form action=\"/energize\" method=\"POST\"> \n          <table> \n          . \n          . \n          . \n          </table> \n       </form>\n\n```", "```py\n       <input type=\"submit\" value=\"Energize\" class=\"button\">\n\n```", "```py\n       NUM_APPLIANCES = 4 \n\n       relay_index = [2, 3, 4, 14]\n\n```", "```py\n       for i in range(NUM_APPLIANCES): \n               devices.append(OutputDevice(relay_index[i], \n                                      active_high=False))\n\n```", "```py\n       relays = request.form.getlist(\"relay\") \n       for idx in range(0, NUM_APPLIANCES): \n           device_name = \"relay_\" + str(idx) \n           if device_name in relays: \n               device_state = \"state_\" + str(idx) \n               state = request.form.get(device_state) \n               print(state) \n               if state == \"On\": \n                   print(state) \n                   devices[idx].on() \n               elif state == \"Off\": \n                   print(state) \n                   devices[idx].off()\n\n```", "```py\n       relays = request.form.getlist(\"relay\")\n\n```", "```py\nsudo pip3 install fitbit cherrypy schedule\n\n```", "```py\nsudo apt-get install python3-blinkt\n\n```", "```py\ncurl -sS https://get.pimoroni.com/rainbowhat | bash\n\n```", "```py\n wget https://raw.githubusercontent.com/orcasgit/\n       python-fitbit/master/gather_keys_oauth2.py\n\n```", "```py\n python3 gather_keys_oauth2.py <client_id> <client_secret>\n\n```", "```py\n       import fitbit\n\n```", "```py\n       fbit_client = fitbit.Fitbit(CONSUMER_KEY, \n                                   CONSUMER_SECRET, \n                                   access_token=ACCESS_TOKEN, \n                                       refresh_token=REFRESH_TOKEN)\n\n```", "```py\n       now = datetime.datetime.now() \n       end_time = now.strftime(\"%H:%M\") \n       response = fbit_client.intraday_time_series('activities/steps', \n         detail_level='15min', \n         start_time=\"00:00\", \n         end_time=end_time)\n\n```", "```py\n       print(response['activities-steps'][0]['value'])\n\n```", "```py\n       import blinkt \n       import datetime \n       import fitbit \n       import time \n       import schedule\n\n```", "```py\n       CONSUMER_KEY = \"INSERT_KEY\" \n       CONSUMER_SECRET = \"INSERT_SECRET\" \n       ACCESS_TOKEN = \"INSER_TOKEN\" \n       REFRESH_TOKEN = \"INSERT_TOKEN\"\n\n```", "```py\n       def refresh_token(): \n           global REFRESH_TOKEN \n           oauth = fitbit.FitbitOauth2Client(client_id=CONSUMER_KEY, \n             client_secret=CONSUMER_SECRET, \n             refresh_token=REFRESH_TOKEN, \n             access_token=ACCESS_TOKEN) \n           REFRESH_TOKEN = oauth.refresh_token()\n\n```", "```py\n       def get_steps(): \n           num_steps = 0 \n           client = fitbit.Fitbit(CONSUMER_KEY, \n                                  CONSUMER_SECRET, \n                                  access_token=ACCESS_TOKEN, \n                                  refresh_token=REFRESH_TOKEN) \n           try: \n               now = datetime.datetime.now() \n               end_time = now.strftime(\"%H:%M\") \n               response = \n                client.intraday_time_series('activities/steps', \n                  detail_level='15min', \n                  start_time=\"00:00\", \n                  end_time=end_time) \n           except Exception as error: \n               print(error) \n           else: \n               str_steps = response['activities-steps'][0]['value'] \n               print(str_steps) \n               try: \n                   num_steps = int(str_steps) \n               except ValueError: \n                   pass \n           return num_steps\n\n```", "```py\n       schedule.every(8).hours.do(refresh_token)\n\n```", "```py\n       # update steps every 15 minutes \n       if (time.time() - current_time) > 900: \n           current_time  = time.time() \n           steps = get_steps() \n\n       num_leds = steps // 1250 \n\n       if num_leds > 8: \n           num_leds = 8 \n\n       for i in range(num_leds): \n           blinkt.set_pixel(i, 0, 255, 0) \n\n       if num_leds <= 7:  \n           blinkt.set_pixel(num_leds, 255, 0, 0) \n           blinkt.show() \n           time.sleep(1) \n           blinkt.set_pixel(num_leds, 0, 0, 0) \n           blinkt.show() \n           time.sleep(1)\n\n```", "```py\n       https://api.darksky.net/forecast/[key]/[latitude],[longitude]\n\n```", "```py\n       URL = (\"https://api.darksky.net/forecast/key\" \n       \"/37.8267,-122.4233?exclude=currently,minutely,hourly\")\n\n```", "```py\n       def check_weather(): \n          try: \n                response = requests.get(URL) \n          except Exception as error: \n                print(error) \n          else: \n                if response.status_code == 200: \n                      data = response.json() \n                      if data[\"daily\"][\"data\"][1][\"icon\"] == \"rain\": \n                            return True \n                      else: \n                            return False\n\n```"]