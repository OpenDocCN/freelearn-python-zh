["```py\n@GetMapping({\"/v1/investors\",\"/v1.1/investors\",\"/v2/investors\"})\n  public List<Investor> fetchAllInvestors()\n    {\n       return investorService.fetchAllInvestors();\n    }\n```", "```py\n@GetMapping(\"/investors\")\npublic List<Investor> fetchAllInvestorsForGivenVersionAsParameter(\n@RequestParam(\"version\") String version)\nthrows VersionNotSupportedException {\nif (!(version.equals(\"1.1\") || version.equals(\"1.0\"))) {\nthrow new VersionNotSupportedException(\"version \" + version);\n}\nreturn investorService.fetchAllInvestors();\n}\n```", "```py\n@GetMapping(\"/investorsbycustomheaderversion\")\npublic List<Investor> fetchAllInvestors...(\n@RequestHeader(\"x-resource-version\") String version)\nthrows VersionNotSupportedException {\nreturn getResultsAccordingToVersion(version);\n}\n```", "```py\n@GetMapping(value = \"/investorsbyacceptheader\",\nheaders = \"Accept=application/investors-v1+json,\napplication/investors-v1.1+json\")\npublic List<Investor> fetchAllInvestorsForGiven..()\nthrows VersionNotSupportedException {\nreturn getResultsAccordingToVersion(\"1.1\");\n}\n```", "```py\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```", "```py\n@Configuration \n@EnableWebSecurity \npublic class PatronsAuthConfig extends WebSecurityConfigurerAdapter { \n..... \n```", "```py\n@Override \nprotected void configure(AuthenticationManagerBuilder authMgrBldr) throws Exception { \n  authMgrBldr.inMemoryAuthentication()                      .passwordEncoder(org.springframework.security.crypto.password.NoOpPasswordEncoder.getInstance())                  .withUser(DEFAULT_USER_ID).password(DEFAULT_USER_SECRET).authorities.... \n      } \n\n@Override \nprotected void configure(HttpSecurity httpSec) throws Exception { \nhttpSec.csrf()..... \n..... \n```", "```py\nhttpSec.csrf().disable().authorizeRequests().and()\n.authorizeRequests().antMatchers(NO_RESTRICT_WELCOME_URI)\n.permitAll().antMatchers(\"/investors/admin\")\n.hasAuthority(DEFAULT_ADMIN_ROLE).antMatchers(\"/investors/invr*/**\")\n.access(\"hasAuthority('\"+DEFAULT_USER_ROLE+\"')\").anyRequest()\n.authenticated().and().httpBasic().and().logout();\n```", "```py\n@PatchMapping(\"/investors/{investorId}/stocks\") \n  public ResponseEntity<Void> updateStockOfTheInvestorPortfolio(@PathVariable String investorId, @RequestHeader(value = \"x-bulk-patch\") Optional<Boolean> isBulkPatch,                  @RequestBody List<Stock> stocksTobeUpdated) throws CustomHeaderNotFoundException { \n            // without custom header we are not going to process this bulk operation \n            if (!isBulkPatch.isPresent()) { \n                  throw new CustomHeaderNotFoundException(\"x-bulk-patch not found in your headers\"); \n            } \n      investorService.bulkUpdateOfStocksByInvestorId(investorId, stocksTobeUpdated); \n            return ResponseEntity.noContent().build(); \n      } \n```", "```py\n<dependency>\n<groupId>org.springframework.cloud</groupId>\n<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n<version>2.0.1.RELEASE</version>\n</dependency>\n```", "```py\n@EnableCircuitBreaker @RestController\npublic class InvestorController {\n@Autowired\nprivate InvestorService investorService;\n// call the downstream service circuit-breaker-service@GetMapping(value=\"/welcome\", produces=\"text/plain;charset=UTF-8\")\npublic String welcomePageWhichProducesCharset() {\nreturn investorService.circuitBreakerImplWelcome();\n}\n```", "```py\n @HystrixCommand(fallbackMethod=\"welcomeUrlFailureFallback\") public String circuitBreakerImplWelcome() {\nlogger.info(\"reached circuit breaker consumer circuit breaker impl\");\nRestTemplate restTemplate = new RestTemplate();\nURI circuitBreakerServiceURI = URI.create(CIRCUIT_BREAKER_SERVICE_URL);\nreturn restTemplate.getForObject(circuitBreakerServiceURI, String.class);\n}\n// fall back method for welcome page failures\npublic\n String\n welcomeUrlFailureFallback\n (){ logger.info(\"lucky we have a fallback method\");\nreturn WELCOME_URI_FALLBACK_MESG;\n}\n```", "```py\npublic interface DeleteServiceFacade {\n boolean deleteAStock(String investorId, String stockTobeDeletedSymbol);\n    boolean deleteStocksInBulk(String investorId, List<String> stocksSymbolsList);\n} \n```", "```py\n@Component\npublic class DeleteServiceFacadeImpl implements DeleteServiceFacade {\n   private static final Logger logger = LoggerFactory.getLogger(InvestorService.class);\n   private InvestorServicesFetchOperations investorServicesFetchOperations = new InvestorServicesFetchOperations();\n       @Override\n       public boolean deleteAStock(String investorId, String stockTobeDeletedSymbol) {\n             boolean deletedStatus = false;\n             Stock stockTobeDeleted = investorServicesFetchOperations.fetchSingleStockByInvestorIdAndStockSymbol(investorId,\n                          stockTobeDeletedSymbol);\n             if (stockTobeDeleted != null) {\n                    Investor investor = investorServicesFetchOperations.fetchInvestorById(investorId);\n                    deletedStatus = investor.getStocks().remove(stockTobeDeleted);\n             }\n             designForIntentCascadePortfolioDelete(investorId, deletedStatus);\n             return deletedStatus;\n      }\n.....\n.....\n```"]