- en: Chapter 4. Using the Selenium Python API for Element Interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications use HTML forms to send data to a server. HTML forms contain
    input elements such as text fields, checkboxes, radio buttons, submit buttons,
    and more. A form can also contain select lists, text areas, field sets, legends,
    and label elements.
  prefs: []
  type: TYPE_NORMAL
- en: A typical web application requires you to fill in lots of forms, starting from
    registering as a user or searching for products. Forms are enclosed in the HTML
    `<form>` tag. This tag specifies the method of submitting the data, either using
    the `GET` or `POST` method, and the address at which the data entered into the
    form should be submitted on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding more about the `WebDriver` and `WebElement` classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing tests that interact with the application using various methods
    and properties of the `WebDriver` and `WebElement` classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `Select` class to automate dropdowns and lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating JavaScript alerts and browser navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elements of HTML forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML forms are composed with different types of elements, including `<form>`,
    `<input>`, `<button>`, and `<label>` as shown in the following diagram. Web developers
    use these elements to design the web page to display data or accept data from
    users. The developers write HTML code for web pages defining these elements. However,
    as an end user, we see these elements as the **Graphical User Interface** (**GUI**)
    controls such as textboxes, labels, buttons, checkboxes, and radio buttons. The
    HTML code is hidden from the end users.
  prefs: []
  type: TYPE_NORMAL
- en: '![Elements of HTML forms](img/3506OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Selenium WebDriver provides broad support for automating interaction with these
    elements as well as checking the functionality of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the WebDriver class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `WebDriver` class provides a number of properties or attributes for browser
    interaction. We can use the properties and methods of the `WebDriver` class to
    interact with the browser window, alerts, frames and pop-up windows. It also provides
    features to automate browser navigation, access cookies, capture screenshots,
    and so on. In this chapter, we will explore some of the most important features
    of the `WebDriver` class. The following table covers some of the most important
    properties and methods that we will be using in the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a complete list of properties and methods visit [http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#module-selenium.webdriver.remote.webdriver](http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#module-selenium.webdriver.remote.webdriver).
  prefs: []
  type: TYPE_NORMAL
- en: Properties of the WebDriver class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `WebDriver` class implements the following properties for accessing the
    browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property/attribute | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `current_url` | This gets the URL of the current page displayed in the browser
    | `driver.current_url` |'
  prefs: []
  type: TYPE_TB
- en: '| `current_window_handle` | This gets the handle of the current window | `driver.current_window_handle`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `name` | This gets the name of the underlying browser for this instance |
    `driver.name` |'
  prefs: []
  type: TYPE_TB
- en: '| `orientation` | This gets the current orientation of the device | `driver.orientation`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `page_source` | This gets the source of the current page | `driver.page_source`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `title` | This gets the title of the current page | `driver.title` |'
  prefs: []
  type: TYPE_TB
- en: '| `window_handles` | This gets the handles of all windows within the current
    session | `driver.window_handles` |'
  prefs: []
  type: TYPE_TB
- en: Methods of the WebDriver class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `WebDriver` class implements various methods to interact with the browser
    window, web pages, and the elements on these pages. Here is a list of some important
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description | Argument | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `back()` | This goes one step backward in the browser history in the current
    session. |   | `driver.back()` |'
  prefs: []
  type: TYPE_TB
- en: '| `close()` | This closes the current browser window. |   | `driver.close()`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `forward()` | This goes one step forward in the browser history in the current
    session. |   | `driver.forward()` |'
  prefs: []
  type: TYPE_TB
- en: '| `get(url)` | This navigates and loads a web page in the current browser session.
    | `url` is the address of the website or web page to navigate | `driver.get("http://www.google.com")`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `maximize_window()` | This maximizes the current browser window. |   | `driver.maximize_window()`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `quit()` | This quits the driver and closes all the associated windows. |
      | `driver.quit()` |'
  prefs: []
  type: TYPE_TB
- en: '| `refresh()` | This refreshes the current page displayed in the browser. |
      | `driver.refresh()` |'
  prefs: []
  type: TYPE_TB
- en: '| `switch_to.active_element()` | This returns the element with focus or the
    *body* if nothing else has focus. |   | `driver.switch_to_active_element()` |'
  prefs: []
  type: TYPE_TB
- en: '| `Switch.to_alert()` | This switches the focus to an alert on the page. |
      | `driver.switch_to_alert()` |'
  prefs: []
  type: TYPE_TB
- en: '| `switch_to.default_content()` | This switches the focus to the default frame.
    |   | `driver.switch_to_default_content()` |'
  prefs: []
  type: TYPE_TB
- en: '| `switch_to.frame(frame_reference)` | This switches the focus to the specified
    frame, by index, name, or web element. This method also works on `IFRAMES`. |
    `frame_reference`: This is the name of the window to switch to, an integer representing
    the index, or a web element that is a frame to switch to | `driver.switch_to_frame(''frame_name'') `
    |'
  prefs: []
  type: TYPE_TB
- en: '| `switch_to.window(window_name)` | This switches focus to the specified window.
    | `window_name` is the name or window handle of the window to switch to. | `driver.switch_to_window(''main'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `implicitly_wait(time_to_wait)` | This sets a sticky timeout to implicitly
    wait for an element to be found, or a command to complete. This method only needs
    to be called one time per session. To set the timeout for calls to `execute_async_script`,
    see `set_script_timeo` `ut`. | `time_to_wait` is the amount of time to wait (in
    seconds). |   |'
  prefs: []
  type: TYPE_TB
- en: '| `set_page_load_timeout(time_to_wait)` | This sets the amount of time to wait
    for a page load to complete. | `time_to_wait` is the amount of time to wait (in
    seconds). | `driver.set_page_load_timeout(30)` |'
  prefs: []
  type: TYPE_TB
- en: '| `set_script_timeout(time_to_wait)` | This sets the amount of time that the
    script should wait during an `execute_async_script` call before throwing an error.
    | `time_to_wait` is the amount of time to wait (in seconds). | `driver.set_script_timeout(30)`
    |'
  prefs: []
  type: TYPE_TB
- en: Understanding the WebElement class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can interact with elements on a web page using the `WebElement` class. We
    can interact with a textbox, text area, button, radio buttons, checkbox, table,
    table row, table cell, div, and so on using the `WebElement` class.
  prefs: []
  type: TYPE_NORMAL
- en: The `WebElemet` class provides a number of properties or attributes and methods
    to interact with the elements. The next table covers some of the most important
    properties and methods that we will be using in the rest of the book. For a complete
    list of properties and methods, visit [http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html#module-selenium.webdriver.remote.webelement](http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html#module-selenium.webdriver.remote.webelement).
  prefs: []
  type: TYPE_NORMAL
- en: Properties of the WebElement class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `WebElement` class implements the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property/attribute | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `size` | This gets the size of the element | `element.size` |'
  prefs: []
  type: TYPE_TB
- en: '| `tag_name` | This gets this element''s HTML tag name | `element.tag_name`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `text` | This gets the text of the element | `element.text` |'
  prefs: []
  type: TYPE_TB
- en: Methods of the WebElement class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `WebElement` class implements the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description | Argument | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `clear()` | This clears the content of the textbox or text area element.
    |   | `element.clear()` |'
  prefs: []
  type: TYPE_TB
- en: '| `click()` | This clicks the element. |   | `element.click()` |'
  prefs: []
  type: TYPE_TB
- en: '| `get_attribute(name)` | This gets the attribute value from the element. |
    `name` is the name of the attribute. | `element.get_attribute("value")``Or``element.get_attribute("maxlength")`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `is_displayed()` | This checks whether the element is visible to the user.
    |   | `element.is_displayed()` |'
  prefs: []
  type: TYPE_TB
- en: '| `is_enabled()` | This checks whether the element is enabled. |   | `element.is_enabled()`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `is_selected()` | This checks whether the element is selected. This method
    is used to check the selection of a radio button or checkbox. |   | `element.is_selected()`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `send_keys(*value)` | This simulates typing into the element. | `Value` is
    a string for typing or setting form fields. | `element.send_keys("foo")` |'
  prefs: []
  type: TYPE_TB
- en: '| `submit()` | This submits a form. If you call this method on an element,
    it will submit the parent form. |   | `element.submit()` |'
  prefs: []
  type: TYPE_TB
- en: '| `value_of_css_property(property_name)` | This gets the value of a CSS property.
    | `property_name` is the name of the CSS property. | `element.value_of_css_property("background-color")`
    |'
  prefs: []
  type: TYPE_TB
- en: Working with forms, textboxes, checkboxes, and radio buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use the `WebElement` class to automate the interaction on various HTML
    controls such as entering text in a textbox, clicking on a button, selecting an
    option in a checkbox or radio button, getting text and attribute values from the
    element, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'We saw the properties and methods provided by the `WebElement` class earlier
    in the chapter. In this section, we will use the `WebElement` class and its properties
    and methods to automate the create account feature of the sample application.
    So, let''s create a test that validates the creation of a new user account in
    the sample application. We will fill out the form as shown in the following screenshot
    and submit our request. The system should then create a new user account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with forms, textboxes, checkboxes, and radio buttons](img/3506OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshot, we need to fill out five textboxes
    and select a checkbox for the newsletter.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new test class `RegisterNewUser` as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a test, `test_register_new_user(self)`, to the `RegisterNewUser` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To open the login page, we need to click on the **Log In** link on the home
    page. The code for the **Log In** button is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Checking whether the element is displayed and enabled
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `is_displayed()` method returns `TRUE` if the element is visible on the
    screen (the visible attribute is set to `TRUE`), otherwise it will return `FALSE`.
    Similarly, the `is_enabled()` method returns `TRUE` if the element is enabled,
    that is, the user can perform actions such as click, enter text, and so on. This
    method returns `FALSE` if element is disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The customer login page has options to log into the system as registered users
    or create an account for new users. We can check whether the **Create an Account**
    button is displayed to the user and it is enabled using the `is_displayed()` and
    `is_enabled()` methods of the `WebElement` class. Add the steps given in the following
    code to the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to test the `Create an Account` functionality, so let''s click on the
    **Create an Account** button. This will display the **Create New Customer Account**
    page. We can use the `WebDriver` class''s `title` property to check whether the
    page title matches with what we expected, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'On the **Create New Customer Account** page, locate all the elements using
    the `find_element_by_*` methods as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Finding the element attribute value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `get_attribute()` method can be used to get the attribute values defined
    for an element. For example, there is a test that says the firstname and lastname
    textbox should have their max length defined to 255 characters. Here is the HTML
    code for the `firstname` textbox, where a `maxlength` attribute is defined and
    its value is `255` as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can assert the `maxlength` attribute using the `get_attribute()` method
    of `WebElement` with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to pass the name of the attribute as an argument to the `get_attribute()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following steps to the test to make sure all the fields are displayed
    and enabled for the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the is_selected() method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `is_selected()` method works with checkboxes and radio buttons. We can use
    this method to know whether a checkbox or radio button is selected or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'A checkbox or radio button is selected by performing a click operation using
    the `click()` method of the `WebElement` class. In this example, check whether
    the **Sign Up for Newsletter** checkbox is unselected by default, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using the clear() and send_keys() methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `clear()` and `send_keys()` methods of the `WebElement` class applicable
    to the textbox or textarea are useful to clear the contents of the element and
    send text values as if a real user were typing on the keyboard. The `send_keys()`
    method takes the text to be entered in the element as an argument. Let''s consider
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the given code to fill the fields using the `send_keys()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, check whether the user is created by checking the welcome message.
    We can get the text from an element using the `text` property of the `WebElement`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is a complete test for the `Create An Account` functionality. Run this
    test and you will see all the operations on the **Create An Account** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Working with dropdowns and lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Selenium WebDriver provides a special `Select` class to interact with the lists
    and dropdowns on a web page. For example, in the demo application, you can see
    a dropdown to select the language for the store. You can choose and set a language
    for the store as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with dropdowns and lists](img/3506OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Dropdowns or lists are implemented with the `<select>` element in HTML. The
    options or choices are implemented with the `<options>` element within a `<select>`
    element as shown in the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Each `<option>` element has its attribute value defined and text that the user
    will see. For example, in the following code, the `<option>` value is set to the
    URL of the store and the text is set to the language, that is, `French`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the Select class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Select` class is a special class in Selenium that is used to interact with
    dropdowns or lists. It offers various methods and properties for user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: The following table lists all the properties and methods from the `Select` class.
    You can find similar information at [http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.select.html#module-selenium.webdriver.support.select](http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.select.html#module-selenium.webdriver.support.select).
  prefs: []
  type: TYPE_NORMAL
- en: Properties of the Select class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Select` class implements the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property/attribute | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `all_selected_options` | This gets a list of all the selected options belonging
    to the dropdown or list | `select_element.all_selected_options` |'
  prefs: []
  type: TYPE_TB
- en: '| `first_selected_option` | This gets the first selected / currently selected
    option from the dropdown or list | `select_element.first_selected_option` |'
  prefs: []
  type: TYPE_TB
- en: '| `options` | This gets a list of all options from the dropdown or list | `select_element.options`
    |'
  prefs: []
  type: TYPE_TB
- en: Methods of the Select class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Select` class implements the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description | Argument | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `deselect_all()` | This clears all the selected entries from a multiselect
    dropdown or list |   | `select_element.deselect_all()` |'
  prefs: []
  type: TYPE_TB
- en: '| `deselect_by_index(index)` | This deselects the option at the given index
    from the dropdown or list | `index` is the index of the option to be deselected
    | `select_element.deselect_by_index(1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `deselect_by_value(value)` | This deselects all options that have a value
    matching the argument from the dropdown or list | `value` is the value attribute
    of the option to be deselected | `select_element.deselect_by_value("foo")` |'
  prefs: []
  type: TYPE_TB
- en: '| `deselect_by_visible_text(text)` | This deselects all the options that display
    text matching the argument from the dropdown or list | `text` is the text value
    of the option to be deselected | `select_element.deselect_by_visible_text("bar")`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `select_by_index(index)` | This selects an option at the given index from
    the dropdown or list | `index` is the index of the option to be selected | `select_element.select_by_index(1)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `select_by_value(value)` | This selects all the options that have a value
    matching the argument from the dropdown or list | `value` is the value attribute
    of the option to be selected | `select_element.select_by_value("foo")` |'
  prefs: []
  type: TYPE_TB
- en: '| `select_by_visible_text(text)` | This selects all the options that display
    the text matching the argument from the dropdown or list | `text` is the text
    value of the option to be selected | `select_element.select_by_visible_text("bar")`
    |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s explore these properties and methods to test the language features of
    the demo application. We will add a new test to the home page test that we built
    in the previous chapters. This test checks whether the user has eight languages
    to select from. We will use the `options` property to first check the number of
    options and then get the text of each option in a list and check that list with
    an expected option list, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `options` property returns all the `<option>` elements defined for a dropdown
    or list. Each item in the options list is an instance of the `WebElement` class.
  prefs: []
  type: TYPE_NORMAL
- en: We can also check the default/current selected option using the `first_selected_option`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `all_selected_options` property is used to test multiselect dropdowns or
    lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, select an item and check whether the store URL is changed based on
    the language selection using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Option(s) can be selected by their index (that is, their position in the list),
    by the value attribute or by the visible text. The `Select` class offers various
    `select_` methods to select the options. In this example, we used the `select_by_visible_text()`
    method to select an option. We can also deselect options using various `deselect_`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: Working with alerts and pop-up windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developers use JavaScript alerts or model dialogs to inform users about validation
    errors, warnings, to give a response for an action, accept an input value, and
    more. In this section, we will see how to handle alerts and pop-up windows with
    Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Alert class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Selenium WebDriver provides the `Alert` class to handle JavaScript alerts. The
    `Alert` class contains methods for accepting, dismissing, inputting, and getting
    text from alerts.
  prefs: []
  type: TYPE_NORMAL
- en: Properties of the Alert class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Alert` class implements the following property:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property/attribute | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `text` | This gets text from the alert window | `alert.text` |'
  prefs: []
  type: TYPE_TB
- en: Methods of the Alert class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Alert` class implements the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description | Argument | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `accept()` | This will accept the JavaScript alert box that is click on the
    **OK** button |   | `alert.accept()` |'
  prefs: []
  type: TYPE_TB
- en: '| `dismiss()` | This will dismiss the JavaScript alert box that is click on
    the **Cancel** button |   | `alert.dismiss()` |'
  prefs: []
  type: TYPE_TB
- en: '| `send_keys(*value)` | This simulates typing into the element | `value` is
    a string for typing or setting form fields | `alert.send_keys("foo")` |'
  prefs: []
  type: TYPE_TB
- en: 'In the demo application, you can find the use of alerts to inform or warn the
    user. For example, when you add products for comparison and then remove one of
    the products or all the products from the comparison, the application shows you
    an alert similar to the one shown in following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Methods of the Alert class](img/3506OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will implement a test that checks whether the **Clear All** option in the
    **COMPARE PRODUCTS** feature displays an alert window to the users asking whether
    they are sure about the removal of products from the comparison.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new test class, `CompareProducts`, and add steps to search and add
    a product to compare as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once a product is added for comparison by clicking on the **Add to Compare**
    link, you will see the product added to the **COMPARE PRODUCTS** section. You
    can also add another product for comparison. If you want to remove all products
    from comparison, you can do so by clicking on the **Clear All** link from the
    **COMPARE PRODUCTS** section. You will get an alert asking you whether you want
    to clear all the products. We can handle this alert using the `Alert` class. The
    `switch_to_alert()` method of the `WebDriver` class returns the instance of `Alert`.
    We can use this instance to read the message displayed on the alert and accept
    that alert, by clicking on the **OK** button or dismissing the alert, by clicking
    on the **Cancel** button. Add the following code to the test. This part reads
    and checks the alert message and then accepts the alert by calling the `accept()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Automating browser navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Browsers provide various navigation methods to access the web pages from the
    browser history or by refreshing the current page and so on with the back, forward,
    refresh/reload buttons on the browser window''s toolbar. The Selenium WebDriver
    API provides access to these buttons with various navigation methods. We can test
    the behavior of the application when these methods are used. The `WebDriver` class
    provides the following methods to perform browser navigation such as back, forward,
    and refresh:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description | Argument | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `back()` | This goes one step backward in the browser history of the current
    session | None | `driver.back()` |'
  prefs: []
  type: TYPE_TB
- en: '| `forward()` | This goes one step forward in the browser history of the current
    session | None | `driver.forward()` |'
  prefs: []
  type: TYPE_TB
- en: '| `refresh()` | This refreshes the current page displayed in the browser |
    None | `driver.refresh()` |'
  prefs: []
  type: TYPE_TB
- en: 'Here is an example that uses the browser navigation API to navigate the history
    and validate the state of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to the Selenium WebDriver API for interacting
    with various elements on a page. The Selenium WebDriver API offers various classes,
    properties, and methods to simulate the user actions and check the application
    states. We looked at various methods to automate elements such as textboxes, buttons,
    checkboxes, and dropdowns.
  prefs: []
  type: TYPE_NORMAL
- en: We created some tests that deal with alerts. We also looked at using browser
    navigation method and tested the navigation between pages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the Selenium API to handle synchronizing
    tests. This will help us in building reliable tests with Selenium.
  prefs: []
  type: TYPE_NORMAL
