- en: Chapter 4. Using the Selenium Python API for Element Interaction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 使用 Selenium Python API 进行元素交互
- en: Web applications use HTML forms to send data to a server. HTML forms contain
    input elements such as text fields, checkboxes, radio buttons, submit buttons,
    and more. A form can also contain select lists, text areas, field sets, legends,
    and label elements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序使用 HTML 表单将数据发送到服务器。HTML 表单包含输入元素，如文本字段、复选框、单选按钮、提交按钮等。表单还可以包含选择列表、文本区域、字段集、图例和标签元素。
- en: A typical web application requires you to fill in lots of forms, starting from
    registering as a user or searching for products. Forms are enclosed in the HTML
    `<form>` tag. This tag specifies the method of submitting the data, either using
    the `GET` or `POST` method, and the address at which the data entered into the
    form should be submitted on the server.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的网络应用程序需要你填写许多表单，从注册用户或搜索产品开始。表单被 HTML `<form>` 标签包围。此标签指定提交数据的方法，是使用 `GET`
    还是 `POST` 方法，以及表单中输入的数据应在服务器上的哪个地址提交。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Understanding more about the `WebDriver` and `WebElement` classes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解 `WebDriver` 和 `WebElement` 类
- en: Implementing tests that interact with the application using various methods
    and properties of the `WebDriver` and `WebElement` classes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现使用 `WebDriver` 和 `WebElement` 类的各种方法和属性与应用程序交互的测试
- en: Using the `Select` class to automate dropdowns and lists
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Select` 类自动化下拉列表和列表
- en: Automating JavaScript alerts and browser navigation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化 JavaScript 警报和浏览器导航
- en: Elements of HTML forms
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML 表单的元素
- en: HTML forms are composed with different types of elements, including `<form>`,
    `<input>`, `<button>`, and `<label>` as shown in the following diagram. Web developers
    use these elements to design the web page to display data or accept data from
    users. The developers write HTML code for web pages defining these elements. However,
    as an end user, we see these elements as the **Graphical User Interface** (**GUI**)
    controls such as textboxes, labels, buttons, checkboxes, and radio buttons. The
    HTML code is hidden from the end users.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 表单由不同类型的元素组成，包括 `<form>`、`<input>`、`<button>` 和 `<label>`，如下所示。网络开发人员使用这些元素来设计网页以显示数据或从用户那里接收数据。开发人员编写网页的
    HTML 代码以定义这些元素。然而，作为最终用户，我们把这些元素看作是 **图形用户界面** (**GUI**) 控件，如文本框、标签、按钮、复选框和单选按钮。HTML
    代码对最终用户是隐藏的。
- en: '![Elements of HTML forms](img/3506OS_04_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![HTML 表单的元素](img/3506OS_04_01.jpg)'
- en: Selenium WebDriver provides broad support for automating interaction with these
    elements as well as checking the functionality of the application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 提供了广泛的支持，用于自动化与这些元素的交互以及检查应用程序的功能。
- en: Understanding the WebDriver class
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 WebDriver 类
- en: The `WebDriver` class provides a number of properties or attributes for browser
    interaction. We can use the properties and methods of the `WebDriver` class to
    interact with the browser window, alerts, frames and pop-up windows. It also provides
    features to automate browser navigation, access cookies, capture screenshots,
    and so on. In this chapter, we will explore some of the most important features
    of the `WebDriver` class. The following table covers some of the most important
    properties and methods that we will be using in the rest of the book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebDriver` 类提供了一系列用于浏览器交互的属性或属性。我们可以使用 `WebDriver` 类的属性和方法与浏览器窗口、警报、框架和弹出窗口进行交互。它还提供了自动化浏览器导航、访问
    cookies、捕获屏幕截图等功能。在本章中，我们将探讨 `WebDriver` 类的一些最重要的功能。以下表格涵盖了本书其余部分将使用的一些最重要的属性和方法。'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a complete list of properties and methods visit [http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#module-selenium.webdriver.remote.webdriver](http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#module-selenium.webdriver.remote.webdriver).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看属性和方法的完整列表，请访问 [http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#module-selenium.webdriver.remote.webdriver](http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#module-selenium.webdriver.remote.webdriver).
- en: Properties of the WebDriver class
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebDriver 类的属性
- en: 'The `WebDriver` class implements the following properties for accessing the
    browser:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebDriver` 类实现了以下属性以访问浏览器：'
- en: '| Property/attribute | Description | Example |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 属性/属性 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `current_url` | This gets the URL of the current page displayed in the browser
    | `driver.current_url` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `current_url` | 获取浏览器中当前显示的页面的 URL | `driver.current_url` |'
- en: '| `current_window_handle` | This gets the handle of the current window | `driver.current_window_handle`
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `current_window_handle` | 获取当前窗口的句柄 | `driver.current_window_handle` |'
- en: '| `name` | This gets the name of the underlying browser for this instance |
    `driver.name` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 获取此实例的底层浏览器的名称 | `driver.name` |'
- en: '| `orientation` | This gets the current orientation of the device | `driver.orientation`
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `orientation` | 获取设备的当前方向 | `driver.orientation` |'
- en: '| `page_source` | This gets the source of the current page | `driver.page_source`
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `page_source` | 获取当前页面的源代码 | `driver.page_source` |'
- en: '| `title` | This gets the title of the current page | `driver.title` |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `title` | 获取当前页面的标题 | `driver.title` |'
- en: '| `window_handles` | This gets the handles of all windows within the current
    session | `driver.window_handles` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `window_handles` | 获取当前会话中所有窗口的句柄 | `driver.window_handles` |'
- en: Methods of the WebDriver class
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebDriver 类的方法
- en: 'The `WebDriver` class implements various methods to interact with the browser
    window, web pages, and the elements on these pages. Here is a list of some important
    methods:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: WebDriver 类实现了各种方法来与浏览器窗口、网页以及这些页面上的元素进行交互。以下是重要方法的列表：
- en: '| Method | Description | Argument | Example |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `back()` | This goes one step backward in the browser history in the current
    session. |   | `driver.back()` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `back()` | 在当前会话的浏览器历史记录中后退一步。 |   | `driver.back()` |'
- en: '| `close()` | This closes the current browser window. |   | `driver.close()`
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `close()` | 关闭当前浏览器窗口。 |   | `driver.close()` |'
- en: '| `forward()` | This goes one step forward in the browser history in the current
    session. |   | `driver.forward()` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `forward()` | 在当前会话的浏览器历史记录中向前一步。 |   | `driver.forward()` |'
- en: '| `get(url)` | This navigates and loads a web page in the current browser session.
    | `url` is the address of the website or web page to navigate | `driver.get("http://www.google.com")`
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `get(url)` | 在当前浏览器会话中导航并加载一个网页。 | `url` 是要导航的网站或网页的地址 | `driver.get("http://www.google.com")`
    |'
- en: '| `maximize_window()` | This maximizes the current browser window. |   | `driver.maximize_window()`
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `maximize_window()` | 最大化当前浏览器窗口。 |   | `driver.maximize_window()` |'
- en: '| `quit()` | This quits the driver and closes all the associated windows. |
      | `driver.quit()` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `quit()` | 退出驱动程序并关闭所有相关窗口。 |   | `driver.quit()` |'
- en: '| `refresh()` | This refreshes the current page displayed in the browser. |
      | `driver.refresh()` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `refresh()` | 刷新浏览器中显示的当前页面。 |   | `driver.refresh()` |'
- en: '| `switch_to.active_element()` | This returns the element with focus or the
    *body* if nothing else has focus. |   | `driver.switch_to_active_element()` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `switch_to.active_element()` | 返回具有焦点的元素或如果没有其他元素具有焦点，则为 *body*。 |   | `driver.switch_to_active_element()`
    |'
- en: '| `Switch.to_alert()` | This switches the focus to an alert on the page. |
      | `driver.switch_to_alert()` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `Switch.to_alert()` | 将焦点切换到页面上的一个警告框。 |   | `driver.switch_to_alert()` |'
- en: '| `switch_to.default_content()` | This switches the focus to the default frame.
    |   | `driver.switch_to_default_content()` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `switch_to.default_content()` | 将焦点切换到默认框架。 |   | `driver.switch_to_default_content()`
    |'
- en: '| `switch_to.frame(frame_reference)` | This switches the focus to the specified
    frame, by index, name, or web element. This method also works on `IFRAMES`. |
    `frame_reference`: This is the name of the window to switch to, an integer representing
    the index, or a web element that is a frame to switch to | `driver.switch_to_frame(''frame_name'') `
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `switch_to.frame(frame_reference)` | 通过索引、名称或网页元素将焦点切换到指定的框架。此方法也适用于 `IFRAMES`。
    | `frame_reference`：这是要切换到的窗口的名称，一个表示索引的整数，或一个要切换到的框架的网页元素 | `driver.switch_to_frame(''frame_name'')`
    |'
- en: '| `switch_to.window(window_name)` | This switches focus to the specified window.
    | `window_name` is the name or window handle of the window to switch to. | `driver.switch_to_window(''main'')`
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `switch_to.window(window_name)` | 将焦点切换到指定的窗口。 | `window_name` 是要切换到的窗口的名称或窗口句柄。
    | `driver.switch_to_window(''main'')` |'
- en: '| `implicitly_wait(time_to_wait)` | This sets a sticky timeout to implicitly
    wait for an element to be found, or a command to complete. This method only needs
    to be called one time per session. To set the timeout for calls to `execute_async_script`,
    see `set_script_timeo` `ut`. | `time_to_wait` is the amount of time to wait (in
    seconds). |   |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `implicitly_wait(time_to_wait)` | 这将设置一个粘性超时，隐式等待元素被找到或命令完成。此方法在每个会话中只需要调用一次。要设置对
    `execute_async_script` 的调用超时，请参阅 `set_script_timeout`。 | `time_to_wait` 是等待时长（以秒为单位）。
    |   |'
- en: '| `set_page_load_timeout(time_to_wait)` | This sets the amount of time to wait
    for a page load to complete. | `time_to_wait` is the amount of time to wait (in
    seconds). | `driver.set_page_load_timeout(30)` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `set_page_load_timeout(time_to_wait)` | 这将设置等待页面加载完成的时长。 | `time_to_wait`
    是等待时长（以秒为单位）。 | `driver.set_page_load_timeout(30)` |'
- en: '| `set_script_timeout(time_to_wait)` | This sets the amount of time that the
    script should wait during an `execute_async_script` call before throwing an error.
    | `time_to_wait` is the amount of time to wait (in seconds). | `driver.set_script_timeout(30)`
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `set_script_timeout(time_to_wait)` | 这将在抛出错误之前设置脚本在 `execute_async_script`
    调用期间应等待的时长。 | `time_to_wait` 是等待时长（以秒为单位）。 | `driver.set_script_timeout(30)` |'
- en: Understanding the WebElement class
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 WebElement 类
- en: We can interact with elements on a web page using the `WebElement` class. We
    can interact with a textbox, text area, button, radio buttons, checkbox, table,
    table row, table cell, div, and so on using the `WebElement` class.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `WebElement` 类与网页上的元素进行交互。我们可以使用 `WebElement` 类与文本框、文本区域、按钮、单选按钮、复选框、表格、表格行、表格单元格、div
    等元素进行交互。
- en: The `WebElemet` class provides a number of properties or attributes and methods
    to interact with the elements. The next table covers some of the most important
    properties and methods that we will be using in the rest of the book. For a complete
    list of properties and methods, visit [http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html#module-selenium.webdriver.remote.webelement](http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html#module-selenium.webdriver.remote.webelement).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebElemet` 类提供了一系列属性、方法来与元素交互。下表涵盖了本书其余部分将使用的一些最重要的属性和方法。要获取属性和方法的完整列表，请访问
    [http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html#module-selenium.webdriver.remote.webelement](http://selenium.googlecode.com/git/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html#module-selenium.webdriver.remote.webelement)。'
- en: Properties of the WebElement class
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebElement 类的属性
- en: 'The `WebElement` class implements the following properties:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebElement` 类实现了以下属性：'
- en: '| Property/attribute | Description | Example |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 属性/属性 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `size` | This gets the size of the element | `element.size` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `size` | 这将获取元素的大小 | `element.size` |'
- en: '| `tag_name` | This gets this element''s HTML tag name | `element.tag_name`
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `tag_name` | 这将获取此元素的 HTML 标签名 | `element.tag_name` |'
- en: '| `text` | This gets the text of the element | `element.text` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `text` | 这将获取元素的文本 | `element.text` |'
- en: Methods of the WebElement class
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebElement 类的方法
- en: 'The `WebElement` class implements the following methods:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebElement` 类实现了以下方法：'
- en: '| Method | Description | Argument | Example |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `clear()` | This clears the content of the textbox or text area element.
    |   | `element.clear()` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `clear()` | 这将清除文本框或文本区域元素的内容。 |   | `element.clear()` |'
- en: '| `click()` | This clicks the element. |   | `element.click()` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `click()` | 这将点击元素。 |   | `element.click()` |'
- en: '| `get_attribute(name)` | This gets the attribute value from the element. |
    `name` is the name of the attribute. | `element.get_attribute("value")``Or``element.get_attribute("maxlength")`
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `get_attribute(name)` | 这将从元素中获取属性值。 | `name` 是属性名。 | `element.get_attribute("value")`
    或 `element.get_attribute("maxlength")` |'
- en: '| `is_displayed()` | This checks whether the element is visible to the user.
    |   | `element.is_displayed()` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `is_displayed()` | 这将检查元素是否对用户可见。 |   | `element.is_displayed()` |'
- en: '| `is_enabled()` | This checks whether the element is enabled. |   | `element.is_enabled()`
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `is_enabled()` | 这将检查元素是否启用。 |   | `element.is_enabled()` |'
- en: '| `is_selected()` | This checks whether the element is selected. This method
    is used to check the selection of a radio button or checkbox. |   | `element.is_selected()`
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `is_selected()` | 这将检查元素是否被选中。此方法用于检查单选按钮或复选框的选择。 |   | `element.is_selected()`
    |'
- en: '| `send_keys(*value)` | This simulates typing into the element. | `Value` is
    a string for typing or setting form fields. | `element.send_keys("foo")` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `send_keys(*value)` | 这将模拟在元素中输入。 | `Value` 是用于输入或设置表单字段的字符串。 | `element.send_keys("foo")`
    |'
- en: '| `submit()` | This submits a form. If you call this method on an element,
    it will submit the parent form. |   | `element.submit()` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `submit()` | 这将提交一个表单。如果你在元素上调用此方法，它将提交父表单。 |   | `element.submit()` |'
- en: '| `value_of_css_property(property_name)` | This gets the value of a CSS property.
    | `property_name` is the name of the CSS property. | `element.value_of_css_property("background-color")`
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `value_of_css_property(property_name)` | 这将获取 CSS 属性的值。 | `property_name`
    是 CSS 属性的名称。 | `element.value_of_css_property("background-color")` |'
- en: Working with forms, textboxes, checkboxes, and radio buttons
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与表单、文本框、复选框和单选按钮一起工作
- en: We can use the `WebElement` class to automate the interaction on various HTML
    controls such as entering text in a textbox, clicking on a button, selecting an
    option in a checkbox or radio button, getting text and attribute values from the
    element, and more.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `WebElement` 类来自动化各种 HTML 控件的交互，例如在文本框中输入文本、点击按钮、在复选框或单选按钮中选择选项、从元素获取文本和属性值等。
- en: 'We saw the properties and methods provided by the `WebElement` class earlier
    in the chapter. In this section, we will use the `WebElement` class and its properties
    and methods to automate the create account feature of the sample application.
    So, let''s create a test that validates the creation of a new user account in
    the sample application. We will fill out the form as shown in the following screenshot
    and submit our request. The system should then create a new user account:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章前面看到了 `WebElement` 类提供的属性和方法。在本节中，我们将使用 `WebElement` 类及其属性和方法来自动化示例应用程序的创建账户功能。因此，让我们创建一个测试来验证在示例应用程序中创建新用户账户。我们将填写以下截图所示的表单并提交我们的请求。然后系统应该创建一个新的用户账户：
- en: '![Working with forms, textboxes, checkboxes, and radio buttons](img/3506OS_04_02.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![与表单、文本框、复选框和单选按钮一起工作](img/3506OS_04_02.jpg)'
- en: As you can see from the preceding screenshot, we need to fill out five textboxes
    and select a checkbox for the newsletter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述截图所示，我们需要填写五个文本框并选择一个复选框来订阅通讯。
- en: 'First, create a new test class `RegisterNewUser` as shown in the following
    code:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，根据以下代码创建一个新的测试类 `RegisterNewUser`：
- en: '[PRE0]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Add a test, `test_register_new_user(self)`, to the `RegisterNewUser` class.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `RegisterNewUser` 类添加一个测试，`test_register_new_user(self)`。
- en: 'To open the login page, we need to click on the **Log In** link on the home
    page. The code for the **Log In** button is as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要打开登录页面，我们需要点击主页上的“登录”链接。以下是对“登录”按钮的代码：
- en: '[PRE1]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Checking whether the element is displayed and enabled
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查元素是否显示和启用
- en: The `is_displayed()` method returns `TRUE` if the element is visible on the
    screen (the visible attribute is set to `TRUE`), otherwise it will return `FALSE`.
    Similarly, the `is_enabled()` method returns `TRUE` if the element is enabled,
    that is, the user can perform actions such as click, enter text, and so on. This
    method returns `FALSE` if element is disabled.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`is_displayed()` 方法返回 `TRUE` 如果元素在屏幕上可见（可见属性设置为 `TRUE`），否则它将返回 `FALSE`。同样，`is_enabled()`
    方法返回 `TRUE` 如果元素被启用，即用户可以执行点击、输入文本等操作。如果元素被禁用，此方法返回 `FALSE`。'
- en: 'The customer login page has options to log into the system as registered users
    or create an account for new users. We can check whether the **Create an Account**
    button is displayed to the user and it is enabled using the `is_displayed()` and
    `is_enabled()` methods of the `WebElement` class. Add the steps given in the following
    code to the test:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 客户登录页面有选项让注册用户登录系统或为新用户创建账户。我们可以使用 `WebElement` 类的 `is_displayed()` 和 `is_enabled()`
    方法检查用户是否可以看到并启用“创建账户”按钮。将以下代码中给出的步骤添加到测试中：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We want to test the `Create an Account` functionality, so let''s click on the
    **Create an Account** button. This will display the **Create New Customer Account**
    page. We can use the `WebDriver` class''s `title` property to check whether the
    page title matches with what we expected, as shown in the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想测试“创建账户”功能，因此让我们点击“创建账户”按钮。这将显示“创建新客户账户”页面。我们可以使用 `WebDriver` 类的 `title`
    属性来检查页面标题是否与我们预期的相符，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On the **Create New Customer Account** page, locate all the elements using
    the `find_element_by_*` methods as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在“创建新客户账户”页面上，使用以下方式使用 `find_element_by_*` 方法定位所有元素：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finding the element attribute value
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找元素属性值
- en: 'The `get_attribute()` method can be used to get the attribute values defined
    for an element. For example, there is a test that says the firstname and lastname
    textbox should have their max length defined to 255 characters. Here is the HTML
    code for the `firstname` textbox, where a `maxlength` attribute is defined and
    its value is `255` as shown in the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`get_attribute()`方法获取为元素定义的属性值。例如，有一个测试说，`firstname`和`lastname`文本框的最大长度应该定义为255个字符。以下是`firstname`文本框的HTML代码，其中定义了`maxlength`属性，其值为`255`，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can assert the `maxlength` attribute using the `get_attribute()` method
    of `WebElement` with the following steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`WebElement`类的`get_attribute()`方法通过以下步骤断言`maxlength`属性：
- en: 'We need to pass the name of the attribute as an argument to the `get_attribute()`
    method:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将属性的名称作为参数传递给`get_attribute()`方法：
- en: '[PRE6]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following steps to the test to make sure all the fields are displayed
    and enabled for the user:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下步骤添加到测试中，以确保所有字段都显示并启用供用户使用：
- en: '[PRE7]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using the is_selected() method
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`is_selected()`方法
- en: The `is_selected()` method works with checkboxes and radio buttons. We can use
    this method to know whether a checkbox or radio button is selected or not.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`is_selected()`方法与复选框和单选按钮一起工作。我们可以使用此方法来了解复选框或单选按钮是否被选中。'
- en: 'A checkbox or radio button is selected by performing a click operation using
    the `click()` method of the `WebElement` class. In this example, check whether
    the **Sign Up for Newsletter** checkbox is unselected by default, as shown in
    the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`WebElement`类的`click()`方法执行点击操作来选择复选框或单选按钮。在这个例子中，检查默认情况下**注册新闻通讯**复选框是否未选中，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using the clear() and send_keys() methods
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`clear()`和`send_keys()`方法
- en: 'The `clear()` and `send_keys()` methods of the `WebElement` class applicable
    to the textbox or textarea are useful to clear the contents of the element and
    send text values as if a real user were typing on the keyboard. The `send_keys()`
    method takes the text to be entered in the element as an argument. Let''s consider
    the following steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`clear()`和`send_keys()`方法是`WebElement`类对文本框或文本区域适用的，它们用于清除元素的文本内容，并像真实用户在键盘上输入一样发送文本值。`send_keys()`方法将要在元素中输入的文本作为参数。让我们考虑以下步骤：'
- en: 'Let''s add the given code to fill the fields using the `send_keys()` method:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将给定的代码添加到使用`send_keys()`方法填充字段：
- en: '[PRE9]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, check whether the user is created by checking the welcome message.
    We can get the text from an element using the `text` property of the `WebElement`
    class:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过检查欢迎信息来确认用户是否已创建。我们可以使用`WebElement`类的`text`属性从元素中获取文本：
- en: '[PRE10]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is a complete test for the `Create An Account` functionality. Run this
    test and you will see all the operations on the **Create An Account** page:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是`创建账户`功能的完整测试。运行此测试，你将看到**创建账户**页面上所有的操作：
- en: '[PRE11]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Working with dropdowns and lists
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与下拉列表和列表一起工作
- en: 'Selenium WebDriver provides a special `Select` class to interact with the lists
    and dropdowns on a web page. For example, in the demo application, you can see
    a dropdown to select the language for the store. You can choose and set a language
    for the store as shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver提供了一个特殊的`Select`类，用于与网页上的列表和下拉列表进行交互。例如，在演示应用程序中，你可以看到一个下拉列表来选择商店的语言。你可以选择并设置商店的语言，如下面的截图所示：
- en: '![Working with dropdowns and lists](img/3506OS_04_03.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![与下拉列表和列表一起工作](img/3506OS_04_03.jpg)'
- en: 'Dropdowns or lists are implemented with the `<select>` element in HTML. The
    options or choices are implemented with the `<options>` element within a `<select>`
    element as shown in the following HTML code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉列表或列表在HTML中通过`<select>`元素实现。选项或选择通过`<select>`元素内的`<options>`元素实现，如下面的HTML代码所示：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Each `<option>` element has its attribute value defined and text that the user
    will see. For example, in the following code, the `<option>` value is set to the
    URL of the store and the text is set to the language, that is, `French`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`<option>`元素都有其属性值定义和用户将看到的文本。例如，在以下代码中，`<option>`值被设置为商店的URL，文本被设置为语言，即`法语`：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Understanding the Select class
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解`Select`类
- en: The `Select` class is a special class in Selenium that is used to interact with
    dropdowns or lists. It offers various methods and properties for user interaction.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`Select`类是Selenium中的一个特殊类，用于与下拉列表或列表进行交互。它提供了各种方法和属性以供用户交互。'
- en: The following table lists all the properties and methods from the `Select` class.
    You can find similar information at [http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.select.html#module-selenium.webdriver.support.select](http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.select.html#module-selenium.webdriver.support.select).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了 `Select` 类的所有属性和方法。您可以在[http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.select.html#module-selenium.webdriver.support.select](http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.select.html#module-selenium.webdriver.support.select)
    找到类似的信息。
- en: Properties of the Select class
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Select` 类的属性'
- en: 'The `Select` class implements the following properties:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`Select` 类实现了以下属性：'
- en: '| Property/attribute | Description | Example |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 属性/属性 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `all_selected_options` | This gets a list of all the selected options belonging
    to the dropdown or list | `select_element.all_selected_options` |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `all_selected_options` | 这将获取属于下拉列表或列表的所有已选择选项的列表 | `select_element.all_selected_options`
    |'
- en: '| `first_selected_option` | This gets the first selected / currently selected
    option from the dropdown or list | `select_element.first_selected_option` |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `first_selected_option` | 这将获取下拉列表或列表中第一个已选择/当前选中的选项 | `select_element.first_selected_option`
    |'
- en: '| `options` | This gets a list of all options from the dropdown or list | `select_element.options`
    |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `options` | 这将获取下拉列表或列表中所有选项的列表 | `select_element.options` |'
- en: Methods of the Select class
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Select` 类的方法'
- en: 'The `Select` class implements the following methods:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`Select` 类实现了以下方法：'
- en: '| Method | Description | Argument | Example |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `deselect_all()` | This clears all the selected entries from a multiselect
    dropdown or list |   | `select_element.deselect_all()` |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `deselect_all()` | 这将清除多选下拉列表或列表中的所有已选择条目 |  | `select_element.deselect_all()`
    |'
- en: '| `deselect_by_index(index)` | This deselects the option at the given index
    from the dropdown or list | `index` is the index of the option to be deselected
    | `select_element.deselect_by_index(1)` |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `deselect_by_index(index)` | 这将取消选择下拉列表或列表中给定索引的选项 | `index` 是要取消选择的选项的索引
    | `select_element.deselect_by_index(1)` |'
- en: '| `deselect_by_value(value)` | This deselects all options that have a value
    matching the argument from the dropdown or list | `value` is the value attribute
    of the option to be deselected | `select_element.deselect_by_value("foo")` |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `deselect_by_value(value)` | 这将取消选择所有值与参数匹配的选项，从下拉列表或列表中 | `value` 是要取消选择的选项的值属性
    | `select_element.deselect_by_value("foo")` |'
- en: '| `deselect_by_visible_text(text)` | This deselects all the options that display
    text matching the argument from the dropdown or list | `text` is the text value
    of the option to be deselected | `select_element.deselect_by_visible_text("bar")`
    |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `deselect_by_visible_text(text)` | 这将取消选择所有显示文本与参数匹配的选项，从下拉列表或列表中 | `text`
    是要取消选择的选项的文本值 | `select_element.deselect_by_visible_text("bar")` |'
- en: '| `select_by_index(index)` | This selects an option at the given index from
    the dropdown or list | `index` is the index of the option to be selected | `select_element.select_by_index(1)`
    |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `select_by_index(index)` | 这将选择下拉列表或列表中给定索引的选项 | `index` 是要选择的选项的索引 | `select_element.select_by_index(1)`
    |'
- en: '| `select_by_value(value)` | This selects all the options that have a value
    matching the argument from the dropdown or list | `value` is the value attribute
    of the option to be selected | `select_element.select_by_value("foo")` |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `select_by_value(value)` | 这将选择所有值与参数匹配的选项，从下拉列表或列表中 | `value` 是要选择的选项的值属性
    | `select_element.select_by_value("foo")` |'
- en: '| `select_by_visible_text(text)` | This selects all the options that display
    the text matching the argument from the dropdown or list | `text` is the text
    value of the option to be selected | `select_element.select_by_visible_text("bar")`
    |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `select_by_visible_text(text)` | 这将选择所有显示与参数匹配的文本的选项，从下拉列表或列表中 | `text` 是要选择的选项的文本值
    | `select_element.select_by_visible_text("bar")` |'
- en: 'Let''s explore these properties and methods to test the language features of
    the demo application. We will add a new test to the home page test that we built
    in the previous chapters. This test checks whether the user has eight languages
    to select from. We will use the `options` property to first check the number of
    options and then get the text of each option in a list and check that list with
    an expected option list, as shown in the following code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索这些属性和方法，以测试演示应用程序的语言功能。我们将向之前章节中构建的主页测试添加一个新的测试。此测试检查用户是否有八种语言可供选择。我们将使用
    `options` 属性首先检查选项数量，然后获取列表中每个选项的文本，并检查该列表与预期的选项列表，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `options` property returns all the `<option>` elements defined for a dropdown
    or list. Each item in the options list is an instance of the `WebElement` class.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`options` 属性返回为下拉列表或列表定义的所有 `<option>` 元素。选项列表中的每个项目都是 `WebElement` 类的实例。'
- en: We can also check the default/current selected option using the `first_selected_option`
    property.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `first_selected_option` 属性来检查默认/当前选定的选项。
- en: Note
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `all_selected_options` property is used to test multiselect dropdowns or
    lists.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`all_selected_options` 属性用于测试多选下拉列表或列表。'
- en: 'Finally, select an item and check whether the store URL is changed based on
    the language selection using the following code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，选择一个项目，并使用以下代码检查是否根据语言选择更改了存储 URL：
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Option(s) can be selected by their index (that is, their position in the list),
    by the value attribute or by the visible text. The `Select` class offers various
    `select_` methods to select the options. In this example, we used the `select_by_visible_text()`
    method to select an option. We can also deselect options using various `deselect_`
    methods.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过索引（即列表中的位置）、值属性或可见文本来选择选项。`Select` 类提供了各种 `select_` 方法来选择选项。在这个例子中，我们使用了
    `select_by_visible_text()` 方法来选择一个选项。我们还可以使用各种 `deselect_` 方法来取消选择选项。
- en: Working with alerts and pop-up windows
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与警告和弹出窗口一起工作
- en: Developers use JavaScript alerts or model dialogs to inform users about validation
    errors, warnings, to give a response for an action, accept an input value, and
    more. In this section, we will see how to handle alerts and pop-up windows with
    Selenium.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者使用 JavaScript 警告或模式对话框来通知用户关于验证错误、警告、对操作做出响应、接受输入值等。在本节中，我们将了解如何使用 Selenium
    处理警告和弹出窗口。
- en: Understanding the Alert class
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 `Alert` 类
- en: Selenium WebDriver provides the `Alert` class to handle JavaScript alerts. The
    `Alert` class contains methods for accepting, dismissing, inputting, and getting
    text from alerts.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 提供了 `Alert` 类来处理 JavaScript 警告。`Alert` 类包含接受、关闭、输入和从警告中获取文本的方法。
- en: Properties of the Alert class
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Alert` 类的属性'
- en: 'The `Alert` class implements the following property:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`Alert` 类实现了以下属性：'
- en: '| Property/attribute | Description | Example |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 属性/属性 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `text` | This gets text from the alert window | `alert.text` |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `text` | 从警告窗口获取文本 | `alert.text` |'
- en: Methods of the Alert class
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Alert` 类的方法'
- en: 'The `Alert` class implements the following methods:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`Alert` 类实现了以下方法：'
- en: '| Method | Description | Argument | Example |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `accept()` | This will accept the JavaScript alert box that is click on the
    **OK** button |   | `alert.accept()` |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `accept()` | 这将接受点击 **OK** 按钮的 JavaScript 警告框 | `alert.accept()` |'
- en: '| `dismiss()` | This will dismiss the JavaScript alert box that is click on
    the **Cancel** button |   | `alert.dismiss()` |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `dismiss()` | 这将关闭点击 **Cancel** 按钮的 JavaScript 警告框 | `alert.dismiss()` |'
- en: '| `send_keys(*value)` | This simulates typing into the element | `value` is
    a string for typing or setting form fields | `alert.send_keys("foo")` |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `send_keys(*value)` | 模拟在元素中输入 | `value` 是用于输入或设置表单字段的字符串 | `alert.send_keys("foo")`
    |'
- en: 'In the demo application, you can find the use of alerts to inform or warn the
    user. For example, when you add products for comparison and then remove one of
    the products or all the products from the comparison, the application shows you
    an alert similar to the one shown in following screenshot:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在演示应用程序中，您可以找到使用警告来通知或警告用户的情况。例如，当您添加产品进行比较，然后删除其中一个产品或所有产品时，应用程序会显示一个类似于以下截图的警告：
- en: '![Methods of the Alert class](img/3506OS_04_04.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![`Alert` 类的方法](img/3506OS_04_04.jpg)'
- en: We will implement a test that checks whether the **Clear All** option in the
    **COMPARE PRODUCTS** feature displays an alert window to the users asking whether
    they are sure about the removal of products from the comparison.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个测试，检查**清除所有**选项在**比较产品**功能中是否向用户显示一个询问是否确定删除产品的警告窗口。
- en: 'Create a new test class, `CompareProducts`, and add steps to search and add
    a product to compare as shown in the following code snippet:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的测试类，`CompareProducts`，并添加以下代码片段中所示的搜索和添加产品以进行比较的步骤：
- en: '[PRE16]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once a product is added for comparison by clicking on the **Add to Compare**
    link, you will see the product added to the **COMPARE PRODUCTS** section. You
    can also add another product for comparison. If you want to remove all products
    from comparison, you can do so by clicking on the **Clear All** link from the
    **COMPARE PRODUCTS** section. You will get an alert asking you whether you want
    to clear all the products. We can handle this alert using the `Alert` class. The
    `switch_to_alert()` method of the `WebDriver` class returns the instance of `Alert`.
    We can use this instance to read the message displayed on the alert and accept
    that alert, by clicking on the **OK** button or dismissing the alert, by clicking
    on the **Cancel** button. Add the following code to the test. This part reads
    and checks the alert message and then accepts the alert by calling the `accept()`
    method:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦通过点击**添加到比较**链接添加了产品进行比较，你将看到产品被添加到**比较产品**部分。你也可以添加另一个产品进行比较。如果你想从比较中删除所有产品，你可以通过点击**比较产品**部分的**清除所有**链接来实现。你将收到一个询问你是否要清除所有产品的警告。我们可以使用`Alert`类来处理这个警告。`WebDriver`类的`switch_to_alert()`方法返回`Alert`实例。我们可以使用这个实例来读取警告上显示的消息，并通过点击**确定**按钮或通过点击**取消**按钮来接受该警告，从而关闭警告。将以下代码添加到测试中。这部分读取并检查警告消息，然后通过调用`accept()`方法来接受警告：
- en: '[PRE17]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Automating browser navigation
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化浏览器导航
- en: 'Browsers provide various navigation methods to access the web pages from the
    browser history or by refreshing the current page and so on with the back, forward,
    refresh/reload buttons on the browser window''s toolbar. The Selenium WebDriver
    API provides access to these buttons with various navigation methods. We can test
    the behavior of the application when these methods are used. The `WebDriver` class
    provides the following methods to perform browser navigation such as back, forward,
    and refresh:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器提供了各种导航方法，可以通过浏览器历史记录或通过刷新当前页面等方式访问网页，例如使用浏览器窗口工具栏上的后退、前进、刷新/重新加载按钮。Selenium
    WebDriver API提供了各种导航方法来访问这些按钮。我们可以测试当使用这些方法时应用程序的行为。`WebDriver`类提供了以下方法来执行浏览器导航，如后退、前进和刷新：
- en: '| Method | Description | Argument | Example |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `back()` | This goes one step backward in the browser history of the current
    session | None | `driver.back()` |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `back()` | 这将在当前会话的浏览器历史记录中后退一步 | 无 | `driver.back()` |'
- en: '| `forward()` | This goes one step forward in the browser history of the current
    session | None | `driver.forward()` |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `forward()` | 这将在当前会话的浏览器历史记录中前进一步 | 无 | `driver.forward()` |'
- en: '| `refresh()` | This refreshes the current page displayed in the browser |
    None | `driver.refresh()` |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `refresh()` | 这将刷新浏览器中显示的当前页面 | 无 | `driver.refresh()` |'
- en: 'Here is an example that uses the browser navigation API to navigate the history
    and validate the state of the application:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用浏览器导航API导航历史记录并验证应用程序状态的示例：
- en: '[PRE18]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were introduced to the Selenium WebDriver API for interacting
    with various elements on a page. The Selenium WebDriver API offers various classes,
    properties, and methods to simulate the user actions and check the application
    states. We looked at various methods to automate elements such as textboxes, buttons,
    checkboxes, and dropdowns.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你被介绍了Selenium WebDriver API，用于与页面上的各种元素进行交互。Selenium WebDriver API提供了各种类、属性和方法来模拟用户操作并检查应用程序状态。我们探讨了自动化文本框、按钮、复选框和下拉列表等元素的各种方法。
- en: We created some tests that deal with alerts. We also looked at using browser
    navigation method and tested the navigation between pages.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一些处理警告的测试。我们还探讨了使用浏览器导航方法并测试了页面间的导航。
- en: In the next chapter, we will explore the Selenium API to handle synchronizing
    tests. This will help us in building reliable tests with Selenium.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索Selenium API来处理同步测试。这将帮助我们使用Selenium构建可靠的测试。
