- en: Chapter 11. Other Tips and Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。其他技巧和窍门
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Using PDB and the embedded web2py debugger
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PDB 和嵌入的 web2py 调试器
- en: Debugging with Eclipse and PyDev
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Eclipse 和 PyDev 进行调试
- en: Updating web2py using a shell script
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 shell 脚本更新 web2py
- en: Creating a simple page statistics plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的页面统计插件
- en: Rounding corners without images or JavaScript
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需图像或 JavaScript 来圆角
- en: Setting a `cache.disk` quota
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 `cache.disk` 配额
- en: Checking if web2py is running using `cron`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `cron` 检查 web2py 是否正在运行
- en: Building a Mercurial plugin
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 Mercurial 插件
- en: Building a pingback plugin
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 pingback 插件
- en: Changing views for mobile browsers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为移动浏览器更改视图
- en: Background processing with a database queue
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库队列进行后台处理
- en: How to effectively use template blocks
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何有效地使用模板块
- en: Making standalone applications with web2py and wxPython
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 web2py 和 wxPython 创建独立应用程序
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter contains recipes that did not fit in any other chapter, and yet
    were considered important by typical web2py users. An example is how to use web2py
    with Eclipse. The latter is a very popular Java IDE that works well with Python,
    but presents some quirks when used with web2py, and here, we show you how to overcome
    those quirks with proper configuration. Other examples are how to develop applications
    that are mobile-friendly, and how to develop standalone applications that use
    a **wxPython GUI**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含不适合任何其他章节的食谱，但典型 web2py 用户认为它们很重要。一个例子是使用 Eclipse 与 web2py 一起使用。后者是一个非常流行的
    Java 集成开发环境，与 Python 工作得很好，但与 web2py 一起使用时存在一些怪癖，在这里，我们向您展示如何通过适当的配置克服这些怪癖。其他例子包括如何开发适合移动设备的应用程序，以及如何开发使用
    **wxPython GUI** 的独立应用程序。
- en: Using PDB and the embedded web2py debugger
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PDB 和嵌入的 web2py 调试器
- en: web2py has interactive (web browser) debug capabilities built into the **admin**
    application, similar to shell, but issuing commands directly to **PDB**, which
    is the **Python Debugger**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: web2py 在 **admin** 应用程序中内置了交互式（网页浏览器）调试功能，类似于 shell，但直接向 **PDB**（Python 调试器）发出命令。
- en: Although this is not a fully-featured visual debugger, it is useful to programmatically
    set up breakpoints, then step in and do variable and stack inspection, arbitrary
    code execution in the program context, instruction jump, and other operations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是一个功能齐全的视觉调试器，但可以用于程序性地设置断点，然后进入并执行变量和堆栈检查，程序上下文中的任意代码执行，指令跳转和其他操作。
- en: The use of this debugger is optional, and it is intended for advanced users
    (it should be used with care, or you can block the web2py server). It is not imported,
    by default, and normal operation of web2py is not modified.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此调试器是可选的，它旨在供高级用户使用（应谨慎使用，或者你可以阻止 web2py 服务器）。默认情况下，它不会被导入，并且不会修改 web2py 的正常操作。
- en: The implementation can be enhanced and extended to do other kinds of COMET-like
    communication (pushing data from server to client using AJAX), with general purpose
    long-running processes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可以增强和扩展以进行其他类型的 COMET-like 通信（使用 AJAX 从服务器向客户端推送数据），以及通用长运行进程。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: PDB is the Python Debugger, included in the standard library.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: PDB 是 Python 调试器，包含在标准库中。
- en: 'You can start the debugger by writing the following:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过编写以下内容来启动调试器：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, let''s debug the welcome default index controller:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，让我们调试欢迎默认索引控制器：
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, when you open the index page: `http://127.0.0.1:8000/welcome/default/index`,
    the (PDB) prompt will appear in the console where you started web2py:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，当你打开索引页面：`http://127.0.0.1:8000/welcome/default/index`，(PDB) 提示将在你启动 web2py
    的控制台中出现：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The debugger points out that we are stopped inside `welcome/controllers/default.py`
    at *line 20*. At this point, any `Pdb` command can be issued. The most useful
    ones are as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调试器指出，我们在 `welcome/controllers/default.py` 的 *第 20 行* 处停止。在此点，可以发出任何 `Pdb` 命令。最有用的命令如下：
- en: '`help:` This command prints the list of available commands'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help:` 此命令打印可用命令的列表'
- en: '`where:` This command prints the current stack trace'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where:` 此命令打印当前的堆栈跟踪'
- en: '`list [first[, last]]:` This command lists the source code (between the first
    and the last lines)'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list [first[, last]]:` 此命令列出源代码（在第一行和最后一行之间）'
- en: '`p expression:` This command evaluates the expression and prints the result'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p expression:` 此命令评估表达式并打印结果'
- en: '`! statement:` This command executes a Python statement'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`! statement:` 此命令执行一个 Python 语句'
- en: '`step: step in:` This command executes the current line, entering functions'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`step: step in:` 此命令执行当前行，进入函数'
- en: '`next: step next:` This command executes the current line, not entering functions'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next: step next:` 这个命令执行当前行，不进入函数'
- en: '`return: step return:` This command continues execution until the function
    exits'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return: step return:` 这个命令继续执行直到函数退出'
- en: '`continue:` This command continues execution, and only stops at breakpoints'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`continue:` 这个命令继续执行，并且仅在断点处停止'
- en: '`jump lineno:` This command changes the next line to be executed'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jump lineno:` 这个命令改变将要执行的下一行'
- en: '`break filename:lineno:` This command sets a breakpoint'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`break filename:lineno:` 这个命令设置一个断点'
- en: '`quit:` This command quits from the debugger (aborts the current program)'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quit:` 这个命令从调试器退出（终止当前程序）'
- en: 'The commands can be issued just by typing the first letter; for example, look
    at the following example session:'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令可以通过只输入第一个字母来发出；例如，看看以下示例会话：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The commands were `n` for next (execute the line), `p` for a message to print
    the message variable, `!message=` to change its value to `hello web2py recipe!,
    w` to see the current stack trace, and `continue` to exit the debugger.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令是 `n`（next，执行行），`p`（打印消息变量），`!message=`（将其值更改为 `hello web2py recipe!`），`w`（查看当前的堆栈跟踪），以及
    `continue`（退出调试器）。
- en: The problem is that this technique cannot be used if you don't have direct access
    to a console (for example, if web2py is running inside apache, pdb will not work).
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 问题在于，如果你没有直接访问控制台（例如，如果 web2py 在 apache 内运行，pdb 将无法工作），则无法使用这种技术。
- en: If a console is not available, the embedded web2py debugger can be used. The
    only difference is that instead of calling pdb, there is gluon.debug with a customized
    PDB version that runs using a web2py interactive shell through the browser.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有控制台可用，可以使用嵌入的 web2py 调试器。唯一的区别是，不是调用 pdb，而是使用 gluon.debug，它运行一个定制的 PDB 版本，通过浏览器中的
    web2py 交互式 shell 来运行。
- en: 'In the previous example, replace `pdb.set_trace()` with `gluon.debug.stop_trace`,
    and add `gluon.debug.stop_trace()` prior to the `return` function to give back
    the control to web2py:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的示例中，将 `pdb.set_trace()` 替换为 `gluon.debug.stop_trace`，并在 `return` 函数之前添加
    `gluon.debug.stop_trace()` 以将控制权交还给 web2py：
- en: '[PRE4]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, when you open the index page, `http://127.0.0.1:8000/welcome/default/index`,
    the browser will block until you enter into the debug page (included in the administrative
    interface): `http://127.0.0.1:8000/admin/debug`.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，当你打开索引页面 `http://127.0.0.1:8000/welcome/default/index` 时，浏览器将阻塞，直到你进入调试页面（包含在管理界面中）：`http://127.0.0.1:8000/admin/debug`。
- en: At the debug page, you can issue any PDB command listed before, and interact
    with your program as though you where in a local console.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调试页面上，你可以发出之前列出的任何 PDB 命令，并像在本地控制台一样与你的程序交互。
- en: 'The following image show the last session, but inside the web2py debugger this
    time:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下图像显示了最后一个会话，但这次是在 web2py 调试器内部：
- en: '![How to do it...](img/5467OS_11_44.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5467OS_11_44.jpg)'
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The web2py debugger defines a `Pipe` class deriving from `Queue.Queue` for inter-thread
    communication, used as a standard input and output of PDB to interact with the
    user.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: web2py 调试器定义了一个从 `Queue.Queue` 继承的 `Pipe` 类，用于线程间通信，用作 PDB 的标准输入和输出，以与用户交互。
- en: The online shell-like interface uses an `ajax` callback to receive user commands,
    send them to the debugger, and print the results, as if the user were using PDB
    directly in a console.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在线类似壳的界面使用 `ajax` 回调来接收用户命令，将它们发送到调试器，并打印结果，就像用户直接在控制台中使用 PDB 一样。
- en: When `gluon.debug.set_trace()` is called (that is, in a controller of the debugged
    application), the custom web2py PDB instance is run, then the input and output
    is redirected and queued until the other threads open the queue and communicate
    with it (usually, the admin debug application is called from a separate browser
    window).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `gluon.debug.set_trace()`（即在调试应用的控制器中）时，自定义的 web2py PDB 实例会被运行，然后输入和输出会被重定向并排队，直到其他线程打开队列并与它通信（通常，管理员调试应用是从另一个浏览器窗口调用的）。
- en: Meanwhile, into the debugging process, PDB does all the work, and web2py only
    redirects the input and the output messages.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，在调试过程中，PDB 执行所有工作，而 web2py 只负责重定向输入和输出消息。
- en: When `gluon.debug.stop_trace()` is called, the thread sends `void` data (`None`
    value) to signal the monitor thread that debugging has finished.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `gluon.debug.stop_trace()` 时，线程发送 `void` 数据（`None` 值）到监视线程，以表示调试已完成。
- en: As said in the introduction, this functionality is intended for intermediate
    and advanced users, as if `stop_trace` is not called, or the debug controller
    is not refreshed, then the internal communication queue can block the web2py server
    (time-outs should be implemented to avoid deadlocks).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如介绍中所述，此功能旨在为中级和高级用户设计，因为如果未调用`stop_trace`，或者调试控制器未刷新，那么内部通信队列可能会阻塞web2py服务器（应实现超时以避免死锁）。
- en: Pages being debugged will be blocked until the debug ends, the same as with
    using `pdb` through the console. The debug controller will be blocked until the
    first breakpoint (`set_trace`) is reached.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 被调试的页面将在调试结束前被阻塞，这与通过控制台使用`pdb`相同。调试控制器将在达到第一个断点（`set_trace`）前被阻塞。
- en: For more details, see `gluon/debug.py` and `applications/admin/controllers/debug.py`
    inside the web2py source files.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息，请参阅web2py源文件中的`gluon/debug.py`和`applications/admin/controllers/debug.py`。
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'PDB is a fully featured debugger, supporting conditional breakpoints and advanced
    commands. The complete documentation can be found at the following URL:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: PDB是一个功能齐全的调试器，支持条件断点和高级命令。完整的文档可以在以下URL找到：
- en: '[http://docs.python.org/library/pdb.html](http://docs.python.org/library/pdb.html)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.python.org/library/pdb.html](http://docs.python.org/library/pdb.html)'
- en: PDB derives from the BDB module (Python Debugger framework), that can be used
    to extend this technique to add more features, implementing a lightweight remote
    debugger (it is a base debugger that doesn't need console interaction, so other
    user interfaces could be used).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: PDB源自BDB模块（Python调试框架），可用于扩展此技术以添加更多功能，实现轻量级远程调试器（它是一个不需要控制台交互的基本调试器，因此可以使用其他用户界面）。
- en: Also, the `Pipe` class is an example of interacting with long running processes
    that can be useful in COMET-like scenarios, to push data from the server to the
    browser, without keeping a connection open (using standard web servers and AJAX).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`Pipe`类是与长时间运行进程交互的示例，在类似COMET的场景中可能很有用，可以将数据从服务器推送到浏览器，而不需要保持连接打开（使用标准Web服务器和AJAX）。
- en: 'Combining both techniques, a new debugger (QDB) was developed, enabling remote
    debugging of web2py applications (even in production environments). In the following
    paragraphs, an example use case will be shown. For more information see the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 结合这两种技术，开发了一个新的调试器（QDB），使得能够远程调试web2py应用程序（即使在生产环境中）。在接下来的段落中，将展示一个示例用例。更多信息请参阅以下内容：
- en: '[http://code.google.com/p/rad2py/wiki/QdbRemotePythonDebugger](http://code.google.com/p/rad2py/wiki/QdbRemotePythonDebugger)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://code.google.com/p/rad2py/wiki/QdbRemotePythonDebugger](http://code.google.com/p/rad2py/wiki/QdbRemotePythonDebugger)'
- en: To use qdb, you have to download `qdb.py` (see the previous link), and put it
    on the `gluon.contrib` directory (it will be included in further releases of web2py).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用qdb，你必须下载`qdb.py`（见前一个链接），并将其放置在`gluon.contrib`目录中（它将被包含在web2py的后续版本中）。
- en: 'Then, in your controller, import it and call `set_trace` to start debugging,
    as shown in the following example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在你的控制器中导入它并调用`set_trace`以开始调试，如下例所示：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you open your controller and `set_trace` is reached, qdb will listen for
    a remote connection to attach to and start the debugger interaction. You can start
    the debug session by executing the qdb module (python `qdb.py)` as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开你的控制器并且达到`set_trace`时，qdb将监听远程连接以附加并开始调试器交互。你可以通过以下方式执行qdb模块（python `qdb.py`）来启动调试会话：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can interact with the same commands as PDB ones, that is, step, print a
    value, continue, and so on.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以与PDB相同的命令进行交互，即单步执行、打印值、继续等。
- en: Note that web2py (backend debugger) and qdb frontend debugger are different
    processes, so you can debug even a daemon webserver,such as Apache. Also, in the
    `qdb.py` source, you can change the address/port and password to connect to remote
    servers over the Internet.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，web2py（后端调试器）和qdb前端调试器是不同的进程，因此你可以调试甚至是一个守护进程Web服务器，例如Apache。此外，在`qdb.py`源文件中，你可以更改地址/端口和密码以连接到互联网上的远程服务器。
- en: web2py will include qdb and a web user interface debugger in the 2.0 release
    (for the development environment).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: web2py将在2.0版本中包含qdb和基于Web的用户界面调试器（用于开发环境）。
- en: 'For a full-featured IDE for web2py (for either development or production environments),
    including a visual debugger based in this recipe, see the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个功能齐全的web2py IDE（适用于开发或生产环境），包括基于此方法的视觉调试器，请参阅以下内容：
- en: '[http://code.google.com/p/rad2py](http://code.google.com/p/rad2py)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://code.google.com/p/rad2py](http://code.google.com/p/rad2py)'
- en: Debugging with Eclipse and PyDev
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Eclipse 和 PyDev 进行调试
- en: '**Eclipse** is an open source, extensible development platform and application
    framework, designed for building, deploying, and managing software across its
    entire software lifecycle. It is very popular in the Java world. **PyDev** is
    a Python extension for Eclipse, which allows the use of Eclipse as an IDE for
    Python, and therefore, for web2py. Here, we show you how to set up web2py to work
    well with these tools.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**Eclipse**是一个开源的可扩展开发平台和应用框架，旨在构建、部署和管理整个软件生命周期的软件。它在 Java 世界中非常受欢迎。**PyDev**是
    Eclipse 的 Python 扩展，允许将 Eclipse 用作 Python（以及 web2py）的 IDE，因此，在这里，我们向您展示如何设置 web2py
    以与这些工具良好地协同工作。'
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Download the latest Eclipse IDE ([http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)),
    and extract it to a folder of your choice.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载最新的 Eclipse IDE ([http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/))，并将其解压到您选择的文件夹中。
- en: Start Eclipse by running `eclipse.exe` in the folder. Notice that there is no
    installation for Eclipse, but you must have the Java runtime (http://java.com/en)
    installed.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在文件夹中运行 `eclipse.exe` 来启动 Eclipse。注意，Eclipse 没有安装，但你必须安装 Java 运行时（http://java.com/en）。
- en: 'Install PyDev by clicking on [Help **| Install New Software]**, and entering
    the following URL, then clicking the **Add** button:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击[帮助 **| 安装新软件**](https://example.org)，并输入以下网址，然后点击**添加**按钮来安装 PyDev：
- en: '[http://pydev.org/updates](http://pydev.org/updates)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://pydev.org/updates](http://pydev.org/updates)'
- en: Select all of the options and hit **[next]**.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有选项并点击**[下一步**](https://example.org)。
- en: It should prompt you to accept a license agreement. Continue through the wizard,
    and click **[No]** when it asks you if you want to restart.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该会提示你接受许可协议。继续通过向导，当它询问你是否想要重启时，点击**[否**](https://example.org)。
- en: 'Install the correct mercurial version for your operating system:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的操作系统安装正确的 mercurial 版本：
- en: '[http://mercurial.selenic.com](http://mercurial.selenic.com%20)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://mercurial.selenic.com](http://mercurial.selenic.com%20)'
- en: 'Go back to **Help | Install New Software**, and enter the following URL:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**帮助 | 安装新软件**，并输入以下网址：
- en: '[http://cbes.javaforge.com/update](http://cbes.javaforge.com/update)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://cbes.javaforge.com/update](http://cbes.javaforge.com/update)'
- en: Continue through the wizard, and click on **Yes** when it asks you to restart
    this time.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续通过向导，当它要求你重启时，点击**[是**](https://example.org)。
- en: 'Create a new project in Eclipse by going to **File | New | Project | Mercurial
    | Clone Mercurial Repository using Mercurial**, and enter the following URL:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到**文件 | 新建 | 项目 | Mercurial | 使用 Mercurial 克隆 Mercurial 仓库**来在 Eclipse 中创建一个新项目，并输入以下网址：
- en: '[http://code.google.com/p/web2py](http://code.google.com/p/web2py%20)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://code.google.com/p/web2py](http://code.google.com/p/web2py%20)'
- en: Enter `web2py` in the **Clone Directory Name** field.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**克隆目录名称**字段中输入`web2py`。
- en: 'Set the interpreter by going to **Window | Preferences | PyDev | Interpreter**,
    and choosing the path to your Python binary:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到**窗口 | 首选项 | PyDev | 解释器**来设置解释器，并选择你的 Python 二进制文件的路径：
- en: '![Getting ready](img/5467OS_11_45.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5467OS_11_45.jpg)'
- en: That's it! You can start debugging by finding `web2py.py` in the project tree,
    by right-clicking and selecting **Debug As | Python Run**. You can also pass arguments
    to `web2py.py` by choosing **Debug Configuration** from the same menu.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了！你可以通过在项目树中找到 `web2py.py` 并右键单击选择**调试作为 | Python 运行**来开始调试。你也可以通过从相同菜单中选择**调试配置**来传递参数给
    `web2py.py`。
- en: There's more...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Instead of installing web2py from the mercurial repository, you can make PyDev
    point to an existing web2py installation (it must be a source installation and
    not a web2py binary). In this case, simply go to **File | New | PyDev**, and specify
    the directory of your web2py installation:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是从 mercurial 存储库安装 web2py，你可以让 PyDev 指向现有的 web2py 安装（它必须是一个源安装，而不是 web2py
    二进制文件）。在这种情况下，只需转到**文件 | 新建 | PyDev**，并指定你的 web2py 安装目录：
- en: '![There''s more...](img/5467OS_11_46.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/5467OS_11_46.jpg)'
- en: Updating web2py using a shell script
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 shell 脚本更新 web2py
- en: 'The web2py admin interface provides an **upgrade** button, which downloads
    the latest web2py, and unzips it over the old one (it does not overwrite applications
    except welcome, admin, and examples). This is ok, but it presents some potential
    problems:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: web2py 管理员界面提供了一个**升级**按钮，它会下载最新的 web2py，并将其解压到旧版本之上（除了欢迎、管理员和示例之外，它不会覆盖应用程序）。这是可以的，但它会带来一些潜在的问题：
- en: The admin may be disabled
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员可能已被禁用
- en: You may want to update many installations at once, and would rather do it programmatically
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能希望一次性更新多个安装，并且更愿意通过编程方式来做。
- en: You may want to archive the previous version, in case you need reverting
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能想要存档之前的版本，以防需要回滚
- en: The script we provide in this recipe is only useful for solving these problems
    in Linux and on a Mac.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个菜谱中提供的脚本仅适用于解决Linux和Mac上的这些问题。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Move under the `web2py` folder:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件移动到 `web2py` 文件夹下：
- en: '[PRE7]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Make sure that you are the same user who owns the web2py folder, or you at
    least have the `write` permission. Save the following script in a file (for example:
    `update_web2py.sh)`, and make it executable:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你是拥有web2py文件夹的用户，或者你至少有 `write` 权限。将以下脚本保存到文件中（例如：`update_web2py.sh`），并使其可执行：
- en: '[PRE8]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, run it:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，运行它：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There's more...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Yes, there is more. When upgrading web2py, the welcome application is upgraded,
    and it might contain a new appadmin, a new layout, and new JavaScript libraries.
    You may want to upgrade your applications as well. You can do this manually, and
    you have to be careful, because depending on how your applications work, this
    may break them. For an application called `app`, you can upgrade appadmin with
    the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，还有更多。当升级web2py时，欢迎应用程序也会升级，它可能包含新的appadmin、新的布局和新的JavaScript库。你可能还想升级你的应用程序。你可以手动进行，但必须小心，因为根据你的应用程序如何工作，这可能会破坏它们。对于名为
    `app` 的应用程序，你可以使用以下命令升级appadmin：
- en: '[PRE10]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can upgrade generic views with the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令升级通用视图：
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can upgrade web2py_ajax with the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令升级web2py_ajax：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And finally, you can upgrade all static files with the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以使用以下命令升级所有静态文件：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You may have to be more selective. Back up first and be careful.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要更加选择性地操作。首先备份，并小心行事。
- en: Creating a simple page statistics plugin
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的页面统计插件
- en: In this recipe, we will show you how to create a plugin to display page statistics
    in a hierarchical format.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将向您展示如何创建一个插件，以分层格式显示页面统计信息。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First of all, create a file called `models/plugin_stats.py`, which contains
    the following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个名为 `models/plugin_stats.py` 的文件，其中包含以下代码：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you want to get the results displayed to the visitor, add the following to
    `views/layout.html:`
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要将结果显示给访客，请将以下内容添加到 `views/layout.html`：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `plugin` file is a model file, and is executed at every request. It calls
    the following query, which defines a table to store hits, and each record is identified
    by a `page_key (request.env.path_info)` and a `page_subkey (request.query_string)`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugin` 文件是一个模型文件，在每次请求时都会执行。它调用以下查询，定义一个存储点击次数的表，每条记录由 `page_key (request.env.path_info)`
    和 `page_subkey (request.query_string)` 标识。'
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If a record with this key and subkey does not exist, it is created. If it exists,
    it is retrieved, and the field `hits` is incremented by one. The function `_`
    has a weird name, but there is nothing special about it. You can choose a different
    name; we just do not wish to pollute the namespace, as the function is needed
    only once. The function returns a `Storage` object assigned to `plugin_stats`,
    which contains the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不存在具有此键和子键的记录，则创建它。如果存在，则检索它，并将字段 `hits` 的值增加一。函数 `_` 有一个奇怪的名字，但并没有什么特别之处。你可以选择不同的名字；我们只是不希望污染命名空间，因为这个函数只需要使用一次。该函数返回一个分配给
    `plugin_stats` 的 `Storage` 对象，其中包含以下内容：
- en: '`hits:` This is the number of hits corresponding to the current `page_key`
    and `page_subkey`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hits:` 这是与当前 `page_key` 和 `page_subkey` 对应的点击次数'
- en: '`total:` This is the sum of the hits for the same `page_key` as the current
    page but different subkeys'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`total:` 这是与当前页面相同的 `page_key` 但不同子键的点击次数总和'
- en: '`widget:` This is a span displaying the hits, and `total`, which can be embedded
    in views'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`widget:` 这是一个显示点击次数的span，以及 `total`，它可以嵌入到视图中'
- en: There's more...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Notice that you can decide to change the following lines into something else,
    and use different variables to group pages for counting purposes:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你可以选择将以下行更改为其他内容，并使用不同的变量来对页面进行分组以进行计数：
- en: '[PRE17]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Rounding corners without images or JavaScript
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无需图像或JavaScript的圆角
- en: 'Modern browsers support CSS directives for rounding corners. They include the
    following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现代浏览器支持CSS指令来圆角。它们包括以下内容：
- en: WebKit (Safari, Chrome)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebKit（Safari，Chrome）
- en: Gecko (Firefox)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gecko（Firefox）
- en: Opera (with a major hack)
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧珀（需要重大修改）
- en: Getting ready
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We assume that you have a view containing the following HTML code, and you
    want to round the corner of the `box` class:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设你有一个包含以下HTML代码的视图，并且你想要圆角 `box` 类：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In order to see the effect, we also need to change the background color. In
    the `style` file, for example, add the following code for the default layout in
    `static/styles/base.css:`
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到效果，我们还需要更改背景颜色。例如，在`style`文件中，为默认布局在`static/styles/base.css`中添加以下代码：
- en: '[PRE19]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The first line `-moz-border-radius: 5px`; is interpreted only by Firefox, and
    ignored by other browsers. The second line is interpreted only by Safari and Chrome.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '第一行`-moz-border-radius: 5px`仅被Firefox解释，其他浏览器忽略。第二行仅被Safari和Chrome解释。'
- en: There's more...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'What about Opera? Opera does not have a CSS directive for rounded corners,
    but you can modify the previous CSS as follows, and have web2py generate a dynamic
    image to use as the background with the requested color and rounded corners:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，关于Opera呢？Opera没有CSS指令来设置圆角，但你可以按照以下方式修改之前的CSS，让web2py生成一个动态图像，用作背景，并具有所需的颜色和圆角：
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To this purpose, create a `controllers/images.py` file, and add the following
    code to it:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了达到这个目的，创建一个`controllers/images.py`文件，并将以下代码添加到其中：
- en: '[PRE21]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This code will generate an SVG image, dynamically.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将动态生成一个SVG图像。
- en: 'Reference: [http://home.e-tjenesten.org/~ato/2009/08/border-radius-opera](http://home.e-tjenesten.org/~ato/2009/08/border-radius-opera).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：[http://home.e-tjenesten.org/~ato/2009/08/border-radius-opera](http://home.e-tjenesten.org/~ato/2009/08/border-radius-opera)。
- en: Setting a cache.disk quota
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置cache.disk配额
- en: This recipe is about web2py using RAM memory for **disk caching** on Linux (with
    `tmpfs)`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方是关于web2py在Linux上使用RAM内存进行**磁盘缓存**（使用`tmpfs`）。
- en: '`cache.disk` is a popular caching mechanism that allows multiple web2py installations
    that share a file system to share cache. It is not as efficient as `memcache`,
    as writing on a shared file system can be a bottleneck; nevertheless this is an
    option for some users. If you are using `cache.disk`, you may want to limit the
    amount of data that gets written to cache by setting a **quota**. This can be
    achieved by creating a temporary memory-mapped file system with the added benefit
    of improving performances.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`cache.disk`是一种流行的缓存机制，允许多个共享文件系统的web2py安装共享缓存。它不如`memcache`高效，因为在对共享文件系统进行写入时可能会成为瓶颈；尽管如此，这仍然是某些用户的一个选项。如果你使用`cache.disk`，你可能想通过设置**配额**来限制写入缓存的数据量。这可以通过创建一个临时内存映射文件系统来实现，同时还能提高性能。'
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The main idea is to use `cache.disk` with `tmpfs`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思想是使用`cache.disk`与`tmpfs`。
- en: 'First of all, you need to log in as `root` and execute the following command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要以`root`身份登录并执行以下命令：
- en: '[PRE22]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here:'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里：
- en: '`$folder_path` is a path to the folder where you mount your slice of RAM'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$folder_path`是你挂载RAM片段的文件夹路径'
- en: '`$size` is the amount of memory you want to dedicate (`M` - megabytes)'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$size`是你想要分配的内存量（`M` - 兆字节）'
- en: 'For example:'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE23]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You have just allocated 200 MB of your RAM. Now we have to map it in a web2py
    application. Just write the following in your models:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你刚刚分配了200 MB的RAM。现在我们得在web2py应用程序中将其映射。只需在你的模型中写下以下内容：
- en: '[PRE24]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'So, in our case:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，在我们的情况下：
- en: '[PRE25]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, when you use:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当你使用：
- en: '[PRE26]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Or the following:'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者以下内容：
- en: '[PRE27]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You have have ram space quota for every query/controller/etc cached, and each
    one can have a different size setting.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以为每个查询/控制器等缓存的ram空间设置配额，并且每个都可以有不同的尺寸设置。
- en: Checking if web2py is running using cron
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用cron检查web2py是否正在运行
- en: If you are on a UNIX machine, you may want to monitor whether web2py is running.
    A production quality solution to this problem is using **Monit:** [http://mmonit.com/monit/documentation/](http://mmonit.com/monit/documentation/).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一台UNIX机器上，你可能想监控web2py是否正在运行。针对此问题的生产级解决方案是使用**Monit**：[http://mmonit.com/monit/documentation/](http://mmonit.com/monit/documentation/)。
- en: It can monitor your processes, log problems, and also restart them for you automatically.
    Here we present a do-it-yourself simpler solution, in the minimalist web2py spirit.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以监控你的进程，记录问题，还可以自动为你重启它们。在这里，我们提供一个简单的DIY解决方案，遵循web2py的极简精神。
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will create the file, `/root/bin/web2pytest.sh`, to check if web2py runs,
    and start web2py if it is not running.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建文件`/root/bin/web2pytest.sh`，以检查web2py是否正在运行，如果未运行则启动web2py。
- en: '[PRE28]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now edit the `crontab` using the `shell` command:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用`shell`命令编辑`crontab`：
- en: '[PRE29]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add a `crontab` line that instructs the `crontab` deamon to run our script
    every three minutes:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一条`crontab`行，指示`crontab`守护进程每三分钟运行我们的脚本：
- en: '[PRE30]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Notice that you may have to edit the first few lines of the script to set the
    right username, port, and web2py path that you want to monitor/restart.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意，你可能需要编辑脚本的前几行来设置正确的用户名、端口和想要监控/重启的web2py路径。
- en: Building a Mercurial plugin
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Mercurial插件
- en: web2py's admin supports **Mercurial** for versioning, but can one pull and push
    changes through HTTP?
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: web2py的admin支持**Mercurial**进行版本控制，但能否通过HTTP进行拉取和推送更改？
- en: In this recipe, we present a plugin for web2py that consists of a single file.
    It wraps Mercurial's `hgwebdir wsgi` application, and allows one to interact with
    the mercurial repository of the web2py application either from a web browser or
    the `hg` client.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们介绍了一个由单个文件组成的web2py插件。它包装了Mercurial的`hgwebdir wsgi`应用，并允许用户从网页浏览器或`hg`客户端与web2py应用程序的mercurial仓库进行交互。
- en: 'This is interesting for the following two reasons:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于以下两个原因来说很有趣：
- en: On one side, if you use mercurial to version control your application, this
    plugin allows you to share the repository online with other people.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一方面，如果您使用mercurial对您的应用程序进行版本控制，此插件允许您将仓库在线共享给其他人。
- en: On the other side, this is a great example of how to call a third party WSGI
    application from web2py.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一方面，这是一个如何从web2py调用第三方WSGI应用的绝佳例子。
- en: Getting ready
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This requires that you run web2py from source, and you have mercurial installed.
    You can install mercurial using the following command:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这要求您从源运行web2py，并且您已安装mercurial。您可以使用以下命令安装mercurial：
- en: '[PRE31]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This plugin will only work on Python distributions that have mercurial installed.
    You could package mercurial into the web2py application itself, but we do not
    recommend it. It makes very little sense to use this plugin if you are not a regular
    mercurial user.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件仅在已安装mercurial的Python发行版上才能工作。您可以将mercurial打包到web2py应用程序本身中，但我们不建议这样做。如果您不是mercurial的常规用户，使用此插件几乎没有意义。
- en: How to do it...
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'All you need to do to create the plugin is create a new controller, "plugin_mercurial.py":'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此插件所需的所有操作只是创建一个新的控制器，"plugin_mercurial.py"：
- en: '[PRE32]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Here is a view of a sample report from the shell:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是来自shell的示例报告视图：
- en: '![How to do it...](img/5467OS_11_47.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/5467OS_11_47.jpg)'
- en: Here is a view from the `plugin_above:`
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`plugin_above:`的视图：
- en: '![How to do it...](img/5467OS_11_48.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/5467OS_11_48.jpg)'
- en: 'You can also push to the repository. To be able to push to the repository,
    you need to edit/create the file `application/<app>/.hg/hgrc`, and add the following
    entries for example:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将代码推送到仓库。要能够推送代码到仓库，您需要编辑/创建文件`application/<app>/.hg/hgrc`，并添加以下条目，例如：
- en: '[PRE33]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Clearly, this is recommended for a trusted environment only. Also, see the `hgrc`
    documentation at [http://www.selenic.com/mercurial/hgrc.5.html#web](http://www.selenic.com/mercurial/hgrc.5.html#web).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这仅推荐在受信任的环境中使用。另外，请参阅[http://www.selenic.com/mercurial/hgrc.5.html#web](http://www.selenic.com/mercurial/hgrc.5.html#web)中的`hgrc`文档。
- en: The `hgwebdir` WSGI application can expose multiple repositories, although for
    a web2py application-specific plugin, this is probably not what you want. If you
    do, however, want just that, try tweaking the `config` variable that is passed
    to the `hgwebdir` constructor. For example, you could pass the name of the repository
    to access through `request.args[0]`. URLs are even longer then, so you might want
    to set up some rules in `routes.py`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`hgwebdir` WSGI应用可以公开多个仓库，尽管对于特定于web2py应用程序的插件来说，这可能不是您想要的。如果您确实想要这样，尝试调整传递给`hgwebdir`构造函数的`config`变量。例如，您可以通过`request.args[0]`传递要访问的仓库名称。URL会更长，因此您可能需要在`routes.py`中设置一些规则。'
- en: '[PRE34]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Building a pingback plugin
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建pingback插件
- en: Pingbacks allow blog posts and other resources, such as photos, to automatically
    notify one another of backlinks. This plugin exposes a decorator to pingback-enable
    controller functions, and a pingback client to inform a **Wordpress** blog, for
    example, that we link to it.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Pingbacks 允许博客文章和其他资源，如照片，自动通知彼此的回链。此插件公开了一个装饰器来启用pingback的控制器函数，以及一个pingback客户端来通知例如**Wordpress**博客，我们链接到了它。
- en: '**Pingback** is a standard protocol, and version 1.0 is described at the following
    URL:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pingback**是一个标准协议，其1.0版本在以下URL中描述：'
- en: '[http://www.hixie.ch/specs/pingback/pingback](http://www.hixie.ch/specs/pingback/pingback)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.hixie.ch/specs/pingback/pingback](http://www.hixie.ch/specs/pingback/pingback)'
- en: '`plugin_pingback` consists of one single module file.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugin_pingback` 由一个单独的模块文件组成。'
- en: How to do it...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'First of all, create a `module/plugin_pingback.py` file, with the following
    code:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个`module/plugin_pingback.py`文件，包含以下代码：
- en: '[PRE35]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And here is how to use it:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用它的方法：
- en: Import the module
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入模块
- en: Decorate actions that should receive pingbacks with `listen`
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`listen`装饰应该接收pingback的动作
- en: Modify actions that should send pingbacks with `ping`
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ping`修改应该发送pingback的动作
- en: 'Here is a concrete example, where we assume a simple `blog` system:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个具体的例子，我们假设有一个简单的`博客`系统：
- en: '[PRE36]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `plugin_pingback.py` module provides the core functionality of the `plugin_pingback`
    plugin.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugin_pingback.py`模块提供了`plugin_pingback`插件的核心理念。'
- en: The class `PingbackServer` handles the incoming pingbacks. The class `PingbackClient`
    is used to notify external sites of the backlinks. In your code, you should not
    have to use these classes directly. Instead, use the module functions `listen`
    and `ping`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`PingbackServer`类处理传入的pingback。`PingbackClient`类用于通知外部网站关于反向链接。在你的代码中，你不需要直接使用这些类。相反，使用模块函数`listen`和`ping`。'
- en: '`listen` is a decorator to be used with controller functions you want to pingback-enable.
    Under the hood, it uses the `PingbackServer`. This decorator accepts the `db`
    as its first parameter, and optionally a second `callback` parameter. The `callback`
    signature is the function name (source, `target`, or `html)`, where `source` is
    the ping- back source URI, `target` is the target URI, and `html` is the source
    page content.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`listen`是一个用于你想要pingback启用控制器函数的装饰器。在底层，它使用`PingbackServer`。这个装饰器接受`db`作为其第一个参数，并可选地接受第二个`callback`参数。`callback`签名是函数名（source、`target`或`html`），其中`source`是pingback源URI，`target`是目标URI，`html`是源页面内容。'
- en: '`ping` is used to notify external sites of backlinks using the `PingbackClient`.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`ping`用于使用`PingbackClient`通知外部网站关于反向链接。'
- en: The first parameter is, as for `listen`, the `db` object, the second is the
    source page URI, the third is either a string or a list of target URIs, and finally
    there is the `commit` parameter (defaults to `True)`. A `DB commit` is likely
    to be required at this point, as the controller function containing the ping is
    probably generating the source page. If the source page is not committed, the
    pingback system of the target page will not be able to find it, and thus rejects
    the pingback request.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是，对于`listen`，`db`对象，第二个是源页面URI，第三个是字符串或目标URI的列表，最后是`commit`参数（默认为`True`）。在这个点上，可能需要进行`DB
    commit`，因为包含ping的控制函数可能正在生成源页面。如果源页面没有提交，目标页面的pingback系统将无法找到它，因此拒绝pingback请求。
- en: Changing views for mobile browsers
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为移动浏览器更改视图
- en: If your web application is accessed from a mobile device, such as a phone, then
    most likely, the visitor is using a small screen and limited bandwidth to access
    your website. You may want to detect this, and serve a light version of your pages.
    What **light** means depends on the context, but here we assume that you simply
    want to change the default layout for these visitors.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的Web应用程序是从移动设备（如手机）访问的，那么很可能是访问者正在使用小屏幕和有限的带宽来访问你的网站。你可能想检测这一点，并为这些访问者提供页面的轻量级版本。**轻量级**的含义取决于上下文，但在这里我们假设你只是想为这些访问者更改默认布局。
- en: web2py provides two APIs that allow you to do this.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: web2py提供了两个API，允许你完成这项操作。
- en: 'You can detect when a client is using a mobile device:'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以检测客户端是否正在使用移动设备：
- en: '[PRE37]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You can ask web2py to replace the default view `*.html` with `*.mobile.html`,
    for any action using the `@mobilize` decorator.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以要求web2py将默认视图`*.html`替换为`*.mobile.html`，对于任何使用`@mobilize`装饰器的操作。
- en: '[PRE38]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In this recipe, we will show you how to do this manually, using third-party
    libraries: `mobile.sniffer` and `mywurlf`, instead of using the built-in web2py
    APIs.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将向你展示如何手动完成这项操作，使用第三方库：`mobile.sniffer`和`mywurlf`，而不是使用内置的web2py API。
- en: Getting ready
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This slice uses the libraries `mobile.sniffer` and `pywurfl` to parse the `USER_AGENT`
    header from the HTTP request. We will create a single function that returns `True/False`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这个片段使用库`mobile.sniffer`和`pywurfl`来解析HTTP请求中的`USER_AGENT`头。我们将创建一个返回`True/False`的单个函数。
- en: 'You can install both of them with the following commands:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令安装它们：
- en: '[PRE39]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How to do it...
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will create our function so that, for example, if we have this request,[http://example.com/app/controller/function](http://example.com/app/controller/function),
    the regular view will be in `views/controller/function.html`, while the mobile
    view will be in `views/controller/function.mobile.html`. And if it does not exist,
    it will revert to the regular one.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建我们的函数，例如，如果我们有这个请求[http://example.com/app/controller/function](http://example.com/app/controller/function)，常规视图将在`views/controller/function.html`中，而移动视图将在`views/controller/function.mobile.html`中。如果它不存在，它将回退到常规视图。
- en: This can be achieved through the following function, which you can place in
    any model file, for example `models/plugin_detect_mobile.py`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下函数实现，您可以将它放在任何模型文件中，例如`models/plugin_detect_mobile.py`。
- en: '[PRE40]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Background processing with a database queue
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据库队列进行后台处理
- en: Let's consider a very typical application that requires users to register. After
    a user submits the registration form, the application sends out a confirmation
    e-mail, asking the user to verify the sign-up process. The problem, however, is
    that the user does not get an immediate response to the next page, since they
    have to wait for the application to connect to the SMTP mail server, send the
    message, save some database results, and then finally, return the next view. Another
    pathological case could be argued; let's say this same application provides a
    dashboard that allows the user to download PDF reports, or data in an OpenOffice
    `Calc` format. For the sake of argument, this process usually takes five to ten
    minutes to generate the PDF or spreadsheet. Obviously, it does not make sense
    for a user to wait on the server to process this data, since they would not be
    able to perform any other actions.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个非常典型的需要用户注册的应用程序。在用户提交注册表单后，应用程序会发送一封确认电子邮件，要求用户验证注册过程。然而，问题在于用户不会立即收到下一页的响应，因为他们必须等待应用程序连接到SMTP邮件服务器，发送消息，保存一些数据库结果，然后最终返回下一视图。另一个可能的病理情况可以是；假设这个相同的应用程序提供了一个仪表板，允许用户下载PDF报告或OpenOffice
    `Calc`格式的数据。为了辩论，这个过程通常需要五到十分钟来生成PDF或电子表格。显然，让用户等待服务器处理这些数据是没有意义的，因为他们将无法执行任何其他操作。
- en: Instead of actually performing these actions that may take a while to run, the
    application can just register a request in the database to perform the said action.
    A background process executed by `cron` could read these requests, and then proceed
    to process them.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是实际执行这些可能需要较长时间运行的操作，应用程序只需在数据库中注册一个请求来执行所述操作。由`cron`执行的后台进程可以读取这些请求，然后继续处理它们。
- en: For the user registration, just provide a database table called `emails_to_send`;
    this will cause a background process that would run every minute, and send all
    of the e-mails in a single session. The user doing the registration benefits from
    a speedier sign-up, and our application benefits by needing to only make a single
    SMTP connection for multiple e-mails.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户注册，只需提供一个名为`emails_to_send`的数据库表；这将导致一个每分钟运行一次的后台进程，并发送单次会话中的所有电子邮件。进行注册的用户将受益于更快的注册速度，而我们的应用程序则受益于只需要为多封电子邮件进行一次SMTP连接。
- en: For report generation, the user could submit a request for the file in question.
    They might visit a download page on the application, which shows processing for
    files that have been requested. Again, a background process could load all report
    requests, process them into output files, and then save the results to the database.
    The user would re-visit the download page, and be able to download the processed
    file. The user could continue performing other tasks, while waiting for the report
    to finish.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 对于报告生成，用户可以提交请求以获取相关文件。他们可能会访问应用程序上的下载页面，该页面显示了已请求的文件的处理情况。同样，一个后台进程可以加载所有报告请求，将它们处理成输出文件，并将结果保存到数据库中。用户可以重新访问下载页面，并能够下载处理后的文件。用户可以在等待报告完成的同时继续执行其他任务。
- en: How to do it...
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: For this example, we will use the user report requests. This will be a dentistry
    website, where clients information is stored. The office clerk would like to know
    the demographic breakdown of their clients by zip code, to help determine where
    would be the best place to send out their new advertising campaign. Lets just
    assume this is a very large dentist's office that has over 100,000 clients. This
    report could take a while.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用用户报告请求。这将是一个牙科网站，其中存储着客户信息。办公室职员希望了解客户按邮编的人口分布情况，以帮助确定在哪里发送他们的新广告活动最为合适。让我们假设这是一个非常大的牙科诊所，拥有超过10万客户。这份报告可能需要一些时间。
- en: 'For this, we will need the following tables:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要以下表：
- en: '[PRE41]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'When a user navigates to the `reports` page, they are presented with options
    for possible reports that could be downloaded. The following is an example of
    a controller function for a report request:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户导航到`reports`页面时，他们会看到可以下载的可能报告的选项。以下是一个报告请求的控制器函数示例：
- en: '[PRE42]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now for the script that would process all report requests.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是处理所有报告请求的脚本。
- en: '[PRE43]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now that we have the code to generate reports, it needs a way to execute. Let's
    add the call to this function to the `web2py cron/crontab` file.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了生成报告的代码，它需要一个执行的方式。让我们将此函数的调用添加到`web2py cron/crontab`文件中。
- en: '[PRE44]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now, when the user requests the page, they will either see that the report is
    processing, or a link to download the generated report.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当用户请求页面时，他们要么会看到报告正在处理，要么会看到一个下载生成报告的链接。
- en: There's more...
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we used a `Poor-Man's Queue` example of dispatching tasks to
    the background processes. This method will scale up to a certain amount of users,
    however, at some point, an external message queue could be used to speed things
    up even more.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用了`Poor-Man's Queue`的例子来将任务调度到后台进程。然而，这种方法可以扩展到一定数量的用户，但在某个时候，可以使用外部消息队列来进一步加快速度。
- en: 'Since version 1.99.1, web2py includes its own built-in scheduler and scheduling
    API. It is documented in the latest edition of the official web2py manual, but
    you can also read more of it at the following link:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 自从版本1.99.1以来，web2py包括其自己的内置调度器和调度API。它在最新版的官方web2py手册中有记录，但您也可以在以下链接中了解更多：
- en: '[http://www.web2py.com/examples/static/epydoc/web2py.gluon.scheduler-module.html](http://www.web2py.com/examples/static/epydoc/web2py.gluon.scheduler-module.html)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.web2py.com/examples/static/epydoc/web2py.gluon.scheduler-module.html](http://www.web2py.com/examples/static/epydoc/web2py.gluon.scheduler-module.html)'
- en: 'There is a plugin that integrated celery into web2py:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个插件将celery集成到web2py中：
- en: '[http://code.google.com/p/web2py-celery/](http://code.google.com/p/web2py-celery/)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://code.google.com/p/web2py-celery/](http://code.google.com/p/web2py-celery/)'
- en: The former uses database access to distribute tasks, and the latter uses **RabbitMQ**
    through celery to implement enterprise message queue servers.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 前者使用数据库访问来分配任务，而后者通过celery使用**RabbitMQ**来实现企业消息队列服务器。
- en: How to effectively use template blocks
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何有效地使用模板块
- en: As you may already know, the web2py template system is very flexible, providing
    template inheritance, inclusions, and a recently new (and under-documented) feature
    called blocks.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经知道，web2py模板系统非常灵活，提供了模板继承、包含以及一个最近新出现（且文档不足）的功能，称为块。
- en: A **block** is a way that child templates can override certain portions of their
    parent templates, and replace or extend the content with their own.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**块**是子模板可以覆盖其父模板的某些部分，并用它们自己的内容替换或扩展内容的一种方式。'
- en: For example, a typical layout template includes several places that could be
    overridden, based on the current page a user is located on. Examples include the
    title bar, portions of the navigation, perhaps a page title, or keywords.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个典型的布局模板包括几个可以根据用户当前所在页面进行覆盖的位置。例如，标题栏、导航的部分、可能是一个页面标题或关键词。
- en: In this example, we will consider a typical enterprise application that contains
    custom JavaScript on each page to handle elements local to only that page; the
    method of solving this will generate a base pattern for block usage.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将考虑一个典型的企业应用，该应用在每个页面上都有自定义JavaScript来处理仅限于该页面的元素；解决这个问题的方法将为块的使用生成一个基本模式。
- en: How to do it...
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First, let's handle the basic pattern of using blocks, since this also solves
    the issue in our example application of needing a place to put extra JavaScript
    blocks within the`<head>` element of the HTML page.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们处理使用块的基本模式，因为这也解决了我们示例应用中需要在HTML页面`<head>`元素中放置额外JavaScript块的问题。
- en: 'Consider the following `layout.html` file:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下`layout.html`文件：
- en: '[PRE45]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'And the following `detail.html` file:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以及以下`detail.html`文件：
- en: '[PRE46]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This will render the following output file:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这将渲染以下输出文件：
- en: '[PRE47]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: There's more...
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Notice the use of `{{super}}` when overriding the title block. `{{super}}` will
    take the HTML output of the parent block that it is overriding, and insert it
    at that position. So, in this example, the page title can retain the global sites
    title, but insert this unique page name into the title.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在覆盖标题块时使用`{{super}}`。`{{super}}`将覆盖其父块的HTML输出，并将其插入到该位置。因此，在这个例子中，页面标题可以保留全局站点标题，但将这个独特的页面名称插入到标题中。
- en: Another thing to note is that when a block is not defined in a child template,
    it will still render. Since there was no definition for the `body_title` block,
    it still rendered `My web2py App`.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 另一点需要注意的是，当一个块在子模板中没有定义时，它仍然会渲染。由于没有为`body_title`块定义，它仍然渲染了`My web2py App`。
- en: Also, blocks deprecate the need for the old web2py `{{include}}` helper, as
    the child template could just define a block that represents the location for
    the main content of the page. This is a design pattern used heavily in other popular
    template languages.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Making standalone applications with web2py and wxPython
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: web2py can be used to make desktop-visual applications that doesn't require
    a browser or a web server. This can be useful when standalone applications are
    needed (that is, no web server installation), and also, this approach allows to
    simplify user interface programming without advanced JavaScript or CSS requirements,
    giving direct access to a user's machine operating system and libraries.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to use **models** and **helpers** to create a sample
    form, to store basic person information into a database using the **wxPython**
    GUI toolkit, in fewer than 100 lines of code, following the best practices of
    web2py.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you need a working Python and web2py installation, and then download
    and install wxPython from ( [http://www.wxpython.org/download.php](http://www.wxpython.org/download.php)).
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Second, you need **gui2py**, a small library that manages forms, bridging web2py
    and wx (http://code.google.com/p/gui2py/downloads/list).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also pull the source code from the project repository using Mercurial:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: How to do it...
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this basic recipe, we will cover the following steps:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Import wxPython, gui2py, and web2py.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a sample `Person` table, with several fields and validators.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create wxPython GUI objects (application, main frame window, and html browser).
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a web2py SQL form for the `Person` table.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the event handler to process the user input (validating and inserting
    the row).
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the event handler, show the window, and start to interact with the user.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The full example follows, with a self-explained source code. Type it in, and
    save as a usual Python script, for example, in your home directory as `my_gui2py_app.py:`
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Remember to change `/home/reingart/web2py /home/reingart/gui2py` to your web2py
    and gui2py installation paths.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have saved the file, run it:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You should see the application window ready to receive data, and test it! It
    should work as a usual web2py application:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_11_49.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses basic wxPython objects, in this case, the `wx.HTML` control
    (you can see the original `form_example.zip` that is the base to gui2py):'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '[http://wiki.wxpython.org/wxHTML](http://wiki.wxpython.org/wxHTML)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '`wx.HTML` is basically the **wxPython** browser, and it can display simple
    HTML markup (mainly intended to show help pages, reports, and do simple printing).
    It can be extended to render custom HTML tags (FORM, `INPUT, TEXTAREA`, and so
    on), emulating a normal browser.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: First, the program should import the required libraries, define the models,
    and create a `wx` application and a basic window (a `Frame` in the `wx` world).
    Once the `wx.HTML` control is created inside the main window, the event handler
    should be connected to tell `wx` how to respond to user actions. The event handler
    receives the form data already parsed, it does the standard form validation and
    inserts the row data using DAL (in a similar way to web2py controllers). Finally,
    this is a GUI application, so it must call the `MainLoop`. It runs forever, waiting
    for the user events, and calling the appropriate event handlers.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，程序应导入所需的库，定义模型，并创建一个`wx`应用程序和一个基本窗口（在`wx`世界中是一个`Frame`）。一旦在主窗口中创建了`wx.HTML`控件，事件处理程序应连接到`wx`，以告知如何响应用户操作。事件处理程序接收已解析的表单数据，执行标准表单验证并使用DAL（类似于web2py控制器）插入行数据。最后，这是一个GUI应用程序，因此必须调用`MainLoop`。它将永远运行，等待用户事件，并调用适当的事件处理程序。
- en: The main advantage is that `wx.HTML` removes the need of a JavaScript engine,
    so the events can be programmed directly in Python, and it also assures the same
    results in different platforms where `wxPython` runs, without the troubles of
    HTML compatibility issues.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 主要优势在于`wx.HTML`消除了对JavaScript引擎的需求，因此事件可以直接在Python中编程，并且确保了在`wxPython`运行的不同平台上获得相同的结果，无需处理HTML兼容性问题。
- en: As the code is a standard Python program, you can access advanced features directly
    in the user machine, such as opening files or socket connections, or using libraries
    to interact with webcams, USB devices or legacy hardware.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 由于代码是一个标准的Python程序，您可以直接在用户机器上访问高级功能，例如打开文件或套接字连接，或使用库与摄像头、USB设备或旧式硬件交互。
- en: Also, this approach allows to reuse your web2py knowledge (DAL, models, helpers,
    built-in validation, and so on), speeding up the development of standalone visual
    GUI applications, following the best practices of web development.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这种方法允许您重用您的web2py知识（数据访问层DAL、模型、辅助工具、内置验证等），从而加快独立可视化GUI应用程序的开发速度，遵循Web开发的最佳实践。
- en: There's more...
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe could be further extended with more advanced wxPython controls,
    such as `wx.ListCtrl` or `wx.Grid`, enabling to make responsive fully-featured
    applications with spreadsheets capabilities, custom cell editors, virtual rows
    to browse huge quantities of records, and so on.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方可以通过添加更多高级wxPython控件进一步扩展，例如`wx.ListCtrl`或`wx.Grid`，从而能够制作具有电子表格功能的响应式完整功能应用程序，自定义单元格编辑器，虚拟行以浏览大量记录等。
- en: Also, `wx.AUI` **(Advanced User Interface)** allows to build modern looking
    applications with docking toolbars and panels, visual styles, and so on.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`wx.AUI`（高级用户界面）允许构建具有停靠工具栏和面板、视觉样式等的现代外观的应用程序。
- en: You can see more
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看更多
