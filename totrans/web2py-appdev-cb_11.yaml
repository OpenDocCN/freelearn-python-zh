- en: Chapter 11. Other Tips and Tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using PDB and the embedded web2py debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with Eclipse and PyDev
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating web2py using a shell script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple page statistics plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rounding corners without images or JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a `cache.disk` quota
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if web2py is running using `cron`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Mercurial plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a pingback plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing views for mobile browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Background processing with a database queue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to effectively use template blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making standalone applications with web2py and wxPython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter contains recipes that did not fit in any other chapter, and yet
    were considered important by typical web2py users. An example is how to use web2py
    with Eclipse. The latter is a very popular Java IDE that works well with Python,
    but presents some quirks when used with web2py, and here, we show you how to overcome
    those quirks with proper configuration. Other examples are how to develop applications
    that are mobile-friendly, and how to develop standalone applications that use
    a **wxPython GUI**.
  prefs: []
  type: TYPE_NORMAL
- en: Using PDB and the embedded web2py debugger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: web2py has interactive (web browser) debug capabilities built into the **admin**
    application, similar to shell, but issuing commands directly to **PDB**, which
    is the **Python Debugger**.
  prefs: []
  type: TYPE_NORMAL
- en: Although this is not a fully-featured visual debugger, it is useful to programmatically
    set up breakpoints, then step in and do variable and stack inspection, arbitrary
    code execution in the program context, instruction jump, and other operations.
  prefs: []
  type: TYPE_NORMAL
- en: The use of this debugger is optional, and it is intended for advanced users
    (it should be used with care, or you can block the web2py server). It is not imported,
    by default, and normal operation of web2py is not modified.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation can be enhanced and extended to do other kinds of COMET-like
    communication (pushing data from server to client using AJAX), with general purpose
    long-running processes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PDB is the Python Debugger, included in the standard library.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can start the debugger by writing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For example, let''s debug the welcome default index controller:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, when you open the index page: `http://127.0.0.1:8000/welcome/default/index`,
    the (PDB) prompt will appear in the console where you started web2py:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The debugger points out that we are stopped inside `welcome/controllers/default.py`
    at *line 20*. At this point, any `Pdb` command can be issued. The most useful
    ones are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`help:` This command prints the list of available commands'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`where:` This command prints the current stack trace'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list [first[, last]]:` This command lists the source code (between the first
    and the last lines)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p expression:` This command evaluates the expression and prints the result'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`! statement:` This command executes a Python statement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`step: step in:` This command executes the current line, entering functions'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next: step next:` This command executes the current line, not entering functions'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return: step return:` This command continues execution until the function
    exits'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`continue:` This command continues execution, and only stops at breakpoints'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jump lineno:` This command changes the next line to be executed'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`break filename:lineno:` This command sets a breakpoint'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quit:` This command quits from the debugger (aborts the current program)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The commands can be issued just by typing the first letter; for example, look
    at the following example session:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The commands were `n` for next (execute the line), `p` for a message to print
    the message variable, `!message=` to change its value to `hello web2py recipe!,
    w` to see the current stack trace, and `continue` to exit the debugger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The problem is that this technique cannot be used if you don't have direct access
    to a console (for example, if web2py is running inside apache, pdb will not work).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a console is not available, the embedded web2py debugger can be used. The
    only difference is that instead of calling pdb, there is gluon.debug with a customized
    PDB version that runs using a web2py interactive shell through the browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the previous example, replace `pdb.set_trace()` with `gluon.debug.stop_trace`,
    and add `gluon.debug.stop_trace()` prior to the `return` function to give back
    the control to web2py:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, when you open the index page, `http://127.0.0.1:8000/welcome/default/index`,
    the browser will block until you enter into the debug page (included in the administrative
    interface): `http://127.0.0.1:8000/admin/debug`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the debug page, you can issue any PDB command listed before, and interact
    with your program as though you where in a local console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following image show the last session, but inside the web2py debugger this
    time:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_11_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The web2py debugger defines a `Pipe` class deriving from `Queue.Queue` for inter-thread
    communication, used as a standard input and output of PDB to interact with the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: The online shell-like interface uses an `ajax` callback to receive user commands,
    send them to the debugger, and print the results, as if the user were using PDB
    directly in a console.
  prefs: []
  type: TYPE_NORMAL
- en: When `gluon.debug.set_trace()` is called (that is, in a controller of the debugged
    application), the custom web2py PDB instance is run, then the input and output
    is redirected and queued until the other threads open the queue and communicate
    with it (usually, the admin debug application is called from a separate browser
    window).
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, into the debugging process, PDB does all the work, and web2py only
    redirects the input and the output messages.
  prefs: []
  type: TYPE_NORMAL
- en: When `gluon.debug.stop_trace()` is called, the thread sends `void` data (`None`
    value) to signal the monitor thread that debugging has finished.
  prefs: []
  type: TYPE_NORMAL
- en: As said in the introduction, this functionality is intended for intermediate
    and advanced users, as if `stop_trace` is not called, or the debug controller
    is not refreshed, then the internal communication queue can block the web2py server
    (time-outs should be implemented to avoid deadlocks).
  prefs: []
  type: TYPE_NORMAL
- en: Pages being debugged will be blocked until the debug ends, the same as with
    using `pdb` through the console. The debug controller will be blocked until the
    first breakpoint (`set_trace`) is reached.
  prefs: []
  type: TYPE_NORMAL
- en: For more details, see `gluon/debug.py` and `applications/admin/controllers/debug.py`
    inside the web2py source files.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PDB is a fully featured debugger, supporting conditional breakpoints and advanced
    commands. The complete documentation can be found at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.python.org/library/pdb.html](http://docs.python.org/library/pdb.html)'
  prefs: []
  type: TYPE_NORMAL
- en: PDB derives from the BDB module (Python Debugger framework), that can be used
    to extend this technique to add more features, implementing a lightweight remote
    debugger (it is a base debugger that doesn't need console interaction, so other
    user interfaces could be used).
  prefs: []
  type: TYPE_NORMAL
- en: Also, the `Pipe` class is an example of interacting with long running processes
    that can be useful in COMET-like scenarios, to push data from the server to the
    browser, without keeping a connection open (using standard web servers and AJAX).
  prefs: []
  type: TYPE_NORMAL
- en: 'Combining both techniques, a new debugger (QDB) was developed, enabling remote
    debugging of web2py applications (even in production environments). In the following
    paragraphs, an example use case will be shown. For more information see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/rad2py/wiki/QdbRemotePythonDebugger](http://code.google.com/p/rad2py/wiki/QdbRemotePythonDebugger)'
  prefs: []
  type: TYPE_NORMAL
- en: To use qdb, you have to download `qdb.py` (see the previous link), and put it
    on the `gluon.contrib` directory (it will be included in further releases of web2py).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in your controller, import it and call `set_trace` to start debugging,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When you open your controller and `set_trace` is reached, qdb will listen for
    a remote connection to attach to and start the debugger interaction. You can start
    the debug session by executing the qdb module (python `qdb.py)` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can interact with the same commands as PDB ones, that is, step, print a
    value, continue, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note that web2py (backend debugger) and qdb frontend debugger are different
    processes, so you can debug even a daemon webserver,such as Apache. Also, in the
    `qdb.py` source, you can change the address/port and password to connect to remote
    servers over the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: web2py will include qdb and a web user interface debugger in the 2.0 release
    (for the development environment).
  prefs: []
  type: TYPE_NORMAL
- en: 'For a full-featured IDE for web2py (for either development or production environments),
    including a visual debugger based in this recipe, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/rad2py](http://code.google.com/p/rad2py)'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with Eclipse and PyDev
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Eclipse** is an open source, extensible development platform and application
    framework, designed for building, deploying, and managing software across its
    entire software lifecycle. It is very popular in the Java world. **PyDev** is
    a Python extension for Eclipse, which allows the use of Eclipse as an IDE for
    Python, and therefore, for web2py. Here, we show you how to set up web2py to work
    well with these tools.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the latest Eclipse IDE ([http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)),
    and extract it to a folder of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Eclipse by running `eclipse.exe` in the folder. Notice that there is no
    installation for Eclipse, but you must have the Java runtime (http://java.com/en)
    installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install PyDev by clicking on [Help **| Install New Software]**, and entering
    the following URL, then clicking the **Add** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://pydev.org/updates](http://pydev.org/updates)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select all of the options and hit **[next]**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It should prompt you to accept a license agreement. Continue through the wizard,
    and click **[No]** when it asks you if you want to restart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the correct mercurial version for your operating system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://mercurial.selenic.com](http://mercurial.selenic.com%20)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go back to **Help | Install New Software**, and enter the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://cbes.javaforge.com/update](http://cbes.javaforge.com/update)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Continue through the wizard, and click on **Yes** when it asks you to restart
    this time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new project in Eclipse by going to **File | New | Project | Mercurial
    | Clone Mercurial Repository using Mercurial**, and enter the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/web2py](http://code.google.com/p/web2py%20)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter `web2py` in the **Clone Directory Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the interpreter by going to **Window | Preferences | PyDev | Interpreter**,
    and choosing the path to your Python binary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Getting ready](img/5467OS_11_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's it! You can start debugging by finding `web2py.py` in the project tree,
    by right-clicking and selecting **Debug As | Python Run**. You can also pass arguments
    to `web2py.py` by choosing **Debug Configuration** from the same menu.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of installing web2py from the mercurial repository, you can make PyDev
    point to an existing web2py installation (it must be a source installation and
    not a web2py binary). In this case, simply go to **File | New | PyDev**, and specify
    the directory of your web2py installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/5467OS_11_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Updating web2py using a shell script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The web2py admin interface provides an **upgrade** button, which downloads
    the latest web2py, and unzips it over the old one (it does not overwrite applications
    except welcome, admin, and examples). This is ok, but it presents some potential
    problems:'
  prefs: []
  type: TYPE_NORMAL
- en: The admin may be disabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may want to update many installations at once, and would rather do it programmatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may want to archive the previous version, in case you need reverting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script we provide in this recipe is only useful for solving these problems
    in Linux and on a Mac.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Move under the `web2py` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure that you are the same user who owns the web2py folder, or you at
    least have the `write` permission. Save the following script in a file (for example:
    `update_web2py.sh)`, and make it executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yes, there is more. When upgrading web2py, the welcome application is upgraded,
    and it might contain a new appadmin, a new layout, and new JavaScript libraries.
    You may want to upgrade your applications as well. You can do this manually, and
    you have to be careful, because depending on how your applications work, this
    may break them. For an application called `app`, you can upgrade appadmin with
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can upgrade generic views with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can upgrade web2py_ajax with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, you can upgrade all static files with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You may have to be more selective. Back up first and be careful.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple page statistics plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will show you how to create a plugin to display page statistics
    in a hierarchical format.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, create a file called `models/plugin_stats.py`, which contains
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If you want to get the results displayed to the visitor, add the following to
    `views/layout.html:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `plugin` file is a model file, and is executed at every request. It calls
    the following query, which defines a table to store hits, and each record is identified
    by a `page_key (request.env.path_info)` and a `page_subkey (request.query_string)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If a record with this key and subkey does not exist, it is created. If it exists,
    it is retrieved, and the field `hits` is incremented by one. The function `_`
    has a weird name, but there is nothing special about it. You can choose a different
    name; we just do not wish to pollute the namespace, as the function is needed
    only once. The function returns a `Storage` object assigned to `plugin_stats`,
    which contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hits:` This is the number of hits corresponding to the current `page_key`
    and `page_subkey`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`total:` This is the sum of the hits for the same `page_key` as the current
    page but different subkeys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`widget:` This is a span displaying the hits, and `total`, which can be embedded
    in views'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Notice that you can decide to change the following lines into something else,
    and use different variables to group pages for counting purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Rounding corners without images or JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modern browsers support CSS directives for rounding corners. They include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: WebKit (Safari, Chrome)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gecko (Firefox)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opera (with a major hack)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We assume that you have a view containing the following HTML code, and you
    want to round the corner of the `box` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to see the effect, we also need to change the background color. In
    the `style` file, for example, add the following code for the default layout in
    `static/styles/base.css:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line `-moz-border-radius: 5px`; is interpreted only by Firefox, and
    ignored by other browsers. The second line is interpreted only by Safari and Chrome.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What about Opera? Opera does not have a CSS directive for rounded corners,
    but you can modify the previous CSS as follows, and have web2py generate a dynamic
    image to use as the background with the requested color and rounded corners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To this purpose, create a `controllers/images.py` file, and add the following
    code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This code will generate an SVG image, dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference: [http://home.e-tjenesten.org/~ato/2009/08/border-radius-opera](http://home.e-tjenesten.org/~ato/2009/08/border-radius-opera).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting a cache.disk quota
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is about web2py using RAM memory for **disk caching** on Linux (with
    `tmpfs)`.
  prefs: []
  type: TYPE_NORMAL
- en: '`cache.disk` is a popular caching mechanism that allows multiple web2py installations
    that share a file system to share cache. It is not as efficient as `memcache`,
    as writing on a shared file system can be a bottleneck; nevertheless this is an
    option for some users. If you are using `cache.disk`, you may want to limit the
    amount of data that gets written to cache by setting a **quota**. This can be
    achieved by creating a temporary memory-mapped file system with the added benefit
    of improving performances.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main idea is to use `cache.disk` with `tmpfs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, you need to log in as `root` and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$folder_path` is a path to the folder where you mount your slice of RAM'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`$size` is the amount of memory you want to dedicate (`M` - megabytes)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For example:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You have just allocated 200 MB of your RAM. Now we have to map it in a web2py
    application. Just write the following in your models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'So, in our case:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, when you use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have have ram space quota for every query/controller/etc cached, and each
    one can have a different size setting.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Checking if web2py is running using cron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are on a UNIX machine, you may want to monitor whether web2py is running.
    A production quality solution to this problem is using **Monit:** [http://mmonit.com/monit/documentation/](http://mmonit.com/monit/documentation/).
  prefs: []
  type: TYPE_NORMAL
- en: It can monitor your processes, log problems, and also restart them for you automatically.
    Here we present a do-it-yourself simpler solution, in the minimalist web2py spirit.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create the file, `/root/bin/web2pytest.sh`, to check if web2py runs,
    and start web2py if it is not running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now edit the `crontab` using the `shell` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `crontab` line that instructs the `crontab` deamon to run our script
    every three minutes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Notice that you may have to edit the first few lines of the script to set the
    right username, port, and web2py path that you want to monitor/restart.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Mercurial plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: web2py's admin supports **Mercurial** for versioning, but can one pull and push
    changes through HTTP?
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we present a plugin for web2py that consists of a single file.
    It wraps Mercurial's `hgwebdir wsgi` application, and allows one to interact with
    the mercurial repository of the web2py application either from a web browser or
    the `hg` client.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is interesting for the following two reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: On one side, if you use mercurial to version control your application, this
    plugin allows you to share the repository online with other people.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the other side, this is a great example of how to call a third party WSGI
    application from web2py.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This requires that you run web2py from source, and you have mercurial installed.
    You can install mercurial using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This plugin will only work on Python distributions that have mercurial installed.
    You could package mercurial into the web2py application itself, but we do not
    recommend it. It makes very little sense to use this plugin if you are not a regular
    mercurial user.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All you need to do to create the plugin is create a new controller, "plugin_mercurial.py":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a view of a sample report from the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_11_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here is a view from the `plugin_above:`
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_11_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also push to the repository. To be able to push to the repository,
    you need to edit/create the file `application/<app>/.hg/hgrc`, and add the following
    entries for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Clearly, this is recommended for a trusted environment only. Also, see the `hgrc`
    documentation at [http://www.selenic.com/mercurial/hgrc.5.html#web](http://www.selenic.com/mercurial/hgrc.5.html#web).
  prefs: []
  type: TYPE_NORMAL
- en: The `hgwebdir` WSGI application can expose multiple repositories, although for
    a web2py application-specific plugin, this is probably not what you want. If you
    do, however, want just that, try tweaking the `config` variable that is passed
    to the `hgwebdir` constructor. For example, you could pass the name of the repository
    to access through `request.args[0]`. URLs are even longer then, so you might want
    to set up some rules in `routes.py`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Building a pingback plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pingbacks allow blog posts and other resources, such as photos, to automatically
    notify one another of backlinks. This plugin exposes a decorator to pingback-enable
    controller functions, and a pingback client to inform a **Wordpress** blog, for
    example, that we link to it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Pingback** is a standard protocol, and version 1.0 is described at the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.hixie.ch/specs/pingback/pingback](http://www.hixie.ch/specs/pingback/pingback)'
  prefs: []
  type: TYPE_NORMAL
- en: '`plugin_pingback` consists of one single module file.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, create a `module/plugin_pingback.py` file, with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is how to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decorate actions that should receive pingbacks with `listen`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify actions that should send pingbacks with `ping`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a concrete example, where we assume a simple `blog` system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `plugin_pingback.py` module provides the core functionality of the `plugin_pingback`
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The class `PingbackServer` handles the incoming pingbacks. The class `PingbackClient`
    is used to notify external sites of the backlinks. In your code, you should not
    have to use these classes directly. Instead, use the module functions `listen`
    and `ping`.
  prefs: []
  type: TYPE_NORMAL
- en: '`listen` is a decorator to be used with controller functions you want to pingback-enable.
    Under the hood, it uses the `PingbackServer`. This decorator accepts the `db`
    as its first parameter, and optionally a second `callback` parameter. The `callback`
    signature is the function name (source, `target`, or `html)`, where `source` is
    the ping- back source URI, `target` is the target URI, and `html` is the source
    page content.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ping` is used to notify external sites of backlinks using the `PingbackClient`.'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is, as for `listen`, the `db` object, the second is the
    source page URI, the third is either a string or a list of target URIs, and finally
    there is the `commit` parameter (defaults to `True)`. A `DB commit` is likely
    to be required at this point, as the controller function containing the ping is
    probably generating the source page. If the source page is not committed, the
    pingback system of the target page will not be able to find it, and thus rejects
    the pingback request.
  prefs: []
  type: TYPE_NORMAL
- en: Changing views for mobile browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your web application is accessed from a mobile device, such as a phone, then
    most likely, the visitor is using a small screen and limited bandwidth to access
    your website. You may want to detect this, and serve a light version of your pages.
    What **light** means depends on the context, but here we assume that you simply
    want to change the default layout for these visitors.
  prefs: []
  type: TYPE_NORMAL
- en: web2py provides two APIs that allow you to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can detect when a client is using a mobile device:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can ask web2py to replace the default view `*.html` with `*.mobile.html`,
    for any action using the `@mobilize` decorator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this recipe, we will show you how to do this manually, using third-party
    libraries: `mobile.sniffer` and `mywurlf`, instead of using the built-in web2py
    APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This slice uses the libraries `mobile.sniffer` and `pywurfl` to parse the `USER_AGENT`
    header from the HTTP request. We will create a single function that returns `True/False`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install both of them with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create our function so that, for example, if we have this request,[http://example.com/app/controller/function](http://example.com/app/controller/function),
    the regular view will be in `views/controller/function.html`, while the mobile
    view will be in `views/controller/function.mobile.html`. And if it does not exist,
    it will revert to the regular one.
  prefs: []
  type: TYPE_NORMAL
- en: This can be achieved through the following function, which you can place in
    any model file, for example `models/plugin_detect_mobile.py`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Background processing with a database queue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's consider a very typical application that requires users to register. After
    a user submits the registration form, the application sends out a confirmation
    e-mail, asking the user to verify the sign-up process. The problem, however, is
    that the user does not get an immediate response to the next page, since they
    have to wait for the application to connect to the SMTP mail server, send the
    message, save some database results, and then finally, return the next view. Another
    pathological case could be argued; let's say this same application provides a
    dashboard that allows the user to download PDF reports, or data in an OpenOffice
    `Calc` format. For the sake of argument, this process usually takes five to ten
    minutes to generate the PDF or spreadsheet. Obviously, it does not make sense
    for a user to wait on the server to process this data, since they would not be
    able to perform any other actions.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of actually performing these actions that may take a while to run, the
    application can just register a request in the database to perform the said action.
    A background process executed by `cron` could read these requests, and then proceed
    to process them.
  prefs: []
  type: TYPE_NORMAL
- en: For the user registration, just provide a database table called `emails_to_send`;
    this will cause a background process that would run every minute, and send all
    of the e-mails in a single session. The user doing the registration benefits from
    a speedier sign-up, and our application benefits by needing to only make a single
    SMTP connection for multiple e-mails.
  prefs: []
  type: TYPE_NORMAL
- en: For report generation, the user could submit a request for the file in question.
    They might visit a download page on the application, which shows processing for
    files that have been requested. Again, a background process could load all report
    requests, process them into output files, and then save the results to the database.
    The user would re-visit the download page, and be able to download the processed
    file. The user could continue performing other tasks, while waiting for the report
    to finish.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, we will use the user report requests. This will be a dentistry
    website, where clients information is stored. The office clerk would like to know
    the demographic breakdown of their clients by zip code, to help determine where
    would be the best place to send out their new advertising campaign. Lets just
    assume this is a very large dentist's office that has over 100,000 clients. This
    report could take a while.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we will need the following tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'When a user navigates to the `reports` page, they are presented with options
    for possible reports that could be downloaded. The following is an example of
    a controller function for a report request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now for the script that would process all report requests.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the code to generate reports, it needs a way to execute. Let's
    add the call to this function to the `web2py cron/crontab` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Now, when the user requests the page, they will either see that the report is
    processing, or a link to download the generated report.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we used a `Poor-Man's Queue` example of dispatching tasks to
    the background processes. This method will scale up to a certain amount of users,
    however, at some point, an external message queue could be used to speed things
    up even more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since version 1.99.1, web2py includes its own built-in scheduler and scheduling
    API. It is documented in the latest edition of the official web2py manual, but
    you can also read more of it at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.web2py.com/examples/static/epydoc/web2py.gluon.scheduler-module.html](http://www.web2py.com/examples/static/epydoc/web2py.gluon.scheduler-module.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a plugin that integrated celery into web2py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/web2py-celery/](http://code.google.com/p/web2py-celery/)'
  prefs: []
  type: TYPE_NORMAL
- en: The former uses database access to distribute tasks, and the latter uses **RabbitMQ**
    through celery to implement enterprise message queue servers.
  prefs: []
  type: TYPE_NORMAL
- en: How to effectively use template blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may already know, the web2py template system is very flexible, providing
    template inheritance, inclusions, and a recently new (and under-documented) feature
    called blocks.
  prefs: []
  type: TYPE_NORMAL
- en: A **block** is a way that child templates can override certain portions of their
    parent templates, and replace or extend the content with their own.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a typical layout template includes several places that could be
    overridden, based on the current page a user is located on. Examples include the
    title bar, portions of the navigation, perhaps a page title, or keywords.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will consider a typical enterprise application that contains
    custom JavaScript on each page to handle elements local to only that page; the
    method of solving this will generate a base pattern for block usage.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's handle the basic pattern of using blocks, since this also solves
    the issue in our example application of needing a place to put extra JavaScript
    blocks within the`<head>` element of the HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following `layout.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'And the following `detail.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'This will render the following output file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notice the use of `{{super}}` when overriding the title block. `{{super}}` will
    take the HTML output of the parent block that it is overriding, and insert it
    at that position. So, in this example, the page title can retain the global sites
    title, but insert this unique page name into the title.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to note is that when a block is not defined in a child template,
    it will still render. Since there was no definition for the `body_title` block,
    it still rendered `My web2py App`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, blocks deprecate the need for the old web2py `{{include}}` helper, as
    the child template could just define a block that represents the location for
    the main content of the page. This is a design pattern used heavily in other popular
    template languages.
  prefs: []
  type: TYPE_NORMAL
- en: Making standalone applications with web2py and wxPython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: web2py can be used to make desktop-visual applications that doesn't require
    a browser or a web server. This can be useful when standalone applications are
    needed (that is, no web server installation), and also, this approach allows to
    simplify user interface programming without advanced JavaScript or CSS requirements,
    giving direct access to a user's machine operating system and libraries.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to use **models** and **helpers** to create a sample
    form, to store basic person information into a database using the **wxPython**
    GUI toolkit, in fewer than 100 lines of code, following the best practices of
    web2py.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you need a working Python and web2py installation, and then download
    and install wxPython from ( [http://www.wxpython.org/download.php](http://www.wxpython.org/download.php)).
  prefs: []
  type: TYPE_NORMAL
- en: Second, you need **gui2py**, a small library that manages forms, bridging web2py
    and wx (http://code.google.com/p/gui2py/downloads/list).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also pull the source code from the project repository using Mercurial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this basic recipe, we will cover the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import wxPython, gui2py, and web2py.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a sample `Person` table, with several fields and validators.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create wxPython GUI objects (application, main frame window, and html browser).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a web2py SQL form for the `Person` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the event handler to process the user input (validating and inserting
    the row).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the event handler, show the window, and start to interact with the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The full example follows, with a self-explained source code. Type it in, and
    save as a usual Python script, for example, in your home directory as `my_gui2py_app.py:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Remember to change `/home/reingart/web2py /home/reingart/gui2py` to your web2py
    and gui2py installation paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have saved the file, run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the application window ready to receive data, and test it! It
    should work as a usual web2py application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_11_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses basic wxPython objects, in this case, the `wx.HTML` control
    (you can see the original `form_example.zip` that is the base to gui2py):'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://wiki.wxpython.org/wxHTML](http://wiki.wxpython.org/wxHTML)'
  prefs: []
  type: TYPE_NORMAL
- en: '`wx.HTML` is basically the **wxPython** browser, and it can display simple
    HTML markup (mainly intended to show help pages, reports, and do simple printing).
    It can be extended to render custom HTML tags (FORM, `INPUT, TEXTAREA`, and so
    on), emulating a normal browser.'
  prefs: []
  type: TYPE_NORMAL
- en: First, the program should import the required libraries, define the models,
    and create a `wx` application and a basic window (a `Frame` in the `wx` world).
    Once the `wx.HTML` control is created inside the main window, the event handler
    should be connected to tell `wx` how to respond to user actions. The event handler
    receives the form data already parsed, it does the standard form validation and
    inserts the row data using DAL (in a similar way to web2py controllers). Finally,
    this is a GUI application, so it must call the `MainLoop`. It runs forever, waiting
    for the user events, and calling the appropriate event handlers.
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage is that `wx.HTML` removes the need of a JavaScript engine,
    so the events can be programmed directly in Python, and it also assures the same
    results in different platforms where `wxPython` runs, without the troubles of
    HTML compatibility issues.
  prefs: []
  type: TYPE_NORMAL
- en: As the code is a standard Python program, you can access advanced features directly
    in the user machine, such as opening files or socket connections, or using libraries
    to interact with webcams, USB devices or legacy hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Also, this approach allows to reuse your web2py knowledge (DAL, models, helpers,
    built-in validation, and so on), speeding up the development of standalone visual
    GUI applications, following the best practices of web development.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe could be further extended with more advanced wxPython controls,
    such as `wx.ListCtrl` or `wx.Grid`, enabling to make responsive fully-featured
    applications with spreadsheets capabilities, custom cell editors, virtual rows
    to browse huge quantities of records, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Also, `wx.AUI` **(Advanced User Interface)** allows to build modern looking
    applications with docking toolbars and panels, visual styles, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You can see more
  prefs: []
  type: TYPE_NORMAL
