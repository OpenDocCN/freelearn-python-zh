- en: 8\. Media Serving and File Uploads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter starts by introducing you to media files and then teaching you
    how to set up Django to serve them. Once you have understood this, you will learn
    how to build a form in HTML that can upload files to a view for storage to disk.
    To enhance this process and reduce the amount of code, you will use Django forms
    to generate and validate a form and learn how to process file uploads through
    it. You will then look at some enhancements that Django provides specifically
    for working with image files and use the `FileField` and `ImageField` to store
    a file and image respectively and upload to it using a Django form. After this,
    you will build a `ModelForm` instance automatically from the model and save the
    model and the files using just one line of code. At the end of this chapter, you
    will enhance the Bookr app by adding a cover image and book excerpt to the `Book`
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Media files refer to extra files that can be added after deployment to enrich
    your Django application. Usually, they are extra images that you would use in
    your site, but any type of file (including video, audio, PDF, text, documents,
    or even HTML) can be served as media.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of them as somewhere between dynamic data and static assets. They
    are not dynamic data that Django generates on the fly, like when rendering a template.
    They also are not the static files that are included by the site developer when
    the site is deployed. Instead, they are extra files that can be uploaded by users
    or generated by your application for later retrieval.
  prefs: []
  type: TYPE_NORMAL
- en: Some common examples of media files (that you will see in *Activity 8.01*, *Image
    and PDF Uploads of Books*, later in this chapter) are book covers and preview
    PDFs that can be attached to a `Book` object. You can also use media files to
    allow users to upload images for a blog post or avatars for a social media site.
    If you wanted to use Django to build your own video sharing platform, you would
    store the uploaded videos as media. Your website will not function well if all
    these files are static files, as users won't be able to upload their own book
    covers, videos, and so on, and will be stuck with the ones you deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Settings for Media Uploads and Serving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In *Chapter 5*, *Serving Static Files*, we looked at how Django can be used
    to serve static files. Serving media files is quite similar. Two settings must
    be configured in `settings.py`: `MEDIA_ROOT` and `MEDIA_URL`. These are analogous
    to `STATIC_ROOT` and `STATIC_URL` for serving static files.'
  prefs: []
  type: TYPE_NORMAL
- en: '`MEDIA_ROOT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the path on the disk where the media (such as uploaded files) will be
    stored. As with static files, your web server should be configured to serve directly
    from this directory, to take the load off Django.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`MEDIA_URL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is similar to `STATIC_URL`, but as you might guess, it's the URL that should
    be used to serve media. It must end in a `/`. Generally, you will use something
    like `/media/`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For security reasons, the path for `MEDIA_ROOT` must not be the same as the
    path for `STATIC_ROOT`, and `MEDIA_URL` must not be the same as `STATIC_URL`.
    If they were the same, a user might replace your static files (such as JavaScript
    or CSS files) with malicious code and exploit yourÂ users.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`MEDIA_URL` is designed to be used in templates so that you are not hardcoding
    the URL and it can be changed easily. For example, you might want to set it to
    a specific host or `MEDIA_URL` in templates in an upcoming section.'
  prefs: []
  type: TYPE_NORMAL
- en: Serving Media Files in Development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with static files, when serving media in production, your web server should
    be configured to serve directly from the `MEDIA_ROOT` directory to prevent Django
    from being tied up servicing the request. The Django dev server can serve media
    files in development. However, unlike static files, the URL mapping and view is
    not set up automatically for media files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django provides the `static` URL mapping that can be added to your existing
    URL maps to serve media files. It is added to your `urls.py` file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will serve the `MEDIA_ROOT` setting defined in `settings.py` to the `MEDIA_URL`
    setting that is also defined there. The reason we check for `settings.DEBUG` before
    appending the map is so we don't add this map in production.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if your `MEDIA_ROOT` was set to `/var/www/bookr/media`, and your
    `MEDIA_URL` was set to `/media/`, then the `/var/www/bookr/media/image.jpg` file
    would be available at `http://127.0.0.1:8000/media/image.jpg`.
  prefs: []
  type: TYPE_NORMAL
- en: The `static` URL map does not work when the Django `DEBUG` setting is `False`,
    and so it can't be used in production. However, as mentioned earlier, in production
    your web server should be serving these requests, so Django will not need to handle
    them.
  prefs: []
  type: TYPE_NORMAL
- en: In the first exercise, you will create and add a new `MEDIA_ROOT` and `MEDIA_URL`
    to your `settings.py` file. You will then add the `static` media serving URL map
    and add a test file to ensure media serving is configured correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.01: Configuring Media Storage and Serving Media Files'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will set up a new Django project as an example project
    to use throughout this chapter. Then you'll configure it to be able to serve media
    files. You'll do this by creating a `media` directory and adding the `MEDIA_ROOT`
    and `MEDIA_URL` settings. Then you'll set up the URL mapping for `MEDIA_URL`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check that everything is configured and being served correctly, you will
    put a test file inside the `media` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As with the previous example Django projects you''ve set up, you can reuse
    the existing `bookr` virtual environment. In a terminal, activate the `bookr`
    virtual environment. Then, start a new project named `media_project`, using `django-admin.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change (or `cd`) into the `media_project` directory that was created, then
    use the `startapp` management command to start an app called `media_example`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `media_project` directory in PyCharm. Set up a run configuration for
    the `runserver` command in the same manner as for the other Django projects you''ve
    opened:![Figure 8.1: Runserver configuration'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.1: Runserver configuration'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Figure 8.1* shows the `runserver` configuration of the project in PyCharm.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new directory named `media` inside the `media_project` project directory.
    Then, create a new file in this directory named `test.txt`. The directory structure
    of this will look like *Figure 8.2*:![Figure 8.2: media directory and test.txt
    layout'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.2: media directory and test.txt layout'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`test.txt` will also open automatically. Enter the text `Hello, world!` into
    it, then you can save and close the file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `settings.py` inside the `media_project` package directory. At the end
    of the file, add a setting for `MEDIA_ROOT`, using the path to the media directory
    you just created. Make sure to import the `os` module at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then use it to join it to `BASE_DIR` using the `os.path.join` function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Directly below the line added in *step 5*, add another setting for `MEDIA_URL`.
    This should just be `''/media/''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After this, save `settings.py`. Here''s what it should look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `media_project` package''s `urls.py` file. After the `urlpatterns`
    definition, add the following code to add the media serving URL if running in
    `DEBUG` mode. First, you will need to import the Django settings and static serving
    view by adding the highlighted import lines above the `urlpatterns` definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following code right after your `urlpatterns` definition (refer
    to the code block in the previous step) to conditionally add a mapping from `MEDIA_URL`
    to the `static` view, which will serve from `MEDIA_ROOT`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now save this file. It should look like this: [http://packt.live/3nVUiPn](http://packt.live/3nVUiPn).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server if it is not already running, then visit `http://127.0.0.1:8000/media/test.txt`.
    If you did everything correctly, then you should see the text `Hello, world!`
    in your browser:![Figure 8.3: Serving a media file'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.3: Serving a media file'
  prefs: []
  type: TYPE_NORMAL
- en: If your browser looks like *Figure 8.3*, it means that the media files are being
    served from the `MEDIA_ROOT` directory. The `test.txt` file we created was just
    for testing, but we will use it in *Exercise 8.02*, *Template Settings and Using
    MEDIA_URL in Templates*, so don't delete it yet.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we configured Django to serve media files. We served a test
    file just to make sure everything works as expected, and it did. We'll now look
    at how we can automatically generate media URLs in templates.
  prefs: []
  type: TYPE_NORMAL
- en: Context Processors and Using MEDIA_URL in Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use `MEDIA_URL` in a template, we could pass it in through the rendering
    context dictionary, in our view. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will work, but the problem is that `MEDIA_URL` is a common variable that
    we might want to use in many places, and so we'd have to pass it through in practically
    every view.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we can use a `render` call.
  prefs: []
  type: TYPE_NORMAL
- en: A context processor is a function that accepts one argument, the current request.
    It returns a dictionary of context information that will be merged with the dictionary
    that was passed to the `render` call.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can look at the source code of the `media` context processor, which illustrates
    how they work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With the media context processor activated, `MEDIA_URL` will be added to our
    context dictionaries. We could change our `render` call, seen previously, to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The same data would be sent to the template, as the context processor would
    add `MEDIA_URL`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full module path to the `media` context processor is `django.template.context_processors.media`.
    Some examples of other context processors that Django provides are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`django.template.context_processors.debug`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This returns the dictionary `{"DEBUG": settings.DEBUG}`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`django.template.context_processors.request`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This returns the dictionary `{"request": request}`, that is, it just adds the
    current HTTP request to the context.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To enable a context processor, its module path must be added to the `context_processors`
    option of your `TEMPLATES` setting. For example, to enable the media context processor,
    add `django.template.context_processors.media`. We will cover how to do this in
    detail in *Exercise 8.02*, *Template Settings and Using MEDIA_URL in Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the `media` context processor is enabled, the `MEDIA_URL` variable can
    be accessed inside a template just like a normal variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You could use it, for example, to source an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note that, unlike with static files, there is no template tag for loading media
    files (that is, there is no equivalent to the `{%Â staticÂ %}` template tag).
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom context processors can also be written. For example, referring back
    to the Bookr application that we have been building, we might want to show a list
    of the five latest reviews in a sidebar that''s on every page. A context processor
    like this would perform this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This would be saved in a file named `context_processors.py` in the Bookr project
    directory, then referred to in the `context_processors` setting by its module
    path, `context_processors.latest_reviews`. Or we could save it inside the `reviews`
    app and refer to it as `reviews.context_processors.latest_reviews`. It is up to
    you to decide whether a context processor should be considered project-wide or
    app-specific. However, bear in mind that regardless of where it is stored, once
    activated, it applies to all `render` calls for all apps.
  prefs: []
  type: TYPE_NORMAL
- en: A context processor can return a dictionary with multiple items, or even zero
    items. It would do this if it had conditions to only add items if certain criteria
    were met, for example, showing the latest reviews only if the user is logged in.
    Let's explore this in detail in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.02: Template Settings and Using MEDIA_URL in Templates'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will continue with `media_project` and configure Django
    to automatically add the `MEDIA_URL` setting to every template. You do this by
    adding `django.template.context_processors.media` to the `TEMPLATES` `context_processors`
    setting. You''ll then add a template that uses this new variable, and an example
    view to render it. You will make changes to the view and template throughout the
    exercises in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In PyCharm, open `settings.py`. First, you will need to add `media_example`
    to the `INSTALLED_APPS` setting, since it wasn''t done when the project was setÂ up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: About halfway down the file, you will find the `TEMPLATES` setting, which is
    a dictionary. Inside it is the item `OPTIONS` (another dictionary). Inside `OPTIONS`
    is the `context_processors` setting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To the end of this list, add this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The full list should look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The complete file should look like this: [http://packt.live/3nVOpSx](http://packt.live/3nVOpSx).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `media_example` app''s `views.py` and create a new view called `media_example`.
    For now, it can just render a template named `media-example.html` (you will create
    this in *step 5*). The entire code of the view function is like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save `views.py`. It should look like this: [http://packt.live/3pvEGCB](http://packt.live/3pvEGCB).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You need a URL mapping to the `media_example` view. Open the `media_project`
    package's `urls.py` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, `import` `media_example.views` with the other imports in the file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add a `path` into `urlpatterns` to map `media-example/` to the `media_example`
    view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your full `urlpatterns` should look like this code block:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can save and close the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `templates` directory inside the `media_example` app directory. Then,
    create a new HTML file inside the `media_project` project''s `templates` directory.
    Select `HTML 5 file` and name the file `media-example.html`:![Figure 8.4: Create
    media-example.html'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.4: Create media-example.html'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `media-example.html` file should open automatically. You are just going
    to add a link inside the file to the `test.txt` file you created in *Exercise
    8.01*, *Configuring Media Storage and Serving*. Inside the `<body>` element, add
    the highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the Django dev server if it is not already running, then visit `http://127.0.0.1:8000/media-example/`.
    You should see a simple page, like in *Figure 8.5*:![Figure 8.5: Basic media link
    page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.5: Basic media link page'
  prefs: []
  type: TYPE_NORMAL
- en: If you click the link, you will be taken to the `test.txt` display and see the
    `Hello, world!` text you created in *Exercise 8.01*, *Configuring Media Storage
    and Serving Media Files* (*Figure 8.3*). This means you have configured the Django
    `context_processors` settings correctly.
  prefs: []
  type: TYPE_NORMAL
- en: We have finished with `test.txt`, so you can delete the file now. We will use
    the `media_example` view and template in the other exercises, so leave them around.
    In the next section, we will talk about how to upload files using a web browser,
    and how Django accesses them in a view.
  prefs: []
  type: TYPE_NORMAL
- en: File Uploads Using HTML Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 6*, *Forms*, we learned about HTML forms. We discussed how to use
    the `method` attribute of `<form>` for `GET` or `POST` requests. Though we have
    only submitted text data using a form so far, it is also possible to submit one
    or more files using a form.
  prefs: []
  type: TYPE_NORMAL
- en: 'When submitting files, we must ensure that there are at least two attributes
    on the form: `method` and `enctype`. You may still also need other attributes,
    such as `action`. A form that supports file uploads might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: File uploads are only available for `POST` requests. They are not possible with
    `GET` requests as it would be impossible to send all the data for a file through
    a URL. The `enctype` attribute must be set to let the browser know it should send
    the form data as multiple parts, one part for the text data of the form, and separate
    parts for each of the files that have been attached to the form. This encoding
    is seamless to the user; they do not know how the browser is encoding the form,
    nor do they need to do anything different.
  prefs: []
  type: TYPE_NORMAL
- en: 'To attach files to a form, you need to create an input of type `file`. You
    can manually write the HTML code, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'When the input is rendered in the browser it looks like this when empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6: Empty file input'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.6: Empty file input'
  prefs: []
  type: TYPE_NORMAL
- en: The title of the button might be different depending on your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking the `Browseâ¦` button will display a *file open* dialog box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7: File browser on macOS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.7: File browser on macOS'
  prefs: []
  type: TYPE_NORMAL
- en: 'And after selecting a file, the name of the file is shown in the field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8: File input with cover.jpg selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.8: File input with cover.jpg selected'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8.8* shows a file input with a file named `cover.jpg` having been selected.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Uploaded Files in a View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to text data, if a form also contains file uploads, Django will
    populate the `request.FILES` attribute with these files. `request.FILES` is a
    dictionary-like object that is keyed on the `name` attribute given to the `file`
    input.
  prefs: []
  type: TYPE_NORMAL
- en: In the form example in the previous section, the file input had the name `file-upload-name`.
    So, the file would be accessible in the view using `request.FILES["file-upload-name"]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The objects that `request.FILES` contains are file-like objects (specifically,
    a `django.core.files.uploadedfile.UploadedFile` instance), so to use them, you
    must read their data. For example, to get the content of an uploaded file in your
    view, you can write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: A more common action is to write the file contents to disk. When files are uploaded,
    they are stored in a temporary location (in memory if they are under 2.5 MB, otherwise
    in a temporary file on disk). To store the file data in a known location, the
    contents must be read and then written to disk at the desired location. An `UploadedFile`
    instance has a `chunks` method that will read the file data one chunk at a time
    to prevent too much memory from being used by reading the entirety of the file
    at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, instead of simply using the `read` and `write` functions, use the `chunks`
    method to only read small chunks of the file into memory at a time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that in some of the upcoming examples, we will refer to this code as the
    `save_file_upload` function. Assume the function is defined like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous example code could then be refactored to call the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Each `UploadedFile` object (the `uploaded_file` variable in the previous example
    code snippets) also contains extra metadata about the uploaded file, such as the
    file''s name, size, and content type. The attributes you will find most useful
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`size`: As the name suggests, this is the size of the uploaded file in bytes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This refers to the name of the uploaded file, for example, `image.jpg`,
    `file.txt`, `document.pdf`, and so on. This value is sent by the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content_type`: The content type (MIME type) of the uploaded file. For example,
    `image/jpeg`, `text/plain`, `application/pdf`, and so on. Like `name`, this value
    is sent by the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`charset`: This refers to the charset or text encoding of the uploaded file,
    for text files. This will be something like `utf8` or `ascii`. Once again, this
    value is also determined and sent by the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a quick example of accessing these attributes (such as inside a view):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Security and Trust of Browsers' Sent Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we just described, the values of an `UploadedFile` for `name`, `content_type`,
    and `charset` are determined by the browser. This is important to consider because
    a malicious user could send fake values in place of real ones to disguise the
    actual files being uploaded. Django does not automatically try to determine the
    content type or charset of the uploaded file, and so it relies on the client to
    be accurate when it sends this information.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we manually handle the saving of tile uploads without suitable checks, then
    a scenario like this could happen:'
  prefs: []
  type: TYPE_NORMAL
- en: A user of the site uploads a malicious executable `malware.exe` but sends the
    content type `image/jpeg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our code checks the content type and considers it to be safe, and so saves `malware.exe`
    to the `MEDIA_ROOT` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another user of the site downloads what they think is a book cover image but
    is the `malware.exe` executable. They open the file, and their computer is infected
    with malware.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This scenario has been simplified â the malicious file would probably have a
    name that was not so obvious (maybe something like `cover.jpg.exe`), but the general
    process has been illustrated.
  prefs: []
  type: TYPE_NORMAL
- en: 'How you choose to handle the security of your uploads will depend on the specific
    use case, but for most cases, these tips will help:'
  prefs: []
  type: TYPE_NORMAL
- en: When you save the file to disk, generate a name instead of using the one provided
    by the uploader. You should replace the file extension with what you expect. For
    example, if a file is named `cover.exe` but the content type is `image/jpeg`,
    save the file as `cover.jpg`. You could also generate a completely random filename
    for extra security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check that the file name extension matches the content type. This method is
    not foolproof as there are so many mime types that if you are handling uncommon
    files you might not get a match. The built-in `mimetypes` Python module can help
    you here. Its `guess_type` function takes a filename and returns a tuple of `mimetype`
    (content type) and `encoding`. Here is a short snippet showing its use, in a Python
    console:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Either element of the tuple might be `None` if the type or encoding cannot
    be guessed. Once it is imported into your file by doing `import mimetypes`, you
    would use it like this in your view function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method will work for common file types such as images, but as mentioned,
    many uncommon types may return `None` for `mimetype`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you are expecting image uploads, use the `Pillow` library to try to open
    the uploaded file as an image. If it is not a valid image, then `Pillow` will
    be unable to open it. This is what Django does when using its `ImageField` to
    upload images. We will show how to use this technique to open and manipulate an
    image in *Exercise 8.05*, *Image Uploads using Django Forms*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also consider the `python-magic` Python package, which examines the
    actual content of files to try to determine their type. It is installable using
    `pip`, and its GitHub project is [https://github.com/ahupp/python-magic](https://github.com/ahupp/python-magic).
    Once installed, and imported into your file with `import magic`, you can use it
    like this in your view function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You could then verify that `mimetype` was in a list of allowed types.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a definitive list of all the ways of protecting against malicious
    file uploads. The best approach will depend on what type of application you are
    building. You might build a site for hosting arbitrary files, in which case you
    would not need any kind of content checking at all.
  prefs: []
  type: TYPE_NORMAL
- en: Let us now see how we can build an HTML form and view that will allow files
    to be uploaded. We will then store them inside the `media` directory and retrieve
    the downloaded files in our browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.03: File Upload and Download'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will add a form with a file field to the `media-example.html`
    template. This will allow you to upload a file to the `media_example` view using
    your browser. You will also update the `media_example` view to save the file to
    the `MEDIA_ROOT` directory so that it''s available for download. You will then
    test that this all works by downloading the file again:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In PyCharm, open the `media-example.html` template located inside the `templates`
    folder. Inside the `<body>` element, remove the `<a>` link that was added in *step
    6* of *Exercise 8.02*, *Template Settings and Using MEDIA_URL in Templates*. Replace
    it with a `<form>` element (highlighted here). Make sure the opening tag has `method="post"`
    and `enctype="multipart/form-data"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Insert the `{% csrf_token %}` template tag inside the `<form>` body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After `{% csrf_token %}`, add an `<input>` element, with `type="file"` and
    `name="file_upload"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, before the closing `</form>` tag, add a `<button>` element with `type="submit"`
    and the text content `Submit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your HTML body should now look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, save and close the file. It should look like this: [http://packt.live/37XJPh3](http://packt.live/37XJPh3).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `media_example` app''s `views.py`. Inside the `media_example` view,
    add code to save the uploaded file to the `MEDIA_ROOT` directory. For this, you
    need access to `MEDIA_ROOT` from settings, so import the Django settings at the
    top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will also need to use the `os` module to build the save path, so import
    that as well (also at the top of the file):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The uploaded file should only be saved if the request method is `POST`. Inside
    the `media_example` view, add an `if` statement to validate that `request.method`
    is `POST`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `if` statement added in the previous step, generate the output path
    by joining the uploaded filename to `MEDIA_ROOT`. Then, open this path in `wb`
    mode and iterate over the uploaded file using the `chunks` method. Finally, write
    each chunk to the saved file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the Django dev server if it is not already running, then navigate to
    `http://127.0.0.1:8000/media-example/`. You should see the file upload field and
    `Submit` button, as can be seen here:![Figure 8.9: File upload form'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.9: File upload form'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `Browseâ¦` (or the equivalent in your browser) and select a file to upload.
    The name of the file will appear in the file input. Then, click `Submit`. The
    page will reload, and the form will be empty again. This is normal â in the background,
    the file should have been saved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Try to download the file you uploaded using `MEDIA_URL`. In this example, a
    file named `cover.jpg` was uploaded. It will be downloadable at `http://127.0.0.1:8000/media/cover.jpg`.
    Your URL will depend on the name of the file you uploaded.![Figure 8.10: Uploaded
    file visible inside MEDIA_URL'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.10: Uploaded file visible inside MEDIA_URL'
  prefs: []
  type: TYPE_NORMAL
- en: If you uploaded an image file, HTML file, or another type of file your browser
    can display, you will be able to view it inside the browser. Otherwise, your browser
    will just download it to disk again. In both cases, it means the upload wasÂ successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also confirm the upload was successful by looking inside the `media`
    directory in the `media_project` project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11: cover.jpg inside the media directory'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.11: cover.jpg inside the media directory'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8.11* shows `cover.jpg` inside the `media` directory in PyCharm.'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you added an HTML form with `enctype` set to `multipart/form-data`
    so that it would allow file uploads. It contained a `file` input to select a file
    to upload. You then added saving functionality to the `media_example` view to
    save the uploaded file to disk.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how to simplify form generation and add
    validation using Django forms.
  prefs: []
  type: TYPE_NORMAL
- en: File Uploads with Django Forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Chapter 6*, *Forms*, we saw how Django makes it easy to define forms and
    automatically render them to HTML. In the previous example, we defined our form
    manually and wrote the HTML. We can replace this with a Django form, and implement
    the file input with a `FileField` constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how a `FileField` is defined on a form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `FileField` constructor can take the following keyword arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`required`: This should be `True` for required fields and `False` if the field
    isÂ optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_length`: This refers to the maximum length of the filename of the file
    being uploaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow_empty_file`: A field with this argument is valid even if the uploaded
    file is empty (has a size of `0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from these three keyword arguments, the constructor can also accept the
    standard `Field` arguments, such as `widget`. The default widget class for a `FileField`
    is `ClearableFileInput`. This is a file input that can display a checkbox that
    can be checked to send a null value and clear the saved file on a modelÂ field.
  prefs: []
  type: TYPE_NORMAL
- en: Using a form with a `FileField` in a view is similar to other forms, but when
    the form has been submitted (that is, `request.METHOD` is `POST`), then `request.FILES`
    should be passed into the form constructor as well. This is because Django needs
    to access `request.FILES` to find information about uploaded files when validating
    the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic flow in a `view` function is therefore like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'When working with uploaded files and forms, you can interact with the uploaded
    files by accessing them through `request.FILES`, or through `form.cleaned_data`:
    the values will return to the same object. In our above example, we could process
    the uploaded file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, since they contain the same object, you can use `form.cleaned_data`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The data that is saved will be the same.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 6*, *Forms*, you experimented with forms and submitting them with
    invalid values. When the page refreshed to show the form errors, the data that
    you had previously entered was populated when the page reloaded. This does not
    occur with file fields; instead, the user will have to navigate and select the
    file again if the form is invalid.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will put what we have seen with `FileFields` into practice
    by building an example form, then modifying our view to save the file only if
    the form is valid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.04: File Uploads with a Django Form'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous exercise, you created a form in HTML and used it to upload a
    file to a Django view. If you tried submitting the form without selecting a file,
    you would get a Django exception screen. You did not do any validation on the
    form, so this method is quite fragile.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, you will create a Django form with a `FileFIeld`, which will
    allow you to use form validation functions to make the view more robust as well
    to reduce the amount of code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In PyCharm, inside the `media_example` app, create a new file named `forms.py`.
    It will open automatically. At the start of the file, import the Django `forms`Â library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a `forms.Form` subclass, and name it `UploadForm`. Add one field
    to it, a `FileField` named `file_upload`. Your class should have this code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can save and close this file. The complete file should look like this:
    [http://packt.live/34S5hBV](http://packt.live/34S5hBV).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `form_example` app''s `views.py` file. At the start of the file, right
    below the existing `import` statements, you will need to import your new class,
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are in the `POST` branch of the view, `UploadForm` needs to be instantiated
    with both `request.POST` and `request.FILES`. If you do not pass in `request.FILES`,
    then the `form` instance will not be able to access the uploaded files. Under
    the `if request.method == "POST"` check, instantiate the `UploadForm` with these
    two arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The existing lines that define the `save_path` and store the file contents
    can be retained, but they should be indented by one block and put inside a form
    validity check, so they are only executed if the form is valid. Add the `if form.is_valid():`
    line and then indent the other lines so the code looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since you are using a form now, you can access the file upload through the
    form. Replace usages of `request.FILES["file_upload"]` with `form.cleaned_data["file_upload"]`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add an `else` branch to handle non-`POST` requests, which simply instantiates
    a form without any arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a context dictionary argument to the `render` call and set the `form` variable
    in the `form` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now save and close this file. It should look like this: [http://packt.live/3psXxyc](http://packt.live/3psXxyc).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, open the `media-example.html` template and remove your manually defined
    file `<input>`. Replace it with `form`, rendered using the `as_p` methodÂ (highlighted):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should not change any other parts of the file. You can save and close this
    file. It should look like this: [http://packt.live/3qHHSMi](http://packt.live/3qHHSMi).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server if it is not already running, then navigate to
    `http://127.0.0.1:8000/media-example/`. You should see the `File upload` field
    and the `Submit` button, as follows:![Figure 8.12: File upload Django form rendered
    in the browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.12: File upload Django form rendered in the browser'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Since we are using a Django form, we get its built-in validation automatically.
    If you try to submit the form without selecting a file, your browser should prevent
    you and show an error, as can be seen here:![Figure 8.13: Form submission prevented
    by the browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.13: Form submission prevented by the browser'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, repeat the upload test that you performed in *Exercise 8.03*, *File
    Upload and Download*, by selecting a file and submitting the form. You should
    then be able to retrieve the file using `MEDIA_URL`. In this case, a file named
    `cover.jpg` is being uploaded again (see the following figure):![Figure 8.14:
    Uploading a file named cover.jpg'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.14: Uploading a file named cover.jpg'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then retrieve the file at `http://127.0.0.1:8000/media/cover.jpg`,
    and you can see it in the browser as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15: The file uploaded using a Django form is also visible in the
    browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.15: The file uploaded using a Django form is also visible in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we replaced a manually built form with a Django form containing
    a `FileField`. We instantiated the form in the view by passing in both `request.POST`
    and `request.FILES`. We then used the standard `is_valid` method to check the
    validity of the form, and only saved the file upload if the form was valid. We
    tested the file uploading and saw we were able to retrieve uploaded files using
    `MEDIA_URL`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at `ImageField`, which is like a `FileField`
    but specifically for images.
  prefs: []
  type: TYPE_NORMAL
- en: Image Uploads with Django Forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to work with images in Python, the most common library that you
    will use is called `Image` object is imported from PIL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The terms Python Imaging Library, PIL, and Pillow are often used interchangeably.
    You can assume that if someone refers to PIL, they mean the latest Pillow library.
  prefs: []
  type: TYPE_NORMAL
- en: Pillow provides various methods of retrieving data about or manipulating images.
    You can find out the width and height of images, or scale, crop, and apply transformations
    to them. There are too many operations available to cover in this chapter, so
    we will just introduce a simple example (scaling an image), which you will use
    in the nextÂ exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Since images are one of the most common types of files that a user may want
    to upload, Django also includes an `ImageField` instance. This behaves similarly
    to `FileField` instance but also automatically validates that the data is an image
    file. This helps mitigate security issues where we expect an image, but the user
    uploads a malicious file.
  prefs: []
  type: TYPE_NORMAL
- en: 'An `UploadedFile` from an `ImageField` has all the same attributes and methods
    as that of a `FileField` (`size`, `content_type`, `name`, `chunks()`, and so on)
    but adds an extra attribute: `image`. This is an instance of the PIL `Image` object
    that is used to verify that the file being uploaded is a valid image.'
  prefs: []
  type: TYPE_NORMAL
- en: After checking that the form is valid, the underlying PIL `Image` object is
    closed. This is to free up memory and prevent the Python process from holding
    too many files open, which could cause performance issues. What this means for
    the developer is that you can access some of the metadata about the image (such
    as its `width`, `height`, and `format`) but you can't access the actual image
    data without re-opening the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate, we will have a form with an `ImageField`, named `picture`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the view function, the `picture` field can be accessed in the form''s
    `cleaned_data`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the `picture` field''s `Image` object can be retrieved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a reference to the image in the view, we can get some metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Django will also automatically update the `content_type` attribute of `UploadedFile`
    to the correct type for the `picture` field. This overwrites the value that the
    browser sent when uploading the file.
  prefs: []
  type: TYPE_NORMAL
- en: Attempting to use a method that accesses the actual image data (rather than
    just the metadata) will cause an exception to be raised. This is because Django
    has already closed the underlying image file.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code snippet will raise an `AttributeError`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, we need to re-open the image. The image data can be opened with the
    `ImageField` reference, after importing the `Image` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Now that the image has been opened, you can perform operations on it. In the
    next section, we will look at a simple example â resizing the uploaded image.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing an Image with Pillow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pillow supports many operations that you might want to perform on an image
    before saving it. We cannot explain them all in this book, so we will just use
    a common operation: resizing an image to a specific size before saving it. This
    will help us save storage space and improve the download speed. For example, a
    user may upload large cover images in Bookr that are bigger than are needed for
    our purposes. When saving the file (writing it back to disk) we must specify the
    format to use. We could determine the type of image that was uploading with a
    number of methods (such as checking the `content_type` of the uploaded file or
    the `format` from the `Image` object), but in our example, we will always just
    save the image as a `JPEG` file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The PIL `Image` class has a `thumbnail` method that will resize an image to
    a maximum size while retaining the aspect ratio. For example, we could set a maximum
    size of 50px by 50px. A 200px by 100px image would be resized to 50px by 25px:
    the aspect ratio is retained by setting the maximum dimension to 50px. Each dimension
    is scaled by a factor of 0.25:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, the resize has been done in memory only. The change is not saved
    to disk until the `save` method is called, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The output format is automatically determined from the file extension used,
    in this case, JPEG. The `save` method can also take a format argument to override
    it. ForÂ example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Despite having the extension `png`, the format is specified as `JPEG` and so
    the output will be in JPEG format. As you might imagine, this can be very confusing,
    so you might decide to stick with specifying the extension only.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will change the `UploadForm` we have been working with
    to use an `ImageField` instead of a `FileField`, then implement the resizing of
    an uploaded image before saving it to the media directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.05: Image Uploads using Django Forms'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will update the `UploadForm` class you created in *Exercise
    8.04*, *File Uploads with a Django Form*, to use an `ImageField` instead of a
    `FileField` (this will involve simply changing the field''s class). You will then
    see that the form renders it in the browser. Next, you will try uploading some
    non-image files and see how Django validates the form to disallow them. Finally,
    you will update your view to use PIL to resize the image before saving it, and
    then test it in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `media_example` app''s `forms.py` file. In the `UploadForm` class,
    change `file_upload` so it''s an instance of `ImageField` instead of `FileField`.
    After updating, your `UploadForm` should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the Django dev server if it is not already running, then navigate to
    `http://127.0.0.1:8000/media-example/`. You should see the form rendered, and
    it will look identical as to when we used a `FileField` (see the following figure):![Figure
    8.16: The ImageField looks the same as a FileField'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.16: The ImageField looks the same as a FileField'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will notice the difference when you try to upload a non-image file. Click
    the `Browseâ¦` button and try to select a non-image file. Depending on your browser
    or operating system, you might not be able to select anything other than an image
    file, as in *Figure 8.17*:![Figure 8.17: Only image files are selectable'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.17: Only image files are selectable'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your browser may allow selecting an image but show an error in the form after
    selection. Or your browser may allow you to select a file and submit the form,
    and Django will raise a `ValidationError`. Regardless, you can be sure that in
    your view, the form's `is_valid` view will only return `True` if an image has
    beenÂ uploaded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You do not need to test uploading a file at this point, as the result would
    be the same as in *Exercise 8.04*, *File Uploads with a Django Form*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The first thing you will need to do is to make sure the Pillow library is installed.
    In a terminal (making sure your virtual environment has been activated), run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '(In Windows, this is `pip install pillow`.) You will get output like *FigureÂ 8.18*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.18: pip3 installing Pillow'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_08_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.18: pip3 installing Pillow'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Or if Pillow was already installed, you will see the output message `Requirement
    already satisfied`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we can update the `media_example` view to resize the image before saving
    it. Switch back to PyCharm and open the `media_example` app''s `views.py` file,
    then import PIL''s `Image` class. So, add this import line below the `import os`
    statement near the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the `media_example` view. Under the line that generates the `save_path`,
    take out the three lines that open the output file, iterate over the uploaded
    file, and write out its chunks. Replace this with the code that opens the uploaded
    file with PIL, resizes it, then saves it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first line creates an `Image` instance by opening the uploaded file, the
    nextÂ performs the thumbnail conversion (to a maximum size of 50px by 50px), and
    the third line saves the file to the same save path that we have been generating
    in previous exercises. You can save the file. It should look like this: [http://packt.live/34PWvof](http://packt.live/34PWvof).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Django dev server should still be running from *step 2*, but you should
    start it if it is not. Then, navigate to `http://127.0.0.1:8000/media-example/`.
    You will see the familiar `UploadForm`. Select an image and submit the form. If
    the upload and resize was successful, the form will refresh and be empty again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View the uploaded image using `MEDIA_URL`. For example, a file named `cover.jpg`
    will be downloadable from `http://127.0.0.1:8000/media/cover.jpg`. You should
    see the image has been resized to have a maximum dimension of just 50px:![Figure
    8.19: Resized logo'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.19: Resized logo'
  prefs: []
  type: TYPE_NORMAL
- en: While a thumbnail this size might not be that useful, it at least lets us be
    sure that the image resize has worked correctly.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we changed the `FileField` on `UploadForm` to an `ImageField`.
    We saw that the browser wouldn't let us upload anything other than images. We
    then added code to the `media_example` view to resize the uploaded image using
    PIL.
  prefs: []
  type: TYPE_NORMAL
- en: We have encouraged the use of a separate web server to serve static and media
    files, for performance reasons. However, in some cases, you might want to use
    Django to serve files, for example, to provide authentication before allowing
    access. In the next section, we will discuss how to use Django to serve media
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Serving Uploaded (and Other) Files Using Django
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this chapter and *Chapter 5*, *Serving Static Files*, we have discouraged
    serving files using Django. This is because it would needlessly tie up a Python
    process just serving a file âÂ something that the web server is capable of handling.
    Unfortunately, web servers do not usually provide dynamic access control, that
    is, allowing only authenticated users to download a file. Depending on your web
    server used in production, you might be able to have it authenticate against Django
    and then serve the file itself; however, the specific configuration of specific
    web servers is outside the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: One approach you can take is to specify a subdirectory of your `MEDIA_ROOT`
    directory and have your web server prevent access to just this specific folder.
    Any protected media should be stored inside it. If you do this, only Django will
    be able to read the files inside. For example, your web server could serve everything
    in the `MEDIA_ROOT` directory, except for a `MEDIA_ROOT/protected` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Another approach would be to configure a Django view to serve a specific file
    from disk. The view will determine the path of the file on disk to send, then
    send it using the `FileResponse` class. The `FileResponse` class takes an open
    filehandle as an argument and tries to determine the correct content type from
    the file's content. Django will close the filehandle after the request completes.
  prefs: []
  type: TYPE_NORMAL
- en: The view function will accept the request and a relative path to the file to
    be downloaded, as parameters. This relative path is the path inside the `MEDIA_ROOT/protected`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we will just check whether the user is anonymous (not logged in).
    We will do this by checking the `request.user.is_anonymous` property. If they
    are not logged in then we will raise a `django.core.exceptions.PermissionDenied`
    exception, which returns an HTTP `403 Forbidden` response to the browser. This
    will stop the execution of the view and not return any file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The URL mapping to this view could be like this, using the `<path>` path converter.
    Inside your `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: There are many ways that you could choose to implement a view that sends files.
    The important thing is that you use the `FileResponse` class, which is designed
    to stream the file to the client in chunks instead of loading it all into memory.
    This will reduce the load on the server and lessen the impact on resource usage
    if you have to resort to sending files with Django.
  prefs: []
  type: TYPE_NORMAL
- en: Storing Files on Model Instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have manually managed the uploading and saving of files. You can
    also associate a file with a model instance by assigning the path to which it
    was saved to a `CharField`. However, as with much of Django, this capability (and
    more) is already provided with the `models.FileField` class. `FileField` instances
    do not actually store the file data; instead, they store the path where the file
    is stored (like a `CharField` would), but they also provide helper methods. These
    methods assist with loading files (so you do not have to manually open them) and
    generating disk paths for you based on the ID of the instance (or other attributes).
  prefs: []
  type: TYPE_NORMAL
- en: '`FileField` can accept two specific optional arguments in its constructor (as
    well as the base `Field` arguments, such as `required`, `unique`, `help_text`,
    and so on):'
  prefs: []
  type: TYPE_NORMAL
- en: '`max_length`: Like `max_length` in the form''s `ImageField`, this is the maximum
    length of the filename that is allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upload_to`: The `upload_to` argument has three different behaviors depending
    on what type of variable is passed to it. Its simplest use is with a string or
    `pathlib.Path` object. The path is simply appended to `MEDIA_ROOT`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, `upload_to` is just defined as a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Files saved to this `FileField` would be stored in the `MEDIA_ROOT/files` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could achieve the same result using a `pathlib.Path` instance too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The next way of using `upload_to` is with a string that contains `strftime`
    formatting directives (for example, `%Y` to substitute the current year, `%m`
    for the current month, and `%d` for the current day of the month). The full list
    of these directives is extensive and can be found at [https://docs.python.org/3/library/time.html#time.strftime](https://docs.python.org/3/library/time.html#time.strftime).
    Django will automatically interpolate these values when saving theÂ file.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say you defined the model and `FileField` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: For the first file uploaded on a specific day, Django would create the directory
    structure for that day. For example, for the first file uploaded on January 1,
    2020, Django would create the directory `MEDIA_ROOT/2020/01/01` and then store
    the uploaded file in there. The next file (and all subsequent ones) uploaded on
    the same day would also be stored in that directory. Similarly, on January 2,
    2020, Django would create the `MEDIA_ROOT/2020/01/02` directory, and files would
    be stored there.
  prefs: []
  type: TYPE_NORMAL
- en: If you have many thousands of files being uploaded every day, you could even
    have the files split up further by including the hour and minute in the `upload_to`
    argument (`upload_to="files/%Y/%m/%d/%H/%M/"`). This may not be necessary if you
    only have a small volume of uploads though.
  prefs: []
  type: TYPE_NORMAL
- en: By utilizing this method of the `upload_to` argument, you can have Django automatically
    segregate uploads and prevent too many files from being stored within a single
    directory (which can be hard to manage).
  prefs: []
  type: TYPE_NORMAL
- en: 'The final method of using `upload_to` is by passing a function that will be
    called to generate the storage path. Note that this is different than the other
    uses of `upload_to` as it should generate the full path, including filename, rather
    than just the directory. The function takes two arguments: `instance` and `filename`.
    `instance` is the model instance that the `FileField` is attached to, and `filename`
    is the name of the uploaded file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example function that takes the first two characters of a filename
    to generate the saved directory. This will mean that each uploaded file will be
    grouped into parent directories, which can help organize files and prevent there
    from being too many in one directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'If this function is called with the filename `Test.jpg`, it will return `<username>/t/e/Test.jpg`.
    If called with `example.txt`, it will return `<username>e/x/example.txt`, and
    so on. `username` is retrieved from the instance that is being saved. To illustrate,
    here is a model with a `FileField` that uses this function. It also has a username,
    which is a `CharField`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: You can use any attribute of the instance in the `upload_to` function, but be
    aware that if this instance is in the process of being created, then the file
    save function will be called before it is saved to the database. Therefore, some
    of the automatically generated attributes on the instance (such as `id`/`pk`)
    will not yet be populated and should not be used to generate a path.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever path is returned from the `upload_to` function, it is appended to `MEDIA_ROOT`
    so the uploaded files would be saved at `MEDIA_ROOT/<username>/t/e/Test.jpg` and
    `MEDIA_ROOT/<username>/e/x/example.txt` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `user_grouped_file_path` is just an illustrative function that has
    intentionally been kept short, so it will not work correctly with single-character
    filenames or if the username has invalid characters. For example, if the username
    has a `/` in it, then this would act as a directory separator in the generated
    path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have done a deep dive into setting up a `FileField` on a model, but
    how do we actually save an uploaded file to it? It is as easy as assigning the
    uploaded file to the attribute of the model, as you would with any type of value.
    Here is a quick example with a view, and the simple `ExampleModel` class we were
    using as an example earlier in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we create a new `ExampleModel` class and assign the uploaded
    file (which had the name `uploaded_file` in the form) to its `file_field` attribute.
    When we save the model instance, Django automatically writes the file with its
    name to the `upload_to` directory path. If the uploaded file had the name `image.jpg`,
    the save path would be `MEDIA_ROOT/upload_to/image.jpg`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could just have easily updated the file field on an existing model or used
    a form (validating it before saving). Here is another simple example demonstrating
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: You can see that updating a `FileField` on an existing model instance is the
    same process as setting it on a new instance; and if you choose to use a Django
    form, or just access `request.FILES` directly, the process is just as simple.
  prefs: []
  type: TYPE_NORMAL
- en: Storing Images on Model Instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While a `FileField` can store any type of file, including images, there is also
    an `ImageField`. As you would expect, this is only for storing images. The relationship
    between models' `forms.FileField` and `forms.ImageField` is similar to that between
    `models.FileField` and `models.ImageField`, that is, `ImageField` extends `FileField`
    and adds extra methods for working with images.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ImageField` constructor takes the same arguments as `FileField`, and adds
    two extra optional arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`height_field`: This is the name of the field of the model that will be updated
    with the height of the image every time the model instance is saved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width_field`: The width counterpart to `height_field`, the field that stores
    the width of the image that is updated every time the model instance is saved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both of these arguments are optional, but the fields they name must exist if
    used. That is, it is valid to have `height_field` or `width_field` unset, but
    if they are set to the name of a field that does not exist, then an error will
    occur. The purpose of this is to assist with searching the database for files
    of a particular dimension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example model using an `ImageField`, which updates the image dimension
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `ImageField` is using the `upload_to` parameter with date formatting
    directives that are updated on save. The behavior of `upload_to` is identical
    to that of `FileField`.
  prefs: []
  type: TYPE_NORMAL
- en: Upon saving an `ExampleModel` instance, its `image_height` field would be updated
    with the height of the image, and `image_width` with the width of theÂ image.
  prefs: []
  type: TYPE_NORMAL
- en: We will not show examples for setting `ImageField` values in a view, as the
    process is the same as for a plain `FileField`.
  prefs: []
  type: TYPE_NORMAL
- en: Working with FieldFile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you access a `FileField` or `ImageField` attribute of a model instance,
    you will not get a native Python `file` object. Instead, you will be working with
    a `FieldFile` object. The `FieldFile` class is a wrapper around a `file` that
    adds extra methods. Yes, it can be confusing to have classes called `FileField`
    and `FieldFile`.
  prefs: []
  type: TYPE_NORMAL
- en: The reason that Django uses `FieldFile` instead of just a `file` object is twofold.
    First, it adds extra methods to open, read, delete, and generate the URL of the
    file. Second, it provides an abstraction to allow alternative storage engines
    to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Storage Engines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We looked at custom storage engines in *Chapter 5*, *Serving Static Files*,
    regarding storing static files. We will not examine custom storage engines in
    detail about media files, since the code outlined in *Chapter 5*, *Serving Static
    Files*, for static files also applies to media files. The important thing to note
    is that the storage engine you are using can be changed without updating your
    other code. This means that you can have your media files stored on your local
    drive during development and then saved to a CDN when your application is deployed
    to production.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default storage engine class can be set with `DEFAULT_FILE_STORAGE` in
    `settings.py`. The storage engine can also be specified on a per-field basis (for
    `FileField` or `ImageField`) with the `storage` argument. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: This demonstrates what actually happens when you upload or retrieve a file.
    Django delegates to the storage engine to write or read it, respectively. This
    happens even while saving to disk; however, it is fundamental and is invisible
    to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Reading a Stored FieldFile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have learned about custom storage engines, let us look at reading
    from a `FieldFile`. In the previous sections, we saw how to set the file on the
    model instance. Reading the data back again is just as easy â we have a couple
    of different methods that can help us, depending on our use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following few code snippets, assume we are inside a view and have retrieved
    our model instance in some manner, and it is stored in a variable, `m`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'We can read all the data from the file with the `read` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can manually open the file with the `open` method. This might be useful
    if we want to write our own generated data to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'If we wanted to read the file in chunks, we can use the `chunks` method. This
    works the same as reading chunks from the uploaded file, as we saw earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also manually open the file ourselves by using its `path` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to stream a `FileField` for download, the best way is by using the
    `FileResponse` class as we saw earlier. Combine this with the `open` method on
    the `FileField`. Note that if we are just trying to serve a media file, we should
    only implement a view to do this if we are trying to restrict access to the file.
    Otherwise, we should just serve the file using `MEDIA_URL` and allow the web server
    to handle the request. Here is how we''d write our `download_view` to use a `FileField`
    instead of the manually specified path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Django opens the correct path and closes it after the response. Django will
    also attempt to determine the correct mime type for the file. We assume that this
    `FileField` has its `upload_to` attribute set to a protected directory that the
    web server is preventing direct access to.
  prefs: []
  type: TYPE_NORMAL
- en: Storing Existing Files or Content in FileField
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ve seen how to store an uploaded file in an image field â simply assign
    it to the field like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'But how can we set the `field` value to that of an existing file that we might
    already have on disk? You might think you can use a standard Python `file` object,
    but this won''t work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'You might also try setting the file using some content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: This won't work either.
  prefs: []
  type: TYPE_NORMAL
- en: You instead need to use the `save` method of `FileField`, which accepts an instance
    of a Django `File` or `ContentFile` object (these classes' full paths are `django.core.files.File`
    and `django.core.files.base.ContentFile`, respectively). We will briefly discuss
    the `save` method and its arguments then return to these classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `save` method of `FileField` takes three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: The name of the file you are saving. This is the name the file will
    have when saved to the storage engine (in our case, to disk, inside `MEDIA_ROOT`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Content`: This is an instance of `File` or `ContentFile`, which we just saw;
    again, we will discuss these soon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Save`: This argument is optional and defaults to `True`. This indicates whether
    or not to save the model instance to the database after saving the file. If set
    to `False` (that is, the model is not saved), then the file will still be written
    to the storage engine (to disk), but the association is not stored on the model.
    The previous file path (or no file if one was not set) will still be stored in
    the database until the model instance''s `save` method is called manually. You
    should only set this argument to `False` if you intend to make other changes to
    the model instance and then save it manually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Back to `File` and `ContentFile`: the one to use depends on what you want to
    store in a `FileField`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`File` is used as a wrapper around a Python `file` object, and you should use
    it if you have an existing `file` or file-like object that you want to save. File-like
    objects include `io.BytesIO` or `io.StringIO` instances. To instantiate a `File`
    instance, just pass the native `file` object to the constructor, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `ContentFile` when you already have some data loaded, either a `str` or
    `bytes` object. Pass the data to the `ContentFile` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have either a `File` or `ContentFile` instance, saving the data
    to the `FileField` is easy, using the `save` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Since we did not pass a value for `save` to the `save` method, it will default
    to `True`, so the model instance is automatically persisted to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at how to store an image that has been manipulated with a
    PIL back to an image field.
  prefs: []
  type: TYPE_NORMAL
- en: Writing PIL Images to ImageField
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In *Exercise 8.05*, *Image Uploads Using Django Forms*, you used PIL to resize
    an image and save it to disk. When working with a model, you might want to perform
    a similar operation, but have Django handle the file storage using the `ImageField`
    so that you do not have to do it manually. As in the exercise, you could save
    the image to disk and then use the `File` class to wrap the stored path â something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we're having PIL stored to a temporary location with the `Image.save()`
    method, and then re-opening the file.
  prefs: []
  type: TYPE_NORMAL
- en: This method works but is not ideal as it involves writing the file to disk and
    then reading it out again, which can sometimes be slow. Instead, we can perform
    this whole process in memory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`io.BytesIO` and `io.StringIO` are useful objects. They behave like files but
    exist in memory only. `BytesIO` is used for storing raw bytes, and `StringIO`
    accepts Python 3''s native Unicode strings. You can `read`, `write`, and `seek`
    them, just like a normal file. Unlike a normal file though, they do not get written
    to disk and instead will disappear when your program terminates, or they go out
    of scope and are garbage-collected. They are very useful if a function wants to
    write to something like a file, but you want to access the data immediately.'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will save the image data to an `io.BytesIO` object. Then, we will
    wrap the `BytesIO` object in a `django.core.files.images.ImageFile` instance (a
    subclass of `File` that is specifically for images and provides `width` and `height`
    attributes). Once we have this `ImageFile` instance, we can use it in the `save`
    method of `ImageField`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'An `ImageFile` is a file or file-like wrapper just like `File`. It provides
    two extra attributes: `width`, and `height`. `ImageFile` does not generate any
    errors if you use it to wrap a non-image. For example, you could `open()` a text
    file and pass the filehandle to the `ImageFile` constructor without any issue.
    You can check whether the image file you passed in was valid by trying to access
    the `width` or `height` attributes: if these are `None`, then PIL was unable to
    decode the image data. You could check for the validity of these values yourself
    and throw an exception if they were `None`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us have a look at this in practice, in a view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: You can see this is a little bit more code, but it saves on writing the data
    to disk. You can choose to use either method (or another one that you come up
    with) depending on your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Referring to Media in Templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have uploaded a file, we want to be able to refer to it in a template.
    For an uploaded image, such as a book cover, we will want to be able to display
    the image on the page. We saw in *Exercise 8.02*, *Template Settings and Using
    MEDIA_URL in Templates*, how to build a URL using `MEDIA_URL` in a template. When
    working with `FileField` or `ImageField` on a model instance, it is not necessary
    to do this as Django provides this functionality for you.
  prefs: []
  type: TYPE_NORMAL
- en: The `url` attribute of a `FileField` will automatically generate the full URL
    to the media file, based on the `MEDIA_URL` in your settings.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that references we make to a `FileField` in this section also apply to
    `ImageField`, as it is a subclass of `FileField`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be used anywhere that you have access to the instance and field, such
    as in a view or a template. For example, in a view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Or in a template (assuming the `instance` has been passed to the template context):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: In the next exercise, we will create a new model with a `FileField` and `ImageField`,
    then show how Django can automatically save these. We'll also demonstrate how
    to retrieve the URL for an uploaded file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.06: FileField and ImageField on Models'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will create a model with a `FileField` and `ImageField`.
    After doing this, we will have to generate a migration and apply it. We will then
    change the `UploadForm` we have been using so it has both a `FileField` and an
    `ImageField`. The `media_example` view will be updated to store the uploaded files
    in the model instance. Finally, we will add an `<img>` into the example template
    to show the previously uploaded image:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In PyCharm, open the `media_example` app''s `models.py` file. Create a new
    model called `ExampleModel`, with two fields: an `ImageField` named `image_field`,
    and a `FileField` called `file_field`. The `ImageField` should have its `upload_to`
    set to `images/`, and the `FileField` should have its `upload_to` set to `files/`.
    The finished model should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your `models.py` should now look like this: [http://packt.live/3p4bfrr](http://packt.live/3p4bfrr).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open a terminal and navigate to the `media_project` project directory. Make
    sure your `bookr` virtual environment is active. Run the `makemigrations` management
    command to generate the migrations for this new model (for Windows, you can use
    `python` instead of `python3` in the following code):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the migration by running the `migrate` management command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that all the initial Django migrations will also be applied since we did
    not apply those after creating the project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Switch back to PyCharm and open the `reviews` app''s `forms.py` file. Rename
    the existing `ImageField` from `file_upload` to `image_upload`. Then, add a new
    `FileField` named `file_upload`. After making these changes, your `UploadForm`
    code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can save and close the file. It should look like this: [http://packt.live/37RZcaG](http://packt.live/37RZcaG).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `media_example` app''s `views.py` file. First, import `ExampleModel`
    into the file. To do this, add this line at the top of the file after the existing
    `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Some imports will no longer be required, so you can remove these lines:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `media_example` view, set a default for the instance that you will render,
    in case one is not created. After the function definition, define a variable called
    `instance`, and set it to `None`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can completely remove the contents of the `form.is_valid()` branch as you
    no longer need to manually save the file. Instead, it will automatically be saved
    when the `ExampleModel` instance is saved. You will instantiate an `ExampleModel`
    instance and set the `file` and `image` fields from the uploaded form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this code under the `if form.is_valid():` line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the instance through to the template in the context dictionary that is
    passed to `render`. Use the key `instance`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, your completed `media_example` view should look like this: [http://packt.live/3hqyYz7](http://packt.live/3hqyYz7).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now save and close this file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `media-example.html` template. Add an `<img>` element that displays
    the last uploaded image. Under the closing `</form>` tag, add an `if` template
    tag that checks if an `instance` has been provided. If so, display an `<img>`
    with a `src` attribute of `instance.image_field.url`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can save and close this file. It should now look like this: [http://packt.live/2X5d5w9](http://packt.live/2X5d5w9).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server if it is not already running, then navigate to
    `http://127.0.0.1:8000/media-example/`. You should see the form rendered with
    two fields:![Figure 8.20: UploadForm with two fields'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.20: UploadForm with two fields'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select a file for each field â for the `ImageField` you must select an image,
    but any type of file is allowed for the `FileField`. See *Figure 8.21*, which
    shows the fields with files selected:![Figure 8.21: ImageField and FileField with
    files selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.21: ImageField and FileField with files selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, submit the form. If the submission was successful, the page will reload
    and the last image you uploaded will be displayed (*Figure 8.22*):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.22: The last image that was uploaded is displayed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_08_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.22: The last image that was uploaded is displayed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can see how Django stores the files by looking in the `MEDIA_ROOT` directory.
    *Figure 8.23* shows the directory layout in PyCharm:![Figure 8.23: Uploaded files
    that Django has created'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.23: Uploaded files that Django has created'
  prefs: []
  type: TYPE_NORMAL
- en: You can see that Django has created the `files` and `images` directories. These
    were what you set in the `upload_to` arguments on the `ImageField` and `FileField`
    of the model. You could also verify these uploads by attempting to download them,
    for example, at `http://127.0.0.1:8000/media/files/sample.txt` or `http://127.0.0.1:8000/media/images/cover.jpg`.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we created `ExampleModel` with `FileField` and `ImageField`
    and saw how to store uploaded files in it. We saw how to generate a URL to an
    uploaded file for use in a template. We tried uploading some files and saw that
    Django automatically created the `upload_to` directories (`media/files` and `media/images`),
    then stored the files inside.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how we can simplify the process even further
    by using a `ModelForm` to generate the form and save the model without having
    to manually set the files in the view.
  prefs: []
  type: TYPE_NORMAL
- en: ModelForms and File Uploads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have seen how using a `form.ImageField` on a form can prevent non-images
    being uploaded. We have also seen how `models.ImageField` makes it easy to store
    an image for a model. But we need to be aware that Django does not stop you from
    setting a non-image file to an `ImageField`. For example, consider a form that
    has both a `FileField` and `ImageField`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following view, the form would not validate if the `uploaded_image`
    field on the form was not an image, so some data validity is ensured for uploaded
    data. ForÂ example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Since we are sure the form is valid, we know that `forms.cleaned_data["uploaded_image"]`
    must contain an image. Therefore, we would neverÂ assign a non-image to the model
    instance's `image_field`.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, say we made a mistake in our code and wrote something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: That is, if we accidentally reference the `FileField` by mistake, Django does
    not validate that a (potential) non-image is being assigned to an `ImageField`,
    and so it does not throw an exception or generate any kind of error. We can mitigate
    the potential for issues like this by using a `ModelForm`.
  prefs: []
  type: TYPE_NORMAL
- en: We introduced `ModelForm` in *Chapter 7*, *Advanced Form Validation and Model
    Forms* â these are forms whose fields are automatically defined from a model.
    We saw that a `ModelForm` has a `save` method that automatically creates or updates
    the model data in the database. When used with a model that has a `FileFIeld`
    or `ImageField`, then the `ModelForm` `save` method will also save uploaded files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of using a `ModelForm` to save a new model instance in a
    view. Here, we are just making sure to pass `request.FILES` to the `ModelForm`Â constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'As with any `ModelForm`, the `save` method can be called with the `commit`
    argument set to `False`. Then the model instance will not be saved to the database,
    and the `FileField`/`ImageField` files will not be saved to disk. The `save` method
    should be called on the model instance itself âÂ this will commit changes to the
    database and save the files. In this next short example, we set a value on the
    model instance before saving it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Calling the `save` method on the model instance both saves the model data to
    the database and the uploaded files to disk. In the next exercise, we will build
    a `ModelForm` from `ExampleModel`, which we created in *Exercise 8.06*, *FileField
    and ImageField on Models*, then test uploading files with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8.07: File and Image Uploads Using a ModelForm'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will update `UploadForm` to be a subclass of `ModelForm`
    and have it built automatically from `ExampleModel`. You will then change the
    `media_example` view to save the instance automatically from the form, so you
    can see how the amount of code can be reduced:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In PyCharm, open the `media_example` apps'' `forms.py` file. You need to use
    `ExampleModel` in this chapter, so `import` it at the top of the file after the
    `from django import forms` statement. Insert this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change `UploadForm` to be a subclass of `forms.ModelForm`. Remove the `class`
    body and replace it with a `class Meta` definition; its `model` should be `ExampleModel`.
    Set the `fields` attribute to `__all__`. After completing this step, your `UploadForm`
    should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save and close the file. It should now look like this: [http://packt.live/37X49ig](http://packt.live/37X49ig).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `media_example` app''s `views.py` file. Since you no longer need to
    reference the `ExampleModel` directly, you can remove its `import` at the top
    of the file. Remove the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `media_example` view, remove the entirety of the `form.is_valid()` branch
    and replace it with a single line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The form's `save` method will handle persisting the instance to the database
    and saving the files. It will return an instance of `ExampleModel`, the same as
    the other instances of `ModelForm` we have worked with in *Chapter 7*, *Advanced
    Form Validation and Model Forms*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After completing this step, your `media_example` function should look like
    this: [http://packt.live/37V0ly2](http://packt.live/37V0ly2). Save and close `views.py`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server if it is not already running, then navigate to
    `http://127.0.0.1:8000/media-example/`. You should see the form rendered with
    two fields, `Image field` and `File field` (*Figure 8.24*):![Figure 8.24: UploadForm
    as a ModelForm rendered in the browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.24: UploadForm as a ModelForm rendered in the browser'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that the names of these fields now match those of the model rather than
    the form, as the form just uses the model's fields.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Browse and select an image and file (*Figure 8.25*), then submit the form:![Figure
    8.25: Image and file selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.25: Image and file selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The page will reload, and as in *Exercise 8.06*, *FileField and ImageField
    on Models*, you will see the previously uploaded image (*Figure 8.26*):![Figure
    8.26: Image being displayed after upload'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.26: Image being displayed after upload'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, examine the contents of the `media` directory. You should see the
    directory layout matches that of *Exercise 8.06*, *FileField and ImageField on
    Models*, with images inside the `images` directory, and files inside the `files`
    directory:![Figure 8.27: The uploaded files directory matches Exercise 8.06'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_08_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.27: The uploaded files directory matches Exercise 8.06'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we changed `UploadForm` to be a `ModelForm` subclass, which
    allowed us to automatically generate the upload fields. We could replace the code
    that stored the uploaded files on the models with a call to the form's `save`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: We have now covered everything you need to start enhancing Bookr with file uploads.
    In the activity for this chapter, we will add support for uploading a cover image
    and sample document (PDF, text file, and more) for a book. The book cover will
    be resized using PIL before it is saved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 8.01: Image and PDF Uploads of Books'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this activity, you will start by cleaning up (deleting) the example views,
    templates, forms, models, and URL maps that we have used throughout the exercises
    in this chapter. You will then need to generate and apply a migration to delete
    `ExampleModel` from the database.
  prefs: []
  type: TYPE_NORMAL
- en: You can then start adding the Bookr enhancements, first by adding an `ImageField`
    and `FileField` to the `Book` model to store the book `cover` and `sample`. Then
    you will create a migration and apply it to add these fields to the database.
    You can then build a form that will display just these new fields. You will add
    a view that uses this form to save the model instance with the uploaded files,
    after first resizing the image to thumbnail size. You will be able to reuse the
    `instance-form.html` template from *Chapter 7*, *Advanced Form Validation and
    Model Forms*, with a minor change to allow file uploads.
  prefs: []
  type: TYPE_NORMAL
- en: 'These steps will help you complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Update the Django settings to add the settings `MEDIA_ROOT` and `MEDIA_URL`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `/media/` URL mapping should be added to `urls.py`. Use the `static` view
    and utilize `MEDIA_ROOT` and `MEDIA_URL` from Django settings. Remember, this
    mapping should only be added if `DEBUG` is true.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `ImageField` (named `cover`) and `FileField` (named `sample`) to the
    `Book` model. The fields should upload to `book_covers/` and `book_samples/`,
    respectively. They should both allow `null` and `blank` values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `makemigrations` and `migrate` again to apply the `Book` model changes to
    the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `BookMediaForm` as a subclass of `ModelForm`. Its model should be `Book`,
    and the fields should only be the fields you added in *step 3*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `book_media` view. This will not allow you to create a `Book`, instead,
    it will only allow you to add media to an existing `Book` (so it must take `pk`
    as a required argument).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `book_media` view should validate the form, and `save` it, but not `commit`
    the instance. The uploaded cover should first be resized using the `thumbnail`
    method as demonstrated in the *Writing PIL Images to ImageField* section. The
    maximum size should be 300 by 300 pixels. It should then be stored on the instance
    and the instance saved. Remember that the `cover` field is not required so you
    should check this before trying to manipulate the image. On a successful `POST`,
    register a success message that the `Book` was updated, then redirect to the `book_detail`
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Render the `instance-form.html`, passing a context dictionary containing `form`,
    `model_type,` and `instance`, as you did in *Chapter 6*, *Forms*. Also pass another
    item, `is_file_upload`, set to `True`. This variable will be used in the next
    step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `instance-form.html` template, use the `is_file_upload` variable to add
    the correct `enctype` attribute to the form. This will allow you to switch the
    modes for the form to enable file uploads when required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, add a URL map that maps `/books/<pk>/media/` to the `book_media` view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are finished, you should be able to start the Django dev server and
    load the `book_media` view at `http://127.0.0.1:8000/books/<pk>/media/`, for example,
    `http://127.0.0.1:8000/books/2/media/`. You should see the `BookMediaForm` rendered
    in the browser, like in *Figure 8.28*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.28: BookMediaForm in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.28: BookMediaForm in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: Select a cover image and sample file for the book. You can use the image at
    [http://packt.live/2KyIapl](http://packt.live/2KyIapl) and PDF at [http://packt.live/37VycHn](http://packt.live/37VycHn)
    (or you can use any other image/PDF of your choosing).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.29: Book Cover image and Sample selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.29: Book Cover image and Sample selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'After submitting the form, you will be redirected to the `Book Details` view
    and see the success message (*Figure 8.30*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.30: Success message on the Book Details page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.30: Success message on the Book Details page'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go back to the same book''s media page, you should see the fields are
    now filled in, with an option to clear the data from them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.31: BookMediaForm with existing values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.31: BookMediaForm with existing values'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Activity 8.02*, *Displaying Cover and Sample Links*, you will add these
    uploaded files to the `Book Details` view, but for now, if you want to check that
    uploads have worked, you can look inside the `media` directory in the Bookr project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.32: Book media'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.32: Book media'
  prefs: []
  type: TYPE_NORMAL
- en: You should see the directories that were created and the uploaded files, as
    per *Figure 8.32*. Open an uploaded image, and you should see its maximum dimension
    is 300Â pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found at [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ).
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 8.02: Displaying Cover and Sample Links'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this activity, you will update the `book_detail.html` template to show the
    cover for the `Book` (if one is set). You will also add a link to download the
    sample, again, only if one is set. You will use the `FileField` and `ImageField`
    `url` attributes to generate the URLs to the media files.
  prefs: []
  type: TYPE_NORMAL
- en: 'These steps will help you complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `Book Details` display in the `book_detail.html` view, add an `<img>`
    element if the book has a `cover` image. Then, display the cover of the book inside
    it. Use `<br>` after the `<img>` tag so the image is on its own line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the `Publication Date` display, add a link to the sample file. It should
    only be displayed if a `sample` file has been uploaded. Make sure you add another
    `<br>` tag so it displays correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the section that has a link to add a review, add another link that goes to
    the media page for the book. Follow the same styling as the `Add Review` link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you have completed these steps, you should be able to load a book detail
    page. If the book has no `cover` or `sample`, then the page should look very similar
    to what it did before, except you should see the new link to the `Media` page
    at the bottom (*Figure 8.33*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.33: New Media button visible on the book detail page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.33: New Media button visible on the book detail page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have uploaded a `cover` and/or a `sample` for a `Book`, the cover
    image and sample link should be displayed (*Figure 8.34*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.34: Book cover and sample link displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_08_34.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.34: Book cover and sample link displayed'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found at [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we added the `MEDIA_ROOT` and `MEDIA_URL` settings and a special
    URL map to serve media files. We then created a form and a view to upload files
    and save them to the `media` directory. We saw how to add the media context processor
    to automatically have access to the `MEDIA_URL` setting in all our templates.
    We then enhanced and simplified our form code by using a Django form with a `FileField`
    or `ImageField`, instead of manually defining one in HTML.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at some of the enhancements Django provides for images with the `ImageField`,
    and how to interact with an image using Pillow. We showed an example view that
    would be able to serve files that required authentication, using the `FileResponse`
    class. Then, we saw how to store files on models using the `FileField` and `ImageField`
    and refer to them in a template using the `FileField.url` attribute. We were able
    to reduce the amount of code we had to write by automatically building a `ModelForm`
    from a `model` instance. Finally, in the two activities at the end, we enhanced
    Bookr by adding a cover image and sample file to the `Book` model. In *Chapter
    9*, *Sessions and Authentication*, we will learn how to add authentication to
    a Django application to protect it from unauthorized users.
  prefs: []
  type: TYPE_NORMAL
