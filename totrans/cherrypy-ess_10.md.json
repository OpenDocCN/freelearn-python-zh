["```py\n[section]\nkey = value\n\n```", "```py\n[global]\nserver.socket_host = \"localhost\"\nserver.socket_port = 8080\n\n```", "```py\n[/css/style.css]\ntools.staticfile.on = True\ntools.staticfile.file = \"app.css\"\ntools.staticfile.root = \"/var/www/photoblog/design/default/css\"\n\n```", "```py\n{'/css/style.css': {'tools.staticfile.on': True,\n'tools.staticfilE.file': \"app.css\" 'tools.staticfile.root':\n\"/var/www/photoblog/design/default/css\"}}\n\n```", "```py\nimport cherrypy\nclass Root:\n@cherrypy.expose\ndef echo(self, some):\nrepeat = cherrypy.request.config.get('repeat', 1)\nreturn some * repeat\necho._cp_config = {'repeat': 3}\nif __name__ == '__main__':\nhttp_conf = {'global': {'environment': 'production',\n'server.socket_port': 9090,\n'log.screen': True,\n'log.error_file': 'error.log',\n'log.access_file': 'access.log'}}\ncherrypy.config.update(http_conf)\napp0_conf = {'/echo': {'tools.response_headers.on': True,\n'tools.response_headers.headers':\n('Content-Type', 'text/plain')]}}\ncherrypy.tree.mount(Root(), script_name='/app0',\nconfig=app0_conf)\napp1_conf = {'/echo': {'tools.gzip.on': True,\n'repeat': 2}}\ncherrypy.tree.mount(Root(), script_name='/app1',\nconfig=app1_conf)\ncherrypy.server.quickstart()\ncherrypy.engine.start()\n\n```", "```py\n    http_conf = {'environment': 'production',\n    'server.socket_port': 9090,\n    'log.screen': True,\n    'log.error_file': 'error.log',\n    'log.access_file': 'access.log'}\n    cherrypy.config.update(http_conf)\n\n    ```", "```py\nfrom ConfigParser import ConfigParser\nclass Config(object):\ndef from_ini(self, filepath, encoding='ISO-8859-1'):\nconfig = ConfigParser()\nconfig.readfp(file(filepath, 'rb'))\nfor section in config.sections():\nsection_prop = Config()\nsection_prop.keys = []\nsetattr(self, section, section_prop)\nfor option in config.options(section):\nsection_prop.keys.append(option)\nvalue = config.get(section, option).decode(encoding)\nsetattr(section_prop, option, value)\n\n```", "```py\n[app]\nbase_url = http://localhost:8080\ncopyright = Creative Commons Attribution-ShareAlike2.5 License\n[storage]\nhost = localhost\ndbname = photoblog\nuser = test\npassword = test\ntype = postgres\n\n```", "```py\nimport config\nphotoblogconfiguringc = config.Config()\nc.from_ini('application.conf')\ndir(c)\n['__class__', '__delattr__', '__dict__', '__doc__',\n'__getattribute__', '__hash__', '__init__', '__module__'\n'__new__', '__reduce__', '__reduce_ex__', '__repr__',\n'__setattr__', '__str__', '__weakref__', 'app', 'storage']\nc.app.copyright\nu'Creative Commons Attribution-ShareAlike2.5 License'\n\n```", "```py\nimport.cherrypy\ndef setup_app():\nclass Root:\n@cherrypy.expose\ndef index(self):\n# Will return the hostname used by CherryPy and the remote\n# caller IP address\nreturn \"Hello there %s from IP: %s \" %\n(cherrypy.request.base, cherrypy.request.remote.ip)\ncherrypy.config.update({'server.socket_port': 9091,\n'environment': 'production',\n'log.screen': False,\n'show_tracebacks': False})\ncherrypy.tree.mount(Root())\nif __name__ == '__main__':\nsetup_app()\ncherrypy.server.quickstart()\ncherrypy.engine.start()\n\n```", "```py\nLoadModule rewrite_module modules/mod_rewrite.so\n\n```", "```py\n# Create a virtual host in your apache configuration\n# to handle requests for the myapp.com hostname\n<VirtualHost 127.0.0.1:80>\nServerName myapp.com\nServerAlias www.myapp.com\n# Where our application files reside\nDocumentRoot /home/sylvain/photoblog\n# What is our directory index by default\nDirectoryIndex index.html\n# Message to return when our CherryPy server is down and\n# apache could not forward the request.\nErrorDocument 502 \"Server down\"\n# mod_proxy magic\n# First enable the mod_rewrite engine\nRewriteEngine on\n# Now we simply rewrite incoming requests URI so that they\n# are proxied to our CherryPy web server\n# http://myapp.com/archives/2006/10/12/my-article\n# would become\n# http://127.0.0.1:9091/archives/2006/10/12/my-article\nRewriteRule ^(.*) http://127.0.0.1:9091$1 [P]\n# Now define the format of the logs to be used by Apache\nLogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\"\n\\\"%{User-Agent}i\\\"\" combined LogFormat\n\"%t %a %D %I %O %s %{Content-Type}o %{Host}i\n\\\"%r\\\" \\\"%{Referer}i\\\"\" host\nCustomLog /home/sylvain/photoblog/access_myapp.log combined\nErrorlog /home/sylvain/photoblog/error_myapp.log\n</VirtualHost>\n\n```", "```py\nHello there http://127.0.0.1:9091 from IP: 127.0.0.1\n\n```", "```py\nlink = \"%s/%s\" % (cherrypy.request.base, path)\n\n```", "```py\n        LoadModule proxy_module modules/mod_proxy.so\n        LoadModule proxy_http_module modules/mod_proxy_http.so\n\n        ```", "```py\n        ProxyPreserveHost on\n\n        ```", "```py\n'tools.proxy.on': True\n\n```", "```py\n$HTTP[\"host\"] == \"myapp.com\"\n{\nproxy.server = ( \"\" => ((\"host\" => \"127.0.0.1\",\n\"port\" => 8080)))\n}\n\n```", "```py\nLoadModule python_module modules/mod_python.so\n<Location \"/\">\nPythonPath \"sys.path + ['/home/sylvain/app']\"\nSetHandler python-program\nPythonHandler cherrypy._cpmodpy::handler\nPythonOption cherrypy.setup my_app::setup_app\nPythonDebug On\n</Location>\n\n```", "```py\nimport cherrypy\ndef setup_app():\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"Hello there %s from IP: %s \" % \\\n(cherrypy.request.base,cherrypy.request.remote.ip)\ncherrypy.tree.mount(Root())\ncherrypy.engine.start(blocking=False)\n\n```", "```py\nimport cherrypy\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"Hello there %s from IP: %s \" % (cherrypy.request.base,\ncherrypy.request.remote.ip)\n# Create an application respecting the WSGI interface\nwsgi_app = cherrypy.Application(Root())\n# This will be call on the first request\ndef setup_app(req):\ncherrypy.engine.start(blocking=False)\n\n```", "```py\n<Location \"/\">\nPythonPath \"sys.path + ['/home/sylvain/app']\"\nSetHandler python-program\nPythonHandler modpython_gateway::handler\nPythonOption wsgi.startup my_app::setup_app\nPythonOption wsgi.application my_app::wsgi_app\nPythonOption wsgi.cleanup cherrypy::engine.stop\n</Location>\n\n```", "```py\nopenssl genrsa -out server.key 2048 \n\n```", "```py\nopenssl genrsa -des3 -out server.key 2048 \n\n```", "```py\nopenssl rsa -in server.key -out server.key \n\n```", "```py\nopenssl req -new -key server.key -out server.csr \n\n```", "```py\nopenssl x509 -req -days 60 -in server.csr -signkey\nserver.key -out server.crt \n\n```", "```py\nimport cherrypy\nimport os, os.path\nlocalDir = os.path.abspath(os.path.dirname(__file__))\nCA = os.path.join(localDir, 'server.crt')\nKEY = os.path.join(localDir, 'server.key')\ndef setup_server():\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"Hello there!\"\ncherrypy.tree.mount(Root())\nif __name__ == '__main__':\nsetup_server()\ncherrypy.config.update({'server.socket_port': 8443,\n'environment': 'production',\n'log.screen': True,\n'server.ssl_certificate': CA,\n'server.ssl_private_key': KEY})\ncherrypy.server.quickstart()\ncherrypy.engine.start()\n\n```", "```py\nimport cherrypy\nfrom cherrypy import _cpwsgi\nfrom cherrypy import wsgiserver\nimport os, os.path\nlocalDir = os.path.abspath(os.path.dirname(__file__))\nCA = os.path.join(localDir, 'server.crt')\nKEY = os.path.join(localDir, 'server.key')\ndef setup_app():\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"Hello there!\"\ncherrypy.tree.mount(Root())\nif __name__ == '__main__':\nsetup_app()\n# Create a server which will accept HTTP requests\ns1 = _cpwsgi.CPWSGIServer()\n# Create a server which will accept HTTPS requests\nSSLin CherryPys2 = _cpwsgi.CPWSGIServer()\ns2.ssl_certificate = CA\ns2.ssl_private_key = KEY\n# Our first server uses the default CherryPy settings\n# localhost, 8080\\. We thus provide distinct ones\n# for the HTTPS server.\ns2.bind_addr = ('localhost', 8443)\n# Inform CherryPy which servers to start and use\ncherrypy.server.httpservers = {s1: ('localhost', 8080),\ns2: ('localhost', 8443)}\ncherrypy.server.start()\ncherrypy.engine.start()\n\n```", "```py\nssl.engine = \"enable\"\nssl.pemfile = \"/home/sylvain/application/server.pem\"\n\n```", "```py\ncat server.key server.crt > server.pem \n\n```", "```py\nLoadModule ssl_module modules/mod_ssl.so\nListen 127.0.0.1:443 \n\n```", "```py\n<VirtualHost 127.0.0.1:443>\nSSLEngine On\nSSLCertificateFile /home/sylvain/application/server.crt\nSSLCertificateKeyFile /home/sylvain/application/server.key\n</VirtualHost>\n\n```"]