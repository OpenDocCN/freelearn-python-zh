- en: Chapter 31
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第31章
- en: Two-Dimensional Lists
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 二维列表
- en: 31.1 Creating Two-Dimensional Lists in Python
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 31.1 在Python中创建二维列表
- en: A two-dimensional list is a data structure that can store values organized in
    rows and columns. It allows you to efficiently represent and manipulate tabular
    data. For instance, a list that can hold the grades of four lessons for three
    students is as follows.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 二维列表是一种可以存储按行和列组织的数据的结构。它允许您有效地表示和操作表格数据。例如，可以存储三个学生四个课程成绩的列表如下。
- en: '![Image](img/chapter31-01.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter31-01.png)'
- en: '![](img/notice.jpg)A two-dimensional list has rows and columns. In this particular
    example, list grades has 3 rows and 4 columns.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)二维列表有行和列。在这个特定的例子中，列表grades有3行和4列。'
- en: 'Unlike some other programming languages, Python does not directly support two-dimensional
    lists. Python primarily supports only one-dimensional lists, but there is a trick
    you can use to work around this and create multidimensional lists: you can create
    a list of lists! Think of the grades list as a single-column list with three elements
    (one for each student), each of which contains a completely new list of four elements
    (one for each lesson), as follows.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与一些其他编程语言不同，Python不直接支持二维列表。Python主要支持一维列表，但您可以使用一个技巧来解决这个问题并创建多维列表：您可以创建一个列表的列表！将grades列表想象成一个单列列表，有三个元素（每个学生一个），每个元素都包含一个完全新的列表，有四个元素（每个课程一个），如下所示。
- en: '![Image](img/chapter31-02.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter31-02.png)'
- en: '![](img/notice.jpg)In Python, a two-dimensional list is a list of lists, a
    three-dimensional list is a list of lists of lists, and so on.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在Python中，二维列表是列表的列表，三维列表是列表的列表的列表，依此类推。'
- en: As in one-dimensional lists, there are four approaches to creating and adding
    elements (and values) to a two-dimensional list. Let's try to create the list
    grades using each of these approaches.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与一维列表一样，有四种方法可以创建和向二维列表添加元素（及其值）。让我们尝试使用这些方法中的每一种来创建列表grades。
- en: First approach
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首种方法
- en: You can create a two-dimensional list in Python using the following statement,
    given in general form,
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下一般形式的语句在Python中创建二维列表，
- en: list_name = [None] * number_of_rows
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: list_name = [None] * number_of_rows
- en: where
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►list_name is the name of the list.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ►list_name是列表的名称。
- en: ►number_of_rows can be any positive integer value.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ►number_of_rows可以是任何正整数。
- en: Then, you can assign completely new lists to each one of its elements with the
    following statement, given in general form
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用以下一般形式的语句将完全新的列表分配给其每个元素
- en: list_name[index] = [value0, value1, value2, …, valueM]
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: list_name[index] = [value0, value1, value2, …, valueM]
- en: where
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►index is the index position of the element in the list.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ►index是列表中元素的索引位置。
- en: ►value0-0, value0-1, value0-2, …, valueN-M are the values of the list elements.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ►value0-0, value0-1, value0-2, …, valueN-M是列表元素的值。
- en: The following code fragment creates the list grades and assigns three lists
    (and values)  to its elements.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段创建了列表grades，并将其元素分配了三个列表（及其值）。
- en: grades = [None] * 3
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: grades = [None] * 3
- en: grades[0] = ["B+", "A+", "A", "C-"]
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: grades[0] = ["B+", "A+", "A", "C-"]
- en: grades[1] = ["B", "A", "C", "D"]
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: grades[1] = ["B", "A", "C", "D"]
- en: grades[2] = ["B", "B", "B-", "B+"]
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: grades[2] = ["B", "B", "B-", "B+"]
- en: Second approach
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: You can create a totally empty list and add new lists to it without using index,
    as shown in the following code fragment, given in general form.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个完全空的列表，并无需使用索引即可向其中添加新列表，如下面的代码片段所示，以一般形式给出。
- en: list_name = []
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: list_name = []
- en: list_name.append([value0-0, value0-1, value0-2, …, value0-M])
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: list_name.append([value0-0, value0-1, value0-2, …, value0-M])
- en: list_name.append([value1-0, value1-1, value1-2, …, value1-M])
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: list_name.append([value1-0, value1-1, value1-2, …, value1-M])
- en: list_name.append([value2-0, value2-1, value2-2, …, value2-M])
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: list_name.append([value2-0, value2-1, value2-2, …, value2-M])
- en: …
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: list_name.append([valueN-0, valueN-1, valueN-2, …, valueN-M])
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: list_name.append([valueN-0, valueN-1, valueN-2, …, valueN-M])
- en: The next code fragment creates the list grades and adds three lists (and values)
    to it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段创建了列表grades，并向其中添加了三个列表（及其值）。
- en: grades = []
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: grades = []
- en: grades.append(["B+", "A+", "A", "C-"])
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: grades.append(["B+", "A+", "A", "C-"])
- en: grades.append(["B", "A", "C", "D"])
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: grades.append(["B", "A", "C", "D"])
- en: grades.append(["B", "B", "B-", "B+"])
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: grades.append(["B", "B", "B-", "B+"])
- en: '![](img/notice.jpg)Note that in this approach, index numbering starts at zero
    by default.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)请注意，在此方法中，默认情况下索引编号从零开始。'
- en: Third approach
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法
- en: You can create a list and directly add values to it, as shown in the following
    Python statement, given in general form.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个列表并直接向其中添加值，如下面的Python语句所示，以一般形式给出。
- en: list_name = [
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: list_name = [
- en: '[value0-0, value0-1, value0-2, …, value0-M],'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[value1-0, value1-1, value1-2, …, value1-M],'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[value2-0, value2-1, value2-2, …, value2-M],'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: …
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[valueN-0, valueN-1, valueN-2, …, valueN-M]'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the list grades can be created using the following statement.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: grades = [
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '["B+", "A+", "A", "C-"],'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '["B", "A", "C", "D"],'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '["B", "B", "B-", "B+"]'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: which can also be written in one line as
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: grades = [["B+", "A+", "A", "C-"], ["B", "A", "C", "D"], ["B", "B", "B-", "B+"]]
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Fourth approach
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, you can create a two-dimensional list in Python using the
    following statement, given in general form:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: list_name = [[None] * number_of_columns for i in range(number_of_rows)]
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: where number_of_rows and number_of_columns can be any positive integer.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you can assign a value to a list element using the following statement,
    given in general form:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: list_name[row_index][column_index] = value
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: where row_index and column_index are the row index and the column index positions,
    respectively, of the element in the list.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: The following code fragment creates the list grades and assigns values to its
    elements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: grades = [[None] * 4 for i in range(3)]
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: grades[0][0] = "B+"
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: grades[0][1] = "A+"
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: grades[0][2] = "A"
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: grades[0][3] = "C-"
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: grades[1][0] = "B"
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: grades[1][1] = "A"
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: grades[1][2] = "C"
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: grades[1][3] = "D"
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: grades[2][0] = "B"
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: grades[2][1] = "B"
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: grades[2][2] = "B-"
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: grades[2][3] = "B+"
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 31.2 How to Get Values from Two-Dimensional Lists
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A two-dimensional list consists of rows and columns. The following example shows
    a two-dimensional list with three rows and four columns.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter31-03.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: 'Each element of a two-dimensional list can be uniquely identified using a pair
    of indexes: a row index, and a column index, as shown next.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: list_name[row_index][column_index]
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program creates the two-dimensional list grades having
    three rows and four columns, and then displays some of its elements.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: grades = [
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '["B+", "A+", "A", "C-"],'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '["B", "A", "C", "D"],'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '["B", "B", "B-", "B+"]'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'print(grades[1][2])        #It displays: C'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'print(grades[2][2])        #It displays: B-'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'print(grades[0][0])        #It displays: B+'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 31.2-1 Creating the Trace Table
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create the trace table for the next code fragment.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: a = [
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[0, 0],'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[0, 0],'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[0, 0]'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: a[1][0] = 9
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: a[0][1] = 1
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: a[0][0] = a[0][1] + 6
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: x = 2
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: a[x][1] = a[0][0] + 4
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: a[x - 1][1] = a[0][1] * 3
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: a[x][0] = a[x - 1][1] - 3
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: This code fragment uses a 3 × 2 list, that is, a list that has 3 rows and 2
    columns. The trace table is as follows.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | x | a |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = [    [0, 0],'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[0, 0],'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[0, 0]'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '] | This creates the list a with zero values in it. | ? |'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 | a[1][0] = 9 |   | ? |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
- en: '&#124; 0 &#124; 0 &#124;'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 9 &#124; 0 &#124;'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 | a[0][1] = 1 |   | ? |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
- en: '&#124; 0 &#124; 1 &#124;'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 9 &#124; 0 &#124;'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '| 4 | a[0][0] = a[0][1] + 6 |   | ? |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
- en: '&#124; 7 &#124; 1 &#124;'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 9 &#124; 0 &#124;'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 | 0 |'
- en: '|'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| 5 | x = 2 |   | 2 |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 5 | x = 2 | | 2 |'
- en: '&#124; 7 &#124; 1 &#124;'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '| 7 | 1 |'
- en: '&#124; 9 &#124; 0 &#124;'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '| 9 | 0 |'
- en: '&#124; 0 &#124; 0 &#124;'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 | 0 |'
- en: '|'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| 6 | a[x][1] = a[0][0] + 4 |   | 2 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 6 | a[x][1] = a[0][0] + 4 | | 2 |'
- en: '&#124; 7 &#124; 1 &#124;'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '| 7 | 1 |'
- en: '&#124; 9 &#124; 0 &#124;'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '| 9 | 0 |'
- en: '&#124; 0 &#124; 11 &#124;'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 | 11 |'
- en: '|'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| 7 | a[x − 1][1] = a[0][1] * 3 |   | 2 |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 7 | a[x − 1][1] = a[0][1] * 3 | | 2 |'
- en: '&#124; 7 &#124; 1 &#124;'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '| 7 | 1 |'
- en: '&#124; 9 &#124; 3 &#124;'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '| 9 | 3 |'
- en: '&#124; 0 &#124; 11 &#124;'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 | 11 |'
- en: '|'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| 8 | a[x][0] = a[x − 1][1] - 3 |   | 2 |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 8 | a[x][0] = a[x − 1][1] - 3 | | 2 |'
- en: '&#124; 7 &#124; 1 &#124;'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '| 7 | 1 |'
- en: '&#124; 9 &#124; 3 &#124;'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '| 9 | 3 |'
- en: '&#124; 0 &#124; 11 &#124;'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '| 0 | 11 |'
- en: '|'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 31.3 How to Iterate Through a Two-Dimensional List
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 31.3 如何遍历二维列表
- en: Since a two-dimensional list consists of rows and columns, a program can iterate
    either through rows or through columns.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 由于二维列表由行和列组成，程序可以遍历行或列。
- en: Iterating through rows
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历行
- en: Iterating through rows means that row 0 is processed first, row 1 is process
    next, row 2 afterwards, and so on. Next there is an example of a 3 × 4 list. The
    arrows show the “path” that is followed when iteration through rows is performed
    or in other words, they show the order in which the elements are processed.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历行意味着首先处理行0，然后是行1，接着是行2，依此类推。下面是一个3 × 4列表的例子。箭头显示了在遍历行时遵循的“路径”，换句话说，它们显示了处理元素时的顺序。
- en: '![Image](img/chapter31-04.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter31-04.png)'
- en: '![](img/remember.jpg)A 3 × 4 list is a two-dimensional list that has 3 rows
    and 4 columns. In the notation Y × X, the first number (Y) always represents the
    total number of rows and the second number (X) always represents the total number
    of columns.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)3 × 4列表是一个二维列表，有3行和4列。在Y × X的表示法中，第一个数字（Y）始终代表总行数，第二个数字（X）始终代表总列数。'
- en: 'When iterating through rows, the elements of the list are processed as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当遍历行时，列表的元素按以下顺序处理：
- en: ►the elements of row 0 are processed in the following order
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: ►行0的元素按以下顺序处理
- en: a[0][0] → a[0][1] → a[0][2] → a[0][3]
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: a[0][0] → a[0][1] → a[0][2] → a[0][3]
- en: ►the elements of row 1 are processed in the following order
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: ►行1的元素按以下顺序处理
- en: a[1][0] → a[1][1] → a[1][2] → a[1][3]
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: a[1][0] → a[1][1] → a[1][2] → a[1][3]
- en: ►the elements of row 2 are processed in the following order
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ►行2的元素按以下顺序处理
- en: a[2][0] → a[2][1] → a[2][2] → a[2][3]
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: a[2][0] → a[2][1] → a[2][2] → a[2][3]
- en: First approach
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: Using Python statements, let's try to process all elements of a 3 × 4 list (3
    rows × 4 columns) iterating through rows.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python语句，让我们尝试通过遍历行来处理3 × 4列表（3行 × 4列）的所有元素。
- en: 'i = 0                   #Variable i refers to row 0.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'i = 0 # 变量i指向行0。'
- en: 'for j in range(4):      #This loop control structure processes all elements
    of row 0'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(4): # 这个循环控制结构处理行0的所有元素'
- en: process a[i][j]
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: process a[i][j]
- en: 'i = 1                   #Variable i refers to row 1.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'i = 1 # 变量i指向行1。'
- en: 'for j in range(4):      #This loop control structure processes all elements
    of row 1'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(4): # 这个循环控制结构处理行1的所有元素'
- en: process a[i][j]
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: process a[i][j]
- en: 'i = 2                   #Variable i refers to row 2.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 'i = 2 # 变量i指向行2。'
- en: 'for j in range(4):      #This loop control structure processes all elements
    of row 2'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(4): # 这个循环控制结构处理行2的所有元素'
- en: process a[i][j]
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: process a[i][j]
- en: Of course, the same results can be achieved using a nested loop control structure
    as shown next.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，可以使用下面的嵌套循环控制结构达到相同的结果。
- en: 'for i in range(3):'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3):'
- en: 'for j in range(4):'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(4):'
- en: process a[i][j]
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: process a[i][j]
- en: Let's see some examples. The following code fragment lets the user enter 10
    × 10 = 100 values into list b.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些例子。以下代码片段允许用户将10 × 10 = 100个值输入到列表b中。
- en: 'for i in range(10):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10):'
- en: 'for j in range(10):'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(10):'
- en: b[i][j] = input()
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b[i][j] = input()
- en: The following code fragment decreases all values of list b by one.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将列表b的所有值减一。
- en: 'for i in range(10):'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10):'
- en: 'for j in range(10):'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(10):'
- en: 'b[i][j] -= 1    #Equivalent to: b[i][j] = b[i][j] − 1'
  id: totrans-187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'b[i][j] -= 1 # 等价于：b[i][j] = b[i][j] − 1'
- en: The following code fragment displays all elements of list b.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了列表b的所有元素。
- en: 'for i in range(10):'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10):'
- en: 'for j in range(10):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(10):'
- en: print(b[i][j], end = "\t")
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(b[i][j], end = "\t")
- en: print()
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: '![](img/notice.jpg)The print() statement is used to “display” a line break
    between rows.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)print()语句用于在行之间“显示”换行符。'
- en: Second approach
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: There is also another approach that is very simple but not as flexible as the
    previous one. There are cases where it cannot be used, as you will see below.
    Following is a code fragment, written in general form
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 也有另一种非常简单但不如前一种灵活的方法。在某些情况下，它不能使用，您将在下面看到。以下是一个通用形式的代码片段
- en: 'for row in list_name:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 'for row in list_name:'
- en: 'for element in row:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 'for element in row:'
- en: process element
  id: totrans-198
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: process element
- en: in which process is any Python statement or block of statements that processes
    one element of the list at each iteration.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 process 是每次迭代处理列表中一个元素的任何 Python 语句或语句块。
- en: The following Python program, displays all elements of list b, one at each iteration.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Python 程序，在每次迭代中显示列表 b 的所有元素。
- en: 'for row in b:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 'for row in b:'
- en: 'for element in row:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 'for element in row:'
- en: print(element, end = "\t")
  id: totrans-203
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(element, end = "\t")
- en: print()
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: 'Keep in mind, though, that this approach cannot be used to alter the values
    of the elements in a list. For example, if you wish to double the values of all
    elements in the list numbers, you cannot do the following:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这种方法不能用来改变列表中元素的价值。例如，如果你想将列表 numbers 中所有元素的价值加倍，你不能这样做：
- en: numbers = [
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: numbers = [
- en: '[5, 10, 3, 2],'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[5, 10, 3, 2],'
- en: '[2, 4, 1, 6]'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[2, 4, 1, 6]'
- en: ']'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: 'for x in numbers:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 'for x in numbers:'
- en: 'for number in x:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 'for number in x:'
- en: number = number * 2
  id: totrans-212
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: number = number * 2
- en: Iterating Through Columns
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历列
- en: Iterating through columns means that column 0 is processed first, column 1 is
    processed next, column 2 afterwards, and so on. Next there is an example of a
    3 × 4 list. The arrows show the order in which the elements are processed.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历列意味着首先处理列 0，然后是列 1，接着是列 2，依此类推。以下是一个 3 × 4 列表的例子。箭头显示了处理元素的顺序。
- en: '![Image](img/chapter31-05.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter31-05.png)'
- en: 'When iterating through columns, the elements of the list are processed as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当遍历列时，列表的元素按以下顺序处理：
- en: ►the elements of column 0 are processed in the following order
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: ►第 0 列的元素按以下顺序处理
- en: a[0][0] → a[1][0] → a[2][0]
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: a[0][0] → a[1][0] → a[2][0]
- en: ►the elements of column 1 are processed in the following order
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: ►第 1 列的元素按以下顺序处理
- en: a[0][1] → a[1][1] → a[2][1]
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: a[0][1] → a[1][1] → a[2][1]
- en: ►the elements of column 2 are processed in the following order
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: ►第 2 列的元素按以下顺序处理
- en: a[0][2] → a[1][2] → a[2][2]
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: a[0][2] → a[1][2] → a[2][2]
- en: ►the elements of column 3 are processed in the following order
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: ►第 3 列的元素按以下顺序处理
- en: a[0][3] → a[1][3] → a[2][3]
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: a[0][3] → a[1][3] → a[2][3]
- en: Using Python statements, let's try to process all elements of a 3 × 4 list (3
    rows × 4 columns) by iterating through columns.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 语句，让我们尝试通过遍历列来处理一个 3 × 4 的列表（3 行 × 4 列）的所有元素。
- en: 'j = 0                   #Variable j refers to column 0.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 'j = 0                   # 变量 j 指代第 0 列。'
- en: 'for i in range(3):      #This loop control structure processes all elements
    of column 0'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3):      # 这个循环控制结构处理第 0 列的所有元素'
- en: process a[i][j]
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: process a[i][j]
- en: 'j = 1                   #Variable j refers to column 1.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'j = 1                   # 变量 j 指代第 1 列。'
- en: 'for i in range(3):      #This loop control structure processes all elements
    of column 1'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3):      # 这个循环控制结构处理第 1 列的所有元素'
- en: process a[i][j]
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: process a[i][j]
- en: 'j = 2                   #Variable j refers to column 2.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 'j = 2                   # 变量 j 指代第 2 列。'
- en: 'for i in range(3):      #This loop control structure processes all elements
    of column 2'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3):      # 这个循环控制结构处理第 2 列的所有元素'
- en: process a[i][j]
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: process a[i][j]
- en: 'j = 3                   #Variable j refers to column 3.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 'j = 3                   # 变量 j 指代第 3 列。'
- en: 'for i in range(3):      #This loop control structure processes all elements
    of column 3'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3):      # 这个循环控制结构处理第 3 列的所有元素'
- en: process a[i][j]
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: process a[i][j]
- en: Of course, the same result can be achieved using a nested loop control structure
    as shown next.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，可以使用嵌套循环控制结构达到相同的结果，如下所示。
- en: 'for j in range(4):'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(4):'
- en: 'for i in range(3):'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3):'
- en: process a[i][j]
  id: totrans-241
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: process a[i][j]
- en: 'As you can see, this code fragment differs at only one point from the one that
    iterates through rows: the two for-loops have switched places. Be careful though.
    Never switch the places of the two index variables i and j in the statement process
    a[i][j]. Take the following code fragment, for example. It tries to iterate through
    columns in a 3 × 4 list (3 rows × 4 columns) but it does not satisfy the property
    of definiteness. Can you find out why?'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这段代码片段与遍历行的代码片段只有一个不同点：两个 for 循环的位置互换了。但请注意。在 process a[i][j] 的语句中，永远不要互换索引变量
    i 和 j 的位置。以下是一个例子。它试图遍历一个 3 × 4 的列表（3 行 × 4 列），但它不满足确定性的性质。你能找出原因吗？
- en: 'for j in range(4):'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(4):'
- en: 'for i in range(3):'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3):'
- en: process a[j][i]
  id: totrans-245
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 处理 process a[j][i]
- en: The trouble arises when variable j becomes equal to 3\. The statement process
    a[j][i] tries to process the elements at row index 3 (this is the fourth row)
    which, of course, does not exist! Still confused? Don't be! There is no row index
    3 in a 3 × 4 list! Since row index numbering starts at 0, only rows 0, 1, and
    2 actually exist!
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 问题出现在变量 j 等于 3 时。语句 process a[j][i] 尝试处理第 3 行的元素（这是第四行），当然，这是不存在的！还是不明白？别担心！在
    3 × 4 的列表中根本不存在第 3 行索引！由于行索引编号从 0 开始，实际上只有行 0、1 和 2 存在！
- en: 31.4 How to Add User-Entered Values to a Two-Dimensional List
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 31.4 如何将用户输入的值添加到二维列表中
- en: Just as in one-dimensional lists, instead of reading a value entered from the
    keyboard and assigning that value to a variable, you can directly assign that
    value to a specific list element. The following code fragment creates the two-dimensional
    list names, prompts the user to enter six values, and assigns those values to
    the elements of the list.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在单维列表中一样，您可以直接将键盘输入的值直接赋给特定的列表元素，而不仅仅是读取一个值并将其赋给一个变量。以下代码片段创建了一个二维列表 names，提示用户输入六个值，并将这些值赋给列表的元素。
- en: names = [[None] * 2 for i in range(3)]
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: names = [[None] * 2 for i in range(3)]
- en: 'names[0][0] = input("Name for row 0, column 0: ")'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[0][0] = input("为第 0 行第 0 列输入名称: ")'
- en: 'names[0][1] = input("Name for row 0, column 1: ")'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[0][1] = input("为第 0 行第 1 列输入名称: ")'
- en: 'names[1][0] = input("Name for row 1, column 0: ")'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[1][0] = input("为第 1 行第 0 列输入名称: ")'
- en: 'names[1][1] = input("Name for row 1, column 1: ")'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[1][1] = input("为第 1 行第 1 列输入名称: ")'
- en: 'names[2][0] = input("Name for row 2, column 0: ")'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[2][0] = input("为第 2 行第 0 列输入名称: ")'
- en: 'names[2][1] = input("Name for row 2, column 1: ")'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[2][1] = input("为第 2 行第 1 列输入名称: ")'
- en: Using nested for-loops, this code fragment can equivalently be written as
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 使用嵌套循环，此代码片段可以等效地写成
- en: ROWS = 3
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: ROWS = 3
- en: COLUMNS = 2
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: COLUMNS = 2
- en: names = [[None] * COLUMNS for i in range(ROWS)]
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: names = [[None] * COLUMNS for i in range(ROWS)]
- en: 'for i in range(ROWS):'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: 'for j in range(COLUMNS):'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: 'names[i][j] = input("Name for row " + str(i) + ", column " + str(j) + ": ")'
  id: totrans-262
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'names[i][j] = input("为第 " + str(i) + " 行第 " + str(j) + " 列输入名称: ")'
- en: You can, of course, do the same, using the append() method instead, as shown
    in the code fragment that follows.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以使用 append() 方法完成同样的操作，如下面的代码片段所示。
- en: ROWS = 3
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: ROWS = 3
- en: COLUMNS = 2
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: COLUMNS = 2
- en: 'names = []   #Create a totally empty list'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 'names = []   # 创建一个完全空的列表'
- en: 'for i in range(ROWS):'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: names.append([])  #Append a totally empty list within list names
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: names.append([])  # 在列表 names 中添加一个完全空的列表
- en: 'for j in range(COLUMNS):'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: 'name = input("Name for row " + str(i) + ", column " + str(j) + ": ")'
  id: totrans-270
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'name = input("为第 " + str(i) + " 行第 " + str(j) + " 列输入名称: ")'
- en: names[i].append(name)
  id: totrans-271
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: names[i].append(name)
- en: Exercise 31.4-1 Displaying Reals Only
  id: totrans-272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 31.4-1 仅显示实数
- en: Write a Python program that prompts the user to enter numeric values in a 5
    × 7 list and then displays the indexes of the elements that contain reals.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，提示用户在一个 5 × 7 的列表中输入数值，然后显示包含实数的元素索引。
- en: Solution
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Solution
- en: Iterating through rows is the most popular approach, so let's use it. The solution
    is as follows.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历行是最常用的方法，所以让我们使用它。解决方案如下。
- en: '![](img/my_exercise_header.png) file_31.4-1'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_31.4-1'
- en: ROWS = 5
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: ROWS = 5
- en: COLUMNS = 7
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: COLUMNS = 7
- en: a = [[None] * COLUMNS for i in range(ROWS)]
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: a = [[None] * COLUMNS for i in range(ROWS)]
- en: 'for i in range(ROWS):'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: 'for j in range(COLUMNS):'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: 'a[i][j] = float(input("Enter a value for element " + str(i) + ", " + str(j)
    + ": "))'
  id: totrans-282
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'a[i][j] = float(input("为元素 " + str(i) + ", " + str(j) + " 输入值: "))'
- en: 'for i in range(ROWS):'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: 'for j in range(COLUMNS):'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: 'if a[i][j] != int(a[i][j]):  #Check if it is real (float)'
  id: totrans-285
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if a[i][j] != int(a[i][j]):  # 检查是否为实数（浮点数）'
- en: print("A real found at position:", i , ",", j)
  id: totrans-286
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("在位置找到实数：", i , ",", j)
- en: Exercise 31.4-2 Displaying Odd Columns Only
  id: totrans-287
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 31.4-2 仅显示奇数列
- en: Write a Python program that prompts the user to enter numeric values in a 5
    × 7 list and then displays the elements of the columns with odd-numbered indexes
    (that is, column indexes 1, 3, and 5).
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，提示用户在一个 5 × 7 的列表中输入数值，然后显示具有奇数索引的列的元素（即列索引 1、3 和 5）。
- en: Solution
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: Solution
- en: The Python program is presented next. User-entered values are added to list
    b using the append() method.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 Python 程序展示了如何使用 append() 方法将用户输入的值添加到列表 b 中。
- en: '![](img/my_exercise_header.png) file_31.4-2'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_31.4-2'
- en: ROWS = 5
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: ROWS = 5
- en: COLUMNS = 7
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: COLUMNS = 7
- en: b = []
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: b = []
- en: 'for i in range(ROWS):'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: b.append([])
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: b.append([])
- en: 'for j in range(COLUMNS):'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: 'b[i].append(float(input("Enter a value for element " + str(i) + ", " + str(j)
    + ": ")))'
  id: totrans-298
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'b[i].append(float(input("Enter a value for element " + str(i) + ", " + str(j)
    + ": ")))'
- en: '#Iterate through columns'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '#遍历列'
- en: 'for j in range(1, COLUMNS, 2):     #Start from 1 and increment by 2'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(1, COLUMNS, 2):     #从 1 开始，每次增加 2'
- en: 'for i in range(ROWS):'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: print(b[i][j])
  id: totrans-302
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(b[i][j])
- en: '![](img/notice.jpg)This book tries to use, as often as possible, variable i
    as the row index and variable j as the column index. Of course, you can use other
    variable names as well, such as row, r for row index, or column, c for column
    index, but variables i and j are widely used by the majority of programmers. After
    using them for a while, your brain will relate i to rows and j to columns. Thus,
    every algorithm or program that uses these variable names as indexes in two-dimensional
    lists will be more readily understood.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/notice.jpg)这本书尽可能地使用变量 i 作为行索引，变量 j 作为列索引。当然，你也可以使用其他变量名，例如 row、r
    作为行索引，或 column、c 作为列索引，但 i 和 j 是大多数程序员广泛使用的变量。使用了一段时间之后，你的大脑就会将 i 与行联系起来，将 j 与列联系起来。因此，每个使用这些变量名作为二维列表索引的算法或程序都将更容易理解。'
- en: 31.5 What's the Story on Variables i and j?
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 31.5 变量 i 和 j 的故事是什么？
- en: Many programmers believe that the name i stands for “index” and j is used just
    because it is after i. Others believe that the name i stands for “integer”. Probably
    the truth lies somewhere in the middle.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序员认为变量 i 的名字代表“索引”，而 j 被使用仅仅是因为它跟在 i 的后面。其他人认为 i 的名字代表“整数”。可能真相就在中间某个地方。
- en: Mathematicians were using i, j, and k to designate integers in mathematics long
    before computers were around. Later, in FORTRAN, one of the first high-level computer
    languages, variables i, j, k, l, m, and n were integers by default. Thus, the
    first programmers picked up the habit of using variables i and j in their programs
    and it became a convention in most computer languages.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机出现之前，数学家就已经使用 i、j 和 k 来表示整数。后来，在 FORTRAN 中，作为第一种高级计算机语言之一，变量 i、j、k、l、m 和
    n 默认为整数。因此，最初的程序员在他们的程序中开始使用变量 i 和 j，这成为了大多数计算机语言中的惯例。
- en: 31.6 Square Matrices
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 31.6 方阵
- en: In mathematics, a matrix that has the same number of rows and columns is called
    a square matrix. Following are some examples of square matrices.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，具有相同行数和列数的矩阵称为方阵。以下是一些方阵的示例。
- en: .![Image](img/chapter31-06.png)
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/chapter31-06.png)'
- en: .![Image](img/chapter31-07.png)
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/chapter31-07.png)'
- en: Exercise 31.6-1 Finding the Sum of the Elements on the Main Diagonal
  id: totrans-311
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 31.6-1 查找主对角线上元素的总和
- en: Write a Python program that lets the user enter numeric values into a 10 × 10
    list and then calculates the sum of the elements on its main diagonal.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，允许用户输入数值到一个 10 × 10 的列表中，然后计算其主对角线上元素的总和。
- en: Solution
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: In mathematics, the main diagonal of a square matrix is the collection of those
    elements that runs from the top left corner to the bottom right corner. Following
    are some examples of square matrices with their main diagonals highlighted by
    a dark background.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，一个方阵的主对角线是从左上角到右下角运行的那些元素的集合。以下是一些带有主对角线以深色背景突出显示的方阵示例。
- en: .![Image](img/chapter31-08.png)
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/chapter31-08.png)'
- en: .![Image](img/chapter31-09.png)
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/chapter31-09.png)'
- en: '![](img/notice.jpg)Note that the elements on the main diagonal have their row
    index equal to their column index.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/notice.jpg)注意，主对角线上的元素其行索引等于其列索引。'
- en: You can calculate the sum of the elements on the main diagonal using two different
    approaches. Let's study them both.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用两种不同的方法来计算主对角线上元素的总和。让我们来研究这两种方法。
- en: First approach – Iterating through all elements
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法 – 遍历所有元素
- en: In this approach, the program iterates through rows and checks if the row index
    is equal to the column index. For square matrices (in this case, lists) represented
    as N × N, the number of rows and columns is equal, so you can define just one
    constant, N. The solution is as follows.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，程序遍历行并检查行索引是否等于列索引。对于表示为 N × N 的方阵（在这种情况下，列表），行数和列数相等，因此你可以定义一个常数 N。解决方案如下。
- en: '![](img/my_exercise_header.png) file_31.6-1a'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/my_exercise_header.png) file_31.6-1a'
- en: N = 10
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: N = 10
- en: a = [[None] * N for i in range(N)]
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: a = [[None] * N for i in range(N)]
- en: 'for i in range(N):'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(N):'
- en: 'for j in range(N):'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(N):'
- en: a[i][j] = float(input())
  id: totrans-326
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[i][j] = float(input())
- en: '#Calculate the sum'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '#计算总和'
- en: total = 0
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(N):'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(N):'
- en: 'for j in range(N):'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(N):'
- en: 'if i == j:'
  id: totrans-331
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if i == j:'
- en: 'total += a[i][j]    #This is equivalent to: total = total + a[i][j]'
  id: totrans-332
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += a[i][j]    # 这等价于：total = total + a[i][j]
- en: print("Sum =", total)
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: print("Sum =", total)
- en: '![](img/notice.jpg)Note that the program iterates through rows and checks if
    the row index is equal to the column index. Alternatively, the same result can
    be achieved by iterating through columns.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)请注意，程序遍历行并检查行索引是否等于列索引。或者，可以通过遍历列得到相同的结果。'
- en: '![](img/notice.jpg)In this approach, the nested loop control structure that
    is responsible for calculating the sum performs 10 × 10 = 100 iterations.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在这种方法中，负责计算总和的嵌套循环结构执行了 10 × 10 = 100 次迭代。'
- en: Second approach – Iterating directly through the main diagonal
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法 – 直接遍历主对角线
- en: In this approach, one single loop control structure iterates directly through
    the main diagonal. The solution is as follows.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，单个循环控制结构直接遍历主对角线。解答如下。
- en: '![](img/my_exercise_header.png) file_31.6-1b'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_31.6-1b'
- en: N = 10
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: N = 10
- en: a = []
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: a = []
- en: 'for i in range(N):'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(N):'
- en: a.append([])
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: a.append([])
- en: 'for j in range(N):'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(N):'
- en: a[i].append(float(input()))
  id: totrans-344
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[i].append(float(input()))
- en: '#Calculate the sum'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '# 计算总和'
- en: total = 0
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for k in range(N):'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 'for k in range(N):'
- en: total += a[k][k]
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: total += a[k][k]
- en: print("Sum =", total)
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: print("Sum =", total)
- en: '![](img/notice.jpg)This approach is much more efficient than the first one
    since the total number of iterations performed by the for-loop that is responsible
    for calculating the sum is just 10.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)这种方法比第一种方法更高效，因为负责计算总和的 for 循环只执行了 10 次迭代。'
- en: Exercise 31.6-2 Finding the Sum of the Elements on the Antidiagonal
  id: totrans-351
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 31.6-2 计算反对角线上元素的总和
- en: Write a Python program that lets the user enter numeric values in a 5 × 5 list
    and then calculates the sum of the elements on its antidiagonal.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，允许用户在一个 5 × 5 列表中输入数值，然后计算其反对角线上元素的总和。
- en: Solution
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In mathematics, the antidiagonal of a square matrix is the collection of those
    elements that runs from the top right corner to the bottom left corner of the
    list. Next, you can find an example of a 5 × 5 square matrix with its antidiagonal
    highlighted by a dark background.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，方阵的反对角线是从列表的右上角到左下角的元素集合。接下来，你可以找到一个 5 × 5 方阵的例子，其反对角线通过深色背景突出显示。
- en: .![Image](img/chapter31-10.png)
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter31-10.png)
- en: 'The indexes of any element on the antidiagonal of an N × N list satisfy the
    following equation:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: N × N 列表中任何反对角线元素的索引满足以下方程：
- en: i + j = N - 1
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: i + j = N - 1
- en: where variables i and j correspond to the row and column indexes respectively.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 其中变量 i 和 j 分别对应行和列索引。
- en: 'If you solve for j, the equation becomes:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 如果解出 j，方程变为：
- en: j = N - i - 1
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: j = N - i - 1
- en: 'Using this formula, you can calculate the indexes of any element on the antidiagonal;
    that is, for any value of variable i, you can find the corresponding value of
    variable j. For example, in the previous 5 × 5 square list where N equals 5, when
    i is 3 the value of variable j is:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个公式，你可以计算出反对角线上任何元素的索引；也就是说，对于变量 i 的任何值，你可以找到变量 j 的对应值。例如，在之前的 5 × 5 方阵列表中，N
    等于 5，当 i 为 3 时，变量 j 的值为：
- en: j = N - i - 1 ⟺ j = 5 − 3 − 1 ⟺ j = 1
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: j = N - i - 1 ⟺ j = 5 − 3 − 1 ⟺ j = 1
- en: Using all this knowledge, let's now write the corresponding Python program.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: Using all this knowledge, let's now write the corresponding Python program.
- en: '![](img/my_exercise_header.png) file_31.6-2'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_31.6-2'
- en: N = 5
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: N = 5
- en: a = [[None] * N for i in range(N)]
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: a = [[None] * N for i in range(N)]
- en: 'for i in range(N):'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(N):'
- en: 'for j in range(N):'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(N):'
- en: a[i][j] = float(input())
  id: totrans-369
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[i][j] = float(input())
- en: '#Calculate the sum'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '# 计算总和'
- en: total = 0
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(N):'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(N):'
- en: 'j = N - i - 1       #Equivallent to:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 'j = N - i - 1       # 等价于：'
- en: total += a[i][j]    #total += a[i][N - i - 1]
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: total += a[i][j]    # total += a[i][N - i - 1]
- en: print("Sum =", total)
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: print("Sum =", total)
- en: '![](img/notice.jpg)Note that the for-loop that is responsible for finding the
    sum of the elements on the antidiagonal iterates directly through the antidiagonal.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)请注意，负责寻找反对角线上元素总和的 for 循环直接遍历反对角线。'
- en: Exercise 31.6-3 Filling in the List
  id: totrans-377
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 31.6-3 填充列表
- en: Write a Python program that creates and displays the following list.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，创建并显示以下列表。
- en: '![Image](img/chapter31-11.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter31-11.png)'
- en: Solution
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: As you can see, there is the value of −1 in the main diagonal. You already know
    that the common characteristic between the elements of the main diagonal of a
    square matrix is that they have their row index equal to their column index. Now,
    what you also need is to find a common characteristic between all elements that
    contain the value 10, and another such common characteristic between all elements
    that contain the value 20\. And actually there are! The row index of any element
    containing the value 10 is, in every case, greater than its corresponding column
    index, and similarly, the row index of any element containing the value 20 is,
    in every case, less than its corresponding column index.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，主对角线上有-1的值。你已经知道，方阵主对角线上的元素的一个共同特点是它们的行索引等于它们的列索引。现在，你还需要找到包含值10的所有元素之间的一个共同特点，以及包含值20的所有元素之间的另一个这样的共同特点。实际上，确实存在这样的特点！任何包含值10的元素的行索引在所有情况下都大于其对应的列索引，同样，任何包含值20的元素的行索引在所有情况下都小于其对应的列索引。
- en: Accordingly, the Python program is as follows.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Python程序如下所示。
- en: '![](img/my_exercise_header.png) file_31.6-3'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_31.6-3'
- en: N = 5
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: N = 5
- en: a = [[None] * N for i in range(N)]
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: a = [[None] * N for i in range(N)]
- en: 'for i in range(N):'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(N):'
- en: 'for j in range(N):'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(N):'
- en: 'if i == j:'
  id: totrans-388
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if i == j:'
- en: a[i][j] = -1
  id: totrans-389
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[i][j] = -1
- en: 'elif i > j:'
  id: totrans-390
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'elif i > j:'
- en: a[i][j] = 10
  id: totrans-391
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[i][j] = 10
- en: 'else:'
  id: totrans-392
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'else:'
- en: a[i][j] = 20
  id: totrans-393
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[i][j] = 20
- en: 'for i in range(N):'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(N):'
- en: 'for j in range(N):'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(N):'
- en: print(a[i][j], end = "\t")
  id: totrans-396
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(a[i][j], end = "\t")
- en: print()
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: '31.7 Review Questions: True/False'
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 31.7 复习问题：对/错
- en: Choose true or false for each of the following statements.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择对或错。
- en: 1)All the elements of a two-dimensional list must contain different values.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 1)二维列表的所有元素必须包含不同的值。
- en: 2)In order to refer to an element of a two-dimensional list you need two indexes.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 2)为了引用二维列表中的元素，你需要两个索引。
- en: 3)The two indexes of a two-dimensional list must be either both variables, or
    both constant values.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 3)二维列表的两个索引必须是两个变量，或者两个常量值。
- en: 4)A 5 × 6 list is a two-dimensional list that has five columns and six rows.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 4)一个5×6的列表是一个具有五列和六行的二维列表。
- en: 5)To refer to an element of list b that exists at the second row and third column,
    you would write b[2][3].
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 5)要引用列表b中第二行第三列的元素，你会写b[2][3]。
- en: 6)Iterating through rows means that first row of a two-dimensional list is processed
    first, the second row is process next, and so on.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 6)遍历行意味着二维列表的第一行首先被处理，然后是第二行，依此类推。
- en: 7)You cannot use variables other than i and j to iterate through a two-dimensional
    list.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 7)你不能使用除了i和j之外的变量来遍历二维列表。
- en: 8)The following Python statement creates a two-dimensional list.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 8)以下Python语句创建了一个二维列表。
- en: names = [[None] * 2 for i in range(6)]
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: names = [[None] * 2 for i in range(6)]
- en: 9)The following code fragment creates a two-dimensional list of four elements
    and assigns values to them.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 9)以下代码片段创建了一个包含四个元素的二维列表，并给它们赋值。
- en: names = [[None] * 2 for i in range(2)]
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: names = [[None] * 2 for i in range(2)]
- en: names[0][0] = "John"
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: names[0][0] = "John"
- en: names[0][1] = "George"
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: names[0][1] = "George"
- en: names[1][0] = "Sally"
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: names[1][0] = "Sally"
- en: names[1][1] = "Angelina"
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: names[1][1] = "Angelina"
- en: 10)The following code fragment assigns the value 10 to an element that exists
    in the row with index 0.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 10)以下代码片段将值10赋给索引为0的行中的元素。
- en: values[0][0] = 7
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: values[0][0] = 7
- en: values[0][values[0][0]] = 10
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: values[0][values[0][0]] = 10
- en: 11)The following statement adds the name “Sally” to an element that exists in
    the row with index  1.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 11)以下语句将“Sally”这个名字添加到索引为1的行中的元素。
- en: names = [["John", "George"], ["Sally", "Angelina"]]
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: names = [["John", "George"], ["Sally", "Angelina"]]
- en: 12)The following code fragment displays the name “Sally” on the screen.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 12)以下代码片段在屏幕上显示“Sally”这个名字。
- en: names = [[None] * 2 for i in range(2)]
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: names = [[None] * 2 for i in range(2)]
- en: k = 0
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: k = 0
- en: names[0][k] = "John"
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: names[0][k] = "John"
- en: k += 1
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: k += 1
- en: names[0][k] = "George"
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: names[0][k] = "George"
- en: names[1][k] = "Sally"
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: names[1][k] = "Sally"
- en: k -= 1
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: k -= 1
- en: names[1][k] = "Angelina"
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: names[1][k] = "Angelina"
- en: print(names[1][1])
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: print(names[1][1])
- en: 13)The following code fragment satisfies the property of definiteness.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 13)以下代码片段满足确定性的特性。
- en: grades = [["B+", "A+"], ["A", "C-"]]
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: grades = [["B+", "A+"], ["A", "C-"]]
- en: print(grades[2][2])
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: print(grades[2][2])
- en: 14)The following code fragment satisfies the property of definiteness.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 14)以下代码片段满足确定性的特性。
- en: values = [[1, 0], [2, 0]]
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: values = [[1, 0], [2, 0]]
- en: print(values[values[0][0]][values[0][1]])
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: print(values[values[0][0]][values[0][1]])
- en: 15)The following code fragment displays the value 2 on the screen.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 15)以下代码片段在屏幕上显示值2。
- en: values = [[0, 1], [2, 0]]
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: print(values[values[0][1]][values[0][0]])
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: 16)The following code fragment displays all the elements of a 3 × 4 list.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in range(12):'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: i, j = divmod(k, 4)
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: print(names[i][j])
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: 17)The following code fragment lets the user enter 100 values into list b.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10):'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(10):'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: b[i][j] = input()
  id: totrans-446
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 18)If list b contains 10 × 20 elements, the following code fragment doubles
    the values of all of its elements.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(9, -1, -1):'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(19, -1, -1):'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: b[i][j] *= 2
  id: totrans-450
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 19)If list b contains 10 × 20 elements, the following code fragment displays
    some of them.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, 10, 2):'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(20):'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: print(b[i][j])
  id: totrans-454
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'for i in range(1, 10, 2):'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(20):'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: print(b[i][j])
  id: totrans-457
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 20)The following code fragment displays only the columns with even-numbered
    indexes.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(0, 12, 2):'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10):'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j])
  id: totrans-461
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 21)A 5 × 5 list is a square list.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: 22)In the main diagonal of a N × N list, all elements have their row index equal
    to their column index.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: 23)In mathematics, the antidiagonal of a square matrix is the collection of
    those elements that runs from the top left corner to the bottom right corner of
    the list.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: 24)Any element on the antidiagonal of an N × N list satisfies the equation i
    + j = N − 1, where variables i and j correspond to the row and column indexes
    respectively.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: 25)The following code fragment calculates the sum of the elements on the main
    diagonal of a N × N list.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in range(N):'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: total += a[k][k]
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: 26)The following code fragment displays all the elements of the antidiagonal
    of an N × N list.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(N - 1, -1, -1):'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][N - i - 1])
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: 27)The column index of any element of a N × N list that is below the main diagonal
    is always greater than its corresponding row index.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '31.8 Review Questions: Multiple Choice'
  id: totrans-474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: 1)The following statement
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: lastNames = [None] * 5 for i in range(4)
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: a)contains logic error(s).
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: b)contains syntax error(s).
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: c)is a correct statement.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: 2)The following code fragment
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: values = [[1, 0] [2, 0]]
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: print(values[values[0][0], values[0][1]])
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: a)contains logic error(s).
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: b)contains syntax error(s).
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: 3)The following code fragment
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: y = int(input())
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: names[x][y] = 10
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: a)does not satisfy the property of finiteness.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: b)does not satisfy the property of effectiveness.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: c)does not satisfy the property of definiteness.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: 4)If variable x contains the value 4, the following statement
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: names[x + 1][x] = 5
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: a)assigns the value 5 to the element with row index 5 and column index 4.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: b)assigns the value 5 to the element with row index 4 and column index 5.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: c)assigns the value 5 to the element with row index 5 and column index 5.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: 5)The following statement
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: names = [[3, 5, 2]]
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: a)assigns the value 5 to the element with row index 0 and column index 1.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: b)assigns the value 3 to the element with row index 0 and column index 0.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: c)assigns the value 2 to the element with row index 0 and column index 2.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: 6)The following statement
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: values = [[None] * 2 ]
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: a)creates a 1 × 2 list.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: b)creates a 2 × 1 list.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: c)creates a one-dimensional list.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: 7)You can iterate through a two-dimensional list with two nested loop control
    structures that use
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: a)variables i and j as counters.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: b)variables k and l as counters.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: c)variables m and n as counters.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: d)any variables as counters.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: 8)The following code fragment
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: names = [["John", "Sally"], ["George", "Maria"]]
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2):'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, -1, -1):'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: print(names[i][j])
  id: totrans-524
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a)displays all names in descending order.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: b)displays some names in descending order.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: c)displays all names in ascending order.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: d)displays some names in ascending order.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: 9)If list b contains 30 × 40 elements, the following code fragment
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(30, 0, -1):'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(40, 0, -1):'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: b[i][j] *= 3
  id: totrans-533
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a)triples the values of some of its elements.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: b)triples the values of all of its elements.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: c)does not satisfy the property of definiteness.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: 10)If list b contains 30 × 40 elements, the following code fragment
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(29, -1, -1):'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(39, -1, -1):'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: total += b[i][j]
  id: totrans-542
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: average = total / 120
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: a)calculates the sum of all of its elements.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: b)calculates the average value of all of its elements.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: c)all of the above
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: 11)The following two code fragments calculate the sum of the elements on the
    main diagonal of an N × N list,
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(N):'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(N):'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: 'if i == j:'
  id: totrans-551
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: total += a[i][j]
  id: totrans-552
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: total = 0
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in range(N):'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: total += a[k][k]
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: a)but the first one is more efficient.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: b)but the second one is more efficient.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above; both code fragments perform equivalently
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: 31.9 Review Exercises
  id: totrans-559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: 1)Create the trace table for the following code fragment.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * 3 for i in range(2)]
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: a[0][2] = 1
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: x = 0
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: a[0][x] = 9
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: a[0][x + a[0][2]] = 4
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0][2]][2] = 19
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0][2]][x + 1] = 13
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0][2]][x] = 15
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create the trace table for the following code fragment.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * 3 for i in range(2)]
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2):'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: a[i][j] = (i + 1) * 5 + j
  id: totrans-574
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3)Create the trace table for the following code fragment.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * 3 for i in range(3)]
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: a[i][j] = (i + 1) * 2 + j * 4
  id: totrans-579
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '4)Try, without using a trace table, to determine the values that the list will
    contain when the following code fragment is executed. Do this for three different
    executions. The corresponding input values are: (i) 5, (ii) 9, and (iii) 3.'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * 3 for i in range(2)]
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2):'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: a[i][j] = (x + i) * j
  id: totrans-585
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '5)Try, without using a trace table, to determine the values that the list will
    contain when the following code fragment is executed. Do this for three different
    executions. The corresponding input values are: (i) 13, (ii) 10, and (iii) 8.'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * 3 for i in range(2)]
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2):'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: 'if j < x % 4:'
  id: totrans-591
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] = (x + i) * j
  id: totrans-592
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-593
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] = (x + j) * i + 3
  id: totrans-594
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 6)Try, without using a trace table, to determine the values that the list will
    contain when the following code fragment is executed.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: a = [[18, 10, 35], [32, 12, 19]]
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2):'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: 'if a[i][j] < 13:'
  id: totrans-599
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] /= 2
  id: totrans-600
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif a[i][j] < 20:'
  id: totrans-601
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] += 1
  id: totrans-602
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-603
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] -= 4
  id: totrans-604
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 7)Try, without using a trace table, to determine the values that the list will
    contain when the following code fragment is executed.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: a = [[11, 10], [15, 19], [22, 15]]
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2):'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: 'if i == 2:'
  id: totrans-609
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] += a[i - 1][j]
  id: totrans-610
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-611
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] += a[i + 1][j]
  id: totrans-612
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 8)Assume that list a contains the following values.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter31-12.png)
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: What displays on the screen after executing each of the following code fragments?
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: i)
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: ii)
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, -1, -1):'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: iii)
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2, -1, -1):'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: iv)
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, -1, -1):'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2, -1, -1):'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: v)
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: vi)
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, -1, -1):'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: vii)
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2, -1, -1):'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: viii)
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2, -1, -1):'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, -1, -1):'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: 9)Write a Python program that lets the user enter integer values in a 10 × 15
    list and then displays the indexes of the elements that contain odd numbers.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: 10)Write a Python program that lets the user enter numeric values in a 10 ×
    6 list and then displays the elements of the columns with even-numbered indexes
    (that is, column indexes 0, 2, and 4).
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: 11)Write a Python program that lets the user enter numeric values in a 12 ×
    8 list and then calculates and displays the sum of the elements that have even
    column indexes and odd row indexes.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: 12)Write a Python program that lets the user enter numeric values in an 8 ×
    8 square list and then calculates the average value of the elements on its main
    diagonal and the average value of the elements on its antidiagonal. Try to calculate
    both average values within the same loop control structure.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: 13)Write a Python program that creates and displays the following list.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter31-13.png)'
  id: totrans-653
  prefs: []
  type: TYPE_IMG
- en: 14)Write a Python program that creates and displays the following list.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter31-14.png)'
  id: totrans-655
  prefs: []
  type: TYPE_IMG
- en: 15)Write a Python program that lets the user enter numeric values in a 5 × 4
    list and then displays the row and column indexes of the elements that contain
    integers.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: 16)Write a Python program that lets the user enter numeric values in a 10 ×
    4 list and then counts and displays the total number of negative elements.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: 17)Write a Python program that lets the user enter words in a 3 × 4 list and
    then displays them with a space character between them.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: 18)Write a Python program that lets the user enter words in a 20 × 14 list and
    then displays those who have less than five characters.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 18) 编写一个Python程序，允许用户在一个20 × 14的列表中输入单词，然后显示那些少于五个字符的单词。
- en: 'Hint: Use the len() function.'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：使用len()函数。
- en: 19)Write a Python program that lets the user enter words in a 20 × 14 list and
    displays those that have less than 5 characters, then those that have less than
    10 characters, and finally those that have less than 20 characters.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 19) 编写一个Python程序，允许用户在一个20 × 14的列表中输入单词，并显示那些少于5个字符的单词，然后是少于10个字符的单词，最后是少于20个字符的单词。
- en: 'Hint: Try to display the words using three for-loops nested one within the
    other.'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：尝试使用三个嵌套的循环来显示这些单词。
