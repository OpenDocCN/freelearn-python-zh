- en: Chapter 31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Two-Dimensional Lists
  prefs: []
  type: TYPE_NORMAL
- en: 31.1 Creating Two-Dimensional Lists in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A two-dimensional list is a data structure that can store values organized in
    rows and columns. It allows you to efficiently represent and manipulate tabular
    data. For instance, a list that can hold the grades of four lessons for three
    students is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter31-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/notice.jpg)A two-dimensional list has rows and columns. In this particular
    example, list grades has 3 rows and 4 columns.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike some other programming languages, Python does not directly support two-dimensional
    lists. Python primarily supports only one-dimensional lists, but there is a trick
    you can use to work around this and create multidimensional lists: you can create
    a list of lists! Think of the grades list as a single-column list with three elements
    (one for each student), each of which contains a completely new list of four elements
    (one for each lesson), as follows.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter31-02.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/notice.jpg)In Python, a two-dimensional list is a list of lists, a
    three-dimensional list is a list of lists of lists, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: As in one-dimensional lists, there are four approaches to creating and adding
    elements (and values) to a two-dimensional list. Let's try to create the list
    grades using each of these approaches.
  prefs: []
  type: TYPE_NORMAL
- en: First approach
  prefs: []
  type: TYPE_NORMAL
- en: You can create a two-dimensional list in Python using the following statement,
    given in general form,
  prefs: []
  type: TYPE_NORMAL
- en: list_name = [None] * number_of_rows
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►list_name is the name of the list.
  prefs: []
  type: TYPE_NORMAL
- en: ►number_of_rows can be any positive integer value.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you can assign completely new lists to each one of its elements with the
    following statement, given in general form
  prefs: []
  type: TYPE_NORMAL
- en: list_name[index] = [value0, value1, value2, …, valueM]
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►index is the index position of the element in the list.
  prefs: []
  type: TYPE_NORMAL
- en: ►value0-0, value0-1, value0-2, …, valueN-M are the values of the list elements.
  prefs: []
  type: TYPE_NORMAL
- en: The following code fragment creates the list grades and assigns three lists
    (and values)  to its elements.
  prefs: []
  type: TYPE_NORMAL
- en: grades = [None] * 3
  prefs: []
  type: TYPE_NORMAL
- en: grades[0] = ["B+", "A+", "A", "C-"]
  prefs: []
  type: TYPE_NORMAL
- en: grades[1] = ["B", "A", "C", "D"]
  prefs: []
  type: TYPE_NORMAL
- en: grades[2] = ["B", "B", "B-", "B+"]
  prefs: []
  type: TYPE_NORMAL
- en: Second approach
  prefs: []
  type: TYPE_NORMAL
- en: You can create a totally empty list and add new lists to it without using index,
    as shown in the following code fragment, given in general form.
  prefs: []
  type: TYPE_NORMAL
- en: list_name = []
  prefs: []
  type: TYPE_NORMAL
- en: list_name.append([value0-0, value0-1, value0-2, …, value0-M])
  prefs: []
  type: TYPE_NORMAL
- en: list_name.append([value1-0, value1-1, value1-2, …, value1-M])
  prefs: []
  type: TYPE_NORMAL
- en: list_name.append([value2-0, value2-1, value2-2, …, value2-M])
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: list_name.append([valueN-0, valueN-1, valueN-2, …, valueN-M])
  prefs: []
  type: TYPE_NORMAL
- en: The next code fragment creates the list grades and adds three lists (and values)
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: grades = []
  prefs: []
  type: TYPE_NORMAL
- en: grades.append(["B+", "A+", "A", "C-"])
  prefs: []
  type: TYPE_NORMAL
- en: grades.append(["B", "A", "C", "D"])
  prefs: []
  type: TYPE_NORMAL
- en: grades.append(["B", "B", "B-", "B+"])
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that in this approach, index numbering starts at zero
    by default.'
  prefs: []
  type: TYPE_NORMAL
- en: Third approach
  prefs: []
  type: TYPE_NORMAL
- en: You can create a list and directly add values to it, as shown in the following
    Python statement, given in general form.
  prefs: []
  type: TYPE_NORMAL
- en: list_name = [
  prefs: []
  type: TYPE_NORMAL
- en: '[value0-0, value0-1, value0-2, …, value0-M],'
  prefs: []
  type: TYPE_NORMAL
- en: '[value1-0, value1-1, value1-2, …, value1-M],'
  prefs: []
  type: TYPE_NORMAL
- en: '[value2-0, value2-1, value2-2, …, value2-M],'
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '[valueN-0, valueN-1, valueN-2, …, valueN-M]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the list grades can be created using the following statement.
  prefs: []
  type: TYPE_NORMAL
- en: grades = [
  prefs: []
  type: TYPE_NORMAL
- en: '["B+", "A+", "A", "C-"],'
  prefs: []
  type: TYPE_NORMAL
- en: '["B", "A", "C", "D"],'
  prefs: []
  type: TYPE_NORMAL
- en: '["B", "B", "B-", "B+"]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: which can also be written in one line as
  prefs: []
  type: TYPE_NORMAL
- en: grades = [["B+", "A+", "A", "C-"], ["B", "A", "C", "D"], ["B", "B", "B-", "B+"]]
  prefs: []
  type: TYPE_NORMAL
- en: Fourth approach
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, you can create a two-dimensional list in Python using the
    following statement, given in general form:'
  prefs: []
  type: TYPE_NORMAL
- en: list_name = [[None] * number_of_columns for i in range(number_of_rows)]
  prefs: []
  type: TYPE_NORMAL
- en: where number_of_rows and number_of_columns can be any positive integer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you can assign a value to a list element using the following statement,
    given in general form:'
  prefs: []
  type: TYPE_NORMAL
- en: list_name[row_index][column_index] = value
  prefs: []
  type: TYPE_NORMAL
- en: where row_index and column_index are the row index and the column index positions,
    respectively, of the element in the list.
  prefs: []
  type: TYPE_NORMAL
- en: The following code fragment creates the list grades and assigns values to its
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: grades = [[None] * 4 for i in range(3)]
  prefs: []
  type: TYPE_NORMAL
- en: grades[0][0] = "B+"
  prefs: []
  type: TYPE_NORMAL
- en: grades[0][1] = "A+"
  prefs: []
  type: TYPE_NORMAL
- en: grades[0][2] = "A"
  prefs: []
  type: TYPE_NORMAL
- en: grades[0][3] = "C-"
  prefs: []
  type: TYPE_NORMAL
- en: grades[1][0] = "B"
  prefs: []
  type: TYPE_NORMAL
- en: grades[1][1] = "A"
  prefs: []
  type: TYPE_NORMAL
- en: grades[1][2] = "C"
  prefs: []
  type: TYPE_NORMAL
- en: grades[1][3] = "D"
  prefs: []
  type: TYPE_NORMAL
- en: grades[2][0] = "B"
  prefs: []
  type: TYPE_NORMAL
- en: grades[2][1] = "B"
  prefs: []
  type: TYPE_NORMAL
- en: grades[2][2] = "B-"
  prefs: []
  type: TYPE_NORMAL
- en: grades[2][3] = "B+"
  prefs: []
  type: TYPE_NORMAL
- en: 31.2 How to Get Values from Two-Dimensional Lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A two-dimensional list consists of rows and columns. The following example shows
    a two-dimensional list with three rows and four columns.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter31-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Each element of a two-dimensional list can be uniquely identified using a pair
    of indexes: a row index, and a column index, as shown next.'
  prefs: []
  type: TYPE_NORMAL
- en: list_name[row_index][column_index]
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program creates the two-dimensional list grades having
    three rows and four columns, and then displays some of its elements.
  prefs: []
  type: TYPE_NORMAL
- en: grades = [
  prefs: []
  type: TYPE_NORMAL
- en: '["B+", "A+", "A", "C-"],'
  prefs: []
  type: TYPE_NORMAL
- en: '["B", "A", "C", "D"],'
  prefs: []
  type: TYPE_NORMAL
- en: '["B", "B", "B-", "B+"]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(grades[1][2])        #It displays: C'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(grades[2][2])        #It displays: B-'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(grades[0][0])        #It displays: B+'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 31.2-1 Creating the Trace Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create the trace table for the next code fragment.
  prefs: []
  type: TYPE_NORMAL
- en: a = [
  prefs: []
  type: TYPE_NORMAL
- en: '[0, 0],'
  prefs: []
  type: TYPE_NORMAL
- en: '[0, 0],'
  prefs: []
  type: TYPE_NORMAL
- en: '[0, 0]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: a[1][0] = 9
  prefs: []
  type: TYPE_NORMAL
- en: a[0][1] = 1
  prefs: []
  type: TYPE_NORMAL
- en: a[0][0] = a[0][1] + 6
  prefs: []
  type: TYPE_NORMAL
- en: x = 2
  prefs: []
  type: TYPE_NORMAL
- en: a[x][1] = a[0][0] + 4
  prefs: []
  type: TYPE_NORMAL
- en: a[x - 1][1] = a[0][1] * 3
  prefs: []
  type: TYPE_NORMAL
- en: a[x][0] = a[x - 1][1] - 3
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This code fragment uses a 3 × 2 list, that is, a list that has 3 rows and 2
    columns. The trace table is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | x | a |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = [    [0, 0],'
  prefs: []
  type: TYPE_NORMAL
- en: '[0, 0],'
  prefs: []
  type: TYPE_NORMAL
- en: '[0, 0]'
  prefs: []
  type: TYPE_NORMAL
- en: '] | This creates the list a with zero values in it. | ? |'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 | a[1][0] = 9 |   | ? |'
  prefs: []
  type: TYPE_TB
- en: '&#124; 0 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 9 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 | a[0][1] = 1 |   | ? |'
  prefs: []
  type: TYPE_TB
- en: '&#124; 0 &#124; 1 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 9 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 4 | a[0][0] = a[0][1] + 6 |   | ? |'
  prefs: []
  type: TYPE_TB
- en: '&#124; 7 &#124; 1 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 9 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 5 | x = 2 |   | 2 |'
  prefs: []
  type: TYPE_TB
- en: '&#124; 7 &#124; 1 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 9 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 6 | a[x][1] = a[0][0] + 4 |   | 2 |'
  prefs: []
  type: TYPE_TB
- en: '&#124; 7 &#124; 1 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 9 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 11 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 7 | a[x − 1][1] = a[0][1] * 3 |   | 2 |'
  prefs: []
  type: TYPE_TB
- en: '&#124; 7 &#124; 1 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 9 &#124; 3 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 11 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 8 | a[x][0] = a[x − 1][1] - 3 |   | 2 |'
  prefs: []
  type: TYPE_TB
- en: '&#124; 7 &#124; 1 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 9 &#124; 3 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; 0 &#124; 11 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 31.3 How to Iterate Through a Two-Dimensional List
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since a two-dimensional list consists of rows and columns, a program can iterate
    either through rows or through columns.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating through rows
  prefs: []
  type: TYPE_NORMAL
- en: Iterating through rows means that row 0 is processed first, row 1 is process
    next, row 2 afterwards, and so on. Next there is an example of a 3 × 4 list. The
    arrows show the “path” that is followed when iteration through rows is performed
    or in other words, they show the order in which the elements are processed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter31-04.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/remember.jpg)A 3 × 4 list is a two-dimensional list that has 3 rows
    and 4 columns. In the notation Y × X, the first number (Y) always represents the
    total number of rows and the second number (X) always represents the total number
    of columns.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When iterating through rows, the elements of the list are processed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ►the elements of row 0 are processed in the following order
  prefs: []
  type: TYPE_NORMAL
- en: a[0][0] → a[0][1] → a[0][2] → a[0][3]
  prefs: []
  type: TYPE_NORMAL
- en: ►the elements of row 1 are processed in the following order
  prefs: []
  type: TYPE_NORMAL
- en: a[1][0] → a[1][1] → a[1][2] → a[1][3]
  prefs: []
  type: TYPE_NORMAL
- en: ►the elements of row 2 are processed in the following order
  prefs: []
  type: TYPE_NORMAL
- en: a[2][0] → a[2][1] → a[2][2] → a[2][3]
  prefs: []
  type: TYPE_NORMAL
- en: First approach
  prefs: []
  type: TYPE_NORMAL
- en: Using Python statements, let's try to process all elements of a 3 × 4 list (3
    rows × 4 columns) iterating through rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'i = 0                   #Variable i refers to row 0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(4):      #This loop control structure processes all elements
    of row 0'
  prefs: []
  type: TYPE_NORMAL
- en: process a[i][j]
  prefs: []
  type: TYPE_NORMAL
- en: 'i = 1                   #Variable i refers to row 1.'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(4):      #This loop control structure processes all elements
    of row 1'
  prefs: []
  type: TYPE_NORMAL
- en: process a[i][j]
  prefs: []
  type: TYPE_NORMAL
- en: 'i = 2                   #Variable i refers to row 2.'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(4):      #This loop control structure processes all elements
    of row 2'
  prefs: []
  type: TYPE_NORMAL
- en: process a[i][j]
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the same results can be achieved using a nested loop control structure
    as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(4):'
  prefs: []
  type: TYPE_NORMAL
- en: process a[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let's see some examples. The following code fragment lets the user enter 10
    × 10 = 100 values into list b.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(10):'
  prefs: []
  type: TYPE_NORMAL
- en: b[i][j] = input()
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The following code fragment decreases all values of list b by one.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(10):'
  prefs: []
  type: TYPE_NORMAL
- en: 'b[i][j] -= 1    #Equivalent to: b[i][j] = b[i][j] − 1'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The following code fragment displays all elements of list b.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(10):'
  prefs: []
  type: TYPE_NORMAL
- en: print(b[i][j], end = "\t")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print()
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The print() statement is used to “display” a line break
    between rows.'
  prefs: []
  type: TYPE_NORMAL
- en: Second approach
  prefs: []
  type: TYPE_NORMAL
- en: There is also another approach that is very simple but not as flexible as the
    previous one. There are cases where it cannot be used, as you will see below.
    Following is a code fragment, written in general form
  prefs: []
  type: TYPE_NORMAL
- en: 'for row in list_name:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in row:'
  prefs: []
  type: TYPE_NORMAL
- en: process element
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: in which process is any Python statement or block of statements that processes
    one element of the list at each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program, displays all elements of list b, one at each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'for row in b:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in row:'
  prefs: []
  type: TYPE_NORMAL
- en: print(element, end = "\t")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print()
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind, though, that this approach cannot be used to alter the values
    of the elements in a list. For example, if you wish to double the values of all
    elements in the list numbers, you cannot do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: numbers = [
  prefs: []
  type: TYPE_NORMAL
- en: '[5, 10, 3, 2],'
  prefs: []
  type: TYPE_NORMAL
- en: '[2, 4, 1, 6]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: 'for x in numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for number in x:'
  prefs: []
  type: TYPE_NORMAL
- en: number = number * 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Iterating Through Columns
  prefs: []
  type: TYPE_NORMAL
- en: Iterating through columns means that column 0 is processed first, column 1 is
    processed next, column 2 afterwards, and so on. Next there is an example of a
    3 × 4 list. The arrows show the order in which the elements are processed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter31-05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When iterating through columns, the elements of the list are processed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ►the elements of column 0 are processed in the following order
  prefs: []
  type: TYPE_NORMAL
- en: a[0][0] → a[1][0] → a[2][0]
  prefs: []
  type: TYPE_NORMAL
- en: ►the elements of column 1 are processed in the following order
  prefs: []
  type: TYPE_NORMAL
- en: a[0][1] → a[1][1] → a[2][1]
  prefs: []
  type: TYPE_NORMAL
- en: ►the elements of column 2 are processed in the following order
  prefs: []
  type: TYPE_NORMAL
- en: a[0][2] → a[1][2] → a[2][2]
  prefs: []
  type: TYPE_NORMAL
- en: ►the elements of column 3 are processed in the following order
  prefs: []
  type: TYPE_NORMAL
- en: a[0][3] → a[1][3] → a[2][3]
  prefs: []
  type: TYPE_NORMAL
- en: Using Python statements, let's try to process all elements of a 3 × 4 list (3
    rows × 4 columns) by iterating through columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'j = 0                   #Variable j refers to column 0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):      #This loop control structure processes all elements
    of column 0'
  prefs: []
  type: TYPE_NORMAL
- en: process a[i][j]
  prefs: []
  type: TYPE_NORMAL
- en: 'j = 1                   #Variable j refers to column 1.'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):      #This loop control structure processes all elements
    of column 1'
  prefs: []
  type: TYPE_NORMAL
- en: process a[i][j]
  prefs: []
  type: TYPE_NORMAL
- en: 'j = 2                   #Variable j refers to column 2.'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):      #This loop control structure processes all elements
    of column 2'
  prefs: []
  type: TYPE_NORMAL
- en: process a[i][j]
  prefs: []
  type: TYPE_NORMAL
- en: 'j = 3                   #Variable j refers to column 3.'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):      #This loop control structure processes all elements
    of column 3'
  prefs: []
  type: TYPE_NORMAL
- en: process a[i][j]
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the same result can be achieved using a nested loop control structure
    as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(4):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: process a[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As you can see, this code fragment differs at only one point from the one that
    iterates through rows: the two for-loops have switched places. Be careful though.
    Never switch the places of the two index variables i and j in the statement process
    a[i][j]. Take the following code fragment, for example. It tries to iterate through
    columns in a 3 × 4 list (3 rows × 4 columns) but it does not satisfy the property
    of definiteness. Can you find out why?'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(4):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: process a[j][i]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The trouble arises when variable j becomes equal to 3\. The statement process
    a[j][i] tries to process the elements at row index 3 (this is the fourth row)
    which, of course, does not exist! Still confused? Don't be! There is no row index
    3 in a 3 × 4 list! Since row index numbering starts at 0, only rows 0, 1, and
    2 actually exist!
  prefs: []
  type: TYPE_NORMAL
- en: 31.4 How to Add User-Entered Values to a Two-Dimensional List
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just as in one-dimensional lists, instead of reading a value entered from the
    keyboard and assigning that value to a variable, you can directly assign that
    value to a specific list element. The following code fragment creates the two-dimensional
    list names, prompts the user to enter six values, and assigns those values to
    the elements of the list.
  prefs: []
  type: TYPE_NORMAL
- en: names = [[None] * 2 for i in range(3)]
  prefs: []
  type: TYPE_NORMAL
- en: 'names[0][0] = input("Name for row 0, column 0: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'names[0][1] = input("Name for row 0, column 1: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'names[1][0] = input("Name for row 1, column 0: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'names[1][1] = input("Name for row 1, column 1: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'names[2][0] = input("Name for row 2, column 0: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'names[2][1] = input("Name for row 2, column 1: ")'
  prefs: []
  type: TYPE_NORMAL
- en: Using nested for-loops, this code fragment can equivalently be written as
  prefs: []
  type: TYPE_NORMAL
- en: ROWS = 3
  prefs: []
  type: TYPE_NORMAL
- en: COLUMNS = 2
  prefs: []
  type: TYPE_NORMAL
- en: names = [[None] * COLUMNS for i in range(ROWS)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'names[i][j] = input("Name for row " + str(i) + ", column " + str(j) + ": ")'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can, of course, do the same, using the append() method instead, as shown
    in the code fragment that follows.
  prefs: []
  type: TYPE_NORMAL
- en: ROWS = 3
  prefs: []
  type: TYPE_NORMAL
- en: COLUMNS = 2
  prefs: []
  type: TYPE_NORMAL
- en: 'names = []   #Create a totally empty list'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: names.append([])  #Append a totally empty list within list names
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'name = input("Name for row " + str(i) + ", column " + str(j) + ": ")'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: names[i].append(name)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 31.4-1 Displaying Reals Only
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter numeric values in a 5
    × 7 list and then displays the indexes of the elements that contain reals.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Iterating through rows is the most popular approach, so let's use it. The solution
    is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_31.4-1'
  prefs: []
  type: TYPE_NORMAL
- en: ROWS = 5
  prefs: []
  type: TYPE_NORMAL
- en: COLUMNS = 7
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * COLUMNS for i in range(ROWS)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'a[i][j] = float(input("Enter a value for element " + str(i) + ", " + str(j)
    + ": "))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a[i][j] != int(a[i][j]):  #Check if it is real (float)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("A real found at position:", i , ",", j)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 31.4-2 Displaying Odd Columns Only
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter numeric values in a 5
    × 7 list and then displays the elements of the columns with odd-numbered indexes
    (that is, column indexes 1, 3, and 5).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The Python program is presented next. User-entered values are added to list
    b using the append() method.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_31.4-2'
  prefs: []
  type: TYPE_NORMAL
- en: ROWS = 5
  prefs: []
  type: TYPE_NORMAL
- en: COLUMNS = 7
  prefs: []
  type: TYPE_NORMAL
- en: b = []
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: b.append([])
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'b[i].append(float(input("Enter a value for element " + str(i) + ", " + str(j)
    + ": ")))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Iterate through columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, COLUMNS, 2):     #Start from 1 and increment by 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: print(b[i][j])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)This book tries to use, as often as possible, variable i
    as the row index and variable j as the column index. Of course, you can use other
    variable names as well, such as row, r for row index, or column, c for column
    index, but variables i and j are widely used by the majority of programmers. After
    using them for a while, your brain will relate i to rows and j to columns. Thus,
    every algorithm or program that uses these variable names as indexes in two-dimensional
    lists will be more readily understood.'
  prefs: []
  type: TYPE_NORMAL
- en: 31.5 What's the Story on Variables i and j?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many programmers believe that the name i stands for “index” and j is used just
    because it is after i. Others believe that the name i stands for “integer”. Probably
    the truth lies somewhere in the middle.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematicians were using i, j, and k to designate integers in mathematics long
    before computers were around. Later, in FORTRAN, one of the first high-level computer
    languages, variables i, j, k, l, m, and n were integers by default. Thus, the
    first programmers picked up the habit of using variables i and j in their programs
    and it became a convention in most computer languages.
  prefs: []
  type: TYPE_NORMAL
- en: 31.6 Square Matrices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In mathematics, a matrix that has the same number of rows and columns is called
    a square matrix. Following are some examples of square matrices.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter31-06.png)
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter31-07.png)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 31.6-1 Finding the Sum of the Elements on the Main Diagonal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter numeric values into a 10 × 10
    list and then calculates the sum of the elements on its main diagonal.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In mathematics, the main diagonal of a square matrix is the collection of those
    elements that runs from the top left corner to the bottom right corner. Following
    are some examples of square matrices with their main diagonals highlighted by
    a dark background.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter31-08.png)
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter31-09.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the elements on the main diagonal have their row
    index equal to their column index.'
  prefs: []
  type: TYPE_NORMAL
- en: You can calculate the sum of the elements on the main diagonal using two different
    approaches. Let's study them both.
  prefs: []
  type: TYPE_NORMAL
- en: First approach – Iterating through all elements
  prefs: []
  type: TYPE_NORMAL
- en: In this approach, the program iterates through rows and checks if the row index
    is equal to the column index. For square matrices (in this case, lists) represented
    as N × N, the number of rows and columns is equal, so you can define just one
    constant, N. The solution is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_31.6-1a'
  prefs: []
  type: TYPE_NORMAL
- en: N = 10
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * N for i in range(N)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: a[i][j] = float(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Calculate the sum'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if i == j:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'total += a[i][j]    #This is equivalent to: total = total + a[i][j]'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Sum =", total)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the program iterates through rows and checks if
    the row index is equal to the column index. Alternatively, the same result can
    be achieved by iterating through columns.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In this approach, the nested loop control structure that
    is responsible for calculating the sum performs 10 × 10 = 100 iterations.'
  prefs: []
  type: TYPE_NORMAL
- en: Second approach – Iterating directly through the main diagonal
  prefs: []
  type: TYPE_NORMAL
- en: In this approach, one single loop control structure iterates directly through
    the main diagonal. The solution is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_31.6-1b'
  prefs: []
  type: TYPE_NORMAL
- en: N = 10
  prefs: []
  type: TYPE_NORMAL
- en: a = []
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: a.append([])
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: a[i].append(float(input()))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Calculate the sum'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: total += a[k][k]
  prefs: []
  type: TYPE_NORMAL
- en: print("Sum =", total)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)This approach is much more efficient than the first one
    since the total number of iterations performed by the for-loop that is responsible
    for calculating the sum is just 10.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 31.6-2 Finding the Sum of the Elements on the Antidiagonal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter numeric values in a 5 × 5 list
    and then calculates the sum of the elements on its antidiagonal.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In mathematics, the antidiagonal of a square matrix is the collection of those
    elements that runs from the top right corner to the bottom left corner of the
    list. Next, you can find an example of a 5 × 5 square matrix with its antidiagonal
    highlighted by a dark background.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter31-10.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'The indexes of any element on the antidiagonal of an N × N list satisfy the
    following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: i + j = N - 1
  prefs: []
  type: TYPE_NORMAL
- en: where variables i and j correspond to the row and column indexes respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you solve for j, the equation becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: j = N - i - 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this formula, you can calculate the indexes of any element on the antidiagonal;
    that is, for any value of variable i, you can find the corresponding value of
    variable j. For example, in the previous 5 × 5 square list where N equals 5, when
    i is 3 the value of variable j is:'
  prefs: []
  type: TYPE_NORMAL
- en: j = N - i - 1 ⟺ j = 5 − 3 − 1 ⟺ j = 1
  prefs: []
  type: TYPE_NORMAL
- en: Using all this knowledge, let's now write the corresponding Python program.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_31.6-2'
  prefs: []
  type: TYPE_NORMAL
- en: N = 5
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * N for i in range(N)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: a[i][j] = float(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Calculate the sum'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: 'j = N - i - 1       #Equivallent to:'
  prefs: []
  type: TYPE_NORMAL
- en: total += a[i][j]    #total += a[i][N - i - 1]
  prefs: []
  type: TYPE_NORMAL
- en: print("Sum =", total)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the for-loop that is responsible for finding the
    sum of the elements on the antidiagonal iterates directly through the antidiagonal.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 31.6-3 Filling in the List
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that creates and displays the following list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter31-11.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there is the value of −1 in the main diagonal. You already know
    that the common characteristic between the elements of the main diagonal of a
    square matrix is that they have their row index equal to their column index. Now,
    what you also need is to find a common characteristic between all elements that
    contain the value 10, and another such common characteristic between all elements
    that contain the value 20\. And actually there are! The row index of any element
    containing the value 10 is, in every case, greater than its corresponding column
    index, and similarly, the row index of any element containing the value 20 is,
    in every case, less than its corresponding column index.
  prefs: []
  type: TYPE_NORMAL
- en: Accordingly, the Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_31.6-3'
  prefs: []
  type: TYPE_NORMAL
- en: N = 5
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * N for i in range(N)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if i == j:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] = -1
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif i > j:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] = 10
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] = 20
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'for i in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = "\t")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print()
  prefs: []
  type: TYPE_NORMAL
- en: '31.7 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)All the elements of a two-dimensional list must contain different values.
  prefs: []
  type: TYPE_NORMAL
- en: 2)In order to refer to an element of a two-dimensional list you need two indexes.
  prefs: []
  type: TYPE_NORMAL
- en: 3)The two indexes of a two-dimensional list must be either both variables, or
    both constant values.
  prefs: []
  type: TYPE_NORMAL
- en: 4)A 5 × 6 list is a two-dimensional list that has five columns and six rows.
  prefs: []
  type: TYPE_NORMAL
- en: 5)To refer to an element of list b that exists at the second row and third column,
    you would write b[2][3].
  prefs: []
  type: TYPE_NORMAL
- en: 6)Iterating through rows means that first row of a two-dimensional list is processed
    first, the second row is process next, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 7)You cannot use variables other than i and j to iterate through a two-dimensional
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 8)The following Python statement creates a two-dimensional list.
  prefs: []
  type: TYPE_NORMAL
- en: names = [[None] * 2 for i in range(6)]
  prefs: []
  type: TYPE_NORMAL
- en: 9)The following code fragment creates a two-dimensional list of four elements
    and assigns values to them.
  prefs: []
  type: TYPE_NORMAL
- en: names = [[None] * 2 for i in range(2)]
  prefs: []
  type: TYPE_NORMAL
- en: names[0][0] = "John"
  prefs: []
  type: TYPE_NORMAL
- en: names[0][1] = "George"
  prefs: []
  type: TYPE_NORMAL
- en: names[1][0] = "Sally"
  prefs: []
  type: TYPE_NORMAL
- en: names[1][1] = "Angelina"
  prefs: []
  type: TYPE_NORMAL
- en: 10)The following code fragment assigns the value 10 to an element that exists
    in the row with index 0.
  prefs: []
  type: TYPE_NORMAL
- en: values[0][0] = 7
  prefs: []
  type: TYPE_NORMAL
- en: values[0][values[0][0]] = 10
  prefs: []
  type: TYPE_NORMAL
- en: 11)The following statement adds the name “Sally” to an element that exists in
    the row with index  1.
  prefs: []
  type: TYPE_NORMAL
- en: names = [["John", "George"], ["Sally", "Angelina"]]
  prefs: []
  type: TYPE_NORMAL
- en: 12)The following code fragment displays the name “Sally” on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: names = [[None] * 2 for i in range(2)]
  prefs: []
  type: TYPE_NORMAL
- en: k = 0
  prefs: []
  type: TYPE_NORMAL
- en: names[0][k] = "John"
  prefs: []
  type: TYPE_NORMAL
- en: k += 1
  prefs: []
  type: TYPE_NORMAL
- en: names[0][k] = "George"
  prefs: []
  type: TYPE_NORMAL
- en: names[1][k] = "Sally"
  prefs: []
  type: TYPE_NORMAL
- en: k -= 1
  prefs: []
  type: TYPE_NORMAL
- en: names[1][k] = "Angelina"
  prefs: []
  type: TYPE_NORMAL
- en: print(names[1][1])
  prefs: []
  type: TYPE_NORMAL
- en: 13)The following code fragment satisfies the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: grades = [["B+", "A+"], ["A", "C-"]]
  prefs: []
  type: TYPE_NORMAL
- en: print(grades[2][2])
  prefs: []
  type: TYPE_NORMAL
- en: 14)The following code fragment satisfies the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: values = [[1, 0], [2, 0]]
  prefs: []
  type: TYPE_NORMAL
- en: print(values[values[0][0]][values[0][1]])
  prefs: []
  type: TYPE_NORMAL
- en: 15)The following code fragment displays the value 2 on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: values = [[0, 1], [2, 0]]
  prefs: []
  type: TYPE_NORMAL
- en: print(values[values[0][1]][values[0][0]])
  prefs: []
  type: TYPE_NORMAL
- en: 16)The following code fragment displays all the elements of a 3 × 4 list.
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in range(12):'
  prefs: []
  type: TYPE_NORMAL
- en: i, j = divmod(k, 4)
  prefs: []
  type: TYPE_NORMAL
- en: print(names[i][j])
  prefs: []
  type: TYPE_NORMAL
- en: 17)The following code fragment lets the user enter 100 values into list b.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(10):'
  prefs: []
  type: TYPE_NORMAL
- en: b[i][j] = input()
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 18)If list b contains 10 × 20 elements, the following code fragment doubles
    the values of all of its elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(9, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(19, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: b[i][j] *= 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 19)If list b contains 10 × 20 elements, the following code fragment displays
    some of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, 10, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(20):'
  prefs: []
  type: TYPE_NORMAL
- en: print(b[i][j])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'for i in range(1, 10, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(20):'
  prefs: []
  type: TYPE_NORMAL
- en: print(b[i][j])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 20)The following code fragment displays only the columns with even-numbered
    indexes.
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(0, 12, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 21)A 5 × 5 list is a square list.
  prefs: []
  type: TYPE_NORMAL
- en: 22)In the main diagonal of a N × N list, all elements have their row index equal
    to their column index.
  prefs: []
  type: TYPE_NORMAL
- en: 23)In mathematics, the antidiagonal of a square matrix is the collection of
    those elements that runs from the top left corner to the bottom right corner of
    the list.
  prefs: []
  type: TYPE_NORMAL
- en: 24)Any element on the antidiagonal of an N × N list satisfies the equation i
    + j = N − 1, where variables i and j correspond to the row and column indexes
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 25)The following code fragment calculates the sum of the elements on the main
    diagonal of a N × N list.
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: total += a[k][k]
  prefs: []
  type: TYPE_NORMAL
- en: 26)The following code fragment displays all the elements of the antidiagonal
    of an N × N list.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(N - 1, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][N - i - 1])
  prefs: []
  type: TYPE_NORMAL
- en: 27)The column index of any element of a N × N list that is below the main diagonal
    is always greater than its corresponding row index.
  prefs: []
  type: TYPE_NORMAL
- en: '31.8 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)The following statement
  prefs: []
  type: TYPE_NORMAL
- en: lastNames = [None] * 5 for i in range(4)
  prefs: []
  type: TYPE_NORMAL
- en: a)contains logic error(s).
  prefs: []
  type: TYPE_NORMAL
- en: b)contains syntax error(s).
  prefs: []
  type: TYPE_NORMAL
- en: c)is a correct statement.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 2)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: values = [[1, 0] [2, 0]]
  prefs: []
  type: TYPE_NORMAL
- en: print(values[values[0][0], values[0][1]])
  prefs: []
  type: TYPE_NORMAL
- en: a)contains logic error(s).
  prefs: []
  type: TYPE_NORMAL
- en: b)contains syntax error(s).
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 3)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: names[x][y] = 10
  prefs: []
  type: TYPE_NORMAL
- en: a)does not satisfy the property of finiteness.
  prefs: []
  type: TYPE_NORMAL
- en: b)does not satisfy the property of effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: c)does not satisfy the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 4)If variable x contains the value 4, the following statement
  prefs: []
  type: TYPE_NORMAL
- en: names[x + 1][x] = 5
  prefs: []
  type: TYPE_NORMAL
- en: a)assigns the value 5 to the element with row index 5 and column index 4.
  prefs: []
  type: TYPE_NORMAL
- en: b)assigns the value 5 to the element with row index 4 and column index 5.
  prefs: []
  type: TYPE_NORMAL
- en: c)assigns the value 5 to the element with row index 5 and column index 5.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 5)The following statement
  prefs: []
  type: TYPE_NORMAL
- en: names = [[3, 5, 2]]
  prefs: []
  type: TYPE_NORMAL
- en: a)assigns the value 5 to the element with row index 0 and column index 1.
  prefs: []
  type: TYPE_NORMAL
- en: b)assigns the value 3 to the element with row index 0 and column index 0.
  prefs: []
  type: TYPE_NORMAL
- en: c)assigns the value 2 to the element with row index 0 and column index 2.
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 6)The following statement
  prefs: []
  type: TYPE_NORMAL
- en: values = [[None] * 2 ]
  prefs: []
  type: TYPE_NORMAL
- en: a)creates a 1 × 2 list.
  prefs: []
  type: TYPE_NORMAL
- en: b)creates a 2 × 1 list.
  prefs: []
  type: TYPE_NORMAL
- en: c)creates a one-dimensional list.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 7)You can iterate through a two-dimensional list with two nested loop control
    structures that use
  prefs: []
  type: TYPE_NORMAL
- en: a)variables i and j as counters.
  prefs: []
  type: TYPE_NORMAL
- en: b)variables k and l as counters.
  prefs: []
  type: TYPE_NORMAL
- en: c)variables m and n as counters.
  prefs: []
  type: TYPE_NORMAL
- en: d)any variables as counters.
  prefs: []
  type: TYPE_NORMAL
- en: 8)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: names = [["John", "Sally"], ["George", "Maria"]]
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(names[i][j])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a)displays all names in descending order.
  prefs: []
  type: TYPE_NORMAL
- en: b)displays some names in descending order.
  prefs: []
  type: TYPE_NORMAL
- en: c)displays all names in ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: d)displays some names in ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 9)If list b contains 30 × 40 elements, the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(30, 0, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(40, 0, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: b[i][j] *= 3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a)triples the values of some of its elements.
  prefs: []
  type: TYPE_NORMAL
- en: b)triples the values of all of its elements.
  prefs: []
  type: TYPE_NORMAL
- en: c)does not satisfy the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 10)If list b contains 30 × 40 elements, the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(29, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(39, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: total += b[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: average = total / 120
  prefs: []
  type: TYPE_NORMAL
- en: a)calculates the sum of all of its elements.
  prefs: []
  type: TYPE_NORMAL
- en: b)calculates the average value of all of its elements.
  prefs: []
  type: TYPE_NORMAL
- en: c)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: 11)The following two code fragments calculate the sum of the elements on the
    main diagonal of an N × N list,
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if i == j:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: total += a[i][j]
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in range(N):'
  prefs: []
  type: TYPE_NORMAL
- en: total += a[k][k]
  prefs: []
  type: TYPE_NORMAL
- en: a)but the first one is more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: b)but the second one is more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above; both code fragments perform equivalently
  prefs: []
  type: TYPE_NORMAL
- en: 31.9 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Create the trace table for the following code fragment.
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * 3 for i in range(2)]
  prefs: []
  type: TYPE_NORMAL
- en: a[0][2] = 1
  prefs: []
  type: TYPE_NORMAL
- en: x = 0
  prefs: []
  type: TYPE_NORMAL
- en: a[0][x] = 9
  prefs: []
  type: TYPE_NORMAL
- en: a[0][x + a[0][2]] = 4
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0][2]][2] = 19
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0][2]][x + 1] = 13
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0][2]][x] = 15
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create the trace table for the following code fragment.
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * 3 for i in range(2)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: a[i][j] = (i + 1) * 5 + j
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3)Create the trace table for the following code fragment.
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * 3 for i in range(3)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: a[i][j] = (i + 1) * 2 + j * 4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '4)Try, without using a trace table, to determine the values that the list will
    contain when the following code fragment is executed. Do this for three different
    executions. The corresponding input values are: (i) 5, (ii) 9, and (iii) 3.'
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * 3 for i in range(2)]
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: a[i][j] = (x + i) * j
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '5)Try, without using a trace table, to determine the values that the list will
    contain when the following code fragment is executed. Do this for three different
    executions. The corresponding input values are: (i) 13, (ii) 10, and (iii) 8.'
  prefs: []
  type: TYPE_NORMAL
- en: a = [[None] * 3 for i in range(2)]
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if j < x % 4:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] = (x + i) * j
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] = (x + j) * i + 3
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 6)Try, without using a trace table, to determine the values that the list will
    contain when the following code fragment is executed.
  prefs: []
  type: TYPE_NORMAL
- en: a = [[18, 10, 35], [32, 12, 19]]
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a[i][j] < 13:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] /= 2
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif a[i][j] < 20:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] += 1
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] -= 4
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 7)Try, without using a trace table, to determine the values that the list will
    contain when the following code fragment is executed.
  prefs: []
  type: TYPE_NORMAL
- en: a = [[11, 10], [15, 19], [22, 15]]
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if i == 2:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] += a[i - 1][j]
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a[i][j] += a[i + 1][j]
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 8)Assume that list a contains the following values.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter31-12.png)
  prefs: []
  type: TYPE_NORMAL
- en: What displays on the screen after executing each of the following code fragments?
  prefs: []
  type: TYPE_NORMAL
- en: i)
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  prefs: []
  type: TYPE_NORMAL
- en: ii)
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  prefs: []
  type: TYPE_NORMAL
- en: iii)
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  prefs: []
  type: TYPE_NORMAL
- en: iv)
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  prefs: []
  type: TYPE_NORMAL
- en: v)
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  prefs: []
  type: TYPE_NORMAL
- en: vi)
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  prefs: []
  type: TYPE_NORMAL
- en: vii)
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  prefs: []
  type: TYPE_NORMAL
- en: viii)
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i][j], end = " ")
  prefs: []
  type: TYPE_NORMAL
- en: 9)Write a Python program that lets the user enter integer values in a 10 × 15
    list and then displays the indexes of the elements that contain odd numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 10)Write a Python program that lets the user enter numeric values in a 10 ×
    6 list and then displays the elements of the columns with even-numbered indexes
    (that is, column indexes 0, 2, and 4).
  prefs: []
  type: TYPE_NORMAL
- en: 11)Write a Python program that lets the user enter numeric values in a 12 ×
    8 list and then calculates and displays the sum of the elements that have even
    column indexes and odd row indexes.
  prefs: []
  type: TYPE_NORMAL
- en: 12)Write a Python program that lets the user enter numeric values in an 8 ×
    8 square list and then calculates the average value of the elements on its main
    diagonal and the average value of the elements on its antidiagonal. Try to calculate
    both average values within the same loop control structure.
  prefs: []
  type: TYPE_NORMAL
- en: 13)Write a Python program that creates and displays the following list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter31-13.png)'
  prefs: []
  type: TYPE_IMG
- en: 14)Write a Python program that creates and displays the following list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter31-14.png)'
  prefs: []
  type: TYPE_IMG
- en: 15)Write a Python program that lets the user enter numeric values in a 5 × 4
    list and then displays the row and column indexes of the elements that contain
    integers.
  prefs: []
  type: TYPE_NORMAL
- en: 16)Write a Python program that lets the user enter numeric values in a 10 ×
    4 list and then counts and displays the total number of negative elements.
  prefs: []
  type: TYPE_NORMAL
- en: 17)Write a Python program that lets the user enter words in a 3 × 4 list and
    then displays them with a space character between them.
  prefs: []
  type: TYPE_NORMAL
- en: 18)Write a Python program that lets the user enter words in a 20 × 14 list and
    then displays those who have less than five characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Use the len() function.'
  prefs: []
  type: TYPE_NORMAL
- en: 19)Write a Python program that lets the user enter words in a 20 × 14 list and
    displays those that have less than 5 characters, then those that have less than
    10 characters, and finally those that have less than 20 characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Try to display the words using three for-loops nested one within the
    other.'
  prefs: []
  type: TYPE_NORMAL
