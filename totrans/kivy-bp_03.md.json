["```py\n<Button>:\n    background_normal: 'button_normal.png'\n    background_down: 'button_down.png'\n    background_color: C('#95A5A6')\n    font_size: 40\n```", "```py\n#:import C kivy.utils.get_color_from_hex\n\nGridLayout:\n    padding: 15\n\n    Button:\n        background_color: C('#3498DB')\n        text: 'aaa'\n\n    GridLayout:\n        Button:\n            background_color: C('#2ECC71')\n            text: 'bbb1'\n\n        Button:\n            background_color: C('#1ABC9C')\n            text: 'bbb2'\n\n        Button:\n            background_color: C('#27AE60')\n            text: 'bbb3'\n\n        Button:\n            background_color: C('#16A085')\n            text: 'bbb4'\n\n    Button:\n        background_color: C('#E74C3C')\n        text: 'ccc'\n\n    Button:\n        background_color: C('#95A5A6')\n        text: 'ddd'\n```", "```py\n<GridLayout>:\n    cols: 2\n    spacing: 10\n    row_default_height:\n        (0.5 * (self.width - self.spacing[0]) -\n        self.padding[0])\n    row_force_default: True\n```", "```py\nfrom kivy.app import App\nfrom kivy.core.text import LabelBase\n\nclass RecorderApp(App):\n    pass\n\nif __name__ == '__main__':\n    LabelBase.register(name='Modern Pictograms',\n                       fn_regular='modernpics.ttf')\n\n    RecorderApp().run()\n```", "```py\n<Button>:\n    background_normal: 'button_normal.png'\n    background_down: 'button_down.png'\n    font_size: 24\n    halign: 'center'\n markup: True\n\n```", "```py\nButton:\n    background_color: C('#3498DB')\n    text:\n        ('[font=Modern Pictograms][size=120]'\n        'e[/size][/font]\\nNew recording')\n```", "```py\ntitle=App Name\nauthor=Your Name\norientation=portrait\n```", "```py\nfrom jnius import autoclass\n\nEnvironment = autoclass('android.os.Environment')\nMediaRecorder = autoclass('android.media.MediaRecorder')\nAudioSource = autoclass('android.media.MediaRecorder$AudioSource')\nOutputFormat = autoclass('android.media.MediaRecorder$OutputFormat')\nAudioEncoder = autoclass('android.media.MediaRecorder$AudioEncoder')\n```", "```py\nimport android.os.Environment;\n\nString path = Environment.getExternalStorageDirectory()\n.getAbsolutePath();\n```", "```py\nEnvironment = autoclass('android.os.Environment')\npath = Environment.getExternalStorageDirectory().getAbsolutePath()\n```", "```py\nfrom kivy.logger import Logger\nLogger.info('App: storage path == \"%s\"' % path)\n```", "```py\n[INFO] App: storage path == \"/storage/sdcard0\"\n\n```", "```py\nstorage_path = (Environment.getExternalStorageDirectory()\n                .getAbsolutePath() + '/kivy_recording.3gp')\n\nrecorder = MediaRecorder()\n\ndef init_recorder():\n    recorder.setAudioSource(AudioSource.MIC)\n    recorder.setOutputFormat(OutputFormat.THREE_GPP)\n    recorder.setAudioEncoder(AudioEncoder.AMR_NB)\n    recorder.setOutputFile(storage_path)\n    recorder.prepare()\n```", "```py\nclass RecorderApp(App):\n    is_recording = False\n\n    def begin_end_recording(self):\n        if (self.is_recording):\n            recorder.stop()\n            recorder.reset()\n            self.is_recording = False\n            self.root.ids.begin_end_recording.text = \\\n                ('[font=Modern Pictograms][size=120]'\n                 'e[/size][/font]\\nBegin recording')\n            return\n\n        init_recorder()\n        recorder.start()\n        self.is_recording = True\n        self.root.ids.begin_end_recording.text = \\\n            ('[font=Modern Pictograms][size=120]'\n             '%[/size][/font]\\nEnd recording')\n```", "```py\nButton:\n        id: begin_end_recording\n        background_color: C('#3498DB')\n        text:\n            ('[font=Modern Pictograms][size=120]'\n            'e[/size][/font]\\nBegin recording')\n        on_press: app.begin_end_recording()\n```", "```py\n    apktool d -b -s -d KivyLauncher.apk KivyLauncher\n    ```", "```py\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n    ```", "```py\n    apktool b KivyLauncher KivyLauncherWithChanges.apk\n    ```", "```py\nMediaPlayer = autoclass('android.media.MediaPlayer')\nplayer = MediaPlayer()\n```", "```py\ndef reset_player():\n    if (player.isPlaying()):\n        player.stop()\n    player.reset()\n\ndef restart_player():\n    reset_player()\n    try:\n        player.setDataSource(storage_path)\n        player.prepare()\n        player.start()\n    except:\n        player.reset()\n```", "```py\nFile = autoclass('java.io.File')\n\nclass RecorderApp(App):\n    def delete_file(self):\n        reset_player()\n File(storage_path).delete()\n\n```"]