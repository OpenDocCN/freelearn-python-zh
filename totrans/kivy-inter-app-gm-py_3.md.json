["```py\n1\\. File Name: comiccreator.kv \n2\\. <ComicCreator>:\n3\\.    AnchorLayout:\n4\\.        anchor_x: 'left'\n5\\.        anchor_y: 'top'\n6\\.        ToolBox:\n7\\.            id: _tool_box\n8\\.            drawing_space: _drawing_space\n9\\.            comic_creator: root\n10\\.            size_hint: None,None\n11\\.            width: 100\n12\\.    AnchorLayout:\n13\\.        anchor_x: 'right'\n14\\.        anchor_y: 'top'\n15\\.        DrawingSpace:\n16\\.            id: _drawing_space\n17\\.            status_bar: _status_bar\n18\\.            general_options: _general_options\n19\\.            tool_box: _tool_box\n20\\.            size_hint: None,None\n21\\.            width: root.width - _tool_box.width\n22\\.            height: root.height - _general_options.height - _status_bar.height\n23\\.    AnchorLayout:\n24\\.        anchor_x: 'center'\n25\\.        anchor_y: 'bottom'\n26\\.        BoxLayout:\n27\\.             orientation: 'vertical'\n28\\.             GeneralOptions:\n29\\.                 id: _general_options\n30\\.                 drawing_space: _drawing_space\n31\\.                 comic_creator: root\n32\\.                 size_hint: 1,None\n33\\.                 height: 48\n34\\.             StatusBar:\n35\\.                 id: _status_bar\n36\\.                 size_hint: 1,None\n37\\.                 height: 24\n```", "```py\n38\\. # File name: comicwidgets.kv\n39\\. #:import comicwidgets comicwidgets\n40\\. <DraggableWidget>:\n41\\.    size_hint: None, None\n42.\n43\\. <StickMan>:\n44\\.    size: 48,48\n45\\.    ... \n```", "```py\n46\\. # File name: comicwidgets.py\n47\\. from kivy.uix.relativelayout import RelativeLayout\n48\\. from kivy.graphics import Line\n49.\n50\\. class DraggableWidget(RelativeLayout):\n51\\.    def __init__(self,  **kwargs):\n52\\.        self.selected = None\n53\\.        super(DraggableWidget, self).__init__(**kwargs)\n```", "```py\n54\\.    def on_touch_down(self, touch):\n55\\.        if self.collide_point(touch.x, touch.y):\n56\\.            self.select()\n57\\.            return True\n58\\.        return super(DraggableWidget, self).on_touch_down(touch)\n```", "```py\n59\\.     def select(self):\n60\\.        if not self.selected:\n61\\.            self.ix = self.center_x\n62\\.            self.iy = self.center_y\n63\\.            with self.canvas:\n64\\.                self.selected = Line(rectangle=(0,0,self.width,self.height), dash_offset=2)\n```", "```py\nwith self.canvas:\n   Color(rgb=(1,0,0))\n   Line(points=(0,0,5,5))\n   Rotate()\n   ...\n```", "```py\n65\\.    def on_touch_move(self, touch):\n66\\.        (x,y) = self.parent.to_parent(touch.x, touch.y)\n67\\.        if self.selected and self.parent.collide_point(x - self.width/2, y - self.height/2):\n68\\.            self.translate(touch.x-self.ix,touch.y-self.iy)\n69\\.            return True\n70\\.        return super(DraggableWidget, self).on_touch_move(touch)\n```", "```py\n71\\.     def translate(self, x, y):\n72\\.         self.center_x = self.ix = self.ix + x\n73\\.         self.center_y = self.iy = self.iy + y\n```", "```py\n74\\.     def on_touch_up(self, touch):\n75\\.        if self.selected:\n76\\.            self.unselect()\n77\\.            return True\n78\\.        return super(DraggableWidget, self).on_touch_up(touch)\n```", "```py\n79\\.    def unselect(self):\n80\\.        if self.selected:\n81\\.            self.canvas.remove(self.selected)\n82\\.            self.selected = None\n```", "```py\n83\\. class StickMan(DraggableWidget):\n84\\.    pass\n```", "```py\n85\\. # File name: drawingspace.kv\n86\\. <DrawingSpace@RelativeLayout>:\n87\\.    Canvas.before:\n88\\.        Line: \n89\\.            rectangle: 0, 0, self.width - 4,self.height - 4\n90\\.    StickMan:\n```", "```py\n91\\. # File name: toolbox.py\n92\\. import kivy\n93.\n94\\. import math\n95\\. from kivy.uix.togglebutton import ToggleButton\n96\\. from kivy.graphics import Line\n97\\. from comicwidgets import StickMan, DraggableWidget\n98.\n99\\. class ToolButton(ToggleButton):\n100\\.    def on_touch_down(self, touch):\n101\\.         ds = self.parent.drawing_space\n102\\.         if self.state == 'down' and ds.collide_point(touch.x, touch.y):\n103\\.             (x,y) = ds.to_widget(touch.x, touch.y)\n104\\.             self.draw(ds, x, y)\n105\\.             return True\n106\\.      return super(ToolButton, self).on_touch_down(touch)\n107\\.  \n108\\.  def draw(self, ds, x, y):\n109\\.      pass\n```", "```py\n110\\. class ToolStickman(ToolButton):\n111\\.     def draw(self, ds, x, y):\n112\\.         sm = StickMan(width=48, height=48)\n113\\.         sm.center = (x,y)\n114\\.         ds.add_widget(sm)\n```", "```py\n115\\. # File name: toolbox.kv\n116\\. #:import toolbox toolbox\n117\\. \n118\\. <ToolButton>:\n119\\.    …\n120\\. <ToolBox@GridLayout>:\n121\\.     …\n122\\.     ToolStickman:\n```", "```py\n    123\\. class ToolFigure(ToolButton):\n    124\\.     def draw(self, ds, x, y):\n    125\\.         (self.ix, self.iy) = (x,y)\n    126\\.         with ds.canvas:\n    127\\.             self.figure=self.create_figure(x,y,x+1,y+1)\n    128\\.         ds.bind(on_touch_move=self.update_figure)\n    129\\.         ds.bind(on_touch_up=self.end_figure)\n    ```", "```py\n    130\\.     def update_figure(self, ds, touch):\n    131\\.         if ds.collide_point(touch.x, touch.y):\n    132\\.             (x,y) = ds.to_widget(touch.x, touch.y)\n    133\\.             ds.canvas.remove(self.figure)\n    134\\.             with ds.canvas:\n    135\\.                 self.figure = self.create_figure(self.ix, self.iy,x,y)\n    ```", "```py\n    136\\.     def end_figure(self, ds, touch):\n    137\\.         ds.unbind(on_touch_move=self.update_figure)\n    138\\.         ds.unbind(on_touch_up=self.end_figure)\n    139\\.         ds.canvas.remove(self.figure)\n    140\\.         (fx,fy) = ds.to_widget(touch.x, touch.y)\n    141\\.         self.widgetize(ds,self.ix,self.iy,fx,fy)\n    ```", "```py\n    142\\.     def widgetize(self,ds,ix,iy,fx,fy):\n    143\\.         widget = self.create_widget(ix,iy,fx,fy)\n    144\\.         (ix,iy) = widget.to_local(ix,iy,relative=True)\n    145\\.         (fx,fy) = widget.to_local(fx,fy,relative=True)\n    146\\.         widget.canvas.add( self.create_figure(ix,iy,fx,fy))\n    147\\.         ds.add_widget(widget)\n    ```", "```py\n    148\\.     def create_figure(self,ix,iy,fx,fy):\n    149\\.         pass\n    ```", "```py\n    150\\.     def create_widget(self,ix,iy,fx,fy):\n    151\\.         pass \n    ```", "```py\n152\\. class ToolLine(ToolFigure):\n153\\.     def create_figure(self,ix,iy,fx,fy):\n154\\.         return Line(points=[ix, iy, fx, fy])\n155\\. \n156\\.     def create_widget(self,ix,iy,fx,fy):\n157\\.         pos = (min(ix, fx), min(iy, fy)) \n158\\.         size = (abs(fx-ix), abs(fy-iy))\n159\\.         return DraggableWidget(pos = pos, size = size)\n160\\. \n161\\. class ToolCircle(ToolFigure):\n162\\.     def create_figure(self,ix,iy,fx,fy):\n163\\.         return Line(circle=[ix,iy,math.hypot(ix-fx,iy-fy)])\n164\\. \n165\\.     def create_widget(self,ix,iy,fx,fy):\n166\\.         r = math.hypot(ix-fx, iy-fy)\n167\\.         pos = (ix-r, iy-r)\n168\\.         size = (2*r, 2*r)\n169\\.         return DraggableWidget(pos = pos, size = size)\n```", "```py\n170\\. # File name: toolbox.kv\n171\\. ...\n172\\. \n173\\. <ToolBox@GridLayout>:\n174\\.     cols: 2\n175\\.    padding: 2\n176\\.    tool_circle: _tool_circle\n177\\.    tool_line: _tool_line\n178\\.    tool_stickman: _tool_stickman\n179\\.    ToolCircle:\n180\\.        id:  _tool_circle\n181\\.        canvas:\n182\\.            Line:\n183\\.                circle: 24,24,14\n184\\.    ToolLine:\n185\\.        id: _tool_line\n186\\.        canvas:\n187\\.            Line:\n188\\.                points: 10,10,38,38\n189\\.    ToolStickman:\n190\\.        id: _tool_stickman\n191\\.        StickMan:\n192\\.            pos_hint: {'center_x':.5,'center_y':.5}\n```", "```py\n193\\. # File name: generaloptions.kv\n194\\. #:import generaloptions generaloptions\n195\\. <GeneralOptions>:\n196\\.    orientation: 'horizontal'\n197\\.    padding: 2\n198\\.    Button:\n199\\.        text: 'Clear'\n200\\.        on_press: root.clear(*args)\n201\\.    Button:\n202\\.        text: 'Remove'\n203\\.        on_release: root.remove(*args)\n204\\.    ToggleButton:\n205\\.        text: 'Group'\n206\\.        on_state: root.group(*args)\n207\\.    Button:\n208\\.        text: 'Color'\n209\\.        on_press: root.color(*args)\n210\\.    ToggleButton:\n211\\.        text: 'Gestures'\n212\\.        on_state: root.gestures(*args)\n```", "```py\n213\\. # File name: generaloptions.py\n214\\. from kivy.uix.boxlayout import BoxLayout\n215\\. from kivy.properties import NumericProperty, ListProperty\n216.\n217\\. class GeneralOptions(BoxLayout):\n218\\.    group_mode = False\n219\\.    translation = ListProperty(None)\n220.\n221\\.    def clear(self, instance):\n222\\.        self.drawing_space.clear_widgets()\n223.\n224\\.    def remove(self, instance):\n225\\.        ds = self.drawing_space\n226\\.        if len(ds.children) > 0:\n227\\.            ds.remove_widget(ds.children[0])\n228.\n229\\.    def group(self, instance, value):\n230\\.        if value == 'down':\n231\\.            self.group_mode = True\n232\\.        else:\n233\\.            self.group_mode = False\n234\\.            self.unselect_all()\n235.\n236\\.    def color(self, instance):\n237\\.        pass\n238.\n239\\.    def gestures(self, instance, value):\n240\\.        pass\n241.\n242\\.    def unselect_all(self):\n243\\.         for child in self.drawing_space.children:\n244\\.             child.unselect()\n245.\n246\\.    def on_translation(self,instance,value):\n247\\.        for child in self.drawing_space.children:\n248\\.            if child.selected:\n249\\.                child.translate(*self.translation)\n```", "```py\n250\\. def __init__(self,  **kwargs):\n251\\.    self.selected = None\n252\\.    self.touched = False\n253\\.    super(DraggableWidget, self).__init__(**kwargs)\n```", "```py\n254\\. def on_touch_down(self, touch):\n255\\.    if self.collide_point(touch.x, touch.y):\n256\\.        self.touched = True\n257\\.        self.select()\n258\\.        return True\n259\\.    return super(DraggableWidget, self).on_touch_down(touch)\n```", "```py\n260\\. def on_touch_move(self, touch):\n261\\.    (x,y) = self.parent.to_parent(touch.x, touch.y)\n262\\.    if self.selected and self.touched and self.parent.collide_point(x - self.width/2, y -self.height/2):\n263\\.        go = self.parent.general_options\n264\\.        go.translation=(touch.x-self.ix,touch.y-self.iy)\n265\\.        return True\n266\\.    return super(DraggableWidget, self).on_touch_move(touch)\n```", "```py\n267\\. def on_touch_up(self, touch):\n268\\.    self.touched = False\n269\\.    if self.selected:\n270\\.        if not self.parent.general_options.group_mode:\n271\\.            self.unselect()\n272\\.    return super(DraggableWidget, self).on_touch_up(touch) \n```", "```py\n273\\. # File name: statusbar.py\n274\\. from kivy.uix.boxlayout import BoxLayout\n275\\. from kivy.properties import NumericProperty, ObjectProperty\n276.\n277\\. class StatusBar(BoxLayout):\n278\\.    counter = NumericProperty(0)\n279\\.    previous_counter = 0\n280.\n281\\.    def on_counter(self, instance, value):\n282\\.        if value == 0:\n283\\.            self.msg_label.text=\"Drawing space cleared\"\n284\\.        elif value - 1 == self.__class__.previous_counter:\n285\\.            self.msg_label.text = \"Widget added\" 286\\.        elif value + 1 == StatusBar.previous_counter:\n287\\.            self.msg_label.text = \"Widget removed\"\n288\\.        self.__class__.previous_counter = value\n```", "```py\n289\\. # File name: statusbar.kv\n290\\. #:import statusbar statusbar\n291\\. <StatusBar>:\n292\\.    msg_text: _msg_label\n293\\.    orientation: 'horizontal'\n294\\.    Label:\n295\\.         text: 'Total Figures: ' + str(root.counter)\n296\\.     Label:\n297\\.         id: _msg_label\n298\\.         text: \"Kivy started\"\n```", "```py\n299\\. # File name: drawingspace.py\n300\\. from kivy.uix.relativelayout import RelativeLayout\n301\\. \n302\\. class DrawingSpace(RelativeLayout):\n303\\.     def on_children(self, instance, value):\n304\\.         self.status_bar.counter = len(self.children)\n```", "```py\n305\\. # File name: drawingspace.kv\n306\\. #:import drawingspace drawingspace\n307\\. <DrawingSpace@RelativeLayout>:\n```"]