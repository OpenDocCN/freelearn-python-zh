["```py\nfrom django.db import models\nimport uuid\nfrom django.core.exceptions import ObjectDoesNotExist\nfrom django.http import Http404\nclass AbstractManager(models.Manager):\n   def get_object_by_public_id(self, public_id):\n       try:\n           instance = self.get(public_id=public_id)\n           return instance\n       except (ObjectDoesNotExist, ValueError, TypeError):\n           return Http404\nclass AbstractModel(models.Model):\n   public_id = models.UUIDField(db_index=True, unique=True,\n     default=uuid.uuid4, editable=False)\n   created = models.DateTimeField(auto_now_add=True)\n   updated = models.DateTimeField(auto_now=True)\n   objects = AbstractManager()\n   class Meta:\n       abstract = True\n```", "```py\n…\nfrom core.abstract.models import AbstractModel, AbstractManager\nclass UserManager(BaseUserManager, AbstractManager):\n…\nclass User(AbstractModel, AbstractBaseUser, PermissionsMixin):\n…\n```", "```py\nfrom rest_framework import serializers\nclass AbstractSerializer(serializers.ModelSerializer):\n   id = serializers.UUIDField(source='public_id',\n                              read_only=True, format='hex')\n   created = serializers.DateTimeField(read_only=True)\n   updated = serializers.DateTimeField(read_only=True)\n```", "```py\nfrom core.abstract.serializers import AbstractSerializer\nfrom core.user.models import User\nclass UserSerializer(AbstractSerializer):\n…\n```", "```py\nfrom rest_framework import viewsets\nfrom rest_framework import filters\nclass AbstractViewSet(viewsets.ModelViewSet):\n   filter_backends = [filters.OrderingFilter]\n   ordering_fields = ['updated', 'created']\n   ordering = ['-updated']\n```", "```py\n…\nfrom core.abstract.viewsets import AbstractViewSet\nfrom core.user.serializers import UserSerializer\nfrom core.user.models import User\nclass UserViewSet(AbstractViewSet):\n…\n```", "```py\n    django-admin startapp post\n    ```", "```py\nfrom django.apps import AppConfig\nclass PostConfig(AppConfig):\n   default_auto_field =\n     'django.db.models.BigAutoField'\n   name = 'core.post'\n   label = \"core_label\"\n```", "```py\nfrom django.db import models\nfrom core.abstract.models import AbstractModel, AbstractManager\nclass PostManager(AbstractManager):\n   pass\nclass Post(AbstractModel):\n   author = models.ForeignKey(to=\"core_user.User\",\n     on_delete=models.CASCADE)\n   body = models.TextField()\n   edited = models.BooleanField(default=False)\n   objects = PostManager()\n   def __str__(self):\n       return f\"{self.author.name}\"\n   class Meta:\n       db_table = \"'core.post'\"\n```", "```py\n…\n'core.post'\n…\n```", "```py\n    python manage makemigrations && python manage.py migrate\n    ```", "```py\n    (venv) koladev@koladev123xxx:~/PycharmProjects/Full-stack-Django-and-React$ python manage.py shell\n    ```", "```py\n    Python 3.10.2 (main, Jan 15 2022, 18:02:07) [GCC 9.3.0] on linux\n    ```", "```py\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    ```", "```py\n    (InteractiveConsole)\n    ```", "```py\n    >>>\n    ```", "```py\n    >>> from core.post.models import Post\n    ```", "```py\n    >>> from core.user.models import User\n    ```", "```py\n    >>> user = User.objects.first()\n    ```", "```py\n    >>> user\n    ```", "```py\n    >>> data = {\"author\": user, \"body\":\"A simple test\"}\n    ```", "```py\n    >>> post = Post.objects.create(**data)\n    ```", "```py\n    >>> post\n    ```", "```py\n    <Post: John Hey>\n    ```", "```py\n    >>>\n    ```", "```py\n    Let's access the author field of this object.\n    ```", "```py\n    >>> post.author\n    ```", "```py\n    <User: testuser@yopmail.com>\n    ```", "```py\n>>> user.post_set.all()\n<QuerySet [<Post: John Hey>]>\n```", "```py\nfrom rest_framework import serializers\nfrom rest_framework.exceptions import ValidationError\nfrom core.abstract.serializers import AbstractSerializer\nfrom core.post.models import Post\nfrom core.user.models import User\nclass PostSerializer(AbstractSerializer):\n   author = serializers.SlugRelatedField(\n     queryset=User.objects.all(), slug_field='public_id')\n   def validate_author(self, value):\n       if self.context[\"request\"].user != value:\n           raise ValidationError(\"You can't create a post\n                                  for another user.\")\n       return value\n   class Meta:\n       model = Post\n       # List of all the fields that can be included in a\n       # request or a response\n       fields = ['id', 'author', 'body', 'edited',\n                 'created', 'updated']\n       read_only_fields = [\"edited\"]\n```", "```py\nfrom rest_framework.permissions import IsAuthenticated\nfrom core.abstract.viewsets import AbstractViewSet\nfrom core.post.models import Post\nfrom core.post.serializers import PostSerializer\nclass PostViewSet(AbstractViewSet):\n   http_method_names = ('post', 'get')\n   permission_classes = (IsAuthenticated,)\n   serializer_class = PostSerializer\n   def get_queryset(self):\n       return Post.objects.all()\n   def get_object(self):\n       obj = Post.objects.get_object_by_public_id(\n         self.kwargs['pk'])\n       self.check_object_permissions(self.request, obj)\n       return obj\n   def create(self, request, *args, **kwargs):\n       serializer = self.get_serializer(data=request.data)\n       serializer.is_valid(raise_exception=True)\n       self.perform_create(serializer)\n       return Response(serializer.data,\n                       status=status.HTTP_201_CREATED)\n```", "```py\n…\nfrom core.post.viewsets import PostViewSet\n# ##################################################################### #\n# ################### POST                       ###################### #\n# ##################################################################### #\nrouter.register(r'post', PostViewSet, basename='post')\n…\n```", "```py\n{\n    \"author\": \"19a2316e94e64c43850255e9b62f2056\",\n    \"body\": \"A simple posted\"\n}\n```", "```py\nREST_FRAMEWORK = {\n…\n   'DEFAULT_PAGINATION_CLASS':\n     'rest_framework.pagination.LimitOffsetPagination',\n   'PAGE_SIZE': 15,\n}\n…\n```", "```py\nGET https://api.example.org/accounts/?limit=100&offset=400\n```", "```py\nclass PostSerializer(AbstractSerializer):\n   …\n   def to_representation(self, instance):\n       rep = super().to_representation(instance)\n       author = User.objects.get_object_by_public_id(\n         rep[\"author\"])\n       rep[\"author\"] = UserSerializer(author).data\n       return rep\n…\n```", "```py\nfrom rest_framework.permissions import BasePermission, SAFE_METHODS\nclass UserPermission(BasePermission):\n   def has_object_permission(self, request, view, obj):\n       if request.user.is_anonymous:\n           return request.method in SAFE_METHODS\n       if view.basename in [\"post\"]:\n           return bool(request.user and\n                       request.user.is_authenticated)\n    return False\n   def has_permission(self, request, view):\n       if view.basename in [\"post\"]:\n           if request.user.is_anonymous:\n               return request.method in SAFE_METHODS\n           return bool(request.user and\n                       request.user.is_authenticated)\n       return False\n```", "```py\n…\nclass PostViewSet(AbstractViewSet):\n   http_method_names = ('post', 'get', 'put', 'delete')\n…\n```", "```py\n…\nclass PostSerializer(AbstractSerializer):\n…\n   def update(self, instance, validated_data):\n       if not instance.edited:\n           validated_data['edited'] = True\n       instance = super().update(instance, validated_data)\n       return instance\n…\n```", "```py\n{\n    \"author\": \"61c5a1ecb9f5439b810224d2af148a23\",\n    \"body\": \"A simple post edited\"\n}\n```", "```py\nclass User(AbstractModel, AbstractBaseUser, PermissionsMixin):\n...\n   posts_liked = models.ManyToManyField(\n       \"core_post.Post\",\n       related_name=\"liked_by\"\n   )\n...\n```", "```py\npython manage.py makemigrations\npython manage.py migrate\n```", "```py\nclass User(AbstractModel, AbstractBaseUser, PermissionsMixin):\n   ...\n   def like(self, post):\n       \"\"\"Like `post` if it hasn't been done yet\"\"\"\n       return self.posts_liked.add(post)\n   def remove_like(self, post):\n       \"\"\"Remove a like from a `post`\"\"\"\n       return self.posts_liked.remove(post)\n   def has_liked(self, post):\n       \"\"\"Return True if the user has liked a `post`; else\n          False\"\"\"\n       return self.posts_liked.filter(pk=post.pk).exists()\n```", "```py\n...\nclass PostSerializer(AbstractSerializer):\n   ...\n   liked = serializers.SerializerMethodField()\n   likes_count = serializers.SerializerMethodField()\n   def get_liked(self, instance):\n       request = self.context.get('request', None)\n       if request is None or request.user.is_anonymous:\n           return False\n       return request.user.has_liked(instance)\n   def get_likes_count(self, instance):\n       return instance.liked_by.count()\n   class Meta:\n       model = Post\n       # List of all the fields that can be included in a\n       # request or a response\n       fields = ['id', 'author', 'body', 'edited', 'liked',\n                 'likes_count', 'created', 'updated']\n       read_only_fields = [\"edited\"]\n```", "```py\n ...\nclass PostViewSet(AbstractViewSet):\n   ...\n   @action(methods=['post'], detail=True)\n   def like(self, request, *args, **kwargs):\n       post = self.get_object()\n       user = self.request.user\n       user.like(post)\n       serializer = self.serializer_class(post)\n       return Response(serializer.data,\n                       status=status.HTTP_200_OK)\n   @action(methods=['post'], detail=True)\n   def remove_like(self, request, *args, **kwargs):\n       post = self.get_object()\n       user = self.request.user\n       user.remove_like(post)\n       serializer = self.serializer_class(post)\n       return Response(serializer.data,\n                       status=status.HTTP_200_OK)\n```"]