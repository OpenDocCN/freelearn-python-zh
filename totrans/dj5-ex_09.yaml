- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing Payments and Orders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you created a basic online shop with a product catalog
    and a shopping cart. You learned how to use Django sessions and built a custom
    context processor. You also learned how to launch asynchronous tasks using Celery
    and RabbitMQ.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to integrate a payment gateway into your
    site to let users pay by credit card and manage order payments. You will also
    extend the administration site with different features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrate the Stripe payment gateway into your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process credit card payments with Stripe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle payment notifications and mark orders as paid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export orders to CSV files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create custom views for the administration site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate PDF invoices dynamically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Figure 9.1* shows a representation of the views, templates, and functionalities
    that will be built in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Diagram of the functionalities built in Chapter 9'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will create a new `payment` app, where you will implement
    the `payment_process` view to initiate a checkout session to pay orders with Stripe.
    You will build the `payment_completed` view to redirect users after successful
    payments and the `payment_canceled` view to redirect users if the payment is canceled.
    You will implement the `export_to_csv` admin action to export orders in CSV format
    in the administration site. You will also build the admin view `admin_order_detail`
    to display order details and the `admin_order_pdf` view to generate PDF invoices
    dynamically. You will implement the `stripe_webhook` webhook to receive asynchronous
    payment notifications from Stripe, and you will implement the `payment_completed`
    asynchronous task to send invoices to clients when orders are paid.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter09](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter09).
  prefs: []
  type: TYPE_NORMAL
- en: All Python packages used in this chapter are included in the `requirements.txt`
    file in the source code for the chapter. You can follow the instructions to install
    each Python package in the following sections, or you can install all the requirements
    at once with the command `python` `-m` `pip` `install` `-r` `requirements.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating a payment gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A payment gateway is a technology used by merchants to process payments from
    customers online. Using a payment gateway, you can manage customers’ orders and
    delegate payment processing to a reliable, secure third party. By using a trusted
    payment gateway, you won’t have to worry about the technical, security, and regulatory
    complexity of processing credit cards in your own system.
  prefs: []
  type: TYPE_NORMAL
- en: There are several payment gateway providers to choose from. We are going to
    integrate Stripe, which is a very popular payment gateway used by online services
    such as Shopify, Uber, Twitch, and GitHub, among others.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe provides an **Application Programming Interface** (**API**) that allows
    you to process online payments with multiple payment methods, such as credit card,
    Google Pay, and Apple Pay. You can learn more about Stripe at [https://www.stripe.com/](https://www.stripe.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Stripe provides different products related to payment processing. It can manage
    one-off payments, recurring payments for subscription services, multiparty payments
    for platforms and marketplaces, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe offers different integration methods, from Stripe-hosted payment forms
    to fully customizable checkout flows. We will integrate the *Stripe* *Checkout*
    product, which consists of a payment page optimized for conversion. Users will
    be able to easily pay with a credit card or other payment methods for the items
    they order. We will receive payment notifications from Stripe. You can see the
    *Stripe* *Checkout* documentation at [https://stripe.com/docs/payments/checkout](https://stripe.com/docs/payments/checkout).
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging *Stripe* *Checkout* to process payments, you rely on a solution
    that is secure and compliant with **Payment Card Industry** (**PCI**) requirements.
    You will be able to collect payments from Google Pay, Apple Pay, Afterpay, Alipay,
    SEPA direct debits, Bacs direct debits, BECS direct debits, iDEAL, Sofort, GrabPay,
    FPX, and other payment methods.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Stripe account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need a Stripe account to integrate the payment gateway into your site. Let’s
    create an account to test the Stripe API. Open [https://dashboard.stripe.com/register](https://dashboard.stripe.com/register)
    in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see a form like the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: The Stripe signup form'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the form with your own data and click on **Create account**. You will
    receive an email from Stripe with a link to verify your email address. The email
    will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: The verification email to verify your email address'
  prefs: []
  type: TYPE_NORMAL
- en: Open the email in your inbox and click on **Verify email**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be redirected to the Stripe dashboard screen, which will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: The Stripe dashboard after verifying the email address'
  prefs: []
  type: TYPE_NORMAL
- en: At the top right of the screen, you can see that **Test mode** is activated.
    Stripe provides you with a test environment and a production environment. If you
    own a business or are a freelancer, you can add your business details to activate
    the account and get access to process real payments. However, this is not necessary
    to implement and test payments through Stripe, as we will be working in the test
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: You need to add an account name to process payments. Open [https://dashboard.stripe.com/settings/account](https://dashboard.stripe.com/settings/account)
    in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: The Stripe account settings'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **Account name**, enter the name of your choice and then click on **Save**.
    Go back to the Stripe dashboard. You will see your account name displayed in the
    header:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: The Stripe dashboard header including the account name'
  prefs: []
  type: TYPE_NORMAL
- en: We will continue by installing the Stripe Python SDK and adding Stripe to our
    Django project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Stripe Python library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Stripe provides a Python library that simplifies dealing with its API. We are
    going to integrate the payment gateway into the project using the `stripe` library.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code for the Stripe Python library at [https://github.com/stripe/stripe-python](https://github.com/stripe/stripe-python).
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `stripe` library from the shell using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adding Stripe to your project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open [https://dashboard.stripe.com/test/apikeys](https://dashboard.stripe.com/test/apikeys)
    in your browser. You can also access this page from the Stripe dashboard by clicking
    on **Developers** and then clicking on **API keys**. You will see the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: The Stripe test API keys screen'
  prefs: []
  type: TYPE_NORMAL
- en: Stripe provides a key pair for the two different environments, test and production.
    There is a **Publishable key** and a **Secret key** for each environment. Test
    mode publishable keys have the prefix `pk_test_` and live mode publishable keys
    have the prefix `pk_live_`. Test mode secret keys have the prefix `sk_test_` and
    live mode secret keys have the prefix `sk_live_`.
  prefs: []
  type: TYPE_NORMAL
- en: You will need this information to authenticate requests to the Stripe API. You
    should always keep your private key secret and store it securely. The publishable
    key can be used in client-side code such as JavaScript scripts. You can read more
    about Stripe API keys at [https://stripe.com/docs/keys](https://stripe.com/docs/keys).
  prefs: []
  type: TYPE_NORMAL
- en: To facilitate separating configuration from code, we are going to use `python-decouple`.
    You already used this library in *Chapter 2*, *Enhancing Your Blog and Adding
    Social Features*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside your project’s root directory and name it `.env`.
    The `.env` file will contain key-value pairs of environment variables. Add the
    Stripe credentials to the new file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Replace the `STRIPE_PUBLISHABLE_KEY` and `STRIPE_SECRET_KEY` values with the
    test **Publishable key** and **Secret key** values provided by Stripe.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a `git` repository for your code, make sure to include `.env`
    in the `.gitignore` file of your repository. By doing so, you ensure that credentials
    are excluded from the repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `python-decouple` via `pip` by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `settings.py` file of your project and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You will use Stripe API version `2024-04-10`. You can see the release notes
    for this API version at [https://stripe.com/docs/upgrades#2024-04-10](https://stripe.com/docs/api/events/types).
  prefs: []
  type: TYPE_NORMAL
- en: You are using the test environment keys for the project. Once you go live and
    validate your Stripe account, you will obtain the production environment keys.
    In *Chapter 17*, *Going Live*, you will learn how to configure settings for multiple
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s integrate the payment gateway into the checkout process. You can find
    the Python documentation for Stripe at [https://stripe.com/docs/api?lang=python](https://stripe.com/docs/api/events/types).
  prefs: []
  type: TYPE_NORMAL
- en: Building the payment process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The checkout process will work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Add items to the shopping cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check out the shopping cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter credit card details and pay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to create a new application to manage payments. Create a new application
    in your project using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `settings.py` file of the project and add the new application to the
    `INSTALLED_APPS` setting, as follows. The new line is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `payment` application is now active in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, users are able to place orders but they cannot pay for them. After
    clients place an order, we need to redirect them to the payment process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `orders` application and include the following
    import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same file, find the following lines of the `order_create` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace them with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The edited view should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Instead of rendering the template `orders/order/created.html` when placing a
    new order, the order ID is stored in the user session and the user is redirected
    to the `payment:process` URL. We are going to implement this URL later. Remember
    that Celery has to be running for the `order_created` task to be queued and executed.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s integrate the payment gateway.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Stripe Checkout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Stripe Checkout integration consists of a checkout page hosted by Stripe
    that allows the user to enter the payment details, usually a credit card, and
    then it collects the payment. If the payment is successful, Stripe redirects the
    client to a success page. If the payment is canceled by the client, it redirects
    the client to a cancel page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will implement three views:'
  prefs: []
  type: TYPE_NORMAL
- en: '`payment_process`: Creates a Stripe **Checkout Session** and redirects the
    client to the Stripe-hosted payment form. A checkout session is a programmatic
    representation of what the client sees when they are redirected to the payment
    form, including the products, quantities, currency, and amount to charge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`payment_completed`: Displays a message for successful payments. The user is
    redirected to this view if the payment is successful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`payment_canceled`: Displays a message for canceled payments. The user is redirected
    to this view if the payment is canceled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 9.8* shows the checkout payment flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_09_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.8: The checkout payment flow'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete checkout process will work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: After an order is created, the user is redirected to the `payment_process` view.
    The user is presented with an order summary and a button to proceed with the payment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user proceeds to pay, a Stripe checkout session is created. The checkout
    session includes the list of items that the user will purchase, a URL to redirect
    the user to after a successful payment, and a URL to redirect the user to if the
    payment is canceled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The view redirects the user to the Stripe-hosted checkout page. This page includes
    the payment form. The client enters their credit card details and submits the
    form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stripe processes the payment and redirects the client to the `payment_completed`
    view. If the client doesn’t complete the payment, Stripe redirects the client
    to the `payment_canceled` view instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s start building the payment views. Edit the `views.py` file of the `payment`
    application and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, the `stripe` module is imported and the Stripe API key
    is set using the value of the `STRIPE_SECRET_KEY` setting. The API version to
    use is also set using the value of the `STRIPE_API_VERSION` setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `payment_process` view performs the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: The current `Order` object is retrieved from the database using the `order_id`
    session key, which was stored previously in the session by the `order_create`
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Order` object for the given ID is retrieved. By using the shortcut function
    `get_object_or_404()`, an `Http404` (page not found) exception is raised if no
    order is found with the given ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the view is loaded with a `GET` request, the template `payment/process.html`
    is rendered and returned. This template will include the order summary and a button
    to proceed with the payment, which will generate a `POST` request to the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, if the view is loaded with a `POST` request, a Stripe checkout
    session is created with `stripe.checkout.Session.create()` using the following
    parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`mode`: The mode of the checkout session. We use `payment` for a one-time payment.
    You can see the different values accepted for this parameter at [https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-mode](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-mode).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`client_reference_id`: The unique reference for this payment. We will use this
    to reconcile the Stripe checkout session with our order. By passing the order
    ID, we link Stripe payments to orders in our system and we will be able to receive
    payment notifications from Stripe to mark the orders as paid.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`success_url`: The URL for Stripe to redirect the user to if the payment is
    successful. We use `request.build_absolute_uri()` to generate an absolute URI
    from the URL path. You can see the documentation for this method at [https://docs.djangoproject.com/en/5.0/ref/request-response/#django.http.HttpRequest.build_absolute_uri](https://docs.djangoproject.com/en/5.0/ref/request-response/#django.http.HttpRequest.build_absolute_uri).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cancel_url`: The URL for Stripe to redirect the user to if the payment is
    canceled.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`line_items`: This is an empty list. We will next populate it with the order
    items to be purchased.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After creating the checkout session, an HTTP redirect with status code `303`
    is returned to redirect the user to Stripe. The status code `303` is recommended
    to redirect web applications to a new URI after an HTTP `POST` has been performed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can see all the parameters to create a Stripe `session` object at [https://stripe.com/docs/api/checkout/sessions/create](https://stripe.com/docs/api/checkout/sessions/create).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s populate the `line_items` list with the order items to create the checkout
    session. Each item will contain the name of the item, the amount to charge, the
    currency to use, and the quantity purchased.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code highlighted in bold to the `payment_process` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the following information for each item:'
  prefs: []
  type: TYPE_NORMAL
- en: '`price_data`: Price-related information:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unit_amount`: The amount in cents to be collected by the payment. This is
    a positive integer representing how much to charge in the smallest currency unit
    with no decimal places. For example, to charge $10.00, this would be `1000` (that
    is, 1,000 cents). The item price, `item.price`, is multiplied by `Decimal(''100'')`
    to obtain the value in cents, and then it is converted into an integer.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`currency`: The currency to use in the three-letter ISO format. We use `usd`
    for US dollars. You can see a list of supported currencies at [https://stripe.com/docs/currencies](https://stripe.com/docs/currencies).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`product_data`: Product-related information:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The name of the product'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: The number of units to purchase'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `payment_process` view is now ready. Let’s create simple views for the payment
    success and cancel pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `views.py` file of the `payment` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file inside the `payment` application directory and name it `urls.py`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the URLs for the payment workflow. We have included the following
    URL patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`process`: The view that displays the order summary to the user, creates the
    Stripe checkout session, and redirects the user to the Stripe-hosted payment form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`completed`: The view for Stripe to redirect the user to if the payment is
    successful'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`canceled`: The view for Stripe to redirect the user to if the payment is canceled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit the main `urls.py` file of the `myshop` project and include the URL patterns
    for the `payment` application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We have placed the new path before the `shop.urls` pattern to avoid an unintended
    pattern match with a pattern defined in `shop.urls`. Remember that Django runs
    through each URL pattern in order and stops at the first one that matches the
    requested URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s build a template for each view. Create the following file structure inside
    the `payment` application directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `payment/process.html` template and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This is the template to display the order summary to the user and allow the
    client to proceed with the payment. It includes a form and a **Pay now** button
    to submit it via `POST`. When the form is submitted, the `payment_process` view
    creates the Stripe checkout session and redirects the user to the Stripe-hosted
    payment form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `payment/completed.html` template and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This is the template for the page that the user is redirected to after a successful
    payment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `payment/canceled.html` template and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This is the template for the page that the user is redirected to when the payment
    is canceled.
  prefs: []
  type: TYPE_NORMAL
- en: We have implemented the necessary views to process payments, including their
    URL patterns and templates. It’s time to try out the checkout process.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the checkout process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following command in the shell to start the RabbitMQ server with
    Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This will run RabbitMQ on port `5672` and the web-based management interface
    on port `15672`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open another shell and start the Celery worker from your project directory
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Open one more shell and start the development server from your project directory
    with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Open `http://127.0.0.1:8000/` in your browser, add some products to the shopping
    cart, and fill in the checkout form. Click the **Place order** button. The order
    will be persisted to the database, the order ID will be saved in the current session,
    and you will be redirected to the payment process page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The payment process page will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing graphical user interface  Description automatically
    generated](img/B21088_09_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.9: The payment process page including an order summary'
  prefs: []
  type: TYPE_NORMAL
- en: 'Images in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Green tea*: Photo by Jia Ye on Unsplash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Red tea*: Photo by Manki Kim on Unsplash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On this page, you can see an order summary and a **Pay now** button. Click on
    **Pay now**. The `payment_process` view will create a Stripe checkout session,
    and you will be redirected to the Stripe-hosted payment form.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.10: The Stripe checkout payment from'
  prefs: []
  type: TYPE_NORMAL
- en: Using test credit cards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Stripe provides different test credit cards from different card issuers and
    countries, which allows you to simulate payments to test all possible scenarios
    (successful payment, declined payment, etc.). The following table shows some of
    the cards you can test for different scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Result** | **Test Credit Card** | **CVC** | **Expiry date** |'
  prefs: []
  type: TYPE_TB
- en: '| Successful payment | `4242 4242 4242 4242` | Any 3 digits | Any future date
    |'
  prefs: []
  type: TYPE_TB
- en: '| Failed payment | `4000 0000 0000 0002` | Any 3 digits | Any future date |'
  prefs: []
  type: TYPE_TB
- en: '| Requires 3D secure authentication | `4000 0025 0000 3155` | Any 3 digits
    | Any future date |'
  prefs: []
  type: TYPE_TB
- en: You can find the complete list of credit cards for testing at [https://stripe.com/docs/testing](https://stripe.com/docs/testing).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use the test card `4242 4242 4242 4242`, which is a Visa card
    that returns a successful purchase. We will use the CVC `123` and any future expiration
    date, such as `12/29`. Enter the credit card details in the payment form as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.11: The payment form with the valid test credit card details'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Pay**button. The button text will change to **Processing…**, as
    shown in *Figure 9.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.12: The payment form being processed'
  prefs: []
  type: TYPE_NORMAL
- en: 'After a couple of seconds, you will see the button turn green, as in *Figure
    9.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.13: The payment form after the payment is successful'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, Stripe redirects your browser to the payment completed URL you provided
    when creating the checkout session. You will see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_09_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.14: The successful payment page'
  prefs: []
  type: TYPE_NORMAL
- en: Checking the payment information in the Stripe dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Access the Stripe dashboard at [https://dashboard.stripe.com/test/payments](https://dashboard.stripe.com/test/payments).
    Under **Payments**, you will be able to see the payment, as in *Figure 9.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.15: The payment object with the status Succeeded in the Stripe dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: The payment status is **Succeeded**. The payment description includes the **payment
    intent** ID that starts with `pi_`. When a checkout session is confirmed, Stripe
    creates a payment intent associated with the session. A payment intent is used
    to collect a payment from the user. Stripe records all attempted payments as payment
    intents. Each payment intent has a unique ID, and it encapsulates the details
    of the transaction, such as the supported payment methods, the amount to collect,
    and the desired currency. Click on the transaction to access the payment details.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.16: Payment details for a Stripe transaction'
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can see the payment information and the payment timeline, including
    payment changes. Under **Checkout summary**, you can find the line items purchased,
    including the name, quantity, unit price, and amount.
  prefs: []
  type: TYPE_NORMAL
- en: Under **Payment details**, you can see a breakdown of the amount paid and the
    Stripe fee for processing the payment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under this section, you will find a **Payment method** section, including details
    about the payment method and the credit card checks performed by Stripe, as in
    *Figure 9.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.17: Payment method used in the Stripe transaction'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under this section, you will find another section named **Events and logs**,
    as in *Figure 9.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.18: Events and logs for a Stripe transaction'
  prefs: []
  type: TYPE_NORMAL
- en: This section contains all the activity related to the transaction, including
    requests to the Stripe API. You can click on any request to see the HTTP request
    to the Stripe API and the response in the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s review the activity events in chronological order, from bottom to top:'
  prefs: []
  type: TYPE_NORMAL
- en: First, a new checkout session is created by sending a `POST` request to the
    Stripe API endpoint `/v1/checkout/sessions`. The Stripe SDK method `stripe.checkout.Session.create()`
    that is used in the `payment_process` view builds and sends the request to the
    Stripe API, handling the response to return a `session` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user is redirected to the checkout page where they submit the payment form.
    A request to confirm the checkout session is sent by the Stripe checkout page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new payment intent is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A charge related to the payment intent is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The payment intent is now completed with a successful payment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The checkout session is completed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You have successfully integrated Stripe Checkout into your
    project. Next, you will learn how to receive payment notifications from Stripe
    and how to reference Stripe payments in your shop orders.
  prefs: []
  type: TYPE_NORMAL
- en: Using webhooks to receive payment notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Stripe can push real-time events to our application by using webhooks. A **webhook**,
    also called a callback, can be thought of as an event-driven API instead of a
    request-driven API. Instead of polling the Stripe API frequently to know when
    a new payment is completed, Stripe can send an HTTP request to a URL of our application
    to notify us of successful payments in real time. The notification of these events
    will be asynchronous, when the event occurs, regardless of our synchronous calls
    to the Stripe API.
  prefs: []
  type: TYPE_NORMAL
- en: We will build a webhook endpoint to receive Stripe events. The webhook will
    consist of a view that will receive a JSON payload, with the event information
    to process it. We will use the event information to mark orders as paid when the
    checkout session is successfully completed.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a webhook endpoint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can add webhook endpoint URLs to your Stripe account to receive events.
    Since we are using webhooks and we don’t have a hosted website accessible through
    a public URL, we will use the Stripe **Command-Line Interface** (**CLI**) to listen
    to events and forward them to our local environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open [https://dashboard.stripe.com/test/webhooks](https://dashboard.stripe.com/test/webhooks)
    in your browser. You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B21088_09_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.19: The Stripe webhooks default screen'
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can see a schema of how Stripe notifies your integration asynchronously.
    You will get Stripe notifications in real time whenever an event happens. Stripe
    sends different types of events, like checkout session created, payment intent
    created, payment intent updated, or checkout session completed. You can find a
    list of all the types of events that Stripe sends at [https://stripe.com/docs/api/events/types](https://stripe.com/docs/api/events/types).
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Test in a local environment**. You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_09_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.20: The Stripe webhook setup screen'
  prefs: []
  type: TYPE_NORMAL
- en: This screen shows the steps to listen to Stripe events from your local environment.
    It also includes a sample Python webhook endpoint. Copy just the `endpoint_secret`
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `.env` file of your project and add the following environment variable
    highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Replace the `STRIPE_WEBHOOK_SECRET` value with the `endpoint_secret` value provided
    by Stripe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings.py` file of the `myshop` project and add the following setting
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: To build a webhook endpoint, we will create a view that receives a JSON payload
    with the event details. We will check the event details to identify when a checkout
    session is completed and mark the related order as paid.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe signs the webhook events it sends to your endpoints by including a `Stripe-Signature`
    header, with a signature in each event. By checking the Stripe signature, you
    can verify that events were sent by Stripe and not by a third party. If you don’t
    check the signature, an attacker could send fake events to your webhooks intentionally.
    The Stripe SDK provides a method to verify signatures. We will use it to create
    a webhook that verifies the signature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new file to the `payment/` application directory and name it `webhooks.py`.
    Add the following code to the new `webhooks.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `@csrf_exempt` decorator is used to prevent Django from performing the **cross-site
    request forgery** (**CSRF**) validation that is done by default for all `POST`
    requests. We use the method `stripe.Webhook.construct_event()` of the `stripe`
    library to verify the event’s signature header. If the event’s payload or the
    signature is invalid, we return an HTTP `400 Bad Request` response. Otherwise,
    we return an HTTP `200 OK` response.
  prefs: []
  type: TYPE_NORMAL
- en: This is the basic functionality required to verify the signature and construct
    the event from the JSON payload. Now, we can implement the actions of the webhook
    endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code highlighted in bold to the `stripe_webhook` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the new code, we check whether the event received is `checkout.session.completed`.
    This event indicates that the checkout session has been successfully completed.
    If we receive this event, we retrieve the `session` object and check whether the
    session `mode` is `payment` because this is the expected mode for one-off payments.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we get the `client_reference_id` attribute that we used when we created
    the checkout session and use the Django ORM to retrieve the `Order` object with
    the given `id`. If the order does not exist, we raise an HTTP `404` exception.
    Otherwise, we mark the order as paid with `order.paid = True`, and we save the
    order in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `urls.py` file of the `payment` application and add the following
    code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We have imported the `webhooks` module and added the URL pattern for the Stripe
    webhook.
  prefs: []
  type: TYPE_NORMAL
- en: Testing webhook notifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To test webhooks, you need to install the Stripe CLI. The Stripe CLI is a developer
    tool that allows you to test and manage your integration with Stripe directly
    from your shell. You will find installation instructions at [https://stripe.com/docs/stripe-cli#install](https://stripe.com/docs/stripe-cli#install).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using macOS or Linux, you can install the Stripe CLI with Homebrew
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If you are using Windows, or you are using macOS or Linux without Homebrew,
    download the latest Stripe CLI release for macOS, Linux, or Windows from [https://github.com/stripe/stripe-cli/releases/latest](https://github.com/stripe/stripe-cli/releases/latest)
    and unzip the file. If you are using Windows, run the unzipped `.exe` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing the Stripe CLI, run the following command from a shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Press *Enter* or open the URL in your browser. You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_09_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.21: The Stripe CLI pairing screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the pairing code in the Stripe CLI matches the one shown on the
    website and click on **Allow access**. You will see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B21088_09_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.22: The Stripe CLI pairing confirmation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run the following command from your shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We use this command to tell Stripe to listen to events and forward them to our
    localhost. We use port `8000`, where the Django development server is running,
    and the path `/payment/webhook/`, which matches the URL pattern of our webhook.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see the webhook secret. Check that the webhook signing secret
    matches the `STRIPE_WEBHOOK_SECRET` setting in the `settings.py` file of your
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open [https://dashboard.stripe.com/test/webhooks](https://dashboard.stripe.com/test/webhooks)
    in your browser. You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.23: The Stripe Webhooks page'
  prefs: []
  type: TYPE_NORMAL
- en: Under **Local listeners**, you will see the local listener that we created.
  prefs: []
  type: TYPE_NORMAL
- en: In a production environment, the Stripe CLI is not needed. Instead, you would
    need to add a hosted webhook endpoint using the URL of your hosted application.
  prefs: []
  type: TYPE_NORMAL
- en: Open `http://127.0.0.1:8000/` in your browser, add some products to the shopping
    cart, and complete the checkout process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the shell where you are running the Stripe CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the different events that have been sent by Stripe to the local
    webhook endpoint. The events might be in a different order than above. Stripe
    doesn’t guarantee the delivery of events in the order in which they are generated.
    Let’s review the events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`payment_intent.created`: The payment intent has been created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`payment_intent.succeeded`: The payment intent succeeded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`charge.succeeded`: The charge associated with the payment intent succeeded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkout.session.completed`: The checkout session has been completed. This
    is the event that we use to mark the order as paid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `stripe_webhook` webhook returns an HTTP `200 OK` response to all of the
    requests sent by Stripe. However, we only process the event `checkout.session.completed`
    to mark the order related to the payment as paid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open `http://127.0.0.1:8000/admin/orders/order/` in your browser. The
    order should now be marked as paid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.24: An order marked as paid in the order list of the administration
    site'
  prefs: []
  type: TYPE_NORMAL
- en: Now, orders get automatically marked as paid with Stripe payment notifications.
    Next, you are going to learn how to reference Stripe payments in your shop orders.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing Stripe payments in orders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each Stripe payment has a unique identifier. We can use the payment ID to associate
    each order with its corresponding Stripe payment. We will add a new field to the
    `Order` model of the `orders` application so that we can reference the related
    payment by its ID. This will allow us to link each order with the related Stripe
    transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of the `orders` application and add the following
    field to the `Order` model. The new field is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s sync this field with the database. Use the following command to generate
    the database migrations for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the migration to the database with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see output that ends with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The model changes are now synced with the database. Now, you will be able to
    store the Stripe payment ID for each order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `stripe_webhook` function in the `webhooks.py` file of the payment
    application and add the following lines highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: With this change, when receiving a webhook notification for a completed checkout
    session, the payment intent ID is stored in the `stripe_id` field of the `Order`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/` in your browser, add some products to the shopping
    cart, and complete the checkout process. Then, access `http://127.0.0.1:8000/admin/orders/order/`
    in your browser and click on the latest order ID to edit it. The `stripe_id` field
    should contain the payment intent ID, as shown in *Figure 9.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.25: The Stripe id field with the payment intent ID'
  prefs: []
  type: TYPE_NORMAL
- en: Great! We have successfully referenced Stripe payments in orders. Now, we can
    add Stripe payment IDs to the order list on the administration site. We can also
    include a link to each payment ID to see the payment details in the Stripe dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of the `orders` application and add the following
    code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We have added the new `get_stripe_url()` method to the `Order` model. This method
    is used to return the Stripe dashboard’s URL for the payment associated with the
    order. If no payment ID is stored in the `stripe_id` field of the `Order` object,
    an empty string is returned. Otherwise, the URL for the payment in the Stripe
    dashboard is returned. We check if the string `_test_` is present in the `STRIPE_SECRET_KEY`
    setting to discriminate the production environment from the test environment.
    Payments in the production environment follow the pattern `https://dashboard.stripe.com/payments/{id}`,
    whereas test payments follow the pattern `https://dashboard.stripe.com/payments/test/{id}`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add a link to each `Order` object on the list display page of the administration
    site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `admin.py` file of the `orders` application and add the following
    code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `order_stripe_payment()` function takes an `Order` object as an argument
    and returns an HTML link with the payment URL in Stripe. Django escapes HTML output
    by default. We use the `mark_safe` function to avoid auto-escaping.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid using `mark_safe` on input that has come from the user to avoid **Cross-Site
    Scripting** (**XSS**). XSS enables attackers to inject client-side scripts into
    web content viewed by other users.
  prefs: []
  type: TYPE_NORMAL
- en: Open `http://127.0.0.1:8000/admin/orders/order/` in your browser. You will see
    a new column named **STRIPE PAYMENT**. You will see the related Stripe payment
    ID for the latest order. If you click on the payment ID, you will be taken to
    the payment URL in Stripe, where you can find the additional payment details.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.26: The Stripe payment ID for an Order object in the administration
    site'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you automatically store Stripe payment IDs in orders when receiving payment
    notifications. You have successfully integrated Stripe into your project.
  prefs: []
  type: TYPE_NORMAL
- en: Going live
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have tested your integration, you can apply for a production Stripe
    account. When you are ready to move into production, remember to replace your
    test Stripe credentials with the live ones in the `settings.py` file. You will
    also need to add a webhook endpoint for your hosted website at [https://dashboard.stripe.com/webhooks](https://dashboard.stripe.com/webhooks)
    instead of using the Stripe CLI. *Chapter 17*, *Going Live*, will teach you how
    to configure project settings for multiple environments.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting orders to CSV files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you might want to export the information contained in a model to
    a file so that you can import it into another system. One of the most widely used
    formats to export/import data is the **Comma-Separated Values** (**CSV**) format.
    A CSV file is a plain text file consisting of a number of records. There is usually
    one record per line and some delimiter character, usually a literal comma, separating
    the record fields. We are going to customize the administration site to be able
    to export orders to CSV files.
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom actions to the administration site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django offers a wide range of options to customize the administration site.
    You are going to modify the object list view to include a custom administration
    action. You can implement custom administration actions to allow staff users to
    apply actions to multiple elements at once in the change list view.
  prefs: []
  type: TYPE_NORMAL
- en: 'An administration action works as follows: a user selects objects from the
    administration object list page with checkboxes, selects an action to perform
    on all of the selected items, and then executes the actions. *Figure 9.27* shows
    where the actions are located on the administration site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B21088_09_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.27: The drop-down menu for Django administration actions'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a custom action by writing a regular function that receives
    the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The current `ModelAdmin` being displayed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current request object as an `HttpRequest` instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A QuerySet for the objects selected by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This function will be executed when the action is triggered from the administration
    site.
  prefs: []
  type: TYPE_NORMAL
- en: You are going to create a custom administration action to download a list of
    orders as a CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `admin.py` file of the `orders` application and add the following
    code before the `OrderAdmin` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, you perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: You create an instance of `HttpResponse`, specifying the `text/csv` content
    type, to tell the browser that the response has to be treated as a CSV file. You
    also add a `Content-Disposition` header to indicate that the HTTP response contains
    an attached file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You create a CSV `writer` object that will write to the `response` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You get the `model` fields dynamically using the `get_fields()` method of the
    model’s `_meta` options. You exclude many-to-many and one-to-many relationships.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You write a header row, including the field names.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You iterate over the given QuerySet and write a row for each object returned
    by the QuerySet. You take care of formatting `datetime` objects because the output
    value for CSV has to be a string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You customize the display name for the action in the action’s drop-down element
    of the administration site by setting a `short_description` attribute on the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have created a generic administration action that can be added to any `ModelAdmin`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the new `export_to_csv` administration action to the `OrderAdmin`
    class, as follows. The new code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the development server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/admin/orders/order/` in your browser. The resulting
    administration action should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.28: Using the custom Export to CSV administration action'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select some orders, choose the **Export to CSV** action from the select box,
    and then click the **Go** button. Your browser will download the generated CSV
    file named `order.csv`. Open the downloaded file using a text editor. You should
    see content with the following format, including a header row and a row for each
    `Order` object you selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, creating administration actions is pretty straightforward. You
    can learn more about generating CSV files with Django at [https://docs.djangoproject.com/en/5.0/howto/outputting-csv/](https://docs.djangoproject.com/en/5.0/howto/outputting-csv/).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add more advanced import/export functionalities to your administration
    site, you can use the third-party application `django-import-export`. You can
    find its documentation at [https://django-import-export.readthedocs.io/en/latest/](https://django-import-export.readthedocs.io/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: The example we have implemented works well for small to medium datasets. Given
    that the export occurs within an HTTP request, very large datasets could lead
    to server timeouts if the server closes the connection before the export process
    concludes. To circumvent this, you can generate exports asynchronously using Celery,
    with the `django-import-export-celery` application. This project is available
    at [https://github.com/auto-mat/django-import-export-celery](https://github.com/auto-mat/django-import-export-celery).
  prefs: []
  type: TYPE_NORMAL
- en: Next, you are going to customize the administration site further by creating
    a custom administration view.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the administration site with custom views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you may want to customize the administration site beyond what is
    possible by configuring `ModelAdmin`, creating administration actions, and overriding
    administration templates. You might want to implement additional functionalities
    that are not available in existing administration views or templates. If this
    is the case, you need to create a custom administration view. With a custom view,
    you can build any functionality you want; you just have to make sure that only
    staff users can access your view and that you maintain the administration look
    and feel by making your template extend an administration template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a custom view to display information about an order. Edit the
    `views.py` file of the `orders` application and add the following code highlighted
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The `staff_member_required` decorator checks that both the `is_active` and `is_staff`
    fields of the user requesting the page are set to `True`. In this view, you get
    the `Order` object with the given ID and render a template to display the order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, edit the `urls.py` file of the `orders` application and add the following
    URL pattern highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the following file structure inside the `templates/` directory of the
    `orders` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `detail.html` template and add the following content to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that no template tag is split across multiple lines.
  prefs: []
  type: TYPE_NORMAL
- en: This is the template to display the details of an order on the administration
    site. This template extends the `admin/base_site.html` template of Django’s administration
    site, which contains the main HTML structure and CSS styles. You use the blocks
    defined in the parent template to include your own content. You display information
    about the order and the items bought.
  prefs: []
  type: TYPE_NORMAL
- en: When you want to extend an administration template, you need to know its structure
    and identify existing blocks. You can find all administration templates at [https://github.com/django/django/tree/5.0/django/contrib/admin/templates/admin](https://github.com/django/django/tree/5.0/django/contrib/admin/templates/admin).
  prefs: []
  type: TYPE_NORMAL
- en: You can also override an administration template if you need to. To do so, copy
    a template into your `templates/` directory, keeping the same relative path and
    filename. Django’s administration site will use your custom template instead of
    the default one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let’s add a link to each `Order` object on the list display page of
    the administration site. Edit the `admin.py` file of the `orders` application
    and add the following code to it, above the `OrderAdmin` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This is a function that takes an `Order` object as an argument and returns an
    HTML link for the `admin_order_detail` URL. Django escapes HTML output by default.
    You have to use the `mark_safe` function to avoid auto-escaping.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, edit the `OrderAdmin` class to display the link, as follows. The new
    code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the development server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/admin/orders/order/` in your browser. Each row
    includes a **View**link, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.29: The View link included in each order row'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **View** link for any order to load the custom order detail page.
    You should see a page like the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.30: The custom order detail page on the administration site'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have created the product detail page, you will learn how to generate
    order invoices in the PDF format dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Generating PDF invoices dynamically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have a complete checkout and payment system, you can generate a
    PDF invoice for each order. There are several Python libraries to generate PDF
    files. One popular library to generate PDFs with Python code is ReportLab. You
    can find information about how to output PDF files with ReportLab at [https://docs.djangoproject.com/en/5.0/howto/outputting-pdf/](https://docs.djangoproject.com/en/5.0/howto/outputting-pdf/).
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, you will have to add custom styles and formatting to your PDF
    files. You will find it more convenient to render an HTML template and convert
    it into a PDF file, keeping Python away from the presentation layer. You are going
    to follow this approach and use a module to generate PDF files with Django. You
    will use WeasyPrint, which is a Python library that can generate PDF files from
    HTML templates.
  prefs: []
  type: TYPE_NORMAL
- en: Installing WeasyPrint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, install WeasyPrint’s dependencies for your operating system from [https://doc.courtbouillon.org/weasyprint/stable/first_steps.html](https://doc.courtbouillon.org/weasyprint/stable/first_steps.html).
    Then, install WeasyPrint via `pip` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Creating a PDF template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need an HTML document as input for WeasyPrint. You are going to create an
    HTML template, render it using Django, and pass it to WeasyPrint to generate the
    PDF file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new template file inside the `templates/orders/order/` directory of
    the `orders` application and name it `pdf.html`. Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: This is the template for the PDF invoice. In this template, you display all
    order details and an HTML `<table>` element, including the products. You also
    include a message to display whether the order has been paid.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering PDF files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You are going to create a view to generate PDF invoices for existing orders
    using the administration site. Edit the `views.py` file inside the `orders` application
    directory and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This is the view to generate a PDF invoice for an order. You use the `staff_member_required`
    decorator to make sure only staff users can access this view.
  prefs: []
  type: TYPE_NORMAL
- en: You get the `Order` object with the given ID and use the `render_to_string()`
    function provided by Django to render `orders/order/pdf.html`. The rendered HTML
    is saved in the `html` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you generate a new `HttpResponse` object, specifying the `application/pdf`
    content type and including the `Content-Disposition` header to specify the filename.
    You use WeasyPrint to generate a PDF file from the rendered HTML code and write
    the file to the `HttpResponse` object.
  prefs: []
  type: TYPE_NORMAL
- en: You use the static file `css/pdf.css` to add CSS styles to the generated PDF
    file. To locate the file, you use the `finders()` function of the `staticfiles`
    module. Finally, you return the generated response.
  prefs: []
  type: TYPE_NORMAL
- en: If you are missing the CSS styles, remember to copy the static files located
    in the `static/` directory of the `shop` application to the same location of your
    project.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the contents of the directory at [https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter09/myshop/shop/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter09/myshop/shop/static).
  prefs: []
  type: TYPE_NORMAL
- en: 'Since you need to use the `STATIC_ROOT` setting, you have to add it to your
    project. This is the project’s path where static files reside. Edit the `settings.py`
    file of the `myshop` project and add the following setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see output that ends like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The `collectstatic` command copies all static files from your applications into
    the directory defined in the `STATIC_ROOT` setting. This allows each application
    to provide its own static files using a `static/` directory containing them. You
    can also provide additional static file sources in the `STATICFILES_DIRS` setting.
    All of the directories specified in the `STATICFILES_DIRS` list will also be copied
    to the `STATIC_ROOT` directory when `collectstatic` is executed. Whenever you
    execute `collectstatic` again, you will be asked if you want to override the existing
    static files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `urls.py` file inside the `orders` application directory and add the
    following URL pattern highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can edit the administration list display page for the `Order` model
    to add a link to the PDF file for each result. Edit the `admin.py` file inside
    the `orders` application and add the following code above the `OrderAdmin` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: If you specify a `short_description` attribute for your callable, Django will
    use it for the name of the column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `order_pdf` to the `list_display` attribute of the `OrderAdmin` class,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure the development server is running. Open `http://127.0.0.1:8000/admin/orders/order/`
    in your browser. Each row should now include a **PDF** link, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.31: The PDF link included in each order row'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **PDF** link for any order. You should see a generated PDF file
    like the following one for orders that have not been paid yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.32: The PDF invoice for an unpaid order'
  prefs: []
  type: TYPE_NORMAL
- en: 'For paid orders, you will see the following PDF file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_09_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.33: The PDF invoice for a paid order'
  prefs: []
  type: TYPE_NORMAL
- en: Sending PDF files by email
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a payment is successful, you will send an automatic email to your customer
    including the generated PDF invoice. You will create an asynchronous task to perform
    this action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside the `payment` application directory and name it `tasks.py`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: You define the `payment_completed` task by using the `@shared_task` decorator.
    In this task, you use the `EmailMessage` class provided by Django to create an
    `email` object. Then, you render the template in the `html` variable. You generate
    the PDF file from the rendered template and output it to a `BytesIO` instance,
    which is an in-memory bytes buffer. Then, you attach the generated PDF file to
    the `EmailMessage` object using the `attach()` method, including the contents
    of the `out` buffer. Finally, you send the email.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember to set up your **Simple Mail Transfer Protocol** (**SMTP**) settings
    in the `settings.py` file of the project to send emails. You can refer to *Chapter
    2*, *Enhancing Your Blog with Advanced Features*, to see a working example of
    an SMTP configuration. If you don’t want to set up email settings, you can tell
    Django to write emails to the console by adding the following setting to the `settings.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Let’s add the `payment_completed` task to the webhook endpoint that handles
    payment completion events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `webhooks.py` file of the `payment` application and modify it to make
    it look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The `payment_completed` task is queued by calling its `delay()` method. The
    task will be added to the queue and executed asynchronously by a Celery worker
    as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can complete a new checkout process in order to receive the PDF invoice
    in your email. If you are using the `console.EmailBackend` for your email backend,
    in the shell where you are running Celery, you will be able to see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: This output shows that the email contains an attachment. You have learned how
    to attach files to emails and send them programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have completed the Stripe integration and have added valuable
    functionality to your shop.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you integrated the Stripe payment gateway into your project
    and created a webhook endpoint to receive payment notifications. You built a custom
    administration action to export orders to CSV. You also customized the Django
    administration site using custom views and templates. Finally, you learned how
    to generate PDF files with WeasyPrint and how to attach them to emails.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will teach you how to create a coupon system using Django sessions,
    and you will build a product recommendation engine with Redis.
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter09](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter09)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe website: [https://www.stripe.com/](https://www.stripe.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe Checkout documentation: [https://stripe.com/docs/payments/checkout](https://stripe.com/docs/payments/checkout)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating a Stripe account: [https://dashboard.stripe.com/register](https://dashboard.stripe.com/register)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe account settings: [https://dashboard.stripe.com/settings/account](https://dashboard.stripe.com/settings/account)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe Python library: [https://github.com/stripe/stripe-python](https://github.com/stripe/stripe-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe test API keys: [https://dashboard.stripe.com/test/apikeys](https://dashboard.stripe.com/test/apikeys)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe API keys documentation: [https://stripe.com/docs/keys](https://stripe.com/docs/keys)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe API version 2024-04-10 release: [https://stripe.com/docs/upgrades#2024-04-10](https://stripe.com/docs/api/events/types)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe checkout session modes: [https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-mode](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-mode)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Building absolute URIs with Django: [https://docs.djangoproject.com/en/5.0/ref/request-response/#django.http.HttpRequest.build_absolute_uri](https://docs.djangoproject.com/en/5.0/ref/request-response/#django.http.HttpRequest.build_absolute_uri)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating Stripe sessions: [https://stripe.com/docs/api/checkout/sessions/create](https://stripe.com/docs/api/checkout/sessions/create)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe-supported currencies: [https://stripe.com/docs/currencies](https://stripe.com/docs/currencies)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe Payments dashboard: [https://dashboard.stripe.com/test/payments](https://dashboard.stripe.com/test/payments)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Credit cards for testing payments with Stripe: [https://stripe.com/docs/testing](https://stripe.com/docs/testing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe webhooks: [https://dashboard.stripe.com/test/webhooks](https://dashboard.stripe.com/test/webhooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Types of events sent by Stripe: [https://stripe.com/docs/api/events/types](https://stripe.com/docs/api/events/types)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing the Stripe CLI: [https://stripe.com/docs/stripe-cli#install](https://stripe.com/docs/stripe-cli#install
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Latest Stripe CLI release: [https://github.com/stripe/stripe-cli/releases/latest](https://github.com/stripe/stripe-cli/releases/latest)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Generating CSV files with Django: [https://docs.djangoproject.com/en/5.0/howto/outputting-csv/](https://docs.djangoproject.com/en/5.0/howto/outputting-csv/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`django-import-export` application: [https://django-import-export.readthedocs.io/en/latest/](https://django-import-export.readthedocs.io/en/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`django-import-export-celery` application: [https://github.com/auto-mat/django-import-export-celery](https://github.com/auto-mat/django-import-export-celery)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django administration templates: [https://github.com/django/django/tree/5.0/django/contrib/admin/templates/admin](https://github.com/django/django/tree/5.0/django/contrib/admin/templates/admin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Outputting PDF files with ReportLab: [https://docs.djangoproject.com/en/5.0/howto/outputting-pdf/](https://docs.djangoproject.com/en/5.0/howto/outputting-pdf/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing WeasyPrint: [https://doc.courtbouillon.org/weasyprint/stable/first_steps.html](https://doc.courtbouillon.org/weasyprint/stable/first_steps.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Static files for this chapter: [https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter09/myshop/shop/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter09/myshop/shop/static)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
