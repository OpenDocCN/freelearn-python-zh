["```py\n    # movies/management/commands/import_movies_from_csv.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import csv\n    from django.core.management.base import BaseCommand\n    from movies.models import Movie\n\n    SILENT, NORMAL, VERBOSE, VERY_VERBOSE = 0, 1, 2, 3\n\n    class Command(BaseCommand):\n        help = (\n            \"Imports movies from a local CSV file. \"\n            \"Expects title, URL, and release year.\"\n        )\n\n        def add_arguments(self, parser):\n            # Positional arguments\n            parser.add_argument(\n                \"file_path\",\n                nargs=1,\n                type=unicode,\n            )\n\n        def handle(self, *args, **options):\n            verbosity = options.get(\"verbosity\", NORMAL)\n            file_path = options[\"file_path\"][0]\n\n            if verbosity >= NORMAL:\n                self.stdout.write(\"=== Movies imported ===\")\n\n            with open(file_path) as f:\n                reader = csv.reader(f)\n                for rownum, (title, url, release_year) in \\\n                enumerate(reader):\n                    if rownum == 0:\n                        # let's skip the column captions\n                        continue\n                    movie, created = \\\n                    Movie.objects.get_or_create(\n                        title=title,\n                        url=url,\n                        release_year=release_year,\n                    )\n                    if verbosity >= NORMAL:\n                        self.stdout.write(\"{}. {}\".format(\n                            rownum, movie.title\n                        ))\n    ```", "```py\n    (myproject_env)$ python manage.py import_movies_from_csv \\\n    data/movies.csv\n\n    ```", "```py\n(myproject_env)$ python manage.py help import_movies_from_csv\n\n```", "```py\n(myproject_env)$ python manage.py import_movies_from_csv \\\ndata/movies.csv --verbosity=0\n\n```", "```py\n(project_env)$ pip install xlrd\n\n```", "```py\n    # movies/management/commands/import_movies_from_xls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import xlrd\n    from django.utils.six.moves import range\n    from django.core.management.base import BaseCommand\n    from movies.models import Movie\n\n    SILENT, NORMAL, VERBOSE, VERY_VERBOSE = 0, 1, 2, 3\n\n    class Command(BaseCommand):\n        help = (\n            \"Imports movies from a local XLS file. \"\n            \"Expects title, URL, and release year.\"\n        )\n\n        def add_arguments(self, parser):\n            # Positional arguments\n            parser.add_argument(\n                \"file_path\",\n                nargs=1,\n                type=unicode,\n            )\n\n        def handle(self, *args, **options):\n            verbosity = options.get(\"verbosity\", NORMAL)\n            file_path = options[\"file_path\"][0]\n\n            wb = xlrd.open_workbook(file_path)\n            sh = wb.sheet_by_index(0)\n\n            if verbosity >= NORMAL:\n                self.stdout.write(\"=== Movies imported ===\")\n            for rownum in range(sh.nrows):\n                if rownum == 0:\n                    # let's skip the column captions\n                    continue\n                (title, url, release_year) = \\\n                    sh.row_values(rownum)\n                movie, created = Movie.objects.get_or_create(\n                    title=title,\n                    url=url,\n                    release_year=release_year,\n                )\n                if verbosity >= NORMAL:\n                    self.stdout.write(\"{}. {}\".format(\n                        rownum, movie.title\n                    ))\n    ```", "```py\n    (myproject_env)$ python manage.py import_movies_from_xls \\\n    data/movies.xls\n\n    ```", "```py\n    (myproject_env)$ pip install requests\n\n    ```", "```py\n    {\n      \"tracks\":{\n     \"track\":[\n          {\n     \"name\":\"Billie Jean\",\n            \"duration\":\"293\",\n            \"mbid\":\"f980fc14-e29b-481d-ad3a-5ed9b4ab6340\",\n            \"url\":\"http://www.last.fm/music/Michael+Jackson/_/Billie+Jean\",\n            \"streamable\":{\n              \"#text\":\"0\",\n              \"fulltrack\":\"0\"\n            },\n     \"artist\":{\n     \"name\":\"Michael Jackson\",\n              \"mbid\":\"f27ec8db-af05-4f36-916e-3d57f91ecf5e\",\n              \"url\":\"http://www.last.fm/music/Michael+Jackson\"\n            },\n            \"image\":[\n              {\n                \"#text\":\"http://img2-ak.lst.fm/i/u/34s/114a4599f3bd451ca915f482345bc70f.png\",\n                \"size\":\"small\"\n              },\n     {\n     \"#text\":\"http://img2-ak.lst.fm/i/u/64s/114a4599f3bd451ca915f482345bc70f.png\",\n     \"size\":\"medium\"\n     },\n              {\n                \"#text\":\"http://img2-ak.lst.fm/i/u/174s/114a4599f3bd451ca915f482345bc70f.png\",\n                \"size\":\"large\"\n              },\n              {\n                \"#text\":\"http://img2-ak.lst.fm/i/u/300x300/114a4599f3bd451ca915f482345bc70f.png\",\n                \"size\":\"extralarge\"\n              }\n            ],\n            \"@attr\":{\n              \"rank\":\"1\"\n            }\n          },\n          ...\n        ],\n        \"@attr\":{\n          \"tag\":\"disco\",\n          \"page\":\"1\",\n          \"perPage\":\"50\",\n     \"totalPages\":\"26205\",\n          \"total\":\"1310249\"\n        }\n      }\n    }\n    ```", "```py\n    # music/models.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import os\n    from django.utils.translation import ugettext_lazy as _\n    from django.db import models\n    from django.utils.text import slugify\n    from django.utils.encoding import \\\n        python_2_unicode_compatible\n\n    def upload_to(instance, filename):\n        filename_base, filename_ext = \\\n            os.path.splitext(filename)\n        return \"tracks/%s--%s%s\" % (\n            slugify(instance.artist),\n            slugify(instance.name),\n            filename_ext.lower(),\n        )\n\n    @python_2_unicode_compatible\n    class Track(models.Model):\n        name = models.CharField(_(\"Name\"), max_length=250)\n        artist = models.CharField(_(\"Artist\"), max_length=250)\n        url = models.URLField(_(\"URL\"))\n        image = models.ImageField(_(\"Image\"),\n            upload_to=upload_to, blank=True, null=True)\n\n        class Meta:\n            verbose_name = _(\"Track\")\n            verbose_name_plural = _(\"Tracks\")\n\n        def __str__(self):\n            return \"%s - %s\" % (self.artist, self.name)\n    ```", "```py\n    # music/management/commands/import_music_from_lastfm_as_json.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import os\n    import requests\n    from StringIO import StringIO\n    from django.utils.six.moves import range\n    from django.core.management.base import BaseCommand\n    from django.utils.encoding import force_text\n    from django.conf import settings\n    from django.core.files import File\n    from music.models import Track\n\n    SILENT, NORMAL, VERBOSE, VERY_VERBOSE = 0, 1, 2, 3\n\n    class Command(BaseCommand):\n        help = \"Imports top tracks from last.fm as XML.\"\n\n        def add_arguments(self, parser):\n            # Named (optional) arguments\n            parser.add_argument(\n                \"--max_pages\",\n                type=int,\n                default=0,\n            )\n\n        def handle(self, *args, **options):\n            self.verbosity = options.get(\"verbosity\", NORMAL)\n            max_pages = options[\"max_pages\"]\n\n            params = {\n                \"method\": \"tag.gettoptracks\",\n                \"tag\": \"disco\",\n                \"api_key\": settings.LAST_FM_API_KEY,\n                \"format\": \"json\",\n            }\n\n            r = requests.get(\n                \"http://ws.audioscrobbler.com/2.0/\",\n                params=params\n            )\n\n            response_dict = r.json()\n            total_pages = int(\n                response_dict[\"tracks\"][\"@attr\"][\"totalPages\"]\n            )\n            if max_pages > 0:\n                total_pages = max_pages\n\n            if self.verbosity >= NORMAL:\n                self.stdout.write(\"=== Tracks imported ===\")\n\n            self.save_page(response_dict)\n            for page_number in range(2, total_pages + 1):\n                params[\"page\"] = page_number\n                r = requests.get(\n                    \"http://ws.audioscrobbler.com/2.0/\",\n                    params=params\n                )\n                response_dict = r.json()\n                self.save_page(response_dict)\n    ```", "```py\n        def save_page(self, d):\n            for track_dict in d[\"tracks\"][\"track\"]:\n                track, created = Track.objects.get_or_create(\n                    name=force_text(track_dict[\"name\"]),\n                    artist=force_text(\n                        track_dict[\"artist\"][\"name\"]\n                    ),\n                    url=force_text(track_dict[\"url\"]),\n                )\n                image_dict = track_dict.get(\"image\", None)\n                if created and image_dict:\n                    image_url = image_dict[1][\"#text\"]\n                    image_response = requests.get(image_url)\n                    track.image.save(\n                        os.path.basename(image_url),\n                        File(StringIO(image_response.content))\n                    )\n                if self.verbosity >= NORMAL:\n                    self.stdout.write(\" - {} - {}\".format(\n                        track.artist, track.name\n                    ))\n    ```", "```py\n    (myproject_env)$ python manage.py \\\n    import_music_from_lastfm_as_json --max_pages=3\n\n    ```", "```py\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <lfm status=\"ok\">\n      <tracks tag=\"disco\" page=\"1\" perPage=\"50\" totalPages=\"26205\" total=\"1310249\">\n     <track rank=\"1\">\n     <name>Billie Jean</name>\n          <duration>293</duration>\n          <mbid>f980fc14-e29b-481d-ad3a-5ed9b4ab6340</mbid>\n          <url>http://www.last.fm/music/Michael+Jackson/_/Billie+Jean</url>\n          <streamable fulltrack=\"0\">0</streamable>\n     <artist>\n     <name>Michael Jackson</name>\n            <mbid>f27ec8db-af05-4f36-916e-3d57f91ecf5e</mbid>\n            <url>http://www.last.fm/music/Michael+Jackson</url>\n          </artist>\n          <image size=\"small\">http://img2-ak.lst.fm/i/u/34s/114a4599f3bd451ca915f482345bc70f.png</image>\n     <image size=\"medium\">http://img2-ak.lst.fm/i/u/64s/114a4599f3bd451ca915f482345bc70f.png</image>\n          <image size=\"large\">http://img2-ak.lst.fm/i/u/174s/114a4599f3bd451ca915f482345bc70f.png</image>\n          <image size=\"extralarge\">http://img2-ak.lst.fm/i/u/300x300/114a4599f3bd451ca915f482345bc70f.png</image>\n        </track>\n        ...\n      </tracks>\n    </lfm>\n    ```", "```py\n    # music/management/commands/import_music_from_lastfm_as_xml.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import os\n    import requests\n    from xml.etree import ElementTree\n    from StringIO import StringIO\n    from django.utils.six.moves import range\n    from django.core.management.base import BaseCommand\n    from django.utils.encoding import force_text\n    from django.conf import settings\n    from django.core.files import File\n    from music.models import Track\n\n    SILENT, NORMAL, VERBOSE, VERY_VERBOSE = 0, 1, 2, 3\n\n    class Command(BaseCommand):\n        help = \"Imports top tracks from last.fm as XML.\"\n\n        def add_arguments(self, parser):\n            # Named (optional) arguments\n            parser.add_argument(\n                \"--max_pages\",\n                type=int,\n                default=0,\n            )\n\n        def handle(self, *args, **options):\n            self.verbosity = options.get(\"verbosity\", NORMAL)\n            max_pages = options[\"max_pages\"]\n\n            params = {\n                \"method\": \"tag.gettoptracks\",\n                \"tag\": \"disco\",\n                \"api_key\": settings.LAST_FM_API_KEY,\n                \"format\": \"xml\",\n            }\n\n            r = requests.get(\n                \"http://ws.audioscrobbler.com/2.0/\",\n                params=params\n            )\n\n            root = ElementTree.fromstring(r.content)\n            total_pages = int(\n                root.find(\"tracks\").attrib[\"totalPages\"]\n            )\n            if max_pages > 0:\n                total_pages = max_pages\n\n            if self.verbosity >= NORMAL:\n                self.stdout.write(\"=== Tracks imported ===\")\n\n            self.save_page(root)\n            for page_number in range(2, total_pages + 1):\n                params[\"page\"] = page_number\n                r = requests.get(\n                    \"http://ws.audioscrobbler.com/2.0/\",\n                    params=params\n                )\n                root = ElementTree.fromstring(r.content)\n                self.save_page(root)\n    ```", "```py\n        def save_page(self, root):\n            for track_node in root.findall(\"tracks/track\"):\n                track, created = Track.objects.get_or_create(\n                    name=force_text(\n                        track_node.find(\"name\").text\n                    ),\n                    artist=force_text(\n                        track_node.find(\"artist/name\").text\n                    ),\n                    url=force_text(\n                        track_node.find(\"url\").text\n                    ),\n                )\n                image_node = track_node.find(\n                    \"image[@size='medium']\"\n                )\n                if created and image_node is not None:\n                    image_response = \\\n                        requests.get(image_node.text)\n                    track.image.save(\n                        os.path.basename(image_node.text),\n                        File(StringIO(image_response.content))\n                    )\n                if self.verbosity >= NORMAL:\n                    self.stdout.write(\" - {} - {}\".format(\n                        track.artist, track.name\n                    ))\n    ```", "```py\n    (myproject_env)$ python manage.py \\\n    import_music_from_lastfm_as_xml --max_pages=3\n\n    ```", "```py\n    # bulletin_board/models.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from django.core.urlresolvers import reverse\n    from django.utils.encoding import \\\n        python_2_unicode_compatible\n    from utils.models import CreationModificationDateMixin\n    from utils.models import UrlMixin\n\n    TYPE_CHOICES = (\n        (\"searching\", _(\"Searching\")),\n        (\"offering\", _(\"Offering\")),\n    )\n\n    @python_2_unicode_compatible\n    class Category(models.Model):\n        title = models.CharField(_(\"Title\"), max_length=200)\n\n        def __str__(self):\n            return self.title\n\n        class Meta:\n            verbose_name = _(\"Category\")\n            verbose_name_plural = _(\"Categories\")\n\n    @python_2_unicode_compatible\n    class Bulletin(CreationModificationDateMixin, UrlMixin):\n        bulletin_type = models.CharField(_(\"Type\"),\n            max_length=20, choices=TYPE_CHOICES)\n        category = models.ForeignKey(Category,\n            verbose_name=_(\"Category\"))\n\n        title = models.CharField(_(\"Title\"), max_length=255)\n        description = models.TextField(_(\"Description\"),\n            max_length=300)\n\n        contact_person = models.CharField(_(\"Contact person\"),\n            max_length=255)\n        phone = models.CharField(_(\"Phone\"), max_length=50,\n            blank=True)\n        email = models.CharField(_(\"Email\"), max_length=254,\n            blank=True)\n\n        image = models.ImageField(_(\"Image\"), max_length=255,\n            upload_to=\"bulletin_board/\", blank=True)\n\n        class Meta:\n            verbose_name = _(\"Bulletin\")\n            verbose_name_plural = _(\"Bulletins\")\n            ordering = (\"-created\",)\n\n        def __str__(self):\n            return self.title\n\n        def get_url_path(self):\n            try:\n                path = reverse(\n                    \"bulletin_detail\",\n                    kwargs={\"pk\": self.pk}\n                )\n            except:\n                # the apphook is not attached yet\n                return \"\"\n            else:\n                return path\n    ```", "```py\n    # bulletin_board/forms.py\n    # -*- coding: UTF-8 -*-\n    from django import forms\n    from django.utils.translation import ugettext_lazy as _\n    from models import Category, TYPE_CHOICES\n\n    class BulletinFilterForm(forms.Form):\n        bulletin_type = forms.ChoiceField(\n            label=_(\"Bulletin Type\"),\n            required=False,\n            choices=((\"\", \"---------\"),) + TYPE_CHOICES,\n        )\n        category = forms.ModelChoiceField(\n            label=_(\"Category\"),\n            required=False,\n            queryset=Category.objects.all(),\n        )\n    ```", "```py\n    # bulletin_board/feeds.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.contrib.syndication.views import Feed\n    from django.core.urlresolvers import reverse\n    from .models import Bulletin, TYPE_CHOICES\n    from .forms import BulletinFilterForm\n\n    class BulletinFeed(Feed):\n        description_template = \\\n            \"bulletin_board/feeds/bulletin_description.html\"\n\n        def get_object(self, request, *args, **kwargs):\n            form = BulletinFilterForm(data=request.REQUEST)\n            obj = {}\n            if form.is_valid():\n                obj = {\n                    \"bulletin_type\": \\\n                        form.cleaned_data[\"bulletin_type\"],\n                    \"category\": form.cleaned_data[\"category\"],\n                    \"query_string\": \\\n                        request.META[\"QUERY_STRING\"],\n                }\n            return obj\n\n        def title(self, obj):\n            t = \"My Website - Bulletin Board\"\n            # add type \"Searching\" or \"Offering\"\n            if obj.get(\"bulletin_type\", False):\n                tp = obj[\"bulletin_type\"]\n                t += \" - %s\" % dict(TYPE_CHOICES)[tp]\n            # add category\n            if obj.get(\"category\", False):\n                t += \" - %s\" % obj[\"category\"].title\n            return t\n\n        def link(self, obj):\n            if obj.get(\"query_string\", False):\n                return reverse(\"bulletin_list\") + \"?\" + \\\n                    obj[\"query_string\"]\n            return reverse(\"bulletin_list\")\n\n        def feed_url(self, obj):\n            if obj.get(\"query_string\", False):\n                return reverse(\"bulletin_rss\") + \"?\" + \\\n                    obj[\"query_string\"]\n            return reverse(\"bulletin_rss\")\n\n        def item_pubdate(self, item):\n            return item.created\n\n        def items(self, obj):\n            qs = Bulletin.objects.order_by(\"-created\")\n            if obj.get(\"bulletin_type\", False):\n                qs = qs.filter(\n                    bulletin_type=obj[\"bulletin_type\"],\n                ).distinct()\n            if obj.get(\"category\", False):\n                qs = qs.filter(\n                    category=obj[\"category\"],\n                ).distinct()\n            return qs[:30]\n    ```", "```py\n    {# templates/bulletin_board/feeds/bulletin_description.html #}\n    {% if obj.image %}\n        <p><a href=\"{{ obj.get_url }}\"><img src=\"img/{{ request.META.HTTP_HOST }}{{ obj.image.url }}\" alt=\"\" /></a></p>\n    {% endif %}\n    <p>{{ obj.description }}</p>\n    ```", "```py\n    # templates/bulletin_board/urls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf.urls import *\n    from .feeds import BulletinFeed\n\n    urlpatterns = patterns(\"bulletin_board.views\",\n        url(r\"^$\", \"bulletin_list\", name=\"bulletin_list\"),\n        url(r\"^(?P<bulletin_id>[0-9]+)/$\", \"bulletin_detail\",\n             name=\"bulletin_detail\"),\n        url(r\"^rss/$\", BulletinFeed(), name=\"bulletin_rss\"),\n    )\n    ```", "```py\n    <a href=\"{% url \"bulletin_rss\" %}?{{ request.META.QUERY_STRING }}\">RSS Feed</a>\n    ```", "```py\n(myproject_env)$ pip install django-tastypie\n\n```", "```py\n    # bulletin_board/api.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from tastypie.resources import ModelResource\n    from tastypie.resources import ALL, ALL_WITH_RELATIONS\n    from tastypie.authentication import ApiKeyAuthentication\n    from tastypie.authorization import DjangoAuthorization\n    from tastypie import fields\n    from .models import Category, Bulletin\n\n    class CategoryResource(ModelResource):\n        class Meta:\n            queryset = Category.objects.all()\n            resource_name = \"categories\"\n            fields = [\"title\"]\n            allowed_methods = [\"get\"]\n            authentication = ApiKeyAuthentication()\n            authorization = DjangoAuthorization()\n            filtering = {\n                \"title\": ALL,\n            }\n\n    class BulletinResource(ModelResource):\n        category = fields.ForeignKey(CategoryResource,\n            \"category\", full=True)\n\n        class Meta:\n            queryset = Bulletin.objects.all()\n            resource_name = \"bulletins\"\n            fields = [\n                \"bulletin_type\", \"category\", \"title\",\n                \"description\", \"contact_person\", \"phone\",\n                \"email\", \"image\"\n            ]\n            allowed_methods = [\"get\"]\n            authentication = ApiKeyAuthentication()\n            authorization = DjangoAuthorization()\n            filtering = {\n                \"bulletin_type\": ALL,\n                \"title\": ALL,\n                \"category\": ALL_WITH_RELATIONS,\n            }\n    ```", "```py\n    # myproject/urls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf.urls import patterns, include, url\n    from django.conf import settings\n    from django.conf.urls.static import static\n    from django.contrib.staticfiles.urls import \\\n        staticfiles_urlpatterns\n\n    from django.contrib import admin\n    admin.autodiscover()\n\n    from tastypie.api import Api\n    from bulletin_board.api import CategoryResource\n    from bulletin_board.api import BulletinResource\n\n    v1_api = Api(api_name=\"v1\")\n    v1_api.register(CategoryResource())\n    v1_api.register(BulletinResource())\n\n    urlpatterns = patterns('',\n        url(r\"^admin/\", include(admin.site.urls)),\n     url(r\"^api/\", include(v1_api.urls)),\n    )\n\n    urlpatterns += staticfiles_urlpatterns()\n    urlpatterns += static(settings.MEDIA_URL,\n        document_root=settings.MEDIA_ROOT)\n    ```", "```py\n(myproject_env)$ pip install djangorestframework\n(myproject_env)$ pip install markdown\n(myproject_env)$ pip install django-filter\n\n```", "```py\n    # conf/base.py or settings.py\n    REST_FRAMEWORK = {\n        \"DEFAULT_PERMISSION_CLASSES\": [\n            \"rest_framework.permissions.\"\n                \"DjangoModelPermissionsOrAnonReadOnly\"\n        ],\n        \"DEFAULT_PAGINATION_CLASS\": \\\n            \"rest_framework.pagination.LimitOffsetPagination\",\n        \"PAGE_SIZE\": 100,\n    }\n    ```", "```py\n    # bulletin_board/serializers.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from rest_framework import serializers\n    from .models import Category, Bulletin\n\n    class CategorySerializer(serializers.ModelSerializer):\n        class Meta:\n            model = Category\n            fields = [\"id\", \"title\"]\n\n    class BulletinSerializer(serializers.ModelSerializer):\n        category = CategorySerializer()\n\n        class Meta:\n            model = Bulletin\n            fields = [\n                \"id\", \"bulletin_type\", \"category\", \"title\",\n                \"description\", \"contact_person\", \"phone\",\n                \"email\", \"image\"\n            ]\n\n        def create(self, validated_data):\n            category_data = validated_data.pop('category')\n            category, created = Category.objects.\\\n                get_or_create(title=category_data['title'])\n            bulletin = Bulletin.objects.create(\n                category=category, **validated_data\n            )\n            return bulletin\n\n        def update(self, instance, validated_data):\n            category_data = validated_data.pop('category')\n            category, created = Category.objects.get_or_create(\n                title=category_data['title'],\n            )\n            for fname, fvalue in validated_data.items():\n                setattr(instance, fname, fvalue)\n            instance.category = category\n            instance.save()\n            return instance\n    ```", "```py\n    # bulletin_board/views.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from rest_framework import generics\n\n    from .models import Bulletin\n    from .serializers import BulletinSerializer\n\n    class RESTBulletinList(generics.ListCreateAPIView):\n        queryset = Bulletin.objects.all()\n        serializer_class = BulletinSerializer\n\n    class RESTBulletinDetail(\n        generics.RetrieveUpdateDestroyAPIView\n    ):\n        queryset = Bulletin.objects.all()\n        serializer_class = BulletinSerializer\n    ```", "```py\n    # myproject/urls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf.urls import patterns, include, url\n    from bulletin_board.views import RESTBulletinList\n    from bulletin_board.views import RESTBulletinDetail\n\n    urlpatterns = [\n        # ...\n        url(\n            r\"^api-auth/\",\n            include(\"rest_framework.urls\",\n            namespace=\"rest_framework\")\n        ),\n        url(\n            r\"^rest-api/bulletin-board/$\",\n            RESTBulletinList.as_view(),\n            name=\"rest_bulletin_list\"\n        ),\n        url(\n            r\"^rest-api/bulletin-board/(?P<pk>[0-9]+)/$\",\n            RESTBulletinDetail.as_view(),\n            name=\"rest_bulletin_detail\"\n        ),\n    ]\n    ```", "```py\n(myproject_env)$ python manage.py shell\n>>> import requests\n>>> response = requests.post(\"http://127.0.0.1:8000/rest-api/bulletin-board/\", auth=(\"admin\", \"admin\"), data={\"title\": \"TEST\", \"category.title\": \"TEST\", \"contact_person\": \"TEST\", \"bulletin_type\": \"searching\", \"description\": \"TEST\"})\n>>> response.status_code\n201\n>>> response.json()\n{u'category': {u'id': 6, u'title': u'TEST'}, u'description': u'TEST', u'title': u'TEST', u'image': None, u'email': u'', u'phone': u'', u'bulletin_type': u'searching', u'contact_person': u'TEST', u'id': 3}\n\n```"]