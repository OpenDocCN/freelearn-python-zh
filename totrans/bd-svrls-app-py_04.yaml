- en: Deploying Serverless APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have come a long way in our journey of learning about serverless
    applications and building serverless engineering. We have learned what the serverless
    paradigm actually is, how the AWS Lambda function works, understanding the internals
    of AWS Lambda, along with a detailed understanding of how several triggers work.
    We have also done several mini projects around experimenting with triggers and
    deploying them as end-to-end serverless pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will be learning how to build efficient and scalable serverless
    APIs, using the AWS Lambda and AWS API Gateway services. We will start with understanding
    how the API Gateway works, instead of diving directly to building the serverless
    API. After that, we will understand how API Gateway and AWS Lambda integrate with
    each other. And finally, we will be creating and deploying a fully functional
    serverless API, as part of your learning from this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: API methods and resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the Lambda function for API execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling authentication and user controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API methods and resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will be learning about the API service of AWS, which is
    the API Gateway, and understanding the components and settings available in the
    console for the user who is creating APIs. We will go through all of the components
    and understand the API Gateway better. The steps to create the serverless APIs
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by opening the API Gateway console, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the API Gateway console, click on the Get Started button to start creating
    an API. It will take you to an API creation wizard with a popup saying Create
    Example API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the OK button, you will be redirected to a page where the
    Example API is shown, from which you can get an idea of what an API response looks
    like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The API we are building in this example is for a pet store and for maintaining
    the pets inside the store. By going through the API, you will see what the bits
    and pieces of an API looks like. The API looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the Import button at the end, you will be redirected to the
    PetStore (b7exp0d681) API page that we have just created. The API page with all
    the components looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The resources in this API are the GET and POST resources, where you can add
    pets and view the pets, which are available as a list. The list of resources from
    the API we have created is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'By clicking on the first GET resource, we can see a detailed execution flow
    from the client to the endpoint and back to the client. The execution flow of
    the resource looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if we click on the POST resource, we will find a similar model execution
    flow for the POST resource. It looks very similar to that of the GET resource,
    however, here the API endpoint is mentioned as a URL, as we are trying to retrieve
    the result from it. The execution model looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the API Gateway, there is something called Stages, which can be used as
    versioning models for an API. Some common names for Stages in practice are **test**, **development**,
    and **production**. The Stages menu looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the Create option, it will open a creation wizard for the
    stage. This looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can select any name for the Stage name value, and add the Stage description value
    according to the name you have assigned and the purpose you have in mind for this
    stage. Before that, you need to deploy the API that you have created. This can
    be selected in the Actions drop-down menu as the Deploy API button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next menu, you can choose the Stage name and other details, before finally
    clicking on the Deploy button, which will deploy your API with that particular
    stage. This can be seen as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The deployed stage would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we now understand how the AWS API Gateway service works at a basic level,
    we will move on to use that knowledge for building an end-to-end project which
    involves deploying a completely serverless API.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will be building and deploying a completely serverless
    API function from scratch, along with learning the internals and other implementation
    details of the AWS Lambda—AWS API Gateway integrations. We will be building the
    serverless API step-by-step. So, follow along with the steps in this order. The
    procedure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we will start by creating a new API. This can be done via the Lambda
    console which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have clicked on the +Create API button, you will be redirected to
    the API creation wizard, where you will be asked to enter the name and description
    of the API you are intending to build. For now, I have entered the name as `TestLambdaAPI`.
    However, you are free to add whatever name and description you would like to enter.
    The API creation console looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the Create API button, you will be redirected to the page
    of the API you have created. The API page would look similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have successfully created an API, we will now go ahead and create
    resources in the API. You can do that by clicking on the Create Resource option
    in the Actions drop-down menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This would open up a resource creation wizard where you can add the name and
    resource path of the API resource which we are intending to build. After creating
    the resource, click on the Create Resource button for your settings for the API
    resource to be created accordingly. For the sake of this tutorial, I have named
    it `LambdaAPI`. However, you can give it any name you want. The API creation wizard
    looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The resource that you have just created is now live in the API console; you
    can see it under the Resources section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can create versions of a resource or even just a resource under a resource.
    Let''s go ahead and create one. For this, you need to click on the resource that
    you have already created. Then, click on the Create Resource option in the drop-down
    menu in the Actions menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This would open up a similar resource creation wizard under the resource which
    we have already created. You can name that resource as `version1` or just as `v1`
    which is a regular software practice. I have named it `v1`. However, you can name
    it whatever you want to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we have a resource named `v1` under the already existing resource, `/lambdaapi`.
    We can see this under our Resources section. So, now the resources hierarchy of
    our API looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will be creating a serverless API for getting and querying the list of pets
    in a pet store. So, the following steps will be aligned accordingly. The API should
    return the name of the pets. So, we will have a new resource for pets for that
    purpose. We will be creating a resource for this under the `/v1` resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The resulting hierarchical structure for our API looks like this, after adding
    the `/pets` resource under the `/v1` resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will add a custom resource which enables us to query the API. By custom,
    we mean that any string can be added to the resource when sending a request to
    this API, and the API would send back a request after checking and querying for
    that string via a Lambda code. The custom resources can be differentiated from
    the normal ones, as they can be created with curly braces. The following screenshot
    will help you understand how to create them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on the Create Resource button, the new custom child resource
    for `/pets` will be created. The hierarchy of the resources is now as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The overall structure of the API looks like this, as specified in the top-right
    part of the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will add methods to this custom resource. As we will only be querying
    the list of pets, we will only add the GET method. This can be done by clicking
    on the {type} resource and clicking on Create Method in the drop-down Actions menu
    in the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This would create a small drop-down style menu under the {type} resource where
    you can select a method from the available methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to select the GET option from the available options. This would look
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the GET option and clicking on the small tick button beside
    it, we will have created the GET method under our {type} resource. The hierarchy
    now looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Deploying the Lambda function for API execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will have a look at the steps to deploy the Lambda function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The details of the GET method can also be seen on the right-hand side of the
    API console, when you click on that method. The details look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the GET method console, click on the Lambda Function option. Select any
    one region depending on your preference. I have chosen us-east-1 as the region
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As expected, it says we do not have a Lambda function in that region. So, we
    need to go ahead and create one. Click on the Create a Lambda Function link. This
    will take you to the Lambda creation console which we are already comfortable
    with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, choose the keyword : hello-world-python blueprint from the list
    of blueprints:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next console, choose the basic information for the Lambda function as
    we have done in the previous chapters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After adding the relevant details, click on the orange Create function button.
    That will take you to the page of the Lambda function you have just created. The
    code can be edited from there onwards:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the function''s code, use this code instead of the one which is provided
    along with the blueprint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now done with tweaking the function code. Now, you can go ahead and
    save the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, head back to the API Gateway console to the GET method page. Here, under
    the Lambda functions in the us-east-1 region, I start getting the Lambda function
    which I have just created (serverless-api) as an option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On clicking Save, you will see a popup asking you to confirm that you are giving
    API Gateway permission to invoke your Lambda function, you can acknowledge it
    by clicking on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on OK, you will be redirected to the data flow page of the GET method,
    that looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Handling authentication and user controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After deploying, next we will discuss how to handle the authentication and
    user controls. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have successfully created the skeleton of our serverless API, we
    will now work on the nitty-gritty details which are needed to make it a fully
    functional API. We will start with applying the mapping templates. This can be
    done in the Integration Request menu. Clicking on the Integration Request link
    will take you to a console which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you scroll down a bit in the same console, you will notice the Body Mapping
    Templates section at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Body Mapping Templates will unfurl the options available in
    that particular section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the second option which says When there are no templates defined (recommended).
    And then, click on the Add mapping template option and add `application/json`, and
    click on the small grey tick symbol beside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking the small grey tick symbol beside it, the Body Mapping Templates
    section space will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the template textbox, add the following code and click the Save button
    underneath the text box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, after all these steps, the resulting Body Mapping Templates section will
    look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, going back to the Method Execution page, we can see the TEST option on
    the left with a lightning bolt symbol beneath it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the TEST button on the left-side in the Client section and above
    the thunderbolt option will take you to a page where you can test the API that
    you''ve just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s type `Exotic` in the textbox below {type} and click on the Test button
    at the bottom. If everything goes right, we should see the list of all the exotic
    pets we have entered in the function code of our Lambda function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: And rightly so, we did get the list of all of the exotic pets in the catalog.
    So, this brings this chapter to an end, where you have learned how to build a
    fully fledged serverless API from scratch, including how to deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In addition, if you want to add additional security settings, such as Authorizations
    and API Key Required, you can do it in the Method Request menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to build a completely serverless API from
    scratch. We have also learned how to add more resources and methods for the API,
    as well as how to deploy it successfully to multiple stages of development and
    how to add additional security settings such as authorization and API keys for
    authentication purposes.
  prefs: []
  type: TYPE_NORMAL
- en: We then learned how to associate a Lambda function with our API Gateway's API
    service for handling the computational tasks of our API.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be learning about logging and monitoring serverless
    applications. In that chapter, we will learn about the logging and monitoring
    services of AWS such as CloudWatch Metrics, CloudWatch Logs, and CloudWatch Dashboards
    in detail, and try to set them up for our serverless applications. We will also
    learn how to create a logging and monitoring pipeline from AWS Lambda to these
    monitoring tools using some AWS services.
  prefs: []
  type: TYPE_NORMAL
