- en: Deploying Serverless APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署无服务器 API
- en: So far, we have come a long way in our journey of learning about serverless
    applications and building serverless engineering. We have learned what the serverless
    paradigm actually is, how the AWS Lambda function works, understanding the internals
    of AWS Lambda, along with a detailed understanding of how several triggers work.
    We have also done several mini projects around experimenting with triggers and
    deploying them as end-to-end serverless pipelines.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在学习无服务器应用程序和构建无服务器工程的道路上已经走得很远了。我们已经了解了无服务器范式实际上是什么，AWS Lambda 函数是如何工作的，理解了
    AWS Lambda 的内部结构，以及如何详细理解几个触发器的运作方式。我们还进行了几个关于实验触发器并将它们作为端到端无服务器管道部署的迷你项目。
- en: In this chapter, you will be learning how to build efficient and scalable serverless
    APIs, using the AWS Lambda and AWS API Gateway services. We will start with understanding
    how the API Gateway works, instead of diving directly to building the serverless
    API. After that, we will understand how API Gateway and AWS Lambda integrate with
    each other. And finally, we will be creating and deploying a fully functional
    serverless API, as part of your learning from this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用 AWS Lambda 和 AWS API Gateway 服务构建高效且可扩展的无服务器 API。我们将从了解 API Gateway
    的工作原理开始，而不是直接进入构建无服务器 API。之后，我们将了解 API Gateway 和 AWS Lambda 如何相互集成。最后，我们将创建并部署一个完全功能的无服务器
    API，作为您从本章学习的一部分。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: API methods and resources
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 方法与资源
- en: Setting up integration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置集成
- en: Deploying the Lambda function for API execution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Lambda 函数部署为 API 执行
- en: Handling authentication and user controls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理身份验证和用户控制
- en: API methods and resources
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 方法与资源
- en: 'In this section, we will be learning about the API service of AWS, which is
    the API Gateway, and understanding the components and settings available in the
    console for the user who is creating APIs. We will go through all of the components
    and understand the API Gateway better. The steps to create the serverless APIs
    are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习 AWS 的 API 服务，即 API Gateway，并了解用户在控制台创建 API 时可用的组件和设置。我们将逐一介绍所有组件，以更好地理解
    API Gateway。创建无服务器 API 的步骤如下：
- en: 'We will start by opening the API Gateway console, which looks like this:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先打开 API Gateway 控制台，它看起来如下所示：
- en: '![](img/00096.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00096.jpeg)'
- en: 'In the API Gateway console, click on the Get Started button to start creating
    an API. It will take you to an API creation wizard with a popup saying Create
    Example API:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 API Gateway 控制台中，点击“开始使用”按钮以开始创建 API。它将带您进入一个 API 创建向导，并弹出一个提示框说“创建示例 API”：
- en: '![](img/00097.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00097.jpeg)'
- en: 'Once you click on the OK button, you will be redirected to a page where the
    Example API is shown, from which you can get an idea of what an API response looks
    like:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您点击“确定”按钮，您将被重定向到一个显示 Example API 的页面，从中您可以了解 API 响应的外观：
- en: '![](img/00098.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00098.jpeg)'
- en: 'The API we are building in this example is for a pet store and for maintaining
    the pets inside the store. By going through the API, you will see what the bits
    and pieces of an API looks like. The API looks like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们构建的 API 是针对宠物商店以及维护商店内的宠物。通过使用 API，您将看到 API 的各个组成部分。API 看起来如下所示：
- en: '![](img/00099.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00099.jpeg)'
- en: 'Once you click on the Import button at the end, you will be redirected to the
    PetStore (b7exp0d681) API page that we have just created. The API page with all
    the components looks like this:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您点击末尾的导入按钮，您将被重定向到我们刚刚创建的 PetStore (b7exp0d681) API 页面。包含所有组件的 API 页面看起来如下所示：
- en: '![](img/00100.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00100.jpeg)'
- en: 'The resources in this API are the GET and POST resources, where you can add
    pets and view the pets, which are available as a list. The list of resources from
    the API we have created is as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此 API 中的资源是 GET 和 POST 资源，您可以在其中添加宠物并查看宠物，这些宠物以列表形式提供。我们创建的 API 的资源列表如下：
- en: '![](img/00101.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00101.jpeg)'
- en: 'By clicking on the first GET resource, we can see a detailed execution flow
    from the client to the endpoint and back to the client. The execution flow of
    the resource looks like this:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击第一个 GET 资源，我们可以看到一个从客户端到端点再返回客户端的详细执行流程。资源的执行流程如下所示：
- en: '![](img/00102.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00102.jpeg)'
- en: 'Now, if we click on the POST resource, we will find a similar model execution
    flow for the POST resource. It looks very similar to that of the GET resource,
    however, here the API endpoint is mentioned as a URL, as we are trying to retrieve
    the result from it. The execution model looks as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们点击 POST 资源，我们会找到一个类似 POST 资源的模型执行流程。它看起来与 GET 资源的非常相似，然而，在这里 API 端点被提及为一个
    URL，因为我们正在尝试从它检索结果。执行模型看起来如下：
- en: '![](img/00103.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00103.jpeg)'
- en: 'In the API Gateway, there is something called Stages, which can be used as
    versioning models for an API. Some common names for Stages in practice are **test**, **development**,
    and **production**. The Stages menu looks like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 API 网关中，有一种称为阶段（Stages）的东西，可以用作 API 的版本控制模型。实践中阶段的一些常见名称是**测试**、**开发**和**生产**。阶段菜单看起来如下：
- en: '![](img/00104.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00104.jpeg)'
- en: 'When you click on the Create option, it will open a creation wizard for the
    stage. This looks as follows:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你点击创建选项时，它将打开阶段的创建向导。这看起来如下：
- en: '![](img/00105.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00105.jpeg)'
- en: 'You can select any name for the Stage name value, and add the Stage description value
    according to the name you have assigned and the purpose you have in mind for this
    stage. Before that, you need to deploy the API that you have created. This can
    be selected in the Actions drop-down menu as the Deploy API button, as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以为阶段名称值选择任何名称，并根据你分配的名称和这个阶段的目的添加阶段描述值。在此之前，你需要部署你创建的 API。这可以在“操作”下拉菜单中作为部署
    API 按钮选择，如下所示：
- en: '![](img/00106.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00106.jpeg)'
- en: 'In the next menu, you can choose the Stage name and other details, before finally
    clicking on the Deploy button, which will deploy your API with that particular
    stage. This can be seen as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个菜单中，你可以选择阶段名称和其他详细信息，然后最终点击部署按钮，这将使用该特定阶段部署你的 API。这可以如下所示：
- en: '![](img/00107.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00107.jpeg)'
- en: 'The deployed stage would look as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 部署的阶段看起来如下：
- en: '![](img/00108.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00108.jpeg)'
- en: Setting up integration
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置集成
- en: As we now understand how the AWS API Gateway service works at a basic level,
    we will move on to use that knowledge for building an end-to-end project which
    involves deploying a completely serverless API.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了 AWS API 网关服务在基本层面的工作原理，我们将继续使用这些知识来构建一个端到端的项目，该项目涉及部署一个完全无服务器的 API。
- en: 'In this section, we will be building and deploying a completely serverless
    API function from scratch, along with learning the internals and other implementation
    details of the AWS Lambda—AWS API Gateway integrations. We will be building the
    serverless API step-by-step. So, follow along with the steps in this order. The
    procedure is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从头开始构建和部署一个完全无服务器的 API 函数，同时学习 AWS Lambda 与 AWS API 网关集成的内部结构和其它实现细节。我们将逐步构建无服务器
    API。所以，按照以下顺序跟随步骤。程序如下：
- en: 'Firstly, we will start by creating a new API. This can be done via the Lambda
    console which looks like this:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将开始创建一个新的 API。这可以通过看起来如下所示的 Lambda 控制台完成：
- en: '![](img/00109.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00109.jpeg)'
- en: 'Once you have clicked on the +Create API button, you will be redirected to
    the API creation wizard, where you will be asked to enter the name and description
    of the API you are intending to build. For now, I have entered the name as `TestLambdaAPI`.
    However, you are free to add whatever name and description you would like to enter.
    The API creation console looks like this:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你点击了“+创建 API”按钮，你将被重定向到 API 创建向导，在那里你将被要求输入你打算构建的 API 的名称和描述。目前，我已经将名称输入为“TestLambdaAPI”。然而，你可以自由地添加你想要的任何名称和描述。API
    创建控制台看起来如下：
- en: '![](img/00110.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00110.jpeg)'
- en: 'Once you click on the Create API button, you will be redirected to the page
    of the API you have created. The API page would look similar to this:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你点击创建 API 按钮，你将被重定向到你创建的 API 页面。API 页面看起来可能如下：
- en: '![](img/00111.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00111.jpeg)'
- en: 'Now that we have successfully created an API, we will now go ahead and create
    resources in the API. You can do that by clicking on the Create Resource option
    in the Actions drop-down menu:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经成功创建了一个 API，我们现在将创建 API 中的资源。你可以通过点击操作下拉菜单中的创建资源选项来完成：
- en: '![](img/00112.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00112.jpeg)'
- en: 'This would open up a resource creation wizard where you can add the name and
    resource path of the API resource which we are intending to build. After creating
    the resource, click on the Create Resource button for your settings for the API
    resource to be created accordingly. For the sake of this tutorial, I have named
    it `LambdaAPI`. However, you can give it any name you want. The API creation wizard
    looks like this:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个资源创建向导，您可以在其中添加我们打算构建的API资源的名称和资源路径。创建资源后，点击“创建资源”按钮，以创建相应的API资源设置。为了本教程的目的，我将其命名为`LambdaAPI`。然而，您可以给它任何您想要的名称。API创建向导如下所示：
- en: '![](img/00113.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00113.jpeg)'
- en: 'The resource that you have just created is now live in the API console; you
    can see it under the Resources section:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚创建的资源现在已在API控制台中上线；您可以在“资源”部分下看到它：
- en: '![](img/00114.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00114.jpeg)'
- en: 'You can create versions of a resource or even just a resource under a resource.
    Let''s go ahead and create one. For this, you need to click on the resource that
    you have already created. Then, click on the Create Resource option in the drop-down
    menu in the Actions menu:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以创建资源的版本，甚至可以在资源下创建资源。让我们继续创建一个。为此，您需要点击您已经创建的资源。然后，在操作菜单的下拉菜单中点击“创建资源”选项：
- en: '![](img/00115.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00115.jpeg)'
- en: 'This would open up a similar resource creation wizard under the resource which
    we have already created. You can name that resource as `version1` or just as `v1`
    which is a regular software practice. I have named it `v1`. However, you can name
    it whatever you want to:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在我们已创建的资源下打开一个类似的资源创建向导。您可以将该资源命名为`version1`或简单地命名为`v1`，这是一个常规的软件实践。我将其命名为`v1`。然而，您可以将其命名为任何您想要的名称：
- en: '![](img/00116.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00116.jpeg)'
- en: 'Now, we have a resource named `v1` under the already existing resource, `/lambdaapi`.
    We can see this under our Resources section. So, now the resources hierarchy of
    our API looks like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在已存在的资源`/lambdaapi`下有一个名为`v1`的资源。我们可以在“资源”部分下看到这一点。因此，现在我们的API资源层次结构如下所示：
- en: '![](img/00117.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00117.jpeg)'
- en: 'We will be creating a serverless API for getting and querying the list of pets
    in a pet store. So, the following steps will be aligned accordingly. The API should
    return the name of the pets. So, we will have a new resource for pets for that
    purpose. We will be creating a resource for this under the `/v1` resource:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个无服务器API，用于获取和查询宠物商店中的宠物列表。因此，以下步骤将相应地进行。API应返回宠物的名称。因此，我们将为此目的创建一个新的宠物资源。我们将在`/v1`资源下创建这个资源：
- en: '![](img/00118.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00118.jpeg)'
- en: 'The resulting hierarchical structure for our API looks like this, after adding
    the `/pets` resource under the `/v1` resource:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/v1`资源下添加`/pets`资源后，我们的API的最终层次结构如下所示：
- en: '![](img/00119.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00119.jpeg)'
- en: 'Now, we will add a custom resource which enables us to query the API. By custom,
    we mean that any string can be added to the resource when sending a request to
    this API, and the API would send back a request after checking and querying for
    that string via a Lambda code. The custom resources can be differentiated from
    the normal ones, as they can be created with curly braces. The following screenshot
    will help you understand how to create them:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个自定义资源，使我们能够查询API。在这里，我们所说的自定义是指，在向该API发送请求时，可以添加任何字符串到资源中，API会在通过Lambda代码检查和查询该字符串后返回请求。自定义资源可以与普通资源区分开来，因为它们可以用花括号创建。下面的截图将帮助您了解如何创建它们：
- en: '![](img/00120.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00120.jpeg)'
- en: 'After clicking on the Create Resource button, the new custom child resource
    for `/pets` will be created. The hierarchy of the resources is now as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建资源”按钮后，将为`/pets`创建一个新的自定义子资源。资源的层次结构现在如下所示：
- en: '![](img/00121.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00121.jpeg)'
- en: 'The overall structure of the API looks like this, as specified in the top-right
    part of the following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: API的整体结构如下，如以下截图右上角所示：
- en: '![](img/00122.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00122.jpeg)'
- en: 'Now, we will add methods to this custom resource. As we will only be querying
    the list of pets, we will only add the GET method. This can be done by clicking
    on the {type} resource and clicking on Create Method in the drop-down Actions menu
    in the top panel:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将向这个自定义资源添加方法。由于我们只会查询宠物列表，所以我们只会添加GET方法。这可以通过点击{type}资源，然后在顶部面板的“操作”菜单中选择“创建方法”来完成：
- en: '![](img/00123.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00123.jpeg)'
- en: 'This would create a small drop-down style menu under the {type} resource where
    you can select a method from the available methods:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在{type}资源下创建一个小型下拉式菜单，您可以从可用方法中选择一个方法：
- en: '![](img/00124.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00124.jpeg)'
- en: 'We need to select the GET option from the available options. This would look
    as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要从可用选项中选择 GET 选项。这看起来如下所示：
- en: '![](img/00125.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00125.jpeg)'
- en: 'After selecting the GET option and clicking on the small tick button beside
    it, we will have created the GET method under our {type} resource. The hierarchy
    now looks like this:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 GET 选项并点击其旁边的较小勾选按钮后，我们将在我们的{type}资源下创建GET方法。现在的层次结构如下所示：
- en: '![](img/00126.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00126.jpeg)'
- en: Deploying the Lambda function for API execution
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Lambda函数以执行API
- en: 'In this section, we will have a look at the steps to deploy the Lambda function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看部署Lambda函数的步骤：
- en: 'The details of the GET method can also be seen on the right-hand side of the
    API console, when you click on that method. The details look as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您点击该方法时，GET方法的详细信息也可以在API控制台的右侧看到，如下所示：
- en: '![](img/00127.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00127.jpeg)'
- en: 'In the GET method console, click on the Lambda Function option. Select any
    one region depending on your preference. I have chosen us-east-1 as the region
    as shown in the following screenshot:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GET方法控制台中，点击 Lambda函数 选项。根据您的偏好选择任何区域。我选择了 us-east-1 区域，如下截图所示：
- en: '![](img/00128.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00128.jpeg)'
- en: 'As expected, it says we do not have a Lambda function in that region. So, we
    need to go ahead and create one. Click on the Create a Lambda Function link. This
    will take you to the Lambda creation console which we are already comfortable
    with:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如预期的那样，它说我们在这个区域没有Lambda函数。因此，我们需要继续创建一个。点击创建Lambda函数链接。这将带您到我们已熟悉的Lambda创建控制台：
- en: '![](img/00129.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00129.jpeg)'
- en: 'From here, choose the keyword : hello-world-python blueprint from the list
    of blueprints:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里，从蓝图列表中选择关键字： hello-world-python 蓝图：
- en: '![](img/00130.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00130.jpeg)'
- en: 'In the next console, choose the basic information for the Lambda function as
    we have done in the previous chapters:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个控制台中，选择Lambda函数的基本信息，就像我们在前面的章节中所做的那样：
- en: '![](img/00131.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00131.jpeg)'
- en: 'After adding the relevant details, click on the orange Create function button.
    That will take you to the page of the Lambda function you have just created. The
    code can be edited from there onwards:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加相关详细信息后，点击橙色 创建函数 按钮。这将带您到您刚刚创建的Lambda函数页面。代码可以从那里开始编辑：
- en: '![](img/00132.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00132.jpeg)'
- en: 'In the function''s code, use this code instead of the one which is provided
    along with the blueprint:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数的代码中，使用此代码而不是蓝图提供的代码：
- en: '![](img/00133.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00133.jpeg)'
- en: 'We are now done with tweaking the function code. Now, you can go ahead and
    save the function:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经完成了函数代码的调整。现在，你可以继续保存函数：
- en: '![](img/00134.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00134.jpeg)'
- en: 'Now, head back to the API Gateway console to the GET method page. Here, under
    the Lambda functions in the us-east-1 region, I start getting the Lambda function
    which I have just created (serverless-api) as an option:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到API网关控制台中的GET方法页面。在这里，在us-east-1区域的Lambda函数下，我开始获取我刚刚创建的Lambda函数（serverless-api）作为选项：
- en: '![](img/00135.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00135.jpeg)'
- en: 'On clicking Save, you will see a popup asking you to confirm that you are giving
    API Gateway permission to invoke your Lambda function, you can acknowledge it
    by clicking on OK:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存，您将看到一个弹出窗口要求您确认您正在授予API网关调用您的Lambda函数的权限，您可以通过点击 确定 来确认：
- en: '![](img/00136.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00136.jpeg)'
- en: 'After clicking on OK, you will be redirected to the data flow page of the GET method,
    that looks like this:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 确定 后，您将被重定向到GET方法的 数据流页面，看起来如下所示：
- en: '![](img/00137.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00137.jpeg)'
- en: Handling authentication and user controls
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理身份验证和用户控制
- en: 'After deploying, next we will discuss how to handle the authentication and
    user controls. The steps are as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完成后，接下来我们将讨论如何处理身份验证和用户控制。步骤如下：
- en: 'Now that we have successfully created the skeleton of our serverless API, we
    will now work on the nitty-gritty details which are needed to make it a fully
    functional API. We will start with applying the mapping templates. This can be
    done in the Integration Request menu. Clicking on the Integration Request link
    will take you to a console which looks like this:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经成功创建了无服务器API的骨架，接下来我们将着手处理使其成为一个完全功能API所需的细节。我们将从应用映射模板开始。这可以在集成请求菜单中完成。点击集成请求链接将带您到一个看起来像这样的控制台：
- en: '![](img/00138.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00138.jpeg)'
- en: 'If you scroll down a bit in the same console, you will notice the Body Mapping
    Templates section at the end:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在同一个控制台中向下滚动一点，您会注意到末尾的身体映射模板部分：
- en: '![](img/00139.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00139.jpeg)'
- en: 'Clicking on the Body Mapping Templates will unfurl the options available in
    that particular section:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击身体映射模板将展开该特定部分可用的选项：
- en: '![](img/00140.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00140.jpeg)'
- en: 'Select the second option which says When there are no templates defined (recommended).
    And then, click on the Add mapping template option and add `application/json`, and
    click on the small grey tick symbol beside it:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择第二个选项，即当没有定义模板时（推荐）。然后，点击添加映射模板选项，并添加`application/json`，然后点击其旁边的灰色勾选符号：
- en: '![](img/00141.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00141.jpeg)'
- en: 'After clicking the small grey tick symbol beside it, the Body Mapping Templates
    section space will look like this:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击它旁边的灰色勾选符号后，身体映射模板部分的空间将看起来像这样：
- en: '![](img/00142.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00142.jpeg)'
- en: 'Now, in the template textbox, add the following code and click the Save button
    underneath the text box:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在模板文本框中添加以下代码，然后点击文本框下方的保存按钮：
- en: '![](img/00143.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00143.jpeg)'
- en: 'So, after all these steps, the resulting Body Mapping Templates section will
    look like this:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，经过所有这些步骤后，结果的身体映射模板部分将看起来像这样：
- en: '![](img/00144.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00144.jpeg)'
- en: 'Now, going back to the Method Execution page, we can see the TEST option on
    the left with a lightning bolt symbol beneath it:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到方法执行页面，我们可以看到左侧的TEST选项，其下方有一个闪电符号：
- en: '![](img/00145.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00145.jpeg)'
- en: 'Clicking on the TEST button on the left-side in the Client section and above
    the thunderbolt option will take you to a page where you can test the API that
    you''ve just created:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧客户端部分中的TEST按钮，以及上方闪电选项，将带您到一个可以测试您刚刚创建的API的页面：
- en: '![](img/00146.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00146.jpeg)'
- en: 'Now, let''s type `Exotic` in the textbox below {type} and click on the Test button
    at the bottom. If everything goes right, we should see the list of all the exotic
    pets we have entered in the function code of our Lambda function:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在下面的{type}文本框中输入`Exotic`，然后点击底部的Test按钮。如果一切顺利，我们应该能看到我们在Lambda函数代码中输入的所有异国宠物的列表：
- en: '![](img/00147.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00147.jpeg)'
- en: And rightly so, we did get the list of all of the exotic pets in the catalog.
    So, this brings this chapter to an end, where you have learned how to build a
    fully fledged serverless API from scratch, including how to deploy it.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如此一来，我们确实得到了目录中所有异国宠物的列表。因此，这章的内容到此结束，您已经学习了如何从头开始构建一个完整的无服务器API，包括如何部署它。
- en: 'In addition, if you want to add additional security settings, such as Authorizations
    and API Key Required, you can do it in the Method Request menu:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，如果您想添加额外的安全设置，例如授权和API密钥要求，您可以在方法请求菜单中完成：
- en: '![](img/00148.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00148.jpeg)'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to build a completely serverless API from
    scratch. We have also learned how to add more resources and methods for the API,
    as well as how to deploy it successfully to multiple stages of development and
    how to add additional security settings such as authorization and API keys for
    authentication purposes.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从头开始构建一个完全无服务器的API。我们还学习了如何为API添加更多资源和方法，以及如何成功地将它部署到多个开发阶段，以及如何添加额外的安全设置，如授权和API密钥以用于认证目的。
- en: We then learned how to associate a Lambda function with our API Gateway's API
    service for handling the computational tasks of our API.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着学习了如何将Lambda函数与我们的API网关的API服务关联起来，以处理API的计算任务。
- en: In the next chapter, we will be learning about logging and monitoring serverless
    applications. In that chapter, we will learn about the logging and monitoring
    services of AWS such as CloudWatch Metrics, CloudWatch Logs, and CloudWatch Dashboards
    in detail, and try to set them up for our serverless applications. We will also
    learn how to create a logging and monitoring pipeline from AWS Lambda to these
    monitoring tools using some AWS services.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于无服务器应用程序的日志记录和监控。在那个章节中，我们将详细学习 AWS 的日志记录和监控服务，例如 CloudWatch Metrics、CloudWatch
    Logs 和 CloudWatch Dashboards，并尝试为我们的无服务器应用程序设置它们。我们还将学习如何使用一些 AWS 服务，从 AWS Lambda
    创建一个日志记录和监控管道到这些监控工具。
