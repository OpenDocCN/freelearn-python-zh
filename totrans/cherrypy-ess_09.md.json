["```py\nclass Dummy:\ndef __init__(self, start=0, left_boundary=-10, right_boundary=10,\nallow_positive=True, allow_negative=False):\nself.current = start\nself.left_boundary = left_boundary\nself.right_boundary = right_boundary\nself.allow_positive = allow_positive\nself.allow_negative = allow_negative\ndef forward(self):\nnext = self.current + 1\nif (next > 0) and (not self.allow_positive):\nraise ValueError, \"Positive values are not allowed\"\nif next > self.right_boundary:\nraise ValueError, \"Right boundary reached\"\nself.current = next\nreturn self.current\ndef backward(self):\nprev = self.current - 1\nif (prev < 0) and (not self.allow_negative):\nraise ValueError, \"Negative values are not allowed\"\nif prev < self.left_boundary:\nraise ValueError, \"Left boundary reached\"\nself.current = prev\nreturn self.current\ndef __str__(self):\nreturn str(self.current)\ndef __repr__(self):\nreturn \"Dummy object at %s\" % hex(id(self))\n\n```", "```py\n>>> from dummy import Dummy\n>>> dummy = Dummy()\n>>> dummy.forward()\n1\n>>> dummy.forward()\n2\n>>> dummy.backward()\n1\n>>> dummy.backward()\n0\n>>> dummy.backward()\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in ?\nFile \"dummy.py\", line 27, in backward\nraise ValueError, \"Negative values are not allowed\"\nValueError: Negative values are not allowed\n\n```", "```py\nimport unittest\nclass DummyTest(unittest.TestCase):\ndef test_01_forward(self):\ndummy = Dummy(right_boundary=3)\nself.assertEqual(dummy.forward(), 1)\nself.assertEqual(dummy.forward(), 2)\nself.assertEqual(dummy.forward(), 3)\nself.assertRaises(ValueError, dummy.forward)\ndef test_02_backward(self):\ndummy = Dummy(left_boundary=-3, allow_negative=True)\nself.assertEqual(dummy.backward(), -1)\nself.assertEqual(dummy.backward(), -2)\nself.assertEqual(dummy.backward(), -3)\nself.assertRaises(ValueError, dummy.backward)\ndef test_03_boundaries(self):\ndummy = Dummy(right_boundary=3, left_boundary=-3,\nallow_negative=True)\nself.assertEqual(dummy.backward(), -1)\nself.assertEqual(dummy.backward(), -2)\nself.assertEqual(dummy.forward(), -1)\nself.assertEqual(dummy.backward(), -2)\nself.assertEqual(dummy.backward(), -3)\nself.assertRaises(ValueError, dummy.backward)\nself.assertEqual(dummy.forward(), -2)\nself.assertEqual(dummy.forward(), -1)\nself.assertEqual(dummy.forward(), 0)\nself.assertEqual(dummy.backward(), -1)\nself.assertEqual(dummy.forward(), 0)\nself.assertEqual(dummy.forward(), 1)\nself.assertEqual(dummy.forward(), 2)\n\n```", "```py\nif __name__ == '__main__':\nunittest.main()\n\n```", "```py\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.000s\nOK\n\n```", "```py\nif __name__ == '__main__':\nunittest.main(testRunner=unittest.TextTestRunner(verbosity=2))\n\n```", "```py\ntest_01_forward (__main__.DummyTest) ... ok\ntest_02_backward (__main__.DummyTest) ... ok\ntest_03_boundaries (__main__.DummyTest) ... ok\n----------------------------------------------------------------------\nRan 3 tests in 0.000s\nOK\n\n```", "```py\nself.assertEqual(dummy.forward(), 0)\n\n```", "```py\ntest_01_forward (__main__.DummyTest) ... FAIL\ntest_02_backward (__main__.DummyTest) ... ok\ntest_03_boundaries (__main__.DummyTest) ... ok\n======================================================================\nFAIL: test_01_forward (__main__.DummyTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\nFile \"dummy.py\", line 54, in test_01_forward\nself.assertEqual(dummy.forward(), 0)\nAssertionError: 1 != 0\n----------------------------------------------------------------------\nRan 3 tests in 0.001s\nFAILED (failures=1)\n\n```", "```py\ndef test_00_construct(self):\nself.assertRaises(ValueError, Dummy, start=34)\n\n```", "```py\ntest_00_construct (__main__.DummyTest) ... FAIL\ntest_01_forward (__main__.DummyTest) ... ok\ntest_02_backward (__main__.DummyTest) ... ok\ntest_03_boundaries (__main__.DummyTest) ... ok\n======================================================================\nFAIL: test_00_construct (__main__.DummyTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\nFile \"dummy.py\", line 50, in test_00_construct\nself.assertRaises(ValueError, Dummy, start=34)\nAssertionError: ValueError not raised\n----------------------------------------------------------------------\nunit testingunittestRan 4 tests in 0.003s\nFAILED (failures=1)\n\n```", "```py\nif (start > right_boundary) or (start < left_boundary):\nraise ValueError, \"Start point must belong to the boundaries\"\n\n```", "```py\ntest_00_construct (__main__.DummyTest) ... ok\ntest_01_forward (__main__.DummyTest) ... ok\ntest_02_backward (__main__.DummyTest) ... ok\ntest_03_boundaries (__main__.DummyTest) ... ok\n----------------------------------------------------------------------\nRan 4 tests in 0.000s\nOK\n\n```", "```py\nclass Dummy:\ndef __init__(self, start=0, left_boundary=-10, right_boundary=10,\nallow_positive=True, allow_negative=False):\n\"\"\"\n>>> dummy = Dummy(start=27)\nTraceback (most recent call last):\n...\nraise ValueError, \"Start point must belong to the\nboundaries\"\nValueError: Start point must belong to the boundaries\n>>> dummy = Dummy()\n>>> dummy.backward()\nTraceback (most recent call last):\n...\nraise ValueError, \"Negative values are not allowed\"\nValueError: Negative values are not allowed\n\"\"\"\nself.current = start\nself.left_boundary = left_boundary\nself.right_boundary = right_boundary\nself.allow_positive = allow_positive\nself.allow_negative = allow_negative\nif (start > right_boundary) or (start < left_boundary):\nraise ValueError, \"Start point must belong to the\nboundaries\"\ndef forward(self):\n\"\"\"\n>>> dummy = Dummy(right_boundary=3)\n>>> dummy.forward()\n1\n>>> dummy.forward()\n2\n>>> dummy.forward()\n3\n>>> dummy.forward()\nTraceback (most recent call last):\n...\nraise ValueError, \"Right boundary reached\"\nValueError: Right boundary reached\n\"\"\"\nnext = self.current + 1\nif (next > 0) and (not self.allow_positive):\nraise ValueError, \"Positive values are not allowed\"\nif next > self.right_boundary:\nraise ValueError, \"Right boundary reached\"\nself.current = next\nreturn self.current\ndef backward(self):\n\"\"\"\n>>> dummy = Dummy(left_boundary=-3, allow_negative=True)\n>>> dummy.forward()\n1\n>>> dummy.backward()\n0\n>>> dummy.backward()\n-1\n>>> dummy.backward()\n-2\n>>> dummy.backward()\n-3\n>>> dummy.backward()\nTraceback (most recent call last):\n...\nraise ValueError, \"Left boundary reached\"\nValueError: Left boundary reached\n\"\"\"\nprev = self.current - 1\nif (prev < 0) and (not self.allow_negative):\nraise ValueError, \"Negative values are not allowed\"\nif prev < self.left_boundary:\nraise ValueError, \"Left boundary reached\"\nself.current = prev\nreturn self.current\ndef __str__(self):\nreturn str(self.current)\ndef __repr__(self):\nreturn \"Dummy object at %s\" % hex(id(self))\n\n```", "```py\nif __name__ == '__main__':\ndoctest.testmod()\nsylvain@6[test]$ python dummy.py -v\nTrying:\ndummy = Dummy(start=27)\nExpecting:\nTraceback (most recent call last):\n...\nraise ValueError, \"Start point must belong to the boundaries\"\nValueError: Start point must belong to the boundaries\nok\nTrying:\ndummy = Dummy()\nExpecting nothing\nok\nTrying:\ndummy.backward()\nExpecting:\nTraceback (most recent call last):\n...\nraise ValueError, \"Negative values are not allowed\"\nValueError: Negative values are not allowed\nok\nTrying:\ndummy = Dummy(left_boundary=-3, allow_negative=True)\nExpecting nothing\nok\nTrying:\ndummy.forward()\nExpecting:\n1\nok\n\n```", "```py\n>>> from dummy import Dummy\n>>> help(Dummy.forward)\nHelp on method forward in module dummy:\nforward(self) unbound dummy.Dummy method\n>>> dummy = Dummy(right_boundary=3)\n>>> dummy.forward()\n1\n>>> dummy.forward()\n2\n>>> dummy.forward()\n3\n>>> dummy.forward()\nTraceback (most recent call last):\n...\nraise ValueError, \"Right boundary reached\"\nValueError: Right boundary reached\n\n```", "```py\nclass TestServicesREST(PhotoblogTest):\ndef test_00_REST(self):\nself.getPage(\"/services/rest/\")\nself.assertStatus(404)\nself.getPage(\"/services/rest/album/\", method=\"XYU\")\nself.assertStatus(405)\ndef test_02_REST_GET(self):\n# missing the ID\nself.getPage(\"/services/rest/album/\")\nself.assertStatus(400)\n# missing the Accept header\nself.getPage(\"/services/rest/album/2\")\nself.assertStatus(406)\n# wrong ID type\nself.getPage(\"/services/rest/album/st\",\nheaders=[(\"Accept\", \"application/json\")])\nself.assertStatus(404)\nself.getPage(\"/services/rest/album/2\",\nheaders=[(\"Accept\", \"application/json\")])\nself.assertStatus(200)\nself.assertHeader('Content-Type', 'application/json')\nself.assertHeader('Allow', 'DELETE, GET, HEAD, POST, PUT')\nself.getPage(\"/services/rest/album?album_id=2\",\nheaders=[(\"Accept\", \"application/json\")])\nself.assertStatus(200)\nself.assertHeader('Content-Type', 'application/json')\nself.assertHeader('Allow', 'DELETE, GET, HEAD, POST, PUT')\ndef test_03_REST_POST(self):\nblog = self.photoblog\nparams = {'title': 'Test2',\n'author': 'Test demo', 'description': 'blah blah',\n'content': 'more blah blah bluh', 'blog_id':\nstr(blog.ID)}\n# let's transform the param dictionary\n# into a valid query string\nquery_string = urllib.urlencode(params)\nself.getPage(\"/services/rest/album/\", method=\"POST\",\nbody=query_string,\nheaders=[(\"Accept\", \"application/json\")])\nself.assertStatus(201)\nself.assertHeader('Content-Type', 'application/json')\n# here we miss the Accept header\nself.getPage(\"/services/rest/album/\", method=\"POST\",\nbody=query_string)\nself.assertStatus(406)\ndef test_04_REST_PUT(self):\nblog = self.photoblog\nparams = {'title': 'Test2',\n'author': 'Test demo', 'description': 'blah blah',\n'content': 'meh ehe eh', 'blog_id': str(blog.ID)}\nquery_string = urllib.urlencode(params)\n# at this stage we don't have yet an album with that ID\nself.getPage(\"/services/rest/album/23\", method=\"PUT\",\nbody=query_string,\nheaders=[(\"Accept\", \"application/json\")])\nself.assertStatus(404)\nself.getPage(\"/services/rest/album/4\", method=\"PUT\",\nbody=query_string,\nheaders=[(\"Accept\", \"application/json\")])\nself.assertStatus(200)\nself.assertHeader('Content-Type', 'application/json')\ndef test_06_REST_DELETE(self):\nself.getPage(\"/services/rest/album/4\", method=\"DELETE\")\nself.assertStatus(200)\n# DELETE is idempotent and should always return 200 in case\n# of success\nself.getPage(\"/services/rest/album/4\", method=\"DELETE\")\nself.assertStatus(200)\ndef test_05_REST_Collection_GET(self):\nself.getPage(\"/services/rest/albums/3\")\nself.assertStatus(400, 'Invalid range')\nself.getPage(\"/services/rest/albums/a\")\nself.assertStatus(400, 'Invalid range')\nself.getPage(\"/services/rest/albums/0-\")\nself.assertStatus(400, 'Invalid range')\nself.getPage(\"/services/rest/albums/a+3\")\nself.assertStatus(400, 'Invalid range')\nself.getPage(\"/services/rest/albums/3-a\")\nself.assertStatus(400, 'Invalid range')\nself.getPage(\"/services/rest/albums/0+3\")\nself.assertStatus(400, 'Invalid range')\n# valid range but missing Accept header\nself.getPage(\"/services/rest/albums/0-3\")\nself.assertStatus(406)\nself.getPage(\"/services/rest/albums/0-3\",\nheaders=[(\"Accept\", \"application/json\")])\nself.assertStatus(200)\nself.assertHeader('Content-Type', 'application/json')\njson = simplejson.loads(self.body)\nself.failUnless(isinstance(json, list))\nself.failUnlessEqual(len(json), 3)\n\n```", "```py\nimport os.path\nimport sys\n# Tell Python where to find our application's modules.\nsys.path.append(os.path.abspath('..'))\n# CherryPy main test module\nfrom cherrypy.test import test as cptest\n# load the global application settings\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\nconf.from_ini(os.path.join(current_dir, 'application.conf'))\nfrom models import Photoblog, Album, Film, Photo\n# dejavu main arena object\narena = storage.arena\n# register our models with dejavu\nstorage.setup()\ndef initialize():\nfor cls in (Photoblog, Album, Film, Photo):\narena.create_storage(cls)\ndef shutdown():\nfor cls in (Photoblog, Album, Film, Photo):\nif arena.has_storage(cls):\narena.drop_storage(cls)\ndef run():\n\"\"\"\nentry point to the test suite\n\"\"\"\ntry:\ninitialize()\n# modules name without the trailing .py\n# that this test will run. They must belong\n# to the same directory as test.py\ntest_list = ['test_models', 'test_services']\ncptest.CommandLineParser(test_list).run()\nfinally:\nshutdown()\nprint\nraw_input('hit enter to terminate the test')\nif __name__ == '__main__':\nrun()\n\n```", "```py\nsylvain@[test]$ python test.py --help\nCherryPy Test Program\nUsage:\ntest.py --server=* --host=127.0.0.1 --port=8080 --1.0 --cover\n--basedir=path --profile --validate --conquer --dumb --tests**\n* servers:\n--server=modpygw: modpygw\n--server=wsgi: cherrypy._cpwsgi.CPWSGIServer (default)\n--server=cpmodpy: cpmodpy\n--host=<name or IP addr>: use a host other than the default\n(127.0.0.1).\nNot yet available with mod_python servers.\n--port=<int>: use a port other than the default (8080)\n--1.0: use HTTP/1.0 servers instead of default HTTP/1.1\n--cover: turn on code-coverage tool\n--basedir=path: display coverage stats for some path other than\n--cherrypy.\n--profile: turn on profiling tool\n--validate: use wsgiref.validate (builtin in Python 2.5).\n--conquer: use wsgiconq (which uses pyconquer) to trace calls.\n--dumb: turn off the interactive output features.\n** tests:\n--test_models\n--test_services\n\n```", "```py\nfrom cherrypy.test import helper\nunit testingweb application# default blog name for the test suite\nblog_name = u\"photoblog\"\nfrom models import Photoblog\nclass PhotoblogTest(helper.CPWebCase):\ndef photoblog(self):\nblog = Photoblog.find_by_name(blog_name)\nif not blog:\nself.fail(\"Could not find blog '%s'\" % blog_name)\nreturn blog\nphotoblog = property(photoblog, doc=\"Returns a blog object to\nwork against\")\n\n```", "```py\nfrom lib import storage\nimport services\nfrom models import Album, Film, Photo\ndef populate_storage():\nphotoblog = Photoblog()\nphotoblog.create(blog_name, u'Yeah')\na1 = Album()\na1.create(photoblog, \"Test album\",\n\"Test\", \"blah blah\", \"more blah blah\")\ndef reset_storage():\n# here we simply remove every object a test has left\n# in the storage so that we have a clean\n# storage for the next test case run\nphotoblog = Photoblog.find_by_name(blog_name)\nphotoblog.delete()\ndef setup_photoblog_server():\n# Update the CherryPy global configuration\ncherrypy.config.update(os.path.join(current_dir, 'http.conf'))\n# fill the storage with default values for the purpose of the\n#test\npopulate_storage()\n# Construct the published trees\nservices_app = services.construct_app()\n# Mount the applications on the '/' prefix\nengine_conf_path = os.path.join(current_dir, 'engine.conf')\nservice_app = cherrypy.tree.mount(services_app, '/services',\nconfig=engine_conf_path)\nservice_app.merge(services.services_conf)\ndef teardown_photoblog_server():\nreset_storage()\n\n```", "```py\nimport httplib\nimport os.path\nimport urllib\nimport cherrypy\nimport simplejson\nfrom models import Photoblog, Album, Film, Photo\nfrom blogtest import PhotoblogTest, blog_name, \\\nsetup_photoblog_server, teardown_photoblog_server\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\ndef setup_server():\nsetup_photoblog_server()\ndef teardown_server():\nteardown_photoblog_server()\n# Here we insert the TestServicesREST class definition\n# that we have seen at the beginning of this section\n\n```", "```py\nsylvain@[test]$ python test.py\nPython version used to run this test script: 2.5\nCherryPy version 3.0.0\nHTTP server version HTTP/1.1\nRunning tests: cherrypy._cpwsgi.CPWSGIServer\nNo handlers could be found for logger \"cherrypy.error\"\ntest_00_Photoblog_unit (test_models.TestModels) ... ok\ntest_01_Photoblog_create (test_models.TestModels) ... ok\ntest_02_Photoblog_retrieve_by_name (test_models.TestModels) ... ok\ntest_03_Photoblog_retrieve_by_unknown_name (test_models.TestModels)\n... ok\ntest_04_Photoblog_retrieve_by_unsupported_id_type\n(test_models.TestModels) ... ok\ntest_05_Photoblog_update (test_models.TestModels) ... ok\ntest_06_Photoblog_populate (test_models.TestModels) ... ok\ntest_10_Album_unit (test_models.TestModels) ... ok\ntest_99_Photoblog_delete (test_models.TestModels) ... ok\ntest_00_REST (test_services.TestServicesREST) ... ok\ntest_01_REST_HEAD (test_services.TestServicesREST) ... ok\ntest_02_REST_GET (test_services.TestServicesREST) ... ok\ntest_03_REST_POST (test_services.TestServicesREST) ... ok\ntest_04_REST_PUT (test_services.TestServicesREST) ... ok\ntest_05_REST_Collection_GET (test_services.TestServicesREST) ... ok\ntest_06_REST_DELETE (test_services.TestServicesREST) ... ok\n\n```", "```py\nsylvain@[test]$ python test.py --models\nPython version used to run this test script: 2.5\nCherryPy version 3.0.0\nHTTP server version HTTP/1.1\nRunning tests: cherrypy._cpwsgi.CPWSGIServer\nNo handlers could be found for logger \"cherrypy.error\"\ntest_00_Photoblog_unit (test_models.TestModels) ... ok\ntest_01_Photoblog_create (test_models.TestModels) ... ok\ntest_02_Photoblog_retrieve_by_name (test_models.TestModels) ... ok\ntest_03_Photoblog_retrieve_by_unknown_name (test_models.TestModels)\n... ok\ntest_04_Photoblog_retrieve_by_unsupported_id_type (test_models.\nTestModels) ... ok\ntest_05_Photoblog_update (test_models.TestModels) ... ok\ntest_06_Photoblog_populate (test_models.TestModels) ... ok\ntest_10_Album_unit (test_models.TestModels) ... ok\ntest_99_Photoblog_delete (test_models.TestModels) ... ok\n\n```", "```py\nfrom funkload.FunkLoadTestCase import FunkLoadTestCase\nclass LoadHomePage(FunkLoadTestCase):\ndef test_homepage(self):\nserver_url = self.conf_get('main', 'url')\nnb_time = self.conf_getInt('test_homepage', 'nb_time')\nhome_page = \"%s/\" % server_url\nfor i in range(nb_time):\nself.logd('Try %i' % i)\nself.get(home_page, description='Get gome page')\nif __name__ in ('main', '__main__'):\nimport unittest\nunittest.main()\n\n```", "```py\n[main]\ntitle=Photoblog home page\ndescription=Access the photoblog home page\nurl=http://localhost:8080\n[test_homepage]\ndescription=Access %(nb_time)s times the following pages:\n%(pages)s.\nnb_time=3\npages=/\n[ftest]\nlog_to = console file\nlog_path = logs/load_home_page.log\nresult_path = logs/load_home_page.xml\nsleep_time_min = 0\nsleep_time_max = 2\n\n```", "```py\nsylvain@[test]$ python test_load_home_page.py\ntest_homepage: Starting -----------------------------------\nAccess 3 times the following pages: /.\ntest_homepage: Try 0\ntest_homepage: GET: http://localhost:8080/\nPage 1: Get gome page ...\ntest_homepage: Done in 0.039s\ntest_homepage: Load css and images...\ntest_homepage: Done in 0.044s\ntest_homepage: Try 1\ntest_homepage: GET: http://localhost:8080/\nPage 2: Get gome page ...\ntest_homepage: Done in 0.041s\ntest_homepage: Load css and images...\ntest_homepage: Done in 0.000s\ntest_homepage: Try 2\ntest_homepage: GET: http://localhost:8080/\nPage 3: Get gome page ...\ntest_homepage: Done in 0.051s\ntest_homepage: Load css and images...\ntest_homepage: Done in 0.000s\n.\n----------------------------------------------------------------------\nRan 1 test in 2.149s\nOK\n\n```", "```py\n[bench]\ncycles = 5:10:20\nduration = 30\nstartup_delay = 0.05\nsleep_time = 1\ncycle_time = 1\nlog_to = file\nlog_path = logs/load_home_page.log\nresult_path = logs/load_home_page.xml\nsleep_time_min = 0\nsleep_time_max = 0.6\n\n```", "```py\nsylvain@[test]$ fl-run-bench test_load_home_page.py \\\nLoadHomePage.test_homepage\n=======================================\nBenching LoadHomePage.test_homepage\n=======================================\nAccess 3 times the following pages: /.\n------------------------------------------------------------------------\nConfiguration\n=============\n* Current time: 2007-02-28T13:43:22.376339\n* Configuration file: load/LoadHomePage.conf\n* Log xml: logs/load_home_page.xml\n* Server: http://localhost:8080\n* Cycles: [5, 10, 20]\n* Cycle duration: 30s\n* Sleeptime between request: from 0.0s to 0.6s\n* Sleeptime between test case: 1.0s\n* Startup delay between thread: 0.05s\nBenching\n========\nCycle #0 with 5 virtual users\n-----------------------------\n* Current time: 2007-02-28T13:43:22.380481\n* Starting threads: ..... done.\n* Logging for 30s (until 2007-02-28T13:43:52.669762): .... done.\n* Waiting end of threads: ..... done.\n* Waiting cycle sleeptime 1s: ... done.\n* End of cycle, 33.46s elapsed.\n* Cycle result: **SUCCESSFUL**, 76 success, 0 failure, 0 errors.\nCycle #1 with 10 virtual users\n------------------------------\n* Current time: 2007-02-28T13:43:55.837831\n* Starting threads: .... done.\n* Logging for 30s (until 2007-02-28T13:44:26.681356): .... done.\n* Waiting end of threads: .......... done.\n* Waiting cycle sleeptime 1s: ... done.\n* End of cycle, 34.02s elapsed.\n* Cycle result: **SUCCESSFUL**, 145 success, 0 failure, 0 errors.\nCycle #2 with 20 virtual users\n------------------------------\n* Current time: 2007-02-28T13:44:29.859868\n* Starting threads: ....... done.\n* Logging for 30s (until 2007-02-28T13:45:01.191106):\n* Waiting end of threads: .................... done.\n* Waiting cycle sleeptime 1s: ... done.\n* End of cycle, 35.59s elapsed.\n* Cycle result: **SUCCESSFUL**, 203 success, 0 failure, 0 errors.\nResult\n======\n* Success: 424\n* Failures: 0\n* Errors: 0\nBench status: **SUCCESSFUL**\n\n```", "```py\nsylvain@[test]$ fl-build-report --html -o reports\nlogs/load_home_page.xml\nCreating html report: ...done:\nreports/test_homepage-2007-02-28T13-43-22/index.html\n\n```", "```py\nimport datetime\nimport os.path\nimport cherrypy\nimport simplejson\n_header = \"\"\"<html>\n<head><title>Selenium test</title></head>\n<script type=\"application/javascript\" src=\"img/MochiKit.js\">\n</script>\n<script type=\"application/javascript\" src=\"img/New.js\">\n</script>\n<script type=\"application/javascript\">\nvar fetchReport = function() {\nvar xmlHttpReq = getXMLHttpRequest();\nxmlHttpReq.open(\"GET\", \"/fetch_report\", true);\nxmlHttpReq.setRequestHeader('Accept', 'application/json');\nvar d = sendXMLHttpRequest(xmlHttpReq);\nd.addCallback(function (data) {\nvar reportData = evalJSONRequest(data);\nswapDOM($('reportName'), SPAN({'id': 'reportName'},\nreportData['name']));\nswapDOM($('reportAuthor'), SPAN({'id': 'reportAuthor'},\nreportData['author']));\nswapDOM($('reportUpdated'), SPAN({'id': 'reportUpdated'},\nreportData['updated']));\n});\n}\n</script>\n<body>\n<div>\n<a href=\"javascript:void(0);\" onclick=\"fetchReport();\">Get report via\nAjax</a>\n<br />\n<a href=\"report\">Get report</a>\n</div>\n<br />\n\"\"\"\n_footer = \"\"\"\n</body>\n</html>\n\"\"\"\nclass Dummy:\n@cherrypy.expose\ndef index(self):\nreturn \"\"\"%s\n<div id=\"report\">\n<span>Name:</span>\n<span id=\"reportName\"></span>\n<br />\n<span>Author:</span>\n<span id=\"reportAuthor\"></span>\n<br />\n<span>Updated:</span>\n<span id=\"reportUpdated\"></span>\n</div>%s\"\"\" % (_header, _footer)\n@cherrypy.expose\ndef report(self):\nnow = datetime.datetime.now().strftime(\"%d %b. %Y, %H:%M:%S\")\nreturn \"\"\"%s\n<div id=\"report\">\n<span>Name:</span>\n<span id=\"reportName\">Music report (HTML)</span>\n<br />\n<span>Author:</span>\n<span id=\"reportAuthor\">Jon Doe</span>\n<br />\n<span>Updated:</span>\n<span id=\"reportUpdated\">%s</span>\n</div>%s\"\"\" % (_header, now, _footer)\n@cherrypy.expose\ndef fetch_report(self):\nnow = datetime.datetime.now().strftime(\"%d %b. %Y, %H:%M:%S\")\ncherrypy.response.headers['Content-Type'] =\n'application/json'\nreturn simplejson.dumps({'name': 'Music report (Ajax)',\n'author': 'Jon Doe',\n'updated': now})\nif __name__ == '__main__':\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\nconf = {'/test': {'tools.staticdir.on': True,\n'tools.staticdir.dir': \"test\",\n'tools.staticdir.root': current_dir},\n'/MochiKit': {'tools.staticdir.on': True,\n'tools.staticdir.dir': \"MochiKit\",\n'tools.staticdir.root': current_dir},\n'/selenium': {'tools.staticdir.on': True,\n'tools.staticdir.dir': \"selenium\",\n'tools.staticdir.root': current_dir}}\ncherrypy.quickstart(Dummy(), config=conf)\n\n```", "```py\n<html>\n<head />\n<body>\n<table>\n<thead>\n<tr><td rowspan=\"1\" colspan=\"3\">HTML Test</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>open</td>\n<td>/</td>\n<td></td>\n</tr>\n<tr>\n<td>clickAndWait</td>\n<td>link=Get report</td>\n<td></td>\n</tr>\n<tr>\n<td>verifyTextPresent</td>\n<td></td>\n<td>HTML</td>\n</tr>\n</tbody>\n</table>\n</body>\n</html>\n\n```", "```py\n<html>\n<head />\n<body>\n<table cellpadding=\"1\" cellspacing=\"1\" border=\"1\">\n<thead>\n<tr><td rowspan=\"1\" colspan=\"3\">Test Ajax</td></tr>\n</thead>\n<tbody>\n<tr>\nSeleniumcore<td>open</td>\n<td>/</td>\n<td></td>\n</tr>\n<tr>\n<td>click</td>\n<td>link=Get report via Ajax</td>\n<td></td>\n</tr>\n<tr>\n<td>pause</td>\n<td>300</td>\n<td></td>\n</tr>\n<tr>\n<td>verifyTextPresent</td>\n<td></td>\n<td>Ajax</td>\n</tr>\n</tbody>\n</table>\n</body>\n</html>\n\n```", "```py\n<html>\n<head>\n<link rel=\"stylesheet\" type=\"text/css\"\nhref=\"/selenium/core/selenium.css\" />\n<head>\n<body>\n<table class=\"selenium\">\n<tbody>\n<tr><td><b>Test Suite</b></td></tr>\n<tr><td><a href=\"test_html.html\">Test HTML</a></td></tr>\n<tr><td><a href=\"test_ajax.html\">Test Ajax</a></td></tr>\n</tbody>\n</table>\n</body>\n</html>\n\n```", "```py\nhttp://localhost:8080/selenium/core/TestRunner.html\n\n```", "```py\nfrom selenium import selenium\nimport unittest, time, re\nclass TestHTML(unittest.TestCase):\ndef setUp(self):\nself.verificationErrors = []\nself.selenium = selenium(\"localhost\", 4444, \"*firefox\",\n\"http://localhost:8080\")\nself.selenium.start()\ndef test_TestHTML(self):\n# Get a reference to our selenium object\nsl = self.selenium\nsl.open(\"/\")\nsl.click(\"link=Get report\")\nsl.wait_for_page_to_load(\"5000\")\ntry: self.failUnless(sl.is_text_present(\"HTML\"))\nexcept AssertionError, e: self.verificationErrors.append(str(e))\ndef tearDown(self):\nself.selenium.stop()\nself.assertEqual([], self.verificationErrors)\nif __name__ == \"__main__\":\nunittest.main()\n\n```", "```py\nsylvain@[selenium]$ java -jar server/selenium-server.jar \n\n```", "```py\npython test_html.py\n.\n----------------------------------------------------------------------\nRan 1 test in 6.877s\nOK\n\n```", "```py\nqueryString =\ncmd=getNewBrowserSession&1=%2Afirefox&2=http%3A%2F%2Flocalhost%3A8080\nPreparing Firefox profile...\nLaunching Firefox...\n3 oct. 2006 17:35:10 org.mortbay.util.Container start\nINFO: Started HttpContext[/,/]\nGot result: OK,1159893304958\nqueryString = cmd=open&1=%2F&sessionId=1159893304958\nGot result: OK\nqueryString = cmd=click&1=link%3DGet+report&sessionId=1159893304958\nGot result: OK\nqueryString = cmd=waitForPageToLoad&1=5000&sessionId=1159893304958\nGot result: OK\nqueryString = cmd=isTextPresent&1=HTML&sessionId=1159893304958\nGot result: OK,true\nqueryString = cmd=testComplete&sessionId=1159893304958\nKilling Firefox...\nGot result: OK\n\n```"]