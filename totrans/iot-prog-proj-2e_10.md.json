["```py\n    import time\n    import board\n    import busio\n    import digitalio\n    import adafruit_rfm9x\n    import wifi\n    import socketpool\n    from adafruit_minimqtt.adafruit_minimqtt import MQTT\n    ```", "```py\n    WIFI_SSID = 'MySSID'\n    WIFI_PASSWORD = 'wifi-password'\n    ```", "```py\n    led = digitalio.DigitalInOut(board.GP5)\n    led.direction = digitalio.Direction.OUTPUT\n    ```", "```py\n    def flash_led(times, duration):\n        for _ in range(times):\n            led.value = True\n            time.sleep(duration)\n            led.value = False\n            time.sleep(duration)\n    ```", "```py\n    def connect_to_wifi(ssid, password):\n        while True:\n            try:\n                print(\"Trying to connect to WiFi...\")\n                wifi.radio.connect(ssid, password)\n                print(\"Connected to Wi-Fi!\")\n                flash_led(4, 1)\n                break\n            except Exception as e:\n                print(\"Failed to connect to WiFi. Retrying...\")\n                flash_led(2, 2)\n                time.sleep(5)\n    connect_to_wifi(WIFI_SSID, WIFI_PASSWORD)\n    flash_led(4, 1)\n    ```", "```py\n    pool = socketpool.SocketPool(wifi.radio)\n    ```", "```py\n    MQTT_SERVER = \"mqtt-server-url\"\n    MQTT_PORT = 18756\n    USERNAME = \"instance-username\"\n    PASSWORD = \"instance-password\"\n    DEVICE_ID = \"LoRaReceiver\"\n    MQTT_TOPIC = \"WeatherInfo\"\n    ```", "```py\n    spi = busio.SPI(board.GP18, MOSI=board.GP19, MISO=board.GP16)\n    cs = digitalio.DigitalInOut(board.GP17)\n    rst = digitalio.DigitalInOut(board.GP14)\n    ```", "```py\n    rfm9x = adafruit_rfm9x.RFM9x(spi, cs, rst, 915.0)\n    ```", "```py\n    mqtt_client = MQTT(broker=MQTT_SERVER, port=MQTT_PORT, username=USERNAME, password=PASSWORD, socket_pool=pool)\n    ```", "```py\n    mqtt_client.connect()\n    print(\"Listening for LoRa messages...\")\n    ```", "```py\n    while True:\n        packet = rfm9x.receive()\n        if packet is not None:\n            message = packet.decode(\"utf-8\")\n            print(\"Received LoRa message:\", message)\n            flash_led(2, 0.5)\n            mqtt_client.publish(MQTT_TOPIC, message)\n            print(\"Sent MQTT message:\", message)\n    ```", "```py\n    from machine import Pin\n    import utime\n    red = Pin(15, Pin.OUT)\n    green = Pin(13, Pin.OUT)\n    blue = Pin(12, Pin.OUT)\n    def set_color(r, g, b):\n        red.value(r)\n        green.value(g)\n        blue.value(b)\n    while True:\n        # Red\n        set_color(0, 1, 1)\n        utime.sleep(1)\n        # Green\n        set_color(1, 0, 1)\n        utime.sleep(1)\n        # Blue\n        set_color(1, 1, 0)\n        utime.sleep(1)\n    ```", "```py\n    from machine import Pin, PWM\n    import utime\n    class Servo:\n        def __init__(self, pin):\n            self.servo = PWM(Pin(pin))\n            self.servo.freq(50)\n        def set_position(self, angle):\n            # Reverse the angle\n            reversed_angle = 180 - angle\n            # Convert the reversed angle to duty cycle\n            duty = int((reversed_angle / 18) + 2)\n            self.servo.duty_u16(duty * 65536 // 100)\n    ```", "```py\n    from servo import Servo\n    import utime\n    servo = Servo(14)\n    servo.set_position(0)\n    utime.sleep(1)\n    servo.set_position(90)\n    utime.sleep(1)\n    servo.set_position(180)\n    utime.sleep(1)\n    # Return servo to initial position\n    servo.set_position(0)\n    ```", "```py\n    from machine import Pin\n    import utime\n    class Indicator:\n        def __init__(self):\n            self.red = Pin(15, Pin.OUT)\n            self.green = Pin(13, Pin.OUT)\n            self.blue = Pin(12, Pin.OUT)\n        def set_color(self, r, g, b):\n            self.red.value(r)\n            self.green.value(g)\n            self.blue.value(b)\n        def set_indicator(self, value):\n            # Turn off all LEDs initially\n            self.set_color(1, 1, 1)\n            if value <= 30:\n                # Turn on red LED\n                self.set_color(0, 1, 1)\n            elif 30 < value <= 50:\n                # Turn on green LED\n                self.set_color(1, 0, 1)\n            else:\n                # Turn on blue LED\n                self.set_color(1, 1, 0)\n        def flash_led(self, times):\n            for _ in range(times):\n                self.set_color(0, 0, 0)\n                utime.sleep(0.5)\n                self.set_color(1, 1, 1)\n                utime.sleep(0.5)\n    ```", "```py\n    from machine import Pin, PWM\n    import utime\n    class Servo:\n        def __init__(self, pin):\n            self.servo = PWM(Pin(pin))\n            self.servo.freq(50)\n        def set_position(self, value):\n            int_value = int(value)\n            angle = 180 - (int_value / 40) * 180\n            angle = max(0, min(angle, 180))\n            # Convert the angle to duty cycle\n            duty = int((angle / 18) + 2)\n            self.servo.duty_u16(duty * 65536 // 100)\n    ```", "```py\n    import network\n    import utime\n    from umqtt.simple import MQTTClient\n    from servo import Servo\n    from indicator import Indicator\n    ```", "```py\n    class WeatherDisplay:\n        def __init__(self):\n            # WiFi Information\n            self.ssid = \"MySSID\"\n            self.wifi_password = \"ssid-password\"\n            # MQTT Information\n            self.mqtt_server = \"driver.cloudmqtt.com\"\n            self.mqtt_port = 18756\n            self.username = \"mqtt-username\"\n            self.mqtt_password = \"mqtt-password\"\n            self.device_id = \"WeatherDisplay\"\n            self.mqtt_topic = \"WeatherInfo\"\n            self.indicator = Indicator()\n            self.servo = Servo(14)\n    ```", "```py\n        def connect_wifi(self):\n            wlan = network.WLAN(network.STA_IF)\n            wlan.active(True)\n            if not wlan.isconnected():\n                print('Connecting to WiFi...')\n                wlan.connect(self.ssid, self.wifi_password)\n                while not wlan.isconnected():\n                    pass\n            print('WiFi connected, IP:', wlan.ifconfig()[0])\n            self.indicator.flash_led(4)\n    ```", "```py\n        def connect_mqtt(self):\n            self.client = MQTTClient(self.device_id,\n                                     self.mqtt_server,\n                                     self.mqtt_port,\n                                     self.username,\n                                     self.mqtt_password)\n            self.client.set_callback(\n                         self.on_message_received)\n            self.client.connect()\n            self.client.subscribe(self.mqtt_topic)\n    ```", "```py\n        def on_message_received(self, topic, msg):\n            print(\"Received:\", topic, msg.decode())\n            temperature, humidity =\n                self.parse_message(msg)\n            if temperature is not None:\n                self.servo.set_position(temperature)\n            if humidity is not None:\n                self.indicator.set_indicator(humidity)\n    ```", "```py\n        def parse_message(self, msg):\n            try:\n                parts = msg.decode().split(',')\n                temperature_str = parts[0].split('Temp:')[1].split('C')[0].strip()\n                humidity_str = parts[1].split('Humidity:')[1].split('%')[0].strip()\n                temperature = float(temperature_str)\n                humidity = float(humidity_str)\n                return temperature, humidity\n            except Exception as e:\n                print(\"Error parsing message:\", str(e))\n                return None, None\n    ```", "```py\n        def run(self):\n            self.connect_wifi()\n            self.connect_mqtt()\n            while True:\n                try:\n                    self.client.check_msg()\n                except Exception as e:\n                    print(\"Error checking MQTT message:\",\n                           str(e))\n                    utime.sleep(5)\n    ```", "```py\n    # Create and run the weather display\n    weather_display = WeatherDisplay()\n    weather_display.run()\n    ```"]