["```py\nimport RPi.GPIO as GPIO\nimport time\nGPIO.setmode(GPIO.BCM)\nGPIO.setwarnings(False)\nPIR = 24\nLIGHT = 23\nGPIO.setup(DOPPLER,GPIO.IN)\nGPIO.setup(BUZZER,GPIO.OUT)\nWhile True:\n   if GPIO.input(PIR) == 1:\n       GPIO.output(LIGHT,GPIO.HIGH)\n   if GPIO.input(PIR) == 0:\n       GPIO.output(LIGHT,GPIO.LOW)\n```", "```py\nimport RPi.GPIO as GPIO\nimport time\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setwarnings(False)\n\nPIR = 24\nLIGHT = 23\nTIME = 5\n\nGPIO.setup(PIR,GPIO.IN)\nGPIO.setup(BUZZER,GPIO.OUT)\n\nWhile True:\n\n   If GPIO.input(PIR) == 1:\n\n       M = datetime.datetime.now().strftime('%M')\n       M_final= M + TIME\n\n       for M < M_final:\n\n         GPIO.output(LIGHT,GPIO.HIGH)\n         M = datetime.datetime.now().strftime('%M')\n\n         if GPIO.input(PIR) == 1:\n            M_final = M_final + 1 \n\n    if GPIO.input(PIR) = 0:\n\n        GPIO.output(LIGHT, GPIO.LOW)}\n\n```", "```py\n         if GPIO.input(PIR) == 1\n            M_final = M_final + 1 \n```", "```py\nimport GPIO library\nimport RPi.GPIO as GPIO\nimport time\n\nimport Adafruit_ADS1x15\nadc0 = Adafruit_ADS1x15.ADS1115()\n\nGAIN = 1\nLIGHT = 23\n\nadc0.start_adc(0, gain=GAIN)\nadc1.start_adc(1, gain=GAIN)\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setwarnings(False)\n\nwhile True:\n\n   F_value = adc0.get_last_result()\n   F1 =    (1.0 / (F_value / 13.15)) - 0.35\n\n   time.sleep(0.1)\n\n   F_value = adc0.get_last_result()\n   F2 =    (1.0 / (F_value / 13.15)) - 0.35\n\n   F0_final = F1-F2\n\n   if F0 > 10 :\n\n        Time0 =  time.time()\n\n   F_value = adc1.get_last_result()\n   F1 =    (1.0 / (F_value / 13.15)) - 0.35\n\n   time.sleep(0.1)\n\n   F_value = adc1.get_last_result()\n   F2 =    (1.0 / (F_value / 13.15)) - 0.35\n\n   F1_final = F1-F2\n\n   if F1 > 10: \n\n        Time1 =  time.time()\n\n    if Time1 > Time0:\n\n        GPIO.output(LIGHT, GPIO.HIGH)\n\n    if Time1 < Time0:\n\n        GPIO.output(LIGHT, GPIO.LOW)      }\n```", "```py\n   F_value = adc0.get_last_result()\n   F1 =    (1.0 / (F_value / 13.15)) - 0.35\n\n   time.sleep(0.1)\n\n   F_value = adc0.get_last_result()\n   F2 =    (1.0 / (F_value / 13.15)) - 0.35\n```", "```py\n  F0_final = F1-F2\n```", "```py\n   if F0 > 10 :\n\n        Time0 =  time.time()\n```", "```py\n   F_value = adc1.get_last_result()\n   F1 =    (1.0 / (F_value / 13.15)) - 0.35\n\n   time.sleep(0.1)\n\n   F_value = adc1.get_last_result()\n   F2 =    (1.0 / (F_value / 13.15)) - 0.35\n\n   F1_final = F1-F2\n\n   if F1 > 10: \n\n        Time1 =  time.time()\n```", "```py\n    if Time1 > Time0:\n\n        GPIO.output(LIGHT, GPIO.HIGH)\n```", "```py\n    if Time1 < Time0:\n\n        GPIO.output(LIGHT, GPIO.LOW)\n```", "```py\nimport GPIO library\n   import RPi.GPIO as GPIO\n   import time\n   import time\n   import Adafruit_ADS1x15\n   adc0 = Adafruit_ADS1x15.ADS1115()\nGAIN = 1\n adc0.start_adc(0, gain=GAIN)\nadc1.start_adc(1, gain=GAIN)\nGPIO.setmode(GPIO.BCM)\nGPIO.setwarnings(False)\nPCount = 0\nwhile True:\n   F_value = adc0.get_last_result()\n   F1 = (1.0 / (F_value / 13.15)) - 0.35\n   time.sleep(0.1)\n   F_value = adc0.get_last_result()\n   F2 = (1.0 / (F_value / 13.15)) - 0.35\n   F0_final = F1-F2\n   if F0 > 10 :\n        Time0 = time.time()\n   F_value = adc1.get_last_result()\n   F1 = (1.0 / (F_value / 13.15)) - 0.35\n   time.sleep(0.1)\n   F_value = adc1.get_last_result()\n   F2 = (1.0 / (F_value / 13.15)) - 0.35\n   F1_final = F1-F2\n   if F1 > 10:\n        Time1 = time.time()\n    if Time1 > Time0:\n        PCount = PCount + 1\n    if Time1 < Time0:\n        PCount = PCount - 1\n\nif PCount > 0:\n\n           GPIO.output(LIGHT, GPIO.HIGH)\n       else if PCount = 0:\n          GPIO.output(LIGHT, GPIO.LOW)        \n```", "```py\n    if Time1 > Time0:\n\n        PCount = PCount + 1\n```", "```py\n    if Time1 < Time0:\n\n        PCount = PCount - 1\n```", "```py\n    if PCount > 0:\n\n       GPIO.output(LIGHT, GPIO.HIGH)\n```", "```py\n    else if PCount = 0:\n\n       GPIO.output(LIGHT, GPIO.LOW)\n```", "```py\nimport RPi.GPIO as GPIO\nimport time                             \nGPIO.setmode(GPIO.BCM)       \nGPIO.setup(18,GPIO.OUT)         \nI = 0\npwm= GPIO.PWM(18,50)\n\nfor I < 100:\n\n    I = I+1\n    pwm.start(I)\n    time.sleep(0.1)\n\nGPIO.cleanup()}\n```", "```py\nimport RPi.GPIO as GPIO\nimport time \nimport Adafruit_DHT\n\nGPIO.setmode(GPIO.BCM)\n\nFAN = 18\nAC = 17\n\npwm= GPIO.PWM(18,50)\nGPIO.setup(FAN,GPIO.OUT)\nGPIO.setup(AC, GPIO.OUT)\n\nwhile True:\n\n    humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)\n\n    if temperature =>20 && temperature <=30:\n\n        Duty = 50 + ((temperature-25)*10)\n        pwm.start(Duty)\n\n    if temperature <22 :\n\n         GPIO.output(AC, GPIO.LOW)\n\n    if temperature >= 24\n\n         GPIO.output(AC, GPIO.HIGH)}\n\n```", "```py\n    humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)\n\n    if temperature =>20 && temperature <=30:\n\n        Duty = 50 + ((temperature-25)*10)\n        pwm.start(Duty)\n```", "```py\nimport RPi.GPIO as GPIO\nimport time \nimport Adafruit_DHT\n\nGPIO.setmode(GPIO.BCM)\n\nFAN = 18\nAC = 17\nPIR = 22\nPIN = 11\nSensor = 4\n\npwm= GPIO.PWM(18,50)\nGPIO.setup(FAN,GPIO.OUT)\nGPIO.setup(AC, GPIO.OUT)\n\nwhile True:\n\n    humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)\n    H = datetime.datetime.now().strftime('%H') \n    M = datetime.datetime.now().strftime('%M')\n\n    if H <= 6 && H <= 22:\n\n        if M <=58 :\n\n           M = datetime.datetime.now().strftime('%M')\n           humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)\n\n           if GPIO.input(PIR) == 0 :\n\n                Movement = Movement + 1\n                time.sleep(10)\n\n           if temperature < 28:\n\n                if Movement > 5 :\n\n                    Duty = Duty + 10\n                    pwm.start(Duty)\n                    Movement = 0     \n\n        if M = 59 : \n\n            if Movement = 0 :\n\n                Duty = Duty -10\n                pwm.start(Duty)\n\n            Movement = 0\n\n        if temperature <22 :\n\n           GPIO.output(AC, GPIO.LOW)\n\n       if temperature >= 24 && H <= 6 && H >= 22:\n\n           GPIO.output(AC, GPIO.HIGH)\n\n        if temperature > 27\n\n            pwm.start(100)\n\n    for H > 7 && H < 20 \n\n        GPIO.output(AC, GPIO.LOW)\n\n    if H = 20 \n\n        GPIO.output(AC,GPIO.HIGH)\n\n}\n```", "```py\n    if H <= 6 && H <= 22:\n\n        if M <=58 :\n\n           M = datetime.datetime.now().strftime('%M')\n           humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)\n```", "```py\n           if GPIO.input(PIR) == 0 :\n\n                Movement = Movement + 1\n                time.sleep(10)\n\n```", "```py\n           if temperature < 28:\n\n                if Movement > 5 :\n\n                    Duty = Duty + 10\n                    pwm.start(Duty)\n                    Movement = 0\n```", "```py\n        if M = 59 : \n\n            if Movement = 0 :\n\n                Duty = Duty -10\n                pwm.start(Duty)\n\n            Movement = 0\n```", "```py\n        if temperature <22 :\n\n           GPIO.output(AC, GPIO.LOW)\n\n        if temperature >= 24 && H <= 6 && H >= 22: \n\n           GPIO.output(AC, GPIO.HIGH)\n\n        if temperature > 27\n\n            pwm.start(100)\n```", "```py\n    for H > 7 && H < 20 \n\n        GPIO.output(AC, GPIO.LOW)\n\n    if H = 20 \n\n        GPIO.output(AC,GPIO.HIGH)\n```", "```py\nimport RPi.GPIO as GPIO\nimport time\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setwarnings(False)\n\nS0 = 21\nS1 = 22\nS2 = 23\nS3 = 24\n\nGPIO.setup(S0,GPIO.OUT)\nGPIO.setup(S1,GPIO.OUT) \nGPIO.setup(S2,GPIO.OUT)\n\nWhile True:\n\n    GPIO.output(S0,1)\n    GPIO.output(S1,0)\n    GPIO.output(S2,1)\n    GPIO.output(S4,1)\n\n    time.sleep(1)\n\n    GPIO.output(S0,1)\n    GPIO.output(S1,1)\n    GPIO.output(S2,1)\n    GPIO.output(S4,1)\n\n    time.sleep(1)\n\n    GPIO.output(S0,1)\n    GPIO.output(S1,0)\n    GPIO.output(S2,0)\n    GPIO.output(S4,1)\n\n    time.sleep(1)\n\n    'GPIO.output(S0,0)\n    GPIO.output(S1,0)\n    GPIO.output(S2,0)\n    GPIO.output(S4,1)\n\n    time.sleep(1)\n\n    GPIO.output(S0,0)\n    GPIO.output(S1,1)\n    GPIO.output(S2,0)\n    GPIO.output(S4,1)\n\n    time.sleep(1) }\n```"]