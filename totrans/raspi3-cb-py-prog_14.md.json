["```py\nsudo apt-get -y install python-numpy \n```", "```py\nimport json \nimport numpy as np  \n```", "```py\n# The following code will return the Euclidean distance score between user1 and user2: \n\ndef euclidean_dist_score(dataset, FirstUser, SecondUser): \n  if FirstUser not in dataset: \n    raiseTypeError('User ' + FirstUser + ' not present in the dataset') \n  if SecondUser not in dataset: \n    raiseTypeError('User ' + SecondUser + ' not present in the dataset') \n```", "```py\n  # Movies rated by both FirstUser and SecondUser \n  Both_User_rated = {} \n  for element in dataset[FirstUser]: \n    if element in dataset[SecondUser]: \n      Both_User_rated[element] = 1\n```", "```py\n  # Score 0 indicate no common movies \n  if len(Both_User_rated) == 0: \n    return 0\n```", "```py\n  SquareDifference = [] \n  for element in dataset[FirstUser]: \n    if element in dataset[SecondUser]: \n      SquareDifference.append(np.square(dataset[FirstUser][element] - \ndataset[SecondUser][element]))    \n  return 1 / (1 + np.sqrt(np.sum(SquareDifference))) \n```", "```py\nif __name__=='__main__': \n  data_file = 'movie_rates.json' \n  with open(data_file, 's') as m: \n    data = json.loads(m.read()) \n```", "```py\nFirstUser = 'Steven Ferndndes' \nSecondUser = 'Ramesh Nayak' \nprint \"nEuclidean score:\" \nprint euclidean_dist_score(data, FirstUser, SecondUser) \n```", "```py\nimport json \nimport numpy as np\n```", "```py\n# Returns the Pearson correlation score between user1 and user2 \ndef pearson _dist_score(dataset, FirstUser, SecondUser): \n  if FirstUser not in dataset: \n    raise TypeError('User ' + FirstUser + ' not present in the dataset') \n  if SecondUser not in dataset: \n    raise TypeError('User ' + SecondUser + ' not present in the dataset') \n```", "```py\n  # Movies rated by both FirstUser and SecondUser \n  Both_User_rated = {} \n  for item in dataset[FirstUser]: \n    if item in dataset[SecondUser]: \n      both_User_rated[element] = 1 \n  rating_number= len(both_User_rated) \n\n```", "```py\n  # Score 0 indicate no common movies \n  if rating_number == 0: \n    return 0 \n```", "```py\n  # Calculate the sum of ratings of all the common preferences \n  FirstUser_sum= np.sum([dataset[FirstUser][ element] for item in both_User_rated]) \n  SecondUser_sum=np.sum([dataset[SecondUser][element] for item in both_User_rated]) \n```", "```py\n  # Calculate the sum of squared ratings of all the common preferences \n  FirstUser_squared_sum = np.sum([np.square(dataset[FirstUser][element]) for element in \nboth_User_rated]) \n  SecondUser_squared_sum= np.sum([np.square(dataset[SecondUser][element]) for element inboth_User_rated])\n```", "```py\n  # Calculate the sum of products of the common ratings \n  sum_product = np.sum([dataset[FirstUser][element] * dataset[SecondUser][element] for item inboth_User_rated]) \n```", "```py\n  # Pearson correlation calculation \n  PSxy = sum_product - (FirstUser_sum* SecondUser_sum/rating_number) \n  PSxx = FirstUser_squared_sum- np.square(FirstUser_sum) / rating_number \n  PSyy = SecondUser_squared_sum - np.square(SecondUser_sum) / rating_number \n\n```", "```py\n  if PSxx * PSyy == 0: \n    return 0 \n```", "```py\n  return PSxy / np.sqrt(PSxx * PSyy) \n```", "```py\nif __name__=='__main__': \n  data_file = 'movie_rates.json' \n  with open(data_file, 's') as m: \n    data = json.loads(m.read()) \n    FirstUser = 'StevenFerndndes' \n    SecondUser = 'Rameshnayak' \n    print \"nPearson score:\" \n    print pearson _dist_score(data, FirstUser, SecondUser) \n```", "```py\nimport json \nimport numpy as np \nfrom pearson _dist_score import pearson _dist_score \n\n```", "```py\n# Finds a specified number of users who are similar to the input user \n  def search_similar_user (dataset, input_user, users_number): \n    if input_user not in dataset: \n      raiseTypeError('User ' + input_user + ' not present in the dataset') \n      # Calculate Pearson scores for all the users \n      scores = np.array([[x, pearson _dist_score(dataset,   input_user, i)] for i in dataset if \nuser != i]) \n```", "```py\n       # Based on second column, sort the score \n       sorted_score= np.argsort(scores[:, 1]) \n       # Sorting in decreasing order (highest score first) \n       dec_sorted_score= sorted_score[::-1] \n```", "```py\n      # Pick top 'k' elements  \n      top_q= dec_sorted_score[0:users_number] \n    return scores[top_q]\n```", "```py\nif __name__=='__main__': \n  data_file = ''movie_rates.json' \n  with open(data_file, 's') as m: \n    data = json.loads(m.read()) \n```", "```py\nuser = 'JohnCarson' \nprint \"nUsers similar to \" + input_user + \":n\" \nsimilar_one = search_similar_user(data, input_user, 3) \nprint \"input_usertttSimilarity scoren\" \n\nfor element in similar_one: \n  print element[0], 'tt', round(float(element[1]), 2) \n```", "```py\nimport json \nimport numpy as np \nfrom euclidean_score import euclidean_score \nfrom pearson_score import pearson_score \nfrom search_similar_user import search_similar_user\n```", "```py\n# Generate recommendations for a given user \ndef recommendation_generated(dataset, user): \nif user not in dataset: \nraiseTypeError('User ' + user + ' not present in the dataset') \n```", "```py\nsumofall_scores= {} \nidentical_sums= {} \nfor u in [x for x in dataset if x != user]: \nidentical_score= pearson_score(dataset, user, u) \nif identical_score<= 0: \ncontinue \n```", "```py\nfor element in [x for x in dataset[u] if x not in dataset[user] or \ndataset[user][x] == 0]: \nsumofall_scores.update({item: dataset[u][item] * identical_sums}) \nidentical_sums.update({item: identical_score}) \n```", "```py\nif len(sumofall_scores) == 0: \nreturn ['No recommendations possible'] \n```", "```py\n# Create the normalized list \nrank_of_movie= np.array([[total/ identical_sums[element], element] \nfor element, total in sumofall_scores.element()]) \n```", "```py\n# Based on first column, sort in decreasing order \nrank_of_movie = rank_of_movie[np.argsort(rank_of_movie[:, 0])[::-1]]\n```", "```py\n# Recommended movies needs to be extracted \nrecommended = [movie for _, movie in movie_ranks] \nreturn recommended \n```", "```py\nif __name__=='__main__': \ndata_file = rating_of_miovie.json' \nwith open(data_file, 'r') as f: \ndata = json.loads(f.read()) \n```", "```py\nuser = ' Steven Ferndndes ' \nprint \"nRecommendations for \" + user + \":\" \nmovies = recommendation_generated(data, user) \nfor i, movie in enumerate(movies): \nprint str(i+1) + '. ' + movie \n```", "```py\nuser = ' Ramesh Nayak ' \nprint \"nRecommendations for \" + user + \":\" \nmovies = recommendation_generated(data, user) \nfor i, movie in enumerate(movies): \nprint str(i+1) + '. ' + movie  \n```"]