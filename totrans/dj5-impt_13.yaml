- en: <st c="0">13</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3">Deploying the Application to the Cloud</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="42">Our project is currently running on our local machine.</st> <st c="98">To
    make this project accessible to others, we need to deploy it on a server on the
    internet.</st> <st c="191">A popular way to do this is by deploying our Django
    project on PythonAnywhere, as it is free to use for small websites.</st> <st c="311">Let’s
    see how to deploy our application to</st> <st c="354">the cloud.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="364">In this chapter, we will be covering the</st> <st c="406">following
    topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="423">Managing GitHub</st> <st c="440">and Git</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="447">Cloning your code</st> <st c="466">onto PythonAnywhere</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="485">Configuring</st> <st c="498">virtual environments</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="518">Setting up your</st> <st c="535">web app</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="542">Configuring</st> <st c="555">static files</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="567">By the end of the chapter, you will have the knowledge and ability
    to deploy small Python applications on</st> <st c="674">the cloud.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="684">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="707">In this chapter, we will be using Python 3.10+.</st> <st c="756">We
    will be using Git to upload our code to the cloud, which you can download from</st>
    [<st c="838">https://git-scm.com/downloads</st>](https://git-scm.com/downloads)<st
    c="867">. Finally, we will be using the</st> **<st c="899">VS Code</st>** <st
    c="906">editor in this book, which you can download</st> <st c="951">from</st>
    <st c="956">https://code.visualstudio.com/</st><st c="986">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="987">The CiA video for this chapter can be found</st> <st c="1032">at</st>
    [<st c="1035">https://packt.link/QXahe</st>](https://packt.link/QXahe)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1059">Managing GitHub and Git</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1083">To get our code onto</st> <st c="1104">sites such as PythonAnywhere,
    first, we need our code to be on a code-sharing platform such as GitHub or GitLab.</st>
    <st c="1218">In this chapter, we will use GitHub.</st> <st c="1255">If you are
    already familiar with uploading your code to GitHub, please skip the following</st>
    <st c="1345">section and proceed to upload the Movies Store code to a new GitHub
    repository.</st> <st c="1425">Otherwise, you can</st> <st c="1444">follow along.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1457">To upload our code to GitHub, we will follow the</st> <st c="1507">next
    steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1518">Understanding Git</st> <st c="1537">and GitHub.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="1548">Creating a</st> <st c="1560">GitHub repository.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="1578">Uploading our code</st> <st c="1598">to GitHub.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="1608">Understanding Git and GitHub</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**<st c="1637">Git</st>** <st c="1641">is a</st> <st c="1647">distributed version
    control system designed to handle everything from small to very large projects
    with</st> <st c="1751">speed and efficiency.</st> <st c="1773">It allows multiple
    developers to collaborate on projects by tracking changes to</st> <st c="1853">files
    (</st>[<st c="1860">https://git-scm.com/</st>](https://git-scm.com/)<st c="1881">).</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="1884">GitHub</st>** <st c="1891">is a web-based platform</st> <st
    c="1916">built on top of the Git version control system.</st> <st c="1964">It
    provides hosting for software development projects that use Git for version</st>
    <st c="2043">control (</st>[<st c="2052">https://github.com/</st>](https://github.com/)<st
    c="2072">).</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2075">We’ll enhance our Movies Store project to function as a version
    control system by utilizing Git.</st> <st c="2173">Then, we’ll host the Movies
    Store project code on the Cloud</st> <st c="2233">using GitHub.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2246">Creating a GitHub repository</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="2275">A GitHub repository is a central</st> <st c="2308">location where
    files and folders associated with a project are stored and managed.</st> <st c="2392">It
    serves as a version-controlled hub for a project, allowing multiple collaborators
    to contribute to the</st> <st c="2498">development process.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2518">Let’s follow the next steps to create a</st> <st c="2559">GitHub
    repository:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2577">Go to</st> [<st c="2584">https://github.com/</st>](https://github.com/)
    <st c="2603">and sign up for an account if you don’t have one.</st> <st c="2654">Then,
    create a new repository by</st> <st c="2686">clicking on</st> **<st c="2699">+</st>**
    <st c="2700">at the top-right, and select</st> **<st c="2730">New repository</st>**
    <st c="2745">(</st>*<st c="2746">Figure 13</st>**<st c="2755">.1</st>*<st c="2757">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.1 – GitHub – create a new repository option](img/B22457_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="2815">Figure 13.1 – GitHub – create a new repository option</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2868">Give your repository a name such as</st> `<st c="2905">moviesstore</st>`<st
    c="2916">. Select the</st> **<st c="2929">Public</st>** <st c="2935">radio box
    and hit</st> **<st c="2954">Create repository</st>** <st c="2971">(</st>*<st c="2973">Figure
    13</st>**<st c="2982">.2</st>*<st c="2984">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.2 – GitHub – creating a new repository](img/B22457_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="3529">Figure 13.2 – GitHub – creating a new repository</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3577">We have successfully created a GitHub repository.</st> <st c="3628">We
    will use it to store the Movies Store project code.</st> <st c="3683">Keep your
    GitHub repository open; we will use that page in the</st> <st c="3746">next section.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3759">Uploading our code to GitHub</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3788">We will begin to move our</st> <st c="3815">code onto GitHub.</st>
    <st c="3833">In your local machine’s Terminal, ensure you have Git installed by
    running</st> <st c="3908">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="3926">If you run the</st> `<st c="3942">git</st>` <st c="3945">command
    in the terminal and see Git usage and commands listed, it indicates that you have
    Git installed (</st>*<st c="4051">Figure 13</st>**<st c="4061">.3</st>*<st c="4063">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Executing the git command in the terminal](img/B22457_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="4404">Figure 13.3 – Executing the git command in the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4459">If you don’t see them, you will need to install Git.</st> <st c="4513">Visit
    the Git site (</st>[<st c="4533">https://git-scm.com/downloads</st>](https://git-scm.com/downloads)<st
    c="4563">) and follow the instructions to install Git.</st> <st c="4610">When
    Git is installed, you might need to close and reopen the Terminal and type “git”
    in it to ensure that it</st> <st c="4720">is installed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4733">Now that we’ve installed Git, let’s proceed with the next steps
    to upload our Movies Store project code to our</st> <st c="4845">GitHub repository:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4863">Open your terminal in the top</st> `<st c="4894">moviesstore</st>`
    <st c="4905">folder (the one that contains the</st> `<st c="4940">manage.py</st>`
    <st c="4949">file).</st> <st c="4957">Then, run the</st> <st c="4971">following
    command:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="4998">The previous command marks your folder as a Git project, allowing
    you to start tracking changes.</st> <st c="5096">A hidden folder named .git is
    added to the project directory.</st> <st c="5158">This folder stores all the metadata,
    configuration files, and elements that Git needs to track changes and manage</st>
    <st c="5272">the project.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="5284">Next, run the</st> <st c="5299">following command:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="5327">The previous command adds everything (folders, subfolders, and
    files) in our project to the staging area, preparing them to be included in the</st>
    <st c="5471">next commit.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="5483">Then, go ahead and commit the</st> <st c="5514">previous changes:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="5561">The previous command is used to record the changes and inclusions
    we made to the staging area.</st> <st c="5657">When</st> <st c="5661">you run
    git commit, you’re essentially creating a snapshot of the current state of your
    project.</st> <st c="5759">You can identify different commits by the descriptive
    messages</st> <st c="5822">you provide.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="5834">Next, run the</st> <st c="5849">following command:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 13.4 – Locating your GitHub repository path](img/B22457_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="6475">Figure 13.4 – Locating your GitHub repository path</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6566">The previous command is essentially telling Git to create a new
    remote repository with the name origin and associate it with the URL or path you
    provide.</st> <st c="6721">This will allow</st> <st c="6736">you to push your
    local changes to the remote</st> <st c="6782">repository later.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6799">To move the code from your local computer to GitHub, run</st> <st
    c="6857">the following:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="6895">If the upload is successful, you should see a message like this
    (</st><st c="6961">Figure 13</st><st c="6971">.5):</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.5 – A successful git push to the GitHub repository](img/B22457_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7495">Figure 13.5 – A successful git push to the GitHub repository</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7555">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7560">If this is your first time uploading code to GitHub, you will probably
    see a prompt asking you to log in to GitHub.</st> <st c="7677">Please complete</st>
    <st c="7693">that process.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7706">Now, when you reload the GitHub repository page, you should see
    the Movies Store project structure and files properly uploaded (as shown in</st>
    *<st c="7847">Figure 13</st>**<st c="7856">.6</st>*<st c="7858">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – GitHub repository containing the Movies Store project code](img/B22457_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="8696">Figure 13.6 – GitHub repository containing the Movies Store project
    code</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8768">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8773">Do note that there is much more to Git and GitHub.</st> <st c="8825">We
    have just covered the necessary steps to upload our code</st> <st c="8885">to
    GitHub.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8895">With this, we have now placed</st> <st c="8925">our code on GitHub.</st>
    <st c="8946">Next, we will clone it</st> <st c="8969">on PythonAnywhere.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8987">Cloning your code onto PythonAnywhere</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**<st c="9025">PythonAnywhere</st>** <st c="9040">(</st>[<st c="9042">https://www.pythonanywhere.com/</st>](https://www.pythonanywhere.com/)<st
    c="9073">) is a cloud-based platform that provides a web hosting</st> <st c="9129">environment
    for Python applications.</st> <st c="9167">It allows</st> <st c="9177">users to
    write, edit, and run Python code directly in their web browser without needing
    to install any</st> <st c="9280">software locally.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9297">The steps to deploy an existing Django project on PythonAnywhere
    can be found at</st> [<st c="9379">https://help.pythonanywhere.com/pages/DeployExistingDjangoProject</st>](https://help.pythonanywhere.com/pages/DeployExistingDjangoProject)<st
    c="9444">, but we’ll guide you through</st> <st c="9474">them here.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9484">Now that our code is on GitHub, let’s proceed with the next steps
    to create a PythonAnywhere account and</st> <st c="9589">move our code from GitHub</st>
    <st c="9616">to PythonAnywhere:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9634">Go to</st> [<st c="9641">https://www.pythonanywhere.com/registration/register/beginner/</st>](https://www.pythonanywhere.com/registration/register/beginner/)
    <st c="9703">and sign up for a beginner free account if you don’t</st> <st c="9757">have
    one.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="9766">Then, click on</st> **<st c="9782">Dashboard</st>** <st c="9791">|</st>
    **<st c="9794">New console</st>** <st c="9805">|</st> **<st c="9808">$ Bash</st>**
    <st c="9814">(</st>*<st c="9816">Figure 13</st>**<st c="9825">.7</st>*<st c="9827">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Creating a new console](img/B22457_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10279">Figure 13.7 – Creating a new console</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10315">The previous step will open a Bash console.</st> <st c="10360">Back
    in your GitHub repository, click on</st> **<st c="10401">Code</st>** <st c="10405">and
    copy the URL to clone (</st>*<st c="10433">Figure 13</st>**<st c="10443">.8</st>*<st
    c="10445">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Copying repository URL](img/B22457_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="11021">Figure 13.8 – Copying repository URL</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11057">To clone the previous</st> <st c="11079">repository, go back to
    the PythonAnywhere Bash console and run the following command (replace the</st>
    `<st c="11178"><repo-url></st>` <st c="11188">part with yours, for example,</st>
    `<st c="11219">git</st>` `<st c="11223">clone</st>` [<st c="11229">https://github.com/danielgara/moviesstore.git</st>](https://github.com/danielgara/moviesstore.git)<st
    c="11274">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 13.9 – Checking with the ls command that the repository was successfully
    cloned](img/B22457_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12064">Figure 13.9 – Checking with the ls command that the repository
    was successfully cloned</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12150">We’ve successfully cloned our repository code into PythonAnywhere.</st>
    <st c="12218">Now, let’s configure a virtual</st> <st c="12249">environment to
    be able to run</st> <st c="12279">our project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12291">Configuring virtual environments</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="12324">A</st> **<st c="12327">virtual environment</st>** <st c="12346">in
    Python is a</st> <st c="12362">self-contained directory that contains a specific
    Python interpreter version, along with a set of libraries and packages.</st> <st
    c="12484">It allows you to create an isolated environment for each of your Python
    projects, ensuring that dependencies are kept separate and do not interfere with</st>
    <st c="12637">each other.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12648">Next, we will create a virtual environment in our PythonAnywhere
    Bash console to isolate our project code and dependencies.</st> <st c="12773">Let’s
    proceed with the</st> <st c="12796">following steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12812">To create a virtual environment in the PythonAnywhere Bash console
    we have to execute something like this command:</st> `<st c="12928">mkvirtualenv
    -p python3.10 <environment-name></st>`<st c="12973">. For now, we will replace</st>
    `<st c="13000"><environment-name></st>` <st c="13018">with</st> `<st c="13024">moviesstoreenv</st>`
    <st c="13038">and run</st> <st c="13047">the following:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="13103">We will see the name of virtualenv in Bash, for example, (moviesstoreenv).</st>
    <st c="13179">This means we are in the virtual environment (</st><st c="13225">Figure
    13</st><st c="13235">.10):</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.10 – Bash located in virtualenv](img/B22457_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="14185">Figure 13.10 – Bash located in virtualenv</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14226">Back in our virtualenv, we need to install</st> `<st c="14270">django</st>`
    <st c="14276">and</st> `<st c="14281">pillow</st>` <st c="14287">(as we did in
    development).</st> <st c="14316">So, run</st> <st c="14324">the following:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="14369">The previous execution may take from a couple of minutes to ten
    minutes.</st> <st c="14443">PythonAnywhere has very fast internet, but the filesystem
    access can be slow, and Django creates a lot of</st> <st c="14549">small files
    during its installation.</st> <st c="14586">Thankfully, you only have to do it
    once.</st> <st c="14627">Once it’s completed, you should see a message like the
    one shown in</st> <st c="14695">Figure 13</st><st c="14704">.11:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.11 – Django and pillow installed](img/B22457_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="15489">Figure 13.11 – Django and pillow installed</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15531">We have already configured our virtual environment.</st> <st c="15584">For
    now, you can leave that Bash console open or close it.</st> <st c="15643">Now,
    let’s create a web app that utilizes this</st> <st c="15690">virtual environment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15710">Setting up your web app</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="15734">At this point, we need to be armed with</st> <st c="15774">three
    pieces</st> <st c="15788">of information:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15803">The path to your Django project’s top folder (the folder that
    contains the</st> `<st c="15879">manage.py</st>` <st c="15888">file).</st> <st
    c="15896">For this project, it is commonly a combination of</st> `<st c="15946">/home</st>`
    <st c="15951">and</st> `<st c="15956">/<pythonanywhere-user></st>` <st c="15978">and</st>
    `<st c="15983">/<github-repo-name></st>`<st c="16002">. In our case, it</st> <st
    c="16020">was</st> `<st c="16024">/home/danielgara/moviesstore</st>`<st c="16052">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="16053">The name of your main project folder (that’s the name of the folder
    that contains your</st> `<st c="16141">settings.py</st>` <st c="16152">file).</st>
    <st c="16160">In our case, it</st> <st c="16176">is</st> `<st c="16179">moviesstore</st>`<st
    c="16190">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="16191">The name of your virtualenv.</st> <st c="16221">In our case it</st>
    <st c="16236">is</st> `<st c="16239">moviesstoreenv</st>`<st c="16253">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="16254">Now, follow the next steps to setting up your</st> <st c="16301">web
    app:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16309">In your browser, open a new tab and go to the PythonAnywhere dashboard.</st>
    <st c="16382">Then, click on the</st> **<st c="16401">Web</st>** <st c="16404">tab
    and click</st> **<st c="16419">Add a new web app</st>** <st c="16436">(</st>*<st
    c="16438">Figure 13</st>**<st c="16447">.12</st>*<st c="16450">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.12 – PythonAnywhere Web tab](img/B22457_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="16686">Figure 13.12 – PythonAnywhere Web tab</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16723">PythonAnywhere will ask</st> <st c="16748">you for</st> **<st
    c="16756">Your web app’s domain name</st>**<st c="16782">. Just click</st> **<st
    c="16795">Next</st>** <st c="16799">(</st>*<st c="16801">Figure 13</st>**<st c="16810">.13</st>*<st
    c="16813">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.13 – PythonAnywhere domain name](img/B22457_13_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17052">Figure 13.13 – PythonAnywhere domain name</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17093">In the</st> **<st c="17101">Select a Python Web framework</st>**
    <st c="17130">section, choose</st> **<st c="17147">Manual configuration</st>**
    <st c="17167">(</st>*<st c="17169">Figure 13</st>**<st c="17178">.14</st>*<st
    c="17181">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.14 – Selecting Manual configuration](img/B22457_13_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17469">Figure 13.14 – Selecting Manual configuration</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17514">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17519">Make sure you choose</st> **<st c="17541">Manual configuration</st>**<st
    c="17561">, not the</st> **<st c="17571">Django</st>** <st c="17577">option; that’s
    for new</st> <st c="17601">projects only.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17615">Select the proper</st> <st c="17633">version of Python (the same
    one you used to create your virtual environment).</st> <st c="17712">In our case,
    it was</st> `<st c="17732">Python 3.10</st>` <st c="17743">(</st>*<st c="17745">Figure
    13</st>**<st c="17754">.15</st>*<st c="17757">).</st> <st c="17761">Finally, when
    asked for</st> **<st c="17785">Manual configuration</st>**<st c="17805">, click</st>
    **<st c="17813">Next</st>** <st c="17817">(</st>*<st c="17819">Figure 13</st>**<st
    c="17828">.16</st>*<st c="17831">).</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Selecting the right Python version](img/B22457_13_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17938">Figure 13.15 – Selecting the right Python version</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.16 – Finalizing the web app](img/B22457_13_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="18431">Figure 13.16 – Finalizing the web app</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18468">Once the web app is created, you need to</st> <st c="18509">enter
    the name of your virtualenv in the</st> `<st c="18621">moviesstoreenv</st>`<st
    c="18635">, and it will automatically complete its full path</st> <st c="18686">in</st>
    `<st c="18689">/home/username/.virtualenvs/moviesstoreenv</st>`<st c="18731">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.17 – Entering the virtualenv name](img/B22457_13_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19007">Figure 13.17 – Entering the virtualenv name</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19050">Next, enter the path to your username folder (</st>`<st c="19097">/home/<your-username>/</st>`<st
    c="19120">) in the</st> **<st c="19130">Code section</st>**<st c="19142">, both
    for</st> **<st c="19153">Source code</st>** <st c="19164">and</st> **<st c="19169">Working
    directory</st>** <st c="19186">(</st>*<st c="19188">Figure 13</st>**<st c="19197">.18</st>*<st
    c="19200">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.18 – Entering the path to your code](img/B22457_13_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19339">Figure 13.18 – Entering the path to your code</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19384">Click the</st> `<st c="19395">wsgi.py</st>` <st c="19402">file
    inside the</st> **<st c="19419">Code section</st>**<st c="19431">, not the one
    in your local Django project folder (</st>*<st c="19482">Figure 13</st>**<st c="19492">.19</st>*<st
    c="19495">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.19 – Accessing the wsgi.py file](img/B22457_13_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19673">Figure 13.19 – Accessing the wsgi.py file</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19714">This will take you to an editor where you can</st> <st c="19761">make
    changes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19774">Delete everything</st> <st c="19793">except the Django section
    and uncomment that section.</st> <st c="19847">Your WSGI file will look something
    like</st> <st c="19887">the following:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 13.20 – Accessing the settings.py file](img/B22457_13_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="21409">Figure 13.20 – Accessing the settings.py file</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21454">Click the</st> `<st c="21465">settings.py</st>` <st c="21476">file.</st>
    <st c="21483">In</st> `<st c="21486">settings.py</st>`<st c="21497">, modify the</st>
    `<st c="21510">ALLOWED_HOSTS</st>` <st c="21523">variable:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="21639">Save</st> <st c="21645">the file.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="21654">Then, go to the</st> **<st c="21671">Web</st>** <st c="21674">tab
    and</st> <st c="21682">hit the</st> **<st c="21691">Reload</st>** <st c="21697">button
    for your domain (</st>*<st c="21722">Figure 13</st>**<st c="21732">.21</st>*<st
    c="21735">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.21 – Reloading the web app](img/B22457_13_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="21885">Figure 13.21 – Reloading the web app</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21921">The</st> `<st c="21926">ALLOWED_HOSTS</st>` <st c="21939">settings
    represent which host/domain names our Django site can serve.</st> <st c="22010">This
    is a security measure to prevent HTTP Host header attacks.</st> <st c="22074">We
    used the asterisk (</st>`<st c="22096">*</st>`<st c="22098">) wildcard to indicate
    that all domains are acceptable.</st> <st c="22154">In your production projects,
    you can explicitly list which domains</st> <st c="22221">are allowed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22233">Go to your project’s URL (it is the blue link in the previous
    screenshot, for example,</st> `<st c="22321">danielgara.pythonanywhere.com</st>`<st
    c="22350">), and the home page should now appear (</st>*<st c="22391">Figure 13</st>**<st
    c="22401">.22</st>*<st c="22404">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="22407">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22412">The home page will look strange because we need to configure our
    application to serve static files (such as images and styles).</st> <st c="22541">We
    will fix</st> <st c="22553">it later.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.22 – The PythonAnywhere web app link](img/B22457_13_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="22647">Figure 13.22 – The PythonAnywhere web app link</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22693">We are almost there!</st> <st c="22715">Let’s fix</st> <st c="22724">the
    static images in the</st> <st c="22750">next section.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22763">Configuring static files</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="22788">Let’s fix the problem of our</st> <st c="22818">static and media
    images</st> <st c="22842">not appearing:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22856">In PythonAnywhere, go back to the</st> `<st c="22921">settings.py</st>`
    <st c="22932">file.</st> <st c="22939">We need to add the following</st> <st c="22968">in</st>
    **<st c="22971">bold</st>**<st c="22975">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="23276">The</st> `<st c="23281">STATIC_ROOT</st>` <st c="23292">variable
    defines a central location into which we collect all</st> <st c="23355">static
    files.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="23368">In PythonAnywhere, go</st> <st c="23390">to the</st> **<st c="23398">Consoles</st>**
    <st c="23406">tab, and click your</st> **<st c="23427">Bash console</st>**<st
    c="23439">. Then, connect to your virtual environment by executing the</st> <st
    c="23500">following command:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 13.23 – Executing the python manage.py collectstatic command](img/B22457_13_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="24234">Figure 13.23 – Executing the python manage.py collectstatic command</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24301">You need to rerun this</st> <st c="24324">command whenever you
    want to publish new versions of your</st> <st c="24383">static files.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24396">Next, set up a static file mapping to get our web servers to serve
    out your static files for you.</st> <st c="24495">In the</st> `<st c="24597">/static/</st>`<st
    c="24605">. In</st> `<st c="24650">static/</st>`<st c="24657">, for example,</st>
    `<st c="24672">/home/danielgara/moviesstore/static/</st>` <st c="24708">(</st>*<st
    c="24710">Figure 13</st>**<st c="24719">.24</st>*<st c="24722">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.24 – Defining the static files](img/B22457_13_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="25067">Figure 13.24 – Defining the static files</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25107">Then, in the</st> **<st c="25121">Web</st>** <st c="25124">tab,
    hit</st> **<st c="25134">Reload</st>**<st c="25140">, open your website, and your
    static images should appear now (</st>*<st c="25203">Figure 13</st>**<st c="25213">.25</st>*<st
    c="25216">):</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.25 – The Movies Store – home page](img/B22457_13_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="25349">Figure 13.25 – The Movies Store – home page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25392">We did it!</st> <st c="25404">Our Movies Store</st> <st c="25420">project
    has been deployed to the cloud.</st> <st c="25461">Now you can navigate between
    the different sections of the website or share your website link with colleagues</st>
    <st c="25571">and friends.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25583">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '<st c="25591">We have gone through quite a lot of content to equip you with
    the skills required to create a full-stack Django app.</st> <st c="25709">We have
    covered the major features of Django: templates, views, URLs, user authentication,
    authorization, models, sessions, forms, and deployment.</st> <st c="25856">You
    now have the knowledge to go and build your own websites with Django.</st> <st
    c="25930">The CRUD functionality in our Reviews app is common in many web applications
    – for example, you already have all the tools to create a blog, to-do list, or
    shopping cart</st> <st c="26100">web applications.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26117">Hopefully, you have enjoyed this book and would like to learn
    more</st> <st c="26185">from us.</st>
  prefs: []
  type: TYPE_NORMAL
