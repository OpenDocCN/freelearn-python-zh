["```py\n hostname <hname>\n ip domain-lookup\n ip name-server <nameserver>\n logging host <loghost>\n username cisco privilege 15 password cisco\n enable password cisco\n ip domain-name checkmetest.router\nline vty 0 4\n exec-timeout 5\n```", "```py\nipdict={'india': '1.1.1.1,1.1.1.2', 'uk': '3.1.1.1,3.1.1.2', 'usa': '2.1.1.1,2.1.1.2'}\n\nstandardtemplate=\"\"\"\nhostname <hname>\nip domain-lookup\nip name-server <nameserver>\nlogging host <loghost>\nusername cisco privilege 15 password cisco\nenable password cisco\nip domain-name checkmetest.router\n\nline vty 0 4\n exec-timeout 5\n\"\"\"\n\nrouterlist=\"R1,R2,R3\"\nrouters=routerlist.split(\",\")\nfor router in routers:\nprint (\"Now printing config for\",router)\n    if \"R1\" in router:\n        hostname=\"testindia\"\n        getips=ipdict[\"india\"]\n        getips=getips.split(\",\")\n        logserver=getips[0]\n        nameserver=getips[1]\n    if \"R2\" in router:\n        hostname=\"testusa\"\n        getips=ipdict[\"usa\"]\n        getips=getips.split(\",\")\n        logserver=getips[0]\n        nameserver=getips[1]\n    if \"R3\" in router:\n        hostname=\"testUK\"\n        getips=ipdict[\"uk\"]\n        getips=getips.split(\",\")\n        logserver=getips[0]\n        nameserver=getips[1]\n    generatedconfig=standardtemplate\n    generatedconfig=generatedconfig.replace(\"<hname>\",hostname)\n    generatedconfig=generatedconfig.replace(\"<nameserver>\",nameserver)\n    generatedconfig=generatedconfig.replace(\"<loghost>\",logserver)\n    print (generatedconfig)\n```", "```py\ndef getipaddressconfig(routername):\n    intconfig=\"\"\n    sampletemplate=\"\"\"\n    interface f0/0\n     ip address ipinfof0/0\n    interface f1/0\n     ip address ipinfof1/0\n    interface f0/1\n     ip address ipinfof0/1\n    \"\"\"\n    if (routername == \"testindia\"):\n        f0_0=\"11.0.0.1 255.0.0.0\"\n        f1_0=\"10.0.0.1 255.0.0.0\"\n        sampletemplate=sampletemplate.replace(\"ipinfof0/0\",f0_0)\n        sampletemplate=sampletemplate.replace(\"ipinfof1/0\",f1_0)\n        sampletemplate=sampletemplate.replace(\"interface f0/1\\n\",\"\")\n        sampletemplate=sampletemplate.replace(\"ip address ipinfof0/1\\n\",\"\")\n    if (routername == \"testusa\"):\n        f0_0=\"11.0.0.1 255.0.0.0\"\n        f0_1=\"12.0.0.1 255.0.0.0\"\n        sampletemplate=sampletemplate.replace(\"ipinfof0/0\",f0_0)\n        sampletemplate=sampletemplate.replace(\"ipinfof0/1\",f0_1)\n        sampletemplate=sampletemplate.replace(\"interface f1/0\\n\",\"\")\n        sampletemplate=sampletemplate.replace(\"ip address ipinfof1/0\\n\",\"\")\n    if (routername == \"testUK\"):\n        f0_0=\"11.0.0.2 255.0.0.0\"\n        f0_1=\"12.0.0.2 255.0.0.0\"\n        sampletemplate=sampletemplate.replace(\"ipinfof0/0\",f0_0)\n        sampletemplate=sampletemplate.replace(\"ipinfof0/1\",f0_1)\n        sampletemplate=sampletemplate.replace(\"interface f1/0\\n\",\"\")\n        sampletemplate=sampletemplate.replace(\"ip address ipinfof1/0\\n\",\"\")\n    return sampletemplate\n\n#calling this function\nmyfinaloutput=getipaddressconfig(\"testUK\") #for UK router\nmyfinaloutput=getipaddressconfig(\"testindia\") #for USA router\nmyfinaloutput=getipaddressconfig(\"testusa\") #for India router\n```", "```py\n#Suppose our final value is in myfinaloutput and file name is myrouterconfig.txt\nfopen=open(\"C:\\check\\myrouterconfig.txt\",\"w\")\nfopen.write(myfinaloutput)\nfopen.close()\n```", "```py\nfrom pysnmp.hlapi import *\n\nerrorIndication, errorStatus, errorIndex, varBinds = next(\n    getCmd(SnmpEngine(),\n           CommunityData('public', mpModel=0),\n           UdpTransportTarget(('192.168.255.249', 161)),\n           ContextData(),\n           ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0)))\n)\n\nif errorIndication:\n    print(errorIndication)\nelif errorStatus:\n    print('%s at %s' % (errorStatus.prettyPrint(),\n                        errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))\nelse:\n    for varBind in varBinds:\n        print(' = '.join([x.prettyPrint() for x in varBind]))\n```", "```py\nfrom pysnmp.entity.rfc3413.oneliner import cmdgen\n\ncmdGen = cmdgen.CommandGenerator()\n\nerrorIndication, errorStatus, errorIndex, varBindTable = cmdGen.bulkCmd(\n    cmdgen.CommunityData('public'),\n    cmdgen.UdpTransportTarget(('192.168.255.249', 161)),\n    0,25,\n    '1.3.6.1.2.1.2.2.1.2'\n)\n\n# Check for errors and print out results\nif errorIndication:\n    print(errorIndication)\nelse:\n    if errorStatus:\n        print('%s at %s' % (\n            errorStatus.prettyPrint(),\n            errorIndex and varBindTable[-1][int(errorIndex)-1] or '?'\n            )\n        )\n    else:\n        for varBindTableRow in varBindTable:\n            for name, val in varBindTableRow:\n                print('%s = %s' % (name.prettyPrint(), val.prettyPrint()))\n```", "```py\nimport re\nmystring='My ip address is 10.10.10.20 and by subnet mask is 255.255.255.255'\n\nif (re.search(\"ip address\",mystring)):\n    ipaddregex=re.search(\"ip address is \\d+.\\d+.\\d+.\\d+\",mystring)\n    ipaddregex=ipaddregex.group(0)\n    ipaddress=ipaddregex.replace(\"ip address is \",\"\")\n    print (\"IP address is :\",ipaddress)\n\nif (re.search(\"subnet mask\",mystring)):\n    ipaddregex=re.search(\"subnet mask is \\d+.\\d+.\\d+.\\d+\",mystring)\n    ipaddregex=ipaddregex.group(0)\n    ipaddress=ipaddregex.replace(\"subnet mask is \",\"\")\n    print (\"Subnet mask is :\",ipaddress)\n\n```", "```py\nimport socket\n\ndef validateipv4ip(address):\n    try:\n        socket.inet_aton(address)\n        print (\"Correct IPv4 IP\")\n    except socket.error:\n        print (\"wrong IPv4 IP\")\n\ndef validateipv6ip(address):\n    ### for IPv6 IP address validation\n    try:\n        socket.inet_pton(socket.AF_INET6,address)\n        print (\"Correct IPv6 IP\")\n    except socket.error:\n        print (\"wrong IPv6 IP\")\n\n#correct IPs:\nvalidateipv4ip(\"2.2.2.1\")\nvalidateipv6ip(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\")\n\n#Wrong IPs:\nvalidateipv4ip(\"2.2.2.500\")\nvalidateipv6ip(\"2001:0db8:85a3:0000:0000:8a2e\")\n\n```", "```py\nimport re\nsampletext=\"\"\"\ninterface fa0/1\nswitchport mode trunk\nno shut\n\ninterface fa0/0\nno shut\n\ninterface fa1/0\nswitchport mode trunk\nno shut\n\ninterface fa2/0\nshut\n\ninterface fa2/1\nswitchport mode trunk\nno shut\n\ninterface te3/1\nswitchport mode trunk\nshut\n\"\"\"\n\nsampletext=sampletext.split(\"interface\")\n#check for interfaces that are in trunk mode\nfor chunk in sampletext:\n    if (\"mode trunk\" in chunk):\n        intname=re.search(\"(fa|te)\\d+/\\d+\",chunk)\n        print (\"Trunk enabled on \"+intname.group(0))\n\n```", "```py\nimport re\nsampletext=\"\"\"\ninterface fa0/1\nswitchport mode trunk\nno shut\n\ninterface fa0/0\nno shut\n\ninterface fa1/0\nswitchport mode trunk\nno shut\n\ninterface fa2/0\nshut\n\ninterface fa2/1\nswitchport mode trunk\nno shut\n\ninterface te3/1\nswitchport mode trunk\nshut\n\"\"\"\n\nsampletext=sampletext.split(\"interface\")\n#check for interfaces that are in trunk mode\nfor chunk in sampletext:\n    if (\"mode trunk\" in chunk):\n        if (\"no shut\" in chunk):\n            intname=re.search(\"(fa|te)\\d+/\\d+\",chunk)\n            print (\"Trunk enabled on \"+intname.group(0))\n```", "```py\nimport socket\nimport re\n\ndef validateipv4ip(address):\n    try:\n        socket.inet_aton(address)\n    except socket.error:\n        print (\"wrong IPv4 IP\",address)\n\ndef validateipv6ip(address):\n    ### for IPv6 IP address validation\n    try:\n        socket.inet_pton(socket.AF_INET6,address)\n    except socket.error:\n        print (\"wrong IPv6 IP\", address)\n\nsampletext=\"\"\"\nip tacacs server 10.10.10.10\nint fa0/1\nip address 25.25.25.298 255.255.255.255\nno shut\nip name-server 100.100.100.200\nint fa0/0\nipv6 address 2001:0db8:85a3:0000:0000:8a2e:0370:7334\nip logging host 90.90.91.92\nint te0/2\nipv6 address 2602:306:78c5:6a40:421e:6813:d55:ce7f\nno shut\nexit\n\n\"\"\"\n\nsampletext=sampletext.split(\"\\n\")\nfor line in sampletext:\n    if (\"ipv6\" in line):\n        ipaddress=re.search(\"(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\",line)\n        validateipv6ip(ipaddress.group(0))\n    elif(re.search(\"\\d+.\\d+.\\d+.\\d+\",line)):\n        ipaddress=re.search(\"\\d+.\\d+.\\d+.\\d+\",line)\n        validateipv4ip(ipaddress.group(0))\n```", "```py\nfrom netmiko import ConnectHandler\nimport time\n\ndef pushimage(imagename,cmd,myip,imgsize,md5sum=None):\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    print (\"Now working on IP address: \",myip)\n    device = ConnectHandler(device_type='cisco_ios', ip=myip, username=uname, password=passwd)\n    outputx=device.send_command(\"dir | in Directory\")\n    outputx=outputx.split(\" \")\n    outputx=outputx[-1]\n    outputx=outputx.replace(\"/\",\"\")\n    precmds=\"file prompt quiet\"\n    postcmds=\"file prompt\"\n    xcheck=device.send_config_set(precmds)\n    output = device.send_command_timing(cmd)\n    flag=True\n    devicex = ConnectHandler(device_type='cisco_ios', ip=myip, username=uname, password=passwd)\n    outputx=devicex.send_command(\"dir\")\n    print (outputx)\n    while (flag):\n        time.sleep(30)\n        outputx=devicex.send_command(\"dir | in \"+imagename)\n        print (outputx)\n        if imgsize in outputx:\n            print(\"Image copied with given size. Now validating md5\")\n            flag=False\n        else:\n            print (outputx)\n        if (flag == False):\n            cmd=\"verify /md5 \"+imagename\n            outputmd5=devicex.send_command(cmd,delay_factor=50)\n        if (md5sum not in outputmd5):\n            globalflag=True\n            print (\"Image copied but Md5 validation failed on \",myip)\n        else:\n            print (\"Image copied and validated on \",myip)\n    devicex.send_config_set(postcmds)\n    devicex.disconnect()\n    device.disconnect()\n\nipaddress=\"192.168.255.249\"\nimgname=\"c3745-adventerprisek9-mz.124-15.T14.bin\"\nimgsize=\"46509636\"\nmd5sum=\"a696619869a972ec3a27742d38031b6a\"\ncmd=\"copy ftp://ftpuser:ftpuser@192.168.255.250/c3745-adventerprisek9-mz.124-15.T14.bin flash:\"\npushimage(imgname,cmd,ipaddress,imgsize,md5sum)\n```", "```py\nfrom netmiko import ConnectHandler\nimport time\n\nuname=\"cisco\"\npasswd=\"cisco\"\ndevice = ConnectHandler(device_type='cisco_ios', ip=\"192.168.255.249\", username=uname, password=passwd)\noutput=device.send_command(\"show run | in boot\")\nprint (\"Current config:\")\nprint (output)\ncmd=\"boot system flash:c3745-adventerprisek9-mz.124-15.T14.bin\"\ndevice.send_config_set(cmd)\nprint (\"New config:\")\noutput=device.send_command(\"show run | in boot\")\nprint (output)\ndevice.send_command(\"wr mem\")\ndevice.disconnect()\n```", "```py\nimport ipaddress\n\ndef convertusingipaddress(ipv4address):\n    print(ipaddress.IPv6Address('2002::' + ipv4address).compressed)\n\nconvertusingipaddress(\"10.10.10.10\")\nconvertusingipaddress(\"192.168.100.1\")\n```", "```py\nimport MySQLdb\n\ndef getfreeip():\n    # Open database connection\n    db = MySQLdb.connect(\"testserver\",\"user\",\"pwd\",\"networktable\" )\n    cursor = db.cursor()\n\n    sql = \"select top 1 from freeipaddress where isfree='true'\"\n    try:\n       # Execute the SQL command\n       cursor.execute(sql)\n       # Fetch all the rows in a list of lists.\n       results = cursor.fetchall()\n       for eachrow in results:\n          freeip=eachrow[0]\n          return (freeip)\n    except:\n       print \"Error: unable to fetch data\"\n       return \"error in accessing table\"\n    db.close()\n\nprint (getfreeip())\n```", "```py\nfrom netmiko import ConnectHandler\nimport time\n\ndef getoutput(cmd):\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=\"192.168.255.249\", username=uname, password=passwd)\n    output=device.send_command(cmd)\n    return (output)\n\ncheckprepost=input(\"Do you want a pre or post check [pre|post]: \")\ncheckprepost=checkprepost.lower()\nif (\"pre\" in checkprepost ):\n    fname=\"precheck.txt\"\nelse:\n    fname=\"postcheck.txt\"\n\nfile=open(fname,\"w\")\nfile.write(getoutput(\"show ip route\"))\nfile.write(\"\\n\")\nfile.write(getoutput(\"show clock\"))\nfile.write(\"\\n\")\nfile.write(getoutput(\"show ip int brief\"))\nfile.write(\"\\n\")\n\nprint (\"File write completed\",fname)\n\nfile.close()\n```", "```py\nimport difflib\n\nfile1 = \"precheck.txt\"\nfile2 = \"postcheck.txt\"\n\ndiff = difflib.ndiff(open(file1).readlines(),open(file2).readlines())\nprint (''.join(diff),)\n```", "```py\nfrom netmiko import ConnectHandler\n\ndef takebackup(cmd,rname):\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=rname, username=uname, password=passwd)\n    output=device.send_command(cmd)\n    fname=rname+\".txt\"\n    file=open(fname,\"w\")\n    file.write(output)\n    file.close()\n\n# assuming we have two routers in network \ndevices=\"rtr1,rtr2\"\ndevices=devices.split(\",\")\n\nfor device in devices:\n    takebackup(\"show run\",device)\n```", "```py\nfrom pysnmp.hlapi import *\n\ndef finddevices(ip):\n    errorIndication, errorStatus, errorIndex, varBinds = next(\n        getCmd(SnmpEngine(),\n               CommunityData('public', mpModel=0),\n               UdpTransportTarget((ip, 161)),\n               ContextData(),\n               ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0)))\n    )\n\n    if errorIndication:\n        print(errorIndication)\n    elif errorStatus:\n        print('%s at %s' % (errorStatus.prettyPrint(),\n                            errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))\n    else:\n        for varBind in varBinds:\n            print(' = '.join([x.prettyPrint() for x in varBind]))\n\nipaddress=\"192.168.255.248,192.168.255.249\"\nipaddress=ipaddress.split(\",\")\nfor ip in ipaddress:\n    print (ip)\n    finddevices(ip)\n    print (\"\\n\")    \n```", "```py\nfrom pysnmp.hlapi import *\nfrom pysnmp.entity.rfc3413.oneliner import cmdgen\n\ncmdGen = cmdgen.CommandGenerator()\n\ndef validateinterface(ip):\n    errorIndication, errorStatus, errorIndex, varBindTable = cmdGen.bulkCmd(\n        cmdgen.CommunityData('public'),\n        cmdgen.UdpTransportTarget((ip, 161)),\n        0,25,\n        '1.3.6.1.2.1.2.2.1.2',\n        '1.3.6.1.2.1.2.2.1.7'\n    )\n    flag=False\n    # Check for errors and print out results\n    if errorIndication:\n        print(errorIndication)\n    else:\n        if errorStatus:\n            print('%s at %s' % (\n                errorStatus.prettyPrint(),\n                errorIndex and varBindTable[-1][int(errorIndex)-1] or '?'\n                )\n            )\n        else:\n            for varBindTableRow in varBindTable:\n                for name, val in varBindTableRow:\n                    if (\"FastEthernet0/0\" in val.prettyPrint()):\n                        flag=True\n    if (flag):\n        return True\n    else:\n        return False\n\ndef finddevice(ip):\n    errorIndication, errorStatus, errorIndex, varBinds = next(\n        getCmd(SnmpEngine(),\n               CommunityData('public', mpModel=0),\n               UdpTransportTarget((ip, 161)),\n               ContextData(),\n               ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0)))\n    )\n\n    if errorIndication:\n        print(errorIndication)\n    elif errorStatus:\n        print('%s at %s' % (errorStatus.prettyPrint(),\n                            errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))\n    else:\n        for varBind in varBinds:\n            if (\"Cisco\" in varBind.prettyPrint()):\n                return True\n    return False\n\nmybyoddevices=\"192.168.255.249,192.168.255.248\"\nmybyoddevices=mybyoddevices.split(\",\")\nfor ip in mybyoddevices:\n    getvendorvalidation=False\n    getipvalidation=False\n    print (\"Validating IP\",ip)\n    getipvalidation=validateinterface(ip)\n    print (\"Interface has fastethernet0/0 :\",getipvalidation)\n    getvendorvalidation=finddevice(ip)\n    print (\"Device is of vendor Cisco:\",getvendorvalidation)\n    if getipvalidation and getvendorvalidation:\n        print (\"Device \"+ip+\" has passed all validations and eligible for BYOD\")\n        print (\"\\n\\n\")\n    else:\n        print (\"Device \"+ip+\" has failed validations and NOT eligible for BYOD\")\n        print (\"\\n\\n\")  \n```", "```py\nfrom pysnmp.hlapi import *\nfrom pysnmp.entity.rfc3413.oneliner import cmdgen\n\ncmdGen = cmdgen.CommandGenerator()\n\ndef validateinterface(ip):\n    errorIndication, errorStatus, errorIndex, varBindTable = cmdGen.bulkCmd(\n        cmdgen.CommunityData('public'),\n        cmdgen.UdpTransportTarget((ip, 161)),\n        0,25,\n        '1.3.6.1.2.1.2.2.1.2',\n        '1.3.6.1.2.1.2.2.1.7'\n    )\n    flag=False\n    # Check for errors and print out results\n    if errorIndication:\n        print(errorIndication)\n    else:\n        if errorStatus:\n            print('%s at %s' % (\n                errorStatus.prettyPrint(),\n                errorIndex and varBindTable[-1][int(errorIndex)-1] or '?'\n                )\n            )\n        else:\n            for varBindTableRow in varBindTable:\n                for name, val in varBindTableRow:\n                    if ((val.prettyPrint()).startswith(\"Ethernet\")):\n                        return False\n                    if (\"FastEthernet0/0\" in val.prettyPrint()):\n                        flag=True\n    if (flag):\n        return True\n    else:\n        return False\n\ndef finddevice(ip):\n    errorIndication, errorStatus, errorIndex, varBinds = next(\n        getCmd(SnmpEngine(),\n               CommunityData('public', mpModel=0),\n               UdpTransportTarget((ip, 161)),\n               ContextData(),\n               ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0)))\n    )\n\n    if errorIndication:\n        print(errorIndication)\n    elif errorStatus:\n        print('%s at %s' % (errorStatus.prettyPrint(),\n                            errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))\n    else:\n        for varBind in varBinds:\n            if (\"Cisco\" in varBind.prettyPrint()):\n                return True\n    return False\n\nmybyoddevices=\"192.168.255.249,192.168.255.248\"\nmybyoddevices=mybyoddevices.split(\",\")\nfor ip in mybyoddevices:\n    getvendorvalidation=False\n    getipvalidation=False\n    print (\"Validating IP\",ip)\n    getipvalidation=validateinterface(ip)\n    print (\"Device has No Ethernet only Interface(s) :\",getipvalidation)\n    getvendorvalidation=finddevice(ip)\n    print (\"Device is of vendor Cisco:\",getvendorvalidation)\n    if getipvalidation and getvendorvalidation:\n        print (\"Device \"+ip+\" has passed all validations and eligible for BYOD\")\n        print (\"\\n\\n\")\n    else:\n        print (\"Device \"+ip+\" has failed validations and NOT eligible for BYOD\")\n        print (\"\\n\\n\")    \n```"]