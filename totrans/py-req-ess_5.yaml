- en: Chapter 5. Interacting with Social Media Using Requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this contemporary world, our lives are woven with a lot of interactions and
    collaborations with social media. The information that is available on the web
    is very valuable and it is being used by abundant resources. For instance, the
    news that is trending in the world can be spotted easily from a Twitter hashtag
    and this can be achieved by interacting with the Twitter API.
  prefs: []
  type: TYPE_NORMAL
- en: Using natural language processing, we can classify emotion of a person by grabbing
    the Facebook status of an account. All this stuff can be accomplished easily with
    the help of Requests using the concerned APIs. Requests is a perfect module, if
    we want to reach out API frequently, as it supports pretty much everything, like
    caching, redirection, proxies, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with reddit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving into details, let us have a quick look at what exactly is an **Application
    Programming Interface** (**API**).
  prefs: []
  type: TYPE_NORMAL
- en: 'A web API is a set of rules and specifications. It assists us to communicate
    with different software. There are different types of APIs, and REST API is the
    subject matter here. **REpresentational State Transfer** (**REST**) is an architecture
    containing guidelines for building scalable web services. An API which adheres
    to the guidelines and conforms to the constraints of REST is called a **RESTful**
    **API**. In a nutshell, the constraints are:'
  prefs: []
  type: TYPE_NORMAL
- en: Client-server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stateless
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cacheable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layered system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uniform interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code on demand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Maps API, Twitter API, and GitHub API are various examples RESTful APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Let us understand much more about an API. Take an instance of getting all tweets
    from Twitter with the hashtag "worldtoday" which includes the process of authenticating,
    sending requests and receiving responses from different URLs, and dealing with
    different methods. All the said processes and the procedures will be specified
    in the API of Twitter. By following these procedures, we can collaborate with
    the web smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the Twitter API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with Twitter API we should first obtain an API key. It is a code
    which is passed by the computer programs while calling an API. The basic purpose
    of the API key is that it uniquely identifies the program that it is trying to
    interact with. It also serves us in the process of authentication with its token.
  prefs: []
  type: TYPE_NORMAL
- en: The next step involves the process of creating an authentication request which
    will give us access to the Twitter account. Once we have authenticated successfully,
    we will be free to deal with tweets, followers, trends, searches, and stuff. Let
    us get to know more about the steps to follow.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that, we will be using the Twitter API 1.1 version in all the examples.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining an API Key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Getting an API key is pretty simple. You need to follow the steps prescribed
    in the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: At first, you need to sign into the page [https://apps.twitter.com/](https://apps.twitter.com/)
    with your your Twitter credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create New App** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you need to fill the following fields to set up a new application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: Specify your application name. This is used to attribute the source
    of a tweet and in user-facing authorization screens.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Enter a short description of your application. This will be
    shown when a user faces the authorization screens.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Website**: Specify your fully qualified website URL. A fully qualified URL
    includes http:// or https:// and will not have a trailing slash in the end (for
    example: `http://example.com` or `http://www.example.com`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Callback URL**: This field answers the question—where should we return after
    successfully authenticating.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer Agreement**: Read the **Developer Agreement** carefully and then
    check the checkbox **Yes, I agree**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, by clicking on **Create your Twitter application,** a new application will
    be created for us with the previously specified details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the successful creation, we'll be redirected to a page where the **Details**
    tab is selected by default. Now, select the **Keys and Access Tokens** tab. We
    should click on **Create my access token** button to generate our access token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, make a note of the **Consumer Key (API Key)**, **Consumer Secret (API
    Secret)**, **Access Token** and **Access Token Secret**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an authentication Request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we remember the theme of the third chapter, we learned different kinds of
    authentication with `requests`, such as Basic authentication, Digest authentication,
    and OAuth authentication. Time to apply all that stuff in real time!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will be using OAuth1 authentication to get the access to the Twitter
    API. In the first step of obtaining a key, we got access to Consumer key, Consumer
    secret, Access token and Access token secret, now we should use them to authenticate
    our application. The following commands show how we can accomplish the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding lines, we have sent our keys and tokens to the API and got
    ourselves authenticated and stored them in the variable `auth`. Now, we can do
    all sorts of interactions with the API using this. Let us start to interact with
    the Twitter API.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that, all the twitter interacting examples that are depicted after
    this will be using the "auth" value obtained in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting your favorite tweet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us grab some favorite tweets of the authenticated user first. For this,
    we should send a request to the Twitter API to access the favorite tweets. The
    request can be sent with a `Resource URL` by specifying the parameters. The `Resource
    URL` for getting the favorite list looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://api.twitter.com/1.1/favorites/list.json`'
  prefs: []
  type: TYPE_NORMAL
- en: We can also send some optional parameters to the URL like `user_id`, `screen_name`,
    `count`, `since_id`, `max_id`, `include_identities` to accomplish our needs. Let
    us get one favorite tweet now.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the first step, we sent a `get` request with the parameter `count` and the
    authentication `auth` to the resource URL. In the next step, we accessed the response
    within the JSON format which gave us my favorite tweet, and it is that simple.
  prefs: []
  type: TYPE_NORMAL
- en: As we have specified the count parameter as `1` in the request, we happened
    to see the result with one favorite tweet. By default, if we don't specify the
    optional parameter `count,` the request will result in `20` most recent favorite
    tweets.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a simple search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We shall make a search with a Twitter''s API now. For this, we will be making
    use of `Search API` of Twitter. The basic URL structure for searching has the
    following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://api.twitter.com/1.1/search/tweets.json?q=%40twitterapi`'
  prefs: []
  type: TYPE_NORMAL
- en: It has got additional parameters like `Result type`, `Geolocation`, `language`,
    `Iterating in a result set`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we tried to search for tweets with the words `python`.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the list of followers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us access the followers of a specified user. By default, when we query
    for the list of followers, it returns the `20` most recent following users. The
    resource URL looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://api.twitter.com/1.1/followers/list.json`'
  prefs: []
  type: TYPE_NORMAL
- en: 'It returns a cursored collection of user objects for users following the specified
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Retweets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A tweet which has been reposted is called a **retweet**. To access the most
    recent retweets that have been authored by the authenticated user, we will be
    using the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://api.twitter.com/1.1/statuses/retweets_of_me.json`'
  prefs: []
  type: TYPE_NORMAL
- en: The optional parameters that can be sent with it are `count`, `since_id`, `max_id`,
    `trim_user`, `include_entites`, `include_user_entities`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Accessing available trends
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Twitter trends are hashtag-driven subject matter that is popular at a specific
    time. Take an instance of getting a location of the available trends in Twitter.
    For that, we will use the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://api.twitter.com/1.1/trends/available.json`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The response of the resource URL is an array of locations in encoded form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding lines of code, we searched for the locations of the `available_trends`.
    Then, we learned that the number of locations having `available_trends` is `467`.
    Later, we tried to access the tenth location's data and it resulted in a response
    with the location information which is encoded with **woeid**. This is a unique
    identifier called **Where on Earth ID**.
  prefs: []
  type: TYPE_NORMAL
- en: Updating user status
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To update the authenticated user's current status, which is also known as tweeting,
    we follow the following procedure.
  prefs: []
  type: TYPE_NORMAL
- en: For each update attempt, the update text is compared with the authenticating
    user's recent tweets. Any attempt that would result in duplication will be blocked,
    resulting in a `403 error`. Therefore, a user cannot submit the same status twice
    in a row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Interacting with Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Facebook API platform helps third-party developers like us to create our
    own applications and services that access data on Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Let us draw the Facebook data using the Facebook API. Facebook provides two
    types of APIs; that is, Graph API and Ads API. Graph API is a RESTful JSON API
    with which we can access the different resources from Facebook like statuses,
    likes, pages, photos, and so on. The Ads API basically deals with managing access
    to add campaigns, audiences and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to use the Facebook Graph API to interact with
    Facebook. It is named after its manner of representation with nodes and edges.
    The nodes represent the *things*, which means a user, a photo, a page; and the
    edges represent the connection between the things; that is page's photos, photo's
    comments.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the examples in this section will be using the Graph API version 2.2
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the Facebook API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with the Facebook API, we need an opaque string called access
    token which is used by Facebook to identify a user, app, or page. It is followed
    by the steps of obtaining a key. We will be sending almost all our requests to
    the API at `graph.facebook.com` except the video upload stuff. The procedure to
    send a request takes place using the unique id of the node in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And in the same way, we can POST in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Obtaining a key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tokens of Facebook API are portable and can be used to make calls from a
    mobile client, a web browser or from a server.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four different types of Access tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Access Token**: This is the most commonly used type of access token
    which needs the authorization of users. This token can be used to access the user
    information and to post data on the user''s timeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App Access Token**: This token comes into the picture when dealing at the
    Application level. This token doesn''t help in getting access to the user''s data,
    but it gives access to read the stream.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page Access Token**: This token can used while accessing and managing a Facebook
    page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client Token**: This token can be embedded in an application to get access
    to the app-level API''s.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this tutorial, we will be using the App access token which consists of App
    Id and App Secret to get access to the resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the below steps to obtain an App access token:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an application using the developer console of Facebook at [https://developers.facebook.com/developer-console/](https://developers.facebook.com/developer-console/).
    Note that we should login to [http://developers.facebook.com](http://developers.facebook.com)
    so that we can attain the permission to create an application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we are done with the creation of the application, we can get the access
    to App Id and App Secret on the application page of our [http://developers.facebook.com](http://developers.facebook.com)
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's all; obtaining a key is that simple. We don't need to create any authentication
    request to send messages, as opposed to how it is on Twitter. The App Id and App
    Secret are enough to give us permission to access the resources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a user profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can access the current user profile of the person who is logged into the
    site, using the API URL `https://graph.facebook.com/me` with a GET request. We
    need to pass the previously obtained access token as a parameter, while we are
    making any Graph API call using requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we need to import the requests module and then we have to store the
    access token into a variable. The process works in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next step, we should send the required graph API call, in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have a `requests.Response` object called `me`. The `me.text` returns
    a JSON response string. To access various elements (example, `id`, `name`, `last_name`,
    `hometown`, `work`) of the retrieved user profile, we need to convert the `json`
    `response` string into a `json object` string. We can achieve this by calling
    the method `me.json()`. The `me.json.keys()` results all the keys in the dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: A user's `id` is a unique number which is used to identify the user on Facebook.
    We can access the current profile ID from the user profile in the following way.
    We'll use this ID in the subsequent examples to retrieve the current user's friends,
    feed and albums.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving a friends list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us gather the friends list of a specific user. To achieve this, we should
    make an API call to `https://graph.facebook.com/<user-id>/friends`, and replace
    the `user-id` with the value of user's ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us obtain the friends list of the user id that we retrieved in the
    former example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The response for the API call contains a JSON object string. The friend's information
    is stored in the `data` attribute of the `response json` object, which is a list
    of friend objects containing friends' IDs and names as keys.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving feed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to retrieve the feed of posts which includes status updates and links
    published by the current user, or by others on the current user's profile, we
    should use the feed parameter in the request.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we sent a request to get the feeds of a specific user
    with user ID `10203783798823031`.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving albums
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us access the photo albums created by the current logged-in user. It can
    be achieved in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we sent a request to graph API to get access to the
    albums of the user with `user-id` `10203783798823031`. And then we tried to access
    the response data through JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with reddit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reddit is one of the popular social networking, entertainment and news websites
    where registered members can submit content, such as text posts or direct links.
    It allows the registered users to vote the submissions either "up" or "down" to
    rank the posts on the site's pages. Each content entry is categorized by area
    of interest called **SUBREDDITS**.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to access the reddit API directly, using the Python
    requests library. We are going to cover the topics of a basic overview of reddit
    API, getting data related to our own reddit account, and using the search API
    to retrieve the links.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the reddit API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The reddit API consists of four important parts that we need to get familiar
    with before starting to interact with it. The four parts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**listings**: The endpoints in reddit are called listings. They contain parameters
    like `after`/`before`, `limit`, `count`, `show`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**modhashes**: This is a token which is used to prevent the **cross site request
    forgery**(**CSRF**) exploit. We can get the modhash for us by using `GET /api/me.json`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**fullnames**: A fullname is a combination of a thing''s type and its unique
    ID which forms a compact encoding of a globally unique ID on reddit.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**account**: This deals with the user''s account. Using this we can register,
    login, set force https, update the account, update email and so on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Registering a new account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Registering a new account on reddit is easy. First, we need to reach the reddit
    site—[https://www.reddit.com/](https://www.reddit.com/), and then have to fill
    up the registration form which pops up when we click on **sign in or create an
    account** link in the top right corner. The Registration form includes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**username**: Used to identify the reddit community member uniquely'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**email**: An optional field used to communicate directly with a user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**password**: Secure password to login into the reddit platform'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**verify password**: This field should be the same as the password field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**captcha**: This field is used to check whether the user who is trying to
    login is a human or a programmable bot'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us create a new account with a username and a password of our choice. For
    now, leave the email field empty. We are going to add it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: In the following examples, I'm assuming that the username and password we created
    before are `OUR_USERNAME` and `OUR_PASSWORD` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying account information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's add an email to our account's profile which we intentionally left
    undone while creating the account in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Let us begin the process by creating a session object, which allows us to maintain
    certain parameters and cookies across all requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let us create a `DATA` attribute with the `'user'`, `'passwd'` and `'api type'`
    attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can access our reddit account by making a `post` request call to the URL—[https://ssl.reddit.com/api/login](https://ssl.reddit.com/api/login)
    with the login credentials stored in the `DATA` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The reddit api response to the above post request will be stored in the `response`
    variable. The `response` object contains the `data` and `errors` information as
    shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to send the `modhash` value obtained in the previous response to perform
    an update call to change our `email`. Now, let us call the reddit''s update API
    as shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The response to the update call is stored in `r`. If there are no errors, then
    the `status_code` will be `200` and `errors` attributes value will be an empty
    list as shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let us check whether the `email` field is set by getting info about the
    currently authenticated user. If the `has_mail` attribute is `True`, then we can
    assume that the email is successfully updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Performing a simple search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use reddit's search API to search the entire site or in a subreddit.
    In this section we'll look at making a search API request. Proceed with the following
    steps to make a search request.
  prefs: []
  type: TYPE_NORMAL
- en: To make a search api call, we need to send a get request to `http://www.reddit.com/search.json`
    url with a search query `q` in the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The response to search is stored in the `search` variable which is a `requests.Response`
    object. The search results are stored in the `children` attribute of the `data`
    attribute. We can access `title`, `author`, `score` or another item in the search
    results as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Searching subreddits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Searching in reddit's subreddits by title and description is same as searching
    in reddit. For that, we need to send a get request to `http://www.reddit.com/search.json`
    URL with a search query `q` in the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The response to search is stored in the `search` variable which is a `requests.Response`
    object. The search results are stored in the `data` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter serves as a guide to interact with some of the most popular social
    media with Python using requests. We started by learning about the definition
    and importance of an API in the real world. Then we interacted with some of the
    most popular social networking sites like Twitter, Facebook and reddit. Each section
    about a social network will provide a hands on experience using a limited set
    of examples.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn step by step about Web scraping with
    requests and BeautifulSoup libraries.
  prefs: []
  type: TYPE_NORMAL
