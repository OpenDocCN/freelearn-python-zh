- en: '22'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Point of Sale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Point of Sale is a fully integrated application that allows you to sell products
    (online or offline) with any device. It also automatically registers product moves
    in your stock, gives you real-time statistics, and consolidations across all shops.
    In this chapter, we will see how to modify the Point of Sale application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom JavaScript/SCSS files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an action button to the keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making RPC calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the Point of Sale screen UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying existing business logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying customer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Point of Sale application is mostly written in JavaScript. This chapter
    is written assuming that you have a basic knowledge of JavaScript. This chapter
    also uses the OWL framework, so if you are unaware of these JavaScript terms,
    check out [*Chapter 16*](B20997_16.xhtml#_idTextAnchor929), *The Odoo Web* *Library
    (OWL)*.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we will be using an add-on module called `point_of_sale_customization`.
    This `point_of_sale_customization` module will have a dependency on `point_of_sale`,
    as we are going to do customization in the Point of Sale application. To get started
    with this point quickly, we have prepared an initial `point_of_sale_customization`
    module, and you can grab it from the `Chapter22/00_initial_module/point_of_sale_customization`
    directory in the GitHub repository of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the code used in this chapter can be downloaded from the following GitHub
    repository: [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter22](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter22).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom JavaScript/SCSS files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Point of Sale app uses different asset bundles to manage JavaScript and
    style sheet files. In this recipe, we will learn how to add **SCSS** and **JavaScript**
    files to the Point of Sale asset bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will load an SCSS style sheet and a JavaScript file into the Point
    of Sale application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load assets into the Point of Sale application, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new SCSS file at `point_of_sale_customization/static/src/scss/point_of_sale_customization.scss`
    and insert the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a JavaScript file at `point_of_sale_customization/static/src/js/point_of_sale_customization.js`
    and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register these JavaScript and SCSS files in the `point_of_sale assets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install the `point_of_sale_customization` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 22.1 – Installing the POS Customization module](img/B20997_22_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22.1 – Installing the POS Customization module
  prefs: []
  type: TYPE_NORMAL
- en: To see your changes in action, start the new session from the **Point of Sale
    |** **Dashboard** menu.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have loaded one JavaScript file and one SCSS file into the Point
    of Sale application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 1*, we changed the background color of the pricing label of the product
    card. After installing the `point_of_sale_customization` module, you will be able
    to see changes to the pricing labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.2 – The updated price labels](img/B20997_22_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22.2 – The updated price labels
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, we added the JavaScript file. In it, we added the log to the console.
    In order to see the message, you will need to open your browser’s developer tools.
    In the **Console** tab, you will see the following log. This shows that your JavaScript
    file has loaded successfully. Right now, we have only added the log to the JavaScript
    file, but in upcoming recipes, we will add more to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.3 – JavaScript loaded (the log in the console)](img/B20997_22_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22.3 – JavaScript loaded (the log in the console)
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 3*, we added the JavaScript file and the SCSS file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Odoo also has an add-on module for Point of Sale solutions for restaurants.
    Note that this Point of Sale restaurant module is just an extension of the Point
    of Sale application. If you want to do customization in the restaurant module,
    you will need to add your JavaScript and SCSS files to the same `point_of_sale._assets_pos`
    asset bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an action button to the keyboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in the previous point, the Point of Sale application is designed
    in such a way that it works offline. Thanks to this, the code structure of the
    Point of Sale application is different from the remaining Odoo applications. The
    code base of the Point of Sale app is largely written with JavaScript and provides
    different utilities for customization. At this point, we will use one such utility
    and create an action button at the top of the keyboard panel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we will use the `point_of_sale_customization` module created in the *Adding
    custom JavaScript/SCSS files* recipe. We will add a button at the top of the keyboard
    panel. This button will be a shortcut to apply a discount to the order lines.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add a 5% discount action button to the keyboard panel
    for the Point of Sale application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `/static/src/js/point_of_sale_customization.js`
    file, which will define the action button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the QWeb template for the button to the `/``static/src/xml/point_of_sale_customization.xml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new SCSS file at `point_of_sale_customization/static/src/scss/point_of_sale_customization.scss`
    and insert the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register the QWeb template in the manifest file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `point_of_sale_customization` module to apply the changes. After
    that, you will be able to see a **5%Discount** button above the calculator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 22.4 – The discount button](img/B20997_22_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22.4 – The discount button
  prefs: []
  type: TYPE_NORMAL
- en: After clicking this, the discount will be applied to the selected order line.
  prefs: []
  type: TYPE_NORMAL
- en: How it works..
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Odoo v17, code based on the Odoo Point of Sale application is completely
    rewritten using the OWL framework. You can learn more about the OWL framework
    in [*Chapter 16*](B20997_16.xhtml#_idTextAnchor929), *The Odoo Web* *Library (OWL)*.
  prefs: []
  type: TYPE_NORMAL
- en: To create the action button in the Point of Sale application, you will need
    to *extend* `Component`. Now, `Component` is defined in `@odoo/owl namespace`,
    so to use it in your code, you will need to import it.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 1*, we imported `Component` from `@odoo/owl`. Then, we created `PosDiscountButton`
    by extending `Component`. In *step 1*, we also imported `ProductScreen` from `@point_of_sale/app/screens/product_screen/product_screen`
    and `usePos` `from @point_of_sale/app/store/pos_hook`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, `ProductScreen` is used to add a button to the Point of Sale screen via
    the `addControlButton` method.
  prefs: []
  type: TYPE_NORMAL
- en: '`Component` has some built-in utilities that give access to useful information
    such as order details and the Point of Sale configuration. You can access it via
    the `this.pos =` `usePos()` variable.'
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we have accessed the current order information via the `this.pos.get_order()`
    method. Then, we used the `set_discount()` method to set a 5% discount.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2* and *step 3*, we added the OWL template, which will be rendered
    over the Point of Sale keyboard. If you wish to learn more about this, please
    refer to [*Chapter 16*](B20997_16.xhtml#_idTextAnchor929), *The Odoo Web* *Library
    (OWL)*.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `addControlButton()` method supports one more parameter, which is `condition`.
    This parameter is used to hide/show the button based on some condition. The value
    of this parameter is a function that returns a Boolean. Based on the returned
    value, the Point of Sale system will hide or show the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following example for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Making RPC calls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though the Point of Sale application works offline, it is still possible to
    make RPC calls to the server. The RPC call can be used for any operation; you
    can use it for CRUD operations, or to perform an action on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will make an RPC call to fetch information about a customer’s last five
    orders.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we will use the `point_of_sale_customization` module created for the **Adding
    an action** button in the keyboard recipe. We will define the action button. When
    the user clicks on the action button, we will make an RPC call to fetch the order
    information and display it on the popup.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to display the last five orders for the selected customer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `/static/src/js/point_of_sale_customization.js`
    file; this will add a new action button to fetch and display the information about
    the last five orders when a user clicks on the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `onClick` function to the `PosLastOrders` component to manage button
    clicks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the QWeb template for the button to the `/``static/src/xml/point_of_sale_customization.xml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `point_of_sale_customization` module to apply the changes. After
    that, you will be able to see the **Last orders** button above the keyboard panel.
    When this button is clicked, a popup will be displayed with the order information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 22.5 – The last five orders of a customer](img/B20997_22_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22.5 – The last five orders of a customer
  prefs: []
  type: TYPE_NORMAL
- en: If no previous orders are found, a warning will be displayed instead of an order
    list.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we created the action button. If you want to learn more about the
    action button, refer to the *Adding an action button to the keyboard* recipe in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Before going into the technical details, let’s understand what we wanted to
    accomplish with this action button. Once clicked, we want to display information
    for the last five orders for the selected customer. There will be a few cases
    where the customer is not selected, or customers have no previous orders. In such
    cases, we want to show a popup with an appropriate message. The RPC utility is
    available with the `this.pos.orm.call` attribute of the component.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we added the click-handler function. On clicking the action button,
    the click-handler function will be called. This function will make the RPC call
    the server to fetch the order information.
  prefs: []
  type: TYPE_NORMAL
- en: We used the `this.pos.orm.call()` method to make RPC calls.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we used the `search_read` method to fetch data through RPC. We passed
    the customer domain to filter the orders. We also passed `limit` keyword arguments
    to fetch only five orders. `this.pos.orm.call()` is an asynchronous method and
    returns a `Promise` object, so to handle the result, you can use the `await` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The RPC call does not work in offline mode. If you have a good internet connection
    and you do not use offline mode frequently, you can use RPCs.
  prefs: []
  type: TYPE_NORMAL
- en: Although the Odoo Point of Sale application works offline, a few operations,
    such as creating or updating a customer, require an internet connection, as those
    features use RPC to call internally.
  prefs: []
  type: TYPE_NORMAL
- en: We displayed the previous order information in the popup. We used `SelectionPopup`,
    which is used to display a selectable list; we used it to show the last five orders.
    We also used `ErrorPopup` to display a warning message when a customer is not
    selected or no previous orders were found.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we added the QWeb template for the action button. The Point of
    Sale application will render this template to display the action button.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are plenty of other pop-up utilities. For example, `NumberPopup` is used
    to take a number input from the user. Refer to the files in the `@point_of_sale/app/utils/input_popups/number_popup`
    directory to see all these utilities. The `NumberPopup` module is probably a custom
    component or utility function to handle number input popups within a POS application.
    Depending on the context, this module could be responsible for displaying a pop-up
    dialog to input numerical data in a user-friendly way, such as for entering quantities
    or prices in a retail system. Use the following code to open a number popup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Modifying the Point of Sale screen UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The UI of the Point of Sale application is written with the OWL QWeb template.
    In this recipe, we will learn how you can modify UI elements in the Point of Sale
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use the `point_of_sale_customization` module created
    in the *Making RPC calls* recipe. We will modify the UI of the product card and
    display the profit margin per product.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to display the profit margin on the product card:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `/models/pos_session.py` file to fetch the extra
    field for the product’s actual price:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to `/static/src/xml/point_of_sale_customization.xml`
    in order to display a profit margin product card:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following style sheet to style the margin text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `point_of_sale_customization` module to apply the changes. After
    that, you will be able to see the profit margin on the product card:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 22.6 – The profit margins for products](img/B20997_22_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22.6 – The profit margins for products
  prefs: []
  type: TYPE_NORMAL
- en: If the product cost is not set on a product, then the product card will not
    display a profit margin, so make sure you set the product cost.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we want to use the `standard_price` field as the purchase cost
    of the product. This field is not loaded by default in Point of Sale applications.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 1*, we added the `standard_price` field for the `product.product` model.
    After this, the product data will have one more field – `standard_price`.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we extended the default product card template. You will need to
    use the `t- inherit` attribute to extend the existing **QWeb** template.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you need to use XPath to select the element on which you want to perform
    the operation. If you want to learn more about XPaths, refer to the *Changing
    existing views – view inheritance* recipe in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*.
  prefs: []
  type: TYPE_NORMAL
- en: To fetch the product sale price, we used the `product` properties sent from
    the parent OWL component. Then, we calculated the margin by using the product
    price and product cost. If you want to learn more about this, please refer to
    [*Chapter 16*](B20997_16.xhtml#_idTextAnchor929), *The Odoo Web* *Library (OWL)*.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we added the style sheet to modify the position of the margin element.
    This will add a background color to the margin element and place it under the
    price pill.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying existing business logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipes, we saw how to fetch data through an RPC and how to
    modify the UI of the Point of Sale application. In this recipe, we will see how
    you can modify or extend the existing business logic.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use the `point_of_sale_customization` module created
    in the *Modifying the Point of Sale screen UI* recipe, which is where we fetched
    the purchase price of a product and displayed the product margin. Now, in this
    recipe, we will show a warning to the user if they sell the product below the
    product margin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the business logic of the Point of Sale application is written in JavaScript,
    so we just need to make changes to it to achieve the goal of this recipe. Add
    the following code to `/static/src/js/point_of_sale_customization.js` to show
    a warning when the user sells a product below the purchase price:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `point_of_sale_customization` module to apply the changes. After
    the update, add the discount on the order line in such a way that the product
    price becomes less than the purchase price. A popup will appear with the following
    warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.7– A warning on a big discount](img/B20997_22_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22.7– A warning on a big discount
  prefs: []
  type: TYPE_NORMAL
- en: Note that when you set the product price below the actual cost, a warning will
    be displayed, and it will continue to pop up every time you take an action, such
    as when you change the quantity for the product order.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Point of Sale component register provides an `extend` method to make changes
    to an existing function. Internally, it monkey-patches the actual component definition.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we modified the `_setValue()` method. The `_setValue()` method
    of `ProductScreen` is called whenever the user makes a change to the order line.
    We wanted to show a warning if the user sets the product price below the product
    cost. So, we defined a new `_setValue()` method and called the `super` method;
    this will make sure that whatever actions the user performs are applied. After
    the call to the `super` method, we wrote our logic, which checks whether the product
    sale price is higher than the actual cost of the product. If not, we then show
    a warning to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Using `super` can break things if it’s not used carefully. If the method is
    inherited from several files, you must call the `super` method; otherwise, it
    will skip the logic in the subsequent inheritance. This sometimes leads to a broken
    internal data state.
  prefs: []
  type: TYPE_NORMAL
- en: We placed our business logic after the default implementation (`super`) is called.
    If you want to write business logic before the default implementation, you can
    do so by moving the `super` call to the end of the function.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying customer receipts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you customize a Point of Sale application, a common request you get from
    customers is to modify customer receipts. In this recipe, you will learn how to
    modify customer receipts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use the `point_of_sale_customization` module created
    in the *Modifying existing business logic* recipe. We will add one line to the
    Point of Sale receipt to show how much money the customer saved in the order.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to modify a customer receipt in the Point of Sale application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `/static/src/js/point_of_sale_customization.js`
    file. This will add extra data to the receipt environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to `/static/src/xml/point_of_sale_customization.xml`.
    This will extend the default receipt template and add our customization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `point_of_sale_customization` module to apply the changes. After
    that, add a product with the discount and check the receipt; you will see one
    extra line in the receipt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.8 – The updated receipt](img/B20997_22_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22.8 – The updated receipt
  prefs: []
  type: TYPE_NORMAL
- en: The receipt will not display the **Amount saved** screen if it is zero or negative.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is nothing new in this recipe. We just updated the receipt by using the
    previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 1*, we overrode the `export_for_printing()` function to send more data
    to the receipt environment. Whatever you are sending from the `export_for_printing()`
    method will be available in the QWeb template of the receipt. We compared the
    product’s base price with the product price in the receipt to calculate how much
    money the customer saved. We sent this data to the receipt environment via the
    `saved_amount` key.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we modified the default QWeb template of the receipt. The template
    name of the actual receipt is `OrderReceipt`, so we used it as a value in the
    `t-inherit` attribute. In *step 1*, we’d already sent the information needed to
    modify the receipt. In the QWeb template, we get the saved amount in the `props.data.saved_amount`
    key, so we just add one more `<div>` element before the footer. This will print
    the saved amount in the receipt. If you want to learn more about overriding, refer
    to the *Modifying the Point of Sale screen* *UI* recipe.
  prefs: []
  type: TYPE_NORMAL
