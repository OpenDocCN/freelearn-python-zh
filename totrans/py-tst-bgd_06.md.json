["```py\n$ python setup.py install\n\n```", "```py\n$ python setup.py install --user \n\n```", "```py\n    test_equal_and_almost_equal.py,  test_fail.py,  test_mocker_test_case.py,  test_pid.py,  test_raises.py,  test_setup_teardown.py,  test_true_and_false.py.\n\n    ```", "```py\n    $ nosetests --with-doctest --doctest-extension=txt -v\n\n    ```", "```py\n    >>> import time\n    >>> real_time = time.time\n    >>> time.time = (float(x) for x in xrange(1, 1000)).next\n    >>> import pid\n    >>> controller = pid.PID(P = 0.5, I = 0.5, D = 0.5, setpoint = 0,\n    ...                      initial = 12)\n    >>> controller.gains\n    (0.5, 0.5, 0.5)\n    >>> controller.setpoint\n    [0.0]\n    >>> controller.previous_time\n    1.0\n    ```", "```py\n    >>> from mocker import Mocker\n    >>> mocker = Mocker()\n    >>> mock_time = mocker.replace('time.time')\n    >>> t = mock_time()\n    >>> mocker.result(1.0)\n    >>> mocker.replay()\n    >>> import pid\n    >>> controller = pid.PID(P = 0.5, I = 0.5, D = 0.5, setpoint = 0,\n    ...                      initial = 12)\n    >>> controller.gains\n    (0.5, 0.5, 0.5)\n    >>> controller.setpoint\n    [0.0]\n    >>> controller.previous_time\n    1.0\n    >>> controller.previous_error\n    -12.0\n    >>> controller.integrated_error\n    0.0\n    >>> mocker.restore()\n    >>> mocker.verify()\n    ```", "```py\n$ nosetests --with-doctest --doctest-extension=txt -v\n\n```", "```py\n$ nosetests -v\n\n```", "```py\n$ nosetests\n\n```", "```py\n[nosetests]\nwith-doctest=1\ndoctest-extension=txt\n```", "```py\nnosetests --include=\"(?:^[Dd]oc)\"\n\n```", "```py\nThe graph module contains two classes: Node and Arc. An Arc is a connection between two Nodes. Each Node is an intersection of an arbitrary number of Arcs.\n\nArc objects contain references to the Node objects that the Arc connects, a textual identification label, and a \"cost\" or \"weight\", which is a real number.\n\nNode objects contain references to all of the connected Arcs, and a textual identification label.\n\nNode objects have a find_cycle(self, length) method which returns a list of Arcs making up the lowest cost complete path from the Node back to itself, if such a path exists with a length greater than 2 Arcs and less than or equal to the length parameter.\n\nNode and Arc objects have a __repr__(self) method which returns a representation involving the identification labels assigned to the objects.\n```", "```py\n    >>> from time import time\n\n    This isn't a reasonable test for any purpose, but it serves to\n    illustrate a test that can't work without a mock object in place.\n\n    >>> '%0.1f' % time()\n    '1.0'\n    >>> '%0.1f' % time()\n    '1.1'\n    >>> '%0.1f' % time()\n    '1.2'\n    ```", "```py\n    from mocker import Mocker\n\n    mocker = Mocker()\n\n    def setup():\n        fake_time = mocker.replace('time.time')\n\n        fake_time()\n        mocker.result(1.0)\n        fake_time()\n        mocker.result(1.1)\n        fake_time()\n        mocker.result(1.2)\n\n        mocker.replay()\n\n    def teardown():\n        mocker.restore()\n        mocker.verify()\n    ```", "```py\n    from unittest import TestCase\n    from mocker import Mocker\n    from datetime import date\n\n    mocker = Mocker()\n\n    def setup():\n        fake_date = mocker.replace(date)\n\n        fake_date.today()\n        mocker.result(date(year = 2009, month = 6, day = 12))\n        mocker.count(1, None)\n\n        mocker.replay()\n\n    def teardown():\n        mocker.restore()\n        mocker.verify()\n\n    class first_tests(TestCase):\n        def test_year(self):\n            self.assertEqual(date.today().year, 2009)\n\n        def test_month(self):\n            self.assertEqual(date.today().month, 6)\n\n        def test_day(self):\n            self.assertEqual(date.today().day, 12)\n\n    class second_tests(TestCase):\n        def test_isoformat(self):\n            self.assertEqual(date.today().isoformat(), '2009-06-12')\n    ```", "```py\n    $ nosetests\n\n    ```", "```py\n    from mocker import Mocker\n    from datetime import datetime\n\n    mocker = Mocker()\n\n    def setup():\n        fake_datetime = mocker.replace(datetime)\n\n        fake_datetime.now()\n        mocker.result(datetime(year = 2009, month = 6, day = 12,\n                               hour = 10, minute = 15, second = 5))\n        mocker.count(1, None)\n\n        mocker.replay()\n\n    def teardown():\n        mocker.restore()\n        mocker.verify()\n    ```", "```py\n    from unittest import TestCase\n    from datetime import datetime\n\n    class first_tests(TestCase):\n        def test_year(self):\n            self.assertEqual(datetime.now().year, 2009)\n\n        def test_month(self):\n            self.assertEqual(datetime.now().month, 6)\n\n        def test_day(self):\n            self.assertEqual(datetime.now().day, 12)\n\n        def test_hour(self):\n            self.assertEqual(datetime.now().hour, 10)\n\n        def test_minute(self):\n            self.assertEqual(datetime.now().minute, 15)\n\n        def test_second(self):\n            self.assertEqual(datetime.now().second, 5)\n    ```", "```py\n    from datetime import datetime\n    class third_tests(TestCase):\n        def test_isoformat(self):\n            self.assertEqual(datetime.now().isoformat(), \n                             '2009-06-12T10:15:05')\n    ```", "```py\n    $ nosetests\n\n    ```", "```py\n    import sys\n    from sqlite3 import connect\n\n    class grouped_tests:\n        def setup(self):\n            self.connection = connect(':memory:')\n            cursor = self.connection.cursor()\n            cursor.execute('create table test (a, b, c)')\n            cursor.execute('''insert into test (a, b, c) \n                              values (1, 2, 3)''')\n            self.connection.commit()\n\n        def teardown(self):\n            self.connection.close()\n\n        def test_update(self):\n            cursor = self.connection.cursor()\n            cursor.execute('update test set b = 7 where a = 1')\n\n        def test_select(self):\n            cursor = self.connection.cursor()\n            cursor.execute('select * from test limit 1')\n            assert cursor.fetchone() == (1, 2, 3)\n    ```", "```py\n    def platform_setup():\n        sys.platform = 'test platform'\n\n    def platform_teardown():\n        global sys\n        sys = reload(sys)\n\n    def standalone_test():\n        assert sys.platform == 'test platform'\n\n    standalone_test.setup = platform_setup\n    standalone_test.teardown = platform_teardown\n    ```", "```py\n    $ nosetests\n\n    ```"]