- en: Layout Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore how to arrange widgets within widgets to create
    a Python GUI. Learning about the fundamentals of GUI layout design will allow
    us to create great-looking GUIs. There are certain techniques that will help us
    achieve this layout design.
  prefs: []
  type: TYPE_NORMAL
- en: The grid layout manager is one of the most important layout tools that we will
    be using, and is built into `tkinter`. We can very easily create menu bars, tabbed
    controls (that is, Notebooks), and many more widgets using `tkinter`.
  prefs: []
  type: TYPE_NORMAL
- en: By completing this chapter, you will learn how to arrange your widgets to make
    your GUI look truly great! Learning layout management is fundamental to GUI design,
    even if you use other programming languages – but Python truly rocks!
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot provides an overview of the Python modules that will
    be used in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/697a7f34-0bda-4913-92e2-73841c18c2b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, we will lay out our GUI using Python 3.7 and above. We will
    provide the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Arranging several labels within a label frame widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using padding to add space around widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How widgets dynamically expand the GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aligning GUI widgets by embedding frames within frames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating menu bars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating tabbed widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the grid layout manage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arraning several labels within a label frame widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `LabelFrame` widget allows us to design our GUI in an organized fashion.
    We are still using the grid layout manager as our main layout design tool, but
    by using `LabelFrame` widgets, we get much more control over our GUI's design.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by adding more widgets to our GUI. We will make the GUI fully
    functional in upcoming recipes. Here, we will start to use the `LabelFrame` widget.
    We will reuse the GUI from the *Adding several widgets to a loop* recipe in [Chapter
    1](504fcb9a-0f3f-4872-b8cd-6c3dde0f511a.xhtml), *Creating the GUI Form and Adding
    Widgets*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open `GUI_adding_widgets_in_loop.py` from [Chapter 1](504fcb9a-0f3f-4872-b8cd-6c3dde0f511a.xhtml),
    *Creating the GUI Form and Adding Widgets*, and save the module as `GUI_LabelFrame_column_one.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `ttk.LabelFrame` and position it in the grid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create three `ttk` Labels, set their text attributes, and position them in
    the grid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions produce the following code from the `GUI_LabelFrame_column_one.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b30dd20-6b15-4895-b960-1eadd4a9c33a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the code. It will result in the following GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/589c7484-9fa0-417b-8c5f-c97360513856.png)'
  prefs: []
  type: TYPE_IMG
- en: Uncomment line 111 and notice the different alignment of `LabelFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, we can easily align the labels vertically by changing our code.
    To do this perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_LabelFrame_column_one.py` and save the module as `GUI_LabelFrame_column_one_vertical.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the column and row values, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The only change we had to make was in the column and row numbering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `GUI_LabelFrame_column_one_vertical.py` file. Now the GUI label frame
    will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/818d35aa-5c7b-4628-bf32-6f897673cd02.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In line 109, we create our first `ttk LabelFrame` widget and assign the resulting
    instance to the `buttons_frame` variable. The parent container is `win`, which
    is our main window.
  prefs: []
  type: TYPE_NORMAL
- en: In lines 114 to 116, we create labels and place them into a `LabelFrame`. `buttons_frame`
    is the parent of the labels. We use the important grid layout tool to arrange
    the labels within `LabelFrame`. The column and row properties of this layout manager
    give us the power to control our GUI layout.
  prefs: []
  type: TYPE_NORMAL
- en: The parent of our labels is the `buttons_frame` instance variable of `LabelFrame`,
    not the `win` instance variable of the main window. We can see the beginning of
    a layout hierarchy here.
  prefs: []
  type: TYPE_NORMAL
- en: We can see how easy it is to change our layout via the column and row properties.
    Note how we change the column to 0, and how we layer our labels vertically by
    numbering the row values sequentially.
  prefs: []
  type: TYPE_NORMAL
- en: The name **ttk** stands for **themed tk**. The tk-themed widget set was introduced
    in Tk 8.5.
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to arrange several labels within a `LableFrame`
    widget.
  prefs: []
  type: TYPE_NORMAL
- en: See also…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Aligning GUI widgets by embedding frames within frames* recipe, we will
    embed `LabelFrame` widgets within `LabelFrame` widgets, nesting them to control
    our GUI layout.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using padding to add space around widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our GUI is coming along nicely. Next, we will improve the visual aspects of
    our widgets by adding a little space around them so that they can breathe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While `tkinter` might have had a reputation for creating not-so-pretty GUIs,
    this has dramatically changed since version 8.5.
  prefs: []
  type: TYPE_NORMAL
- en: 'To better understand the major improvements to Tk, the following is a quote
    from the official website; you can find it at the following link: [https://tkdocs.com/tutorial/onepage.html](https://tkdocs.com/tutorial/onepage.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '"*This tutorial is designed to help people get up to speed quickly with building
    mainstream desktop graphical user interfaces with Tk, and in particular Tk 8.5
    and 8.6\. Tk 8.5 was an incredibly significant milestone release and a significant
    departure from the older versions of Tk which most people know and recognize.*"'
  prefs: []
  type: TYPE_NORMAL
- en: You just have to know how to use the tools and techniques that are available.
    That's what we will do next.
  prefs: []
  type: TYPE_NORMAL
- en: '`tkinter` version 8.6 ships with Python 3.7\. There''s no need to install anything
    other than Python in order to use it.'
  prefs: []
  type: TYPE_NORMAL
- en: A simple way of adding spacing around widgets will be shown first, and then
    we will use a loop to achieve the same thing in a much better way.
  prefs: []
  type: TYPE_NORMAL
- en: Our `LabelFrame` looks a bit tight as it blends into the main window toward
    the bottom. Let's fix this now.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to add padding around the widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_LabelFrame_column_one.py` and save it as `GUI_add_padding.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `padx` and `pady` to the grid method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code. Now our `LabelFrame` has some breathing space. We can see this
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/90c5377e-da9d-433c-8ee5-d9d059432e52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use a loop to add space around the labels contained within `LabelFrame`.
    Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_add_padding.py` and save it as `GUI_add_padding_loop.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following loop below the creation of the three Labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions produce the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7962c5d3-4a95-49cb-b3c8-356f64794399.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the `GUI_add_padding_loop.py` file code. Now the labels within the `LabelFrame`
    widget have some space around them too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/61fdfc0b-4c66-4681-9e4f-099e12d39d50.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To see this effect better, let''s do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_add_padding_loop.py` and save it as `GUI_long_label.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the text of `Label1`, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code. This will generate what''s shown in the following screenshot,
    which shows our GUI. Note how there is now space to the right of the long label,
    next to the dots. The last dot doesn''t touch `LabelFrame`, which it otherwise
    would have without the added space:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1d66daea-012e-476f-9bdd-6015b0ea20c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also remove the `LabelFrame` name to see the effect `padx` has on the
    position of our labels. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_add_padding_loop.py` and save it as `GUI_LabelFrame_no_name.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When creating the button, set the text attribute to an empty string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code. By setting the `text` attribute to an empty string, we remove
    the name that was previously displayed for `LabelFrame`. This can be seen in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/337c2988-38a6-49d1-8a72-ca53d1956d1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In `tkinter`, adding space horizontally and vertically is done by using the
    built-in `padx` and `pady` attributes. These can be used to add space around many
    widgets, improving horizontal and vertical alignments, respectively. We hard-coded
    `20` pixels of space to the left and right of `LabelFrame`, and we added `40`
    pixels to the top and bottom of the frame. Now our `LabelFrame` stands out better
    than it did before.
  prefs: []
  type: TYPE_NORMAL
- en: The `grid_configure()` function allows us to modify the UI elements before the
    main loop displays them. So, instead of hard-coding values when we first create
    a widget, we can work on our layout and then arrange spacing toward the end of
    our file, just before the GUI is created. This is a neat technique to know about.
  prefs: []
  type: TYPE_NORMAL
- en: The `winfo_children()` function returns a list of all the children belonging
    to the `buttons_frame` variable. This allows us to loop through them and assign
    the padding to each label.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to notice is that the spacing to the right of the labels isn't really
    visible. This is because the title of `LabelFrame` is longer than the names of
    the labels. We suggest you experiment with this by making the label names longer.
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to add space around widgets using padding. Now
    let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically expanding the GUI using widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have noticed from the previous screenshots and by running the preceding
    code that the widgets can extend themselves to take up as much space as they need
    in order to visually display their text.
  prefs: []
  type: TYPE_NORMAL
- en: Java introduced the concept of dynamic GUI layout management. In comparison,
    visual development IDEs, such as VS.NET, lay out the GUI in a visual manner, and
    basically hard-code the x and y coordinates of the UI elements.
  prefs: []
  type: TYPE_NORMAL
- en: Using `tkinter`, this dynamic capability creates both an advantage and a little
    bit of a challenge because, sometimes, our GUI dynamically expands when we would
    like it not to be so dynamic! Well, we are dynamic Python programmers, so we can
    figure out how to make the best use of this fantastic behavior!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of the previous recipe, *Using padding to add space around
    widgets*, we added a `LabelFrame` widget. This moved some of our controls to the
    center of column `0`. We might not want this modification in our GUI layout. We
    will explore some ways to solve this in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's take a look at the subtle details that are going on in our GUI
    layout in order to understand it better.
  prefs: []
  type: TYPE_NORMAL
- en: We are using the `grid` layout manager widget, which places our widgets in a
    zero-based grid. This is very similar to an Excel spreadsheet or a database table.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of a grid layout manager with two rows and three
    columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Row 0; Col 0 | Row 0; Col 1 | Row 0; Col 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Row 1; Col 0 | Row 1; Col 1 | Row 1; Col 2 |'
  prefs: []
  type: TYPE_TB
- en: Using the grid layout manager, the width of any given column is determined by
    the longest name or widget in that column. This, in turn, affects all of the rows.
  prefs: []
  type: TYPE_NORMAL
- en: By adding our `LabelFrame` widget and giving it a title that is longer than
    a hard-coded size widget, we dynamically move those widgets to the center of column
    0\. By doing so, we are adding space on the left- and right-hand side of those
    widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Incidentally, because we used the sticky property for the `Checkbutton` and
    `ScrolledText` widgets, those remain attached to the left-hand side of the frame.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the screenshot from the first recipe in this chapter, *Arranging
    several labels within a label frame widget*, in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the text property of `LabelFrame`, which is displayed as the title of
    `LabelFrame`, is longer than both our `Enter a name:` label and the text box entry
    below it, those two widgets are dynamically centered within the new width of column
    0, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9968bf9b-acca-401d-b6c7-46b30443f209.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice how both the label and the entry below it are no longer positioned on
    the left but have been moved to the center within the grid column.
  prefs: []
  type: TYPE_NORMAL
- en: 'We added the following code to `GUI_LabelFrame_no_name.py` to create a `LabelFrame`
    and then placed labels in this frame to stretch both the `Label` frame and the
    widgets contained therein:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `Checkbutton` and `Radiobutton` widgets in column `0` did not get centered
    because we used the `sticky=tk.W` attribute when we created those widgets.
  prefs: []
  type: TYPE_NORMAL
- en: For the `ScrolledText` widget, we also used `sticky=tk.WE`, which binds the
    widget to both the west (the left) and east (the right) side of the frame.
  prefs: []
  type: TYPE_NORMAL
- en: The `sticky` attribute is available in `tkinter` and aligns widgets within the
    `grid` control.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_arranging_labels.py` and save it as `GUI_remove_sticky.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `sticky` attribute from the `ScrolledText` widget and observe the
    effect this change has.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The preceding instructions produce the following code. Notice how the original
    `src.grid(...)` is now commented out and the new `src.grid(...)` no longer has
    the `sticky` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d4e7aa9-a676-4021-8a85-060b5a690434.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the code. Now our GUI has a new space around the `ScrolledText` widget,
    both on the left- and right-hand sides. Because we used the `columnspan=3` property,
    our `ScrolledText` widget still spans all three columns. This is shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc8b8ec3-9633-4623-ada6-a36d76a20d83.png)'
  prefs: []
  type: TYPE_IMG
- en: Using `columnspan` is necessary to arrange our GUI in the way we desire it to
    look.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how *not* using the `columnspan` attribute could screw
    up our nice GUI design by doing the following modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_remove_sticky.py` and save it as `GUI_remove_columnspan.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we remove `columnspan=3`, we'll get the GUI that's shown in the following
    screenshot, which is not what we want. Now `ScrolledText` only occupies column
    0 and, because of its size, stretches the layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `GUI_remove_columnspan.py` file and observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/670f41ab-d0a3-4d62-941c-0dc7e6156e8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One way to get our layout back to where it was before adding `LabelFrame` is
    to adjust the grid column position. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_remove_columnspan.py` and save it as `GUI_LabelFrame_column_one.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the column value from `0` to `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code. Now our GUI will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c840f608-2cf3-49b9-a2e8-ddbe621ea47c.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because we are still using individual widgets, our layout can get messed up.
    By moving the column value of `LabelFrame` from `0` to `1`, we were able to get
    the controls back to where they used to be and where we prefer them to be. The
    left-most label, text, `Checkbutton`, `ScrolledText`, and `Radiobutton` widgets
    are now located where we intended them to be. The second label and the `Entry`
    text located in column `1` aligned themselves to the center of the length of the
    **Labels in a Frame** widget, so we basically moved our alignment challenge one
    column to the right. It is not so visible now because the size of the **Choose
    a number:** label is almost the same as the size of the **Labels in a Frame**
    title, and so the column's width was already close to the new width that was generated
    by `LabelFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next recipe, *Aligning GUI widgets by embedding frames within frames*,
    we will embed frames within frames to avoid the accidental misalignment of widgets
    we just experienced in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to dynamically expand the GUI using widgets.
    Now let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Aligning GUI widgets by embedding frames within frames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll have better control of our GUI layout if we embed frames within frames.
    This is what we will do in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dynamic behavior of Python and its GUI modules can create challenges when
    we want to make our GUI really look the way we want it to. In this recipe, we
    will embed frames within frames to get more control of our layout. This will establish
    a stronger hierarchy among the different UI elements, making the visual appearance
    easier to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue using the GUI we created in the previous recipe, *Dynamically
    expanding the GUI using widgets*.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will create a top-level frame that will contain other frames and widgets.
    This will help us get our GUI layout just the way we want.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, we will have to embed our current controls within a central frame
    called `ttk.LabelFrame`. This frame, `ttk.LabelFrame`, is the child of the main
    parent window, and all the controls will be the children of this `ttk.LabelFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have assigned all the widgets to our main GUI frame directly. Now
    we will only assign `LabelFrame` to our main window. After that, we will make
    this `LabelFrame` the parent container for all the widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'This creates the following hierarchy in our GUI layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9721932-d117-4ac0-aaaf-1ca4e44f01c9.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram, `win` is the variable that holds a reference to our
    main GUI `tkinter` window frame, `mighty` is the variable that holds a reference
    to our `LabelFrame` and is a child of the main window frame (`win`), and `Label`
    and all the other widgets are now placed into the `LabelFrame` container (`mighty`).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_LabelFrame_column_one.py` and save it as `GUI_embed_frames.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code toward the top of our Python module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will modify the following controls to use `mighty` as the parent, replacing
    `win`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the Label parent from `win` to `mighty`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `GUI_embed_frames.py` file. This results in the GUI shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/26eecbb3-1217-40be-b292-464b0b37ea4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note how all the widgets are now contained in the **Mighty Python** `LabelFrame`,
    which surrounds all of them with a barely visible thin line. Next, we can reset
    the **Labels in a Frame** widget to the left without messing up our GUI layout:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_embed_frames.py` and save it as `GUI_embed_frames_align.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change `column` to `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `GUI_embed_frames_align.py` file. This results in the GUI shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa170b34-aab9-4104-ba2b-b0cea80fb244.png)'
  prefs: []
  type: TYPE_IMG
- en: Oops – maybe not. While our frame-within-another-frame aligned nicely to the
    left, it pushed our top widgets to the center (the default setting).
  prefs: []
  type: TYPE_NORMAL
- en: 'To align them to the left, we have to force our GUI layout by using the `sticky`
    property. By assigning it `''W''` (west), we can force the widget to be left-aligned.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_embed_frames_align.py` and save it as `GUI_embed_frames_align_west.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `sticky` attribute to the label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code. This gives us the following GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54f6b619-92dc-42da-9e7e-1f75cb2f88a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s align the `Entry` widget in column `0` to the left:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_embed_frames_align_west.py` and save it as `GUI_embed_frames_align_entry_west.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `sticky` attribute to align the Entry left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `GUI_embed_frames_align_entry_west.py` file. Now both the label and
    the entry are aligned toward the west (left):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e592b996-0339-4ed6-a87f-640ea41863b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note how we aligned the label, but not the text box below it. We have to use
    the `sticky` property for all the controls we want to left-align. We can do that
    in a loop by using the `winfo_children()` and `grid_configure(sticky='W')` properties,
    as we did in the *Using padding to add space around widgets* recipe of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The `winfo_children()` function returns a list of all the children belonging
    to the parent. This allows us to loop through all the widgets and change their
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: Using `tkinter` to force the naming to the left, right, top, or bottom is very
    similar to Java's West, East, North, and South, which are abbreviated to `'W'`,
    `'E'`, and so on. We can also use `tk.W` instead of `'W'`. This requires that
    we import the `tkinter` module aliased as `tk`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a previous recipe, we combined `''W''` and `''E''` to make our `ScrolledText`
    widget attach itself both to the left- and right-hand sides of its container.
    The result of combining `''W''` and `''E''` was `''WE''`. We can add more combinations
    as well: `''NSE''` will stretch our widget to the top, bottom, and right-hand
    side. If we only have one widget in our form, for example, a button, we can make
    it fill in the entire frame by using all the options, that is, `''NSWE''`. We
    can also use tuple syntax: `sticky=(tk.N, tk.S, tk.W, tk.E)`.'
  prefs: []
  type: TYPE_NORMAL
- en: To obviate the influence that the length of our **Labels in a Frame** `LabelFrame`
    has on the rest of our GUI layout, we must not place this `LabelFrame` into the
    same `LabelFrame` as the other widgets. Instead, we need to assign it directly
    to the main GUI form (`win`).
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to align the GUI widget by embedding frames with
    frames. Now let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating menu bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a menu bar to our main window, add menus to the
    menu bar, and then add menu items to the menus.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by learning how to add a menu bar, several menus, and a few menu
    items. In the beginning, clicking on a menu item will have no effect. We will
    add functionality to the menu items later, for example, closing the main window
    when clicking the Exit menu item and displaying a Help | About dialog.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue to extend the GUI we created in the previous recipe, *Aligning
    GUI widgets by embedding frames within frames*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a menu bar, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_embed_frames_align_entry_west.py` and save it as `GUI_menubar_file.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `Menu` class from `tkinter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create the menu bar. Add the following code toward the bottom
    of the module, just above where we created the main event loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions produce the following code from the `GUI_menubar_file.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da98614c-5f97-42bf-82a7-f38e7f5181b6.png)'
  prefs: []
  type: TYPE_IMG
- en: In line 119, we are calling the constructor of the imported `Menu` module class
    and passing in our main GUI instance, `win`. We save an instance of the `Menu`
    object in the `menu_bar` variable. In line 120, we configure our GUI to use our
    newly created `Menu` as the menu for our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: To make this work, we also have to add the menu to the menu bar and give it
    a label.
  prefs: []
  type: TYPE_NORMAL
- en: 'The menu item was already added to the menu, but we still have to add the menu
    to the menu bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code adds a menu bar with a menu that has a menu item.
    This is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a0adda3-0f87-4ccd-8f15-1f69030c28f7.png)'
  prefs: []
  type: TYPE_IMG
- en: If this `tkinter` menu bar syntax seems a little bit confusing, don't worry.
    This is just the syntax of `tkinter` for creating a menu bar. It isn't very Pythonic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll add a second menu item to the first menu that we added to the
    menu bar. This can be done by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_menubar_file.py` and save it as `GUI_menubar_exit.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the Exit menu item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code produces the following result, that is, `GUI_menubar_exit.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e7a9db04-5c15-4377-9072-97ab9a4a1021.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can add separator lines between the menu items by adding a line of code
    in-between the existing menu items. This can be done by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_menubar_exit.py` and save it as `GUI_menubar_separator.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a separator, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding code. In the following screenshot, we can see that a separator
    line has been added in-between our two menu items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fff83e44-5dc7-4130-9ad1-74eb315127bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By passing in the `tearoff` property to the constructor of the menu, we can
    remove the first dashed line that, by default, appears above the first menu item
    in a menu. This can be done by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_menubar_separator.py` and save it as `GUI_menubar_tearoff.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the `tearoff` attribute to `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding code. In the following screenshot, the dashed line no longer
    appears, and our GUI looks so much better:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b12cde19-95bf-4853-b0f9-a12b0ce98605.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we'll add a second menu, `Help`, which will be placed horizontally, to
    the right of the first menu. We'll give it one menu item, named `About`, and add
    this second menu to the menu bar.
  prefs: []
  type: TYPE_NORMAL
- en: '**File** and **Help | About** are very common Windows GUI layouts we are all
    familiar with, and we can create these same menus using Python and `tkinter`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_menubar_tearoff.py` and save it as `GUI_menubar_help.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a second menu with a menu item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions produce the following code, which can be found in
    the `GUI_menubar_help.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1ae02a1-4572-45af-81bf-019732b4cce2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the preceding code. As shown in the following screenshot, we have a second
    menu with a menu item in the menu bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1c5042f-9250-4409-9e29-637a6c019e3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, our GUI has a menu bar and two menus that contain some menu
    items. Clicking on them doesn''t do much until we add some commands. That''s what
    we will do next. Perform the following actions, above the code for the creation
    of the menu bar:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_menubar_help.py` and save it as `GUI_menubar_exit_quit.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `quit` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll bind the **File | Exit** menu item to this function by adding
    the following command to the menu item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions produce the following code, which can be found in
    the `GUI_menubar_exit_quit.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/800f8cd8-f832-4a8f-ad1f-d7167af5cb04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the code and click the Exit menu item. The following GUI shows the output
    of the code we run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/090f67fe-7bd9-4c69-b822-4deac2e6b4d0.png)'
  prefs: []
  type: TYPE_IMG
- en: When we click the **Exit** menu item, our application will indeed exit.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we call the `tkinter` constructor of the `Menu` class. Then, we assign
    the newly created menu to our main GUI window. This, in fact, becomes the menu
    bar. We save a reference to it in the instance variable named `menu_bar`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a menu and add two menu items to the menu. The `add_cascade()`
    method aligns the menu items one below the other, in a vertical layout.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we add a separator line between the two menu items. This is generally
    used to group related menu items (hence the name).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we disable the `tearoff` dashed line to make our menu look much better.
  prefs: []
  type: TYPE_NORMAL
- en: Without disabling this default feature, the user can tear off the menu from
    the main window. I find this capability of little value. Feel free to play around
    with it by double-clicking the dashed line (before disabling this feature). If
    you are using a Mac, this feature might not be enabled; if so, you don't have
    to worry about it.
  prefs: []
  type: TYPE_NORMAL
- en: We then add a second menu to the menu bar. We can keep on adding menus using
    this technique.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a function to quit our GUI application cleanly. How we quit
    a running Python application is the recommended Pythonic way to end the main event
    loop.
  prefs: []
  type: TYPE_NORMAL
- en: We bind the function we created to the menu item, which is the standard way
    of binding a function to a menu item, using `command` attribute of `tkinter`.
    Whenever we want our menu items to actually do something, we have to bind each
    of them to a function.
  prefs: []
  type: TYPE_NORMAL
- en: We are using a recommended Python naming convention by preceding our quit function
    with one single underscore. This indicates that this is a private function that
    can't be called by the clients of our code.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add the **Help | About** functionality in [Chapter 3](ad17a5cd-0b92-4796-96b8-35151c3bbf44.xhtml),
    *Look and Feel Customization*, which introduces message boxes and much more.
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create menu bars. Now let's move on to the
    next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tabbed widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create tabbed widgets to further organize our expanding
    GUI written in `tkinter`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To improve our Python GUI using tabs, we will start at the beginning, using
    as little code as possible. In this recipe, we will create a simple GUI and then
    add widgets from the previous recipes, placing them in this new tabbed layout.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create *Tab* controls, which in `tkinter` are called
    `Notebook`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Python module and name it `GUI_tabbed.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the module, import `tkinter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an instance of the `Tk` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a title via the `title` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `tabControl` using the `ttk` `Notebook`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the tab to `tabControl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `pack` to make the control visible inside the GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding instructions produce the following code, which can be found in
    the `GUI_tabbed.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12d3f1af-2862-47b7-88f7-f42ee3dc492e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the preceding code. The following screenshot shows the GUI after running
    the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/31b9d3e2-f357-46c3-a477-fcd4d6a84bc1.png)'
  prefs: []
  type: TYPE_IMG
- en: This widget adds another very powerful tool to our GUI design toolkit. It comes
    with its own limitations, all of which can be seen in this recipe (for example,
    we can neither reposition the GUI nor does it show the entire GUI title).
  prefs: []
  type: TYPE_NORMAL
- en: 'While we used the grid layout manager for simpler GUIs in the previous recipes,
    we can use a simpler layout manager: `pack` is one of them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code, we pack the `tabControl` and `ttk.Notebook` widgets
    into the main GUI form, expanding the notebook-tabbed control to fill in all the
    sides. We can add a second tab to our control and click between them by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_tabbed.py` and save it as `GUI_tabbed_two.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a second tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding code. In the following screenshot, we have two tabs. Click
    on Tab 2 to give it focus:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4b7c673-6726-42a2-b445-1889d574c4d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We would really like to see our window''s title; to do this, we have to add
    a widget to one of our tabs. The widget has to be wide enough to expand our GUI
    dynamically so as to display our window title. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_tabbed_two.py` and save it as `GUI_tabbed_two_mighty.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `LabelFrame` and a `Label`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding code. As shown in the following screenshot, we have **Mighty
    Python** inside **Tab 1**. This expands our GUI, but the added widgets aren''t
    large enough to make the GUI title visible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a51da43-5e68-42f9-8289-5d63622945ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After adding a second label plus some spacing around them, we stretch the layout
    enough so we can see our GUI title again:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_tabbed_two_mighty.py` and save it as `GUI_tabbed_two_mighty_labels.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a second label and spacing via a loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding code. The following screenshot shows the output from running
    this code, which can also be found in the `GUI_tabbed_two_mighty_labels.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca8a9263-f524-4ab6-95b4-edf0d889840c.png)'
  prefs: []
  type: TYPE_IMG
- en: We can keep placing all the widgets we have created so far into our newly created
    tab controls.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the code from [https://github.com/PacktPublishing/Python-GUI-Programming-Cookbook-Third-Edition](https://github.com/PacktPublishing/Python-GUI-Programming-Cookbook-Third-Edition).
    Try to create the tabbed GUI yourself. We have created and aligned all of the
    widgets in the previous recipes, but without placing them onto two different tabs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the `GUI_tabbed_all_widgets.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/929ce7d1-3c99-43d1-be2c-75236bc872a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, all the widgets reside inside **Tab 1**. Let''s move some of
    them to **Tab 2**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a second `LabelFrame`, which will be the container of the widgets we
    will be relocating to **Tab 2**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we move the `Check` and `Radio` buttons to **Tab 2** by specifying the
    new parent container, which is a new variable that we name `mighty2`. The following
    is an example that we will apply to all the controls that relocate to Tab 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `GUI_tabbed_all_widgets_both_tabs.py` file. The following screenshot
    shows the output we receive after running the preceding code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bb8e64c8-e598-4af3-ad59-85aa3779589e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now click on Tab 2 and see our relocated widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3aa893f1-d0e4-40aa-aa61-a9d70c849c6b.png)'
  prefs: []
  type: TYPE_IMG
- en: After running the preceding code, our GUI looks different. Tab 1 has fewer widgets
    than it had before when it contained all of our previously created widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking the relocated `Radiobutton` no longer has any effect, so we will change
    their actions to renaming the text attribute, from the title of the `LabelFrame`
    widget to the name the `Radiobuttons` display. When we click the **Gold** `Radiobutton`,
    we no longer set the background of the frame to the color gold. Instead, we replace
    the `LabelFrame` text title. Python''s **The Snake** now becomes **Gold**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now selecting any of the `RadioButton` widgets will change the name of the `LabelFrame`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `GUI_tabbed_all_widgets_both_tabs_radio.py` file. The following screenshot
    shows the output of running the code in this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/630e8e72-9a73-4be2-8afd-19def398719e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice how the label frame is now titled Blue. Clicking on the Gold radio button
    changes this title to Gold, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/476fb400-d1bc-4636-9587-2e39b0b0db04.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On executing the code to create Tab 1, it is created but without any information
    in it. We then created a second tab, Tab 2\. After creating the second tab, we
    moved some of the widgets that originally resided in **Tab 1** to **Tab 2**. Adding
    tabs is another excellent way to organize our ever-increasing GUI. This is a nice
    way to handle the complexity of our GUI design. We can arrange widgets in groups,
    where they naturally belong, and free our users from clutter by using tabs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `tkinter`, creating tabs is done via the `Notebook` widget, which is the
    tool that allows us to add tabbed controls. The `tkinter notebook` widget, like
    so many other widgets, comes with additional properties that we can use and configure.
    An excellent place to start exploring the additional capabilities of the `tkinter`
    widgets at our disposal is the official website: [https://docs.python.org/3.1/library/tkinter.ttk.html#notebook](https://docs.python.org/3.1/library/tkinter.ttk.html#notebook).'
  prefs: []
  type: TYPE_NORMAL
- en: We've successfully learned how to create tabbed widgets. Now let's move on to
    the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using the grid layout manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The grid layout manager is one of the most useful layout tools at our disposal.
    While layout tools such as `pack` are simple and easy to use, `grid` gives us
    a lot of control over our layout – especially when we combine `grid` with embedded
    `frames`.
  prefs: []
  type: TYPE_NORMAL
- en: We have already used it in many recipes, for example, because it is just so
    powerful.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will review some grid layout manager techniques. We have
    already used them, but we will explore them in more detail here.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have created rows and columns, which is the database approach
    to GUI design (MS Excel does the same). We hard-coded the first rows. However,
    if we forget to specify where we went the next row to reside, `tkinter` fills
    this in without us even noticing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To observe this, let''s take the code from a recipe we previously worked on:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_tabbed_all_widgets_both_tabs_radio.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Comment out the `scr.grid` line, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a75b0df-329d-48f9-8ae7-761cc986003f.png)'
  prefs: []
  type: TYPE_IMG
- en: '`tkinter` automatically adds the missing row to where we didn''t specify any
    particular row.'
  prefs: []
  type: TYPE_NORMAL
- en: Run the code and notice how our radio buttons suddenly ended up in the middle
    of the Text widget!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7bfd0117-139a-42dd-b996-36d9c9ed67d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We laid out the `Entry` widgets on row 1\. However, we forgot to specify the
    row for our `ScrolledText` widget, which we reference via the `scr` variable.
    Then, we added the `Radiobutton` widgets we want to be laid out in row `3`.
  prefs: []
  type: TYPE_NORMAL
- en: This works nicely because `tkinter` automatically incremented the row position
    for our `ScrolledText` widget so it used the next highest row number, which was
    row `2`.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at our code and not realizing that we forgot to explicitly position
    our `ScrolledText` widget to row `2`, we might think nothing resides there.
  prefs: []
  type: TYPE_NORMAL
- en: Due to this, we might try the following. If we set the `curRad` variable to
    use row `2`, we might get an unpleasant surprise, as shown in the final screenshot
    in the *How to do it...* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: Note how our row of `RadioButton`(s) suddenly ended up in the middle of our
    `ScrolledText` widget! This is definitely not what we intended our GUI to look
    like!
  prefs: []
  type: TYPE_NORMAL
- en: If we forget to explicitly specify the row number, by default, `tkinter` will
    use the next available row.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also used the `columnspan` property to make sure our widgets did not get
    limited to just one column, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a28b974-ee31-4563-bab1-a5a28a5aa813.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows how we made sure that our `ScrolledText` widget
    spans all the columns in our GUI.
  prefs: []
  type: TYPE_NORMAL
