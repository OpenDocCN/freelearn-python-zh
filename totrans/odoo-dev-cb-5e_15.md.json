["```py\n    /** @odoo-module */\n    import { Component} from \"@odoo/owl\";\n    import { registry } from \"@web/core/registry\";\n    ```", "```py\n    export class CategColorField extends Component {\n    ```", "```py\n    export class CategColorField extends Component {\n       setup() {\n         this.totalColors = [1,2,3,4,5,6];\n         super.setup();\n      }\n      clickPill(value) {\n        this.props.record.update({ [this.props.name]: value });\n      }\n    }\n    ```", "```py\n    CategColorField.template = \"CategColorField\";\n    CategColorField.supportedTypes = [\"integer\"];\n    ```", "```py\n    registry.category(\"fields\").add(\"category_color\", {\n      component: CategColorField,\n    });\n    ```", "```py\n    <templates xml:space=\"preserve\">\n      <t t-name=\"CategColorField\" owl=\"1\">\n        <div>\n          <t t-foreach=\"totalColors\" t-as=\"color\" t-key=\"color\">\n             <span t-attf-class=\"o_color_pill o_color_#{color}\n                {{props.record.data[props.name] == color ? 'active': ''}}\"\n                t-att-data-value=\"color\"\n                t-on-click=\"() => this.clickPill(color)\"/>\n           </t>\n           <div class=\"categInformationPanel\n    \"/>\n        </div>\n      </t>\n    </templates>\n    ```", "```py\n    .o_field_category_color {\n      .o_color_pill {\n        display: inline-block;\n        height: 25px;\n        width: 25px;\n        margin: 4px;\n        border-radius: 15px;\n        position: relative;\n        @for $size from 1 through length($o-colors) {\n          &.o_color_#{$size - 1} {\n            background-color: nth($o-colors, $size);\n            &:not(.readonly):hover {\n              transform: scale(1.2);\n              transition: 0.3s;\n              cursor: pointer;\n            }\n            &.active:after{\n              content: \"\\f00c\";\n              display: inline-block;\n              font: normal 14px/1 FontAwesome;\n              font-size: inherit;\n              color: #fff;\n              position: absolute;\n              padding: 4px;\n              font-size: 16px;\n            }\n          }\n        }\n      }\n    }\n    ```", "```py\n    'assets': {\n      'web.assets_backend': [\n        'my_hostel/static/src/scss/field_widget.scss',\n        'my_hostel/static/src/js/field_widget.js',\n        'my_hostel/static/src/xml/field_widget.xml',\n      ],\n    }\n    ```", "```py\n    category = fields.Integer('Category')\n    ```", "```py\n    <field name=\"category\" widget=\"category_color\"/>\n    ```", "```py\n    import { renderToElement } from \"@web/core/utils/render\";\n    ```", "```py\n    <t t-name=\"CategColorField\">\n      <div>\n        <t t-foreach=\"totalColors\" t-as=\"color\" t-key=\"color\">\n           <span t-attf-class=\"o_color_pill o_color_#{color}\n                {{props.record.data[props.name] == color ? 'active': ''}}\"\n                t-att-data-value=\"color\"\n                t-on-click=\"() => this.clickPill(color)\"\n                t-on-mouseover.prevent=\"categInfo\"/>\n        </t>\n        <div class=\"categInformationPanel\"/>\n      </div>\n    </t>\n    <t t-name=\"CategInformation\">\n      <div t-attf-class=\"categ_info o_color_pill o_color_#{value}\">\n        <t t-if=\"value == 1\">\n          Single Room With AC<br/>\n          <ul>\n            <li>\n              Small Dressing Table\n            </li>\n            <li>\n              Small Bedside Table\n            </li>\n            <li>\n              Small Writing Table\n            </li>\n            <li>\n              Attached Bathroom\n            </li>\n          </ul>\n        </t>\n        <t t-if=\"value == 2\">\n          Single Room With None AC<br/>\n          <ul>\n            <li>\n              Small Dressing Table\n            </li>\n            <li>\n              Small Bedside Table\n            </li>\n            <li>\n              Small Writing Table\n            </li>\n            <li>\n              Attached Bathroom\n            </li>\n          </ul>\n        </t>\n        <t t-if=\"value == 3\">\n          King Double Room With AC<br/>\n          <ul>\n            <li>\n              King Size Double Bed\n            </li>\n            <li>\n              Small Dressing Table\n            </li>\n            <li>\n              Small Bedside Table\n            </li>\n            <li>\n              Small Writing Table\n            </li>\n            <li>\n              TV\n            </li>\n            <li>\n              Small Fridge\n            </li>\n            <li>\n              Attached Bathroom\n            </li>\n          </ul>\n        </t>\n        <t t-if=\"value == 4\">\n          King Double Room With None AC<br/>\n          <ul>\n            <li>\n              King Size Double Bed\n            </li>\n            <li>\n              Small Dressing Table\n            </li>\n            <li>\n              Small Bedside Table\n            </li>\n            <li>\n              Small Writing Table\n            </li>\n            <li>\n              TV\n            </li>\n            <li>\n              Small Fridge\n            </li>\n            <li>\n              Attached Bathroom\n            </li>\n          </ul>\n        </t>\n        <t t-if=\"value == 5\">\n          Queen Double Room With AC<br/>\n          <ul>\n            <li>\n              Queen Size Double Bed\n            </li>\n            <li>\n              Small Dressing Table\n            </li>\n            <li>\n              Small Bedside Table\n            </li>\n            <li>\n              Small Writing Table\n            </li>\n            <li>\n              TV\n            </li>\n            <li>\n              Small Fridge\n            </li>\n            <li>\n              Attached Bathroom\n            </li>\n          </ul>\n        </t>\n        <t t-if=\"value == 6\">\n          Queen Double Room With None AC<br/>\n          <ul>\n            <li>\n              Queen Size Double Bed\n            </li>\n            <li>\n              Small Dressing Table\n            </li>\n            <li>\n              Small Bedside Table\n            </li>\n            <li>\n              Small Writing Table\n            </li>\n            <li>\n              TV\n            </li>\n            <li>\n              Small Fridge\n            </li>\n            <li>\n              Attached Bathroom\n            </li>\n          </ul>\n        </t>\n      </div>\n    </t>\n    ```", "```py\n    categInfo(ev){\n      var $target = $(ev.target);\n      var data = $target.data();\n      $target.parent().find(\".categInformationPanel\").html(\n        $(renderToElement('CategInformation',{\n          'value': data.value,\n          'widget': this\n        }))\n      )\n    }\n    ```", "```py\n    .categInformationPanel .categ_info{\n      padding: 10px;\n      height: 100%;\n      width: 100%;\n      color: white;\n      font-weight: bold;\n    }\n    ```", "```py\n    'assets': {\n      'web.assets_backend': [\n        'my_hostel/static/src/scss/field_widget.scss',\n        'my_hostel/static/src/js/field_widget.js',\n        'my_hostel/static/src/xml/field_widget.xml',\n      ],\n    }\n    ```", "```py\n<t t-name=\"CategInformationCustom\" t-inherit=\"my_hostel.CategInformation\"\n    t-inherit-mode=\"extension\">\n    <xpath expr='//t[@t-if=\"value == 1\"]' position=\"before\">\n      <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n    </xpath>\n  </t>\n```", "```py\n    import { Component, onWillStart , onWillUpdateProps} from \"@odoo/owl\";\n    ```", "```py\n    onWillStart(() => {\n      this.loadCategInformation();\n    });\n    onWillUpdateProps(() => {\n      this.loadCategInformation();\n    });\n    ```", "```py\n    async loadCategInformation() {\n      var self = this;\n      self.categoryInfo = {};\n      var resModel = self.env.model.root.resModel;\n      var domain = [];\n      var fields = ['category'];\n      var groupby = ['category'];\n      const categInfoPromise = await self.env.services.orm.readGroup(\n      resModel,\n      domain,\n      fields,\n      groupby\n    );\n      categInfoPromise.map((info) => {\n        self.categoryInfo[info.category] = info.category_count;\n      });\n    }\n    ```", "```py\n    <t t-name=\"CategInformationCustom\" t-inherit=\"my_hostel.CategInformation\"\n        t-inherit-mode=\"extension\">\n        <xpath expr='//t[@t-if=\"value == 1\"]' position=\"before\">\n          <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n        </xpath>\n        <xpath expr=\"//div\" position=\"inside\">\n          <div class=\"text-center\"\n             style=\"color:gray;background: white;padding:3px;padding: 5px;border-radius: 5px;\">\n            Total Booked Rooms: <t t-esc=\"widget.categoryInfo[value] or 0\"/>\n          </div>\n        </xpath>\n      </t>\n    ```", "```py\n    class View(models.Model):\n      _inherit = 'ir.ui.view'\n      type = fields.Selection(selection_add=[('m2m_group', 'M2m Group')])\n    ```", "```py\n    class ActWindowView(models.Model):\n      _inherit = 'ir.actions.act_window.view'\n      view_mode = fields.Selection(selection_add=[\n    ('m2m_group', 'M2m group')], ondelete={'m2m_group': 'cascade'})\n    ```", "```py\n    class Base(models.AbstractModel):\n      _inherit = 'base'\n      @api.model\n      def get_m2m_group_data(self, domain, m2m_field):\n        records = self.search(domain)\n        result_dict = {}\n        for record in records:\n          for m2m_record in record[m2m_field]:\n            if m2m_record.id not in result_dict:\n              result_dict[m2m_record.id] = {\n                'name': m2m_record.name,\n                'children': [],\n                'model': m2m_record._name\n              }\n            result_dict[m2m_record.id]['children'].append({\n              'name': record.display_name,\n              'id': record.id,\n            })\n        return result_dict\n    ```", "```py\n    /** @odoo-module **/\n    import { Model } from \"@web/model/model\";\n    export class M2mGroupModel extends Model {\n      setup(params) {\n        const metaData = Object.assign({}, params.metaData, {});\n        this.data = params.data || {};\n        this.metaData = this._buildMetaData(metaData);\n        this.m2m_field = this.metaData.m2m_field;\n      }\n      _buildMetaData(params) {\n        const metaData = Object.assign({}, this.metaData, params);\n        return metaData;\n      }\n      async load(searchParams) {\n        var self = this;\n        const model = self.metaData.resModel;\n        const method = 'get_m2m_group_data'\n        const m2m_field = self.m2m_field\n        const result = await this.orm.call(\n          model,\n          method,\n          [searchParams.domain, m2m_field]\n        )\n        self.data = result;\n        return result;\n      }\n    }\n    ```", "```py\n    /** @odoo-module **/\n    import { useService } from \"@web/core/utils/hooks\";\n    import { Layout } from \"@web/search/layout\";\n    import { useModelWithSampleData } from \"@web/model/model\";\n    import { standardViewProps } from \"@web/views/standard_view_props\";\n    import { Component } from \"@odoo/owl\";\n    export class M2mGroupController extends Component {\n      setup() {\n        this.actionService = useService(\"action\");\n        this.model = useModelWithSampleData(this.props.Model, this.props.modelParams);\n      }\n      _onBtnClicked(domain) {\n        this.actionService.doAction({\n          type: 'ir.actions.act_window',\n          name: this.model.metaData.title,\n          res_model: this.props.resModel,\n          views: [[false, 'list'], [false, 'form']],\n          domain: domain,\n        });\n      }\n      _onAddButtonClick(ev) {\n        this.actionService.doAction({\n          type: 'ir.actions.act_window',\n          name: this.model.metaData.title,\n          res_model: this.props.resModel,\n          views: [[false, 'form']],\n          target: 'new'\n        });\n      }\n    }\n    M2mGroupController.template = \"M2mGroupView\";\n    M2mGroupController.components = { Layout };\n    M2mGroupController.props = {\n      ...standardViewProps,\n      Model: Function,\n      modelParams: Object,\n      Renderer: Function,\n      buttonTemplate: String,\n    };\n    ```", "```py\n    /** @odoo-module **/\n    import { Component } from \"@odoo/owl\";\n    export class M2mGroupRenderer extends Component {\n      onClickViewButton(group) {\n         var children_ids = group.children.map((group_id) => {\n          return group_id.id;\n        });\n        const domain = [['id', 'in', children_ids]]\n        this.props.onClickViewButton(domain);\n      }\n      get groups() {\n        return this.props.model.data\n      }\n    }\n    M2mGroupRenderer.template = \"M2mGroupRenderer\";\n    M2mGroupRenderer.props = [\"model\", \"onClickViewButton\"];\n    ```", "```py\n    /** @odoo-module **/\n    import { visitXML } from \"@web/core/utils/xml\";\n    export class M2mGroupArchParser {\n      parse(arch, fields = {}) {\n        const archInfo = { fields, fieldAttrs: {} };\n        visitXML(arch, (node) => {\n          switch (node.tagName) {\n            case \"m2m_group\": {\n              const m2m_field = node.getAttribute(\"m2m_field\");\n              if (m2m_field) {\n                archInfo.m2m_field = m2m_field;\n              }\n              const title = node.getAttribute(\"string\");\n              if (title) {\n                archInfo.title = title;\n              }\n              break;\n            }\n            case \"field\": {\n              const fieldName = node.getAttribute(\"name\"); // exists (rng validation)\n              if (fieldName === \"id\") {\n                break;\n              }\n              const string = node.getAttribute(\"string\");\n              if (string) {\n                if (!archInfo.fieldAttrs[fieldName]) {\n                  archInfo.fieldAttrs[fieldName] = {};\n                }\n                archInfo.fieldAttrs[fieldName].string = string;\n              }\n              const modifiers = JSON.parse(node.getAttribute(\"modifiers\") || \"{}\");\n              if (modifiers.invisible === true) {\n                if (!archInfo.fieldAttrs[fieldName]) {\n                  archInfo.fieldAttrs[fieldName] = {};\n                }\n                archInfo.fieldAttrs[fieldName].isInvisible = true;\n                break;\n              }\n              break;\n            }\n          }\n        });\n        return archInfo;\n      }\n    }\n    ```", "```py\n    /** @odoo-module **/\n    import { _lt } from \"@web/core/l10n/translation\";\n    import { registry } from \"@web/core/registry\";\n    import { M2mGroupArchParser } from \"./m2m_group_arch_parser\";\n    import { M2mGroupController } from \"./m2m_group_controller\";\n    import {  M2mGroupModel } from \"./m2m_group_model\";\n    import { M2mGroupRenderer } from \"./m2m_group_renderer\";\n    const viewRegistry = registry.category(\"views\");\n    export const M2mGroupView = {\n      type: \"m2m_group\",\n      display_name: _lt(\"Author\"),\n      icon: \"fa fa-id-card-o\",\n      multiRecord: true,\n      Controller: M2mGroupController,\n      Renderer: M2mGroupRenderer,\n      Model: M2mGroupModel,\n      ArchParser: M2mGroupArchParser,\n      searchMenuTypes: [\"filter\", \"favorite\"],\n      buttonTemplate: \"ViewM2mGroup.buttons\",\n      props: (genericProps, view) => {\n        const modelParams = {};\n        const { arch, fields, resModel } = genericProps;\n        // parse arch\n        const archInfo = new view.ArchParser().parse(arch);\n        modelParams.metaData = {\n          m2m_field: archInfo.m2m_field,\n          fields: fields,\n          fieldAttrs: archInfo.fieldAttrs,\n          resModel: resModel,\n          title: archInfo.title || _lt(\"Untitled\"),\n          widgets: archInfo.widgets,\n        };\n        return {\n          ...genericProps,\n          Model: view.Model,\n          modelParams,\n          Renderer: view.Renderer,\n          buttonTemplate: view.buttonTemplate,\n        };\n      },\n    };\n    viewRegistry.add(\"m2m_group\", M2mGroupView);\n    ```", "```py\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <templates xml:space=\"preserve\">\n      <t t-name=\"M2mGroupView\" owl=\"1\">\n        <div t-att-class=\"props.className\" t-ref=\"root\">\n          <Layout display=\"props.display\">\n            <t t-set-slot=\"layout-buttons\">\n               <t t-call=\"{{ props.buttonTemplate }}\"/>\n            </t>\n             <div>\n               <t t-component=\"props.Renderer\"\n                model=\"model\"\n                onClickViewButton=\"group => this._onBtnClicked(group)\"/>\n             </div>\n          </Layout>\n        </div>\n      </t>\n    </templates>\n    ```", "```py\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <templates xml:space=\"preserve\">\n      <t t-name=\"M2mGroupRenderer\" owl=\"1\">\n        <div class=\"row ml16 mr16\">\n          <div t-foreach=\"groups\" t-as=\"group\" class=\"col-3\" t-key=\"group\">\n            <t t-set=\"group_data\" t-value=\"groups[group]\" />\n            <div class=\"card mt16\">\n              <img class=\"card-img-top\"\n              t-attf-src=\"img/image\"\n              style=\"height: 300px;\"/>\n              <div class=\"card-body\">\n                <h5 class=\"card-title mt8\">\n                  <t t-esc=\"group_data['name']\"/>\n                </h5>\n              </div>\n              <ul class=\"list-group list-group-flush\">\n                <t t-foreach=\"group_data['children']\" t-as=\"child\" t-key=\"child.id\">\n                  <li class=\"list-group-item\">\n                    <i class=\"fa fa-user\"/><t t-esc=\"child.name\"/>\n                  </li>\n                </t>\n              </ul>\n              <div class=\"card-body\">\n                <a href=\"#\" class=\"btn btn-sm btn-primary o_primay_button\"\n                 t-att-data-group=\"group\"\n                 t-on-click=\"() => this.onClickViewButton(group_data)\">View</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </t>\n    </templates>\n    ```", "```py\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <templates xml:space=\"preserve\">\n      <t t-name=\"ViewM2mGroup.buttons\" owl=\"1\">\n        <button type=\"button\" class=\"btn btn-primary\"\n            t-on-click=\"() => this._onAddButtonClick()\">\n          Add Record\n        </button>\n      </t>\n    </templates>\n    ```", "```py\n    'assets': {\n      'web.assets_backend': [\n        'my_hostel/static/src/js/m2m_group_arch_parser.js',\n        'my_hostel/static/src/js/my_hostel_tour.js',\n        'my_hostel/static/src/js/m2m_group_view.js',\n        'my_hostel/static/src/js/m2m_group_renderer.js',\n        'my_hostel/static/src/js/m2m_group_model.js',\n        'my_hostel/static/src/js/m2m_group_controller.js',\n        'my_hostel/static/src/xml/m2m_group_controller.xml',\n        'my_hostel/static/src/xml/m2m_group_renderer.xml',\n        'my_hostel/static/src/xml/m2m_group_view.xml',\n        'my_hostel/static/src/xml/field_widget.xml',\n      ],\n    },\n    ```", "```py\n    <record id=\"view_hostel_student_m2m_group\" model=\"ir.ui.view\">\n      <field name=\"name\">Students</field>\n      <field name=\"model\">hostel.student</field>\n      <field name=\"arch\" type=\"xml\">\n        <m2m_group m2m_field=\"room_id\">\n        </m2m_group>\n      </field>\n    </record>\n    ```", "```py\n    <field name=\"view_mode\">tree,m2m_group,form</field>\n    ```", "```py\n    debugger;\n    ```", "```py\n        console.log(\"Debugging call…….\");\n    ```", "```py\n    <t t-debug=\"\" />\n    ```", "```py\n    <t t-log=\"myvalue\" />\n    ```", "```py\n    /** @odoo-module **/\n    import { _t } from \"@web/core/l10n/translation\";\n    import { registry } from \"@web/core/registry\";\n    import { markup } from \"@odoo/owl\"\n    import { stepUtils } from \"@web_tour/tour_service/tour_utils\";\n    registry.category(\"web_tour.tours\").add('hostel_tour',  {\n      url: \"/web\",\n      rainbowManMessage: _t(\"Congrats, best of luck catching such big fish! :)\"),\n      sequence: 5,\n      steps: () => [stepUtils.showAppsMenuItem(), {\n        trigger: '.o_app[data-menu-xmlid=\"my_hostel.hostel_main_menu\"]',\n        content: markup(_t(\"Ready to launch your <b>hostel</b>?\")),\n        position: 'bottom',\n      }, {\n        trigger: '.o_list_button_add',\n        content: markup(_t(\"Let's create new room.\")),\n        position: \"bottom\",\n      },{\n        trigger: '.o_form_button_save',\n        content: markup(_t('Save this room record')),\n        position: \"bottom\",\n      }]\n    });\n    ```", "```py\n    'assets': {\n      'web.assets_backend': [\n        'my_hostel/static/src/scss/field_widget.scss',\n        'my_hostel/static/src/js/field_widget.js',\n        'my_hostel/static/src/js/my_hostel_tour.js',\n        'my_hostel/static/src/xml/field_widget.xml',\n      ],\n    },\n    ```", "```py\nimport mobile from \"@web_mobile/js/services/core\";\nclickPill(value) {\n    if (mobile.methods.showToast) {\n      mobile.methods.showToast({ 'message': 'Color changed' });\n    }\n    this.props.record.update({ [this.props.name]: value });\n  }\n```"]