["```py\n@staticmethod\ndef related_link(re,e):\n\treturn '<li id=\"%s\" class=\"%s\" ref=\"%s\">%s</li>'%(\n\t\te.id,e.__class__.__name__,re.lower(),re)\ndef related_entities(self,e):\n\tr=['<div class=\"related_entities\"><h3>Related</h3><ul>']\n\tif hasattr(e.__class__,'reltype'):\n\t\tr.extend([self.related_link(re,e)\n\t\t\tfor re,rt in e.__class__.reltype.items()\n\t\t\tif (rt == '1:N' or rt == 'N:N')])\n\tr.append('</ul></div>')\n\tr.append('''\n\t<script>\n\t$('div.related_entities li').click(function(){\n\t\tvar rel=$(this).attr(\"ref\");\n\t\tvar related=$(\"input[name=related]\").val();\n\t\t$(\".content\").load(rel,\n\t\t\t$.param({\n\t\t\t\"pattern\" : $(this).attr(\"class\") +\n\t\t\t\t\",\" + $(this).attr(\"id\"),\n\t\t\t\"related\": related}),\n\t\tfunction(){shiftforms(rel)});\n\t});\n</script>''')\nreturn \"\\n\".join(r)\n\n```", "```py\n<div class=\"related_entities\">\n\t<h3>Related</h3>\n\t<ul>\n\t\t<li ref=\"address\" class=\"Contact\" id=\"1\">Address</li>\n\t</ul>\n</div>\n\n```", "```py\nclass A(Entity):\n\tpass\nclass B(Entity):\n\tpass\nclass AhasmanyB(Relation):\n\ta=A\n\tb=B\n\n```", "```py\nclass AreferstoasingleB(Relation):\n\ta=B\n\tb=A\n\n```", "```py\nclass AhasmanyB(Relation):\n\ta=A\n\tb=B\n\trelation_type='1:N'\nclass AreferstoasingleB(Relation):\n\ta=A\n\tb=B\n\trelation_type='N:1'\n\n```", "```py\nif relationdefinition or '_meta' in classdict:\n\t\ta = classdict['a']\n\t\tb = classdict['b'] r = '1:N'0\n\t\tif 'relation_type' in classdict: r = classdict['relation_type']\n\t\tif not r in ('N:1','1:N'): raise KeyError(\"unknown relation_\ntype %s\"%r)\n\t\tclassdict['relation_type'] = r\n\t\tif not issubclass(a,AbstractEntity) : raise TypeError('a not \nan AbstractEntity')\n\t\tif not issubclass(a,AbstractEntity) : raise TypeError('b not \nan AbstractEntity') runique = ' ,unique(%s_id)'%a.__name__\n\t\tif r == '1:N' : runique = ' ,unique(%s_id)'%b.__name__\n\t\tsql = 'create table if not exists %(rel)s ( %(a)s_id references %(a)s on delete cascade, %(b)s_id references %(b)s on delete cascade, unique(%(a)s_id,%(b)s_id)%(ru)s)'%{'rel':classname,'a':a.__name__,'b':b.__name__,'ru':runique}\nconn = sqlite.connect(classdict['_database'])\n\t\tconn.execute(sql)\n\t\tsetattr(a,'get'+b.__name__,lambda self:getclass(self,b, \nclassname))\n\t\tsetattr(a,'get',get)\n\t\tsetattr(b,'get'+a.__name__,lambda self:getclass(self,a, \nclassname))\n\t\tsetattr(b,'get',get)\n\t\tsetattr(a,'add'+b.__name__,lambda self,entity:addclass(self, entity,b,\nclassname))\n\t\tsetattr(a,'add',add)\n\t\tsetattr(b,'add'+a.__name__,lambda self,entity:addclass(self, entity,a,\nclassname))\n\t\tsetattr(b,'add',add) reltypes = getattr(a,'reltype',{})\n\t\treltypes[b.__name__]=r\n\t\tsetattr(a,'reltype',reltypes)\n\t\treltypes = getattr(b,'reltype',{})\n\t\treltypes[a.__name__]={'1:N':'N:1','N:N':'N:N','N:1':'1:N'}[r]\n\t\tsetattr(b,'reltype',reltypes)\n\t\trelclasses = getattr(a,'relclass',{})\n\t\trelclasses[b.__name__]=b\n\t\tsetattr(a,'relclass',relclasses)\n\t\trelclasses = getattr(b,'relclass',{})\n\t\trelclasses[a.__name__]=a\n\t\tsetattr(b,'relclass',relclasses)\n\t\tjoins = getattr(a,'joins',{})\n\t\tjoins[b.__name__]=classname\n\t\tsetattr(a,'joins',joins)\n\t\tjoins = getattr(b,'joins',{})\n\t\tjoins[a.__name__]=classname\n\t\tsetattr(b,'joins',joins)\n\treturn type.__new__(metaclass,classname,baseclasses,classdict)\n\n```", "```py\nCar.reltype('Owner')\n\n```", "```py\nOwner.reltype('Car')\n\n```", "```py\n@cherrypy.expose\n\tdef index(self,id=None,_=None,add=None,edit=None,related=None,**\nkw):\n\n```", "```py\nif not related is None and related != '':\n\tr=related.split(',') re=e.relclass[r[0]](id=int(r[1]))\n\te.add(re)\n\n```", "```py\n\t\t\t\t\t\t\tsubmitbutton='<input type=\"hidden\" name=\"related\" \nvalue=\"%s\"><input type=\"submit\" name=\"add\" value=\"Add\">'%related\n\n```", "```py\n@cherrypy.expose\n\tdef index(self, _=None, start=0, pattern=None, sortorder=None, \ncacheid=None, next=None,previous=None, first=None, last=None, \nclear=None, related=None):\n\n```", "```py\nyield '<form method=\"GET\" action=\"add\">'\n\t\t\tyield '<input name=\"related\" type=\"hidden\" \nvalue=\"%s\">'%related\n\t\t\tyield '<button type=\"submit\">Add new</button>'\n\t\t\tyield '</form>'\n\n```", "```py\n from permissions1 import isallowed\nclass Entity(AbstractEntity):\n\tdatabase = db def update(self,**kw):\n\t\tif isallowed('update', self, logon.checkauth(),\n\t\t\t\t\t\t\tself.getUser()):\n\t\t\t\tsuper().update(**kw)\nclass Relation(AbstractRelation):\n\tdatabase = db\nclass User(Entity):\n\tname = Attribute(notnull=True, unique=True,\n\t\t\tdisplayname=\"Name\", primary=True)\nclass Account(Entity):\n\tname = Attribute(notnull=True, displayname=\"Name\",\n\t\t\tprimary=True)\nclass OwnerShip(Relation):\n\ta = User\n\tb = Account\nclass AccountBrowser(Browse):\n\tedit = Display(Account, edit=True, logon=logon,\n\t\t\tcolumns=Account.columns+[User])\n\tadd = Display(Account, add=True, logon=logon,\n\t\t\tcolumns=Account.columns+[User])\nclass UserBrowser(Browse):\n\tedit = Display(User, edit=True, logon=logon)\n\tadd = Display(User, add=True, logon=logon)\n\n```", "```py\nimport entity1 allowed = {\n\t'Account' : {\n\t\t'create' : {\n\t\t\t'admin' : 'all',\n\t\t\t'eve' : 'all',\n\t\t\t'john' : 'owner',\n\t\t\t'mike' : 'owner'\n\t\t},\n\t\t'update' : {\n\t\t\t'admin' : 'all',\n\t\t\t'eve' : 'all',\n\t\t\t'john' : 'owner',\n\t\t\t'mike' : 'owner'\n\t\t},\n\t\t'delete' : {\n\t\t\t'admin' : 'all',\n\t\t\t'eve' : 'all',\n\t\t}\n\t}\n} def isallowed(action,entity,user,owner):\nif len(owner) < 1 : return True\ntry:\n\tprivileges = allowed[entity.__class__.__name__][action]\n\tif not user in privileges :\n\t\t\treturn False\n\telif privileges[user] == 'all':\n\t\t\treturn True\n\telif privileges[user] == 'owner' and user == owner[0].name:\n\t\t\treturn True\n\telse:\n\t\t\treturn False\nexcept KeyError:\n\treturn True\n\n```", "```py\nimport os\nimport cherrypy\nfrom rbacentity import AbstractEntity, Attribute, Picklist, \nAbstractRelation\nfrom browse import Browse\nfrom display import Display\nfrom logondb import LogonDB\ndb=\"/tmp/access2.db\"\n\n```", "```py\nclass Entity(AbstractEntity):\n\tdatabase = db\n\tuserentity = None\n\tlogon = None\n\t@classmethod\n\tdef setUserEntity(cls,entity):\n\t\tcls.userentity = entity\n\t@classmethod\n\tdef getUserEntity(cls):\n\t\treturn cls.userentity\n\t@classmethod\n\tdef setLogon(cls,logon):\n\t\tcls.logon = logon\n\t@classmethod\n\tdef getAuthenticatedUsername(cls):\n\t\tif cls.logon :\n\t\t\treturn cls.logon.checkauth()\n\t\treturn None\n\tdef isallowed(self,operation):\n\t\tuser = self.getUserEntity().list(\n\t\t\tpattern=[('name',self.getAuthenticatedUsername())])[0]\n\t\tentity = self.__class__.__name__ if user.name == 'admin' :\n\t\t\treturn True\n\t\troles = user.getRole()\n\t\tif len(roles):\n\t\t\trole = roles[0]\n\t\t\tpermissions = role.getPermission()\n\t\t\tfor p in permissions :\n\t\t\t\tif p.entity == entity:\n\t\t\t\t\tif p.operation=='*' or p.operation==operation:\n\t\t\t\t\t\tif p.level == 0 :\n\t\t\t\t\t\t\treturn True\n\t\t\t\t\t\telif p.level == 1: for owner in self.getUser():\n\t\t\t\t\t\t\t\tif user.id == owner.id :\n\t\t\t\t\t\t\t\t\treturn True\n\t\t\t\t\t\treturn False def update(self,**kw):\n\t\t\t\t\t\tif self.isallowed('update'):\n\t\t\t\t\t\t\tsuper().update(**kw)\n\n```", "```py\nclass Relation(AbstractRelation):\n\tdatabase = db\nclass User(Entity):\n\tname = Attribute(notnull=True, unique=True, displayname=\"Name\", \nprimary=True)\nclass Account(Entity):\n\tname = Attribute(notnull=True, displayname=\"Name\", primary=True)\nclass OwnerShip(Relation):\n\ta = User\n\tb = Account\nclass UserRoles(Relation):\n\ta = User b = User._rbac().getRole()\n\trelation_type = \"N:1\"\nlogon = LogonDB()\nEntity.setUserEntity(User)\nEntity.setLogon(logon)\n\n```", "```py\nclass RoleBrowser(Browse):\n\t\tedit = Display(User._rbac().getRole(), edit=True, logon=logon)\n\t\tadd = Display(User._rbac().getRole(), add=True, logon=logon)\nclass PermissionBrowser(Browse):\n\t\tedit = Display(User._rbac().getPermission(), edit=True,\n\tlogon=logon, columns=User._rbac().getPermission().columns + \n[User._rbac().getRole()])\n\tadd = Display(User._rbac().getPermission(), add=True,\nlogon=logon, columns=User._rbac().getPermission().columns + [User._\nrbac().getRole()])\n\n```"]