- en: 'Chapter 4: Working with the Database'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter does not aim to teach you how to interact with a database using
    Django or to create migrations—I assume you already have those minimal skills.
    This chapter instead will show you how to work with real situations where a Channels
    instance interacts recurrently with models.
  prefs: []
  type: TYPE_NORMAL
- en: Unless the application is only powered by external APIs, having a database is
    an elementary requirement in any modern web development. The needs can range from
    functionality as simple as storing plain text in an orderly fashion, to an authentication
    system, to managing a complex structure of connections between users. In other
    words, you must connect to a database if you want to build a practical project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, Django is compatible with the most popular relational databases:
    PostgreSQL, MariaDB, MySQL, Oracle, and SQLite. And if that’s not enough, we can
    also connect to other possibilities thanks to extensions created by the community:
    **CockroachDB**, **Firebird**, **Google Cloud Spanner**, and **Microsoft SQL Server**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to focus on creating a real-time app that manages a database.
    We will learn how to perform the minimum functionalities of **BREAD**: **Browse-Read-Edit-Add-Delete**,
    including simple pagination. And what better example than to create a social network?
    The information should be saved, sorted, and displayed to all users with as little
    delay as possible. If there is a very slow response, then we have failed to offer
    a real-time system and have achieved a boring email system.'
  prefs: []
  type: TYPE_NORMAL
- en: For didactic reasons, we will create an anarchist social network. Any visitor,
    without prior registration, will be able to manipulate the data of any user. If
    you find it unsafe, you can create a disclaimer page invoking human kindness and
    suggest not to change other people’s content or wait for the next chapters where
    we will incorporate a complete registration and identification system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Inserting information into the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering database information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting queries with a pager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting rows from a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating rows in a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, we will incorporate some CSS lines to enhance the visual impact,
    and we will take all the logic to the backend, leaving only the responsibility
    of managing events on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will build on all the accumulated knowledge from the previous chapters.
    If you want to start with a template, you can use the following structure, which
    I will use for future projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside you will find a sample project that is already prepared with different
    points that we have touched upon in the previous chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: Integration with Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimum structure for working with Channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection to the database with PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An HTML home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A minimal JavaScript file that connects to Channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this project, I created a fork of the template and made some minor changes.
    You can use either of the two templates, although I recommend the fork for simple
    aesthetics. You can download it from here: [https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_1](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_1).
    I have changed the project name to `social_network` and the app to `website`.
    I have also renamed the consumer to `SocialNetworkConsumer`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, a schema has been added to the database, or model, called `Message`
    in `app/website/models.py`, which we will use to manage all the messages created
    by users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The fields included are minimal: `author` to store the author’s name, `text`
    for the text of the message, and `created_at` to have the creation date for later
    sorting.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the project, you must use Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Open your favorite browser to enter `http://social-network.localhost`. You should
    find the following result.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Displaying a static HTML page on the domain http://social-network.localhost'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.01_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Displaying a static HTML page on the domain http://social-network.localhost
  prefs: []
  type: TYPE_NORMAL
- en: Visually it is too... minimalistic. But it contains all the elementary pieces
    to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will start building the application step by step, touching on the whole
    flow of editing the `Message` table or querying it afterward.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting information into the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are now ready with an almost empty project but perfectly configured with
    Channels, rendering a simple static HTML. The first step is to `INSERT` or save
    new information in the database. For this, we need a minimum of HTML. We are going
    to include a form with two fields: `name` and `message`. We will also leave a
    space to show the future messages that we list.'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file in `app/website/templates/index.html` with the following
    content.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will incorporate a CSS file and a JavaScript file. For the moment,
    we incorporate the files in the headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in order to have the host and the scheme (HTTP or HTTPS), we must incorporate
    it as a dataset that we will later collect in the JavaScript. We have added a
    form box and another one to list messages, which we will not use for the time
    being:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following will be the HTML form we will use to capture and save the new
    messages. JavaScript will be in charge, in the future, of retrieving all the information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll then define a place to list all messages received from the database.
    We will also include buttons to paginate the results in blocks of five elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside `/static/css/main.css`, we will add some minimal styles to feel like
    we are in the 21st century:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'We add typography that brightens things up for the eye a bit. Helvetica goes
    well with everything, but you are free to use whatever you like. You won’t hurt
    Django’s feelings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of the improvements we added are to correct the margin of the body and
    to center the content with `container`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll also style the buttons so they don’t look like they’re from the 90s:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'And we use a less retro look for forms or elements. Design should not be in
    conflict with backend work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'If you pull up Docker, and you enter `http://social-network.localhost`, you
    will find the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – The form for entering a new message with CSS styles'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.02_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – The form for entering a new message with CSS styles
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to add whatever you need, and even a CSS framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are going to include the JavaScript events to send the form data to
    the consumer. We will create a new file in `/static/js/index.js` with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: 'In the variable section, we capture all the HTML elements that we need to capture
    all events and create a `WebSockets` connection. The `sendData` function is used
    to send messages to the backend, and `sendNewMessage` is executed when we click
    on the **Submit** button. The JSON will always be sent with the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: 'We modify the consumer to receive the information and save it. Edit `app/website/consumers.py`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the client is added to a room when connecting and removed when
    disconnecting. In [*Chapter 5*](B18321_05_ePub.xhtml#_idTextAnchor106), *Separating
    Communication in Rooms*, we will talk in depth about the possibilities of rooms,
    but for now, we will group all users in a single room with the name *broadcast*.
  prefs: []
  type: TYPE_NORMAL
- en: When an action with the text `'add message'` is received, we directly create
    a new message with the information we are sending from the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: We already stored information! Although we can’t see it or sort it at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the code up to this point can be found in the following repository, which
    is the first part of the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_2](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_2)'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will print all the messages we have saved directly in
    HTML via WebSockets.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering database information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already built a form that sends a new message to the backend via a WebSockets
    connection, which we capture in the consumer and then store in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Now we’re going to get all the messages from the database, render them with
    Django’s template engine, send the HTML to the client over the connection we kept,
    and inject the content into the appropriate frontend element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the HTML template that will generate all the message blocks in the path
    `/app/website/templates/components/_list-messages.html` with the content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: At the moment, the **Edit** and **Delete** buttons are for decoration. Later,
    we will give them their functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the consumer, which is in `app/website/consumers.py`, to include an action
    that returns messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: 'When the frontend sends us the `''list messages''` action or creates a WebSockets
    connection, we will execute the `send_list_messages()` function. The backend will
    get all the messages, render the HTML, and send the messages to the frontend.
    Inside the function, we are performing a query to get all the messages in descending
    order, an elementary action if you have worked with models before. The important
    thing happens in the next snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: When sending information to a group, it will always be done asynchronously so
    as not to block the main thread, but when communicating with the database, it
    must be synchronous. How can both types of logic coexist? By turning `self.channel_layer.group_send()`
    into a synchronous function thanks to `async_to_sync()`.
  prefs: []
  type: TYPE_NORMAL
- en: '`self.channel_layer.group_send()` is an unusual function. Its first argument
    must be the name of the room where you want to send the information, which in
    our case will be `self.room_name`, which is declared at the beginning of the consumer.
    And the second argument must have a dictionary where `type` is the name of the
    function to execute (if you have `_`, it must be replaced with a dot), and the
    rest of the keys are the information that we want to pass to the function. Inside
    `send_html`, we capture the previous information with `event[]`. And finally,
    we send the data to the client in the same way as in [*Chapter 3*](B18321_03_ePub.xhtml#_idTextAnchor055),
    *Adding WebSockets to Django*, with `send_json()`.'
  prefs: []
  type: TYPE_NORMAL
- en: When we want to inject HTML, we will send the `html` key with the rendered HTML
    and `selector` to tell JavaScript where to inject it. The backend will decide
    what and where each element should go.
  prefs: []
  type: TYPE_NORMAL
- en: 'When viewing the browser, we will find the messages that we have been adding,
    as shown in *Figure 4.3* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – All messages we have saved in the database are displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.03_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – All messages we have saved in the database are displayed
  prefs: []
  type: TYPE_NORMAL
- en: 'All the code up to this point can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_3](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_3)'
  prefs: []
  type: TYPE_NORMAL
- en: What would happen if we were to display hundreds or thousands of messages per
    user? The performance and memory consequences would be catastrophic. We must avoid
    fireworks by limiting the number of messages that can be displayed. Therefore,
    we will limit it to five messages per page and add some buttons to navigate between
    each slice. Let’s see that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting queries with a pager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can add and list messages from the database. But we must limit the amount
    of information a user can see. A good practice is to provide the user with a pager
    to move through all the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the given steps to add a simple pager:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the template `/app/website/templates/components/_list-messages.html`
    to add a simple pager divided into two buttons (forward and back):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With `data-page="{{ page }}"`, we are giving JavaScript a counter with the page
    we are on. We will use this data to create a new event that will trigger an action
    indicating whether we want to go to the next page or back.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The conditional `{% if page ! = 1 %}` is used to avoid showing the back button
    if we are on the first page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The conditional `{% if page ! = total_pages %}` ignores the rendering of the
    forward button if we are on the last page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We add to the consumer (`/app/website/consumers.py`) a slice system for `send_list_messages()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The variable `max_messages_per_page = 5` has been added to indicate the number
    of items per page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `'list messages'` action now collects and passes to the `send_list_messages`
    function the page to be displayed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We have updated `send_list_messages`. We allow you to indicate the page to be
    displayed, we calculate the query slices, and we give `render_to_string` the `messages`
    with the slice, `page`, and `total_pages` variables, which we use to know if we
    are on the last page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `/static/js/index.js`, add the two JavaScript functions (`goToNextPage`
    and `goToPreviousPage`) that will take care of the page-turning. Actually, they
    just use an action with the request to list the messages but in another slice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And where do we add the listeners for the buttons to execute the functions?
    Inside the `"message"` event of `WebSockets`. Why? Every time the message section
    is updated, all the HTML is deleted and recreated with what is received from the
    backend. The events disappear with every update. We have to reassign them. After
    redrawing the messages, we will assign the listeners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: Go ahead, create as many messages as you want – at least six – to check how
    the pager does its job properly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – We display the first page of messages'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.04_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – We display the first page of messages
  prefs: []
  type: TYPE_NORMAL
- en: If we turn the page by clicking on the **Next** button, the next block of messages
    will be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – We display the last page of messages'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – We display the last page of messages
  prefs: []
  type: TYPE_NORMAL
- en: 'All the code up to this point can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_4](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_4)'
  prefs: []
  type: TYPE_NORMAL
- en: The next target will be to delete messages with the `WebSockets` an action with
    the instruction to delete messages with the concrete `id` of a message—we will
    be as precise as a sniper.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting rows from a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we managed to build a system where we could add new
    messages, list them, and paginate them. But so far, we are unable to delete anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way the project is structured, it is really quick to implement:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We check in `/app/website/templates/components/_list-messages.html` that we
    are adding to each button a dataset with the `id`. We do this task when we list
    the messages; we must be aware of the source where the `id` that we will use comes
    from to know which message we must delete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `/static/js/index.js`, add the `deleteMessage` function. We will capture
    the dataset with the id and send it to the consumer with the action `"delete message"`.
    In addition, we will add each listener after the listener of the pager. Let’s
    not forget the reason for this positioning: all events must be reassigned after
    every change or new backend message with HTML that we inject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, edit `/app/website/consumers.py` with the action `''delete message''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With `Message.objects.get(id=data['id']).delete()`, we delete the message directly
    from the `id` sent to us by the frontend. Finally, we update the list of messages
    from all clients with `self.send_list_messages()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the code up to this point can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_5](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_5)'
  prefs: []
  type: TYPE_NORMAL
- en: We have finished creating the functionality to delete rows in the database.
    We are now able to selectively delete messages. In the next part of the exercise,
    we will finish building the social network by adding the ability to modify an
    existing message. And with this new feature, we will have all the letters of BREAD.
  prefs: []
  type: TYPE_NORMAL
- en: Updating rows in a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this last part of the exercise, we will finish building the social network
    by adding a form to modify the information.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the finished code can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_6](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/social-network_step_6)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new HTML component, in `/app/website/templates/components/_edit-message.html`,
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The HTML component is practically the same as when we create a message, except
    for the detail that we store the `id` of the message to be modified in a dataset
    that we host in the `<form>` tag with `data-id="{{ message.id }}"` and that we
    fill in all the fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an action requesting the edit form in the consumer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This action will only render and send the previous component so that the user
    can edit the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the consumer, add the action to collect the information from the form,
    update the database, and render the list of messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire integrated consumer, including the update action, will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: We create the necessary events in the frontend to request the form, collect
    the information, and send it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We connect to the channel and collect the form fields where users can write
    new messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: 'We use minimal and essential functions such as sending new information, showing
    the form to update, sending information to update, deleting a specific element,
    and pagination management:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: 'The most important event that receives information from the backend is "`message`".
    Every time we receive new data, we print it and recapture all events. Without
    this constant re-assignment, we would lose all events on every new rendering or
    redrawing of HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the preceding code is the final version of JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: The function `displayUpdateForm` has been added to ask the consumer to draw
    the edit form in the same place where the message is located.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `updateMessage` function has been created to send new information to the
    consumer in order to update the message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Button listeners are included for updating right after the paging and deleting
    events.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – The edit form is displayed when you click on edit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.06_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – The edit form is displayed when you click on edit
  prefs: []
  type: TYPE_NORMAL
- en: We did it! The BREAD is complete. We can now spread it with butter and let it
    be consumed by as many customers as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to open the exercise with different browsers to appreciate the magic
    of synchronization. Every action of any user will be visualized by the rest.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been able to connect a consumer to a database to manage its information
    and reply with new rendered HTML structures that we have injected. Gradually,
    a very basic real-time social network has been built to insert messages, list
    them, filter them, update them, and delete them. The frontend has a simple role
    – handling events, sending data, and receiving HTML via WebSockets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, there are several limitations related to group discrimination. When
    an action is performed, it is propagated to all users, meaning all actions have
    an impact on all visitors at the same time. Basically, that’s a good thing that
    we want it to happen, but not in all flows. Do I want everyone to update their
    message listings when a new message is inserted? Yes, of course – and when editing
    or deleting. Although it should be avoided for certain actions that should be
    private. At the moment, if one user changes page, everyone changes page. That’s
    why we are going to delve into the possibilities offered by the Channels Rooms:
    a mechanism that allows us to send data to a specific client or a group defined
    by us. With this technique, we can go a step further by incorporating private
    rooms or information limited to certain customers.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will deal with the different techniques for creating
    rooms and their optimal management. All the knowledge acquired about a database
    will help us to create a simple chat that will allow us to maintain private conversations
    between two clients, restrict groups, or broadcast to all those connected.
  prefs: []
  type: TYPE_NORMAL
