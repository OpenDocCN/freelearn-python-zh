["```py\n{% load static %}\n```", "```py\n<!doctype html>\n```", "```py\n<html lang=\"en\">\n```", "```py\n<head>\n```", "```py\n    <meta charset=\"UTF-8\">\n```", "```py\n    <meta name=\"viewport\" content=\"width=device-width, \n```", "```py\n        user-scalable=no, initial-scale=1.0, maximum-\n```", "```py\n            scale=1.0, minimum-scale=1.0\">\n```", "```py\n    <title>Example website</title>\n```", "```py\n    <link rel=\"stylesheet\" href=\"{% static 'css/main.css' \n```", "```py\n        %}\">\n```", "```py\n    <script defer src=\"img/index.js' %}\">\n```", "```py\n    </script>\n```", "```py\n</head>\n```", "```py\n<body\n```", "```py\n        data-host=\"{{ request.get_host }}\"\n```", "```py\n        data-scheme=\"{{ request.scheme }}\">\n```", "```py\n    <div class=\"container\">\n```", "```py\n        <header>\n```", "```py\n            <nav id=\"nav\" class=\"nav\">{% include \n```", "```py\n                'components/_nav.html' %}</nav>\n```", "```py\n        </header>\n```", "```py\n        <main id=\"main\">{% include page %}</main>\n```", "```py\n        <footer class=\"footer\">My footer</footer>\n```", "```py\n    </div>\n```", "```py\n</body>\n```", "```py\n</html>\n```", "```py\n# app/app_template/consumers.py\n```", "```py\nfrom channels.generic.websocket import JsonWebsocketConsumer\n```", "```py\nimport app.app_template.actions as actions\n```", "```py\nclass ExampleConsumer(JsonWebsocketConsumer):\n```", "```py\n    def connect(self):\n```", "```py\n        \"\"\"Event when client connects\"\"\"\n```", "```py\n        # Accept the connection\n```", "```py\n        self.accept() \n```", "```py\n    def disconnect(self, close_code):\n```", "```py\n        \"\"\"Event when client disconnects\"\"\"\n```", "```py\n        pass\n```", "```py\n    def receive_json(self, data_received):\n```", "```py\n        \"\"\"\n```", "```py\n            Event when data is received\n```", "```py\n            All information will arrive in 2 variables:\n```", "```py\n            \"action\", with the action to be taken\n```", "```py\n            \"data\" with the information\n```", "```py\n        \"\"\"\n```", "```py\n        # Get the data\n```", "```py\n        data = data_received[\"data\"]\n```", "```py\n        # Depending on the action we will do one task or another.\n```", "```py\n        match data_received[\"action\"]:\n```", "```py\n            case \"Change page\":\n```", "```py\n                actions.send_page(self, data[\"page\"]) \n```", "```py\n    def send_html(self, event):\n```", "```py\n        \"\"\"Event: Send html to client\"\"\"\n```", "```py\n        data = {\n```", "```py\n            \"selector\": event[\"selector\"],\n```", "```py\n            \"html\": event[\"html\"],\n```", "```py\n            \"append\": \"append\" in event and event[\"append\"],\n```", "```py\n            \"url\": event[\"url\"] if \"url\" in event else \"\",\n```", "```py\n        }\n```", "```py\n        self.send_json(data)\n```", "```py\nfrom .forms import LoginForm, SignupForm\n```", "```py\nfrom asgiref.sync import async_to_sync\n```", "```py\nfrom django.template.loader import render_to_string\n```", "```py\nfrom django.urls import reverse\n```", "```py\nfrom datetime import datetime\n```", "```py\ndef send_page(self, page):\n```", "```py\n    \"\"\"Render HTML and send page to client\"\"\"\"\n```", "```py\n    # Prepare context data for page\n```", "```py\n    context = {}\n```", "```py\n    match page:\n```", "```py\n        case \"login\":\n```", "```py\n            context = {\"form\": LoginForm()}\n```", "```py\n        case \"signup\":\n```", "```py\n            context = {\"form\": SignupForm()}\n```", "```py\n     context.update({\"active_nav\": page})\n```", "```py\n    # Render HTML nav and send to client\n```", "```py\n    self.send_html({\n```", "```py\n        \"selector\": \"#nav\",\n```", "```py\n        \"html\": render_to_string(\"components/_nav.html\", \n```", "```py\n            context),\n```", "```py\n    })\n```", "```py\n    # Render HTML page and send to client\n```", "```py\n    self.send_html({\n```", "```py\n        \"selector\": \"#main\",\n```", "```py\n        \"html\": render_to_string(f\"pages/{page}.html\", \n```", "```py\n            context),\n```", "```py\n        \"url\": reverse(page),\n```", "```py\n    })\n```", "```py\n<section>\n```", "```py\n    <h1>Welcome to an example of browsing with WebSockets over the Wire.</h1>\n```", "```py\n    <p>You will be able to experience a simple structure. </p>\n```", "```py\n</section>\n```", "```py\n<h1>Login</h1>\n```", "```py\n<form id=\"login-form\">\n```", "```py\n    {{ form.as_p }}\n```", "```py\n    <input type=\"submit\" class=\"button\" value=\"Login\">\n```", "```py\n</form>\n```", "```py\n<h1>Signup</h1>\n```", "```py\n<form id=\"signup-form\">\n```", "```py\n    {{ form.as_p }}\n```", "```py\n    <input type=\"submit\" class=\"button\" value=\"Signup\">\n```", "```py\n</form>\n```", "```py\nfrom django import forms\n```", "```py\nclass LoginForm(forms.Form):\n```", "```py\n    email = forms.CharField(\n```", "```py\n        label=\"Email\",\n```", "```py\n        max_length=255,\n```", "```py\n        widget=forms.EmailInput(attrs={\"id\": \"login-email\", \n```", "```py\n            \"class\": \"input\"}),\n```", "```py\n    )\n```", "```py\n    password = forms.CharField(\n```", "```py\n        label=\"Password\",\n```", "```py\n        max_length=255,\n```", "```py\n        widget=forms.PasswordInput(attrs={\"id\": \"login-\n```", "```py\n            password\", \"class\": \"input\"}),\n```", "```py\n    )\n```", "```py\nclass SignupForm(forms.Form):\n```", "```py\n    username = forms.CharField(\n```", "```py\n        label=\"Username\",\n```", "```py\n        max_length=255,\n```", "```py\n        widget=forms.TextInput(attrs={\"id\": \"signup-\n```", "```py\n            username\", \"class\": \"input\"}),\n```", "```py\n    )\n```", "```py\n    email = forms.EmailField(\n```", "```py\n        label=\"Email\",\n```", "```py\n        max_length=255,\n```", "```py\n        widget=forms.EmailInput(attrs={\"id\": \"signup-\n```", "```py\n            email\", \"class\": \"input\"}),\n```", "```py\n    )\n```", "```py\n    password = forms.CharField(\n```", "```py\n        label=\"Password\",\n```", "```py\n        max_length=255,\n```", "```py\n        widget=forms.PasswordInput(attrs={\"id\": \"signup-\n```", "```py\n            password\", \"class\": \"input\"}),\n```", "```py\n    )\n```", "```py\n    password_confirm = forms.CharField(\n```", "```py\n        label=\"Confirm Password\",\n```", "```py\n        max_length=255,\n```", "```py\n        widget=forms.PasswordInput(\n```", "```py\n            attrs={\"id\": \"signup-password-confirm\", \n```", "```py\n                \"class\": \"input\"}\n```", "```py\n        ),\n```", "```py\n    )\n```", "```py\nfrom django.shortcuts import render\n```", "```py\nfrom .forms import LoginForm, SignupForm \n```", "```py\ndef home(request):\n```", "```py\n    return render(\n```", "```py\n        request,\n```", "```py\n        \"base.html\",\n```", "```py\n        {\n```", "```py\n            \"page\": \"pages/home.html\",\n```", "```py\n            \"active_nav\": \"home\",\n```", "```py\n        },\n```", "```py\n    )\n```", "```py\ndef login(request):\n```", "```py\n    return render(\n```", "```py\n        request,\n```", "```py\n        \"base.html\",\n```", "```py\n        { \"page\": \"pages/login.html\", \"active_nav\":\n```", "```py\n            \"login\", \"form\": LoginForm()},\n```", "```py\n                 )\n```", "```py\ndef signup(request):\n```", "```py\n    return render(\n```", "```py\n        request,\n```", "```py\n        \"base.html\",\n```", "```py\n        { \"page\": \"pages/signup.html\", \"active_nav\": \"signup\", \"form\": SignupForm()},\n```", "```py\n    )\n```", "```py\n<main id=\"main\">{% include page %}</main>\n```", "```py\nfrom django.contrib import admin\n```", "```py\nfrom django.urls import path\n```", "```py\nfrom app.app_template import views\n```", "```py\nurlpatterns = [\n```", "```py\n    path(\"\", views.home, name=\"home\"),\n```", "```py\n    path(\"login/\", views.login, name=\"login\"),\n```", "```py\n    path(\"signup/\", views.signup, name=\"signup\"),\n```", "```py\n    path(\"admin/\", admin.site.urls),\n```", "```py\n{% extends 'base.html' %}\n```", "```py\n<section>\n```", "```py\n    <h1>Welcome to an example of browsing with WebSockets over the Wire</h1>.\n```", "```py\n    <p>You will be able to experience a simple structure.</p>\n```", "```py\n</section>\n```", "```py\n<ul class=\"nav__ul\">\n```", "```py\n    <li>\n```", "```py\n        <a\n```", "```py\n                href=\"#\"\n```", "```py\n                class=\"nav__link nav__link nav__link--\n```", "```py\n                    page{% if active_nav == \"home\" %} \n```", "```py\n                        active{% endif %}\"\n```", "```py\n                data-target=\"home\"\n```", "```py\n        >\n```", "```py\n            Home\n```", "```py\n        </a>\n```", "```py\n    </li>\n```", "```py\n    <li>\n```", "```py\n        <a\n```", "```py\n                href=\"#\"\n```", "```py\n                class=\"nav__link nav__link--page{% if \n```", "```py\n                active_nav == \"login\" %} active{% endif %}\"\n```", "```py\n                data-target=\"login\"\n```", "```py\n        >\n```", "```py\n            Login\n```", "```py\n        </a>\n```", "```py\n    </li>\n```", "```py\n    <li>\n```", "```py\n        <a\n```", "```py\n                href=\"#\"\n```", "```py\n                class=\"nav__link nav__link nav__link--   \n```", "```py\n                    page{% if active_nav == \"signup\" %} \n```", "```py\n                        active{% endif %}\"\n```", "```py\n                data-target=\"signup\"\n```", "```py\n        >\n```", "```py\n            Signup\n```", "```py\n        </a>\n```", "```py\n    </li>\n```", "```py\n</ul>\n```", "```py\n/**\n```", "```py\n* Send message to update page\n```", "```py\n* @param {Event} event\n```", "```py\n* @return {void}\n```", "```py\n*/\n```", "```py\nfunction handleClickNavigation(event) {\n```", "```py\n    event.preventDefault();\n```", "```py\n    sendData({\n```", "```py\n        action: 'Change page',\n```", "```py\n        data: {\n```", "```py\n            page: event.target.dataset.target\n```", "```py\n        }\n```", "```py\n    }, myWebSocket);\n```", "```py\n}\n```", "```py\n/**\n```", "```py\n* Send message to WebSockets server to change the page\n```", "```py\n* @param {WebSocket} webSocket\n```", "```py\n* @return {void}\n```", "```py\n*/\n```", "```py\nfunction setEventsNavigation(webSocket) {\n```", "```py\n    // Navigation\n```", "```py\n    document.querySelectorAll('.nav__link--\n```", "```py\n        page').forEach(link => {\n```", "```py\n        link.removeEventListener('click', \n```", "```py\n            handleClickNavigation, false);\n```", "```py\n        link.addEventListener('click', \n```", "```py\n            handleClickNavigation, false);\n```", "```py\n    });\n```", "```py\n}\n```", "```py\n// Event when a new message is received by WebSockets\n```", "```py\nmyWebSocket.addEventListener(\"message\", (event) => {\n```", "```py\n    // Parse the data received\n```", "```py\n    const data = JSON.parse(event.data);\n```", "```py\n    // Renders the HTML received from the Consumer\n```", "```py\n    const selector = document.querySelector(data.selector);\n```", "```py\n    selector.innerHTML = data.html;\n```", "```py\n    /**\n```", "```py\n     * Reassigns the events of the newly rendered HTML\n```", "```py\n     */\n```", "```py\n    updateEvents();\n```", "```py\n});\n```", "```py\n/**\n```", "```py\n* Update events in every page\n```", "```py\n* return {void}\n```", "```py\n*/\n```", "```py\nfunction updateEvents() {\n```", "```py\n    // Nav\n```", "```py\n    setEventsNavigation(myWebSocket);\n```", "```py\n}\n```", "```py\n    INITIALIZATION\n```", "```py\n*/\n```", "```py\nupdateEvents();\n```", "```py\n.nav__link.active {\n```", "```py\n    color: var(--color__active);\n```", "```py\n    text-decoration: none;\n```", "```py\n}\n```", "```py\nhistory.pushState({}, '', '/login/')\n```", "```py\n// Event when a new message is received by WebSockets\n```", "```py\nmyWebSocket.addEventListener(\"message\", (event) => {\n```", "```py\n    // Parse the data received\n```", "```py\n    const data = JSON.parse(event.data);\n```", "```py\n    // Renders the HTML received from the Consumer\n```", "```py\n    const selector = document.querySelector(data.selector);\n```", "```py\n    selector.innerHTML = data.html;\n```", "```py\n    // Update URL\n```", "```py\n    history.pushState({}, '', data.url) // New line\n```", "```py\n    /**\n```", "```py\n     * Reassigns the events of the newly rendered HTML\n```", "```py\n     */\n```", "```py\n    updateEvents();\n```", "```py\n});\n```", "```py\ndef send_html(self, event):\n```", "```py\n        \"\"\"Event: Send html to client\"\"\"\n```", "```py\n        data = {\n```", "```py\n            \"selector\": event[\"selector\"],\n```", "```py\n            \"html\": event[\"html\"],\n```", "```py\n            \"url\": event[\"url\"] if \"url\" in event else \"\", # New line\n```", "```py\n        }\n```", "```py\n        self.send_json(data)\n```", "```py\nfrom django.urls import reverse\n```", "```py\ndef send_page(self, page):\n```", "```py\n...\n```", "```py\n        self.send_html({\n```", "```py\n        \"selector\": \"#main\",\n```", "```py\n        \"html\": render_to_string(f \"pages/{page}. html\", \n```", "```py\n            context),\n```", "```py\n        \"url\": reverse(page),\n```", "```py\n    })\n```", "```py\n...\n```", "```py\n    def send_html(self, event):\n```", "```py\n        \"\"\"Event: Send html to client\"\"\"\n```", "```py\n        data = {\n```", "```py\n            \"selector\": event[\"selector\"],\n```", "```py\n            \"html\": event[\"html\"],\n```", "```py\n            \"append\": \"append\" in event and \n```", "```py\n                event[\"append\"],\n```", "```py\n            \"url\": event[\"url\"] if \"url\" in event else \"\",\n```", "```py\n        }\n```", "```py\n        self.send_json(data)\n```", "```py\nmyWebSocket.addEventListener(\"message\", (event) => {\n```", "```py\n    // Parse the data received\n```", "```py\n    const data = JSON.parse(event.data);\n```", "```py\n    // Renders the HTML received from the Consumer\n```", "```py\n    const selector = document.querySelector(data.selector);\n```", "```py\n    // If append is received, it will be appended. \n```", "```py\n     Otherwise the entire DOM will be replaced.\n```", "```py\n    if (data.append) {\n```", "```py\n        selector.innerHTML += data.html;\n```", "```py\n    } else {\n```", "```py\n        selector.innerHTML = data.html;\n```", "```py\n    }\n```", "```py\n    // Update URL\n```", "```py\n    history.pushState({}, '', data.url)\n```", "```py\n    /**\n```", "```py\n     * Reassigns the events of the newly rendered HTML\n```", "```py\n     */\n```", "```py\n    updateEvents();\n```", "```py\n});\n```", "```py\n    <section>\n        <h2>Laps</h2>\n        <p>\n            <button id=\"add-lap\">Add lap</button>\n        </p>\n        <ul id=\"laps\"></ul>\n    </section>\n    ```", "```py\n    /**\n    * Send new Lap\n    * @param {Event} event\n    * @return {void}\n    */\n    function addLap(event) {\n        sendData({\n            action: 'Add lap',\n            data: {}\n        }, myWebSocket);\n    }\n    /**\n    * Update events in every page\n    * return {void}\n    */\n    function updateEvents() {\n        // Nav\n        setEventsNavigation(myWebSocket);\n        // Add lap\n        const addLapButton = document.querySelector('#add-\n            lap');\n        if (addLapButton !== null) {\n            addLapButton.removeEventListener('click', \n                addLap, false);\n            addLapButton.addEventListener('click', addLap, false);\n        }\n    }\n    ```", "```py\n        def receive_json(self, data_received):\n            \"\"\"\n                Event when data is received\n                All information will arrive in 2 variables:\n                \"action\", with the action to be taken\n                \"data\" with the information\n            \"\"\"\n            # Get the data\n            data = data_received[\"data\"]\n            # Depending on the action we will do one task or another.\n            match data_received[\"action\"]:\n                case \"Change page\":\n                    actions.send_page(self, data[\"page\"])\n                case \"Add lap\":\n                    actions.add_lap(self)\n    ```", "```py\n    def add_lap(self):\n        \"\"\"Add lap to Home page\"\"\"\n        # Send current time to client\n        self.send_html({\n            \"selector\": \"#laps\",\n            \"html\": render_to_string\n                (\"components/_lap.html\", \n                    {\"time\": datetime.now()}),\n            \"append: True,\n        })\n    ```", "```py\n    <li>{{ time|date: \"h:i:s\" }}</li>\n    ```", "```py\nimport django\n```", "```py\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"project_template.settings\")\n```", "```py\nfrom django.conf import settings\n```", "```py\ndjango.setup()\n```", "```py\nfrom django.core.asgi import get_asgi_application\n```", "```py\nfrom channels.auth import AuthMiddlewareStack\n```", "```py\nfrom channels.routing import ProtocolTypeRouter, URLRouter\n```", "```py\nfrom django.urls import re_path\n```", "```py\nfrom app.app_template.consumers import ExampleConsumer\n```", "```py\napplication = ProtocolTypeRouter(\n```", "```py\n    {\n```", "```py\n        # Django's ASGI application to handle traditional HTTP requests\n```", "```py\n        \"http\": get_asgi_application(),\n```", "```py\n        # WebSocket handler\n```", "```py\n        \"websocket\": AuthMiddlewareStack(\n```", "```py\n            URLRouter(\n```", "```py\n                [\n```", "```py\n                    re_path(r\"^ws/example/$\", ExampleConsumer.as_asgi()),   \n```", "```py\n    }\n```", "```py\nself.scope[\"session\"][\"my name\"] = \"value\".\n```", "```py\nself.scope[\"session\"]. save()\n```", "```py\nprint(self.scope[\"session\"][\"my name\"])\n```", "```py\n# value\n```", "```py\n    <section>\n        <h2>TODO</h2>\n        <input type=\"text\" id=\"task\">\n        <button id=\"add-task\"> Add task</button>\n        <ul id=\"todo\">{% include \"components/_tasks.html\" with tasks=tasks %}</ul>\n    </section>\n    ```", "```py\n    {% for task in tasks %}\n        {% include \"components/_task-item.html\" with task=task %}\n    {% endfor %}\n    ```", "```py\n    <li>{{ task }}</li>\n    ```", "```py\n    import app.app_template.actions as actions\n    class ExampleConsumer(JsonWebsocketConsumer):\n\n        def connect(self):\n            \"\"\"Event when client connects\"\"\"\n            # Accept the connection\n            self.accept()\n            # Make session task list\n            if \"tasks\" not in self.scope[\"session\"]:\n                self.scope[\"session\"][\"tasks\"] = []\n                self.scope[\"session\"].save()\n    def receive_json(self, data_received):\n            # Get the data\n            data = data_received[\"data\"]\n            # Depending on the action we will do one task or another.\n            match data_received[\"action\"]:\n     # Other actions\n                case \"Add task\":\n                    actions.add_task(self, data)\n    ```", "```py\n    from .forms import LoginForm, SignupForm\n    from asgiref.sync import async_to_sync\n    from django.template.loader import render_to_string\n    from django.urls import reverse\n    from channels.auth import login, logout\n    from django.contrib.auth.models import User\n    from django.contrib.auth import authenticate\n    from datetime import datetime\n\n    def send_page(self, page):\n        \"\"\"Render HTML and send page to client\"\"\"\n\n        # Prepare context data for page\n        context = {}\n        match page:\n            case \"home\":\n                context = {\"tasks\": self.scope[\"session\"]\n                    [\"tasks\"] if \"tasks\" in self.scope\n                        [\"session\"] else []}\n            case \"login\":\n                context = {\"form\": LoginForm()}\n            case \"signup\":\n                context = {\"form\": SignupForm()}\n    ...\n\n    def add_lap(self):\n        \"Add lap to Home page\"\"\"\"\"\n        # Send current time to client\n        self.send_html({\n            \"selector\": \"#laps\",\n            \"html\": render_to_string\n                (\"components/_lap.html\", {\"time\": \n                    datetime.now()}),\n            \"append: True,\n        })\n\n    def add_task(self, data):\n        \"Add task from TODO section\"\"\"\"\"\n        # Update task list\n        self.send_html({\n            \"selector\": \"#all\",\n            \"html\": render_to_string(\"components/_task-\n                item.html\", {\"task\": data[\"task\"]}),\n            \"append: True,\n        })\n        # Add task to list\n        self.scope[\"session\"][\"tasks\"].append(data[\"task\"])\n        self.scope[\"session\"].save()\n    ```", "```py\n    /**\n    * Send new task to TODO list\n    * @param event\n    * @return {void}\n    */\n    function addTask(event) {\n        const task = document.querySelector('#task');\n        sendData({\n            action: 'Add task',\n            data: {\n                task: task.value\n            }\n        }, myWebSocket);\n        // Clear input\n        task.value = '';\n    }\n    /**\n    * Update events in every page\n    * return {void}\n    */\n    function updateEvents() {\n        // Nav\n        setEventsNavigation(myWebSocket);\n    ...\n        // Add task\n        const addTaskButton = document.querySelector\n            ('#add-task');\n        if (addTaskButton !== null) {\n            addTaskButton.removeEventListener('click', \n                addTask, false);\n            addTaskButton.addEventListener('click', \n                addTask, false);\n        }\n    }\n    ```", "```py\n    ALLOWED_HOSTS = os.environ.get(\"ALLOWED_HOSTS\"). split(\",\")\n    ```", "```py\n    # project_template/asgi.py\n    import django\n\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"project_template.settings\")\n    from django.conf import settings\n    django.setup()\n    from django.core.asgi import get_asgi_application\n    from channels.security.websocket import OriginValidator # New line\n    from channels.auth import AuthMiddlewareStack\n    from channels.routing import ProtocolTypeRouter, URLRouter\n    from django.urls import re_path\n    from app.app_template.consumers import ExampleConsumer\n\n    application = ProtocolTypeRouter(\n        {\n            # Django's ASGI application to handle traditional HTTP requests\n            \"http\": get_asgi_application(),\n            # WebSocket handler\n            # Update\n            \"websocket\": OriginValidator\n                (AuthMiddlewareStack(\n                URLRouter(\n                    [\n                        re_path(r\"^ws/example/$\", \n                            ExampleConsumer.as_asgi()),\n\n            ), settings.ALLOWED_HOSTS)\n        }\n    ```"]