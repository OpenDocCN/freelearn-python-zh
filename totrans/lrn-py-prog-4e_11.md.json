["```py\n# custom.py\ndef debug(*msg, print_separator=True):\n    print(*msg)\n    if print_separator:\n        print(\"-\" * 40)\ndebug(\"Data is ...\")\ndebug(\"Different\", \"Strings\", \"Are not a problem\")\ndebug(\"After while loop\", print_separator=False) \n```", "```py\n$ python custom.py\nData is ...\n----------------------------------------\nDifferent Strings Are not a problem\n----------------------------------------\nAfter while loop \n```", "```py\n# custom_timestamp.py\nfrom time import sleep\ndef debug(*msg, timestamp=[None]):\n    from time import time  # local import\n    print(*msg)\n    if timestamp[0] is None:\n        timestamp[0] = time()  # 1\n    else:\n        now = time()\n        print(f\" Time elapsed: {now - timestamp[0]:.3f}s\")\n        timestamp[0] = now  # 2\ndebug(\"Entering buggy piece of code...\")\nsleep(0.3)\ndebug(\"First step done.\")\nsleep(0.5)\ndebug(\"Second step done.\") \n```", "```py\n$ python custom_timestamp.py\nEntering buggy piece of code...\nFirst step done.\n Time elapsed: 0.300s\nSecond step done.\n Time elapsed: 0.500s \n```", "```py\n# pdebugger.py\n# d comes from an input that we do not control\nd = {\"first\": \"v1\", \"second\": \"v2\", \"fourth\": \"v4\"}\n# keys also comes from an input we do not control\nkeys = (\"first\", \"second\", \"third\", \"fourth\")\ndef do_something_with_value(value):\n    print(value)\nfor key in keys:\n    do_something_with_value(d[key])\nprint(\"Validation done.\") \n```", "```py\n$ python pdebugger.py\nv1\nv2\nTraceback (most recent call last):\n  File \".../ch11/pdebugger.py\", line 13, in <module>\n    do_something_with_value(d[key])\n                            ~^^^^^\nKeyError: 'third' \n```", "```py\nbreakpoint() \n```", "```py\nimport pdb; pdb.set_trace() \n```", "```py\n$ python pdebugger_pdb.py\n[0] > .../ch11/pdebugger_pdb.py(17)<module>()\n-> for key in keys:\n(Pdb++) l\n 16\n 17 -> for key in keys:  # breakpoint comes in\n 18 do_something_with_value(d[key])\n 19\n(Pdb++) keys  # inspect the keys tuple\n('first', 'second', 'third', 'fourth')\n(Pdb++) d.keys()  # inspect keys of d\ndict_keys(['first', 'second', 'fourth'])\n(Pdb++) d['third'] = 'placeholder'  # add missing item\n(Pdb++) c  # continue\nv1\nv2\nplaceholder\nv4\nValidation done. \n```", "```py\n# log.py\nimport logging\nlogging.basicConfig(\n    filename=\"ch11.log\",\n    level=logging.DEBUG, \n    format=\"[%(asctime)s] %(levelname)s: %(message)s\",\n    datefmt=\"%m/%d/%Y %I:%M:%S %p\")\nmylist = [1, 2, 3]\nlogging.info(\"Starting to process 'mylist'...\")\nfor position in range(4):\n    try:\n        logging.debug(\n            \"Value at position %s is %s\",\n            position,\n            mylist[position]\n        )\n    except IndexError:\n        logging.exception(\"Faulty position: %s\", position)\nlogging.info(\"Done processing 'mylist'.\") \n```", "```py\n# ch11.log\n[10/06/2024 10:08:04 PM] INFO: Starting to process 'mylist'...\n[10/06/2024 10:08:04 PM] DEBUG: Value at position 0 is 1\n[10/06/2024 10:08:04 PM] DEBUG: Value at position 1 is 2\n[10/06/2024 10:08:04 PM] DEBUG: Value at position 2 is 3\n[10/06/2024 10:08:04 PM] ERROR: Faulty position: 3\nTraceback (most recent call last):\n  File \".../ch11/log.py\", line 20, in <module>\n    mylist[position],\n    ~~~~~~^^^^^^^^^^\nIndexError: list index out of range\n[10/06/2024 10:08:04 PM] INFO: Done processing 'mylist'. \n```", "```py\n# assertions.py\nmylist = [1, 2, 3]  #  pretend this comes from an external source\nassert 4 == len(mylist)  # this will break\nfor position in range(4):\n    print(mylist[position]) \n```", "```py\n$ python assertions.py\nTraceback (most recent call last):\n  File \".../ch11/assertions.py\", line 4, in <module>\n    assert 4 == len(mylist)  # this will break\n           ^^^^^^^^^^^^^^^^\nAssertionError \n```", "```py\nassert expression1, expression2 \n```", "```py\nassert 4 == len(mylist), f\"Mylist has {len(mylist)} elements\" \n```", "```py\n$ python assertions.py\nTraceback (most recent call last):\n  File \".../ch11/assertions.py\", line 19, in <module>\n    assert 4 == len(mylist), f\"Mylist has {len(mylist)} elements\"\n           ^^^^^^^^^^^^^^^^\nAssertionError: Mylist has 3 elements \n```", "```py\n# profiling/triples.py\ndef calc_triples(mx):\n    triples = []\n    for a in range(1, mx + 1):\n        for b in range(a, mx + 1):\n            hypotenuse = calc_hypotenuse(a, b)\n            if is_int(hypotenuse):\n                triples.append((a, b, int(hypotenuse)))\n    return triples\ndef calc_hypotenuse(a, b):\n    return (a**2 + b**2) ** 0.5\ndef is_int(n):\n    return n.is_integer()\ntriples = calc_triples(1000) \n```", "```py\n$ python -m cProfile profiling/triples.py\n1502538 function calls in 0.393 seconds\nOrdered by: cumulative time\nncalls tottime cumtime filename:lineno(function)\n     1   0.000   0.393 {built-in method builtins.exec}\n     1   0.000   0.393 triples.py:1(<module>)\n     1   0.143   0.393 triples.py:1(calc_triples)\n500500   0.087   0.147 triples.py:15(is_int)\n500500   0.102   0.102 triples.py:11(calc_hypotenuse)\n500500   0.060   0.060 {method 'is_integer' of 'float' objects}\n  1034   0.000   0.000 {method 'append' of 'list' objects}\n     1   0.000   0.000 {method 'disable' of '_lsprof.Profiler' objects} \n```", "```py\ndef calc_hypotenuse(a, b): \n    return (a * a + b * b) ** 0.5 \n```", "```py\n hypotenuse = (a * a + b * b) ** 0.5 \n```", "```py\n$ python -m timeit -s 'a=2; b=3' '(a**2 + b**2) ** .5'\n5000000 loops, best of 5: 91 nsec per loop \n```", "```py\n$ python -m timeit -s 'a=2; b=3' '(a*a + b*b) ** .5'\n5000000 loops, best of 5: 72.8 nsec per loop \n```"]