["```py\n# basic_after_demo.py\nimport tkinter as tk\nroot = tk.Tk()\nroot.after(1000, root.quit)\nroot.mainloop() \n```", "```py\nroot.after(1000, print, 'hello', 'Python', 'programmers!') \n```", "```py\n# basic_after_cancel_demo.py\nimport tkinter as tk\nroot = tk.Tk()\ntask_id = root.after(3000, root.quit)\ntk.Button(\n  root,\n  text='Do not quit!', command=lambda: root.after_cancel(task_id)\n).pack()\nroot.mainloop() \n```", "```py\n# application.py, inside Application.__init__()\n    self.after(250, self.deiconify) \n```", "```py\n# after_demo.py\nimport tkinter as tk\nfrom time import sleep\nclass App(tk.Tk):\n  def __init__(self):\n    super().__init__()\n    self.status = tk.StringVar()\n    tk.Label(self, textvariable=self.status).pack()\n    tk.Button(\n      self, text=\"Run Process\",\n      command=self.run_process\n    ).pack()\n  def run_process(self):\n    self.status.set(\"Starting process\")\n    sleep(2)\n    for phase in range(1, 5):\n      self.status.set(f\"Phase {phase}\")\n      self.process_phase(phase, 2)\n    self.status.set('Complete')\n  def process_phase(self, n, length):\n    # some kind of heavy processing here\n    sleep(length)\nApp().mainloop() \n```", "```py\n# after_demo2.py\n  def run_process(self):\n    self.status.set(\"Starting process\")\n    self.after(50, self._run_phases)\n  def _run_phases(self):\n    for phase in range(1, 5):\n      self.status.set(f\"Phase {phase}\")\n      self.process_phase(phase, 2)\n    self.status.set('Complete') \n```", "```py\n# after_demo_update.py\n  def _run_phases(self):\n    for phase in range(1, 5):\n      self.status.set(f\"Phase {phase}\")\n      self.update_idletasks()\n      self.process_phase(phase, 2)\n    self.status.set('Complete') \n```", "```py\nFile 0% uploaded\nFile 5% uploaded\nFile 10% uploaded\nFile 15% uploaded\nFile 20% uploaded\nFile 25% uploaded \n```", "```py\n# basic_threading_demo.py\nfrom time import sleep\ndef print_slowly(string):\n  words = string.split()\n  for word in words:\n    sleep(1)\n    print(word) \n```", "```py\n# basic_threading_demo.py\nimport tkinter as tk\n# print_slowly() function goes here\n# ...\nclass App(tk.Tk):\n  def __init__(self):\n    super().__init__()\n    self.text = tk.StringVar()\n    tk.Entry(self, textvariable=self.text).pack()\n    tk.Button(\n      self, text=\"Run unthreaded\",\n      command=self.print_unthreaded\n    ).pack()\n  def print_unthreaded(self):\n    print_slowly(self.text.get())\nApp().mainloop() \n```", "```py\n# basic_threading_demo.py\nfrom threading import Thread\n# at the end of App.__init__()\n    tk.Button(\n      self, text=\"Run threaded\",\n      command=self.print_threaded\n    ).pack()\n  def print_threaded(self):\n    thread = Thread(\n      target=print_slowly,\n      args=(self.text.get(),)\n    )\n    thread.start() \n```", "```py\n# models.py, at the top\nfrom threading import Thread \n```", "```py\n# execute this with the sample REST server running in another terminal\n>>> import requests\n>>> s = requests.Session()\n>>> s.post('http://localhost:8000/auth', data={'username': 'test', 'password': 'test'})\n<Response [200]>\n>>> dict(s.cookies)\n{'session': 'eyJhdXRoZW50aWNhdGVkIjp0cnVlfQ.YTu7xA.c5ZOSuHQbckhasRFRF'} \n```", "```py\n# models.py\nclass ThreadedUploader(Thread):\n  def __init__(self, session_cookie, files_url, filepath):\n    super().__init__()\n    self.files_url = files_url\n    self.filepath = filepath\n    # Create the new session and hand it the cookie\n    self.session = requests.Session()\n    self.session.cookies['session'] = session_cookie \n```", "```py\n def run(self, *args, **kwargs):\n    with open(self.filepath, 'rb') as fh:\n      files = {'file': fh}\n      response = self.session.put(\n        self.files_url, files=files\n      )\n      response.raise_for_status() \n```", "```py\n# models.py, inside CorporateRestModel\n  def upload_file(self, filepath):\n    \"\"\"PUT a file on the server\"\"\"\n    cookie = self.session.cookies.get('session')\n    uploader = ThreadedUploader(\n      cookie, self.files_url, filepath\n    )\n    uploader.start() \n```", "```py\n>>> from queue import Queue\n>>> q = Queue()\n>>> q.put('My item')\n>>> q.get()\n'My item' \n```", "```py\n>>> q = Queue()\n>>> q.get_nowait()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python3.9/queue.py\", line 199, in get_nowait\n    return self.get(block=False)\n  File \"/usr/lib/python3.9/queue.py\", line 168, in get\n    raise Empty\n_queue.Empty \n```", "```py\n>>> q.empty()\nTrue\n>>> q.qsize()\n0\n>>> q.put(1)\n>>> q.empty()\nFalse\n>>> q.qsize()\n1 \n```", "```py\n# threading_queue_demo.py\nfrom threading import Thread\nfrom time import sleep\nclass Backend(Thread):\n  def __init__(self, queue, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.queue = queue\n  def run(self):\n    self.queue.put('ready')\n    for n in range(1, 5):\n      self.queue.put(f'stage {n}')\n      print(f'stage {n}')\n      sleep(2)\n    self.queue.put('done') \n```", "```py\n# threading_queue_demo.py\nimport tkinter as tk\nfrom queue import Queue\nclass App(tk.Tk):\n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.status = tk.StringVar(self, value='ready')\n    tk.Label(self, textvariable=self.status).pack()\n    tk.Button(self, text=\"Run process\", command=self.go).pack()\n    self.queue = Queue() \n```", "```py\n def go(self):\n    p = Backend(self.queue)\n    p.start() \n```", "```py\n def go(self):\n    p = Backend(self.queue)\n    p.start()\n    while True:\n      status = self.queue.get()\n      self.status.set(status)\n      if status == 'done':\n        break \n```", "```py\n def check_queue(self):\n    msg = ''\n    while not self.queue.empty():\n      msg = self.queue.get()\n      self.status.set(msg) \n```", "```py\n if msg != 'done':\n      self.after(100, self.check_queue) \n```", "```py\n def go(self):\n    p = Backend(self.queue)\n    p.start()\n    **self.check_queue()** \n```", "```py\n# models.py, in ThreadedUploader\n  def __init__(\n    self, session_cookie, files_url, filepath, **queue**\n  ):\n  # ...\n  **self.queue = queue** \n```", "```py\n# models.py, at the top\nfrom queue import Queue \n```", "```py\n# models.py, inside CorporateRestModel\n  def __init__(self, base_url):\n    #...\n    **self.queue = Queue()** \n```", "```py\n def upload_file(self, filepath):\n    cookie = self.session.cookies.get('session')\n    uploader = ThreadedUploader(\n      cookie, self.files_url, filepath, **self.queue**\n    )\n    uploader.start() \n```", "```py\nfrom collections import namedtuple\nMyClass = namedtuple('MyClass', ['prop1', 'prop2']) \n```", "```py\nclass MyClass():\n  def __init__(self, prop1, prop2):\n    self.prop1 = prop1\n    self.prop2 = prop2 \n```", "```py\n# models.py, at the top\nfrom collections import namedtuple\nMessage = namedtuple('Message', ['status', 'subject', 'body']) \n```", "```py\nmessage = Message(\n  'info', 'Testing the class', \n  'We are testing the Message class'\n) \n```", "```py\n# models.py, in ThreadedUploader\n  def run(self, *args, **kwargs):\n    self.queue.put(\n      Message(\n        'info', 'Upload Started', \n        f'Begin upload of {self.filepath}'\n      )\n    ) \n```", "```py\n with open(self.filepath, 'rb') as fh:\n      files = {'file': fh}\n      response = self.session.put(\n        self.files_url, files=files\n      )\n    try:\n      response.raise_for_status()\n    except Exception as e:\n      self.queue.put(Message('error', 'Upload Error', str(e)))\n    else:\n      self.queue.put(\n        Message(\n          'done',  'Upload Succeeded',\n          f'Upload of {self.filepath} to REST succeeded'\n        )\n      ) \n```", "```py\n# application.py, inside Application\n  def _check_queue(self, queue):\n    while not queue.empty():\n      item = queue.get() \n```", "```py\n# application.py, inside Application._check_queue()\n      if item.status == 'done':\n        messagebox.showinfo(\n          item.status,\n          message=item.subject,\n          detail=item.body\n        )\n        self.status.set(item.subject)\n        return \n```", "```py\n elif item.status == 'error':\n        messagebox.showerror(\n          item.status,\n          message=item.subject,\n          detail=item.body\n        )\n        self.status.set(item.subject)\n        return \n```", "```py\n else:\n        self.status.set(f'{item.subject}: {item.body}') \n```", "```py\n self.after(100, self._check_queue, queue) \n```", "```py\n# application.py, in Application._upload_to_corporate_rest()\n        rest_model.upload_file(csvfile)\n        self._check_queue(self.rest_queue) \n```", "```py\n# basic_threading_demo_with_lock.py\nfrom threading import Thread, Lock\nprint_lock = Lock() \n```", "```py\ndef print_slowly(string):\n  print_lock.acquire()\n  words = string.split()\n  for word in words:\n    sleep(1)\n    print(word)\n  print_lock.release() \n```", "```py\n with print_lock:\n    words = string.split()\n    for word in words:\n      sleep(1)\n      print(word) \n```", "```py\nfrom threading import Thread, **Lock** \n```", "```py\nclass ThreadedUploader(Thread):\n  **rest_upload_lock = Lock()** \n```", "```py\n# models.py, inside ThreadedUploader.run()\n    with self.upload_lock:\n      with open(self.filepath, 'rb') as fh:\n        files = {'file': fh}\n        response = self.session.put(\n          self.files_url, files=files\n        )\n        #... remainder of method in this block \n```"]