["```py\n$ python3 -m venv ch09-venv\n$ source ch09-venv/bin/activate \n```", "```py\n(ch09-venv) $ cat requirements.txt \nclick==8.1.3\nFlask==2.2.2\nitsdangerous==2.1.2\nJinja2==3.1.2\nMarkupSafe==2.1.1\nWerkzeug==2.2.2 \n…\n(ch09-venv) $ pip install -r requirements.txt \n```", "```py\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef hello_networkers():\n    return 'Hello Networkers!'\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True) \n```", "```py\n(ch09-venv) $ python chapter9_1.py \n * Serving Flask app 'chapter9_1'\n * Debug mode: on\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on all addresses (0.0.0.0)\n * Running on http://127.0.0.1:5000\n * Running on http://192.168.2.126:5000\nPress CTRL+C to quit\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 218-520-639 \n```", "```py\n(ch09-venv) $ http http://192.168.2.126:5000\nHTTP/1.1 200 OK\nConnection: close\nContent-Length: 17\nContent-Type: text/html; charset=utf-8\nDate: Wed, 21 Sep 2022 02:54:54 GMT\nServer: Werkzeug/2.2.2 Python/3.10.4\nHello Networkers! \n```", "```py\n$ http [flags] [METHOD] URL [ITEM] \n```", "```py\n(ch09-venv) $ http GET https://httpbin.org/user-agent\nHTTP/1.1 200 OK\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Origin: *\nConnection: keep-alive\nContent-Length: 35\nContent-Type: application/json\nDate: Wed, 21 Sep 2022 02:56:07 GMT\nServer: gunicorn/19.9.0\n{\n    \"user-agent\": \"HTTPie/3.2.1\"\n} \n```", "```py\n(ch09-venv) $ http POST https://httpbin.org/post name=eric twitter=at_ericchou married:=true\n…\nContent-Type: application/json\n…\n{…\n    \"headers\": {\n        \"Accept\": \"application/json, */*;q=0.5\",\n        …\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"HTTPie/3.2.1\",\n\t  …\n    },\n    \"json\": {\n        \"married\": true,\n        \"name\": \"eric\",\n        \"twitter\": \"at_ericchou\"\n    },\n    \"url\": \"https://httpbin.org/post\"\n} \n```", "```py\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return 'You are at index()'\n@app.route('/routers/')\ndef routers():\n    return 'You are at routers()'\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True) \n```", "```py\n# Server side\n$ python chapter9_2.py \n<skip>\n * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n# client side\n$ http http://192.168.2.126:5000\n<skip>\nYou are at index()\n$ http http://192.168.2.126:5000/routers/\n<skip>\nYou are at routers() \n```", "```py\n(ch09-venv) $ python chapter9_2.py\n<skip>\n192.168.2.126 - - [20/Sep/2022 20:00:27] \"GET / HTTP/1.1\" 200 -\n192.168.2.126 - - [20/Sep/2022 20:01:05] \"GET /routers/ HTTP/1.1\" 200 – \n```", "```py\n<skip>\n@app.route('/routers/<hostname>')\ndef router(hostname):\n    return 'You are at %s' % hostname\n@app.route('/routers/<hostname>/interface/<int:interface_number>')\ndef interface(hostname, interface_number):\n    return 'You are at %s interface %d' % (hostname, interface_number)\n<skip> \n```", "```py\n# Server Side\n(ch09-venv) $ python chapter9_3.py\n(ch09-venv) # Client Side\n$ http http://192.168.2.126:5000/routers/host1\nHTTP/1.0 200 OK\n<skip>\nYou are at host1\n(venv) $ http http://192.168.2.126:5000/routers/host1/interface/1\nHTTP/1.0 200 OK\n<skip>\nYou are at host1 interface 1 \n```", "```py\n(venv) $ http http://192.168.2.126:5000/routers/host1/interface/one\nHTTP/1.0 404 NOT FOUND\n<skip>\n<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p> \n```", "```py\nfrom flask import Flask, url_for\napp = Flask(__name__)\n@app.route('/<hostname>/list_interfaces')\ndef device(hostname):\n    if hostname in routers:\n        return 'Listing interfaces for %s' % hostname\n    else: \n        return 'Invalid hostname'\nrouters = ['r1', 'r2', 'r3']\nfor router in routers: \n    with app.test_request_context():\n        print(url_for('device', hostname=router))\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True) \n```", "```py\n# server side\n$ python chapter9_4.py\n<skip>\n/r1/list_interfaces\n/r2/list_interfaces\n/r3/list_interfaces\n# client side\n(venv) $ http http://192.168.2.126:5000/r1/list_interfaces\n<skip>\nListing interfaces for r1\n(venv) $ http http://192.168.2.126:5000/r2/list_interfaces\n<skip>\nListing interfaces for r2\n# bad request\n(venv) $ http http://192.168.2.126:5000/r1000/list_interfaces\n<skip>\nInvalid hostname \n```", "```py\nfrom flask import Flask, jsonify\napp = Flask(__name__)\n@app.route('/routers/<hostname>/interface/<int:interface_number>')\ndef interface(hostname, interface_number):\n    return jsonify(name=hostname, interface=interface_number)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True) \n```", "```py\n$ http http://192.168.2.126:5000/routers/r1/interface/1\nHTTP/1.0 200 OK\nContent-Length: 38\nContent-Type: application/json\nDate: Tue, 08 Oct 2019 21:48:51 GMT\nServer: Werkzeug/0.16.0 Python/3.6.8\n{\n    \"interface\": 1,\n    \"name\": \"r1\"\n} \n```", "```py\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n# Create Flask application, load configuration, and create\n# the SQLAlchemy object\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///network.db'\ndb = SQLAlchemy(app) \n```", "```py\n# This is the database model object\nclass Device(db.Model):\n    __tablename__ = 'devices'\n    id = db.Column(db.Integer, primary_key=True)\n    hostname = db.Column(db.String(120), index=True)\n    vendor = db.Column(db.String(40))\n    def __init__(self, hostname, vendor):\n        self.hostname = hostname\n        self.vendor = vendor\n    def __repr__(self):\n        return '<Device %r>' % self.hostname \n```", "```py\nif __name__ == '__main__':\n    db.create_all()\n    r1 = Device('lax-dc1-core1', 'Juniper')\n    r2 = Device('sfo-dc1-core1', 'Cisco')\n    db.session.add(r1)\n    db.session.add(r2)\n    db.session.commit() \n```", "```py\n$ python chapter9_db_1.py\n$ ls -l network.db \n-rw-r--r-- 1 echou echou 28672 Sep 21 10:43 network.db \n```", "```py\n>>> from flask import Flask\n>>> from flask_sqlalchemy import SQLAlchemy\n>>> app = Flask(__name__)\n>>> app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///network.db'\n>>> db = SQLAlchemy(app)\n>>> from chapter9_db_1 import Device\n>>> Device.query.all()\n[<Device 'lax-dc1-core1'>, <Device 'sfo-dc1-core1'>]\n>>> Device.query.filter_by(hostname='sfo-dc1-core1')\n<flask_sqlalchemy.BaseQuery object at 0x7f09544a0e80>\n>>> Device.query.filter_by(hostname='sfo-dc1-core1').first()\n<Device 'sfo-dc1-core1'> \n```", "```py\n>>> r3 = Device('lax-dc1-core2', 'Juniper')\n>>> db.session.add(r3)\n>>> db.session.commit()\n>>> Device.query.filter_by(hostname='lax-dc1-core2').first()\n<Device 'lax-dc1-core2'> \n```", "```py\n$ rm network.db \n```", "```py\n$ http POST http://192.168.2.126:5000/devices/ 'hostname'='lax-edg-r1' 'loopback'='192.168.0.10' 'mgmt_ip'='192.168.2.51' 'role'='spine' 'vendor'='Cisco' 'os'='15.8'\nHTTP/1.1 201 CREATED\nConnection: close\nContent-Length: 3\nContent-Type: application/json\nDate: Wed, 21 Sep 2022 18:01:33 GMT\nLocation: http://192.168.2.126:5000/devices/1\nServer: Werkzeug/2.2.2 Python/3.10.4\n{} \n```", "```py\n$ http POST http://192.168.2.126:5000/devices/ 'hostname'='lax-edg-r2' 'loopback'='192.168.0.11' 'mgmt_ip'='192.168.2.52' 'role'='spine' 'vendor'='Cisco' 'os'='15.8'\n$ http POST http://192.168.2.126:5000/devices/ 'hostname'='nyc-edg-r1' 'loopback'='192.168.0.12' 'mgmt_ip'='192.168.2.61' 'role'='leaf'\n'vendor'='Cisco' 'os'='15.8'\n$ http POST http://192.168.2.126:5000/devices/ 'hostname'='nyc-edg-r2' 'loopback'='192.168.0.13' 'mgmt_ip'='192.168.2.62' 'role'='leaf' 'vendor'='Cisco' 'os'='15.8' \n```", "```py\n$ http GET http://192.168.2.126:5000/devices/\nHTTP/1.1 200 OK\nConnection: close\nContent-Length: 193\nContent-Type: application/json\nDate: Wed, 21 Sep 2022 18:07:16 GMT\nServer: Werkzeug/2.2.2 Python/3.10.4\n{\n    \"device\": [\n        \"http://192.168.2.126:5000/devices/1\",\n        \"http://192.168.2.126:5000/devices/2\",\n        \"http://192.168.2.126:5000/devices/3\",\n        \"http://192.168.2.126:5000/devices/4\"\n    ]\n} \n```", "```py\n$ http GET http://192.168.2.126:5000/devices/1\nHTTP/1.1 200 OK\nConnection: close\nContent-Length: 199\nContent-Type: application/json\nDate: Wed, 21 Sep 2022 18:07:50 GMT\nServer: Werkzeug/2.2.2 Python/3.10.4\n{\n    \"hostname\": \"lax-edg-r1\",\n    \"loopback\": \"192.168.0.10\",\n    \"mgmt_ip\": \"192.168.2.51\",\n    \"os\": \"15.8\",\n    \"role\": \"spine\",\n    \"self_url\": \"http://192.168.2.126:5000/devices/1\",\n    \"vendor\": \"Cisco\"\n} \n```", "```py\n$ http PUT http://192.168.2.126:5000/devices/1 'hostname'='lax-edg-r1' 'loopback'='192.168.0.10' 'mgmt_ip'='192.168.2.51' 'role'='spine' 'vendor'='Cisco' 'os'='14.6'\nHTTP/1.1 200 OK\n# Verification\n$ http GET http://192.168.2.126:5000/devices/1\nHTTP/1.1 200 OK\nConnection: close\nContent-Length: 199\nContent-Type: application/json\nDate: Wed, 21 Sep 2022 18:10:37 GMT\nServer: Werkzeug/2.2.2 Python/3.10.4\n{\n    \"hostname\": \"lax-edg-r1\",\n    \"loopback\": \"192.168.0.10\",\n    \"mgmt_ip\": \"192.168.2.51\",\n    \"os\": \"14.6\",\n    \"role\": \"spine\",\n    \"self_url\": \"http://192.168.2.126:5000/devices/1\",\n    \"vendor\": \"Cisco\"\n} \n```", "```py\nfrom flask import Flask, url_for, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///network.db'\ndb = SQLAlchemy(app) \n```", "```py\nclass Device(db.Model):\n    __tablename__ = 'devices'\n    id = db.Column(db.Integer, primary_key=True)\n    hostname = db.Column(db.String(64), unique=True)\n    loopback = db.Column(db.String(120), unique=True)\n    mgmt_ip = db.Column(db.String(120), unique=True)\n    role = db.Column(db.String(64))\n    vendor = db.Column(db.String(64))\n    os = db.Column(db.String(64)) \n```", "```py\n def get_url(self):\n        return url_for('get_device', id=self.id, _external=True) \n```", "```py\n def export_data(self):\n        return {\n            'self_url': self.get_url(),\n            'hostname': self.hostname,\n            'loopback': self.loopback,\n            'mgmt_ip': self.mgmt_ip,\n            'role': self.role,\n            'vendor': self.vendor,\n            'os': self.os\n        }\n    def import_data(self, data):\n        try:\n            self.hostname = data['hostname']\n            self.loopback = data['loopback']\n            self.mgmt_ip = data['mgmt_ip']\n            self.role = data['role']\n            self.vendor = data['vendor']\n            self.os = data['os']\n        except KeyError as e:\n            raise ValidationError('Invalid device: missing ' + e.args[0])\n        return self \n```", "```py\n@app.route('/devices/', methods=['GET'])\ndef get_devices():\n    return jsonify({'device': [device.get_url() \n                               for device in Device.query.all()]})\n@app.route('/devices/', methods=['POST'])\ndef new_device():\n    device = Device()\n    device.import_data(request.json)\n    db.session.add(device)\n    db.session.commit()\n    return jsonify({}), 201, {'Location': device.get_url()} \n```", "```py\nHTTP/1.0 201 CREATED\nContent-Length: 2\nContent-Type: application/json Date: ...\nLocation: http://192.168.2.126:5000/devices/4\nServer: Werkzeug/2.2.2 Python/3.10.4 \n```", "```py\n@app.route('/devices/<int:id>', methods=['GET'])\ndef get_device(id):\n    return jsonify(Device.query.get_or_404(id).export_data())\n@app.route('/devices/<int:id>', methods=['PUT'])\ndef edit_device(id):\n    device = Device.query.get_or_404(id)\n    device.import_data(request.json)\n    db.session.add(device)\n    db.session.commit()\n    return jsonify({}) \n```", "```py\nif __name__ == '__main__':\n    db.create_all()\n    app.run(host='0.0.0.0', debug=True) \n```", "```py\nimport pexpect\ndef show_version(device, prompt, ip, username, password):\n    device_prompt = prompt\n    child = pexpect.spawn('telnet ' + ip)\n    child.expect('Username:')\n    child.sendline(username)\n    child.expect('Password:')\n    child.sendline(password)\n    child.expect(device_prompt)\n    child.sendline('show version | i V')\n    child.expect(device_prompt)\n    result = child.before\n    child.sendline('exit')\n    return device, result \n```", "```py\n>>> from chapter9_pexpect_1 import show_version\n>>> print(show_version('lax-edg-r1', 'lax-edg-r1#', '192.168.2.51', 'cisco', 'cisco'))\n('lax-edg-r1', b'show version | i V\\r\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.8(3)M2, RELEASE SOFTWARE (fc2)\\r\\nProcessor board ID 98U40DKV403INHIULHYHB\\r\\n') \n```", "```py\nfrom chapter9_pexpect_1 import show_version\n<skip>\n@app.route('/devices/<int:id>/version', methods=['GET'])\ndef get_device_version(id):\n    device = Device.query.get_or_404(id)\n    hostname = device.hostname\n    ip = device.mgmt_ip\n    prompt = hostname+\"#\"\n    result = show_version(hostname, prompt, ip, 'cisco', 'cisco')\n    return jsonify({\"version\": str(result)}) \n```", "```py\n$ http GET http://192.168.2.126:5000/devices/1/version \nHTTP/1.1 200 OK\nConnection: close\nContent-Length: 216\nContent-Type: application/json\nDate: Wed, 21 Sep 2022 18:19:52 GMT\nServer: Werkzeug/2.2.2 Python/3.10.4\n{\n    \"version\": \"('lax-edg-r1', b'show version | i V\\\\r\\\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.8(3)M2, RELEASE SOFTWARE (fc2)\\\\r\\\\nProcessor board ID 98U40DKV403INHIULHYHB\\\\r\\\\n')\"\n} \n```", "```py\n@app.route('/devices/<device_role>/version', methods=['GET'])\ndef get_role_version(device_role):\n    device_id_list = [device.id for device in Device.query.all() if device.role == device_role]\n    result = {}\n    for id in device_id_list:\n        device = Device.query.get_or_404(id)\n        hostname = device.hostname\n        ip = device.mgmt_ip\n        prompt = hostname + \"#\"\n        device_result = show_version(hostname, prompt, ip, 'cisco', 'cisco')\n        result[hostname] = str(device_result)\n    return jsonify(result) \n```", "```py\n$ http GET http://192.168.2.126:5000/devices/spine/version\nHTTP/1.1 200 OK\nConnection: close\nContent-Length: 389\nContent-Type: application/json\nDate: Wed, 21 Sep 2022 18:20:57 GMT\nServer: Werkzeug/2.2.2 Python/3.10.4\n{\n    \"lax-edg-r1\": \"('lax-edg-r1', b'show version | i V\\\\r\\\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.8(3)M2, RELEASE SOFTWARE (fc2)\\\\r\\\\nProcessor board ID 98U40DKV403INHIULHYHB\\\\r\\\\n')\",\n    \"lax-edg-r2\": \"('lax-edg-r2', b'show version | i V\\\\r\\\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.8(3)M2, RELEASE SOFTWARE (fc2)\\\\r\\\\n')\"\n} \n```", "```py\nfrom flask import Flask, url_for, jsonify, request,\\\n    make_response, copy_current_request_context\nfrom flask_sqlalchemy import SQLAlchemy\nfrom chapter9_pexpect_1 import show_version\nimport uuid\nimport functools\nfrom threading import Thread \n```", "```py\n@app.route('/status/<id>', methods=['GET'])\ndef get_task_status(id):\n    global background_tasks\n    rv = background_tasks.get(id)\n    if rv is None:\n        return not_found(None)\n    if isinstance(rv, Thread):\n        return jsonify({}), 202, {'Location': url_for('get_task_status', id=id)}\n    if app.config['AUTO_DELETE_BG_TASKS']:\n        del background_tasks[id]\n    return rv \n```", "```py\n@app.route('/devices/<int:id>/version', methods=['GET'])\n@background\ndef get_device_version(id):\n    device = Device.query.get_or_404(id)\n<skip>\n@app.route('/devices/<device_role>/version', methods=['GET'])\n@background\ndef get_role_version(device_role):\n    device_id_list = [device.id for device in Device.query.all() if device.role == device_role]\n<skip> \n```", "```py\n$ http GET http://192.168.2.126:5000/devices/spine/version \nHTTP/1.1 202 ACCEPTED\nConnection: close\nContent-Length: 3\nContent-Type: application/json\nDate: Wed, 21 Sep 2022 18:25:25 GMT\nLocation: /status/bb57f6cac4c64e0aa2e67415eb7cabd0\nServer: Werkzeug/2.2.2 Python/3.10.4\n{} \n```", "```py\n$ http GET http://192.168.2.126:5000/status/bb57f6cac4c64e0aa2e67415eb7cabd0\nHTTP/1.1 200 OK\nConnection: close\nContent-Length: 389\nContent-Type: application/json\nDate: Wed, 21 Sep 2022 18:28:30 GMT\nServer: Werkzeug/2.2.2 Python/3.10.4\n{\n    \"lax-edg-r1\": \"('lax-edg-r1', b'show version | i V\\\\r\\\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.8(3)M2, RELEASE SOFTWARE (fc2)\\\\r\\\\nProcessor board ID 98U40DKV403INHIULHYHB\\\\r\\\\n')\",\n    \"lax-edg-r2\": \"('lax-edg-r2', b'show version | i V\\\\r\\\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.8(3)M2, RELEASE SOFTWARE (fc2)\\\\r\\\\n')\"\n} \n```", "```py\nimport requests, time\nserver = 'http://192.168.2.126:5000'\nendpoint = '/devices/1/version'\n# First request to get the new resource\nr = requests.get(server+endpoint)\nresource = r.headers['location']\nprint(\"Status: {} Resource: {}\".format(r.status_code, resource))\n# Second request to get the resource status \nr = requests.get(server+\"/\"+resource)\nprint(\"Immediate Status Query to Resource: \" + str(r.status_code))\nprint(\"Sleep for 2 seconds\")\ntime.sleep(2)\n# Third request to get the resource status\nr = requests.get(server+\"/\"+resource)\nprint(\"Status after 2 seconds: \" + str(r.status_code)) \n```", "```py\n$ python chapter9_request_1.py \nStatus: 202 Resource: /status/960b3a4a81d04b2cb7206d725464ef71\nImmediate Status Query to Resource: 202\nSleep for 2 seconds\nStatus after 2 seconds: 200 \n```", "```py\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask_httpauth import HTTPBasicAuth \n```", "```py\nauth = HTTPBasicAuth()\n<skip>\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), index=True)\n    password_hash = db.Column(db.String(128))\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    def verify_password(self, password):\n        return check_password_hash(self.password_hash, password) \n```", "```py\n@auth.verify_password\ndef verify_password(username, password):\n    g.user = User.query.filter_by(username=username).first()\n    if g.user is None:\n        return False\n    return g.user.verify_password(password) \n```", "```py\n@app.before_request\n@auth.login_required\ndef before_request():\n    pass \n```", "```py\n@auth.error_handler\ndef unathorized():\n    response = jsonify({'status': 401, 'error': 'unauthorized',\n                        'message': 'please authenticate'})\n    response.status_code = 401\n    return response \n```", "```py\n>>> from chapter9_9 import db, User\n>>> db.create_all()\n>>> u = User(username='eric')\n>>> u.set_password('secret')\n>>> db.session.add(u)\n>>> db.session.commit()\n>>> exit() \n```", "```py\n$ http GET http://192.168.2.126:5000/devices/\nHTTP/1.1 401 UNAUTHORIZED\nConnection: close\nContent-Length: 82\nContent-Type: application/json\nDate: Wed, 21 Sep 2022 18:39:06 GMT\nServer: Werkzeug/2.2.2 Python/3.10.4\nWWW-Authenticate: Basic realm=\"Authentication Required\"\n{\n    \"error\": \"unahtorized\",\n    \"message\": \"please authenticate\",\n    \"status\": 401\n} \n```", "```py\n$ http --auth eric:secret GET http://192.168.2.126:5000/devices/\nHTTP/1.1 200 OK\nConnection: close\nContent-Length: 193\nContent-Type: application/json\nDate: Wed, 21 Sep 2022 18:39:42 GMT\nServer: Werkzeug/2.2.2 Python/3.10.4\n{\n    \"device\": [\n        \"http://192.168.2.126:5000/devices/1\",\n        \"http://192.168.2.126:5000/devices/2\",\n        \"http://192.168.2.126:5000/devices/3\",\n        \"http://192.168.2.126:5000/devices/4\"\n    ]\n} \n```", "```py\n$ sudo docker –version\nDocker version 20.10.18, build b40c2f6 \n```", "```py\n$ mkdir TestApp\n$ cd TestApp/ \n```", "```py\n$ mkdir app\n$ touch app/__init__.py \n```", "```py\n$ cat app/__init__.py \nfrom flask import Flask, url_for, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///network.db'\ndb = SQLAlchemy(app)\n@app.route('/')\ndef home():\n    return \"Hello Python Networking!\"\n<skip>\nclass Device(db.Model):\n    __tablename__ = 'devices'\n    id = db.Column(db.Integer, primary_key=True)\n    hostname = db.Column(db.String(64), unique=True)\n    loopback = db.Column(db.String(120), unique=True)\n    mgmt_ip = db.Column(db.String(120), unique=True)\n    role = db.Column(db.String(64))\n    vendor = db.Column(db.String(64))\n    os = db.Column(db.String(64))\n<skip> \n```", "```py\n$ tree app/\napp/\n├── __init__.py\n├── network.db \n```", "```py\n$ cat requirements.txt \nFlask==1.1.1\nFlask-HTTPAuth==3.3.0\nFlask-SQLAlchemy==2.4.1\nJinja2==2.10.1\nMarkupSafe==1.1.1\nPygments==2.4.2\nSQLAlchemy==1.3.9\nWerkzeug==0.16.0\nhttpie==1.0.3\nitsdangerous==1.1.0\npython-dateutil==2.8.0\nrequests==2.20.1 \n```", "```py\n$ cat main.py\nfrom app import app\n$ cat uwsgi.ini\n[uwsgi]\nmodule = main\ncallable = app\nmaster = true \n```", "```py\n$ cat Dockerfile \nFROM tiangolo/uwsgi-nginx-flask:python3.7-alpine3.7\nRUN apk --update add bash vim\nRUN mkdir /TestApp\nENV STATIC_URL /static\nENV STATIC_PATH /TestApp/static\nCOPY ./requirements.txt /TestApp/requirements.txt\nRUN pip install -r /TestApp/requirements.txt \n```", "```py\n$ cat start.sh \n#!/bin/bash\napp=\"docker.test\"\ndocker build -t ${app} .\ndocker run -d -p 8000:80 \\\n  --name=${app} \\\n  -v $PWD:/app ${app} \n```", "```py\n$ sudo bash start.sh \nSending build context to Docker daemon  48.13kB\nStep 1/7 : FROM tiangolo/uwsgi-nginx-flask:python3.8\npython3.8: Pulling from tiangolo/uwsgi-nginx-flask\n85bed84afb9a: Pulling fs layer \n5fdd409f4b2b: Pulling fs layer\n<skip> \n```", "```py\n$ sudo docker ps\nCONTAINER ID   IMAGE         COMMAND                  CREATED         STATUS         PORTS                                            NAMES\n25c83da6082c   docker.test   \"/entrypoint.sh /sta…\"   2 minutes ago   Up 2 minutes   443/tcp, 0.0.0.0:8000->80/tcp, :::8000->80/tcp   docker.test \n```", "```py\n$ sudo docker stop <container id>\n$ sudo docker rm <containter id> \n```", "```py\n$ sudo docker images -a -q #find the image id\n$ sudo docker rmi <image id> \n```"]