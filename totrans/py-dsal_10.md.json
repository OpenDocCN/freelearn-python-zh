["```py\n    temp = unordered_list[j] \n    unordered_list[j] = unordered_list[j+1] \n    unordered_list[j+1] = temp \n\n```", "```py\n    for j in range(iteration_number): \n        if unordered_list[j] > unordered_list[j+1]: \n            temp = unordered_list[j] \n            unordered_list[j] = unordered_list[j+1] \n            unordered_list[j+1] = temp \n\n```", "```py\niteration_number = len(unordered_list)-1 \n    for i in range(iteration_number): \n        for j in range(iteration_number): \n            if unordered_list[j] > unordered_list[j+1]: \n                temp = unordered_list[j] \n                unordered_list[j] = unordered_list[j+1] \n                unordered_list[j+1] = temp \n\n```", "```py\n    for index in range(1, len(unsorted_list)): \n        search_index = index \n        insert_value = unsorted_list[index] \n\n```", "```py\n    for index in range(1, len(unsorted_list)): \n        search_index = index \n        insert_value = unsorted_list[index] \n\n        while search_index > 0 and unsorted_list[search_index-1] >     \n              insert_value : \n            unsorted_list[search_index] = unsorted_list[search_index-1] \n            search_index -= 1 \n\n        unsorted_list[search_index] = insert_value \n\n```", "```py\n    def selection_sort(unsorted_list): \n\n        size_of_list = len(unsorted_list) \n\n        for i in range(size_of_list): \n            for j in range(i+1, size_of_list): \n\n                if unsorted_list[j] < unsorted_list[i]: \n                    temp = unsorted_list[i] \n                    unsorted_list[i] = unsorted_list[j] \n                    unsorted_list[j] = temp \n\n```", "```py\n\n    def partition(unsorted_array, first_index, last_index): \n\n        pivot = unsorted_array[first_index] \n        pivot_index = first_index \n        index_of_last_element = last_index \n\n        less_than_pivot_index = index_of_last_element \n        greater_than_pivot_index = first_index + 1 \n        ... \n\n```", "```py\n    while True: \n\n        while unsorted_array[greater_than_pivot_index] < pivot and \n              greater_than_pivot_index < last_index: \n              greater_than_pivot_index += 1 \n\n        while unsorted_array[less_than_pivot_index] > pivot and \n              less_than_pivot_index >= first_index: \n              less_than_pivot_index -= 1 \n\n```", "```py\n    if greater_than_pivot_index < less_than_pivot_index: \n        temp = unsorted_array[greater_than_pivot_index] \n            unsorted_array[greater_than_pivot_index] =    \n                unsorted_array[less_than_pivot_index] \n            unsorted_array[less_than_pivot_index] = temp \n    else: \n        break \n\n```", "```py\n    unsorted_array[pivot_index]=unsorted_array[less_than_pivot_index] \n    unsorted_array[less_than_pivot_index]=pivot \n    return less_than_pivot_index \n\n```", "```py\n    def quick_sort(unsorted_array, first, last): \n        if last - first <= 0: \n            return \n    else: \n        partition_point = partition(unsorted_array, first, last) \n        quick_sort(unsorted_array, first, partition_point-1) \n        quick_sort(unsorted_array, partition_point+1, last) \n\n```", "```py\nOutput:\n[43, 3, 20, 89, 4, 77]\n[4, 3, 20, 43, 89, 77]\n[3, 4, 20, 43, 89, 77]\n[3, 4, 20, 43, 77, 89]\n[3, 4, 20, 43, 77, 89]\n\n```", "```py\n    h = Heap() \n    unsorted_list = [4, 8, 7, 2, 9, 10, 5, 1, 3, 6] \n    for i in unsorted_list: \n        h.insert(i) \n    print(\"Unsorted list: {}\".format(unsorted_list)) \n\n```", "```py\n    class Heap: \n        ... \n        def heap_sort(self): \n            sorted_list = [] \n            for node in range(self.size): \n                n = self.pop() \n                sorted_list.append(n) \n\n            return sorted_list \n\n```"]