["```py\n    def price(self):\n        try:\n            return self.history[-1].value\n        except IndexError:\n            return None\n```", "```py\n    def price(self):\n        \"\"\"Returns the current price of the Stock\n\n        >>> from datetime import datetime\n        >>> stock = Stock(\"GOOG\")\n        >>> stock.update(datetime(2011, 10, 3), 10)\n        >>> stock.price\n        10\n        \"\"\"\n        try:\n            return self.history[-1].value\n        except IndexError:\n            return None\n```", "```py\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```", "```py\nTrying:\n from datetime import datetime\nExpecting nothing\nok\nTrying:\n stock = Stock(\"GOOG\")\nExpecting nothing\nok\nTrying:\n stock.update(datetime(2011, 10, 3), 10)\nExpecting nothing\nok\nTrying:\n stock.price\nExpecting:\n 10\nok\n8 items had no tests:\n __main__\n __main__.Stock\n __main__.Stock.__init__\n __main__.Stock._is_crossover_below_to_above\n __main__.Stock.get_crossover_signal\n __main__.Stock.is_increasing_trend\n __main__.Stock.update\n __main__.StockSignal\n1 items passed all tests:\n 4 tests in __main__.Stock.price\n4 tests in 9 items.\n4 passed and 0 failed.\nTest passed.\n\n```", "```py\n>>> from datetime import datetime\n\n```", "```py\nTrying:\n from datetime import datetime\nExpecting nothing\nok\n\n```", "```py\n>>> stock.price\n10\n\n```", "```py\nTrying:\n stock.price\nExpecting:\n 10\nok\n\n```", "```py\n8 items had no tests:\n __main__\n __main__.Stock\n __main__.Stock.__init__\n __main__.Stock._is_crossover_below_to_above\n __main__.Stock.get_crossover_signal\n __main__.Stock.is_increasing_trend\n __main__.Stock.update\n __main__.StockSignal\n1 items passed all tests:\n 4 tests in __main__.Stock.price\n4 tests in 9 items.\n4 passed and 0 failed.\nTest passed.\n\n```", "```py\n    def price(self):\n        \"\"\"Returns the current price of the Stock\n\n        >>> from datetime import datetime\n        >>> stock = Stock(\"GOOG\")\n        >>> stock.update(datetime(2011, 10, 3), 10)\n        >>> stock.price\n        10\n\n        The method will return the latest price by timestamp, so even if updates are out of order, it will return the latest one\n\n        >>> stock = Stock(\"GOOG\")\n        >>> stock.update(datetime(2011, 10, 3), 10)\n\n        Now, let us do an update with a date that is earlier than the\n        previous one\n\n        >>> stock.update(datetime(2011, 10, 2), 5)\n\n        And the method still returns the latest price\n\n        >>> stock.price\n        10\n\n        If there are no updates, then the method returns None\n\n        >>> stock = Stock(\"GOOG\")\n        >>> print(stock.price)\n        None\n        \"\"\"\n        try:\n            return self.history[-1].value\n        except IndexError:\n            return None\n```", "```py\nTrying:\n stock = Stock(\"GOOG\")\nExpecting nothing\nok\nTrying:\n stock.update(datetime(2011, 10, 3), 10)\nExpecting nothing\nok\nTrying:\n stock.update(datetime(2011, 10, 2), 5)\nExpecting nothing\nok\nTrying:\n stock.price\nExpecting:\n 10\nok\nTrying:\n stock = Stock(\"GOOG\")\nExpecting nothing\nok\nTrying:\n print(stock.price)\nExpecting:\n None\nok\n\n```", "```py\n>>> stock = Stock(\"GOOG\")\n>>> print(stock.price)\nNone\n\n```", "```py\n    def is_increasing_trend(self):\n        \"\"\"Returns True if the past three values have been strictly\n        increasing\n\n        Returns False if there have been less than three updates so far\n\n        >>> stock = Stock(\"GOOG\")\n        >>> stock.is_increasing_trend()\n        False\n        \"\"\"\n\n        return self.history[-3].value < \\\n            self.history[-2].value < self.history[-1].value\n```", "```py\nFailed example:\n stock.is_increasing_trend()\nException raised:\n Traceback (most recent call last):\n File \"C:\\Python34\\lib\\doctest.py\", line 1324, in __run\n compileflags, 1), test.globs)\n File \"<doctest __main__.Stock.is_increasing_trend[1]>\", line 1, in <module>\n stock.is_increasing_trend()\n File \"c:\\Projects\\tdd_with_python\\src\\stock_alerter\\stock.py\", line 91, in is_increasing_trend\n return self.history[-3].value < \\\n File \"c:\\Projects\\tdd_with_python\\src\\stock_alerter\\timeseries.py\", line 13, in __getitem__\n return self.series[index]\n IndexError: list index out of range\n**********************************************************************\n1 items had failures:\n 1 of   2 in __main__.Stock.is_increasing_trend\n***Test Failed*** 1 failures.\n\n```", "```py\n    def is_increasing_trend(self):\n        \"\"\"Returns True if the past three values have been strictly increasing\n\n        Returns False if there have been less than three updates so far\n\n        >>> stock = Stock(\"GOOG\")\n        >>> stock.is_increasing_trend()\n        False\n        \"\"\"\n\n        try:\n            return self.history[-3].value < \\\n               self.history[-2].value < self.history[-1].value\n        except IndexError:\n            return True\n```", "```py\nFailed example:\n stock.is_increasing_trend()\nExpected:\n False\nGot:\n True\n\n```", "```py\n    def is_increasing_trend(self):\n        \"\"\"Returns True if the past three values have been strictly increasing\n        Returns False if there have been less than three updates so far\n\n        >>> stock = Stock(\"GOOG\")\n        >>> stock.is_increasing_trend()\n        False\n        \"\"\"\n\n        try:\n            return self.history[-3].value < \\\n               self.history[-2].value < self.history[-1].value\n        except IndexError:\n            return False\n```", "```py\n    def update(self, timestamp, price):\n        \"\"\"Updates the stock with the price at the given timestamp\n\n        >>> from datetime import datetime\n        >>> stock = Stock(\"GOOG\")\n        >>> stock.update(datetime(2014, 10, 2), 10)\n        >>> stock.price\n        10\n\n        The method raises a ValueError exception if the price is negative\n\n        >>> stock.update(datetime(2014, 10, 2), -1)\n        Traceback (most recent call last):\n            ...\n        ValueError: price should not be negative\n        \"\"\"\n\n        if price < 0:\n            raise ValueError(\"price should not be negative\")\n        self.history.update(timestamp, price)\n        self.updated.fire(self)\n```", "```py\nTraceback (most recent call last):\n    ...\nValueError: price should not be negative\n```", "```py\nr\"\"\"\nThe stock_alerter module allows you to set up rules and get alerted when those rules are met.\n\n>>> from datetime import datetime\n\nFirst, we need to setup an exchange that contains all the stocks that are going to be processed. A simple dictionary will do.\n\n>>> from stock_alerter.stock import Stock\n>>> exchange = {\"GOOG\": Stock(\"GOOG\"), \"AAPL\": Stock(\"AAPL\")}\n\nNext, we configure the reader. The reader is the source from where the stock updates are coming. The module provides two readers out of the box: A FileReader for reading updates from a comma separated file, and a ListReader to get updates from a list. You can create other readers, such as an HTTPReader, to get updates from a remote server.\nHere we create a simple ListReader by passing in a list of 3-tuples containing the stock symbol, timestamp and price.\n\n>>> from stock_alerter.reader import ListReader\n>>> reader = ListReader([(\"GOOG\", datetime(2014, 2, 8), 5)])\n\nNext, we set up an Alert. We give it a rule, and an action to be taken when the rule is fired.\n\n>>> from stock_alerter.alert import Alert\n>>> from stock_alerter.rule import PriceRule\n>>> from stock_alerter.action import PrintAction\n>>> alert = Alert(\"GOOG > $3\", PriceRule(\"GOOG\", lambda s: s.price > 3),\\\n...               PrintAction())\n\nConnect the alert to the exchange\n\n>>> alert.connect(exchange)\n\nNow that everything is setup, we can start processing the updates\n\n>>> from stock_alerter.processor import Processor\n>>> processor = Processor(reader, exchange)\n>>> processor.process()\nGOOG > $3\n\"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```", "```py\n>>> alert = Alert(\"GOOG > $3\", PriceRule(\"GOOG\", lambda s: s.price > 3),\\\n...               PrintAction())\n\n```", "```py\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testfile(\"readme.txt\")\n```", "```py\nimport doctest\nimport unittest\nfrom stock_alerter import stock\n\nclass PackageDocTest(unittest.TestCase):\n    def test_stock_module(self):\n        doctest.testmod(stock)\n\n    def test_doc(self):\n        doctest.testfile(r\"..\\readme.txt\")\n```", "```py\nimport doctest\nfrom stock_alerter import stock\n\ndef load_tests(loader, tests, pattern):\n    tests.addTests(doctest.DocTestSuite(stock))\n    tests.addTests(doctest.DocFileSuite(\"../readme.txt\"))\n    return tests\n```", "```py\nsrc\n|\n+- stock_alerter\n   |\n   +- readme.txt\n   +- tests\n      |\n      +- test_doctest.py\n```", "```py\ntests.addTests(doctest.DocFileSuite(\"readme.txt\",\n                                    package=\"stock_alerter\"))\n```", "```py\n>>> from datetime import datetime\n>>> stock = Stock(\"GOOG\")\n>>> stock.update(datetime(2011, 10, 3), 10)\n>>> stock.price\n10\n\n```", "```py\nFailed example:\n stock.update(datetime(2011, 10, 3), 10)\nException raised:\n Traceback (most recent call last):\n ...\n NameError: name 'datetime' is not defined\n\n```", "```py\nimport doctest\nfrom datetime import datetime\nfrom stock_alerter import stock\n\ndef load_tests(loader, tests, pattern):\n    tests.addTests(doctest.DocTestSuite(stock, globs={\n        \"datetime\": datetime,\n        \"Stock\": stock.Stock\n    }))\n    tests.addTests(doctest.DocFileSuite(\"readme.txt\", package=\"stock_alerter\"))\n    return tests\n```", "```py\nimport doctest\nfrom datetime import datetime\nfrom stock_alerter import stock\n\ndef setup_stock_doctest(doctest):\n    s = stock.Stock(\"GOOG\")\n    doctest.globs.update({\"stock\": s})\n\ndef load_tests(loader, tests, pattern):\n    tests.addTests(doctest.DocTestSuite(stock, globs={\n        \"datetime\": datetime,\n        \"Stock\": stock.Stock\n    }, setUp=setup_stock_doctest))\n    tests.addTests(doctest.DocFileSuite(\"readme.txt\", package=\"stock_alerter\"))\n    return tests\n```", "```py\n    def is_increasing_trend(self):\n        \"\"\"Returns True if the past three values have been strictly\n        increasing\n\n        Returns False if there have been less than three updates so far\n\n        >>> stock = Stock(\"GOOG\")\n        >>> stock.is_increasing_trend()\n        False\n        \"\"\"\n```", "```py\n    def is_increasing_trend(self):\n        \"\"\"Returns True if the past three values have been strictly\n        increasing\n\n        Returns False if there have been less than three updates so far\n\n        >>> stock.is_increasing_trend()\n        False\n        \"\"\"\n```", "```py\n>>> exchange\n{'GOOG': <stock_alerter.stock.Stock object at 0x00000000031F8550>, 'AAPL': <stock_alerter.stock.Stock object at 0x00000000031F8588>}\n\n```", "```py\n>>> for key in sorted(exchange.keys()):\n...    print(key, exchange[key])\n...\nAAPL <stock_alerter.stock.Stock object at 0x00000000031F8550>\nGOOG <stock_alerter.stock.Stock object at 0x00000000031F8588>\n\n```", "```py\n>>> for key in sorted(exchange.keys()): #doctest: +ELLIPSIS\n...    print(key, exchange[key])\n...\nAAPL <stock_alerter.stock.Stock object at 0x0...>\nGOOG <stock_alerter.stock.Stock object at 0x0...>\n\n```", "```py\n>>> for key in sorted(exchange.keys()):\n...    print(key, exchange[key])\n...    #doctest: +ELLIPSIS\n...    #doctest: +NORMALIZE_WHITESPACE\nAAPL       <stock_alerter.stock.Stock object at 0x0...>\nGOOG       <stock_alerter.stock.Stock object at 0x0...>\n\n```", "```py\n>>> for key in sorted(exchange.keys()):\n...    print(key, exchange[key])\n...    #doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE\nAAPL       <stock_alerter.stock.Stock object at 0x0...>\nGOOG       <stock_alerter.stock.Stock object at 0x0...>\n\n```", "```py\noptions = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\ntests.addTests(doctest.DocFileSuite(\"readme.txt\",\n                                    package=\"stock_alerter\",\n                                    optionflags=options))\n```", "```py\n>>> for key in sorted(exchange.keys()):\n...    print(key, exchange[key])\n... #doctest: -NORMALIZE_WHITESPACE\nAAPL <stock_alerter.stock.Stock object at 0x0...>\nGOOG <stock_alerter.stock.Stock object at 0x0...>\n\n```"]