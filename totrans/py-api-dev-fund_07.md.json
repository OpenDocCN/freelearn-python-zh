["```py\n    avatar_image = db.Column(db.String(100), default=None)\n    ```", "```py\n    flask db migrate\n    ```", "```py\n    INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\n    INFO  [alembic.runtime.migration] Will assume transactional DDL.\n    INFO  [alembic.autogenerate.compare] Detected added column 'user.avatar_image'\n      Generating /TrainingByPackt/Python-API-Development-Fundamentals/Lesson07/smilecook/migrations/versions/7aafe51af016_.py ... done\n    ```", "```py\n    \"\"\"empty message\n    Revision ID: 7aafe51af016\n    Revises: 983adee75c9a\n    Create Date: 2019-09-18 20:54:51.823725\n    \"\"\"\n    from alembic import op\n    import sqlalchemy as sa\n    # revision identifiers, used by Alembic.\n    revision = '7aafe51af016'\n    down_revision = '983adee75c9a'\n    branch_labels = None\n    depends_on = None\n    def upgrade():\n        # ### commands auto generated by Alembic - please adjust! ###\n        op.add_column('user', sa.Column('avatar_image', sa.String(length=100), nullable=True))\n        # ### end Alembic commands ###\n    def downgrade():\n        # ### commands auto generated by Alembic - please adjust! ###\n        op.drop_column('user', 'avatar_image')\n        # ### end Alembic commands ###\n    ```", "```py\n    flask db upgrade\n    ```", "```py\n    INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\n    INFO  [alembic.runtime.migration] Will assume transactional DDL.\n    INFO  [alembic.runtime.migration] Running upgrade 983adee75c9a -> 7aafe51af016, empty message\n    ```", "```py\nimage_set = UploadSet('images', IMAGES)\n```", "```py\n    image_set.save(image, folder=folder, name=filename)\n```", "```py\nconfigure_uploads(app, image_set)\n```", "```py\n    Flask-Uploads==0.2.1\n    ```", "```py\n    pip install -r requirements.txt\n    ```", "```py\n    Installing collected packages: Flask-Uploads\n    Running setup.py install for Flask-Uploads ... done\n    Successfully installed Flask-Uploads-0.2.1\n    ```", "```py\n    from flask_uploads import UploadSet, IMAGES\n    ```", "```py\n    image_set = UploadSet('images', IMAGES)\n    ```", "```py\n    UPLOADED_IMAGES_DEST = 'static/images'\n    ```", "```py\n    from flask_uploads import configure_uploads, patch_request_class\n    from extensions import db, jwt, image_set\n    ```", "```py\n    configure_uploads(app, image_set)\n    ```", "```py\n    patch_request_class(app, 10 * 1024 * 1024)\n    ```", "```py\n    from flask import url_for\n    class UserSchema(Schema):\n        avatar_url = fields.Method(serialize='dump_avatar_url')\n        def dump_avatar_url(self, user):\n            if user.avatar_image:\n                return url_for('static', filename='images/avatars/{}'.format(user.avatar_image), _external=True)\n            else:\n                return url_for('static', filename='images/assets/default-avatar.jpg', _external=True)\n    ```", "```py\n    import uuid\n    from flask_uploads import extension\n    from extensions import image_set\n    ```", "```py\n    def save_image(image, folder):\n        filename = '{}.{}'.format(uuid.uuid4(), extension(image.filename))\n        image_set.save(image, folder=folder, name=filename)\n        return filename\n    ```", "```py\n    from extensions import image_set\n    from utils import generate_token, verify_token, save_image\n    ```", "```py\n    user_avatar_schema = UserSchema(only=('avatar_url', ))\n    ```", "```py\n    class UserAvatarUploadResource(Resource):\n        @jwt_required\n        def put(self):\n            file = request.files.get('avatar')\n            if not file:\n                return {'message': 'Not a valid image'}, HTTPStatus.BAD_REQUEST\n            if not image_set.file_allowed(file, file.filename):\n                return {'message': 'File type not allowed'}, HTTPStatus.BAD_REQUEST\n            user = User.get_by_id(id=get_jwt_identity())\n            if user.avatar_image:\n                avatar_path = image_set.path(folder='avatars', filename=user.avatar_image)\n                if os.path.exists(avatar_path):\n                    os.remove(avatar_path)\n    ```", "```py\n            filename = save_image(image=file, folder='avatars')\n            user.avatar_image = filename\n            user.save()\n    ```", "```py\n            return user_avatar_schema.dump(user).data, HTTPStatus.OK\n    ```", "```py\n    from resources.user import UserListResource, UserResource, MeResource, UserRecipeListResource, UserActivateResource, UserAvatarUploadResource\n    ```", "```py\n    api.add_resource(UserAvatarUploadResource, '/users/avatar')\n    ```", "```py\n>>>image = Image.open('default-avatar.jpg')\n>>>image.size\n(1600, 1066)\n>>>image.mode\n'RGB'\n```", "```py\n>>>image = image.convert(\"RGB\")\n```", "```py\n>>>maxsize = (1600, 1600)\n>>>image.thumbnail(maxsize)\n```", "```py\n>>>image.save('compressed_image.jpg', optimize=True, quality=85)\n```", "```py\n    Pillow==6.2.1\n    ```", "```py\n    pip install -r requirements.txt\n    ```", "```py\n    Installing collected packages: Pillow\n    Successfully installed Pillow-6.2.1\n    ```", "```py\n    import os\n    from PIL import Image\n    ```", "```py\n    def compress_image(filename, folder):\n        file_path = image_set.path(filename=filename, folder=folder)\n        image = Image.open(file_path)\n    ```", "```py\n        if image.mode != \"RGB\":\n            image = image.convert(\"RGB\")\n        if max(image.width, image.height) > 1600:\n            maxsize = (1600, 1600)\n            image.thumbnail(maxsize, Image.ANTIALIAS)\n    ```", "```py\n        compressed_filename = '{}.jpg'.format(uuid.uuid4())\n        compressed_file_path = image_set.path(filename=compressed_filename, folder=folder)\n    ```", "```py\n        image.save(compressed_file_path, optimize=True, quality=85)\n    ```", "```py\n        original_size = os.stat(file_path).st_size\n      compressed_size = os.stat(compressed_file_path).st_size\n        percentage = round((original_size - compressed_size) / original_size * 100)\n        print(\"The file size is reduced by {}%, from {} to {}.\".format(percentage, original_size, compressed_size))\n    ```", "```py\n        os.remove(file_path)\n        return compressed_filename\n    ```", "```py\n    def save_image(image, folder):\n        filename = '{}.{}'.format(uuid.uuid4(), extension(image.filename))\n        image_set.save(image, folder=folder, name=filename)\n        filename = compress_image(filename=filename, folder=folder)\n        return filename\n    ```"]