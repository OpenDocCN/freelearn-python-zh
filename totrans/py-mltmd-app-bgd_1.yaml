- en: Chapter 1. Python and Multimedia
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Python和多媒体
- en: Since its conception in 1989, Python has gained increasing popularity as a general
    purpose programming language. It is a high-level, object-oriented language with
    a comprehensive standard library. The language features such as automatic memory
    management and easy readability have attracted the attention of a wide range of
    developer communities. Typically, one can develop complex applications in Python
    very quickly compared to some other languages. It is used in several open source
    as well as commercial scientific modeling and visualization software packages.
    It has already gained popularity in industries such as animation and game development
    studios, where the focus is on multimedia application development. This book is
    all about multimedia processing using Python.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自从1989年问世以来，Python作为一种通用编程语言，越来越受欢迎。它是一种高级、面向对象的编程语言，拥有全面的标准库。该语言的特点，如自动内存管理和易于阅读性，吸引了广泛的开发者社区的注意。通常，与其他一些语言相比，人们可以用Python非常快速地开发复杂的应用程序。它被用于多个开源以及商业科学建模和可视化软件包中。它已经在动画和游戏开发工作室等行业中获得了流行，这些行业专注于多媒体应用开发。本书全部关于使用Python进行多媒体处理。
- en: 'In this introductory chapter, we shall:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的介绍中，我们将：
- en: Learn about multimedia and multimedia processing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解多媒体和多媒体处理
- en: Discuss a few popular multimedia frameworks for multimedia processing using
    Python
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python讨论几个流行的多媒体处理框架
- en: Develop a simple interactive application using PyGame
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PyGame开发一个简单的交互式应用程序
- en: So let's get on with it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧。
- en: Multimedia
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多媒体
- en: We use multimedia applications in our everyday lives. It is multimedia that
    we deal with while watching a movie or listening to a song or playing a video
    game. Multimedia applications are used in a broad spectrum of fields. Multimedia
    has a crucial role to play in the advertising and entertainment industry. One
    of the most common usages is to add audio and video effects to a movie. Educational
    software packages such as a flight or a drive simulator use multimedia to teach
    various topics in an interactive way.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在日常生活中使用多媒体应用程序。我们在看电影、听歌或玩视频游戏时处理的就是多媒体。多媒体应用在众多领域都有广泛应用。在广告和娱乐行业中，多媒体扮演着至关重要的角色。最常见的用途之一就是给电影添加音频和视频效果。例如，飞行或驾驶模拟器等教育软件包使用多媒体以交互式的方式教授各种主题。
- en: So what really is multimedia? In general, any application that makes use of
    different sources of digital media is termed as a **digital multimedia**. A video,
    for instance, is a combination of different sources or contents. The contents
    can be an audio track, a video track, and a subtitle track. When such video is
    played, all these media sources are presented together to accomplish the desired
    effect.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，多媒体究竟是什么呢？一般来说，任何利用不同数字媒体来源的应用程序都被称作**数字多媒体**。例如，一个视频就是不同来源或内容的组合。这些内容可能包括音频轨道、视频轨道和字幕轨道。当这样的视频播放时，所有这些媒体来源都会一起呈现，以达到预期的效果。
- en: A multichannel audio can have a background music track and a lyrics track. It
    may even include various audio effects. An animation can be created by using a
    bunch of digital images that are displayed quickly one after the other. These
    are different examples of multimedia.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个多声道音频可以包含背景音乐轨道和歌词轨道。甚至可能包括各种音频效果。通过快速连续显示一系列数字图像，可以创建动画。这些都是多媒体的不同例子。
- en: In the case of computer or video games, another dimension is added to the application,
    the user interaction. It is often termed as an interactive type of multimedia.
    Here, the users determine the way the multimedia contents are presented. With
    the help of devices such as keyboard, mouse, trackball, joystick, and so on, the
    users can interactively control the game.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机或视频游戏的情况下，应用程序增加了一个维度，即用户交互。这通常被称为交互式多媒体。在这里，用户决定了多媒体内容呈现的方式。借助键盘、鼠标、轨迹球、操纵杆等设备，用户可以交互式地控制游戏。
- en: Multimedia processing
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多媒体处理
- en: We discussed some of the application domains where multimedia is extensively
    used. The focus of this book will be on multimedia processing, using which various
    multimedia applications will be developed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了一些多媒体被广泛使用的应用领域。本书的重点将放在多媒体处理上，通过使用它，将开发各种多媒体应用程序。
- en: Image processing
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像处理
- en: After taking a snap with a digital camera, we often tweak the original digital
    image for various reasons. One of the most common reasons is to remove blemishes
    from the image, such as removing 'red-eye' or increasing the brightness level
    if the picture was taken in insufficient light, and so on. Another reason for
    doing so is to add special effects that give a pleasing appearance to the image.
    For example, making a family picture black and white and digitally adding a frame
    around the picture gives it a nostalgic effect. The next illustration shows an
    image before and after the enhancement. Sometimes, the original image is modified
    just to make you understand important information presented by the image. Suppose
    the picture represents a complicated assembly of components. One can add special
    effects to the image so that only edges in the picture are shown as highlighted.
    This information can then be used to detect, for instance, interference between
    the components. Thus, we digitally process the image further until we get the
    desired output image.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数码相机拍照后，我们经常出于各种原因对原始数码图像进行调整。最常见的原因之一是去除图像上的瑕疵，例如去除“红眼”或如果照片是在光线不足的情况下拍摄的，则增加亮度级别等。这样做另一个原因是添加特殊效果，使图像看起来更令人愉悦。例如，将家庭照片变为黑白，并在照片周围数字添加边框，使其具有怀旧效果。下一张插图显示了增强前后的图像。有时，修改原始图像只是为了让你理解图像所呈现的重要信息。假设图片代表了一个复杂的组件组装。可以通过添加特殊效果来使图像中仅边缘被突出显示。然后，可以使用这些信息来检测，例如，组件之间的干扰。因此，我们进一步对图像进行数字处理，直到得到所需的输出图像。
- en: After taking a snap with a digital camera, we often tweak the original digital
    image for various reasons. One of the most common reasons is to remove blemishes
    from the image, such as removing 'red-eye' or increasing the brightness level
    if the picture was taken in insufficient light, and so on. Another reason for
    doing so is to add special effects that give a pleasing appearance to the image.
    For example, making a family picture black and white and digitally adding a frame
    around the picture gives it a nostalgic effect. The next illustration shows an
    image before and after the enhancement. Sometimes, the original image is modified
    just to make you understand important information presented by the image. Suppose
    the picture represents a complicated assembly of components. One can add special
    effects to the image so that only edges in the picture are shown as highlighted.
    This information can then be used to detect, for instance, interference between
    the components. Thus, we digitally process the image further until we get the
    desired output image.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数码相机拍照后，我们经常出于各种原因对原始数码图像进行调整。最常见的原因之一是去除图像上的瑕疵，例如去除“红眼”或如果照片是在光线不足的情况下拍摄的，则增加亮度级别等。这样做另一个原因是添加特殊效果，使图像看起来更令人愉悦。例如，将家庭照片变为黑白，并在照片周围数字添加边框，使其具有怀旧效果。下一张插图显示了增强前后的图像。有时，修改原始图像只是为了让你理解图像所呈现的重要信息。假设图片代表了一个复杂的组件组装。可以通过添加特殊效果来使图像中仅边缘被突出显示。然后，可以使用这些信息来检测，例如，组件之间的干扰。因此，我们进一步对图像进行数字处理，直到得到所需的输出图像。
- en: 'An example where a border is added around an image to change its appearance
    is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们可以看到如何给图片添加边框以改变其外观：
- en: '![Image processing](img/0165_1_1.jpg)![Image processing](img/0165_1_2.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图像处理](img/0165_1_1.jpg)![图像处理](img/0165_1_2.jpg)'
- en: Digital image processing can be viewed as an application of various algorithms/filters
    on the image data. One of the examples is an image smoothing filter. **Image smoothing**
    means reducing the noise from the image. The random changes in brightness and
    color levels within the image data are typically referred to as image **noise**.
    The smoothing algorithms modify the input image data so that this noise is reduced
    in the resultant image.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 数字图像处理可以看作是在图像数据上应用各种算法/滤波器。其中一个例子是图像平滑滤波器。**图像平滑**意味着减少图像中的噪声。图像数据中亮度和颜色级别的随机变化通常被称为图像**噪声**。平滑算法修改输入图像数据，使得在最终图像中这种噪声被减少。
- en: Another commonly performed image processing operation is **blending**. As the
    name suggests, blending means mixing two compatible images to create a new image.
    Typically, the data of the two input images is interpolated using a constant value
    of alpha to produce a final image. The next illustration shows the two input images
    and the resultant image after blending. In the coming chapters we will learn several
    of such digital image processing techniques.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的图像处理操作是**混合**。正如其名所示，混合意味着将两个兼容的图像混合以创建一个新的图像。通常，使用恒定的alpha值对两个输入图像的数据进行插值，以产生最终的图像。下一幅插图显示了两个输入图像和混合后的结果图像。在接下来的章节中，我们将学习几种这样的数字图像处理技术。
- en: 'The pictures of the bridge and the flying birds are taken at different locations.
    Using image processing techniques these two images can be blended together so
    that they appear as a single picture:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 桥梁和飞翔的鸟的图片是在不同的地点拍摄的。使用图像处理技术，这两张图片可以被融合在一起，看起来像一张单独的图片：
- en: '![Image processing](img/0165_1_3.jpg)![Image processing](img/0165_1_4.jpg)![Image
    processing](img/0165_1_5.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图像处理](img/0165_1_3.jpg)![图像处理](img/0165_1_4.jpg)![图像处理](img/0165_1_5.jpg)'
- en: Audio and video processing
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频和视频处理
- en: When you are listening to music on your computer, your music player is doing
    several things in the background. It processes the digital media data so that
    it can be transformed into a playable format that an output media device, such
    as an audio speaker, requires. The media data flows through a number of interconnected
    media handling components, before it reaches a media output device or a media
    file to which it is written. This is shown in the next illustration.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在电脑上听音乐时，你的音乐播放器在后台执行几个操作。它处理数字媒体数据，以便将其转换为输出媒体设备（如音频扬声器）所需的可播放格式。媒体数据流经多个相互连接的媒体处理组件，然后到达媒体输出设备或写入的媒体文件。这将在下一幅插图显示。
- en: 'The following image shows a media data processing pipeline:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了媒体数据处理流程：
- en: '![Audio and video processing](img/0165_01_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![音频和视频处理](img/0165_01_01.jpg)'
- en: Audio and video processing encompasses a number of things. Some of them are
    briefly discussed in this section. In this book, we will learn various audio-video
    processing techniques using Python bindings of the GStreamer multimedia framework.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 音频和视频处理包括许多内容。其中一些在本节中简要讨论。在这本书中，我们将学习使用GStreamer多媒体框架的Python绑定来实现的多种音频-视频处理技术。
- en: Compression
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 压缩
- en: If you record footage on your camcorder and then transfer it to your computer,
    it will take up a lot of space. In order to save those moments on a VCD or a DVD,
    you almost always have to compress the audio-video data so that it occupies less
    space. There are two types of audio and video compression; *lossy* and *lossless*.
    The lossy compression is very common. Here, some data is assumed unnecessary and
    is not retained in the compressed media. For example, in a *lossy* video compression,
    even if some of the original data is lost, it has much less impact on the overall
    quality of the video. On the other hand, in *lossless* compression, the data of
    a compressed audio or video perfectly matches the original data. The compression
    ratio, however, is very low. As we go along, we will write audio-video data conversion
    utilities to compress the media data.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你用摄像机录制视频，然后将其传输到电脑上，它将占用大量空间。为了将这些时刻保存在VCD或DVD上，你几乎总是需要压缩音频-视频数据，以便它占用更少的空间。有两种类型的音频和视频压缩；*有损*和*无损*。有损压缩非常常见。在这里，假设一些数据是不必要的，并且不会保留在压缩媒体中。例如，在有损视频压缩中，即使一些原始数据丢失，对视频整体质量的影响也较小。另一方面，在无损压缩中，压缩的音频或视频数据与原始数据完美匹配。然而，压缩比非常低。随着我们的进展，我们将编写音频-视频数据转换实用程序来压缩媒体数据。
- en: Mixing
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合
- en: '**Mixing** is a way to create composite media using more than one media source.
    In case of audio mixing, the audio data from different sources is combined into
    one or more audio channels. For example, it can be used to add audio effect, in
    order to synchronize separate music and lyrics tracks. In the coming chapters,
    we will learn more about the media mixing techniques used with Python.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**混合**是一种使用多个媒体源创建复合媒体的方法。在音频混合的情况下，来自不同来源的音频数据被组合成一个或多个音频通道。例如，它可以用来添加音频效果，以便同步单独的音乐和歌词轨道。在接下来的章节中，我们将学习更多关于使用Python的媒体混合技术。'
- en: Editing
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑
- en: Media mixing can be viewed as a type of media editing. Media editing can be
    broadly divided into linear editing and non-linear editing. In **linear editing**,
    the programmer doesn't control the way media is presented. Whereas in **non-linear
    editing**, editing is done interactively. This book will cover the basics of media
    editing. For example, we will learn how to create a new audio track by combining
    portions of different audio files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体混音可以被视为一种媒体编辑类型。媒体编辑可以大致分为线性编辑和非线性编辑。在**线性编辑**中，程序员不控制媒体展示的方式。而在**非线性编辑**中，编辑是交互式进行的。本书将涵盖媒体编辑的基础知识。例如，我们将学习如何通过组合不同音频文件的部分来创建新的音频轨道。
- en: Animations
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画
- en: 'An **animation** can be viewed as an optical illusion of motion created by
    displaying a sequence of image frames one after the other. Each of these image
    frames is slightly different from the previously displayed one. The next illustration
    shows animation frames of a ''grandfather''s clock'':'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**动画**可以被视为通过依次显示一系列图像帧来创建的运动视觉错觉。这些图像帧中的每一个都与之前显示的略有不同。下一张插图显示了“祖父的钟”的动画帧：
- en: '![Animations](img/0165_1_7.jpg)![Animations](img/0165_1_8.jpg)![Animations](img/0165_1_9.jpg)![Animations](img/0165_1_10.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![动画](img/0165_1_7.jpg)![动画](img/0165_1_8.jpg)![动画](img/0165_1_9.jpg)![动画](img/0165_1_10.jpg)'
- en: As you can see, there are four image frames in a clock animation. These frames
    are quickly displayed one after the other to achieve the desired animation effect.
    Each of these images will be shown for 0.25 seconds. Therefore, it simulates the
    pendulum oscillation of one second.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，时钟动画中有四个图像帧。这些帧快速依次显示，以达到所需的动画效果。每个图像将显示0.25秒。因此，它模拟了一秒钟的钟摆振荡。
- en: Cartoon animation is a classic example of animation. Since its debut in the
    early twentieth century, animation has become a prominent entertainment industry.
    Our focus in this book will be on 2D cartoon animations built using Python. In
    [Chapter 4](ch04.html "Chapter 4. Fun with Animations"), we will learn some techniques
    to build such animations. Creating a cartoon character and bringing it to 'life'
    is a laborious job. Until the late 70s, most of the animations and effects were
    created without the use of computers. In today's age, much of the image creation
    work is produced digitally. The state-of-the-art technology makes this process
    much faster. For example, one can apply image transformations to display or move
    a portion of an image, thereby avoiding the need to create the whole cartoon image
    for the next frame.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 卡通动画是动画的经典例子。自从20世纪初首次亮相以来，动画已经成为一个突出的娱乐行业。本书的重点将放在使用Python构建的2D卡通动画上。在[第4章](ch04.html
    "第4章。动画乐趣")中，我们将学习一些构建此类动画的技术。创建一个卡通角色并将其“赋予生命”是一项繁重的工作。直到20世纪70年代末，大多数动画和效果都是没有使用计算机创建的。在当今这个时代，大部分图像创作工作都是数字生成的。最先进的技术使这个过程变得更快。例如，可以应用图像变换来显示或移动图像的一部分，从而避免在下一帧中创建整个卡通图像的需要。
- en: Built-in multimedia support
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置的多媒体支持
- en: Python has a few built-in multimedia modules for application development. We
    will skim through some of these modules.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Python为应用程序开发提供了一些内置的多媒体模块。我们将简要介绍其中的一些模块。
- en: winsound
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: winsound
- en: The `winsound` module is available on the Windows platform. It provides an interface
    which can be used to implement fundamental audio-playing elements in the application.
    A sound can be played by calling `PlaySound(sound, flags)`. Here, the argument
    sound is used to specify the path of an audio file. If this parameter is specified
    as `None`, the presently streaming audio (if any) is stopped. The second argument
    specifies whether the file to be played is a sound file or a system sound. The
    following code snippet shows how to play a wave formatted audio file using `winsound`
    module.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`winsound`模块在Windows平台上可用。它提供了一个接口，可以用于在应用程序中实现基本的音频播放元素。可以通过调用`PlaySound(sound,
    flags)`来播放声音。在这里，参数sound用于指定音频文件的路径。如果此参数指定为`None`，则停止当前正在播放的音频（如果有）。第二个参数指定要播放的文件是声音文件还是系统声音。以下代码片段展示了如何使用`winsound`模块播放波形格式的音频文件。'
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This plays the sound file specified by the first argument to the function `PlaySound`.
    The second argument, `SND_FILENAME`, says that the first argument is an audio
    file. If the flag is set as `SND_ALIAS`, it means the value for the first argument
    is a system sound from the registry.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数`PlaySound`的第一个参数指定了要播放的声音文件。第二个参数`SND_FILENAME`表示第一个参数是一个音频文件。如果标志设置为`SND_ALIAS`，则表示第一个参数的值来自注册表中的系统声音。
- en: audioop
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: audioop
- en: This module is used for manipulating the raw audio data. One can perform several
    useful operations on sound fragments. For example, it can find the minimum and
    maximum values of all the samples within a sound fragment.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块用于操作原始音频数据。可以对声音片段执行多个有用的操作。例如，它可以找到声音片段中所有样本的最小值和最大值。
- en: wave
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: wave
- en: The `wave` module provides an interface to read and write audio files with `WAV`
    file format. The following line of code opens a wav file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`wave`模块提供了一个接口，用于读取和写入`WAV`格式的音频文件。以下代码行打开了一个wav文件。'
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first argument of method `open` is the location where the path to the wave
    file is specified. The second argument 'r' returns a `Wave_read` object. This
    is the mode in which the audio file is opened, 'r' or 'rb' for read-only mode
    and 'w' or 'wb' for write-only mode.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`open`方法的第一参数指定了波文件路径的位置。第二个参数''r''返回一个`Wave_read`对象。这是打开音频文件的模式，''r''或''rb''为只读模式，''w''或''wb''为只写模式。'
- en: External multimedia libraries and frameworks
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部多媒体库和框架
- en: There are several open source multimedia frameworks available for multimedia
    application development. The Python bindings for most of these are readily available.
    We will discuss a few of the most popular multimedia frameworks here. In the chapters
    that follow, we will make use of many of these libraries to create some useful
    multimedia applications.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个开源的多媒体框架可用于多媒体应用程序开发。其中大多数的Python绑定都很容易获得。在这里，我们将讨论一些最受欢迎的多媒体框架。在接下来的章节中，我们将使用这些库中的许多来创建一些有用的多媒体应用程序。
- en: Python Imaging Library
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 图像库
- en: Python Imaging Library provides image processing functionality in Python. It
    supports several image formats. Later in this book, a number of image processing
    techniques using PIL will be discussed thoroughly. We will learn things such as
    image format conversion and various image manipulation and enhancement techniques
    using the Python Imaging Library.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Python 图像库为Python提供了图像处理功能。它支持多种图像格式。在本书的后续章节中，将详细讨论使用PIL的多种图像处理技术。我们将学习诸如图像格式转换以及使用Python图像库的各种图像操作和增强技术。
- en: PyMedia
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyMedia
- en: PyMedia is a popular open source media library that supports audio/video manipulation
    of a wide range of multimedia formats.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: PyMedia是一个流行的开源媒体库，支持多种多媒体格式的音频/视频操作。
- en: GStreamer
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GStreamer
- en: This framework enables multimedia manipulation. It is a framework on top of
    which one can develop multimedia applications. The rich set of libraries it provides
    makes it easier to develop applications with complex audio/video processing capabilities.
    GStreamer is written in C programming language and provides bindings for some
    other programming languages including Python. Several open source projects use
    GStreamer framework to develop their own multimedia application. Comprehensive
    documentation is available on the GStreamer project website. GStreamer Application
    Development Manual is a very good starting point. This framework will be extensively
    used later in this group to develop audio and video applications.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此框架使多媒体操作成为可能。它是一个可以在此基础上开发多媒体应用程序的框架。它提供的丰富库集使得开发具有复杂音频/视频处理能力的应用程序变得更加容易。GStreamer是用C编程语言编写的，并为包括Python在内的其他一些编程语言提供了绑定。许多开源项目使用GStreamer框架来开发自己的多媒体应用程序。GStreamer项目网站上有详细的文档。GStreamer应用程序开发手册是一个非常好的起点。在此组中，此框架将被广泛用于开发音频和视频应用程序。
- en: Pyglet
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pyglet
- en: Interested in animations and gaming applications? Pyglet is here to help. Pyglet
    provides an API for developing multimedia applications using Python. It is an
    OpenGL-based library that works on multiple platforms. It is one of the popular
    multimedia frameworks for development of games and other graphically intense applications.
    It supports multiple monitor configuration typically needed for gaming application
    development. Later in this book, we will be extensively using this Pyglet framework
    for creating animations.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对动画和游戏应用感兴趣吗？Pyglet就在这里帮助你。Pyglet提供了一个用于使用Python开发多媒体应用的API。它是一个基于OpenGL的库，可以在多个平台上运行。它是用于游戏和其他图形密集型应用开发的流行多媒体框架之一。它支持游戏应用开发通常需要的多显示器配置。在本书的后续部分，我们将广泛使用这个Pyglet框架来创建动画。
- en: PyGame
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyGame
- en: PyGame ([www.pygame.org](http://www.pygame.org)) is another very popular open
    source framework that provides an API for gaming application development needs.
    It provides a rich set of graphics and sound libraries. We won't be using PyGame
    in this book. But since it is a prominent multimedia framework, we will briefly
    discuss some of its most important modules and work out a simple example. The
    PyGame website provides ample resources on use of this framework for animation
    and game programming.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: PyGame ([www.pygame.org](http://www.pygame.org))是另一个非常流行的开源框架，它为游戏应用开发需求提供了一个API。它提供了一套丰富的图形和声音库。本书中我们不会使用PyGame。但由于它是一个突出的多媒体框架，我们将简要讨论其一些最重要的模块，并给出一个简单的示例。PyGame网站提供了大量关于使用此框架进行动画和游戏编程的资源。
- en: Sprite
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 精灵
- en: The `Sprite` module contains several classes; out of these, `Sprite` and `Group`
    are the most important. `Sprite` is the super class of all the visible game objects.
    A `Group` object is a container for several instances of Sprite.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sprite`模块包含几个类；在这些类中，`Sprite`和`Group`是最重要的。`Sprite`是所有可见游戏对象的超类。`Group`对象是Sprite的几个实例的容器。'
- en: Display
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示
- en: As the name suggests, the `Display` module has functionality dealing with the
    display. It is used to create a Surface instance for displaying the Pygame window.
    Some of the important methods of this module include `flip` and `update`. The
    former is called to make sure that everything drawn is properly displayed on the
    screen. Whereas the latter is used if you just want to update a portion of the
    screen.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，`Display`模块具有处理显示的功能。它用于创建用于显示Pygame窗口的Surface实例。该模块的一些重要方法包括`flip`和`update`。前者用于确保所有绘制的内容都正确地显示在屏幕上。而后者用于你只想更新屏幕的一部分时。
- en: Surface
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表面
- en: This module is used to display an image. The instance of `Surface` represents
    an image. The following line of code creates such an instance.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块用于显示图像。`Surface`的实例代表一个图像。以下代码行创建了一个这样的实例。
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The API method, `display.set_mode`, is used to create this instance. The width
    and height of the window are specified as arguments to this method.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: API方法`display.set_mode`用于创建此实例。窗口的宽度和高度作为此方法的参数指定。
- en: Draw
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制
- en: With the `Draw` module, one can render several basic shapes within the `Surface`.
    Examples include circles, rectangles, lines, and so on.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Draw`模块，可以在`Surface`内渲染多个基本形状。例如包括圆形、矩形、线条等。
- en: Event
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事件
- en: This is another important module of PyGame. An event is said to occur when,
    for instance, the user clicks a mouse button or presses a key and so on. The event
    information is used to instruct the program to execute in a certain way.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PyGame的另一个重要模块。当用户点击鼠标按钮或按下一个键等事件发生时，我们说发生了事件。事件信息用于指导程序以某种方式执行。
- en: Image
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图像
- en: The `Image` module is used to process images with different file formats. The
    loaded image is represented by a surface.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`Image`模块用于处理不同文件格式的图像。加载的图像由一个表面表示。'
- en: Music
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音乐
- en: '`Pygame.mixer.music` provides convenient methods for controlling playback such
    as play, reverse, stop, and so on.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pygame.mixer.music`提供了控制播放的便捷方法，如播放、倒放、停止等。'
- en: The following is a simple program that highlights some of the fundamental concepts
    of animation and game programming. It shows how to display objects in an application
    window and then interactively modify their positions. We will use PyGame to accomplish
    this task. Later in this book, we will use a different multimedia framework, Pyglet,
    for creating animations.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的程序，它突出了动画和游戏编程的一些基本概念。它展示了如何在应用程序窗口中显示对象，然后交互式地修改它们的位置。我们将使用PyGame来完成这个任务。在本书的后续部分，我们将使用不同的多媒体框架Pyglet来创建动画。
- en: Time for action - a simple application using PyGame
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PyGame的简单应用程序行动时间
- en: This example will make use of the modules we just discussed. For this application
    to work, you will need to install PyGame. The binary and source distribution of
    PyGame is available on Pygame's website.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将使用我们刚刚讨论的模块。为了使此应用程序正常工作，您需要安装PyGame。PyGame的二进制和源代码分发可以在PyGame网站上找到。
- en: Create a new Python source file and write the following code in it.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Python源文件，并在其中写入以下代码。
- en: '[PRE3]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first line imports the `pygame` package. On line 4, the modules within this
    `pygame` package are initialized. An instance of class `Surface` is created using
    `display.set_mode` method. This is the main PyGame window inside which the images
    will be drawn. To ensure that this window is constantly displayed on the screen,
    we need to add a `while` loop that will run forever, until the window is closed
    by the user. In this simple application everything we need is placed inside the
    `while` loop. The background color of the PyGame window represented by object
    `surf` is set on line 30.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一行导入`pygame`包。在第4行，初始化此`pygame`包内的模块。使用`display.set_mode`方法创建`Surface`类的实例。这是PyGame窗口中的主窗口，图像将在其中绘制。为了确保此窗口始终显示在屏幕上，我们需要添加一个将永远运行的`while`循环，直到用户关闭窗口。在这个简单的应用程序中，我们需要的所有内容都放置在`while`循环内。在第30行设置了表示PyGame窗口背景颜色的对象`surf`。
- en: A circular shape is drawn in the PyGame surface by the code on line 31\. The
    arguments to `draw.circle` are `(Surface, color, position, radius)` . This creates
    a circle at the position specified by the argument `circle_pos`. The instance
    of class `Surface` is sent as the first argument to this method.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PyGame表面上，通过第31行的代码绘制了一个圆形。`draw.circle`函数的参数是`(Surface, color, position, radius)`。这将在由参数`circle_pos`指定的位置创建一个圆形。将`Surface`类的实例作为第一个参数传递给此方法。
- en: The code block 16-26 captures certain events. An event occurs when, for instance,
    a mouse button or a key is pressed. In this example, we instruct the program to
    do certain things when the arrow keys are pressed. When the `RIGHT` arrow key
    is pressed, the circle is drawn with the `x` coordinate offset by 10 pixels to
    the previous position. As a result, the circle appears to be moving towards right
    whenever you press the `RIGHT` arrow key. When the PyGame window is closed, the
    `pygame.QUIT` event occurs. Here, we simply exit the application by calling `sys.exit()`
    as done on line 17.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码块16-26捕获某些事件。例如，当鼠标按钮或按键被按下时，就会发生事件。在这个例子中，我们指示程序在按下箭头键时执行某些操作。当按下`RIGHT`箭头键时，圆形将在`x`坐标上偏移10像素到上一个位置绘制。因此，每次按下`RIGHT`箭头键时，圆形看起来就像向右移动。当PyGame窗口关闭时，将发生`pygame.QUIT`事件。在这里，我们简单地通过调用`sys.exit()`（如第17行所示）退出应用程序。
- en: Finally, we need to ensure that everything drawn on the `Surface` is visible.
    This is accomplished by the code on line 31\. If you disable this line, incompletely
    drawn images may appear on the screen.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要确保在`Surface`上绘制的所有内容都可见。这是通过第31行的代码实现的。如果您禁用此行，屏幕上可能会出现未完全绘制的图像。
- en: Execute the program from a terminal window. It will show a new graphics window
    containing a circular shape. If you press the arrow keys on the keyboard, the
    circle will move in the direction indicated by the arrow key. The next illustration
    shows the screenshot of the original circle position (left) and when it is moved
    using the `UP` and `RIGHT` arrow keys.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端窗口执行程序。它将显示一个包含圆形的新图形窗口。如果您按下键盘上的箭头键，圆形将沿着箭头键指示的方向移动。下一张插图显示了原始圆形位置（左侧）和当使用`UP`和`RIGHT`箭头键移动时的情况。
- en: 'A simple PyGame application with a circle drawn within the Surface (window).
    The image on the right side is a screenshot taken after maneuvering the position
    of the circle with the help of arrow keys:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个简单的PyGame应用程序，在Surface（窗口）内绘制圆形。右侧的图像是使用箭头键调整圆形位置后拍摄的截图：
- en: '![Time for action - a simple application using PyGame](img/0165_1_11.jpg)![Time
    for action - a simple application using PyGame](img/0165_1_12.jpg)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用PyGame的简单应用程序行动时间](img/0165_1_11.jpg)![使用PyGame的简单应用程序行动时间](img/0165_1_12.jpg)'
- en: What just happened?
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We used PyGame to create a simple user interactive application. The purpose
    of this example was to introduce some of the basic concepts behind animation and
    game programming. It was just a preview of what is coming next! Later in this
    book we will use Pyglet framework to create some interesting 2D animations.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 PyGame 创建了一个简单的用户交互式应用。本例的目的是介绍动画和游戏编程背后的基本概念。这只是对接下来内容的预览！在本书的后续部分，我们将使用
    Pyglet 框架创建一些有趣的 2D 动画。
- en: QT Phonon
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QT Phonon
- en: When one thinks of a media player, it is almost always associated with a graphical
    user interface. Of course one can work with command-line multimedia players. But
    a media player with a GUI is a clear winner as it provides an easy to use, intuitive
    user interface to stream a media and control its playback. The next screenshot
    shows the user interface of an audio player developed using QT Phonon.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们想到媒体播放器时，它几乎总是与图形用户界面联系在一起。当然，可以使用命令行多媒体播放器。但具有 GUI 的媒体播放器是一个明显的赢家，因为它提供了一个易于使用、直观的用户界面来流式传输媒体和控制其播放。下一张截图展示了使用
    QT Phonon 开发的音频播放器的用户界面。
- en: 'An Audio Player application developed with QT Phonon:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 QT Phonon 开发的音频播放器应用：
- en: '![QT Phonon](img/0165_1_13.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![QT Phonon](img/0165_1_13.jpg)'
- en: QT is an open source GUI framework. 'Phonon' is a multimedia package within
    QT that supports audio and video playback. Note that, Phonon is meant for simple
    media player functionality. For complex audio/video player functionality, you
    should use multimedia frameworks like GStreamer. Phonon depends on a platform-specific
    backend for media processing. For example, on Windows platform the backend framework
    is DirectShow. The supported functionality may vary depending on the platform.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: QT 是一个开源的 GUI 框架。'Phonon' 是 QT 中的一个多媒体包，支持音频和视频播放。请注意，Phonon 主要用于简单的媒体播放器功能。对于复杂的音频/视频播放器功能，您应使用
    GStreamer 等多媒体框架。Phonon 依赖于特定平台的媒体处理后端。例如，在 Windows 平台上，后端框架是 DirectShow。支持的功能可能因平台而异。
- en: To develop a media processing application, a media graph is created in Phonon.
    This media graph contains various interlinked media nodes. Each media node does
    a portion of media processing. For example, an effects node will add an audio
    effect, such as echo to the media. Another node will be responsible for outputting
    the media from an audio or video device and so on. In chapter 8, we will develop
    audio and video player applications using Phonon framework. The next illustration
    shows a video player streaming a video. It is developed using QT Phonon. We will
    be developing this application in [Chapter 8](ch08.html "Chapter 8. GUI-based
    Media Players Using QT Phonon").
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发媒体处理应用，需要在 Phonon 中创建一个媒体图。这个媒体图包含各种相互连接的媒体节点。每个媒体节点执行部分媒体处理。例如，一个效果节点将为媒体添加音频效果，如回声。另一个节点将负责从音频或视频设备输出媒体，等等。在第
    8 章中，我们将使用 Phonon 框架开发音频和视频播放器应用。下一张插图展示了一个使用 QT Phonon 开发的视频播放器正在流式传输视频。我们将在这个[第
    8 章](ch08.html "第 8 章。使用 QT Phonon 的基于 GUI 的媒体播放器")中开发这个应用。
- en: 'Using various built-in modules of QT Phonon, it is very easy to create GUI-based
    audio and video players. This example shows a video player in action:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 QT Phonon 的各种内置模块，创建基于 GUI 的音频和视频播放器非常容易。本例展示了视频播放器的实际应用：
- en: '![QT Phonon](img/0165_1_14.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![QT Phonon](img/0165_1_14.jpg)'
- en: Other multimedia libraries
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他多媒体库
- en: Python bindings for several other multimedia libraries are available on various
    platforms. Some of the popular libraries are mentioned below.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种平台上，有多个其他多媒体库的 Python 绑定可用。以下是一些流行的库。
- en: Snack Sound Toolkit
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Snack 音频工具包
- en: Snack is an audio toolkit that is used to create cross-platform audio applications.
    It includes audio analysis and input-output functionality and it has support for
    audio visualization as well. The official website for Snack Sound Toolkit is [http://www.speech.kth.se/snack/](http://www.speech.kth.se/snack/).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Snack 是一个音频工具包，用于创建跨平台的音频应用。它包括音频分析和输入/输出功能，并且支持音频可视化。Snack 音频工具包的官方网站是 [http://www.speech.kth.se/snack/](http://www.speech.kth.se/snack/)。
- en: PyAudiere
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyAudiere
- en: PyAudiere ([http://pyaudiere.org/](http://pyaudiere.org/)) is an open source
    audio library. It provides an API to easily implement the audio functionality
    in various applications. It is based on Audiere Sound Library.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: PyAudiere ([http://pyaudiere.org/](http://pyaudiere.org/)) 是一个开源音频库。它提供了一个 API，可以轻松地在各种应用中实现音频功能。它基于
    Audiere 音频库。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter served as an introduction to multimedia processing using Python.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本章作为使用 Python 进行多媒体处理的入门介绍。
- en: 'Specifically, in this chapter we covered:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中我们涵盖了：
- en: An overview of multimedia processing. It introduced us to digital image, audio,
    and video processing.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多媒体处理概述。它向我们介绍了数字图像、音频和视频处理。
- en: We learned about a number of freely available multimedia frameworks that can
    be used for multimedia processing.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们了解了一些可以用于多媒体处理的免费多媒体框架。
- en: Now that we know what multimedia libraries and frameworks are out there, we're
    ready to explore these to develop exciting multimedia applications!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了有哪些多媒体库和框架，我们准备去探索这些来开发令人兴奋的多媒体应用！
