- en: '[*Chapter 9*](B16119_09_Final_PD_ePub.xhtml#_idTextAnchor272): External API
    – Integrating with Other Systems'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Odoo server provides an external API that's used by its web client and is
    also available for other client applications. In this chapter, we'll learn how
    to use the Odoo external API to implement external applications that interact
    with an Odoo server by using it as a backend.
  prefs: []
  type: TYPE_NORMAL
- en: This can be used to write scripts to load or modify Odoo data, or to integrate
    with an Odoo existing business application, which is complementary and can't be
    replaced by an Odoo app.
  prefs: []
  type: TYPE_NORMAL
- en: We'll describe how to use OdooRPC calls, and then use that knowledge to build
    a simple command-line application for the *Library* Odoo app using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the learning project – a client app to catalog books
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Python on the client machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the Odoo external API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the client app's XML-RPC interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the client app's user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the OdooRPC library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have created a simple Python application
    that can use Odoo as a backend to query and store data.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code in this chapter requires the `library_app` Odoo module that we created
    in [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072), *Your First
    Odoo Application*. The corresponding code can be found in this book's GitHub repository
    at [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials).
  prefs: []
  type: TYPE_NORMAL
- en: The path to the Git clone repository should be in the Odoo add-ons path and
    the `library_app` module should be installed. The code examples will assume that
    the Odoo database you're working with is `library`, to be consistent with the
    installation instructions provided in [*Chapter 2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049),
    *Preparing the Development Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: The code in this chapter can be found in the same repository, in the `ch09/client_app/`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the learning project – a client app to catalog books
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will work on a simple client application to manage the library
    book catalog. It is a **command-line interface** (**CLI**) application that uses
    Odoo as its backend. The features that we will implement will be basic to keep
    the focus on the technology that's used to interact with the Odoo server.
  prefs: []
  type: TYPE_NORMAL
- en: 'This simple CLI application should be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for and list books by title.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add new books to the catalog.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit a book title.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The goal is to focus on how to use the Odoo external API, so we want to avoid
    introducing additional programming languages that you might not be familiar with.
    By introducing this constraint, the most sensible choice is to use Python to implement
    the client app. Still, once we understand the XML-RPC library for a particular
    language, the techniques to handle the RPC calls will also apply.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application will be a Python script that expects specific commands to perform.
    Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This example session demonstrates the client app being used to add, list, and
    modify book titles.
  prefs: []
  type: TYPE_NORMAL
- en: This client app will run using Python. Before we start looking at the code for
    the client app, we must make sure that Python is installed in the client machine.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Python on the client machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Odoo API can be accessed externally using two different protocols: XML-RPC
    and JSON-RPC. Any external program capable of implementing a client for one of
    these protocols will be able to interact with an Odoo server. To avoid introducing
    additional programming languages, we will use Python to explore the external API.'
  prefs: []
  type: TYPE_NORMAL
- en: Until now, Python code was only being used on the server side. For the client
    app, Python code will run on the client, so the workstation may require additional
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: To follow the examples in this chapter, the system you're using needs to be
    able to run Python 3 code. If you've followed the same development environment
    that's been used for the other chapters in this book, this might already be the
    case. However, if it isn't, we should make sure that Python is installed.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure that Python 3 is installed in the development workstation, run
    the `python3 --version` command in a terminal window. If it is not installed,
    please refer to the official page to find the installation package for your system,
    at [https://www.python.org/downloads/](https://www.python.org/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: 'With Ubuntu, there''s a good chance it is preinstalled on your system. If not,
    it can be installed with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For Windows 10, it can be installed from the Microsoft Store.
  prefs: []
  type: TYPE_NORMAL
- en: Running `python3` in PowerShell will direct you to the corresponding download
    page.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a Windows user and have installed Odoo with the all-in-one installer,
    you may be wondering why the Python interpreter is not already available for you.
    In this case, you'll need an additional installation. The short answer is that
    the Odoo all-in-one installer has an embedded Python interpreter that is not directly
    made available to the general system.
  prefs: []
  type: TYPE_NORMAL
- en: Now that Python has been installed and is available, it can be used to explore
    the Odoo external API.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Odoo external API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some familiarity with the Odoo external API should be gained before we implement
    the client app. The following sections explore the XML-RPC API using a *Python
    interpreter*.
  prefs: []
  type: TYPE_NORMAL
- en: Using XML-RPC to connect to the Odoo external API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplest way to access the Odoo server is by using XML-RPC. The `xmlrpc`
    library, from Python standard library, can be used for this.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the application being developed is a client that connects to a
    server. So, a running Odoo server instance is needed for the client to connect
    to. The code examples will assume that an Odoo server instance is running on the
    same machine, `http://localhost:8069`, but any reachable URL can be used if the
    server you wish to use is running on a different machine.
  prefs: []
  type: TYPE_NORMAL
- en: The Odoo `xmlrpc/2/common` endpoint exposes public methods, and these can be
    accessed without a login. These can be used to inspect the server version and
    check login credentials. Let's use the `xmlrpc` library to explore the `common`
    publicly available Odoo API.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, start a Python 3 console and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code imports the `xmlrpc` library and sets up a variable with
    the server address and listening port. This can be adapted to the specific URL
    of the Odoo server to connect to.
  prefs: []
  type: TYPE_NORMAL
- en: Next, an XML-RPC client object is created to access the server public services
    that are exposed at the `/xmlrpc/2/common` endpoint. You do not need to log in.
    One of the methods available there is `version()`, which is used to inspect the
    Odoo server version. It is a simple way to confirm that communication with the
    server is working.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful public method is `authenticate()`. This method confirms that
    the username and password are accepted and returns the user ID that should be
    used in requests. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `authenticate()` method expects four parameters: the database name, the
    username, the password, and the user agent. The previous code used variables to
    store these and then passed those variables as parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 14
  prefs: []
  type: TYPE_NORMAL
- en: Odoo 14 supports API keys, and this may be required for Odoo API external access.
    API keys can be set on the user's **Preferences** form, in the **Account Security**
    tab. The XML-RPC usage is the same, except that the API key should be used as
    the password. More details are provided in the official documentation at [https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html#api-keys](https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html#api-keys).
  prefs: []
  type: TYPE_NORMAL
- en: The user agent environment should be used to provide some metadata about the
    client. It's mandatory, and should at least be an empty dictionary, `{}`.
  prefs: []
  type: TYPE_NORMAL
- en: If the authentication fails, a `False` value will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: The `common` public endpoint is quite limited, so to gain access to the ORM
    API or another endpoint, the required authentication needs to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Using XML-RPC to run server methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the Odoo models and their methods, the `xmlrpc/2/object` endpoint
    needs to be used. The requests to this endpoint require login details.
  prefs: []
  type: TYPE_NORMAL
- en: This endpoint exposes a generic `execute_kw` method and receives the model's
    name, the method to call, and a list containing the parameters to pass to that
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how `execute_kw` works. It calls the `search_count` method,
    which returns the number of records that match a domain filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This code uses the `xmlrpc/2/endpoint` object to access the server API. The
    `execute_kw()` method is called using the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the database to connect to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The connection user ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user password (or API key)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The target model identifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method to call
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of positional arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional dictionary with keyword arguments (not used in this example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the model methods can be called, except for the ones prefixed with an underscore
    (`_`), which are considered private. Some methods might not work with the XML-RPC
    protocol if they return values that can''t be sent through the XML-RPC protocol.
    This is the case for `browse()`, which returns a recordset object. Trying to use
    `browse()` through XML-RPC returns a `TypeError: cannot marshal objects` error.
    Instead of `browse()`, XML-RPC calls should use `read` or `search_read`, which
    return data in a format the XML-RPC protocol can send to the client.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how `search` and `read` can be used to query Odoo data.
  prefs: []
  type: TYPE_NORMAL
- en: Using the search and read API methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Odoo server-side code uses `browse` to query records. This can't be used
    by RPC clients because the recordset objects can't be transported through the
    RPC protocol. Instead, the `read` method should be used.
  prefs: []
  type: TYPE_NORMAL
- en: '`read([<ids>, [<fields>])` is similar to the `browse` method, but instead of
    a recordset, it returns a list of records. Each record is a dictionary that contains
    the fields that have been requested and their data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how `read()` can be used to retrieve data from Odoo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example calls the `read` method of the `res.users` model with
    two positional arguments – the record ID `2` (a list of IDs could have been used
    instead) and the list of fields to retrieve, `["login", "name", "company_id"]`,
    and no keyword arguments.
  prefs: []
  type: TYPE_NORMAL
- en: The result is a list of dictionaries, where each dictionary is a record. The
    values of to-many fields follow a particular representation. They are a pair of
    values with the record ID and the record display name. For example, the `company_id`
    value that was returned previously was `[1, 'YourCompany']`.
  prefs: []
  type: TYPE_NORMAL
- en: The record IDs may not be known, and in that case, a search call is needed to
    find the record IDs that match a domain filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we wish to find the admin user, we can use `[("login", "=",
    "admin")]`. This RPC call is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The result is a list with only one element, `2`, which is the ID of the `admin`
    user.
  prefs: []
  type: TYPE_NORMAL
- en: A frequent action would be to use combinations of the `search` and `read` methods
    to find the ID for the records meeting a domain filter and then retrieve the data
    for them. For a client app, this means two round trips to the server. To simplify
    this, the `search_read` method is available, which can perform both operations
    in a single step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of `search_read` being used to find the admin user and return
    its name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `search_read` method is using two positional arguments: a list containing
    the domain filter, and a second list containing the fields to retrieve.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The arguments for `search_read` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`domain`: A list with a domain filter expression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fields`: A list with the names of the fields to retrieve'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`offset`: The number of records to skip or use for record pagination'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit`: The maximum number of records to return'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order`: A string to be used by the database''s `ORDER BY` clause'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `fields` argument is optional, both for `read` and `search_read`. If it's
    not provided, all the model fields will be retrieved. But this may cause expensive
    function field computation and a large amount of data being retrieved that is
    probably not needed. So, the recommendation is to provide an explicit list of
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `execute_kw` call can use both positional and keyword arguments. Here is
    what the same call looks like when you''re using keyword arguments instead of
    positional ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`search_read` is the most used method to retrieve data, but there are more
    methods available to write data or trigger other business logic.'
  prefs: []
  type: TYPE_NORMAL
- en: Calling other API methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the other model methods are exposed through RPC, except for the ones prefixed
    with an underscore, which are considered private. This means that `create`, `write`,
    and `unlink` can be called to modify data on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example. The following code creates a new partner record,
    modifies it, reads it to confirm the modification was written, and finally deletes
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: One limitation of the XML-RPC protocol is that it doesn't support `None` values.
    There's an XML-RPC extension that supports `None` values, but whether this is
    available will depend on the particular XML-RPC library being used by the client
    app. Methods that don't return anything may not be usable through XML-RPC, since
    they are implicitly returning `None`. This is why it is good practice for methods
    to always return something, at a `True` value. Another alternative is to use JSON-RPC
    instead. The `OdooRPC` library supports this protocol, and it will be used later
    in this chapter, in the *Using the OdooRPC library* section.
  prefs: []
  type: TYPE_NORMAL
- en: The `Model` methods that are prefixed with an underscore are considered private
    and aren't exposed through XML-RPC.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Often, client apps want to replicate manual user entry on an Odoo form. Calling
    the `create()` method might not be enough for this, because forms can automate
    some fields using `onchange` methods, which are triggered by the form's interaction,
    but not by `create()`. The solution is to create a custom method on the Odoo server,
    that uses `create()` and then runs the needed `onchange` methods.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth repeating that the Odoo external API can be used by most programming
    languages. The official documentation provides examples for Ruby, PHP, and Java.
    This is available at [https://www.odoo.com/documentation/15.0/webservices/odoo.html](https://www.odoo.com/documentation/15.0/webservices/odoo.html).
  prefs: []
  type: TYPE_NORMAL
- en: So far, we've seen how to call Odoo methods using the XML-RPC protocol. Now,
    we can use this to build the book catalog client application.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the client app XML-RPC interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by implementing the Library book catalog client application.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be split into two files: one for the Odoo backend interface containing
    the server backend, `library_xmlrpc.py`, and another for the user interface, `library.py`.
    This will allow us to use alternative implementations for the backend interface.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with the Odoo backend component, a `LibraryAPI` class will be used
    to set up the connection with the Odoo server that supports methods that are needed
    to interact with Odoo. The methods to implement are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`search_read(<title>)` to search for book data by title'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create(<title>)` to create a book with a specific title'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`write(<id>, <title>)` to update a book title using the book ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unlink(<id>)` to delete a book using its ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Choose a directory to host the application files in and create the `library_xmlrpc.py`
    file. Start by adding the class constructor, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This class stores all of the information needed to execute calls on the target
    model: the API XML-RPC reference, `uid`, the password, the database name, and
    the model name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The RPC calls to Odoo will all use the same `execute_kw` RPC method. A thin
    wrapper around it is added next, in the `_execute()` private method. This takes
    advantage of the object stored data to provide a smaller function signature, as
    shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This `_execute()` private method can now be used for less verbose implementations
    of the higher-level methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first public method is the `search_read()` method. It will accept an optional
    string that''s used to search book titles. If no title is given, all the records
    will be returned. This is the corresponding implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `create()` method will create a new book with the given title and return
    the ID of the created record:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `write()` method will have the new title and book ID as arguments and will
    perform a write operation on that book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `unlink()` method is used to delete a book, given the corresponding
    ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We end the file with a small piece of test code that will be executed if we
    run the Python file, which can help test the methods that have been implemented,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run this Python script, we should see the content of our library books
    printed out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have a simple wrapper around our Odoo backend, let's deal with the
    command-line user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the client app user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our goal here was to learn how to write the interface between an external application
    and the Odoo server, and we did this in the previous section. But let's go the
    extra mile and build the user interface for this minimalistic client application.
  prefs: []
  type: TYPE_NORMAL
- en: To keep this as simple as possible, we will use a simple command-line user interface
    and additional dependencies will be avoided. This leaves us with Python's built-in
    features to implement command-line applications and the `ArgumentParser` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, alongside the `library_xmlrpc.py` file, create a new `library.py` file.
    This will import Python''s command-line argument parser and then the `LibraryAPI`
    class, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we must describe the commands that the argument parser will expect. There
    are four commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`list` to search for and list books'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add` to add a book'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set` to update a book title'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`del` to delete a book'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The command-line parser code for implementing the preceding commands is shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `args` object represents the command-line options given by the user. `args.command`
    is the command being used, while `args.params` holds the additional parameters
    to use for the command, if they've been given any.
  prefs: []
  type: TYPE_NORMAL
- en: If no or incorrect commands are given, the argument parser will handle that
    and will show the user what input is expected. A complete reference to `argparse`
    can be found in the official documentation at [https://docs.python.org/3/library/argparse.html](https://docs.python.org/3/library/argparse.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to perform the action that corresponds to the `user` command.
    We will start by creating a `LibraryAPI` instance. This requires Odoo connection
    details that, in this simple implementation, will be hardcoded, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The first line sets some fixed parameters for the server instance and database
    to connect to. In this case, the connection is to a local Odoo server, listening
    on the `8069` default port, to a `library` database. To connect to a different
    server and database, these parameters should be adapted accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'New specific code to handle each command must be added. We will start with
    the `list` command, which returns a list of books:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `LibraryAPI.search_read()` method is being used in the preceding code to
    retrieve the list of book records. The returned list is then iterated to print
    out each element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the `add` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Since the hard work was already done in the `LibraryAPI` object, the implementation
    just needs to call the `create()` method and show the result to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `set` command allows us to change the title of an existing book. It should
    have two parameters – the ID of the book and the new title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, there is the implementation for the `del` command, to delete a book
    record. This is not very different from the previous commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The client application is done, and you can try it out using the commands of
    your choice. In particular, we should be able to run the example commands shown
    at the beginning of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: On a Linux system, `library.py` can be made executable by running the `chmod
    +x library.py` command and adding `#!/usr/bin/env python3` to the first line of
    the file. After this, running `./library.py` in the command line should work.
  prefs: []
  type: TYPE_NORMAL
- en: This is quite a basic application, and it is easy to think of a few ways to
    improve it. The point here was to build a minimum viable application using the
    Odoo RPC API.
  prefs: []
  type: TYPE_NORMAL
- en: Using the OdooRPC library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another relevant client library to be considered is `OdooRPC`. It is a complete
    client library that uses the JSON-RPC protocol instead of XML-RPC. The Odoo official
    web client uses JSON-RPC as well, although XML-RPC is still also supported.
  prefs: []
  type: TYPE_NORMAL
- en: The `OdooRPC` library is now maintained under the Odoo Community Association
    umbrella. The source code repository can be found at [https://github.com/OCA/odoorpc](https://github.com/OCA/odoorpc).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `OdooRPC` library can be installed from PyPI using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `OdooRPC` library sets up a server connection when a new `odoorpc.ODOO`
    object is created. At this point, we should use the `ODOO.login()` method to create
    a user session. Just like on the server side, the session has an `env` attribute
    containing the session's environment, including the user ID, `uid`, and `context`.
  prefs: []
  type: TYPE_NORMAL
- en: The `OdooRPC` library can be used to provide an alternate implementation for
    the `library_xmlrpc.py` interface with the server. It should provide the same
    features but be implemented using JSON-RPC instead of XML-RPC.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, a `library_odoorpc.py` Python module will be created that
    provides a drop-in replacement for the `library_xmlrpc.py` module. To do this,
    create a new `library_odoorpc.py` file alongside it that contains the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `OdooRPC` library implements the `Model` and `Recordset` objects, which
    mimic the behavior of their server-side counterparts. The goal is for the code
    that's using this library to be similar to the code that's used on the Odoo server
    side. The methods that are used by the client make use of this and store a reference
    to the `library.book` model object in the `self.Model` attribute, which is provided
    by the OdooRPC `env["library.book"]` call.
  prefs: []
  type: TYPE_NORMAL
- en: The `_execute()` method is implemented here as well; it allows us to compare
    it to the plain XML-RPC version. The OdooRPC library has the `execute()` method
    to run arbitrary Odoo model methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the implementation for the `search_read()`, `create()`, `write()`,
    and `unlink()` client methods. In the same file, add these methods inside the
    `LibraryAPI()` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Notice how this client code is similar to the Odoo server-side code.
  prefs: []
  type: TYPE_NORMAL
- en: This `LibraryAPI` object can be used as a drop-in replacement for `library_xmlrpc.py`. It
    can be used as the RPC connection layer by editing the `library.py` file and changing
    the `from library_xmlrpc import LibraryAPI` line to `from library_odoorpc import
    LibraryAPI`. Now, test drive the `library.py` client application; it should perform
    just like before!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this chapter was to learn how the external API works and what it
    is capable of. We started by exploring it with simple scripts using the Python
    XML-RPC client, though the external API can be used from any programming language.
    The official documentation provides code examples for Java, PHP, and Ruby.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we learned how to use XML-RPC calls to search for and read data, and then
    how to call any other method. We can, for example, create, update, and delete
    records.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we introduced the OdooRPC library. It provides a layer on top of the RPC
    base library (XML-RPC or JSON-RPC) to provide a local API that's similar to the
    API that can be found on the server side. This lowers the learning curve, reduces
    programming mistakes, and makes it easier to copy code between server and client
    code.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have finished the chapters dedicated to the programming API and
    business logic. Now, it's time to look at views and the user interface. In the
    next chapter, we will look at backend views in more detail and the user experience
    that can be provided out of the box by the web client.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following additional reference material may complement the topics described
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The official documentation on Odoo web services, including code examples for
    programming languages other than Python: [https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html](https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The OdooRPC documentation: [https://pythonhosted.org/OdooRPC](https://pythonhosted.org/OdooRPC)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
