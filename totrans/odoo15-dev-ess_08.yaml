- en: '[*Chapter 9*](B16119_09_Final_PD_ePub.xhtml#_idTextAnchor272): External API
    – Integrating with Other Systems'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第9章*](B16119_09_Final_PD_ePub.xhtml#_idTextAnchor272)：外部API – 与其他系统集成'
- en: The Odoo server provides an external API that's used by its web client and is
    also available for other client applications. In this chapter, we'll learn how
    to use the Odoo external API to implement external applications that interact
    with an Odoo server by using it as a backend.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo服务器提供了一个外部API，该API被其Web客户端使用，并且也适用于其他客户端应用程序。在本章中，我们将学习如何使用Odoo外部API通过将其作为后端来实现与Odoo服务器交互的外部应用程序。
- en: This can be used to write scripts to load or modify Odoo data, or to integrate
    with an Odoo existing business application, which is complementary and can't be
    replaced by an Odoo app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用来编写脚本以加载或修改Odoo数据，或者与现有的Odoo业务应用程序集成，这互补且不能被Odoo应用程序取代。
- en: We'll describe how to use OdooRPC calls, and then use that knowledge to build
    a simple command-line application for the *Library* Odoo app using Python.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将描述如何使用OdooRPC调用，然后利用这些知识使用Python构建一个简单的命令行应用程序，用于*图书馆*Odoo应用程序。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing the learning project – a client app to catalog books
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍学习项目 – 一个用于编目书籍的客户端应用程序
- en: Setting up Python on the client machine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端机器上设置Python
- en: Exploring the Odoo external API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Odoo外部API
- en: Implementing the client app's XML-RPC interface
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现客户端应用程序的XML-RPC接口
- en: Implementing the client app's user interface
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现客户端应用程序的用户界面
- en: Using the OdooRPC library
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OdooRPC库
- en: By the end of this chapter, you should have created a simple Python application
    that can use Odoo as a backend to query and store data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您应该已经创建了一个简单的Python应用程序，该应用程序可以使用Odoo作为后端来查询和存储数据。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code in this chapter requires the `library_app` Odoo module that we created
    in [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072), *Your First
    Odoo Application*. The corresponding code can be found in this book's GitHub repository
    at [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码需要我们在[*第3章*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072)，*您的第一个Odoo应用程序*中创建的`library_app`
    Odoo模块。相应的代码可以在此书的GitHub仓库中找到：[https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials)。
- en: The path to the Git clone repository should be in the Odoo add-ons path and
    the `library_app` module should be installed. The code examples will assume that
    the Odoo database you're working with is `library`, to be consistent with the
    installation instructions provided in [*Chapter 2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049),
    *Preparing the Development Environment*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Git克隆仓库的路径应该在Odoo插件路径中，并且应该安装`library_app`模块。代码示例将假设您正在使用的Odoo数据库是`library`，以与提供的安装说明保持一致，见[*第2章*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049)，*准备开发环境*。
- en: The code in this chapter can be found in the same repository, in the `ch09/client_app/`
    directory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码可以在同一仓库中的`ch09/client_app/`目录中找到。
- en: Introducing the learning project – a client app to catalog books
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍学习项目 – 一个用于编目书籍的客户端应用程序
- en: In this chapter, we will work on a simple client application to manage the library
    book catalog. It is a **command-line interface** (**CLI**) application that uses
    Odoo as its backend. The features that we will implement will be basic to keep
    the focus on the technology that's used to interact with the Odoo server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发一个简单的客户端应用程序来管理图书馆书籍编目。这是一个**命令行界面**（CLI）应用程序，使用Odoo作为其后端。我们将实现的功能将是基本的，以保持对与Odoo服务器交互所使用技术的关注。
- en: 'This simple CLI application should be able to do the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的命令行应用程序应该能够完成以下操作：
- en: Search for and list books by title.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过标题搜索和列出书籍。
- en: Add new books to the catalog.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向编目中添加新书。
- en: Edit a book title.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑书籍标题。
- en: The goal is to focus on how to use the Odoo external API, so we want to avoid
    introducing additional programming languages that you might not be familiar with.
    By introducing this constraint, the most sensible choice is to use Python to implement
    the client app. Still, once we understand the XML-RPC library for a particular
    language, the techniques to handle the RPC calls will also apply.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是专注于如何使用Odoo外部API，因此我们希望避免引入您可能不熟悉的额外编程语言。通过引入这个限制，最合理的选择是使用Python来实现客户端应用程序。然而，一旦我们理解了特定语言的XML-RPC库，处理RPC调用的技术也将适用。
- en: 'The application will be a Python script that expects specific commands to perform.
    Here is an example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将是一个Python脚本，它期望执行特定命令。以下是一个示例：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This example session demonstrates the client app being used to add, list, and
    modify book titles.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例会话演示了使用客户端应用程序添加、列出和修改书名。
- en: This client app will run using Python. Before we start looking at the code for
    the client app, we must make sure that Python is installed in the client machine.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此客户端应用程序将使用Python运行。在我们开始查看客户端应用程序的代码之前，我们必须确保Python已安装在客户端机器上。
- en: Setting up Python on the client machine
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在客户端机器上设置Python
- en: 'The Odoo API can be accessed externally using two different protocols: XML-RPC
    and JSON-RPC. Any external program capable of implementing a client for one of
    these protocols will be able to interact with an Odoo server. To avoid introducing
    additional programming languages, we will use Python to explore the external API.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo API可以通过两种不同的协议从外部访问：XML-RPC和JSON-RPC。任何能够实现这些协议之一客户端的外部程序都将能够与Odoo服务器交互。为了避免引入额外的编程语言，我们将使用Python来探索外部API。
- en: Until now, Python code was only being used on the server side. For the client
    app, Python code will run on the client, so the workstation may require additional
    setup.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Python代码仅在服务器端使用。对于客户端应用程序，Python代码将在客户端运行，因此工作站可能需要额外的设置。
- en: To follow the examples in this chapter, the system you're using needs to be
    able to run Python 3 code. If you've followed the same development environment
    that's been used for the other chapters in this book, this might already be the
    case. However, if it isn't, we should make sure that Python is installed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章中的示例，您所使用的系统需要能够运行Python 3代码。如果您已经遵循了本书其他章节中使用的相同开发环境，这可能已经实现。然而，如果尚未实现，我们应该确保Python已安装。
- en: To make sure that Python 3 is installed in the development workstation, run
    the `python3 --version` command in a terminal window. If it is not installed,
    please refer to the official page to find the installation package for your system,
    at [https://www.python.org/downloads/](https://www.python.org/downloads/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要确保开发工作站上已安装Python 3，请在终端窗口中运行`python3 --version`命令。如果没有安装，请参考官方网站以找到适用于您系统的安装包，网址为[https://www.python.org/downloads/](https://www.python.org/downloads/)。
- en: 'With Ubuntu, there''s a good chance it is preinstalled on your system. If not,
    it can be installed with the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ubuntu，有很大可能性它已经预安装在您的系统上。如果没有，可以使用以下命令安装：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For Windows 10, it can be installed from the Microsoft Store.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows 10，可以从Microsoft Store安装。
- en: Running `python3` in PowerShell will direct you to the corresponding download
    page.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在PowerShell中运行`python3`将引导您到相应的下载页面。
- en: If you are a Windows user and have installed Odoo with the all-in-one installer,
    you may be wondering why the Python interpreter is not already available for you.
    In this case, you'll need an additional installation. The short answer is that
    the Odoo all-in-one installer has an embedded Python interpreter that is not directly
    made available to the general system.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是Windows用户并且已使用一站式安装程序安装了Odoo，您可能会想知道为什么Python解释器尚未对您可用。在这种情况下，您需要额外的安装。简短的回答是，Odoo一站式安装程序包含一个嵌入的Python解释器，它不会直接提供给通用系统。
- en: Now that Python has been installed and is available, it can be used to explore
    the Odoo external API.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Python已经安装并可用，它可以用来探索Odoo外部API。
- en: Exploring the Odoo external API
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Odoo外部API
- en: Some familiarity with the Odoo external API should be gained before we implement
    the client app. The following sections explore the XML-RPC API using a *Python
    interpreter*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实现客户端应用程序之前，应该先熟悉Odoo外部API。以下章节将使用*Python解释器*探索XML-RPC API。
- en: Using XML-RPC to connect to the Odoo external API
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用XML-RPC连接到Odoo外部API
- en: The simplest way to access the Odoo server is by using XML-RPC. The `xmlrpc`
    library, from Python standard library, can be used for this.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 访问Odoo服务器的最简单方法是使用XML-RPC。Python标准库中的`xmlrpc`库可以用于此目的。
- en: Remember that the application being developed is a client that connects to a
    server. So, a running Odoo server instance is needed for the client to connect
    to. The code examples will assume that an Odoo server instance is running on the
    same machine, `http://localhost:8069`, but any reachable URL can be used if the
    server you wish to use is running on a different machine.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，正在开发的应用程序是一个连接到服务器的客户端。因此，需要一个正在运行的 Odoo 服务器实例供客户端连接。代码示例将假设 Odoo 服务器实例在同一台机器上运行，`http://localhost:8069`，但如果您要使用的服务器在不同的机器上运行，则可以使用任何可到达的
    URL。
- en: The Odoo `xmlrpc/2/common` endpoint exposes public methods, and these can be
    accessed without a login. These can be used to inspect the server version and
    check login credentials. Let's use the `xmlrpc` library to explore the `common`
    publicly available Odoo API.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo `xmlrpc/2/common` 端点公开了公共方法，并且可以在不登录的情况下访问这些方法。这些方法可以用来检查服务器版本和验证登录凭证。让我们使用
    `xmlrpc` 库来探索公开的 `common` Odoo API。
- en: 'First, start a Python 3 console and type the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，启动 Python 3 控制台并输入以下内容：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code imports the `xmlrpc` library and sets up a variable with
    the server address and listening port. This can be adapted to the specific URL
    of the Odoo server to connect to.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码导入了 `xmlrpc` 库，并设置了一个包含服务器地址和监听端口的变量。这可以根据要连接的 Odoo 服务器的特定 URL 进行调整。
- en: Next, an XML-RPC client object is created to access the server public services
    that are exposed at the `/xmlrpc/2/common` endpoint. You do not need to log in.
    One of the methods available there is `version()`, which is used to inspect the
    Odoo server version. It is a simple way to confirm that communication with the
    server is working.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个 XML-RPC 客户端对象以访问在 `/xmlrpc/2/common` 端点公开的服务器公共服务。您不需要登录。那里可用的方法之一是
    `version()`，它用于检查 Odoo 服务器版本。这是一种简单的方法来确认与服务器通信是否正常。
- en: 'Another useful public method is `authenticate()`. This method confirms that
    the username and password are accepted and returns the user ID that should be
    used in requests. Here is an example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的公共方法是 `authenticate()`。此方法确认用户名和密码被接受，并返回在请求中应使用的用户 ID。以下是一个示例：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `authenticate()` method expects four parameters: the database name, the
    username, the password, and the user agent. The previous code used variables to
    store these and then passed those variables as parameters.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`authenticate()` 方法期望四个参数：数据库名称、用户名、密码和用户代理。之前的代码使用变量来存储这些信息，然后将这些变量作为参数传递。'
- en: Changes in Odoo 14
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 14 的变化
- en: Odoo 14 supports API keys, and this may be required for Odoo API external access.
    API keys can be set on the user's **Preferences** form, in the **Account Security**
    tab. The XML-RPC usage is the same, except that the API key should be used as
    the password. More details are provided in the official documentation at [https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html#api-keys](https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html#api-keys).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 14 支持使用 API 密钥，这可能对于外部访问 Odoo API 是必需的。API 密钥可以在用户的**偏好**表单中设置，在**账户安全**选项卡中。XML-RPC
    的使用方式相同，只是应该使用 API 密钥作为密码。更多详细信息请参阅官方文档[https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html#api-keys](https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html#api-keys)。
- en: The user agent environment should be used to provide some metadata about the
    client. It's mandatory, and should at least be an empty dictionary, `{}`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 应使用用户代理环境来提供有关客户端的一些元数据。这是强制性的，至少应该是一个空字典 `{}`。
- en: If the authentication fails, a `False` value will be returned.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果身份验证失败，将返回 `False` 值。
- en: The `common` public endpoint is quite limited, so to gain access to the ORM
    API or another endpoint, the required authentication needs to be used.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`common` 公共端点相当有限，因此要访问 ORM API 或其他端点，需要使用所需的身份验证。'
- en: Using XML-RPC to run server methods
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 XML-RPC 运行服务器方法
- en: To access the Odoo models and their methods, the `xmlrpc/2/object` endpoint
    needs to be used. The requests to this endpoint require login details.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 Odoo 模型和它们的方法，需要使用 `xmlrpc/2/object` 端点。对该端点的请求需要登录详细信息。
- en: This endpoint exposes a generic `execute_kw` method and receives the model's
    name, the method to call, and a list containing the parameters to pass to that
    method.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此端点公开了一个通用的 `execute_kw` 方法，并接收模型名称、要调用的方法以及一个包含传递给该方法的参数列表。
- en: 'Here is an example of how `execute_kw` works. It calls the `search_count` method,
    which returns the number of records that match a domain filter:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个 `execute_kw` 的工作示例。它调用 `search_count` 方法，该方法返回与域过滤器匹配的记录数：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This code uses the `xmlrpc/2/endpoint` object to access the server API. The
    `execute_kw()` method is called using the following arguments:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码使用 `xmlrpc/2/endpoint` 对象来访问服务器API。使用以下参数调用 `execute_kw()` 方法：
- en: The name of the database to connect to
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要连接到的数据库名称
- en: The connection user ID
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接用户ID
- en: The user password (or API key)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户密码（或API密钥）
- en: The target model identifier
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标模型标识符
- en: The method to call
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要调用的方法
- en: A list of positional arguments
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置参数列表
- en: An optional dictionary with keyword arguments (not used in this example)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的包含关键字参数的字典（在此示例中未使用）
- en: 'All the model methods can be called, except for the ones prefixed with an underscore
    (`_`), which are considered private. Some methods might not work with the XML-RPC
    protocol if they return values that can''t be sent through the XML-RPC protocol.
    This is the case for `browse()`, which returns a recordset object. Trying to use
    `browse()` through XML-RPC returns a `TypeError: cannot marshal objects` error.
    Instead of `browse()`, XML-RPC calls should use `read` or `search_read`, which
    return data in a format the XML-RPC protocol can send to the client.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '可以调用所有模型方法，除了以下划线 (`_`) 开头的，这些被认为是私有的。某些方法可能不适用于XML-RPC协议，如果它们返回的值无法通过XML-RPC协议发送。这是
    `browse()` 的情况，它返回一个记录集对象。尝试通过XML-RPC使用 `browse()` 会返回 `TypeError: cannot marshal
    objects` 错误。而不是 `browse()`，XML-RPC调用应使用 `read` 或 `search_read`，它们返回的数据格式是XML-RPC协议可以发送到客户端的格式。'
- en: Now, let's see how `search` and `read` can be used to query Odoo data.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用 `search` 和 `read` 来查询Odoo数据。
- en: Using the search and read API methods
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用搜索和读取API方法
- en: The Odoo server-side code uses `browse` to query records. This can't be used
    by RPC clients because the recordset objects can't be transported through the
    RPC protocol. Instead, the `read` method should be used.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo服务器端代码使用 `browse` 来查询记录。RPC客户端不能使用它，因为记录集对象不能通过RPC协议传输。相反，应使用 `read` 方法。
- en: '`read([<ids>, [<fields>])` is similar to the `browse` method, but instead of
    a recordset, it returns a list of records. Each record is a dictionary that contains
    the fields that have been requested and their data.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`read([<ids>, [<fields>])` 与 `browse` 方法类似，但它返回的是记录列表，而不是记录集。每个记录都是一个字典，包含请求的字段及其数据。'
- en: 'Let''s see how `read()` can be used to retrieve data from Odoo:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 `read()` 方法从Odoo中检索数据：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding example calls the `read` method of the `res.users` model with
    two positional arguments – the record ID `2` (a list of IDs could have been used
    instead) and the list of fields to retrieve, `["login", "name", "company_id"]`,
    and no keyword arguments.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例调用 `res.users` 模型的 `read` 方法，带有两个位置参数——记录ID `2`（也可以使用ID列表）和要检索的字段列表 `["login",
    "name", "company_id"]`，以及没有关键字参数。
- en: The result is a list of dictionaries, where each dictionary is a record. The
    values of to-many fields follow a particular representation. They are a pair of
    values with the record ID and the record display name. For example, the `company_id`
    value that was returned previously was `[1, 'YourCompany']`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个字典列表，其中每个字典都是一个记录。多对多字段的值遵循特定的表示。它们是一对值，包含记录ID和记录显示名称。例如，之前返回的 `company_id`
    值是 `[1, 'YourCompany']`。
- en: The record IDs may not be known, and in that case, a search call is needed to
    find the record IDs that match a domain filter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 记录ID可能未知，在这种情况下，需要搜索调用以找到匹配域过滤器的记录ID。
- en: 'For example, if we wish to find the admin user, we can use `[("login", "=",
    "admin")]`. This RPC call is shown here:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想找到管理员用户，我们可以使用 `[("login", "=", "admin")]`。这个RPC调用如下所示：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The result is a list with only one element, `2`, which is the ID of the `admin`
    user.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个只有一个元素的列表，`2`，这是 `admin` 用户的ID。
- en: A frequent action would be to use combinations of the `search` and `read` methods
    to find the ID for the records meeting a domain filter and then retrieve the data
    for them. For a client app, this means two round trips to the server. To simplify
    this, the `search_read` method is available, which can perform both operations
    in a single step.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的操作是使用 `search` 和 `read` 方法的组合来查找符合域过滤器的记录ID，然后检索它们的数据。对于客户端应用程序来说，这意味着对服务器进行两次往返。为了简化这个过程，`search_read`
    方法可用，它可以在单步中执行这两个操作。
- en: 'Here is an example of `search_read` being used to find the admin user and return
    its name:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个使用 `search_read` 来查找管理员用户并返回其名称的示例：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `search_read` method is using two positional arguments: a list containing
    the domain filter, and a second list containing the fields to retrieve.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`search_read`方法使用了两个位置参数：一个包含域过滤器的列表，以及一个包含要检索的字段的第二个列表。'
- en: 'The arguments for `search_read` are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`search_read`的参数如下：'
- en: '`domain`: A list with a domain filter expression'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain`：一个包含域过滤表达式的列表'
- en: '`fields`: A list with the names of the fields to retrieve'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields`：一个包含要检索的字段名称的列表'
- en: '`offset`: The number of records to skip or use for record pagination'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offset`：要跳过的记录数或用于记录分页的记录数'
- en: '`limit`: The maximum number of records to return'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limit`：要返回的最大记录数'
- en: '`order`: A string to be used by the database''s `ORDER BY` clause'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order`：用于数据库的`ORDER BY`子句的字符串'
- en: The `fields` argument is optional, both for `read` and `search_read`. If it's
    not provided, all the model fields will be retrieved. But this may cause expensive
    function field computation and a large amount of data being retrieved that is
    probably not needed. So, the recommendation is to provide an explicit list of
    fields.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`fields`参数对于`read`和`search_read`都是可选的。如果没有提供，将检索所有模型字段。但这可能会导致昂贵的函数字段计算和检索大量可能不需要的数据。因此，建议提供显式的字段列表。'
- en: 'The `execute_kw` call can use both positional and keyword arguments. Here is
    what the same call looks like when you''re using keyword arguments instead of
    positional ones:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`execute_kw`调用可以使用位置参数和关键字参数。以下是在使用关键字参数而不是位置参数时，相同的调用看起来是什么样子：'
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`search_read` is the most used method to retrieve data, but there are more
    methods available to write data or trigger other business logic.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`search_read`是检索数据最常用的方法，但还有更多方法可用于写入数据或触发其他业务逻辑。'
- en: Calling other API methods
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用其他API方法
- en: All the other model methods are exposed through RPC, except for the ones prefixed
    with an underscore, which are considered private. This means that `create`, `write`,
    and `unlink` can be called to modify data on the server.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前缀为下划线的那些方法被认为是私有的之外，所有其他模型方法都通过RPC公开。这意味着`create`、`write`和`unlink`可以调用以在服务器上修改数据。
- en: 'Let''s look at an example. The following code creates a new partner record,
    modifies it, reads it to confirm the modification was written, and finally deletes
    it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个例子。以下代码创建了一个新的合作伙伴记录，修改了它，读取以确认修改已被写入，并最终删除它：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: One limitation of the XML-RPC protocol is that it doesn't support `None` values.
    There's an XML-RPC extension that supports `None` values, but whether this is
    available will depend on the particular XML-RPC library being used by the client
    app. Methods that don't return anything may not be usable through XML-RPC, since
    they are implicitly returning `None`. This is why it is good practice for methods
    to always return something, at a `True` value. Another alternative is to use JSON-RPC
    instead. The `OdooRPC` library supports this protocol, and it will be used later
    in this chapter, in the *Using the OdooRPC library* section.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: XML-RPC协议的一个限制是它不支持`None`值。有一个支持`None`值的XML-RPC扩展，但这是否可用将取决于客户端应用程序使用的特定XML-RPC库。不返回任何内容的方法可能无法通过XML-RPC使用，因为它们隐式返回`None`。这就是为什么方法始终返回某些内容，如`True`值是一个好习惯。另一个选择是使用JSON-RPC。`OdooRPC`库支持此协议，它将在本章的“使用OdooRPC库”部分中使用。
- en: The `Model` methods that are prefixed with an underscore are considered private
    and aren't exposed through XML-RPC.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 前缀为下划线的`Model`方法被认为是私有的，并且不会通过XML-RPC公开。
- en: Tip
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Often, client apps want to replicate manual user entry on an Odoo form. Calling
    the `create()` method might not be enough for this, because forms can automate
    some fields using `onchange` methods, which are triggered by the form's interaction,
    but not by `create()`. The solution is to create a custom method on the Odoo server,
    that uses `create()` and then runs the needed `onchange` methods.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，客户端应用程序希望在一个Odoo表单上复制手动用户输入。调用`create()`方法可能不足以完成这项任务，因为表单可以使用`onchange`方法来自动化一些字段，这些方法是由表单的交互触发的，而不是由`create()`触发的。解决方案是在Odoo服务器上创建一个自定义方法，该方法使用`create()`然后运行所需的`onchange`方法。
- en: It is worth repeating that the Odoo external API can be used by most programming
    languages. The official documentation provides examples for Ruby, PHP, and Java.
    This is available at [https://www.odoo.com/documentation/15.0/webservices/odoo.html](https://www.odoo.com/documentation/15.0/webservices/odoo.html).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 值得重复的是，Odoo外部API可以被大多数编程语言使用。官方文档提供了Ruby、PHP和Java的示例。这些信息可在[https://www.odoo.com/documentation/15.0/webservices/odoo.html](https://www.odoo.com/documentation/15.0/webservices/odoo.html)找到。
- en: So far, we've seen how to call Odoo methods using the XML-RPC protocol. Now,
    we can use this to build the book catalog client application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何使用XML-RPC协议调用Odoo方法。现在，我们可以使用这个来构建书籍目录客户端应用程序。
- en: Implementing the client app XML-RPC interface
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现客户端应用程序XML-RPC接口
- en: Let's start by implementing the Library book catalog client application.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从实现图书馆书籍目录客户端应用程序开始。
- en: 'This can be split into two files: one for the Odoo backend interface containing
    the server backend, `library_xmlrpc.py`, and another for the user interface, `library.py`.
    This will allow us to use alternative implementations for the backend interface.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以分成两个文件：一个包含服务器后端`library_xmlrpc.py`的Odoo后端接口，另一个是用户界面`library.py`。这将允许我们为后端接口使用替代实现。
- en: 'Starting with the Odoo backend component, a `LibraryAPI` class will be used
    to set up the connection with the Odoo server that supports methods that are needed
    to interact with Odoo. The methods to implement are as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从Odoo后端组件开始，将使用`LibraryAPI`类来设置与支持与Odoo交互所需方法的Odoo服务器的连接。要实现的方法如下：
- en: '`search_read(<title>)` to search for book data by title'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`search_read(<title>)`用于通过标题搜索书籍数据'
- en: '`create(<title>)` to create a book with a specific title'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create(<title>)`用于创建具有特定标题的书'
- en: '`write(<id>, <title>)` to update a book title using the book ID'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`write(<id>, <title>)`用于使用书籍ID更新书籍标题'
- en: '`unlink(<id>)` to delete a book using its ID'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unlink(<id>)`用于使用ID删除一本书'
- en: 'Choose a directory to host the application files in and create the `library_xmlrpc.py`
    file. Start by adding the class constructor, as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个目录来存放应用程序文件，并创建`library_xmlrpc.py`文件。首先添加类构造函数，如下所示：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This class stores all of the information needed to execute calls on the target
    model: the API XML-RPC reference, `uid`, the password, the database name, and
    the model name.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类存储了执行目标模型调用所需的所有信息：API XML-RPC引用、`uid`、密码、数据库名和模型名。
- en: 'The RPC calls to Odoo will all use the same `execute_kw` RPC method. A thin
    wrapper around it is added next, in the `_execute()` private method. This takes
    advantage of the object stored data to provide a smaller function signature, as
    shown in the following code block:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对Odoo的RPC调用都将使用相同的`execute_kw` RPC方法。在它周围添加了一个薄薄的包装器，在`_execute()`私有方法中。这利用了存储在对象中的数据，提供了一个更小的函数签名，如下面的代码块所示：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This `_execute()` private method can now be used for less verbose implementations
    of the higher-level methods.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`_execute()`私有方法现在可以用于更简洁的高层方法实现。
- en: 'The first public method is the `search_read()` method. It will accept an optional
    string that''s used to search book titles. If no title is given, all the records
    will be returned. This is the corresponding implementation:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个公共方法是`search_read()`方法。它将接受一个可选的字符串，用于搜索书籍标题。如果没有提供标题，将返回所有记录。这是相应的实现：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `create()` method will create a new book with the given title and return
    the ID of the created record:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`create()`方法将创建一个具有给定标题的新书，并返回创建记录的ID：'
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `write()` method will have the new title and book ID as arguments and will
    perform a write operation on that book:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`write()`方法将接受新的标题和书籍ID作为参数，并在此书籍上执行写操作：'
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, the `unlink()` method is used to delete a book, given the corresponding
    ID:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用`unlink()`方法根据相应的ID删除一本书：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We end the file with a small piece of test code that will be executed if we
    run the Python file, which can help test the methods that have been implemented,
    as shown here:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在文件末尾添加一小段测试代码，如果运行Python文件，将执行这些代码，有助于测试已实现的方法，如下所示：
- en: '[PRE16]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If we run this Python script, we should see the content of our library books
    printed out:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这个Python脚本，我们应该看到我们的图书馆书籍内容被打印出来：
- en: '[PRE17]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now that we have a simple wrapper around our Odoo backend, let's deal with the
    command-line user interface.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经围绕我们的Odoo后端有一个简单的包装器，让我们处理命令行用户界面。
- en: Implementing the client app user interface
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现客户端应用程序用户界面
- en: Our goal here was to learn how to write the interface between an external application
    and the Odoo server, and we did this in the previous section. But let's go the
    extra mile and build the user interface for this minimalistic client application.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是学习如何编写外部应用程序和Odoo服务器之间的接口，我们已经在上一节中做到了这一点。但让我们更进一步，为这个简约客户端应用程序构建用户界面。
- en: To keep this as simple as possible, we will use a simple command-line user interface
    and additional dependencies will be avoided. This leaves us with Python's built-in
    features to implement command-line applications and the `ArgumentParser` library.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尽可能保持简单，我们将使用简单的命令行用户界面，并避免使用额外的依赖。这使我们能够利用Python的内置功能来实现命令行应用程序，以及`ArgumentParser`库。
- en: 'Now, alongside the `library_xmlrpc.py` file, create a new `library.py` file.
    This will import Python''s command-line argument parser and then the `LibraryAPI`
    class, as shown in the following code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`library_xmlrpc.py`文件旁边，创建一个新的`library.py`文件。这个文件将导入Python的命令行参数解析器和`LibraryAPI`类，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we must describe the commands that the argument parser will expect. There
    are four commands:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须描述参数解析器期望的命令。有四个命令：
- en: '`list` to search for and list books'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`用于搜索和列出书籍'
- en: '`add` to add a book'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add`用于添加一本书'
- en: '`set` to update a book title'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set`用于更新书籍标题'
- en: '`del` to delete a book'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`del`用于删除一本书'
- en: 'The command-line parser code for implementing the preceding commands is shown
    here:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 实现上述命令的命令行解析器代码如下：
- en: '[PRE19]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `args` object represents the command-line options given by the user. `args.command`
    is the command being used, while `args.params` holds the additional parameters
    to use for the command, if they've been given any.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`args`对象代表用户给出的命令行选项。`args.command`是正在使用的命令，而`args.params`包含用于命令的附加参数，如果提供了任何参数。'
- en: If no or incorrect commands are given, the argument parser will handle that
    and will show the user what input is expected. A complete reference to `argparse`
    can be found in the official documentation at [https://docs.python.org/3/library/argparse.html](https://docs.python.org/3/library/argparse.html).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有给出或给出了错误的命令，参数解析器将处理这种情况，并将向用户显示预期的输入。`argparse`的完整参考可以在官方文档中找到，网址为[https://docs.python.org/3/library/argparse.html](https://docs.python.org/3/library/argparse.html)。
- en: 'The next step is to perform the action that corresponds to the `user` command.
    We will start by creating a `LibraryAPI` instance. This requires Odoo connection
    details that, in this simple implementation, will be hardcoded, as shown here:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是执行与`user`命令相对应的操作。我们将首先创建一个`LibraryAPI`实例。这需要Odoo连接细节，在这个简单的实现中，这些细节将被硬编码，如下所示：
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The first line sets some fixed parameters for the server instance and database
    to connect to. In this case, the connection is to a local Odoo server, listening
    on the `8069` default port, to a `library` database. To connect to a different
    server and database, these parameters should be adapted accordingly.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行设置了服务器实例和要连接的数据库的一些固定参数。在这种情况下，连接到的是本地Odoo服务器，监听默认的`8069`端口，连接到`library`数据库。要连接到不同的服务器和数据库，这些参数应相应地进行调整。
- en: 'New specific code to handle each command must be added. We will start with
    the `list` command, which returns a list of books:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 必须添加新的特定代码来处理每个命令。我们将从`list`命令开始，它返回书籍列表：
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `LibraryAPI.search_read()` method is being used in the preceding code to
    retrieve the list of book records. The returned list is then iterated to print
    out each element.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中使用了`LibraryAPI.search_read()`方法来检索书籍记录的列表。然后迭代返回的列表以打印出每个元素。
- en: 'Next is the `add` command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`add`命令：
- en: '[PRE22]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Since the hard work was already done in the `LibraryAPI` object, the implementation
    just needs to call the `create()` method and show the result to the end user.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在`LibraryAPI`对象中已经完成了艰苦的工作，实现只需要调用`create()`方法并向最终用户显示结果。
- en: 'The `set` command allows us to change the title of an existing book. It should
    have two parameters – the ID of the book and the new title:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`set`命令允许我们更改现有书籍的标题。它应该有两个参数——书籍的ID和新的标题：'
- en: '[PRE23]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, there is the implementation for the `del` command, to delete a book
    record. This is not very different from the previous commands:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是`del`命令的实现，用于删除书籍记录。这与之前的命令没有太大区别：
- en: '[PRE24]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The client application is done, and you can try it out using the commands of
    your choice. In particular, we should be able to run the example commands shown
    at the beginning of this chapter.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端应用程序已完成，您可以使用您选择的命令尝试它。特别是，我们应该能够运行本章开头所示的示例命令。
- en: Tip
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: On a Linux system, `library.py` can be made executable by running the `chmod
    +x library.py` command and adding `#!/usr/bin/env python3` to the first line of
    the file. After this, running `./library.py` in the command line should work.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 系统上，可以通过运行 `chmod +x library.py` 命令并将 `#!/usr/bin/env python3` 添加到文件的第一行来使
    `library.py` 可执行。之后，在命令行中运行 `./library.py` 应该可以工作。
- en: This is quite a basic application, and it is easy to think of a few ways to
    improve it. The point here was to build a minimum viable application using the
    Odoo RPC API.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当基础的应用程序，很容易想到几种改进它的方法。这里的目的是使用 Odoo RPC API 构建一个最小可行应用。
- en: Using the OdooRPC library
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OdooRPC 库
- en: Another relevant client library to be considered is `OdooRPC`. It is a complete
    client library that uses the JSON-RPC protocol instead of XML-RPC. The Odoo official
    web client uses JSON-RPC as well, although XML-RPC is still also supported.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的相关客户端库是 `OdooRPC`。它是一个完整的客户端库，使用 JSON-RPC 协议而不是 XML-RPC。尽管 XML-RPC 仍然得到支持，但
    Odoo 官方网页客户端也使用 JSON-RPC。
- en: The `OdooRPC` library is now maintained under the Odoo Community Association
    umbrella. The source code repository can be found at [https://github.com/OCA/odoorpc](https://github.com/OCA/odoorpc).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`OdooRPC` 库现在在 Odoo 社区协会的伞下维护。源代码仓库可以在 [https://github.com/OCA/odoorpc](https://github.com/OCA/odoorpc)
    找到。'
- en: 'The `OdooRPC` library can be installed from PyPI using the following command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令从 PyPI 安装 `OdooRPC` 库：
- en: '[PRE25]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `OdooRPC` library sets up a server connection when a new `odoorpc.ODOO`
    object is created. At this point, we should use the `ODOO.login()` method to create
    a user session. Just like on the server side, the session has an `env` attribute
    containing the session's environment, including the user ID, `uid`, and `context`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个新的 `odoorpc.ODOO` 对象时，`OdooRPC` 库会设置一个服务器连接。在这个时候，我们应该使用 `ODOO.login()`
    方法来创建一个用户会话。就像在服务器端一样，会话有一个 `env` 属性，包含会话的环境，包括用户 ID、`uid` 和 `context`。
- en: The `OdooRPC` library can be used to provide an alternate implementation for
    the `library_xmlrpc.py` interface with the server. It should provide the same
    features but be implemented using JSON-RPC instead of XML-RPC.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`OdooRPC` 库可以用来为服务器提供 `library_xmlrpc.py` 接口的替代实现。它应该提供相同的功能，但使用 JSON-RPC 而不是
    XML-RPC 来实现。'
- en: 'To achieve this, a `library_odoorpc.py` Python module will be created that
    provides a drop-in replacement for the `library_xmlrpc.py` module. To do this,
    create a new `library_odoorpc.py` file alongside it that contains the following
    code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，将创建一个名为 `library_odoorpc.py` 的 Python 模块，它为 `library_xmlrpc.py` 模块提供了一个即插即用的替代品。为此，创建一个名为
    `library_odoorpc.py` 的新文件，并将其放在旁边，该文件包含以下代码：
- en: '[PRE26]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `OdooRPC` library implements the `Model` and `Recordset` objects, which
    mimic the behavior of their server-side counterparts. The goal is for the code
    that's using this library to be similar to the code that's used on the Odoo server
    side. The methods that are used by the client make use of this and store a reference
    to the `library.book` model object in the `self.Model` attribute, which is provided
    by the OdooRPC `env["library.book"]` call.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`OdooRPC` 库实现了 `Model` 和 `Recordset` 对象，它们模仿了服务器端对应对象的行为。目标是使使用此库的代码与 Odoo
    服务器端使用的代码相似。客户端使用的方法利用这一点，并在 `self.Model` 属性中存储对 `library.book` 模型对象的引用，该属性由 OdooRPC
    的 `env["library.book"]` 调用提供。'
- en: The `_execute()` method is implemented here as well; it allows us to compare
    it to the plain XML-RPC version. The OdooRPC library has the `execute()` method
    to run arbitrary Odoo model methods.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`_execute()` 方法也在这里实现；它允许我们将其与普通的 XML-RPC 版本进行比较。OdooRPC 库有一个 `execute()` 方法来运行任意的
    Odoo 模型方法。'
- en: 'Next is the implementation for the `search_read()`, `create()`, `write()`,
    and `unlink()` client methods. In the same file, add these methods inside the
    `LibraryAPI()` class:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 `search_read()`、`create()`、`write()` 和 `unlink()` 客户端方法的实现。在同一个文件中，将这些方法添加到
    `LibraryAPI()` 类内部：
- en: '[PRE27]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Notice how this client code is similar to the Odoo server-side code.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这个客户端代码与 Odoo 服务器端代码的相似之处。
- en: This `LibraryAPI` object can be used as a drop-in replacement for `library_xmlrpc.py`. It
    can be used as the RPC connection layer by editing the `library.py` file and changing
    the `from library_xmlrpc import LibraryAPI` line to `from library_odoorpc import
    LibraryAPI`. Now, test drive the `library.py` client application; it should perform
    just like before!
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `LibraryAPI` 对象可以用作 `library_xmlrpc.py` 的即插即用替代品。可以通过编辑 `library.py` 文件并将
    `from library_xmlrpc import LibraryAPI` 行更改为 `from library_odoorpc import LibraryAPI`
    来用作 RPC 连接层。现在，测试驱动 `library.py` 客户端应用程序；它应该表现得和以前一样！
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The goal of this chapter was to learn how the external API works and what it
    is capable of. We started by exploring it with simple scripts using the Python
    XML-RPC client, though the external API can be used from any programming language.
    The official documentation provides code examples for Java, PHP, and Ruby.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是了解外部 API 的工作原理及其功能。我们首先通过使用 Python XML-RPC 客户端编写简单脚本来探索它，尽管外部 API 可以从任何编程语言中使用。官方文档提供了
    Java、PHP 和 Ruby 的代码示例。
- en: Then, we learned how to use XML-RPC calls to search for and read data, and then
    how to call any other method. We can, for example, create, update, and delete
    records.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了如何使用 XML-RPC 调用来搜索和读取数据，以及如何调用任何其他方法。例如，我们可以创建、更新和删除记录。
- en: Next, we introduced the OdooRPC library. It provides a layer on top of the RPC
    base library (XML-RPC or JSON-RPC) to provide a local API that's similar to the
    API that can be found on the server side. This lowers the learning curve, reduces
    programming mistakes, and makes it easier to copy code between server and client
    code.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了 OdooRPC 库。它提供了一个在 RPC 基础库（XML-RPC 或 JSON-RPC）之上的层，以提供类似于服务器端可找到的 API
    的本地 API。这降低了学习曲线，减少了编程错误，并使得在服务器端和客户端代码之间复制代码变得更加容易。
- en: With this, we have finished the chapters dedicated to the programming API and
    business logic. Now, it's time to look at views and the user interface. In the
    next chapter, we will look at backend views in more detail and the user experience
    that can be provided out of the box by the web client.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，我们已经完成了关于编程 API 和业务逻辑的章节。现在，是时候看看视图和用户界面了。在下一章中，我们将更详细地探讨后端视图以及网络客户端可以提供的开箱即用的用户体验。
- en: Further reading
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following additional reference material may complement the topics described
    in this chapter:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下附加参考资料可能有助于补充本章中描述的主题：
- en: 'The official documentation on Odoo web services, including code examples for
    programming languages other than Python: [https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html](https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Odoo 网络服务的官方文档，包括除 Python 之外编程语言的代码示例：[https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html](https://www.odoo.com/documentation/15.0/developer/misc/api/odoo.html)
- en: 'The OdooRPC documentation: [https://pythonhosted.org/OdooRPC](https://pythonhosted.org/OdooRPC)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OdooRPC 文档：[https://pythonhosted.org/OdooRPC](https://pythonhosted.org/OdooRPC)
