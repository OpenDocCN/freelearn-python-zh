- en: Chapter 4. Real-time Physical Computing Systems Using BeagleBone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will be focusing on building a real-time physical computing
    system using BeagleBone board. We will be interfacing an LM35 temperature sensor
    module with BeagleBone Black in this chapter in order to understand how a sensor
    can be interfaced with BeagleBone board to make the system interact with the physical
    world. We will be getting ambient temperature as analog input readings from the
    physical world around the sensor, and coding the BeagleBone board to make the
    LEDs connected to the BeagleBone board to light it up in different colors, depending
    on the temperature levels measured by the sensor. So, by end of this chapter,
    you will have built an interactive physical computing system using BeagleBone
    board where it outputs LED indications based on the temperature measured. The
    contents of the chapter are divided into the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temperature sensor – LM35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interfacing the temperature sensor to BeagleBone board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Simple project: Bicolor LED indicator that changes its color depending on the
    room temperature measured by temperature sensor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This topic will cover what parts you need to get started with this chapter.
    These can be purchased from your favorite electrical hobby store, or can simply
    be ordered online.
  prefs: []
  type: TYPE_NORMAL
- en: Materials needed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1x BeagleBone Black
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x microSD card with the latest version of Debian flashed on it to boot the
    BeagleBone board from the microSD card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x 5V DC, 2A power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x Ethernet cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x LM35 temperature sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x two-legged bicolor LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x 220 ohm resistor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x BreadBoard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A few male-to-male jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x multi-meter (optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temperature sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A temperature sensor is just an electronic chip that senses the ambient temperature
    around it and gives out varying voltage across the output terminal of the sensor.
    By using this, we can calculate the temperature that''s being sensed. There are
    many different types of sensors available in the market, but we will be using
    the one that is the most easily available, and most commonly used by the hobbyist.
    This is the LM35 temperature sensor module, which is an analog output sensor,
    where the voltage can be directly converted to temperature values, based on the
    formula given by the manufacturer of the sensor, as mentioned in the datasheet
    of the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensor](img/4602_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How do LM35 sensors work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basic principle behind the LM35 temperature sensor is that it converts the
    ambient temperature around the sensor to analog voltage proportionally.
  prefs: []
  type: TYPE_NORMAL
- en: In the following picture, you can see the pin terminals of the **LM35** temperature
    sensor where one terminal is the input, which gets supply input voltage, and the
    others are the output and the ground.
  prefs: []
  type: TYPE_NORMAL
- en: '![How do LM35 sensors work?](img/4602_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, once you connect the power supply input to the temperature sensor with the
    ground, the analog voltage output that can be measured across the analog voltage
    out terminal, with respect to the ground, is as shown in the graph above.
  prefs: []
  type: TYPE_NORMAL
- en: For example, say the voltage measured across the output terminal and ground
    is 1 Volt, the ambient temperature in degrees Celsius is 100, which we can infer
    using the curve shown in the graph above.
  prefs: []
  type: TYPE_NORMAL
- en: And, from the datasheet of the LM35, we can infer that every 10mV is proportional
    to 1 degree Celsius. So we can use the formula given below to calculate the temperature
    in degree Celsius, if we know the analog output voltage in mV.
  prefs: []
  type: TYPE_NORMAL
- en: '*Temp in °C = (Vout in mV)°/ 10*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To validate the temperature sensing and to test whether the sensor is working
    properly before moving on to the next topic of interfacing the sensor with BeagleBone
    board, you can use a multi-meter to measure the voltage across the output terminal
    while providing an external power supply to the LM35 temperature with common ground
    pin. Depending on the voltage measured, you can calculate the temperature using
    the previous formula. You can put hot or cold objects near to the sensor or hold
    them over it to see the voltage difference.
  prefs: []
  type: TYPE_NORMAL
- en: Temperature sensing using a LM35 sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how an LM35 temperature sensor works, let's go ahead and look
    at the topic of measuring temperature with it by hooking it up to the BeagleBone
    board.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, take three berg wires and connect the LM35 temperature sensor
    to the BeagleBone board, as per the circuit diagram shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then we will turn on the BeagleBone board, and then login into the Linux Shell
    to start coding it. We will access the `WorkSpace` folder where we are saving
    all the Python scripts that we've already created in the previous chapter. By
    now you should be familiar with how to navigate to the `WorkSpace` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, type command `cd WorkSpace`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you are in the `WorkSpace` directory, and before writing the script to
    read temperature data, lets test it out via the Python console, which you should
    also be familiar with by now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the command to start the Python interactive programming shell, `sudo python`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we are inside the Python interactive shell, let us import the Adafruit
    GPIO library to read ADC inputs on the BeagleBone board, by typing `import Adafruit_BBIO.ADC
    as ADC`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we need to initialize the ADC, by typing the following command: `ADC.setup()`'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To read the ADC reading on port `P9_40`, to which we have connected the output
    of the temperature sensor, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The ADC ports available on the BeagleBone board are 12 bits, which equals *2¹²
    = 4096* units maximum, and the maximum voltage that can be given to these analog
    pins is 1.8 V. This means that the voltage input of these pins, varying from 0
    to 1.8V, is proportional to 0 to 4096 ADC units, but in Python the Adafruit library
    gives us a reading between 0 to 1, which is proportional to 0 to 1.8V. The output
    of the ADC reading of the port `P9_40` using ADC read function is shown as follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So you can see that the ADC reading on port `P9_40` is `0.19445`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s go ahead and save it on a variable to calculate how many volts it
    is. Let''s create a variable `reading` and store the measured ADC reading as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, let's go ahead and convert the ADC reading into millivolts (mV). We know
    that the ADC is capable of reading 0 to 1.8V which is proportional to 0 to 1 unit
    of the ADC reading in Python, in other words 1.8 V = 1800 mV.
  prefs: []
  type: TYPE_NORMAL
- en: '*Millivolts measured = (ADC Reading) * 1800*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Voltage Measured = (ADC Reading) * 1.8*'
  prefs: []
  type: TYPE_NORMAL
- en: 'That is to say, in our case, on the Python console you can create a variable
    named `millivolts` which will hold the voltage measured across the sensor output
    pin, with respect to the ground pin, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the preceding screenshot, you will get the value of the voltage
    across the sensor output voltage pin in millivolts. Now, we can go ahead and convert
    the millivolts measured to temperature into degrees Celsius using the formula
    we obtained using the information from the datasheet at the beginning of this
    topic. This is shown in the following screenshot by creating a variable `temp_c`
    that holds the temperature in degrees Celsius:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_11.jpg)![Temperature
    sensing using a LM35 sensor](img/4602_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we print the `temp_c` value we will get the output as shown in the preceding
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go ahead and write a Python program that will print the temperature
    sensor values every second.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the Python script file, `sudo nano TestLM35.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Type in the code as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have typed in the code, you can go ahead and save it using the *Ctrl*
    + *X* command.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the program you should see the output as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, in the preceding screenshot you can see that the ambient temperature around
    the sensor in degrees Celsius is printed every second. If you have come this far
    successfully, then you have successfully interfaced the LM35 temperature sensor
    with the BeagleBone board and Python. As a further step in this interfacing and
    testing of the LM35 with BeagleBone board, let's see whether or not the LM35 interfaced
    with the BeagleBone board is detecting any rise in the temperature by placing
    a lit matchstick near the sensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Place a lit matchstick near to the sensor as shown in the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that the temperature readings rise up when you bring the lit matchstick
    near to the temperature sensor, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you remove the matchstick from the sensor, it comes back down again as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, now that we know how to interface the LM35 temperature sensor with the BeagleBone
    board and read the temperature sensor readings, in the next topic of this chapter,
    which is our main project, let's build a real-time physical computing system using
    Python programming, by adding a bicolor LED to the BeagleBone board.
  prefs: []
  type: TYPE_NORMAL
- en: 'Intermediate project: LED color change based on measured temperature:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the circuit as shown in the following picture:![Temperature sensing
    using a LM35 sensor](img/4602_04_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write down the Python script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we already know how to interface a temperature sensor with the BeagleBone
    board and how to switch a GPIO on and off, to light an LED using Python, now we
    are going to combine both these previous experiments. Let''s write a Python script
    to make the GPIO high or low based on the temperature value measured by the temperature
    sensor. Write down the code by changing the `TestLM35.py` file, as shown in the
    following screenshot, and save it with the different name `LM35nLED.py`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, when you run the code with the command, `sudo python LM35nLED.py` you should
    see the following:![Temperature sensing using a LM35 sensor](img/4602_04_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your setup should be like the one shown in the following screenshot in a room
    with an ambient temperature of less than 50 degrees Celsius:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The output for the Python program when you execute it will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you light a matchstick and hold it in front of the sensor, the output
    will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And the LED will go to red as shown in the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you remove the matchstick from the sensor, it will change back to green.
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have a system that takes input (ambient temperature around the sensor)
    from the physical world, and based on that input changes something in the environment
    such as the LED color, with the information of the temperature getting printed
    out on the Linux shell. This brings us to the end of this chapter where we have
    built a basic physical computing system using BeagleBone Black.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have learnt about temperature sensors and how they can be
    interfaced with the BeagleBone board to obtain temperature measurements by connecting
    the sensor to analog input reading pins on the BeagleBone board. Then we wrote
    a code to make decisions based on the input obtained from the LM35 temperature
    sensor where the decision was to turn on a particular GPIO pin that is connected
    to a bicolor LED in order to change the color of the LED based on the ambient
    temperature around the sensor. So, in this way we have a real-time physical computing
    system up and running on BeagleBone Black using Python to get started. But this
    is just local computing where decisions are made based on the program running
    on the local system and all the data is in the local system itself.
  prefs: []
  type: TYPE_NORMAL
- en: Now in the next chapter, we will go ahead and build a more advanced real-time
    physical computing system, that is connected to the Internet, and on which the
    sensor data is sent to cloud server from the BeagleBone board that is connected
    to the Internet.
  prefs: []
  type: TYPE_NORMAL
