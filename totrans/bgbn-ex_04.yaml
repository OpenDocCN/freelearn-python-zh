- en: Chapter 4. Real-time Physical Computing Systems Using BeagleBone
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：使用BeagleBone的实时物理计算系统
- en: 'In this chapter we will be focusing on building a real-time physical computing
    system using BeagleBone board. We will be interfacing an LM35 temperature sensor
    module with BeagleBone Black in this chapter in order to understand how a sensor
    can be interfaced with BeagleBone board to make the system interact with the physical
    world. We will be getting ambient temperature as analog input readings from the
    physical world around the sensor, and coding the BeagleBone board to make the
    LEDs connected to the BeagleBone board to light it up in different colors, depending
    on the temperature levels measured by the sensor. So, by end of this chapter,
    you will have built an interactive physical computing system using BeagleBone
    board where it outputs LED indications based on the temperature measured. The
    contents of the chapter are divided into the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于使用BeagleBone板构建一个实时物理计算系统。在本章中，我们将把LM35温度传感器模块与BeagleBone Black连接起来，以便了解如何将传感器与BeagleBone板连接，使系统能够与物理世界交互。我们将从传感器周围的物理世界获取环境温度作为模拟输入读数，并编写BeagleBone板的代码，使连接到BeagleBone板的LED根据传感器测量的温度以不同的颜色发光。因此，到本章结束时，你将构建一个使用BeagleBone板的交互式物理计算系统，该系统能根据测量的温度输出LED指示。本章内容分为以下主题：
- en: Prerequisites
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前提条件
- en: Temperature sensor – LM35
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度传感器 – LM35
- en: Interfacing the temperature sensor to BeagleBone board
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将温度传感器连接到BeagleBone板
- en: 'Simple project: Bicolor LED indicator that changes its color depending on the
    room temperature measured by temperature sensor'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单项目：根据温度传感器测量的室内温度改变颜色的双色LED指示器
- en: Prerequisites
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: This topic will cover what parts you need to get started with this chapter.
    These can be purchased from your favorite electrical hobby store, or can simply
    be ordered online.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本主题将涵盖您开始本章所需的部分。这些可以从您最喜欢的电子业余爱好商店购买，或者可以直接在线订购。
- en: Materials needed
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要的材料
- en: 1x BeagleBone Black
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个BeagleBone Black
- en: 1x microSD card with the latest version of Debian flashed on it to boot the
    BeagleBone board from the microSD card
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1张带有最新版Debian操作系统的microSD卡，用于从microSD卡启动BeagleBone板
- en: 1x 5V DC, 2A power supply
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个5V DC，2A电源
- en: 1x Ethernet cable
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1条以太网线
- en: 1x LM35 temperature sensor
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个LM35温度传感器
- en: 1x two-legged bicolor LED
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个双脚双色LED
- en: 1x 220 ohm resistor
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个220欧姆电阻
- en: 1x BreadBoard
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1块面包板
- en: A few male-to-male jumper wires
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些公对公跳线
- en: 1x multi-meter (optional)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个多用电表（可选）
- en: Temperature sensor
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 温度传感器
- en: 'A temperature sensor is just an electronic chip that senses the ambient temperature
    around it and gives out varying voltage across the output terminal of the sensor.
    By using this, we can calculate the temperature that''s being sensed. There are
    many different types of sensors available in the market, but we will be using
    the one that is the most easily available, and most commonly used by the hobbyist.
    This is the LM35 temperature sensor module, which is an analog output sensor,
    where the voltage can be directly converted to temperature values, based on the
    formula given by the manufacturer of the sensor, as mentioned in the datasheet
    of the sensor:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 温度传感器只是一个感应周围环境温度并给出传感器输出端电压变化的电子芯片。通过使用它，我们可以计算出被感应的温度。市场上有很多不同类型的传感器，但我们将使用最易获得的，并且是最受业余爱好者欢迎的传感器。这是LM35温度传感器模块，它是一个模拟输出传感器，电压可以直接转换为温度值，根据传感器的制造商提供的公式，如传感器数据表所述：
- en: '![Temperature sensor](img/4602_04_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![温度传感器](img/4602_04_01.jpg)'
- en: How do LM35 sensors work?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LM35传感器如何工作？
- en: The basic principle behind the LM35 temperature sensor is that it converts the
    ambient temperature around the sensor to analog voltage proportionally.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: LM35温度传感器背后的基本原理是它将传感器周围的周围环境温度按比例转换为模拟电压。
- en: In the following picture, you can see the pin terminals of the **LM35** temperature
    sensor where one terminal is the input, which gets supply input voltage, and the
    others are the output and the ground.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图片中，您可以看到LM35温度传感器的引脚终端，其中一个终端是输入，它接收供电输入电压，其余的是输出和地。
- en: '![How do LM35 sensors work?](img/4602_04_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![LM35传感器如何工作？](img/4602_04_02.jpg)'
- en: So, once you connect the power supply input to the temperature sensor with the
    ground, the analog voltage output that can be measured across the analog voltage
    out terminal, with respect to the ground, is as shown in the graph above.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: For example, say the voltage measured across the output terminal and ground
    is 1 Volt, the ambient temperature in degrees Celsius is 100, which we can infer
    using the curve shown in the graph above.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: And, from the datasheet of the LM35, we can infer that every 10mV is proportional
    to 1 degree Celsius. So we can use the formula given below to calculate the temperature
    in degree Celsius, if we know the analog output voltage in mV.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '*Temp in °C = (Vout in mV)°/ 10*'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To validate the temperature sensing and to test whether the sensor is working
    properly before moving on to the next topic of interfacing the sensor with BeagleBone
    board, you can use a multi-meter to measure the voltage across the output terminal
    while providing an external power supply to the LM35 temperature with common ground
    pin. Depending on the voltage measured, you can calculate the temperature using
    the previous formula. You can put hot or cold objects near to the sensor or hold
    them over it to see the voltage difference.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Temperature sensing using a LM35 sensor
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how an LM35 temperature sensor works, let's go ahead and look
    at the topic of measuring temperature with it by hooking it up to the BeagleBone
    board.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, take three berg wires and connect the LM35 temperature sensor
    to the BeagleBone board, as per the circuit diagram shown in the following image:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: Then we will turn on the BeagleBone board, and then login into the Linux Shell
    to start coding it. We will access the `WorkSpace` folder where we are saving
    all the Python scripts that we've already created in the previous chapter. By
    now you should be familiar with how to navigate to the `WorkSpace` directory.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, type command `cd WorkSpace`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: Once you are in the `WorkSpace` directory, and before writing the script to
    read temperature data, lets test it out via the Python console, which you should
    also be familiar with by now.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the command to start the Python interactive programming shell, `sudo python`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_05.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: 'Once we are inside the Python interactive shell, let us import the Adafruit
    GPIO library to read ADC inputs on the BeagleBone board, by typing `import Adafruit_BBIO.ADC
    as ADC`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_06.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: 'Next we need to initialize the ADC, by typing the following command: `ADC.setup()`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_07.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: 'To read the ADC reading on port `P9_40`, to which we have connected the output
    of the temperature sensor, use the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The ADC ports available on the BeagleBone board are 12 bits, which equals *2¹²
    = 4096* units maximum, and the maximum voltage that can be given to these analog
    pins is 1.8 V. This means that the voltage input of these pins, varying from 0
    to 1.8V, is proportional to 0 to 4096 ADC units, but in Python the Adafruit library
    gives us a reading between 0 to 1, which is proportional to 0 to 1.8V. The output
    of the ADC reading of the port `P9_40` using ADC read function is shown as follow:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_08.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: So you can see that the ADC reading on port `P9_40` is `0.19445`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s go ahead and save it on a variable to calculate how many volts it
    is. Let''s create a variable `reading` and store the measured ADC reading as shown
    in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_09.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Then, let's go ahead and convert the ADC reading into millivolts (mV). We know
    that the ADC is capable of reading 0 to 1.8V which is proportional to 0 to 1 unit
    of the ADC reading in Python, in other words 1.8 V = 1800 mV.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '*Millivolts measured = (ADC Reading) * 1800*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '*Voltage Measured = (ADC Reading) * 1.8*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'That is to say, in our case, on the Python console you can create a variable
    named `millivolts` which will hold the voltage measured across the sensor output
    pin, with respect to the ground pin, as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_10.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the preceding screenshot, you will get the value of the voltage
    across the sensor output voltage pin in millivolts. Now, we can go ahead and convert
    the millivolts measured to temperature into degrees Celsius using the formula
    we obtained using the information from the datasheet at the beginning of this
    topic. This is shown in the following screenshot by creating a variable `temp_c`
    that holds the temperature in degrees Celsius:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_11.jpg)![Temperature
    sensing using a LM35 sensor](img/4602_04_12.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: If we print the `temp_c` value we will get the output as shown in the preceding
    output.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go ahead and write a Python program that will print the temperature
    sensor values every second.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the Python script file, `sudo nano TestLM35.py`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_13.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'Type in the code as shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_14.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: Once you have typed in the code, you can go ahead and save it using the *Ctrl*
    + *X* command.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the program you should see the output as shown in the following
    screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_15.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: So, in the preceding screenshot you can see that the ambient temperature around
    the sensor in degrees Celsius is printed every second. If you have come this far
    successfully, then you have successfully interfaced the LM35 temperature sensor
    with the BeagleBone board and Python. As a further step in this interfacing and
    testing of the LM35 with BeagleBone board, let's see whether or not the LM35 interfaced
    with the BeagleBone board is detecting any rise in the temperature by placing
    a lit matchstick near the sensor.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'Place a lit matchstick near to the sensor as shown in the following picture:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_16.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: 'You can see that the temperature readings rise up when you bring the lit matchstick
    near to the temperature sensor, as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_17.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: 'When you remove the matchstick from the sensor, it comes back down again as
    shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_18.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: So, now that we know how to interface the LM35 temperature sensor with the BeagleBone
    board and read the temperature sensor readings, in the next topic of this chapter,
    which is our main project, let's build a real-time physical computing system using
    Python programming, by adding a bicolor LED to the BeagleBone board.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Intermediate project: LED color change based on measured temperature:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Connect the circuit as shown in the following picture:![Temperature sensing
    using a LM35 sensor](img/4602_04_19.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write down the Python script.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we already know how to interface a temperature sensor with the BeagleBone
    board and how to switch a GPIO on and off, to light an LED using Python, now we
    are going to combine both these previous experiments. Let''s write a Python script
    to make the GPIO high or low based on the temperature value measured by the temperature
    sensor. Write down the code by changing the `TestLM35.py` file, as shown in the
    following screenshot, and save it with the different name `LM35nLED.py`:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_20.jpg)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, when you run the code with the command, `sudo python LM35nLED.py` you should
    see the following:![Temperature sensing using a LM35 sensor](img/4602_04_21.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your setup should be like the one shown in the following screenshot in a room
    with an ambient temperature of less than 50 degrees Celsius:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_22.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: 'The output for the Python program when you execute it will be as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_23.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'When you light a matchstick and hold it in front of the sensor, the output
    will be as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_24.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: 'And the LED will go to red as shown in the following picture:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_25.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: When you remove the matchstick from the sensor, it will change back to green.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![Temperature sensing using a LM35 sensor](img/4602_04_26.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![使用LM35传感器进行温度传感](img/4602_04_26.jpg)'
- en: Now we have a system that takes input (ambient temperature around the sensor)
    from the physical world, and based on that input changes something in the environment
    such as the LED color, with the information of the temperature getting printed
    out on the Linux shell. This brings us to the end of this chapter where we have
    built a basic physical computing system using BeagleBone Black.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个系统，它从物理世界获取输入（传感器周围的周围温度），并根据该输入在环境中改变某些东西，例如LED颜色，温度信息打印在Linux shell上。这使我们到达了这一章的结尾，我们在这里使用BeagleBone
    Black构建了一个基本的物理计算系统。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have learnt about temperature sensors and how they can be
    interfaced with the BeagleBone board to obtain temperature measurements by connecting
    the sensor to analog input reading pins on the BeagleBone board. Then we wrote
    a code to make decisions based on the input obtained from the LM35 temperature
    sensor where the decision was to turn on a particular GPIO pin that is connected
    to a bicolor LED in order to change the color of the LED based on the ambient
    temperature around the sensor. So, in this way we have a real-time physical computing
    system up and running on BeagleBone Black using Python to get started. But this
    is just local computing where decisions are made based on the program running
    on the local system and all the data is in the local system itself.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于温度传感器以及它们如何与BeagleBone板连接以通过将传感器连接到BeagleBone板的模拟输入读取引脚来获取温度测量值。然后我们编写了一个代码，根据从LM35温度传感器获得的输入做出决策，决策是打开一个连接到双色LED的特定GPIO引脚，以便根据传感器周围的周围温度改变LED的颜色。因此，这样我们就在BeagleBone
    Black上使用Python启动了一个实时物理计算系统。但这只是本地计算，决策是基于在本地系统上运行的程序做出的，所有数据都在本地系统中。
- en: Now in the next chapter, we will go ahead and build a more advanced real-time
    physical computing system, that is connected to the Internet, and on which the
    sensor data is sent to cloud server from the BeagleBone board that is connected
    to the Internet.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下一章中，我们将继续构建一个更高级的实时物理计算系统，该系统连接到互联网，传感器数据从连接到互联网的BeagleBone板发送到云服务器。
