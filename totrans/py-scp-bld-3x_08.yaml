- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animation Modifiers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animation curves, or F-Curves, can be altered by modifiers without having their
    keyframes changed. This way, cinematic or motion effects can replace the initial
    curve completely or add to its original value.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The output of a modifier can be the input of another modifier, which, when combined,
    allows us to build complex results on top of simple animations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Python scripts can be used to help automate this and streamline the workflow.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Changing a parameter affects the modifier’s result, while its overall **Influence**
    can be reduced using the slider in the modifier interface.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to add modifiers to animation F-Curves with
    your scripts and how to change their parameters.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Understanding F-Curve Modifiers in the Blender UI
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding F-Curve Modifiers via Python
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using F-Curve Modifiers in our add-ons
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use Blender and Visual Studio Code in this chapter. The examples created
    in this chapter can be found at [https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch8](https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch8).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Using F-Curve Modifiers
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modifiers for animation curves, called **F-Curve Modifiers** or **F-Modifiers**,
    add non-destructive changes to animations while preserving their original data.
    We examined similar functionality in **Object Constraints** in [*Chapter 4*](B18375_04.xhtml#_idTextAnchor075),
    where we learned how to affect an object’s position without changing the values
    stored in its channels.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Like object constraints, F-Modifiers are exposed to Python scripts through a
    collection property.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Before we delve into how F-Modifiers are scripted, we will have a look at how
    to create them in the **Graph Editor**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Adding F-Curve Modifiers in the Graph Editor
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now look at how to add variation to an animated object using F-Curve
    Modifiers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will use the `ani_loop.blend` scene, from the accompanying
    `PythonScriptingBlender/ch8/_scenes_` folder, but you can use any scene.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'The animation along the *8*-shaped path in `ani_loop.blend` wasn’t created
    by hand: it was generated using the **Vert Runner** add-on developed in [*Chapter
    7*](B18375_07.xhtml#_idTextAnchor171).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add some variation to the path of an animated object by creating an
    F-Curve Modifier in **Graph Editor**:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Select an animated object.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change one of the UI areas to **Graph Editor**. A good place is the left Viewport
    in the **Animation Workspace**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Graph Editor** left panel, select the **X** **Location** channel.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *N* to display the property tabs. Make sure that the **Graph Editor**
    has focus and is large enough, or the tabs will not show up.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right panel of the **Graph Editor**, select the **Modifiers** tab.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Modifiers** tab, select a modifier from the **Add Modifier** menu.
    In this example, we will use the **Stepped** **Interpolation** modifier.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.1: Adding curve modifiers in the Graph Editor](img/Figure_8.01_B18375.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1：在图编辑器中添加曲线修饰符](img/Figure_8.01_B18375.jpg)'
- en: 'Figure 8.1: Adding curve modifiers in the Graph Editor'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1：在图编辑器中添加曲线修饰符
- en: The animation curve for **Z Location** changes to a stepped graph. If we play
    the animation now, we will see the object proceeding in little jumps rather than
    smoothly, as before.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**Z 位置**的动画曲线变为阶梯图。如果我们现在播放动画，我们会看到物体以小跳跃的方式前进，而不是像之前那样平滑。'
- en: '![Figure 8.2: Stepped modifier applied on a smooth curve](img/Figure_8.02_B18375.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2：在平滑曲线上应用了阶梯修饰符](img/Figure_8.02_B18375.jpg)'
- en: 'Figure 8.2: Stepped modifier applied on a smooth curve'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：在平滑曲线上应用了阶梯修饰符
- en: 'The Blender manual describes modifiers in detail on the **F-Curve** **Modifiers**
    page:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 手册在 **F 曲线** **修饰符** 页面上详细描述了修饰符：
- en: '[docs.blender.org/manual/en/3.2/editors/graph_editor/fcurves/modifiers.xhtml](https://docs.blender.org/manual/en/3.2/editors/graph_editor/fcurves/modifiers.xhtml%0D)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[docs.blender.org/manual/en/3.2/editors/graph_editor/fcurves/modifiers.xhtml](https://docs.blender.org/manual/en/3.2/editors/graph_editor/fcurves/modifiers.xhtml%0D)'
- en: 'There are seven available types. The first two generate curves based on mathematical
    formulas:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有七种可用的类型。前两种基于数学公式生成曲线：
- en: '**Generator**: Expressions for lines, parabolas, and curves of higher degrees'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成器**：用于直线、抛物线和更高次曲线的表达式'
- en: '**Built-in**: Trigonometric and logarithmic formulas'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内置**：三角函数和对数公式'
- en: 'The other five cover some basic animation tasks:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其他五个涵盖了基本动画任务：
- en: '**Envelope**: Control points for editing the overall shape of the curve'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信封**：控制点用于编辑曲线的整体形状'
- en: '**Cyclic**: To repeat animations in loops after their last frame'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环**：在动画的最后帧之后循环重复动画'
- en: '**Noise**: Adds random jitter to the animation'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**噪声**：向动画添加随机抖动'
- en: '**Limits**: Limits the animation values to a range'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制**：将动画值限制在一个范围内'
- en: '**Stepped Interpolation**: Converts smooth animation to jerky motion'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶梯插值**：将平滑动画转换为颠簸运动'
- en: Like constraints, modifiers of an F-Curve are exposed to Python as a collection.
    We can use the `fcurve.modifiers.new` method to add new modifiers via scripting.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与约束一样，F 曲线的修饰符作为集合暴露给 Python。我们可以使用 `fcurve.modifiers.new` 方法通过脚本添加新的修饰符。
- en: Adding F-Curve Modifiers in Python
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Python 中添加 F 曲线修饰符
- en: The `fcurve.modifiers.new(type)` method creates a new modifier according to
    the type provided in the argument. It returns the new modifier.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`fcurve.modifiers.new(type)` 方法根据提供的参数类型创建一个新的修饰符。它返回新的修饰符。'
- en: 'With the exception of `FNGENERATOR` and `STEPPED`, modifiers of a given type
    are created using the type name in uppercase letters:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `FNGENERATOR` 和 `STEPPED` 之外，给定类型的修饰符使用大写字母的类型名称创建：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, to add a `''STEPPED''` modifier to the `2`), we use the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要向 `2` 添加一个 `'STEPPED'` 修饰符，我们使用以下方法：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Likewise, a modifier can be removed using the `fcurve.modifiers.remove` method.
    This time, the Python instance of the modifier must be used as an argument:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，可以使用 `fcurve.modifiers.remove` 方法移除修饰符。这次，必须使用修饰符的 Python 实例作为参数：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we have learned where F-Modifiers can be found, how they work, and
    how to add more of them, both in the user interface and the Python Console, we
    can use this knowledge in our scripts.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 F 修饰符的位置、工作原理以及如何在用户界面和 Python 控制台中添加更多修饰符，我们可以在脚本中使用这些知识。
- en: The add-on we will write in the next section allows us to create shaky animations
    using F-Modifiers.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中编写的插件允许我们使用 F 修饰符创建摇晃动画。
- en: Writing the Shaker add-on
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 Shaker 插件
- en: The **Shaker** add-on creates a shaky effect on the active object by adding
    noise modifiers to its animation curves.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**Shaker** 插件通过向动画曲线添加噪声修饰符，在活动物体上创建摇晃效果。'
- en: There are cases when we want to add some shaking to a motion. For instance,
    directors often use a *camera shake* to suggest an object being bumped or hit.
    Another use case is the bumpy motion of a vehicle, or hairs and feathers in a
    windy environment. The Python script we are going to write will contain an operator
    and a menu function for quick execution.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我们想在运动中添加一些摇晃。例如，导演经常使用 *相机摇晃* 来暗示物体被撞击或击中。另一个用例是车辆在崎岖路面上的运动，或者在风中飘动的毛发和羽毛。我们将编写的
    Python 脚本将包含一个操作符和一个菜单函数，以便快速执行。
- en: Setting up the environment
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'We first create a Python script for our add-on:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为我们的插件创建一个 Python 脚本：
- en: Create the `PythonScriptingBlender/ch8/addons` folder. We can use the file manager
    or the **File** tab of our code editor, such as **VS Code**.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `PythonScriptingBlender/ch8/addons` 文件夹。我们可以使用文件管理器或代码编辑器的**文件**选项卡，例如**VS
    Code**。
- en: Create a new file in that folder and name it `object_shaker.py`. We can use
    the file manager or the **New File** button of our code editor.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该文件夹中创建一个新文件，并将其命名为 `object_shaker.py`。我们可以使用文件管理器或代码编辑器的**新建文件**按钮。
- en: Open the file in your editor of choice.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您选择的编辑器打开文件。
- en: Set the `PythonScriptingBlender/ch8` in the Blender **File** **Paths** preferences.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Blender 的 **文件** **路径** 首选项中设置 `PythonScriptingBlender/ch8`。
- en: Now, we will start writing the add-on code as usual.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将像往常一样开始编写插件代码。
- en: Writing the Shaker add-on info
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写 Shaker 插件信息
- en: 'We will add our new operator, `location` attribute of the add-on info:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在插件信息中添加我们的新操作符，`location` 属性：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Writing the Add Object Shake operator class
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写 Add Object Shake 操作符类
- en: 'We import the `bpy` module, then write the `bl_*` identifiers of `Object Shaker`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入 `bpy` 模块，然后编写 `Object Shaker` 的 `bl_*` 标识符：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This operator needs two float parameters:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作符需要两个浮点参数：
- en: Noise `duration` in seconds
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 噪声 `duration` 以秒为单位
- en: Noise `strength`, that is, how much this modifier contributes to the animation
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 噪声 `strength`，即此修改器对动画的贡献程度
- en: '`duration` should be a positive number: there is no such thing as a negative
    amount of time. So, we set `0.0` as the property minimum. The amount of shaking,
    on the other hand, could benefit from values below `0.0` or above `1.0`. It’s
    a more peculiar circumstance in which we still want to set the range of values
    from `0.0` to `1.0` as the ordinary condition, but we don’t want to prevent the
    user from going beyond those limits if they want to. We can set limits that apply
    to the slider but accept an out-of-range numerical input using the `soft_min`
    and `soft_max` parameters.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`duration` 应该是一个正数：不存在负时间量这样的东西。因此，我们将属性最小值设置为 `0.0`。另一方面，摇动的量可能从 `0.0` 或 `1.0`
    以下的值中受益。这是一种更特殊的情况，我们仍然希望将值的范围从 `0.0` 到 `1.0` 设置为普通条件，但我们不希望阻止用户超出这些限制。我们可以设置适用于滑块的限制，但使用
    `soft_min` 和 `soft_max` 参数接受超出范围的数值输入。'
- en: Adding limits and soft limits to properties
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为属性添加限制和软限制
- en: Normally, the influence, or `strength`, of the modifier, should range between
    `0.0` and `1.0` (meaning no influence and full influence, respectively) but using
    values outside that range has a multiplicative effect. For instance, an influence
    of `2.0` doubles the modifier’s contribution.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，修改器的强度或`influence`应该在 `0.0` 和 `1.0` 之间（分别表示没有影响和完全影响），但使用该范围之外的值会产生乘法效果。例如，`2.0`
    的影响将使修改器的贡献加倍。
- en: 'Soft limits for Blender properties are useful in this case: `min`, `max`, `soft_min`,
    and `soft_max` limit the range of the slider in the interface, but while `min`
    and `max` never accept any number exceeding their range, `soft_min` and `soft_max`
    allow the user to click on the slider and type any value they wish using the keyboard.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Blender 属性的软限制在这种情况下很有用：`min`、`max`、`soft_min` 和 `soft_max` 限制界面中滑块的值域，但
    `min` 和 `max` 从不接受超出其范围的任何数字，而 `soft_min` 和 `soft_max` 允许用户使用键盘点击滑块并输入他们想要的任何值。
- en: 'Values exceeding the initial `soft_min` and `soft_max` parameters are considered
    valid input and become the new range of the slider:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 超过初始 `soft_min` 和 `soft_max` 参数的值被视为有效输入，并成为滑块的新范围：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we can write the `poll` method for verifying the conditions and the `execute`
    method to perform the action of adding noise.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以编写用于验证条件的 `poll` 方法以及用于执行添加噪声动作的 `execute` 方法。
- en: Writing the operator methods
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写操作符方法
- en: Besides the usual `poll` and `execute` methods, we will write a utility function
    for finding the F-Curve of a given property.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了常用的 `poll` 和 `execute` 方法外，我们还将编写一个用于查找给定属性 F-Curve 的实用函数。
- en: Writing the poll method
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写 poll 方法
- en: 'The condition for the `poll` method is very simple – the operator can be invoked
    if there is an active object:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`poll` 方法的条件非常简单——如果存在活动对象，则可以调用操作符：'
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We need an animated property to add a noise modifier. If it is already animated,
    we pick the existing animation curve, otherwise, we create a new one. This operation
    can be implemented as a separate function, named `get_fcurve`, which takes `data_path`
    as an argument and returns its animation curve. It creates a new curve if it doesn’t
    exist yet.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个动画属性来添加噪声修改器。如果它已经动画化，我们选择现有的动画曲线，否则，我们创建一个新的。这个操作可以作为一个单独的函数实现，命名为 `get_fcurve`，它接受
    `data_path` 作为参数并返回其动画曲线。如果它还不存在，它将创建一个新的曲线。
- en: Writing the get_fcurve method
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写get_fcurve方法
- en: We delegate the task of finding or creating a property animation curve to the
    `get_fcurve` function. Since it will be used by the `ObjectShaker` operator alone,
    we write it as a class method, with `self` as its first argument. We might want
    to use it on more than one property and object, so we also pass the object to
    inspect and `data_path` of the property to animate. In case of vector properties,
    we pass the `index` component as well. We use `obj` rather than `object` as a
    parameter name because the latter represents the Python basic class, a term we
    don’t want to override.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查找或创建属性动画曲线的任务委托给`get_fcurve`函数。由于它将由`ObjectShaker`操作符单独使用，所以我们将其编写为一个类方法，`self`作为其第一个参数。我们可能希望对多个属性和对象使用它，所以我们还传递要检查的对象以及要动画化的属性的`data_path`。在矢量属性的情况下，我们还传递`index`组件。我们使用`obj`而不是`object`作为参数名称，因为后者代表Python的基本类，我们不想覆盖这个术语。
- en: 'We know from [*Chapter 7*](B18375_07.xhtml#_idTextAnchor171), that F-Curves
    belong to an action, and our operator adds noise to the current action, so this
    function will look for the `action` attribute of the object’s animation data.
    Before we run `get_fcurve`, we should make sure that such an action exists, so,
    in line with the *Defensive Programming* practice learned in [*Chapter 6*](B18375_06.xhtml#_idTextAnchor129),
    we use `assert` to halt the script if, for unforeseen reasons, no current action
    is found:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从[*第7章*](B18375_07.xhtml#_idTextAnchor171)我们知道，F-Curves属于动作，并且我们的操作符向当前动作添加噪声，因此这个函数将查找对象动画数据中的`action`属性。在我们运行`get_fcurve`之前，我们应该确保存在这样的动作，因此，按照在[*第6章*](B18375_06.xhtml#_idTextAnchor129)学到的[*防御性编程*](B18375_06.xhtml#_idTextAnchor129)实践，我们使用`assert`来停止脚本，如果由于不可预见的原因找不到当前动作：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we need to return the F-Curve that animates the `data_path` instance provided
    as an argument, and create it if it doesn’t exist. We can attempt its creation
    using `try`, a statement learned in the *Improving our code* section of [*Chapter
    3*](B18375_03.xhtml#_idTextAnchor049).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要返回由参数提供的`data_path`实例所动画化的F-Curve，如果它不存在则创建它。我们可以尝试使用`try`来创建它，这是在[*第3章*](B18375_03.xhtml#_idTextAnchor049)的[*改进我们的代码*](B18375_03.xhtml#_idTextAnchor049)部分学到的语句。
- en: Trying to create two F-Curves with the same path causes a `RuntimeError` error,
    which, in a `try` statement, triggers the `except` clause. By looking for existing
    curves only if we need to, our code will be leaner and slightly faster.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试创建具有相同路径的两个F-Curves会导致`RuntimeError`错误，在`try`语句中，这会触发`except`子句。通过只在需要时查找现有曲线，我们的代码将更加精简，并且稍微快一点。
- en: 'Under the `except` statement, we use the `next` function on a conditional *iterator*,
    that is, a sequence of objects that satisfy our criteria, in this case, a matching
    `data_path` and `index`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在`except`语句下，我们对一个条件*迭代器*使用`next`函数，即满足我们标准的一系列对象，在这种情况下，是一个匹配的`data_path`和`index`：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In either case, we will end up with the `crv` variable containing the F-Curve
    we are looking for. We could have used a `for` loop to iterate `action.fcurves`,
    but the `next` function provides a valid and compact alternative.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，我们都会得到包含我们正在寻找的F-Curve的`crv`变量。我们本可以使用`for`循环来迭代`action.fcurves`，但`next`函数提供了一个有效且紧凑的替代方案。
- en: Scrolling through collections efficiently
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 高效地滚动集合
- en: The `next` function returns the first valid element of a sequence. For example,
    typing `next(action.fcurves)` simply gives the first curve of an action. The argument
    of `next` can be any iterator, though, not just a list or a collection. Since
    iterators can contain conditional statements such as `if`, `next` can be a concise
    and performant alternative to `for` loops.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`next`函数返回序列的第一个有效元素。例如，输入`next(action.fcurves)`简单地给出动作的第一个曲线。`next`的参数可以是任何迭代器，而不仅仅是列表或集合。由于迭代器可以包含条件语句，如`if`，因此`next`可以是一个简洁且高效的`for`循环的替代方案。'
- en: While `fc for fc in action.fcurves` scrolls all the elements of `fcurves`, the
    conditions on `fc.data_path` and `fc.array_index` ensure that the first curve
    that complies with those requirements is returned.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当`fc for fc in action.fcurves`滚动`fcurves`的所有元素时，对`fc.data_path`和`fc.array_index`的条件确保返回符合那些要求的第一条曲线。
- en: 'If no curve is found, `next` fails with a `StopIteration` error, but we know
    that it will not happen: an existing curve brought us to the `except` block of
    this `try` statement in the first place. So, either under the `try` block or under
    `except`, the `crv` variable now contains the F-Curve we are looking for. Before
    we add a modifier to it, we must make sure that it contains at least one keyframe.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到曲线，`next`将因`StopIteration`错误而失败，但我们知道这种情况不会发生：一个现有的曲线最初就带我们进入了这个`try`语句的`except`块。所以，无论是在`try`块下还是在`except`块下，`crv`变量现在包含我们正在寻找的F-Curve。在我们向它添加修饰符之前，我们必须确保它至少包含一个关键帧。
- en: Ensuring the presence of keyframes
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 确保存在关键帧
- en: 'At this point, we have stored an animation curve in the `crv` variable, but
    we must look for its keyframe points, or it will not be evaluated. If the `keyframe_points`
    collection is empty, we add keyframes to it by using `keyframe_points.insert`.
    We will use the current frame and value as arguments:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经将动画曲线存储在`crv`变量中，但我们必须寻找其关键帧点，否则它将不会被评估。如果`keyframe_points`集合为空，我们将通过使用`keyframe_points.insert`向其中添加关键帧。我们将使用当前帧和值作为参数：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that we have an animation curve and it is guaranteed to support modifiers,
    we can return the `crv` variable and exit the `get_fcurve` function:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个动画曲线，并且它保证支持修饰符，我们可以返回`crv`变量并退出`get_fcurve`函数：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This function will be called in the `execute` method, the last missing piece
    of the operator.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将在`execute`方法中被调用，这是操作符的最后一块缺失的拼图。
- en: Writing the execute method
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写`execute`方法
- en: 'If our object has not been animated yet, we create new `animation_data`, otherwise,
    we store the existing data in the `anim` variable:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的对象尚未被动画化，我们创建新的`animation_data`，否则，我们将现有数据存储在`anim`变量中：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Likewise, we should create a new action if there isn’t one yet or get the current
    one. In either case, it is going to be stored in the `action` variable:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果还没有创建新的动作，我们应该创建一个新的动作，或者获取当前的其中一个。在两种情况下，它都将被存储在`action`变量中：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, it’s finally time to add some shaking motion. First, we need to express
    the duration of the effect in frames, rather than seconds. To do that, we multiply
    the `duration` parameter by the frames-per-second of the scene. Once we have the
    duration in frames, we divide it by half to center the object shake around the
    current frame; half of the frames will be played before it, while the second half
    will be played afterward:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候添加一些摇动动作了。首先，我们需要以帧为单位表达效果的持续时间，而不是以秒为单位。要做到这一点，我们需要将`duration`参数乘以场景的每秒帧数。一旦我们有了帧的持续时间，我们将它除以二，以便将对象摇动中心对准当前帧；一半的帧将在它之前播放，而另一半将在之后播放：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The next step is looking for the animation curves that we want to alter: `location`
    Z, `rotation_euler` X, and `rotation_euler` Y. We need these ones specifically
    as they represent the up-down shake, yaw shake, and pitch shake of a camera, respectively.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是寻找我们想要修改的动画曲线：`location` Z，`rotation_euler` X，和`rotation_euler` Y。我们需要这些特定的曲线，因为它们分别代表了相机的上下摇动、偏航摇动和俯仰摇动。
- en: 'If they don’t exist, our `get_fcurve` method creates and returns them:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们不存在，我们的`get_fcurve`方法将创建并返回它们：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Since F-Modifiers are specific to each curve, we create a `NOISE` modifier
    for each of them. We use a `for` loop to create all three at once. The noise `strength`
    value, a float attribute, can be set directly from the `strength` parameter of
    the operator, while we computed the `start` and `end` values for the noise earlier:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由于F-Modifiers是针对每个曲线特定的，我们为每个曲线创建一个`NOISE`修饰符。我们使用一个`for`循环一次性创建所有三个。噪声`strength`值，一个浮点属性，可以直接从操作符的`strength`参数设置，而我们在之前已经计算了噪声的`start`和`end`值：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We have turned `use_restricted_range` on to limit the noise in our `start`
    and `end` frames: the `frame_start` and `frame_end` attributes would have no effect
    otherwise. Once we have set F-Modifiers for the three curves, we can finally exit
    the method.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将`use_restricted_range`设置为开启，以限制`start`和`end`帧中的噪声：否则，`frame_start`和`frame_end`属性将没有效果。一旦我们为三个曲线设置了F-Modifiers，我们就可以最终退出该方法。
- en: Now that our operator is complete, we can add a menu item to the interface and
    the `register`/`unregister` functions.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了操作符，我们可以向界面添加一个菜单项，以及`register`/`unregister`函数。
- en: Adding menu items
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加菜单项
- en: As we learned when writing interfaces, a menu function takes `self` and `context`
    as arguments.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在编写接口时所学到的，一个菜单函数将`self`和`context`作为参数。
- en: 'Inside the menu function, we add a separator and the `ObjectShaker` operator
    to `self.layout`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜单函数内部，我们向`self.layout`添加一个分隔符和`ObjectShaker`操作符：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This function can then be added to any menu, but since our operator affects
    the animation of object transforms, we can use the right-click menu displayed
    by the Viewport in **Object Mode**.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能可以添加到任何菜单中，但由于我们的操作员影响对象变换的动画，我们可以使用在**对象模式**中由视口显示的右键菜单。
- en: Finding the class names of context menus
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找上下文菜单的类名
- en: The API documentation doesn’t contain a list of all menus. We can look for them
    in `bpy.types`, which contains all the Blender classes, and keep in mind that
    the class name we are looking for starts with `VIEW3D_MT` and ends with `_context_menu`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: API文档不包含所有菜单的列表。我们可以在`bpy.types`中查找它们，它包含所有Blender类，并记住我们正在寻找的类名以`VIEW3D_MT`开头并以`_context_menu`结尾。
- en: 'We can use these criteria in a *list comprehension*, that is, a list-like object
    delimited by square brackets that, like the `next` function we have met earlier
    in this section, is built with a conditional iterator. We can run it in Blender’s
    **Python Console**:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*列表推导*中使用这些标准，即由方括号分隔的类似列表的对象，就像我们在本节前面遇到的`next`函数一样，它是由条件迭代器构建的。我们可以在Blender的**Python控制台**中运行它：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Among the listed context menus, we find `VIEW3D_MT_object_context_menu`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在列出的上下文菜单中，我们找到了`VIEW3D_MT_object_context_menu`：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In returning the results that match the `context_menu` suffix, our list comprehension
    acted almost like a small search engine. To filter the result even further, we
    can add an `"object"` string as a requirement to filter the output to one result:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回匹配`context_menu`后缀的结果时，我们的列表推导几乎就像一个小型搜索引擎。为了进一步过滤结果，我们可以添加一个`"object"`字符串作为要求，以过滤输出到一个结果：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This list comprehension narrows the results down to the object context menu
    only:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表推导将结果缩小到仅对象上下文菜单：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now that we know which menu class to use, we can move to registering the add-on.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了要使用哪个菜单类，我们就可以继续注册这个插件了。
- en: Registering the Shaker add-on
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册Shaker插件
- en: 'Enabling the add-on produces these two results:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 启用插件会产生这两个结果：
- en: Adds the `ObjectShaker` class to Blender
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`ObjectShaker`类添加到Blender中
- en: Adds the `m_items` function to the object right-click menu
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`m_items`函数添加到对象的右键菜单中
- en: 'Each of those tasks happen in the `register` function:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务都在`register`函数中发生：
- en: '[PRE21]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Following the same logic, when the add-on is disabled, its code is purged from
    Blender, upon which `m_items` should be removed from the menu and `ObjectShaker`
    from the registered classes. Failing to do so would leave orphan entities in Blender.
    The `unregister` function takes care of that:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 按照相同的逻辑，当插件禁用时，其代码将从Blender中清除，此时应该从菜单中删除`m_items`，从已注册的类中删除`ObjectShaker`。未能这样做会在Blender中留下孤儿实体。`unregister`函数负责处理这一点：
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We can refresh the add-ons using the **Refresh** button in the **Add-ons** preferences
    and enable **Object Shaker** from the **Learning** category. When the add-on is
    enabled, the **Add Object Shake** option appears in the given object’s right-click
    menu.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**刷新**按钮在**插件**首选项中刷新插件，并从**学习**类别中启用**Object Shaker**。当插件启用时，**添加对象震动**选项将出现在指定对象的右键菜单中。
- en: Using the Shaker add-on
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Shaker插件
- en: 'Using our add-on, we can add a shaking motion to any object by following these
    steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的插件，我们可以通过以下步骤为任何对象添加震动动作：
- en: Make the object active.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使对象激活。
- en: Right-click (or press `W` if **Select with Mouse Button** was set to **Right**
    in **Preferences** | **Keymap**).
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击（或者在**首选项** | **快捷键**中将**使用鼠标按钮选择**设置为**右键**时按`W`）。
- en: Select **Add Object Shake** from the menu.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择**添加对象震动**。
- en: Adjust the **duration** and **strength** values in the **Execution** panel.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**执行**面板中调整**持续时间**和**强度**值。
- en: Like with the *Action Range add-on* from [*Chapter 7*](B18375_07.xhtml#_idTextAnchor171),
    the selected amount of **duration** and **strength** can be changed after execution
    using **Edit** | **Adjust Last Operation** from the top bar.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[*第7章*](B18375_07.xhtml#_idTextAnchor171)中提到的**Action Range插件**一样，所选的**持续时间**和**强度**可以在执行后使用**编辑**
    | **调整最后操作**从顶部栏进行更改。
- en: We have created a tool that adds a procedural behavior to an object using animation
    modifiers. This is a valuable shortcut when animating with Python. Moreover, it
    introduces us to the concept of a non-destructive modifier, that is, adding parametric
    changes that can be removed or edited at will.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个工具，它使用动画修改器为对象添加了程序化行为。这在用Python进行动画时是一个非常有价值的快捷方式。此外，它还向我们介绍了非破坏性修改器的概念，即添加可以随意删除或编辑的参数化更改。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: We have learned how to create animation effects for our scenes and have seen
    how we can convert an idea into a procedural tool. Artists and technical animators
    can come up with convoluted conceptual configurations, which we can turn into
    quick-setup operators following the process outlined in this chapter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何为我们的场景创建动画效果，并看到了如何将一个想法转化为程序化工具。艺术家和技术动画师可以提出复杂的概念配置，我们可以根据本章概述的过程将其转化为快速设置的操作员。
- en: Using the animation system is a convenient way to implement parametric behaviors,
    as it relies on the application update logic and produces fast, reliable outputs.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用动画系统是实现参数化行为的一种便捷方式，因为它依赖于应用程序的更新逻辑，并产生快速、可靠的输出。
- en: We will explore a similar but more powerful technique in [*Chapter 9*](B18375_09.xhtml#_idTextAnchor226),
    thus completing our overview of the animation system.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第9章*](B18375_09.xhtml#_idTextAnchor226)中探索一个类似但更强大的技术，从而完成我们对动画系统的概述。
- en: Questions
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What do we mean by non-destructive modifiers?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们所说的非破坏性修改器是什么意思？
- en: Do modifiers change the keyframe points of a curve?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改器会改变曲线的关键帧点吗？
- en: Can we add animation modifiers to non-animated objects?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们能否将动画修改器添加到非动画对象中？
- en: How do we make sure that a property is animated?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何确保一个属性是动画化的？
- en: What is a parameter soft limit?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参数软限制是什么？
- en: In which cases do we use soft rather than strong limits?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在哪些情况下我们使用软限制而不是强限制？
- en: How can we look for a class name in Python?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在Python中查找类名？
