["```py\nclass MyListCtrl(wx.ListCtrl):\n    def __init__(self, parent):\n        super(MyListCtrl, self).__init__(parent,\n                                         style=wx.LC_REPORT)\n\n        # Add three columns to the list          \n        self.InsertColumn(0, \"Column 1\")\n        self.InsertColumn(1, \"Column 2\")\n        self.InsertColumn(2, \"Column 3\")\n\n    def PopulateList(self, data):\n        \"\"\"Populate the list with the set of data. Data\n        should be a list of tuples that have a value for each\n        column in the list.\n        [('hello', 'list', 'control'),]\n        \"\"\"\n        for item in data:\n            self.Append(item)\n\n```", "```py\nclass MyPanel(wx.Panel):\n    def __init__(self, parent):\n        super(MyPanel, self).__init__(parent)\n\n        # Attributes\n        self.lst = MyListCtrl(self)\n\n        # Setup\n        data = [ (\"row %d\" % x,\n                  \"value %d\" % x,\n                  \"data %d\" % x) for x in range(10) ]\n        self.lst.PopulateList(data)\n\n        # Layout\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.lst, 1, wx.EXPAND)\n        self.SetSizer(sizer)\n\n        # Event Handlers\n        self.Bind(wx.EVT_LIST_ITEM_SELECTED, \n                  self.OnItemSelected)\n\n    def OnItemSelected(self, event):\n        selected_row = event.GetIndex()\n        val = list()\n        for column in range(3):\n            item = self.lst.GetItem(selected_row, column)\n            val.append(item.GetText())\n        # Show what was selected in the frames status bar\n        frame = self.GetTopLevelParent()\n        frame.PushStatusText(\",\".join(val))\n\n```", "```py\nimport  os\nimport wx\nimport wx.lib.customtreectrl as customtree\n\nclass FileBrowser(customtree.CustomTreeCtrl):\n    FOLDER, \\\n    ERROR, \\\n    FILE = range(3)\n    def __init__(self, parent, rootdir, *args, **kwargs):\n        super(FileBrowser, self).__init__(parent,\n                                          *args,\n                                          **kwargs)         \n        assert os.path.exists(rootdir), \\\n               \"Invalid Root Directory!\"\n        assert os.path.isdir(rootdir), \\\n               \"rootdir must be a Directory!\"\n\n        # Attributes\n        self._il = wx.ImageList(16, 16)\n        self._root = rootdir\n        self._rnode = None  \n\n        # Setup\n        for art in (wx.ART_FOLDER, wx.ART_ERROR,\n                    wx.ART_NORMAL_FILE):\n            bmp = wx.ArtProvider.GetBitmap(art, size=(16,16))\n            self._il.Add(bmp)\n        self.SetImageList(self._il)\n        self._rnode = self.AddRoot(os.path.basename(rootdir),\n                                   image=FileBrowser.FOLDER,\n                                   data=self._root)\n        self.SetItemHasChildren(self._rnode, True)\n        # use Windows-Vista-style selections       \n        self.EnableSelectionVista(True)\n\n        # Event Handlers\n        self.Bind(wx.EVT_TREE_ITEM_EXPANDING, \n                  self.OnExpanding)\n        self.Bind(wx.EVT_TREE_ITEM_COLLAPSED, \n                  self.OnCollapsed)\n\n    def _GetFiles(self, path):\n        try:\n            files = [fname for fname in os.listdir(path)\n                     if fname not in ('.', '..')]\n        except OSError:\n            files = None\n        return files\n\n```", "```py\n    def OnCollapsed(self, event):\n        item = event.GetItem()\n        self.DeleteChildren(item)\n\n    def OnExpanding(self, event):\n        item = event.GetItem()\n        path = self.GetPyData(item)\n        files = self._GetFiles(path)\n\n        # Handle Access Errors\n        if files is None:\n            self.SetItemImage(item, FileBrowser.ERROR)\n            self.SetItemHasChildren(item, False)\n            return\n\n        for fname in files:\n            fullpath = os.path.join(path, fname)\n            if os.path.isdir(fullpath):\n                self.AppendDir(item, fullpath)\n            else:\n                self.AppendFile(item, fullpath)\n\n```", "```py\n    def AppendDir(self, item, path):\n        \"\"\"Add a directory node\"\"\"\n        assert os.path.isdir(path), \"Not a valid directory!\"\n        name = os.path.basename(path)\n        nitem = self.AppendItem(item, name,\n                                image=FileBrowser.FOLDER,\n                                data=path)\n        self.SetItemHasChildren(nitem, True)\n\n    def AppendFile(self, item, path):\n        \"\"\"Add a file to a node\"\"\"\n        assert os.path.isfile(path), \"Not a valid file!\"\n        name = os.path.basename(path)\n        self.AppendItem(item, name,\n                        image=FileBrowser.FILE,\n                        data=path)\n\n    def GetSelectedPath(self):\n        \"\"\"Get the selected path\"\"\"\n        sel = self.GetSelection()\n        path = self.GetItemPyData(sel)\n        return path\n\n    def GetSelectedPaths(self):\n        \"\"\"Get a list of selected paths\"\"\"\n        sels = self.GetSelections()\n        paths = [self.GetItemPyData(sel)\n                 for sel in sels ]\n        return paths\n\n```", "```py\nclass UserListBox(wx.VListBox):\n    \"\"\"Simple List Box control to show a list of users\"\"\"\n    def __init__(self, parent, users):\n        \"\"\"@param users: list of user names\"\"\"\n        super(UserListBox, self).__init__(parent)\n\n        # Attributes\n        # system-users.png is a sample image provided with\n        # this chapters sample code.\n        self.bmp = wx.Bitmap(\"system-users.png\",\n                             wx.BITMAP_TYPE_PNG)\n        self.bh = self.bmp.GetHeight()\n        self.users = users\n\n        # Setup\n        self.SetItemCount(len(self.users))\n\n    def OnMeasureItem(self, index):\n        \"\"\"Called to get an items height\"\"\"\n        # All our items are the same so index is ignored\n        return self.bh + 4\n\n    def OnDrawSeparator(self, dc, rect, index):\n        \"\"\"Called to draw the item separator\"\"\"\n        oldpen = dc.GetPen()\n        dc.SetPen(wx.Pen(wx.BLACK))\n        dc.DrawLine(rect.x, rect.y,\n                    rect.x + rect.width,\n                    rect.y)\n        rect.Deflate(0, 2)\n        dc.SetPen(oldpen)\n\n    def OnDrawItem(self, dc, rect, index):\n        \"\"\"Called to draw the item\"\"\"\n        # Draw the bitmap\n        dc.DrawBitmap(self.bmp, rect.x + 2,\n                      ((rect.height - self.bh) / 2) + rect.y)\n        # Draw the label to the right of the bitmap\n        textx = rect.x + 2 + self.bh + 2\n        lblrect = wx.Rect(textx, rect.y,\n                          rect.width - textx,\n                          rect.height)\n        dc.DrawLabel(self.users[index], lblrect,\n                     wx.ALIGN_LEFT|wx.ALIGN_CENTER_VERTICAL)\n\n```", "```py\nimp ort wx\nimport wx.stc as stc\nimport keyword\n\nclass CodeEditorBase(stc.StyledTextCtrl):\n    def __init__(self, parent):\n        super(CodeEditorBase, self).__init__(parent)\n\n        # Attributes\n        font = wx.Font(10, wx.FONTFAMILY_MODERN,\n                           wx.FONTSTYLE_NORMAL,\n                           wx.FONTWEIGHT_NORMAL)\n        self.face = font.GetFaceName()\n        self.size = font.GetPointSize()\n\n        # Setup\n        self.SetupBaseStyles()\n\n    def EnableLineNumbers(self, enable=True):\n        \"\"\"Enable/Disable line number margin\"\"\"\n        if enable:\n            self.SetMarginType(1, stc.STC_MARGIN_NUMBER)\n            self.SetMarginMask(1, 0)\n            self.SetMarginWidth(1, 25)\n        else:\n            self.SetMarginWidth(1, 0)\n\n    def GetFaces(self):\n        \"\"\"Get font style dictionary\"\"\"\n        return dict(font=self.face,\n                    size=self.size)\n\n    def SetupBaseStyles(self):\n        \"\"\"Sets up the the basic non lexer specific\n        styles.\n        \"\"\"\n        faces = self.GetFaces()\n        default = \"face:%(font)s,size:%(size)d\" % faces\n        self.StyleSetSpec(stc.STC_STYLE_DEFAULT, default)\n        line = \"back:#C0C0C0,\" + default\n        self.StyleSetSpec(stc.STC_STYLE_LINENUMBER, line)\n        self.StyleSetSpec(stc.STC_STYLE_CONTROLCHAR,\n                          \"face:%(font)s\" % faces)\n\n```", "```py\nclass PythonCodeEditor(CodeEditorBase):\n    def __init__(self, parent):\n        super(PythonCodeEditor, self).__init__(parent)\n\n        # Setup\n        self.SetLexer(wx.stc.STC_LEX_PYTHON)\n        self.SetupKeywords()\n        self.SetupStyles()\n        self.EnableLineNumbers(True)\n\n    def SetupKeywords(self):\n        \"\"\"Sets up the lexers keywords\"\"\"\n        kwlist = u\" \".join(keyword.kwlist)\n        self.SetKeyWords(0, kwlist)\n        #self.SetKeywords(1, user_kw)\n\n    def SetupStyles(self):\n        \"\"\"Sets up the lexers styles\"\"\"\n        # Python styles\n        faces = self.GetFaces()\n        fonts = \"face:%(font)s,size:%(size)d\" % faces\n        default = \"fore:#000000,\" + fonts\n\n        # Default \n        self.StyleSetSpec(stc.STC_P_DEFAULT, default)\n        # Comments\n        self.StyleSetSpec(stc.STC_P_COMMENTLINE,\n                          \"fore:#007F00,\" + fonts)\n        # Number\n        self.StyleSetSpec(stc.STC_P_NUMBER,\n                          \"fore:#007F7F,\" + fonts)\n        # String\n        self.StyleSetSpec(stc.STC_P_STRING,\n                          \"fore:#7F007F,\" + fonts)\n        # Single quoted string\n        self.StyleSetSpec(stc.STC_P_CHARACTER,\n                          \"fore:#7F007F,\" + fonts)\n        # Keyword\n        self.StyleSetSpec(stc.STC_P_WORD,\n                          \"fore:#00007F,bold,\" + fonts)\n        # Triple quotes\n        self.StyleSetSpec(stc.STC_P_TRIPLE,\n                          \"fore:#7F0000,\" + fonts)\n        # Triple double quotes\n        self.StyleSetSpec(stc.STC_P_TRIPLEDOUBLE,\n                          \"fore:#7F0000,\" + fonts)\n        # Class name definition\n        self.StyleSetSpec(stc.STC_P_CLASSNAME,\n                          \"fore:#0000FF,bold,\" + fonts)\n        # Function or method name definition\n        self.StyleSetSpec(stc.STC_P_DEFNAME,\n                          \"fore:#007F7F,bold,\" + fonts)\n        # Operators\n        self.StyleSetSpec(stc.STC_P_OPERATOR, \"bold,\" + fonts)\n        # Identifiers\n        self.StyleSetSpec(stc.STC_P_IDENTIFIER, default)\n        # Comment-blocks\n        self.StyleSetSpec(stc.STC_P_COMMENTBLOCK,\n                          \"fore:#7F7F7F,\" + fonts)\n        # End of line where string is not closed\n        eol_style = \"fore:#000000,back:#E0C0E0,eol,\" + fonts\n        self.StyleSetSpec(stc.STC_P_STRINGEOL, eol_style)\n\n```", "```py\nATTRIBUTE:VALUE,ATTRIBUTE:VALUE,MODIFIER \n\n```", "```py\nclass CustomTaskBarIcon(wx.TaskBarIcon):\n    ID_HELLO = wx.NewId()\n    ID_HELLO2 = wx.NewId()\n    def __init__(self):\n        super(CustomTaskBarIcon, self).__init__()\n\n        # Setup\n        icon = wx.Icon(\"face-monkey.png\", wx.BITMAP_TYPE_PNG)\n        self.SetIcon(icon)\n\n        # Event Handlers\n        self.Bind(wx.EVT_MENU, self.OnMenu)\n\n    def CreatePopupMenu(self):\n        \"\"\"Base class virtual method for creating the\n        popup menu for the icon.\n        \"\"\"\n        menu = wx.Menu()\n        menu.Append(CustomTaskBarIcon.ID_HELLO, \"HELLO\")\n        menu.Append(CustomTaskBarIcon.ID_HELLO2, \"Hi!\")\n        menu.AppendSeparator()\n        menu.Append(wx.ID_CLOSE, \"Exit\")\n        return menu\n\n    def OnMenu(self, event):\n        evt_id = event.GetId()\n        if evt_id == CustomTaskBarIcon.ID_HELLO:\n            wx.MessageBox(\"Hello World!\", \"HELLO\")\n        elif evt_id == CustomTaskBarIcon.ID_HELLO2:\n            wx.MessageBox(\"Hi Again!\", \"Hi!\")\n        elif evt_id == wx.ID_CLOSE:\n            self.Destroy()\n        else:\n            event.Skip()\n\n```", "```py\nclass MyNotebook(wx.Notebook):\n    def __init__(self, parent):\n        super(MyNotebook, self).__init__(parent)\n\n        # Attributes\n        self.textctrl = wx.TextCtrl(self, value=\"edit me\",\n                                    style=wx.TE_MULTILINE)\n        self.blue = wx.Panel(self)\n        self.blue.SetBackgroundColour(wx.BLUE)\n        self.fbrowser = wx.GenericDirCtrl(self)\n\n        # Setup\n        self.AddPage(self.textctrl, \"Text Editor\")\n        self.AddPage(self.blue, \"Blue Panel\")\n        self.AddPage(self.fbrowser, \"File Browser\")\n\n```", "```py\nimport wx\nimport wx.lib\nimport wx.lib.flatnotebook as FNB\n\nclass MyFlatNotebook(FNB.FlatNotebook):\n    def __init__(self, parent):\n        mystyle = FNB.FNB_DROPDOWN_TABS_LIST|\\\n                  FNB.FNB_FF2|\\\n                  FNB.FNB_SMART_TABS|\\\n                  FNB.FNB_X_ON_TAB\n        super(MyFlatNotebook, self).__init__(parent,\n                                             style=mystyle)\n        # Attributes\n        self._imglst = wx.ImageList(16, 16)\n\n        # Setup\n        bmp = wx.Bitmap(\"text-x-generic.png\")\n        self._imglst.Add(bmp)\n        bmp = wx.Bitmap(\"text-html.png\")\n        self._imglst.Add(bmp)\n        self.SetImageList(self._imglst)\n\n        # Event Handlers\n        self.Bind(FNB.EVT_FLATNOTEBOOK_PAGE_CLOSING, \n                  self.OnClosing)\n\n    def OnClosing(self, event):\n        \"\"\"Called when a tab is closing\"\"\"\n        page = self.GetCurrentPage()\n        if page and hasattr(page, \"IsModified\"):\n            if page.IsModified():\n                r = wx.MessageBox(\"Warning unsaved changes”\n                                  “ will be lost\",\n                                  \"Close Warning\",\n                                  wx.ICON_WARNING|\\\n                                  wx.OK|wx.CANCEL)\n                if r == wx.CANCEL:\n                    event.Veto()\n\n```", "```py\nimport wx\nimport wx.lib.scrolledpanel as scrolledpanel\n\nclass ImageListCtrl(scrolledpanel.ScrolledPanel):\n    \"\"\"Simple control to display a list of images\"\"\"\n    def __init__(self, parent, bitmaps=list(),\n                 style=wx.TAB_TRAVERSAL|wx.BORDER_SUNKEN):\n        super(ImageListCtrl, self).__init__(parent,\n                                            style=style)\n\n        # Attributes\n        self.images = list()\n        self.sizer = wx.BoxSizer(wx.VERTICAL)\n\n        # Setup\n        for bmp in bitmaps:\n            self.AppendBitmap(bmp)\n        self.SetSizer(self.sizer)\n\n    def AppendBitmap(self, bmp):\n        \"\"\"Add another bitmap to the control\"\"\"\n        self.images.append(bmp)\n        sbmp = wx.StaticBitmap(self, bitmap=bmp)\n        self.sizer.Add(sbmp, 0, wx.EXPAND|wx.TOP, 5)\n        self.SetupScrolling()\n\n```", "```py\nimport wx\nimport wx.lib.foldpanelbar as foldpanel\n\nclass FoldPanelMgr(foldpanel.FoldPanelBar):\n    \"\"\"Fold panel that manages a collection of Panels\"\"\"\n    def __init__(self, parent, *args, **kwargs):\n        super(FoldPanelMgr, self).__init__(parent,\n                                           *args,\n                                           **kwargs)\n\n    def AddPanel(self, pclass, title=u\"\", collapsed=False):\n        \"\"\"Add a panel to the manager\n        @param pclass: Class constructor (callable)\n        @keyword title: foldpanel title\n        @keyword collapsed: start with it collapsed\n        @return: pclass instance\n        \"\"\"\n        fpitem = self.AddFoldPanel(title, collapsed=collapsed)\n        wnd = pclass(fpitem)\n        best = wnd.GetBestSize()\n        wnd.SetSize(best)\n        self.AddFoldPanelWindow(fpitem, wnd)\n        return wnd\n\n```"]