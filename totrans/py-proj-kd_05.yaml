- en: Chapter 5. Loops and Logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to use logic, such as `if`, `elif`,
    and `else`, to help design programs that could respond to user input in many ways.
    Also, you learned how to use the `while` and `for` loops. In this chapter, we
    will build our first mini game, called **Higher** or **Lower**. The game is a
    number guessing game, and we will use it to combine logic and loops to make a
    game that responds to many user requests.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to save your work frequently so that you can make corrections to your
    code!
  prefs: []
  type: TYPE_NORMAL
- en: Higher or Lower
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Higher or Lower is a numbers guessing game. In this game, the computer chooses
    a random number, and the user tries to guess what number the computer has chosen.
    There are many different ways to build this game, and many versions of this game
    have been built by different people.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our version of the game will have two levels:'
  prefs: []
  type: TYPE_NORMAL
- en: An easy level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hard level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The computer will first choose a random, secret number between `1` and `100`.
    In the easy level, the user will get unlimited chances to guess the correct number.
    In the hard level, the user will only get three chances to guess the correct number,
    and then they will lose the game.
  prefs: []
  type: TYPE_NORMAL
- en: This game can be coded in different ways and still work well—this is one of
    the most awesome things about writing code. However, we will focus on writing
    code that uses a `while` loop for the easy version and a `for` loop for the hard
    version. This will let us practice our loops and build a game that has different
    levels of challenge.
  prefs: []
  type: TYPE_NORMAL
- en: To be successful in this chapter, follow each section step by step, and make
    sure that you understand what is happening before moving on to the next section.
    Test your code by running your program when you are instructed in the text so
    that you learn how things work. At the end of this chapter, you will have your
    first fully functioning game!
  prefs: []
  type: TYPE_NORMAL
- en: Game file set up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you start to think about a small game such as Higher or Lower, you can
    write some of your code like an outline for a book, that is, you can use comments
    to place all of the logic in your code, even if you are not certain how exactly
    the code works. In our file, we need to set up code for the easy version and hard
    version, a function to start the game, and a function to end the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start planning the game, you need to keep your coding tools ready:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your Notepad++ (Windows) or jEdit (Mac/Linux) to write the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open up your command prompt (Windows) or terminal (Mac/Linux), and navigate
    to your project folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open up your Python shell so that you can test code while you are working
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In your text editor, make a new file, and save it with the name `higher_lower.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, write comments for the easy version. Single line comments in the Python
    code start with a pound sign or hashtag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the following comments in your file, leaving some spaces between each
    comment line, and then save your work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following screenshot of what this will look like in your
    text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Game file set up](img/B04681_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Importing libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this Higher or Lower game, we will import the `random` library. This library
    has functions that we will use to choose a `random` number to start each game.
    Starting with a `random` number each time means that the game experience will
    be new for the player because they need to guess a different number each time
    they play. To import a Python library, we use the `import` statement and the name
    of the library. In your code file, replace `# imported libraries go here` and
    comment with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Importing the `random` library allows us access to many functions that create
    `random` numbers and strings in different ways. There are even ways to create
    secure strings and numbers that would work well if you have to write a password-making
    program!
  prefs: []
  type: TYPE_NORMAL
- en: Setting and initializing global variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have imported the library that we need, we will set our global variables.
    As a reminder, a global variable is a variable that can be used anywhere throughout
    the code file. Global variables are helpful, as we saw with our calculator, because
    we can use them to define the status or state of a program and change the state
    of the program in different functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in our calculator, we had a global variable called `calc_on`.
    In this Higher or Lower game, we will have a few global variables that we set.
    Replace `# global variables go here` and comment with these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `game_on` variable keeps running the program. The `guesses` variable states
    how many guesses users will get. The `secret` variable is the number that the
    computer chooses at `random`, and it changes every time the game restarts.
  prefs: []
  type: TYPE_NORMAL
- en: These global variables are different than the ones we used for the previous
    chapter, though. These global variables are set to equal `None`. Why? Well, setting
    the global variables equal to none simply allows them to be reset from `None`
    or zero each time that they are called in the program. You will take a look at
    the places where we call global variables into a function, and then reset the
    value.
  prefs: []
  type: TYPE_NORMAL
- en: What is a Boolean?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to be using the words **True** and **False** to help run our game
    programs in both the easy and difficult versions of the game. In computer programming,
    in most languages, these words have a special name: **Boolean**. What is a Boolean?'
  prefs: []
  type: TYPE_NORMAL
- en: 'A Boolean can only have two values: true or false. Booleans are helpful when
    there are only these two possibilities for a variable. For example, a game can
    be on or off. We have a global variable called `game_on`. If this variable is
    set to `True`, it means that our game is running. If it is set to `False`, it
    means that our game has stopped.'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.html "Chapter 4. Making Decisions – Python Control Flows"),
    *Making Decisions – Python Control Flows*, you learned about how the comparison
    of two statements can print out the `True` or `False` statements. In this chapter,
    we are going to use the `True` and `False` conditions to control whether our program
    is running or not.
  prefs: []
  type: TYPE_NORMAL
- en: Building the easy version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have set up our global variables and imported our library, we can
    work on the logic needed to make the easy version of our game. This block of code
    tells the computer what to do if the user decides to play the easy version of
    the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to name and define the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It is good to name your function so that you remember what it does. After naming
    the function, the first thing we need is the information from our global variables.
    We will set the global variables in this function for the secret variable. We
    bring in these variables as the first two lines in the function, and we have to
    type `global` in front of the names of the variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have reset the `secret` global variable from `None` to an integer between
    `0` and `99` using `int (random.randrange(0,100)`). This means that when the game
    starts, a number between `0` and `99` will be selected as the secret number that
    the user must guess. Now, we need to create what people call the *win condition*.
    In other words, we need to program what winning and losing means. Let's think
    this through.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can you talk through what it means to win the game and lose it? Can you draw
    a diagram? Try it yourself before copying the code!
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you attempted to figure out how the game will work before you looked
    at this section of the book. Solving difficult problems is a key part of building
    games, and problem solving is a skill that is developed with practice. So, we
    will now write the code that decides whether the player wins or loses.
  prefs: []
  type: TYPE_NORMAL
- en: 'The win condition in the easy version of the game is that the user guesses
    the correct number in as many guesses as they need. To keep our game running,
    we are going to use a `while` loop, which we learned about in [Chapter 4](ch04.html
    "Chapter 4. Making Decisions – Python Control Flows"), *Making Decisions – Python
    Control Flows*. `while` loops are helpful when we are running a loop but we do
    not know how many times we need the loop to run. Our `while` loop will run as
    long as `game_on = True`. For the easy game, we are going to assume that `game_on`
    is `True`. We will write the function for `game_on` later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We have written the code to set a number and run the game. Now, we need to
    put some commands into the `while` loop so that it knows what to do. The first
    thing that we want the user to do is make a guess at the number, so we need to
    use the `raw_input()` function to get information from the user. We will add this
    input line to our function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Look at the last line of code that we added. The variable `guess` is set equal
    to the user's input. We are using `int()` to turn the user input from a string
    into a number because the game is generating random numbers, *NOT* random strings.
    We want to compare numbers to numbers. In fact, we *HAVE* to compare numbers to
    numbers. The program will not work if you do not add `int()` around the `raw_input()`
    function. Make sure you understand what the last line of code means before moving
    forward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you may notice that there is an extra space after the period in the raw
    input statement: `guess = int(input(''Guess a number. ''))`. Adding a space after
    the period and before the end of the string will tell the computer to print an
    extra space so that it will be easier for the user to read their code. See the
    following screenshots that show the difference the space makes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code with no extra space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the easy version](img/B04681_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that the output is easier to read when we add an extra space after the
    period:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the easy version](img/B04681_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Compare numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our next lines of code involve decision making. We have to tell the computer
    what to do if the user gets the number too high or too low. We also have to tell
    the computer what to do when the user wins. To tell the computer what to do, we
    can perform three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Compare the user guess to the secret computer number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output instructions to the user based on whether they guessed too high, too
    low, or just right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To compare numbers, we will use the comparison operators that we learned about
    in [Chapter 4](ch04.html "Chapter 4. Making Decisions – Python Control Flows"),
    *Making Decisions – Python Control Flows*. We will need three operators: greater
    than (`>`), less than (`<`), and equal to (`==`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because there are three possible choices, we need to use `if`, `elif`, and `else`
    to tell the computer what possible things can happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s explain the logic using words. Then, we can convert this into
    code. It is good to learn to think through these problems before you start coding.
    This helps you know what outcome to expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '`if` the user''s number is less than the secret computer number, print `Your
    guess is too low`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or `else` (`elif`), if the user's number is higher than the secret computer
    number, print `Your guess is too high`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or `else`, if the user's number is the same as the secret computer number, then
    we print `You win!`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can you draw, write, or imagine how this code will work before looking at the
    next section?
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have thought about the logic of the next section, here is what
    the code looks like once it is added to the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We have seven new lines of code that we are adding for each possibility that
    the user can enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*If the user guess is too high*, the user must enter another number, and the
    while `loop` returns to run the code again'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*If the user guess is too low*, then the user must enter another number, and
    the `while` loop returns to run the code again'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Since this is the easy version, the `while` loop will run until the user finally
    guesses the correct number no matter how many incorrect guesses the user makes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*When the user guess is the same as the computer number*, then the program
    prints `You win!` and calls a function called `play_again()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: play_again()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a function called `play_again()` that we added to the end of the `difficulty_level_easy()`
    function. We are calling one function inside of another, which we have done earlier.
    However, we have to make this `play_again()` function because it doesn't exist
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `play_again()` function will ask the users whether they want to play the
    game again and then make a decision about running the program. When the `while`
    loop finally runs the `play_again()` function, it ends the loop of code in the
    `difficulty_level_easy()` function and goes on to run its own code. In the next
    section of the chapter, we will create the functions needed to start, stop, and
    play again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![play_again()](img/B04681_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Start, stop, play again
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, if you are here, it is because you built the easy version of the game,
    and you want to test it out, play it, and see whether it actually works. If you
    try running the code right now, one of two things will happen: if it is perfect,
    then nothing will happen. If you have a problem in your code, you will get an
    error message. Either way, you cannot run the program with the code as it is right
    now because your program has no way to start itself!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build some helper functions that will start our code and allow us to
    play the game again. We will write two helper functions: `start_game()` and `play_again()`.
    We can end the loop and change the `game_on` Boolean to `False` at the end of
    the `start_game()` and `play_again()` functions.'
  prefs: []
  type: TYPE_NORMAL
- en: start_game()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In your `higher_lower.py` file, where you wrote the `# function to start game`
    comment, write this instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We have defined the function that will start our game. The next step is to
    invoke (use) our `game_on` global variable, and then set the variable to `True`.
    This tells the function that the game is in the `on` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we tell the computer to start, we need the user to tell the computer what
    they want to do. Using the `raw_input()` function, we are ready to get information
    from our player. We will make a variable called `level`. That variable will take
    input from the user. We will give the user three choices: easy, hard, or quit.
    Add the following lines of code in your file, and make sure to save your work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have information from the user stored in the `level` variable, we
    can use it to inform the comparison operators, and we can use the `if`/`elif`
    logic to make a decision about what to do in our program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: If the user types `easy`, then the computer will run the `difficulty_level_easy()`
    function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or else (`elif`), if the user types `hard`, then the computer will run the hard
    version of the game (`difficulty_level_hard() function`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or else (`elif`), if the user decides to quit, then we will stop the program
    from running by changing the Boolean of `game_on` to equal `False`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adding logic for the computer to start the correct game based on the user choice
    will take six new lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: An important thing to notice about the last line of code is that we changed
    the `game_on` global variable to `False`, causing the program to end. Also, notice
    how our `start_game()` function calls the other functions inside of it. So, the
    `difficulty_level_easy()` function that we made starts to run when someone types
    easy.
  prefs: []
  type: TYPE_NORMAL
- en: play_again()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last helper function is the `play_again()` function. This function, which
    we used at the end of the `difficulty_level_easy()` function, allows the user
    to make a choice of whether to play again or not. By now, you are probably starting
    to see a pattern with regard to what we do with information from `raw_input` in
    order to help the computer make choices. We use `if`, `elif`, and `else` to compare
    the user's choice to a set of choices that we have programmed. Then, we program
    the result of the choice to be what we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `play_again()` function, the user will be asked whether they would
    like to play again. We will prompt the user to type `Yes` or `No`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'With our program, we are only accepting two user choices so that we can use
    `if` and `else` to explain what should happen. If the user types `Yes`, then the
    `start_game()` function will run and our program will continue. If the user types
    `No`, then the `game_on` variable will be set to `False` and the program will
    stop. So, we will add four more lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Play testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have made the `play_again()` function, you only need to add one more
    line of code to test the easy version of your game! The last line of your code
    file will be calling the `start_game()` function. Add this code to the bottom
    of your game file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Once the `start_game()` line is added, you will be able to test the easy version
    of your game. Now is a good point to stop, save, and test. Play the game many
    times to make sure you fully understand how it works. Ask others to play it as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: You might decide to change some of the input questions to add humor to make
    them funny or get different results. It is up to you to test your code changes
    and to make sure they work!
  prefs: []
  type: TYPE_NORMAL
- en: '![Play testing](img/B04681_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Save your work and test your code! Go to your terminal and navigate to your
    project folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you type the following code line, your code should begin to run inside
    of your command prompt or terminal. To test the code, make sure you answer `easy`
    so that you can run the version of the code that you have made:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![Play testing](img/B04681_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Building the hard version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The hard version of the game uses exactly the same *win conditions* as the easy
    version of the game. There is only one difference.
  prefs: []
  type: TYPE_NORMAL
- en: '*The hard version only allows the player to make three guesses before it resets
    the game!* Therefore, we can use a `for` loop to define that we only want the
    program to run three times if the player does not guess the correct number.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will define the function for the hard version of the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add our global variables. In the hard version of the game, we
    need to use the global variable `guesses`, which we will set to three for this
    program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to create the logic. Here, we will use a `for` loop so that our
    loop only runs the number of times that we wish it to run. So, we will add a line
    of code that says `i` in `range (guesses)`, which means that for every number
    in the range of numbers of guesses, run our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s add this line of code, and then we will go over each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The letter `i` is used to mean one single number. The word `range` is used to
    tell the computer to go over the total number of `guesses`, which we set to `3`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will write the code to get user input, compare the user number to the
    secret computer number, and use the `if`/`elif` logic to print output messages
    to the user and run the loop again.
  prefs: []
  type: TYPE_NORMAL
- en: Before you copy the code of the `for` loop into your program, figure out if
    you can write, draw, or explain how the `for` loop will work differently than
    the `while` loop did. If you can understand the differences, you will learn a
    lot more about how your `for` loop works.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing numbers – the hard version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What exactly is the logic when using a `for` loop instead of a `while` loop?
    As we noted earlier, the `for` loop is more defined to run a specific number of
    times. So, with our for `i` in `range(guesses)`, we are really saying this:'
  prefs: []
  type: TYPE_NORMAL
- en: For the first guess, do this thing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the second guess, do this thing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the third guess, if the player is still incorrect, stop the `for` loop,
    print the message, and run the `play_again()` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that you have a better concept of the logic, let''s add these lines of
    code to the `for` loop in our `difficulty_level_hard()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in the first line of code beneath the `for` loop, we use a `raw_input()`
    function that we assign to the variable `guess` to get information from the user.
    Then, we make *win conditions* for the hard version of the game. In this case,
    if `i` (the number of `guesses`) is equal to `2`, then the game restarts. This
    is because the range function we are using starts counting from `zero`, so the
    three computer numbers are `0`, `1`, and `2`. The first two lines of our `for`
    loop use a comparison operator (`==`) to check whether the user has had too many
    guesses. If the user *HAS* tried too many times, then the loop ends and the `Game
    over. Too many guesses` message is printed.
  prefs: []
  type: TYPE_NORMAL
- en: We have decided what happens if the user has too many guesses in the `for` loop.
    Now, we will define what happens if a player is too high or too low in terms of
    their guess. We use the same comparison operators of greater than (`>`), less
    than (`<`), and equal to (`==`) that we used in the easy version, and we print
    a message if the user is too high or too low.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that we call the `play_again()` function twice. We offer the user the
    chance to `play_again()` if they lose by guessing too many times or when they
    win. Losing and winning are both times when the `for` loop will stop running,
    so we need to make sure we have added the `play_again()` function after both of
    these conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Comparing numbers – the hard version](img/B04681_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Play test the whole program!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now you get to see exactly how you did! Go to your terminal and run your program
    again by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'First, make sure that the program works. If you get errors right away, double-check
    your code to make sure it does not have any problems, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: spacing or indents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: typos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: syntax (punctuation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are some common problems that people have with their programs. Usually,
    you will get an error message called `Trace` or `stacktrace` that will tell you
    what line in your code is causing the problem. Here is an example of what happens
    when the user types the word `three` instead of the number `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Play test the whole program!](img/B04681_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are some things called *test cases* that you will want to try before
    letting other people play your game. Good programmers need to think about how
    their program works, and they also need to think about the things a user can do
    that might break the program. The following are some tests you can run. Some might
    break your program:'
  prefs: []
  type: TYPE_NORMAL
- en: Does your game work in both the easy *AND* the hard version?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens if you type `quit`?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens if you enter a number higher than 99?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens when you type the word `three` instead of the number `3`?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you force the program to print errors (there are ways to make your program
    have errors, so be creative)? If so, notice your error messages, and think about
    how to prevent errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are some errors that you might not understand, and that is okay. You can
    always perform an Internet search to look up the error message and check what
    other people have learned about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have tested the game and feel ready to share it, ask others to play
    it and watch as they interact with your game. Ask yourself some questions while
    you watch your user play:'
  prefs: []
  type: TYPE_NORMAL
- en: What was easy for the user to understand?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What was hard for the user to understand?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What errors did the user make?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How could I change the game code to make the game better?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a programmer, you will learn how to be a creative problem solver. If you
    see something in this program that you want to rewrite, you should try it! Keep
    a backup copy of your working code, and then start to experiment with some different
    options. Some examples you can use are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Make the range of the hard program larger so that it is more difficult for the
    user to guess correctly (`0, 1000`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add your own personal touch to each message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a variable to take the username and print it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each of the preceding examples are ways in which you can challenge yourself
    and take the program further! Check your program against the following screenshot,
    and figure out whether you can answer some quick questions about what you learned
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Play test the whole program!](img/B04681_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A quick task for you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1\. What is a Boolean?
  prefs: []
  type: TYPE_NORMAL
- en: A statement that is either `True` or `False`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A statement with many possible outcomes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Used as a variable name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Used as a place
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Why are global variables helpful?
  prefs: []
  type: TYPE_NORMAL
- en: They are limited to what they can do
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They can be used in any function in the file where they are set
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They can be changed inside the function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choice 2 and 3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. `for` loops are similar to `while` loops. How is a `for` loop different
    from a `while` loop?
  prefs: []
  type: TYPE_NORMAL
- en: '`for` loops are used to loop a specified number of times'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`for` loops are used only for text'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`for` loops are used only for numbers'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`for` loops can only work with dictionaries'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. What would be a good time to use a `while` loop in a game?
  prefs: []
  type: TYPE_NORMAL
- en: To run a game a specified number of times
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To run a game forever
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To keep a game going while a certain condition is true
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To end the game
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q5\. What symbol is used to write comments in the code that are not a part of
    the code?
  prefs: []
  type: TYPE_NORMAL
- en: '?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ()
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '#'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to build a game using loops and logic. The game,
    Higher or Lower, has an easy version and a difficult version. Input from the player
    is used by the game to make decisions about what code will run next.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about how to work with some data, including
    how to store and retrieve information. These skills will help us to learn how
    to do things such as ask for player names, include player names in our games,
    and store scores in the program. All of these skills are important to build a
    complete and interesting game experience.
  prefs: []
  type: TYPE_NORMAL
