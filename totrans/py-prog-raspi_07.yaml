- en: Requests and Web Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求和Web框架
- en: The main topics of this chapter are requests and web frameworks in Python. We
    are going to discuss libraries and frameworks that enable retrieving data from
    the Web (for example, get weather updates), upload data to a remote server (for
    example, log sensor data), or control appliances on a local network. We will also
    discuss topics that will help with learning the core topics of this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要主题是Python中的请求和Web框架。我们将讨论使从网络检索数据（例如，获取天气更新）、上传数据到远程服务器（例如，记录传感器数据）或控制本地网络上的设备成为可能的库和框架。我们还将讨论有助于学习本章核心主题的话题。
- en: The try/except keywords
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: try/except关键字
- en: So far, we have reviewed and tested all our examples assuming the ideal condition,
    that is, the execution of the program will encounter no errors. On the contrary,
    applications fail from time to time either due to external factors, such as invalid
    user input and poor Internet connectivity, or program logic errors caused by the
    programmer. In such cases, we want the program to report/log the nature of error
    and either continue its execution or clean up resources before exiting the program.
    The `try`/`except` keywords offer a mechanism to trap an error that occurs during
    a program's execution and take remedial action. Because it is possible to trap
    and log an error in crucial parts of the code, the `try`/`except` keywords are
    especially useful while debugging an application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们假设理想条件，即程序执行将不会遇到错误，来审查和测试了所有我们的示例。相反，应用程序有时会因外部因素（例如无效的用户输入和差的互联网连接）或程序员造成的程序逻辑错误而失败。在这种情况下，我们希望程序报告/记录错误的性质，并在退出程序之前继续执行或清理资源。`try`/`except`关键字提供了一种在程序执行过程中捕获错误并采取补救措施的方法。由于可以在代码的关键部分捕获和记录错误，因此`try`/`except`关键字在调试应用程序时特别有用。
- en: 'Let''s understand the `try`/`except` keywords by comparing two examples. Let''s
    build a simple guessing game where the user is asked to guess a number between
    0 and 9:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比较两个示例来了解`try`/`except`关键字。让我们构建一个简单的猜数字游戏，用户被要求猜测一个介于0到9之间的数字：
- en: A random number (between 0 and 9) is generated using Python's `random` module.
    If the user's guess of the generated number is right, the Python program declares
    the user as the winner and exits the game.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Python的`random`模块生成一个随机数（介于0到9之间）。如果用户猜对了生成的数字，Python程序宣布用户为赢家并退出游戏。
- en: If the user input is the letter `x`, the program quits the game.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户输入是字母`x`，程序将退出游戏。
- en: The user input is converted into an integer using the `int()` function. A sanity
    check is performed to determine whether the user input is a number between 0 and
    9.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入通过`int()`函数转换为整数。进行合理性检查以确定用户输入是否在0到9之间。
- en: The integer is compared against a random number. If they are the same, the user
    is declared the winner and the program exits the game.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整数与一个随机数进行比较。如果它们相同，用户被宣布为赢家，程序退出游戏。
- en: 'Let''s observe what happens when we deliberately provide an erroneous input
    to this program (the code snippet shown here is available for download along with
    this chapter as `guessing_game.py`):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们观察当我们故意向这个程序提供错误输入时会发生什么（这里显示的代码片段可以与本章一起作为`guessing_game.py`下载）：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s execute the preceding code snippet and provide the input `hello` to
    the program:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行前面的代码片段，并将输入`hello`提供给程序：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding example, the program fails when it is trying to convert the
    user input `hello` to an integer. The program execution ends with an exception.
    An exception highlights the line where the error has occurred. In this case, it
    has occurred in line 10:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，程序在尝试将用户输入`hello`转换为整数时失败。程序执行以异常结束。异常突出了错误发生的位置。在这种情况下，它发生在第10行：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The nature of the error is also highlighted in the exception. In this example,
    the last line indicates that the exception thrown is `ValueError`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 错误的性质也在异常中得到了强调。在这个例子中，最后一行表明抛出的异常是`ValueError`：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s discuss the same example (available for download along with this chapter
    as `try_and_except.py`) that makes use of the `try`/`except` keywords. It is possible
    to continue playing the game after trapping this exception and printing it to
    the screen. We have the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论相同的示例（可以与本章一起作为`try_and_except.py`下载），它使用了`try`/`except`关键字。在捕获此异常并将其打印到屏幕后，可以继续玩游戏。我们有以下代码：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s discuss how the same example works with the `try`/`except` keywords:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下使用`try`/`except`关键字时相同的示例是如何工作的：
- en: From the previous example, we know that when a user provides the wrong input
    (for example, a letter instead of a number between 0 and 9), the exception occurs
    at line 10 (where the user input is converted into an integer), and the nature
    of the error is named `ValueError`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前面的示例中，我们知道当用户提供错误的输入（例如，0到9之间的字母而不是数字）时，异常会在第10行（用户输入转换为整数的地方）发生，错误的性质被命名为`ValueError`。
- en: 'It is possible to avoid interruption of the program''s execution by wrapping
    this in a `try...except` block:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过将这段代码包裹在`try...except`块中来避免程序执行的中断：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: On receiving a user input, the program attempts converting the user input into
    an integer under the `try` block.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接收到用户输入后，程序尝试在`try`块中将用户输入转换为整数。
- en: 'If `ValueError` has occurred, `error` is trapped by the `except` block, and
    the following message is printed to the screen along with the actual error message:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果发生了`ValueError`，`error`会被`except`块捕获，并且实际错误信息会与以下信息一起打印到屏幕上：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Try executing the code example and try providing an invalid input. You will
    note that the program prints the error message (along with the nature of the error)
    and goes back to the top of the game loop and continues seeking valid user input:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试执行代码示例，并尝试提供一个无效的输入。你会注意到程序会打印出错误信息（包括错误的性质），然后回到游戏循环的顶部并继续寻找有效的用户输入：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `try...except` block comes with a substantial processing power cost. Hence,
    it is important to keep the `try...except` block as short as possible. Because
    we know that the error occurs on the line where we attempt converting the user
    input into an integer, we wrap it in a `try...except` block to trap an error.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`try...except`块伴随着大量的处理能力成本。因此，保持`try...except`块尽可能短是很重要的。因为我们知道错误发生在我们尝试将用户输入转换为整数的那一行，所以我们将其包裹在`try...except`块中以捕获错误。'
- en: Thus, the `try`/`except` keywords are used to prevent any abnormal behavior
    in a program's execution due to an error. It enables logging the error and taking
    remedial action. Similar to the `try...except` block, there are also `try...except...else`
    and `try...except...else` code blocks. Let's quickly review those options with
    a couple of examples.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`try`/`except`关键字用于防止程序执行过程中由于错误导致的任何异常行为。它允许记录错误并采取补救措施。类似于`try...except`块，也存在`try...except...else`和`try...except...else`代码块。让我们通过几个示例快速回顾这些选项。
- en: try...except...else
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: try...except...else
- en: 'The `try...except...else` block is especially useful when we want a certain
    block of code to be executed only when no exceptions are raised. In order to demonstrate
    this concept, let''s rewrite the guessing game example using this block:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`try...except...else`块在当我们只想在没有引发异常的情况下执行特定代码块时特别有用。为了演示这个概念，让我们使用这个块重写猜数字游戏示例：'
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The modified guessing game example that makes use of the `try...except...else` block
    is available for download along with this chapter as `try_except_else.py`. In
    this example, the program compares the user input against the random number only
    if a valid user input was received. It otherwise skips the `else` block and goes
    back to the top of the loop to accept the next user input. Thus, `try...except...else` is
    used when we want a specific code block to be executed when no exceptions are
    raised due to the code in the `try` block.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的猜数字游戏示例，它使用了`try...except...else`块，可以与本章一起下载，文件名为`try_except_else.py`。在这个示例中，程序只有在接收到有效的用户输入时才会将用户输入与随机数进行比较。否则，它会跳过`else`块，并回到循环的顶部以接受下一个用户输入。因此，当我们在`try`块中没有因为代码而引发异常时，会使用`try...except...else`。
- en: try...except...else...finally
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: try...except...else...finally
- en: As the name suggests, the `finally` block is used to execute a block of code
    on leaving the `try` block. This block of code is executed even after an exception
    is raised. This is useful in scenarios where we need to clean up resources and
    free up memory before moving on to the next stage.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，`finally`块用于在离开`try`块时执行一段代码。即使在抛出异常之后，这段代码也会被执行。这在我们需要在进入下一阶段之前清理资源并释放内存的情况下非常有用。
- en: 'Let''s demonstrate the function of the `finally` block using our guessing game.
    To understand how the `finally` keyword works, let''s make use of a counter variable
    named `count` that is incremented in the `finally` block, and another counter
    variable named `valid_count` that is incremented in the `else` block. We have
    the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过我们的猜谜游戏来演示`finally`块的功能。为了理解`finally`关键字的工作原理，让我们使用一个名为`count`的计数变量，它在`finally`块中递增，以及另一个名为`valid_count`的计数变量，它在`else`块中递增。以下是我们的代码：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding code snippet is from the `try_except_else_finally.py` code sample (available
    for download along with this chapter). Try executing the code sample and playing
    the game. You will note the total number of attempts it took to win the game and
    the number of inputs that were valid:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段来自`try_except_else_finally.py`代码示例（与本章一起提供下载）。尝试执行代码示例并玩游戏。你会注意到赢得游戏所需的尝试总数以及有效输入的数量：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This demonstrates how the `try-except-else-finally` block works. Any code under
    the `else` keyword is executed when the critical code block (under the `try` keyword)
    is executed successfully, whereas the code block under the `finally` keyword is
    executed while exiting the `try...except` block (useful for cleaning up resources
    while exiting a code block).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这演示了`try-except-else-finally`块的工作原理。当关键的代码块（在`try`关键字下）成功执行时，任何在`else`关键字下的代码都会执行，而`finally`关键字下的代码块在退出`try...except`块时执行（在退出代码块时清理资源很有用）。
- en: Try providing invalid inputs while playing the game using the previous code
    example to understand the code block flow.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩游戏时，尝试使用之前的代码示例提供无效的输入，以了解代码块流程。
- en: Connecting to the Internet - web requests
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到互联网 - 网络请求
- en: Now that we discussed the `try`/`except` keywords, let's make use of it to build
    a simple application that connects to the Internet. We will write a simple application
    that retrieves the current time from the Internet. We will be making use of the
    `requests` library for Python ([http://requests.readthedocs.io/en/master/#](http://requests.readthedocs.io/en/master/#)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了`try`/`except`关键字，让我们利用它来构建一个简单的应用程序，该程序可以连接到互联网。我们将编写一个简单的应用程序，从互联网获取当前时间。我们将使用Python的`requests`库（[http://requests.readthedocs.io/en/master/#](http://requests.readthedocs.io/en/master/#)）。
- en: 'The `requests` module enables connecting to the Web and retrieving information.
    In order to do so, we need to make use of the `get()` method from the `requests`
    module to make a request:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`requests`模块允许连接到网络并检索信息。为了做到这一点，我们需要使用`requests`模块中的`get()`方法来发送请求：'
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code snippet, we are passing a URL as an argument to the `get()`
    method. In this case, it is the URL that returns the current time in the Unix
    format ([https://en.wikipedia.org/wiki/Unix_time](https://en.wikipedia.org/wiki/Unix_time)).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们将一个URL作为参数传递给`get()`方法。在这种情况下，它是返回Unix格式当前时间的URL（[https://en.wikipedia.org/wiki/Unix_time](https://en.wikipedia.org/wiki/Unix_time)）。
- en: 'Let''s make use of the `try`/`except` keywords to make a request to get the
    current time:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`try`/`except`关键字来请求获取当前时间：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding example (available for download along with this chapter as
    `internet_access.py`), the request is made under the `try` block, and the response
    (returned by `response.text`) is printed to the screen.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例（与本章一起提供下载，文件名为`internet_access.py`）中，请求是在`try`块中发出的，并且响应（由`response.text`返回）被打印到屏幕上。
- en: 'If there is an error while executing the request to retrieve the current time,
    `ConnectionError` is raised ([http://requests.readthedocs.io/en/master/user/quickstart/#errors-and-exceptions](http://requests.readthedocs.io/en/master/user/quickstart/#errors-and-exceptions)).
    This error could either be caused by the lack of an Internet connection or an
    incorrect URL. This error is caught by the `except` block. Try running the example,
    and it should return the current time from `time.gov`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在检索当前时间时发生错误，将引发`ConnectionError`（[http://requests.readthedocs.io/en/master/user/quickstart/#errors-and-exceptions](http://requests.readthedocs.io/en/master/user/quickstart/#errors-and-exceptions)）。这个错误可能是由缺少互联网连接或错误的URL引起的。这个错误被`except`块捕获。尝试运行示例，它应该从`time.gov`返回当前时间：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The application of requests - retrieving weather information
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`requests`库的应用 - 获取天气信息'
- en: 'Let''s make use of the `requests` module to retrieve the weather information
    for the city of San Francisco. We will be making use of the **OpenWeatherMap**
    API ([openweathermap.org](http://openweathermap.org)) to retrieve the weather
    information:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`requests`模块来检索旧金山市的天气信息。我们将使用**OpenWeatherMap** API ([openweathermap.org](http://openweathermap.org))来检索天气信息：
- en: 'In order to make use of the API, sign up for an API account and get an API
    key (it is free of charge):'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用API，注册一个API账户并获取一个API密钥（免费）：
- en: '![](img/image_07_001.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_001.png)'
- en: An API key from openweathermap.org
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一个来自openweathermap.org的API密钥
- en: According to the API documentation ([openweathermap.org/current](http://openweathermap.org/current)),
    the weather information for a city can be retrieved using `http://api.openweathermap.org/data/2.5/weather?zip=SanFrancisco&appid=API_KEY&units=imperial`
    as the URL.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据API文档([openweathermap.org/current](http://openweathermap.org/current))，可以使用`http://api.openweathermap.org/data/2.5/weather?zip=SanFrancisco&appid=API_KEY&units=imperial`作为URL来检索一个城市的天气信息。
- en: 'Substitute `API_KEY` with the key from your account and use it to retrieve
    the current weather information in a browser. You should be able to retrieve the
    weather information in the following format:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`API_KEY`替换为您账户中的密钥，并在浏览器中用它来检索当前的天气信息。您应该能够以以下格式检索天气信息：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The weather information (shown previously) is returned in the JSON format. **JavaScript
    Object Notation** (**JSON**) is a data format that is widely used to exchange
    data over the Web. The main advantage of JSON format is that it is in a readable
    format and many popular programming languages support encapsulating data in JSON
    format. As shown in the earlier snippet, JSON format enables exchanging information
    in readable name/value pairs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 天气信息（如前所述）以JSON格式返回。**JavaScript对象表示法**（**JSON**）是一种广泛用于在网络上交换数据的数据格式。JSON格式的优点是它是一种可读的格式，许多流行的编程语言都支持以JSON格式封装数据。如前所述的代码片段所示，JSON格式允许以可读的名称/值对的形式交换信息。
- en: 'Let''s review retrieving the weather using the `requests` module and parsing
    the JSON data:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下使用`requests`模块检索天气并解析JSON数据的过程：
- en: Substitute the URL in the previous example (`internet_access.py`) with the one
    discussed in this example. This should return the weather information in the JSON
    format.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前面例子（`internet_access.py`）中的URL替换为本文中讨论的URL。这将返回JSON格式的天气信息。
- en: 'The requests module provides a method to parse the JSON data. The response
    could be parsed as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求模块提供了一个解析JSON数据的方法。响应可以按照以下方式解析：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `json()` function parses the response from the OpenWeatherMap API and returns
    a dictionary of different weather parameters (`json_data`) and their values.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`json()`函数解析来自OpenWeatherMap API的响应，并返回一个包含不同天气参数及其值的字典（`json_data`）。'
- en: 'Since we know the response format from the API documentation, the current temperature
    could be retrieved from the parsed response as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们知道API文档中的响应格式，我们可以按照以下方式从解析的响应中检索当前温度：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Putting it all together, we have this:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有内容整合，我们得到以下内容：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding example is available for download along with this chapter as
    `weather_example.py`. The example should display the current temperature as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子可以作为本章的附件下载，名为`weather_example.py`。该示例应显示以下当前温度：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The application of requests - publishing events to the Internet
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求的应用 - 向互联网发布事件
- en: In the previous example, we retrieved information from the Internet. Let's consider
    an example where we have to publish a sensor event somewhere on the Internet.
    This could be either a cat door opening while you are away from home or someone
    at your doorstep stepping on the doormat. Because we discussed interfacing sensors
    to the Raspberry Pi Zero in the previous chapter, let's discuss a scenario where
    we could post these events to *Slack*—a workplace communication tool, Twitter,
    or cloud services such as **Phant** ([https://data.sparkfun.com/](https://data.sparkfun.com/)).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们从互联网检索了信息。让我们考虑一个例子，其中我们不得不在互联网上的某个地方发布一个传感器事件。这可能是在您离家时猫门打开，或者有人在家门口踩到门垫。因为我们已经在上一章讨论了将传感器连接到树莓派Zero，让我们讨论一个可以将这些事件发布到*Slack*（一个工作场所沟通工具）、Twitter或云服务（如**Phant**
    [https://data.sparkfun.com/](https://data.sparkfun.com/)）的场景。
- en: 'In this example, we will post these events to Slack using `requests`. Let''s
    send a direct message to ourselves on Slack whenever a sensor event such as a
    cat door opening occurs. We need a URL to post these sensor events to Slack. Let''s
    review generating a URL in order to post sensor events to Slack:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将使用`requests`将这些事件发布到Slack。每当发生类似猫门开启的传感器事件时，我们都会给自己发送一条直接消息。我们需要一个URL来将这些传感器事件发布到Slack。让我们回顾一下如何生成一个URL以发布传感器事件到Slack：
- en: The first step in generating a URL is creating an *incoming webhook*. A webhook
    is a type request that can post messages that are carried as a payload to applications
    such as Slack.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成URL的第一步是创建一个*incoming webhook*。Webhook是一种请求类型，可以将作为有效载荷的消息发布到像Slack这样的应用程序。
- en: 'If you are a member of a Slack team named *TeamX*, launch your team''s application
    directory, namely `teamx.slack.com/apps` in a browser:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你是名为*TeamX*的Slack团队的一员，请在浏览器中打开您的团队应用目录，即`teamx.slack.com/apps`：
- en: '![](img/image_07_002.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_002.png)'
- en: Launch your team's app directory
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 启动您的团队应用目录
- en: 'Search for `incoming webhooks` in your app directory and select the first option,
    Incoming WebHooks (as shown in the following screenshot):'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的应用目录中搜索“incoming webhooks”并选择第一个选项，即Incoming WebHooks（如下面的截图所示）：
- en: '![](img/image_07_003.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_003.png)'
- en: Select incoming webhooks
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“incoming webhooks”
- en: 'Click on Add Configuration:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加配置：
- en: '![](img/image_07_004.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_004.png)'
- en: Add Configuration
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 添加配置
- en: 'Let''s send a private message to ourselves when an event occurs. Select Privately
    to           (you) as the option and create a webhook by clicking on Add Incoming
    WebHooks integration:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当发生事件时，让我们给自己发送一条私密消息。选择“私下发送给你”作为选项，并通过点击添加Incoming WebHooks集成来创建webhook：
- en: '![](img/image_07_005.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_005.png)'
- en: Select Privately to you
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“私下发送给你”
- en: 'We have generated a URL to send direct messages about sensor events (URL partially
    concealed):'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经生成了一个用于发送关于传感器事件的直接消息的URL（URL部分被隐藏）：
- en: '![](img/image_07_006.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_006.png)'
- en: Generated URL
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的URL
- en: Now, we can send direct message to ourselves on Slack using the previously-mentioned
    URL. The sensor event can be published to Slack as a JSON payload. Let's review
    posting a sensor event to Slack.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用之前提到的URL直接在Slack上给自己发送消息。传感器事件可以作为JSON有效载荷发布到Slack。让我们回顾一下如何将传感器事件发布到Slack。
- en: 'For example, let''s consider posting a message when a cat door opens. The first
    step is preparing the JSON payload for the message. According to the Slack API
    documentation ([https://api.slack.com/custom-integrations)](https://api.slack.com/custom-integrations)),
    the message payload needs to be in the following format:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，让我们考虑在猫门打开时发布一条消息。第一步是为消息准备JSON有效载荷。根据Slack API文档（[https://api.slack.com/custom-integrations](https://api.slack.com/custom-integrations)），消息有效载荷需要以下格式：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In order to publish this event, we will make use of the `post()` method from
    the `requests` module. The data payload needs to be encoded in JSON format while
    posting it:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了发布此事件，我们将使用`requests`模块中的`post()`方法。在发布时，数据有效载荷需要以JSON格式编码：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Putting it all together, we have this:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有这些放在一起，我们得到这个：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: On posting the message, the request returns `ok` as a response. This indicates
    that the post was successful.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发布消息时，请求返回`ok`作为响应。这表示发布成功。
- en: 'Generate your own URL and execute the preceding example (available for download
    along with this chapter as `slack_post.py`). You will receive a direct message
    on Slack:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成您自己的URL并执行前面的示例（作为本章的附件`slack_post.py`提供下载）。您将在Slack上收到一条直接消息：
- en: '![](img/image_07_007.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_007.png)'
- en: Direct message on Slack
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Slack上的直接消息
- en: Now, try interfacing a sensor to the Raspberry Pi Zero (discussed in previous
    chapters) and post the sensor events to Slack.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试将传感器连接到Raspberry Pi Zero（在前面章节中讨论过）并将传感器事件发布到Slack。
- en: It is also possible to post sensor events to Twitter and have your Raspberry
    Pi Zero check for new e-mails and so on. Check this book's website for more examples.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以将传感器事件发布到Twitter，并让您的Raspberry Pi Zero检查新电子邮件等。请查看本书的网站以获取更多示例。
- en: Flask web framework
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask Web框架
- en: In our final section, we will discuss web frameworks in Python. We will discuss
    the Flask framework ([http://flask.pocoo.org/](http://flask.pocoo.org/)). Python-based
    frameworks enable interfacing sensors to a network using the Raspberry Pi Zero.
    This enables controlling appliances and reading data from sensors from anywhere
    within a network. Let's get started!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最后一节中，我们将讨论 Python 中的 Web 框架。我们将讨论 Flask 框架 ([http://flask.pocoo.org/](http://flask.pocoo.org/))。基于
    Python 的框架允许使用 Raspberry Pi Zero 将传感器连接到网络。这使得可以在网络内的任何地方控制电器和读取传感器的数据。让我们开始吧！
- en: Installing Flask
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Flask
- en: 'The first step is installing the Flask framework. It can be done as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是安装 Flask 框架。可以按照以下步骤进行：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Building our first example
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的第一个示例
- en: 'The Flask framework documentation explains building the first example. Modify
    the example from the documentation as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 框架文档解释了如何构建第一个示例。按照以下方式修改文档中的示例：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Launch this example (available for download along with this chapter as `flask_example.py`)
    and it should launch a server on the Raspberry Pi Zero visible to the network.
    On another computer, launch a browser and enter the IP address of the Raspberry
    Pi Zero along with port number, `5000`, as a suffix (as shown in the following
    snapshot). It should take you to the index page of the server that displays the
    message Hello World!:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 启动此示例（与本章一起提供下载，名为 `flask_example.py`），它应该在 Raspberry Pi Zero 上启动一个对网络可见的服务器。在另一台计算机上，启动浏览器并输入
    Raspberry Pi Zero 的 IP 地址以及端口号 `5000` 作为后缀（如下面的快照所示）。它应该带您到显示消息 Hello World! 的服务器索引页面：
- en: '![](img/image_07_008.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_008.png)'
- en: The Flask framework-based web server on the Raspberry Pi Zero
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Flask 框架的 Raspberry Pi Zero 上的 Web 服务器
- en: You can find the IP address of your Raspberry Pi Zero using the `ifconfig` command
    on the command-line terminal.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用命令行终端上的 `ifconfig` 命令找到您的 Raspberry Pi Zero 的 IP 地址。
- en: Controlling appliances using the Flask framework
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flask 框架控制电器
- en: 'Let''s try turning on/off appliances at home using the Flask framework. In
    previous chapters, we made use of *PowerSwitch Tail II* to control a table lamp
    using the Raspberry Pi Zero. Let''s try to control the same using the Flask framework.
    Connect PowerSwitch Tail, as shown in the following figure:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用 Flask 框架在家中的电器上打开/关闭。在之前的章节中，我们使用了 *PowerSwitch Tail II* 通过 Raspberry
    Pi Zero 控制台灯。让我们尝试使用 Flask 框架来控制它。按照以下图示连接 PowerSwitch Tail：
- en: '![](img/image_07_009.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_009.png)'
- en: Controlling a table lamp using the Flask framework
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Flask 框架控制台灯
- en: 'According to the Flask framework documentation, it is possible to route a URL
    to a specific function. For example, it is possible to bind `/lamp/<control>`
    using `route()` to the `control()` function:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Flask框架文档，可以将URL路由到特定的函数。例如，可以使用 `route()` 将 `/lamp/<control>` 绑定到 `control()`
    函数：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding code snippet, `<control>` is a variable that can be passed
    on as an argument to the binding function. This enables us to turn the lamp on/off.
    For example, `<IP address>:5000/lamp/on` turns on the lamp, and vice versa. Putting
    it all together, we have this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`<control>` 是一个可以作为参数传递给绑定函数的变量。这使得我们能够控制灯的开关。例如，`<IP地址>:5000/lamp/on`
    会打开灯，反之亦然。将所有这些放在一起，我们得到如下：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding example is available for download along with this chapter as
    `appliance_control.py`. Launch the Flask-based web server and open a web server
    on another computer. In order to turn on the lamp, enter `<IP Address of the Raspberry
    Pi Zero>:5000/lamp/on` as URL:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例作为 `appliance_control.py` 与本章一起提供下载。启动基于 Flask 的 Web 服务器，并在另一台计算机上打开一个
    Web 服务器。为了打开灯，输入 `<Raspberry Pi Zero 的 IP 地址>:5000/lamp/on` 作为 URL：
- en: 'This should turn on the lamp:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会打开灯：
- en: '![](img/image_07_010.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_010.png)'
- en: Thus, we have built a simple framework that enables controlling appliances within
    the network. It is possible to include buttons to an HTML page and route them
    to a specific URL to perform a specific function. There are several other frameworks
    in Python that enable developing web applications. We have merely introduced you
    to different applications that are possible with Python. We recommend that you check
    out this book's website for more examples, such as controlling Halloween decorations
    and other holiday decorations using the Flask framework.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经构建了一个简单的框架，该框架能够控制网络内的电器。可以在HTML页面中添加按钮并将它们路由到特定的URL以执行特定功能。Python中还有其他几个框架可以用来开发Web应用程序。我们只是向您介绍了Python可能实现的不同应用。我们建议您查看本书的网站以获取更多示例，例如使用Flask框架控制万圣节装饰和其他节日装饰。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the `try`/`except` keywords in Python. We also
    discussed developing applications that retrieves information from the Internet,
    as well as publishing sensor events to the Internet. We also discussed the Flask
    web framework for Python and demonstrated the control of appliances within a network.
    In the next chapter, we will discuss some advanced topics in Python.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Python中的`try`/`except`关键字。我们还讨论了开发从互联网检索信息的应用程序以及将传感器事件发布到互联网的应用程序。我们还讨论了Python的Flask
    Web框架，并演示了在网络内控制电器。在下一章中，我们将讨论Python的一些高级主题。
