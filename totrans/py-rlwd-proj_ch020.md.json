["```py\n[x.location]\n    mean = 9.0\n[x.spread]\n    variance = 11.0\n[y.location]\n    mean = 7.5\n[y.spread]\n    variance = 4.125\n```", "```py\n{\n    some metadata here...\n\n    ’x’: {\n        ’location’: {\n            ’mean’: 9.0\n        },\n        ’spread’: {\n            ’variance’: 11.0\n        }\n    },\n    ’y’: {\n        etc.\n    }\n}\n```", "```py\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# Labels and Title\nax.set_xlabel(’X’)\nax.set_ylabel(’Y’)\nax.set_title(’Series I’)\n\n# Draw Scatter\n_ = ax.scatter(x, y)\n```", "```py\n    plt.savefig(’scatter_x_y.png’)\n    plt.close(fig)\n```", "```py\n![Alt text to include!](path/to/file.png \"Figure caption\")\n```", "```py\n<figure>\n    <img src=\"img/file.png\"\n         alt=\"Alt text to include\"\n         height=\"8cm\">\n    <figcaption>Figure caption</figcaption>\n</figure>\n```", "```py\n..  figure:: path/to/file.png\n   :height: 8cm\n   :alt: Alt text to include\n\n   Figure caption\n```", "```py\n@fixture\ndef mocked_plt_module(monkeypatch):\n    fig_mock = Mock()\n    ax_mock = Mock(\n        set_xlabel=Mock(),\n        set_ylabel=Mock(),\n        set_tiutle=Mock(),\n        scatter=Mock(),\n    )\n    plt_mock = Mock(\n        subplots=Mock(\n            return_value=(fig_mock, ax_mock)\n        ),\n        savefig=Mock(),\n        close=Mock()\n    )\n    monkeypatch.setattr(summary_app, ’plt’, plt_mock)\n    return plt_mock, fig_mock, ax_mock\n```", "```py\ndef test_scatter(mocked_plt_module):\n    plt_mock, fig_mock, ax_mock = mocked_plt_module\n    summary_app.scatter_figure([sentinel.X], [sentinel.Y])\n\n    assert plt_mock.subplots.mock_calls == [call()]\n    assert plt_mock.savefig.mock_calls == [call(’scatter_x_y.png’)]\n    assert plt_mock.close.mock_calls == [call(fig_mock)]\n```", "```py\nimport pandas as pd\n\ndf = pd.DataFrame([dict(s) for s in series_data])\n```", "```py\nimport numpy as np\n\nx = np.array(s.x for s in series_data)\ny = np.array(s.y for s in series_data)\n```", "```py\nimport numpy as np\n\na = np.array([[s.x, s.y] for s in series_data])\nprint(f\"means = {a.mean(axis=0)}\")\n```", "```py\nimport numpy as np\n\nA = np.array([[s.x, 1] for s in series_data])\ny = np.array([s.y for s in series_data])\nm, b = np.linalg.lstsq(A, y, rcond=None)[0]\nprint(f\"y = {m:.1f}x + {b:.1f}\")\n```", "```py\nimport numpy as np\n\nx = np.array([[s.x] for s in series_data])\ny = np.array([s.y for s in series_data])\n```", "```py\nfrom sklearn import linear_model\n\nreg = linear_model.LinearRegression()\nreg.fit(x, y)\nprint(f\"y = {reg.coef_[0]:.1f}x + {reg.intercept_:.1f}\")\n```"]