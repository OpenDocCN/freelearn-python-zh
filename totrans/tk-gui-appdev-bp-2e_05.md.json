["```py\npip3 install pyglet\n```", "```py\npip3 install pmw \n```", "```py\n>> import pyglet, Pmw\n>>> pyglet.version\n '1.3.0'\n>>> Pmw.version()\n '2.0.1' \n```", "```py\nclass Model:\n  def __init__(self):\n    pass\n```", "```py\nimport pyglet\nclass Player():\n  def __init__(self):\n    pass\n```", "```py\nimport tkinter as tk\nimport tkinter.filedialog\nimport tkinter.messagebox\nimport tkinter.ttk\n```", "```py\nimport model\nimport player\n```", "```py\nif __name__ == '__main__':\n  root = Tk()\n  root.resizable(width=False, height=False)\n  player = player.Player()\n  model = model.Model()\n  app = View(root, model, player)\n  root.mainloop()\n```", "```py\n class View:\n   def __init__(self,root, model, player):\n    self.root = root\n    self.model = model\n    self.player = player\n    self.create_gui()\n\n  def create_gui(self):\n    self.root.title(AUDIO_PLAYER_NAME)\n    self.create_top_display()\n    self.create_button_frame()\n    self.create_list_box()\n    self.create_bottom_frame()\n    self.create_context_menu()\n\n```", "```py\n    button=tk.Button(parent, image=previous_track_icon)\n    ```", "```py\n    self.volume_scale = tkinter.ttk.Scale(frame, from_=0.0, to=1.0, command=self.on_volume_scale_changed)\n    ```", "```py\n    self.list_box = tk.Listbox(frame, activestyle='none', cursor='hand2', bg='#1C3D7D', fg='#A0B9E9', selectmode=tk.EXTENDED, height=10)\n    ```", "```py\n on_previous_track_button_clicked()\n on_rewind_button_clicked()\n on_play_stop_button_clicked()\n on_pause_unpause_button_clicked()\n on_mute_unmute_button_clicked()\n on_fast_forward_button_clicked()\n on_next_track_button_clicked()\n on_volume_scale_changed(, value)\n on_add_file_button_clicked()\n on_remove_selected_button_clicked()\n on_add_directory_button_clicked()\n on_empty_play_list_button_clicked()\n on_remove_selected_context_menu_clicked()\n on_play_list_double_clicked(event=None)\n\n```", "```py\nclass Model:\n  def __init__(self):\n    self.__play_list = []\n\n  @property\n  def play_list(self):\n     return self.__play_list\n\n  def get_file_to_play(self, file_index):\n    return self.__play_list[file_index]\n\n  def clear_play_list(self):\n    self.__play_list.clear()\n\n  def add_to_play_list(self, file_name):\n    self.__play_list.append(file_name)\n\n  def remove_item_from_play_list_at_index(self, index):\n    del self.__play_list[index]\n```", "```py\n>>> import pyglet\n>>> help(pyglet.media) \n```", "```py\n player= pyglet.media.Player()\n source = pyglet.media.load(<<audio file to be played>>)\n player.queue(source)\n player.play()\n```", "```py\n import pyglet\n\n FORWARD_REWIND_JUMP_TIME = 20\n\n class Player:\n   def __init__(self):\n     self.player = pyglet.media.Player()\n     self.player.volume = 0.6\n\n  def play_media(self, audio_file):\n    self.reset_player()\n    self.player = pyglet.media.Player()\n    self.source = pyglet.media.load(audio_file)\n    self.player.queue(self.source)\n    self.player.play()\n\n  def reset_player(self):\n    self.player.pause()\n    self.player.delete()\n\n def is_playing(self):\n   try:\n     elapsed_time = int(self.player.time)\n     is_playing = elapsed_time < int(self.track_length)\n   except:\n     is_playing = False\n   return is_playing\n\n def seek(self, time):\n   try:\n    self.player.seek(time)\n   except AttributeError:\n    pass\n\n @property\n def track_length(self):\n   try:\n     return self.source.duration\n   except AttributeError:\n     return 0\n\n @property\n def volume(self):\n   return self.player.volume\n\n @property\n def elapsed_play_duration(self):\n  return self.player.time\n\n@volume.setter\ndef volume(self, volume):\n  self.player.volume = volume\n\ndef unpause(self):\n  self.player.play()\n\ndef pause(self):\n  self.player.pause()\n\ndef stop(self):\n  self.reset_player()\n\ndef mute(self):\n self.player.volume = 0.0\n\ndef unmute(self, newvolume_level):\n self.player.volume = newvolume_level\n\ndef fast_forward(self):\n  time = self.player.time + FORWARD_REWIND_JUMP_TIME\n  try:\n    if self.source.duration > time:\n      self.seek(time)\n    else:\n      self.seek(self.source.duration)\n  except AttributeError:\n    pass\n\ndef rewind(self):\n time = self.player.time - FORWARD_REWIND_JUMP_TIME\n try:\n   self.seek(time)\n except:\n   self.seek(0)\n```", "```py\n play_list = tk.ListBox(parent, **configurable options)\n```", "```py\n play_list.insert(0, \"First Item\")\n play_list.insert(1, \"Second Item\")\n play_list.insert(END, \"Last Item\")\n```", "```py\n play_list.curselection() # returns a tuple of all selected items\n play_list.curselection()[0] # returns first selected item\n play_list.get(1) # returns second item from the list\n play_list.get(0, END) # returns all items from the list\n```", "```py\n >>> import tkinter\n >>> help(tkinter.Listbox)\n```", "```py\ndef on_add_file_button_clicked(self):\n self.add_audio_file()\n\ndef on_remove_selected_button_clicked(self):\n self.remove_selected_file()\n\ndef on_add_directory_button_clicked(self):\n self.add_all_audio_files_from_directory()\n\ndef on_clear_play_list_button_clicked(self):\n self.clear_play_list()\n\ndef on_remove_selected_context_menu_clicked(self):\n self.remove_selected_file()\n```", "```py\ndef add_audio_file(self):\n audio_file = tkinter.filedialog.askopenfilename(filetypes=[(\n       'All supported', '.mp3 .wav'), ('.mp3 files', '.mp3'),('.wav files', '.wav')])\n if audio_file:\n   self.model.add_to_play_list(audio_file)\n   file_path, file_name = os.path.split(audio_file)\n   self.list_box.insert(tk.END, file_name)\n```", "```py\ndef remove_selected_files(self):\n try:\n  selected_indexes = self.list_box.curselection()\n  for index in reversed(selected_indexes):\n    self.list_box.delete(index)\n    self.model.remove_item_from_play_list_at_index(index)\n except IndexError:\n   pass\n```", "```py\ndef on_remove_selected_context_menu_clicked(self):\n  self.remove_selected_files()\n```", "```py\ndef add_all_audio_files_from_directory(self):\n  directory_path = tkinter.filedialog.askdirectory()\n  if not directory_path: return\n  audio_files_in_directory =  self.get_all_audio_file_from_directory(directory_path)\n  for audio_file in audio_files_in_directory:\n     self.model.add_to_play_list(audio_file)\n     file_path, file_name = os.path.split(audio_file)\n     self.list_box.insert(tk.END, file_name)\n\ndef get_all_audio_file_from_directory(self, directory_path):\n  audio_files_in_directory = []\n  for (dirpath, dirnames, filenames) in os.walk(directory_path):\n    for audio_file in filenames:\n      if audio_file.endswith(\".mp3\") or audio_file.endswith(\".wav\"):\n        audio_files_in_directory.append(dirpath + \"/\"  + audio_file)\n  return audio_files_in_directory\n```", "```py\ndef empty_play_list(self):\n self.model.empty_play_list()\n self.list_box.delete(0, END)\n```", "```py\ncurrent_track_index = 0 \n```", "```py\ntoggle_play_stop = itertools.cycle([\"play\",\"stop\"]) \n```", "```py\ndef on_play_stop_button_clicked(self):\n  action = next(self.toggle_play_stop)\n  if action == 'play':\n   try:\n     self.current_track_index = self.list_box.curselection()[0]\n   except IndexError:\n     self.current_track_index = 0\n   self.start_play()\n elif action == 'stop':\n   self.stop_play()\n\n```", "```py\ndef start_play(self):\n try:\n   audio_file = self.model.get_file_to_play(self.current_track_index)\n except IndexError:\n   return\n self.play_stop_button.config(image=self.stop_icon)\n self.player.play_media(audio_file)\n\ndef stop_play(self):\n self.play_stop_button.config(image=self.play_icon)\n self.player.stop()\n```", "```py\ndef on_play_list_double_clicked(self, event=None):\n self.current_track_index = int(self.list_box.curselection()[0])\n self.start_play()\n```", "```py\ntoggle_pause_unpause = itertools.cycle([\"pause\",\"unpause\"])\n```", "```py\ndef on_pause_unpause_button_clicked(self):\n action = next(self.toggle_pause_unpause)\n if action == 'pause':\n   self.player.pause()\n elif action == 'unpause':\n   self.player.unpause()\n\n```", "```py\ntoggle_mute_unmute = itertools.cycle([\"mute\",\"unmute\"]) \n```", "```py\ndef on_mute_unmute_button_clicked(self):\n  action = next(self.toggle_mute_unmute)\n  if action == 'mute':\n    self.volume_at_time_of_mute = self.player.volume\n    self.player.mute()\n    self.volume_scale.set(0)\n    self.mute_unmute_button.config(image=self.mute_icon)\n  elif action == 'unmute':\n    self.player.unmute(self.volume_at_time_of_mute)\n    self.volume_scale.set(self.volume_at_time_of_mute)\n    self.mute_unmute_button.config(image=self.unmute_icon)\n```", "```py\ndef on_fast_forward_button_clicked(self):\n  self.player.fast_forward()\n\ndef on_rewind_button_clicked(self):\n  self.player.rewind()\n```", "```py\ndef play_previous_track(self):\n  self.current_track_index = max(0, self.current_track_index - 1)\n  self.start_play()\n\ndef play_next_track(self):\n  self.current_track_index = min(self.list_box.size() - 1, \n    self.current_track_index + 1)\n  self.start_play()\n\n```", "```py\ndef on_previous_track_button_clicked(self):\n  self.play_previous_track()\n\ndef on_next_track_button_clicked(self):\n  self.play_next_track()\n```", "```py\ndef on_volume_scale_changed(self, value):\n  self.player.volume = self.volume_scale.get()\n  if self.volume_scale.get() == 0.0:\n    self.mute_unmute_button.config(image=self.mute_icon)\n  else:\n    self.mute_unmute_button.config(image=self.unmute_icon)\n```", "```py\nfrom tkinter import *\n\nclass Wonderwidget(Widget):\n def __init__(self, parent, **options):\n    Widget.__init__(self, parent, options)\n```", "```py\nfrom tkinter import *\n\nclass Seekbar(Canvas):\n\n  def __init__(self, parent, called_from, **options):\n    Canvas.__init__(self, parent, options)\n    self.parent = parent\n    self.width = options['width']\n    self.red_rectangle = self.create_rectangle(0, 0, 0, 0,fill=\"red\")\n    self.seekbar_knob_image = PhotoImage(file=\"../icons/seekbar_knob.gif\")\n    self.seekbar_knob = self.create_image(0, 0, \n      image=self.seekbar_knob_image)\n```", "```py\nself.seek_bar = Seekbar(frame, background=\"blue\", width=SEEKBAR_WIDTH, height=10)\nself.seek_bar.grid(row=2, columnspan=10, sticky='ew', padx=5)\n```", "```py\ndef bind_mouse_button(self):\n  self.bind('<Button-1>', self.on_seekbar_clicked)\n  self.bind('<B1-Motion>', self.on_seekbar_clicked)\n  self.tag_bind(self.red_rectangle, '<B1-Motion>',\n  self.on_seekbar_clicked)\n  self.tag_bind(self.seekbar_knob, '<B1-Motion>',\n  self.on_seekbar_clicked) \n```", "```py\ndef on_seekbar_clicked(self, event=None):\n  self.slide_to_position(event.x) \n```", "```py\ndef slide_to_position(self, new_position):\n  if 0 <= new_position <= self.width:\n  self.coords(self.red_rectangle, 0, 0, new_position, new_position)\n  self.coords(self.seekbar_knob, new_position, 0)\n  self.event_generate(\"<<SeekbarPositionChanged>>\", x=new_position)\n```", "```py\nself.root.bind(\"<<SeekbarPositionChanged>>\",self.seek_new_position)\n```", "```py\nclass TestSeekBar :\n  def __init__(self):\n    root = tk.Tk()\n    root.bind(\"<<SeekbarPositionChanged>>\", self.seek_new_position)\n    frame = tk.Frame(root)\n    frame.grid(row=1, pady=10, padx=10)\n    c = Seekbar(frame, background=\"blue\", width=360, height=10)\n    c.grid(row=2, columnspan=10, sticky='ew', padx=5)\n    root.mainloop()\n\n  def seek_new_position(self, event):\n    print(\"Dragged to x:\", event.x)\n\nif __name__ == '__main__':\n TestSeekBar()\n\n```", "```py\ndef manage_one_time_track_updates_on_play_start(self):\n  self.update_now_playing_text()\n  self.display_track_duration()\n```", "```py\ndef update_now_playing_text(self):\n  current_track = self.model.play_list[self.current_track_index]\n  file_path, file_name = os.path.split(current_track)\n  truncated_track_name = truncate_text(file_name, 40)\n  self.canvas.itemconfig(self.track_name, text=truncated_track_name)\n\ndef display_track_duration(self):\n  self.track_length = self.player.track_length\n  minutes, seconds = get_time_in_minute_seconds(self.track_length)\n  track_length_string = 'of {0:02d}:{1:02d}'.format(minutes, seconds)\n  self.canvas.itemconfig(self.track_length_text, text=track_length_string)\n```", "```py\ncanvas.itemconfig(itemid, **options).\n```", "```py\ndef animate(self):\n self.draw_frame()\n self.after(500, self.animate)\n```", "```py\ndef manage_periodic_updates_during_play(self):\n self.update_clock()\n self.update_seek_bar()\n self.root.after(1000, self.manage_periodic_updates_during_play)\n```", "```py\ndef update_clock(self):\n  self.elapsed_play_duration = self.player.elapsed_play_duration\n  minutes, seconds = get_time_in_minute_seconds(self.elapsed_play_duration)\n  current_time_string = '{0:02d}:{1:02d}'.format(minutes, seconds)\n  self.canvas.itemconfig(self.clock, text=current_time_string)\n```", "```py\ndef update_seek_bar(self):\n  seek_bar_position = SEEKBAR_WIDTH *\n  self.player.elapsed_play_duration /self.track_length\n  self.seek_bar.slide_to_position(seek_bar_position)\n```", "```py\ndef seek_new_position(self, event=None):\n time = self.player.track_length * event.x /SEEKBAR_WIDTH\n self.player.seek(time) \n```", "```py\nself.root.bind(\"<<SeekbarPositionChanged>>\", self.seek_new_position)\n```", "```py\ndef manage_periodic_updates_during_play(self):\n  self.update_clock()\n  self.update_seek_bar()\n  if not self.player.is_playing():\n    if self.not_to_loop(): return\n  self.root.after(1000, self.manage_periodic_updates_during_play)\n```", "```py\ndef not_to_loop(self):\n  selected_loop_choice = self.loop_value.get()\n  if selected_loop_choice == 1: # no loop\n    return True\n  elif selected_loop_choice == 2: # loop current\n    self.start_play()\n    return False\n  elif selected_loop_choice == 3: #loop all\n    self.play_next_track()\n  return True \n```", "```py\nself.root.protocol('WM_DELETE_WINDOW', self.close_player) \n```", "```py\ndef close_player(self):\n self.player.stop()\n self.root.destroy() \n```", "```py\nimport Pmw \n```", "```py\nself.balloon = Pmw.Balloon(self.root) \n```", "```py\nballoon.bind(name of widget, 'Description for the balloon') \n```", "```py\nself.balloon.bind(add_file_button, 'Add New File') \n```"]