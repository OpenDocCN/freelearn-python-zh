["```py\nfrom collections import defaultdict\nfrom collections.abc import Iterable, Callable\nfrom typing import TypeAlias\n\nConversion: TypeAlias = Callable[[str], int | float]\n\ndef non_numeric(test: Conversion, samples: Iterable[str]) -> dict[str, int]:\n        bad_data = defaultdict(int)\n        for s in samples:\n                try:\n                        test(s)\n                except ValueError:\n                        bad_data[s] += 1\n        return bad_data\n```", "```py\ndata = [\"2\", \"3.14\", \"42\", \"Nope\", None, \"\"]\nnon_numeroc(int, data)\n```", "```py\nfrom collections.abc import Iterable, Iterator, Callable\nfrom typing import TypeVar\n\nNum = TypeVar(’Num’)\n\ndef numeric_filter(\n    conversion: Callable[[str], Num],\n    samples: Iterable[str]\n) -> Iterator[Num]:\n        for s in samples:\n                try:\n                        yield conversion(s)\n                except ValueError:\n                        pass\n```", "```py\nwith series_4_path.open() as source_file:\n    series_4_data = list(samples_iter(source_file))\n```", "```py\nfrom statistics import median\n\ny_text = (s[’y’] for s in series_4_data)\ny = list(numeric_filter(float, y_text))\nm_y = median(y)\nmad_y = median(abs(y_i - m_y) for y_i in y)\noutliers_y = list(\n    filter(lambda m_i: m_i > 3.5, ((y_i - m_y)/mad_y for y_i in y))\n)\n```", "```py\ntime_text = \"12:34\"\n```", "```py\nimport re\n\nm = re.match(r\"(\\d+):(\\d+)\", time_text)\nh, m = map(int, m.groups())\nsec = (h*60 + m) * 60\nsec\n```", "```py\nh_m, s = divmod(sec, 60)\nh, m = divmod(h_m, 60)\ntext = f\"{h:02d}:{m:02d}\"\ntext\n```", "```py\nfor column in (’x’, ’y’):\n    values = list(\n        numeric_filter(float, (s[column] for s in series_4_data))\n    )\n    m = median(values)\n    print(column, len(series_4_data), len(values), m)\n```", "```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass AttrSummary:\n    name: str\n    raw_count: int\n    valid_count: int\n    median: float\n\n    @classmethod\n    def from_raw(\n            cls: Type[\"AttrSummary\"],\n            column: str,\n            text_values: list[str]\n    ) -> \"AttrSummary\":\n        values = list(numeric_filter(float, text_values))\n        return cls(\n            name=column,\n            raw_count=len(text_values),\n            valid_count=len(values),\n            median=median(values)\n        )\n```", "```py\nfrom collections.abc import Iterator\nfrom typing import TypeAlias\n\nSamples: TypeAlias = list[dict[str, str]]\n\ndef summary_iter(\n        samples: Samples,\n        columns: list[str]\n) -> Iterator[AttrSummary]:\n    for column in columns:\n        text = [s[column] for s in samples]\n        yield AttrSummary.from_raw(column, text)\n```", "```py\n% pytest --doctest-modules notebooks/*.py\n```", "```py\n% python -m doctest notebooks/*.py\n```", "```py\nimport datetime\n\ndef parse_date(source: str) -> datetime.datetime:\n    formats = \"%Y-%m-%d\", \"%y-%m-%d\", \"%Y-%b-%d\"\n    for fmt in formats:\n        try:\n            return datetime.datetime.strptime(source, fmt)\n        except ValueError:\n            pass\n    raise ValueError(f\"datetime data {source!r} not in any of {formats}\n      format\")\n```", "```py\nimport pytest\n\nEXAMPLES = [\n    (’2021-01-18’, datetime.datetime(2021, 1, 18, 0, 0)),\n    (’21-01-18’, datetime.datetime(2021, 1, 18, 0, 0)),\n    (’2021-jan-18’, datetime.datetime(2021, 1, 18, 0, 0)),\n]\n\n@pytest.fixture(params=EXAMPLES)\ndef date_example(request):\n    return request.param\n```", "```py\ndef test_date(date_example):\n    text, expected = date_example\n    assert parse_date(text) == expected\n```", "```py\nfrom pathlib import Path\nfrom inspection import samples_iter\n\nlocation_path = Path(\"/path/to/location.ndjson\")\nwith location_path.open() as data_file:\n    locations = list(samples_iter(data_file))\n```", "```py\nimport collections\n\ntown_id_count = collections.Counter(\n    row[’TWID’] for row in locations\n)\ntown_id_set = set(town_id_count.keys())\n```", "```py\nweather_data_path = Path(\"/path/to/weather-data.ndjson\")\nwith weather_data_path.open() as data_file:\n    weather_reports = samples_iter(data_file)\n    weather_id_count = collections.Counter(\n        row[’ID’] for row in weather_reports\n    )\n```", "```py\nweather_id_set = set(weather_id_count.keys())\n```"]