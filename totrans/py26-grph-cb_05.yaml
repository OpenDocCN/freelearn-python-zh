- en: Chapter 5. The Magic of Color
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: A limited palette of named colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nine ways of specifying color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A ball of varying shades of red
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A red color wedge of graded hue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The artist's color wheel (Newton's Color Wheel)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The numerical color mixing-matching palette
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The animated graded color wheel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tkinter's own color mixer-picker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tkinter allows you to use more than 16 million colors. That is 256 levels each
    of red, green, and blue added together. There are two main ways of specifying
    colors: by name, or as a hexadecimal value packed together as a string. A competent
    color expert can create any color possible by mixing red, green, and blue in varying
    amounts. There are accepted rules and conventions for what constitutes pleasing
    and tasteful color combinations. Sometimes you want to make shaded blends of colors
    and at other times you just want to use a limited number of colors with the minimum
    amount of both. We deal with these issues in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: A limited palette of named colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a vast list of romantically named colors like cornflower blue, misty
    rose, or papaya whip. There are about 340 of these named colors that are usable
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Colors get names because people remember them most easily in association with
    a place and an emotional mood. It is easy to remember evocative names and therefore
    easier to use them. In this example, we reduce the long list down to 140 by using
    systematic names and eliminating colors that are very similar.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Execute the program shown in exactly the same way as all the examples in previous
    chapters. What you should see on your screen is a logically laid out chart of
    rectangular color swatches. Each will have its callable name on it. These are
    names you can use in Python/Tkinter programs and they will be correctly displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This program uses techniques developed in [Chapter 2](ch02.html "Chapter 2. Drawing
    Fundamental Shapes"), *Drawing Fundamental Shapes*. There are eight lists of named
    colors grouped in color families with each family arranged in a logical sequence.
    The main technique was to use a general purpose function that would use a pre-defined
    rectangle and using a `for` loop, work through the list of color names in sequence.
    With each iteration of the loop, a rectangle is filled with that color and the
    color name is printed across it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These colors were chosen by trial and error to provide a reasonably wide palette
    suitable for most purposes. In the numbered sequences of colors like red where
    red1, red2, red3, and red4 represent increasingly darker shades, colors that are
    very similar to other colors in their neighborhood have been left out. It was
    also discovered that many colors were fake in that they are painted onto the canvas
    as grey.
  prefs: []
  type: TYPE_NORMAL
- en: The complete set of color names that Tkinter recognizes are found at [http://wiki.tcl.tk/16166](http://wiki.tcl.tk/16166)
  prefs: []
  type: TYPE_NORMAL
- en: To get fine shadings of the primary colors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To achieve the subtle shadings and graduations of color combination, you need
    to mix the primary colors used on computer screens in controlled amounts. We begin
    this process in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: A more compact color list
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An even shorter sub-set of useful named colors are in the following color lists:'
  prefs: []
  type: TYPE_NORMAL
- en: white_Colors = "white", "lemon chiffon", "honeydew","aliceblue","thistle", "misty
    rose"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: blue_Colors = "blue","blue4","SlateBlue1","dodger blue","steelblue","sky blue"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: grey_Colors ="SlateGray3", "SlateGray4", "LightGrey", "DarkGray", "DimGray",
    "LightSlateGray"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cyan_Colors = "CadetBlue1", "cyan", "cyan4", "LightSeaGreen", "aquamarine",
    "aquamarine3"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: red_Colors = "light pink","IndianRed1","red","red2","red3","red4"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pink_Colors = "light pink","deeppink","hot pink","HotPink3","LightPink","LightPink2"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: magenta_Colors = "PaleVioletRed1", "maroon", "maroon1", "magenta","magenta4",
    "orchid1"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: purple_Colors = "purple", "purple4", "MediumPurple1", "plum2", "MediumOrchid",
    "DarkOrchid"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: brown_Colors = "orange", "DarkOrange1", "DarkOrange2", "DarkOrange3", "DarkOrange4",
    "saddle brown"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: green_Colors = "green", "green3", "green4"," chartreuse"," green yellow", "SpringGreen2"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: yellow_Colors= "light yellow", "yellow", "yellow3","gold", "goldenrod1", "Khaki"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you cut and paste these lists to replace the previous ones in `systematic_colorNames_1.py`,
    you will have a smaller, easier to manage, palette of 55 colors that you may find
    simpler to use.
  prefs: []
  type: TYPE_NORMAL
- en: Nine ways of specifying color
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this recipe we see an example of all the valid types of color specification.
    Basically there are two methods of specifying color that Tkinter recognizes, but
    there are a total of nine ways of expressing these. Thanks to the Python designers,
    the system is flexible and accepts all without complaint.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Execute the program shown in exactly the same way as all the examples in [Chapter
    2](ch02.html "Chapter 2. Drawing Fundamental Shapes"), *Drawing Fundamental Shapes*
    and you will see three disks filled with red and four with blue. Each is specified
    differently.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tkinter has the different name strings defined in a dictionary somewhere inside
    the Tkinter module library.
  prefs: []
  type: TYPE_NORMAL
- en: Converting color tuples to Tkinter Hex compatible specifiers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some other languages specify colors as a numerical mixture of red, green and
    blue with each band ranging from 0 to 255 as a tuple. For example, pure red would
    be (255,0,0), pure green would be (0,255,0) and blue would be (0,0,255). A mixture
    of lots of red with a medium amount of green and just a touch of blue could be
    (230, 122, 20). These tuples are not recognized by Tkinter but the following line
    of Python code will convert any color_tuple into a color hex number that Tkinter
    will recognize and use as a color:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Tkinter_hex_color = ''#%02x%02x%02x'' % color_tuple`,'
  prefs: []
  type: TYPE_NORMAL
- en: where `color_tuple = (230, 122, 20)` or whatever numbers we choose to have in
    the tuple.
  prefs: []
  type: TYPE_NORMAL
- en: A red beachball of varying hue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We use the hexadecimal color specification scheme to make a series of color
    shades arranged in a pattern determined by predefined lists of numerical constants.
    The underlying idea is to establish a method of accessing these constants in a
    way that can be reused for quite different picture designs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Execute the program shown in exactly the usual way, and you will see a sequence
    of colored disks laid on top of each other going from dark to light shades. The
    size and location of each disk is determined by the lists `hFac` and `wFac. hfacisa`
    mnemonic for " Height factor" `andwFac` for "Width factor". The following screenshot
    shows the Graded Color Ball.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3845_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The series of images of varying shades of red disks is laid down in a specific
    sequence by a for loop. The matching shades of red are held in the sequenced list
    of hex colors. `Hex` is the short form for hexadecimal.
  prefs: []
  type: TYPE_NORMAL
- en: The variables used to specify the reference origin as well as all the other
    positional parameters have been set up so they can be reused in other patterns
    later. The important principle here is that with careful planning of our programming
    we only need to solve a problem once in a universal, designed-for-reuse way. Of
    course in practice this planned design takes more time and includes lot more experimentation
    than the simpler once-off way of writing code. Either way the whole experimental
    process starts off with writing messy, rough and ready code that 'kind-of' works.
    This initial rough work is a very necessary part of the creative process as it
    allows vaguely formed ideas to grow and evolve into effective software programs.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having ironed out a scheme for drawing shaded disks in chosen geometric arrangements,
    we can now try different arrangements and end up with richer and more useful ideas.
    The next two recipes evolve this idea into a version of the artist's color wheel
    that illustrates how to achieve any color by controlled mixing of primary colors.
  prefs: []
  type: TYPE_NORMAL
- en: A red color wedge of graded hue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We create a wedge-shaped segment to form a logical pattern that can be incorporated
    into a wheel arrangement intended to show the relationships between different
    colors.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code structure used in the previous recipe is re-used here. When you execute
    the following code you will see a neat row of colored disks laid onto a dark shaded
    triangular wedge going from dark to light shades of red. The following screenshot
    shows the Graded Color Wedge.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3845_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By adjusting the numerical values in the lists `hFac` and `wFac`, we arrange
    the colored disks to fit inside a background wedge that happens to be the correct
    shape to form a one-twelfth pie slice of a circle.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The way we have named and re-renamed the color list **kula** seems redundant
    and therefore perhaps confusing. However, the method in this apparent madness
    is that if we had many other lists of colors to use at the same time, it then
    becomes much simpler to reuse existing methods.
  prefs: []
  type: TYPE_NORMAL
- en: Newton's grand wheel of color mixing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We make a version of the artist's color wheel which shows how any known color
    and shade of color can be obtained by judicious mixing of the three primary colors
    of red, green and blue.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have made a set of twelve color lists. Each list represents the color that
    results when you mix colors on either side of it, except for the primary colors
    of red, green, and blue. The other critical addition to the code is the function
    `rotate(xya, xyb, theta_deg_incr)` that is used to rotate the color wedge pattern
    to a new chosen position around a central point. As some trigonometry is used
    to do the rotation, the math module needs to be imported at the top of the code.
    Each segment forms part of the complete circle of color variations. The following
    screenshot shows a version of Isaac Newton's Color Wheel.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3845_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For each color segment of the wheel a list of shaded hex color values was included
    in the list. The exact amounts of red, green, and blue to add together for colors
    that require portions of all three primary colors is not a simple matter. In general,
    to lighten a color we need to add extra amounts of the color that doesn't even
    belong to the target color. For example, if we want a pale yellow we need equal
    amounts of red and green together. But to make the yellow paler we need to add
    some blue. To darken the yellow we make sure there is no blue at all and we combine
    smaller but equal proportions of red and blue.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mixing colors is an art as much as a science. Astute color mixing demands practice
    and experimentation. Mixing colors numerically does not come naturally to the
    human brain. We need some visual-numerical-computational tools to help us mix
    colors. But the math must be invisible. It must not hamper the artist. We want
    the equivalent of tubes of primary colors and a palette to mix them on. Our palette
    must automatically display the numerical values that represent the colors we have
    mixed so that we can record and incorporate them into Python code. It would be
    cool if our palette could be placed on top of or next to portions of existing
    pictures so that we could match existing colors in the picture. Would that be
    a nice thing to have? Well, the next recipe tries to grant that wish.
  prefs: []
  type: TYPE_NORMAL
- en: The numerical color mixing matching palette
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We make a widget that allows us to easily mix any proportion of the three primary
    colors of red, green, and blue. The resulting mixture is displayed on a large
    swatch of resultant color that can be dragged around the display screen. The swatch
    is at the edge of the widget with the minimum of intervening colors. We can place
    the swatch next to any color in a picture that we wish to match and adjust the
    combined color using handy slider controls that are intuitive to use.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To produce this mixing tool we have made use of Tkinter slider controls two
    chapters before they are formally introduced. At this stage you should just copy
    and use the code without knowing the details of how they work knowing that they
    will be explained in [Chapter 7](ch07.html "Chapter 7. Combining Raster and Vector
    Pictures"),
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows a color mixing palette.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3845_05_04(a).jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Red, green, and blue color values ranging from zero (no color at all) to 255
    (full saturated primary color) are set by the position of a slider widget that
    is self explanatory to use. Every time a slider is moved, the values from all
    three sliders are combined and displayed graphically on a color swatch as well
    as numerically. There is no better way of explaining the relationships between
    primary color components expressed as 0 to 255 integer values, hexadecimal values,
    and pure or combined colors.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This widget has the swatch placed at the edge of the bottom-left corner to let
    you drag it close to an area of a picture underneath in order to be able to match
    the color visually and read off its hex value. There is also a separate window
    filled with color that can be moved freely around the screen. If you wanted to
    match a color to some portion of an image in a photo, you could place this swatch
    right next to the patch of interest in the image and move the sliders until you
    achieve a decent match and then note the hex value.
  prefs: []
  type: TYPE_NORMAL
- en: There are other tools to select colors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last example in this chapter demonstrates color mixers built in Python modules.
  prefs: []
  type: TYPE_NORMAL
- en: Is there a way to make neater slide controllers?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The use of slider widgets as a graphical method of entering numbers which need
    to share screen real estate with our canvas is sometimes inconvenient. Why can't
    we make our number controllers just another kind of drawn object inside our canvas?
    Can we make the slide controllers smaller, neater, and less obtrusive? The answer
    is yes and we explore this idea in [Chapter 7](ch07.html "Chapter 7. Combining
    Raster and Vector Pictures"),
  prefs: []
  type: TYPE_NORMAL
- en: The animated graded color wheel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We draw a smoothly-graded version of the artists color mixing wheel and animate
    it to allow the viewer to watch how the `rgb` hex color value changes as the blended
    color spectrum is being drawn.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy, save, and run this example as you have done with previous ones and watch
    the spectrum unfold numerically and colorfully. The following screenshot shows
    a graded color wheel.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3845_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The coding ideas used here are relatively simple. In essence, we have the executing
    code work through the process of drawing a colored arc from zero to 358 degrees.
    At each thin slice of the wedge red, green, and blue components are added according
    to calculations of linearly increasing or decreasing ramp values `redFL, greenfly`,
    and `blueFL` in counts-per-degree. By ramp, we mean a gradually increasing value
    from zero to 100%. The ramp values are controlled by transition points (A_ANG,
    `B_ANG`, and so on) evenly spaced at 60 degree intervals around the periphery
    of the colored disk.
  prefs: []
  type: TYPE_NORMAL
- en: The `rgb2hex(red, green, blue)` function converts the red, green, and blue floating
    point values into the form of a hexadecimal number that Tkinter will interpret
    as a color. For the viewer's edification, this number is displayed at the top
    of the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Tkinter's own color picker-mixer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tkinter has its own color chooser tool that is remarkably simple to use.
  prefs: []
  type: TYPE_NORMAL
- en: Four lines of code gets you a tool of elegance and usefulness.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy, save, and run this example as you have done with previous programs. The
    following screenshot shows the Tkinter's color picker (MS windows XP).
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3845_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The following screenshot shows the Tkinter's color picker (Linux Ubuntu 9.10).
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3845_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tool is so remarkably easy to use you will ask why we have bothered with
    the more cumbersome versions shown in the numerical color mixing-matching palette
    example. There are two reasons. Firstly we can see how to manipulate color inside
    python code. And secondly, the independent swatch window that you can move around
    on top of pictures can be useful.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The subject of color mixing, nomenclature and tasteful color combinations is
    vast and interesting. The web provides some excellent sites explaining this art
    and science very elegantly.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a selection of some of the best webpages that explain the ideas well.
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.1728.com/colors.htm:](http://www.1728.com/colors.htm) A display
    of over 400 html-recognizable named color swatches with their hex equivalents,
    arranged in alphabetic order. The color swatches displayed are large so you can
    see the subtle differences between similar colors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://aggie-horticulture.tamu.edu/floriculture/container-garden/lesson/colorwheel.html:](http://aggie-horticulture.tamu.edu/floriculture/container-garden/lesson/colorwheel.html)
    A flower color wheel using names of colors that florists use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://realcolorwheel.com/tubecolors.htm:](http://realcolorwheel.com/tubecolors.htm)
    An artist''s color wheel, where the colors are matched up to the names of tube
    pigments that an artist would purchase from an art supply shop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.colormatters.com/colortheory.html:](http://www.colormatters.com/colortheory.html)
    Elegantly simplified color combination practice, with rich sources of backup and
    complimentary information. This has loads of illustrations and examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Web_colors](http://en.wikipedia.org/wiki/Web_colors)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The article titled "web colors" in Wikipedia, the free encyclopedia.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://colorschemedesigner.com/:](http://colorschemedesigner.com/) This website
    is a most magnificent and complete treatise on the art and science of color. It
    has everything. Play with the tools here for 15 minutes and you will learn just
    about everything you will ever need regarding the mixing of colors and how colors
    can be combined tastefully.This site is the best of the best.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
