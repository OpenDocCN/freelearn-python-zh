- en: Chapter 5. Matplotlib Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create beautiful charts using Python 3 with the Matplotlib
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Creating beautiful charts using Matplotlib
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib – downloading modules using pip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib – downloading modules with whl extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing labels on charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to give the chart a legend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting the scale of charts dynamically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create beautiful charts that visually represent data.
    Depending on the format of the data source, we can plot one or several columns
    of data in the same chart.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the Python Matplotlib module to create our charts.
  prefs: []
  type: TYPE_NORMAL
- en: In order to create these graphical charts, we need to download additional Python
    modules and there are several ways to install them.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will explain how to download the Matplotlib Python module, all
    other required Python modules, and the ways to do this.
  prefs: []
  type: TYPE_NORMAL
- en: After we have the required modules installed, we will then create our own Pythonic
    charts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating beautiful charts using Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe introduces us to the Matplotlib Python module, which enables us
    to create visual charts using Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following URL is a great place to start exploring the world of Matplotlib
    and will teach you how to create many charts that are not presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://matplotlib.org/users/screenshots.html](http://matplotlib.org/users/screenshots.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to use the Matplotlib Python module, we first have to install this
    module, as well as several other related Python modules such as numpy.
  prefs: []
  type: TYPE_NORMAL
- en: If you are running a version of Python less than 3.4.3, I would encourage you
    to upgrade your version of Python as we will be using the Python pip module throughout
    this chapter to install the required Python modules, and pip is installed with
    3.4.3 and above.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is possible to install pip with earlier versions of Python 3 but the process
    is not very intuitive, so it is definitely better to upgrade to 3.4.3 or above.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following picture is an example of what incredible graphical charts can
    be created using Python with the Matplotlib module.
  prefs: []
  type: TYPE_NORMAL
- en: I have copied the following code from the [http://matplotlib.org/](http://matplotlib.org/)
    website, which creates this incredible chart. There are many examples available
    on this site and I encourage you to try them out until you find the kind of charts
    you like to create.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code to create the chart, in less than 25 lines of Python code,
    including whitespaces.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the code creates the chart pictured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running the code using Python 3.4 or above with the Eclipse PyDev plugin might
    show some unresolved import errors. This seems to be a bug in PyDev or Java.
  prefs: []
  type: TYPE_NORMAL
- en: Just ignore those errors if you are developing using Eclipse, as the code will
    run successfully.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to create beautiful graphs as shown in the preceding screenshot, we
    need to download several other Python modules.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipes will guide us through how to successfully download all
    the required modules, which enables us to create our own beautiful charts.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib – downloading modules using pip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The usual way to download additional Python modules is by using pip. The pip
    module comes pre-installed with the latest version of Python (3.4 and above).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using an older version of Python, you might have to download both
    pip and setuptools yourself.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to using the Python installer, there are several other precompiled
    Windows executables that make it easy for us to install Python modules such as
    Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show how to successfully install Matplotlib via a Windows executable,
    as well as using pip in order to install the additional modules that the Matplotlib
    library requires.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All we need to do to download the required Python modules to use the Matplotlib
    module is to have a Python release of 3.4 (or later) installed on our PC.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can install Matplotlib via a Windows executable from the official Matplotlib
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you install the Matplotlib version that matches the Python version
    you are using. For example, download and install `Matplotlib-1.4.3.win-amd64-py3.4.exe`
    if you have Python 3.4 installed on a 64-bit OS such as Microsoft Windows 7.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The "amd64" in the middle of the executable name means you are installing the
    64-bit version. If you are using a 32-bit x86 system then installing amd64 will
    not work. Similar problems can occur if you have installed a 32-bit version of
    Python and download 64-bit Python modules.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the executable will get us started and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can verify that we have successfully installed Matplotlib by looking at our
    Python installation directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a successful installation, the Matplotlib folder is added to site-packages.
    Using a default installation, the full path to the site-packages folder on Windows
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\Python34\Lib\site-packages\matplotlib\`'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The simplest plotting example on the official Matplotlib website requires the
    use of the Python numpy module, so let's download and install this module next.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Numpy is a mathematical module that enables the graphing of the Matplotlib charts
    but goes well beyond Matplotlib. If the software you are developing requires a
    lot of mathematical computations, you definitely want to check out numpy.
  prefs: []
  type: TYPE_NORMAL
- en: There is one excellent website that gives us quick links to pretty much all
    the Python modules out there. It serves as a great time saver by pointing out
    which other Python modules are necessary to use Matplotlib successfully and gives
    us hyperlinks to download these modules, which enables us to install them quickly
    and easily.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is the link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the file extensions of the installer packages all end in whl. In
    order to use them, we have to install the Python wheel module, and we do this
    using pip.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wheels are the new standard of Python distribution and are intended to replace
    eggs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more details at the following website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://pythonwheels.com/](http://pythonwheels.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: It is best to run the Windows command processor as an administrator to avoid
    potential installation errors.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The common way to download Python modules is by using pip, as shown above. In
    order to install all the modules that Matplotlib requires, the download format
    of the main website where we can download them has changed to using a whl format.
  prefs: []
  type: TYPE_NORMAL
- en: The next recipe will explain how to install Python modules using wheel.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib – downloading modules with whl extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use several additional Python modules that Matplotlib requires and,
    in this recipe, we will download them using Python's new module distribution standard,
    called wheel.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find the Python Enhancement Proposal (PEP) for the new wheel standard
    at the following URL: [https://www.python.org/dev/peps/pep-0427/](https://www.python.org/dev/peps/pep-0427/)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to download Python modules with a whl extension, the Python wheel module
    has to be installed first, which was explained in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's download `numpy-1.9.2+mkl-cp34-none-win_amd64.whl` from the web. After
    installing the wheel module, we can use pip to install packages with whl file
    extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pip ships with Python 3.4.3 and above. If you are using an older version of
    Python, I would recommend installing pip because it makes installing all other
    additional Python modules so much easier.
  prefs: []
  type: TYPE_NORMAL
- en: An even better suggestion might be to upgrade your Python version to the latest
    stable release. By the time you read this book, that most likely will be Python
    3.5.0 or above.
  prefs: []
  type: TYPE_NORMAL
- en: Python is free software. It does not cost us anything to upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: 'Browse to the folder where the package to be installed is located, and install
    it using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can create our first Matplotlib chart, using the simplest example application
    from the official website. After that, we will be creating our own charts.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The fact that we are not quite ready to run the preceding code shows that we
    need to download more modules. While at first having to download more modules
    might seem to be a little bit annoying, it really is a form of code reuse.
  prefs: []
  type: TYPE_NORMAL
- en: So let's download and install the six and all the other required modules (dateutil,
    pyparsing, and so on) using pip with wheel until our code works and creates a
    nice chart from only a few lines of Python code.
  prefs: []
  type: TYPE_NORMAL
- en: We can download all the required modules from the same website we just used
    to install numpy. This website even lists all of the other modules the module
    we are installing depends on and has hyperlinks to jump to the installation software
    located in this very same website.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As mentioned previously, the URL for installing Python modules is: [http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The website that enables us to download many Python modules from one convenient
    place also provides other Python modules. Not all dependencies shown are required.
    It depends on what you are developing. You might have to download and install
    additional modules as your journey into using the Matplotlib library advances.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04829_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating our first chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have all of the required Python modules installed, we can create
    our own charts using Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: We can create charts from only a few lines of Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the code from the previous recipe, we can now create a chart that looks
    similar to the one shown next.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the minimum amount of code as presented on the official website, we can
    create our first chart. Well, almost. The sample code shown on the website does
    not work until we import the `show` method and then call it.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can simplify the code and even improve it by using another of many examples
    provided on the official Matplotlib website.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Python Matplotlib module, combined with add-ons such as numpy, create a
    very rich programming environment that enables us to do mathematical computations
    and plot them in visual charts very easily.
  prefs: []
  type: TYPE_NORMAL
- en: The Python numpy method `arange` does not intend to arrange anything. It means
    to create "a range", which in Python is used for the built-in "range" operator.
    The `linspace` method can create similar confusion. Who is "lin" and in what "space"?
  prefs: []
  type: TYPE_NORMAL
- en: As it turns out, the name means "linear spaced vector".
  prefs: []
  type: TYPE_NORMAL
- en: The pyglet function `show` displays the graph we created. Calling `show()` has
    some side-effects when you try to plot another graph after successfully creating
    the first one.
  prefs: []
  type: TYPE_NORMAL
- en: Placing labels on charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have used the default Matplotlib GUI. Now we will create some tkinter
    GUIs using Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: This will require a few more lines of Python code and importing some more libraries,
    and it is well worth the effort, because we are gaining control of our paintings
    using canvases.
  prefs: []
  type: TYPE_NORMAL
- en: We will position labels onto both the horizontal as well as the vertical axes,
    aka *x* and *y*.
  prefs: []
  type: TYPE_NORMAL
- en: We will do this by creating a Matplotlib figure upon which we will draw.
  prefs: []
  type: TYPE_NORMAL
- en: We will also learn how to use sub plots, which will enable us to draw more than
    one graph in the same window.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the necessary Python modules installed and knowing where to find the official
    online documentation and tutorials, we can now carry on with our creation of Matplotlib
    charts.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While `plot` is the easiest way to create a Matplotlib chart, using `Figure`
    in combination with `Canvas` creates a more custom-made graph, which looks much
    better and also enables us to add buttons and other widgets to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code results in the following chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the first line of code after the import statements, we create an instance
    of a `Figure` object. Next, we add sub plots to this figure by calling `add_subplot(211)`.
    The first number in 211 tells the figure how many plots to add, the second number
    determines the number of columns and the third tells the figure in which order
    to display the plots.
  prefs: []
  type: TYPE_NORMAL
- en: We also add a grid and change its default line style.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we only display one plot in the chart, by choosing 2 for the number
    of sub plots, we are moving the plot up, which results in extra whitespace at
    the bottom of the chart. This first plot now only occupies 50% of the screen,
    which affects how large the grid lines of this plot are when being displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Experiment with the code by uncommenting the code for `axis =` and `axis.grid()`
    to see the different effects.
  prefs: []
  type: TYPE_NORMAL
- en: We can add more sub plots by assigning them to the second position using `add_subplot(212)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Running the slightly modified code now adds axis1 to the chart. For the grid
    of the bottom plot, we left the line style at its default.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We imported the necessary Matplotlib modules to create a figure and a canvas
    onto which to draw the chart. We gave it some values for the *x* and *y* axes
    and set a few of very many configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: We created our own tkinter window in which to display the chart and customized
    the positioning of the plots.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen in previous chapters, in order to create a tkinter GUI, we first
    have to import the tkinter module and then create an instance of the `Tk` class.
    We assign this class instance to a variable we named `root`, which is a name that
    is often used in examples.
  prefs: []
  type: TYPE_NORMAL
- en: Our tkinter GUI will not become visible until we start the main event loop and,
    to do that, we use `root.mainloop()`.
  prefs: []
  type: TYPE_NORMAL
- en: One important reason to avoid the Matplotlib default GUI here and instead create
    our own GUI using tkinter is that we wanted to improve the not very pretty appearance
    of the default Matplotlib GUI and we can very easily do this using tkinter.
  prefs: []
  type: TYPE_NORMAL
- en: We no longer have those out-of-date looking buttons appearing at the bottom
    of the Matplotlib GUI if we build our GUI with tkinter.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, the Matplotlib GUI has a feature our tkinter GUI does not
    have and that is that we can actually see the x and y coordinates in the Matplotlib
    GUI when we move our mouse around within the chart. The x and y coordinate positions
    are displayed in the bottom right corner.
  prefs: []
  type: TYPE_NORMAL
- en: How to give the chart a legend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we start plotting more than one line of data points, things might become
    a little bit unclear. By adding a legend to our graphs, we can tell which data
    is what, and what it actually means.
  prefs: []
  type: TYPE_NORMAL
- en: We do not have to choose different colors to represent the different data. Matplotlib
    automatically assigns a different color to each line of data points.
  prefs: []
  type: TYPE_NORMAL
- en: All we have to do is create the chart and add a legend to it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will enhance the chart from the previous recipe. We will
    only plot one chart.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will plot more lines of data in the same chart and then we will add
    a legend to the chart.
  prefs: []
  type: TYPE_NORMAL
- en: We do this by modifying the code from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the modified code creates the following chart, which has a legend in
    the upper right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are only plotting one graph in this recipe and we do this by changing `fig.add_subplot(111)`.
    We also slightly modify the size of the figure via the `figsize` property.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create three Python lists that contain the values to be plotted. When
    we plot the data, we save the references to the plots in local variables.
  prefs: []
  type: TYPE_NORMAL
- en: We create the legend by passing in a tuple with the references to the three
    plots, another tuple that contains the strings that are then displayed in the
    legend, and in the third argument we position the legend within the chart.
  prefs: []
  type: TYPE_NORMAL
- en: The default settings of Matplotlib assign a color scheme to the lines being
    plotted.
  prefs: []
  type: TYPE_NORMAL
- en: We can easily change this default setting of colors to the colors we prefer
    by setting a property when we plot each axis.
  prefs: []
  type: TYPE_NORMAL
- en: We do this by using the color property and assigning it an available color value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note how the comma after the variable assignments of t0, t1, and t2 is not a
    mistake but is required in order to create the legend.
  prefs: []
  type: TYPE_NORMAL
- en: The comma after each variable turns a list into a tuple. If we leave this out,
    our legend will not be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The code will still run, just without the intended legend.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we remove the comma after the t0 = assignment, we get an error and the
    first line no longer appears in the figure. The chart and legend still get created,
    but without the first line appearing in the legend.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We enhanced our chart by plotting three lines of data in the same chart and
    giving it a legend in order to distinguish the data that those three lines plot.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipes, while creating our first charts and enhancing them,
    we hard-coded the scaling of how those values are visually represented.
  prefs: []
  type: TYPE_NORMAL
- en: While this served us well for the values we were using, we often plot charts
    from very large databases.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the range of that data, our hard-coded values for the vertical
    y-dimension might not always be the best solution, which may make it hard to see
    the lines in our charts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will improve our code from the previous recipe. If you have not typed in
    all of the code from all of the previous recipes, just download the code for this
    chapter and it will get you started (and then you can have a lot of fun creating
    GUIs, charts, and so on, using Python).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modify the `yValues1` line of code from the previous recipe to use 50 as the
    third value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The only difference to the code that created the chart in the previous recipe
    is one data value.
  prefs: []
  type: TYPE_NORMAL
- en: By changing one value that is not close to the average range of all the other
    values for all plotted lines, the visual representation of data has dramatically
    changed and we lost a lot of details about the overall data and now mainly see
    one high spike.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So far, our charts have adjusted themselves according to the data they visually
    represent.
  prefs: []
  type: TYPE_NORMAL
- en: While this is a practical feature of Matplotlib, this is not always what we
    want. We can restrict the scale of the chart being represented by limiting the
    vertical y-dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `axis.set_ylim(5, 8)` line of code now limits the beginning value to 5 and
    the ending value of the vertical display to 8.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we create our chart, the high value peak no longer has the impact
    it had before.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We increased one value in the data, which resulted in a dramatic effect. By
    setting limits to the vertical and horizontal displays of the chart, we can see
    the data we are most interested in.
  prefs: []
  type: TYPE_NORMAL
- en: Spikes such as the ones just shown, can be of great interest too. It all depends
    on what we are looking for. The visual representation of data is of great value.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A picture is worth a thousand words.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the scale of charts dynamically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learned how we can limit the scaling of our charts.
    In this recipe, we will go one step further by dynamically adjusting the scaling
    by setting both a limit and analyzing our data before we represent it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will enhance the code from the previous recipe by reading in the data we
    are plotting dynamically, averaging it, and then adjusting our chart.
  prefs: []
  type: TYPE_NORMAL
- en: While we would typically read in the data from an external source, in this recipe,
    we create the data we are plotting using Python lists, as can be seen in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are creating our own data in our Python module by assigning lists with data
    to the xvalues and yvalues variables.
  prefs: []
  type: TYPE_NORMAL
- en: In many graphs, the beginning of the x and y coordinate system starts at (0,
    0). This is usually a good idea, so let's adjust our chart coordinate code accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the code to set limits on both the x and y dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have set the same limits for x and y, our chart might look more
    balanced. When we run the modified code, we get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Maybe starting at (0, 0) was not such a great idea after all…
  prefs: []
  type: TYPE_NORMAL
- en: What we really want to do is to adjust our chart dynamically according to the
    range of the data, while at the same time, restricting values that are too high
    or too low.
  prefs: []
  type: TYPE_NORMAL
- en: We can do this by parsing all the data to be represented in the chart while
    at the same time, setting some explicit limits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the code, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Running the code results in the following chart. We adjusted both its x and
    y dimensions dynamically. Note how the y-dimension now starts at 5.5 instead of
    5.0, as it did before. The chart also no longer starts at (0, 0), giving us more
    valuable information about our data.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are creating a list of lists for the y-dimension data and then using a list
    comprehension wrapped into a call to Python's `min()` and `max()` functions.
  prefs: []
  type: TYPE_NORMAL
- en: If list comprehensions seem to be a little bit advanced, what they basically
    are is a very compressed loop.
  prefs: []
  type: TYPE_NORMAL
- en: They are also designed to be faster than a regular programming loop.
  prefs: []
  type: TYPE_NORMAL
- en: In the Python code that creates the preceding chart, we created three lists
    that hold the y-dimensional data to be plotted. We then created another list that
    holds those three lists, which created a list of lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We are interested in getting both the minimum value of all of the y-dimensional
    data, as well as the maximum value contained within these three lists.
  prefs: []
  type: TYPE_NORMAL
- en: We can do this via a Python list comprehension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the list comprehension, `minY` is: 5.5.'
  prefs: []
  type: TYPE_NORMAL
- en: The one line of code above is the list comprehension that runs through all the
    values of all the data contained within the three lists and finds the minimum
    value using the Python `min` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the very same pattern, we find the maximum value contained in the data we
    wish to plot. This time, we also set a limit within our list comprehension that
    ignores all values that are above the limit we specified, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After running the preceding code with our chosen restriction, `maxY` has the
    value of 8 (not 50).
  prefs: []
  type: TYPE_NORMAL
- en: We applied a restriction for the max value, according to a predefined condition
    choosing 20 as the maximum value to be displayed in the chart.
  prefs: []
  type: TYPE_NORMAL
- en: For the x-dimension, we simply called `min()` and `max()` in the Matplotlib
    method to scale the limits of the chart dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created several Matplotlib charts and adjusted some of the
    many available properties. We also used core Python to control the scaling of
    the charts dynamically.
  prefs: []
  type: TYPE_NORMAL
