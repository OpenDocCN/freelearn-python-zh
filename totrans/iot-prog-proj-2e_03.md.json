["```py\n    mkdir Chapter3\n    ```", "```py\n    cd Chapter3\n    ```", "```py\n    ch3-env and enabled access to the system site packages. With our new Python virtual environment created, we can source into it with the following command:\n\n    ```", "```py\n\n    ```", "```py\n    requests library in Python simplifies making HTTP requests to web servers. We will use the requests library when we pull weather data from the web. With the requests library installed, we may close the Terminal by running the following command:\n\n    ```", "```py\n\n    ```", "```py\n    ch3-env virtual environment with the following command:\n\n    ```", "```py\n    Servo class and create an object called servo. After that, initialize it with the PIN we connected our Servo to in *Figure 3**.3*:\n\n    ```", "```py\n    servo.min()\n    ```", "```py\n\n    ```", "```py\n\n    ```", "```py\n    servo.mid()\n    ```", "```py\n    servo.max()\n    ```", "```py\n    servo.close()\n    ```", "```py\n    ch3-env virtual environment with the following command:\n\n    ```", "```py\n\n    ```", "```py\n    LED class and create an object called led. Once you’ve done this, initialize it with the PIN we connected our LED to in *Figure 3**.9*:\n\n    ```", "```py\n    led.on()\n    ```", "```py\n\n    ```", "```py\n    led.off()\n    ```", "```py\n    led.blink()\n    ```", "```py\n    led.off()\n    ```", "```py\n    ch3-env virtual environment with the following command:\n\n    ```", "```py\n\n    ```", "```py\n    Servo class and create an object called servo:\n\n    ```", "```py\n\n    ```", "```py\n    servo.mid()\n    ```", "```py\n    WeatherData and WeatherDashboard classes, respectively.\n    ```", "```py\n    import requests\n    ```", "```py\n    class WeatherData:\n        temperature = 0\n        weather_conditions = ''\n        wind_speed = 0\n        city = ''\n    ```", "```py\n        def __init__(self, city):\n            self.city = city\n            api_key = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n            base_url = \"http://api.openweathermap.org/data/2.5/weather\"\n            complete_url = f\"{base_url}?q={self.city}&appid={api_key}&units=metric\"\n            response = requests.get(complete_url)\n            data = response.json()\n            if data[\"cod\"] != \"404\":\n                main = data[\"main\"]\n                wind = data[\"wind\"]\n                weather = data[\"weather\"]\n                self.temperature = main[\"temp\"]\n                self.weather_conditions = weather[0][\"main\"]\n                self.wind_speed = wind[\"speed\"]\n    ```", "```py\n        def getServoValue(self):\n            if self.temperature < 0:\n                temp_factor = 0\n            elif self.temperature > 30:\n                temp_factor = 1\n            else:\n                temp_factor = self.temperature / 30\n            wind_factor = self.wind_speed / 20\n            servo_value = -((temp_factor - (wind_factor/20)) * 2-1)\n            return servo_value\n    ```", "```py\n        def getLEDValue(self):\n            if (self.weather_conditions=='Thunderstorm'):\n                return 2;\n            elif(self.weather_conditions=='Rain'):\n                return 1\n            else:\n                return 0\n    ```", "```py\n        if __name__==\"__main__\":\n            weather = WeatherData('Toronto')\n            print(weather.getServoValue())\n            print(weather.getLEDValue())\n    ```", "```py\n    from gpiozero import Servo\n    from gpiozero import LED\n    from time import sleep\n    from WeatherData import WeatherData\n    ```", "```py\n    class WeatherDashboard:\n        servoCorrection = 0.5\n        maxPW = (2.0 + servoCorrection) / 1000\n        minPW = (1.0 - servoCorrection) / 1000\n    ```", "```py\n        def __init__(self, city, servo_pin, led_pin):\n            self.city = city\n            self.servo = Servo(servo_pin,\n                               min_pulse_width=self.minPW,\n                               max_pulse_width=self.maxPW)\n            self.led = LED(led_pin)\n    ```", "```py\n      def update_status(self):\n            weather_data = WeatherData(self.city)\n            self.servo.value = weather_data.getServoValue()\n            led_status = weather_data.getLEDValue()\n            if led_status == 0:\n                self.led.off()\n            elif led_status == 1:\n                self.led.on()\n            else:\n                self.led.blink()\n    ```", "```py\n        def closeServo(self):\n            self.servo.close()\n    ```", "```py\n    def update_dashboard(city, servo_pin, led_pin):\n        weather_dashboard = WeatherDashboard(city,\n                                             servo_pin,\n                                             led_pin)\n        weather_dashboard.update_status()\n        sleep(2)\n        weather_dashboard.closeServo()\n    ```", "```py\n    if __name__ == \"__main__\":\n        city = 'Toronto'\n        servo_pin = 14\n        led_pin = 25\n        while True:\n            update_dashboard(city, servo_pin, led_pin)\n            sleep(1800)  # sleep for 30 minutes\n    ```"]