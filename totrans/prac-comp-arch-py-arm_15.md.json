["```py\n\nPython 3.9.7 (tags/v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> x = 4\n>>> y = 5\n>>> print('Sum =', x+y)\nSum = 9\n```", "```py\n>>>\n```", "```py\n\n# An error example\nx = 5\ny = input('Type a number = ')\nz = x + y\nprint('x + y =',z)\n```", "```py\n\nType a number = 3\nTraceback (most recent call last):\n  File \"E:/ArchitectureWithPython/IDE_Test.py\", line 4, in <module>\n    z = x + y\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n>>>\n```", "```py\n\n>>> x\n5\n>>> y\n'3'\n>>> y = int(y)\n>>> z = x + y\n>>> z\n8\n>>>\n```", "```py\n\n>>> i = 0\n>>> for j in range(0,5):  @ Here we've started a loop\n      i = i + j*j         @ Add a statement. Note the automatic indentation\n                          @ Now hit the enter key twice.\n>>> print(i)               @ We have exited the loop and added a new statement\n30                         @ And here is the result\n>>>\n```", "```py\n\ncd ..                     @ Change dictionary to parent\nmkdir /home/pi/testProg   @ Create new file called testProg in folder pi\nls /home/pi               @ List files in folder pi\nas -g -0 file.o file.s    @ Assemble source file file.s to create object file file.o\nld -0 file file.o         @ Link object file file.o\ngdb file                  @ Call debugger to debug file\nsudo apt-get update       @ Download packages in your configuration source files\nsudo apt-get upgrade      @ Updates all installed packages\n```", "```py\n\n.text                     @ This is a code section\n.global _start            @ _start is a label (first instruction)\n.word                     @ Bind 32-bit value to label and store in memory\n.byte                     @ Bind 8-bit value to label and store in memory\n.equ                      @ .equ x,7 binds or equates 7 to the name x\n.asciz                    @ Bind ASCII string to label and store (terminated by 0)\n.balign                   @ .balign 4 locates instruction/data is on a word boundary\n```", "```py\n\nfile toDebug              @ Load code file toDebug for debugging\nb address                 @ Insert breakpoint at <address> (maybe line number or label)\nx/4xw <address>           @ Display memory: four 32-bit words in hexadecimal format\nx/7db <address>           @ Display memory: seven bytes in decimal format\nr                         @ Run program (to a breakpoint or its termination)\ns                         @ Step (execute) an instruction\nn                         @ Same as step an instruction\ni r                       @ Display registers\ni b                       @ Display breakpoints\n```", "```py\nc                         @ Continue from breakpoint\n```", "```py\n\n                     .text          @ Indicate this is code\n        .global _start              @ Provide entry point\n_start: mov   r0,#0                 @ Start of the code\n        mov   r0,#0                 @ Exit parameter (optional)\n        mov   r7,#goHome            @ Set up leave command\n        svc   #0                    @ Call operating system to exit this code\ntest:   .word  0xABCD1234           @ Store a word in memory with label 'test'\n        .equ   goHome, 1            @ Equate name to value\n```", "```py\n\n          .equ    len,8             @ Length of string to reverse (8 bytes/chars)\n          .text                     @ Program (code) area\n          .global _start            @\n_start:   mov     r1,#len           @ Number of characters to move in r1\n          adr     r2,string1        @ r2 points at source string1 in this section\n          adr     r3,adr_str2       @ r3 points at dest string str2 address in this section\n          ldr     r4,[r3]           @ r4 points to dest str2 in data section\npreLoop:  add     r5,r4,#len-1      @ r5 points to bottom of dest str2\nLoop:     ldrb    r6,[r2],#1        @ Get byte char from source in r6 inc pointer\n          strb    r6,[r5],#-1       @ Store char in destination, decrement pointer\n          subs    r1,r1,#1          @ Decrement char count\n          bne     Loop              @ REPEAT until all done\nWait:     nop                       @ Stop here for testing\n\nExit:     mov     r0,#0             @ Stop here\n          mov     r7,#1             @ Exit parameter required by svc\n          svc     0                 @ Call operating system to exit program\n\nstring1:  .ascii  \"Hello!!!\"        @ The source string\nmarker:   .word   0xAAFFFFBB        @ Marker for testing\n\nadr_str2: .word   str2              @ POINTER to source string2 in data area\n\n          .data                     @ The read/write data area\nstr2:     .byte   0,0,0,0,0,0,0,0   @ Clear destination string\n          .word   0xCCFFFFCC        @ Marker and terminator\n          .end\n```", "```py\n\n(gdb) b _start\nBreakpoint 1 at 0x10074: file pLoop.s, line 5.\n(gdb) b preLoop\nBreakpoint 2 at 0x10084: file pLoop.s, line 9.\n(gdb) b Wait\nBreakpoint 3 at 0x10098: file pLoop.s, line 14.\n```", "```py\n\n(gdb) info b\nNum     Type           Disp Enb Address    What\n1       breakpoint     keep y   0x00010074 pLoop.s:5\n2       breakpoint     keep y   0x00010084 pLoop.s:9\n```", "```py\n3       breakpoint     keep y   0x00010098 pLoop.s:14\n```", "```py\n\n(gdb) r\nStarting program: /home/alan/Desktop/pLoop\nBreakpoint 1, _start () at pLoop.s:5\n5 _start:   mov     r1,#len            @ Number of characters to move in r1\n(gdb) c\nContinuing.\n```", "```py\n\nBreakpoint 2, preLoop () at pLoop.s:9\n9 preLoop:  add     r5,r4,#len-1       @ r5 points to bottom of dest str2\n(gdb) i r\nr0             0x0                 0\nr1             0x8                 8\nr2             0x100a8             65704      Pointer to string1\nr3             0x100b4             65716      Pointer to str2 address\nr4             0x200b8             131256     Pointer to str2 value\nsp             0x7efff360          0x7efff360\nlr             0x0                 0\npc             0x10084             0x10084 <preLoop>\n```", "```py\n\n(gdb) x/4wx 0x100a8\n0x100a8 <string1>: 0x6c6c6548 0x2121216f 0xaaffffbb 0x000200b8\n```", "```py\n\n(gdb) si 1\nLoop () at pLoop.s:10\n10 Loop:     ldrb    r6,[r2],#1        @ Get byte char from source in r6 inc pointer\n(gdb) x/4wx 0x200b8\n```", "```py\n0x200b8: 0x00000000 0x00000000 0xccffffcc 0x00001141\n```", "```py\n\n(gdb) c\nContinuing.\nBreakpoint 3, Wait () at pLoop.s:14\n14 Wait:     nop                       @ Stop here for testing\n\n(gdb) i r\nr0             0x0                 0\nr1             0x0                 0\nr2             0x100b0             65712\nr3             0x100b4             65716\nr4             0x200b8             131256\nr5             0x200b7             131255\nr6             0x21                33\nsp             0x7efff360          0x7efff360\nlr             0x0                 0\npc             0x10098             0x10098 <Wait>\n(gdb) x/4wx 0x200b8\n0x200b8: 0x6f212121 0x48656c6c 0xccffffcc 0x00001141\n```", "```py\n\n(gdb) c\nContinuing.\n[Inferior 1 (process 11670) exited normally]\n(gdb)\n```"]