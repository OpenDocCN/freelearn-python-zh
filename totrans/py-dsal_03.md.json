["```py\n    def factorial(n):\n        #test for a base case\n        if n==0:\n            return 1\n            # make a calculation and a recursive call\n            f= n*factorial(n-1)\n        print(f)\n        return(f)\n        factorial(4)\n\n```", "```py\n    def bitStr(n, s):            \n\n         if n == 1: return s \n         return [ digit + bits for digit in bitStr(1,s)for bits in bitStr(n - 1,s)] \n\n    print (bitStr(3,'abc'))     \n\n```", "```py\n    from math import log10  \n    def karatsuba(x,y): \n\n        # The base case for recursion \n        if x < 10 or y < 10: \n            return x*y     \n\n        #sets n, the number of digits in the highest input number \n        n = max(int(log10(x)+1), int(log10(y)+1)) \n\n        # rounds up n/2     \n        n_2 = int(math.ceil(n / 2.0)) \n        #adds 1 if n is uneven \n        n = n if n % 2 == 0 else n + 1 \n\n        #splits the input numbers      \n        a, b = divmod(x, 10**n_2) \n        c, d = divmod(y, 10**n_2) \n\n        #applies the three recursive steps \n        ac = karatsuba(a,c) \n        bd = karatsuba(b,d) \n        ad_bc = karatsuba((a+b),(c+d)) - ac - bd \n\n        #performs the multiplication     \n        return (((10**n)*ac) + bd + ((10**n_2)*(ad_bc))) \n\n```", "```py\n    import random \n    def test(): \n            for i in range(1000): \n                x = random.randint(1,10**5) \n                y = random.randint(1,10**5) \n                expected = x * y \n                result = karatsuba(x, y) \n                if result != expected: \n                    return(\"failed\")                 \n            return('ok')   \n\n```", "```py\n    def mergeSort(A): \n        #base case if the input array is one or zero just return. \n        if len(A) > 1: \n            # splitting input array \n            print('splitting ', A ) \n            mid = len(A)//2 \n            left = A[:mid] \n            right = A[mid:] \n            #recursive calls to mergeSort for left and right sub arrays                 \n            mergeSort(left) \n            mergeSort(right) \n            #initalizes pointers for left (i) right (j) and output array (k)  \n    # 3 initalization operations \n            i = j = k = 0         \n            #Traverse and merges the sorted arrays \n            while i <len(left) and j<len(right): \n    # if left < right comparison operation  \n                if left[i] < right[j]: \n    # if left < right Assignment operation \n                    A[k]=left[i] \n                    i=i+1 \n                else: \n    #if right <= left assignment \n                    A[k]= right[j] \n                    j=j+1 \n                k=k+1 \n\n            while i<len(left): \n    #Assignment operation \n                A[k]=left[i] \n                i=i+1 \n                k=k+1 \n\n            while j<len(right): \n    #Assignment operation \n                A[k]=right[j] \n                j=j+1 \n                k=k+1 \n        print('merging ', A) \n        return(A)   \n\n```", "```py\n    import matplotlib.pyplot as plt \n    import math \n    x=list(range(1,100)) \n    l =[]; l2=[]; a = 1 \n    plt.plot(x , [y * y for y in x] ) \n    plt.plot(x, [(7 *y )* math.log(y, 2) for y in x]) \n    plt.show() \n\n```", "```py\n    plt.plot(x, [(6 *y )* math.log(y, 2) for y in x]) \n\n```", "```py\n    for i n range(n): \n        f(...) \n\n```", "```py\n    for i in range(0,n):  \n        for j in range(0,n) \n            #statements \n\n```", "```py\n    n = 500    #c0   \n    #executes n times \n    for i in range(0,n): \n        print(i)    #c1 \n    #executes n times \n    for i in range(0,n): \n        #executes n times \n        for j in range(0,n): \n        print(j)   #c2 \n\n```", "```py\n    i = 1 \n    while i <= n: \n        i=i * 2 \n        print(i) \n\n```", "```py\n    def nest(n): \n        for i in range(n): \n            for j in range(n): \n                i+j \n\n```", "```py\n    import timeit  \n    def test2(n): \n        ls=[] \n        for n in range(n): \n            t=timeit.timeit(\"nest(\" + str(n) +\")\", setup=\"from __main__ import nest\", number = 1) \n            ls.append(t) \n        return ls    \n\n```", "```py\n    import matplotlib.pyplot as plt \n    n=1000 \n    plt.plot(test2(n)) \n    plt.plot([x*x/10000000 for x in range(n)]) \n\n```"]