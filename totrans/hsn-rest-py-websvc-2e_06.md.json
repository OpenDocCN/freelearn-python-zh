["```py\n    http -v \":8000/games/\" \"Accept:text/html\"\n    http -v \":8000/games/\" \"Accept:application/json\"\n```", "```py\n    curl -H \"Accept: text/html\" -viX GET \"localhost:8000/games/\"\n    curl -H \"Accept: application/json\" -viX GET \"localhost:8000/games/\"\n```", "```py\n    Content-Type: application/json\n```", "```py\n    http OPTIONS \":8000/games/\"\n```", "```py\n    curl -iX OPTIONS \"localhost:8000/games/\"\n```", "```py\n    HTTP/1.1 500 Internal Server Error\n    Content-Length: 51566\n    Content-Type: text/html\n    Date: Thu, 25 Oct 2018 04:14:09 GMT\n    Server: WSGIServer/0.2 CPython/3.7.1\n    Vary: Cookie\n    X-Frame-Options: SAMEORIGIN\n```", "```py\n    http OPTIONS \":8000/games/3/\"\n```", "```py\n    curl -iX OPTIONS \"localhost:8000/games/3/\"\n```", "```py\n( 'rest_framework.parsers.JSONParser', 'rest_framework.parsers.FormParser', ...\n```", "```py\n{ \n    \"name\": \"Assassin's Creed Origins\", \n    \"release_date\": \"2018-01-10T03:02:00.776594Z\", \n    \"esrb_rating\": \"M (Mature)\" \n}\n```", "```py\nGET http://localhost:8000/esrb-ratings/\n```", "```py\nfrom django.db import models class EsrbRating(models.Model): description ...\n```", "```py\npsycopg2==2.7.5 \n```", "```py\npip install -r requirements.txt \n```", "```py\n    Installing collected packages: psycopg2\n    Successfully installed psycopg2-2.7.5\n```", "```py\n    python manage.py makemigrations games\n```", "```py\n    Migrations for 'games':\n      games/migrations/0001_initial.py\n        - Create model EsrbRating\n        - Create model Game\n        - Create model Player\n        - Create model PlayerScore\n```", "```py\n# Generated by Django 2.1.2 on 2018-10-25 20:15 \n\nfrom django.db import migrations, models \nimport django.db.models.deletion \n\nclass Migration(migrations.Migration): \n\n    initial = True \n\n    dependencies = [ \n    ] \n\n    operations = [ \n        migrations.CreateModel( \n            name='EsrbRating', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('description', models.CharField(max_length=200)), \n            ], \n            options={ \n                'ordering': ('description',), \n            }, \n        ), \n        migrations.CreateModel( \n            name='Game', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('created', models.DateTimeField(auto_now_add=True)), \n                ('name', models.CharField(max_length=200)), \n                ('release_date', models.DateTimeField()), \n                ('played_once', models.BooleanField(default=False)), \n                ('played_times', models.IntegerField(default=0)), \n                ('esrb_rating', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games', to='games.EsrbRating')), \n            ], \n            options={ \n                'ordering': ('name',), \n            }, \n        ), \n        migrations.CreateModel( \n            name='Player', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('created', models.DateTimeField(auto_now_add=True)), \n                ('name', models.CharField(max_length=50)), \n                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=2)), \n            ], \n            options={ \n                'ordering': ('name',), \n            }, \n        ), \n        migrations.CreateModel( \n            name='PlayerScore', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('score', models.IntegerField()), \n                ('score_date', models.DateTimeField()), \n                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.Game')), \n                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='games.Player')), \n            ], \n            options={ \n                'ordering': ('-score',), \n            }, \n        ), \n    ] \n```", "```py\n    python manage.py migrate\n```", "```py\n    Operations to perform:\n      Apply all migrations: admin, auth, contenttypes, games, sessions\n    Running migrations:\n      Applying contenttypes.0001_initial... OK\n      Applying auth.0001_initial... OK\n      Applying admin.0001_initial... OK\n      Applying admin.0002_logentry_remove_auto_add... OK\n      Applying admin.0003_logentry_add_action_flag_choices... OK\n      Applying contenttypes.0002_remove_content_type_name... OK\n      Applying auth.0002_alter_permission_name_max_length... OK\n      Applying auth.0003_alter_user_email_max_length... OK\n      Applying auth.0004_alter_user_username_opts... OK\n      Applying auth.0005_alter_user_last_login_null... OK\n      Applying auth.0006_require_contenttypes_0002... OK\n      Applying auth.0007_alter_validators_add_error_messages... OK\n      Applying auth.0008_alter_user_username_max_length... OK\n      Applying auth.0009_alter_user_last_name_max_length... OK\n      Applying games.0001_initial... OK\n      Applying sessions.0001_initial... OK\n\n```", "```py\n    psql --username=your_games_user_name --dbname=django_games --    command=\"\\dt\"\n\n```", "```py\n                             List of relations\n     Schema | Name ...\n```", "```py\nfrom rest_framework import serializers \nfrom games.models import EsrbRating \nfrom games.models import Game \nfrom games.models import Player \nfrom games.models import PlayerScore \nimport games.views \n\nclass EsrbRatingSerializer(serializers.HyperlinkedModelSerializer): \n    games = serializers.HyperlinkedRelatedField( \n        many=True, \n        read_only=True, \n        view_name='game-detail') \n\n    class Meta: \n        model = EsrbRating \n        fields = ( \n            'url', \n            'id', \n            'description', \n            'games') \n```", "```py\nclass GameSerializer(serializers.HyperlinkedModelSerializer): \n    # We want to display the game ESRB rating description instead of its id \n    esrb_rating = serializers.SlugRelatedField( \n        queryset=EsrbRating.objects.all(),  \n        slug_field='description') \n\n    class Meta: \n        model = Game \n        fields = ( \n            'url', \n            'esrb_rating', \n            'name', \n            'release_date', \n            'played_once', \n            'played_times') \n```", "```py\nclass ScoreSerializer(serializers.HyperlinkedModelSerializer): \n    # We want to display all the details for the related game \n    game = GameSerializer() \n    # We don't include the player because a score will be nested in the player \n\n    class Meta: \n        model = PlayerScore \n        fields = ( \n            'url', \n            'id', \n            'score', \n            'score_date', \n            'game') \n```", "```py\nclass PlayerSerializer(serializers.HyperlinkedModelSerializer): \n    scores = ScoreSerializer(many=True, read_only=True) \n    gender = serializers.ChoiceField( \n        choices=Player.GENDER_CHOICES) \n    gender_description = serializers.CharField( \n        source='get_gender_display',  \n        read_only=True) \n\n    class Meta: \n         model = Player \n         fields = ( \n               'url', \n               'name', \n               'gender', \n               'gender_description', \n               'scores') \n```", "```py\nclass PlayerScoreSerializer(serializers.ModelSerializer): \n    # We want to display the players's name instead of its id \n   player = serializers.SlugRelatedField(queryset=Player.objects.all(), slug_field='name') \n   # We want to display the game's name instead of its id \n   game = serializers.SlugRelatedField(queryset=Game.objects.all(), slug_field='name') \n\n   class Meta: \n         model = PlayerScore \n         fields = ( \n               'url', \n               'id', \n               'score', \n               'score_date', \n               'player', \n               'game')\n```", "```py\nfrom games.models import EsrbRating \nfrom games.models import Game \nfrom games.models import Player \nfrom games.models import PlayerScore \nfrom games.serializers import EsrbRatingSerializer \nfrom games.serializers import GameSerializer \nfrom games.serializers import PlayerSerializer \nfrom games.serializers import PlayerScoreSerializer \nfrom rest_framework import generics \nfrom rest_framework.response import Response \nfrom rest_framework.reverse import reverse \n\nclass EsrbRatingList(generics.ListCreateAPIView): \n    queryset = EsrbRating.objects.all() \n    serializer_class = EsrbRatingSerializer \n    name = 'esrbrating-list' \n\nclass EsrbRatingDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = EsrbRating.objects.all() \n    serializer_class = EsrbRatingSerializer \n    name = 'esrbrating-detail' \n\nclass GameList(generics.ListCreateAPIView): \n    queryset = Game.objects.all() \n    serializer_class = GameSerializer \n    name = 'game-list' \n\nclass GameDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = Game.objects.all() \n    serializer_class = GameSerializer \n    name = 'game-detail' \n\nclass PlayerList(generics.ListCreateAPIView): \n    queryset = Player.objects.all() \n    serializer_class = PlayerSerializer \n    name = 'player-list' \n\nclass PlayerDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = Player.objects.all() \n    serializer_class = PlayerSerializer \n    name = 'player-detail' \n\nclass PlayerScoreList(generics.ListCreateAPIView): \n    queryset = PlayerScore.objects.all() \n    serializer_class = PlayerScoreSerializer \n    name = 'playerscore-list' \n\nclass PlayerScoreDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = PlayerScore.objects.all() \n    serializer_class = PlayerScoreSerializer \n    name = 'playerscore-detail' \n```", "```py\nclass ApiRoot(generics.GenericAPIView): name = 'api-root' def get(self, request, *args, **kwargs): return Response({ 'players': reverse(PlayerList.name, request=request), 'esrb-ratings': reverse(EsrbRatingList.name, request=request), 'games': reverse(GameList.name, request=request), 'scores': ...\n```", "```py\n    python manage.py runserver\n    python manage.py runserver 0.0.0.0:8000\n```", "```py\n    http POST \":8000/esrb-ratings/\" description='T (Teen)'\n\n```"]