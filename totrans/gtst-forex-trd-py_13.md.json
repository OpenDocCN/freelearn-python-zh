["```py\nSystem.list_of_orders.append(order)\n```", "```py\ntotal_trades = len(System.list_of_orders)\nprint(\"Total trades:\", total_trades)\nprint(\"Average trade:\", System.equity / total_trades)\n```", "```py\n        if System.market_position == 0:\n            close = bar['Close']\n            order = {}\n            order['Type'] = 'Market'\n            order['Price'] = close\n            order['Side'] = 'Buy'\n            order['Size'] = 10000\n            orders_stream.put(order)\n```", "```py\nTotal trades: 1\nAverage trade: -153.9999999999997\n```", "```py\nTotal trades: 37\nAverage trade: 79.40540540540536\n```", "```py\na = [1,2,4,3,5,8,7,6,2,9,10]\n```", "```py\nm = [] # m stands for 'maximum'\n```", "```py\nx = 0\n```", "```py\nfor el in a:\n    if el > x:\n        x = el\n    m.append(x)\n```", "```py\n[x - y for x, y in zip(a, m)]\n```", "```py\nimport numpy as np\na = [1,2,4,3,5,8,7,6,2,9,10]\nm = np.maximum.accumulate(a)\ndd = a - m\n```", "```py\n>>> dd\narray([ 0,  0,  0, -1,  0,  0, -1, -2, -6,  0,  0])\n```", "```py\ndd = System.equity_timeseries - np.maximum.accumulate(System.equity_timeseries)\nplt.subplot(2,1,1)\nplt.plot(System.equity_timeseries)\nplt.subplot(2,1,2)\nplt.plot(dd)\nplt.show()\n```", "```py\nmean_dd = dd.mean()\n```", "```py\nstd_dd = dd.std()\n```", "```py\nplt.plot(range(len(dd)), [mean_dd] * len(dd))\nplt.plot(range(len(dd)), [mean_dd - std_dd] * len(dd))\nplt.plot(range(len(dd)), [mean_dd - 2*std_dd] * len(dd))\n```"]