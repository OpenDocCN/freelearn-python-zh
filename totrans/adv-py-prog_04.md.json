["```py\n        import numpy as np \n        a = np.array([0, 1, 2]) \n    ```", "```py\n        a.dtype \n        # Result: \n        # dtype('int64') \n    ```", "```py\n        a = np.array([1, 2, 3], dtype='float32') \n        a.astype('float32') \n        # Result:\n        # array([ 0.,  1.,  2.], dtype=float32) \n    ```", "```py\n        a = np.array([[0, 1, 2], [3, 4, 5]]) \n        print(a) \n        # Output:\n        # [[0 1 2]\n        #  [3 4 5]] \n    ```", "```py\n        a.shape \n        # Result:\n        # (2, 3) \n    ```", "```py\n        a = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, \n                      9, 10, 11, 12, 13, 14, 15]) \n        a.shape \n        # Output:\n        # (16,)\n        a.reshape(4, 4) # Equivalent: a.shape = (4, 4) \n        # Output: \n        # array([[ 0,  1,  2,  3],\n        #        [ 4,  5,  6,  7],\n        #        [ 8,  9, 10, 11],\n        #        [12, 13, 14, 15]]) \n    ```", "```py\n        np.zeros((3, 3)) \n        np.empty((3, 3)) \n        np.ones((3, 3), dtype='float32') \n    ```", "```py\n    np.random.rand(3, 3) \n```", "```py\n        np.zeros_like(a) \n        np.empty_like(a) \n        np.ones_like(a) \n    ```", "```py\n    A = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8]) \n    A[0] \n    # Result:\n    # 0 \n    [a for a in A] \n    # Result:\n    # [0, 1, 2, 3, 4, 5, 6, 7, 8] \n```", "```py\n        A = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) \n        A[0] \n        # Result:\n        # array([0, 1, 2]) \n    ```", "```py\n        A[0, 1] \n        # Result:\n        # 1\n        # Equivalent version using tuple\n        A[(0, 1)]\n    ```", "```py\n        A[0:2] \n        # Result:\n        # array([[0, 1, 2], \n        #        [3, 4, 5]]) \n    ```", "```py\n        A[0:2, 0:2] \n        # Result:\n        # array([[0, 1], \n        #        [3, 4]]) \n    ```", "```py\n        A[0, 1] = 8 \n        A[0:2, 0:2] = [[1, 1], [1, 1]]\n    ```", "```py\n        a= np.array([1, 1, 1, 1]) \n        a_view = a[0:2] \n        a_view[0] = 2 \n        print(a) \n        # Output:\n        # [2 1 1 1] \n    ```", "```py\n        r_i = np.random.rand(10, 2)\n    ```", "```py\n    x_i = r_i[:, 0] \n```", "```py\n    r_0 = r_i[0, :] \n```", "```py\n        a = np.array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) \n        idx = np.array([0, 2, 3]) \n        a[idx] \n        # Result:\n        # array([9, 7, 6]) \n    ```", "```py\n        a = np.array([[0, 1, 2], [3, 4, 5], \\\n                      [6, 7, 8], [9, 10, 11]]) \n        idx1 = np.array([0, 1]) \n        idx2 = np.array([2, 2]) \n        a[idx1, idx2]\n    ```", "```py\n        a[np.array([0, 1])] # is equivalent to\n        a[[0, 1]]\n    ```", "```py\n    a[(0, 1)] # is equivalent to\n    a[0, 1] \n```", "```py\n        idx1 = [[0, 1], [3, 2]] \n        idx2 = [[0, 2], [1, 1]] \n        a[idx1, idx2] \n        # Output: \n        # array([[ 0,  5],\n        #        [10,  7]]) \n    ```", "```py\n        r_i = np.random.rand(10, 2) \n        r_i[:, [0, 1]] = r_i[:, [1, 0]] \n    ```", "```py\n        a = np.array([0, 1, 2, 3, 4, 5]) \n        mask = np.array([True, False, True, False, \\\n          False, False]) \n        a[mask] \n        # Output:\n        # array([0, 2]) \n    ```", "```py\n        r_i = np.random.rand(100, 2) \n        idx = np.arange(50) # integers 0 to 50 \n        %timeit np.take(r_i, idx, axis=0) \n        1000000 loops, best of 3: 962 ns per loop \n        %timeit r_i[idx] \n        100000 loops, best of 3: 3.09 us per loop \n    ```", "```py\n        In [51]: idx = np.ones(100, dtype='bool') # all \n          True values \n        In [52]: %timeit np.compress(idx, r_i, axis=0) \n        1000000 loops, best of 3: 1.65 us per loop \n        In [53]: %timeit r_i[idx] \n        100000 loops, best of 3: 5.47 us per loop \n    ```", "```py\n    A = np.array([[1, 2], [3, 4]]) \n    B = np.array([[5, 6], [7, 8]]) \n    A * B \n    # Output:\n    # array([[ 5, 12],           \n    #        [21, 32]]) \n```", "```py\n    A * 2 \n    # Output: \n    # array([[2, 4], \n    #        [6, 8]]) \n```", "```py\n    5, 10, 2 \n```", "```py\n    5, 10, 2 \n    5,  1, 2 → repeated \n    - - - - \n    5, 10, 2 \n```", "```py\n    A = np.random.rand(5, 10, 2) \n    B = np.random.rand(5, 2) \n    A * B[:, np.newaxis, :] \n```", "```py\n    a = [a1, a2, a3] \n    b = [b1, b2, b3] \n```", "```py\n    a x b = a1*b1, a1*b2, a1*b3 \n            a2*b1, a2*b2, a2*b3 \n            a3*b1, a3*b2, a3*b3 \n```", "```py\n    AB = a[:, np.newaxis] * b[np.newaxis, :] \n```", "```py\n    np.sqrt(np.array([4, 9, 16])) \n    # Result:\n    # array([2., 3., 4.]) \n```", "```py\n    a = np.random.rand(5, 3) \n    a > 0.3 \n    # Result:\n    # array([[ True, False,  True],\n    #        [ True,  True,  True],\n    #        [False,  True,  True],\n    #        [ True,  True, False],\n    #        [ True,  True, False]], dtype=bool) \n```", "```py\n    a[a > 0.5] \n    print(a[a>0.5]) \n    # Output:\n    # [ 0.9755  0.5977  0.8287  0.6214  0.5669  0.9553  \n        0.5894  0.7196  0.9200  0.5781  0.8281 ] \n```", "```py\n    a = np.random.rand(5, 3) \n    a.sum(axis=0) \n    # Result:\n    # array([ 2.7454,  2.5517,  2.0303]) \n    a.sum(axis=1) \n    # Result:\n    # array([ 1.7498,  1.2491,  1.8151,  1.9320,  0.5814]) \n    a.sum() # With no argument operates on flattened array \n    # Result:\n    # 7.3275 \n```", "```py\n    norm = sqrt(x**2 + y**2) \n```", "```py\n    r_i = np.random.rand(10, 2) \n    norm = np.sqrt((r_i ** 2).sum(axis=1)) \n    print(norm)\n    # Output:\n    # [ 0.7314  0.9050  0.5063  0.2553  0.0778   0.9143   \n        1.3245  0.9486  1.010   1.0212] \n```", "```py\n    for i in range(nsteps): \n      for p in self.particles: \n        norm = (p.x**2 + p.y**2)**0.5 \n        v_x = (-p.y)/norm \n        v_y = p.x/norm \n        d_x = timestep * p.ang_vel * v_x \n        d_y = timestep * p.ang_vel * v_y \n        p.x += d_x \n        p.y += d_y \n```", "```py\n    r_i = np.array([[p.x, p.y] for p in self.particles]) \n    ang_vel_i = np.array([p.ang_vel for p in \\\n      self.particles]) \n```", "```py\n    v_x = -y / norm \n    v_y = x / norm \n```", "```py\n    norm_i = ((r_i ** 2).sum(axis=1))**0.5 \n```", "```py\n    v_i = r_i[:, [1, 0]] / norm_i \n    v_i[:, 0] *= -1 \n```", "```py\n    d_i = timestep * ang_vel_i[:, np.newaxis] * v_i \n    r_i += d_i \n```", "```py\n    for i, p in enumerate(self.particles): \n      p.x, p.y = r_i[i] \n```", "```py\n    def evolve_numpy(self, dt): \n      timestep = 0.00001 \n      nsteps = int(dt/timestep) \n      r_i = np.array([[p.x, p.y] for p in self.particles]) \n      ang_vel_i = np.array([p.ang_vel for p in \\\n        self.particles]) \n      for i in range(nsteps): \n        norm_i = np.sqrt((r_i ** 2).sum(axis=1)) \n        v_i = r_i[:, [1, 0]] \n        v_i[:, 0] *= -1 \n        v_i /= norm_i[:, np.newaxis] \n        d_i = timestep * ang_vel_i[:, np.newaxis] * v_i \n        r_i += d_i \n        for i, p in enumerate(self.particles): \n          p.x, p.y = r_i[i] \n```", "```py\n    def benchmark(npart=100, method='python'): \n      particles = [Particle(uniform(-1.0, 1.0),     \n                            uniform(-1.0, 1.0),\n                            uniform(-1.0, 1.0))  \n                            for i in range(npart)] \n      simulator = ParticleSimulator(particles) \n      if method=='python': \n        simulator.evolve_python(0.1) \n      elif method == 'numpy': \n        simulator.evolve_numpy(0.1) \n```", "```py\n    from simul import benchmark \n    %timeit benchmark(100, 'python') \n    1 loops, best of 3: 614 ms per loop \n    %timeit benchmark(100, 'numpy') \n    1 loops, best of 3: 415 ms per loop \n```", "```py\n    %timeit benchmark(1000, 'python') \n    1 loops, best of 3: 6.13 s per loop \n    %timeit benchmark(1000, 'numpy') \n    1 loops, best of 3: 852 ms per loop \n```", "```py\n    a = np.random.rand(10000) \n    b = np.random.rand(10000) \n    c = np.random.rand(10000) \n    d = ne.evaluate('a + b * c') \n```", "```py\n    x_ij = x_j - x_i \n    y_ij = y_j - y_i. \n```", "```py\n    d_ij = sqrt(x_ij**2 + y_ij**2) \n```", "```py\n    r = np.random.rand(10000, 2) \n    r_i = r[:, np.newaxis] \n    r_j = r[np.newaxis, :] \n    d_ij = r_j - r_i \n```", "```py\n    d_ij = np.sqrt((d_ij ** 2).sum(axis=2)) \n```", "```py\n    r = np.random.rand(10000, 2) \n    r_i = r[:, np.newaxis] \n    r_j = r[np.newaxis, :] \n```", "```py\n    import numexpr as ne\n    d_ij = ne.evaluate('sum((r_j - r_i)**2, 2)') \n    d_ij = ne.evaluate('sqrt(d_ij)') \n```", "```py\n    from distance_matrix import (distance_matrix_numpy, \\\n       distance_matrix_numexpr) \n    %timeit distance_matrix_numpy(10000) \n    1 loops, best of 3: 3.56 s per loop \n    %timeit distance_matrix_numexpr(10000) \n    1 loops, best of 3: 858 ms per loop \n```", "```py\n        import pandas as pd\n        patients = [0, 1, 2, 3]\n        effective = [True, True, False, False]\n        effective_series = pd.Series(effective, \\\n          index=patients)\n    ```", "```py\n        patients = [\"a\", \"b\", \"c\", \"d\"]\n        effective = [True, True, False, False]\n        effective_series = pd.Series(effective, \\\n          index=patients)\n    ```", "```py\n    patients = [\"a\", \"b\", \"c\", \"d\"]\n    columns = {\n      \"sys_initial\": [120, 126, 130, 115],\n      \"dia_initial\": [75, 85, 90, 87],\n      \"sys_final\": [115, 123, 130, 118],\n      \"dia_final\": [70, 82, 92, 87]\n    }\n\n    df = pd.DataFrame(columns, index=patients)\n```", "```py\n        columns = {\n          \"sys_initial\": pd.Series([120, 126, 130, 115], \\\n            index=patients),\n          \"dia_initial\": pd.Series([75, 85, 90, 87], \\\n            index=patients),\n          \"sys_final\": pd.Series([115, 123, 130, 118], \\\n            index=patients),\n          \"dia_final\": pd.Series([70, 82, 92, 87], \\\n            index=patients)\n        }\n        df = pd.DataFrame(columns)\n    ```", "```py\n        effective_series.head()\n        # Output:\n        # a True\n        # b True\n        # c False\n        # d False\n        # dtype: bool\n        df.head()\n        # Output:\n        #    dia_final  dia_initial  sys_final sys_initial\n        # a         70           75        115          \n        120\n        # b         82           85        123          \n        126\n        # c         92           90        130          \n        130\n        # d         87           87        118          \n        115\n    ```", "```py\n        effective_series.loc[\"a\"]\n        # Result:\n        # True\n    ```", "```py\n        effective_series.iloc[0]\n        # Result:\n        # True\n    ```", "```py\n        df.loc[\"a\"]\n        df.iloc[0]\n        # Result:\n        # dia_final 70\n        # dia_initial 75\n        # sys_final 115\n        # sys_initial 120\n        # Name: a, dtype: int64\n    ```", "```py\n        df.loc[\"a\", \"sys_initial\"] # is equivalent to\n        df.loc[\"a\"].loc[\"sys_initial\"]\n        df.iloc[0, 1] # is equivalent to\n        df.iloc[0].iloc[1]\n    ```", "```py\n        # Retrieve column by name\n        df[\"sys_initial\"] # Equivalent to\n        df.sys_initial\n        # Retrieve column by position\n        df[df.columns[2]] # Equivalent to\n        df.iloc[:, 2]\n    ```", "```py\n    # Create a series with duplicate index\n    index = list(range(1000)) + list(range(1000))\n    # Accessing a normal series is a O(N) operation\n    series = pd.Series(range(2000), index=index)\n    # Sorting the will improve look-up scaling to O(log(N))\n    series.sort_index(inplace=True)\n```", "```py\n    np.log(df.sys_initial) # Logarithm of a series\n    df.sys_initial ** 2    # Square a series\n    np.log(df)             # Logarithm of a dataframe\n    df ** 2                # Square of a dataframe\n```", "```py\n    # Matching index\n    a = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n    b = pd.Series([4, 5, 6], index=[\"a\", \"b\", \"c\"])\n    a + b\n    # Result: \n    # a 5\n    # b 7\n    # c 9\n    # dtype: int64\n    # Mismatching index\n    b = pd.Series([4, 5, 6], index=[\"a\", \"b\", \"d\"])\n    a + b\n    # Result:\n    # a 5.0\n    # b 7.0\n    # c NaN\n    # d NaN\n    # dtype: float64\n```", "```py\n    a = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n    def superstar(x):\n        return '*' + str(x) + '*'\n    a.map(superstar)\n    # Result:\n    # a *1*\n    # b *2*\n    # c *3*\n    # dtype: object\n```", "```py\n    df.applymap(superstar)\n    # Result:\n    #    dia_final  dia_initial  sys_final  sys_initial\n    # a       *70*         *75*      *115*        *120*\n    # b       *82*         *85*      *123*        *126*\n    # c       *92*         *90*      *130*        *130*\n    # d       *87*         *87*      *118*        *115*\n```", "```py\n    df.apply(superstar, axis=0)\n    # Result:\n    # dia_final *a 70nb 82nc 92nd 87nName: dia...\n    # dia_initial *a 75nb 85nc 90nd 87nName: dia...\n    # sys_final *a 115nb 123nc 130nd 118nName:...\n    # sys_initial *a 120nb 126nc 130nd 115nName:...\n    # dtype: object\n    df.apply(superstar, axis=1)\n    # Result:\n    # a *dia_final 70ndia_initial 75nsys_f...\n    # b *dia_final 82ndia_initial 85nsys_f...\n    # c *dia_final 92ndia_initial 90nsys_f...\n    # d *dia_final 87ndia_initial 87nsys_f...\n    # dtype: object\n```", "```py\n    df.eval(\"sys_final - sys_initial\")\n    # Result:\n    # a -5\n    # b -3\n    # c 0\n    # d 3\n    # dtype: int64\n```", "```py\ndf.eval(\"sys_delta = sys_final - sys_initial\", \\\n  inplace=False)\n# Result:\n#     dia_final   dia_initial   sys_final   sys_initial   \n   sys_delta\n# a          70            75         115           120     \n-5\n# b          82            85         123           126     \n  -3\n# c          92            90         130           130     \n  0\n# d          87            87         118           115     \n  3\n```", "```py\n    patients = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    columns = {\n      \"sys_initial\": [120, 126, 130, 115, 150, 117],\n      \"dia_initial\": [75, 85, 90, 87, 90, 74],\n      \"sys_final\": [115, 123, 130, 118, 130, 121],\n      \"dia_final\": [70, 82, 92, 87, 85, 74],\n      \"drug_admst\": [True, True, True, True, False, False]\n    }\n    df = pd.DataFrame(columns, index=patients)\n```", "```py\n    df.groupby('drug_admst')\n    for value, group in df.groupby('drug_admst'):\n        print(\"Value: {}\".format(value))\n        print(\"Group DataFrame:\")\n        print(group)\n# Output:\n# Value: False\n# Group DataFrame:\n#    dia_final   dia_initial   drug_admst   sys_final   \n   sys_initial\n# e         85            90        False         130       \n  150\n# f         74            74        False         121       \n  117\n# Value: True\n# Group DataFrame:\n#    dia_final   dia_initial   drug_admst   sys_final   \n   sys_initial\n# a         70            75         True         115       \n  120\n# b         82            85         True         123       \n  126\n# c         92            90         True         130       \n  130\n# d         87            87         True         118       \n  115\n```", "```py\ndf.groupby('drug_admst').agg(np.mean)\n#              dia_final   dia_initial   sys_final   sys_in\n  itial\n# drug_admst \n# False            79.50         82.00       125.5        \n  133.50\n# True             82.75         84.25       121.5        \n  122.75\n```", "```py\ndf.loc['a','sys_initial'] = None\ndf.groupby('drug_admst').transform(lambda df: \\\n  df.fillna(df.mean())) \n#     dia_final    dia_initial   sys_final   sys_initial\n# a          70             75         115    123.666667\n# b          82             85         123    126.000000\n# c          92             90         130    130.000000\n# d          87             87         118    115.000000\n# e          85             90         130    150.000000\n# f          74             74         121    117.000000\n```", "```py\n    hospitals = pd.DataFrame(\n      { \"name\" : [\"City 1\", \"City 2\", \"City 3\"],\n        \"address\" : [\"Address 1\", \"Address 2\", \"Address \\\n          3\"],\n        \"city\": [\"City 1\", \"City 2\", \"City 3\"] },\n      index=[\"H1\", \"H2\", \"H3\"])\n    hospital_id = [\"H1\", \"H2\", \"H2\", \"H3\", \"H3\", \"H3\"]\n    df['hospital_id'] = hospital_id\n```", "```py\n    hospital_dict = {\n     \"H1\": (\"City 1\", \"Name 1\", \"Address 1\"),\n     \"H2\": (\"City 2\", \"Name 2\", \"Address 2\"),\n     \"H3\": (\"City 3\", \"Name 3\", \"Address 3\")\n    }\n    cities = [hospital_dict[key][0] \n             for key in hospital_id]\n```", "```py\n    cities = hospitals.loc[hospital_id, \"city\"]\n```", "```py\n    result = df.join(hospitals, on='hospital_id')\n    result.columns\n    # Result:\n    # Index(['dia_final', 'dia_initial', 'drug_admst', \n    # 'sys_final', 'sys_initial',\n    # 'hospital_id', 'address', 'city', 'name'],\n    # dtype='object')\n```", "```py\nimport pandas as pd\ndf = pd.read_csv('monthly_co2.csv', index_col=[0, 1])\ndf.head()\n```", "```py\n          co2\nyear    month    \n1958    3    315.70\n     4     317.45\n     5     317.51\n     6     317.24\n     7     315.86\n```", "```py\nimport matplotlib.pyplot as plt\nplt.plot(df.co2.values);\n```", "```py\nby_year = df.groupby('year').mean().co2\nplt.plot(by_year);\n```", "```py\nby_month = df.groupby('month').mean().co2\nplt.plot(by_month);\n```", "```py\nimport xarray as xr\nds = xr.Dataset.from_dataframe(df)\n```", "```py\nds['co2'][:10, :5]\n```", "```py\nds['co2'].sel(year=1960)\n```", "```py\nds.mean(dim='month')\n```", "```py\n%timeit df.groupby('year').mean().co2\n# Result:\n# 534 µs ± 10.8 µs per loop (mean ± std. dev. of 7 runs, \n  1000 loops each)\n```", "```py\n%timeit ds.mean(dim='month').co2.values\n# Result:\n# 150 µs ± 1.27 µs per loop (mean ± std. dev. of 7 runs, \n  10000 loops each)\n```", "```py\nmeasures = np.load('2d_measure.npy')\nmeasures.shape\n# Result:\n# (100, 100, 3)\n```", "```py\nfig, ax = plt.subplots(1, 3, figsize=(10, 3))\nfor i in range(3):\n    c = ax[i].imshow(measures[:, :, i], origin='lower')\n    plt.colorbar(c, ax=ax[i])\n\nplt.show()\n```", "```py\nda = xr.DataArray(measures, dims=['x', 'y', 'time'])\n```", "```py\nda.plot.imshow(x='x', y='y', col='time', robust=True);\n```"]