- en: Graphical Effects and Multimedia
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形效果和多媒体
- en: This chapter is a continuation of the previous chapter about graphics implementations.
    Here, we will be describing the possibility of adding some effects to the graphical
    elements that were used in the previous chapter. The Qt framework provides the
    classes and modules that are most commonly used when we are working with various
    types of graphical implementation, such as OpenGL, SVG, and 3D graphics. Classes
    are also available so that you can add effects to the standard graphical elements,
    such as the rectangle or other shapes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于图形实现的上一章的延续。在这里，我们将描述向上一章中使用的图形元素添加一些效果的可能性。Qt框架提供了我们在使用各种类型的图形实现（如OpenGL、SVG和3D图形）时最常用的类和模块。类也可供使用，以便您可以将效果添加到标准图形元素，如矩形或其他形状。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Standard graphical effects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准图形效果
- en: Standard animations and transformations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准动画和变换
- en: Additional modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外模块
- en: Multimedia
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多媒体
- en: Standard graphical effects
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准图形效果
- en: 'The Qt library provides standard graphical effects that can be used in relation
    to items such as `QGraphicsRectItem` and `QGraphicsLineItem`. Effects make the
    graphical elements of the application more representative and, as a result, styled
    in a modern fashion. The source of these effects can be images, pictures, graphical
    elements, parts of the images/elements, and so on. Usually, effects can be added
    to the graphical item using a setting function such as the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Qt库提供了标准图形效果，这些效果可以与`QGraphicsRectItem`和`QGraphicsLineItem`等项相关使用。效果使应用程序的图形元素更具代表性，并且因此以现代风格呈现。这些效果的资源可以是图像、图片、图形元素、图像/元素的某些部分等。通常，可以使用如下设置函数将效果添加到图形项中：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: QGraphicsEffect
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsEffect
- en: This class is the base class for all graphics effects that are used with Qt.
    The `QGraphicsEffect` class improves functionality by means of the following functions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此类是所有与Qt一起使用的图形效果的基类。`QGraphicsEffect`类通过以下函数提高了功能。
- en: set
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'This function sets the parameters/properties in relation to the graphical effects:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数设置与图形效果相关的参数/属性：
- en: '`setEnabled(bool)`: If the parameter is `True`, this sets this effect as being
    enabled.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`setEnabled(bool)`: 如果参数为`True`，则将此效果设置为启用。'
- en: is
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'This function returns a Boolean value (`bool`) related to these graphical effect
    states:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回与这些图形效果状态相关的布尔值（`bool`）。
- en: '`isEnabled()`: This returns `True` if this effect is enabled.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`isEnabled()`: 如果此效果被启用，则返回`True`。'
- en: functional
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the current values of the graphical
    effect, changes in functionality, and so on:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与图形效果的当前值、功能变化等相关联的函数：
- en: '`boundingRect()`: This returns the bounding rectangle of the `QtCore.QRectF`
    type for this effect.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`boundingRect()`: 这返回此效果的`QtCore.QRectF`类型的边界矩形。'
- en: '`boundingRectFor(QtCore.QRectF)`: This returns the bounding rectangle of the
    `QtCore.QRectF` type, which depends on the rectangle, specified in the parameter,
    in device coordinates, for this effect.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`boundingRectFor(QtCore.QRectF)`: 这返回`QtCore.QRectF`类型的边界矩形，该矩形依赖于参数中指定的矩形，以设备坐标形式表示此效果。'
- en: '`draw(QtGui.QPainter)`: This draws the effect and is called when it needs to
    be drawn.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`draw(QtGui.QPainter)`: 这用于绘制效果，并在需要绘制时被调用。'
- en: '`drawSource(QtGui.QPainter)`: This draws the source directly using the painter
    specified in the parameter.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawSource(QtGui.QPainter)`: 这使用参数中指定的画家直接绘制源。'
- en: '`sourceBoundingRect(QtCore.Qt.CoordinateSystem)`: This returns the bounding
    rectangle of the source that is mapped to the system specified in the parameter.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`sourceBoundingRect(QtCore.Qt.CoordinateSystem)`: 这返回映射到参数中指定的系统上的源边界矩形。'
- en: '`sourceChanged(QtWidgets.QGraphicsEffect.ChangeFlags)`: This notifies that
    the source of this effect has changed, with flags, specified in the parameter,
    that describe what has changed. The available flags are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`sourceChanged(QtWidgets.QGraphicsEffect.ChangeFlags)`: 这通知此效果的源已更改，参数中的标志描述了发生了什么变化。可用的标志如下：'
- en: '`QtWidgets.QGraphicsEffect.SourceAttached`: The effect is installed on a source.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsEffect.SourceAttached`: 效果被安装到源上。'
- en: '`QtWidgets.QGraphicsEffect.SourceDetached`: The effect is uninstalled from
    a source.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsEffect.SourceDetached`: 效果从源上卸载。'
- en: '`QtWidgets.QGraphicsEffect.SourceBoundingRectChanged`: The bounding rectangle
    of the source has changed.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsEffect.SourceBoundingRectChanged`：源的边界矩形已更改。'
- en: '`QtWidgets.QGraphicsEffect.SourceInvalidated`: The visual appearance of the
    source has changed.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsEffect.SourceInvalidated`：源的可视外观已更改。'
- en: '`sourceIsPixmap()`: This returns `True` if the source of the effect is a pixmap.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`sourceIsPixmap()`：如果效果源是位图，则返回 `True`。'
- en: '`sourcePixmap(QtCore.Qt.CoordinateSystem, PySide2.QtCore.QPoint, QtWidgets.QGraphicsEffect.PixmapPadMode)`:
    This returns a pixmap of the `QtGui.QPixmap` type with the source painted. The
    first parameter defines the coordinate system used for the source. The second
    parameter is the offset where the pixmap should be painted. The pad mode (the
    third parameter) defines how the pixmap is padded. The available parameters for
    the pad mode are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`sourcePixmap(QtCore.Qt.CoordinateSystem, PySide2.QtCore.QPoint, QtWidgets.QGraphicsEffect.PixmapPadMode)`：此操作返回一个带有源绘制的
    `QtGui.QPixmap` 类型的位图。第一个参数定义了用于源的坐标系。第二个参数是位图应该绘制的偏移量。填充模式（第三个参数）定义了位图的填充方式。可用的填充模式参数如下：'
- en: '`QtWidgets.QGraphicsEffect.NoPad`—`0`: The pixmap doesn''t receive additional
    padding.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsEffect.NoPad`—`0`：位图不会接收额外的填充。'
- en: '`QtWidgets.QGraphicsEffect.PadToTransparentBorder`—`1`: The pixmap will be
    padded to fully match the transparent border.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsEffect.PadToTransparentBorder`—`1`：位图将被填充以完全匹配透明边框。'
- en: '`QtWidgets.QGraphicsEffect.PadToEffectiveBoundingRect`—`2`: The pixmap will
    be padded to match the effective bounding rectangle of this effect.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsEffect.PadToEffectiveBoundingRect`—`2`：位图将被填充以匹配此效果的有效边界矩形。'
- en: '`update()`: This schedules a redraw of this effect.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`update()`：此操作安排此效果的重新绘制。'
- en: '`updateBoundingRect()`: This notifies when the bounding rectangle of this effect
    has changed.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateBoundingRect()`：当此效果的边界矩形发生变化时，此操作会发出通知。'
- en: signals
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signal in the `QGraphicsEffect` class is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsEffect` 类中可用的信号如下：'
- en: '`enabledChanged(bool)`: This signal is emitted when the effect becomes enabled
    or disabled, according to the state passed in the parameter.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`enabledChanged(bool)`：当效果根据参数中传入的状态变为启用或禁用时，此信号会被发出。'
- en: QGraphicsBlurEffect
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsBlurEffect
- en: 'This class realizes the blur effect for the graphical element. Blur effects
    reduce source details. The declaration syntax of this class is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此类实现了图形元素的模糊效果。模糊效果会减少源细节。此类的声明语法如下：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`QGraphicsBlurEffect` inherits from the `QGraphicsEffect` class and improves
    functionality by means of the following functions.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsBlurEffect` 类从 `QGraphicsEffect` 类继承，并通过以下函数改进了功能。'
- en: set
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting the parameters/properties in relation
    to the blur effect:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与模糊效果相关的参数/属性相关的函数：
- en: '`blur_effect.setBlurHints(QtWidgets.QGraphicsBlurEffect.BlurHints)`: This sets
    the blur hints for this effect, which describes how blur effects are applied.
    The available hints are as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`blur_effect.setBlurHints(QtWidgets.QGraphicsBlurEffect.BlurHints)`：此操作设置此效果的模糊提示，它描述了模糊效果是如何应用的。可用的提示如下：'
- en: '`QtWidgets.QGraphicsBlurEffect.PerformanceHint`: This sets the rendering performance
    as the most important factor.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsBlurEffect.PerformanceHint`：此操作将渲染性能设置为最重要的因素。'
- en: '`QtWidgets.QGraphicsBlurEffect.QualityHint`: This sets the rendering quality
    as the most important factor.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsBlurEffect.QualityHint`：此操作将渲染质量设置为最重要的因素。'
- en: '`QtWidgets.QGraphicsBlurEffect.AnimationHint`: This indicates that the blur
    radius will be animated.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsBlurEffect.AnimationHint`：这表示模糊半径将进行动画处理。'
- en: '`blur_effect.setBlurRadius(float)`: This sets the blur radius, specified in
    the parameter, for this effect. A bigger radius gives a more blurred appearance,
    while a smaller radius makes the appearance seem sharper.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`blur_effect.setBlurRadius(float)`：此操作为此效果设置模糊半径，由参数指定。较大的半径会产生更模糊的外观，而较小的半径会使外观看起来更锐利。'
- en: functional
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'These are the functions that are related to the current values of the blur
    effect, changes in functionality, and so on:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与模糊效果的当前值、功能变化等相关联的函数：
- en: '`blur_effect.blurHints()`: This returns hints of the `QtWidgets.QGraphicsBlurEffect.BlurHints`
    type that are used for this blur effect.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`blur_effect.blurHints()`：此操作返回用于此模糊效果的 `QtWidgets.QGraphicsBlurEffect.BlurHints`
    类型的提示。'
- en: '`blur_effect.blurRadius()`: This returns the blur radius of this effect.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`blur_effect.blurRadius()`：此操作返回此效果的模糊半径。'
- en: signals
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals of the `QGraphicsBlurEffect` class are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsBlurEffect` 类可用的信号如下：'
- en: '`blur_effect.blurHintsChanged(QtWidgets.QGraphicsBlurEffect.BlurHints)`: This
    signal is emitted when the blur hint changes, with new blur hints passed in the
    parameter.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`blur_effect.blurHintsChanged(QtWidgets.QGraphicsBlurEffect.BlurHints)`: 当模糊提示改变时，会发出此信号，新的模糊提示通过参数传入。'
- en: '`blur_effect.blurRadiusChanged(float)`: This signal is emitted when the blur
    radius changes, with the new blur radius passed in the parameter.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`blur_effect.blurRadiusChanged(float)`: 当模糊半径改变时，会发出此信号，新的模糊半径通过参数传入。'
- en: QGraphicsColorizeEffect
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsColorizeEffect
- en: 'This class implements colorizing. This effect tints the color of the source.
    The declaration syntax of this class is as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此类实现了着色功能。此效果会着色源的颜色。此类的声明语法如下：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`QGraphicsColorizeEffect` inherits from the `QGraphicsEffect` class and improves
    functionality by means of the following functions.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsColorizeEffect`类继承自`QGraphicsEffect`类，并通过以下函数改进了功能。'
- en: set
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting the parameters/properties in relation
    to the colorizing effect:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置着色效果相关参数/属性的函数：
- en: '`colorize_effect.setColor(QtGui.QColor)`: This sets the color that will be
    used for this colorizing effect.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`colorize_effect.setColor(QtGui.QColor)`: 设置用于此着色效果的色彩。'
- en: '`colorize_effect.setStrength(float)`: This sets the strength of the effect
    (`0.0`—no effect, and `1.0`—full colorization).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`colorize_effect.setStrength(float)`: 设置效果强度（`0.0`—无效果，`1.0`—完全着色）。'
- en: functional
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the current values of the colorizing
    effect, changes in functionality, and so on:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与着色效果当前值、功能变化等相关联的函数：
- en: '`colorize_effect.color()`: This returns the color of the `QtGui.QColor` type
    that''s used to colorize this effect.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`colorize_effect.color()`: 返回用于着色此效果的`QtGui.QColor`类型的颜色。'
- en: '`colorize_effect.strength()`: This returns the strength of the effect.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`colorize_effect.strength()`: 此函数返回效果强度。'
- en: signals
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: signals
- en: 'The available signals of the `QGraphicsColorizeEffect` class are as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsColorizeEffect`类的可用信号如下：'
- en: '`colorize_effect.colorChanged(QtGui.QColor)`: This signal is emitted when the
    color of the effect changes, with a new color passed in the parameter.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`colorize_effect.colorChanged(QtGui.QColor)`: 当效果颜色改变时，会发出此信号，新的颜色通过参数传入。'
- en: '`colorize_effect.strengthChanged(float)`: This signal is emitted when the strength
    of the effect changes, with a new strength passed in the parameter.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`colorize_effect.strengthChanged(float)`: 当效果强度改变时，会发出此信号，新的强度通过参数传入。'
- en: QGraphicsDropShadowEffect
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsDropShadowEffect
- en: 'This class provides the drop shadow effect for the source that''s provided.
    The declaration syntax of this class is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此类为提供的源提供了阴影效果。此类的声明语法如下：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`QGraphicsDropShadowEffect` inherits from the `QGraphicsEffect` class and improves
    functionality by means of the following functions.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsDropShadowEffect`类继承自`QGraphicsEffect`类，并通过以下函数改进了功能。'
- en: set
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting the parameters/properties in relation
    to the shadow effect:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置阴影效果相关参数/属性的函数：
- en: '`shadow_effect.setBlurRadius(float)`: This sets the blur radius in pixels for
    this drop shadow effect.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.setBlurRadius(float)`: 设置此阴影效果的像素模糊半径。'
- en: '`shadow_effect.setColor(QtGui.QColor)`: This sets the color for this drop shadow
    effect.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.setColor(QtGui.QColor)`: 设置此阴影效果的色彩。'
- en: '`shadow_effect.setOffset(QtCore.QPointF)`: This sets the shadow offset specified
    in the parameter.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.setOffset(QtCore.QPointF)`: 通过参数设置阴影偏移。'
- en: '`shadow_effect.setOffset(float)`: This sets the shadow offset specified in
    the parameter.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.setOffset(float)`: 设置参数中指定的阴影偏移。'
- en: '`shadow_effect.setOffset(dx, dy)`: This sets the shadow offset, as specified
    by the `dx` and `dy` values of the offset.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.setOffset(dx, dy)`: 通过指定偏移量的`dx`和`dy`值来设置阴影偏移。'
- en: '`shadow_effect.setXOffset(float)`: This sets the horizontal shadow offset in
    pixels specified in the parameter.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.setXOffset(float)`: 通过参数设置像素值来设置水平阴影偏移。'
- en: '`shadow_effect.setYOffset(float)`: This sets the vertical shadow offset in
    pixels specified in the parameter.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.setYOffset(float)`: 通过参数设置像素值来设置垂直阴影偏移。'
- en: functional
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the current values of the shadow effect,
    changes in functionality, and so on:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与阴影效果当前值、功能变化等相关联的函数：
- en: '`shadow_effect.blurRadius()`: This returns the blur radius in pixels of this
    drop shadow effect.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.blurRadius()`: 返回此阴影效果的像素模糊半径。'
- en: '`shadow_effect.color()`: This returns the color of the `QtGui.QColor` type
    for this drop shadow.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.color()`: 此函数返回此阴影的颜色，为`QtGui.QColor`类型。'
- en: '`shadow_effect.offset()`: This returns the shadow offset of the `QtCore.QPointF`
    type.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.offset()`: 此函数返回`QtCore.QPointF`类型的阴影偏移量。'
- en: '`shadow_effect.xOffset()`: This returns the horizontal shadow offset.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.xOffset()`: 此函数返回水平阴影偏移量。'
- en: '`shadow_effect.yOffset()`: This returns the vertical shadow offset.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.yOffset()`: 此函数返回垂直阴影偏移量。'
- en: signals
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals of the `QGraphicsDropShadowEffect` class are as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsDropShadowEffect`类的可用信号如下：'
- en: '`shadow_effect.blurRadiusChanged(float)`: This signal is emitted when the blur
    radius changes, with a new blur radius passed in the parameter.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.blurRadiusChanged(float)`: 当模糊半径改变时，会发出此信号，新的模糊半径通过参数传入。'
- en: '`shadow_effect.colorChanged(QtGui.QColor)`: This signal is emitted when the
    color of the effect changes, with a new color passed in the parameter.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.colorChanged(QtGui.QColor)`: 当效果的颜色改变时，会发出此信号，新的颜色通过参数传入。'
- en: '`shadow_effect.offsetChanged(QtCore.QPointF)`: This signal is emitted when
    the offset of the effect changes, with a new offset passed in the parameter.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`shadow_effect.offsetChanged(QtCore.QPointF)`: 当效果的偏移量改变时，会发出此信号，新的偏移量通过参数传入。'
- en: QGraphicsOpacityEffect
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsOpacityEffect
- en: 'This is the class that implements the opacity effect for the source. The declaration
    syntax of this class is as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实现源不透明效果的类。此类的声明语法如下：
- en: '[PRE4]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`QGraphicsDropShadowEffect` inherits from the `QGraphicsEffect` class and improves
    functionality by means of the following functions.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsDropShadowEffect`类继承自`QGraphicsEffect`类，并通过以下函数增强了功能。'
- en: set
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions related to setting the parameters/properties in relation
    to the opacity effect:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与不透明度效果相关的参数/属性相关的函数：
- en: '`opacity_effect.setOpacity(float)`: This sets the opacity for this effect (`0.0`—fully
    transparent, and `1.0`—fully opaque).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity_effect.setOpacity(float)`: 此函数设置此效果的不透明度（`0.0`—完全透明，`1.0`—完全不透明）。'
- en: '`opacity_effect.setOpacityMask(QtGui.QBrush)`: This sets the opacity mask,
    specified in the parameter, for this effect. This allows opacity to be applied
    to portions of an element.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity_effect.setOpacityMask(QtGui.QBrush)`: 此函数设置参数中指定的不透明度蒙版，为此效果允许将不透明度应用于元素的部分。'
- en: functional
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'These are functions that are related to the current values of the opacity effect,
    changes in functionality, and so on:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与不透明度效果的当前值、功能变化等相关联的函数：
- en: '`opacity_effect.opacity()`: This returns the opacity of this effect.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity_effect.opacity()`: 此函数返回此效果的不透明度。'
- en: '`opacity_effect.opacityMask()`: This returns the opacity mask of the `QtGui.QBrush`
    type for this effect.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity_effect.opacityMask()`: 此函数返回此效果`QtGui.QBrush`类型的不透明度蒙版。'
- en: signals
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals of the `QGraphicsOpacityEffect` class are as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsOpacityEffect`类的可用信号如下：'
- en: '`opacity_effect.opacityChanged(float)`: This signal is emitted when the opacity
    changes, with the new opacity passed in the parameter.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity_effect.opacityChanged(float)`: 当不透明度改变时，会发出此信号，新的不透明度通过参数传入。'
- en: '`opacity_effect.opacityMaskChanged(QtGui.QBrush)`: This signal is emitted when
    the opacity mask changes, with the new opacity mask passed in the parameter.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity_effect.opacityMaskChanged(QtGui.QBrush)`: 当不透明度蒙版改变时，会发出此信号，新的不透明度蒙版通过参数传入。'
- en: Standard animations and transformation
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准动画和转换
- en: Effects, with the help of the Qt framework, can be realized as animations of
    standard graphics items. These classes animate various items, such as `QGraphicsEllipseItem`,
    `QGraphicsTextItem`, and so on. The `QGraphicsItemAnimation` class can also be
    considered for the PySide binding.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Qt框架的帮助，效果可以作为标准图形项的动画实现。这些类可以动画化各种项，如`QGraphicsEllipseItem`、`QGraphicsTextItem`等。`QGraphicsItemAnimation`类也可以用于PySide绑定。
- en: QGraphicsTransform
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsTransform
- en: 'This is an abstract base class for building advanced transformations with a
    graphics item. The `QGraphicsTransform` class inherits from the `QObject` class
    and improves functionality by means of the following functions:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于构建高级图形项转换的抽象基类。`QGraphicsTransform`类继承自`QObject`类，并通过以下函数增强了功能：
- en: '`applyTo(QtGui.QMatrix4x4)`: This function applies this transformation to the
    matrix specified in the parameter. This method needs to be reimplemented in derived
    classes.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`applyTo(QtGui.QMatrix4x4)`: 此函数将此转换应用于参数中指定的矩阵。此方法需要在派生类中重新实现。'
- en: '`update()`: This notifies that the operation associated with this transform
    operation has changed.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`update()`: 这通知与这个变换操作相关的操作已改变。'
- en: QGraphicsRotation
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsRotation
- en: 'This class provides the rotation of a graphics item in the application. The
    declaration syntax of this class is as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类提供了在应用程序中对图形项进行旋转的功能。这个类的声明语法如下：
- en: '[PRE5]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`QGraphicsRotation` inherits from the `QGraphicsTransform` class and improves
    functionality by means of the following functions.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsRotation` 从 `QGraphicsTransform` 类继承，并通过以下函数增强了功能。'
- en: set
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting the parameters/properties in relation
    to the rotation:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与旋转相关的参数/属性相关的函数：
- en: '`graphics_rotation.setAngle(float)`: This sets the angle of this rotation.
    A value of `180.0` will rotate this item 180 degrees clockwise, while a value
    of `-180.0` will rotate this item 180 degrees counter-clockwise.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_rotation.setAngle(float)`: 这设置这次旋转的角度。`180.0` 的值将使这个项目顺时针旋转 180 度，而
    `-180.0` 的值将使这个项目逆时针旋转 180 度。'
- en: '`graphics_rotation.setAxis(QtGui.QVector3D)`: This sets the rotation axis,
    as specified in the parameter as a vector in 3D space. The vector can be (0, 0,
    1), rotation around the *z* axis (the default), or (1, 0, 0), which will rotate
    the item around the *x* axis.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_rotation.setAxis(QtGui.QVector3D)`: 这设置旋转轴，参数指定为3D空间中的向量。该向量可以是 (0,
    0, 1)，围绕 *z* 轴旋转（默认），或者 (1, 0, 0)，这将使项目围绕 *x* 轴旋转。'
- en: '`graphics_rotation.setAxis(QtCore.Qt.Axis)`: This sets the rotation axis specified
    in the parameter.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_rotation.setAxis(QtCore.Qt.Axis)`: 这设置由参数指定的旋转轴。'
- en: '`graphics_rotation.setOrigin(QtGui.QVector3D)`: This sets the origin point
    of the rotation in 3D space.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_rotation.setOrigin(QtGui.QVector3D)`: 这设置旋转在3D空间中的原点。'
- en: functional
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the rotation:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前旋转值的返回值相关的函数：
- en: '`graphics_rotation.angle()`: This returns the angle of this rotation in degrees.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_rotation.angle()`: 这返回了这次旋转的角度（以度为单位）。'
- en: '`graphics_rotation.axis()`: This returns the axis of the `QtGui.QVector3D`
    type for this rotation.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_rotation.axis()`: 这返回了这次旋转的 `QtGui.QVector3D` 类型的轴。'
- en: '`graphics_rotation.origin()`: This returns the origin of the `QtGui.QVector3D`
    type for this rotation.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_rotation.origin()`: 这返回了这次旋转的 `QtGui.QVector3D` 类型的原点。'
- en: signals
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: signals
- en: 'The available signals of the `QGraphicsRotation` class are as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsRotation` 类的可用的信号如下：'
- en: '`graphics_rotation.angleChanged()`: This signal is emitted when the angle of
    rotation changes.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_rotation.angleChanged()`: 当旋转角度改变时，会发出此信号。'
- en: '`graphics_rotation.axisChanged()`: This signal is emitted when the axis of
    rotation changes.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_rotation.axisChanged()`: 当旋转轴改变时，会发出此信号。'
- en: '`graphics_rotation.originChanged()`: This signal is emitted when the origin
    point of the rotation changes.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_rotation.originChanged()`: 当旋转的原点改变时，会发出此信号。'
- en: QGraphicsScale
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsScale
- en: 'This class provides a scale transformation of a graphics item. The declaration
    syntax of this class is as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类提供了图形项的缩放变换。这个类的声明语法如下：
- en: '[PRE6]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`QGraphicsScale` inherits from the `QGraphicsTransform` class and improves
    functionality by means of the following functions.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsScale` 从 `QGraphicsTransform` 类继承，并通过以下函数增强了功能。'
- en: set
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting the parameters/properties in relation
    to the scale:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与缩放相关的参数/属性相关的函数：
- en: '`graphics_scale.setOrigin(QtGui.QVector3D)`: This sets the origin point of
    the scale in a 3D space.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.setOrigin(QtGui.QVector3D)`: 这设置缩放在3D空间中的原点。'
- en: '`graphics_scale.setXScale(float)`: This sets the horizontal scale factor specified
    in the parameter. The default value is `1.0`. If the factor is `0.0`, the item
    will be collapsed into a single point. If the factor is a negative value, the
    item will be mirrored horizontally.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.setXScale(float)`: 这设置由参数指定的水平缩放因子。默认值是 `1.0`。如果因子是 `0.0`，则项目将折叠成一个单独的点。如果因子是负值，则项目将在水平方向上镜像。'
- en: '`graphics_scale.setYScale(float)`: This sets the vertical scale factor specified
    in the parameter. The default value is `1.0`. If the factor is `0.0`, the item
    will be collapsed into a single point. If the factor is a negative value, the
    item will be flipped vertically.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.setYScale(float)`: 这设置由参数指定的垂直缩放因子。默认值是 `1.0`。如果因子是 `0.0`，则项目将折叠成一个单独的点。如果因子是负值，则项目将在垂直方向上翻转。'
- en: '`graphics_scale.setZScale(float)`: This sets the depth scale factor specified
    in the parameter. The default value is `1.0`. If the factor is `0.0`, the item
    will be collapsed into a single point. If the factor is a negative value, the
    item will be flipped end to end.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.setZScale(float)`: 这设置参数中指定的深度缩放因子。默认值为 `1.0`。如果因子为 `0.0`，项目将折叠成一个点。如果因子是负值，项目将翻转成端到端。'
- en: functional
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'These are functions that are related to the returns of the current values of
    the scale:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与缩放当前值返回相关的函数：
- en: '`graphics_scale.origin()`: This returns the origin of the `QtGui.QVector3D`
    type for this scale.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.origin()`: 这返回此缩放的 `QtGui.QVector3D` 类型的原点。'
- en: '`graphics_scale.xScale()`: This returns the horizontal scale factor.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.xScale()`: 这返回水平缩放因子。'
- en: '`graphics_scale.yScale()`: This returns the vertical scale factor.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.yScale()`: 这返回垂直缩放因子。'
- en: '`graphics_scale.zScale()`: This returns the depth scale factor.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.zScale()`: 这返回深度缩放因子。'
- en: signals
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals of the `QGraphicsScale` class are as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsScale` 类的可用的信号如下：'
- en: '`graphics_scale.originChanged()`: This signal is emitted when the origin point
    of the scale changes.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.originChanged()`: 当缩放的原点改变时，会发出此信号。'
- en: '`graphics_scale.scaleChanged()`: This signal is emitted when the scale changes.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.scaleChanged()`: 当缩放改变时，会发出此信号。'
- en: '`graphics_scale.xScaleChanged()`: This signal is emitted when the horizontal
    scale changes.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.xScaleChanged()`: 当水平缩放改变时，会发出此信号。'
- en: '`graphics_scale.yScaleChanged()`: This signal is emitted when the vertical
    scale changes.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.yScaleChanged()`: 当垂直缩放改变时，会发出此信号。'
- en: '`graphics_scale.zScaleChanged()`: This signal is emitted when the depth scale
    changes.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_scale.zScaleChanged()`: 当深度缩放改变时，会发出此信号。'
- en: QGraphicsItemAnimation
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsItemAnimation
- en: 'In the PySide Python bindings, this class realizes animation support for graphics
    item-related classes. This class includes operations that are the most useful for
    an item in terms of receiving animation. The declaration syntax of this class
    is as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PySide Python 绑定中，此类实现了与图形项目相关的类的动画支持。此类包括对项目接收动画最有用的操作。此类的声明语法如下：
- en: '[PRE7]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `QGraphicsItemAnimation` class improves functionality by means of the following
    functions.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsItemAnimation` 类通过以下函数增强了功能。'
- en: set
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions related to setting the parameters/properties in relation
    to the item''s animation:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与项目动画相关的参数/属性相关的函数：
- en: '`item_animation.setItem(QtWidgets.QGraphicsItem)`: This sets the item that
    will be used in this animation.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.setItem(QtWidgets.QGraphicsItem)`: 这将设置在此动画中使用的项目。'
- en: '`item_animation.setPosAt(float, QtCore.QPointF)`: This sets the item''s position
    at the step (the first parameter) to the point (the second parameter).'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.setPosAt(float, QtCore.QPointF)`: 这将项目在步骤（第一个参数）的位置设置为点（第二个参数）。'
- en: '`item_animation.setRotationAt(float, float)`: This sets the item''s rotation
    at the step (the first parameter) to the angle (the second parameter).'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.setRotationAt(float, float)`: 这将在步骤（第一个参数）处设置项目的旋转到角度（第二个参数）。'
- en: '`item_animation.setScaleAt(float, float, float)`: This sets the item''s scale
    at the step (the first parameter) with horizontal (the second parameter) and vertical
    (the third parameter) scale factors.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.setScaleAt(float, float, float)`: 这将在步骤（第一个参数）处设置项目的缩放，具有水平（第二个参数）和垂直（第三个参数）缩放因子。'
- en: '`item_animation.setShearAt(float, float, float)`: This sets the item''s shear
    at the step (the first parameter) with horizontal (the second parameter) and vertical
    (the third parameter) shear factors.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.setShearAt(float, float, float)`: 这将在步骤（第一个参数）处设置项目的剪切，具有水平（第二个参数）和垂直（第三个参数）剪切因子。'
- en: '`item_animation.setStep(float)`: This sets the current step, specified in the
    parameter, for this animation. The transformations are to be performed at this
    step.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.setStep(float)`: 这设置此动画的当前步骤，指定在参数中。变换将在这一步执行。'
- en: '`item_animation.setTimeLine(QtCore.QTimeLine)`: This sets the timeline, specified
    in the parameter, that is used to control the rate of this animation.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.setTimeLine(QtCore.QTimeLine)`: 这设置由参数指定的时间线，用于控制此动画的速率。'
- en: '`item_animation.setTranslationAt(float, float, float)`: This sets the item''s
    translation at the step (the first parameter) with horizontal (the second parameter)
    and vertical (the third parameter) coordinates.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.setTranslationAt(float, float, float)`: 这将在步骤（第一个参数）处设置项目的平移，具有水平（第二个参数）和垂直（第三个参数）坐标。'
- en: functional
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values of
    the item''s animation, changes in functionality, and so on:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与项目动画当前值、功能变化等相关联的函数：
- en: '`item_animation.clear()`: This clears the transformations that are used for
    this animation, with the item and timeline retained.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.clear()`: 这将清除用于此动画的变换，保留项目和时线。'
- en: '`item_animation.horizontalScaleAt(float)`: This returns the horizontal scale
    for this item at the step specified in the parameter.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.horizontalScaleAt(float)`: 这将返回在参数指定的步骤中此项目的水平缩放。'
- en: '`item_animation.horizontalShearAt(float)`: This returns the horizontal shear
    for this item at the step specified in the parameter.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.horizontalShearAt(float)`: 这将返回在参数指定的步骤中此项目的水平剪切。'
- en: '`item_animation.item()`: This returns the item of the `QtWidgets.QGraphicsItem`
    type on which this animation operates.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.item()`: 这将返回在此动画上操作的类型为 `QtWidgets.QGraphicsItem` 的项目。'
- en: '`item_animation.matrixAt(float)`: This returns the matrix of the `QtGui.QMatrix`
    type that is used to transform the item at the step specified in the parameter.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.matrixAt(float)`: 这将返回在参数指定的步骤中用于变换项目的 `QtGui.QMatrix` 类型的矩阵。'
- en: '`item_animation.posAt(float)`: This returns the item''s position of the `QtCore.QPointF`
    type at the step specified in the parameter.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.posAt(float)`: 这将返回在参数指定的步骤中项目的 `QtCore.QPointF` 类型的位置。'
- en: '`item_animation.posList()`: This returns the list of all explicitly inserted
    positions.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.posList()`: 这将返回所有显式插入的位置列表。'
- en: '`item_animation.reset()`: This resets the item''s animation to the starting
    position and transformation.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.reset()`: 这将重置项目的动画到起始位置和变换。'
- en: '`item_animation.rotationAt(float)`: This returns the angle at which this item
    is rotated at the step specified in the parameter.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.rotationAt(float)`: 这将返回在参数指定的步骤中此项目旋转的角度。'
- en: '`item_animation.rotationList()`: This returns a list of all explicitly inserted
    rotations.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.rotationList()`: 这将返回所有显式插入的旋转列表。'
- en: '`item_animation.scaleList()`: This returns a list of all explicitly inserted
    scales.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.scaleList()`: 这将返回所有显式插入的缩放列表。'
- en: '`item_animation.shearList()`: This returns a list of all explicitly inserted
    shears.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.shearList()`: 这将返回所有显式插入的剪切列表。'
- en: '`item_animation.timeLine()`: This returns the timeline of the `QtCore.QTimeLine`
    type for this animation.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.timeLine()`: 这将返回此动画的 `QtCore.QTimeLine` 类型的时线。'
- en: '`item_animation.translationList()`: This returns a list of all explicitly inserted
    translations.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.translationList()`: 这将返回所有显式插入的平移列表。'
- en: '`item_animation.verticalScaleAt(float)`: This returns the vertical scale of
    the item at the step specified in the parameter.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.verticalScaleAt(float)`: 这将返回在参数指定的步骤中项目的垂直缩放。'
- en: '`item_animation.verticalShearAt(float)`: This returns the vertical shear of
    the item at the step specified in the parameter.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.verticalShearAt(float)`: 这将返回在参数指定的步骤中项目的垂直剪切。'
- en: '`item_animation.xTranslationAt(float)`: This returns the horizontal translation
    of the item at the step specified in the parameter.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.xTranslationAt(float)`: 这将返回在参数指定的步骤中项目的水平平移。'
- en: '`item_animation.yTranslationAt(float)`: This returns the vertical translation
    of the item at the step specified in the parameter.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`item_animation.yTranslationAt(float)`: 这将返回在参数指定的步骤中项目的垂直平移。'
- en: Additional modules
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他模块
- en: In addition to the graphics classes we've already described, Qt provides support
    for OpenGL, which is represented in a wide set of classes from the `QtGui` module.
    Also, the Qt library has additional modules for working with graphics in the GUI
    application. Modules that realize graphics support, such as `QtSvg`, `QtCharts`,
    `QtDataVisualization`, and 3D modules, such as `Qt3DCore`, `Qt3DInput` `Qt3DLogic`,
    `Qt3DRender`, `Qt3DExtras`, and `Qt3DAnimation`, are commonly used in development.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们已描述的图形类之外，Qt 还提供了对 OpenGL 的支持，这体现在 `QtGui` 模块中的一系列类中。此外，Qt 库还有用于在 GUI 应用程序中处理图形的附加模块。实现图形支持的模块，如
    `QtSvg`、`QtCharts`、`QtDataVisualization` 以及 3D 模块，如 `Qt3DCore`、`Qt3DInput`、`Qt3DLogic`、`Qt3DRender`、`Qt3DExtras`
    和 `Qt3DAnimation`，在开发中常用。
- en: Now, let's consider the `QtSvg` module. It is recommended that you read the
    documentation (PySide2—[https://doc.qt.io/qtforpython/index.html](https://doc.qt.io/qtforpython/index.html)
    and PyQt5—[https://www.riverbankcomputing.com/static/Docs/PyQt5/](https://www.riverbankcomputing.com/static/Docs/PyQt5/))
    if you want to learn about the other modules.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们考虑 `QtSvg` 模块。如果你想要了解其他模块，建议你阅读文档（PySide2—[https://doc.qt.io/qtforpython/index.html](https://doc.qt.io/qtforpython/index.html)
    和 PyQt5—[https://www.riverbankcomputing.com/static/Docs/PyQt5/](https://www.riverbankcomputing.com/static/Docs/PyQt5/))。
- en: QtSvg
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QtSvg
- en: 'The `QtSvg` module realizes the handling of SVG images. SVG is a language that
    implements two-dimensional vector graphics. For use in an application, this module
    needs to be imported with the following statements:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtSvg` 模块实现了 SVG 图像的处理。SVG 是一种实现二维矢量图形的语言。为了在应用程序中使用，此模块需要使用以下语句导入：'
- en: 'First, we have the PySide2 `import` statement, as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有 PySide2 的 `import` 语句，如下所示：
- en: '[PRE8]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we have the PyQt5 `import` statement, as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有 PyQt5 的 `import` 语句，如下所示：
- en: '[PRE9]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `QtSvg` module includes the following classes.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtSvg` 模块包括以下类。'
- en: QSvgRenderer
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QSvgRenderer
- en: 'This class draws content from the SVG files using paint devices, such as `QPaintDevice`.
    The declaration syntax is as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此类使用绘图设备（如 `QPaintDevice`）从 SVG 文件中绘制内容。声明语法如下：
- en: '[PRE10]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `QSvgRenderer` class improves functionality by means of the following functions.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSvgRenderer` 类通过以下函数提高了功能。'
- en: set
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting the parameters/properties in relation
    to the SVG renderer:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与 SVG 渲染器相关的参数/属性相关的函数：
- en: '`svg_renderer.setCurrentFrame(int)`: This sets the current frame in the animation.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.setCurrentFrame(int)`: 这设置动画中的当前帧。'
- en: '`svg_renderer.setFramesPerSecond(int)`: This sets the number of frames to be
    shown per second.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.setFramesPerSecond(int)`: 设置每秒要显示的帧数。'
- en: '`svg_renderer.setViewBox(QtCore.QRect)`: This sets the rectangle, specified
    in the parameter with integer values, that will be a visible area of the document.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.setViewBox(QtCore.QRect)`: 设置由整数值参数指定的矩形，该矩形将成为文档的可视区域。'
- en: '`svg_renderer.setViewBox(QRectF)`: This sets the rectangle, specified in the
    parameter with float values, that will be a visible area of the document.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.setViewBox(QRectF)`: 这将设置由浮点值参数指定的矩形，该矩形将成为文档的可视区域。'
- en: functional
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the SVG renderer, changes in functionality, and so on:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与 SVG 渲染器当前值返回、功能变化等相关联的函数：
- en: '`svg_renderer.animated()`: This returns `True` if animated elements are included.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.animated()`: 如果包含动画元素，则返回 `True`。'
- en: '`svg_renderer.animationDuration()`: This returns the number of frames that
    are used in the animation.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.animationDuration()`: 这返回动画中使用的帧数。'
- en: '`svg_renderer.boundsOnElement(str)`: This returns the bounding rectangle of
    the `QtCore.QRectF` type for the item with the ID specified in the parameter.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.boundsOnElement(str)`: 返回参数中指定的 ID 的项的 `QtCore.QRectF` 类型的边界矩形。'
- en: '`svg_renderer.currentFrame()`: This returns the number of current frame in
    the animation.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.currentFrame()`: 返回动画中的当前帧数。'
- en: '`svg_renderer.defaultSize()`: This returns the default size of the contents
    of the SVG file.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.defaultSize()`: 返回 SVG 文件内容的默认大小。'
- en: '`svg_renderer.elementExists(str)`: This returns `True` if the element with
    the ID specified in the parameter exists in the SVG file.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.elementExists(str)`: 如果参数中指定的 ID 在 SVG 文件中存在，则返回 `True`。'
- en: '`svg_renderer.framesPerSecond()`: This returns the number of frames to be shown
    per second.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.framesPerSecond()`: 返回每秒要显示的帧数。'
- en: '`svg_renderer.isValid()`: This returns `True` if the current document is valid.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.isValid()`: 如果当前文档有效，则返回 `True`。'
- en: '`svg_renderer.load("Path/to/file.svg")`: This loads the SVG file specified
    in the parameter, and returns `True` if the content was successfully parsed.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.load("Path/to/file.svg")`: 加载参数中指定的 SVG 文件，如果内容成功解析，则返回 `True`。'
- en: '`svg_renderer.load(QtCore.QXmlStreamReader)`: This loads SVG in content specified
    in the parameter, and returns `True` if the content was successfully parsed.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.load(QtCore.QXmlStreamReader)`: 加载参数中指定的内容中的 SVG，如果内容成功解析，则返回
    `True`。'
- en: '`svg_renderer.load(QtCore.QByteArray)`: This loads the SVG format content specified
    in the parameter, and returns `True` if the content was successfully parsed.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.load(QtCore.QByteArray)`: 加载参数中指定的 SVG 格式内容，如果内容成功解析，则返回 `True`。'
- en: '`svg_renderer.render(QtGui.QPainter)`: This renders the current document, or
    the current frame of the animated document, using the painter specified in the
    parameter.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.render(QtGui.QPainter)`: 这使用参数中指定的画家渲染当前文档或动画文档的当前帧。'
- en: '`svg_renderer.render(QtGui.QPainter, str, QtCore.QRectF)`: This renders the
    element with the ID (the second parameter) using the painter (the first parameter)
    on the bounds (the third parameter).'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.render(QtGui.QPainter, str, QtCore.QRectF)`: 这使用画家（第一个参数）在边界（第三个参数）上渲染具有ID（第二个参数）的元素。'
- en: '`svg_renderer.render(QtGui.QPainter, QtCore.QRectF)`: This renders the current
    document using the painter (the first parameter) on the bounds (the second parameter).'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.render(QtGui.QPainter, QtCore.QRectF)`: 这使用画家（第一个参数）在边界（第二个参数）上渲染当前文档。'
- en: '`svg_renderer.viewBox()`: This returns the visible area as the `QtCore.QRect`
    of the document.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.viewBox()`: 这返回文档的可视区域，作为`QtCore.QRect`。'
- en: '`svg_renderer.viewBoxF()`: This returns the visible area as the `QtCore.QRectF`
    of the document.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.viewBoxF()`: 这返回文档的可视区域，作为`QtCore.QRectF`。'
- en: signals
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signal of the `QSvgRenderer` class is as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSvgRenderer`类的可用信号如下：'
- en: '`svg_renderer.repaintNeeded()`: The signal is emitted when the rendering of
    the document needs to be updated'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_renderer.repaintNeeded()`: 当文档渲染需要更新时发出此信号。'
- en: QSvgGenerator
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QSvgGenerator
- en: 'This class is a write-only paint device for creations of the SVG drawings.
    The declaration syntax is as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 此类是SVG绘图创建的只写绘图设备。声明语法如下：
- en: '[PRE11]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `QSvgGenerator` class improves functionality by means of the following functions.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSvgGenerator`类通过以下函数改进了功能。'
- en: set
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions related to setting the parameters/properties in relation
    to the SVG generator:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与SVG生成器相关的参数/属性相关的函数：
- en: '`svg_generator.setDescription(str)`: This sets the description, specified in
    the parameter, for the generated SVG drawing.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.setDescription(str)`: 这为生成的SVG绘图设置参数中指定的描述。'
- en: '`svg_generator.setFileName("Path/to/file.svg")`: This sets the filename, specified
    in the parameter, that is used for generation of the SVG drawing.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.setFileName("Path/to/file.svg")`: 这设置用于生成SVG绘图的文件名，指定在参数中。'
- en: '`svg_generator.setOutputDevice(QtCore.QIODevice)`: This sets the output device,
    specified in the parameter, that is used for generation of the SVG drawing.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.setOutputDevice(QtCore.QIODevice)`: 这设置用于生成SVG绘图的输出设备，指定在参数中。'
- en: '`svg_generator.setResolution(int)`: This sets the resolution for the generated
    output, in **dots per inch** (**dpi**), that will be used for calculating the
    physical size of the SVG drawing.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.setResolution(int)`: 这设置生成输出的分辨率，以**每英寸点数**（**dpi**）为单位，用于计算SVG绘图的物理大小。'
- en: '`svg_generator.setSize(QtCore.QSize)`: This sets the size, specified in the
    parameter, that is used for generation of the SVG drawing.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.setSize(QtCore.QSize)`: 这将设置参数中指定的尺寸，用于生成SVG绘图。'
- en: '`svg_generator.setTitle(str)`: This sets the title, specified in the parameter,
    that is used for generation of the SVG drawing.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.setTitle(str)`: 这设置用于生成SVG绘图的标题，指定在参数中。'
- en: '`svg_generator.setViewBox(QtCore.QRect)`: This sets the view box, specified
    in the parameter with integer values, that is used for the generation of the SVG
    drawing.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.setViewBox(QtCore.QRect)`: 这使用参数中指定的整数值设置视图框，用于生成SVG绘图。'
- en: '`svg_generator.setViewBox(QtCore.QRectF)`: This sets the view box, specified
    in the parameter with float values, that is used for the generation of the SVG
    drawing.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.setViewBox(QtCore.QRectF)`: 这使用参数中指定的浮点值设置视图框，用于生成SVG绘图。'
- en: functional
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'These are functions that are related to the returns of the current values of
    the SVG generator, changes in functionality, and so on:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与SVG生成器当前值的返回、功能变化等相关联的函数：
- en: '`svg_generator.description()`: This returns a description of the SVG drawing
    that was generated.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.description()`: 这返回生成的SVG绘图的描述。'
- en: '`svg_generator.fileName()`: This returns the filename of the SVG drawing that
    was generated.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.fileName()`: 这返回生成的SVG绘图的文件名。'
- en: '`svg_generator.outputDevice()`: This returns the output device of the `QtCore.QIODevice`
    type for the SVG drawing that was generated.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.outputDevice()`: 这返回用于SVG绘图的`QtCore.QIODevice`类型的输出设备。'
- en: '`svg_generator.resolution()`: This returns the resolution of the output that
    was generated, in dpi.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.resolution()`: 这返回生成的输出的分辨率，以dpi为单位。'
- en: '`svg_generator.size()`: This returns the size of the `QtCore.QSize` type for the
    SVG drawing that was generated.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.size()`: 这返回生成的SVG绘图的`QtCore.QSize`类型的大小。'
- en: '`svg_generator.title()`: This returns title of the SVG drawing that was  generated.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.title()`: 这返回生成的SVG绘图的标题。'
- en: '`svg_generator.viewBox()`: This returns the view box of the `QtCore.QRect`
    type for the SVG drawing that was generated.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.viewBox()`: 这返回生成的SVG绘图的`QtCore.QRect`类型的视图框。'
- en: '`svg_generator.viewBoxF()`: This returns the view box of the `QtCore.QRectF`
    type for the SVG drawing that was generated.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_generator.viewBoxF()`: 这返回生成的SVG绘图的`QtCore.QRectF`类型的视图框。'
- en: QGraphicsSvgItem
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsSvgItem
- en: 'This class is used to render the SVG file''s contents. This can be used to
    render the content to the graphics view using the `QGraphicsView` class described
    in the previous chapter. The declaration syntax is as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 此类用于渲染SVG文件的内容。这可以使用上一章中描述的`QGraphicsView`类将内容渲染到图形视图中。声明语法如下：
- en: '[PRE12]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `QGraphicsSvgItem` class improves functionality by means of the following
    functions.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsSvgItem`类通过以下函数改进了功能。'
- en: set
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions related to setting the parameters/properties in relation
    to the SVG item:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与SVG元素相关的参数/属性相关的函数：
- en: '`svg_item.setElementId(str)`: This sets the XML ID, specified in the parameter,
    for the element.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_item.setElementId(str)`: 这将设置由参数指定的元素的XML ID。'
- en: '`svg_item.setMaximumCacheSize(QtCore.QSize)`: This sets the maximum size, specified
    in the parameter, of the device coordinate cache size for this item.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_item.setMaximumCacheSize(QtCore.QSize)`: 这将设置此元素的设备坐标缓存大小的最大值，指定在参数中。'
- en: '`svg_item.setSharedRenderer(QtSvg.QSvgRenderer)`: This sets the renderer as
    shared. The renderer can be used on a number of items.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_item.setSharedRenderer(QtSvg.QSvgRenderer)`: 这将渲染器设置为共享。渲染器可以在多个元素上使用。'
- en: functional
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values of
    the SVG item:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与SVG元素当前值返回相关的函数：
- en: '`svg_item.elementId()`: This returns the XML ID of the currently rendered element.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_item.elementId()`: 这返回当前渲染元素的XML ID。'
- en: '`svg_item.maximumCacheSize()`: This returns the maximum size of the device
    coordinate cache for this item.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_item.maximumCacheSize()`: 这返回此元素的设备坐标缓存的最大大小。'
- en: '`svg_item.renderer()`**:** This returns the current renderer of the `QtSvg.QSvgRenderer`
    type that is used for this SVG item.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_item.renderer()`**:** 这返回用于此SVG元素的`QtSvg.QSvgRenderer`类型的当前渲染器。'
- en: QSvgWidget
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QSvgWidget
- en: 'This class displays SVG files with the widget. The declaration syntax is as
    follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 此类使用小部件显示SVG文件。声明语法如下：
- en: '[PRE13]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `QSvgWidget` class improves functionality by means of the following functions.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSvgWidget`类通过以下函数改进了功能。'
- en: functional
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values of
    the SVG widget:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与SVG小部件当前值返回相关的函数：
- en: '`svg_widget.load("Path/to/file.svg")`: This loads the SVG file, specified in
    the parameter, and updates the widget.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_widget.load("Path/to/file.svg")`: 这将加载由参数指定的SVG文件，并更新小部件。'
- en: '`svg_widget.load(QtCore.QByteArray)`: This loads the SVG format''s contents,
    specified in the parameter, and updates the widget.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_widget.load(QtCore.QByteArray)`: 这将加载由参数指定的SVG格式的内容，并更新小部件。'
- en: '`svg_widget.renderer()`: This returns the renderer of the `QtSvg.QSvgRenderer`
    type that''s used to display the contents of the SVG widget.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg_widget.renderer()`: 这返回用于显示SVG小部件内容的`QtSvg.QSvgRenderer`类型的渲染器。'
- en: Multimedia
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多媒体
- en: The Qt framework provides multimedia support for audio, video, radio, and camera
    functionality in the GUI application. The modules that can help you realize this
    are `QtMultimedia` and `QtMultimediaWidgets`. `QtMultimedia` includes classes
    for low-level working with multimedia, while `QtMultimediaWidgets` can represent
    the widget for media objects. The `QMediaPlayer` class of the `QtMultimedia` module
    can be organized to play a media source.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: Qt框架为GUI应用程序提供音频、视频、收音机和相机功能的多媒体支持。可以帮助你实现这一点的模块是`QtMultimedia`和`QtMultimediaWidgets`。`QtMultimedia`包括用于多媒体的低级别工作的类，而`QtMultimediaWidgets`可以表示媒体对象的窗口小部件。`QtMultimedia`模块的`QMediaPlayer`类可以组织播放媒体源。
- en: QtMultimedia
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt多媒体
- en: The `QtMultimedia` module realizes functionality for working with multimedia
    such as audio, video, radio, and camera. For use in the application, this module
    needs to be imported with the following statements.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtMultimedia` 模块实现了处理多媒体功能，如音频、视频、广播和摄像头。在应用程序中使用此模块时，需要使用以下语句导入。'
- en: 'We have the PySide2 `import` statement, as follows:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有 PySide2 的 `import` 语句，如下所示：
- en: '[PRE14]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We also have the PyQt5 `import` statement, as follows:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有 PyQt5 的 `import` 语句，如下所示：
- en: '[PRE15]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `QtMultimedia` module includes classes such as `QAudio`, `QSound`, `QRadioTuner`,
    and `QVideoWindowControl`. Let's consider the available camera functionality,
    since this technology combines all media functionality.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtMultimedia` 模块包括 `QAudio`、`QSound`、`QRadioTuner` 和 `QVideoWindowControl`
    等类。让我们考虑可用的摄像头功能，因为这项技术结合了所有媒体功能。'
- en: QMediaObject
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QMediaObject
- en: 'This is a basic class for multimedia objects in the `QtMultimedia` module.
    This class provides the basic functionality that''s inherited by other multimedia
    classes that can be used in the application. The declaration of this class is
    as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `QtMultimedia` 模块中多媒体对象的基本类。此类提供了其他可以在应用程序中使用的多媒体类继承的基本功能。此类的声明如下：
- en: '[PRE16]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `QMediaObject` class improves functionality by means of the following functions.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`QMediaObject` 类通过以下函数提高功能。'
- en: add
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: add
- en: 'This function is related to the addition of properties to the media object:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与向媒体对象添加属性相关：
- en: '`media_object.addPropertyWatch(QtCore.QByteArray)`: This enables the media
    object to watch the property name.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.addPropertyWatch(QtCore.QByteArray)`: 这使媒体对象能够监视属性名称。'
- en: set
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'This function is related to setting parameters/properties in relation to the media
    object:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与设置与媒体对象相关的参数/属性相关：
- en: '`media_object.setNotifyInterval(int)`: This sets the interval, specified in
    the parameter, for updating the properties, in milliseconds (the default is `1000`).'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.setNotifyInterval(int)`: 这设置参数中指定的间隔，以毫秒为单位（默认为 `1000`），用于更新属性。'
- en: is
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'These are functions that return a Boolean value (`bool`) related to these media
    object states:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回与这些媒体对象状态相关的布尔值 (`bool`) 的函数：
- en: '`media_object.isAvailable()`: This returns `True` if the service is available.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.isAvailable()`: 如果服务可用，则返回 `True`。'
- en: '`media_object.isMetaDataAvailable()`: This returns `True` if the metadata associated
    with this media object is available.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.isMetaDataAvailable()`: 如果与该媒体对象关联的元数据可用，则返回 `True`。'
- en: functional
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the media object, changes in functionality, and so on:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与媒体对象当前值的返回、功能变化等相关联的函数：
- en: '`media_object.availability()`: This returns the availability of the functionality
    offered by this object as the `QtMultimedia.QMultimedia.AvailabilityStatus` type.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.availability()`: 这返回由该对象提供的功能可用性，作为 `QtMultimedia.QMultimedia.AvailabilityStatus`
    类型。'
- en: '`media_object.availableMetaData()`: This returns a list of keys available for
    the metadata of the media object.'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.availableMetaData()`: 这返回可用于媒体对象元数据的键列表。'
- en: '`media_object.bind(QtCore.QObject)`: This binds the object, specified in the
    parameter, to this media object instance.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.bind(QtCore.QObject)`: 这将参数中指定的对象绑定到该媒体对象实例。'
- en: '`media_object.metaData(str)`: This returns the value associated with the metadata
    key specified in the parameter.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.metaData(str)`: 这返回与参数中指定的元数据键关联的值。'
- en: '`media_object.notifyInterval()`: This returns the interval for updating the
    properties.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.notifyInterval()`: 这返回更新属性的间隔。'
- en: '`media_object.removePropertyWatch(QtCore.QByteArray)`: This removes the property
    name from the list of properties.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.removePropertyWatch(QtCore.QByteArray)`: 这将从属性列表中删除属性名称。'
- en: '`media_object.service()`: This returns the media service that provides the
    functionality for this multimedia.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.service()`: 这返回提供此多媒体功能的媒体服务。'
- en: '`media_object.unbind(QtCore.QObject)`: This unbinds the object, specified in
    the parameter, from this media object.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.unbind(QtCore.QObject)`: 这将参数中指定的对象从该媒体对象中解绑。'
- en: signals
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: signals
- en: 'The available signals of the `QMediaObject` class are as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`QMediaObject` 类的可用的信号如下：'
- en: '`media_object.availabilityChanged(bool)`: This signal is emitted when the availability
    state of this media object has changed, with respect to the availability passed
    in the parameter.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.availabilityChanged(bool)`: 当此媒体对象的可用状态相对于参数中传入的可用性发生变化时，发出此信号。'
- en: '`media_object.availabilityChanged(QtMultimedia.QMultimedia.AvailabilityStatus)`:
    This signal is emitted when the availability of the service of this media object
    has changed, with respect to the availability passed in the parameter.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.availabilityChanged(QtMultimedia.QMultimedia.AvailabilityStatus)`:
    当此媒体对象的服务可用性相对于传入参数的可用性发生变化时，发出此信号。'
- en: '`media_object.metaDataAvailableChanged(bool)`: This signal is emitted when
    the metadata of this media object has changed, with respect to the available state
    passed in the parameter.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.metaDataAvailableChanged(bool)`: 当此媒体对象的元数据相对于传入参数的可用状态发生变化时，发出此信号。'
- en: '`media_object.metaDataChanged()`: This signal is emitted when the metadata
    of this media object has changed.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.metaDataChanged()`: 当此媒体对象的元数据发生变化时，发出此信号。'
- en: '`media_object.metaDataChanged(str, object)`: This signal is emitted when the
    metadata element value (the second parameter) with the key (the first parameter)
    of this media object has changed.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.metaDataChanged(str, object)`: 当此媒体对象的元数据元素值（第二个参数）的键（第一个参数）发生变化时，发出此信号。'
- en: '`media_object.notifyIntervalChanged(int)`: This signal is emitted when the
    notify interval period of this media object has changed, with the interval in
    milliseconds that is passed in the parameter.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`media_object.notifyIntervalChanged(int)`: 当此媒体对象的通告间隔周期发生变化时，发出此信号，间隔以毫秒为单位，通过参数传入。'
- en: QCamera
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QCamera
- en: 'This class realizes the interface for available system camera devices. Implementing
    the camera functionality in the application demonstrates and combines almost all
    multimedia opportunities. The following multimedia classes will dive into various
    features that can be used with the camera device. The declaration syntax of this
    class is as follows:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 此类实现了可用系统摄像头设备的接口。在应用程序中实现摄像头功能展示了几乎所有的多媒体机会。以下多媒体类将深入探讨可以与摄像头设备一起使用的各种功能。此类的声明语法如下：
- en: '[PRE17]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `QCamera` class improves functionality by means of the following functions.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`QCamera` 类通过以下函数提高功能。'
- en: set
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions related to setting parameters/properties in relation to
    the camera:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置摄像头相关参数/属性的函数：
- en: '`camera.setCaptureMode(QtMultimedia.QCamera.CaptureModes)`: This sets the capture
    mode for this camera, and the configurations of what the camera captures, such
    as video or still images. The available capture modes are as follows:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.setCaptureMode(QtMultimedia.QCamera.CaptureModes)`: 为此摄像头设置捕获模式，并配置摄像头捕获的内容，如视频或静态图像。可用的捕获模式如下：'
- en: '`QtMultimedia.QCamera.CaptureViewfinder`: Only configured to display viewfinder.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.CaptureViewfinder`: 仅配置为显示取景器。'
- en: '`QtMultimedia.QCamera.CaptureStillImage`: Configured for still frame capture.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.CaptureStillImage`: 配置为捕获静态帧。'
- en: '`QtMultimedia.QCamera.CaptureVideo`: Configured for video capture.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.CaptureVideo`: 配置为视频捕获。'
- en: '`camera.setViewfinder(QtMultimediaWidgets.QVideoWidget)`: This sets the video
    widget-based camera, with the viewfinder specified.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.setViewfinder(QtMultimediaWidgets.QVideoWidget)`: 将基于视频小部件的摄像头设置为指定的取景器。'
- en: '`camera.setViewfinder(QtMultimediaWidgets.QGraphicsVideoItem)`: This sets the
    video item-based camera, with the viewfinder specified.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.setViewfinder(QtMultimediaWidgets.QGraphicsVideoItem)`: 这将基于视频项设置摄像头，并指定了取景器。'
- en: '`camera.setViewfinder(QtMultimedia.QAbstractVideoSurface)`: This sets a video
    surface, specified in the parameter, as the viewfinder of a camera.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.setViewfinder(QtMultimedia.QAbstractVideoSurface)`: 将参数中指定的视频表面设置为摄像头的取景器。'
- en: '`camera.setViewfinderSettings(QtMultimedia.QCameraViewfinderSettings)`: This
    sets the viewfinder settings, specified in the parameter.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.setViewfinderSettings(QtMultimedia.QCameraViewfinderSettings)`: 设置参数中指定的取景器设置。'
- en: is
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是
- en: 'This function returns a Boolean value (`bool`) related to the camera states:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回与摄像头状态相关的布尔值 (`bool`)：
- en: '`camera.isCaptureModeSupported(QtMultimedia.QCamera.CaptureModes)`: This returns
    `True` if the capture mode, specified in the parameter, is supported.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.isCaptureModeSupported(QtMultimedia.QCamera.CaptureModes)`: 如果在参数中指定的捕获模式受支持，则返回
    `True`。'
- en: functional
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values of
    the camera, changes in functionality, and so on:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前摄像头值的返回、功能变化等相关的函数：
- en: '`camera.availableDevices()`: This returns a list of the camera devices that
    are available from the default service provider.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.availableDevices()`: 返回从默认服务提供商可用的摄像头设备列表。'
- en: '`camera.captureMode()`: This returns the capture mode of the `QtMultimedia.QCamera.CaptureModes`
    type for this camera, and the configurations of what the camera captures, such
    as video or still images.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.captureMode()`: 这返回了该相机的 `QtMultimedia.QCamera.CaptureModes` 类型的捕获模式，以及相机的捕获配置，例如视频或静态图像。'
- en: '`camera.deviceDescription(QtCore.QByteArray)`: This returns a description of
    this camera device.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.deviceDescription(QtCore.QByteArray)`: 这返回了该相机设备的描述。'
- en: '`camera.error()`: This returns the error state of the `QtMultimedia.QCamera.Error`
    type for this camera device. The errors that may occur are as follows:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.error()`: 这返回了该相机设备的 `QtMultimedia.QCamera.Error` 类型的错误状态。可能发生的错误如下：'
- en: '`QtMultimedia.QCamera.NoError`—`0`: No errors.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.NoError`—`0`: 无错误。'
- en: '`QtMultimedia.QCamera.CameraError`—`1`: An error.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.CameraError`—`1`: 发生错误。'
- en: '`QtMultimedia.QCamera.InvalidRequestError`—`2`: The system resource doesn''t
    support the functionality requested.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.InvalidRequestError`—`2`: 系统资源不支持请求的功能。'
- en: '`QtMultimedia.QCamera.ServiceMissingError`—`3`: No camera service available.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.ServiceMissingError`—`3`: 没有相机服务可用。'
- en: '`QtMultimedia.QCamera.NotSupportedFeatureError`—`4`: The feature is not supported.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.NotSupportedFeatureError`—`4`: 该功能不受支持。'
- en: '`camera.errorString()`: This returns the error state as a description string
    for this camera device.'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.errorString()`: 这返回了该相机设备的错误状态描述字符串。'
- en: '`camera.exposure()`: This returns the exposure control object of this camera.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.exposure()`: 这返回了该相机的曝光控制对象。'
- en: '`camera.focus()`: This returns the focus control object of this camera.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.focus()`: 这返回了该相机的焦点控制对象。'
- en: '`camera.imageProcessing()`: This returns the image processing control object
    of this camera.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.imageProcessing()`: 这返回了该相机的图像处理控制对象。'
- en: '`camera.load()`: This opens this camera device. The status of the camera is
    changed to `QCamera.LoadedStatus`. It is used to read and change the supported
    camera settings and capabilities.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.load()`: 这打开该相机设备。相机的状态变为 `QCamera.LoadedStatus`。它用于读取和更改支持的相机设置和功能。'
- en: '`camera.lockStatus()`: This returns the lock status of the `QtMultimedia.QCamera.LockStatus`
    type for the requested camera settings locks. The lock statuses that can be returned
    are as follows:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.lockStatus()`: 这返回了请求的相机设置锁定状态的 `QtMultimedia.QCamera.LockStatus` 类型。可能返回的锁定状态如下：'
- en: '`QtMultimedia.QCamera.Unlocked`—`0`: Unlocked.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.Unlocked`—`0`: 未锁定。'
- en: '`QtMultimedia.QCamera.Searching`—`1`: Focusing or calculating exposure and
    white balance.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.Searching`—`1`: 正在聚焦或计算曝光和白平衡。'
- en: '`QtMultimedia.QCamera.Locked`—`2`: Ready to capture.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.Locked`—`2`: 准备捕获。'
- en: '`camera.lockStatus(QtMultimedia.QCamera.LockType)`: This returns the lock status
    for the lock type, specified in the parameter. The available lock types are as
    follows:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.lockStatus(QtMultimedia.QCamera.LockType)`: 这返回了指定参数的锁定类型的锁定状态。可用的锁定类型如下：'
- en: '`QtMultimedia.QCamera.NoLock`: No locks.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.NoLock`: 无锁定。'
- en: '`QtMultimedia.QCamera.LockExposure`: Locks exposure.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.LockExposure`: 锁定曝光。'
- en: '`QtMultimedia.QCamera.LockWhiteBalance`: Locks white balance.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.LockWhiteBalance`: 锁定白平衡。'
- en: '`QtMultimedia.QCamera.LockFocus`: Locks focus.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.LockFocus`: 锁定焦点。'
- en: '`camera.requestedLocks()`: This returns the requested lock types.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.requestedLocks()`: 这返回了请求的锁定类型。'
- en: '`camera.searchAndLock()`: This locks all the supported camera settings.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.searchAndLock()`: 这锁定所有支持的相机设置。'
- en: '`camera.searchAndLock(QtMultimedia.QCamera.LockTypes)`: This locks the camera
    with requested locks, as specified in the parameter.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.searchAndLock(QtMultimedia.QCamera.LockTypes)`: 这将根据参数指定的请求锁定相机。'
- en: '`camera.start()`: This starts this camera device.'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.start()`: 这启动了该相机设备。'
- en: '`camera.state()`: This returns the current state of the `QtMultimedia.QCamera.State`
    type for this camera object. The states that can be returned are as follows:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.state()`: 这返回了该相机对象的 `QtMultimedia.QCamera.State` 类型的当前状态。可能返回的状态如下：'
- en: '`QtMultimedia.QCamera.UnloadedState`—`0`: Initial camera state.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.UnloadedState`—`0`: 初始相机状态。'
- en: '`QtMultimedia.QCamera.LoadedState`—`1`: Camera is loaded and ready to be configured.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.LoadedState`—`1`: 相机已加载并准备好配置。'
- en: '`QtMultimedia.QCamera.ActiveState`—`2`: Camera is ready for capture.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.ActiveState`—`2`: 相机已准备好捕获。'
- en: '`camera.status()`: This returns the current status of the `QtMultimedia.QCamera.Status`
    type for this camera object. The statuses that can be returned are as follows:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.status()`: 这返回了该相机对象的 `QtMultimedia.QCamera.Status` 类型的当前状态。可能返回的状态如下：'
- en: '`QtMultimedia.QCamera.UnavailableStatus`—`0`: Camera unavailable.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.UnavailableStatus`—`0`: 相机不可用。'
- en: '`QtMultimedia.QCamera.UnloadedStatus`—`1`: Camera not loaded.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.UnloadedStatus`—`1`: 相机未加载。'
- en: '`QtMultimedia.QCamera.LoadingStatus`—`2`: Camera loading.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.LoadingStatus`—`2`: 相机正在加载。'
- en: '`QtMultimedia.QCamera.UnloadingStatus`—`3`: Camera unloading.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.UnloadingStatus`—`3`: 相机正在卸载。'
- en: '`QtMultimedia.QCamera.LoadedStatus`—`4`: Camera is loaded and ready to be configured.'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.LoadedStatus`—`4`: 相机已加载并准备好配置。'
- en: '`QtMultimedia.QCamera.StandbyStatus`—`5`: Camera is in power saving standby
    mode.'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.StandbyStatus`—`5`: 相机处于节能待机模式。'
- en: '`QtMultimedia.QCamera.StartingStatus`—`6`: Camera is starting.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.StartingStatus`—`6`: 相机正在启动。'
- en: '`QtMultimedia.QCamera.StoppingStatus`—`7`: Camera is stopping.'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.StoppingStatus`—`7`: 相机正在停止。'
- en: '`QtMultimedia.QCamera.ActiveStatus`—`8`: Camera has been started and can produce
    data.'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.ActiveStatus`—`8`: 相机已启动并可产生数据。'
- en: '`camera.stop()`: This stops the camera. The camera state is changed from `ActiveState`
    to `LoadedState`.'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.stop()`: 这停止相机。相机状态从`ActiveState`变为`LoadedState`。'
- en: '`camera.supportedLocks()`: This returns the supported lock types for this camera
    device.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.supportedLocks()`: 这返回支持此相机设备的锁类型。'
- en: '`camera.supportedViewfinderFrameRateRanges(QtMultimedia.QCameraViewfinderSettings)`:
    This returns a list of viewfinder frame rate ranges that are supported for this
    camera device.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.supportedViewfinderFrameRateRanges(QtMultimedia.QCameraViewfinderSettings)`:
    这返回支持此相机设备的取景器帧率范围列表。'
- en: '`camera.supportedViewfinderPixelFormats(QtMultimedia.QCameraViewfinderSettings)`:
    This returns a list of viewfinder pixel formats that are supported for this camera
    device.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.supportedViewfinderPixelFormats(QtMultimedia.QCameraViewfinderSettings)`:
    这返回支持此相机设备的取景器像素格式列表。'
- en: '`camera.supportedViewfinderResolutions(QtMultimedia.QCameraViewfinderSettings)`:
    This returns a list of viewfinder resolutions that are supported for this camera
    device.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.supportedViewfinderResolutions(QtMultimedia.QCameraViewfinderSettings)`:
    这返回支持此相机设备的取景器分辨率列表。'
- en: '`camera.supportedViewfinderSettings(QtMultimedia.QCameraViewfinderSettings)`:
    This returns a list of viewfinder settings that are supported for this camera
    device.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.supportedViewfinderSettings(QtMultimedia.QCameraViewfinderSettings)`:
    这返回支持此相机设备的取景器设置列表。'
- en: '`camera.unload()`: This closes the camera and deallocates the related resources
    by changing the status of the camera to `UnloadedStatus`.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.unload()`: 这通过将相机状态更改为`UnloadedStatus`来关闭相机并释放相关资源。'
- en: '`camera.unlock()`: This unlocks all the camera locks.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.unlock()`: 这将解锁所有相机锁。'
- en: '`camera.unlock(QtMultimedia.QCamera.LockTypes)`: This unlocks the camera settings
    specified in the parameter.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.unlock(QtMultimedia.QCamera.LockTypes)`: 这将解锁参数中指定的相机设置。'
- en: '`camera.viewfinderSettings()`: This returns the viewfinder settings of the
    `QtMultimedia.QCameraViewfinderSettings` type that are used by this camera.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.viewfinderSettings()`: 这返回由相机使用的`QtMultimedia.QCameraViewfinderSettings`类型的取景器设置。'
- en: signals
  id: totrans-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals of the `QCamera` class are as follows:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`QCamera`类的可用信号如下：'
- en: '`camera.captureModeChanged(QtMultimedia.QCamera.CaptureModes)`: This signal
    is emitted when the capture mode changes.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.captureModeChanged(QtMultimedia.QCamera.CaptureModes)`: 当捕获模式改变时，会发出此信号。'
- en: '`camera.error()`: This signal is emitted when the error state changes.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.error()`: 当错误状态发生变化时，会发出此信号。'
- en: '`camera.error(QtMultimedia.QCamera.Error)`: This signal is emitted when the
    error state changes to the value passed in the parameter.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.error(QtMultimedia.QCamera.Error)`: 当错误状态变为参数中传递的值时，会发出此信号。'
- en: '`camera.locked()`: This signal is emitted when all the requested camera settings
    are locked.'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.locked()`: 当所有请求的相机设置都锁定时，会发出此信号。'
- en: '`camera.lockFailed()`: This signal is emitted when the locking of at least
    one requested camera setting fails.'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.lockFailed()`: 当至少一个请求的相机设置锁定失败时，会发出此信号。'
- en: '`camera.lockStatusChanged(QtMultimedia.QCamera.LockStatus, QtMultimedia.QCamera.LockChangeReason)`:
    This signal is emitted when the overall status (the first parameter) for all the
    requested camera locks is changed without a reason (the second parameter). The
    available change reason parameters are as follows:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.lockStatusChanged(QtMultimedia.QCamera.LockStatus, QtMultimedia.QCamera.LockChangeReason)`:
    当所有请求的相机锁的整体状态（第一个参数）在没有原因（第二个参数）的情况下发生变化时，会发出此信号。可用的更改原因参数如下：'
- en: '`QtMultimedia.QCamera.UserRequest`—`0`: Lock status changed with a user request.'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.UserRequest`—`0`: 锁定状态因用户请求而改变。'
- en: '`QtMultimedia.QCamera.LockAcquired`—`1`: Lock status successfully changed to
    `Locked`.'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.LockAcquired`—`1`：锁定状态成功更改为 `Locked`。'
- en: '`QtMultimedia.QCamera.LockFailed`—`2`: Failed to acquire the requested lock.'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.LockFailed`—`2`：无法获取请求的锁定。'
- en: '`QtMultimedia.QCamera.LockLost`—`3`: No longer able to maintain the requested
    lock; status changed to `Unlocked`.'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.LockLost`—`3`：无法维持请求的锁定；状态更改为 `Unlocked`。'
- en: '`QtMultimedia.QCamera.LockTemporaryLost`—`4`: The lock is lost, but the camera
    is working to reacquire it.'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.LockTemporaryLost`—`4`：锁定丢失，但相机正在努力重新获取它。'
- en: '`camera.stateChanged(QtMultimedia.QCamera.State)`: This signal is emitted when
    the camera state, specified in the parameter, changes.'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.stateChanged(QtMultimedia.QCamera.State)`：当参数中指定的相机状态改变时，会发出此信号。'
- en: '`camera.statusChanged(QtMultimedia.QCamera.Status)`: This signal is emitted
    when the camera status, specified in the parameter, changes.'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera.statusChanged(QtMultimedia.QCamera.Status)`：当参数中指定的相机状态改变时，会发出此信号。'
- en: QCameraFocusZone
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QCameraFocusZone
- en: 'This class provides information about zones that are used for autofocusing
    a camera. The zones and zone locations that will be used depend on the camera''s
    capabilities. This can be used for drawing rectangles around areas of the camera
    frame that are in focus, or for changing the color of a zone. The declaration
    of this class is as follows:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了有关用于自动对焦相机的区域的信息。将使用的区域和区域位置取决于相机的功能。这可以用于在相机框架的焦点区域周围绘制矩形，或用于更改区域颜色。该类的声明如下：
- en: '[PRE18]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `QCameraFocusZone` class improves functionality by means of the following
    functions.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`QCameraFocusZone` 类通过以下函数增强了功能。'
- en: set
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'This  function is related to setting parameters/properties in relation to the camera
    focus zone:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与设置与相机焦点区域相关的参数/属性相关：
- en: '`camera_focus_zone.setStatus(QtMultimedia.QCameraFocusZone.FocusZoneStatus)`:
    This sets the status, specified in the parameter, for this camera focus zone.
    The available focus zone parameters are as follows:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_focus_zone.setStatus(QtMultimedia.QCameraFocusZone.FocusZoneStatus)`：此函数设置参数中指定的此相机焦点区域的状态。可用的焦点区域参数如下：'
- en: '`QtMultimedia.QCameraFocusZone.Invalid`—`0`: Zone is not valid.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCameraFocusZone.Invalid`—`0`：区域无效。'
- en: '`QtMultimedia.QCameraFocusZone.Unused`—`1`: Zone is unused but available.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCameraFocusZone.Unused`—`1`：区域未使用但可用。'
- en: '`QtMultimedia.QCameraFocusZone.Selected`—`2`: Zone is used for autofocusing,
    but is not in focus.'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCameraFocusZone.Selected`—`2`：区域用于自动对焦，但不在焦点上。'
- en: '`QtMultimedia.QCameraFocusZone.Focused`—`3`: Zone is used for autofocusing,
    and is in focus.'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCameraFocusZone.Focused`—`3`：区域用于自动对焦，并且处于焦点上。'
- en: is
  id: totrans-424
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'This function returns a Boolean value (`bool`) related to these camera focus
    zone states:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回与这些相机焦点区域状态相关的布尔值 (`bool`)：
- en: '`camera_focus_zone.isValid()`: This returns `True` if the camera focus zone
    has a valid area and status.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_focus_zone.isValid()`：如果相机焦点区域具有有效的区域和状态，则返回 `True`。'
- en: functional
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the current values of the camera focus
    zone:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与相机焦点区域的当前值相关的函数：
- en: '`camera_focus_zone.area()`: This returns the camera''s frame area of the `QtCore.QRectF`
    type that this focus zone encompasses.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_focus_zone.area()`：此函数返回相机框架的 `QtCore.QRectF` 类型区域，该区域包含此焦点区域。'
- en: '`camera_focus_zone.status()`: This returns the current status of the `QtMultimedia.QCameraFocusZone.FocusZoneStatus`
    type for this camera focus zone.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_focus_zone.status()`：此函数返回此相机焦点区域的 `QtMultimedia.QCameraFocusZone.FocusZoneStatus`
    类型的当前状态。'
- en: QCameraImageCapture
  id: totrans-431
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QCameraImageCapture
- en: 'This is the class that''s used for recording the media content from the camera
    device. The declaration of this class is as follows:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于从相机设备记录媒体内容的类。该类的声明如下：
- en: '[PRE19]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `QCameraImageCapture` class improves functionality by means of the following
    functions.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`QCameraImageCapture` 类通过以下函数增强了功能。'
- en: set
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting parameters/properties in relation to
    the camera image capture:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与相机图像捕获相关的参数/属性相关的函数：
- en: '`camera_image_capture.setBufferFormat(QtMultimedia.QVideoFrame.PixelFormat)`:
    This sets the buffer image capture format, specified in the parameter, that will
    be used.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.setBufferFormat(QtMultimedia.QVideoFrame.PixelFormat)`：此函数设置参数中指定的将使用的缓冲图像捕获格式。'
- en: '`camera_image_capture.setCaptureDestination(QtMultimedia.QCameraImageCapture.CaptureDestinations)`:
    This sets the capture destination, specified in the parameter, that will be used.
    The available capture destinations are as follows:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.setCaptureDestination(QtMultimedia.QCameraImageCapture.CaptureDestinations)`:
    设置将使用的参数中指定的捕获目标。可用的捕获目标如下：'
- en: '`QtMultimedia.QCameraImageCapture.CaptureToFile`: This captures to a file.'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCameraImageCapture.CaptureToFile`: 将捕获到文件。'
- en: '`QtMultimedia.QCameraImageCapture.CaptureToBuffer`: This captures to a buffer.'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCameraImageCapture.CaptureToBuffer`: 将捕获到缓冲区。'
- en: '`camera_image_capture.setEncodingSettings(QtMultimedia.QImageEncoderSettings)`:
    This sets the image encoding settings specified in the parameter.'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.setEncodingSettings(QtMultimedia.QImageEncoderSettings)`:
    这将设置参数中指定的图像编码设置。'
- en: is
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'These are functions that return a Boolean value (`bool`) related to these camera
    image capture states:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回与这些相机图像捕获状态相关的布尔值（`bool`）的函数：
- en: '`camera_image_capture.isAvailable()`: This returns `True` if the image capture
    is ready to use.'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.isAvailable()`: 如果图像捕获准备就绪，则返回`True`。'
- en: '`camera_image_capture.isCaptureDestinationSupported(QtMultimedia.QCameraImageCapture.CaptureDestinations)`:
    This returns `True` if the image capture destination, specified in the parameter,
    is supported.'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.isCaptureDestinationSupported(QtMultimedia.QCameraImageCapture.CaptureDestinations)`:
    如果参数中指定的图像捕获目标受支持，则返回`True`。'
- en: '`camera_image_capture.isReadyForCapture()`: This returns `True` if the service
    is ready to capture an image.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.isReadyForCapture()`: 如果服务准备捕获图像，则返回`True`。'
- en: functional
  id: totrans-447
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the camera image capture, changes in functionality, and so on:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前相机图像捕获的返回值、功能变化等相关联的函数：
- en: '`camera_image_capture.availability()`: This returns the availability of the
    `QtMultimedia.QMultimedia.AvailabilityStatus` type for this functionality.'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.availability()`: 返回此功能`QtMultimedia.QMultimedia.AvailabilityStatus`类型的可用性。'
- en: '`camera_image_capture.bufferFormat()`: This returns the buffer image capture
    format of the `QtMultimedia.QVideoFrame.PixelFormat` type that is used.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.bufferFormat()`: 返回使用的`QtMultimedia.QVideoFrame.PixelFormat`类型的缓冲区图像捕获格式。'
- en: '`camera_image_capture.cancelCapture()`: This cancels incomplete capture requests.'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.cancelCapture()`: 这将取消不完整的捕获请求。'
- en: '`camera_image_capture.capture("Full/Path/to/the/folder/filename.jpg")`: This
    captures the image and saves it to file, as specified in the parameter.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.capture("Full/Path/to/the/folder/filename.jpg")`: 捕获图像并将其保存到参数中指定的文件。'
- en: '`camera_image_capture.captureDestination()`: This returns the image capture
    destination of the `QtMultimedia.QCameraImageCapture.CaptureDestinations` type
    that is used.'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.captureDestination()`: 返回使用的`QtMultimedia.QCameraImageCapture.CaptureDestinations`类型的图像捕获目标。'
- en: '`camera_image_capture.encodingSettings()`: This returns the image encoding
    settings of the `QtMultimedia.QImageEncoderSettings` type that is used.'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.encodingSettings()`: 返回使用的`QtMultimedia.QImageEncoderSettings`类型的图像编码设置。'
- en: '`camera_image_capture.error()`: This returns the error state of the `QtMultimedia.QCameraImageCapture.Error`
    type.'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.error()`: 返回`QtMultimedia.QCameraImageCapture.Error`类型的错误状态。'
- en: '`camera_image_capture.errorString()`: This returns the error state as a string
    description.'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.errorString()`: 返回错误状态作为字符串描述。'
- en: '`camera_image_capture.imageCodecDescription(str)`: This returns a description
    of the image codec specified in the parameter.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.imageCodecDescription(str)`: 返回参数中指定的图像编解码器的描述。'
- en: '`camera_image_capture.supportedBufferFormats()`: This returns a list of supported
    buffer image capture formats.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.supportedBufferFormats()`: 返回支持的缓冲区图像捕获格式列表。'
- en: '`camera_image_capture.supportedImageCodecs()`: This returns a list of supported
    image codecs.'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.supportedImageCodecs()`: 返回支持的图像编解码器列表。'
- en: signals
  id: totrans-460
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: signals
- en: 'The available signals of the `QCameraImageCapture` class are as follows:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '`QCameraImageCapture`类的可用信号如下：'
- en: '`camera_image_capture.bufferFormatChanged(QtMultimedia.QVideoFrame.PixelFormat)`:
    This signal is emitted when the buffer format, passed in the parameter, for the
    buffer image capture changes.'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.bufferFormatChanged(QtMultimedia.QVideoFrame.PixelFormat)`:
    当传递给参数的缓冲区格式，用于缓冲区图像捕获时，会发出此信号。'
- en: '`camera_image_capture.captureDestinationChanged(QtMultimedia.QCameraImageCapture.CaptureDestinations)`:
    This signal is emitted when the capture destination, passed in the parameter,
    changes.'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.captureDestinationChanged(QtMultimedia.QCameraImageCapture.CaptureDestinations)`:
    当传入参数的捕获目标更改时，发出此信号。'
- en: '`camera_image_capture.imageAvailable(int, QtMultimedia.QVideoFrame)`: This
    signal is emitted when the frame (the second parameter) with the request ID (the
    first parameter) is available.'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.imageAvailable(int, QtMultimedia.QVideoFrame)`: 当带有请求
    ID（第一个参数）的帧（第二个参数）可用时，发出此信号。'
- en: '`camera_image_capture.imageCaptured(int, QtGui.QImage)`: This signal is emitted
    when the frame (the second parameter) with the request ID (the first parameter)
    is captured.'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.imageCaptured(int, QtGui.QImage)`: 当带有请求 ID（第一个参数）的帧（第二个参数）被捕获时，发出此信号。'
- en: '`camera_image_capture.imageExposed(int)`: This signal is emitted when the frame
    with the request ID, specified in the parameter, is exposed.'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.imageExposed(int)`: 当在参数中指定的带有请求 ID 的帧曝光时，发出此信号。'
- en: '`camera_image_capture.imageMetadataAvailable(int, str, object)`: This signal
    is emitted when the metadata for an image with the request ID (the first parameter)
    is available, with the key (the second parameter) and value (the third parameter)
    of the metadata included.'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.imageMetadataAvailable(int, str, object)`: 当带有请求 ID（第一个参数）的图像的元数据可用时，发出此信号，包括元数据的键（第二个参数）和值（第三个参数）。'
- en: '`camera_image_capture.imageSaved(int, str)`: This signal is emitted when the
    frame with the request ID (the first parameter) is saved to the filename (the
    second parameter).'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.imageSaved(int, str)`: 当带有请求 ID（第一个参数）的帧被保存到文件名（第二个参数）时，发出此信号。'
- en: '`camera_image_capture.readyForCaptureChanged(bool)`: This signal is emitted
    when the camera''s ready parameter changes, as specified, for the capture state.'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_image_capture.readyForCaptureChanged(bool)`: 当相机准备参数按指定方式更改时，发出此信号，以指示捕获状态。'
- en: QCameraInfo
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QCameraInfo
- en: 'This class represents general information regarding the available camera device.
    The declaration syntax of this class is as follows:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 此类表示有关可用相机设备的一般信息。此类的声明语法如下：
- en: '[PRE20]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `QCameraInfo` class improves functionality by means of the following functions:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`QCameraInfo` 类通过以下函数增强了功能：'
- en: '`camera_info.availableCameras(QtMultimedia.QCamera.Position)`: This returns
    a list of available cameras that are located at positions specified in the parameter.
    The positions that can be used for this function are as follows:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_info.availableCameras(QtMultimedia.QCamera.Position)`: 此函数返回位于参数中指定位置的可用相机列表。可用于此函数的位置如下：'
- en: '`QtMultimedia.QCamera.UnspecifiedPosition`—`0`: Camera position is unspecified.'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.UnspecifiedPosition`—`0`: 相机位置未指定。'
- en: '`QtMultimedia.QCamera.BackFace`—`1`: Camera position on the opposite side to
    the device screen.'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.BackFace`—`1`: 相机位于设备屏幕的对面。'
- en: '`QtMultimedia.QCamera.FrontFace`—`2`: Camera position on the same side to the
    device screen.'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtMultimedia.QCamera.FrontFace`—`2`: 相机位于设备屏幕的同侧。'
- en: '`camera_info.defaultCamera()`: This returns the default camera.'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_info.defaultCamera()`: 此函数返回默认相机。'
- en: '`camera_info.description()`: This returns a description regarding the camera.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_info.description()`: 此函数返回有关相机的描述。'
- en: '`camera_info.deviceName()`: This returns the name of the camera as a unique
    ID.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_info.deviceName()`: 此函数返回相机的名称，作为唯一标识符。'
- en: '`camera_info.isNull()`: This returns `True` if `QCameraInfo` is null or is
    invalid.'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_info.isNull()`: 如果 `QCameraInfo` 为空或无效，则返回 `True`。'
- en: '`camera_info.orientation()`: This returns the physical orientation angle of
    this camera sensor.'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_info.orientation()`: 此函数返回该相机传感器的物理方向角度。'
- en: '`camera_info.position()`: This returns the physical position of the `QtMultimedia.QCamera.Position`
    type for this camera on the hardware system.'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '`camera_info.position()`: 此函数返回该相机在硬件系统上的 `QtMultimedia.QCamera.Position` 类型的物理位置。'
- en: QCameraViewfinderSettings
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QCameraViewfinderSettings
- en: 'This class provides the viewfinder settings that can be set with the `QCamera`
    class. The declaration of this class is as follows:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了可以通过 `QCamera` 类设置的取景器设置。此类的声明如下：
- en: '[PRE21]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `QCameraViewfinderSettings` class improves functionality by means of the
    following functions.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '`QCameraViewfinderSettings` 类通过以下函数增强了功能。'
- en: set
  id: totrans-488
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting parameters/properties in relation to
    the viewfinder settings:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置取景器设置相关的参数/属性设置函数：
- en: '`viewfinder_settings.setMaximumFrameRate(float)`: This sets the maximum frame
    rate, specified in the parameter, in frames per second for the viewfinder.'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.setMaximumFrameRate(float)`: 这将设置取景器的最大帧率，参数指定以每秒帧数的形式。'
- en: '`viewfinder_settings.setMinimumFrameRate(float)`: This sets the minimum frame
    rate, specified in the parameter, in frames per second for the viewfinder.'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.setMinimumFrameRate(float)`: 这将设置取景器的最小帧率，参数指定以每秒帧数的形式。'
- en: '`viewfinder_settings.setPixelAspectRatio(QtCore.QSize)`: This sets the pixel
    aspect ratio, specified in the parameter, for the viewfinder.'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.setPixelAspectRatio(QtCore.QSize)`: 这将设置取景器的像素宽高比，格式由参数指定。'
- en: '`viewfinder_settings.setPixelAspectRatio(int, int)`: This sets the pixel aspect
    ratio as horizontal (the first parameter) and vertical (the second parameter)
    elements for the viewfinder.'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.setPixelAspectRatio(int, int)`: 这将设置取景器的像素宽高比，水平（第一个参数）和垂直（第二个参数）元素。'
- en: '`viewfinder_settings.setPixelFormat(QtMultimedia.QVideoFrame.PixelFormat)`:
    This sets the pixel format, specified in the parameter, for the viewfinder.'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.setPixelFormat(QtMultimedia.QVideoFrame.PixelFormat)`:
    这将设置取景器的像素格式，格式由参数指定。'
- en: '`viewfinder_settings.setResolution(QtCore.QSize)`: This sets the resolution,
    specified in the parameter, for the viewfinder.'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.setResolution(QtCore.QSize)`: 这将设置取景器的分辨率，格式由参数指定。'
- en: '`viewfinder_settings.setResolution(w, h)`: This sets the resolution specified
    by `w` (width) and `h` (height) for the viewfinder.'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.setResolution(w, h)`: 这将设置取景器由 `w`（宽度）和 `h`（高度）指定的分辨率。'
- en: is
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'This function returns a Boolean value (`bool`) related to these viewfinder
    setting states:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回与这些取景器设置状态相关的布尔值 (`bool`)：
- en: '`viewfinder_settings.isNull()`: This returns `True` if the viewfinder settings
    are `null`.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.isNull()`: 如果取景器设置是 `null`，则返回 `True`。'
- en: functional
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the viewfinder settings, changes in functionality, and so on:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与取景器设置当前值、功能变化等相关联的函数：
- en: '`viewfinder_settings.maximumFrameRate()`: This returns the maximum frame rate
    in frames per second for the viewfinder.'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.maximumFrameRate()`: 这返回取景器的最大帧率，以每秒帧数的形式。'
- en: '`viewfinder_settings.minimumFrameRate()`: This returns the minimum frame rate
    in frames per second for the viewfinder.'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.minimumFrameRate()`: 这返回取景器的最小帧率，以每秒帧数的形式。'
- en: '`viewfinder_settings.pixelAspectRatio()`: This returns the pixel aspect ratio
    of the `QtCore.QSize` type for the viewfinder.'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.pixelAspectRatio()`: 这返回取景器的 `QtCore.QSize` 类型的像素宽高比。'
- en: '`viewfinder_settings.pixelFormat()`: This returns the pixel format of the `QtMultimedia.QVideoFrame.PixelFormat`
    type for the viewfinder.'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.pixelFormat()`: 这返回取景器 `QtMultimedia.QVideoFrame.PixelFormat`
    类型的像素格式。'
- en: '`viewfinder_settings.resolution()`: This returns the resolution of the `QtCore.QSize`
    type for the viewfinder.'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.resolution()`: 这返回取景器的 `QtCore.QSize` 类型的分辨率。'
- en: '`viewfinder_settings.swap(QtMultimedia.QCameraViewfinderSettings)`: This swaps
    the settings of this viewfinder with those of the viewfinder specified in the
    parameter.'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewfinder_settings.swap(QtMultimedia.QCameraViewfinderSettings)`: 这将交换此取景器的设置与参数指定的取景器设置。'
- en: QtMultimediaWidgets
  id: totrans-508
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QtMultimediaWidgets
- en: The `QtMultimediaWidgets` module realizes the visualization of the constructed
    multimedia objects. For use in the application, this module needs to be imported
    with the following statements.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtMultimediaWidgets` 模块实现了构建的多媒体对象的可视化。为了在应用程序中使用此模块，需要使用以下语句导入。'
- en: 'We have the PySide2 `import` statement, as follows:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有 PySide2 的 `import` 语句，如下所示：
- en: '[PRE22]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We also have the PyQt5 `import` statement, as follows:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有 PyQt5 的 `import` 语句，如下所示：
- en: '[PRE23]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `QtMultimediaWidgets` module includes classes such as `QCameraViewfinder` and
    `QGraphicsVideoItem`.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtMultimediaWidgets` 模块包括 `QCameraViewfinder` 和 `QGraphicsVideoItem` 等类。'
- en: QVideoWidget
  id: totrans-515
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QVideoWidget
- en: 'This class represents the widget for a video that''s produced by a media object.
    The declaration syntax of this class is as follows:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 此类表示由媒体对象产生的视频小部件。此类的声明语法如下：
- en: '[PRE24]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `QVideoWidget` class improves functionality by means of the following functions.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '`QVideoWidget` 类通过以下函数提高了功能。'
- en: set
  id: totrans-519
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting parameters/properties in relation to
    the video widget:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与视频小部件相关的设置参数/属性的函数：
- en: '`video_widget.setAspectRatioMode(QtCore.Qt.AspectRatioMode)`: This sets the
    mode, specified in the parameter, that represents how video is scaled to its aspect
    ratio.'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.setAspectRatioMode(QtCore.Qt.AspectRatioMode)`: 这将设置由该参数指定的模式，表示视频如何缩放到其纵横比。'
- en: '`video_widget.setBrightness(int)`: This sets the brightness value, specified
    in the parameter, for video displayed in this video widget. A valid value lies
    in a range between `-100` and `100`.'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.setBrightness(int)`: 这将设置由该参数指定的亮度值，用于在此视频小部件中显示的视频。有效值介于 `-100`
    和 `100` 之间。'
- en: '`video_widget.setContrast(int)`: This sets the contrast value, specified in
    the parameter, for video displayed in this video widget. A valid value lies in
    a range between `-100` and `100`.'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.setContrast(int)`: 这将设置由该参数指定的对比度值，用于在此视频小部件中显示的视频。有效值介于 `-100`
    和 `100` 之间。'
- en: '`video_widget.setFullScreen(bool)`: If the parameter is `True`, the video displayed will
    be in full screen mode.'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.setFullScreen(bool)`: 如果参数为 `True`，则显示的视频将处于全屏模式。'
- en: '`video_widget.setHue(int)`: This sets the hue value, specified in the parameter,
    for video displayed in this video widget. A valid value lies in a range between
    `-100` and `100`.'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.setHue(int)`: 这将设置由该参数指定的色调值，用于在此视频小部件中显示的视频。有效值介于 `-100` 和 `100`
    之间。'
- en: '`video_widget.setMediaObject(QtMultimedia.QMediaObject)`: This sets the media
    object, specified in the parameter, that will be displayed by this video widget.'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.setMediaObject(QtMultimedia.QMediaObject)`: 这将设置由该参数指定的媒体对象，该对象将由该视频小部件显示。'
- en: '`video_widget.setSaturation(int)`: This sets the saturation value, specified
    in the parameter, for video displayed in this video widget. A valid value lies
    in a range between `-100` and `100`.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.setSaturation(int)`: 这将设置由该参数指定的饱和度值，用于在此视频小部件中显示的视频。有效值介于 `-100`
    和 `100` 之间。'
- en: functional
  id: totrans-528
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the video widget:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与视频小部件当前值返回相关的函数：
- en: '`video_widget.aspectRatioMode()`: This returns the aspect ratio mode of the
    `QtCore.Qt.AspectRatioMode` type.'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.aspectRatioMode()`: 这将返回 `QtCore.Qt.AspectRatioMode` 类型的纵横比模式。'
- en: '`video_widget.brightness()`: This returns the brightness of the video displayed.'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.brightness()`: 这将返回显示的视频的亮度。'
- en: '`video_widget.contrast()`: This returns the contrast of the video displayed.'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.contrast()`: 这将返回显示的视频的对比度。'
- en: '`video_widget.hue()`: This returns the hue of the video displayed.'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.hue()`: 这将返回显示的视频的色调。'
- en: '`video_widget.mediaObject()`: This returns the media object displayed by this
    video widget.'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.mediaObject()`: 这将返回由该视频小部件显示的媒体对象。'
- en: '`video_widget.saturation()`: This returns the saturation of the video displayed.'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.saturation()`: 这将返回显示的视频的饱和度。'
- en: events
  id: totrans-536
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: events
- en: 'These are functions that are related to events, such as event handlers:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件相关的函数，例如事件处理程序：
- en: '`video_widget.event(QtCore.QEvent)`: This receives events to the video widget
    and should return `True` if the event is recognized and processed.'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.event(QtCore.QEvent)`: 这接收视频小部件的事件，如果事件被识别并处理，则应返回 `True`。'
- en: '`video_widget.hideEvent(QtGui.QHideEvent)`: This is an event handler that''s
    designed to receive the hide events for the video widget, with events passed in
    the parameter.'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.hideEvent(QtGui.QHideEvent)`: 这是一个事件处理程序，旨在接收视频小部件的隐藏事件，事件通过参数传递。'
- en: '`video_widget.moveEvent(QtGui.QMoveEvent)`: This is an event handler that''s
    designed to receive move events for the video widget, with events passed in the
    parameter.'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.moveEvent(QtGui.QMoveEvent)`: 这是一个事件处理程序，旨在接收视频小部件的移动事件，事件通过参数传递。'
- en: '`video_widget.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s
    designed to receive paint events for the video widget, with events passed in the
    parameter.'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.paintEvent(QtGui.QPaintEvent)`: 这是一个事件处理程序，旨在接收视频小部件的绘制事件，事件通过参数传递。'
- en: '`video_widget.resizeEvent(QtGui.QResizeEvent)`: This is an event handler that''s
    designed to receive resize events for the video widget, with events passed in
    the parameter.'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.resizeEvent(QtGui.QResizeEvent)`: 这是一个事件处理程序，旨在接收视频小部件的调整大小事件，事件通过参数传递。'
- en: '`video_widget.showEvent(QtGui.QShowEvent)`: This is an event handler that''s
    designed to receive show events for the video widget, with events passed in the
    parameter.'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.showEvent(QtGui.QShowEvent)`: 这是一个事件处理程序，旨在接收视频小部件的显示事件，事件通过参数传递。'
- en: signals
  id: totrans-544
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: signals
- en: 'The available signals of the `QVideoWidget` class are as follows:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '`QVideoWidget` 类的可用信号如下：'
- en: '`video_widget.brightnessChanged(int)`: This signal is emitted when the brightness
    adjustment, passed in the parameter, changes.'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.brightnessChanged(int)`：当传入参数的亮度调整发生变化时，会发出此信号。'
- en: '`video_widget.contrastChanged(int)`: This signal is emitted when the contrast
    adjustment, passed in the parameter, changes.'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.contrastChanged(int)`：当传入参数的对比度调整发生变化时，会发出此信号。'
- en: '`video_widget.fullScreenChanged(bool)`: This signal is emitted when the full
    screen mode of a video widget changes, with the availability of the mode passed
    in the parameter.'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.fullScreenChanged(bool)`：当视频小部件的全屏模式发生变化时，会发出此信号，模式的有效性通过参数传入。'
- en: '`video_widget.hueChanged(int)`: This signal is emitted when the hue adjustment,
    passed in the parameter, changes.'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.hueChanged(int)`：当传入参数的色调调整发生变化时，会发出此信号。'
- en: '`video_widget.saturationChanged(int)`: This signal is emitted when the saturation
    adjustment, passed in the parameter, changes.'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_widget.saturationChanged(int)`：当传入参数的饱和度调整发生变化时，会发出此信号。'
- en: Camera example
  id: totrans-551
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相机示例
- en: 'To demonstrate multimedia functionality in the GUI application, we will implement
    the camera with simple features, such as capturing an image. Using the camera
    in the application is the most popular and well-explained multimedia form. To
    begin, create `u_media.py` files in both the `App/App_PySide2/` and `App/App_PyQt5/`
    directories. Then, in these directories, create the `camera/` folder, and, within
    this, a `captures/` folder to save captured images. The paths will be `App/App_PySide2/camera/captures/`
    and `App/App_PyQt5/camera/captures/`. Insert the following lines into the `u_media.py`
    files:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在GUI应用程序中演示多媒体功能，我们将使用具有简单功能（如捕获图像）的相机。在应用程序中使用相机是最受欢迎和解释最详尽的多媒体形式。首先，在`App/App_PySide2/`和`App/App_PyQt5/`目录中创建`u_media.py`文件。然后，在这些目录中创建`camera/`文件夹，并在其中创建一个`captures/`文件夹以保存捕获的图像。路径将是`App/App_PySide2/camera/captures/`和`App/App_PyQt5/camera/captures/`。将以下行插入到`u_media.py`文件中：
- en: 'In the case of PyQt5, insert the following into the `import` section of the `u_media.py`
    file:'
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PyQt5的情况下，将以下内容插入到`u_media.py`文件的`import`部分：
- en: '[PRE25]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the case of PySide2, insert the following into the `import` section of the `u_media.py`
    file:'
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PySide2的情况下，将以下内容插入到`u_media.py`文件的`import`部分：
- en: '[PRE26]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create the `UMedia` class using the `QCameraViewfinder` class that inherits
    from `QVideoWidget`:'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用继承自`QVideoWidget`的`QCameraViewfinder`类创建`UMedia`类：
- en: '[PRE27]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this class, we have added the camera instance, set the viewfinder, added
    a button, and arranged all the elements with a grid layout.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，我们已经添加了相机实例，设置了取景器，添加了一个按钮，并使用网格布局排列了所有元素。
- en: 'Add the function for capturing images to this class:'
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将捕获图像的函数添加到此类中：
- en: '[PRE28]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This function will be called if the button is clicked. The current camera frame
    will be captured and saved to the `captures/` folder.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按钮被点击，将会调用此函数。当前相机帧将被捕获并保存到`captures/`文件夹中。
- en: 'Add the enter event handler to the `UMedia` class, after the `img_capture()`
    function:'
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`img_capture()`函数之后，将进入事件处理程序添加到`UMedia`类中：
- en: '[PRE29]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If the mouse pointer enters the widget area, the button will be displayed.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 如果鼠标指针进入小部件区域，按钮将显示出来。
- en: 'Add the leave event handler for this widget:'
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此小部件添加离开事件处理程序：
- en: '[PRE30]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If the mouse pointer leaves the widget's area, the button will be invisible.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 如果鼠标指针离开小部件的区域，按钮将不可见。
- en: 'To use this file with the `subprocesses` module as much as possible. Add the
    following lines to the `u_media.py` file:'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽可能使用`subprocesses`模块使用此文件。将以下行添加到`u_media.py`文件中：
- en: '[PRE31]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If this file starts as an application window or with the `subprocess` module,
    this instruction will be realized. If the class of this file is used as part of
    another application, this instruction will not be used.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此文件以应用程序窗口或使用`subprocess`模块启动，则此指令将被实现。如果此文件的类作为另一个应用程序的一部分使用，则不会使用此指令。
- en: 'Now, insert the following lines in the `u_app.py` files:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`u_app.py`文件中插入以下行：
- en: 'At the end of the `UApp` class, add the following function:'
  id: totrans-573
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`UApp`类结束时，添加以下函数：
- en: '[PRE32]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This function will run the `u_media.py` file as a subprocess.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将作为子进程运行`u_media.py`文件。
- en: 'At the end of the `__init__()` function of the `UApp` class, temporarily add
    the following line to call the `video_camera` function:'
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`UApp`类的`__init__()`函数结束时，暂时添加以下行以调用`video_camera`函数：
- en: '[PRE33]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This will call the function with a subprocess when the application starts.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在应用程序启动时调用带有子进程的函数。
- en: 'Finally, at the end of  the `u_app.py` file, we can add an `import` of the
    `subprocess`Python standard library module as follows:'
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `u_app.py` 文件的末尾，我们可以添加对 `subprocess` Python 标准库模块的 `import`，如下所示：
- en: '[PRE34]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, we can run the `u_app.py` file and try to capture an image from the camera
    device, as demonstrated in the following screenshot:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行 `u_app.py` 文件，并尝试从摄像头设备捕获图像，如下面的截图所示：
- en: '![](img/f5bde9b7-f4c1-4ee6-a8ea-3d5388202094.png)'
  id: totrans-582
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f5bde9b7-f4c1-4ee6-a8ea-3d5388202094.png)'
- en: When we click on the capture button, the current frame will be captured and
    saved as an image file to the `captures/` folder. It is important to note that
    camera (video and audio) functionality is dependent on the capabilities of the
    personal device and on the availability of the installed codecs. It is therefore
    recommended that you collect information regarding devices and codecs that can
    be used for application development. A third-party package such as OpenCV, which
    provides more functional features in relation to the camera device and the handling
    of images/video, can be used to implement the camera in the app.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击捕获按钮时，当前帧将被捕获并保存为图像文件到 `captures/` 文件夹。需要注意的是，摄像头（视频和音频）功能取决于个人设备的性能以及已安装编解码器的可用性。因此，建议您收集有关可用于应用程序开发的设备和编解码器的信息。可以使用提供更多与摄像头设备和图像/视频处理相关功能的第三方包，如
    OpenCV，在应用程序中实现摄像头功能。
- en: Summary
  id: totrans-584
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter completes our examination of basic graphics. The following chapters
    will extend this functionality to include special tasks. The Qt library has the
    widest set of modules, classes, and tools available to work with graphics because
    it is a form of this library. In general, most of the classes that are represented
    in this framework are relative to this. It is also very important to understand
    the basic graphics principles that can be used with GUI development that are available
    in the Qt library.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完成了我们对基本图形的考察。接下来的章节将扩展这一功能，包括特殊任务。Qt 库拥有最广泛的模块、类和工具集，可用于处理图形，因为它就是这种库的形式。一般来说，框架中代表的大部分类都与这个相关。了解可用于
    GUI 开发的 Qt 库中的基本图形原理也非常重要。
- en: The next chapter will continue our introduction to the Qt classes and cover
    basic dialog windows.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将继续介绍 Qt 类，并涵盖基本对话框窗口。
