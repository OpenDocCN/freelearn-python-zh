- en: Graphical Effects and Multimedia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is a continuation of the previous chapter about graphics implementations.
    Here, we will be describing the possibility of adding some effects to the graphical
    elements that were used in the previous chapter. The Qt framework provides the
    classes and modules that are most commonly used when we are working with various
    types of graphical implementation, such as OpenGL, SVG, and 3D graphics. Classes
    are also available so that you can add effects to the standard graphical elements,
    such as the rectangle or other shapes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard graphical effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard animations and transformations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multimedia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard graphical effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Qt library provides standard graphical effects that can be used in relation
    to items such as `QGraphicsRectItem` and `QGraphicsLineItem`. Effects make the
    graphical elements of the application more representative and, as a result, styled
    in a modern fashion. The source of these effects can be images, pictures, graphical
    elements, parts of the images/elements, and so on. Usually, effects can be added
    to the graphical item using a setting function such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: QGraphicsEffect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This class is the base class for all graphics effects that are used with Qt.
    The `QGraphicsEffect` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function sets the parameters/properties in relation to the graphical effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setEnabled(bool)`: If the parameter is `True`, this sets this effect as being
    enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to these graphical effect
    states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`isEnabled()`: This returns `True` if this effect is enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the current values of the graphical
    effect, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`boundingRect()`: This returns the bounding rectangle of the `QtCore.QRectF`
    type for this effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '`boundingRectFor(QtCore.QRectF)`: This returns the bounding rectangle of the
    `QtCore.QRectF` type, which depends on the rectangle, specified in the parameter,
    in device coordinates, for this effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '`draw(QtGui.QPainter)`: This draws the effect and is called when it needs to
    be drawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '`drawSource(QtGui.QPainter)`: This draws the source directly using the painter
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sourceBoundingRect(QtCore.Qt.CoordinateSystem)`: This returns the bounding
    rectangle of the source that is mapped to the system specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sourceChanged(QtWidgets.QGraphicsEffect.ChangeFlags)`: This notifies that
    the source of this effect has changed, with flags, specified in the parameter,
    that describe what has changed. The available flags are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsEffect.SourceAttached`: The effect is installed on a source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsEffect.SourceDetached`: The effect is uninstalled from
    a source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsEffect.SourceBoundingRectChanged`: The bounding rectangle
    of the source has changed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsEffect.SourceInvalidated`: The visual appearance of the
    source has changed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sourceIsPixmap()`: This returns `True` if the source of the effect is a pixmap.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sourcePixmap(QtCore.Qt.CoordinateSystem, PySide2.QtCore.QPoint, QtWidgets.QGraphicsEffect.PixmapPadMode)`:
    This returns a pixmap of the `QtGui.QPixmap` type with the source painted. The
    first parameter defines the coordinate system used for the source. The second
    parameter is the offset where the pixmap should be painted. The pad mode (the
    third parameter) defines how the pixmap is padded. The available parameters for
    the pad mode are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsEffect.NoPad`—`0`: The pixmap doesn''t receive additional
    padding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsEffect.PadToTransparentBorder`—`1`: The pixmap will be
    padded to fully match the transparent border.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsEffect.PadToEffectiveBoundingRect`—`2`: The pixmap will
    be padded to match the effective bounding rectangle of this effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update()`: This schedules a redraw of this effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '`updateBoundingRect()`: This notifies when the bounding rectangle of this effect
    has changed.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signal in the `QGraphicsEffect` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enabledChanged(bool)`: This signal is emitted when the effect becomes enabled
    or disabled, according to the state passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsBlurEffect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class realizes the blur effect for the graphical element. Blur effects
    reduce source details. The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`QGraphicsBlurEffect` inherits from the `QGraphicsEffect` class and improves
    functionality by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting the parameters/properties in relation
    to the blur effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '`blur_effect.setBlurHints(QtWidgets.QGraphicsBlurEffect.BlurHints)`: This sets
    the blur hints for this effect, which describes how blur effects are applied.
    The available hints are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsBlurEffect.PerformanceHint`: This sets the rendering performance
    as the most important factor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsBlurEffect.QualityHint`: This sets the rendering quality
    as the most important factor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsBlurEffect.AnimationHint`: This indicates that the blur
    radius will be animated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blur_effect.setBlurRadius(float)`: This sets the blur radius, specified in
    the parameter, for this effect. A bigger radius gives a more blurred appearance,
    while a smaller radius makes the appearance seem sharper.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the functions that are related to the current values of the blur
    effect, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`blur_effect.blurHints()`: This returns hints of the `QtWidgets.QGraphicsBlurEffect.BlurHints`
    type that are used for this blur effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '`blur_effect.blurRadius()`: This returns the blur radius of this effect.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QGraphicsBlurEffect` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`blur_effect.blurHintsChanged(QtWidgets.QGraphicsBlurEffect.BlurHints)`: This
    signal is emitted when the blur hint changes, with new blur hints passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`blur_effect.blurRadiusChanged(float)`: This signal is emitted when the blur
    radius changes, with the new blur radius passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsColorizeEffect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class implements colorizing. This effect tints the color of the source.
    The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`QGraphicsColorizeEffect` inherits from the `QGraphicsEffect` class and improves
    functionality by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting the parameters/properties in relation
    to the colorizing effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '`colorize_effect.setColor(QtGui.QColor)`: This sets the color that will be
    used for this colorizing effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '`colorize_effect.setStrength(float)`: This sets the strength of the effect
    (`0.0`—no effect, and `1.0`—full colorization).'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the current values of the colorizing
    effect, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`colorize_effect.color()`: This returns the color of the `QtGui.QColor` type
    that''s used to colorize this effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '`colorize_effect.strength()`: This returns the strength of the effect.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QGraphicsColorizeEffect` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`colorize_effect.colorChanged(QtGui.QColor)`: This signal is emitted when the
    color of the effect changes, with a new color passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`colorize_effect.strengthChanged(float)`: This signal is emitted when the strength
    of the effect changes, with a new strength passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsDropShadowEffect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides the drop shadow effect for the source that''s provided.
    The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`QGraphicsDropShadowEffect` inherits from the `QGraphicsEffect` class and improves
    functionality by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting the parameters/properties in relation
    to the shadow effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.setBlurRadius(float)`: This sets the blur radius in pixels for
    this drop shadow effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.setColor(QtGui.QColor)`: This sets the color for this drop shadow
    effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.setOffset(QtCore.QPointF)`: This sets the shadow offset specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.setOffset(float)`: This sets the shadow offset specified in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.setOffset(dx, dy)`: This sets the shadow offset, as specified
    by the `dx` and `dy` values of the offset.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.setXOffset(float)`: This sets the horizontal shadow offset in
    pixels specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.setYOffset(float)`: This sets the vertical shadow offset in
    pixels specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the current values of the shadow effect,
    changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.blurRadius()`: This returns the blur radius in pixels of this
    drop shadow effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.color()`: This returns the color of the `QtGui.QColor` type
    for this drop shadow.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.offset()`: This returns the shadow offset of the `QtCore.QPointF`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.xOffset()`: This returns the horizontal shadow offset.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.yOffset()`: This returns the vertical shadow offset.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QGraphicsDropShadowEffect` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.blurRadiusChanged(float)`: This signal is emitted when the blur
    radius changes, with a new blur radius passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.colorChanged(QtGui.QColor)`: This signal is emitted when the
    color of the effect changes, with a new color passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shadow_effect.offsetChanged(QtCore.QPointF)`: This signal is emitted when
    the offset of the effect changes, with a new offset passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsOpacityEffect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the class that implements the opacity effect for the source. The declaration
    syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`QGraphicsDropShadowEffect` inherits from the `QGraphicsEffect` class and improves
    functionality by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting the parameters/properties in relation
    to the opacity effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opacity_effect.setOpacity(float)`: This sets the opacity for this effect (`0.0`—fully
    transparent, and `1.0`—fully opaque).'
  prefs: []
  type: TYPE_NORMAL
- en: '`opacity_effect.setOpacityMask(QtGui.QBrush)`: This sets the opacity mask,
    specified in the parameter, for this effect. This allows opacity to be applied
    to portions of an element.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the current values of the opacity effect,
    changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opacity_effect.opacity()`: This returns the opacity of this effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '`opacity_effect.opacityMask()`: This returns the opacity mask of the `QtGui.QBrush`
    type for this effect.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QGraphicsOpacityEffect` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opacity_effect.opacityChanged(float)`: This signal is emitted when the opacity
    changes, with the new opacity passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`opacity_effect.opacityMaskChanged(QtGui.QBrush)`: This signal is emitted when
    the opacity mask changes, with the new opacity mask passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: Standard animations and transformation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Effects, with the help of the Qt framework, can be realized as animations of
    standard graphics items. These classes animate various items, such as `QGraphicsEllipseItem`,
    `QGraphicsTextItem`, and so on. The `QGraphicsItemAnimation` class can also be
    considered for the PySide binding.
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsTransform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is an abstract base class for building advanced transformations with a
    graphics item. The `QGraphicsTransform` class inherits from the `QObject` class
    and improves functionality by means of the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`applyTo(QtGui.QMatrix4x4)`: This function applies this transformation to the
    matrix specified in the parameter. This method needs to be reimplemented in derived
    classes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`update()`: This notifies that the operation associated with this transform
    operation has changed.'
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsRotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides the rotation of a graphics item in the application. The
    declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`QGraphicsRotation` inherits from the `QGraphicsTransform` class and improves
    functionality by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting the parameters/properties in relation
    to the rotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_rotation.setAngle(float)`: This sets the angle of this rotation.
    A value of `180.0` will rotate this item 180 degrees clockwise, while a value
    of `-180.0` will rotate this item 180 degrees counter-clockwise.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_rotation.setAxis(QtGui.QVector3D)`: This sets the rotation axis,
    as specified in the parameter as a vector in 3D space. The vector can be (0, 0,
    1), rotation around the *z* axis (the default), or (1, 0, 0), which will rotate
    the item around the *x* axis.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_rotation.setAxis(QtCore.Qt.Axis)`: This sets the rotation axis specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_rotation.setOrigin(QtGui.QVector3D)`: This sets the origin point
    of the rotation in 3D space.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the rotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_rotation.angle()`: This returns the angle of this rotation in degrees.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_rotation.axis()`: This returns the axis of the `QtGui.QVector3D`
    type for this rotation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_rotation.origin()`: This returns the origin of the `QtGui.QVector3D`
    type for this rotation.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QGraphicsRotation` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_rotation.angleChanged()`: This signal is emitted when the angle of
    rotation changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_rotation.axisChanged()`: This signal is emitted when the axis of
    rotation changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_rotation.originChanged()`: This signal is emitted when the origin
    point of the rotation changes.'
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsScale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides a scale transformation of a graphics item. The declaration
    syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`QGraphicsScale` inherits from the `QGraphicsTransform` class and improves
    functionality by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting the parameters/properties in relation
    to the scale:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.setOrigin(QtGui.QVector3D)`: This sets the origin point of
    the scale in a 3D space.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.setXScale(float)`: This sets the horizontal scale factor specified
    in the parameter. The default value is `1.0`. If the factor is `0.0`, the item
    will be collapsed into a single point. If the factor is a negative value, the
    item will be mirrored horizontally.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.setYScale(float)`: This sets the vertical scale factor specified
    in the parameter. The default value is `1.0`. If the factor is `0.0`, the item
    will be collapsed into a single point. If the factor is a negative value, the
    item will be flipped vertically.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.setZScale(float)`: This sets the depth scale factor specified
    in the parameter. The default value is `1.0`. If the factor is `0.0`, the item
    will be collapsed into a single point. If the factor is a negative value, the
    item will be flipped end to end.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the scale:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.origin()`: This returns the origin of the `QtGui.QVector3D`
    type for this scale.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.xScale()`: This returns the horizontal scale factor.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.yScale()`: This returns the vertical scale factor.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.zScale()`: This returns the depth scale factor.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QGraphicsScale` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.originChanged()`: This signal is emitted when the origin point
    of the scale changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.scaleChanged()`: This signal is emitted when the scale changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.xScaleChanged()`: This signal is emitted when the horizontal
    scale changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.yScaleChanged()`: This signal is emitted when the vertical
    scale changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_scale.zScaleChanged()`: This signal is emitted when the depth scale
    changes.'
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsItemAnimation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the PySide Python bindings, this class realizes animation support for graphics
    item-related classes. This class includes operations that are the most useful for
    an item in terms of receiving animation. The declaration syntax of this class
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `QGraphicsItemAnimation` class improves functionality by means of the following
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting the parameters/properties in relation
    to the item''s animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.setItem(QtWidgets.QGraphicsItem)`: This sets the item that
    will be used in this animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.setPosAt(float, QtCore.QPointF)`: This sets the item''s position
    at the step (the first parameter) to the point (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.setRotationAt(float, float)`: This sets the item''s rotation
    at the step (the first parameter) to the angle (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.setScaleAt(float, float, float)`: This sets the item''s scale
    at the step (the first parameter) with horizontal (the second parameter) and vertical
    (the third parameter) scale factors.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.setShearAt(float, float, float)`: This sets the item''s shear
    at the step (the first parameter) with horizontal (the second parameter) and vertical
    (the third parameter) shear factors.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.setStep(float)`: This sets the current step, specified in the
    parameter, for this animation. The transformations are to be performed at this
    step.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.setTimeLine(QtCore.QTimeLine)`: This sets the timeline, specified
    in the parameter, that is used to control the rate of this animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.setTranslationAt(float, float, float)`: This sets the item''s
    translation at the step (the first parameter) with horizontal (the second parameter)
    and vertical (the third parameter) coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the item''s animation, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.clear()`: This clears the transformations that are used for
    this animation, with the item and timeline retained.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.horizontalScaleAt(float)`: This returns the horizontal scale
    for this item at the step specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.horizontalShearAt(float)`: This returns the horizontal shear
    for this item at the step specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.item()`: This returns the item of the `QtWidgets.QGraphicsItem`
    type on which this animation operates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.matrixAt(float)`: This returns the matrix of the `QtGui.QMatrix`
    type that is used to transform the item at the step specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.posAt(float)`: This returns the item''s position of the `QtCore.QPointF`
    type at the step specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.posList()`: This returns the list of all explicitly inserted
    positions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.reset()`: This resets the item''s animation to the starting
    position and transformation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.rotationAt(float)`: This returns the angle at which this item
    is rotated at the step specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.rotationList()`: This returns a list of all explicitly inserted
    rotations.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.scaleList()`: This returns a list of all explicitly inserted
    scales.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.shearList()`: This returns a list of all explicitly inserted
    shears.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.timeLine()`: This returns the timeline of the `QtCore.QTimeLine`
    type for this animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.translationList()`: This returns a list of all explicitly inserted
    translations.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.verticalScaleAt(float)`: This returns the vertical scale of
    the item at the step specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.verticalShearAt(float)`: This returns the vertical shear of
    the item at the step specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.xTranslationAt(float)`: This returns the horizontal translation
    of the item at the step specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`item_animation.yTranslationAt(float)`: This returns the vertical translation
    of the item at the step specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: Additional modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the graphics classes we've already described, Qt provides support
    for OpenGL, which is represented in a wide set of classes from the `QtGui` module.
    Also, the Qt library has additional modules for working with graphics in the GUI
    application. Modules that realize graphics support, such as `QtSvg`, `QtCharts`,
    `QtDataVisualization`, and 3D modules, such as `Qt3DCore`, `Qt3DInput` `Qt3DLogic`,
    `Qt3DRender`, `Qt3DExtras`, and `Qt3DAnimation`, are commonly used in development.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's consider the `QtSvg` module. It is recommended that you read the
    documentation (PySide2—[https://doc.qt.io/qtforpython/index.html](https://doc.qt.io/qtforpython/index.html)
    and PyQt5—[https://www.riverbankcomputing.com/static/Docs/PyQt5/](https://www.riverbankcomputing.com/static/Docs/PyQt5/))
    if you want to learn about the other modules.
  prefs: []
  type: TYPE_NORMAL
- en: QtSvg
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `QtSvg` module realizes the handling of SVG images. SVG is a language that
    implements two-dimensional vector graphics. For use in an application, this module
    needs to be imported with the following statements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have the PySide2 `import` statement, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we have the PyQt5 `import` statement, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `QtSvg` module includes the following classes.
  prefs: []
  type: TYPE_NORMAL
- en: QSvgRenderer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class draws content from the SVG files using paint devices, such as `QPaintDevice`.
    The declaration syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `QSvgRenderer` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting the parameters/properties in relation
    to the SVG renderer:'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.setCurrentFrame(int)`: This sets the current frame in the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.setFramesPerSecond(int)`: This sets the number of frames to be
    shown per second.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.setViewBox(QtCore.QRect)`: This sets the rectangle, specified
    in the parameter with integer values, that will be a visible area of the document.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.setViewBox(QRectF)`: This sets the rectangle, specified in the
    parameter with float values, that will be a visible area of the document.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the SVG renderer, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.animated()`: This returns `True` if animated elements are included.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.animationDuration()`: This returns the number of frames that
    are used in the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.boundsOnElement(str)`: This returns the bounding rectangle of
    the `QtCore.QRectF` type for the item with the ID specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.currentFrame()`: This returns the number of current frame in
    the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.defaultSize()`: This returns the default size of the contents
    of the SVG file.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.elementExists(str)`: This returns `True` if the element with
    the ID specified in the parameter exists in the SVG file.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.framesPerSecond()`: This returns the number of frames to be shown
    per second.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.isValid()`: This returns `True` if the current document is valid.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.load("Path/to/file.svg")`: This loads the SVG file specified
    in the parameter, and returns `True` if the content was successfully parsed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.load(QtCore.QXmlStreamReader)`: This loads SVG in content specified
    in the parameter, and returns `True` if the content was successfully parsed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.load(QtCore.QByteArray)`: This loads the SVG format content specified
    in the parameter, and returns `True` if the content was successfully parsed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.render(QtGui.QPainter)`: This renders the current document, or
    the current frame of the animated document, using the painter specified in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.render(QtGui.QPainter, str, QtCore.QRectF)`: This renders the
    element with the ID (the second parameter) using the painter (the first parameter)
    on the bounds (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.render(QtGui.QPainter, QtCore.QRectF)`: This renders the current
    document using the painter (the first parameter) on the bounds (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.viewBox()`: This returns the visible area as the `QtCore.QRect`
    of the document.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.viewBoxF()`: This returns the visible area as the `QtCore.QRectF`
    of the document.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signal of the `QSvgRenderer` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_renderer.repaintNeeded()`: The signal is emitted when the rendering of
    the document needs to be updated'
  prefs: []
  type: TYPE_NORMAL
- en: QSvgGenerator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class is a write-only paint device for creations of the SVG drawings.
    The declaration syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `QSvgGenerator` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting the parameters/properties in relation
    to the SVG generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.setDescription(str)`: This sets the description, specified in
    the parameter, for the generated SVG drawing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.setFileName("Path/to/file.svg")`: This sets the filename, specified
    in the parameter, that is used for generation of the SVG drawing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.setOutputDevice(QtCore.QIODevice)`: This sets the output device,
    specified in the parameter, that is used for generation of the SVG drawing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.setResolution(int)`: This sets the resolution for the generated
    output, in **dots per inch** (**dpi**), that will be used for calculating the
    physical size of the SVG drawing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.setSize(QtCore.QSize)`: This sets the size, specified in the
    parameter, that is used for generation of the SVG drawing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.setTitle(str)`: This sets the title, specified in the parameter,
    that is used for generation of the SVG drawing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.setViewBox(QtCore.QRect)`: This sets the view box, specified
    in the parameter with integer values, that is used for the generation of the SVG
    drawing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.setViewBox(QtCore.QRectF)`: This sets the view box, specified
    in the parameter with float values, that is used for the generation of the SVG
    drawing.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the SVG generator, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.description()`: This returns a description of the SVG drawing
    that was generated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.fileName()`: This returns the filename of the SVG drawing that
    was generated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.outputDevice()`: This returns the output device of the `QtCore.QIODevice`
    type for the SVG drawing that was generated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.resolution()`: This returns the resolution of the output that
    was generated, in dpi.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.size()`: This returns the size of the `QtCore.QSize` type for the
    SVG drawing that was generated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.title()`: This returns title of the SVG drawing that was  generated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.viewBox()`: This returns the view box of the `QtCore.QRect`
    type for the SVG drawing that was generated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_generator.viewBoxF()`: This returns the view box of the `QtCore.QRectF`
    type for the SVG drawing that was generated.'
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsSvgItem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class is used to render the SVG file''s contents. This can be used to
    render the content to the graphics view using the `QGraphicsView` class described
    in the previous chapter. The declaration syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `QGraphicsSvgItem` class improves functionality by means of the following
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting the parameters/properties in relation
    to the SVG item:'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_item.setElementId(str)`: This sets the XML ID, specified in the parameter,
    for the element.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_item.setMaximumCacheSize(QtCore.QSize)`: This sets the maximum size, specified
    in the parameter, of the device coordinate cache size for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_item.setSharedRenderer(QtSvg.QSvgRenderer)`: This sets the renderer as
    shared. The renderer can be used on a number of items.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the SVG item:'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_item.elementId()`: This returns the XML ID of the currently rendered element.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_item.maximumCacheSize()`: This returns the maximum size of the device
    coordinate cache for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_item.renderer()`**:** This returns the current renderer of the `QtSvg.QSvgRenderer`
    type that is used for this SVG item.'
  prefs: []
  type: TYPE_NORMAL
- en: QSvgWidget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class displays SVG files with the widget. The declaration syntax is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `QSvgWidget` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the SVG widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_widget.load("Path/to/file.svg")`: This loads the SVG file, specified in
    the parameter, and updates the widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_widget.load(QtCore.QByteArray)`: This loads the SVG format''s contents,
    specified in the parameter, and updates the widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`svg_widget.renderer()`: This returns the renderer of the `QtSvg.QSvgRenderer`
    type that''s used to display the contents of the SVG widget.'
  prefs: []
  type: TYPE_NORMAL
- en: Multimedia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Qt framework provides multimedia support for audio, video, radio, and camera
    functionality in the GUI application. The modules that can help you realize this
    are `QtMultimedia` and `QtMultimediaWidgets`. `QtMultimedia` includes classes
    for low-level working with multimedia, while `QtMultimediaWidgets` can represent
    the widget for media objects. The `QMediaPlayer` class of the `QtMultimedia` module
    can be organized to play a media source.
  prefs: []
  type: TYPE_NORMAL
- en: QtMultimedia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `QtMultimedia` module realizes functionality for working with multimedia
    such as audio, video, radio, and camera. For use in the application, this module
    needs to be imported with the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the PySide2 `import` statement, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have the PyQt5 `import` statement, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `QtMultimedia` module includes classes such as `QAudio`, `QSound`, `QRadioTuner`,
    and `QVideoWindowControl`. Let's consider the available camera functionality,
    since this technology combines all media functionality.
  prefs: []
  type: TYPE_NORMAL
- en: QMediaObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a basic class for multimedia objects in the `QtMultimedia` module.
    This class provides the basic functionality that''s inherited by other multimedia
    classes that can be used in the application. The declaration of this class is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `QMediaObject` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to the addition of properties to the media object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.addPropertyWatch(QtCore.QByteArray)`: This enables the media
    object to watch the property name.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to setting parameters/properties in relation to the media
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.setNotifyInterval(int)`: This sets the interval, specified in
    the parameter, for updating the properties, in milliseconds (the default is `1000`).'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to these media
    object states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.isAvailable()`: This returns `True` if the service is available.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.isMetaDataAvailable()`: This returns `True` if the metadata associated
    with this media object is available.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the media object, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.availability()`: This returns the availability of the functionality
    offered by this object as the `QtMultimedia.QMultimedia.AvailabilityStatus` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.availableMetaData()`: This returns a list of keys available for
    the metadata of the media object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.bind(QtCore.QObject)`: This binds the object, specified in the
    parameter, to this media object instance.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.metaData(str)`: This returns the value associated with the metadata
    key specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.notifyInterval()`: This returns the interval for updating the
    properties.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.removePropertyWatch(QtCore.QByteArray)`: This removes the property
    name from the list of properties.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.service()`: This returns the media service that provides the
    functionality for this multimedia.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.unbind(QtCore.QObject)`: This unbinds the object, specified in
    the parameter, from this media object.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QMediaObject` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.availabilityChanged(bool)`: This signal is emitted when the availability
    state of this media object has changed, with respect to the availability passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.availabilityChanged(QtMultimedia.QMultimedia.AvailabilityStatus)`:
    This signal is emitted when the availability of the service of this media object
    has changed, with respect to the availability passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.metaDataAvailableChanged(bool)`: This signal is emitted when
    the metadata of this media object has changed, with respect to the available state
    passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.metaDataChanged()`: This signal is emitted when the metadata
    of this media object has changed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.metaDataChanged(str, object)`: This signal is emitted when the
    metadata element value (the second parameter) with the key (the first parameter)
    of this media object has changed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`media_object.notifyIntervalChanged(int)`: This signal is emitted when the
    notify interval period of this media object has changed, with the interval in
    milliseconds that is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QCamera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class realizes the interface for available system camera devices. Implementing
    the camera functionality in the application demonstrates and combines almost all
    multimedia opportunities. The following multimedia classes will dive into various
    features that can be used with the camera device. The declaration syntax of this
    class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `QCamera` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting parameters/properties in relation to
    the camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.setCaptureMode(QtMultimedia.QCamera.CaptureModes)`: This sets the capture
    mode for this camera, and the configurations of what the camera captures, such
    as video or still images. The available capture modes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.CaptureViewfinder`: Only configured to display viewfinder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.CaptureStillImage`: Configured for still frame capture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.CaptureVideo`: Configured for video capture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camera.setViewfinder(QtMultimediaWidgets.QVideoWidget)`: This sets the video
    widget-based camera, with the viewfinder specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.setViewfinder(QtMultimediaWidgets.QGraphicsVideoItem)`: This sets the
    video item-based camera, with the viewfinder specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.setViewfinder(QtMultimedia.QAbstractVideoSurface)`: This sets a video
    surface, specified in the parameter, as the viewfinder of a camera.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.setViewfinderSettings(QtMultimedia.QCameraViewfinderSettings)`: This
    sets the viewfinder settings, specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to the camera states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.isCaptureModeSupported(QtMultimedia.QCamera.CaptureModes)`: This returns
    `True` if the capture mode, specified in the parameter, is supported.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the camera, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.availableDevices()`: This returns a list of the camera devices that
    are available from the default service provider.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.captureMode()`: This returns the capture mode of the `QtMultimedia.QCamera.CaptureModes`
    type for this camera, and the configurations of what the camera captures, such
    as video or still images.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.deviceDescription(QtCore.QByteArray)`: This returns a description of
    this camera device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.error()`: This returns the error state of the `QtMultimedia.QCamera.Error`
    type for this camera device. The errors that may occur are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.NoError`—`0`: No errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.CameraError`—`1`: An error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.InvalidRequestError`—`2`: The system resource doesn''t
    support the functionality requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.ServiceMissingError`—`3`: No camera service available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.NotSupportedFeatureError`—`4`: The feature is not supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camera.errorString()`: This returns the error state as a description string
    for this camera device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.exposure()`: This returns the exposure control object of this camera.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.focus()`: This returns the focus control object of this camera.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.imageProcessing()`: This returns the image processing control object
    of this camera.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.load()`: This opens this camera device. The status of the camera is
    changed to `QCamera.LoadedStatus`. It is used to read and change the supported
    camera settings and capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.lockStatus()`: This returns the lock status of the `QtMultimedia.QCamera.LockStatus`
    type for the requested camera settings locks. The lock statuses that can be returned
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.Unlocked`—`0`: Unlocked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.Searching`—`1`: Focusing or calculating exposure and
    white balance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.Locked`—`2`: Ready to capture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camera.lockStatus(QtMultimedia.QCamera.LockType)`: This returns the lock status
    for the lock type, specified in the parameter. The available lock types are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.NoLock`: No locks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.LockExposure`: Locks exposure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.LockWhiteBalance`: Locks white balance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.LockFocus`: Locks focus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camera.requestedLocks()`: This returns the requested lock types.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.searchAndLock()`: This locks all the supported camera settings.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.searchAndLock(QtMultimedia.QCamera.LockTypes)`: This locks the camera
    with requested locks, as specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.start()`: This starts this camera device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.state()`: This returns the current state of the `QtMultimedia.QCamera.State`
    type for this camera object. The states that can be returned are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.UnloadedState`—`0`: Initial camera state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.LoadedState`—`1`: Camera is loaded and ready to be configured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.ActiveState`—`2`: Camera is ready for capture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camera.status()`: This returns the current status of the `QtMultimedia.QCamera.Status`
    type for this camera object. The statuses that can be returned are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.UnavailableStatus`—`0`: Camera unavailable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.UnloadedStatus`—`1`: Camera not loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.LoadingStatus`—`2`: Camera loading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.UnloadingStatus`—`3`: Camera unloading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.LoadedStatus`—`4`: Camera is loaded and ready to be configured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.StandbyStatus`—`5`: Camera is in power saving standby
    mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.StartingStatus`—`6`: Camera is starting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.StoppingStatus`—`7`: Camera is stopping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.ActiveStatus`—`8`: Camera has been started and can produce
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camera.stop()`: This stops the camera. The camera state is changed from `ActiveState`
    to `LoadedState`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.supportedLocks()`: This returns the supported lock types for this camera
    device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.supportedViewfinderFrameRateRanges(QtMultimedia.QCameraViewfinderSettings)`:
    This returns a list of viewfinder frame rate ranges that are supported for this
    camera device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.supportedViewfinderPixelFormats(QtMultimedia.QCameraViewfinderSettings)`:
    This returns a list of viewfinder pixel formats that are supported for this camera
    device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.supportedViewfinderResolutions(QtMultimedia.QCameraViewfinderSettings)`:
    This returns a list of viewfinder resolutions that are supported for this camera
    device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.supportedViewfinderSettings(QtMultimedia.QCameraViewfinderSettings)`:
    This returns a list of viewfinder settings that are supported for this camera
    device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.unload()`: This closes the camera and deallocates the related resources
    by changing the status of the camera to `UnloadedStatus`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.unlock()`: This unlocks all the camera locks.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.unlock(QtMultimedia.QCamera.LockTypes)`: This unlocks the camera settings
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.viewfinderSettings()`: This returns the viewfinder settings of the
    `QtMultimedia.QCameraViewfinderSettings` type that are used by this camera.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QCamera` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.captureModeChanged(QtMultimedia.QCamera.CaptureModes)`: This signal
    is emitted when the capture mode changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.error()`: This signal is emitted when the error state changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.error(QtMultimedia.QCamera.Error)`: This signal is emitted when the
    error state changes to the value passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.locked()`: This signal is emitted when all the requested camera settings
    are locked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.lockFailed()`: This signal is emitted when the locking of at least
    one requested camera setting fails.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.lockStatusChanged(QtMultimedia.QCamera.LockStatus, QtMultimedia.QCamera.LockChangeReason)`:
    This signal is emitted when the overall status (the first parameter) for all the
    requested camera locks is changed without a reason (the second parameter). The
    available change reason parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.UserRequest`—`0`: Lock status changed with a user request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.LockAcquired`—`1`: Lock status successfully changed to
    `Locked`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.LockFailed`—`2`: Failed to acquire the requested lock.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.LockLost`—`3`: No longer able to maintain the requested
    lock; status changed to `Unlocked`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.LockTemporaryLost`—`4`: The lock is lost, but the camera
    is working to reacquire it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camera.stateChanged(QtMultimedia.QCamera.State)`: This signal is emitted when
    the camera state, specified in the parameter, changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera.statusChanged(QtMultimedia.QCamera.Status)`: This signal is emitted
    when the camera status, specified in the parameter, changes.'
  prefs: []
  type: TYPE_NORMAL
- en: QCameraFocusZone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides information about zones that are used for autofocusing
    a camera. The zones and zone locations that will be used depend on the camera''s
    capabilities. This can be used for drawing rectangles around areas of the camera
    frame that are in focus, or for changing the color of a zone. The declaration
    of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `QCameraFocusZone` class improves functionality by means of the following
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This  function is related to setting parameters/properties in relation to the camera
    focus zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_focus_zone.setStatus(QtMultimedia.QCameraFocusZone.FocusZoneStatus)`:
    This sets the status, specified in the parameter, for this camera focus zone.
    The available focus zone parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCameraFocusZone.Invalid`—`0`: Zone is not valid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCameraFocusZone.Unused`—`1`: Zone is unused but available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCameraFocusZone.Selected`—`2`: Zone is used for autofocusing,
    but is not in focus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCameraFocusZone.Focused`—`3`: Zone is used for autofocusing,
    and is in focus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to these camera focus
    zone states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_focus_zone.isValid()`: This returns `True` if the camera focus zone
    has a valid area and status.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the current values of the camera focus
    zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_focus_zone.area()`: This returns the camera''s frame area of the `QtCore.QRectF`
    type that this focus zone encompasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_focus_zone.status()`: This returns the current status of the `QtMultimedia.QCameraFocusZone.FocusZoneStatus`
    type for this camera focus zone.'
  prefs: []
  type: TYPE_NORMAL
- en: QCameraImageCapture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the class that''s used for recording the media content from the camera
    device. The declaration of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `QCameraImageCapture` class improves functionality by means of the following
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting parameters/properties in relation to
    the camera image capture:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.setBufferFormat(QtMultimedia.QVideoFrame.PixelFormat)`:
    This sets the buffer image capture format, specified in the parameter, that will
    be used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.setCaptureDestination(QtMultimedia.QCameraImageCapture.CaptureDestinations)`:
    This sets the capture destination, specified in the parameter, that will be used.
    The available capture destinations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCameraImageCapture.CaptureToFile`: This captures to a file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCameraImageCapture.CaptureToBuffer`: This captures to a buffer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camera_image_capture.setEncodingSettings(QtMultimedia.QImageEncoderSettings)`:
    This sets the image encoding settings specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to these camera
    image capture states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.isAvailable()`: This returns `True` if the image capture
    is ready to use.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.isCaptureDestinationSupported(QtMultimedia.QCameraImageCapture.CaptureDestinations)`:
    This returns `True` if the image capture destination, specified in the parameter,
    is supported.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.isReadyForCapture()`: This returns `True` if the service
    is ready to capture an image.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the camera image capture, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.availability()`: This returns the availability of the
    `QtMultimedia.QMultimedia.AvailabilityStatus` type for this functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.bufferFormat()`: This returns the buffer image capture
    format of the `QtMultimedia.QVideoFrame.PixelFormat` type that is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.cancelCapture()`: This cancels incomplete capture requests.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.capture("Full/Path/to/the/folder/filename.jpg")`: This
    captures the image and saves it to file, as specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.captureDestination()`: This returns the image capture
    destination of the `QtMultimedia.QCameraImageCapture.CaptureDestinations` type
    that is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.encodingSettings()`: This returns the image encoding
    settings of the `QtMultimedia.QImageEncoderSettings` type that is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.error()`: This returns the error state of the `QtMultimedia.QCameraImageCapture.Error`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.errorString()`: This returns the error state as a string
    description.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.imageCodecDescription(str)`: This returns a description
    of the image codec specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.supportedBufferFormats()`: This returns a list of supported
    buffer image capture formats.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.supportedImageCodecs()`: This returns a list of supported
    image codecs.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QCameraImageCapture` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.bufferFormatChanged(QtMultimedia.QVideoFrame.PixelFormat)`:
    This signal is emitted when the buffer format, passed in the parameter, for the
    buffer image capture changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.captureDestinationChanged(QtMultimedia.QCameraImageCapture.CaptureDestinations)`:
    This signal is emitted when the capture destination, passed in the parameter,
    changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.imageAvailable(int, QtMultimedia.QVideoFrame)`: This
    signal is emitted when the frame (the second parameter) with the request ID (the
    first parameter) is available.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.imageCaptured(int, QtGui.QImage)`: This signal is emitted
    when the frame (the second parameter) with the request ID (the first parameter)
    is captured.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.imageExposed(int)`: This signal is emitted when the frame
    with the request ID, specified in the parameter, is exposed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.imageMetadataAvailable(int, str, object)`: This signal
    is emitted when the metadata for an image with the request ID (the first parameter)
    is available, with the key (the second parameter) and value (the third parameter)
    of the metadata included.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.imageSaved(int, str)`: This signal is emitted when the
    frame with the request ID (the first parameter) is saved to the filename (the
    second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_image_capture.readyForCaptureChanged(bool)`: This signal is emitted
    when the camera''s ready parameter changes, as specified, for the capture state.'
  prefs: []
  type: TYPE_NORMAL
- en: QCameraInfo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class represents general information regarding the available camera device.
    The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `QCameraInfo` class improves functionality by means of the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_info.availableCameras(QtMultimedia.QCamera.Position)`: This returns
    a list of available cameras that are located at positions specified in the parameter.
    The positions that can be used for this function are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.UnspecifiedPosition`—`0`: Camera position is unspecified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.BackFace`—`1`: Camera position on the opposite side to
    the device screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia.QCamera.FrontFace`—`2`: Camera position on the same side to the
    device screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`camera_info.defaultCamera()`: This returns the default camera.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_info.description()`: This returns a description regarding the camera.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_info.deviceName()`: This returns the name of the camera as a unique
    ID.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_info.isNull()`: This returns `True` if `QCameraInfo` is null or is
    invalid.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_info.orientation()`: This returns the physical orientation angle of
    this camera sensor.'
  prefs: []
  type: TYPE_NORMAL
- en: '`camera_info.position()`: This returns the physical position of the `QtMultimedia.QCamera.Position`
    type for this camera on the hardware system.'
  prefs: []
  type: TYPE_NORMAL
- en: QCameraViewfinderSettings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides the viewfinder settings that can be set with the `QCamera`
    class. The declaration of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `QCameraViewfinderSettings` class improves functionality by means of the
    following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting parameters/properties in relation to
    the viewfinder settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.setMaximumFrameRate(float)`: This sets the maximum frame
    rate, specified in the parameter, in frames per second for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.setMinimumFrameRate(float)`: This sets the minimum frame
    rate, specified in the parameter, in frames per second for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.setPixelAspectRatio(QtCore.QSize)`: This sets the pixel
    aspect ratio, specified in the parameter, for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.setPixelAspectRatio(int, int)`: This sets the pixel aspect
    ratio as horizontal (the first parameter) and vertical (the second parameter)
    elements for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.setPixelFormat(QtMultimedia.QVideoFrame.PixelFormat)`:
    This sets the pixel format, specified in the parameter, for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.setResolution(QtCore.QSize)`: This sets the resolution,
    specified in the parameter, for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.setResolution(w, h)`: This sets the resolution specified
    by `w` (width) and `h` (height) for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to these viewfinder
    setting states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.isNull()`: This returns `True` if the viewfinder settings
    are `null`.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the viewfinder settings, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.maximumFrameRate()`: This returns the maximum frame rate
    in frames per second for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.minimumFrameRate()`: This returns the minimum frame rate
    in frames per second for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.pixelAspectRatio()`: This returns the pixel aspect ratio
    of the `QtCore.QSize` type for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.pixelFormat()`: This returns the pixel format of the `QtMultimedia.QVideoFrame.PixelFormat`
    type for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.resolution()`: This returns the resolution of the `QtCore.QSize`
    type for the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewfinder_settings.swap(QtMultimedia.QCameraViewfinderSettings)`: This swaps
    the settings of this viewfinder with those of the viewfinder specified in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QtMultimediaWidgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `QtMultimediaWidgets` module realizes the visualization of the constructed
    multimedia objects. For use in the application, this module needs to be imported
    with the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the PySide2 `import` statement, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have the PyQt5 `import` statement, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `QtMultimediaWidgets` module includes classes such as `QCameraViewfinder` and
    `QGraphicsVideoItem`.
  prefs: []
  type: TYPE_NORMAL
- en: QVideoWidget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class represents the widget for a video that''s produced by a media object.
    The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `QVideoWidget` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting parameters/properties in relation to
    the video widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.setAspectRatioMode(QtCore.Qt.AspectRatioMode)`: This sets the
    mode, specified in the parameter, that represents how video is scaled to its aspect
    ratio.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.setBrightness(int)`: This sets the brightness value, specified
    in the parameter, for video displayed in this video widget. A valid value lies
    in a range between `-100` and `100`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.setContrast(int)`: This sets the contrast value, specified in
    the parameter, for video displayed in this video widget. A valid value lies in
    a range between `-100` and `100`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.setFullScreen(bool)`: If the parameter is `True`, the video displayed will
    be in full screen mode.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.setHue(int)`: This sets the hue value, specified in the parameter,
    for video displayed in this video widget. A valid value lies in a range between
    `-100` and `100`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.setMediaObject(QtMultimedia.QMediaObject)`: This sets the media
    object, specified in the parameter, that will be displayed by this video widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.setSaturation(int)`: This sets the saturation value, specified
    in the parameter, for video displayed in this video widget. A valid value lies
    in a range between `-100` and `100`.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the video widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.aspectRatioMode()`: This returns the aspect ratio mode of the
    `QtCore.Qt.AspectRatioMode` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.brightness()`: This returns the brightness of the video displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.contrast()`: This returns the contrast of the video displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.hue()`: This returns the hue of the video displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.mediaObject()`: This returns the media object displayed by this
    video widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.saturation()`: This returns the saturation of the video displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.event(QtCore.QEvent)`: This receives events to the video widget
    and should return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.hideEvent(QtGui.QHideEvent)`: This is an event handler that''s
    designed to receive the hide events for the video widget, with events passed in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.moveEvent(QtGui.QMoveEvent)`: This is an event handler that''s
    designed to receive move events for the video widget, with events passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s
    designed to receive paint events for the video widget, with events passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.resizeEvent(QtGui.QResizeEvent)`: This is an event handler that''s
    designed to receive resize events for the video widget, with events passed in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.showEvent(QtGui.QShowEvent)`: This is an event handler that''s
    designed to receive show events for the video widget, with events passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QVideoWidget` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.brightnessChanged(int)`: This signal is emitted when the brightness
    adjustment, passed in the parameter, changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.contrastChanged(int)`: This signal is emitted when the contrast
    adjustment, passed in the parameter, changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.fullScreenChanged(bool)`: This signal is emitted when the full
    screen mode of a video widget changes, with the availability of the mode passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.hueChanged(int)`: This signal is emitted when the hue adjustment,
    passed in the parameter, changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`video_widget.saturationChanged(int)`: This signal is emitted when the saturation
    adjustment, passed in the parameter, changes.'
  prefs: []
  type: TYPE_NORMAL
- en: Camera example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate multimedia functionality in the GUI application, we will implement
    the camera with simple features, such as capturing an image. Using the camera
    in the application is the most popular and well-explained multimedia form. To
    begin, create `u_media.py` files in both the `App/App_PySide2/` and `App/App_PyQt5/`
    directories. Then, in these directories, create the `camera/` folder, and, within
    this, a `captures/` folder to save captured images. The paths will be `App/App_PySide2/camera/captures/`
    and `App/App_PyQt5/camera/captures/`. Insert the following lines into the `u_media.py`
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of PyQt5, insert the following into the `import` section of the `u_media.py`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of PySide2, insert the following into the `import` section of the `u_media.py`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `UMedia` class using the `QCameraViewfinder` class that inherits
    from `QVideoWidget`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In this class, we have added the camera instance, set the viewfinder, added
    a button, and arranged all the elements with a grid layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the function for capturing images to this class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This function will be called if the button is clicked. The current camera frame
    will be captured and saved to the `captures/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the enter event handler to the `UMedia` class, after the `img_capture()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If the mouse pointer enters the widget area, the button will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the leave event handler for this widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: If the mouse pointer leaves the widget's area, the button will be invisible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this file with the `subprocesses` module as much as possible. Add the
    following lines to the `u_media.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: If this file starts as an application window or with the `subprocess` module,
    this instruction will be realized. If the class of this file is used as part of
    another application, this instruction will not be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, insert the following lines in the `u_app.py` files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the `UApp` class, add the following function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This function will run the `u_media.py` file as a subprocess.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the `__init__()` function of the `UApp` class, temporarily add
    the following line to call the `video_camera` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This will call the function with a subprocess when the application starts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, at the end of  the `u_app.py` file, we can add an `import` of the
    `subprocess`Python standard library module as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can run the `u_app.py` file and try to capture an image from the camera
    device, as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5bde9b7-f4c1-4ee6-a8ea-3d5388202094.png)'
  prefs: []
  type: TYPE_IMG
- en: When we click on the capture button, the current frame will be captured and
    saved as an image file to the `captures/` folder. It is important to note that
    camera (video and audio) functionality is dependent on the capabilities of the
    personal device and on the availability of the installed codecs. It is therefore
    recommended that you collect information regarding devices and codecs that can
    be used for application development. A third-party package such as OpenCV, which
    provides more functional features in relation to the camera device and the handling
    of images/video, can be used to implement the camera in the app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter completes our examination of basic graphics. The following chapters
    will extend this functionality to include special tasks. The Qt library has the
    widest set of modules, classes, and tools available to work with graphics because
    it is a form of this library. In general, most of the classes that are represented
    in this framework are relative to this. It is also very important to understand
    the basic graphics principles that can be used with GUI development that are available
    in the Qt library.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will continue our introduction to the Qt classes and cover
    basic dialog windows.
  prefs: []
  type: TYPE_NORMAL
