["```py\nself.pipeline.set_state(gst.STATE_PLAYING)\n\n```", "```py\n    class AudioPlayer:\n    def __init__(self):\n    pass\n    def constructPipeline(self):\n    pass\n    def connectSignals(self):\n    pass\n    def decodebin_pad_added(self, decodebin, pad ):\n    pass\n    def play(self):\n    pass\n    def runExamples(self):\n    pass\n    def runPauseExample(self):\n    pass\n    def runStopExample(self):\n    pass\n    def runSeekExample(self):\n    pass\n    def okToRunExamples(self):\n    pass\n    def message_handler(self, bus, message):\n    pass\n\n    ```", "```py\n    1 def play(self):\n    2 self.is_playing = True\n    3 self.player.set_state(gst.STATE_PLAYING)\n    4 self.position = None\n    5 while self.is_playing:\n    6 time.sleep(0.5)\n    7 try:\n    9 self.position = (\n    10 self.player.query_position(gst.FORMAT_TIME,\n    11 None) [0] )\n    16 except gst.QueryError:\n    17 # The pipeline has probably reached\n    18 # the end of the audio, (and thus has 'reset' itself.\n    19 # So, it may be unable to query the current position.\n    20 # In this case, do nothing except to reset\n    21 # self.position to None.\n    22 self.position = None\n    23\n    24 if not self.position is None:\n    25 #Convert the duration into seconds.\n    26 self.position = self.position/gst.SECOND\n    27 print \"\\n Current playing time: \",\n    28 self.position\n    29\n    30 self.runExamples()\n    31 evt_loop.quit()\n\n    ```", "```py\n    1 def runExamples(self):\n    2\n    3 if not self.okToRunExamples():\n    4 return\n    5\n    6 # The example will be roughly be run when the streaming\n    7 # crosses 5 second mark.\n    8 if self.position >= 5 and self.position < 8:\n    9 if self.pause_example:\n    10 self.runPauseExample()\n    11 elif self.stop_example:\n    12 self.runStopExample()\n    13 elif self.seek_example:\n    14 self.runSeekExample()\n    15 # this flag ensures that an example is run\n    16 # only once.\n    17 self.ranExample = True\n\n    ```", "```py\n    1 def runPauseExample(self):\n    2 print (\"\\n Pause example: Playback will be paused\"\n    3 \" for 5 seconds and will then be resumed...\")\n    4 self.player.set_state(gst.STATE_PAUSED)\n    5 time.sleep(5)\n    6 print \"\\n .. OK now resuming the playback\"\n    7 self.player.set_state(gst.STATE_PLAYING)\n\n    ```", "```py\n    $python PlaybackControlExamples.py\n\n    ```", "```py\ndef runStopExample(self):\nprint (\"\\n STOP example: Playback will be STOPPED\"\n\" and then the application will be terminated.\")\nself.player.set_state(gst.STATE_NULL)\nself.is_playing = False\n\n```", "```py\ndef runSeekExample(self):\nprint (\"\\n SEEK example: Now jumping to position at 15 seconds\"\n\"the audio will continue to stream after this\")\nself.player.seek_simple(gst.FORMAT_TIME,\ngst.SEEK_FLAG_FLUSH,\n15*gst.SECOND)\nself.player.set_state(gst.STATE_PAUSED)\nprint \"\\n starting playback in 2 seconds..\"\ntime.sleep(2)\nself.player.set_state(gst.STATE_PLAYING)\n\n```", "```py\n$python AudioCutter_Method2.py [options]\n\n```", "```py\n    import os, sys, time\n    import thread\n    import gobject\n    from optparse import OptionParser\n    import pygst\n    pygst.require(\"0.10\")\n    import gst\n    class AudioCutter:\n    def __init__(self):\n    pass\n    def constructPipeline(self):\n    pass\n    def decodebin_pad_added(self, decodebin, pad):\n    pass\n    def connectSignals(self):\n    pass\n    def run(self):\n    pass\n    def extractAudio(self):\n    pass\n    def processArgs(self):\n    pass\n    def printUsage(self):\n    pass\n    def printFinalStatus(self):\n    pass\n    def message_handler(self, bus, message):\n    pass\n    audioCutter = AudioCutter()\n    thread.start_new_thread(audioCutter.run, ())\n    gobject.threads_init()\n    evt_loop = gobject.MainLoop()\n    evt_loop.run()\n\n    ```", "```py\n    1 def __init__(self):\n    2 self.start_time = None\n    3 self.end_time = None\n    4 self.is_playing = False\n    5 self.seek_done = False\n    6 self.position = 0\n    7 self.duration = None\n    8 #Flag used for printing purpose only.\n    9 self.error_msg = ''\n    10 self.verbose_mode = False\n    11\n    12 self.processArgs()\n    13 self.constructPipeline()\n    14 self.connectSignals()\n\n    ```", "```py\n    1 def constructPipeline(self):\n    2 self.pipeline = gst.Pipeline()\n    3 self.fakesink = gst.element_factory_make(\"fakesink\")\n    4 filesrc = gst.element_factory_make(\"filesrc\")\n    5 filesrc.set_property(\"location\", self.inFileLocation)\n    6\n    7 autoaudiosink = gst.element_factory_make(\n    8 \"autoaudiosink\")\n    9\n    10 self.decodebin = gst.element_factory_make(\"decodebin\")\n    11\n    12 self.audioconvert = gst.element_factory_make(\n    13 \"audioconvert\")\n    14\n    15 self.encoder = gst.element_factory_make(\"lame\",\n    16 \"mp3_encoder\")\n    17\n    18 self.filesink = gst.element_factory_make(\"filesink\")\n    19 self.filesink.set_property(\"location\",\n    20 self.outFileLocation)\n    21\n    22 self.pipeline.add(filesrc, self.decodebin,\n    23 self.audioconvert,\n    24 self.encoder, self.fakesink)\n    25\n    26 gst.element_link_many(filesrc, self.decodebin)\n    27 gst.element_link_many(self.audioconvert,\n    28 self.encoder, self.fakesink)\n\n    ```", "```py\n    1 def run(self):\n    2 self.is_playing = True\n    3 print \"\\n Converting audio. Please be patient..\"\n    4 self.pipeline.set_state(gst.STATE_PLAYING)\n    5 time.sleep(1)\n    6 while self.is_playing:\n    7 self.extractAudio()\n    8 self.printFinalStatus()\n    9 evt_loop.quit()\n\n    ```", "```py\n    1 def extractAudio(self):\n    2 if not self.seek_done:\n    3 time.sleep(0.1)\n    4 self.duration = \\\n    5 self.pipeline.query_duration(gst.FORMAT_TIME,\n    6 None) [0]\n    7 self.duration = self.duration/gst.SECOND\n\n    ```", "```py\n    8\n    9 if self.start_time > self.duration:\n    10 print \"\\n start time specified\" \\\n    11 \" is more than the total audio duration\"\\\n    12 \" resetting the start time to 0 sec\"\n    13 self.start_time = 0.0\n    14\n    15 self.pipeline.seek_simple(gst.FORMAT_TIME,\n    16 gst.SEEK_FLAG_FLUSH,\n    17 self.start_time*gst.SECOND)\n    18\n    19 self.pipeline.set_state(gst.STATE_PAUSED)\n    20 self.seek_done = True\n    21 self.pipeline.remove(self.fakesink)\n    22\n    23 self.pipeline.add(self.filesink)\n    24 gst.element_link_many(self.encoder, self.filesink)\n    25 self.pipeline.set_state(gst.STATE_PLAYING)\n    26\n    27 time.sleep(0.1)\n    28 try:\n    29 self.position = self.pipeline.query_position(\n    30 gst.FORMAT_TIME, None)[0]\n    31 self.position = self.position/gst.SECOND\n    32 except gst.QueryError:\n    33 # The pipeline has probably reached\n    34 # the end of the audio, (and thus has 'reset' itself)\n    35 if self.duration is None:\n    36 self.error_msg = \"\\n Error cutting the audio\n    37 file.Unable to determine the audio duration.\"\n    38 self.pipeline.set_state(gst.STATE_NULL)\n    39 self.is_playing = False\n    40 if ( self.position <= self.duration and\n    41 self.position > (self.duration - 10) ):\n    42 # Position close to the end of file.\n    43 # Do nothing to avoid a possible traceback.\n    44 #The audio cutting should work\n    45 pass\n    46 else:\n    47 self.error_msg =\" Error cutting the audio file\"\n    48 self.pipeline.set_state(gst.STATE_NULL)\n    49 self.is_playing = False\n    50\n    51 if not self.end_time is None:\n    52 if self.position >= self.end_time:\n    53 self.pipeline.set_state(gst.STATE_NULL)\n    54 self.is_playing = False\n    55\n    56 if self.verbose_mode:\n    57 print \"\\n Current play time: =\", self.position\n\n    ```", "```py\n$gstlaunch-0.10 filesrc location=/path/to/audio.mp3 ! decodebin ! Audioconvert ! volume volume=0.8 ! autoaudiosink\n\n```", "```py\n    1 def __init__(self):\n    2 self.is_playing = False\n    3 # Flag used for printing purpose only.\n    4 self.error_msg = ''\n    5 self.fade_example = False\n    6 self.inFileLocation = \"C:/AudioFiles/audio1.mp3\"\n    7 self.outFileLocation = (\n    8 \"C:/AudioFiles/audio1_out.mp3\" )\n    9\n    10 self.constructPipeline()\n    11 self.connectSignals()\n\n    ```", "```py\n    1 def constructPipeline(self):\n    2 self.pipeline = gst.Pipeline()\n    3\n    4 self.filesrc = gst.element_factory_make(\"filesrc\")\n    5 self.filesrc.set_property(\"location\",\n    6 self.inFileLocation)\n    7\n    8 self.decodebin = gst.element_factory_make(\"decodebin\")\n    9 self.audioconvert = gst.element_factory_make(\n    10 \"audioconvert\")\n    11 self.encoder = gst.element_factory_make(\"lame\")\n    12\n    13 self.filesink = gst.element_factory_make(\"filesink\")\n    14 self.filesink.set_property(\"location\",\n    15 self.outFileLocation)\n    16\n    17 self.volume = gst.element_factory_make(\"volume\")\n    18 self.volumeLevel = 2.0\n    19\n    20 if self.fade_example:\n    21 self.setupVolumeControl()\n    22 else:\n    23 self.volume.set_property(\"volume\",\n    24 self.volumeLevel)\n    25\n    26\n    27 self.pipeline.add(self.filesrc,\n    28 self.decodebin,\n    29 self.audioconvert,\n    30 self.volume,\n    31 self.encoder,\n    32 self.filesink)\n    33\n    34 gst.element_link_many( self.filesrc, self.decodebin)\n    35 gst.element_link_many(self.audioconvert,\n    36 self.volume,\n    37 self.encoder,\n    38 self.filesink)\n\n    ```", "```py\n    $python AudioEffects.py\n\n    ```", "```py\n    1 def setupVolumeControl(self):\n    2 self.volumeControl = gst.Controller(self.volume,\n    3 \"volume\")\n    4 self.volumeControl.set(\"volume\", 0.0*gst.SECOND,\n    5 self.volumeLevel)\n    6 self.volumeControl.set_interpolation_mode(\"volume\",\n    7 gst.INTERPOLATE_LINEAR)\n\n    ```", "```py\n    def play(self):\n    self.is_playing = True\n    self.pipeline.set_state(gst.STATE_PLAYING)\n    if self.fade_example:\n    self.addFadingEffect()\n    while self.is_playing:\n    time.sleep(1)\n    self.printFinalStatus()\n    evt_loop.quit()\n\n    ```", "```py\n    1 def addFadingEffect(self):\n    2 # Fist make sure that we can add the fading effect!\n    3 if not self.is_playing:\n    4 print (\"\\n Error: unable to add fade effect\"\n    5 \"addFadingEffect() called erroniously\")\n    6 return\n    7\n    8 time.sleep(0.1)\n    9 try:\n    10 duration = (\n    11 self.pipeline.query_duration(gst.FORMAT_TIME,\n    12 None) [0] )\n    13 #Convert the duration into seconds.\n    14 duration = duration/gst.SECOND\n    15 except gst.QueryError:\n    16 # The pipeline has probably reached\n    17 # the end of the audio, (and thus has 'reset' itself)\n    18 print (\"\\n Error: unable to determine duration.\"\n    19 \"Fading effect not added.\" )\n    20 return\n    21\n    22 if duration < 4:\n    23 print (\"ERROR: unable to add fading effect.\"\n    24 \"\\n duration too short.\")\n    25 return\n    26\n    27 fade_start = duration - 4\n    28 fade_volume = self.volumeLevel\n    29 fade_end = duration\n    30\n    31 self.volumeControl.set(\"volume\",\n    32 fade_start * gst.SECOND,\n    33 fade_volume)\n    34\n    35 self.volumeControl.set(\"volume\",\n    36 fade_end * gst.SECOND,\n    37 fade_volume*0.01)\n\n    ```", "```py\n    $python AudioEffects.py\n\n    ```", "```py\n$gst-inspect-0.10 audioecho\n\n```", "```py\n    def __init__(self):\n    self.is_playing = False\n    # Flag used for printing purpose only.\n    self.error_msg = ''\n    #the flag that determines whether to use\n    # a gst Controller object to adjust the\n    # intensity of echo while playing the audio.\n    self.use_echo_controller = False\n    self.inFileLocation = \"C:/AudioFiles/audio1.mp3\"\n    self.outFileLocation = \"C:/AudioFiles/audio1_out.mp3\"\n    self.constructPipeline()\n    self.connectSignals()\n\n    ```", "```py\n    1 def constructPipeline(self):\n    2 self.pipeline = gst.Pipeline()\n    3\n    4 self.filesrc = gst.element_factory_make(\"filesrc\")\n    5 self.filesrc.set_property(\"location\",\n    6 self.inFileLocation)\n    7\n    8 self.decodebin = gst.element_factory_make(\"decodebin\")\n    9\n    10 self.audioconvert = gst.element_factory_make(\n    11 \"audioconvert\")\n    12 self.audioconvert2 = gst.element_factory_make(\n    13 \"audioconvert\")\n    14\n    15 self.encoder = gst.element_factory_make(\"lame\")\n    16\n    17 self.filesink = gst.element_factory_make(\"filesink\")\n    18 self.filesink.set_property(\"location\",\n    19 self.outFileLocation)\n    20\n    21 self.echo = gst.element_factory_make(\"audioecho\")\n    22 self.echo.set_property(\"delay\", 1*gst.SECOND)\n    23 self.echo.set_property(\"feedback\", 0.3)\n    24\n    25 if self.use_echo_controller:\n    26 self.setupEchoControl()\n    27 else:\n    28 self.echo.set_property(\"intensity\", 0.5)\n    29\n    30 self.pipeline.add(self.filesrc,self.decodebin,\n    31 self.audioconvert,\n    32 self.echo,\n    33 self.audioconvert2,\n    34 self.encoder,\n    35 self.filesink)\n    36\n    37 gst.element_link_many( self.filesrc, self.decodebin)\n    38 gst.element_link_many(self.audioconvert,\n    39 self.echo,\n    40 self.audioconvert2,\n    44 self.encoder,\n    45 self.filesink)\n\n    ```", "```py\n    $python EchoEffect.py\n\n    ```", "```py\n    def setupEchoControl(self):\n    self.echoControl = gst.Controller(self.echo, \"intensity\")\n    self.echoControl.set(\"intensity\", 0*gst.SECOND, 0.5)\n    self.echoControl.set(\"intensity\", 4*gst.SECOND, 0.0)\n\n    ```", "```py\n    $python EchoEffect.py\n\n    ```", "```py\nself.echo.set_property(\"delay\", 50000000)\n\n```", "```py\n1 # Stereo panorama effect\n2 self.panorama = gst.element_factory_make(\"audiopanorama\")\n3 self.panorama.set_property(\"panorama\", 1.0)\n4\n5\n6 self.pipeline.add(self.filesrc,\n7 self.decodebin,\n8 self.audioconvert,\n9 self.panorama,\n10 self.encoder,\n11 self.filesink)\n12\n13\n14 gst.element_link_many( self.filesrc, self.decodebin)\n15 gst.element_link_many(self.audioconvert,\n16 self.panorama,\n17 self.encoder,\n18 self.filesink)\n\n```", "```py\n    1 import os, sys, time\n    2 import thread\n    3 import gobject\n    4 from optparse import OptionParser\n    5\n    6 import pygst\n    7 pygst.require(\"0.10\")\n    8 import gst\n    9\n    10 class AudioMerger:\n    11 def __init__(self):\n    12 pass\n    13 def constructPipeline(self):\n    14 pass\n    15 def addFadingEffect(self):\n    16 pass\n    17 def setupFadeBin(self):\n    18 pass\n    19 def addGnlFileSources(self):\n    20 pass\n    21 def gnonlin_pad_added(self, gnonlin_elem, pad):\n    22 pass\n    23 def run(self):\n    24 pass\n    25 def connectSignals(self):\n    26 pass\n    27 def printUsage(self):\n    28 pass\n    29 def printFinalStatus(self):\n    30 pass\n    31 def message_handler(self, bus, message):\n    32 pass\n    33 #Run the program\n    34 audioMerger = AudioMerger()\n    35 thread.start_new_thread(audioMerger.run, ())\n    36 gobject.threads_init()\n    37 evt_loop = gobject.MainLoop()\n    38 evt_loop.run()\n\n    ```", "```py\n    1 def constructPipeline(self):\n    2 self.pipeline = gst.Pipeline()\n    3 self.composition = (\n    4 gst.element_factory_make(\"gnlcomposition\") )\n    5\n    6 # Add audio tracks to the gnl Composition\n    7 self.addGnlFileSources()\n    8\n    9 self.encoder = gst.element_factory_make(\"lame\",\n    10 \"mp3_encoder\")\n    11 self.filesink = gst.element_factory_make(\"filesink\")\n    12 self.filesink.set_property(\"location\",\n    13 self.outFileLocation)\n    14\n    15 # Fade out the individual audio pieces\n    16 # when that audio piece is approaching end\n    17 self.addFadingEffect()\n    18\n    19 self.pipeline.add(self.composition,\n    20 self.fadeBin,\n    21 self.encoder,\n    22 self.filesink)\n    23\n    24 gst.element_link_many(self.fadeBin,\n    25 self.encoder,\n    26 self.filesink)\n\n    ```", "```py\n    1 def addGnlFileSources(self):\n    2 #Parameters for gnlfilesources\n    3 start_time_1 = 0\n    4 duration_1 = 20\n    5 media_start_time_1 = 20\n    6 media_duration_1 = 20\n    7 inFileLocation_1 = \"C:/AudioFiles/audio1.mp3\"\n    8\n    9 start_time_2 = duration_1 + 3\n    10 duration_2 = 30\n    11 media_start_time_2 = 20\n    12 media_duration_2 = 30\n    13 inFileLocation_2 =\"C:/AudioFiles/audio2.mp3\"\n    14\n    15 #Parameters for blank audio between 2 tracks\n    16 blank_start_time = 0\n    17 blank_duration = start_time_2 + duration_2 + 3\n    18\n    19 # These timings will be used for adding fade effects\n    20 # See method self.addFadingEffect()\n    21 self.fade_start_1 = duration_1 - 3\n    22 self.fade_start_2 = start_time_2 + duration_2 - 3\n    23 self.fade_end_1 = start_time_1 + duration_1\n    24 self.fade_end_2 = start_time_2 + duration_2\n    25\n    26 filesrc1 = gst.element_factory_make(\"gnlfilesource\")\n    27 filesrc1.set_property(\"uri\",\n    28 \"file:///\" + inFileLocation_1)\n    29 filesrc1.set_property(\"start\", start_time_1*gst.SECOND)\n    30 filesrc1.set_property(\"duration\",\n    31 duration_1 * gst.SECOND )\n    32 filesrc1.set_property(\"media-start\",\n    33 media_start_time_1*gst.SECOND)\n    34 filesrc1.set_property(\"media-duration\",\n    35 media_duration_1*gst.SECOND)\n    36 filesrc1.set_property(\"priority\", 1)\n    37\n    38 # Setup a gnl source that will act like a blank audio\n    39 # source.\n    40 gnlBlankAudio= gst.element_factory_make(\"gnlsource\")\n    41 gnlBlankAudio.set_property(\"priority\", 4294967295)\n    42 gnlBlankAudio.set_property(\"start\",blank_start_time)\n    43 gnlBlankAudio.set_property(\"duration\",\n    44 blank_duration * gst.SECOND)\n    45\n    46 blankAudio = gst.element_factory_make(\"audiotestsrc\")\n    47 blankAudio.set_property(\"wave\", 4)\n    48 gnlBlankAudio.add(blankAudio)\n    49\n    50 filesrc2 = gst.element_factory_make(\"gnlfilesource\")\n    51 filesrc2.set_property(\"uri\",\n    52 \"file:///\" + inFileLocation_2)\n    53 filesrc2.set_property(\"start\",\n    54 start_time_2 * gst.SECOND)\n    55 filesrc2.set_property(\"duration\",\n    56 duration_2 * gst.SECOND )\n    57 filesrc2.set_property(\"media-start\",\n    58 media_start_time_2*gst.SECOND)\n    59 filesrc2.set_property(\"media-duration\",\n    60 media_duration_2*gst.SECOND)\n    61 filesrc2.set_property(\"priority\", 2)\n    63\n    63 self.composition.add(gnlBlankAudio)\n    64 self.composition.add(filesrc1)\n    65 self.composition.add(filesrc2)\n\n    ```", "```py\n    start_time_3 = start_time_2 + duration_2 + 3\n    duration_3 = 30\n    media_start_time_3 = 0\n    media_duration_3 = 30\n    inFileLocation_3 =\"C:\\AudioFiles\\audio3.mp3\"\n    # Parameters for blank audio between 2 tracks\n    blank_start_time = 0\n    blank_duration = start_time_3 + duration_3 + 3\n\n    ```", "```py\n    gnlBlankAudio.set_property(\"priority\", 3)\n\n    ```", "```py\n    1 def addFadingEffect(self):\n    2 self.setupFadeBin()\n    3\n    4 #Volume control element\n    5 self.volumeControl = gst.Controller(self.volume,\n    6 \"volume\")\n    7 self.volumeControl.set_interpolation_mode(\"volume\",\n    8 gst.INTERPOLATE_LINEAR)\n    9\n    10 fade_time = 20\n    11 fade_volume = 0.5\n    12 fade_end_time = 30\n    13\n    14 reset_time = self.fade_end_1 + 1\n    15\n    16 self.volumeControl.set(\"volume\",\n    17 self.fade_start_1 * gst.SECOND,\n    18 1.0)\n    19 self.volumeControl.set(\"volume\",\n    20 self.fade_end_1 * gst.SECOND,\n    21 fade_volume*0.2)\n    22 self.volumeControl.set(\"volume\",\n    23 reset_time * gst.SECOND,\n    24 1.0)\n    25 self.volumeControl.set(\"volume\",\n    26 self.fade_start_2 * gst.SECOND,\n    27 1.0)\n    28 self.volumeControl.set(\"volume\",\n    29 self.fade_end_2 * gst.SECOND,\n    30 fade_volume*0.2)\n\n    ```", "```py\n    1 def setupFadeBin(self):\n    2 self.audioconvert = gst.element_factory_make(\n    3 \"audioconvert\")\n    4 self.volume = gst.element_factory_make(\"volume\")\n    5 self.audioconvert2 = gst.element_factory_make(\n    6 \"audioconvert\")\n    7\n    8 self.fadeBin = gst.element_factory_make(\"bin\",\n    9 \"fadeBin\")\n    10 self.fadeBin.add(self.audioconvert,\n    11 self.volume,\n    12 self.audioconvert2)\n    13\n    14 gst.element_link_many(self.audioconvert,\n    15 self.volume,\n    16 self.audioconvert2)\n    17\n    18 # Create Ghost pads for fadeBin\n    19 sinkPad = self.audioconvert.get_pad(\"sink\")\n    20 self.fadeBinSink = gst.GhostPad(\"sink\", sinkPad)\n    21 self.fadeBinSrc = (\n    22 gst.GhostPad(\"src\", self.audioconvert2.get_pad(\"src\")) )\n    23\n    24 self.fadeBin.add_pad(self.fadeBinSink)\n    25 self.fadeBin.add_pad(self.fadeBinSrc)\n\n    ```", "```py\n    def gnonlin_pad_added(self, gnonlin_elem, pad):\n    caps = pad.get_caps()\n    compatible_pad = \\\n    self.fadeBin.get_compatible_pad(pad, caps)\n    pad.link(compatible_pad)\n\n    ```", "```py\n    python CombiningAudio.py\n\n    ```", "```py\n    1 def constructPipeline(self):\n    2 audio1_str = (\" filesrc location=%s ! \"\n    3 \"decodebin ! audioconvert ! \"\n    4 % (self.inFileLocation_1) )\n    5\n    6 audio2_str = ( \" filesrc location=%s \"\n    7 \"! decodebin ! audioconvert ! \"\n    8 %(self.inFileLocation_2) )\n    9\n    10 interleave_str = ( \"interleave name=mix ! \"\n    11 \" audioconvert ! lame ! \"\n    12 \" filesink location=%s\"%self.outFileLocation )\n    13\n    14 queue_str = \" ! queue ! mix.\"\n    15\n    16 myPipelineString = (\n    17 interleave_str + audio1_str + queue_str +\n    18 audio2_str + queue_str )\n    19\n    20 self.pipeline = gst.parse_launch(myPipelineString)\n\n    ```", "```py\n    $python AudioMixer.py\n\n    ```", "```py\n    class AudioPlayer:\n    def __init__(self):\n    pass\n    def connectSignals(self):\n    pass\n    def play(self):\n    pass\n    def message_handler(self, bus, message):\n    pass\n\n    ```", "```py\n    1 def __init__(self):\n    2 self.is_playing = False\n    3 inFileLocation = \"C:/AudioFiles/audio1.mp3\"\n    4\n    5 #Create a playbin element\n    6 self.player = gst.element_factory_make(\"playbin\")\n    7\n    8 # Create the audio visualization element.\n    9 self.monoscope = gst.element_factory_make(\"monoscope\")\n    10 self.player.set_property(\"uri\",\n    11 \"file:///\" + inFileLocation)\n    12 self.player.set_property(\"vis-plugin\", self.monoscope)\n    13 self.connectSignals()\n\n    ```", "```py\n    $python MusicVisualizer.py\n\n    ```"]