- en: Chapter 25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Definite Loops
  prefs: []
  type: TYPE_NORMAL
- en: 25.1 The for statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 24](chapter24.html), as you certainly noticed, the while statement
    was used to iterate for both a known number and an unknown number of times (in
    situations where the number of iterations was not known at the time the loop started
    iterating). In other words, the while statement was used to create both definite
    and indefinite loops.
  prefs: []
  type: TYPE_NORMAL
- en: Since definite loops are so frequently used in computer programming, almost
    every computer language, including Python, incorporates a special statement that
    is notably more readable and convenient than the while statement—and this is the
    for statement.
  prefs: []
  type: TYPE_NORMAL
- en: The general form of the for statement, is
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: where element is a variable that is assigned each successive value of sequence,
    and the statement or block of statements of the structure is executed once for
    each value.
  prefs: []
  type: TYPE_NORMAL
- en: The flowchart of the Python's for statement is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter25-01.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice, however, that this book uses a simplified flowchart, which
    is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter25-02.png)'
  prefs: []
  type: TYPE_IMG
- en: The following example displays the numbers 1, 2, 3, 4, and 5.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1a'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in [1, 2, 3, 4, 5]:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: Its corresponding flowchart is shown here
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter25-03.png)
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays the letters “H”, “e”, “l”, “l”, and “o” (all
    without the double quotes).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1b'
  prefs: []
  type: TYPE_NORMAL
- en: 'for letter in "Hello":'
  prefs: []
  type: TYPE_NORMAL
- en: print(letter)
  prefs: []
  type: TYPE_NORMAL
- en: Its corresponding flowchart is shown here
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter25-04.png)
  prefs: []
  type: TYPE_NORMAL
- en: As you learned in [Section 11.2](chapter11.html#toc_2), the Python's range()
    function can be used to create a sequence of integers. You can use this function
    along with the for statement, to expand the possibilities of the for statement
    as shown here
  prefs: []
  type: TYPE_NORMAL
- en: 'for counter in range([initial_value,] final_value [, step ]):'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►counter is a variable of type integer.
  prefs: []
  type: TYPE_NORMAL
- en: ►initial_value is the starting value of the sequence. This argument is optional.
    If omitted, its default value is 0.
  prefs: []
  type: TYPE_NORMAL
- en: ►the sequence is up to, but not including, final_value.
  prefs: []
  type: TYPE_NORMAL
- en: ►step is the difference between each number in the sequence. This argument is
    optional. If omitted, its default value is 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The arguments initial_value, final_value, and step must
    be integers. Negative values are also permitted.'
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays the numbers 0 to 10.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1c'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, 11, 1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: When step is 1, you can omit the third argument. The previous example can also
    be written as
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1d'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, 11):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, when initial value is 0, you can omit the first argument. The previous
    example can also be written as
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1e'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(11):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: The next example displays the numbers 2, 4, 6, 8, and 10.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1f'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, 12, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays even numbers from −2 to −10 using variables instead
    of constant values for initial_value, final_value, and step.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1g'
  prefs: []
  type: TYPE_NORMAL
- en: x1 = -2
  prefs: []
  type: TYPE_NORMAL
- en: x2 = -12
  prefs: []
  type: TYPE_NORMAL
- en: t = -2
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(x1, x2, t):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Don''t ever dare alter the value of counter (here i) inside
    the loop! The same applies to initial_value (here x1), final_value (here x2),
    and step (here t). This makes your code unreadable and could lead to incorrect
    results. If you insist, though, please use a while statement instead.'
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays the letters “H”, “e”, “l”, “l”, and “o” (all
    without the double quotes).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1h'
  prefs: []
  type: TYPE_NORMAL
- en: message = "Hello"
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(len(message)):'
  prefs: []
  type: TYPE_NORMAL
- en: print(message[i])
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The len() function returns the number of characters variable
    message consists of, whereas the message[i] notation returns the character located
    at the specified position (indicated by the variable i) in the string variable
    message (see [Section 14.3](chapter14.html#toc_3)).'
  prefs: []
  type: TYPE_NORMAL
- en: Just like Python's while statement, the for statement can also be combined with
    an else keyword as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 1
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 2
  prefs: []
  type: TYPE_NORMAL
- en: However, this unusual feature is rarely used in practice, so it will not be
    further discussed in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-1 Creating the Trace Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a trace table to determine the values of the variables in each step of
    the next Python program when the input value 1 is entered.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(-3, 5, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: a = a * 3
  prefs: []
  type: TYPE_NORMAL
- en: print(i, a)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The range() function returns the sequence −3, −1, 1, 3\. The for-loop assigns
    the values −3, −1, 1, and 3 to variable i, one value at each iteration. The corresponding
    trace table is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | i |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) |   | 1 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | i = ‑3 |   | 1 | −3 | 1^(st) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | a = a * 3 |   | 3 | −3 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | i = ‑1 |   | 3 | −1 | 2^(nd) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | a = a * 3 |   | 9 | −1 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | i = 1 |   | 9 | 1 | 3^(rd) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | a = a * 3 |   | 27 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | i = 3 |   | 27 | 3 | 4^(th) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | a = a * 3 |   | 81 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | print(i, a) | It displays: 3  81 |'
  prefs: []
  type: TYPE_TB
- en: Exercise 25.1-2 Creating the Trace Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a trace table to determine the values of the variables in each step of
    the next Python program when the input value 4 is entered.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(6, a - 1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The range() function returns the sequence 6, 5, 4\. Following is the trace table
    used to determine the values of the variables in each step.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | i |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) |   | 4 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | i = 6 |   | 4 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | print(i) | It displays: 6 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | i = 5 |   | 4 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | print(i) | It displays: 5 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | i = 4 |   | 4 | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | print(i) | It displays: 4 |'
  prefs: []
  type: TYPE_TB
- en: Exercise 25.1-3 Counting the Total Number of Iterations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Count the total number of iterations performed by the following code fragment
    for two different executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) 6, and (ii) 5.'
  prefs: []
  type: TYPE_NORMAL
- en: n = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(5, n + 1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: For the input value 6, the range() function returns a sequence that includes
    the numbers 5 and 6\. Thus, the loop performs two iterations.
  prefs: []
  type: TYPE_NORMAL
- en: Correspondingly, for the input value 5 the loop obviously performs only one
    iteration.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-4 Finding the Sum of Four Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter four numbers and then
    calculates and displays their sum.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Exercise 24.1-5](chapter24.html#toc_6), the solution proposed with a while
    statement was the following:'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 4:'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: It's now very easy to rewrite this using a for statement and have it display
    a prompt message before every data input.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-4'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(4):'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = float(input("Enter a number: "))'
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note the absence of the i += 1 statement inside the loop
    control structure. In a for statement, the counter (here variable i) automatically
    updates at the beginning of each loop iteration.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-5 Finding the Square Roots from 0 to N
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter an integer and then calculates
    and displays the square root of all integers from 0 to that user-provided integer.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This exercise is straightforward. The user enters an integer, and the program
    iterates as many times as indicated by that integer. The Python program is as
    follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-5'
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: 'n = int(input("Enter an integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(n + 1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(sqrt(i))
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-6 Finding the Sum of 1 + 2 + 3 + … + 100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Write a Python program that calculates and displays the following sum:'
  prefs: []
  type: TYPE_NORMAL
- en: S = 1 + 2 + 3 + … + 100
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: If you were to use a sequence control structure to solve this exercise, it would
    be something like the next code fragment.
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i
  prefs: []
  type: TYPE_NORMAL
- en: i = 2
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i
  prefs: []
  type: TYPE_NORMAL
- en: i = 3
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: i = 100
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i
  prefs: []
  type: TYPE_NORMAL
- en: Let's use a trace table to better understand it.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | i | s |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | s = 0 | 0 | ? | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | i = 1 |   | 1 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | s = s + i | 0 + 1 = 1 | 1 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | i = 2 |   | 2 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | s = s + i | 0 + 1 + 2 = 3 | 2 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | i = 3 |   | 3 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | s = s + i | 0 +1 + 2 + 3 = 6 | 3 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | i = 4 |   | 4 | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| ... | … |   | … | … |'
  prefs: []
  type: TYPE_TB
- en: '| ... | … |   | … | … |'
  prefs: []
  type: TYPE_TB
- en: '| 199 | i = 99 |   | 99 | 4851 |'
  prefs: []
  type: TYPE_TB
- en: '| 200 | s = s + i |   | 99 | 4950 |'
  prefs: []
  type: TYPE_TB
- en: '| 201 | i = 100 |   | 100 | 4950 |'
  prefs: []
  type: TYPE_TB
- en: '| 202 | s = s + i | 0 + 1 + 2 + 3 + …+ 99 + 100 = 5050 | 100 | 5050 |'
  prefs: []
  type: TYPE_TB
- en: Now that everything has been cleared up, you can do the same thing, this time
    using a for-loop which, in each iteration, assigns the values from 1 to 100 to
    variable i.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-6'
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 101):'
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-7 Finding the Product of 2 × 4 × 6 × 8 × 10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Write a Python program that calculates and displays the following product:'
  prefs: []
  type: TYPE_NORMAL
- en: P = 2 × 4 × 6 × 8 × 10
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Let's solve this exercise using the following sequence control structure. Variable
    p must be initialized to 1 instead of 0\. This is necessary for the statement
    p = p * i to operate properly; the final product would be zero otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: p = 1
  prefs: []
  type: TYPE_NORMAL
- en: i = 2
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  prefs: []
  type: TYPE_NORMAL
- en: i = 4
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  prefs: []
  type: TYPE_NORMAL
- en: i = 6
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  prefs: []
  type: TYPE_NORMAL
- en: i = 8
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  prefs: []
  type: TYPE_NORMAL
- en: i = 10
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  prefs: []
  type: TYPE_NORMAL
- en: As in the previous exercise ([Exercise 25.1-6](#toc_7)), this sequence control
    structure can be replaced by a for-loop, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-7'
  prefs: []
  type: TYPE_NORMAL
- en: p = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, 12, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  prefs: []
  type: TYPE_NORMAL
- en: print(p)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-8 Finding the Sum of 2² + 4² + 6² + … (2N)²
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Write a Python program that lets the user enter an integer N and then calculates
    and displays the following sum:'
  prefs: []
  type: TYPE_NORMAL
- en: S = 2² + 4² + 6² + … (2N)²
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, in each iteration the for-loop must assign the values 2, 4,
    6, … 2N to variable i and each of these values must be raised to the second power
    before being accumulated in variable s. The final Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-8'
  prefs: []
  type: TYPE_NORMAL
- en: N = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, 2 * N + 2, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i ** 2
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-9 Finding the Sum of 3³ + 6⁶ + 9⁹ + … (3N)^(3N)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Write a Python program that lets the user enter an integer N and then calculates
    and displays the following sum:'
  prefs: []
  type: TYPE_NORMAL
- en: S = 3³ + 6⁶ + 9⁹ + …+ (3N)^(3N)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This is pretty much the same as the previous exercise. The only difference is
    that variable i must be raised to the i^(th) power before it is accumulated in
    variable s. Using the for-loop, the final Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-9'
  prefs: []
  type: TYPE_NORMAL
- en: N = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3, 3 * N + 3, 3):'
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i ** i
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-10 Finding the Average Value of Positive Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter 100 numbers and then calculates
    and displays the average value of the positive numbers. Add all necessary checks
    to make the program satisfy the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Since you know the total number of iterations, you can use a for-loop. Inside
    the loop, however, a decision control structure must check whether or not the
    user-provided number is positive; if so, it must accumulate the user-provided
    number in variable s. The variable count counts the number of positive numbers
    entered. When the flow of execution exits the loop, the average value can then
    be calculated. The Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-10'
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: count = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(100):'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: s = s + x
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: count += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if count != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print(s / count)
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("No positive numbers entered!")
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The if count != 0 statement is necessary, because there
    is a possibility that the user may enter negative values (or zeros) only. By including
    this check, the program prevents any division-by-zero errors and thereby satisfies
    the property of definiteness.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-11 Counting the Vowels
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter a message and then counts
    and displays the number of vowels the message contains.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program counts the vowels in an English message.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-11'
  prefs: []
  type: TYPE_NORMAL
- en: 'message = input("Enter an English message: ")'
  prefs: []
  type: TYPE_NORMAL
- en: vowels = "AEIOU"
  prefs: []
  type: TYPE_NORMAL
- en: count = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for character in message:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if character.upper() in vowels:'
  prefs: []
  type: TYPE_NORMAL
- en: count += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Vowels:", count)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note the two ways the operator in is used here. In the first
    case it is used to determine the number of iterations, whereas in the second case
    it is used to check whether a letter exists in the string vowels (see [Section
    15.5](chapter15.html#toc_7)).'
  prefs: []
  type: TYPE_NORMAL
- en: 25.2 Rules that Apply to For-Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are certain rules you must always follow when writing programs with for-loops,
    since they can save you from undesirable side effects.
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 1: The var/counter variables can appear in a statement inside the for-loop
    but their value should never be altered. The same applies to final_value and step
    in case they are variables and not constant values.'
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 2: The step must never be zero. If it is set to zero, Python throws an
    error!'
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 3: If initial_value is smaller than final_value then, the step must be
    positive. If it is negative, the loop performs zero iterations. The following
    example prints nothing on the screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(5, 9, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind, though, that purposely violating this rule can be useful in certain
    situations.
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 4: If initial_value is greater than final_value then, the step must be
    negative. If it is positive, the loop performs zero iterations. The following
    example also prints nothing on the screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10, 6):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind, though, that purposely violating this rule can be useful in certain
    situations.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.2-1 Finding the Sum of N Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter N numbers and then calculates
    and displays their sum. The value of N must be provided by the user at the beginning
    of the program.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The solution is presented here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.2-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'n = int(input("Enter quantity of numbers to enter: "))'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(n):'
  prefs: []
  type: TYPE_NORMAL
- en: 'a = float(input("Enter number No" + str(i + 1) + ": "))'
  prefs: []
  type: TYPE_NORMAL
- en: total += a  #This is equivalent to total = total + a
  prefs: []
  type: TYPE_NORMAL
- en: print("Sum:", total)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Even though it violates the fourth rule of for-loops, in
    this particular exercise this situation is very useful. If the user enters a non-positive
    value for variable n, the for statement performs zero iterations.'
  prefs: []
  type: TYPE_NORMAL
- en: '25.3 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)In a for statement, the variable element is automatically assigned each successive
    value of sequence at the beginning of each loop.
  prefs: []
  type: TYPE_NORMAL
- en: 2)A definite loop can be used when the number of iterations is known.
  prefs: []
  type: TYPE_NORMAL
- en: 3)In a definite loop, the statement or block of statements of the loop is executed
    at least one time.
  prefs: []
  type: TYPE_NORMAL
- en: 4)In a range() function, the initial_value cannot be greater than the final_value.
  prefs: []
  type: TYPE_NORMAL
- en: 5)When flow of execution exits a for-loop, the value of counter is not equal
    to final_value.
  prefs: []
  type: TYPE_NORMAL
- en: 6)In a range() function, the value of initial_value, final_value and step cannot
    be a float.
  prefs: []
  type: TYPE_NORMAL
- en: 7)In a for statement with a range() function, when step is set to zero the loop
    performs zero iterations.
  prefs: []
  type: TYPE_NORMAL
- en: 8)In a for statement, the counter variable can appear in a statement inside
    the loop but its value should never be altered.
  prefs: []
  type: TYPE_NORMAL
- en: 9)In a for statement with a range() function,  the step can be zero for certain
    situations.
  prefs: []
  type: TYPE_NORMAL
- en: 10)In the following code fragment the word “Hello” is displayed 10 times.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 10):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  prefs: []
  type: TYPE_NORMAL
- en: 11)The following code fragment can always be executed.
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, 9, b):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  prefs: []
  type: TYPE_NORMAL
- en: 12)The following code fragment satisfies the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(-10, 10):'
  prefs: []
  type: TYPE_NORMAL
- en: print(sqrt(i))
  prefs: []
  type: TYPE_NORMAL
- en: '25.4 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)A definite loop that uses the for statement
  prefs: []
  type: TYPE_NORMAL
- en: a)executes one iteration more than the equivalent pre-test loop structure (that
    uses the while statement).
  prefs: []
  type: TYPE_NORMAL
- en: b)executes one iteration less than the equivalent pre-test loop structure (that
    uses the while statement).
  prefs: []
  type: TYPE_NORMAL
- en: c) none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 2)A definite loop that uses the for statement can be used in a problem in which
  prefs: []
  type: TYPE_NORMAL
- en: a)the user enters numbers repeatedly until the value −1 is entered.
  prefs: []
  type: TYPE_NORMAL
- en: b)the user enters numbers repeatedly until the value entered is greater than
    final_value.
  prefs: []
  type: TYPE_NORMAL
- en: c)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 3)In a for-loop initial_value, final_value, and step can be
  prefs: []
  type: TYPE_NORMAL
- en: a)a constant value.
  prefs: []
  type: TYPE_NORMAL
- en: b)a variable.
  prefs: []
  type: TYPE_NORMAL
- en: c)an expression.
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: 4)In a for-loop, when final_value and step are variables, their values
  prefs: []
  type: TYPE_NORMAL
- en: a)cannot change inside the loop.
  prefs: []
  type: TYPE_NORMAL
- en: b)should not change inside the loop.
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 5)In a for-loop, when counter increments, the step is
  prefs: []
  type: TYPE_NORMAL
- en: a)greater than zero.
  prefs: []
  type: TYPE_NORMAL
- en: b)equal to zero.
  prefs: []
  type: TYPE_NORMAL
- en: c)less than zero.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 6)In a for-loop, the initial value of counter
  prefs: []
  type: TYPE_NORMAL
- en: a)must be 0.
  prefs: []
  type: TYPE_NORMAL
- en: b)can be 0.
  prefs: []
  type: TYPE_NORMAL
- en: c)cannot be a negative one.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 7)In a for-loop, variable counter is automatically assigned each successive
    value of sequence
  prefs: []
  type: TYPE_NORMAL
- en: a)at the beginning of each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: b)at the end of each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: c)It is not assigned automatically.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 8)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(5, 6):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hera")
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Hera” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)5 times.
  prefs: []
  type: TYPE_NORMAL
- en: b)1 time.
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 9)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(5, 5):'
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Artemis")
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Artemis” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)1 time.
  prefs: []
  type: TYPE_NORMAL
- en: b)an infinite number of times.
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 10)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(5, 6):'
  prefs: []
  type: TYPE_NORMAL
- en: i = 6
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Ares")
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Ares” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)an infinite number of times.
  prefs: []
  type: TYPE_NORMAL
- en: b)1 time.
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 11)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, 9):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if i % 2 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Demeter")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the message “Hello Demeter” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)8 times.
  prefs: []
  type: TYPE_NORMAL
- en: b)7 times.
  prefs: []
  type: TYPE_NORMAL
- en: c)5 times.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 12)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(40, 51):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Dionysus")
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Dionysus” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)1 time.
  prefs: []
  type: TYPE_NORMAL
- en: b)2 times.
  prefs: []
  type: TYPE_NORMAL
- en: c)10 times.
  prefs: []
  type: TYPE_NORMAL
- en: d)11 times.
  prefs: []
  type: TYPE_NORMAL
- en: 13)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: k = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 7, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: k = k + i
  prefs: []
  type: TYPE_NORMAL
- en: print(k)
  prefs: []
  type: TYPE_NORMAL
- en: the value displayed is
  prefs: []
  type: TYPE_NORMAL
- en: a)3.
  prefs: []
  type: TYPE_NORMAL
- en: b)6.
  prefs: []
  type: TYPE_NORMAL
- en: c)9.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 14)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: k = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10, -15, -5):'
  prefs: []
  type: TYPE_NORMAL
- en: k = k + i
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: the value displayed is
  prefs: []
  type: TYPE_NORMAL
- en: a)0
  prefs: []
  type: TYPE_NORMAL
- en: b)−15.
  prefs: []
  type: TYPE_NORMAL
- en: c)−10.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 25.5 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: a = 0
  prefs: []
  type: TYPE_NORMAL
- en: b = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(0, 10, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if j < 5:'
  prefs: []
  type: TYPE_NORMAL
- en: b += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: a += j - 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(a, ",", b)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create a trace table to determine the values of the variables in each step
    of the next Python program for two different executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) 10, and (ii) 21.'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = a
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(a - 5, a + 1, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if j % 2 != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: b = a + j + 5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: b = a - j
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(b)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Create a trace table to determine the values of the variables in each step
    of the next Python program for the input value 12.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2, a, 3):'
  prefs: []
  type: TYPE_NORMAL
- en: x = j * 3 + 3
  prefs: []
  type: TYPE_NORMAL
- en: y = j * 2 + 10
  prefs: []
  type: TYPE_NORMAL
- en: 'if y - x > 0 or x > 30:'
  prefs: []
  type: TYPE_NORMAL
- en: y *= 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x += 4
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y)
  prefs: []
  type: TYPE_NORMAL
- en: 4)Fill in the gaps in the following code fragments so that all loops perform
    exactly five iterations.
  prefs: []
  type: TYPE_NORMAL
- en: i)
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(5, …… + 1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  prefs: []
  type: TYPE_NORMAL
- en: b += a
  prefs: []
  type: TYPE_NORMAL
- en: ii)
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(0, …… + 1, 5):'
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  prefs: []
  type: TYPE_NORMAL
- en: b += a
  prefs: []
  type: TYPE_NORMAL
- en: iii)
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(……, -16, -2):'
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  prefs: []
  type: TYPE_NORMAL
- en: b += a
  prefs: []
  type: TYPE_NORMAL
- en: iv)
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(-11, -16, ……):'
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  prefs: []
  type: TYPE_NORMAL
- en: b += a
  prefs: []
  type: TYPE_NORMAL
- en: 5)Without using a trace table, can you find out what the next Python program
    displays?
  prefs: []
  type: TYPE_NORMAL
- en: word = "Zeus"
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: s = ""
  prefs: []
  type: TYPE_NORMAL
- en: 'for letter in word:'
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i * letter
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: 6)Design a flowchart and write the corresponding Python program that prompts
    the user to enter 20 numbers and then calculates and displays their product and
    their average value.
  prefs: []
  type: TYPE_NORMAL
- en: 7)Write a Python program that calculates and displays the sine of all numbers
    from 0 to 360 ^ο, using a step of 0.5\. It is given that 2π = 360^ο.
  prefs: []
  type: TYPE_NORMAL
- en: 8)Write a Python program that prompts the user to enter a number in degrees
    and then calculates and displays the cosine of all numbers from 0 to that user-provided
    number, using a step of 1\. It is given that 2π = 360^ο.
  prefs: []
  type: TYPE_NORMAL
- en: '9)Write a Python program that calculates and displays the sum of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: S = 1 + 3 + 5 + … + 99
  prefs: []
  type: TYPE_NORMAL
- en: '10)Write a Python program that lets the user enter an integer N and then calculates
    and displays the product of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: P = 2¹ × 4³ × 6⁵ × … × 2N^((2N−1))
  prefs: []
  type: TYPE_NORMAL
- en: '11)Write a Python program that calculates and displays the sum of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: S = 1 + 2 + 4 + 7 + 11 + 16 + 22 + 29 + 37 + … + 191
  prefs: []
  type: TYPE_NORMAL
- en: 12)Design a flowchart and write the corresponding Python program that lets a
    teacher enter the total number of students as well as their grades and then calculates
    and displays the average value of those who got an “A”, that is 90 to 100\. Add
    all necessary checks to make the program satisfy the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: 13)Design a flowchart and write the corresponding Python program that prompts
    the user to enter 30 four-digit integers and then calculates and displays the
    sum of those with a first digit of 5 and a last digit of 3\. For example, values
    5003, 5923, and 5553 are all such integers.
  prefs: []
  type: TYPE_NORMAL
- en: 14)Design a flowchart and write the corresponding Python program that prompts
    the user to enter N integers and then displays the total number of those that
    are even. The value of N must be provided by the user at the beginning of the
    program. Moreover, if all user-provided integers are odd, the message “You entered
    no even integers” must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 15)Design a flowchart and write the corresponding Python program that prompts
    the user to enter 50 integers and then calculates and displays the average value
    of those that are odd and the average value of those that are even.
  prefs: []
  type: TYPE_NORMAL
- en: 16)Design a flowchart and write the corresponding Python program that prompts
    the user to enter two integers into variables start and finish and then displays
    all integers from start to finish. However, at the beginning the program must
    check if variable start is bigger than variable finish. If this happens, the program
    must swap their values so that they are always in the proper order.
  prefs: []
  type: TYPE_NORMAL
- en: 17)Design a flowchart and write the corresponding Python program that prompts
    the user to enter two integers into variables start and finish and then displays
    all integers from start to finish that are multiples of five. However, at the
    beginning the program must check if variable start is bigger than variable finish.
    If this happens, the program must swap their values so that they are always in
    the proper order.
  prefs: []
  type: TYPE_NORMAL
- en: 18)Write a Python program that prompts the user to enter a real and an integer
    and then displays the result of the first number raised to the power of the second
    number, without using either the exponentiation operator ( ** ) or even the built-in
    pow() function of Python.
  prefs: []
  type: TYPE_NORMAL
- en: 19)Write a Python program that prompts the user to enter a message and then
    displays the number of words it contains. For example, if the string entered is
    “My name is Bill Bouras”, the program must display “The message entered contains
    5 words”. Assume that the words are separated by a single space character.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Use the len() function to get the number of characters that the user-provided
    message contains.'
  prefs: []
  type: TYPE_NORMAL
- en: 20)Write a Python program that prompts the user to enter a message and then
    displays the average number of letters in each word. For example, if the message
    entered is “My name is Aphrodite Boura”, the program must display “The average
    number of letters in each word is 4.4”. Space characters must not be counted.
  prefs: []
  type: TYPE_NORMAL
- en: 21)Write a Python program that prompts the user to enter a message and then
    counts and displays the number of consonants the message contains.
  prefs: []
  type: TYPE_NORMAL
- en: 22)Write a Python program that prompts the user to enter a message and then
    counts and displays the number of vowels, the number of consonants, and the number
    of arithmetic characters the message contains.
  prefs: []
  type: TYPE_NORMAL
