- en: Chapter 25
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Definite Loops
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 25.1 The for statement
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 24](chapter24.html), as you certainly noticed, the while statement
    was used to iterate for both a known number and an unknown number of times (in
    situations where the number of iterations was not known at the time the loop started
    iterating). In other words, the while statement was used to create both definite
    and indefinite loops.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Since definite loops are so frequently used in computer programming, almost
    every computer language, including Python, incorporates a special statement that
    is notably more readable and convenient than the while statement—and this is the
    for statement.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: The general form of the for statement, is
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in sequence:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: where element is a variable that is assigned each successive value of sequence,
    and the statement or block of statements of the structure is executed once for
    each value.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The flowchart of the Python's for statement is shown here.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter25-01.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: You will notice, however, that this book uses a simplified flowchart, which
    is shown here.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter25-02.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: The following example displays the numbers 1, 2, 3, 4, and 5.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1a'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in [1, 2, 3, 4, 5]:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Its corresponding flowchart is shown here
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter25-03.png)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays the letters “H”, “e”, “l”, “l”, and “o” (all
    without the double quotes).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1b'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'for letter in "Hello":'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: print(letter)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Its corresponding flowchart is shown here
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter25-04.png)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: As you learned in [Section 11.2](chapter11.html#toc_2), the Python's range()
    function can be used to create a sequence of integers. You can use this function
    along with the for statement, to expand the possibilities of the for statement
    as shown here
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'for counter in range([initial_value,] final_value [, step ]):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: where
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: ►counter is a variable of type integer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: ►initial_value is the starting value of the sequence. This argument is optional.
    If omitted, its default value is 0.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: ►the sequence is up to, but not including, final_value.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: ►step is the difference between each number in the sequence. This argument is
    optional. If omitted, its default value is 1.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The arguments initial_value, final_value, and step must
    be integers. Negative values are also permitted.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays the numbers 0 to 10.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1c'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, 11, 1):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: When step is 1, you can omit the third argument. The previous example can also
    be written as
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1d'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, 11):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, when initial value is 0, you can omit the first argument. The previous
    example can also be written as
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1e'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(11):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: The next example displays the numbers 2, 4, 6, 8, and 10.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1f'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, 12, 2):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays even numbers from −2 to −10 using variables instead
    of constant values for initial_value, final_value, and step.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1g'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: x1 = -2
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: x2 = -12
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: t = -2
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(x1, x2, t):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Don''t ever dare alter the value of counter (here i) inside
    the loop! The same applies to initial_value (here x1), final_value (here x2),
    and step (here t). This makes your code unreadable and could lead to incorrect
    results. If you insist, though, please use a while statement instead.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays the letters “H”, “e”, “l”, “l”, and “o” (all
    without the double quotes).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1h'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: message = "Hello"
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(len(message)):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: print(message[i])
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The len() function returns the number of characters variable
    message consists of, whereas the message[i] notation returns the character located
    at the specified position (indicated by the variable i) in the string variable
    message (see [Section 14.3](chapter14.html#toc_3)).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Just like Python's while statement, the for statement can also be combined with
    an else keyword as shown here.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in sequence:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 1
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 2
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: However, this unusual feature is rarely used in practice, so it will not be
    further discussed in this book.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-1 Creating the Trace Table
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a trace table to determine the values of the variables in each step of
    the next Python program when the input value 1 is entered.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(-3, 5, 2):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: a = a * 3
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: print(i, a)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: The range() function returns the sequence −3, −1, 1, 3\. The for-loop assigns
    the values −3, −1, 1, and 3 to variable i, one value at each iteration. The corresponding
    trace table is shown here.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | i |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) |   | 1 | ? |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: '| 2 | i = ‑3 |   | 1 | −3 | 1^(st) | iteration |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
- en: '| 3 | a = a * 3 |   | 3 | −3 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
- en: '| 4 | i = ‑1 |   | 3 | −1 | 2^(nd) | iteration |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
- en: '| 5 | a = a * 3 |   | 9 | −1 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
- en: '| 6 | i = 1 |   | 9 | 1 | 3^(rd) | iteration |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
- en: '| 7 | a = a * 3 |   | 27 | 1 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
- en: '| 8 | i = 3 |   | 27 | 3 | 4^(th) | iteration |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: '| 9 | a = a * 3 |   | 81 | 3 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
- en: '| 10 | print(i, a) | It displays: 3  81 |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
- en: Exercise 25.1-2 Creating the Trace Table
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a trace table to determine the values of the variables in each step of
    the next Python program when the input value 4 is entered.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(6, a - 1, -1):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: The range() function returns the sequence 6, 5, 4\. Following is the trace table
    used to determine the values of the variables in each step.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | i |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) |   | 4 | ? |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
- en: '| 2 | i = 6 |   | 4 | 6 |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
- en: '| 3 | print(i) | It displays: 6 |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
- en: '| 4 | i = 5 |   | 4 | 5 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
- en: '| 5 | print(i) | It displays: 5 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
- en: '| 6 | i = 4 |   | 4 | 4 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
- en: '| 7 | print(i) | It displays: 4 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
- en: Exercise 25.1-3 Counting the Total Number of Iterations
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Count the total number of iterations performed by the following code fragment
    for two different executions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) 6, and (ii) 5.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: n = int(input())
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(5, n + 1):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: For the input value 6, the range() function returns a sequence that includes
    the numbers 5 and 6\. Thus, the loop performs two iterations.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Correspondingly, for the input value 5 the loop obviously performs only one
    iteration.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-4 Finding the Sum of Four Numbers
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter four numbers and then
    calculates and displays their sum.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Exercise 24.1-5](chapter24.html#toc_6), the solution proposed with a while
    statement was the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 4:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: It's now very easy to rewrite this using a for statement and have it display
    a prompt message before every data input.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-4'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(4):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'x = float(input("Enter a number: "))'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note the absence of the i += 1 statement inside the loop
    control structure. In a for statement, the counter (here variable i) automatically
    updates at the beginning of each loop iteration.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-5 Finding the Square Roots from 0 to N
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter an integer and then calculates
    and displays the square root of all integers from 0 to that user-provided integer.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: This exercise is straightforward. The user enters an integer, and the program
    iterates as many times as indicated by that integer. The Python program is as
    follows.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-5'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'n = int(input("Enter an integer: "))'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(n + 1):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: print(sqrt(i))
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-6 Finding the Sum of 1 + 2 + 3 + … + 100
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Write a Python program that calculates and displays the following sum:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: S = 1 + 2 + 3 + … + 100
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: If you were to use a sequence control structure to solve this exercise, it would
    be something like the next code fragment.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: i = 2
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: i = 3
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: …
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: …
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: i = 100
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Let's use a trace table to better understand it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | i | s |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
- en: '| 1 | s = 0 | 0 | ? | 0 |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: '| 2 | i = 1 |   | 1 | 0 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| 3 | s = s + i | 0 + 1 = 1 | 1 | 1 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| 4 | i = 2 |   | 2 | 1 |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| 5 | s = s + i | 0 + 1 + 2 = 3 | 2 | 3 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '| 6 | i = 3 |   | 3 | 3 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: '| 7 | s = s + i | 0 +1 + 2 + 3 = 6 | 3 | 6 |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
- en: '| 8 | i = 4 |   | 4 | 6 |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
- en: '| ... | … |   | … | … |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
- en: '| ... | … |   | … | … |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
- en: '| 199 | i = 99 |   | 99 | 4851 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
- en: '| 200 | s = s + i |   | 99 | 4950 |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
- en: '| 201 | i = 100 |   | 100 | 4950 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
- en: '| 202 | s = s + i | 0 + 1 + 2 + 3 + …+ 99 + 100 = 5050 | 100 | 5050 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
- en: Now that everything has been cleared up, you can do the same thing, this time
    using a for-loop which, in each iteration, assigns the values from 1 to 100 to
    variable i.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-6'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 101):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-7 Finding the Product of 2 × 4 × 6 × 8 × 10
  id: totrans-179
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Write a Python program that calculates and displays the following product:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: P = 2 × 4 × 6 × 8 × 10
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Let's solve this exercise using the following sequence control structure. Variable
    p must be initialized to 1 instead of 0\. This is necessary for the statement
    p = p * i to operate properly; the final product would be zero otherwise.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: p = 1
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: i = 2
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: i = 4
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: i = 6
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: i = 8
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: i = 10
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: As in the previous exercise ([Exercise 25.1-6](#toc_7)), this sequence control
    structure can be replaced by a for-loop, as follows.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-7'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: p = 1
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, 12, 2):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: p = p * i
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: print(p)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-8 Finding the Sum of 2² + 4² + 6² + … (2N)²
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Write a Python program that lets the user enter an integer N and then calculates
    and displays the following sum:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: S = 2² + 4² + 6² + … (2N)²
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, in each iteration the for-loop must assign the values 2, 4,
    6, … 2N to variable i and each of these values must be raised to the second power
    before being accumulated in variable s. The final Python program is as follows.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-8'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: N = int(input())
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, 2 * N + 2, 2):'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i ** 2
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-9 Finding the Sum of 3³ + 6⁶ + 9⁹ + … (3N)^(3N)
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Write a Python program that lets the user enter an integer N and then calculates
    and displays the following sum:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: S = 3³ + 6⁶ + 9⁹ + …+ (3N)^(3N)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: This is pretty much the same as the previous exercise. The only difference is
    that variable i must be raised to the i^(th) power before it is accumulated in
    variable s. Using the for-loop, the final Python program is as follows.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-9'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: N = int(input())
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3, 3 * N + 3, 3):'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i ** i
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-10 Finding the Average Value of Positive Numbers
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter 100 numbers and then calculates
    and displays the average value of the positive numbers. Add all necessary checks
    to make the program satisfy the property of definiteness.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Since you know the total number of iterations, you can use a for-loop. Inside
    the loop, however, a decision control structure must check whether or not the
    user-provided number is positive; if so, it must accumulate the user-provided
    number in variable s. The variable count counts the number of positive numbers
    entered. When the flow of execution exits the loop, the average value can then
    be calculated. The Python program is as follows.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-10'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: count = 0
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(100):'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > 0:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: s = s + x
  id: totrans-233
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: count += 1
  id: totrans-234
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if count != 0:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: print(s / count)
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: print("No positive numbers entered!")
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The if count != 0 statement is necessary, because there
    is a possibility that the user may enter negative values (or zeros) only. By including
    this check, the program prevents any division-by-zero errors and thereby satisfies
    the property of definiteness.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.1-11 Counting the Vowels
  id: totrans-240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter a message and then counts
    and displays the number of vowels the message contains.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program counts the vowels in an English message.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.1-11'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'message = input("Enter an English message: ")'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: vowels = "AEIOU"
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: count = 0
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'for character in message:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'if character.upper() in vowels:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: count += 1
  id: totrans-250
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Vowels:", count)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note the two ways the operator in is used here. In the first
    case it is used to determine the number of iterations, whereas in the second case
    it is used to check whether a letter exists in the string vowels (see [Section
    15.5](chapter15.html#toc_7)).'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 25.2 Rules that Apply to For-Loops
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are certain rules you must always follow when writing programs with for-loops,
    since they can save you from undesirable side effects.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 1: The var/counter variables can appear in a statement inside the for-loop
    but their value should never be altered. The same applies to final_value and step
    in case they are variables and not constant values.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 2: The step must never be zero. If it is set to zero, Python throws an
    error!'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 3: If initial_value is smaller than final_value then, the step must be
    positive. If it is negative, the loop performs zero iterations. The following
    example prints nothing on the screen'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(5, 9, -1):'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind, though, that purposely violating this rule can be useful in certain
    situations.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 4: If initial_value is greater than final_value then, the step must be
    negative. If it is positive, the loop performs zero iterations. The following
    example also prints nothing on the screen'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10, 6):'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind, though, that purposely violating this rule can be useful in certain
    situations.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 25.2-1 Finding the Sum of N Numbers
  id: totrans-265
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter N numbers and then calculates
    and displays their sum. The value of N must be provided by the user at the beginning
    of the program.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: The solution is presented here.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_25.2-1'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'n = int(input("Enter quantity of numbers to enter: "))'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(n):'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: 'a = float(input("Enter number No" + str(i + 1) + ": "))'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: total += a  #This is equivalent to total = total + a
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: print("Sum:", total)
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Even though it violates the fourth rule of for-loops, in
    this particular exercise this situation is very useful. If the user enters a non-positive
    value for variable n, the for statement performs zero iterations.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '25.3 Review Questions: True/False'
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 1)In a for statement, the variable element is automatically assigned each successive
    value of sequence at the beginning of each loop.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: 2)A definite loop can be used when the number of iterations is known.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: 3)In a definite loop, the statement or block of statements of the loop is executed
    at least one time.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: 4)In a range() function, the initial_value cannot be greater than the final_value.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 5)When flow of execution exits a for-loop, the value of counter is not equal
    to final_value.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: 6)In a range() function, the value of initial_value, final_value and step cannot
    be a float.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 7)In a for statement with a range() function, when step is set to zero the loop
    performs zero iterations.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 8)In a for statement, the counter variable can appear in a statement inside
    the loop but its value should never be altered.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 9)In a for statement with a range() function,  the step can be zero for certain
    situations.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: 10)In the following code fragment the word “Hello” is displayed 10 times.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 10):'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 11)The following code fragment can always be executed.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, 9, b):'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: 12)The following code fragment satisfies the property of definiteness.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(-10, 10):'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: print(sqrt(i))
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '25.4 Review Questions: Multiple Choice'
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: 1)A definite loop that uses the for statement
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: a)executes one iteration more than the equivalent pre-test loop structure (that
    uses the while statement).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: b)executes one iteration less than the equivalent pre-test loop structure (that
    uses the while statement).
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: c) none of the above
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 2)A definite loop that uses the for statement can be used in a problem in which
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: a)the user enters numbers repeatedly until the value −1 is entered.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: b)the user enters numbers repeatedly until the value entered is greater than
    final_value.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: c)all of the above
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: 3)In a for-loop initial_value, final_value, and step can be
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: a)a constant value.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: b)a variable.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: c)an expression.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: 4)In a for-loop, when final_value and step are variables, their values
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: a)cannot change inside the loop.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: b)should not change inside the loop.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: 5)In a for-loop, when counter increments, the step is
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: a)greater than zero.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: b)equal to zero.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: c)less than zero.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 6)In a for-loop, the initial value of counter
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: a)must be 0.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: b)can be 0.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: c)cannot be a negative one.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: 7)In a for-loop, variable counter is automatically assigned each successive
    value of sequence
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: a)at the beginning of each iteration.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: b)at the end of each iteration.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: c)It is not assigned automatically.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: 8)In the following code fragment
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(5, 6):'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hera")
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Hera” is displayed
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: a)5 times.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: b)1 time.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: 9)In the following code fragment
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(5, 5):'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Artemis")
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Artemis” is displayed
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: a)1 time.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: b)an infinite number of times.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: 10)In the following code fragment
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(5, 6):'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: i = 6
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Ares")
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Ares” is displayed
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: a)an infinite number of times.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: b)1 time.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: 11)In the following code fragment
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, 9):'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: 'if i % 2 == 0:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Demeter")
  id: totrans-364
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the message “Hello Demeter” is displayed
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: a)8 times.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: b)7 times.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: c)5 times.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: 12)In the following code fragment
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(40, 51):'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Dionysus")
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Dionysus” is displayed
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: a)1 time.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: b)2 times.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: c)10 times.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: d)11 times.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: 13)In the following code fragment
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: k = 0
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 7, 2):'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: k = k + i
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: print(k)
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: the value displayed is
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: a)3.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: b)6.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: c)9.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: 14)In the following code fragment
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: k = 0
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10, -15, -5):'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: k = k + i
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: the value displayed is
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: a)0
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: b)−15.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: c)−10.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: 25.5 Review Exercises
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: 1)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: a = 0
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: b = 0
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(0, 10, 2):'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: 'if j < 5:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: b += 1
  id: totrans-405
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: a += j - 1
  id: totrans-407
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(a, ",", b)
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create a trace table to determine the values of the variables in each step
    of the next Python program for two different executions.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) 10, and (ii) 21.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: b = a
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(a - 5, a + 1, 2):'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: 'if j % 2 != 0:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: b = a + j + 5
  id: totrans-415
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: b = a - j
  id: totrans-417
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(b)
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: 3)Create a trace table to determine the values of the variables in each step
    of the next Python program for the input value 12.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2, a, 3):'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: x = j * 3 + 3
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: y = j * 2 + 10
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: 'if y - x > 0 or x > 30:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: y *= 2
  id: totrans-425
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x += 4
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y)
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: 4)Fill in the gaps in the following code fragments so that all loops perform
    exactly five iterations.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: i)
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(5, …… + 1):'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: b += a
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: ii)
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(0, …… + 1, 5):'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: b += a
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: iii)
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(……, -16, -2):'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: b += a
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: iv)
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(-11, -16, ……):'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: b += a
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: 5)Without using a trace table, can you find out what the next Python program
    displays?
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: word = "Zeus"
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: s = ""
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: 'for letter in word:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i * letter
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: 6)Design a flowchart and write the corresponding Python program that prompts
    the user to enter 20 numbers and then calculates and displays their product and
    their average value.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: 7)Write a Python program that calculates and displays the sine of all numbers
    from 0 to 360 ^ο, using a step of 0.5\. It is given that 2π = 360^ο.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: 8)Write a Python program that prompts the user to enter a number in degrees
    and then calculates and displays the cosine of all numbers from 0 to that user-provided
    number, using a step of 1\. It is given that 2π = 360^ο.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: '9)Write a Python program that calculates and displays the sum of the following:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: S = 1 + 3 + 5 + … + 99
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: '10)Write a Python program that lets the user enter an integer N and then calculates
    and displays the product of the following:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 10) 编写一个 Python 程序，允许用户输入一个整数 N，然后计算并显示以下乘积：
- en: P = 2¹ × 4³ × 6⁵ × … × 2N^((2N−1))
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: P = 2¹ × 4³ × 6⁵ × … × 2N^((2N−1))
- en: '11)Write a Python program that calculates and displays the sum of the following:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 11) 编写一个 Python 程序，计算并显示以下数列的和：
- en: S = 1 + 2 + 4 + 7 + 11 + 16 + 22 + 29 + 37 + … + 191
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: S = 1 + 2 + 4 + 7 + 11 + 16 + 22 + 29 + 37 + … + 191
- en: 12)Design a flowchart and write the corresponding Python program that lets a
    teacher enter the total number of students as well as their grades and then calculates
    and displays the average value of those who got an “A”, that is 90 to 100\. Add
    all necessary checks to make the program satisfy the property of definiteness.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 12) 设计一个流程图并编写相应的 Python 程序，允许教师输入学生的总数以及他们的成绩，然后计算并显示那些获得“A”（即 90 到 100 分）的平均值。添加所有必要的检查，以确保程序满足确定性的属性。
- en: 13)Design a flowchart and write the corresponding Python program that prompts
    the user to enter 30 four-digit integers and then calculates and displays the
    sum of those with a first digit of 5 and a last digit of 3\. For example, values
    5003, 5923, and 5553 are all such integers.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 13) 设计一个流程图并编写相应的 Python 程序，提示用户输入 30 个四位数整数，然后计算并显示那些首位为 5 且末位为 3 的整数的总和。例如，值
    5003、5923 和 5553 都是此类整数。
- en: 14)Design a flowchart and write the corresponding Python program that prompts
    the user to enter N integers and then displays the total number of those that
    are even. The value of N must be provided by the user at the beginning of the
    program. Moreover, if all user-provided integers are odd, the message “You entered
    no even integers” must be displayed.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 14) 设计一个流程图并编写相应的 Python 程序，提示用户输入 N 个整数，然后显示其中偶数的总数。程序开始时必须由用户提供 N 的值。此外，如果用户提供的所有整数都是奇数，则必须显示消息“您没有输入任何偶数整数”。
- en: 15)Design a flowchart and write the corresponding Python program that prompts
    the user to enter 50 integers and then calculates and displays the average value
    of those that are odd and the average value of those that are even.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 15) 设计一个流程图并编写相应的 Python 程序，提示用户输入 50 个整数，然后计算并显示奇数的平均值和偶数的平均值。
- en: 16)Design a flowchart and write the corresponding Python program that prompts
    the user to enter two integers into variables start and finish and then displays
    all integers from start to finish. However, at the beginning the program must
    check if variable start is bigger than variable finish. If this happens, the program
    must swap their values so that they are always in the proper order.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 16) 设计一个流程图并编写相应的 Python 程序，提示用户将两个整数分别输入到变量 start 和 finish 中，然后显示从 start 到
    finish 的所有整数。然而，在程序开始时，必须检查变量 start 是否大于变量 finish。如果发生这种情况，程序必须交换它们的值，以确保它们始终处于正确的顺序。
- en: 17)Design a flowchart and write the corresponding Python program that prompts
    the user to enter two integers into variables start and finish and then displays
    all integers from start to finish that are multiples of five. However, at the
    beginning the program must check if variable start is bigger than variable finish.
    If this happens, the program must swap their values so that they are always in
    the proper order.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 17) 设计一个流程图并编写相应的 Python 程序，提示用户将两个整数分别输入到变量 start 和 finish 中，然后显示从 start 到
    finish 的所有是 5 的倍数的整数。然而，在程序开始时，必须检查变量 start 是否大于变量 finish。如果发生这种情况，程序必须交换它们的值，以确保它们始终处于正确的顺序。
- en: 18)Write a Python program that prompts the user to enter a real and an integer
    and then displays the result of the first number raised to the power of the second
    number, without using either the exponentiation operator ( ** ) or even the built-in
    pow() function of Python.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 18) 编写一个 Python 程序，提示用户输入一个实数和一个整数，然后显示第一个数以第二个数为指数的结果，而不使用指数运算符（**）或 Python
    的内置 pow() 函数。
- en: 19)Write a Python program that prompts the user to enter a message and then
    displays the number of words it contains. For example, if the string entered is
    “My name is Bill Bouras”, the program must display “The message entered contains
    5 words”. Assume that the words are separated by a single space character.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 19) 编写一个 Python 程序，提示用户输入一条消息，然后显示它包含的单词数量。例如，如果输入的字符串是“我的名字是比尔·博拉斯”，程序必须显示“输入的消息包含
    5 个单词”。假设单词由单个空格字符分隔。
- en: 'Hint: Use the len() function to get the number of characters that the user-provided
    message contains.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：使用 len() 函数获取用户提供的消息包含的字符数。
- en: 20)Write a Python program that prompts the user to enter a message and then
    displays the average number of letters in each word. For example, if the message
    entered is “My name is Aphrodite Boura”, the program must display “The average
    number of letters in each word is 4.4”. Space characters must not be counted.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: 21)Write a Python program that prompts the user to enter a message and then
    counts and displays the number of consonants the message contains.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: 22)Write a Python program that prompts the user to enter a message and then
    counts and displays the number of vowels, the number of consonants, and the number
    of arithmetic characters the message contains.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
