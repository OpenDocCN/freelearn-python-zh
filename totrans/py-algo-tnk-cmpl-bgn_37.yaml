- en: Chapter 25
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第25章
- en: Definite Loops
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 确定循环
- en: 25.1 The for statement
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 25.1 for语句
- en: In [Chapter 24](chapter24.html), as you certainly noticed, the while statement
    was used to iterate for both a known number and an unknown number of times (in
    situations where the number of iterations was not known at the time the loop started
    iterating). In other words, the while statement was used to create both definite
    and indefinite loops.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第24章](chapter24.html)中，你肯定注意到了，while语句被用来迭代已知次数和未知次数（在循环开始迭代时迭代次数未知的情况下）。换句话说，while语句被用来创建确定性和非确定性循环。
- en: Since definite loops are so frequently used in computer programming, almost
    every computer language, including Python, incorporates a special statement that
    is notably more readable and convenient than the while statement—and this is the
    for statement.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于确定循环在计算机编程中非常常用，几乎每种计算机语言，包括Python，都包含一个比while语句更易读、更方便的特殊语句——这就是for语句。
- en: The general form of the for statement, is
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: for语句的一般形式是
- en: 'for element in sequence:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 'for element in sequence:'
- en: A statement or block of statements
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: where element is a variable that is assigned each successive value of sequence,
    and the statement or block of statements of the structure is executed once for
    each value.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 其中element是一个变量，它被分配给序列的每个连续值，并且结构语句或语句块对每个值执行一次。
- en: The flowchart of the Python's for statement is shown here.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python的for语句的流程图如下所示。
- en: '![Image](img/chapter25-01.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter25-01.png)'
- en: You will notice, however, that this book uses a simplified flowchart, which
    is shown here.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你会发现，这本书使用了一个简化的流程图，如下所示。
- en: '![Image](img/chapter25-02.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter25-02.png)'
- en: The following example displays the numbers 1, 2, 3, 4, and 5.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例显示了数字1, 2, 3, 4和5。
- en: '![](img/my_exercise_header.png) file_25.1a'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1a'
- en: 'for i in [1, 2, 3, 4, 5]:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in [1, 2, 3, 4, 5]:'
- en: print(i)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: Its corresponding flowchart is shown here
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它对应的流程图如下所示
- en: .![Image](img/chapter25-03.png)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter25-03.png)
- en: The following example displays the letters “H”, “e”, “l”, “l”, and “o” (all
    without the double quotes).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例显示了字母“H”，“e”，“l”，“l”，“o”（所有都不带双引号）。
- en: '![](img/my_exercise_header.png) file_25.1b'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1b'
- en: 'for letter in "Hello":'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'for letter in "Hello":'
- en: print(letter)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: print(letter)
- en: Its corresponding flowchart is shown here
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它对应的流程图如下所示
- en: .![Image](img/chapter25-04.png)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter25-04.png)
- en: As you learned in [Section 11.2](chapter11.html#toc_2), the Python's range()
    function can be used to create a sequence of integers. You can use this function
    along with the for statement, to expand the possibilities of the for statement
    as shown here
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在[第11.2节](chapter11.html#toc_2)中学到的，Python的range()函数可以用来创建整数序列。你可以使用此函数与for语句一起使用，以扩展for语句的可能性，如下所示
- en: 'for counter in range([initial_value,] final_value [, step ]):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'for counter in range([初始值,] 最终值 [, 步长]):'
- en: A statement or block of statements
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: where
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►counter is a variable of type integer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: ►counter是一个整型变量。
- en: ►initial_value is the starting value of the sequence. This argument is optional.
    If omitted, its default value is 0.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ►初始值是序列的起始值。此参数是可选的。如果省略，其默认值是0。
- en: ►the sequence is up to, but not including, final_value.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ►序列直到但不包括最终值。
- en: ►step is the difference between each number in the sequence. This argument is
    optional. If omitted, its default value is 1.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ►步长是序列中每个数字之间的差值。此参数是可选的。如果省略，其默认值是1。
- en: '![](img/remember.jpg)The arguments initial_value, final_value, and step must
    be integers. Negative values are also permitted.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)初始值、最终值和步长参数必须是整数。也允许使用负值。'
- en: The following example displays the numbers 0 to 10.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例显示了数字0到10。
- en: '![](img/my_exercise_header.png) file_25.1c'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1c'
- en: 'for i in range(0, 11, 1):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(0, 11, 1):'
- en: print(i)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: When step is 1, you can omit the third argument. The previous example can also
    be written as
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当步长为1时，可以省略第三个参数。上一个示例也可以写成
- en: '![](img/my_exercise_header.png) file_25.1d'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1d'
- en: 'for i in range(0, 11):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(0, 11):'
- en: print(i)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: Moreover, when initial value is 0, you can omit the first argument. The previous
    example can also be written as
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当初始值为0时，可以省略第一个参数。上一个示例也可以写成
- en: '![](img/my_exercise_header.png) file_25.1e'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1e'
- en: 'for i in range(11):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(11):'
- en: print(i)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: The next example displays the numbers 2, 4, 6, 8, and 10.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例显示了数字2, 4, 6, 8和10。
- en: '![](img/my_exercise_header.png) file_25.1f'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_25.1f'
- en: 'for i in range(2, 12, 2):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(2, 12, 2):'
- en: print(i)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: The following example displays even numbers from −2 to −10 using variables instead
    of constant values for initial_value, final_value, and step.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示从-2到-10的偶数，使用变量而不是常量值作为初始值、最终值和步长。
- en: '![](img/my_exercise_header.png) file_25.1g'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_25.1g'
- en: x1 = -2
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: x1 = -2
- en: x2 = -12
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: x2 = -12
- en: t = -2
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: t = -2
- en: 'for i in range(x1, x2, t):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(x1, x2, t):'
- en: print(i)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: '![](img/notice.jpg)Don''t ever dare alter the value of counter (here i) inside
    the loop! The same applies to initial_value (here x1), final_value (here x2),
    and step (here t). This makes your code unreadable and could lead to incorrect
    results. If you insist, though, please use a while statement instead.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)永远不要在循环内部更改计数器（此处为i）的值！同样适用于初始值（此处为x1）、最终值（此处为x2）和步长（此处为t）。这会使你的代码难以阅读，并可能导致结果错误。尽管如此，如果你坚持这样做，请使用while语句。'
- en: The following example displays the letters “H”, “e”, “l”, “l”, and “o” (all
    without the double quotes).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示字母“H”，“e”，“l”，“l”，“o”（所有都不带双引号）。
- en: '![](img/my_exercise_header.png) file_25.1h'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_25.1h'
- en: message = "Hello"
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: message = "Hello"
- en: 'for i in range(len(message)):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(len(message)):'
- en: print(message[i])
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: print(message[i])
- en: '![](img/remember.jpg)The len() function returns the number of characters variable
    message consists of, whereas the message[i] notation returns the character located
    at the specified position (indicated by the variable i) in the string variable
    message (see [Section 14.3](chapter14.html#toc_3)).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![记住](img/remember.jpg)len()函数返回变量message包含的字符数，而message[i]表示法返回字符串变量message中指定位置（由变量i指示）的字符（参见[第14.3节](chapter14.html#toc_3)）。'
- en: Just like Python's while statement, the for statement can also be combined with
    an else keyword as shown here.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Python的while语句一样，for语句也可以与else关键字结合使用，如下所示。
- en: 'for element in sequence:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'for element in sequence:'
- en: A statement or block of statements 1
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块 1
- en: 'else:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: A statement or block of statements 2
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块 2
- en: However, this unusual feature is rarely used in practice, so it will not be
    further discussed in this book.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个不寻常的特性在实践中很少使用，所以本书中不会进一步讨论。
- en: Exercise 25.1-1 Creating the Trace Table
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习25.1-1 创建跟踪表
- en: Create a trace table to determine the values of the variables in each step of
    the next Python program when the input value 1 is entered.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个跟踪表以确定在输入值1时，下一个Python程序每一步中变量的值。
- en: a = int(input())
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: 'for i in range(-3, 5, 2):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(-3, 5, 2):'
- en: a = a * 3
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: a = a * 3
- en: print(i, a)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: print(i, a)
- en: Solution
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The range() function returns the sequence −3, −1, 1, 3\. The for-loop assigns
    the values −3, −1, 1, and 3 to variable i, one value at each iteration. The corresponding
    trace table is shown here.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: range()函数返回序列-3, -1, 1, 3。for循环将-3, -1, 1, 3的值分别赋给变量i，每个迭代一个值。相应的跟踪表如下所示。
- en: '| Step | Statement | Notes | a | i |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | a | i |'
- en: '| 1 | a = int(input()) |   | 1 | ? |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = int(input()) |   | 1 | ? |'
- en: '| 2 | i = ‑3 |   | 1 | −3 | 1^(st) | iteration |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 2 | i = −3 |   | 1 | −3 | 1^(st) | 迭代 |'
- en: '| 3 | a = a * 3 |   | 3 | −3 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 3 | a = a * 3 |   | 3 | −3 |'
- en: '| 4 | i = ‑1 |   | 3 | −1 | 2^(nd) | iteration |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 4 | i = −1 |   | 3 | −1 | 2^(nd) | 迭代 |'
- en: '| 5 | a = a * 3 |   | 9 | −1 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 5 | a = a * 3 |   | 9 | −1 |'
- en: '| 6 | i = 1 |   | 9 | 1 | 3^(rd) | iteration |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 6 | i = 1 |   | 9 | 1 | 3^(rd) | 迭代 |'
- en: '| 7 | a = a * 3 |   | 27 | 1 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 7 | a = a * 3 |   | 27 | 1 |'
- en: '| 8 | i = 3 |   | 27 | 3 | 4^(th) | iteration |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 8 | i = 3 |   | 27 | 3 | 4^(th) | 迭代 |'
- en: '| 9 | a = a * 3 |   | 81 | 3 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 9 | a = a * 3 |   | 81 | 3 |'
- en: '| 10 | print(i, a) | It displays: 3  81 |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 10 | print(i, a) | 它显示：3  81 |'
- en: Exercise 25.1-2 Creating the Trace Table
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习25.1-2 创建跟踪表
- en: Create a trace table to determine the values of the variables in each step of
    the next Python program when the input value 4 is entered.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个跟踪表以确定在输入值4时，下一个Python程序每一步中变量的值。
- en: a = int(input())
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: 'for i in range(6, a - 1, -1):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(6, a - 1, -1):'
- en: print(i)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: Solution
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The range() function returns the sequence 6, 5, 4\. Following is the trace table
    used to determine the values of the variables in each step.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: range()函数返回序列6, 5, 4。以下是用以确定每一步中变量值的跟踪表。
- en: '| Step | Statement | Notes | a | i |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | a | i |'
- en: '| 1 | a = int(input()) |   | 4 | ? |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = int(input()) |   | 4 | ? |'
- en: '| 2 | i = 6 |   | 4 | 6 |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 2 | i = 6 |   | 4 | 6 |'
- en: '| 3 | print(i) | It displays: 6 |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 3 | print(i) | 它显示：6 |'
- en: '| 4 | i = 5 |   | 4 | 5 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 4 | i = 5 |   | 4 | 5 |'
- en: '| 5 | print(i) | It displays: 5 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 5 | print(i) | 它显示：5 |'
- en: '| 6 | i = 4 |   | 4 | 4 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 6 | i = 4 |   | 4 | 4 |'
- en: '| 7 | print(i) | It displays: 4 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 7 | print(i) | 它显示：4 |'
- en: Exercise 25.1-3 Counting the Total Number of Iterations
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习25.1-3 计算迭代总数
- en: Count the total number of iterations performed by the following code fragment
    for two different executions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 计算以下代码片段在两次不同执行中的迭代总数。
- en: 'The input values for the two executions are: (i) 6, and (ii) 5.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 两次执行的输入值分别为：(i) 6，和(ii) 5。
- en: n = int(input())
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: n = int(input())
- en: 'for i in range(5, n + 1):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(5, n + 1):'
- en: print(i)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: Solution
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: For the input value 6, the range() function returns a sequence that includes
    the numbers 5 and 6\. Thus, the loop performs two iterations.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于输入值6，range()函数返回一个包含数字5和6的序列。因此，循环执行了两次迭代。
- en: Correspondingly, for the input value 5 the loop obviously performs only one
    iteration.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 相应地，对于输入值5，循环显然只执行了一次迭代。
- en: Exercise 25.1-4 Finding the Sum of Four Numbers
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习25.1-4 找出四个数的和
- en: Write a Python program that prompts the user to enter four numbers and then
    calculates and displays their sum.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入四个数，然后计算并显示它们的和。
- en: Solution
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: 'In [Exercise 24.1-5](chapter24.html#toc_6), the solution proposed with a while
    statement was the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在[练习24.1-5](chapter24.html#toc_6)中，使用while语句提出的解决方案如下：
- en: total = 0
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: i = 1
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i <= 4:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= 4:'
- en: x = float(input())
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: total = total + x
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: i += 1
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(total)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: It's now very easy to rewrite this using a for statement and have it display
    a prompt message before every data input.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用for语句重写这个程序非常容易，并在每次数据输入之前显示提示信息。
- en: '![](img/my_exercise_header.png) file_25.1-4'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1-4'
- en: total = 0
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(4):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(4):'
- en: 'x = float(input("Enter a number: "))'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'x = float(input("Enter a number: "))'
- en: total = total + x
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: print(total)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: '![](img/notice.jpg)Note the absence of the i += 1 statement inside the loop
    control structure. In a for statement, the counter (here variable i) automatically
    updates at the beginning of each loop iteration.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意循环控制结构内部缺少i += 1语句。在for语句中，计数器（此处变量i）在每次循环迭代开始时自动更新。'
- en: Exercise 25.1-5 Finding the Square Roots from 0 to N
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习25.1-5 从0到N寻找平方根
- en: Write a Python program that prompts the user to enter an integer and then calculates
    and displays the square root of all integers from 0 to that user-provided integer.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入一个整数，然后计算并显示从0到该用户提供的整数的所有整数的平方根。
- en: Solution
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: This exercise is straightforward. The user enters an integer, and the program
    iterates as many times as indicated by that integer. The Python program is as
    follows.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习很简单。用户输入一个整数，程序根据该整数迭代相应的次数。Python程序如下。
- en: '![](img/my_exercise_header.png) file_25.1-5'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1-5'
- en: from math import sqrt
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: from math import sqrt
- en: 'n = int(input("Enter an integer: "))'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 'n = int(input("Enter an integer: "))'
- en: 'for i in range(n + 1):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(n + 1):'
- en: print(sqrt(i))
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: print(sqrt(i))
- en: Exercise 25.1-6 Finding the Sum of 1 + 2 + 3 + … + 100
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习25.1-6 找出1 + 2 + 3 + … + 100的和
- en: 'Write a Python program that calculates and displays the following sum:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，计算并显示以下求和：
- en: S = 1 + 2 + 3 + … + 100
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: S = 1 + 2 + 3 + … + 100
- en: Solution
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: If you were to use a sequence control structure to solve this exercise, it would
    be something like the next code fragment.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用序列控制结构来解决这个问题，代码片段可能如下所示。
- en: s = 0
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: i = 1
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: s = s + i
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: s = s + i
- en: i = 2
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: i = 2
- en: s = s + i
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: s = s + i
- en: i = 3
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: i = 3
- en: s = s + i
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: s = s + i
- en: …
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: …
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: i = 100
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: i = 100
- en: s = s + i
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: s = s + i
- en: Let's use a trace table to better understand it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用跟踪表来更好地理解它。
- en: '| Step | Statement | Notes | i | s |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | i | s |'
- en: '| 1 | s = 0 | 0 | ? | 0 |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 1 | s = 0 | 0 | ? | 0 |'
- en: '| 2 | i = 1 |   | 1 | 0 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 2 | i = 1 |   | 1 | 0 |'
- en: '| 3 | s = s + i | 0 + 1 = 1 | 1 | 1 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 3 | s = s + i | 0 + 1 = 1 | 1 | 1 |'
- en: '| 4 | i = 2 |   | 2 | 1 |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 4 | i = 2 |   | 2 | 1 |'
- en: '| 5 | s = s + i | 0 + 1 + 2 = 3 | 2 | 3 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 5 | s = s + i | 0 + 1 + 2 = 3 | 2 | 3 |'
- en: '| 6 | i = 3 |   | 3 | 3 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 6 | i = 3 |   | 3 | 3 |'
- en: '| 7 | s = s + i | 0 +1 + 2 + 3 = 6 | 3 | 6 |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 7 | s = s + i | 0 +1 + 2 + 3 = 6 | 3 | 6 |'
- en: '| 8 | i = 4 |   | 4 | 6 |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 8 | i = 4 |   | 4 | 6 |'
- en: '| ... | … |   | … | … |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| ... | … |   | … | … |'
- en: '| ... | … |   | … | … |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| ... | … |   | … | … |'
- en: '| 199 | i = 99 |   | 99 | 4851 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 199 | i = 99 |   | 99 | 4851 |'
- en: '| 200 | s = s + i |   | 99 | 4950 |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 200 | s = s + i |   | 99 | 4950 |'
- en: '| 201 | i = 100 |   | 100 | 4950 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 201 | i = 100 |   | 100 | 4950 |'
- en: '| 202 | s = s + i | 0 + 1 + 2 + 3 + …+ 99 + 100 = 5050 | 100 | 5050 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 202 | s = s + i | 0 + 1 + 2 + 3 + …+ 99 + 100 = 5050 | 100 | 5050 |'
- en: Now that everything has been cleared up, you can do the same thing, this time
    using a for-loop which, in each iteration, assigns the values from 1 to 100 to
    variable i.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都已清楚，你可以这样做，这次使用for循环，在每次迭代中，将1到100的值赋给变量i。
- en: '![](img/my_exercise_header.png) file_25.1-6'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1-6'
- en: s = 0
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'for i in range(1, 101):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, 101):'
- en: s = s + i
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: s = s + i
- en: print(s)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: Exercise 25.1-7 Finding the Product of 2 × 4 × 6 × 8 × 10
  id: totrans-179
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 25.1-7 求 2 × 4 × 6 × 8 × 10 的乘积
- en: 'Write a Python program that calculates and displays the following product:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，计算并显示以下乘积：
- en: P = 2 × 4 × 6 × 8 × 10
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: P = 2 × 4 × 6 × 8 × 10
- en: Solution
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Let's solve this exercise using the following sequence control structure. Variable
    p must be initialized to 1 instead of 0\. This is necessary for the statement
    p = p * i to operate properly; the final product would be zero otherwise.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下序列控制结构来解决这个问题。变量 p 必须初始化为 1 而不是 0。这是为了确保 p = p * i 语句能够正确执行；否则，最终乘积将为零。
- en: p = 1
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: p = 1
- en: i = 2
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: i = 2
- en: p = p * i
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * i
- en: i = 4
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: i = 4
- en: p = p * i
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * i
- en: i = 6
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: i = 6
- en: p = p * i
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * i
- en: i = 8
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: i = 8
- en: p = p * i
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * i
- en: i = 10
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: i = 10
- en: p = p * i
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * i
- en: As in the previous exercise ([Exercise 25.1-6](#toc_7)), this sequence control
    structure can be replaced by a for-loop, as follows.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个练习（[练习 25.1-6](#toc_7)）中所述，这个序列控制结构可以用 for 循环替换，如下所示。
- en: '![](img/my_exercise_header.png) file_25.1-7'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1-7'
- en: p = 1
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: p = 1
- en: 'for i in range(2, 12, 2):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(2, 12, 2):'
- en: p = p * i
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * i
- en: print(p)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: print(p)
- en: Exercise 25.1-8 Finding the Sum of 2² + 4² + 6² + … (2N)²
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 25.1-8 求 2² + 4² + 6² + … (2N)² 的和
- en: 'Write a Python program that lets the user enter an integer N and then calculates
    and displays the following sum:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，让用户输入一个整数 N，然后计算并显示以下求和：
- en: S = 2² + 4² + 6² + … (2N)²
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: S = 2² + 4² + 6² + … (2N)²
- en: Solution
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In this exercise, in each iteration the for-loop must assign the values 2, 4,
    6, … 2N to variable i and each of these values must be raised to the second power
    before being accumulated in variable s. The final Python program is as follows.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，for 循环必须在每次迭代中将值 2、4、6、… 2N 分配给变量 i，并且这些值在累加到变量 s 之前必须被提升到平方。以下是一个最终的
    Python 程序。
- en: '![](img/my_exercise_header.png) file_25.1-8'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1-8'
- en: N = int(input())
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: N = int(input())
- en: s = 0
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'for i in range(2, 2 * N + 2, 2):'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(2, 2 * N + 2, 2):'
- en: s = s + i ** 2
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: s = s + i ** 2
- en: print(s)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: Exercise 25.1-9 Finding the Sum of 3³ + 6⁶ + 9⁹ + … (3N)^(3N)
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 25.1-9 求 3³ + 6⁶ + 9⁹ + … (3N)^(3N) 的和
- en: 'Write a Python program that lets the user enter an integer N and then calculates
    and displays the following sum:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，让用户输入一个整数 N，然后计算并显示以下求和：
- en: S = 3³ + 6⁶ + 9⁹ + …+ (3N)^(3N)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: S = 3³ + 6⁶ + 9⁹ + …+ (3N)^(3N)
- en: Solution
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: This is pretty much the same as the previous exercise. The only difference is
    that variable i must be raised to the i^(th) power before it is accumulated in
    variable s. Using the for-loop, the final Python program is as follows.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这与上一个练习非常相似。唯一的区别是变量 i 在累加到变量 s 之前必须被提升到 i 次幂。使用 for 循环，最终的 Python 程序如下。
- en: '![](img/my_exercise_header.png) file_25.1-9'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1-9'
- en: N = int(input())
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: N = int(input())
- en: s = 0
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'for i in range(3, 3 * N + 3, 3):'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3, 3 * N + 3, 3):'
- en: s = s + i ** i
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: s = s + i ** i
- en: print(s)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: Exercise 25.1-10 Finding the Average Value of Positive Numbers
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 25.1-10 求正数的平均值
- en: Write a Python program that lets the user enter 100 numbers and then calculates
    and displays the average value of the positive numbers. Add all necessary checks
    to make the program satisfy the property of definiteness.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，让用户输入 100 个数字，然后计算并显示正数的平均值。添加所有必要的检查，以确保程序满足确定性属性。
- en: Solution
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Since you know the total number of iterations, you can use a for-loop. Inside
    the loop, however, a decision control structure must check whether or not the
    user-provided number is positive; if so, it must accumulate the user-provided
    number in variable s. The variable count counts the number of positive numbers
    entered. When the flow of execution exits the loop, the average value can then
    be calculated. The Python program is as follows.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你知道总的迭代次数，你可以使用一个 for 循环。然而，在循环内部，决策控制结构必须检查用户提供的数字是否为正数；如果是，它必须将用户提供的数字累加到变量
    s 中。变量 count 计算输入的正数数量。当执行流程退出循环时，可以计算出平均值。以下是一个 Python 程序。
- en: '![](img/my_exercise_header.png) file_25.1-10'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1-10'
- en: s = 0
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: count = 0
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: count = 0
- en: 'for i in range(100):'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(100):'
- en: x = float(input())
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: 'if x > 0:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x > 0:'
- en: s = s + x
  id: totrans-233
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s = s + x
- en: count += 1
  id: totrans-234
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: count += 1
- en: 'if count != 0:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 'if count != 0:'
- en: print(s / count)
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: print(s / count)
- en: 'else:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("No positive numbers entered!")
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: print("没有输入正数！")
- en: '![](img/notice.jpg)The if count != 0 statement is necessary, because there
    is a possibility that the user may enter negative values (or zeros) only. By including
    this check, the program prevents any division-by-zero errors and thereby satisfies
    the property of definiteness.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)if count != 0语句是必要的，因为有可能用户只会输入负值（或零）。通过包含这个检查，程序防止了任何除以零的错误，并因此满足了确定性的属性。'
- en: Exercise 25.1-11 Counting the Vowels
  id: totrans-240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 25.1-11 计算元音字母
- en: Write a Python program that prompts the user to enter a message and then counts
    and displays the number of vowels the message contains.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入一条消息，然后计算并显示该消息中包含的元音字母数量。
- en: Solution
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: The following Python program counts the vowels in an English message.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Python程序计算英文消息中的元音字母。
- en: '![](img/my_exercise_header.png) file_25.1-11'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.1-11'
- en: 'message = input("Enter an English message: ")'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: message = input("输入一条英文消息：")
- en: vowels = "AEIOU"
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: vowels = "AEIOU"
- en: count = 0
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: count = 0
- en: 'for character in message:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 'for character in message:'
- en: 'if character.upper() in vowels:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 'if character.upper() in vowels:'
- en: count += 1
  id: totrans-250
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: count += 1
- en: print("Vowels:", count)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: print("元音字母：", count)
- en: '![](img/notice.jpg)Note the two ways the operator in is used here. In the first
    case it is used to determine the number of iterations, whereas in the second case
    it is used to check whether a letter exists in the string vowels (see [Section
    15.5](chapter15.html#toc_7)).'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意这里操作符in的两种用法。在第一种情况下，它用于确定迭代次数，而在第二种情况下，它用于检查字母是否存在于字符串vowels中（见[第15.5节](chapter15.html#toc_7)）。'
- en: 25.2 Rules that Apply to For-Loops
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 25.2 适用于for循环的规则
- en: There are certain rules you must always follow when writing programs with for-loops,
    since they can save you from undesirable side effects.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写带有for循环的程序时，你必须始终遵循某些规则，因为它们可以让你免受不良副作用的影响。
- en: '►Rule 1: The var/counter variables can appear in a statement inside the for-loop
    but their value should never be altered. The same applies to final_value and step
    in case they are variables and not constant values.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: ►规则1：var/计数器变量可以出现在for循环内的语句中，但它们的值永远不应该被更改。如果它们是变量而不是常量值，则同样适用于final_value和step。
- en: '►Rule 2: The step must never be zero. If it is set to zero, Python throws an
    error!'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: ►规则2：步长永远不能为零。如果设置为零，Python会抛出错误！
- en: '►Rule 3: If initial_value is smaller than final_value then, the step must be
    positive. If it is negative, the loop performs zero iterations. The following
    example prints nothing on the screen'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: ►规则3：如果初始值小于最终值，则步长必须是正的。如果它是负的，循环执行零次迭代。以下示例在屏幕上什么也不打印
- en: 'for i in range(5, 9, -1):'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(5, 9, -1):'
- en: print(i)
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_25.2-1'
- en: Keep in mind, though, that purposely violating this rule can be useful in certain
    situations.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请记住，故意违反此规则在某些情况下可能是有用的。
- en: '►Rule 4: If initial_value is greater than final_value then, the step must be
    negative. If it is positive, the loop performs zero iterations. The following
    example also prints nothing on the screen'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: ►规则4：如果初始值大于最终值，则步长必须是负的。如果它是正的，循环执行零次迭代。以下示例也在屏幕上什么也不打印
- en: 'for i in range(10, 6):'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10, 6):'
- en: print(i)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: Keep in mind, though, that purposely violating this rule can be useful in certain
    situations.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请记住，故意违反此规则在某些情况下可能是有用的。
- en: Exercise 25.2-1 Finding the Sum of N Numbers
  id: totrans-265
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 25.2-1 求N个数的和
- en: Write a Python program that prompts the user to enter N numbers and then calculates
    and displays their sum. The value of N must be provided by the user at the beginning
    of the program.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入N个数字，然后计算并显示它们的和。N的值必须在程序开始时由用户提供。
- en: Solution
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: The solution is presented here.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案在此处展示。
- en: '![](img/my_exercise_header.png) file_25.2-1'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: total += a  # 这相当于 total = total + a
- en: 'n = int(input("Enter quantity of numbers to enter: "))'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: n = int(input("输入要输入的数字数量："))
- en: total = 0
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(n):'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(n):'
- en: 'a = float(input("Enter number No" + str(i + 1) + ": "))'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input("输入第" + str(i + 1) + "个数字："))
- en: total += a  #This is equivalent to total = total + a
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: print("Sum:", total)
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: print("和：", total)
- en: '![](img/notice.jpg)Even though it violates the fourth rule of for-loops, in
    this particular exercise this situation is very useful. If the user enters a non-positive
    value for variable n, the for statement performs zero iterations.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Even though it violates the fourth rule of for-loops, in this particular exercise
    this situation is very useful. If the user enters a non-positive value for variable
    n, the for statement performs zero iterations.
- en: '25.3 Review Questions: True/False'
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 25.3 复习问题：对/错
- en: Choose true or false for each of the following statements.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择对或错。
- en: 1)In a for statement, the variable element is automatically assigned each successive
    value of sequence at the beginning of each loop.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 1)在for语句中，变量element在每次循环开始时自动分配序列的连续值。
- en: 2)A definite loop can be used when the number of iterations is known.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 2)当迭代次数已知时可以使用确定循环。
- en: 3)In a definite loop, the statement or block of statements of the loop is executed
    at least one time.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 3)在确定循环中，循环的语句或语句块至少执行一次。
- en: 4)In a range() function, the initial_value cannot be greater than the final_value.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 4)在range()函数中，初始值不能大于最终值。
- en: 5)When flow of execution exits a for-loop, the value of counter is not equal
    to final_value.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 5)当执行流程退出for循环时，计数器的值不等于final_value。
- en: 6)In a range() function, the value of initial_value, final_value and step cannot
    be a float.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 6)在range()函数中，初始值、最终值和步长不能是浮点数。
- en: 7)In a for statement with a range() function, when step is set to zero the loop
    performs zero iterations.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 7)在带有range()函数的for语句中，当步长设置为0时，循环执行0次迭代。
- en: 8)In a for statement, the counter variable can appear in a statement inside
    the loop but its value should never be altered.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 8)在for语句中，计数变量可以出现在循环内的语句中，但其值不应被更改。
- en: 9)In a for statement with a range() function,  the step can be zero for certain
    situations.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 9)在带有range()函数的for语句中，步长在特定情况下可以是0。
- en: 10)In the following code fragment the word “Hello” is displayed 10 times.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 10)在以下代码片段中，单词“Hello”被显示10次。
- en: 'for i in range(1, 10):'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, 10):'
- en: print("Hello")
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello")
- en: 11)The following code fragment can always be executed.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 11)以下代码片段总是可以执行的。
- en: b = int(input())
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: b = int(input())
- en: 'for i in range(0, 9, b):'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(0, 9, b):'
- en: print("Hello")
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello")
- en: 12)The following code fragment satisfies the property of definiteness.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 12)以下代码片段满足确定性的属性。
- en: from math import sqrt
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: from math import sqrt
- en: 'for i in range(-10, 10):'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(-10, 10):'
- en: print(sqrt(i))
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(sqrt(i))
- en: '25.4 Review Questions: Multiple Choice'
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 25.4 复习问题：多项选择题
- en: Select the correct answer for each of the following statements.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 选择以下每个陈述的正确答案。
- en: 1)A definite loop that uses the for statement
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 1)使用for语句的确定循环
- en: a)executes one iteration more than the equivalent pre-test loop structure (that
    uses the while statement).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: a)执行比等效的先测试循环结构（使用while语句）多一次迭代。
- en: b)executes one iteration less than the equivalent pre-test loop structure (that
    uses the while statement).
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: b)执行比等效的先测试循环结构（使用while语句）少一次迭代。
- en: c) none of the above
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: c)以上都不是
- en: 2)A definite loop that uses the for statement can be used in a problem in which
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 2)可以使用for语句的确定循环来解决以下问题
- en: a)the user enters numbers repeatedly until the value −1 is entered.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: a)用户反复输入数字，直到输入的值是-1。
- en: b)the user enters numbers repeatedly until the value entered is greater than
    final_value.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: b)用户反复输入数字，直到输入的值大于final_value。
- en: c)all of the above
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: c)所有选项
- en: d)none of the above
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 3)In a for-loop initial_value, final_value, and step can be
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 3)在for循环中，初始值、最终值和步长可以是
- en: a)a constant value.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: a)一个常数。
- en: b)a variable.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: b)一个变量。
- en: c)an expression.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: c)一个表达式。
- en: d)all of the above
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上所有选项
- en: 4)In a for-loop, when final_value and step are variables, their values
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 4)在for循环中，当final_value和step是变量时，它们的值
- en: a)cannot change inside the loop.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: a)在循环内不能更改。
- en: b)should not change inside the loop.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: b)在循环内不应更改。
- en: c)none of the above
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: c)以上都不是
- en: 5)In a for-loop, when counter increments, the step is
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 5)在for循环中，当计数器增加时，步长是
- en: a)greater than zero.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: a)大于零。
- en: b)equal to zero.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: b)等于零。
- en: c)less than zero.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: c)小于零。
- en: d)none of the above
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 6)In a for-loop, the initial value of counter
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 6)在for循环中，计数器的初始值
- en: a)must be 0.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: a)必须是0。
- en: b)can be 0.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: b)可以是0。
- en: c)cannot be a negative one.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: c)不能是负数。
- en: d)none of the above
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 7)In a for-loop, variable counter is automatically assigned each successive
    value of sequence
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 7)在for循环中，变量counter自动分配序列的连续值
- en: a)at the beginning of each iteration.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: a)在每次迭代开始时。
- en: b)at the end of each iteration.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: b)在每次迭代结束时。
- en: c)It is not assigned automatically.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: c)不是自动分配的。
- en: d)none of the above
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 8)In the following code fragment
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 8)在以下代码片段
- en: i = 1
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'for i in range(5, 6):'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(5, 6):'
- en: print("Hello Hera")
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello Hera")
- en: the message “Hello Hera” is displayed
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 显示消息“Hello Hera”
- en: a)5 times.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: a)5次。
- en: b)1 time.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: b)1次。
- en: c)0 times.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: c)0次。
- en: d)none of the above
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 9)In the following code fragment
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 9)在以下代码片段
- en: 'for i in range(5, 5):'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(5, 5):'
- en: i = 1
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: print("Hello Artemis")
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello Artemis")
- en: the message “Hello Artemis” is displayed
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 显示消息“Hello Artemis”
- en: a)1 time.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: a)1次。
- en: b)an infinite number of times.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: b)无限次.
- en: c)0 times.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: c)0次.
- en: d)none of the above
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 10)In the following code fragment
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 10)在以下代码片段中
- en: 'for i in range(5, 6):'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(5, 6):'
- en: i = 6
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: i = 6
- en: print("Hello Ares")
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello Ares")
- en: the message “Hello Ares” is displayed
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的消息是“Hello Ares”
- en: a)an infinite number of times.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: a)无限次.
- en: b)1 time.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: b)1次.
- en: c)0 times.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: c)0次.
- en: d)none of the above
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 11)In the following code fragment
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 11)在以下代码片段中
- en: 'for i in range(2, 9):'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(2, 9):'
- en: 'if i % 2 == 0:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i % 2 == 0:'
- en: print("Hello Demeter")
  id: totrans-364
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Hello Demeter")
- en: the message “Hello Demeter” is displayed
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的消息是“Hello Demeter”
- en: a)8 times.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: a)8次.
- en: b)7 times.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: b)7次.
- en: c)5 times.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: c)5次.
- en: d)none of the above
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 12)In the following code fragment
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 12)在以下代码片段中
- en: 'for i in range(40, 51):'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(40, 51):'
- en: print("Hello Dionysus")
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello Dionysus")
- en: the message “Hello Dionysus” is displayed
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的消息是“Hello Dionysus”
- en: a)1 time.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: a)1次.
- en: b)2 times.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: b)2次.
- en: c)10 times.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: c)10次.
- en: d)11 times.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: d)11次.
- en: 13)In the following code fragment
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 13)在以下代码片段中
- en: k = 0
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: k = 0
- en: 'for i in range(1, 7, 2):'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, 7, 2):'
- en: k = k + i
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: k = k + i
- en: print(k)
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: print(k)
- en: the value displayed is
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的值是
- en: a)3.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: a)3.
- en: b)6.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: b)6.
- en: c)9.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: c)9.
- en: d)none of the above
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 14)In the following code fragment
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 14)在以下代码片段中
- en: k = 0
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: k = 0
- en: 'for i in range(10, -15, -5):'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10, -15, -5):'
- en: k = k + i
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: k = k + i
- en: print(i)
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: the value displayed is
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的值是
- en: a)0
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: a)0
- en: b)−15.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: b)−15.
- en: c)−10.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: c)−10.
- en: d)none of the above
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 25.5 Review Exercises
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 25.5 复习练习
- en: Complete the following exercises.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 1)创建一个跟踪表以确定下一个Python程序每一步中变量的值。这个Python程序执行了多少次迭代？
- en: a = 0
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: a = 0
- en: b = 0
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: b = 0
- en: 'for j in range(0, 10, 2):'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(0, 10, 2):'
- en: 'if j < 5:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 'if j < 5:'
- en: b += 1
  id: totrans-405
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b += 1
- en: 'else:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: a += j - 1
  id: totrans-407
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a += j - 1
- en: print(a, ",", b)
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: print(a, ",", b)
- en: 2)Create a trace table to determine the values of the variables in each step
    of the next Python program for two different executions.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 2)创建一个跟踪表以确定下一个Python程序对于两个不同执行的每一步中变量的值。
- en: 'The input values for the two executions are: (i) 10, and (ii) 21.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 两次执行的输入值分别是：(i) 10，和(ii) 21。
- en: a = int(input())
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: b = a
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: b = a
- en: 'for j in range(a - 5, a + 1, 2):'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(a - 5, a + 1, 2):'
- en: 'if j % 2 != 0:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 'if j % 2 != 0:'
- en: b = a + j + 5
  id: totrans-415
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b = a + j + 5
- en: 'else:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: b = a - j
  id: totrans-417
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b = a - j
- en: print(b)
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)
- en: 3)Create a trace table to determine the values of the variables in each step
    of the next Python program for the input value 12.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 3)创建一个跟踪表以确定下一个Python程序对于输入值12的每一步中变量的值。
- en: a = int(input())
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: 'for j in range(2, a, 3):'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(2, a, 3):'
- en: x = j * 3 + 3
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: x = j * 3 + 3
- en: y = j * 2 + 10
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: y = j * 2 + 10
- en: 'if y - x > 0 or x > 30:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y - x > 0 or x > 30:'
- en: y *= 2
  id: totrans-425
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y *= 2
- en: x += 4
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: x += 4
- en: print(x, ",", y)
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: print(x, ",", y)
- en: 4)Fill in the gaps in the following code fragments so that all loops perform
    exactly five iterations.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 4)填写以下代码片段中的空白，以便所有循环都恰好执行五次迭代。
- en: i)
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: i)
- en: 'for a in range(5, …… + 1):'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 'for a in range(5, …… + 1):'
- en: print(b)
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)
- en: b += a
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: b += a
- en: ii)
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: ii)
- en: 'for a in range(0, …… + 1, 5):'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 'for a in range(0, …… + 1, 5):'
- en: print(b)
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)
- en: b += a
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: b += a
- en: iii)
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: iii)
- en: 'for a in range(……, -16, -2):'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 'for a in range(……, -16, -2):'
- en: print(b)
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)
- en: b += a
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: b += a
- en: iv)
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: iv)
- en: 'for a in range(-11, -16, ……):'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 'for a in range(-11, -16, ……):'
- en: print(b)
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)
- en: b += a
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: b += a
- en: 5)Without using a trace table, can you find out what the next Python program
    displays?
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 5)不使用跟踪表，你能找出以下Python程序将显示什么？
- en: word = "Zeus"
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: word = "Zeus"
- en: i = 1
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: s = ""
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: s = ""
- en: 'for letter in word:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 'for letter in word:'
- en: s = s + i * letter
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: s = s + i * letter
- en: i += 1
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(s)
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: 6)Design a flowchart and write the corresponding Python program that prompts
    the user to enter 20 numbers and then calculates and displays their product and
    their average value.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 6)设计一个流程图并编写相应的Python程序，提示用户输入20个数，然后计算并显示它们的乘积和平均值。
- en: 7)Write a Python program that calculates and displays the sine of all numbers
    from 0 to 360 ^ο, using a step of 0.5\. It is given that 2π = 360^ο.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 7)编写一个Python程序，计算并显示从0到360°的正弦值，步长为0.5。已知2π = 360°。
- en: 8)Write a Python program that prompts the user to enter a number in degrees
    and then calculates and displays the cosine of all numbers from 0 to that user-provided
    number, using a step of 1\. It is given that 2π = 360^ο.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 8)编写一个Python程序，提示用户输入一个度数，然后计算并显示从0到用户提供的数的余弦值，步长为1。已知2π = 360°。
- en: '9)Write a Python program that calculates and displays the sum of the following:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 9)编写一个Python程序，计算并显示以下数的和：
- en: S = 1 + 3 + 5 + … + 99
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: S = 1 + 3 + 5 + … + 99
- en: '10)Write a Python program that lets the user enter an integer N and then calculates
    and displays the product of the following:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 10) 编写一个 Python 程序，允许用户输入一个整数 N，然后计算并显示以下乘积：
- en: P = 2¹ × 4³ × 6⁵ × … × 2N^((2N−1))
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: P = 2¹ × 4³ × 6⁵ × … × 2N^((2N−1))
- en: '11)Write a Python program that calculates and displays the sum of the following:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 11) 编写一个 Python 程序，计算并显示以下数列的和：
- en: S = 1 + 2 + 4 + 7 + 11 + 16 + 22 + 29 + 37 + … + 191
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: S = 1 + 2 + 4 + 7 + 11 + 16 + 22 + 29 + 37 + … + 191
- en: 12)Design a flowchart and write the corresponding Python program that lets a
    teacher enter the total number of students as well as their grades and then calculates
    and displays the average value of those who got an “A”, that is 90 to 100\. Add
    all necessary checks to make the program satisfy the property of definiteness.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 12) 设计一个流程图并编写相应的 Python 程序，允许教师输入学生的总数以及他们的成绩，然后计算并显示那些获得“A”（即 90 到 100 分）的平均值。添加所有必要的检查，以确保程序满足确定性的属性。
- en: 13)Design a flowchart and write the corresponding Python program that prompts
    the user to enter 30 four-digit integers and then calculates and displays the
    sum of those with a first digit of 5 and a last digit of 3\. For example, values
    5003, 5923, and 5553 are all such integers.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 13) 设计一个流程图并编写相应的 Python 程序，提示用户输入 30 个四位数整数，然后计算并显示那些首位为 5 且末位为 3 的整数的总和。例如，值
    5003、5923 和 5553 都是此类整数。
- en: 14)Design a flowchart and write the corresponding Python program that prompts
    the user to enter N integers and then displays the total number of those that
    are even. The value of N must be provided by the user at the beginning of the
    program. Moreover, if all user-provided integers are odd, the message “You entered
    no even integers” must be displayed.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 14) 设计一个流程图并编写相应的 Python 程序，提示用户输入 N 个整数，然后显示其中偶数的总数。程序开始时必须由用户提供 N 的值。此外，如果用户提供的所有整数都是奇数，则必须显示消息“您没有输入任何偶数整数”。
- en: 15)Design a flowchart and write the corresponding Python program that prompts
    the user to enter 50 integers and then calculates and displays the average value
    of those that are odd and the average value of those that are even.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 15) 设计一个流程图并编写相应的 Python 程序，提示用户输入 50 个整数，然后计算并显示奇数的平均值和偶数的平均值。
- en: 16)Design a flowchart and write the corresponding Python program that prompts
    the user to enter two integers into variables start and finish and then displays
    all integers from start to finish. However, at the beginning the program must
    check if variable start is bigger than variable finish. If this happens, the program
    must swap their values so that they are always in the proper order.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 16) 设计一个流程图并编写相应的 Python 程序，提示用户将两个整数分别输入到变量 start 和 finish 中，然后显示从 start 到
    finish 的所有整数。然而，在程序开始时，必须检查变量 start 是否大于变量 finish。如果发生这种情况，程序必须交换它们的值，以确保它们始终处于正确的顺序。
- en: 17)Design a flowchart and write the corresponding Python program that prompts
    the user to enter two integers into variables start and finish and then displays
    all integers from start to finish that are multiples of five. However, at the
    beginning the program must check if variable start is bigger than variable finish.
    If this happens, the program must swap their values so that they are always in
    the proper order.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 17) 设计一个流程图并编写相应的 Python 程序，提示用户将两个整数分别输入到变量 start 和 finish 中，然后显示从 start 到
    finish 的所有是 5 的倍数的整数。然而，在程序开始时，必须检查变量 start 是否大于变量 finish。如果发生这种情况，程序必须交换它们的值，以确保它们始终处于正确的顺序。
- en: 18)Write a Python program that prompts the user to enter a real and an integer
    and then displays the result of the first number raised to the power of the second
    number, without using either the exponentiation operator ( ** ) or even the built-in
    pow() function of Python.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 18) 编写一个 Python 程序，提示用户输入一个实数和一个整数，然后显示第一个数以第二个数为指数的结果，而不使用指数运算符（**）或 Python
    的内置 pow() 函数。
- en: 19)Write a Python program that prompts the user to enter a message and then
    displays the number of words it contains. For example, if the string entered is
    “My name is Bill Bouras”, the program must display “The message entered contains
    5 words”. Assume that the words are separated by a single space character.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 19) 编写一个 Python 程序，提示用户输入一条消息，然后显示它包含的单词数量。例如，如果输入的字符串是“我的名字是比尔·博拉斯”，程序必须显示“输入的消息包含
    5 个单词”。假设单词由单个空格字符分隔。
- en: 'Hint: Use the len() function to get the number of characters that the user-provided
    message contains.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：使用 len() 函数获取用户提供的消息包含的字符数。
- en: 20)Write a Python program that prompts the user to enter a message and then
    displays the average number of letters in each word. For example, if the message
    entered is “My name is Aphrodite Boura”, the program must display “The average
    number of letters in each word is 4.4”. Space characters must not be counted.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 20) 编写一个 Python 程序，提示用户输入一条消息，然后显示每个单词的平均字母数。例如，如果输入的消息是“我的名字是阿芙罗狄忒·博拉”，程序必须显示“每个单词的平均字母数是
    4.4”。空格字符不计入。
- en: 21)Write a Python program that prompts the user to enter a message and then
    counts and displays the number of consonants the message contains.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 21) 编写一个 Python 程序，提示用户输入一条消息，然后计算并显示该消息中包含的辅音字母数量。
- en: 22)Write a Python program that prompts the user to enter a message and then
    counts and displays the number of vowels, the number of consonants, and the number
    of arithmetic characters the message contains.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 22) 编写一个 Python 程序，提示用户输入一条消息，然后计算并显示该消息中包含的元音字母数量、辅音字母数量以及算术字符数量。
