- en: Building GUIs with PyQt5
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PyQt5构建GUI
- en: In this chapter, we will introduce another Python GUI toolkit, named PyQt5,
    which is truly excellent. PyQt5 has similar capabilities to `tkinter` but comes
    with a very nice Visual Designer tool that lets us drag and drop widgets onto
    a form. We will also use another tool that converts the Designer `.ui` code into
    Python code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍另一个Python GUI工具包，名为PyQt5，它确实非常出色。PyQt5具有与`tkinter`相似的功能，但它附带了一个非常棒的视觉设计工具，允许我们将小部件拖放到表单上。我们还将使用另一个工具，将设计器的`.ui`代码转换为Python代码。
- en: After visually designing our GUI in the Designer and then converting the code
    into Python code, we will continue using pure Python to add functionality to our
    widgets. First, we will install PyQt5 and the Designer before writing a simple
    PyQt5 GUI without the Designer. After that, we will visually design our GUI.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计器中视觉设计我们的GUI并将其代码转换为Python代码后，我们将继续使用纯Python为我们的小部件添加功能。首先，我们将安装PyQt5和设计器，然后在不使用设计器的情况下编写一个简单的PyQt5
    GUI。之后，我们将视觉设计我们的GUI。
- en: Knowing how to use PyQt5, and the Visual Designer tool and how to convert `.ui`
    into `.py` code will add great skills to your Python GUI development toolbox.
    From this, you will learn how to create powerful and complex GUIs, as well as
    how to visually design the UI and then decouple the functionality from the design
    using a modular approach to software development.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何使用PyQt5、视觉设计工具以及如何将`.ui`转换为`.py`代码将为您的Python GUI开发工具箱增添强大的技能。从这，您将学习如何创建强大而复杂的GUI，以及如何使用模块化软件开发方法来视觉设计UI，然后从设计中解耦功能。
- en: This also gives you the opportunity to compare the different GUI frameworks
    we have been showing you throughout this book, which will ultimately lead to you
    choosing one to explore in more depth.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这也给你提供了一个机会，比较我们在整本书中向您展示的不同GUI框架，这最终将引导你选择一个进行更深入的探索。
- en: I have created two Packt video courses that focus very deeply on Python GUI
    programming with `tkinter` and **PyQt5**. You can find them on the Packt website.
    I will also provide links to them at the end of this chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经创建了两个Packt视频课程，专注于使用`tkinter`和**PyQt5**进行Python GUI编程。您可以在Packt网站上找到它们。我还会在本章末尾提供它们的链接。
- en: 'The following screenshot provides an overview of the Python modules you will
    need for this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图提供了您在本章中需要的Python模块的概述：
- en: '![](img/9e36a06f-ed01-492a-875d-037004f8bee0.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9e36a06f-ed01-492a-875d-037004f8bee0.png)'
- en: 'We will be covering the following recipes:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍以下菜谱：
- en: Installing PyQt5
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装PyQt5
- en: Installing the PyQt5 Designer tool
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装PyQt5设计器工具
- en: Writing our first PyQt5 GUI
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写我们的第一个PyQt5 GUI
- en: Changing the title of the GUI
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改GUI的标题
- en: Refactoring our code with object-oriented programming
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用面向对象编程重构我们的代码
- en: Inheriting from QMainWindow
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从QMainWindow继承
- en: Adding a status bar widget
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加状态栏小部件
- en: Adding a menu bar widget
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加菜单栏小部件
- en: Starting the PyQt5 Designer tool
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动PyQt5设计器工具
- en: Previewing the form within the PyQt5 Designer
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PyQt5设计器中预览表单
- en: Saving the PyQt5 Designer form
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存PyQt5设计器表单
- en: Converting Designer `.ui` code into `.py` code
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将设计器的`.ui`代码转换为`.py`代码
- en: Understanding the converted Designer code
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解转换后的设计器代码
- en: Building a modular GUI design
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建模块化GUI设计
- en: Adding another menu item to our menu bar
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的菜单栏中添加另一个菜单项
- en: Connecting functionality to the Exit menu item
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将功能连接到退出菜单项
- en: Adding a Tab Widget via the Designer
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过设计器添加标签小部件
- en: Using layouts in the Designer
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设计器中使用布局
- en: Adding buttons and labels in the Designer
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设计器中添加按钮和标签
- en: Installing PyQt5
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PyQt5
- en: In this recipe, we will install the PyQt5 GUI framework. We will be using Python's
    `pip` tool to download the PyQt5 wheel format installer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将安装PyQt5 GUI框架。我们将使用Python的`pip`工具下载PyQt5的wheel格式安装程序。
- en: 'You can find the official documentation at the following link: [https://www.riverbankcomputing.com/static/Docs/PyQt5/installation.html](https://www.riverbankcomputing.com/static/Docs/PyQt5/installation.html).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到官方文档：[https://www.riverbankcomputing.com/static/Docs/PyQt5/installation.html](https://www.riverbankcomputing.com/static/Docs/PyQt5/installation.html)。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have Python's `pip` tool installed on your computer. You probably
    already have it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的计算机上安装Python的`pip`工具。您可能已经有了它。
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s see how we can install PyQt5 using Python''s `pip` tool:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用Python的`pip`工具安装PyQt5：
- en: Open a Windows PowerShell window or Command Prompt.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Windows PowerShell窗口或命令提示符。
- en: Type in the `pip install pyqt5` command.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`pip install pyqt5`命令。
- en: Press the *Enter* key.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*键。
- en: Verify the installation by running `pip list`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In *step 1*, we open a PowerShell window, and in *step 2*, we use Python''s
    `pip` tool. After pressing the *Enter* key to run the command in *step 3*, the
    installation will start and run to completion. You will see output similar to
    the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8a36733-35ee-4a68-b761-b1958e85d981.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: 'In *step 4*, we use `pip` again to verify that we have installed PyQt5 successfully.
    The output will look similar to the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75ac526b-95ad-4022-855a-78156cfa0b59.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: You may see more packages installed on your computer. The important thing to
    check is that the PyQt5 package is listed. The version number that's been installed
    is listed to the right of the package's name.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Installing the PyQt5 Designer tool
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will install the PyQt5 Designer tool. We will do this by
    using Python's `pip` tool. The steps are very similar to the previous recipe's,
    where we installed PyQt5.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to have Python's `pip` tool installed on your computer.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how we can install the PyQt5 Designer using Python''s `pip` tool.
    Note that the package includes more than just the Designer tool:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Open a Windows PowerShell window or Command Prompt.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Press the *Enter* key.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the installation by running the following command:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Locate the `Designer.exe` file on your hard drive.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In *step 1*, we open a PowerShell window and in *step 2*, we use Python''s
    `pip` tool. After pressing the *Enter* key to run the command in *step 3*, the
    installation will start and run to completion. You will see output similar to
    the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87d1907b-1fa0-4b95-b857-f39f5c09cdf3.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: Please note that, in the preceding screenshot, the installation ran into an
    error. I don't know why, but sometimes installations do run into errors. I simply
    reran the installation, and this time it ran without any errors. The necessary
    tools, including the Designer, were installed successfully.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 4* is the exact same step as in the previous recipe, and the output is
    exactly the same. Please refer to the output screenshot of the *Installing PyQt5*
    recipe for more information.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we want to find the `Designer.exe` file, which is the Visual Designer
    tool we will use in later recipes. After finding it, you will want to make a shortcut
    to it on your desktop.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of where `Designer.exe` is installed on my computer:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bd875d4-bcfc-4af3-818e-c8743a4abe30.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: Your location might be different, but this gives you an idea of where to look
    for the tool.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Writing our first PyQt5 GUI
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be writing our first PyQt5 GUI. We will be using PyQt5
    directly without using the Designer.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to have PyQt5 installed. See the *Installing PyQt5* recipe to find
    out how to install PyQt5\. Use your favorite Python editor to write the code.
    If you are not familiar with modern IDEs such as Eclipse, PyCharm, and so on,
    you can use the IDLE editor, which ships with Python.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装PyQt5。请参阅*安装PyQt5*菜谱，了解如何安装PyQt5。使用您喜欢的Python编辑器编写代码。如果您不熟悉Eclipse、PyCharm等现代IDE，可以使用随Python一起提供的IDLE编辑器。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s look at how we can build our first GUI with PyQt5:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何使用PyQt5构建我们的第一个GUI：
- en: Open your favorite Python editor.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的Python编辑器。
- en: Create a new Python module and save it as `First_GUI_PyQt5.py`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Python模块并将其保存为`First_GUI_PyQt5.py`。
- en: 'Start by typing in the following import statements:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先输入以下导入语句：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following four lines of code below the import statements:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入语句下方添加以下四行代码：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the preceding code. Maximize, minimize, and resize the resultant GUI. Click
    the Χ symbol in the top-right corner to close the application:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的代码。最大化、最小化和调整结果GUI的大小。点击右上角的×符号来关闭应用程序：
- en: '![](img/0bf4df51-979f-466a-8144-bca6a98b488e.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0bf4df51-979f-466a-8144-bca6a98b488e.png)'
- en: Now, let's go behind the scenes to understand how this works.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们幕后看看它是如何工作的。
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *steps 1* and *2*, we create a new Python module. In *step 3*, we write some
    import statements.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*和*步骤2*中，我们创建了一个新的Python模块。在*步骤3*中，我们编写了一些导入语句。
- en: We import `sys` so that we can pass command-line arguments into our GUI.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入`sys`以便我们可以将命令行参数传递到我们的GUI中。
- en: From the PyQt5 package, we import the `QApplication` and `QWidget` classes,
    both of which reside within the `QtWidgets` module.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从PyQt5包中导入`QApplication`和`QWidget`类，这两个类都位于`QtWidgets`模块中。
- en: We create an instance of the `QApplication` class, passing in `sys.argv` so
    that we can pass in additional command-line arguments. We save this instance in
    the `app` variable. This will create our application.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个`QApplication`类的实例，传递`sys.argv`以便我们可以传递额外的命令行参数。我们将此实例保存在`app`变量中。这将创建我们的应用程序。
- en: Then, we create an instance of the `QWidget` class, which becomes our GUI. We
    save this instance in a local variable named `gui`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个`QWidget`类的实例，它成为我们的GUI。我们将此实例保存在名为`gui`的局部变量中。
- en: Next, we call the `show` method on our `gui` class instance to make the GUI
    visible.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在`gui`类实例上调用`show`方法，使GUI可见。
- en: After that, we call the `exec_` method on our application class instance, which
    executes our application. We wrap the call into `sys.exit` in order to catch any
    exceptions that might occur. If an exception occurs, this will make sure that
    our Python application exits cleanly and does not crash.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们在我们的应用程序类实例上调用`exec_`方法，这会执行我们的应用程序。我们将调用包装在`sys.exit`中，以便捕获可能发生的任何异常。如果发生异常，这将确保我们的Python应用程序干净地退出，而不会崩溃。
- en: Changing the title of the GUI
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改GUI的标题
- en: In this recipe, we will change the title of the GUI we created in the previous
    recipe.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将更改上一菜谱中创建的GUI的标题。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the code from the previous recipe, so either type it into a
    module of your own or download it from the Packt website for this book.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用上一菜谱中的代码，所以您可以选择将其输入到自己的模块中，或者从Packt网站下载这本书的代码。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will enhance the GUI from the previous recipe by changing the title of this
    GUI. Let''s get started:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过更改此GUI的标题来增强上一菜谱中的GUI。让我们开始吧：
- en: Open `First_GUI_PyQt5.py` and save it as `GUI_PyQt5_title.py`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`First_GUI_PyQt5.py`并将其保存为`GUI_PyQt5_title.py`。
- en: 'Add the following line of code into the middle of the existing code:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有代码的中间添加以下代码行：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the code and note the new title:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意新的标题：
- en: '![](img/93a3ebf1-acd2-4497-a95f-ac60e51b7839.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/93a3ebf1-acd2-4497-a95f-ac60e51b7839.png)'
- en: Now, let's go behind the scenes to understand how this works.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们幕后看看它是如何工作的。
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *step 1*, we are reusing the code from the previous recipe by saving it under
    a new name.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们通过保存为新名称来重用上一菜谱中的代码。
- en: In *step 2*, we are calling the `setWindowTitle` method on our `gui` instance,
    passing it as a string. This string becomes our new title when we run the application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们在`gui`实例上调用`setWindowTitle`方法，将其作为字符串传递。当我们运行应用程序时，这个字符串成为我们的新标题。
- en: 'The complete code now looks like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码现在看起来是这样的：
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In *step 3*, we run the code and see that our window title now displays PyQt5
    GUI instead of python.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，我们运行代码并看到窗口标题现在显示为PyQt5 GUI而不是python。
- en: There's more...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: One very important thing to note in the preceding code is the place where we
    are calling `setWindowTitle`, because this shows us the typical code structure
    every PyQt5 application follows.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中需要注意的一个非常重要的事情是我们调用 `setWindowTitle` 的位置，因为这显示了每个PyQt5应用程序遵循的典型代码结构。
- en: After the import statements, at the top, we create a PyQt5 application. At the
    bottom, we execute the application. All of the functionality we add to the GUI
    resides in between the top and bottom pieces of code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入语句之后，在顶部创建一个PyQt5应用程序。在底部执行应用程序。我们添加到GUI的所有功能都位于顶部和底部代码之间。
- en: Refactoring our code into object-oriented programming
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的代码重构为面向对象编程
- en: In this recipe, we will refactor our code into **object-oriented programming**
    (**OOP**) using classes. This is in preparation for the PyQt5 Designer code and
    the recipes we will be building later in this chapter. In this recipe, the resultant
    output of the GUI will look the same, but the code will be different.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用类将我们的代码重构为 **面向对象编程** （**OOP**）。这是为PyQt5设计器代码和本章后面将要构建的菜谱做准备。在这个菜谱中，GUI的最终输出看起来相同，但代码将不同。
- en: We will build a class that inherits from `QWidget`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个继承自 `QWidget` 的类。
- en: Getting ready
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be refactoring the code from the previous recipe, so make sure you understand
    that code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重构之前菜谱中的代码，所以请确保你理解那段代码。
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We will turn our previous, procedural code into object-oriented code. Here
    is how we do this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把之前的、过程化的代码转换为面向对象的代码。以下是我们的做法：
- en: Create a new module and name it `GUI_PyQt5_refactored_OOP.py`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模块，并将其命名为 `GUI_PyQt5_refactored_OOP.py`。
- en: 'Start by writing the same import statements:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先编写相同的导入语句：
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a class that inherits from `QWidget`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个继承自 `QWidget` 的类：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add a Python self-testing section under the preceding code:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码下添加一个Python自测部分：
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the application. The resultant GUI will be identical to the one from the
    previous recipe.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。生成的GUI将与之前菜谱中的相同。
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, we are creating a new module, while in *step 2*, we are adding
    the same import statements we used in the previous recipes in this chapter.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们创建了一个新的模块，而在 *步骤 2* 中，我们在本章之前的菜谱中添加了相同的导入语句。
- en: In *step 3*, we are creating a new class that inherits from `QWidget`. We call
    `super` to initialize the parent, which, in turn, creates our GUI.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 3* 中，我们创建了一个新的类，它继承自 `QWidget`。我们调用 `super` 来初始化父类，这反过来又创建了我们的GUI。
- en: Then, we create and call a class method that sets the window title.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建并调用一个设置窗口标题的类方法。
- en: In *step 4*, we are using Python's self-testing capabilities to create the PyQt5
    application and the GUI, and then we are executing the code.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 4* 中，我们使用Python的自测功能来创建PyQt5应用程序和GUI，然后执行代码。
- en: Running this code creates the same GUI as in the previous recipe, but our code
    is now using OOP.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码将创建与之前菜谱中相同的GUI，但我们的代码现在正在使用面向对象编程。
- en: Inheriting from QMainWindow
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从QMainWindow继承
- en: Now that we have seen how to inherit from PyQt5 classes, in this recipe, we
    will inherit from `QMainWindow`. This gives us more options when it comes to designing
    our GUI compared to inheriting from `QWidgets`. In addition to setting the GUI
    window title, we will also give it a certain size.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何从PyQt5类中继承，在这个菜谱中，我们将从 `QMainWindow` 继承。与从 `QWidgets` 继承相比，这为我们设计GUI提供了更多选项。除了设置GUI窗口标题外，我们还将给它一个特定的尺寸。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Read through the previous recipe so that you understand the code we are writing
    here.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读之前的菜谱，以便理解我们在这里编写的代码。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We will inherit from `QMainWindow` and specify the size of the GUI. Let''s
    get started:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继承自 `QMainWindow` 并指定GUI的大小。让我们开始吧：
- en: Create a new module and name it `GUI_PyQt5_QMainWindow.py`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模块，并将其命名为 `GUI_PyQt5_QMainWindow.py`。
- en: 'Write the following import statements:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写以下导入语句：
- en: '[PRE9]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create the following class:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下类：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Add the same `'__main__'` code that was shown in the previous recipe.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加之前菜谱中显示的相同的 `'__main__'` 代码。
- en: Run the code. The resultant GUI will look the same as it did in the previous
    two recipes, but it will be smaller.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码。生成的GUI将看起来与前面两个菜谱中的相同，但会更小。
- en: How it works...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, we are creating a new module, while in *step 2*, we are writing
    the import statements. This time, however, we are not importing `QWidgets` – we
    are importing `QMainWindow` instead. In *step 3*, we are creating a new class
    that inherits from `QMainWindow`. As before, we set the title in the method we
    are calling. However, in addition to setting the title, we are also giving our
    GUI a specific size. We do this by calling the `resize` method, passing in the
    width and height.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们创建了一个新的模块，而在 *步骤 2* 中，我们编写了导入语句。然而，这一次，我们不是导入 `QWidgets`，而是导入 `QMainWindow`。在
    *步骤 3* 中，我们创建了一个新的类，它继承自 `QMainWindow`。和之前一样，我们在调用的方法中设置了标题。然而，除了设置标题之外，我们还为我们的GUI指定了一个特定的尺寸。我们通过调用
    `resize` 方法，并传入宽度和高度来实现这一点。
- en: '*Steps 4* and *5* are the same as they were in the previous recipe, but the
    resultant GUI is now the size we specified in the `resize` method.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 4* 和 *步骤 5* 与前面的配方中相同，但现在的GUI大小是我们在 `resize` 方法中指定的。'
- en: Adding a status bar widget
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加状态栏小部件
- en: In this recipe, we will start to add widgets to the GUI we created previously.
    We will start by adding a status bar. This is a widget that comes built in with
    PyQt5, so all we have to do is use it.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将开始向之前创建的GUI添加小部件。我们将从添加状态栏开始。这是一个PyQt5内置的小部件，所以我们只需要使用它。
- en: Getting ready
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will extend the GUI from the previous recipe, so read the previous recipe
    in order to understand the code we are writing here.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展前面配方中的GUI，因此请阅读前面的配方，以便理解我们在这里编写的代码。
- en: How to do it...
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s get started:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: Create a new module and name it `GUI_PyQt5_statusbar.py`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模块，并将其命名为 `GUI_PyQt5_statusbar.py`。
- en: Write the exact same code from the previous recipe, which can be found in `GUI_PyQt5_QMainWindow.py`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写出与前面配方中完全相同的代码，该代码可以在 `GUI_PyQt5_QMainWindow.py` 中找到。
- en: 'Create a new method, `add_widgets`, within the class and call it, as shown
    in the following code block:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类中创建一个新的方法，命名为 `add_widgets` 并调用它，如下面的代码块所示：
- en: '[PRE11]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the preceding code and note the new status bar at the bottom of the GUI:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的代码，并注意GUI底部的新的状态栏：
- en: '![](img/934b13c7-e45d-4361-8280-332a6c1a5f0a.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/934b13c7-e45d-4361-8280-332a6c1a5f0a.png)'
- en: Now, let's go behind the scenes to understand how this works.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解这是如何工作的。
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, we are creating a new module, while in *step 2*, we are reusing
    the code from the previous recipe. In *step 3*, we create a new method, `add_widget`,
    in which we are creating the PyQt5 built-in status bar. We are using `self` to
    access this widget since the `statusBar` widget is part of `QMainWindow`. This
    is one of the reasons we are inheriting from `QMainWindow` instead of `QWidgets`
    to build our GUI.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们创建了一个新的模块，而在 *步骤 2* 中，我们重用了前面配方中的代码。在 *步骤 3* 中，我们创建了一个新的方法 `add_widget`，在其中我们创建了PyQt5内置的状态栏。我们使用
    `self` 来访问这个小部件，因为 `statusBar` 小部件是 `QMainWindow` 的一部分。这也是我们为什么选择从 `QMainWindow`
    继承而不是从 `QWidgets` 继承来构建我们的GUI的原因之一。
- en: After creating the status bar, we immediately call the `showMessage` method
    on it. We could have done this in two steps, that is, creating the status bar
    and saving the instance of this class in a local variable, and then using the
    variable to call `showMessage` on it. Here, we streamlined the code into one line.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建状态栏后，我们立即调用其上的 `showMessage` 方法。我们本可以将这分成两个步骤来做，即创建状态栏并将这个类的实例保存在一个局部变量中，然后使用这个变量来调用
    `showMessage`。在这里，我们将代码简化为了一行。
- en: Adding a menu bar widget
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加菜单栏小部件
- en: In this recipe, we will add a menu bar to the GUI we created in the previous
    recipe. We did this in a previous chapter with `tkinter`, but in this recipe,
    we will see how creating a menu bar with PyQt5 is much simpler and more intuitive.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将向前面配方中创建的GUI添加一个菜单栏。我们之前在 `tkinter` 中这样做过，但在这个配方中，我们将看到如何使用PyQt5创建菜单栏要简单得多，也更直观。
- en: We will also start creating PyQt5 **actions**, which add functionality to the
    GUI.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将开始创建PyQt5 **动作**，这些动作将为GUI添加功能。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will extend the GUI from the previous recipe, where we added a status bar.
    Read the previous recipe in order to understand the code we are writing here.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展前面配方中的GUI，其中我们添加了一个状态栏。为了理解我们在这里编写的代码，请阅读前面的配方。
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We will extend from the previous recipe, in which we added our first widget.
    Let''s see how we can do that:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展前面配方中的内容，其中我们添加了第一个小部件。让我们看看我们如何做到这一点：
- en: Create a new module and name it `GUI_PyQt5_menubar.py`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模块，并将其命名为 `GUI_PyQt5_menubar.py`。
- en: Copy the code from the previous recipe, which can be found in `GUI_PyQt5_statusbar.py`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制之前菜谱中的代码，该代码位于 `GUI_PyQt5_statusbar.py` 文件中。
- en: 'In the `add_widgets` method, add the following code:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `add_widgets` 方法中，添加以下代码：
- en: '[PRE12]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the preceding code. You will see a new menu bar with a menu item. Click
    on the File menu and then click on New. Look at the text in the status bar:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的代码。您将看到一个带有菜单项的新菜单栏。点击文件菜单，然后点击新建。查看状态栏中的文本：
- en: '![](img/9189f67f-e9a5-4ed1-8812-a30f269b0deb.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9189f67f-e9a5-4ed1-8812-a30f269b0deb.png)'
- en: Let's go behind the scenes to understand how this works.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解它是如何工作的。
- en: How it works...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, we are creating a new module, while in *step 2*, we are reusing
    the code from the previous recipe. In *step 3*, we add new code to the `add_widgets`
    method. Again, we are using `self` to access the `menuBar` class that is built
    into `QMainWindow`. After creating an instance of the menu bar, we use the `addMenu`
    method to create a menu. We use the `QAction` class to create a menu item and
    then we use the `addAction` method to add this menu item to the menu.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们创建了一个新模块，而在 *步骤 2* 中，我们重用了之前菜谱中的代码。在 *步骤 3* 中，我们在 `add_widgets`
    方法中添加了新代码。再次，我们使用 `self` 来访问内置在 `QMainWindow` 中的 `menuBar` 类。在创建菜单栏的实例后，我们使用 `addMenu`
    方法创建一个菜单。我们使用 `QAction` 类创建一个菜单项，然后我们使用 `addAction` 方法将此菜单项添加到菜单中。
- en: We use the `new_action` variable to call `setStatusTip`. Now, when we click
    on File | New, we can see the text displayed in the status bar, as shown in *step
    4*.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `new_action` 变量来调用 `setStatusTip`。现在，当我们点击文件 | 新建时，我们可以在状态栏中看到显示的文本，如图
    *步骤 4* 所示。
- en: Starting the PyQt5 Designer tool
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 PyQt5 设计器工具
- en: In this recipe, we will start to use the PyQt5 Designer tool. We will visually
    design our GUIs and drag and drop our widgets onto a window main form. This form
    can be a `QWidgets` form or a `QMainWindow` form.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将开始使用 PyQt5 设计器工具。我们将通过视觉设计我们的 GUI，并将小部件拖放到主窗口表单中。这个表单可以是 `QWidgets`
    表单或 `QMainWindow` 表单。
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have both PyQt5 and the Qt Designer tool installed on your
    computer. Please read the *Installing PyQt5* and *Installing the PyQt5 Designer
    tool* recipes to find out how to do this.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的计算机上安装 PyQt5 和 Qt 设计器工具。请阅读 *安装 PyQt5* 和 *安装 PyQt5 设计器工具* 菜谱，以了解如何进行此操作。
- en: How to do it...
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: You will need to run the `Designer.exe` file. Its location can be found in the
    *Installing the PyQt5 Designer too**l* recipe.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要运行 `Designer.exe` 文件。其位置可以在 *安装 PyQt5 设计器工具* 菜谱中找到。
- en: 'Let''s get started:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: Locate `Designer.exe` and double-click on it to run it.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位 `Designer.exe` 并双击它以运行。
- en: 'The Designer GUI will open, as follows:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计器 GUI 将以以下方式打开：
- en: '![](img/303ff0b8-8bce-4e9e-aba2-13ea74f4389c.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/303ff0b8-8bce-4e9e-aba2-13ea74f4389c.png)'
- en: In the New Form - Qt Designer dialog box, as shown in the preceding screenshot,
    change the default in the top-left corner to Main Window.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建表单 - Qt 设计器”对话框中，如图所示，将左上角默认值更改为主窗口。
- en: Click the Create button in the dialog.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击对话框中的创建按钮。
- en: 'You should see the Qt Designer change to the following view:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到 Qt 设计器变为以下视图：
- en: '![](img/6f64ab2b-bd1f-4988-a08e-49aed8943ccb.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f64ab2b-bd1f-4988-a08e-49aed8943ccb.png)'
- en: Let's go behind the scenes to understand what we are seeing.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解我们所看到的内容。
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, we are starting the Qt Designer by double-clicking the executable.
    In *step 2*, we can see that, by default, we are being presented with a dialog
    form that lets us create a new UI or open an existing UI.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们通过双击可执行文件来启动 Qt 设计器。在 *步骤 2* 中，我们可以看到，默认情况下，我们被提供了一个对话框表单，允许我们创建新的
    UI 或打开现有的 UI。
- en: The form directly behind the dialog box is dark grey, which means it is empty.
    This is actually the area in which we design our GUIs.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在对话框后面的表单是深灰色，这意味着它是空的。这实际上是我们在其中设计 GUI 的区域。
- en: On the left-hand side, we can see the Widget Box area. This area contains all
    of the PyQt5 widgets the Designer has access to. We will drag and drop widgets
    from this Widget Box onto the UI form.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，我们可以看到 Widget Box 区域。这个区域包含所有 Designer 可以访问的 PyQt5 小部件。我们将从 Widget Box 中拖放小部件到
    UI 表单中。
- en: 'On the right-hand side of the Designer, we have two windows: the Object Inspector
    and the Property Editor. Both are currently empty.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计器的右侧，我们有两个窗口：对象检查器和属性编辑器。目前它们都是空的。
- en: In *step 3*, we change the default setting to Main Window because we want to
    create a `QMainWindow` application. In the previous recipes, we did this manually,
    but here we are using the Designer to do this for us.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 3*中，我们将默认设置更改为主窗口，因为我们想创建一个`QMainWindow`应用程序。在之前的菜谱中，我们是手动完成这个操作的，但在这里我们使用设计器来为我们完成这个操作。
- en: In *step 4*, we click the Create button, which closes the dialog and creates
    a new Main Window form in the center area of the Designer. At the same time, the
    two windows on the right-hand side are no longer empty.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 4*中，我们点击创建按钮，这将关闭对话框并在设计器的中心区域创建一个新的主窗口表单。同时，右侧的两个窗口也不再为空。
- en: 'In *step 5*, we note that the classes and properties the Main Window has. In
    the Object Inspector, we can see four classes: QMainWindow, QWidget, QMenuBar,
    and QStatusBar. In the previous recipes, we manually added a menu bar and a status
    bar. Using the Designer tool when creating a new `QMainWindow`, we can see that
    the Designer has automatically added this functionality for us.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 5*中，我们注意到主窗口拥有的类和属性。在对象检查器中，我们可以看到四个类：QMainWindow、QWidget、QMenuBar 和 QStatusBar。在之前的菜谱中，我们手动添加了菜单栏和状态栏。在创建新的`QMainWindow`时使用设计器工具，我们可以看到设计器已经为我们自动添加了这项功能。
- en: In the Property Editor, we can see the geometry property for the centralwidget
    object. This is a QWidget and is the central part of the entire Main Window. The
    menubar and statusbar are located above and below the central form, respectively.
    The values for the geometry property default to 800 x 600, which will become the
    resultant size of our GUI when we run the code the way it is.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在属性编辑器中，我们可以看到中央小部件对象的几何形状属性。这是一个 QWidget，是整个主窗口的中心部分。菜单栏和状态栏分别位于中央表单的上方和下方。几何形状属性的默认值为
    800 x 600，这将成为我们以这种方式运行代码时的 GUI 的最终大小。
- en: We can use this property to change the size of the UI. Alternatively, we can
    drag the UI form to the center of the Designer to change its size. This will update
    this property so that it works in both ways.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个属性来更改 UI 的大小。或者，我们可以将 UI 表单拖到设计器的中心来更改其大小。这将更新这个属性，使其两种方式都有效。
- en: Take a look around the Designer to get a feel for how it works and what information
    it provides.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计器周围看看，以了解它是如何工作的以及它提供了哪些信息。
- en: Previewing the form within the PyQt5 Designer
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 PyQt5 设计器中预览表单
- en: In this recipe, we will learn how to preview the form we are creating with the
    Designer. This is a very useful feature the Designer offers us because we can
    make changes, undo them, preview them, and so on until we are happy with our design.
    At that point, we can save the design.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何预览我们使用设计器创建的表单。这是设计器为我们提供的一个非常有用的功能，因为我们可以在设计过程中进行更改、撤销更改、预览更改，等等，直到我们对设计满意为止。到那时，我们可以保存设计。
- en: Getting ready
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have both PyQt5 and the Qt Designer tool installed on your
    computer.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的计算机上安装 PyQt5 和 Qt Designer 工具。
- en: How to do it...
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Run `Designer.exe`, as explained in the previous recipe. We will change the
    Main Window size and then preview it. Follow these steps to learn how to preview
    the form:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前的菜谱中解释的，运行 `Designer.exe`。我们将更改主窗口的大小，然后预览它。按照以下步骤学习如何预览表单：
- en: Perform *steps 1* to *5* from the previous recipe.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一个菜谱中执行*步骤 1*到*步骤 5*。
- en: 'In the Property Editor, change the **geometry** property to `400` x `300`,
    as shown in the following screenshot:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性编辑器中，将**几何形状**属性更改为`400` x `300`，如图所示：
- en: '![](img/6257f04d-9346-41ad-b82e-421e91bf9d15.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6257f04d-9346-41ad-b82e-421e91bf9d15.png)'
- en: In the Designer menu, click Form | Preview... or press *Ctrl* + *R*.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设计器菜单中，点击表单 | 预览... 或按 *Ctrl* + *R*。
- en: 'You should see the following preview:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下预览：
- en: '![](img/8976689f-0b9b-4964-8898-4754ae1c9020.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8976689f-0b9b-4964-8898-4754ae1c9020.png)'
- en: Let's go behind the scenes to understand this code better.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解代码，以更好地理解它。
- en: How it works...
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, we are performing the same steps that we performed in the previous
    recipe. This brings us back to the same stage, because once we close the Designer
    tool, our UI will be lost if we do not save it. We haven't saved it so far.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1*中，我们正在执行与之前菜谱中相同的步骤。这使我们回到了相同的状态，因为我们一旦关闭设计器工具，如果没有保存我们的 UI，我们的 UI 将会丢失。我们到目前为止还没有保存。
- en: 'In *step 2*, we are using the Property Editor on the right-hand side of the
    Designer to change the size of our UI. Make sure you have QWidget selected in
    this editor and not QMainWindow. If your editor looks like the following screenshot,
    simply expand the QWidget properties by clicking the arrow to the left of it:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5247e83-d6d2-4ffe-8b5f-cfc282063337.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: 'In *step 3*, we are previewing our current UI design. There are two ways to
    do this: clicking the menu item and pressing the key shortcut.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 4* shows the resultant UI. Note the word [Preview] in the title bar of
    the window.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Saving the PyQt5 Designer form
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add the same menu and menu item that we created previously.
    We will save our UI after previewing it.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have both PyQt5 and the Qt Designer tool installed on your
    computer.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run `Designer.exe`, as explained in the previous recipe. In order to create
    the menu and menu item, we can simply type into the Main Window within the Designer.
    Moving on, perform the following steps:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Perform *step 1* and *step 2* from the previous recipe.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Designer, inside MainWindow - untitled*, type `File` into the Type Here
    menu, as shown in the following screenshot:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b8a918e-a119-4327-b39e-fc3422a34036.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
- en: 'Click on File, type `New`, and press the *Enter* key to create a menu item:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c0e21c0b-67c7-4828-9130-1cdc84df57cc.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: 'Press *Ctrl* + *R* to preview the UI:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/43f6436c-4a8e-4458-8e6b-c8597bf8e688.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: 'Close the preview and save the design in the Designer as `Designer_First_UI.ui`,
    as shown in the following screenshot:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e70c9cde-6b61-44fc-9e09-29ee2659399a.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes so that we can understand these steps better.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are performing the same steps that we performed in the previous
    recipe. In *step 2*, we are creating a File menu by simply typing into the menu
    bar the Designer has provided for us. In *step 3*, we add a menu item to this
    menu, also simply by typing into Type Here below our new menu.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we preview our UI design, while in *step 5*, we are actually saving
    our design for the first time.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Note how the extension of UIs we design in the Designer is `.ui`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Converting Designer .ui code into .py code
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at the `.ui` code we saved in the previous recipe
    when we saved our design in the Qt Designer tool. After that, we will use a utility
    we installed during the installation of the PyQt5 tools that will convert the
    `ui` code into Python `py` code.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be specifically using the `pyuic5` tool. You can think of the name
    as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Generate Python **py** code from the Designer **ui** code by **c**onverting
    it, using PyQt version **5**.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: If you are trying to find where `pyuic5.exe` is located, it actually gets installed
    into the Python `scripts` subfolder. On my installation, this is `C:\Python37\Scripts\pyuic5.exe`.
    Make sure your `PATH` is set to the `Scripts` folder in order to successfully
    run it.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Let's get ready.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the PyQt5 tools installed on your computer.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will open the `.ui` code we generated in the previous recipe when
    we saved our UI in the Designer. Now, follow these steps:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Open `Designer_First_UI.ui` from the previous recipe in a word editor such as
    Notepad++.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at the `.ui` code:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9bba826f-01c7-46ba-abd0-14faa90c44d9.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
- en: Navigate to the location on your hard drive where you saved `Designer_First_UI.ui`
    and open a Windows PowerShell or Command Prompt window.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the `pyuic5 -x -o Designer_First_UI.py Designer_First_UI.ui` command
    and press the *Enter* key as shown in the following screenshot:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a8f5deb-6f5a-4957-b721-df89d5faaa73.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
- en: 'Run the `ls` command in PowerShell or the `dir` command in a Command Prompt
    window to see the newly generated `.py` file. Alternatively, use Windows File
    Explorer to see the new file:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8273b02f-6773-40b0-a071-aec4524b356a.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand these conversion steps better.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *steps 1* and *2*, we are opening the `.ui` file that got saved in the Designer.
    We are using Notepad++ or any other word editor for this. The resultant `.ui`
    output is clearly XML.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: This is definitely not Python code. We have to convert the XML into Python code,
    which we do in *steps 3* and *4*.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: The `-x` argument after `pyuic5.exe` makes the resultant Python module executable,
    while `-o` specifies the name of the output file. We have chosen the same name
    as the `.ui` file but with a `.py` extension. We can choose any name we wish,
    as long as it has a `.py` extension. The `pyuic5` utility also has the capability
    to convert more than one `.ui` file into a single `.py` file, so being able to
    choose a name comes in handy.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: When running `pyuic5.exe`, we do not get any output if the conversion was successful.
    If we do not get any errors, this means the conversion was successful.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we verify that we have the new output file, that is, `Designer_First_UI.py`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the converted Designer code
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we converted the Designer UI code into Python code using
    the `pyuic5` converter tool. In this recipe, we will look at the generated code.
    Every GUI we create with the Designer needs to be converted and any changes we
    make will overwrite all the previous code. This will allow us to understand how
    to decouple UI code from the functionality we will add to the UI using a modular
    approach in Python.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the converted code from the previous recipe available.
    If you did not follow the preceding recipes in this chapter, simply download the
    necessary code from the Packt website for this book. The website provides all
    of the code for this book and you can simply click one button to download it all
    via GitHub.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will need to open the `.py` code we converted from the `.ui` code to understand
    its structure. Now that we''ve done this, we can follow these steps:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Open `Designer_First_UI.py` from the previous recipe.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the top section of the auto generated module:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8ad4514-e1ca-4c76-99a6-7e9f66d324a0.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
- en: 'Look at the import statements just below the preceding section:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd3d1eb8-0d3e-46d5-905d-55402fe5f319.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
- en: 'Look at the class that was created and its first method:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/caf0a228-8780-4249-91c6-4174f2635226.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
- en: 'Look at the second method, which is below the first method within the class:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0089ad4-3fc4-4d43-bb7f-4a3d5ed1e692.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, look at the `"__main__"` section at the bottom of the code:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8bc6c967-b11f-45ef-b2fa-0b82990e6bf0.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
- en: 'Run this code. The result should be a running Python GUI:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f8f6f80-df98-4f38-93cd-adb95f33eb22.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to better understand the code.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we open the converted UI as a Python module. In *step 2*, we can
    see an important warning.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: I strongly recommend that you take this warning **seriously**. If you add code
    to this module and regenerate the code via `pyuic5.exe` at a later date, all of
    your changes will indeed be **lost**!
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 3* shows us the three import statements. These are always being imported,
    although `QtGui` is not required, as can be seen by the yellow warning and underline
    in my Eclipse/PyDev editor.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 4* shows us the class that''s always created. It is immediately followed
    by the `setupUi` method. There is no `__init__` method in between. The code in
    this method is very important for us because we can access the class attributes
    via the generated names.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we note the `retranslateUi` method. This method is also auto generated.
    By taking a closer look, we can find the names of the menu and menu items we added
    during the UI design phase.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 6* shows us the `"__main__"` section at the bottom of the code. The important
    thing to know about this is that this section is only created when we specify
    the `-x` option during the `pyuic5` conversion. If we leave this option out, we
    won''t see this section.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: In *step 7*, we run our GUI. Note how we are no longer *previewing* the UI.
    This is real and pure Python code now.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Building a modular GUI design
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous recipe, all of the auto generated code of the UI we
    are designing with the Designer will be overwritten as soon as we rerun the `pyuic5`
    utility. This is a good thing because it encourages us to design our Python modules
    in a modular fashion (hence the name *module*).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will import the generated UI from a new Python module and
    add functionality within it. Whenever we rerun the `pyuic5` utility, our code
    will not get accidentally overwritten, because we are separating the logic from
    the UI.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '**Separation of Concerns** (**SoC**) is a software term that refers to the
    benefits of good, modular design.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: So, let's write some code!
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need the converted code from the previous recipe, which can be found
    in `Designer_First_UI.py`.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a new module in which we will add functionality to our UI code.
    We will import the UI we created in the Qt Designer that we converted into Python
    code. Let''s get started:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Python module and name it `Designer_GUI_modular.py`.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this module, write the following line of code:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that you might have to adjust the `Ch10_Code` prefix to match your location.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Run the preceding code. You shouldn't get any errors.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, copy the `"__main__"` section from `Designer_First_UI.py` into this new
    module.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will also need to import `QtWidgets` to make this work:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, run the preceding code. You should see the GUI we designed and previously
    ran stand-alone:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/67c63c36-5288-46cc-b813-d7f227a4b965.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to better understand the code.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we create a new Python module. In *step 2*, all we do is import
    the UI into the Python generated code.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '**This is very important, because it shows the principle of SoC!**'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we run this one line of code. No GUI will be visible, but the important
    thing here is that we don't get any errors. If we get some errors, it typically
    means that our import statement failed because our module could not locate the
    module we are trying to import.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 4* copies the `"__main__"` section from our converted `.py` file. While
    the module runs by itself, when we import it, we also have to import `QtWidgets`,
    because when we import modules, the import statements of those modules do not
    automatically get imported. We do this in *step 5*. In *step 6*, we have our GUI
    up and running, but this time via a modular approach.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Adding another menu item to our menu bar
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a second menu item to our GUI. We will use the Designer
    and then regenerate the UI code. After that, we will attach functionality to the
    menu item from our modular Python module. The Designer has certain capabilities
    so that it can add this functionality as well, but here, we are simply keeping
    the UI code separated from the functionality of our GUI.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the UI code from the previous recipes available. All the
    other recipes' prerequisites apply to this recipe as well.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will enhance our UI design from a previous recipe by adding a second menu
    item. After that, we will convert the UI code into Python code, like we did previously.
    Let''s get started:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: In the Qt Designer, open `Designer_First_UI.ui`.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Below the File | New menu item, create another menu item and name it `Exit`:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7561525e-b08d-4703-bfc4-93d6b5c1644e.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
- en: 'Type this new menu item into the Type Here area. It will look like this:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a97af1d2-f8b1-413a-b44d-e70501e0fd23.png)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
- en: 'Press the *Enter* key and save the `.ui` file. Next, preview the UI:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/edb428a3-0e3d-4697-80ac-f65b508b7d3b.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
- en: Run the `pyuic5.exe` utility to convert the `.ui` file into a `.py` file. Let's
    save it under a new name to distinguish it from our original module.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a PowerShell or Command Prompt window, type `pyuic5.exe -x -o Designer_First_UI_Exit.py
    Designer_First_UI.ui` and then press the *Enter* key:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65f16567-d33f-42c0-a66e-842529fe7425.png)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
- en: You should now have a new Python module named `Designer_First_UI_Exit.py`.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python module and name it `Designer_GUI_modular_exit.py.` Import
    the newly converted file into it. Here is what the code looks like:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the GUI and click on the File menu to see the new Exit menu item. The result
    will be the same one we got in *step 3* when we previewed the running GUI in the
    Designer before we converted it:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/87178407-ac82-4c5a-833a-a7bdca54cac1.png)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand what's going on.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are opening the `.ui` design file we created previously. We
    aren't saving it under a different name, so we are basically adding a new menu
    item to our existing design.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we use the Designer tool to add a new menu item and name it `Exit`.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we press the *Enter* key, which, quite honestly, sounds very trivial,
    but if we don't do this, our new item will not be saved. We also save the `.ui`
    file under the same name, overwriting our previous version. This is okay because
    we are simply adding some small functionality to the UI.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we are running the `pyuic5.exe` utility to turn the XML of the
    `.ui` file into Python code. This time, however, we are giving the resultant `.py`
    output file a different name than the `.ui` file. We do this so that we don't
    overwrite our previous Python module.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we create a new Python module and import the converted `.ui` into
    it. We have done this before. Finally, in *step 6*, we run the pure Python code
    so that we can see our new menu item.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next recipe, we will add functionality to our new Exit menu item so that
    when we click on it, our GUI will indeed exit and the application will end.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: Connecting functionality to the Exit menu item
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add functionality to the Exit menu item we created in
    the previous recipe. So far, we have two menu items, but they aren't interactive.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will learn how to add functionality outside of the UI by using our
    modular approach to coding. We will also improve our code by transforming the
    `"__main__"` self-testing section into a class of its own.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the `.ui` code from the previous recipe available. All
    the other prerequisites apply to this recipe as well.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add functionality to our GUI using the modular approach of SoC. To
    make our code more robust, we will create a new class. Let''s get started:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Python module and name it `Designer_GUI_modular_exit_class.py`.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following import statements into the module:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a new Python class with an `__init__` method:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a method that updates the status bar and connects an action to the menu
    item:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Write a callback method that closes the GUI:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Write a class method that updates the title of the GUI:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create an instance of the class in the `"__main__"` section:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, let's see how this works.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are creating a new Python module, while in *step 2*, we are
    writing the import statements we need at the top of the module.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: Writing all the import statements at the top of a module is a Python best practice
    and is highly recommended.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we are creating our own Python class and starting with the typical
    initializer. Toward the end of the initializer method, we are calling methods
    that we are creating below the initializer. Because we are doing it like this,
    all we have to do is instantiate the class, and the methods will run without us
    having to call any particular methods on the class instance after the creation
    of the class instance (object).
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 4*, we are accessing the name of our menu item via `self.ui.actionExit`.
    We can use `self.ui` because, in the `"__init__"` method, we created an instance
    of the `MainWindow` and saved it as such. This is the line of code:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How come we use `actionExit`? We have to look at the auto generated code to
    find this object name.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: 'We designed our UI in the Designer and the Designer chose a name for us. We
    could change that object name if we wish, but it isn''t necessary. We just have
    to find the name we are looking for. So, let''s look at `Designer_First_UI_Exit.py`:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51694739-6d4e-412e-8399-877b43b65141.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
- en: We can find the `"actionExit"` name in this file.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also look it up in Qt Designer in the Object Inspector:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cedb6d6-b2ca-46db-a45b-cc3320645869.png)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
- en: Either way works.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Also in *step 4*, we are achieving the desired functionality, that is, closing
    our GUI via the Exit menu item.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: 'We do this in the following line of code, which calls the method we create
    in *step 5*:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The very important thing to note is that we call `triggered.connect(**<method
    name>**)` to achieve this functionality. This connects the *action* to the event
    of the menu item being *triggered*.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: This is PyQt5 syntax and semantics.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, in order to close the GUI, we call the built-in `close` method
    on `MainWindow`. We saved a reference to `MainWindow` in the `"__init__"` method
    so that we can reference it from within this method, within the same Python class.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: In *step 6*, we use the same reference of `self.MainWindow` to give our GUI
    window a title.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: In *step 7*, we use Python's self-testing `"__main__"` section to create a class
    instance. This is all we need to do to run our GUI.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we click on the `Exit` menu item, our GUI will exit.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Tab Widget via the Designer
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a Tab Widget to our UI using the Designer tool.
    Then, we will convert the `.ui` code into Python code. This will serve us well
    in preparation for adding more widgets and functionality to our GUI.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-399
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the `.ui` code from the previous recipe available. All
    the other prerequisites apply to this recipe as well.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add a Tab Widget to our UI design by using the Designer. It is as simple
    as dragging and dropping. Let''s get started:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: In Qt Designer, open `Designer_First_UI.ui` and save it as `Designer_Second_UI.ui`.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the left-hand side within the Designer, drag a Tab Widget onto the main
    form:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/004828a0-d8ab-48d9-820e-9460bd7ecb1f.png)'
  id: totrans-405
  prefs: []
  type: TYPE_IMG
- en: Resize the Tab Widget to make it fill up most of the `MainWindow`, as shown
    in the preceding screenshot.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the `.ui` design and preview it:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bfa45e25-bdc1-476e-8c8a-8522c976394d.png)'
  id: totrans-408
  prefs: []
  type: TYPE_IMG
- en: Click on Tab 1 and Tab 2.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Exit menu item.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `pyuic5.exe` tool to convert the `.ui` code into Python code.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the converted Python UI code.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are opening our existing `.ui` file in the Qt Designer, but
    this time, we are saving it under a different filename. Saving the different versions
    of our UI design under different names is typically a good idea go back to prior
    versions if our UI design messes up.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Our nice UI design being accidentally messed up can happen quite easily, so
    make sure you make backups of your `.ui` files. You can also use a version control
    system such as GitHub to back up your code.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we are using the fantastic drag and drop capability of the Designer
    to visually (and physically) move a widget onto the canvas form. We can simply
    use the resize handles to adjust the widget any way we want. We do this in *step
    3*.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: Look at the Object Inspector on the right-hand side of the Designer and note
    the new Tab Widget, as well as the two tabs, object names, and PyQt5 classes they
    belong to.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: You may also notice a star (*) to the right of the `MainWindow` title. This
    means that we haven't saved the design yet. Pay attention to this because, if
    you close the UI design without saving it, you will lose your beautiful design.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we save our UI design and preview it.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we can click between the two new tabs. Note how the color of each
    tab defaults to white and looks different in preview mode than it does in design
    mode.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 6* will *not* close the UI because the functionality for closing the
    UI is decoupled from the UI. We wrote the code so that we could close the GUI
    in a different Python module.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 7* is mainly left as an exercise for you.'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Get used to making small changes in the Designer, converting the code, importing
    it, running it, making more changes in the Designer, and so on. Get used to this
    rhythm of GUI development when you use the Designer tool.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: In *step 8*, we run the code. Using the `-x` option creates the self-testing
    `"__main__"` section, so you should be able to run the converted Python code without
    having to import it.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: Using layouts in the Designer
  id: totrans-425
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore the very important concept of using layouts
    with PyQt5 and we will do so using the Designer tool. In `tkinter`, we explored
    Label Frames. In PyQt5, horizontal and vertical layouts are the main ways in which
    we can design our UI.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: This can get a little bit tricky, so, as I mentioned previously, make sure you
    back up your UI design often so that, when things turn out ugly, you have a foundation
    to go back to.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipe, we will place widgets into these layouts.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the `.ui` code from the previous recipe available. All
    the other prerequisites apply to this recipe as well.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-431
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add two horizontal layouts to our Main Window, which we will do using
    drag and drop inside the Qt Designer. Let''s get started:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: In the Designer, open `Designer_Second_UI.ui` and save it as `Designer_Second_UI_layout.ui`.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag one horizontal layout toward the bottom of the form and resize it.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag a second horizontal layout and place it above the first layout:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1678874-5b67-4a0c-9f27-d86109ca5cdd.png)'
  id: totrans-436
  prefs: []
  type: TYPE_IMG
- en: Your `MainWindow` will now look like the preceding screenshot.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: Save the design, convert it into Python, and then run it to make sure you do
    not get any errors. The code should run, but note that you won't see any difference
    in the resultant GUI.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-439
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are saving our UI design under a different name, practically
    making a backup.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: In *steps 2* and *3*, we are visually dragging horizontal layouts onto the main
    form. You can see them in the preceding screenshot, but you won't notice any difference
    in preview mode.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: One very important thing to note is the names and classes in the Object Inspector
    in the top-right corner of the Designer, as well the properties that are automatically
    made available to us in the Property Editor in the bottom-right corner of the
    Designer.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: Also, note how we are placing these widgets in Tab 1\. Tab 2 is still empty.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: What's really cool about using these PyQt5 layouts is that, once we place widgets
    into these layouts, we can move the entire group of widgets by simply moving the
    layout. We can even hide them all, making them invisible!
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we are making sure that we know the process of making changes in
    the Designer and then converting it into Python code. If running the code doesn't
    work, something might have gone wrong. It's good to make small changes and then
    test your code.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: Adding buttons and labels in the Designer
  id: totrans-446
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a button and a label, both of which we will place
    in the layouts we added to our UI design in the previous recipe.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-448
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the `.ui` code from the previous recipe available. All
    the other prerequisites apply to this recipe as well.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add a button and a label to our UI design. We will also use the Designer
    to connect the two, creating some of the available functionality directly within
    the Designer. Let''s take a look at the steps:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: In the Designer, open `Designer_Second_UI_layout.ui` and save it as `Designer_Second_UI_layout_button.ui`.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag a `PushButton` from the left-hand side into the lower horizontal layout:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0eee7c92-e2db-414f-8579-c8f744a4c879.png)'
  id: totrans-454
  prefs: []
  type: TYPE_IMG
- en: Note how the button automatically adjusts itself to the left and right edges
    of the horizontal layout.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: 'Save and preview the UI. Click the button during the preview run of the UI:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c5f3322-fece-486a-a153-bbcedc8cc733.png)'
  id: totrans-457
  prefs: []
  type: TYPE_IMG
- en: When clicking it, the button looks pressed in and comes with a default name
    we can change.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag a Label widget from the left-hand side and place it into the top horizontal
    layout:'
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe137fae-d910-41ea-82fd-b28fbd2c1d56.png)'
  id: totrans-460
  prefs: []
  type: TYPE_IMG
- en: 'Save the `.ui` design and preview it:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1446a269-ac53-4715-93d5-05a840f621ed.png)'
  id: totrans-462
  prefs: []
  type: TYPE_IMG
- en: Next, we will connect the `PushButton` to the label within the Designer.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the *F4* key to get into the signals/slots editing mode or use the Edit
    menu within the Designer. Drag a signal/slot connection from the button to the
    label. The Designer will now look like this:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd7d1ffe-f487-4b55-8362-66d76e109ecf.png)'
  id: totrans-465
  prefs: []
  type: TYPE_IMG
- en: 'In the **Configure Connection** pop-up dialog, click on `clicked()` in the
    top-left corner. This will enable the right-hand side of the dialog box. Select
    the `clear()` method:'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/318b9508-6c5b-432c-adb8-b7fff1c9d4d6.png)'
  id: totrans-467
  prefs: []
  type: TYPE_IMG
- en: 'Press OK and save the `.ui` file. You will now see a connection between the
    button and the label:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c7f1bd4-fcb4-4b25-b139-5a4ecf4aa9d6.png)'
  id: totrans-469
  prefs: []
  type: TYPE_IMG
- en: Preview the `.ui` code and click the button. You will notice that the label
    text is cleared.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the `.ui` code into Python code using `pyuic5.exe`, as we did previously.
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's look at the converted code to understand how this functionality of connecting
    the button to clear the label works.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-473
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are saving the UI design under a new name, while in *step 2*,
    we are dragging and dropping a `PushButton` onto the `MainWindow` form. By itself,
    this button doesn't do anything, but there are a few methods that are available
    within the Designer that can add functionality to it.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we are previewing the UI. Note that the button was automatically
    stretched to fill in the entire horizontal layout box. Vertically, it is only
    as tall as it needs to be to display its default text. These are properties that
    we can change in the Property Editor.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we are visually dragging a text label widget onto the `MainWindow`.
    This widget doesn't attach itself to the left- and right-hand sides of the horizontal
    layout, because it comes with a predefined width.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: It attaches itself to the left-hand side. In the Property Editor, we can change
    this if we wish to.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 5* gives us a preview of our UI running from within the Designer.'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 6* brings us into the Signal/Slot Editor. Signals and slots are peculiar
    to PyQt5\. The following screenshot shows you how to enable this editor:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17fce7e9-d052-4782-840f-64385d10d04f.png)'
  id: totrans-480
  prefs: []
  type: TYPE_IMG
- en: 'You can find the editor under the View menu. This opens a new window to the
    right, below the Property Editor:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ce3ce8b-f9cd-46b4-b588-3f8b878636f5.png)'
  id: totrans-482
  prefs: []
  type: TYPE_IMG
- en: You can see that the `pushButton` object is the Sender, the Signal is `clicked()`,
    the Receiver is `label`, and the Slot is `clear()`.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 7* shows us some of the functionality that becomes available when we
    connect signals and slots between `PushButton` and the `Label` widget. The `clear()`
    method is built in, so we can simply select it to clear the label whenever we
    push the button.'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: In *step 8*, we can see that the editor changed after we clicked OK to connect
    the two widgets.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: Because the functionality has been added within the Designer, when we preview
    our UI, it actually works. Clicking the button does indeed clear the label, as
    can be seen in *step 9*.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: 'When we convert our `.ui` code into Python code, we get the following output:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d1c639d-51f9-4b9b-b0cc-6e0d913ebd75.png)'
  id: totrans-488
  prefs: []
  type: TYPE_IMG
- en: Note how the `pushButton` has the same syntax of `clicked.connect(<method>)`,
    which is what we had outside of the Designer when we enabled the Exit menu item.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-490
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PyQt5 GUI framework is a very exciting tool to work with. I especially enjoy
    the Qt Designer tool.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: Together with Packt, I have created several *Python GUI Programming Recipes
    using PyQt5* video courses.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: One course is especially focused on PyQt5 GUI development. It is a little over
    four hours long.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot of my course, which can be found at [https://www.packtpub.com/application-development/python-gui-programming-recipes-using-pyqt5-video](https://www.packtpub.com/application-development/python-gui-programming-recipes-using-pyqt5-video):'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0ba4373-02dc-496b-9ccf-2bcd6aa5d02b.png)'
  id: totrans-495
  prefs: []
  type: TYPE_IMG
- en: 'If this is too long for you (I am covering a lot of PyQt5 material in this
    course), there is also a shorter course, which focuses on `tkinter` and PyQt5,
    which can be found at [https://www.packtpub.com/application-development/hands-python-3x-gui-programming-video](https://www.packtpub.com/application-development/hands-python-3x-gui-programming-video):'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e32cf5b-fe22-4123-ad20-60cc5a9547a3.png)'
  id: totrans-497
  prefs: []
  type: TYPE_IMG
- en: <q>I wish</q> you <q>the *best of luck* in your software development efforts.</q><q>Python
    is a</q> wonderful <q>programming language.</q>
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
