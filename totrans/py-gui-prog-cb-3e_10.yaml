- en: Building GUIs with PyQt5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will introduce another Python GUI toolkit, named PyQt5,
    which is truly excellent. PyQt5 has similar capabilities to `tkinter` but comes
    with a very nice Visual Designer tool that lets us drag and drop widgets onto
    a form. We will also use another tool that converts the Designer `.ui` code into
    Python code.
  prefs: []
  type: TYPE_NORMAL
- en: After visually designing our GUI in the Designer and then converting the code
    into Python code, we will continue using pure Python to add functionality to our
    widgets. First, we will install PyQt5 and the Designer before writing a simple
    PyQt5 GUI without the Designer. After that, we will visually design our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing how to use PyQt5, and the Visual Designer tool and how to convert `.ui`
    into `.py` code will add great skills to your Python GUI development toolbox.
    From this, you will learn how to create powerful and complex GUIs, as well as
    how to visually design the UI and then decouple the functionality from the design
    using a modular approach to software development.
  prefs: []
  type: TYPE_NORMAL
- en: This also gives you the opportunity to compare the different GUI frameworks
    we have been showing you throughout this book, which will ultimately lead to you
    choosing one to explore in more depth.
  prefs: []
  type: TYPE_NORMAL
- en: I have created two Packt video courses that focus very deeply on Python GUI
    programming with `tkinter` and **PyQt5**. You can find them on the Packt website.
    I will also provide links to them at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot provides an overview of the Python modules you will
    need for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e36a06f-ed01-492a-875d-037004f8bee0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will be covering the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing PyQt5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the PyQt5 Designer tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing our first PyQt5 GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the title of the GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring our code with object-oriented programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inheriting from QMainWindow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a status bar widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a menu bar widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting the PyQt5 Designer tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previewing the form within the PyQt5 Designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving the PyQt5 Designer form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting Designer `.ui` code into `.py` code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the converted Designer code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a modular GUI design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding another menu item to our menu bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting functionality to the Exit menu item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a Tab Widget via the Designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using layouts in the Designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding buttons and labels in the Designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PyQt5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will install the PyQt5 GUI framework. We will be using Python's
    `pip` tool to download the PyQt5 wheel format installer.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the official documentation at the following link: [https://www.riverbankcomputing.com/static/Docs/PyQt5/installation.html](https://www.riverbankcomputing.com/static/Docs/PyQt5/installation.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to have Python's `pip` tool installed on your computer. You probably
    already have it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how we can install PyQt5 using Python''s `pip` tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Windows PowerShell window or Command Prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the `pip install pyqt5` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the installation by running `pip list`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In *step 1*, we open a PowerShell window, and in *step 2*, we use Python''s
    `pip` tool. After pressing the *Enter* key to run the command in *step 3*, the
    installation will start and run to completion. You will see output similar to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8a36733-35ee-4a68-b761-b1958e85d981.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In *step 4*, we use `pip` again to verify that we have installed PyQt5 successfully.
    The output will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75ac526b-95ad-4022-855a-78156cfa0b59.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You may see more packages installed on your computer. The important thing to
    check is that the PyQt5 package is listed. The version number that's been installed
    is listed to the right of the package's name.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the PyQt5 Designer tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will install the PyQt5 Designer tool. We will do this by
    using Python's `pip` tool. The steps are very similar to the previous recipe's,
    where we installed PyQt5.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to have Python's `pip` tool installed on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how we can install the PyQt5 Designer using Python''s `pip` tool.
    Note that the package includes more than just the Designer tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Windows PowerShell window or Command Prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the installation by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Locate the `Designer.exe` file on your hard drive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In *step 1*, we open a PowerShell window and in *step 2*, we use Python''s
    `pip` tool. After pressing the *Enter* key to run the command in *step 3*, the
    installation will start and run to completion. You will see output similar to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87d1907b-1fa0-4b95-b857-f39f5c09cdf3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Please note that, in the preceding screenshot, the installation ran into an
    error. I don't know why, but sometimes installations do run into errors. I simply
    reran the installation, and this time it ran without any errors. The necessary
    tools, including the Designer, were installed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 4* is the exact same step as in the previous recipe, and the output is
    exactly the same. Please refer to the output screenshot of the *Installing PyQt5*
    recipe for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we want to find the `Designer.exe` file, which is the Visual Designer
    tool we will use in later recipes. After finding it, you will want to make a shortcut
    to it on your desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of where `Designer.exe` is installed on my computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bd875d4-bcfc-4af3-818e-c8743a4abe30.png)'
  prefs: []
  type: TYPE_IMG
- en: Your location might be different, but this gives you an idea of where to look
    for the tool.
  prefs: []
  type: TYPE_NORMAL
- en: Writing our first PyQt5 GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be writing our first PyQt5 GUI. We will be using PyQt5
    directly without using the Designer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to have PyQt5 installed. See the *Installing PyQt5* recipe to find
    out how to install PyQt5\. Use your favorite Python editor to write the code.
    If you are not familiar with modern IDEs such as Eclipse, PyCharm, and so on,
    you can use the IDLE editor, which ships with Python.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how we can build our first GUI with PyQt5:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your favorite Python editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Python module and save it as `First_GUI_PyQt5.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start by typing in the following import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following four lines of code below the import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding code. Maximize, minimize, and resize the resultant GUI. Click
    the Χ symbol in the top-right corner to close the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0bf4df51-979f-466a-8144-bca6a98b488e.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand how this works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *steps 1* and *2*, we create a new Python module. In *step 3*, we write some
    import statements.
  prefs: []
  type: TYPE_NORMAL
- en: We import `sys` so that we can pass command-line arguments into our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: From the PyQt5 package, we import the `QApplication` and `QWidget` classes,
    both of which reside within the `QtWidgets` module.
  prefs: []
  type: TYPE_NORMAL
- en: We create an instance of the `QApplication` class, passing in `sys.argv` so
    that we can pass in additional command-line arguments. We save this instance in
    the `app` variable. This will create our application.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we create an instance of the `QWidget` class, which becomes our GUI. We
    save this instance in a local variable named `gui`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we call the `show` method on our `gui` class instance to make the GUI
    visible.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we call the `exec_` method on our application class instance, which
    executes our application. We wrap the call into `sys.exit` in order to catch any
    exceptions that might occur. If an exception occurs, this will make sure that
    our Python application exits cleanly and does not crash.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the title of the GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will change the title of the GUI we created in the previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using the code from the previous recipe, so either type it into a
    module of your own or download it from the Packt website for this book.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will enhance the GUI from the previous recipe by changing the title of this
    GUI. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `First_GUI_PyQt5.py` and save it as `GUI_PyQt5_title.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code into the middle of the existing code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code and note the new title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93a3ebf1-acd2-4497-a95f-ac60e51b7839.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand how this works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are reusing the code from the previous recipe by saving it under
    a new name.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we are calling the `setWindowTitle` method on our `gui` instance,
    passing it as a string. This string becomes our new title when we run the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In *step 3*, we run the code and see that our window title now displays PyQt5
    GUI instead of python.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One very important thing to note in the preceding code is the place where we
    are calling `setWindowTitle`, because this shows us the typical code structure
    every PyQt5 application follows.
  prefs: []
  type: TYPE_NORMAL
- en: After the import statements, at the top, we create a PyQt5 application. At the
    bottom, we execute the application. All of the functionality we add to the GUI
    resides in between the top and bottom pieces of code.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring our code into object-oriented programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will refactor our code into **object-oriented programming**
    (**OOP**) using classes. This is in preparation for the PyQt5 Designer code and
    the recipes we will be building later in this chapter. In this recipe, the resultant
    output of the GUI will look the same, but the code will be different.
  prefs: []
  type: TYPE_NORMAL
- en: We will build a class that inherits from `QWidget`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be refactoring the code from the previous recipe, so make sure you understand
    that code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will turn our previous, procedural code into object-oriented code. Here
    is how we do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and name it `GUI_PyQt5_refactored_OOP.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start by writing the same import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class that inherits from `QWidget`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a Python self-testing section under the preceding code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Run the application. The resultant GUI will be identical to the one from the
    previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are creating a new module, while in *step 2*, we are adding
    the same import statements we used in the previous recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we are creating a new class that inherits from `QWidget`. We call
    `super` to initialize the parent, which, in turn, creates our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we create and call a class method that sets the window title.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we are using Python's self-testing capabilities to create the PyQt5
    application and the GUI, and then we are executing the code.
  prefs: []
  type: TYPE_NORMAL
- en: Running this code creates the same GUI as in the previous recipe, but our code
    is now using OOP.
  prefs: []
  type: TYPE_NORMAL
- en: Inheriting from QMainWindow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen how to inherit from PyQt5 classes, in this recipe, we
    will inherit from `QMainWindow`. This gives us more options when it comes to designing
    our GUI compared to inheriting from `QWidgets`. In addition to setting the GUI
    window title, we will also give it a certain size.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read through the previous recipe so that you understand the code we are writing
    here.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will inherit from `QMainWindow` and specify the size of the GUI. Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and name it `GUI_PyQt5_QMainWindow.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the following import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the following class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Add the same `'__main__'` code that was shown in the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code. The resultant GUI will look the same as it did in the previous
    two recipes, but it will be smaller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are creating a new module, while in *step 2*, we are writing
    the import statements. This time, however, we are not importing `QWidgets` – we
    are importing `QMainWindow` instead. In *step 3*, we are creating a new class
    that inherits from `QMainWindow`. As before, we set the title in the method we
    are calling. However, in addition to setting the title, we are also giving our
    GUI a specific size. We do this by calling the `resize` method, passing in the
    width and height.
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 4* and *5* are the same as they were in the previous recipe, but the
    resultant GUI is now the size we specified in the `resize` method.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a status bar widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will start to add widgets to the GUI we created previously.
    We will start by adding a status bar. This is a widget that comes built in with
    PyQt5, so all we have to do is use it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will extend the GUI from the previous recipe, so read the previous recipe
    in order to understand the code we are writing here.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and name it `GUI_PyQt5_statusbar.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write the exact same code from the previous recipe, which can be found in `GUI_PyQt5_QMainWindow.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new method, `add_widgets`, within the class and call it, as shown
    in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding code and note the new status bar at the bottom of the GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/934b13c7-e45d-4361-8280-332a6c1a5f0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand how this works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are creating a new module, while in *step 2*, we are reusing
    the code from the previous recipe. In *step 3*, we create a new method, `add_widget`,
    in which we are creating the PyQt5 built-in status bar. We are using `self` to
    access this widget since the `statusBar` widget is part of `QMainWindow`. This
    is one of the reasons we are inheriting from `QMainWindow` instead of `QWidgets`
    to build our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: After creating the status bar, we immediately call the `showMessage` method
    on it. We could have done this in two steps, that is, creating the status bar
    and saving the instance of this class in a local variable, and then using the
    variable to call `showMessage` on it. Here, we streamlined the code into one line.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a menu bar widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a menu bar to the GUI we created in the previous
    recipe. We did this in a previous chapter with `tkinter`, but in this recipe,
    we will see how creating a menu bar with PyQt5 is much simpler and more intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: We will also start creating PyQt5 **actions**, which add functionality to the
    GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will extend the GUI from the previous recipe, where we added a status bar.
    Read the previous recipe in order to understand the code we are writing here.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will extend from the previous recipe, in which we added our first widget.
    Let''s see how we can do that:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new module and name it `GUI_PyQt5_menubar.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code from the previous recipe, which can be found in `GUI_PyQt5_statusbar.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `add_widgets` method, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding code. You will see a new menu bar with a menu item. Click
    on the File menu and then click on New. Look at the text in the status bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9189f67f-e9a5-4ed1-8812-a30f269b0deb.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand how this works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are creating a new module, while in *step 2*, we are reusing
    the code from the previous recipe. In *step 3*, we add new code to the `add_widgets`
    method. Again, we are using `self` to access the `menuBar` class that is built
    into `QMainWindow`. After creating an instance of the menu bar, we use the `addMenu`
    method to create a menu. We use the `QAction` class to create a menu item and
    then we use the `addAction` method to add this menu item to the menu.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `new_action` variable to call `setStatusTip`. Now, when we click
    on File | New, we can see the text displayed in the status bar, as shown in *step
    4*.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the PyQt5 Designer tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will start to use the PyQt5 Designer tool. We will visually
    design our GUIs and drag and drop our widgets onto a window main form. This form
    can be a `QWidgets` form or a `QMainWindow` form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have both PyQt5 and the Qt Designer tool installed on your
    computer. Please read the *Installing PyQt5* and *Installing the PyQt5 Designer
    tool* recipes to find out how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to run the `Designer.exe` file. Its location can be found in the
    *Installing the PyQt5 Designer too**l* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate `Designer.exe` and double-click on it to run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Designer GUI will open, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/303ff0b8-8bce-4e9e-aba2-13ea74f4389c.png)'
  prefs: []
  type: TYPE_IMG
- en: In the New Form - Qt Designer dialog box, as shown in the preceding screenshot,
    change the default in the top-left corner to Main Window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Create button in the dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the Qt Designer change to the following view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6f64ab2b-bd1f-4988-a08e-49aed8943ccb.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand what we are seeing.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are starting the Qt Designer by double-clicking the executable.
    In *step 2*, we can see that, by default, we are being presented with a dialog
    form that lets us create a new UI or open an existing UI.
  prefs: []
  type: TYPE_NORMAL
- en: The form directly behind the dialog box is dark grey, which means it is empty.
    This is actually the area in which we design our GUIs.
  prefs: []
  type: TYPE_NORMAL
- en: On the left-hand side, we can see the Widget Box area. This area contains all
    of the PyQt5 widgets the Designer has access to. We will drag and drop widgets
    from this Widget Box onto the UI form.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the right-hand side of the Designer, we have two windows: the Object Inspector
    and the Property Editor. Both are currently empty.'
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we change the default setting to Main Window because we want to
    create a `QMainWindow` application. In the previous recipes, we did this manually,
    but here we are using the Designer to do this for us.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we click the Create button, which closes the dialog and creates
    a new Main Window form in the center area of the Designer. At the same time, the
    two windows on the right-hand side are no longer empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 5*, we note that the classes and properties the Main Window has. In
    the Object Inspector, we can see four classes: QMainWindow, QWidget, QMenuBar,
    and QStatusBar. In the previous recipes, we manually added a menu bar and a status
    bar. Using the Designer tool when creating a new `QMainWindow`, we can see that
    the Designer has automatically added this functionality for us.'
  prefs: []
  type: TYPE_NORMAL
- en: In the Property Editor, we can see the geometry property for the centralwidget
    object. This is a QWidget and is the central part of the entire Main Window. The
    menubar and statusbar are located above and below the central form, respectively.
    The values for the geometry property default to 800 x 600, which will become the
    resultant size of our GUI when we run the code the way it is.
  prefs: []
  type: TYPE_NORMAL
- en: We can use this property to change the size of the UI. Alternatively, we can
    drag the UI form to the center of the Designer to change its size. This will update
    this property so that it works in both ways.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look around the Designer to get a feel for how it works and what information
    it provides.
  prefs: []
  type: TYPE_NORMAL
- en: Previewing the form within the PyQt5 Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to preview the form we are creating with the
    Designer. This is a very useful feature the Designer offers us because we can
    make changes, undo them, preview them, and so on until we are happy with our design.
    At that point, we can save the design.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have both PyQt5 and the Qt Designer tool installed on your
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run `Designer.exe`, as explained in the previous recipe. We will change the
    Main Window size and then preview it. Follow these steps to learn how to preview
    the form:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform *steps 1* to *5* from the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Property Editor, change the **geometry** property to `400` x `300`,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6257f04d-9346-41ad-b82e-421e91bf9d15.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Designer menu, click Form | Preview... or press *Ctrl* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the following preview:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8976689f-0b9b-4964-8898-4754ae1c9020.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand this code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are performing the same steps that we performed in the previous
    recipe. This brings us back to the same stage, because once we close the Designer
    tool, our UI will be lost if we do not save it. We haven't saved it so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, we are using the Property Editor on the right-hand side of the
    Designer to change the size of our UI. Make sure you have QWidget selected in
    this editor and not QMainWindow. If your editor looks like the following screenshot,
    simply expand the QWidget properties by clicking the arrow to the left of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5247e83-d6d2-4ffe-8b5f-cfc282063337.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In *step 3*, we are previewing our current UI design. There are two ways to
    do this: clicking the menu item and pressing the key shortcut.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 4* shows the resultant UI. Note the word [Preview] in the title bar of
    the window.'
  prefs: []
  type: TYPE_NORMAL
- en: Saving the PyQt5 Designer form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add the same menu and menu item that we created previously.
    We will save our UI after previewing it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have both PyQt5 and the Qt Designer tool installed on your
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run `Designer.exe`, as explained in the previous recipe. In order to create
    the menu and menu item, we can simply type into the Main Window within the Designer.
    Moving on, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform *step 1* and *step 2* from the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Designer, inside MainWindow - untitled*, type `File` into the Type Here
    menu, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b8a918e-a119-4327-b39e-fc3422a34036.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on File, type `New`, and press the *Enter* key to create a menu item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c0e21c0b-67c7-4828-9130-1cdc84df57cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Press *Ctrl* + *R* to preview the UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/43f6436c-4a8e-4458-8e6b-c8597bf8e688.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Close the preview and save the design in the Designer as `Designer_First_UI.ui`,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e70c9cde-6b61-44fc-9e09-29ee2659399a.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes so that we can understand these steps better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are performing the same steps that we performed in the previous
    recipe. In *step 2*, we are creating a File menu by simply typing into the menu
    bar the Designer has provided for us. In *step 3*, we add a menu item to this
    menu, also simply by typing into Type Here below our new menu.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we preview our UI design, while in *step 5*, we are actually saving
    our design for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Note how the extension of UIs we design in the Designer is `.ui`.
  prefs: []
  type: TYPE_NORMAL
- en: Converting Designer .ui code into .py code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at the `.ui` code we saved in the previous recipe
    when we saved our design in the Qt Designer tool. After that, we will use a utility
    we installed during the installation of the PyQt5 tools that will convert the
    `ui` code into Python `py` code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be specifically using the `pyuic5` tool. You can think of the name
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate Python **py** code from the Designer **ui** code by **c**onverting
    it, using PyQt version **5**.
  prefs: []
  type: TYPE_NORMAL
- en: If you are trying to find where `pyuic5.exe` is located, it actually gets installed
    into the Python `scripts` subfolder. On my installation, this is `C:\Python37\Scripts\pyuic5.exe`.
    Make sure your `PATH` is set to the `Scripts` folder in order to successfully
    run it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get ready.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the PyQt5 tools installed on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will open the `.ui` code we generated in the previous recipe when
    we saved our UI in the Designer. Now, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Designer_First_UI.ui` from the previous recipe in a word editor such as
    Notepad++.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at the `.ui` code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9bba826f-01c7-46ba-abd0-14faa90c44d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Navigate to the location on your hard drive where you saved `Designer_First_UI.ui`
    and open a Windows PowerShell or Command Prompt window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the `pyuic5 -x -o Designer_First_UI.py Designer_First_UI.ui` command
    and press the *Enter* key as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a8f5deb-6f5a-4957-b721-df89d5faaa73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the `ls` command in PowerShell or the `dir` command in a Command Prompt
    window to see the newly generated `.py` file. Alternatively, use Windows File
    Explorer to see the new file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8273b02f-6773-40b0-a071-aec4524b356a.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand these conversion steps better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *steps 1* and *2*, we are opening the `.ui` file that got saved in the Designer.
    We are using Notepad++ or any other word editor for this. The resultant `.ui`
    output is clearly XML.
  prefs: []
  type: TYPE_NORMAL
- en: This is definitely not Python code. We have to convert the XML into Python code,
    which we do in *steps 3* and *4*.
  prefs: []
  type: TYPE_NORMAL
- en: The `-x` argument after `pyuic5.exe` makes the resultant Python module executable,
    while `-o` specifies the name of the output file. We have chosen the same name
    as the `.ui` file but with a `.py` extension. We can choose any name we wish,
    as long as it has a `.py` extension. The `pyuic5` utility also has the capability
    to convert more than one `.ui` file into a single `.py` file, so being able to
    choose a name comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: When running `pyuic5.exe`, we do not get any output if the conversion was successful.
    If we do not get any errors, this means the conversion was successful.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we verify that we have the new output file, that is, `Designer_First_UI.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the converted Designer code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we converted the Designer UI code into Python code using
    the `pyuic5` converter tool. In this recipe, we will look at the generated code.
    Every GUI we create with the Designer needs to be converted and any changes we
    make will overwrite all the previous code. This will allow us to understand how
    to decouple UI code from the functionality we will add to the UI using a modular
    approach in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the converted code from the previous recipe available.
    If you did not follow the preceding recipes in this chapter, simply download the
    necessary code from the Packt website for this book. The website provides all
    of the code for this book and you can simply click one button to download it all
    via GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will need to open the `.py` code we converted from the `.ui` code to understand
    its structure. Now that we''ve done this, we can follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Designer_First_UI.py` from the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the top section of the auto generated module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8ad4514-e1ca-4c76-99a6-7e9f66d324a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Look at the import statements just below the preceding section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd3d1eb8-0d3e-46d5-905d-55402fe5f319.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Look at the class that was created and its first method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/caf0a228-8780-4249-91c6-4174f2635226.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Look at the second method, which is below the first method within the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0089ad4-3fc4-4d43-bb7f-4a3d5ed1e692.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, look at the `"__main__"` section at the bottom of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8bc6c967-b11f-45ef-b2fa-0b82990e6bf0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run this code. The result should be a running Python GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f8f6f80-df98-4f38-93cd-adb95f33eb22.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to better understand the code.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we open the converted UI as a Python module. In *step 2*, we can
    see an important warning.
  prefs: []
  type: TYPE_NORMAL
- en: I strongly recommend that you take this warning **seriously**. If you add code
    to this module and regenerate the code via `pyuic5.exe` at a later date, all of
    your changes will indeed be **lost**!
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 3* shows us the three import statements. These are always being imported,
    although `QtGui` is not required, as can be seen by the yellow warning and underline
    in my Eclipse/PyDev editor.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 4* shows us the class that''s always created. It is immediately followed
    by the `setupUi` method. There is no `__init__` method in between. The code in
    this method is very important for us because we can access the class attributes
    via the generated names.'
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we note the `retranslateUi` method. This method is also auto generated.
    By taking a closer look, we can find the names of the menu and menu items we added
    during the UI design phase.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 6* shows us the `"__main__"` section at the bottom of the code. The important
    thing to know about this is that this section is only created when we specify
    the `-x` option during the `pyuic5` conversion. If we leave this option out, we
    won''t see this section.'
  prefs: []
  type: TYPE_NORMAL
- en: In *step 7*, we run our GUI. Note how we are no longer *previewing* the UI.
    This is real and pure Python code now.
  prefs: []
  type: TYPE_NORMAL
- en: Building a modular GUI design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous recipe, all of the auto generated code of the UI we
    are designing with the Designer will be overwritten as soon as we rerun the `pyuic5`
    utility. This is a good thing because it encourages us to design our Python modules
    in a modular fashion (hence the name *module*).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will import the generated UI from a new Python module and
    add functionality within it. Whenever we rerun the `pyuic5` utility, our code
    will not get accidentally overwritten, because we are separating the logic from
    the UI.
  prefs: []
  type: TYPE_NORMAL
- en: '**Separation of Concerns** (**SoC**) is a software term that refers to the
    benefits of good, modular design.'
  prefs: []
  type: TYPE_NORMAL
- en: So, let's write some code!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need the converted code from the previous recipe, which can be found
    in `Designer_First_UI.py`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a new module in which we will add functionality to our UI code.
    We will import the UI we created in the Qt Designer that we converted into Python
    code. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Python module and name it `Designer_GUI_modular.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this module, write the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note that you might have to adjust the `Ch10_Code` prefix to match your location.
  prefs: []
  type: TYPE_NORMAL
- en: Run the preceding code. You shouldn't get any errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, copy the `"__main__"` section from `Designer_First_UI.py` into this new
    module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will also need to import `QtWidgets` to make this work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the preceding code. You should see the GUI we designed and previously
    ran stand-alone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/67c63c36-5288-46cc-b813-d7f227a4b965.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to better understand the code.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we create a new Python module. In *step 2*, all we do is import
    the UI into the Python generated code.
  prefs: []
  type: TYPE_NORMAL
- en: '**This is very important, because it shows the principle of SoC!**'
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we run this one line of code. No GUI will be visible, but the important
    thing here is that we don't get any errors. If we get some errors, it typically
    means that our import statement failed because our module could not locate the
    module we are trying to import.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 4* copies the `"__main__"` section from our converted `.py` file. While
    the module runs by itself, when we import it, we also have to import `QtWidgets`,
    because when we import modules, the import statements of those modules do not
    automatically get imported. We do this in *step 5*. In *step 6*, we have our GUI
    up and running, but this time via a modular approach.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding another menu item to our menu bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a second menu item to our GUI. We will use the Designer
    and then regenerate the UI code. After that, we will attach functionality to the
    menu item from our modular Python module. The Designer has certain capabilities
    so that it can add this functionality as well, but here, we are simply keeping
    the UI code separated from the functionality of our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the UI code from the previous recipes available. All the
    other recipes' prerequisites apply to this recipe as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will enhance our UI design from a previous recipe by adding a second menu
    item. After that, we will convert the UI code into Python code, like we did previously.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Qt Designer, open `Designer_First_UI.ui`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Below the File | New menu item, create another menu item and name it `Exit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7561525e-b08d-4703-bfc4-93d6b5c1644e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type this new menu item into the Type Here area. It will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a97af1d2-f8b1-413a-b44d-e70501e0fd23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Press the *Enter* key and save the `.ui` file. Next, preview the UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/edb428a3-0e3d-4697-80ac-f65b508b7d3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Run the `pyuic5.exe` utility to convert the `.ui` file into a `.py` file. Let's
    save it under a new name to distinguish it from our original module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a PowerShell or Command Prompt window, type `pyuic5.exe -x -o Designer_First_UI_Exit.py
    Designer_First_UI.ui` and then press the *Enter* key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65f16567-d33f-42c0-a66e-842529fe7425.png)'
  prefs: []
  type: TYPE_IMG
- en: You should now have a new Python module named `Designer_First_UI_Exit.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python module and name it `Designer_GUI_modular_exit.py.` Import
    the newly converted file into it. Here is what the code looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the GUI and click on the File menu to see the new Exit menu item. The result
    will be the same one we got in *step 3* when we previewed the running GUI in the
    Designer before we converted it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/87178407-ac82-4c5a-833a-a7bdca54cac1.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go behind the scenes to understand what's going on.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are opening the `.ui` design file we created previously. We
    aren't saving it under a different name, so we are basically adding a new menu
    item to our existing design.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we use the Designer tool to add a new menu item and name it `Exit`.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we press the *Enter* key, which, quite honestly, sounds very trivial,
    but if we don't do this, our new item will not be saved. We also save the `.ui`
    file under the same name, overwriting our previous version. This is okay because
    we are simply adding some small functionality to the UI.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we are running the `pyuic5.exe` utility to turn the XML of the
    `.ui` file into Python code. This time, however, we are giving the resultant `.py`
    output file a different name than the `.ui` file. We do this so that we don't
    overwrite our previous Python module.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we create a new Python module and import the converted `.ui` into
    it. We have done this before. Finally, in *step 6*, we run the pure Python code
    so that we can see our new menu item.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next recipe, we will add functionality to our new Exit menu item so that
    when we click on it, our GUI will indeed exit and the application will end.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting functionality to the Exit menu item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add functionality to the Exit menu item we created in
    the previous recipe. So far, we have two menu items, but they aren't interactive.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will learn how to add functionality outside of the UI by using our
    modular approach to coding. We will also improve our code by transforming the
    `"__main__"` self-testing section into a class of its own.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the `.ui` code from the previous recipe available. All
    the other prerequisites apply to this recipe as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add functionality to our GUI using the modular approach of SoC. To
    make our code more robust, we will create a new class. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Python module and name it `Designer_GUI_modular_exit_class.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following import statements into the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new Python class with an `__init__` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a method that updates the status bar and connects an action to the menu
    item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Write a callback method that closes the GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Write a class method that updates the title of the GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an instance of the class in the `"__main__"` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see how this works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are creating a new Python module, while in *step 2*, we are
    writing the import statements we need at the top of the module.
  prefs: []
  type: TYPE_NORMAL
- en: Writing all the import statements at the top of a module is a Python best practice
    and is highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we are creating our own Python class and starting with the typical
    initializer. Toward the end of the initializer method, we are calling methods
    that we are creating below the initializer. Because we are doing it like this,
    all we have to do is instantiate the class, and the methods will run without us
    having to call any particular methods on the class instance after the creation
    of the class instance (object).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 4*, we are accessing the name of our menu item via `self.ui.actionExit`.
    We can use `self.ui` because, in the `"__init__"` method, we created an instance
    of the `MainWindow` and saved it as such. This is the line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How come we use `actionExit`? We have to look at the auto generated code to
    find this object name.
  prefs: []
  type: TYPE_NORMAL
- en: 'We designed our UI in the Designer and the Designer chose a name for us. We
    could change that object name if we wish, but it isn''t necessary. We just have
    to find the name we are looking for. So, let''s look at `Designer_First_UI_Exit.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51694739-6d4e-412e-8399-877b43b65141.png)'
  prefs: []
  type: TYPE_IMG
- en: We can find the `"actionExit"` name in this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also look it up in Qt Designer in the Object Inspector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cedb6d6-b2ca-46db-a45b-cc3320645869.png)'
  prefs: []
  type: TYPE_IMG
- en: Either way works.
  prefs: []
  type: TYPE_NORMAL
- en: Also in *step 4*, we are achieving the desired functionality, that is, closing
    our GUI via the Exit menu item.
  prefs: []
  type: TYPE_NORMAL
- en: 'We do this in the following line of code, which calls the method we create
    in *step 5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The very important thing to note is that we call `triggered.connect(**<method
    name>**)` to achieve this functionality. This connects the *action* to the event
    of the menu item being *triggered*.
  prefs: []
  type: TYPE_NORMAL
- en: This is PyQt5 syntax and semantics.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, in order to close the GUI, we call the built-in `close` method
    on `MainWindow`. We saved a reference to `MainWindow` in the `"__init__"` method
    so that we can reference it from within this method, within the same Python class.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 6*, we use the same reference of `self.MainWindow` to give our GUI
    window a title.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 7*, we use Python's self-testing `"__main__"` section to create a class
    instance. This is all we need to do to run our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we click on the `Exit` menu item, our GUI will exit.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Tab Widget via the Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a Tab Widget to our UI using the Designer tool.
    Then, we will convert the `.ui` code into Python code. This will serve us well
    in preparation for adding more widgets and functionality to our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the `.ui` code from the previous recipe available. All
    the other prerequisites apply to this recipe as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add a Tab Widget to our UI design by using the Designer. It is as simple
    as dragging and dropping. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: In Qt Designer, open `Designer_First_UI.ui` and save it as `Designer_Second_UI.ui`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the left-hand side within the Designer, drag a Tab Widget onto the main
    form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/004828a0-d8ab-48d9-820e-9460bd7ecb1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Resize the Tab Widget to make it fill up most of the `MainWindow`, as shown
    in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the `.ui` design and preview it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bfa45e25-bdc1-476e-8c8a-8522c976394d.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Tab 1 and Tab 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Exit menu item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `pyuic5.exe` tool to convert the `.ui` code into Python code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the converted Python UI code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are opening our existing `.ui` file in the Qt Designer, but
    this time, we are saving it under a different filename. Saving the different versions
    of our UI design under different names is typically a good idea go back to prior
    versions if our UI design messes up.
  prefs: []
  type: TYPE_NORMAL
- en: Our nice UI design being accidentally messed up can happen quite easily, so
    make sure you make backups of your `.ui` files. You can also use a version control
    system such as GitHub to back up your code.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we are using the fantastic drag and drop capability of the Designer
    to visually (and physically) move a widget onto the canvas form. We can simply
    use the resize handles to adjust the widget any way we want. We do this in *step
    3*.
  prefs: []
  type: TYPE_NORMAL
- en: Look at the Object Inspector on the right-hand side of the Designer and note
    the new Tab Widget, as well as the two tabs, object names, and PyQt5 classes they
    belong to.
  prefs: []
  type: TYPE_NORMAL
- en: You may also notice a star (*) to the right of the `MainWindow` title. This
    means that we haven't saved the design yet. Pay attention to this because, if
    you close the UI design without saving it, you will lose your beautiful design.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we save our UI design and preview it.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we can click between the two new tabs. Note how the color of each
    tab defaults to white and looks different in preview mode than it does in design
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 6* will *not* close the UI because the functionality for closing the
    UI is decoupled from the UI. We wrote the code so that we could close the GUI
    in a different Python module.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 7* is mainly left as an exercise for you.'
  prefs: []
  type: TYPE_NORMAL
- en: Get used to making small changes in the Designer, converting the code, importing
    it, running it, making more changes in the Designer, and so on. Get used to this
    rhythm of GUI development when you use the Designer tool.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 8*, we run the code. Using the `-x` option creates the self-testing
    `"__main__"` section, so you should be able to run the converted Python code without
    having to import it.
  prefs: []
  type: TYPE_NORMAL
- en: Using layouts in the Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore the very important concept of using layouts
    with PyQt5 and we will do so using the Designer tool. In `tkinter`, we explored
    Label Frames. In PyQt5, horizontal and vertical layouts are the main ways in which
    we can design our UI.
  prefs: []
  type: TYPE_NORMAL
- en: This can get a little bit tricky, so, as I mentioned previously, make sure you
    back up your UI design often so that, when things turn out ugly, you have a foundation
    to go back to.
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipe, we will place widgets into these layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the `.ui` code from the previous recipe available. All
    the other prerequisites apply to this recipe as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add two horizontal layouts to our Main Window, which we will do using
    drag and drop inside the Qt Designer. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Designer, open `Designer_Second_UI.ui` and save it as `Designer_Second_UI_layout.ui`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag one horizontal layout toward the bottom of the form and resize it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag a second horizontal layout and place it above the first layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1678874-5b67-4a0c-9f27-d86109ca5cdd.png)'
  prefs: []
  type: TYPE_IMG
- en: Your `MainWindow` will now look like the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Save the design, convert it into Python, and then run it to make sure you do
    not get any errors. The code should run, but note that you won't see any difference
    in the resultant GUI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are saving our UI design under a different name, practically
    making a backup.
  prefs: []
  type: TYPE_NORMAL
- en: In *steps 2* and *3*, we are visually dragging horizontal layouts onto the main
    form. You can see them in the preceding screenshot, but you won't notice any difference
    in preview mode.
  prefs: []
  type: TYPE_NORMAL
- en: One very important thing to note is the names and classes in the Object Inspector
    in the top-right corner of the Designer, as well the properties that are automatically
    made available to us in the Property Editor in the bottom-right corner of the
    Designer.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note how we are placing these widgets in Tab 1\. Tab 2 is still empty.
  prefs: []
  type: TYPE_NORMAL
- en: What's really cool about using these PyQt5 layouts is that, once we place widgets
    into these layouts, we can move the entire group of widgets by simply moving the
    layout. We can even hide them all, making them invisible!
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we are making sure that we know the process of making changes in
    the Designer and then converting it into Python code. If running the code doesn't
    work, something might have gone wrong. It's good to make small changes and then
    test your code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding buttons and labels in the Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a button and a label, both of which we will place
    in the layouts we added to our UI design in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the `.ui` code from the previous recipe available. All
    the other prerequisites apply to this recipe as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add a button and a label to our UI design. We will also use the Designer
    to connect the two, creating some of the available functionality directly within
    the Designer. Let''s take a look at the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Designer, open `Designer_Second_UI_layout.ui` and save it as `Designer_Second_UI_layout_button.ui`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag a `PushButton` from the left-hand side into the lower horizontal layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0eee7c92-e2db-414f-8579-c8f744a4c879.png)'
  prefs: []
  type: TYPE_IMG
- en: Note how the button automatically adjusts itself to the left and right edges
    of the horizontal layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save and preview the UI. Click the button during the preview run of the UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c5f3322-fece-486a-a153-bbcedc8cc733.png)'
  prefs: []
  type: TYPE_IMG
- en: When clicking it, the button looks pressed in and comes with a default name
    we can change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag a Label widget from the left-hand side and place it into the top horizontal
    layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe137fae-d910-41ea-82fd-b28fbd2c1d56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the `.ui` design and preview it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1446a269-ac53-4715-93d5-05a840f621ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will connect the `PushButton` to the label within the Designer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the *F4* key to get into the signals/slots editing mode or use the Edit
    menu within the Designer. Drag a signal/slot connection from the button to the
    label. The Designer will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd7d1ffe-f487-4b55-8362-66d76e109ecf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Configure Connection** pop-up dialog, click on `clicked()` in the
    top-left corner. This will enable the right-hand side of the dialog box. Select
    the `clear()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/318b9508-6c5b-432c-adb8-b7fff1c9d4d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Press OK and save the `.ui` file. You will now see a connection between the
    button and the label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c7f1bd4-fcb4-4b25-b139-5a4ecf4aa9d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Preview the `.ui` code and click the button. You will notice that the label
    text is cleared.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the `.ui` code into Python code using `pyuic5.exe`, as we did previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's look at the converted code to understand how this functionality of connecting
    the button to clear the label works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 1*, we are saving the UI design under a new name, while in *step 2*,
    we are dragging and dropping a `PushButton` onto the `MainWindow` form. By itself,
    this button doesn't do anything, but there are a few methods that are available
    within the Designer that can add functionality to it.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we are previewing the UI. Note that the button was automatically
    stretched to fill in the entire horizontal layout box. Vertically, it is only
    as tall as it needs to be to display its default text. These are properties that
    we can change in the Property Editor.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we are visually dragging a text label widget onto the `MainWindow`.
    This widget doesn't attach itself to the left- and right-hand sides of the horizontal
    layout, because it comes with a predefined width.
  prefs: []
  type: TYPE_NORMAL
- en: It attaches itself to the left-hand side. In the Property Editor, we can change
    this if we wish to.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 5* gives us a preview of our UI running from within the Designer.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 6* brings us into the Signal/Slot Editor. Signals and slots are peculiar
    to PyQt5\. The following screenshot shows you how to enable this editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17fce7e9-d052-4782-840f-64385d10d04f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find the editor under the View menu. This opens a new window to the
    right, below the Property Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ce3ce8b-f9cd-46b4-b588-3f8b878636f5.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the `pushButton` object is the Sender, the Signal is `clicked()`,
    the Receiver is `label`, and the Slot is `clear()`.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 7* shows us some of the functionality that becomes available when we
    connect signals and slots between `PushButton` and the `Label` widget. The `clear()`
    method is built in, so we can simply select it to clear the label whenever we
    push the button.'
  prefs: []
  type: TYPE_NORMAL
- en: In *step 8*, we can see that the editor changed after we clicked OK to connect
    the two widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Because the functionality has been added within the Designer, when we preview
    our UI, it actually works. Clicking the button does indeed clear the label, as
    can be seen in *step 9*.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we convert our `.ui` code into Python code, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d1c639d-51f9-4b9b-b0cc-6e0d913ebd75.png)'
  prefs: []
  type: TYPE_IMG
- en: Note how the `pushButton` has the same syntax of `clicked.connect(<method>)`,
    which is what we had outside of the Designer when we enabled the Exit menu item.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PyQt5 GUI framework is a very exciting tool to work with. I especially enjoy
    the Qt Designer tool.
  prefs: []
  type: TYPE_NORMAL
- en: Together with Packt, I have created several *Python GUI Programming Recipes
    using PyQt5* video courses.
  prefs: []
  type: TYPE_NORMAL
- en: One course is especially focused on PyQt5 GUI development. It is a little over
    four hours long.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot of my course, which can be found at [https://www.packtpub.com/application-development/python-gui-programming-recipes-using-pyqt5-video](https://www.packtpub.com/application-development/python-gui-programming-recipes-using-pyqt5-video):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0ba4373-02dc-496b-9ccf-2bcd6aa5d02b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If this is too long for you (I am covering a lot of PyQt5 material in this
    course), there is also a shorter course, which focuses on `tkinter` and PyQt5,
    which can be found at [https://www.packtpub.com/application-development/hands-python-3x-gui-programming-video](https://www.packtpub.com/application-development/hands-python-3x-gui-programming-video):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e32cf5b-fe22-4123-ad20-60cc5a9547a3.png)'
  prefs: []
  type: TYPE_IMG
- en: <q>I wish</q> you <q>the *best of luck* in your software development efforts.</q><q>Python
    is a</q> wonderful <q>programming language.</q>
  prefs: []
  type: TYPE_NORMAL
