["```py\n>>> f = open('test.txt', 'w')\n\n```", "```py\n>>> f.write(\"Hello World!\\n\")\n\n```", "```py\n>>> sq = [\"Python programming for Arduino\\n\", \"Bye\\n\"]\n>>> f.writelines(sq)\n\n```", "```py\n>>> f.close()\n\n```", "```py\n>>> f = open('test.txt', 'r')\n>>> f.read()\n'Hello World!\\nPython programming for Arduino\\nBye\\n'\n>>> f.close()\n\n```", "```py\n>>> f = open('test.txt', 'r')\n>>> l = f.readlines()\n>>> print l\n['Hello World!\\n', 'Python programming for Arduino\\n', 'Bye\\n']\n>>> f.close()\n\n```", "```py\n>>> with open('test.txt', 'r') as f:\n lines = f.readlines()\n for l in lines:\n print l\n\n```", "```py\nimport csv\ndata = [[1, 2, 3], ['a', 'b', 'c'], ['Python', 'Arduino', 'Programming']]\n\nwith open('example.csv', 'w') as f:\n  w = csv.writer(f)\n  for row in data:\n    w.writerow(row)\n```", "```py\nw = csv.writer(f)\n```", "```py\nw = csv.writer(f, delimiter=' ')\n```", "```py\nimport csv\nwith open('example.csv', 'r') as file:\n    r = csv.reader(file)\n    for row in r:\n        print row\n```", "```py\nimport csv\nimport pyfirmata\nfrom time import sleep\n\nport = '/dev/cu.usbmodemfa1331'\nboard = pyfirmata.Arduino(port)\n\nit = pyfirmata.util.Iterator(board)\nit.start()\n\npirPin = board.get_pin('d:11:i')\na0 = board.get_pin('a:0:i')\n\nwith open('SensorDataStore.csv', 'w') as f:\n    w = csv.writer(f)\n    w.writerow([\"Number\", \"Potentiometer\", \"Motion sensor\"])\n    i = 0\n    pirData = pirPin.read()\n    potData = a0.read()\n    while i < 25:\n        sleep(1)\n        if pirData is not None:\n            i += 1\n            row = [i, potData, pirData]\n            w.writerow(row)\n    print \"Done. CSV file is ready!\"\n\nboard.exit()\n```", "```py\nw.writerow([\"Number\", \"Potentiometer\", \"Motion sensor\"])\n```", "```py\nwhile i < 25:\n    sleep(1)\n    if pirData is not None:\n        i += 1\n        row = [i, potData, pirData]\n        w.writerow(row)\n```", "```py\n> easy_install.exe python_dateutil\n> easy_install.exe pyparsing\n\n```", "```py\n$ sudo pip install matplotlib\n\n```", "```py\n>>> import matplotlib\n>>> matplotlib.__version__\n\n```", "```py\n$ sudo pip install –-upgrade matplotlib\n\n```", "```py\n$ sudo pip install matplotlib\n$ sudo pip install –-upgrade matplotlib\n\n```", "```py\n    $ ruby -e \"$(\"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)\")\"\n\n    ```", "```py\n    $ brew install freetype\n    $ brew install pkg-config\n\n    ```", "```py\n    $ brew link freetype\n    $ ln -s /usr/local/opt/freetype/include/freetype2 /usr/local/include/freetype\n\n    ```", "```py\n    import matplotlib\n    matplotlib.use('TkAgg''')\n    ```", "```py\n$ sudo apt-get install python-matplotlib\n\n```", "```py\nfig1 = pyplot.figure(1)\n\n```", "```py\npyplot.plot(x, y)\n\n```", "```py\npyplot.plot(x, y, '-')\n\n```", "```py\n>>> import matplotlib\n>>> help(matplotlib.pyplot.plot)\n\n```", "```py\nfrom matplotlib import pyplot\nimport random\n\nx = range(0,25)\ny = [random.randint(0,100) for r in range(0,25)]\n\nfig1 = pyplot.figure()\npyplot.plot(x, y, '-')\npyplot.title('First Plot - Random integers')\npyplot.xlabel('X Axis')\npyplot.ylabel('Y Axis')\n\npyplot.show()\n```", "```py\nimport csv\nfrom matplotlib import pyplot\n\ni = []\nmValues = []\npValues = []\n\nwith open('SensorDataStore.csv', 'r') as f:\n    reader = csv.reader(f)\n    header = next(reader, None)\n    for row in reader:\n        i.append(int(row[0]))\n        pValues.append(float(row[1]))\n        if row[2] == 'True':\n            mValues.append(1)\n        else:\n            mValues.append(0)\n\npyplot.subplot(2, 1, 1)\npyplot.plot(i, pValues, '-')\npyplot.title('Line plot - ' + header[1])\npyplot.xlim([1, 25])\npyplot.xlabel('X Axis')\npyplot.ylabel('Y Axis')\n\npyplot.subplot(2, 1, 2)\npyplot.bar(i, mValues)\npyplot.title('Bar chart - ' + header[2])\npyplot.xlim([1, 25])\npyplot.xlabel('X Axis')\npyplot.ylabel('Y Axis')\n\npyplot.tight_layout()\n\npyplot.show()\n```", "```py\npyplot.subplot(2,1,1)\n```", "```py\npyplot.subplot(2, 1, 2)\n```", "```py\nimport sys, csv\nfrom matplotlib import pyplot\nimport pyfirmata\nfrom time import sleep\nimport numpy as np\n\n# Associate port and board with pyFirmata\nport = '/dev/cu.usbmodemfa1321''\nboard = pyfirmata.Arduino(port)\n\n# Using iterator thread to avoid buffer overflow\nit = pyfirmata.util.Iterator(board)\nit.start()\n\n# Assign a role and variable to analog pin 0\na0 = board.get_pin(''a:0:i'')\n\n# Initialize interactive mode\npyplot.ion()\n\npData = [0] * 25\nfig = pyplot.figure()\npyplot.title(''Real-time Potentiometer reading'')\nax1 = pyplot.axes()\nl1, = pyplot.plot(pData)\npyplot.ylim([0,1])\n\n# real-time plotting loop\nwhile True:\n    try:\n        sleep(1)\n        pData.append(float(a0.read()))\n        pyplot.ylim([0, 1])\n        del pData[0]\n        l1.set_xdata([i for i in xrange(25)])\n        l1.set_ydata(pData)  # update the data\n        pyplot.draw()  # update the plot\n    except KeyboardInterrupt:\n        board.exit()\n        break\n```", "```py\npyplot.ion()\n```", "```py\npData = [0] * 25\n```", "```py\npData.append(float(a0.read()))\ndel pData[0]\n```", "```py\nl1.set_xdata([i for i in xrange(25)])\nl1.set_ydata(pData)  # update the data\npyplot.draw()  # update the plot\n```", "```py\nstartButton = Tkinter.Button(top,\n                             text=\"Start\",\n                             command=onStartButtonPress)\nstartButton.grid(column=1, row=2)\npauseButton = Tkinter.Button(top,\n                             text=\"Pause\",\n                             command=onPauseButtonPress)\npauseButton.grid(column=2, row=2)\nexitButton = Tkinter.Button(top,\n                            text=\"Exit\",\n                            command=onExitButtonPress)\nexitButton.grid(column=3, row=2)\n```", "```py\ndef onStartButtonPress():\n    while True:\n        if flag.get():\n            sleep(1)\n            pData.append(float(a0.read()))\n            pyplot.ylim([0, 1])\n            del pData[0]\n            l1.set_xdata([i for i in xrange(25)])\n            l1.set_ydata(pData)  # update the data\n            pyplot.draw()  # update the plot\n            top.update()\n        else:\n            flag.set(True)\n            break\n```"]