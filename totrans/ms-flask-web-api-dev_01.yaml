- en: <st c="0">1</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">A Deep Dive into the Flask Framework</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**<st c="38">Flask</st>** <st c="44">is a</st> **<st c="50">Python</st>** <st
    c="56">web framework that was created by Armin Ronacher to solve both web-based
    and API-related</st> <st c="145">requirements that need a rapid development approach.</st>
    <st c="199">It is a lightweight framework with helper classes and methods, a built-in
    server, a debugger, and a reloader, all of which are required for building scalable
    web applications and</st> <st c="378">web services.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="391">Unlike the Django framework, Flask is minimalistic and slimmer in
    that it requires more experience in using Python to craft various coding techniques
    and workarounds to implement its components.</st> <st c="587">It is more open-ended
    and extensible than the full-stack Django, which is more friendly to newbies because
    of its easy-to-build projects and</st> <st c="728">reusable components.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="748">This first chapter will showcase the essential task itineraries
    that cover the initial components and base features of Flask 3.x that are essential
    in initiating our</st> <st c="915">web development.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="931">In this chapter, we will cover the following</st> <st c="977">development
    tasks:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="995">Setting up the</st> <st c="1011">project baseline</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1027">Creating routes</st> <st c="1044">and navigations</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1059">Managing the requests and</st> <st c="1086">response data</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1099">Implementing</st> <st c="1113">view templates</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1127">Creating</st> <st c="1137">web forms</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1146">Building the data layer</st> <st c="1171">with PostgreSQL</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1186">Managing the</st> <st c="1200">project structure</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1217">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1240">The first chapter will focus on building a prototype for an</st>
    *<st c="1301">Online Personal Counseling System</st>* <st c="1334">that simulates
    a face-to-face consultation between a patient and a counselor while highlighting
    the base components of</st> *<st c="1454">Flask 3.x</st>*<st c="1463">. The application
    will cover modules such as managing users, questionnaires, and some reports.</st>
    <st c="1558">The code for this chapter can be found</st> <st c="1597">at</st>
    [<st c="1600">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch01</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch01)<st
    c="1681">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1682">Setting up the project baseline</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1714">Gathering and studying the</st> <st c="1741">system requirements
    for the development environment for the proposed project is essential.</st> <st
    c="1833">Some of these requirements include the correct versions of the installers
    and libraries, the appropriate servers, and the inclusion of other essential dependencies.</st>
    <st c="1998">We have to perform various setups before kicking off</st> <st c="2051">our
    projects.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2064">Installing the latest Python version</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="2101">All our applications will run</st> <st c="2131">on the</st> *<st
    c="2139">Python 11</st>* <st c="2148">environment for faster performance.</st>
    <st c="2185">The updated Python installer for all operating systems is available</st>
    <st c="2253">at</st> [<st c="2256">https://www.python.org/downloads/</st>](https://www.python.org/downloads/)<st
    c="2289">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2290">Installing the Visual Studio (VS) Code editor</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="2336">The Django framework has a</st> `<st c="2364">django-admin</st>`
    <st c="2376">command that generates a project structure, but Flask does</st> <st
    c="2435">not have that.</st> <st c="2451">We can use a terminal console or a tool
    such as the</st> **<st c="2503">Visual Studio</st>** <st c="2516">(</st>**<st
    c="2518">VS</st>**<st c="2520">)</st> **<st c="2523">Code</st>** <st c="2527">editor
    that can</st> <st c="2543">help developers create a Flask project.</st> <st c="2584">The
    VS Code installer is available</st> <st c="2619">at</st> [<st c="2622">https://code.visualstudio.com/download</st>](https://code.visualstudio.com/download)<st
    c="2660">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2661">After installing the VS Code editor, we can create a filesystem
    folder through it and start a Flask project.</st> <st c="2771">To create the folder,
    we should go to the</st> **<st c="2813">Open Folder</st>** <st c="2824">option
    under</st> **<st c="2838">File</st>** <st c="2842">or use the</st> *<st c="2854">Ctrl</st>*
    <st c="2858">+</st> *<st c="2861">K</st>* <st c="2862">+</st> *<st c="2865">O</st>*
    <st c="2866">shortcut to open the</st> **<st c="2888">Open Folder</st>** <st c="2899">mini-window.</st>
    *<st c="2913">Figure 1</st>**<st c="2921">.1</st>* <st c="2923">shows a sample
    process of creating a Flask project using</st> <st c="2981">the editor:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Creating a Flask project folder using the VS Code editor](img/B19383_01_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="3923">Figure 1.1 – Creating a Flask project folder using the VS Code
    editor</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3992">Creating the virtual environment</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="4025">Another aspect of developing a Flask project is having a</st> <st
    c="4083">repository called a</st> **<st c="4103">virtual environment</st>** <st
    c="4122">that can hold its libraries.</st> <st c="4152">It is a mechanism or a
    tool that can manage all dependencies of a project by isolating these dependencies
    from the global repository and other project</st> <st c="4302">dependencies.</st>
    <st c="4317">The following are the advantages of using this tool in developing</st>
    <st c="4383">Flask-based applications:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4408">It can avoid broken module versions and collisions with other existing
    similar global</st> <st c="4495">repository libraries.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4516">It can help build a dependency tree for</st> <st c="4557">the project.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4569">It can help ease the deployment of applications with libraries
    to both physical and</st> <st c="4654">cloud-based servers.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4674">A Python extension named</st> `<st c="4700">virtualenv</st>` <st
    c="4710">is required to set up these virtual environments.</st> <st c="4761">To
    install the extension, run the following command in</st> <st c="4816">the terminal:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="4852">After this installation, we need to run</st> `<st c="4893">python
    virtualenv -m ch01-01</st>` <st c="4921">to create our first virtual environment
    for our Flask project.</st> *<st c="4985">Figure 1</st>**<st c="4993">.2</st>*
    <st c="4995">shows a snapshot of creating our</st> `<st c="5029">ch01-env</st>`
    <st c="5037">repository:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Creating a virtual environment](img/B19383_01_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="5289">Figure 1.2 – Creating a virtual environment</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="5332">The next step is to open the</st> <st c="5361">project and link
    it to the virtual environment created for it.</st> <st c="5425">Pressing</st>
    *<st c="5434">Ctrl</st>* <st c="5438">+</st> *<st c="5441">Shift</st>* <st c="5446">+</st>
    *<st c="5449">P</st>* <st c="5450">in VS Code will open the</st> `<st c="5522">Python:
    Select Interpreter</st>`<st c="5548">. Clicking this option will lead you to the</st>
    `<st c="5730">Python.exe</st>` <st c="5740">file in the</st> `<st c="5753">/Scripts</st>`
    <st c="5761">folder.</st> *<st c="5770">Figure 1</st>**<st c="5778">.3</st>* <st
    c="5780">shows a snapshot of locating the Python interpreter in the repository’s</st>
    `<st c="5853">/</st>``<st c="5854">Scripts</st>` <st c="5861">folder:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Locating the Python interpreter of the virtual environment](img/B19383_01_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="6759">Figure 1.3 – Locating the Python interpreter of the virtual environment</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6830">Afterward, the virtual environment must be activated for the project
    to utilize it.</st> <st c="6915">You must run</st> `<st c="6928">/Scripts/activate.bat</st>`
    <st c="6949">in Windows or</st> `<st c="6964">/bin/activate</st>` <st c="6977">in
    Linux through the editor’s internal</st> <st c="7017">console.</st> <st c="7026">Upon
    activation, the terminal should show the name of the virtual environment in its
    prompt (for example,</st> `<st c="7132">(</st>``<st c="7133">ch01-env) C:\</st>`<st
    c="7146">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7149">Installing the Flask 3.x libraries</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7184">The integrated</st> <st c="7200">terminal of VS Code will appear
    after right-clicking the explorer portion of the editor, which leads to the</st>
    `<st c="7497">pip</st>` `<st c="7501">install flask</st>`<st c="7514">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7515">Once all the requirements are in place, we are ready to create
    our</st> <st c="7583">baseline application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7604">Creating the Flask project</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7631">The first component that</st> <st c="7657">must be implemented
    in the main project folder (that is,</st> `<st c="7714">ch01</st>`<st c="7718">)
    is the application file, which can be</st> `<st c="7759">main.py</st>` <st c="7766">or</st>
    <st c="7769">sometimes</st> `<st c="7780">app.py</st>`<st c="7786">. This component
    will become the top-level module the Flask will recognize when the server starts.</st>
    <st c="7885">Here is the baseline application file for our</st> *<st c="7931">Online
    Personal Counseling</st>* *<st c="7958">System</st>* <st c="7964">prototype:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="12019">@app.route('/home')</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12039">def home():</st> return '''
  prefs: []
  type: TYPE_NORMAL
- en: <html><head><title>Online Personal … System</title>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </head><body>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h1>Online … Counseling System (OPCS)</h1>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>This is a template of a web-based counseling
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: application where counselors can … … …</em>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </body></html>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''''''''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="12779">@app.route('/home')</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12799">@app.route('/information')</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12826">@app.route('/introduction')</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12854">def home():</st> return '''<html><head>
  prefs: []
  type: TYPE_NORMAL
- en: <title>Online Personal … System</title>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </head><body>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h1>Online … Counseling System (OPCS)</h1>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </body></html>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''''''''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="13563">@app.route(''/exam/passers/list/<float:rate>/<uuid:docId>'')</st>
    def report_exam_passers(<st c="13647">rating:float, docId:uuid4 = None</st>):'
  prefs: []
  type: TYPE_NORMAL
- en: exams = list_passing_scores(<st c="13712">rating</st>)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: response = make_response(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: render_template('exam/list_exam_passers.html',
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exams=exams, docId=<st c="13814">docId</st>), 200)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return response
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="15351">@app.route(''/certificate/accomp/<string:name>/</st><st c="15398"><string:course>/<date:accomplished_date>'')</st>
    def show_certification(<st c="15465">name:str, course:str, accomplished_date:date</st>):'
  prefs: []
  type: TYPE_NORMAL
- en: certificate = """<html><head>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <title>Certificate of Accomplishment</title>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </head><body>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h1>Certificate of Accomplishment</h1>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>The participant {} is, hereby awarded this certificate of accomplishment,
    in {} course on {} date for passing all exams. He/she proved to be ready for any
    of his/her future endeavors.</em>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </body></html>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '""".format(<st c="15860">name, course, accomplished_date</st>)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return certificate, 200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="16263">from werkzeug.routing import BaseConverter</st> from datetime
    import datetime
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'class DateConverter(<st c="16357">BaseConverter</st>): <st c="16375">def to_python(self,
    value):</st> date_value = datetime.strptime(value, "%Y-%m-%d")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return date_value
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: app = Flask(__name__) <st c="16977">app.url_map.converters['date'] = DateConverter</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: app = Flask(__name__)
  prefs: []
  type: TYPE_NORMAL
- en: 'def show_honor_dissmisal(<st c="18240">counselor:str, effective_date:date,
    patient:str</st>):'
  prefs: []
  type: TYPE_NORMAL
- en: letter = """
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … …
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </head><body>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <h1> Termination of Consultation </h1>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<p>From: <st c="18377">{}</st> <p>Head, Counselor'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<p>Date: <st c="18408">{}</st> <p>To: <st c="18418">{}</st> <p>Subject: Termination
    of consultation'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>Dear {},
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>Yours Sincerely,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p><st c="18508">{}</st> </body>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </html>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '""".format(<st c="18539">counselor, effective_date, patient, patient, counselor</st>)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return letter, 200 <st c="18818">add_url_rule()</st> is not only confined to
    the decorated function views but is also necessary for *<st c="18912">class-based
    views</st>*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="18930">Implementing class-based views</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="18961">Another way to create</st> <st c="18984">the view layer is through
    Flask’s class-based view approach.</st> <st c="19045">Unlike the Django framework,
    which uses mixin programming to implement its class-based views, Flask provides
    two API classes, namely</st> `<st c="19178">View</st>` <st c="19182">and</st>
    `<st c="19187">MethodView</st>`<st c="19197">, that can directly subclass any
    custom</st> <st c="19237">view implementations.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="19258">The most common and generic class to implement HTTP</st> `<st
    c="19311">GET</st>` <st c="19314">operations is the</st> `<st c="19333">View</st>`
    <st c="19337">class from the</st> `<st c="19353">flask.views</st>` <st c="19364">module.</st>
    <st c="19373">It has a</st> `<st c="19382">dispatch_request()</st>` <st c="19400">method
    that executes the request-response transactions like a typical view function.</st>
    <st c="19486">Thus, subclasses must override this core method to implement their
    view transactions.</st> <st c="19572">The following class,</st> `<st c="19593">ListUnpaidContractView</st>`<st
    c="19615">, renders a list of patients with payments due to</st> <st c="19665">the
    clinic:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`<st c="19893">select_all_unpaid_patient()</st>` <st c="19921">will provide
    the patient records from the database.</st> <st c="19974">All these records will
    be rendered to the</st> `<st c="20016">list_patient_contract.html</st>` <st c="20042">template.</st>
    <st c="20053">Now, aside from overriding the</st> `<st c="20084">dispatch_request()</st>`
    <st c="20102">method,</st> `<st c="20111">ListUnpaidContractView</st>` <st c="20133">also
    inherits all the attributes and helper methods from the</st> `<st c="20195">View</st>`
    <st c="20199">class, including the</st> `<st c="20221">as_view()</st>` <st c="20230">static
    method, which creates a view name for the view.</st> <st c="20286">During view
    registration, this view name will serve as the</st> `<st c="20345">view_func</st>`
    <st c="20354">name</st> <st c="20360">of the custom</st> `<st c="20374">View</st>`
    <st c="20378">class in the</st> `<st c="20392">add_url_rule()</st>` <st c="20406">method
    with its mapped URL pattern.</st> <st c="20443">The following</st> `<st c="20457">main.py</st>`
    <st c="20464">snippet shows how to</st> <st c="20486">register</st> `<st c="20495">ListUnpaidContractView</st>`<st
    c="20517">:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <st c="20980">class DeleteContractByPIDView(View):</st><st c="21017">methods
    = ['GET', 'POST']</st> … … … … … …
  prefs: []
  type: TYPE_NORMAL
- en: 'def dispatch_request(self):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if request.method == "GET":'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pids = list_pid()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template("contract/ delete_patient_contract.html", pids=pids)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pid = int(request.form['pid'])
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = delete_patient_contract_pid(pid)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result == False:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pids = list_pid()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template("contract/ delete_patient_contract.html", pids=pids)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: contracts = select_all_patient_contract()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template("contract/ list_patient_contract.html", contracts=contracts)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <st c="22328">from flask.views import MethodView</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22363">class ContractView(MethodView):</st> … … … … … … <st c="22407">def
    get(self):</st> return render_template("contract/ add_patient_contract.html")
    <st c="22484">def post(self):</st> pid = request.form['pid']
  prefs: []
  type: TYPE_NORMAL
- en: approver = request.form['approver']
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = insert_patient_contract(pid=int(pid), approved_by=approver, approved_date=approved_date,
    hcp=hcp, payment_mode=payment_mode, amount_paid=float(amount_paid), amount_due=float(amount_due))
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result == False:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template("contract/ add_patient_contract.html")
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: contracts = select_all_patient_contract()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template("contract/ list_patient_contract.html", contracts=contracts)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: from __main__ import app
  prefs: []
  type: TYPE_NORMAL
- en: from <st c="25311">flask</st> import <st c="25324">request</st>, Response, render_template,
    redirect
  prefs: []
  type: TYPE_NORMAL
- en: from repository.user import validate_user
  prefs: []
  type: TYPE_NORMAL
- en: '@app.route(''/login/params'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'def login_with_params(): <st c="25464">username = request.args[''username'']</st><st
    c="25499">password = request.args[''password'']</st> result = validate_user(username,
    password)'
  prefs: []
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: resp = Response(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: response=render_template('/main.html'), status=200, content_type='text/html')
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return resp
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return redirect('/error')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: from __main__ import app
  prefs: []
  type: TYPE_NORMAL
- en: from flask import render_template
  prefs: []
  type: TYPE_NORMAL
- en: from model.candidates import AdminUser, CounselorUser, PatientUser
  prefs: []
  type: TYPE_NORMAL
- en: from urllib.parse import parse_qsl
  prefs: []
  type: TYPE_NORMAL
- en: '@app.route(''/signup/approve'', methods = [''POST''])'
  prefs: []
  type: TYPE_NORMAL
- en: '@app.route(''/signup/approve/<int:utype>'',methods = [''GET''])'
  prefs: []
  type: TYPE_NORMAL
- en: 'def signup_approve(utype:int=None):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if (request.method == ''GET''): <st c="27848">id = request.args[''id'']</st>
    user = select_single_signup(id)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: utype = int(utype)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if int(utype) == 1: <st c="27963">adm = request.get_data()</st> adm_dict =
    dict(parse_qsl(adm.decode(''utf-8'')))'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: adm_model = AdminUser(**adm_dict)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: user_approval_service(int(utype), adm_model)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'elif int(utype) == 2: <st c="28137">cnsl = request.get_data()</st> cnsl_dict
    = dict(parse_qsl('
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cnsl.decode('utf-8')))
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cnsl_model = CounselorUser(**cnsl_dict)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: user_approval_service(int(utype), cnsl_model)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'elif int(utype) == 3: <st c="28322">pat = request.get_data()</st> pat_dict
    = dict(parse_qsl(pat.decode(''utf-8'')))'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pat_model = PatientUser(**pat_dict)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: user_approval_service(int(utype), pat_model)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('approved_user.html', message='approved'), 200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: from flask import render_template, request, Response
  prefs: []
  type: TYPE_NORMAL
- en: '@app.route(''/admin/users/list'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'def generate_admin_users():'
  prefs: []
  type: TYPE_NORMAL
- en: users = select_admin_join_user()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: user_list = [list(rec) for rec in users]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: content = '''<html><head>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <title>User List</title>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </head><body>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h1>List of Users</h1>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>{}
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </body></html>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '''''''.format(user_list) <st c="29967">resp = Response(response=content, status=200,</st>
    <st c="30012">content_type=''text/html'')</st> return <st c="30050">Response</st>
    is instantiated with its required constructor parameters and returned by the view
    function as a response object. The following are the required parameters:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="30215">response</st>`<st c="30224">: Contains the content that needs
    to be rendered either in a string, byte stream, or iterable of either of the</st>
    <st c="30336">two types.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="30346">status</st>`<st c="30353">: Accepts the HTTP status code as
    an integer</st> <st c="30399">or string.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="30409">content_type</st>`<st c="30422">: Accepts the mime type of the
    response object that</st> <st c="30475">needs rendering.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="30491">headers</st>`<st c="30499">: A dictionary that contains the
    response header(s) that is/are necessary for the rendition process, such as</st>
    `<st c="30609">Access-Control-Allow-Origin</st>`<st c="30636">,</st> `<st c="30638">Content-Disposition</st>`<st
    c="30657">,</st> `<st c="30659">Origin</st>`<st c="30665">,</st> <st c="30667">and</st>
    `<st c="30671">Accept</st>`<st c="30677">.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="30678">But if the purpose is to render HTML pages, Flask has a</st> `<st
    c="30735">render_template()</st>` <st c="30752">method that references an HTML
    template file that needs rendering.</st> <st c="30820">The following route function,</st>
    `<st c="30850">signup_users_form()</st>`<st c="30869">, yields the content of
    a signup page – that is,</st> `<st c="30918">add_signup.html</st>` <st c="30933">from</st>
    <st c="30939">the</st> `<st c="30943">/pages</st>` <st c="30949">template folder
    – for new</st> <st c="30976">user applicants:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`<st c="31175">render_template()</st>` <st c="31193">returns HTML content with
    its context data, if there is any, as a string.</st> <st c="31268">To simplify
    the syntax, Flask allows us to return the method’s result and the</st> *<st c="31346">status
    code</st>* <st c="31357">instead of the</st> `<st c="31373">Response</st>` <st
    c="31381">instance since the framework can automatically create a</st> `<st c="31438">Response</st>`
    <st c="31446">instance from these details.</st> <st c="31476">Like the previous
    examples, the following</st> `<st c="31518">signup_list_users()</st>` <st c="31537">uses</st>
    `<st c="31543">render_template()</st>` <st c="31560">to show the list of new user
    applications subject to</st> <st c="31614">admin approval:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '@app.route(''/exam/details/list'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'def report_exam_list():'
  prefs: []
  type: TYPE_NORMAL
- en: exams = list_exam_details() <st c="32760">response = make_response(</st> <st
    c="32785">render_template('exam/list_exams.html',</st><st c="32825">exams=exams),
    200)</st><st c="32844">headers = dict()</st><st c="32861">headers['Content-Type']
    = 'application/vnd.ms-excel'</st><st c="32914">headers['Content-Disposition']
    =</st> <st c="32947">'attachment;filename=questions.xls'</st><st c="32983">response.headers
    = headers</st> return response
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '@app.route(''/exam/assign'', methods=[''GET'', ''POST''])'
  prefs: []
  type: TYPE_NORMAL
- en: 'def assign_exam():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if request.method == ''GET'':'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cids = list_cid()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pids = list_pid() <st c="33772">response = make_response( render_template('exam/assign_exam_form.html',
    pids=pids, cids=cids), 200)</st><st c="33871">response.set_cookie('exam_token',
    str(uuid4()))</st> return response, 200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: id = int(request.form['id'])
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cid = request.form['cid']
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pid = int(request.form['pid'])
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: exam_date = request.form['exam_date']
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: duration = int(request.form['duration'])
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = insert_question_details(id=id, cid=cid, pid=pid, exam_date=exam_date,
    duration=duration)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result: <st c="34221">task_token = request.cookies.get(''exam_token'')</st>
    task = "exam assignment (task id {})".format(task_token)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return redirect(url_for('redirect_success_exam',        message=task ))
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return redirect('/exam/task/error')
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '@app.route(''/exam/assign'', methods=[''GET'', ''POST''])'
  prefs: []
  type: TYPE_NORMAL
- en: 'def assign_exam():'
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: task_token = request.cookies.get('exam_token')
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'task = "exam assignment (task id {})".format(task_token) <st c="35515">return
    redirect(url_for(''redirect_success_exam'',</st><st c="35563">message=task ))</st>
    else: <st c="35631">result</st> variable is <st c="35650">False</st>, redirection
    to an error view called <st c="35693">/exam/task/error</st> will occur. Otherwise,
    the route will redirect to an endpoint or view name called <st c="35792">redirect_success_exam</st>.
    Every <st c="35821">@route</st> has an endpoint equivalent, by default, to its
    view function name. So, <st c="35899">redirect_success_exam</st> is the function
    name of a route with the following implementation:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`<st c="36171">url_for()</st>`<st c="36181">, which is used in the</st> `<st
    c="36204">assign_exam()</st>` <st c="36217">view, is a route handler that allows
    us to pass the endpoint name of the destination view to</st> `<st c="36311">redirect()</st>`
    <st c="36321">instead of passing the actual URL pattern of the destination.</st>
    <st c="36384">It can also pass context data to the Jinja2 template of the redirected
    page or values to path variables if the view uses a dynamic URL pattern.</st>
    <st c="36528">The</st> `<st c="36532">redirect_success_exam()</st>` <st c="36555">function
    shows a perfect scenario of context data passing, where it uses</st> `<st c="36629">request.args</st>`
    <st c="36641">to access a message context passed from</st> `<st c="36682">assign_exam()</st>`<st
    c="36695">, which is where the redirection</st> <st c="36728">call originated.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="36744">More content negotiations</st> <st c="36771">and how to serialize
    various mime types for responses will be showcased in the succeeding chapters,
    but in the meantime, let’s scrutinize the view templates of our route functions.</st>
    <st c="36952">View templates are essential for web-based applications because
    all form-handling transactions, report generation, and page generation depend
    on effective</st> <st c="37107">dynamic templates.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="37125">Implementing view templates</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="37153">Jinja2 is the default templating engine of the Flask framework
    and is used to create HTML, XML, LaTeX, and markup</st> <st c="37268">documents.</st>
    <st c="37279">It is a simple, extensive, fast, and easy-to-use templating approach
    with powerful features such as layout capabilities, built-in programming constructs,
    support for asynchronous operations, context data filtering, and utility for</st>
    <st c="37510">unit testing.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="37523">Firstly, Flask requires all template files to be in the</st> `<st
    c="37580">templates</st>` <st c="37589">directory of the main project.</st> <st
    c="37621">To change this setting, the</st> `<st c="37649">Flask()</st>` <st c="37656">constructor
    has a</st> `<st c="37675">template_folder</st>` <st c="37690">parameter that can
    set and replace the default directory with another one.</st> <st c="37766">Our
    prototype, for instance, has the following Flask instantiation that overrides
    the default templates directory with a more high-level</st> <st c="37903">directory
    name:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: <!DOCTYPE html>
  prefs: []
  type: TYPE_NORMAL
- en: <html lang="en"><head><title>Patient's Score Form</title>
  prefs: []
  type: TYPE_NORMAL
- en: </head><body>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <form action="/exam/score" method="POST">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h3>Exam Score</h3>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <label for="qid">Enter Questionnaire ID:</label> <st c="38966"><select name="qid"></st><st
    c="38985">{% for id in qids %}</st><st c="39006"><option value="{{ id }}">{{ id
    }}</option></st><st c="39049">{% endfor %}</st><st c="39062"></select></st><br/>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <label for="pid">Enter patient ID:</label> <st c="39122"><select name="pid"></st><st
    c="39141">{% for id in pids %}</st><st c="39162"><option value="{{ id }}">{{ id
    }}</option></st><st c="39205">{% endfor %}</st><st c="39218"></select></st><br/>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <input type="submit" value="Assign Exam"/>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </form></body>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </html>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: <st c="39958">@app.route('/signup/form', methods= ['GET'])</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="40003">def signup_users_form():</st> resp = Response(response= render_template('add_signup.html'),
    status=200, content_type="text/html")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return resp <st c="40141">@app.route('/signup/submit', methods= ['POST'])</st>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="40188">def signup_users_submit():</st> username = request.form['username']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: password = request.form['password']
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: user_type = request.form['utype']
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: firstname = request.form['firstname']
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lastname = request.form['lastname']
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cid = request.form['cid']
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: insert_signup(user=username, passw=password, utype=user_type, fname=firstname,
    lname=lastname, cid=cid)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('add_signup_submit.html', message='Added new user!'),
    200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="40768">@app.route('/exam/assign', methods=['GET', 'POST'])</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="40820">def assign_exam():</st> if request.method == ''GET'':'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cids = list_cid()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pids = list_pid()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: response = make_response(render_template('exam/assign_exam_form.html', pids=pids,
    cids=cids), 200)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: response.set_cookie('exam_token', str(uuid4()))
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return response, 200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: id = int(request.form['id'])
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: duration = int(request.form['duration'])
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = insert_question_details(id=id, cid=cid, pid=pid, exam_date=exam_date,
    duration=duration)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: exam_token = request.cookies.get('exam_token')
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return redirect(url_for('introduce_exam', message=str(exam_token)))
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return redirect('/error')
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: pip install psycopg2-binary
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: import psycopg2
  prefs: []
  type: TYPE_NORMAL
- en: import functools
  prefs: []
  type: TYPE_NORMAL
- en: from os import environ
  prefs: []
  type: TYPE_NORMAL
- en: 'def connect_db(func):'
  prefs: []
  type: TYPE_NORMAL
- en: '@functools.wraps(func) <st c="43527">def repo_function(*args, **kwargs):</st><st
    c="43562">conn = psycopg2.connect(</st><st c="43587">host=environ.get(''DB_HOST''),</st><st
    c="43616">database=environ.get(''DB_NAME''),</st><st c="43649">port=environ.get(''DB_PORT''),</st><st
    c="43678">user = environ.get(''DB_USER''),</st><st c="43709">password = environ.get(''DB_PASS''))</st><st
    c="43744">resp = func(conn, *args, **kwargs)</st> conn.commit()'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: conn.close()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return resp
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'return <st c="43894">conn</st>, to a repository function and commits all the
    changes to the database after a transaction’s successful execution. Also, it will
    close the database connection at the end of the process. All the database details,
    such as <st c="44118">DB_HOST</st>, <st c="44127">DB_NAME</st>, and <st c="44140">DB_PORT</st>,
    are stored as environment variables inside a <st c="44194">.env</st> file. To
    retrieve them using the <st c="44232">environ</st> dictionary of the <st c="44258">os</st>
    module, run the following command to install the required extension:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: <st c="44355">However, there are other ways to manage these custom and built-in
    configuration variables instead of storing them as</st> `<st c="44473">.env</st>`
    <st c="44477">variables.</st> <st c="44489">The next topic will expound on this,
    but first, let’s apply</st> `<st c="44549">@connect_db</st>` <st c="44560">to
    our</st> <st c="44568">repository layer.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="44585">Implementing the repository layer</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="44619">The following</st> `<st c="44634">insert_signup()</st>` <st c="44649">transaction</st>
    <st c="44662">adds a new user signup record to the database.</st> <st c="44709">It
    gets the</st> `<st c="44721">conn</st>` <st c="44725">instance from the</st> `<st
    c="44744">@connect_db</st>` <st c="44755">decorator.</st> <st c="44767">Our application
    has no</st> `<st c="44845">psycopg2</st>` <st c="44853">driver to perform the</st>
    <st c="44876">CRUD operation.</st> <st c="44892">The</st> `<st c="44896">cursor</st>`
    <st c="44902">instance created by</st> `<st c="44923">conn</st>` <st c="44927">executes
    the</st> *<st c="44941">INSERT</st>* <st c="44947">statement of the following
    transaction with form data provided by its</st> <st c="45018">view function:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`<st c="45506">cursor</st>` <st c="45513">is an object derived from</st> `<st
    c="45540">conn</st>` <st c="45544">that uses a database session to perform insert,
    update, delete, and fetch operations.</st> <st c="45631">So, just like</st> `<st
    c="45645">insert_signup()</st>`<st c="45660">, the following transaction</st>
    <st c="45687">uses</st> `<st c="45693">cursor</st>` <st c="45699">again to</st>
    <st c="45709">execute the</st> *<st c="45721">UPDATE</st>* <st c="45727">statement:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: <st c="46113">To complete the CRUD operations for the</st> `<st c="46154">signup</st>`
    <st c="46160">table, here is the</st> *<st c="46180">DELETE</st>* <st c="46186">transaction
    from</st> <st c="46204">our application:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: <st c="46457">The use of an ORM to build the model layer</st> <st c="46501">will
    be part of</st> [*<st c="46517">Chapter 2</st>*](B19383_02.xhtml#_idTextAnchor047)<st
    c="46526">’s discussions.</st> <st c="46543">For now, the views and services of
    our application rely on a repository layer that manages PostgreSQL data directly
    through the</st> `<st c="46671">psycopg2</st>` <st c="46679">driver.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="46687">After creating the repository layer, many applications can build
    a service layer to provide loose coupling between the CRUD operations and</st>
    <st c="46827">the views.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="46837">Creating the service layer</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="46864">The service layer of the</st> <st c="46890">application builds
    the business logic of the view functions and the repository.</st> <st c="46970">Instead
    of loading the view functions with transaction-related and business processes,
    we place all these implementations in the service layer by creating lists of all
    the counselor and patient IDs, validating where to persist the newly approved
    user, and creating a list of patients who excelled in the examinations.</st> <st
    c="47288">The following service function evaluates and records</st> <st c="47341">patients’</st>
    <st c="47351">exam scores:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: <st c="47819">Instead of directly accessing</st> `<st c="47850">insert_patient_score()</st>`
    <st c="47872">to save patient exam scores,</st> `<st c="47902">record_score()</st>`
    <st c="47916">accesses the</st> `<st c="47930">record_patient_exam()</st>` <st
    c="47951">service to compute some formulas before invoking</st> `<st c="48001">insert_patient_score()</st>`
    <st c="48023">from the repository layer for record insertion.</st> <st c="48072">The
    service lessens some friction between the database transactions and the view layer.</st>
    <st c="48160">The following snippet is the view function that accesses the</st>
    `<st c="48221">record_patient_exam()</st>` <st c="48242">service for record exam</st>
    <st c="48267">record insertion:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: <st c="48796">Aside from calling</st> `<st c="48816">record_patient_exam()</st>`<st
    c="48837">, it also utilizes the</st> `<st c="48860">list_pid()</st>` <st c="48870">and</st>
    `<st c="48875">list_qid()</st>` <st c="48885">services to retrieve the IDs.</st>
    <st c="48916">The use of services can help separate the abstraction and use cases
    from the route functions, which has a beneficial impact on the scope, clean coding,
    and runtime</st> <st c="49080">performance of the routes.</st> <st c="49107">Moreover,
    the project structure can also contribute to clear business flow, maintainability,
    flexibility,</st> <st c="49213">and adaptability.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="49230">Managing the project structure</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="49261">Flask provides developers</st> <st c="49288">with the convenience
    of building their desired project structure.</st> <st c="49354">It is open to
    any design patterns and architectural strategies for building a project directory
    because of its Pythonic characteristics.</st> <st c="49491">The focus of this
    discussion revolves around setting up our</st> *<st c="49551">Online Personal
    Counseling System</st>* <st c="49584">application using the simple and single-structured
    project approach while highlighting the different configuration</st> <st c="49700">variable
    setups.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="49716">Building the directory structure</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="49749">The first aspect to consider in</st> <st c="49781">building the
    project structure is the level of complexity of the project scope.</st> <st c="49862">Since
    our project focuses only on small-scale clientele, a typical</st> *<st c="49929">single-structured</st>*
    <st c="49946">approach is enough to cater to a less scalable application.</st>
    <st c="50007">Second, we must ensure the proper layering or breakdown of various
    project components from the view layer down to the test modules so that the developers
    can identify what parts to prioritize, maintain, bug-fix, and test.</st> <st c="50229">The
    following is a screenshot of the directory structure of</st> <st c="50289">our
    prototype:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.4 – The single-structured project directory](img/B19383_01_004.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="50319">Figure 1.4 – The single-structured project directory</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[*<st c="50371">Chapter 2</st>*](B19383_02.xhtml#_idTextAnchor047) <st c="50381">will
    discuss other project structure techniques, especially when applications are scalable</st>
    <st c="50473">and complex.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50485">Setting up a development environment</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50522">A Flask application, by default, is production-ready, even though
    its server, the Werkzeug’s built-in server, is not.</st> <st c="50641">We need
    to replace it with an enterprise-grade server to be fully ready for</st> <st c="50717">production
    setup.</st> <st c="50735">However, our goal is to set up a Flask project with
    a development environment that we can sample and experiment on with various features
    and test cases.</st> <st c="50888">There are three ways to set up a Flask 3.x
    project for development and</st> <st c="50959">testing purposes:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50976">Running the server with</st> `<st c="51001">app.run(debug=True)</st>`
    <st c="51020">in</st> `<st c="51024">main.py</st>`<st c="51031">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="51032">Setting the</st> `<st c="51045">FLASK_DEBUG</st>` <st c="51056">and</st>
    `<st c="51061">TESTING</st>` <st c="51068">built-in configuration variables to</st>
    `<st c="51105">true</st>` <st c="51109">in the</st> <st c="51117">configuration
    file.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="51136">Running the application with the</st> `<st c="51170">flask run
    --</st>``<st c="51182">debug</st>` <st c="51188">command.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="51197">Setting the development environment will also enable automatic
    reloading and the default debugger of the framework.</st> <st c="51314">However,
    turn off debugging mode after deploying the application to production to avoid
    security risks for the applications and software logging problems.</st> <st c="51469">The
    following screenshot shows the server log when running a Flask project with a
    development</st> <st c="51563">environment setup:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.5 – The server log of Flask’s built-in server](img/B19383_01_005.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="51745">Figure 1.5 – The server log of Flask’s built-in server</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*<st c="51799">Figure 1</st>**<st c="51808">.5</st>* <st c="51810">shows that
    debug mode is set to</st> `<st c="51843">ON</st>` <st c="51845">and that the debugger
    is enabled and given a</st> `<st c="51891">PIN</st>` <st c="51894">value.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51901">Implementing the main.py module</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51933">When creating a simple</st> <st c="51957">project like our specimen,
    the main module usually contains the Flask instantiation and some of its parameters
    (for example,</st> `<st c="52082">template_folder</st>` <st c="52097">for the
    new directory of the HTML templates) and the required imports of the</st> <st
    c="52175">views below it.</st> <st c="52191">The following is the complete code
    of our</st> `<st c="52233">main.py</st>` <st c="52240">file:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '«DB_USER» : «postgres»,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '«DB_PASS» : «admin2255»,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '«DB_PORT» : 5433,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"DB_HOST" : "localhost",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"DB_NAME" : "opcs",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"FLASK_DEBUG" : true,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"TESTING": true'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: DB_USER = «postgres»
  prefs: []
  type: TYPE_NORMAL
- en: DB_PASS = «admin2255»
  prefs: []
  type: TYPE_NORMAL
- en: DB_PORT = 5433
  prefs: []
  type: TYPE_NORMAL
- en: DB_HOST = "localhost"
  prefs: []
  type: TYPE_NORMAL
- en: DB_NAME = "opcs"
  prefs: []
  type: TYPE_NORMAL
- en: FLASK_DEBUG = True
  prefs: []
  type: TYPE_NORMAL
- en: TESTING = True
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: app.config.from_file("config.json", load=json.load)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: app.config.from_pyfile('myconfig.py')
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: DB_USER = «postgres»
  prefs: []
  type: TYPE_NORMAL
- en: DB_PASS = «admin2255»
  prefs: []
  type: TYPE_NORMAL
- en: DB_PORT = 5433
  prefs: []
  type: TYPE_NORMAL
- en: DB_HOST = "localhost"
  prefs: []
  type: TYPE_NORMAL
- en: DB_NAME = "opcs"
  prefs: []
  type: TYPE_NORMAL
- en: FLASK_DEBUG = true
  prefs: []
  type: TYPE_NORMAL
- en: TESTING = true
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: <st c="56983">from __main__ import app</st> import psycopg2
  prefs: []
  type: TYPE_NORMAL
- en: import functools
  prefs: []
  type: TYPE_NORMAL
- en: 'def connect_db(func):'
  prefs: []
  type: TYPE_NORMAL
- en: '@functools.wraps(func)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def repo_function(*args, **kwargs):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: conn = psycopg2.connect( <st c="57148">host=app.config['DB_HOST'],</st><st c="57175">database=app.config['DB_NAME'],</st><st
    c="57207">port=app.config['DB_PORT'],</st><st c="57235">user=app.config['DB_USER'],</st><st
    c="57263">password=app.config['DB_PASS'])</st> resp = func(conn, *args, **kwargs)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: conn.commit()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: conn.close()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return resp
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return repo_function
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
