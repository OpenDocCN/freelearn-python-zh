- en: <st c="0">1</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">1</st>
- en: <st c="2">A Deep Dive into the Flask Framework</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">深入探讨Flask框架</st>
- en: '**<st c="38">Flask</st>** <st c="44">is a</st> **<st c="50">Python</st>** <st
    c="56">web framework that was created by Armin Ronacher to solve both web-based
    and API-related</st> <st c="145">requirements that need a rapid development approach.</st>
    <st c="199">It is a lightweight framework with helper classes and methods, a built-in
    server, a debugger, and a reloader, all of which are required for building scalable
    web applications and</st> <st c="378">web services.</st>'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="38">Flask</st>** <st c="44">是一个</st> **<st c="50">Python</st>** <st
    c="56">Web框架，由Armin Ronacher创建，旨在解决需要快速开发方法的基于Web和API相关的</st> <st c="145">需求。</st>
    <st c="199">它是一个轻量级框架，具有辅助类和方法、内置服务器、调试器和重新加载器，这些都是构建可扩展Web应用程序和</st> <st c="378">Web服务所必需的。</st>'
- en: <st c="391">Unlike the Django framework, Flask is minimalistic and slimmer in
    that it requires more experience in using Python to craft various coding techniques
    and workarounds to implement its components.</st> <st c="587">It is more open-ended
    and extensible than the full-stack Django, which is more friendly to newbies because
    of its easy-to-build projects and</st> <st c="728">reusable components.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="391">与Django框架不同，Flask更为简约和精简，因为它需要更多的Python使用经验来制作各种编码技巧和解决方案以实现其组件。</st>
    <st c="587">它比全栈的Django更具开放性和可扩展性，Django因其易于构建的项目和可重用组件而更适合新手。</st>
- en: <st c="748">This first chapter will showcase the essential task itineraries
    that cover the initial components and base features of Flask 3.x that are essential
    in initiating our</st> <st c="915">web development.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="748">本章将展示涵盖Flask 3.x初始组件和基础功能的必要任务流程，这些功能对于启动我们的</st> <st c="915">Web开发至关重要。</st>
- en: <st c="931">In this chapter, we will cover the following</st> <st c="977">development
    tasks:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="931">在本章中，我们将涵盖以下</st> <st c="977">开发任务：</st>
- en: <st c="995">Setting up the</st> <st c="1011">project baseline</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="995">设置</st> <st c="1011">项目基线</st>
- en: <st c="1027">Creating routes</st> <st c="1044">and navigations</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1027">创建路由</st> <st c="1044">和导航</st>
- en: <st c="1059">Managing the requests and</st> <st c="1086">response data</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1059">管理请求和</st> <st c="1086">响应数据</st>
- en: <st c="1099">Implementing</st> <st c="1113">view templates</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1099">实现</st> <st c="1113">视图模板</st>
- en: <st c="1127">Creating</st> <st c="1137">web forms</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1127">创建</st> <st c="1137">Web表单</st>
- en: <st c="1146">Building the data layer</st> <st c="1171">with PostgreSQL</st>
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1146">使用PostgreSQL构建数据层</st> <st c="1171">。</st>
- en: <st c="1186">Managing the</st> <st c="1200">project structure</st>
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1186">管理项目结构</st>
- en: <st c="1217">Technical requirements</st>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1217">技术要求</st>
- en: <st c="1240">The first chapter will focus on building a prototype for an</st>
    *<st c="1301">Online Personal Counseling System</st>* <st c="1334">that simulates
    a face-to-face consultation between a patient and a counselor while highlighting
    the base components of</st> *<st c="1454">Flask 3.x</st>*<st c="1463">. The application
    will cover modules such as managing users, questionnaires, and some reports.</st>
    <st c="1558">The code for this chapter can be found</st> <st c="1597">at</st>
    [<st c="1600">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch01</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch01)<st
    c="1681">.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1240">第一章将专注于构建一个</st> *<st c="1301">在线个人咨询系统</st>* <st c="1334">的原型，该系统模拟患者与咨询师之间的面对面咨询，同时突出显示</st>
    *<st c="1454">Flask 3.x</st>*<st c="1463">的基础组件。</st> <st c="1558">该应用程序将涵盖用户管理、问卷和一些报告等模块。</st>
    <st c="1558">本章的代码可以在</st> <st c="1597">[https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch01](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch01)<st
    c="1681">找到。</st>
- en: <st c="1682">Setting up the project baseline</st>
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1682">设置项目基线</st>
- en: <st c="1714">Gathering and studying the</st> <st c="1741">system requirements
    for the development environment for the proposed project is essential.</st> <st
    c="1833">Some of these requirements include the correct versions of the installers
    and libraries, the appropriate servers, and the inclusion of other essential dependencies.</st>
    <st c="1998">We have to perform various setups before kicking off</st> <st c="2051">our
    projects.</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1714">收集和研究</st> <st c="1741">提议项目的开发环境系统需求是至关重要的。</st> <st c="1833">这些需求包括安装程序和库的正确版本、适当的服务器以及包含其他必要依赖项。</st>
    <st c="1998">在启动我们的项目之前，我们必须进行各种设置。</st> <st c="2051">。</st>
- en: <st c="2064">Installing the latest Python version</st>
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="2064">安装最新版本的 Python</st>
- en: <st c="2101">All our applications will run</st> <st c="2131">on the</st> *<st
    c="2139">Python 11</st>* <st c="2148">environment for faster performance.</st>
    <st c="2185">The updated Python installer for all operating systems is available</st>
    <st c="2253">at</st> [<st c="2256">https://www.python.org/downloads/</st>](https://www.python.org/downloads/)<st
    c="2289">.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2101">我们所有的应用程序都将</st> <st c="2131">在</st> *<st c="2139">Python 11</st>
    *<st c="2148">环境中运行，以实现更快的性能。</st> <st c="2185">适用于所有操作系统的最新 Python 安装程序可在</st>
    <st c="2253">以下位置获取</st> [<st c="2256">https://www.python.org/downloads/</st>](https://www.python.org/downloads/)<st
    c="2289">。</st>
- en: <st c="2290">Installing the Visual Studio (VS) Code editor</st>
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="2290">安装 Visual Studio (VS) Code 编辑器</st>
- en: <st c="2336">The Django framework has a</st> `<st c="2364">django-admin</st>`
    <st c="2376">command that generates a project structure, but Flask does</st> <st
    c="2435">not have that.</st> <st c="2451">We can use a terminal console or a tool
    such as the</st> **<st c="2503">Visual Studio</st>** <st c="2516">(</st>**<st
    c="2518">VS</st>**<st c="2520">)</st> **<st c="2523">Code</st>** <st c="2527">editor
    that can</st> <st c="2543">help developers create a Flask project.</st> <st c="2584">The
    VS Code installer is available</st> <st c="2619">at</st> [<st c="2622">https://code.visualstudio.com/download</st>](https://code.visualstudio.com/download)<st
    c="2660">.</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2336">Django 框架有一个</st> `<st c="2364">django-admin</st>` <st c="2376">命令可以生成项目结构，但
    Flask 没有这个功能。</st> <st c="2435">我们可以使用终端控制台或像</st> **<st c="2503">Visual Studio</st>**
    <st c="2516">(**<st c="2518">VS</st>**<st c="2520">)** <st c="2523">Code</st>**
    <st c="2527">编辑器这样的工具来帮助开发者创建 Flask 项目。</st> <st c="2584">VS Code 安装程序可在</st>
    <st c="2619">以下位置获取</st> [<st c="2622">https://code.visualstudio.com/download</st>](https://code.visualstudio.com/download)<st
    c="2660">。</st>
- en: <st c="2661">After installing the VS Code editor, we can create a filesystem
    folder through it and start a Flask project.</st> <st c="2771">To create the folder,
    we should go to the</st> **<st c="2813">Open Folder</st>** <st c="2824">option
    under</st> **<st c="2838">File</st>** <st c="2842">or use the</st> *<st c="2854">Ctrl</st>*
    <st c="2858">+</st> *<st c="2861">K</st>* <st c="2862">+</st> *<st c="2865">O</st>*
    <st c="2866">shortcut to open the</st> **<st c="2888">Open Folder</st>** <st c="2899">mini-window.</st>
    *<st c="2913">Figure 1</st>**<st c="2921">.1</st>* <st c="2923">shows a sample
    process of creating a Flask project using</st> <st c="2981">the editor:</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2661">在安装了 VS Code 编辑器之后，我们可以通过它创建一个文件系统文件夹并启动一个 Flask 项目。</st> <st c="2771">要创建文件夹，我们应该前往</st>
    **<st c="2813">打开文件夹</st>** <st c="2824">选项，位于</st> **<st c="2838">文件</st>** <st
    c="2842">下，或者使用</st> *<st c="2854">Ctrl</st> *<st c="2858">+<st c="2861">K</st>
    *<st c="2862">+<st c="2865">O</st> *<st c="2866">快捷键来打开</st> **<st c="2888">打开文件夹</st>**
    <st c="2899">迷你窗口。</st> *<st c="2913">图 1.1</st>**<st c="2921">.1</st>* <st c="2923">展示了使用</st>
    <st c="2981">编辑器创建 Flask 项目的示例过程：</st>
- en: '![Figure 1.1 – Creating a Flask project folder using the VS Code editor](img/B19383_01_001.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 使用 VS Code 编辑器创建 Flask 项目文件夹](img/B19383_01_001.jpg)'
- en: <st c="3923">Figure 1.1 – Creating a Flask project folder using the VS Code
    editor</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3923">图 1.1 – 使用 VS Code 编辑器创建 Flask 项目文件夹</st>
- en: <st c="3992">Creating the virtual environment</st>
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3992">创建虚拟环境</st>
- en: <st c="4025">Another aspect of developing a Flask project is having a</st> <st
    c="4083">repository called a</st> **<st c="4103">virtual environment</st>** <st
    c="4122">that can hold its libraries.</st> <st c="4152">It is a mechanism or a
    tool that can manage all dependencies of a project by isolating these dependencies
    from the global repository and other project</st> <st c="4302">dependencies.</st>
    <st c="4317">The following are the advantages of using this tool in developing</st>
    <st c="4383">Flask-based applications:</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4025">开发 Flask 项目的另一个方面是拥有一个</st> <st c="4083">称为</st> **<st c="4103">虚拟环境</st>**
    <st c="4122">的仓库，可以存放其库。</st> <st c="4152">这是一个机制或工具，可以通过隔离这些依赖项从全局仓库和其他项目</st>
    <st c="4302">依赖项中，来管理项目的所有依赖项。</st> <st c="4317">以下是在开发基于</st> <st c="4383">Flask
    的应用程序时使用此工具的优势：</st>
- en: <st c="4408">It can avoid broken module versions and collisions with other existing
    similar global</st> <st c="4495">repository libraries.</st>
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4408">它可以避免损坏的模块版本，以及与其他现有类似的全局</st> <st c="4495">仓库库的冲突。</st>
- en: <st c="4516">It can help build a dependency tree for</st> <st c="4557">the project.</st>
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4516">它可以帮助为</st> <st c="4557">项目构建依赖树。</st>
- en: <st c="4569">It can help ease the deployment of applications with libraries
    to both physical and</st> <st c="4654">cloud-based servers.</st>
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4569">它可以帮助简化将应用程序与库部署到物理和</st> <st c="4654">基于云的服务器。</st>
- en: <st c="4674">A Python extension named</st> `<st c="4700">virtualenv</st>` <st
    c="4710">is required to set up these virtual environments.</st> <st c="4761">To
    install the extension, run the following command in</st> <st c="4816">the terminal:</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4674">需要一个名为</st> `<st c="4700">virtualenv</st>` <st c="4710">的Python扩展来设置这些虚拟环境。</st>
    <st c="4761">要安装扩展，请在</st> <st c="4816">终端</st> <st c="4816">中运行以下命令：</st>
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="4852">After this installation, we need to run</st> `<st c="4893">python
    virtualenv -m ch01-01</st>` <st c="4921">to create our first virtual environment
    for our Flask project.</st> *<st c="4985">Figure 1</st>**<st c="4993">.2</st>*
    <st c="4995">shows a snapshot of creating our</st> `<st c="5029">ch01-env</st>`
    <st c="5037">repository:</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4852">安装完成后，我们需要运行</st> `<st c="4893">python virtualenv -m ch01-01</st>`
    <st c="4921">来为我们的Flask项目创建第一个虚拟环境。</st> *<st c="4985">图1</st>**<st c="4993">.2</st>*
    <st c="4995">显示了创建我们的</st> `<st c="5029">ch01-env</st>` <st c="5037">存储库的快照：</st>
- en: '![Figure 1.2 – Creating a virtual environment](img/B19383_01_002.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 创建虚拟环境](img/B19383_01_002.jpg)'
- en: <st c="5289">Figure 1.2 – Creating a virtual environment</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5289">图1.2 – 创建虚拟环境</st>
- en: '<st c="5332">The next step is to open the</st> <st c="5361">project and link
    it to the virtual environment created for it.</st> <st c="5425">Pressing</st>
    *<st c="5434">Ctrl</st>* <st c="5438">+</st> *<st c="5441">Shift</st>* <st c="5446">+</st>
    *<st c="5449">P</st>* <st c="5450">in VS Code will open the</st> `<st c="5522">Python:
    Select Interpreter</st>`<st c="5548">. Clicking this option will lead you to the</st>
    `<st c="5730">Python.exe</st>` <st c="5740">file in the</st> `<st c="5753">/Scripts</st>`
    <st c="5761">folder.</st> *<st c="5770">Figure 1</st>**<st c="5778">.3</st>* <st
    c="5780">shows a snapshot of locating the Python interpreter in the repository’s</st>
    `<st c="5853">/</st>``<st c="5854">Scripts</st>` <st c="5861">folder:</st>'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="5332">下一步是打开</st> <st c="5361">项目并将其链接到为其创建的虚拟环境。</st> <st c="5425">在VS
    Code中按</st> *<st c="5434">Ctrl</st>* <st c="5438">+</st> *<st c="5441">Shift</st>*
    <st c="5446">+</st> *<st c="5449">P</st>* <st c="5450">将打开</st> `<st c="5522">Python:
    Select Interpreter</st>`<st c="5548">。点击此选项将带您到</st> `<st c="5730">Python.exe</st>`
    <st c="5740">文件所在的</st> `<st c="5753">/Scripts</st>` <st c="5761">文件夹。</st> *<st
    c="5770">图1</st>**<st c="5778">.3</st>* <st c="5780">显示了在存储库的</st> `<st c="5853">/</st>``<st
    c="5854">Scripts</st>` <st c="5861">文件夹中定位Python解释器的快照：</st>'
- en: '![Figure 1.3 – Locating the Python interpreter of the virtual environment](img/B19383_01_003.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 定位虚拟环境的Python解释器](img/B19383_01_003.jpg)'
- en: <st c="6759">Figure 1.3 – Locating the Python interpreter of the virtual environment</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6759">图1.3 – 定位虚拟环境的Python解释器</st>
- en: <st c="6830">Afterward, the virtual environment must be activated for the project
    to utilize it.</st> <st c="6915">You must run</st> `<st c="6928">/Scripts/activate.bat</st>`
    <st c="6949">in Windows or</st> `<st c="6964">/bin/activate</st>` <st c="6977">in
    Linux through the editor’s internal</st> <st c="7017">console.</st> <st c="7026">Upon
    activation, the terminal should show the name of the virtual environment in its
    prompt (for example,</st> `<st c="7132">(</st>``<st c="7133">ch01-env) C:\</st>`<st
    c="7146">).</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6830">之后，必须激活虚拟环境才能让项目使用它。</st> <st c="6915">您必须在Windows中运行</st> `<st
    c="6928">/Scripts/activate.bat</st>` <st c="6949">或在Linux中通过编辑器的内部</st> <st c="7017">控制台</st>
    <st c="7026">运行</st> `<st c="6964">/bin/activate</st>` <st c="6977">。</st> <st
    c="7026">激活后，终端的提示符应显示虚拟环境名称（例如，</st> `<st c="7132">(</st>``<st c="7133">ch01-env)
    C:\</st>`<st c="7146">）。</st>
- en: <st c="7149">Installing the Flask 3.x libraries</st>
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="7149">安装Flask 3.x库</st>
- en: <st c="7184">The integrated</st> <st c="7200">terminal of VS Code will appear
    after right-clicking the explorer portion of the editor, which leads to the</st>
    `<st c="7497">pip</st>` `<st c="7501">install flask</st>`<st c="7514">.</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7184">VS Code的集成</st> <st c="7200">终端将在右键点击编辑器中的资源管理器部分后出现，这将导致</st>
    `<st c="7497">pip</st>` `<st c="7501">install flask</st>`<st c="7514">.</st>
- en: <st c="7515">Once all the requirements are in place, we are ready to create
    our</st> <st c="7583">baseline application.</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7515">一旦所有要求都满足，我们就可以创建我们的</st> <st c="7583">基线应用程序</st>。
- en: <st c="7604">Creating the Flask project</st>
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="7604">创建Flask项目</st>
- en: <st c="7631">The first component that</st> <st c="7657">must be implemented
    in the main project folder (that is,</st> `<st c="7714">ch01</st>`<st c="7718">)
    is the application file, which can be</st> `<st c="7759">main.py</st>` <st c="7766">or</st>
    <st c="7769">sometimes</st> `<st c="7780">app.py</st>`<st c="7786">. This component
    will become the top-level module the Flask will recognize when the server starts.</st>
    <st c="7885">Here is the baseline application file for our</st> *<st c="7931">Online
    Personal Counseling</st>* *<st c="7958">System</st>* <st c="7964">prototype:</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="12019">@app.route('/home')</st>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12039">def home():</st> return '''
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: <html><head><title>Online Personal … System</title>
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </head><body>
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h1>Online … Counseling System (OPCS)</h1>
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>This is a template of a web-based counseling
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: application where counselors can … … …</em>
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </body></html>
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''''''''
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="12779">@app.route('/home')</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12799">@app.route('/information')</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12826">@app.route('/introduction')</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12854">def home():</st> return '''<html><head>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: <title>Online Personal … System</title>
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </head><body>
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h1>Online … Counseling System (OPCS)</h1>
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … …
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </body></html>
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''''''''
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '<st c="13563">@app.route(''/exam/passers/list/<float:rate>/<uuid:docId>'')</st>
    def report_exam_passers(<st c="13647">rating:float, docId:uuid4 = None</st>):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: exams = list_passing_scores(<st c="13712">rating</st>)
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: response = make_response(
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: render_template('exam/list_exam_passers.html',
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exams=exams, docId=<st c="13814">docId</st>), 200)
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return response
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '<st c="15351">@app.route(''/certificate/accomp/<string:name>/</st><st c="15398"><string:course>/<date:accomplished_date>'')</st>
    def show_certification(<st c="15465">name:str, course:str, accomplished_date:date</st>):'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: certificate = """<html><head>
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <title>Certificate of Accomplishment</title>
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </head><body>
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h1>Certificate of Accomplishment</h1>
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>The participant {} is, hereby awarded this certificate of accomplishment,
    in {} course on {} date for passing all exams. He/she proved to be ready for any
    of his/her future endeavors.</em>
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </body></html>
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '""".format(<st c="15860">name, course, accomplished_date</st>)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return certificate, 200
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="16263">from werkzeug.routing import BaseConverter</st> from datetime
    import datetime
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'class DateConverter(<st c="16357">BaseConverter</st>): <st c="16375">def to_python(self,
    value):</st> date_value = datetime.strptime(value, "%Y-%m-%d")'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return date_value
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: app = Flask(__name__) <st c="16977">app.url_map.converters['date'] = DateConverter</st>
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: app = Flask(__name__)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'def show_honor_dissmisal(<st c="18240">counselor:str, effective_date:date,
    patient:str</st>):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: letter = """
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … …
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </head><body>
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <h1> Termination of Consultation </h1>
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<p>From: <st c="18377">{}</st> <p>Head, Counselor'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<p>Date: <st c="18408">{}</st> <p>To: <st c="18418">{}</st> <p>Subject: Termination
    of consultation'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>Dear {},
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>Yours Sincerely,
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p><st c="18508">{}</st> </body>
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </html>
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '""".format(<st c="18539">counselor, effective_date, patient, patient, counselor</st>)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '""".format(<st c="18539">counselor, effective_date, patient, patient, counselor</st>)'
- en: return letter, 200 <st c="18818">add_url_rule()</st> is not only confined to
    the decorated function views but is also necessary for *<st c="18912">class-based
    views</st>*.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return letter, 200 <st c="18818">add_url_rule()</st>不仅限于装饰函数视图，对于</st> *<st
    c="18912">基于类的视图</st>* 也是必要的。
- en: <st c="18930">Implementing class-based views</st>
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="18930">实现基于类的视图</st>
- en: <st c="18961">Another way to create</st> <st c="18984">the view layer is through
    Flask’s class-based view approach.</st> <st c="19045">Unlike the Django framework,
    which uses mixin programming to implement its class-based views, Flask provides
    two API classes, namely</st> `<st c="19178">View</st>` <st c="19182">and</st>
    `<st c="19187">MethodView</st>`<st c="19197">, that can directly subclass any
    custom</st> <st c="19237">view implementations.</st>
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="18961">创建视图层还有另一种方法是通过Flask的基于类的视图方法。</st> <st c="18984">与使用混入编程实现其基于类的视图的Django框架不同，Flask提供了两个API类，即</st>
    `<st c="19178">View</st>` <st c="19182">和</st> `<st c="19187">MethodView</st>`<st
    c="19197">，可以直接从任何自定义</st> <st c="19237">视图实现中继承。</st>
- en: <st c="19258">The most common and generic class to implement HTTP</st> `<st
    c="19311">GET</st>` <st c="19314">operations is the</st> `<st c="19333">View</st>`
    <st c="19337">class from the</st> `<st c="19353">flask.views</st>` <st c="19364">module.</st>
    <st c="19373">It has a</st> `<st c="19382">dispatch_request()</st>` <st c="19400">method
    that executes the request-response transactions like a typical view function.</st>
    <st c="19486">Thus, subclasses must override this core method to implement their
    view transactions.</st> <st c="19572">The following class,</st> `<st c="19593">ListUnpaidContractView</st>`<st
    c="19615">, renders a list of patients with payments due to</st> <st c="19665">the
    clinic:</st>
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="19258">实现HTTP</st> `<st c="19311">GET</st>` <st c="19314">操作的通用类是来自</st>
    `<st c="19333">flask.views</st>` <st c="19337">模块的</st> `<st c="19353">View</st>`
    <st c="19364">类。</st> <st c="19373">它有一个</st> `<st c="19382">dispatch_request()</st>`
    <st c="19400">方法，该方法执行请求-响应事务，就像典型的视图函数一样。</st> <st c="19486">因此，子类必须重写这个核心方法来实现它们自己的视图事务。</st>
    <st c="19572">以下类，</st> `<st c="19593">ListUnpaidContractView</st>`<st c="19615">，渲染了需要支付给诊所的患者的列表：</st>
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`<st c="19893">select_all_unpaid_patient()</st>` <st c="19921">will provide
    the patient records from the database.</st> <st c="19974">All these records will
    be rendered to the</st> `<st c="20016">list_patient_contract.html</st>` <st c="20042">template.</st>
    <st c="20053">Now, aside from overriding the</st> `<st c="20084">dispatch_request()</st>`
    <st c="20102">method,</st> `<st c="20111">ListUnpaidContractView</st>` <st c="20133">also
    inherits all the attributes and helper methods from the</st> `<st c="20195">View</st>`
    <st c="20199">class, including the</st> `<st c="20221">as_view()</st>` <st c="20230">static
    method, which creates a view name for the view.</st> <st c="20286">During view
    registration, this view name will serve as the</st> `<st c="20345">view_func</st>`
    <st c="20354">name</st> <st c="20360">of the custom</st> `<st c="20374">View</st>`
    <st c="20378">class in the</st> `<st c="20392">add_url_rule()</st>` <st c="20406">method
    with its mapped URL pattern.</st> <st c="20443">The following</st> `<st c="20457">main.py</st>`
    <st c="20464">snippet shows how to</st> <st c="20486">register</st> `<st c="20495">ListUnpaidContractView</st>`<st
    c="20517">:</st>'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="19893">select_all_unpaid_patient()</st>` <st c="19921">将从数据库中提供患者记录。</st>
    <st c="19974">所有这些记录都将渲染到</st> `<st c="20016">list_patient_contract.html</st>`
    <st c="20042">模板中。</st> <st c="20053">现在，除了重写</st> `<st c="20084">dispatch_request()</st>`
    <st c="20102">方法外，</st> `<st c="20111">ListUnpaidContractView</st>` <st c="20133">还从</st>
    `<st c="20195">View</st>` <st c="20199">类继承了所有属性和辅助方法，包括</st> `<st c="20221">as_view()</st>`
    <st c="20230">静态方法，该方法为视图创建一个视图名称。</st> <st c="20286">在视图注册期间，此视图名称将作为</st> `<st
    c="20345">view_func</st>` <st c="20354">名称</st> <st c="20360">，在</st> `<st c="20374">View</st>`
    <st c="20378">类的</st> `<st c="20392">add_url_rule()</st>` <st c="20406">方法中，与其映射的URL模式一起使用。</st>
    <st c="20443">以下</st> `<st c="20457">main.py</st>` <st c="20464">片段显示了如何</st>
    <st c="20486">注册</st> `<st c="20495">ListUnpaidContractView</st>`<st c="20517">：</st>'
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="20980">class DeleteContractByPIDView(View):</st><st c="21017">methods
    = ['GET', 'POST']</st> … … … … … …
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20980">class DeleteContractByPIDView(View):</st><st c="21017">methods
    = ['GET', 'POST']</st> … … … … … …
- en: 'def dispatch_request(self):'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def dispatch_request(self):'
- en: 'if request.method == "GET":'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if request.method == "GET":'
- en: pids = list_pid()
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pids = list_pid()
- en: return render_template("contract/ delete_patient_contract.html", pids=pids)
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return render_template("contract/ delete_patient_contract.html", pids=pids)
- en: 'else:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: pid = int(request.form['pid'])
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pid = int(request.form['pid'])
- en: result = delete_patient_contract_pid(pid)
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: result = delete_patient_contract_pid(pid)
- en: 'if result == False:'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if result == False:'
- en: pids = list_pid()
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pids = list_pid()
- en: return render_template("contract/ delete_patient_contract.html", pids=pids)
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return render_template("contract/ delete_patient_contract.html", pids=pids)
- en: contracts = select_all_patient_contract()
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: contracts = select_all_patient_contract()
- en: return render_template("contract/ list_patient_contract.html", contracts=contracts)
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return render_template("contract/ list_patient_contract.html", contracts=contracts)
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="22328">from flask.views import MethodView</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22328">从 flask.views 导入 MethodView</st>
- en: <st c="22363">class ContractView(MethodView):</st> … … … … … … <st c="22407">def
    get(self):</st> return render_template("contract/ add_patient_contract.html")
    <st c="22484">def post(self):</st> pid = request.form['pid']
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22363">class ContractView(MethodView):</st> … … … … … … <st c="22407">def
    get(self):</st> return render_template("contract/ add_patient_contract.html")
    <st c="22484">def post(self):</st> pid = request.form['pid']
- en: approver = request.form['approver']
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: approver = request.form['approver']
- en: … … … … … …
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: result = insert_patient_contract(pid=int(pid), approved_by=approver, approved_date=approved_date,
    hcp=hcp, payment_mode=payment_mode, amount_paid=float(amount_paid), amount_due=float(amount_due))
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: result = insert_patient_contract(pid=int(pid), approved_by=approver, approved_date=approved_date,
    hcp=hcp, payment_mode=payment_mode, amount_paid=float(amount_paid), amount_due=float(amount_due))
- en: 'if result == False:'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if result == False:'
- en: return render_template("contract/ add_patient_contract.html")
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return render_template("contract/ add_patient_contract.html")
- en: contracts = select_all_patient_contract()
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: contracts = select_all_patient_contract()
- en: return render_template("contract/ list_patient_contract.html", contracts=contracts)
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return render_template("contract/ list_patient_contract.html", contracts=contracts)
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: from __main__ import app
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从 __main__ 导入 app
- en: from <st c="25311">flask</st> import <st c="25324">request</st>, Response, render_template,
    redirect
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从 <st c="25311">flask</st> 导入 <st c="25324">request</st>, Response, render_template,
    redirect
- en: from repository.user import validate_user
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 从 repository.user 导入 validate_user
- en: '@app.route(''/login/params'')'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '@app.route(''/login/params'')'
- en: 'def login_with_params(): <st c="25464">username = request.args[''username'']</st><st
    c="25499">password = request.args[''password'']</st> result = validate_user(username,
    password)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'def login_with_params(): <st c="25464">username = request.args[''username'']</st><st
    c="25499">password = request.args[''password'']</st> result = validate_user(username,
    password)'
- en: 'if result:'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if result:'
- en: resp = Response(
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: resp = Response(
- en: response=render_template('/main.html'), status=200, content_type='text/html')
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: response=render_template('/main.html'), 状态=200, 内容类型='text/html')
- en: return resp
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return resp
- en: 'else:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: return redirect('/error')
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return redirect('/error')
- en: '[PRE12]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: from __main__ import app
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 从 __main__ 导入 app
- en: from flask import render_template
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 从 flask 导入 render_template
- en: from model.candidates import AdminUser, CounselorUser, PatientUser
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 从 model.candidates 导入 AdminUser, CounselorUser, PatientUser
- en: from urllib.parse import parse_qsl
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 从 urllib.parse 导入 parse_qsl
- en: '@app.route(''/signup/approve'', methods = [''POST''])'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '@app.route(''/signup/approve'', methods = [''POST''])'
- en: '@app.route(''/signup/approve/<int:utype>'',methods = [''GET''])'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '@app.route(''/signup/approve/<int:utype>'',methods = [''GET''])'
- en: 'def signup_approve(utype:int=None):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 'def signup_approve(utype:int=None):'
- en: 'if (request.method == ''GET''): <st c="27848">id = request.args[''id'']</st>
    user = select_single_signup(id)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if (request.method == ''GET''): <st c="27848">id = request.args[''id'']</st>
    user = select_single_signup(id)'
- en: … … … … … … …
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … … …
- en: 'else:'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: utype = int(utype)
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: utype = int(utype)
- en: 'if int(utype) == 1: <st c="27963">adm = request.get_data()</st> adm_dict =
    dict(parse_qsl(adm.decode(''utf-8'')))'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if int(utype) == 1: <st c="27963">adm = request.get_data()</st> adm_dict =
    dict(parse_qsl(adm.decode(''utf-8'')))'
- en: adm_model = AdminUser(**adm_dict)
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: adm_model = AdminUser(**adm_dict)
- en: user_approval_service(int(utype), adm_model)
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: user_approval_service(int(utype), adm_model)
- en: 'elif int(utype) == 2: <st c="28137">cnsl = request.get_data()</st> cnsl_dict
    = dict(parse_qsl('
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'elif int(utype) == 2: <st c="28137">cnsl = request.get_data()</st> cnsl_dict
    = dict(parse_qsl('
- en: cnsl.decode('utf-8')))
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: cnsl.decode('utf-8')))
- en: cnsl_model = CounselorUser(**cnsl_dict)
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: cnsl_model = CounselorUser(**cnsl_dict)
- en: user_approval_service(int(utype), cnsl_model)
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: user_approval_service(int(utype), cnsl_model)
- en: 'elif int(utype) == 3: <st c="28322">pat = request.get_data()</st> pat_dict
    = dict(parse_qsl(pat.decode(''utf-8'')))'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'elif int(utype) == 3: <st c="28322">pat = request.get_data()</st> pat_dict
    = dict(parse_qsl(pat.decode(''utf-8'')))'
- en: pat_model = PatientUser(**pat_dict)
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pat_model = PatientUser(**pat_dict)
- en: user_approval_service(int(utype), pat_model)
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: user_approval_service(int(utype), pat_model)
- en: return render_template('approved_user.html', message='approved'), 200
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return render_template('approved_user.html', message='approved'), 200
- en: '[PRE13]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: from flask import render_template, request, Response
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 从 flask 导入 render_template, request, Response
- en: '@app.route(''/admin/users/list'')'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '@app.route(''/admin/users/list'')'
- en: 'def generate_admin_users():'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'def generate_admin_users():'
- en: users = select_admin_join_user()
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: users = select_admin_join_user()
- en: user_list = [list(rec) for rec in users]
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: user_list = [list(rec) for rec in users]
- en: content = '''<html><head>
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: content = '''<html><head>
- en: <title>User List</title>
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <title>用户列表</title>
- en: </head><body>
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </head><body>
- en: <h1>List of Users</h1>
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h1>用户列表</h1>
- en: <p>{}
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <p>{}
- en: </body></html>
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </body></html>
- en: '''''''.format(user_list) <st c="29967">resp = Response(response=content, status=200,</st>
    <st c="30012">content_type=''text/html'')</st> return <st c="30050">Response</st>
    is instantiated with its required constructor parameters and returned by the view
    function as a response object. The following are the required parameters:'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="30215">response</st>`<st c="30224">: Contains the content that needs
    to be rendered either in a string, byte stream, or iterable of either of the</st>
    <st c="30336">two types.</st>'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="30346">status</st>`<st c="30353">: Accepts the HTTP status code as
    an integer</st> <st c="30399">or string.</st>'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="30409">content_type</st>`<st c="30422">: Accepts the mime type of the
    response object that</st> <st c="30475">needs rendering.</st>'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="30491">headers</st>`<st c="30499">: A dictionary that contains the
    response header(s) that is/are necessary for the rendition process, such as</st>
    `<st c="30609">Access-Control-Allow-Origin</st>`<st c="30636">,</st> `<st c="30638">Content-Disposition</st>`<st
    c="30657">,</st> `<st c="30659">Origin</st>`<st c="30665">,</st> <st c="30667">and</st>
    `<st c="30671">Accept</st>`<st c="30677">.</st>'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="30678">But if the purpose is to render HTML pages, Flask has a</st> `<st
    c="30735">render_template()</st>` <st c="30752">method that references an HTML
    template file that needs rendering.</st> <st c="30820">The following route function,</st>
    `<st c="30850">signup_users_form()</st>`<st c="30869">, yields the content of
    a signup page – that is,</st> `<st c="30918">add_signup.html</st>` <st c="30933">from</st>
    <st c="30939">the</st> `<st c="30943">/pages</st>` <st c="30949">template folder
    – for new</st> <st c="30976">user applicants:</st>
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`<st c="31175">render_template()</st>` <st c="31193">returns HTML content with
    its context data, if there is any, as a string.</st> <st c="31268">To simplify
    the syntax, Flask allows us to return the method’s result and the</st> *<st c="31346">status
    code</st>* <st c="31357">instead of the</st> `<st c="31373">Response</st>` <st
    c="31381">instance since the framework can automatically create a</st> `<st c="31438">Response</st>`
    <st c="31446">instance from these details.</st> <st c="31476">Like the previous
    examples, the following</st> `<st c="31518">signup_list_users()</st>` <st c="31537">uses</st>
    `<st c="31543">render_template()</st>` <st c="31560">to show the list of new user
    applications subject to</st> <st c="31614">admin approval:</st>'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '@app.route(''/exam/details/list'')'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'def report_exam_list():'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: exams = list_exam_details() <st c="32760">response = make_response(</st> <st
    c="32785">render_template('exam/list_exams.html',</st><st c="32825">exams=exams),
    200)</st><st c="32844">headers = dict()</st><st c="32861">headers['Content-Type']
    = 'application/vnd.ms-excel'</st><st c="32914">headers['Content-Disposition']
    =</st> <st c="32947">'attachment;filename=questions.xls'</st><st c="32983">response.headers
    = headers</st> return response
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '@app.route(''/exam/assign'', methods=[''GET'', ''POST''])'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'def assign_exam():'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'if request.method == ''GET'':'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cids = list_cid()
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pids = list_pid() <st c="33772">response = make_response( render_template('exam/assign_exam_form.html',
    pids=pids, cids=cids), 200)</st><st c="33871">response.set_cookie('exam_token',
    str(uuid4()))</st> return response, 200
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: id = int(request.form['id'])
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cid = request.form['cid']
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pid = int(request.form['pid'])
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: exam_date = request.form['exam_date']
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: duration = int(request.form['duration'])
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = insert_question_details(id=id, cid=cid, pid=pid, exam_date=exam_date,
    duration=duration)
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result: <st c="34221">task_token = request.cookies.get(''exam_token'')</st>
    task = "exam assignment (task id {})".format(task_token)'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return redirect(url_for('redirect_success_exam',        message=task ))
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return redirect('/exam/task/error')
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '@app.route(''/exam/assign'', methods=[''GET'', ''POST''])'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: 'def assign_exam():'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … …
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: task_token = request.cookies.get('exam_token')
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'task = "exam assignment (task id {})".format(task_token) <st c="35515">return
    redirect(url_for(''redirect_success_exam'',</st><st c="35563">message=task ))</st>
    else: <st c="35631">result</st> variable is <st c="35650">False</st>, redirection
    to an error view called <st c="35693">/exam/task/error</st> will occur. Otherwise,
    the route will redirect to an endpoint or view name called <st c="35792">redirect_success_exam</st>.
    Every <st c="35821">@route</st> has an endpoint equivalent, by default, to its
    view function name. So, <st c="35899">redirect_success_exam</st> is the function
    name of a route with the following implementation:'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`<st c="36171">url_for()</st>`<st c="36181">, which is used in the</st> `<st
    c="36204">assign_exam()</st>` <st c="36217">view, is a route handler that allows
    us to pass the endpoint name of the destination view to</st> `<st c="36311">redirect()</st>`
    <st c="36321">instead of passing the actual URL pattern of the destination.</st>
    <st c="36384">It can also pass context data to the Jinja2 template of the redirected
    page or values to path variables if the view uses a dynamic URL pattern.</st>
    <st c="36528">The</st> `<st c="36532">redirect_success_exam()</st>` <st c="36555">function
    shows a perfect scenario of context data passing, where it uses</st> `<st c="36629">request.args</st>`
    <st c="36641">to access a message context passed from</st> `<st c="36682">assign_exam()</st>`<st
    c="36695">, which is where the redirection</st> <st c="36728">call originated.</st>'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="36744">More content negotiations</st> <st c="36771">and how to serialize
    various mime types for responses will be showcased in the succeeding chapters,
    but in the meantime, let’s scrutinize the view templates of our route functions.</st>
    <st c="36952">View templates are essential for web-based applications because
    all form-handling transactions, report generation, and page generation depend
    on effective</st> <st c="37107">dynamic templates.</st>
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="37125">Implementing view templates</st>
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="37153">Jinja2 is the default templating engine of the Flask framework
    and is used to create HTML, XML, LaTeX, and markup</st> <st c="37268">documents.</st>
    <st c="37279">It is a simple, extensive, fast, and easy-to-use templating approach
    with powerful features such as layout capabilities, built-in programming constructs,
    support for asynchronous operations, context data filtering, and utility for</st>
    <st c="37510">unit testing.</st>
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="37523">Firstly, Flask requires all template files to be in the</st> `<st
    c="37580">templates</st>` <st c="37589">directory of the main project.</st> <st
    c="37621">To change this setting, the</st> `<st c="37649">Flask()</st>` <st c="37656">constructor
    has a</st> `<st c="37675">template_folder</st>` <st c="37690">parameter that can
    set and replace the default directory with another one.</st> <st c="37766">Our
    prototype, for instance, has the following Flask instantiation that overrides
    the default templates directory with a more high-level</st> <st c="37903">directory
    name:</st>
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: <!DOCTYPE html>
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: <html lang="en"><head><title>Patient's Score Form</title>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: </head><body>
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <form action="/exam/score" method="POST">
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h3>Exam Score</h3>
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <label for="qid">Enter Questionnaire ID:</label> <st c="38966"><select name="qid"></st><st
    c="38985">{% for id in qids %}</st><st c="39006"><option value="{{ id }}">{{ id
    }}</option></st><st c="39049">{% endfor %}</st><st c="39062"></select></st><br/>
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <label for="pid">Enter patient ID:</label> <st c="39122"><select name="pid"></st><st
    c="39141">{% for id in pids %}</st><st c="39162"><option value="{{ id }}">{{ id
    }}</option></st><st c="39205">{% endfor %}</st><st c="39218"></select></st><br/>
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <input type="submit" value="Assign Exam"/>
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </form></body>
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </html>
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: <st c="39958">@app.route('/signup/form', methods= ['GET'])</st>
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="40003">def signup_users_form():</st> resp = Response(response= render_template('add_signup.html'),
    status=200, content_type="text/html")
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return resp <st c="40141">@app.route('/signup/submit', methods= ['POST'])</st>
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="40188">def signup_users_submit():</st> username = request.form['username']
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: password = request.form['password']
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: user_type = request.form['utype']
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: firstname = request.form['firstname']
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lastname = request.form['lastname']
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cid = request.form['cid']
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: insert_signup(user=username, passw=password, utype=user_type, fname=firstname,
    lname=lastname, cid=cid)
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('add_signup_submit.html', message='Added new user!'),
    200
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: <st c="40768">@app.route('/exam/assign', methods=['GET', 'POST'])</st>
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="40820">def assign_exam():</st> if request.method == ''GET'':'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cids = list_cid()
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pids = list_pid()
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: response = make_response(render_template('exam/assign_exam_form.html', pids=pids,
    cids=cids), 200)
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: response.set_cookie('exam_token', str(uuid4()))
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return response, 200
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: id = int(request.form['id'])
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: duration = int(request.form['duration'])
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = insert_question_details(id=id, cid=cid, pid=pid, exam_date=exam_date,
    duration=duration)
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: exam_token = request.cookies.get('exam_token')
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return redirect(url_for('introduce_exam', message=str(exam_token)))
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return redirect('/error')
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: pip install psycopg2-binary
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: import psycopg2
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: import functools
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: from os import environ
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'def connect_db(func):'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '@functools.wraps(func) <st c="43527">def repo_function(*args, **kwargs):</st><st
    c="43562">conn = psycopg2.connect(</st><st c="43587">host=environ.get(''DB_HOST''),</st><st
    c="43616">database=environ.get(''DB_NAME''),</st><st c="43649">port=environ.get(''DB_PORT''),</st><st
    c="43678">user = environ.get(''DB_USER''),</st><st c="43709">password = environ.get(''DB_PASS''))</st><st
    c="43744">resp = func(conn, *args, **kwargs)</st> conn.commit()'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: conn.close()
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return resp
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'return <st c="43894">conn</st>, to a repository function and commits all the
    changes to the database after a transaction’s successful execution. Also, it will
    close the database connection at the end of the process. All the database details,
    such as <st c="44118">DB_HOST</st>, <st c="44127">DB_NAME</st>, and <st c="44140">DB_PORT</st>,
    are stored as environment variables inside a <st c="44194">.env</st> file. To
    retrieve them using the <st c="44232">environ</st> dictionary of the <st c="44258">os</st>
    module, run the following command to install the required extension:'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: <st c="44355">However, there are other ways to manage these custom and built-in
    configuration variables instead of storing them as</st> `<st c="44473">.env</st>`
    <st c="44477">variables.</st> <st c="44489">The next topic will expound on this,
    but first, let’s apply</st> `<st c="44549">@connect_db</st>` <st c="44560">to
    our</st> <st c="44568">repository layer.</st>
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="44585">Implementing the repository layer</st>
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="44619">The following</st> `<st c="44634">insert_signup()</st>` <st c="44649">transaction</st>
    <st c="44662">adds a new user signup record to the database.</st> <st c="44709">It
    gets the</st> `<st c="44721">conn</st>` <st c="44725">instance from the</st> `<st
    c="44744">@connect_db</st>` <st c="44755">decorator.</st> <st c="44767">Our application
    has no</st> `<st c="44845">psycopg2</st>` <st c="44853">driver to perform the</st>
    <st c="44876">CRUD operation.</st> <st c="44892">The</st> `<st c="44896">cursor</st>`
    <st c="44902">instance created by</st> `<st c="44923">conn</st>` <st c="44927">executes
    the</st> *<st c="44941">INSERT</st>* <st c="44947">statement of the following
    transaction with form data provided by its</st> <st c="45018">view function:</st>
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`<st c="45506">cursor</st>` <st c="45513">is an object derived from</st> `<st
    c="45540">conn</st>` <st c="45544">that uses a database session to perform insert,
    update, delete, and fetch operations.</st> <st c="45631">So, just like</st> `<st
    c="45645">insert_signup()</st>`<st c="45660">, the following transaction</st>
    <st c="45687">uses</st> `<st c="45693">cursor</st>` <st c="45699">again to</st>
    <st c="45709">execute the</st> *<st c="45721">UPDATE</st>* <st c="45727">statement:</st>'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="45506">游标</st>` <st c="45513">是从</st> `<st c="45540">conn</st>` <st
    c="45544">派生出来的对象，它使用数据库会话来执行插入、更新、删除和检索操作。</st> <st c="45631">因此，就像</st> `<st
    c="45645">insert_signup()</st>`<st c="45660">一样，以下事务</st> <st c="45687">再次使用</st>
    `<st c="45693">游标</st>` <st c="45699">来</st> <st c="45709">执行</st> *<st c="45721">UPDATE</st>*
    <st c="45727">语句：</st>'
- en: '[PRE26]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: <st c="46113">To complete the CRUD operations for the</st> `<st c="46154">signup</st>`
    <st c="46160">table, here is the</st> *<st c="46180">DELETE</st>* <st c="46186">transaction
    from</st> <st c="46204">our application:</st>
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="46113">为了完成对</st> `<st c="46154">注册</st>` <st c="46160">表的 CRUD 操作，以下是</st>
    *<st c="46180">DELETE</st>* <st c="46186">事务</st> 从 <st c="46204">我们的应用程序：</st>
- en: '[PRE27]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: <st c="46457">The use of an ORM to build the model layer</st> <st c="46501">will
    be part of</st> [*<st c="46517">Chapter 2</st>*](B19383_02.xhtml#_idTextAnchor047)<st
    c="46526">’s discussions.</st> <st c="46543">For now, the views and services of
    our application rely on a repository layer that manages PostgreSQL data directly
    through the</st> `<st c="46671">psycopg2</st>` <st c="46679">driver.</st>
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="46457">使用 ORM 构建模型层</st> <st c="46501">将是</st> [*<st c="46517">第二章</st>*](B19383_02.xhtml#_idTextAnchor047)<st
    c="46526">讨论的一部分。</st> <st c="46543">目前，我们应用程序的视图和服务依赖于一个直接通过</st> `<st c="46671">psycopg2</st>`
    <st c="46679">驱动程序管理 PostgreSQL 数据的存储库层。</st>
- en: <st c="46687">After creating the repository layer, many applications can build
    a service layer to provide loose coupling between the CRUD operations and</st>
    <st c="46827">the views.</st>
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="46687">在创建存储库层之后，许多应用程序可以构建一个服务层，以在 CRUD 操作和</st> <st c="46827">视图之间提供松散耦合。</st>
- en: <st c="46837">Creating the service layer</st>
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="46837">创建服务层</st>
- en: <st c="46864">The service layer of the</st> <st c="46890">application builds
    the business logic of the view functions and the repository.</st> <st c="46970">Instead
    of loading the view functions with transaction-related and business processes,
    we place all these implementations in the service layer by creating lists of all
    the counselor and patient IDs, validating where to persist the newly approved
    user, and creating a list of patients who excelled in the examinations.</st> <st
    c="47288">The following service function evaluates and records</st> <st c="47341">patients’</st>
    <st c="47351">exam scores:</st>
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="46864">应用程序的服务层构建视图函数和存储库的业务逻辑。</st> <st c="46970">我们不是将事务相关的业务流程加载到视图函数中，而是通过创建所有顾问和患者
    ID 的列表、验证新批准用户持久化的位置以及创建在考试中表现优异的患者列表，将这些实现放在服务层中。</st> <st c="47288">以下服务函数评估并记录</st>
    <st c="47341">患者</st> <st c="47351">的考试成绩：</st>
- en: '[PRE28]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: <st c="47819">Instead of directly accessing</st> `<st c="47850">insert_patient_score()</st>`
    <st c="47872">to save patient exam scores,</st> `<st c="47902">record_score()</st>`
    <st c="47916">accesses the</st> `<st c="47930">record_patient_exam()</st>` <st
    c="47951">service to compute some formulas before invoking</st> `<st c="48001">insert_patient_score()</st>`
    <st c="48023">from the repository layer for record insertion.</st> <st c="48072">The
    service lessens some friction between the database transactions and the view layer.</st>
    <st c="48160">The following snippet is the view function that accesses the</st>
    `<st c="48221">record_patient_exam()</st>` <st c="48242">service for record exam</st>
    <st c="48267">record insertion:</st>
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="47819">而不是直接访问</st> `<st c="47850">insert_patient_score()</st>` <st c="47872">来保存患者考试成绩，</st>
    `<st c="47902">record_score()</st>` <st c="47916">访问</st> `<st c="47930">record_patient_exam()</st>`
    <st c="47951">服务来在调用</st> `<st c="48001">insert_patient_score()</st>` <st c="48023">从存储库层进行记录插入之前计算一些公式。</st>
    <st c="48072">该服务减少了数据库事务和视图层之间的摩擦。</st> <st c="48160">以下片段是访问</st> `<st c="48221">record_patient_exam()</st>`
    <st c="48242">服务进行记录考试</st> <st c="48267">记录插入的视图函数：</st>
- en: '[PRE29]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: <st c="48796">Aside from calling</st> `<st c="48816">record_patient_exam()</st>`<st
    c="48837">, it also utilizes the</st> `<st c="48860">list_pid()</st>` <st c="48870">and</st>
    `<st c="48875">list_qid()</st>` <st c="48885">services to retrieve the IDs.</st>
    <st c="48916">The use of services can help separate the abstraction and use cases
    from the route functions, which has a beneficial impact on the scope, clean coding,
    and runtime</st> <st c="49080">performance of the routes.</st> <st c="49107">Moreover,
    the project structure can also contribute to clear business flow, maintainability,
    flexibility,</st> <st c="49213">and adaptability.</st>
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="48796">除了调用</st> `<st c="48816">record_patient_exam()</st>`<st c="48837">之外，它还利用了</st>
    `<st c="48860">list_pid()</st>` <st c="48870">和</st> `<st c="48875">list_qid()</st>`
    <st c="48885">服务来检索ID。</st> <st c="48916">使用服务可以帮助将抽象和用例与路由函数分离，这对路由的范畴、清洁编码和运行时</st>
    <st c="49080">性能有积极影响。</st> <st c="49107">此外，项目结构还可以有助于清晰的业务流程、可维护性、灵活性和适应性。</st>
- en: <st c="49230">Managing the project structure</st>
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="49230">管理项目结构</st>
- en: <st c="49261">Flask provides developers</st> <st c="49288">with the convenience
    of building their desired project structure.</st> <st c="49354">It is open to
    any design patterns and architectural strategies for building a project directory
    because of its Pythonic characteristics.</st> <st c="49491">The focus of this
    discussion revolves around setting up our</st> *<st c="49551">Online Personal
    Counseling System</st>* <st c="49584">application using the simple and single-structured
    project approach while highlighting the different configuration</st> <st c="49700">variable
    setups.</st>
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="49261">Flask为开发者</st> <st c="49288">提供了构建他们所需项目结构的便利。</st> <st c="49354">由于其Python特性，它对构建项目目录的设计模式和架构策略持开放态度。</st>
    <st c="49491">本讨论的重点是设置我们的</st> *<st c="49551">在线个人咨询系统</st>* <st c="49584">应用程序，采用简单且单一结构的项目方法，同时突出不同的配置</st>
    <st c="49700">变量设置。</st>
- en: <st c="49716">Building the directory structure</st>
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="49716">构建目录结构</st>
- en: <st c="49749">The first aspect to consider in</st> <st c="49781">building the
    project structure is the level of complexity of the project scope.</st> <st c="49862">Since
    our project focuses only on small-scale clientele, a typical</st> *<st c="49929">single-structured</st>*
    <st c="49946">approach is enough to cater to a less scalable application.</st>
    <st c="50007">Second, we must ensure the proper layering or breakdown of various
    project components from the view layer down to the test modules so that the developers
    can identify what parts to prioritize, maintain, bug-fix, and test.</st> <st c="50229">The
    following is a screenshot of the directory structure of</st> <st c="50289">our
    prototype:</st>
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="49749">在构建项目结构时需要考虑的第一个方面是项目范畴的复杂程度。</st> <st c="49862">由于我们的项目仅关注小规模客户，典型的</st>
    *<st c="49929">单一结构</st>* <st c="49946">方法足以满足不太可扩展的应用。</st> <st c="50007">其次，我们必须确保从视图层到底层测试模块的各个项目组件的适当分层或分解，以便开发者可以确定哪些部分需要优先考虑、维护、修复错误和测试。</st>
    <st c="50229">以下是我们原型的目录结构截图：</st>
- en: '![Figure 1.4 – The single-structured project directory](img/B19383_01_004.jpg)'
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图1.4 – 单一结构的项目目录](img/B19383_01_004.jpg)'
- en: <st c="50319">Figure 1.4 – The single-structured project directory</st>
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50319">图1.4 – 单一结构的项目目录</st>
- en: '[*<st c="50371">Chapter 2</st>*](B19383_02.xhtml#_idTextAnchor047) <st c="50381">will
    discuss other project structure techniques, especially when applications are scalable</st>
    <st c="50473">and complex.</st>'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[*<st c="50371">第二章</st>*](B19383_02.xhtml#_idTextAnchor047) <st c="50381">将讨论其他项目结构技术，特别是当应用程序可扩展且复杂时。</st>'
- en: <st c="50485">Setting up a development environment</st>
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50485">设置开发环境</st>
- en: <st c="50522">A Flask application, by default, is production-ready, even though
    its server, the Werkzeug’s built-in server, is not.</st> <st c="50641">We need
    to replace it with an enterprise-grade server to be fully ready for</st> <st c="50717">production
    setup.</st> <st c="50735">However, our goal is to set up a Flask project with
    a development environment that we can sample and experiment on with various features
    and test cases.</st> <st c="50888">There are three ways to set up a Flask 3.x
    project for development and</st> <st c="50959">testing purposes:</st>
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50976">Running the server with</st> `<st c="51001">app.run(debug=True)</st>`
    <st c="51020">in</st> `<st c="51024">main.py</st>`<st c="51031">.</st>
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="51032">Setting the</st> `<st c="51045">FLASK_DEBUG</st>` <st c="51056">and</st>
    `<st c="51061">TESTING</st>` <st c="51068">built-in configuration variables to</st>
    `<st c="51105">true</st>` <st c="51109">in the</st> <st c="51117">configuration
    file.</st>
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="51136">Running the application with the</st> `<st c="51170">flask run
    --</st>``<st c="51182">debug</st>` <st c="51188">command.</st>
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="51197">Setting the development environment will also enable automatic
    reloading and the default debugger of the framework.</st> <st c="51314">However,
    turn off debugging mode after deploying the application to production to avoid
    security risks for the applications and software logging problems.</st> <st c="51469">The
    following screenshot shows the server log when running a Flask project with a
    development</st> <st c="51563">environment setup:</st>
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.5 – The server log of Flask’s built-in server](img/B19383_01_005.jpg)'
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="51745">Figure 1.5 – The server log of Flask’s built-in server</st>
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*<st c="51799">Figure 1</st>**<st c="51808">.5</st>* <st c="51810">shows that
    debug mode is set to</st> `<st c="51843">ON</st>` <st c="51845">and that the debugger
    is enabled and given a</st> `<st c="51891">PIN</st>` <st c="51894">value.</st>'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51901">Implementing the main.py module</st>
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51933">When creating a simple</st> <st c="51957">project like our specimen,
    the main module usually contains the Flask instantiation and some of its parameters
    (for example,</st> `<st c="52082">template_folder</st>` <st c="52097">for the
    new directory of the HTML templates) and the required imports of the</st> <st
    c="52175">views below it.</st> <st c="52191">The following is the complete code
    of our</st> `<st c="52233">main.py</st>` <st c="52240">file:</st>
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '{'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '«DB_USER» : «postgres»,'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '«DB_PASS» : «admin2255»,'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '«DB_PORT» : 5433,'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"DB_HOST" : "localhost",'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"DB_NAME" : "opcs",'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"FLASK_DEBUG" : true,'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"TESTING": true'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: DB_USER = «postgres»
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: DB_PASS = «admin2255»
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: DB_PORT = 5433
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: DB_HOST = "localhost"
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: DB_NAME = "opcs"
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: FLASK_DEBUG = True
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: TESTING = True
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: app.config.from_file("config.json", load=json.load)
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: app.config.from_pyfile('myconfig.py')
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: DB_USER = «postgres»
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: DB_PASS = «admin2255»
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: DB_PORT = 5433
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: DB_HOST = "localhost"
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: DB_NAME = "opcs"
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: FLASK_DEBUG = true
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: TESTING = true
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: <st c="56983">from __main__ import app</st> import psycopg2
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: import functools
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'def connect_db(func):'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '@functools.wraps(func)'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def repo_function(*args, **kwargs):'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: conn = psycopg2.connect( <st c="57148">host=app.config['DB_HOST'],</st><st c="57175">database=app.config['DB_NAME'],</st><st
    c="57207">port=app.config['DB_PORT'],</st><st c="57235">user=app.config['DB_USER'],</st><st
    c="57263">password=app.config['DB_PASS'])</st> resp = func(conn, *args, **kwargs)
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: conn.commit()
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: conn.close()
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return resp
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return repo_function
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
