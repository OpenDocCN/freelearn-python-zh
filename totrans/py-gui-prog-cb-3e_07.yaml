- en: Storing Data in Our MySQL Database via Our GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to install and use a MySQL database and connect
    it to our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL is a full-fledged **Structured Query Language** (**SQL**) database server
    and comes with a very nice GUI of its own so that we can view and work with the
    data. We will create a database, insert data into our database, and then see how
    we can modify, read, and delete data.
  prefs: []
  type: TYPE_NORMAL
- en: Data storage in a SQL database is essential for software programs written in
    Python. All of our data currently only exists in memory and we want to make it
    persistent so that we do not lose our data once we close our running Python program.
  prefs: []
  type: TYPE_NORMAL
- en: Here, you will learn how to increase your programming skills by adding SQL to
    your programming toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: The first recipe in this chapter will show you how to install the free MySQL
    Community Edition.
  prefs: []
  type: TYPE_NORMAL
- en: After successfully connecting to a running instance of our MySQL server, we
    will design and create a database that will accept a book title, which could be
    our own journal or a quote we found somewhere on the internet. We will require
    a page number for the book, which could be blank (`NULL` in SQL terms), and then
    we will `insert` the quote we like from a book, journal, website, or a friend
    into our MySQL database using our GUI, which we built using Python 3.7 or later.
  prefs: []
  type: TYPE_NORMAL
- en: We will insert, modify, delete, and display our favorite quotes using our Python
    GUI to issue these SQL commands and to display the data.
  prefs: []
  type: TYPE_NORMAL
- en: '**CRUD** is a database term you may have come across before that is an abbreviation
    for the four basic SQL commands, that is, **Create**, **Read**, **Update**, and
    **Delete**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an overview of the Python modules for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/091c7ddf-a884-48d2-9c64-6a1670500746.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, we will enhance our Python GUI by connecting the GUI to a
    MySQL database. We will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and connecting to a MySQL server from Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the MySQL database connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing the Python GUI database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the SQL INSERT command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the SQL UPDATE command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the SQL DELETE command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing and retrieving data from our MySQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using MySQL Workbench
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and connecting to a MySQL server from Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can connect to a MySQL database, we have to connect to the *MySQL
    server*. In order to do this, we need to know the IP address of the MySQL server
    as well as the port it is listening on.
  prefs: []
  type: TYPE_NORMAL
- en: We also have to be a registered user with a password in order to be *authenticated*
    by the MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have access to a running MySQL server instance, as well as
    have administrator privileges in order to create databases and tables.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to install and connect to a MySQL server from Python:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the MySQL Installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a free MySQL Community Edition available from the official MySQL website.
    You can download and install it on your local PC from [http://dev.mysql.com/downloads/windows/installer/](http://dev.mysql.com/downloads/windows/installer/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6bd7fce8-d50d-4c4f-bab1-3cb1945e0e29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose a password for the `root` user and, optionally, add more users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/db517531-4e77-4790-8d75-fcb2631d2f56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify that you have the `\Python37\Lib\site-packages\mysql\connector` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d083fd30-4b6b-46c9-9a0a-6ff232363cfa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `mysqlsh.exe` executable and double-click on it to run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1bea928e-099f-48f6-a50d-2f50385a75d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Type `\sql` in the prompt to get into `SQL` mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `MySql>` prompt, type `SHOW DATABASES`. Then, press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c82df31f-8056-439b-9bfc-ea9814ecddf9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new Python module and save it as `MySQL_connect.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If running the preceding code results in the following output, then we have
    successfully connected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/20469916-e961-456b-b486-3ece472ff007.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we downloaded and then installed the MySQL version that matches our operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: During the installation process, you will choose a password for the `root` user,
    and you can also add more users. I recommend that you add yourself as a DB Admin and
    choose a password as well.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are using the latest MySQL Community Server release, that
    is, 8.0.16.
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL** stands for **Structured Query Language** and is sometimes pronounced **sequel**. It
    uses a **Set** mathematical approach, which is based on mathematics and **set
    theory**. You can find out more at [https://en.wikipedia.org/wiki/Set_theory](https://en.wikipedia.org/wiki/Set_theory).'
  prefs: []
  type: TYPE_NORMAL
- en: In order to connect to MySQL, we may need to install a special Python connector
    driver. This driver will allow us to talk to the MySQL server from Python. There
    is a freely available driver on the MySQL website ([http://dev.mysql.com/doc/connector-python/en/index.html](http://dev.mysql.com/doc/connector-python/en/index.html))
    and it comes with a very nice online tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: When I did a brand new installation of the latest version of MySQL, the Python
    connector was automatically installed. Therefore, you may not have to install
    it after all. It is good to know, though, just in case you run into any issues
    and need to install it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: One way to verify that we have installed the correct driver and that it lets
    Python talk to MySQL is by looking into the Python `site-packages` directory. If
    your `site-packages` directory has a new** `MySQL`** folder that contains a `connector`
    subfolder, the installation was successful. We did this in *step 4*.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we verified that our MySQL server installation actually worked
    by using the MySQL Shell*.*
  prefs: []
  type: TYPE_NORMAL
- en: Your path might be different, especially if you are on macOS or Linux: `<path
    to>\Program Files\MySQL\MySQL Shell 8.0\bin`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we verified that we can achieve the same results using Python 3.7.
  prefs: []
  type: TYPE_NORMAL
- en: Replace the placeholder bracketed names, that is, `<adminUser>` and `<adminPwd>`, with
    the real credentials you are using in your MySQL installation.
  prefs: []
  type: TYPE_NORMAL
- en: We have to be able to connect to the MySQL server. By default, we are in JavaScript `JS` mode.
    We can change that by typing `\sql` in the prompt to get into `SQL` mode. Now,
    we can use `SQL` commands. We did this in *steps 6* and *7*.
  prefs: []
  type: TYPE_NORMAL
- en: If you are unable to connect to the MySQL server via the *Command Shell* or
    the Python `mysqlclient`, then something probably went wrong during the installation.
    If this is the case, try uninstalling MySQL, rebooting your PC, and then running
    the installation again.
  prefs: []
  type: TYPE_NORMAL
- en: In order to connect our GUI to a MySQL server, we need to be able to connect
    to the server with administrative privileges. We also need to do this if we want
    to create our own database. If the database already exists, then we just need
    the authorization rights to connect, insert, update, and delete data. We will
    create a new database on a MySQL server in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the MySQL database connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we used the shortest way to connect to a MySQL server,
    that is, by hardcoding the credentials that are required for authentication in
    the `connect` method. While this is a fast approach for early development, we
    definitely do not want to expose our MySQL server credentials to anyone. Instead,
    we want to *grant* permission to specific users so that they can access databases,
    tables, views, and related database commands.
  prefs: []
  type: TYPE_NORMAL
- en: A much safer way to be authenticated by a MySQL server is by storing the credentials
    in a configuration file, which is what we will do in this recipe. We will use
    our configuration file to connect to the MySQL server and then create our own
    database on the MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: We will use this database in all of the recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Access to a running MySQL server with administrator privileges is required to
    run the code shown in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The previous recipe shows how to install the free *Community Edition* of MySQL
    server. The administrator privileges will allow you to implement this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to perform this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create a dictionary in the same module where the `MySQL_connect.py` code
    is. Sequentially, we will do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `MySQL_connect.py` and save it as `MySQL_connect_with_dict.py`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the module:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the following code below `dbConfig`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Run the code to make sure it works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new module, `GuiDBConfig.py`, and place the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, open `MySQL_connect_with_dict.py` and save it as `MySQL_connect_import_dict.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `GuiDBConfig` and unpack the dictionary, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new Python module and save it as `MySQL_create_DB.py`. Next, add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute `MySQL_create_DB.py` twice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e64575b2-bc11-4b77-bbcc-dc9b4bb8ae77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new Python module and save it as `MySQL_show_DBs.py`. Then, add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code gives us the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7fbef986-163d-4f9e-83e3-7a344e6aa673.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we created a dictionary and saved our connection credentials in the Python
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, in the `connect` method, we unpacked the dictionary values. Take a look
    at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Instead of using this code, we use `(**dbConfig)`, which achieves the same thing
    but is shorter.
  prefs: []
  type: TYPE_NORMAL
- en: This results in the same successful connection to the MySQL server, but the
    difference is that the connection method no longer exposes any mission-critical
    information.
  prefs: []
  type: TYPE_NORMAL
- en: A database server is critical to your mission. You will realize this once you
    have lost your valuable data and can't find any recent backup!
  prefs: []
  type: TYPE_NORMAL
- en: Please note that placing the same username, password, database, and so on into
    a dictionary in the same Python module does not eliminate the risk of having the
    credentials seen by anyone perusing the code.
  prefs: []
  type: TYPE_NORMAL
- en: In order to increase database security, we had to move the dictionary into its
    own Python module. We called the new Python module `GuiDBConfig.py`.
  prefs: []
  type: TYPE_NORMAL
- en: We then imported this module and unpacked the credentials, as we did previously.
  prefs: []
  type: TYPE_NORMAL
- en: Once we placed this module into a secure place, separated from the rest of the
    code, we achieved a better level of security for our MySQL data.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to connect to MySQL and have administrator privileges,
    we could create our own database by issuing SQL commands.
  prefs: []
  type: TYPE_NORMAL
- en: In order to execute commands to MySQL, we created a cursor object from the connection
    object.
  prefs: []
  type: TYPE_NORMAL
- en: A cursor is usually a pointer to a specific row in a database table that we
    can move up or down the table, but here, we used it to create the database itself. We
    wrapped the Python code into a `try...except` block and used the built-in error
    codes of MySQL to tell us if anything went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: We can verify that this block works by executing the database-creating code
    twice. The first time, it will create a new database in MySQL, and the second
    time, it will print out an error message stating that this database already exists.
  prefs: []
  type: TYPE_NORMAL
- en: We can verify which databases exist by executing the `SHOW DATABASES` command
    using the very same cursor object syntax. Instead of issuing the `CREATE DATABASE` command,
    we create a cursor and use it to execute the `SHOW DATABASES` command, the result
    of which we fetch and print to the console output.
  prefs: []
  type: TYPE_NORMAL
- en: We retrieve the results by calling the `fetchall` method on the cursor object.
  prefs: []
  type: TYPE_NORMAL
- en: Running the `MySQL_show_DBs.py` code shows us which databases currently exist
    in our MySQL server instance. As we saw from the output, MySQL ships with several
    built-in databases, such as `information_schema`. We successfully created our
    own `guidb` database, which is shown in the output. All of the other databases
    that were illustrated come shipped with MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: Note how, even though we specified the database when we created it in mixed-case
    letters as GuiDB, the `SHOW DATABASES` command shows all the existing databases
    in MySQL in lowercase and displays our database as `guidb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The physical MySQL files are stored on the hard drive according to the `my.ini`
    file, which, on a Windows 10 installation, may be located at `C:\ProgramData\MySQL\MySQL
    Server 8.0`. Within this `.ini` file, you can find the following configuration
    path to the `Data` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Path to the database root`'
  prefs: []
  type: TYPE_NORMAL
- en: '`datadir=C:/ProgramData/MySQL/MySQL Server 8.0/Data`'
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the Python GUI database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start creating tables and inserting data into them, we have to design
    the database. Unlike changing local Python variable names, changing a database
    `schema` once it has been created and loaded with data is not that easy.
  prefs: []
  type: TYPE_NORMAL
- en: We would have to `DROP` the table, which means we would lose all the data that
    was in the table. So, before dropping a table, we would have to extract the data,
    save the data in a temporary table or other data format, and then `DROP` the table,
    recreate it, and finally reimport the original data.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you are getting the picture of how tedious this could be.
  prefs: []
  type: TYPE_NORMAL
- en: Designing our GUI MySQL database means that we need to think about what we want
    our Python application to do with it and then choose names for our tables that
    match the intended purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be working with the MySQL database we created in the previous recipe,
    *Configuring the MySQL database connection*. A running instance of MySQL is necessary
    and the two previous recipes show you how to install MySQL, all the necessary
    additional drivers, and how to create the database we are using in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we are starting with the `GUI_TCP_IP.py` file from the previous
    chapter. We will move the widgets from our Python GUI between the two tabs we
    created in the previous recipes in order to organize our Python GUI so that it
    can connect to a MySQL database. Let''s take a look at how can we complete this
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_TCP_IP.py` and save it as `GUI_MySQL.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the full code from the Packt website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use a tool such as WinMerge to compare the two versions of the GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f6f6a0a-d639-42c8-a600-072efa9f2606.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the code located in `GUI_MySQL.py`. You will observe the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7c3cd175-f427-43e6-9563-28e8e4b672da.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, open `MySQL_create_DB.py` and save it as `MySQL_show_DB.py`.
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `try...catch` block with the following code:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code and observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a6f5483e-7c1d-49af-afea-0e86089212ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a module similar to `GUI_MySQL_class.py`.
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add and run the following code:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following code, which is located in `GUI_MySQL_class.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab793279-6230-47b1-9cc3-36c8bba03fb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open Command Prompt and navigate to `mysql.exe`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/febf4679-11a0-432b-ac52-8dd229220fa0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run `mysql.exe`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d4ab9b4-4c92-4b96-a679-a37e00d17c1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the `SHOW COLUMNS FROM books;` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/28969003-6ce6-491b-a714-63118f960a67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a second table by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the `SHOW TABLES` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac9e3ca0-c47c-4cb8-8776-8bfc68d305bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Execute the `SHOW COLUMNS` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/87dd9c12-e39f-453e-b0d4-cfc4a8dc62fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Execute `SHOW COLUMNS` again with `pprint`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de29f1b3-2496-400b-a30c-400908c4774c.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started with the `GUI_TCP_IP.py` file from the previous chapter and reorganized
    the widgets.
  prefs: []
  type: TYPE_NORMAL
- en: We renamed several widgets and separated the code that accesses the MySQL data
    to what used to be named **Tab 1**, and we moved the unrelated widgets to what
    we named **Tab 2** in the previous recipes. We also adjusted some internal Python
    variable names so that we can understand our code better.
  prefs: []
  type: TYPE_NORMAL
- en: Code readability is a coding virtue and not a waste of time.
  prefs: []
  type: TYPE_NORMAL
- en: The refactored module is close to 400 lines of Python code and it would take
    too many pages to show the entire code here. On Windows, we can use a tool called **WinMerge** to
    compare different Python code modules. I am sure there are similar tools for macOS
    and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: WinMerge is a great tool for comparing different Python (and other) code modules
    on Windows. We can use it to look at the differences between code modules. You
    can download it for free from [https://sourceforge.net/projects/winmerge](https://sourceforge.net/projects/winmerge/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Our refactored Python GUI now looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eeef71d3-13ca-461c-8c63-8fbfd0182aa3.png)'
  prefs: []
  type: TYPE_IMG
- en: We renamed the first tab MySQL and created two `LabelFrame` widgets of `tkinter`.
    We labeled the one on the top `Python Database`, which contains two labels and
    six `tkinter` Entry widgets, as well as three buttons, which we aligned in four
    rows and three columns using the `tkinter` grid layout manager. We will enter
    book titles and pages into the Entry widgets. Clicking the buttons will result
    in either inserting, retrieving, or modifying book quotations. The `LabelFrame` widget at
    the bottom has a label of Book Quotation and the `ScrolledText` widget that is
    part of this frame will display our books and quotations.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we created two SQL tables to hold our data. The first will hold the data
    for the book title and book page, which will then join with the second table,
    which will hold the book quote. We will link the two tables together via *primary
    key to foreign key relationships*.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create the first database table now. Before we do that, let''s verify
    that our database does, indeed, have no tables. According to the online MySQL
    documentation, the command to view the tables that exist in a database is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It is important to note that, in the preceding syntax, arguments in square brackets,
    such as `FULL`, are optional, while arguments in curly braces, such as `FROM`,
    are required for the `SHOW TABLES` command. The pipe symbol between `FROM` and `IN` means
    that the MySQL syntax requires one or the other.
  prefs: []
  type: TYPE_NORMAL
- en: When we execute the SQL command in `MySQL_show_DB.py`, we get the expected result,
    which is an empty tuple showing us that our database currently has no tables.
  prefs: []
  type: TYPE_NORMAL
- en: We can also select the database by executing the `USE <DB>` command. By doing
    this, we don't have to pass it into the `SHOW TABLES` command because we have
    already selected the database we want to talk to.
  prefs: []
  type: TYPE_NORMAL
- en: All the SQL code is located in `GUI_MySQL_class.py` and we import this into
    `GUI_MySQL.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to verify that our database has no tables, we create some.
    After creating two tables, we verify that they have truly made it into our database
    by using the same commands as before.
  prefs: []
  type: TYPE_NORMAL
- en: Doing this, we created the first table, named `Books`.
  prefs: []
  type: TYPE_NORMAL
- en: We can verify that the table has been created in our database by executing the
    `cursor.execute("SHOW TABLES FROM guidb")` command.
  prefs: []
  type: TYPE_NORMAL
- en: The result is no longer an empty tuple but a tuple that contains a tuple, showing
    the `books` table we just created.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the MySQL command-line client to view the columns in our table. In
    order to do this, we have to log in as the *root* user. We also have to append
    a **semicolon** to the end of the command.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, you simply double-click the MySQL command-line client shortcut,
    which is automatically installed during the MySQL installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have a shortcut on your desktop, you can find the executable
    at the following path for a typical default installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Without a shortcut to run the MySQL client, you have to pass it some parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-u root`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If double-clicking creates an error, make sure you use the `-u` and `-p` options.
  prefs: []
  type: TYPE_NORMAL
- en: Either double-clicking the shortcut or using the command line with the full
    path to the executable and passing in the required parameters will bring up the
    MySQL command-line client, which prompts you to enter the password for the root
    user.
  prefs: []
  type: TYPE_NORMAL
- en: If you remember the password you assigned to the root user during the installation,
    you can then run the `SHOW COLUMNS FROM books;` command. This will display the
    columns of our `books` table from our `guidb` database.
  prefs: []
  type: TYPE_NORMAL
- en: When executing commands in the MySQL client, the syntax is not Pythonic, as
    it requires a trailing semicolon to complete the statement.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we created the second table, which will store the book and journal quotations.
    We created it by writing similar code to what we used to create the first table.
    We verified that we now have two tables by running the same SQL command.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the columns by executing the SQL command using Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Using the MySQL client might present the data in a better format than Command
    Prompt. We can also use Python's pretty print (`pprint`) feature for this.
  prefs: []
  type: TYPE_NORMAL
- en: The MySQL client still shows our columns in a clearer format, which can be seen
    when you run this client.
  prefs: []
  type: TYPE_NORMAL
- en: We designed our Python GUI database and refactored our GUI in preparation to
    use our new database. Then, we created a MySQL database and created two tables
    within it.
  prefs: []
  type: TYPE_NORMAL
- en: We verified that the tables made it into our database by using both Python and
    the MySQL client that ships with the MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we will insert data into our tables.
  prefs: []
  type: TYPE_NORMAL
- en: Using the SQL INSERT command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe presents the entire Python code that shows you how to create and
    drop MySQL databases and tables, as well as how to display the existing databases,
    tables, columns, and data of our MySQL instance.
  prefs: []
  type: TYPE_NORMAL
- en: After creating the database and tables, we will insert data into the two tables
    we will create in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We are using a *primary key* to *foreign key* relationship to connect the data
    of the two tables.
  prefs: []
  type: TYPE_NORMAL
- en: We will go into detail about how this works in the following two recipes, where
    we will modify and delete the data in our MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe builds on the MySQL database we created in the previous recipe,
    *Designing the Python GUI database*, and also shows you how to drop and recreate
    the GuiDB.
  prefs: []
  type: TYPE_NORMAL
- en: Dropping the database, of course, deletes all the data the database has in its
    tables, so we'll show you how to reinsert that data as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The entire code in the `GUI_MySQL_class.py` module is present in the code folder
    for this chapter, which you can download from [https://github.com/PacktPublishing/Python-GUI-Programming-Cookbook-Third-Edition](https://github.com/PacktPublishing/Python-GUI-Programming-Cookbook-Third-Edition).
    Let''s go through these steps sequentially:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the code for this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `GUI_MySQL_class.py` and look at the class methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Running the preceding code (including the full implementation of the code) creates
    the following tables and data in the database we created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Command Prompt and execute the two `SELECT *` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c11fa1e-274e-4a1d-b81f-80fabcf857c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `GUI_MySQL_class.py` code creates the database, adds tables to it, and then
    inserts data into the two tables we created.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we outline the code without showing all the implementation details in
    order to preserve space because it would take too many pages to show the entire
    code.
  prefs: []
  type: TYPE_NORMAL
- en: We created a MySQL database, connected to it, and then created two tables that
    hold the data for a favorite book or journal quotation.
  prefs: []
  type: TYPE_NORMAL
- en: We distributed the data between two tables because the quotations tend to be
    rather large, while the book titles and book page numbers are very short. By doing
    this, we can increase the efficiency of our database.
  prefs: []
  type: TYPE_NORMAL
- en: In SQL database language, separating data into separate tables is called *normalization*.
    One of the most important things you need to do while using a SQL database is
    to segregate data into related tables, also known as **relationships**.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using the SQL UPDATE command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will use the code from the previous recipe, *Using the SQL INSERT
    command*, explain it in more detail, and then extend the code to update the data.
  prefs: []
  type: TYPE_NORMAL
- en: In order to update the data that we previously inserted into our MySQL database
    tables, we need to use the SQL `UPDATE` command.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe builds on the previous recipe, *Using the SQL INSERT command*, so
    read and study the previous recipe in order to follow the code in this recipe,
    where we will modify the existing data.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can use the `SQL UPDATE` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will display the data to be modified by running the following Python
    to the MySQL command. Sequentially, we perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `GUI_MySQL_class.py`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at the `showData` method:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code gives us the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c766ac7-e8b1-4826-9b52-f1f83830152a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Look at the `updateGOF` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the method located in `GUI_MySQL_class.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dab36cb7-f38f-4f70-9ad2-855665695ffc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the following code and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a MySQL client window and run the `SELECT *` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/61f1631f-cf20-4237-a2b8-d3ba0d17f5b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we opened `GUI_MySQL_class.py` or typed the code that was shown in our
    own module and ran it.
  prefs: []
  type: TYPE_NORMAL
- en: We may not agree with the *Gang of Four*, so let's change their famous programming
    quote.
  prefs: []
  type: TYPE_NORMAL
- en: The Gang of Four are the four authors who created the world-famous book called *Design
    Patterns*, which strongly influenced our entire software industry to recognize,
    think, and code using software *design patterns*.
  prefs: []
  type: TYPE_NORMAL
- en: We did this by updating our database of favorite quotes. First, we retrieved
    the primary key value by searching for the book title. Then, we passed that value
    into our search for the quote.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the primary key of the quote, we can update the quote by executing
    the SQL `UPDATE` command.
  prefs: []
  type: TYPE_NORMAL
- en: Before we ran the code, our title with `Book_ID = 1` was related via a *primary* *key* to *foreign
    key* relationship to the quotation in the `Books_Book_ID` column of the quotation
    table. This is the original quotation from the *Design Patterns* book.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we updated the quotation related to this ID via the SQL `UPDATE` command.
  prefs: []
  type: TYPE_NORMAL
- en: None of the IDs have changed, but the quotation that is now associated with `Book_ID
    = 1` has changed, as can be seen in the second MySQL client window.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we retrieved the existing data from our database and database
    tables that we created in the previous recipes. We inserted data into the tables
    and updated our data using the SQL `UPDATE` command.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using the SQL DELETE command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the SQL `DELETE` command to delete the data we created
    in the previous recipe, *Using the SQL UPDATE command*.
  prefs: []
  type: TYPE_NORMAL
- en: While deleting data might sound trivial at first, once we get a rather large
    database design in production, things might not be that easy any more.
  prefs: []
  type: TYPE_NORMAL
- en: Because we have designed our GUI database by *relating* two tables via a *primary*
    to *foreign key relation*, when we delete certain data, we do not end up with
    *orphan records* because this database design takes care of *cascading* deletes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses the MySQL database, tables, and the data that was inserted
    into those tables from the previous recipe, *Using the SQL UPDATE command*. In
    order to demonstrate how to create orphan records, we will have to change the
    design of one of our database tables.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the design to intentionally create a poor design is for demonstration
    purposes only and is not the recommended way of designing a database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we create our `quotations` table without a *foreign key relationship* to
    the `books` table, we can end up with orphan records. Take a look at the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `GUI_MySQL_class.py` and look at `def createTablesNoFK(self): ...`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the SQL command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the two `SELECT *` commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/407b6af1-6518-472b-bcd3-dcc64502cb1f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open `GUI_MySQL_class.py` and look at `def createTables(self): ...`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `showData()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e4e60106-2a4c-4b52-95f4-35c92fa93afd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the `deleteRecord()` method, followed by the `showData()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code results in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/76aba897-d5dd-46a6-ae17-9ce02a0c9364.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We kept our database design simple by using only two database tables.
  prefs: []
  type: TYPE_NORMAL
- en: While this works when we delete data, there is always a chance of us ending
    up with orphan records. What this means is that we delete data in one table but
    somehow do not delete the related data in another SQL table. Here, we started
    by intentionally showing how **orphan records** can be created.
  prefs: []
  type: TYPE_NORMAL
- en: After inserting data into the `books` and `quotations` tables, if we execute
    a `DELETE` statement, we are only deleting the book with `Book_ID = 1`, while
    the related quotation with `Books_Book_ID = 1` is left behind.
  prefs: []
  type: TYPE_NORMAL
- en: This is an **orphaned record**. A book record that has a `Book_ID` of `1` no
    longer exists.
  prefs: []
  type: TYPE_NORMAL
- en: This situation can cause **data corruption**, which we can avoid by using *cascading* deletes.
  prefs: []
  type: TYPE_NORMAL
- en: We prevented this in the creation of the tables by adding certain database *constraints*.
    When we created the table that holds the quotations in a previous recipe, we created
    our `quotations` table with a *foreign* *key* **constraint** that explicitly references
    the *primary key* of the books table, linking the two.
  prefs: []
  type: TYPE_NORMAL
- en: The `FOREIGN KEY` relationship includes the `ON DELETE CASCADE` attribute, which
    basically tells our MySQL server to delete the related records in this table when
    the records that this foreign key relates to are deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this design, no *orphan* records will be left behind, which is what
    we want.
  prefs: []
  type: TYPE_NORMAL
- en: In MySQL, we have to specify `ENGINE=InnoDB` on both of the related tables in
    order to use *primary key* to *foreign key* relationships.
  prefs: []
  type: TYPE_NORMAL
- en: The `showData()` method shows us that we have two records that are related via *primary
    key* to *foreign key* relationships.
  prefs: []
  type: TYPE_NORMAL
- en: When we now delete a record in the `books` table, we expect the related record
    in the `quotations` table to also be deleted by a cascading delete.
  prefs: []
  type: TYPE_NORMAL
- en: After executing the commands to delete and show records, we got the new results.
  prefs: []
  type: TYPE_NORMAL
- en: The famous design patterns are gone from our database of favorite quotations.
    This is meant as a joke—I personally highly value the famous design patterns.
    However, Python's *duck typing* is a very cool feature indeed!
  prefs: []
  type: TYPE_NORMAL
- en: We triggered *cascading* deletes in this recipe by designing our database in
    a solid fashion via *primary key* to *foreign key* relationships with *cascading*
    deletes.
  prefs: []
  type: TYPE_NORMAL
- en: This keeps our data sane and integral.
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we will use the code of our `GUI_MySQL_class.py` module
    from our Python GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Storing and retrieving data from our MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use our Python GUI to insert data into our MySQL database tables. We
    already refactored the GUI we built in the previous recipes in preparation for
    connecting and using a database.
  prefs: []
  type: TYPE_NORMAL
- en: We will use two textbox Entry widgets, into which we can type the book or journal
    title and the page number. We will also use a `ScrolledText` widget to type our
    favorite book quotations into, which we will then store in our MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will build on the MySQL database and tables we created in the previous
    recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will insert, retrieve, and modify our favorite quotations using our Python
    GUI. We refactored the MySQL tab of our GUI in preparation for this. Let''s look
    at how we can deal with this:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `GUI_MySQL.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Running the code in this file shows us our GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/078657a7-58ac-4f94-b2a1-612d22ff8584.png)'
  prefs: []
  type: TYPE_IMG
- en: Open `GUI_MySQL.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice the `insertQuote()` method, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Run `GUI_MySQL.py`, enter a quotation, and click the Insert Quote button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe1f64c5-5902-46f4-8fa1-0d22868b7fca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click Get Quotes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8e3e3a20-018e-41ab-b8dc-48f3000ae4a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open `GUI_MySQL.py` and look at the `getQuote` method and button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `GUI_MySQL.py` and look at `self.mySQL` and `showBooks()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Let's go over how this recipe works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to make the buttons in `GUI_MySQL.py` do something, we connect them
    to *callback functions*, like we have done many times in this book. We display the
    data in the `ScrolledText` widget, below the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this, we import the `GUI_MySQL_class.py` module. The entire code
    that talks to our MySQL server instance and database resides in this module, which
    is a form of *encapsulating* the code in the spirit of **object-oriented programming** (**OOP**).
  prefs: []
  type: TYPE_NORMAL
- en: We connect the Insert Quote button to the `insertQuote()` method callback.
  prefs: []
  type: TYPE_NORMAL
- en: When we run our code, we can insert data from our Python GUI into our MySQL
    database.
  prefs: []
  type: TYPE_NORMAL
- en: After entering a book title and book page, as well as a quote from the book,
    we *insert* the data into our database by clicking the Insert Quote button.
  prefs: []
  type: TYPE_NORMAL
- en: Our current design allows for titles, pages, and a quotation. We can also insert
    our favorite quotations from movies. While a movie does not have pages, we can
    use the page column to insert the approximate time when the quotation occurred
    within the movie.
  prefs: []
  type: TYPE_NORMAL
- en: After inserting the data, we verified that it made it into our two MySQL tables
    by clicking the Get Quotes button, which then displayed the data we inserted into
    our two MySQL database tables, as shown in the screenshot in *step 6*.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the Get Quotes button invokes the callback method we associated with
    the button click event. This gives us the data that we display in our `ScrolledText` widget.
  prefs: []
  type: TYPE_NORMAL
- en: We used the `self.mySQL` class instance attribute to invoke the `showBooks()` method,
    which is a part of the `MySQL` class we imported.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we imported the Python module we wrote, which contains all of
    the coding logic that we need so that we can connect to our MySQL database. It
    also knows how to insert, update, and delete data.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have connected our Python GUI to this SQL logic.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using MySQL Workbench
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL has a very nice GUI that we can download for free. It's called **MySQL
    Workbench**.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will successfully install Workbench and then use it to run
    SQL queries against the GuiDB we created in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to use this recipe, you will need MySQL database we developed in the
    previous recipes. You will also need a running MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can download MySQL Workbench from the official MySQL website: [https://dev.mysql.com/downloads/workbench/](https://dev.mysql.com/downloads/workbench/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how we can perform this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the MySQL Workbench installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Download button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2444dbf-254f-4edd-9a21-cc857d41ac3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/37eb643e-43c6-4508-9bc0-dca474c08265.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click Next > until the installation is complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/917bc1d4-303f-46db-80c2-bd5e7d348a28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open MySQL Workbench:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/694dd086-b49f-48b4-a201-41021583c02a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select our `guidb`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d63470b9-0344-49b5-b3d7-aaaf7eeb4f32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Write and execute some SQL commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d238e2d0-41f7-41d9-85f8-41ab0d700229.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go behind the scenes to understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you installed MySQL, if you had the required components already installed
    on your PC, you may already have MySQL Workbench installed. If you do not have
    Workbench installed, *steps 1* to *3* show you how to install MySQL Workbench.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Workbench is a GUI in itself, very similar to the one we developed in
    the previous recipes. It does come with some additional features that are specific
    to working with MySQL. `8.0 CE` in the installer window is an abbreviation for
    version **8.0 Community Edition**.
  prefs: []
  type: TYPE_NORMAL
- en: When you start up MySQL Workbench, it will prompt you to connect. Use the **root**
    user and password you created for it. MySQL Workbench is smart enough to recognize
    that you're running a MySQL server and the port it is listening on.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are successfully logged in to your MySQL server instance, you can select
    the `guidb` we created.
  prefs: []
  type: TYPE_NORMAL
- en: We can find our `guidb` underneath the SCHEMAS label.
  prefs: []
  type: TYPE_NORMAL
- en: In some literature and products, databases are often called **SCHEMAS**. Schematics
    refer to the structure and layout of a database. Personally, coming from Microsoft
    SQL Server, I am used to referring to them simply as *databases*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can type SQL commands into the Query Editor and execute our commands by
    clicking the lightning bolt icon. It is the button toward the top right, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06581eae-e542-4c78-ad53-83cab2248d5e.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see the results in the Result Grid. We can click on the different tabs
    to see the different results.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can connect to our MySQL database via the MySQL Workbench GUI. We can
    execute the same SQL commands we issued before and get the same results that we
    did when we executed them in our Python GUI.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the knowledge we have gained throughout the recipes within this and the
    preceding chapters, we are now well positioned to create our own GUIs written
    in Python, all of which can connect and talk to MySQL databases.
  prefs: []
  type: TYPE_NORMAL
