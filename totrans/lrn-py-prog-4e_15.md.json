["```py\n$ cp original.txt copy.txt \n```", "```py\n$ grep -r --exclude '*.txt' hello . \n```", "```py\n$ git commit -m \"Fix some bugs\" \n```", "```py\n$ git ls-files -m \n```", "```py\n# argument_parsing/argv.py\nimport sys\nprint(sys.argv) \n```", "```py\n$ python argument_parsing/argv.py\n['argument_parsing/argv.py'] \n```", "```py\n$ python argument_parsing/argv.py your lucky number is 13\n['argument_parsing/argv.py', 'your', 'lucky', 'number', 'is', '13'] \n```", "```py\n# argument_parsing/greet.argparse.py\nimport argparse\ndef main():\n    args = parse_arguments()\n    print(args)\n    msg = \"{greet} {name}. You are {age} years old.\".format(\n        **vars(args)\n    )\n    if args.reverse:\n        msg = msg[::-1]\n    print(msg)\ndef parse_arguments():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"name\", help=\"Your name\")\n    parser.add_argument(\"age\", type=int, help=\"Age\")\n    parser.add_argument(\"-r\", \"--reverse\", action=\"store_true\")\n    parser.add_argument(\n        \"-g\", default=\"Hi\", help=\"Custom greeting\", dest=\"greet\"\n    )\n    return parser.parse_args()\nif __name__ == \"__main__\":\n    main() \n```", "```py\n$ python argument_parsing/greet.argparse.py Heinrich -r 42\nNamespace(name='Heinrich', age=42, reverse=True, greet='Hi')\n.dlo sraey 24 era uoY .hcirnieH iH \n```", "```py\n$ python argument_parsing/greet.argparse.py -g -r Heinrich 42\nusage: greet.argparse.py [-h] [-r] [-g GREET] name age\ngreet.argparse.py: error: argument -g: expected one argument \n```", "```py\n$ python argument_parsing/greet.argparse.py -h\nusage: greet.argparse.py [-h] [-r] [-g GREET] name age\npositional arguments:\n  name           Your name\n  age            Age\noptions:\n  -h, --help     show this help message and exit\n  -r, --reverse\n  -g GREET       Custom greeting \n```", "```py\n$ tree -a project\nproject\n├── .env.example\n├── railway_cli\n│   ├── __init__.py\n│   ├── __main__.py\n│   ├── api\n│   │   ├── __init__.py\n│   │   ├── client.py\n│   │   └── schemas.py\n│   ├── cli.py\n│   ├── commands\n│   │   ├── __init__.py\n│   │   ├── admin.py\n│   │   ├── base.py\n│   │   └── stations.py\n│   ├── config.py\n│   └── exceptions.py\n└── secrets\n    ├── railway_api_email\n    └── railway_api_password \n```", "```py\n$ python -m railway_cli \n```", "```py\n# project/railway_cli/__main__.py\nfrom . import cli\ncli.main() \n```", "```py\n# project/railway_cli/cli.py\nimport argparse\nimport sys\nfrom . import __version__, commands, config, exceptions\nfrom .commands.base import Command\ndef main(cmdline: list[str] | None = None) -> None:\n    arg_parser = get_arg_parser()\n    args = arg_parser.parse_args(cmdline)\n    try:\n        # args.command is expected to be a Command class\n        command: Command = args.command(args)\n        command.execute()\n    except exceptions.APIError as exc:\n        sys.exit(f\"API error: {exc}\")\n    except exceptions.CommandError as exc:\n        sys.exit(f\"Command error: {exc}\")\n    except exceptions.ConfigurationError as exc:\n        sys.exit(f\"Configuration error: {exc}\") \n```", "```py\n# project/railway_cli/cli.py\ndef get_arg_parser() -> argparse.ArgumentParser:\n    parser = argparse.ArgumentParser(\n        prog=__package__,\n        description=\"Commandline interface for the Railway API\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n    parser.add_argument(\n        \"-V\",\n        \"--version\",\n        action=\"version\",\n        version=f\"%(prog)s {__version__}\",\n    )\n    config.configure_arg_parser(parser)\n    commands.configure_parsers(parser)\n    return parser \n```", "```py\n# project/railway_cli/config.py\nimport argparse\nfrom getpass import getpass\nfrom pydantic import EmailStr, Field, SecretStr, ValidationError\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\nfrom .exceptions import ConfigurationError\nclass Settings(BaseSettings):\n    url: str\n    secrets_dir: str | None = None\nclass AdminCredentials(BaseSettings):\n    model_config = SettingsConfigDict(env_prefix=\"railway_api_\")\n    email: EmailStr\n    password: SecretStr = Field(\n        default_factory=lambda: SecretStr(\n            getpass(prompt=\"Admin Password: \")\n        )\n    ) \n```", "```py\n# project/railway_cli/config.py\ndef configure_arg_parser(parser: argparse.ArgumentParser) -> None:\n    config_group = parser.add_argument_group(\n        \"configuration\",\n        description=\"\"\"The API URL must be set in the\n        configuration file. The admin email and password should be\n        configured via secrets files named email and password in a\n        secrets directory.\"\"\",\n    )\n    config_group.add_argument(\n        \"--config-file\",\n        help=\"Load configuration from a file\",\n        default=\".env\",\n    )\n    config_group.add_argument(\n        \"--secrets-dir\",\n        help=\"\"\"The secrets directory. Can also be set via the\n        configuration file.\"\"\",\n    ) \n```", "```py\n# project/railway_cli/config.py\ndef get_settings(args: argparse.Namespace) -> Settings:\n    try:\n        return Settings(_env_file=args.config_file)\n    except ValidationError as exc:\n        raise ConfigurationError(str(exc)) from exc\ndef get_admin_credentials(\n    args: argparse.Namespace, settings: Settings\n) -> AdminCredentials:\n    secrets_dir = args.secrets_dir\n    if secrets_dir is None:\n        secrets_dir = settings.secrets_dir\n    try:\n        return AdminCredentials(_secrets_dir=secrets_dir)\n    except ValidationError as exc:\n        raise ConfigurationError(str(exc)) from exc \n```", "```py\n# project/railway_cli/commands/base.py\nimport argparse\nfrom typing import ClassVar\nfrom ..api.client import HTTPClient\nfrom ..config import get_settings\nclass Command:\n    name: ClassVar[str]\n    help: ClassVar[str]\n    def __init__(self, args: argparse.Namespace) -> None:\n        self.args = args\n        self.settings = get_settings(args)\n        self.api_client = HTTPClient(self.settings.url)\n    @classmethod\n    def configure_arg_parser(\n        cls, parser: argparse.ArgumentParser\n    ) -> None:\n        raise NotImplementedError\n    def execute(self) -> None:\n        raise NotImplementedError \n```", "```py\n# project/railway_cli/commands/__init__.py\nimport argparse\nfrom .admin import admin_commands\nfrom .base import Command\nfrom .stations import station_commands\ndef configure_parsers(parser: argparse.ArgumentParser) -> None:\n    subparsers = parser.add_subparsers(\n        description=\"Available commands\", required=True\n    )\n    command: type[Command]\n    for command in [*admin_commands, *station_commands]:\n        command_parser = subparsers.add_parser(\n            command.name, help=command.help\n        )\n        command.configure_arg_parser(command_parser)\n        **command_parser.set_defaults(command=command)** \n```", "```py\n$ python -m railway_cli -h\nusage: railway_cli [-h] [-V] [--config-file CONFIG_FILE]\n                   [--secrets-dir SECRETS_DIR]\n                   {admin-delete-station,get-station,...}\n                   ...\nCommandline interface for the Railway API\noptions:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\nconfiguration:\n  The API URL must be set in the configuration file. ...\n  --config-file CONFIG_FILE\n                        Load configuration from a file (default:\n                        .env)\n  --secrets-dir SECRETS_DIR\n                        The secrets directory. Can also be set\n                        via the configuration file. (default:\n                        None)\nsubcommands:\n  Available commands\n  {admin-delete-station,get-station,list-stations,...}\n    admin-delete-station\n                        Delete a station\n    get-station         Get a station\n    list-stations       List stations\n    create-station      Create a station\n    update-station      Update an existing station\n    get-arrivals        Get arrivals for a station\n    get-departures      Get departures for a station \n```", "```py\n# project/railway_cli/commands/stations.py\nclass CreateStation(Command):\n    name = \"create-station\"\n    help = \"Create a station\"\n    @classmethod\n    def configure_arg_parser(\n        cls, parser: argparse.ArgumentParser\n    ) -> None:\n        parser.add_argument(\n            \"--code\", help=\"The station code\", required=True\n        )\n        parser.add_argument(\n            \"--country\", help=\"The station country\", required=True\n        )\n        parser.add_argument(\n            \"--city\", help=\"The station city\", required=True\n        )\n    def execute(self) -> None:\n        station_client = StationClient(self.api_client)\n        station = station_client.create(\n            code=self.args.code,\n            country=self.args.country,\n            city=self.args.city,\n        )\n        print(station) \n```", "```py\n$ python -m railway_cli create-station -h\nusage: railway_cli create-station [-h] --code CODE --country\n                                  COUNTRY --city CITY\noptions:\n  -h, --help         show this help message and exit\n  --code CODE        The station code\n  --country COUNTRY  The station country\n  --city CITY        The station city \n```", "```py\n$ python -m railway_cli create-station --code LSB --city Lisbon \\\n    --country Portugal\nid=12 code='LSB' country='Portugal' city='Lisbon' \n```"]