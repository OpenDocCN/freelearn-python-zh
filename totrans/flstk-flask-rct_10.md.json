["```py\nbizza/├── backend/\n├── frontend/\n```", "```py\nfrontend/├── node_modules\n├── package.json\n├── public\n    ├──favicon.ico\n├──index.html\n├── src\n    ├──components/\n    ├──pages/\n    ├──hooks/\n    ├──assets/\n    └──App.js\n    └──App.css\n    └──index.js\n    └──index.css\n    └──setupTests.js\n├──.gitignore\n├──.prettierrc\n├──package-lock.json\n├──package.json\n├──README.md\n```", "```py\nbackend/├── app.py\n├── models\n├── config\n│   ├── config.py\n├── .flaskenv\n├── requirements.txt\n```", "```py\n    {  \"name\": \"bizza\",  \"version\": \"0.1.0\",  \"proxy\": \"http://localhost:5000\"}\n    ```", "```py\n    npm install axios\n    ```", "```py\n    source venv/bin/activate\n    ```", "```py\n    Venv/Scripts/activate\n    ```", "```py\nclass EventRegistration(db.Model):    __tablename__ = 'attendees'\n    id = db.Column(db.Integer, primary_key=True)\n    first_name = db.Column(db.String(100), unique=True, nullable=False)\n    last_name = db.Column(db.String(100), unique=True, nullable=False)\n    email = db.Column(db.String(100), unique=True, nullable=False)\n    phone = db.Column(db.String(100), unique=True, nullable=False)\n    job_title = db.Column(db.String(100), unique=True, nullable=False)\n    company_name = db.Column(db.String(100), unique=True,         nullable=False)\n    company_size = db.Column(db.String(50), unique=True,         nullable=False)\n    subject = db.Column(db.String(250), nullable=False)\ndef format(self):\n    return {\n        'id': self.id,\n        'first_name': self.first_name,\n        'last_name': self.last_name,\n        'email': self.email,\n        'phone': self.phone,\n        'job_title': self.job_title,\n        'company_name': self.job_title,\n        'company_size': self.company_size,\n        'subject': self.subject\n    }\n```", "```py\n@app.route(\"/api/v1/events-registration\", methods=['POST'])def add_attendees():\n    if request.method == 'POST':\n        first_name = request.get_json().get('first_name')\n        last_name = request.get_json().get('last_name')\n        email = request.get_json().get('email')\n        phone = request.get_json().get('phone')\n        job_title = request.get_json().get('job_title')\n        company_name = request.get_json().get('company_name')\n        company_size = request.get_json().get('company_size')\n        subject = request.get_json().get('subject')\n        if first_name and last_name and email and phone and subject:\n            all_attendees = EventRegistration.query.filter_by(\n                email=email).first()\n            if all_attendees:\n                return jsonify(message=\"Email address already                     exists!\"), 409\n            else:\n                new_attendee = EventRegistration(\n                    first_name = first_name,\n                    last_name = last_name,\n                    email = email,\n                    phone = phone,\n                    job_title = job_title,\n                    company_name = company_name,\n                    company_size = company_size,\n                    subject = subject\n                )\n                db.session.add(new_attendee)\n                db.session.commit()\n                return jsonify({\n                    'success': True,\n                    'new_attendee': new_attendee.format()\n                }), 201\n        else:\n            return jsonify({'error': 'Invalid input'}), 400\n```", "```py\nflask shellfrom app import db, EventRegistration\ndb.create_all()\n```", "```py\nflask db migrate –m \"events attendee table added\"flask db upgrade\n```", "```py\n    import React, { useState, useEffect } from 'react';import axios from 'axios';const EventRegistration = () => {  // Initial form values  const initialValues = {    firstname: '',    lastname: '',    email: '',    phone: '',    job_title: '',    company_name: '',    company_size: '',    subject: '' };  // State variables  const [formValues, setFormValues] =    useState(initialValues); // Stores the form field                                values  const [formErrors, setFormErrors] = useState({});// Stores the form field for the validation errors  const [isSubmitted, setIsSubmitted] =    useState(false); // Tracks whether the form has                        been submitted{/* Rest of the form can be found at the GitHub link - https://github.com/PacktPublishing/Full-Stack-Flask-Web-Development-with-React/tree/main/Chapter-10/ */}            <div id=\"btn-section\">              <button>Join Now</button>            </div>        </form>      </div>    </div>  </div></>);};export default EventRegistration;\n    POST request to the /api/v1/events-registration route with the form data. It then updates the component’s state with the response from the server and displays a success or error message to the user.\n    ```"]