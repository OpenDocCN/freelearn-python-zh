- en: Lets Build a Robot!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built an indoor robot (using the Raspberry Pi Zero as the
    controller) and documented our experience in a step-by-step guide. We wanted to
    demonstrate the awesomeness of the combination of Python programming language
    and the Raspberry Pi Zero's peripherals. We have also included suggestions to
    build an outdoor robot as well as suggestions for additional accessories for your
    robot. At the end of this chapter, we have included additional learning resources
    to build your own robot. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to access the Raspberry Pi Zero via remote login
    (SSH) and remotely transferred files from the Raspberry Pi Zero. If you are not
    familiar with the command-line interface, we recommend proceeding to [Chapter
    11](83036e86-f65c-46ed-996d-4f1aeeab5022.xhtml), *Tips and Tricks*, to set up
    your local desktop environment.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_001.png)'
  prefs: []
  type: TYPE_IMG
- en: A Raspberry Pi Zero powered robot
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we will be making use of a camera for our robot, Raspberry Pi Zero v1.3
    or higher is needed for this chapter. Your Raspberry Pi Zero''s board version
    is available on the back. Refer to the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_002.png)'
  prefs: []
  type: TYPE_IMG
- en: Identifying your Raspberry Pi Zero's version
  prefs: []
  type: TYPE_NORMAL
- en: Components of the robot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s discuss the components of the robot using the labeled picture as an
    aid (shown in the following figure):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_003.png)'
  prefs: []
  type: TYPE_IMG
- en: Components of the robot
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an explanation for the components of the robot:'
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi Zero controls the movement of the robot using a motor driver
    circuit (stacked on top of the Raspberry Pi Zero)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The motors of the robot are connected to the motor driver circuit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB battery pack is used to power the Raspberry Pi Zero. A separate AA battery
    pack is used to drive the motors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The robot is also equipped with a camera module that helps with driving the
    robot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have included a suggested list of components where we chose the cheapest
    source available for the component. You are welcome to substitute with your own
    components. For example, you can use a webcam instead of using the Raspberry Pi
    camera module:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Component** | **Source** | **Quantity** | **Price (in USD)** |'
  prefs: []
  type: TYPE_TB
- en: '| Chassis | [https://www.adafruit.com/products/2943](https://www.adafruit.com/products/2943)
    | 1 | 9.95 |'
  prefs: []
  type: TYPE_TB
- en: '| Chassis top plate | [https://www.adafruit.com/products/2944](https://www.adafruit.com/products/2944)
    | 1 | 4.95 |'
  prefs: []
  type: TYPE_TB
- en: '| A set of M2.5 rows, spacers, and nuts | [http://a.co/dpdmb1B](http://a.co/dpdmb1B)
    | 1 | 11.99 |'
  prefs: []
  type: TYPE_TB
- en: '| DC motors in servo body | [https://www.adafruit.com/products/2941](https://www.adafruit.com/products/2941)
    | 2 | 3.50 |'
  prefs: []
  type: TYPE_TB
- en: '| Wheel | [https://www.adafruit.com/products/2744](https://www.adafruit.com/products/2744)
    | 2 | 2.50 |'
  prefs: []
  type: TYPE_TB
- en: '| Castor wheel | [https://www.adafruit.com/products/2942](https://www.adafruit.com/products/2942)
    | 1 | 1.95 |'
  prefs: []
  type: TYPE_TB
- en: '| Raspberry Pi Zero | [https://www.adafruit.com/products/3400](https://www.adafruit.com/products/3400)
    | 1 | 5.00 |'
  prefs: []
  type: TYPE_TB
- en: '| A Raspberry Pi Zero camera module | [http://a.co/07iFhxC](http://a.co/07iFhxC)
    | 1 | 24.99 |'
  prefs: []
  type: TYPE_TB
- en: '| A Raspberry Pi Zero camera adapter | [https://www.adafruit.com/products/3157](https://www.adafruit.com/products/3157)
    | 1 | 5.95 |'
  prefs: []
  type: TYPE_TB
- en: '| A motor driver circuitry for Raspberry Pi Zero | [https://www.adafruit.com/products/2348](https://www.adafruit.com/products/2348)
    | 1 | 22.50 |'
  prefs: []
  type: TYPE_TB
- en: '| USB battery pack | [http://a.co/9vQLx2t](http://a.co/9vQLx2t) | 1 | 5.09
    |'
  prefs: []
  type: TYPE_TB
- en: '| AA battery pack (4 batteries) | [http://a.co/hVPxfzD](http://a.co/hVPxfzD)
    | 1 | 5.18 |'
  prefs: []
  type: TYPE_TB
- en: '| AA batteries | NA | 4 | N.A. |'
  prefs: []
  type: TYPE_TB
- en: '| Raspberry Pi camera module mount | [https://www.adafruit.com/products/1434](https://www.adafruit.com/products/1434)
    | 1 | 4.95 |'
  prefs: []
  type: TYPE_TB
- en: In the interest of saving time, we chose off-the-shelf accessories to build
    robot. We specifically chose Adafruit for the ease of purchase and shipping. If
    you are interested in building a robot that needs to suit outdoor conditions,
    we recommend a chassis similar to [http://www.robotshop.com/en/iron-man-3-4wd-all-terrain-chassis-arduino.html](http://www.robotshop.com/en/iron-man-3-4wd-all-terrain-chassis-arduino.html).
  prefs: []
  type: TYPE_NORMAL
- en: As makers, we recommend making your own chassis and control circuitry (especially
    the motor drive). You can make use of software such as Autodesk Fusion (the link
    is available in the resources section) to design the chassis.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up remote login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To control the robot remotely, we need to set up remote login access, that is,
    enable the SSH access. **Secure Shell** (**SSH**), and it is a protocol that enables
    remote access of a computer. The SSH access is disabled by default on the Raspbian
    operating system for security reasons. In this section, we will enable the SSH access
    to the Raspberry Pi Zero and change the Raspberry Pi Zero's default password.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not familiar with the SSH access, we have provided a quick tutorial
    in [Chapter 11](83036e86-f65c-46ed-996d-4f1aeeab5022.xhtml), *Tips and Tricks*.
    We would like to keep the focus on building the robot in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we enable the SSH access, we need to change the default password of the
    Raspberry Pi Zero. This is to avoid any potential threat to your computer and
    your robot! We have advocated changing default passwords on multiple occasions
    in this chapter. Default passwords have wreaked havoc across the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recommended reading *Mirai botnet attack*: [http://fortune.com/2016/10/23/internet-attack-perpetrator/](http://fortune.com/2016/10/23/internet-attack-perpetrator/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'On your desktop, go to Menu | Preferences and launch Raspberry Pi Configuration.
    Under the System tab, there is an option to change the password under the System
    tab (shown in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_004.png)'
  prefs: []
  type: TYPE_IMG
- en: Change your Raspberry Pi Zero's default password
  prefs: []
  type: TYPE_NORMAL
- en: Enabling SSH access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Under the Interfaces tab of the Raspberry Pi configuration, select Enable for
    SSH (as shown in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_005.png)'
  prefs: []
  type: TYPE_IMG
- en: Enable SSH under the Interfaces tab
  prefs: []
  type: TYPE_NORMAL
- en: Reboot your Raspberry Pi Zero, and you should be able to access your Raspberry
    Pi Zero via SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 11](83036e86-f65c-46ed-996d-4f1aeeab5022.xhtml), *Tips and
    Tricks*, for the SSH access to your Raspberry Pi Zero from Windows, *nix operating
    systems (beyond the scope of this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Chassis setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The robot is going to have a differential steering mechanism. Thus, it is going
    to be steered by two motors. It is going to be supported by a third castor that
    acts as a support.
  prefs: []
  type: TYPE_NORMAL
- en: In a differential steering mechanism arrangement, the robot moves in the forward
    direction or backward direction when both the wheels of the robot are rotating
    in the same direction. The robot can turn left or right by rotating one wheel
    faster than the other wheel. For example, in order to rotate left, the right motor
    needs to rotate faster than the left and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: In order to reach a better understanding of the differential steering mechanism,
    we recommend building out the chassis and testing it with the Raspberry Pi Zero
    (We are going to test our chassis using a simple program in the later part of
    this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: We have provided additional resources on differential steering at the end of
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Chassis prep for the robot
  prefs: []
  type: TYPE_NORMAL
- en: 'The chassis comes with the required provisions along with the screws required
    to mount the motors. Ensure that the motor''s wires are facing the same side (Refer
    to the picture given later). Similarly, the castor wheel can be assembled at the
    front, as shown in the picture here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_007.png)'
  prefs: []
  type: TYPE_IMG
- en: Assemble motors and mount castor wheels
  prefs: []
  type: TYPE_NORMAL
- en: The next step is mounting the wheels. The wheels are designed to be press-fitted
    directly onto the motor shaft.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_008.png)'
  prefs: []
  type: TYPE_IMG
- en: Assembling wheels onto the servo
  prefs: []
  type: TYPE_NORMAL
- en: Lock the wheels in place using a screw (comes with the wheels)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_009.png)'
  prefs: []
  type: TYPE_IMG
- en: Lock the wheel onto the shaft
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we are done setting up the chassis for the robot. Let's move on to the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Motor driver and motor selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The motor driver circuit ([https://www.adafruit.com/product/2348](https://www.adafruit.com/product/2348))
    can be used to connect four DC motors or two stepper motors. The motor driver
    is rated to provide 1.2 A of current per motor under continuous operation. This
    sufficiently meets the robot's motor power requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the motor driver circuit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The motor driver circuit comes as a kit, and it requires some soldering (shown
    in the figure here).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Adafruit DC and Stepper Motor HAT for Raspberry Pi-Mini Kit (picture source:
    adafruit.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in the assembly process is to solder the 40 pin header. Stack
    the header on top of your Raspberry Pi Zero and as shown in the picture here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_011.png)'
  prefs: []
  type: TYPE_IMG
- en: Stack the header on top of the Raspberry Pi Zero
  prefs: []
  type: TYPE_NORMAL
- en: Position the motor driver (as shown in the picture here) on top of the header.
    Hold on to the motor driver board so that the board is not tilted while soldering.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_012.png)'
  prefs: []
  type: TYPE_IMG
- en: Stack the motor HAT on top of the Raspberry Pi Zero
  prefs: []
  type: TYPE_NORMAL
- en: Solder the corner pins of the motor driver first and proceed to solder the other
    pins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_013.png)'
  prefs: []
  type: TYPE_IMG
- en: Note the motor driver board soldered such that the board is parallel to the
    Raspberry Pi Zero
  prefs: []
  type: TYPE_NORMAL
- en: Now, solder the 3.5 mm terminals (see the blue colored ones in the picture)
    by flipping the board
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_014.png)'
  prefs: []
  type: TYPE_IMG
- en: Solder the 3.5 mm terminals
  prefs: []
  type: TYPE_NORMAL
- en: The motor driver board is ready to use!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_015.png)'
  prefs: []
  type: TYPE_IMG
- en: The motor driver is ready to use
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Zero and motor driver assembly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to test the movements of the robot. This includes
    testing the motor driver and basic movements of the robot.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Zero and motor driver assembly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to assemble the Raspberry Pi Zero and the motor
    driver on to the robot chassis.
  prefs: []
  type: TYPE_NORMAL
- en: In order to mount the Raspberry Pi Zero on to the chassis, we need 4 M2.5 screws
    and nuts (Mounting hole specification available at [https://www.raspberrypi.org/documentation/hardware/raspberrypi/mechanical/rpi-zero-v1_2_dimensions.pdf](https://www.raspberrypi.org/documentation/hardware/raspberrypi/mechanical/rpi-zero-v1_2_dimensions.pdf)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The chassis we selected comes with slots that enables mounting the Raspberry
    Pi Zero directly on to the chassis. Based on your chassis design, you may have
    to drill clearance holes to mount the Raspberry Pi Zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_016.png)'
  prefs: []
  type: TYPE_IMG
- en: Mounting the Raspberry Pi Zero onto the chassis
  prefs: []
  type: TYPE_NORMAL
- en: While mounting the Raspberry Pi Zero, we ensured that we are able to plug in
    the HDMI cable, USB cable, and so on for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: The chassis we have used is made of anodized aluminum;hence, it is nonconductive.
    We mounted the Raspberry Pi Zero directly, without any insulation between the
    chassis and the Raspberry Pi Zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you don't short circuit any component by accidentally exposing them
    directly to conductive metal surfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Stack the motor driver on top of the Raspberry Pi Zero (as shown in the previous
    section).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The two motors of the robot need to be connected to the Raspberry Pi Zero:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The motor driver comes with motor terminals M1 through M4\. Let's connect the
    left and right DC motors to M1 and M2, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_017.png)'
  prefs: []
  type: TYPE_IMG
- en: Red and black wires connected from both the motors to the motor driver terminals
  prefs: []
  type: TYPE_NORMAL
- en: Each motor comes with two terminals, that is, black wire and a red wire. Connect
    the black wire to the left-most terminal of the bridge M1 and the red wire to
    the right-hand side terminal of the bridge M1 (as shown in the picture earlier).
    Similarly, the right motor is connected to the bridge M2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, that we have connected the motors, we need to test the motor function and
    verify that the motors are rotating in the same direction. In order to do so,
    we need to set up the robot's power supply.
  prefs: []
  type: TYPE_NORMAL
- en: Robot Power supply setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will discuss setting up the power supply for the Raspberry
    Pi Zero. We will discuss powering the Raspberry Pi Zero and the motors of the
    robot. Let''s discuss the major components of our robot and their power consumption:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Raspberry Pi Zero requires a 5V power supply, and it draws about 150 mA
    of current (Source: [http://raspberrypi.stackexchange.com/a/40393/1470](http://raspberrypi.stackexchange.com/a/40393/1470)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The two DC motors of the robot consume about 150 mA each.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The camera module consumes 250 mA of current (Source: [https://www.raspberrypi.org/help/faqs/#cameraPower](https://www.raspberrypi.org/help/faqs/#cameraPower)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The total power consumption estimate is about 550 mA (150 + 150*2 + 250).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to calculate the battery capacity, we also need to decide the duration
    of continuous operation before requiring a recharge. We wanted the robot to operate
    at least for 2 hours before requiring a recharge. The battery capacity can be
    calculated using the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_018.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In our case, this would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '*550mA * 2 hours = 1100 mAh*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We also found a battery life calculator from Digi-Key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-battery-life](http://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-battery-life)'
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the Digi-Key calculator, we need to account for factors that affect
    the battery life. Accounting for such factors, the battery capacity would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '*1100 mAh /0.7 = 1571.42 mAh*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We took this number into account while purchasing a battery for the robot.
    We decided to purchase this `2200mAh` USB battery pack that operates at 5V (shown
    in the picture later and the link for purchase has been shared with the bill of
    materials discussed earlier in this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_019.png)'
  prefs: []
  type: TYPE_IMG
- en: 2200 mAh 5V USB battery pack
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the battery pack is fully charged before assembling it on to the
    robot:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the battery pack is fully charged, mount it on to the robot using double-sided
    tape and plug a micro-USB cable, as shown in the picture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_020.png)'
  prefs: []
  type: TYPE_IMG
- en: 2200 mAh 5V USB battery pack
  prefs: []
  type: TYPE_NORMAL
- en: We need to verify that the Raspberry Pi Zero powers up when a battery pack is
    used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plug in the HDMI cable (that is connected to a monitor) and using a very short
    micro-USB cable, try to power up the Raspberry Pi Zero and make sure that everything
    powers up correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up the motor power supply
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have set up the power supply for the robot and verified that the
    Raspberry Pi Zero powers up using the USB battery pack, we will discuss power
    supply options to drive the motors of the robot. We are discussing this because
    the type of motor, and its power supply determines the performance of our robot.
    Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Let's revisit the motor driver that we set up in the previous section. The unique
    feature of this motor driver is that it is equipped with its own voltage regulator
    and polarity protection. Thus, it enables connecting an external power supply
    to power the motors (shown in the picture here)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_021.png)'
  prefs: []
  type: TYPE_IMG
- en: Motor driver power terminals
  prefs: []
  type: TYPE_NORMAL
- en: 'This motor driver enables driving any motor with a voltage requirement of 5-12V
    and current rating of 1.2A. There are two options to power the motors of your
    robot:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Raspberry Pi Zero's 5V GPIO power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an external power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Raspberry Pi Zero's 5V power supply
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The motor driver is designed such that it can act as a prototyping platform.
    There is a bank of 5V and 3.3V power supply pins that is connected to the Raspberry
    Pi Zero''s 5V and 3.3V GPIO pins. These GPIO pins are rated to provide a current
    of 1.5A (Source: [https://pinout.xyz/pinout/pin2_5v_power](https://pinout.xyz/pinout/pin2_5v_power)).
    They are directly connected to the 5V USB input of your Raspberry Pi Zero. (The
    USB battery pack used in this robot is rated to provide an output of 5V, 1 A).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in connecting the Raspberry Pi''s 5V GPIO power supply is soldering
    a red and black piece of wire (of appropriate length) from the 5V and GND pins,
    respectively (as shown in the figure here):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_022.png)'
  prefs: []
  type: TYPE_IMG
- en: Solder red and black pieces of wires from 5V and GND pins
  prefs: []
  type: TYPE_NORMAL
- en: Now, connect the red and black wires to terminal marked 5-12V motor power (Red
    wire goes to + and Black wire goes to -).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_023.png)'
  prefs: []
  type: TYPE_IMG
- en: Connect 5V and GND to the motor power supply terminals
  prefs: []
  type: TYPE_NORMAL
- en: Now, power up your Raspberry Pi Zero and measure the voltage across your motor
    power supply terminals. It should be receiving 5V, and the power LED of the motor
    driver should be glowing green (as shown in the next picture). If not, check the
    solder connections of the motor driver.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_024.png)'
  prefs: []
  type: TYPE_IMG
- en: Green LED lights up when the Raspberry Pi Zero is powered up
  prefs: []
  type: TYPE_NORMAL
- en: This method is useful only when low-power motors are used (like the ones used
    in this chapter). If you have a motor with a higher voltage rating (voltage rating
    greater than 5V), you need to connect an external power supply. We will review
    connecting an external power supply in the next section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you find your Raspberry Pi Zero constantly resetting itself while driving
    your robot, it is possible that the USB battery pack is not able to drive the
    robot's motors. It is time to connect an external power supply!
  prefs: []
  type: TYPE_NORMAL
- en: Using an external power supply
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to discuss connecting an external power supply
    to drive the motors. We will discuss connecting a 6V power supply to power the
    motors.
  prefs: []
  type: TYPE_NORMAL
- en: We will make use of a battery pack that consists of 4 AA batteries to drive
    the motors (battery packs available at [http://a.co/hVPxfzD](http://a.co/hVPxfzD)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to install the battery pack such that it leads could be connected to
    the motor drivers power terminals.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The robot chassis kit came with an additional aluminum plate that could be
    used to install the battery pack (shown in the figure here):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_025.png)'
  prefs: []
  type: TYPE_IMG
- en: Additional aluminium plate to hold the battery pack
  prefs: []
  type: TYPE_NORMAL
- en: 'We made use of four M2.5 stand-offs (shown in the picture) to hold the aluminum
    plate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_026.png)'
  prefs: []
  type: TYPE_IMG
- en: Assemble M2.5 stand-offs to hold the aluminium plate
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we used M2.5 screws to secure the aluminum plate (as shown in the figure
    here):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_027.png)'
  prefs: []
  type: TYPE_IMG
- en: Secure the aluminium plate
  prefs: []
  type: TYPE_NORMAL
- en: Using double-sided tape, the battery pack was installed (the battery pack contains
    four AA batteries) on top of the aluminum plate. Then, the red and black wires
    of the battery pack are connected to the + and - terminals of the motor driver,
    respectively (as shown in the figure here).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_028.png)'
  prefs: []
  type: TYPE_IMG
- en: Battery installed on the aluminium plate
  prefs: []
  type: TYPE_NORMAL
- en: Slide the battery pack switch to ON, and the motor driver should turn on as
    explained in the previous section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thus, the power supply setup is complete. In the next section, we will discuss
    taking the robot on a test drive.
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking for a battery with a higher capacity for your robot, we recommend
    considering LiPo batteries. This also means that you need motors with a better
    rating and a chassis that can withstand the battery weight.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the motors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will verify that the motor driver is detected by the Raspberry
    Pi Zero and test the motor function. In the test, we will verify that the motors
    are rotating in the same direction.
  prefs: []
  type: TYPE_NORMAL
- en: Motor driver detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will verify that the motor driver is detected by the Raspberry
    Pi Zero. The Raspberry Pi Zero *talks* to the motor driver via the I²C interface
    (Refer to [Chapter 4](56d43053-0d4d-47a4-bf28-c36fc00a7da2.xhtml), *Communication
    Interfaces*, if you are not familiar with the I²C interface). Hence, we need to
    enable the I²C interface of the Raspberry Pi Zero. There are two ways to enable
    the I²C interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Method 1: From the Desktop**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Like enabling `ssh` by launching the Raspberry Pi Configuration from your Raspberry
    Pi Zero''s desktop, you can enable the I²C interface from the interface tab of
    the configuration (shown in the snapshot here):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_029.png)'
  prefs: []
  type: TYPE_IMG
- en: Enable I²C interface
  prefs: []
  type: TYPE_NORMAL
- en: '**Method 2: From the command line**'
  prefs: []
  type: TYPE_NORMAL
- en: We strongly recommend using this method as a practice toward getting comfortable
    with the command-line interface on the Raspberry Pi and remote login via `ssh`.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Raspberry Pi Zero via `ssh` (Refer to [Chapter 11](83036e86-f65c-46ed-996d-4f1aeeab5022.xhtml),
    *Tips and Tricks*, for a tutorial on the `ssh` access).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Upon login, launch `raspi-config` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It should launch the config options menu (shown in the screenshot here):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_030.png)'
  prefs: []
  type: TYPE_IMG
- en: The raspi-config menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Option 7: Advanced Options (using the keyboard) and select A7: I2C'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_031.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the I²C interface
  prefs: []
  type: TYPE_NORMAL
- en: Select Yes to enable the I²C interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_032.png)'
  prefs: []
  type: TYPE_IMG
- en: Enable the I²C interface
  prefs: []
  type: TYPE_NORMAL
- en: Now that the I²C interface is enabled, let's get started with detecting the
    motor driver.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detecting motor driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The motor driver is connected to I²C port-1 (the I²C port-0 serves a different
    purpose. Refer to [Chapter 11](83036e86-f65c-46ed-996d-4f1aeeab5022.xhtml), *Tips
    and Tricks*, for more information). We will make use of the `i2cdetect` command
    to scan for devices connected via the I²C interface. On your command-line interface,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It provides an output that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: I²C chips come with a 7-bit address that is used to identify the chip and establish
    communication. In this case, the I²C interface address is `0x60` (refer to the
    motor driver documentation at [https://learn.adafruit.com/adafruit-dc-and-stepper-motor-hat-for-raspberry-pi](https://learn.adafruit.com/adafruit-dc-and-stepper-motor-hat-for-raspberry-pi)).
    As shown in the output earlier, the Raspberry Pi Zero detects the motor driver.
    It is time to test if we can control the motors.
  prefs: []
  type: TYPE_NORMAL
- en: Motor test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to test the motors; that is, determine if we can
    drive the motors using the motor driver. In this test, we determined if the Raspberry
    Pi's supply was sufficient to drive the motors (or whether an external battery
    pack) was necessary.
  prefs: []
  type: TYPE_NORMAL
- en: In order to get started, we need to install the motor driver libraries (distributed
    by Adafruit under MIT license) and its dependency packages.
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The dependencies for the motor driver libraries may be installed from the command-line
    terminal of your Raspberry Pi Zero as follows (you may skip this step if you installed
    these tools while working on [Chapter 4](56d43053-0d4d-47a4-bf28-c36fc00a7da2.xhtml),
    *Communication Interfaces*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is cloning the motor driver library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This library is a fork of the *Adafruit Motor HAT library*. We fixed some issues
    to make the library installation compatible with Python 3.x.
  prefs: []
  type: TYPE_NORMAL
- en: 'The library can be installed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the libraries are installed, let''s write a program that rotates the
    motors continuously:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As always, the first step is importing the `MotorHAT` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to create an instance of the `MotorHAT` class and establish
    the interface with the motor driver (as discussed in the previous section, the
    motor driver's 7-bit address is `0x60`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The motors of the robot are connected to channels 1 and 2\. Hence, we need
    to initialize two instances of the `Adafruit_DCMotor` class that represent the
    left and right motors of the robot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is setting the motor speed and motor direction. The motor speed
    can be set using an integer between `0` and `255` (which corresponds to 0% and
    100% of the motor''s rated rpm). Let''s set the motor speed at 100%:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s rotate the motors in the forward direction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s rotate both the motors in the forward direction for 5 seconds and then
    reduce the speed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s rotate the motors in the reverse direction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s turn off the motors once we are done rotating the motors in the reverse
    direction for 5 seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Putting it altogether:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code sample is available for download along with this chapter
    as `motor_test.py`. Recharge the USB battery pack before you test the motors.
    We picked the test duration long enough to verify the motor direction, performance,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: If your Raspberry Pi Zero seems to be resetting itself while running or the
    motors aren't running at the rated speed, it is an indicator that the motors are
    not being driven with the sufficient current. Switch over to a power source that
    meets the requirement (this may involve switching from the GPIO's power supply
    to the battery pack or switching to a battery pack of higher capacity).
  prefs: []
  type: TYPE_NORMAL
- en: Now that the motors are tested, let us set up a camera for the robot.
  prefs: []
  type: TYPE_NORMAL
- en: Camera setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need a Raspberry Pi Zero 1.3 or higher to set up the camera. We discussed
    identifying your Raspberry Pi Zero's board version at the beginning of this chapter.
    You may also skip this section if you are familiar with setting up the camera
    from [Chapter 8](1b22cd82-cc62-452e-a69b-a8742a02ecd4.xhtml), *Awesome Things
    You Could Develop Using Python*.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will set up the camera for the robot. The Raspberry Pi Zero
    (v1.3 onward) comes with a camera adapter. This enables adding a camera module
    to the robot (designed and manufactured by the Raspberry Pi foundation). The camera
    module was designed to suit different models of the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi Zero's camera interface needs an adapter that is different
    than the ones meant for other models. The sources to purchase the camera and the
    adapter were shared with the bill of materials of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that your Raspberry Pi Zero is powered down and identify the shorter
    side of the camera adapter. In the image shown here, the shorter side is to the
    right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_033.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Pi Zero Camera Adapter-Image source: adafruit.com'
  prefs: []
  type: TYPE_NORMAL
- en: Carefully, slide out the camera interface of the Raspberry Pi zero (as shown
    in the picture here). Pay attention to avoid breaking your camera interface tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_034.png)'
  prefs: []
  type: TYPE_IMG
- en: Slide the tabs of the camera interface carefully
  prefs: []
  type: TYPE_NORMAL
- en: Gently slide in the camera module. Latch the camera adapter cable and gently
    tug on it to make sure that the adapter cable doesn't slide out of its position.
    The camera adapter should be seated, as shown in the picture here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_035.png)'
  prefs: []
  type: TYPE_IMG
- en: Camera adapter placement
  prefs: []
  type: TYPE_NORMAL
- en: Repeat the exercise for the other end of the camera adapter to interface it
    with the camera module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_036.png)'
  prefs: []
  type: TYPE_IMG
- en: Insert adapter on the other side
  prefs: []
  type: TYPE_NORMAL
- en: The camera adapter cable can be unwieldy while trying to install the camera
    on the robot. We recommend installing a mount (source shared in the bill of materials).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_037.png)'
  prefs: []
  type: TYPE_IMG
- en: Raspberry Pi camera module mount
  prefs: []
  type: TYPE_NORMAL
- en: Using the double-sided tape, install the camera to the front of your robot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_038.png)'
  prefs: []
  type: TYPE_IMG
- en: Camera mounted in front of the robot
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Raspberry Pi Zero's desktop via `ssh` to enable and test the
    camera interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enabling the camera interface is similar to enabling the I²C interface discussed
    earlier in this chapter. Launch Raspberry Pi configuration using the `raspi-config`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Select Option P1: Enable Camera (found under Interfacing Options of the main
    configuration menu) and enable the camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_039.png)'
  prefs: []
  type: TYPE_IMG
- en: The screenshot of the Raspberry Configuration screen
  prefs: []
  type: TYPE_NORMAL
- en: Reboot your Raspberry Pi Zero!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verification of camera function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once your reboot is complete, run the following command from the Command Prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Since your robot is completely assembled, the HDMI port of your Raspberry Pi
    Zero is probably inaccessible. You should retrieve the file using the `scp` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On a Windows Machine, you can copy files from your Raspberry Pi Zero using a
    tool such as WinSCP. On a Mac/Linux desktop, you can use the `scp` command. Refer
    to [Chapter 11](83036e86-f65c-46ed-996d-4f1aeeab5022.xhtml), *Tips and Tricks*,
    for a detailed tutorial on remote login and copying of files from your Raspberry
    Pi Zero.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Examine the picture taken using the Raspberry Pi camera module to verify its
    function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_040.png)'
  prefs: []
  type: TYPE_IMG
- en: Picture of a coffee cup taken using the Raspberry Pi camera module
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have verified the function of the robot's components, we are going
    to bring everything together in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The web interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our objective behind building this robot as one of our final projects is to
    demonstrate using the topics discussed in this book in application development.
    To that end, we are going to make use of object-oriented programming and web frameworks
    to build a web interface to control the robot.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](2316ddf6-c2d7-4810-a7ab-3600a3e2549d.xhtml), *Requests and Web
    Frameworks*, we discussed the `flask` web framework. We are going to make use
    of `flask` to stream a live view of the camera module to a browser. We are also
    going to add buttons to the web interface that enables steering the robot. Let's
    get started!
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [Chapter 7](2316ddf6-c2d7-4810-a7ab-3600a3e2549d.xhtml), *Requests
    and Web Frameworks*, for installation instructions and a basic tutorial on the
    `flask` framework.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started by implementing a simple web interface where we add four buttons
    to control the robot in the forward, reverse, left, and right directions. Let's
    assume that the robot moves at maximum speed in all directions.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to make use of object-oriented programming to implement the motor
    control. We are going to demonstrate the use of object-oriented programming to
    simplify things (this concept of simplification is known as **abstraction**).
    Let's implement a `Robot` class that implements the motor control. This `Robot`
    class would initialize the motor driver and handle all control functions of the
    robot.
  prefs: []
  type: TYPE_NORMAL
- en: Open a file named `robot.py` to implement the `Robot` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to control the movement of the robot, the robot needs the motor driver
    channels that are being used (to drive the motors) as inputs during initialization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hence, the `__init__()` function of the `Robot` class would be something as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, the `__init__()` function requires the channels
    being used to connect the left and right motors to the motor driver board as arguments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When an instance of the `Robot` class is created, the motor driver (`Adafruit_MotorHAT`)
    is initialized and the motor channels are initialized.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s write methods to move the robot in the forward and reverse directions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also write methods to move the robot in left- and right-hand side directions.
    In order to turn the robot left, we need to turn the left motor off and keep the
    right motor on and vice versa. This creates a turning moment and turns the robot
    in that direction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, we have implemented a `Robot` class that drives the robot in the four
    directions. Let''s implement a simple test so that we can test the `Robot` class
    before we use it in our main program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code sample is available for download along with this chapter
    as `robot.py`. Try to run the program with the motor driver. It should run the
    motor in forward and reverse directions for 5 seconds. Now that we have implemented
    a stand-alone module for the robot's control, let's move on to the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: Camera setup for the web interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will encounter some issues even after following the instructions to the
    tee. We have included references that we used to fix the problem at the end of
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will set up the camera to stream to a browser. The first
    step is installing the `motion` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the package is installed, the following configuration changes need to
    be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the following parameters in `/etc/motion/motion.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the following parameter in `/etc/default/motion`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit `/etc/init.d/motion` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Reboot your Raspberry Pi Zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step assumes that you have installed the flask framework and tried
    out the basic example from [Chapter 7](2316ddf6-c2d7-4810-a7ab-3600a3e2549d.xhtml), *Requests
    and Web Frameworks*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder named `templates` within the folder where your `flask` framework
    and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Robot` class files are located) and create a file named `index.html` in the
    folder with the following contents:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, include the IP address of your Raspberry Pi Zero
    and save it as `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `web_interface.py` and serve `index.html` saved to the
    templates folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the flask server using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Open a browser on your laptop and go to the IP address of your Raspberry Pi
    Zero (port `5000`) to see a live stream of your Raspberry Pi cam module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_09_041.png)'
  prefs: []
  type: TYPE_IMG
- en: The snapshot of the live webcam stream (Raspberry Pi Cam module)
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next step to add buttons to the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: Buttons for robot control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will add implement buttons to the web interface to drive
    the robot.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is adding four buttons to `index.html`. We will be making use
    of HTML Table to add four buttons (Code snippet shortened for brevity and refer
    to [http://www.w3schools.com/html/html_tables.asp](http://www.w3schools.com/html/html_tables.asp)
    for more information on HTML tables):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In `web_interface.py`, we need to implement a method that accepts `POST` requests
    from the buttons. For example, the method to accept requests from `/forward` can
    be implemented as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Putting it altogether, `web_interface.py` looks something as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code sample is available for download along with this chapter
    as `web_interface.py` (along with `index.html`). Add the following line to `/etc/rc.local`(before
    `exit 0`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Reboot your Raspberry Pi Zero, and you should see a live feed of the robot's
    camera. You should also be able to control the robot from the browser!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_09_042.png)'
  prefs: []
  type: TYPE_IMG
- en: Control your robot a browser!
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some of the problems we encountered while building the robot:'
  prefs: []
  type: TYPE_NORMAL
- en: We broke our Raspberry Pi Zero's camera interface tab while assembling the camera
    module. We had to replace the Raspberry Pi Zero.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We encountered some ghost issues with our motor drive circuitry. We were not
    able to detect the motor driver on certain occasions. We had to replace the power
    supply for the motor driver. We will keep this book's website updated when we
    find the root cause of this issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We encountered a lot of issues getting the web stream setup for the browser.
    We had to tweak a lot of settings to get it working. We found some articles to
    fix the issue. We have shared them in the references section of this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project enhancements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consider making enhancements to the web interface such that you could alter
    the speed of your robot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are planning to build a robot that operates in outdoor conditions, you
    potentially add a GPS sensor. Most GPS sensors stream data via the UART interface.
    We recommend reading [Chapter 4](56d43053-0d4d-47a4-bf28-c36fc00a7da2.xhtml)*,
    Communication Interfaces* for examples.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The distance of obstacles can be measured using this sensor: [https://www.adafruit.com/products/3317](https://www.adafruit.com/products/3317).
    This can be helpful in telemetry applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* In this book, we used a camera to drive the robot. It is possible to take
    pictures and understand the objects in a scene using this image understanding
    tool: [https://cloud.google.com/vision/](https://cloud.google.com/vision/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a robot that consists of a pair of motors driven by
    a Raspberry Pi using a motor driver. The robot is also equipped with a camera
    module to aid steering the robot. It consists of two battery packs to power the
    Raspberry Pi Zero and motors, respectively. We will also upload a video of the
    robot's operation to this book's website.
  prefs: []
  type: TYPE_NORMAL
- en: '**Learning resources**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Differential steering mechanism*: https://www.robotix.in/tutorial/mechanical/drivemechtut/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Video lecture on differential steering mechanism*: https://www.coursera.org/learn/mobile-robot/lecture/GnbnD/differential-drive-robots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Make Magazine: Building your own chassis*: https://makezine.com/projects/designing-a-robot-chassis/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Society of robots: Guide to building your own chassis*: http://www.societyofrobots.com/mechanics_chassisconstruction.shtml'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adafruit''s motor driver documentation*: https://learn.adafruit.com/adafruit-dc-and-stepper-motor-hat-for-raspberry-pi'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adafruit motor selection guide*: https://learn.adafruit.com/adafruit-motor-selection-guide'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adafruit''s guide on building a simple Raspberry Pi based robot*:https://learn.adafruit.com/simple-raspberry-pi-robot/overview'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Flask framework and form submission*:http://opentechschool.github.io/python-flask/core/form-submission.html'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Raspberry Pi Camera Setup for web streaming*: http://jamespoole.me/2016/04/29/web-controlled-robot-with-video-stream/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
