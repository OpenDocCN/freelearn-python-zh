- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social Media Posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social media already has authentication added on the frontend side. We can now
    authenticate the user through registration or login, fetch the user data, and
    show it. Now that we can store JWT tokens, we can make requests to the API for
    any protected resources, and we will start with the `post` resource.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll focus on **CRUD** operations on posts. We’ll implement
    listing, creating, updating, and deleting post features. You will learn how to
    create and manage a Modal in React, how to handle a form from validation to submission,
    and how to design and integrate components into a React page.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Listing posts in a feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a post using a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing and deleting a post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liking a post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure to have VS Code and an updated browser installed and configured on
    your machine. You can find the code of this chapter at [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap8](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap8).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The REST API is ready to accept requests and list the API. For the next steps,
    ensure that the Django server is running on the machine at port `localhost:8000`.
    The first step is implementing a post feed with a ready design and UI. Before
    coding the components for reading, creating, updating, and deleting a component,
    we need to analyze the UI and also make sure we have the right configurations
    and components to ease the development with React. We will mostly build the navigation
    bar and the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the feed UI of the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Feed UI wireframe](img/Figure_8.01_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Feed UI wireframe
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following figure, we have another illustration representing the UI and
    the page’s structure. We are using flex columns, and we’ll use Bootstrap flex
    components to design the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Wireframe](img/Figure_8.02_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Wireframe
  prefs: []
  type: TYPE_NORMAL
- en: The navigation bar will be available on other pages of the React application,
    and by making the navigation bar a component, it’ll be reused. We can make the
    integration of the navigation bar easier by having a `Layout` component that will
    be used when building the pages. Let’s start by adding the navigation bar component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the NavBar component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `NavBar` component, or the navigation bar component, should help to quickly
    navigate the UI. Here’s an screenshot of the `NavBar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Navbar](img/Figure_8.03_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Navbar
  prefs: []
  type: TYPE_NORMAL
- en: 'The `NavBar` will have three links:'
  prefs: []
  type: TYPE_NORMAL
- en: A link to redirect to the feed page (**1**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A link to redirect to the profile page (**2**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A link to log out (**3**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here’s a simple wireframe to better illustrate where the links will go.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Wireframe of the navbar](img/Figure_8.04_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Wireframe of the navbar
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add the component. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `src/components/` directory, add a new file called `Navbar.jsx`.
    This file will contain the code for the `NavBar` component. Bootstrap already
    provides a `NavBar` component we can use. Let’s start with the component definition
    and the necessary imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/Navbar.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'With the already written function, we can add the `NavBar` component and style
    it. `react-bootstrap` provides components that we can use to make the coding of
    our components faster. The props that the components require make the customization
    of these components easier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/Navbar.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s add the function that handles the logout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/Navbar.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: I will use a website that generates random avatars for the avatar. In the next
    chapter, we’ll do a little exercise to add an upload profile picture feature,
    but the image generator will do the work for the moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src` directory, add a new file called `utils.js`. This file will contain
    functions that we’ll reuse in the React application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/utils.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `pravatar` service supports parameters in the URL and has over 60 images.
    We are using the Math library to generate a random number representing the image’s
    ID. We can now write the `Layout` component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Layout component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good React project has visual consistency but should also come with less repetition
    of code. For example, the navigation bar on this React project will be present
    on the home page but also on the profile page. When developing in HTML and CSS
    directly, we would have repeated the same piece of code for the navigation bar,
    but we can avoid the repetition using React by creating a `Layout` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src/components` directory, add a file called `Layout.jsx`. This file
    will contain the code for the `Layout` component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/Layout.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a new syntax here: `children`. In React, `children` is used for displaying
    whatever you include between the opening and closing tags when invoking a component.
    Here’s a simple example with an image component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The component can then be used, and we can add content or other components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Whenever the `Picture` component is invoked, `props.children` will also be displayed,
    which is just a reference to the component’s opening and closing tags. In our
    context, `props.children` will contain mostly the content of the pages of the
    React application.
  prefs: []
  type: TYPE_NORMAL
- en: For example, on the home page, we have posts and profiles listed; these elements
    will be children of the `Layout` component. Without further ado, let’s use the
    `Layout` component.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Layout component on the home page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inside `Home.jsx`, we’ll rewrite the code to use the `Layout` component. Here’s
    the new code:'
  prefs: []
  type: TYPE_NORMAL
- en: src/pages/Home.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Great. Let’s start by adding the input to create a new post, as shown in *Figure
    8**.2*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a post
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create and add posts, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In `src/components`, add a new directory called `posts`. This directory will
    contain all components used for the post feature. We’ll have components to create
    a post, display a post, and update a post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the newly created directory, add a file called `CreatePost.jsx`. This
    file will contain the code for the logic and the UI to make a post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What we have here is a UI component called `Modal`. `react-bootstrap` provides
    a modal-ready element that we can easily customize for our needs. Let’s start
    by adding the needed imports and defining the component function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/post/CreatePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The input for the post creation will be within the `Modal` component. As we
    did earlier, we will also add methods and state management for the form. But first,
    let’s write the modal and the clickable input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/post/CreatePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We are first adding the input that will trigger the Modal to be displayed.
    A click on the modal will set the `show` state to `True`, the state that is used
    for opening the modal. Let’s add the code for the modal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/post/CreatePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The UI for the modal is created. We need now to add the `handleSubmit` function
    and the other logic for the form handling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/post/CreatePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.5 – Create Post component](img/Figure_8.05_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Create Post component
  prefs: []
  type: TYPE_NORMAL
- en: 'We are nearly done, but we need an essential feature for every action, such
    as form handling. We need to send feedback to the user to tell them whether their
    request has passed. In our context, when a user creates a post, we’ll show a success
    toast or an error toast:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – A successful toast](img/Figure_8.06_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – A successful toast
  prefs: []
  type: TYPE_NORMAL
- en: The toast will be reused for post deletion and also updating. It will also be
    used for comment creation, modification, and deletion, as well as the profile
    modification that we will add later. We will add the `Toast` component in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Toast component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s quickly create a component called `Toaster` that we will use show toast
    in the React application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/components`, create a new file called `Toaster.jsx`. This file will
    contain the code for the `Toaster` component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/Toaster.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Toaster` component takes some props:'
  prefs: []
  type: TYPE_NORMAL
- en: '`showToast`: The Boolean that is used to show the toast or not. Ideally, depending
    on the output we receive from a request on the server, we’ll set the state to
    `true`, which will show the toast.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: This represents the title of the toast.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message`: This conveys the message we’ll be showing in the toast.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onClose`: The function that handles the closing of the toast. This function
    is essential; otherwise, the toast will never disappear.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: This represents the type of toast to show. In our context, we’ll either
    use `success` or `danger`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s import this component in `CreatePost.jsx` and use it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding toaster to post creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `CreatePost.jsx` file, we will add new states that we will pass as props
    to the `Toaster` component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/post/CreatePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can import the `Toaster` component and pass the newly added states as props:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/post/CreatePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: And we are done writing the `CreatePost` component. For the next step, we need
    to integrate it into the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the CreatePost component to the home page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `CreatePost` component is ready now, and we can use it. First, import it
    into the `Home.jsx` file and modify the UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The home page will have two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The first part will contain the list of posts (**1** in *Figure 8**.7*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second part will include a list of five profiles (**2** in *Figure 8**.7*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Structure of the home page](img/Figure_8.07_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Structure of the home page
  prefs: []
  type: TYPE_NORMAL
- en: 'We can achieve the result quickly by using rows and columns components provided
    by `react-bootstrap`. We won’t focus on the second part (listing the profiles)
    for the moment. Let’s ensure we have all **CRUD** operations for the post feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `Home.jsx` file, add the following content. We’ll start by importing
    and adding the rows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/pages/Home.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Make sure to save the changes, start the server, and go to the home
    page. You’ll have something similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Create Post UI](img/Figure_8.08_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Create Post UI
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the input, and a modal will show up. Type anything you want in the
    input and submit it. The modal will close, and you’ll have a toast appearing at
    the top center of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Toast after successful post creation](img/Figure_8.09_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Toast after successful post creation
  prefs: []
  type: TYPE_NORMAL
- en: Great! We can now create posts using our React application. To make it possible,
    we have created a `Modal` component and a form with React Bootstrap to handle
    data validation and submission. And because feedback is an important aspect of
    user experience, we have added a toaster with React Bootstrap and integrated it
    with the `useContext` Hook to notify the user of the result of the requests.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to list all the posts and add actions such as deletion and
    modification.
  prefs: []
  type: TYPE_NORMAL
- en: Listing posts on the home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that users can create posts, we need to list the posts on the home page
    but also allow the user to access them. This will require the creation of a component
    to display information about a post. As shown in *Figure 8**.1*, under the **Write
    a post** input, we have a list of posts. The home page structure is already added,
    so we need to add a component that will handle the logic behind showing information
    about a post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the flow to list the posts on the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: We use the `swr` library to fetch a list of posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We loop through the list of posts and then pass a post as props to a component
    called `Post`, which will show data about a post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before starting to fetch data, let’s create the `Post` component.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Post component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a `Post` component, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `src/components/post/` directory, create a new file called `Post.jsx`.
    This file will contain the logic to show post data and logic such as like or remove
    like, deletion, and modification. Here’s a wireframe of the `Post` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Post component](img/Figure_8.10_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Post component
  prefs: []
  type: TYPE_NORMAL
- en: 'To make things faster, we will work with the `Card` component provided by `react-bootstrap`.
    The `Card` component comes with a structure containing a title, body, and footer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/post/Post.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Post` component accepts two props:'
  prefs: []
  type: TYPE_NORMAL
- en: The `post` object containing data about a post.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `refresh` function. This function will come from the SWR `posts` object,
    and SWR returns an object with a `mutate` method that can be used to trigger the
    fetching of data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We also profited from adding the `handleLikeClick` function. Two actions can
    be passed to the function: either `like` or `remove_like`. If the request succeeds,
    we can refresh the posts. Great! Let’s start by adding the `Card` body. It’ll
    contain the avatar of the author of the post, the name, and the time elapsed since
    the creation of the post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/post/Post.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Go ahead and add the body of the post and the likes count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/post/Post.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now move to the `Card` footer containing the like and comment UI. Let’s
    start by adding the **Like** icon followed by text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/post/Post.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now go ahead and add the **Comment** icon followed by the text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/post/Post.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `Post` component is entirely written; we can use it on the home page now.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Post component to the home page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s now add our `Post` component to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Home.jsx` file, import the `Post` component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/pages/Home.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now use the components in the code by first fetching posts from the
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: src/pages/Home.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `useSWR` Hook can accept some parameters, such as `refreshInterval`. Here,
    the returned data is refreshed every 10 seconds. We can now use these objects
    in the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: src/pages/Home.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! After adding the `Post` component to the home page, you should have
    a similar result to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – List of posts](img/Figure_8.11_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – List of posts
  prefs: []
  type: TYPE_NORMAL
- en: 'You can click on the `Post` component has a **More** dropdown in the top-right
    corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Adding the more dropdown](img/Figure_8.12_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Adding the more dropdown
  prefs: []
  type: TYPE_NORMAL
- en: '`react-bootstrap` provides a `Dropdown` component we can use to achieve the
    same result. In the `Post.jsx` file, import the `Dropdown` component from `react-bootstrap`.
    As we will add the logic for post deletion, let’s also import the `Toaster` component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/post/Post.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We then have to write the component we will pass to the `Dropdown` component
    as the title:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/post/Post.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now add the `Dropdown` component to the UI. We need to make it conditional
    so that only the author of the post can access these options. We will just retrieve
    the user from `localStorage` and compare `user.id` to `author.id`:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/post/Post.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s add the component UI and the `Toaster` component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/post/Post.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Dropdown` component is also added to the toaster. Each time a post is
    deleted, a red toaster will pop up at the top center of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Deleting a post](img/Figure_8.13_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Deleting a post
  prefs: []
  type: TYPE_NORMAL
- en: The user can now delete their own post and the functionality is accessible directly
    from the `Post` component. We have explored how to use the `UseContex` Hook again
    and also how to create a dropdown using `react-bootstrap`.
  prefs: []
  type: TYPE_NORMAL
- en: The **CRUD** operations on the post feature are nearly done and only the update
    feature remains. It’s easy, and you will implement it as a small exercise, but
    I’ll add the necessary code and instructions to follow.
  prefs: []
  type: TYPE_NORMAL
- en: Updating a post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, the implementation of this feature is a simple exercise.
    Here’s the flow the user will typically follow when modifying a post:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **More** dropdown menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Modify** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A modal is shown with the body of the post, and the user can modify it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it’s done, the user saves, and the modal is closed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A toast will pop up with the content **Post** **updated** **🚀**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The feature is similar to `CreatePost.jsx`; the difference is that the `UpdatePost`
    component will receive a `post` object as props. Here’s the skeleton of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/post/UpdatePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The component is called in the `Post.jsx` file and used like this:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/post/Post.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Good luck with the exercise. You can find the solution at [https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/posts/UpdatePost.jsx](https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/posts/UpdatePost.jsx).
  prefs: []
  type: TYPE_NORMAL
- en: Minor refactoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firstly, there is no refresh made when a new post is created. As we did for
    the `UpdatePost.jsx` component, we can also pass some props to the `CreatePost`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/pages/Home.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: And, we can call the `refresh` method when a post is successfully created:.
  prefs: []
  type: TYPE_NORMAL
- en: src/components/posts/CreatePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now, every time a user adds a post, he will see the newly created post on the
    Home page without the need of reloading the page.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, the `Toaster` component is created but we need to think about how
    to call the component in the project. Let’s not forget that this component is
    created to return feedback to the user about a successful or failed request, thus
    the component should be reusable in the whole project, which is what we've actually
    done, right?
  prefs: []
  type: TYPE_NORMAL
- en: Well, no, and this is not desirable as it will violate the `Toaster` component
    higher in the component hierarchy and then be able to call or show the toaster
    from any child component?
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Parent and child components](img/Figure_8.14_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Parent and child components
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding figure, we will be able to trigger the display of a toaster
    in the project directly in a parent component from a child component (`CreatePost`).
    React provides an interesting way to manage state across parents and child components
    and this is called context. `Layout.jsx` file, create a new context using the
    `createContext` method:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/Layout.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in the `Layout` component scope, let’s define the state containing the
    data that the toaster will use to display information. We will also wrap the component
    JSX content inside the `Context` component and add a method to modify the state
    from any child components of the `Layout` component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/Layout.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have introduced a new function Hook called `useMemo`,
    which helps to memorize the context value (caching the value of the context) and
    avoid the creation of new objects every time there is a re-rendering of the `Layout`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then be able to access the `toaster` state and call the `setToaster`
    function from any child component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ve gone deeper into React programming by creating the components
    needed for the CRUD operations used in the post feature. We have covered concepts
    such as props passing, parent-children component creation, UI component customization,
    and modal creation. That led to the partial completion of the home page of the
    `Postagram` project. We also learned more about the `useState` and `useContext`
    Hooks and how they affect state in React. We have also learned how to create a
    `Dropdown` component, how to create a custom toaster, and the importance of layout
    in a React project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll focus on the CRUD operations of the comment feature.
    This will lead us to add a **Profile** page and a **Post** page to display comments.
    We’ll also make simple and quick assessments to add Like features to the comments
    too.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a modal?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a prop?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a children element in React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a wireframe?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the map method used in JSX?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the usage of the `mutate` method on SWR objects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
