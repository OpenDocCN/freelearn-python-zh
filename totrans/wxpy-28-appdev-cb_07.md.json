["```py\nclass BoxSizerFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        super(BoxSizerFrame, self).__init__(*args, **kwargs)\n\n        # Attributes\n        self.panel = BoxSizerPanel(self)\n\n        # Layout\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.panel, 1, wx.EXPAND)\n        self.SetSizer(sizer)\n        self.SetInitialSize()\n\n```", "```py\nclass BoxSizerPanel(wx.Panel):\n    def __init__(self, parent, *args, **kwargs):\n        super(BoxSizerPanel, self).__init__(*args, **kwargs)\n\n        # Attributes\n        self._field1 = wx.TextCtrl(self)\n        self._field2 = wx.TextCtrl(self)\n\n        # Layout\n        self._DoLayout()\n\n```", "```py\n    def _DoLayout(self):\n        \"\"\"Layout the controls\"\"\"\n        vsizer = wx.BoxSizer(wx.VERTICAL)\n        field1_sz = wx.BoxSizer(wx.HORIZONTAL)\n        field2_sz = wx.BoxSizer(wx.HORIZONTAL)\n\n        # Make the labels\n        field1_lbl = wx.StaticText(self, label=\"Field 1:\")\n        field2_lbl = wx.StaticText(self, label=\"Field 2:\")\n\n        # Make the first row by adding the label and field\n        # to the first horizontal sizer\n        field1_sz.AddSpacer(50)\n        field1_sz.Add(field1_lbl)\n        field1_sz.AddSpacer(5) # put 5px of space between\n        field1_sz.Add(self._field1)\n        field1_sz.AddSpacer(50)\n\n        # Do the same for the second row\n        field2_sz.AddSpacer(50)\n        field2_sz.Add(field2_lbl)\n        field2_sz.AddSpacer(5)\n        field2_sz.Add(self._field2)\n        field2_sz.AddSpacer(50)\n\n        # Now finish the layout by adding the two sizers\n        # to the main vertical sizer.\n        vsizer.AddSpacer(50)\n        vsizer.Add(field1_sz)\n        vsizer.AddSpacer(15)\n        vsizer.Add(field2_sz)\n        vsizer.AddSpacer(50)\n\n        # Finally assign the main outer sizer to the panel\n        self.SetSizer(vsizer)\n\n```", "```py\nsomeBoxSizer.Add((20,5))\n\n```", "```py\nsomeBoxSizer.AddMany([(staticText,),\n                      ((10, 10),),\n                      (txtCtrl, 0, wx.EXPAND)]))\n\n```", "```py\n    def _DoLayout(self):\n        \"\"\"Layout the controls\"\"\"\n        vsizer = wx.BoxSizer(wx.VERTICAL)\n        field1_sz = wx.BoxSizer(wx.HORIZONTAL)\n        field2_sz = wx.BoxSizer(wx.HORIZONTAL)\n\n        # Make the labels\n        field1_lbl = wx.StaticText(self, label=\"Field 1:\")\n        field2_lbl = wx.StaticText(self, label=\"Field 2:\")\n\n        # 1) HORIZONTAL BOXSIZERS\n        field1_sz.Add(field1_lbl, 0,\n                      wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 5)\n        field1_sz.Add(self._field1, 1, wx.EXPAND)\n\n        field2_sz.Add(field2_lbl, 0,\n                      wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 5)\n        field2_sz.Add(self._field2, 1, wx.EXPAND)\n\n        # 2) VERTICAL BOXSIZER\n        vsizer.AddStretchSpacer()\n        BOTH_SIDES = wx.EXPAND|wx.LEFT|wx.RIGHT\n        vsizer.Add(field1_sz, 0, BOTH_SIDES|wx.TOP, 50)\n        vsizer.AddSpacer(15)\n        vsizer.Add(field2_sz, 0, BOTH_SIDES|wx.BOTTOM, 50)\n        vsizer.AddStretchSpacer()\n\n        # Finally assign the main outer sizer to the panel\n        self.SetSizer(vsizer)\n\n```", "```py\nclass DetailsDialog(wx.Dialog):\n    def __init__(self, parent, type, details, title=\"\"):\n        \"\"\"Create the dialog\n        @param type: event type string\n        @param details: long details string\n        \"\"\"\n        super(DetailsDialog, self).__init__(parent, title=title)\n\n        # Attributes\n        self.type = wx.TextCtrl(self, value=type,\n                                style=wx.TE_READONLY)\n        self.details = wx.TextCtrl(self, value=details,\n                                   style=wx.TE_READONLY|\n                                         wx.TE_MULTILINE)\n\n        # Layout\n        self.__DoLayout()\n        self.SetInitialSize()\n\n    def __DoLayout(self):\n        sizer = wx.GridBagSizer(vgap=8, hgap=8)\n\n        type_lbl = wx.StaticText(self, label=\"Type:\")\n        detail_lbl = wx.StaticText(self, label=\"Details:\")\n\n        # Add the event type fields\n        sizer.Add(type_lbl, (1, 1))\n        sizer.Add(self.type, (1, 2), (1, 15), wx.EXPAND)\n\n        # Add the details field\n        sizer.Add(detail_lbl, (2, 1))\n        sizer.Add(self.details, (2, 2), (5, 15), wx.EXPAND)\n\n        # Add a spacer to pad out the right side\n        sizer.Add((5, 5), (2, 17))\n        # And another to the pad out the bottom\n        sizer.Add((5, 5), (7, 0))\n\n        self.SetSizer(sizer)\n\n```", "```py\nclass CustomMessageBox(wx.Dialog):\n    def __init__(self, parent, message, title=\"\",\n                 bmp=wx.NullBitmap, style=wx.OK):\n        super(CustomMessageBox, self).__init__(parent, title=title)\n\n        # Attributes\n        self._flags = style\n        self._bitmap = wx.StaticBitmap(self, bitmap=bmp)\n        self._msg = wx.StaticText(self, label=message)\n\n        # Layout\n        self.__DoLayout()\n        self.SetInitialSize()\n        self.CenterOnParent()\n\n    def __DoLayout(self):\n        vsizer = wx.BoxSizer(wx.VERTICAL)\n        hsizer = wx.BoxSizer(wx.HORIZONTAL)\n\n        # Layout the bitmap and caption\n        hsizer.AddSpacer(10)\n        hsizer.Add(self._bitmap, 0, wx.ALIGN_CENTER_VERTICAL)\n        hsizer.AddSpacer(8)\n        hsizer.Add(self._msg, 0, wx.ALIGN_CENTER_VERTICAL)\n        hsizer.AddSpacer(10)\n\n        # Create the buttons specified by the style flags\n        # and the StdDialogButtonSizer to manage them\n        btnsizer = self.CreateButtonSizer(self._flags)\n\n        # Finish the layout\n        vsizer.AddSpacer(10)\n        vsizer.Add(hsizer, 0, wx.ALIGN_CENTER_HORIZONTAL)\n        vsizer.AddSpacer(8)\n        vsizer.Add(btnsizer, 0, wx.EXPAND|wx.ALL, 5)\n\n        self.SetSizer(vsizer)\n\n```", "```py\n<?xml version=\"1.0\" ?>\n<resource>\n  <object class=\"wxDialog\" name=\"xrctestdlg\">\n    <object class=\"wxBoxSizer\">\n      <orient>wxVERTICAL</orient>\n      <object class=\"spacer\">\n        <option>1</option>\n        <flag>wxEXPAND</flag>\n      </object>\n      <object class=\"sizeritem\">\n        <object class=\"wxCheckBox\">\n          <label>CheckBox Label</label>\n        </object>\n        <flag>wxALL|wxALIGN_CENTRE_HORIZONTAL</flag>\n        <border>5</border>\n      </object>\n      <object class=\"spacer\">\n        <option>1</option>\n        <flag>wxEXPAND</flag>\n      </object>\n      <object class=\"sizeritem\">\n        <object class=\"wxBoxSizer\">\n          <object class=\"sizeritem\">\n            <object class=\"wxButton\" name=\"wxID_OK\">\n              <label>Ok</label>\n            </object>\n            <flag>wxALL</flag>\n            <border>5</border>\n          </object>\n          <object class=\"sizeritem\">\n            <object class=\"wxButton\" name=\"wxID_CANCEL\">\n              <label>Cancel</label>\n            </object>\n            <flag>wxALL</flag>\n            <border>5</border>\n          </object>\n          <orient>wxHORIZONTAL</orient>\n        </object>\n        <flag>wxALIGN_BOTTOM|wxALIGN_CENTRE_HORIZONTAL</flag>\n        <border>5</border>\n      </object>\n    </object>\n    <title>Xrc Test Dialog</title>\n    <style>wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER</style>\n  </object>\n</resource>\n\n```", "```py\nimport wx\nimport wx.xrc as xrc\napp = wx.App()\nframe = wx.Frame(None)\nresource = xrc.XmlResource(\"xrcdlg.xrc\")\ndlg = resource.LoadDialog(frame, \"xrctestdlg\")\ndlg.ShowModal()\napp.MainLoop()\n\n```", "```py\nimport wx\nimport wx.xrc as xrc\n\n# Xml to load our object\nRESOURCE = r\"\"\"<?xml version=\"1.0\"?>\n<resource>\n<object class=\"TextEditPanel\" name=\"TextEdit\">\n</object>\n</resource>\n\"\"\"\n\n```", "```py\nclass XrcTestFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        super(XrcTestFrame, self).__init__(*args, **kwargs)\n\n        # Attributes\n        resource = xrc.EmptyXmlResource()\n        handler = TextEditPanelXmlHandler()\n        resource.InsertHandler(handler)\n        resource.LoadFromString(RESOURCE)\n        self.panel = resource.LoadObject(self,\n                                         \"TextEdit\",\n                                         \"TextEditPanel\")\n\n        # Layout\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.panel, 1, wx.EXPAND)\n        self.SetSizer(sizer)\n\n```", "```py\nclass TextEditPanel(wx.Panel):\n    \"\"\"Custom Panel containing a TextCtrl and Buttons\n    for Copy and Paste actions.\n    \"\"\"\n    def __init__(self, parent, *args, **kwargs):\n        super(TextEditPanel, self).__init__(*args, **kwargs)\n\n        # Attributes\n        self.txt = wx.TextCtrl(self, style=wx.TE_MULTILINE)\n        self.copy = wx.Button(self, wx.ID_COPY)\n        self.paste = wx.Button(self, wx.ID_PASTE)\n\n        # Layout\n        self._DoLayout()\n\n        # Event Handlers\n        self.Bind(wx.EVT_BUTTON, self.OnCopy, self.copy)\n        self.Bind(wx.EVT_BUTTON, self.OnPaste, self.paste)\n\n    def _DoLayout(self):\n        \"\"\"Layout the controls\"\"\"\n        vsizer = wx.BoxSizer(wx.VERTICAL)\n        hsizer = wx.BoxSizer(wx.HORIZONTAL)\n\n        vsizer.Add(self.txt, 1, wx.EXPAND)\n        hsizer.AddStretchSpacer()\n        hsizer.Add(self.copy, 0, wx.RIGHT, 5)\n        hsizer.Add(self.paste)\n        hsizer.AddStretchSpacer()\n        vsizer.Add(hsizer, 0, wx.EXPAND|wx.ALL, 10)\n\n        # Finally assign the main outer sizer to the panel\n        self.SetSizer(vsizer)\n\n    def OnCopy(self, event):\n        self.txt.Copy()\n\n    def OnPaste(self, event):\n        self.txt.Paste()\n\n```", "```py\nclass TextEditPanelXmlHandler(xrc.XmlResourceHandler):\n    \"\"\"Resource handler for our TextEditPanel\"\"\"\n    def CanHandle(self, node):\n        \"\"\"Required override. Returns a bool to say\n        whether or not this handler can handle the given class\n        \"\"\"\n        return self.IsOfClass(node, \"TextEditPanel\")\n\n    def DoCreateResource(self):\n        \"\"\"Required override to create the object\"\"\"\n        panel = TextEditPanel(self.GetParentAsWindow(),\n                              self.GetID(),\n                              self.GetPosition(),\n                              self.GetSize(),\n                              self.GetStyle(\"style\",\n                                            wx.TAB_TRAVERSAL),\n                              self.GetName())\n        self.SetupWindow(panel)\n        self.CreateChildren(panel)\n        return panel\n\n```", "```py\nimport wx\nimport wx.aui as aui\n\nclass AuiBaseFrame(wx.Frame):\n    \"\"\"Frame base class with builtin AUI support\"\"\"\n    def __init__(self, parent, *args, **kwargs):\n        super(AuiBaseFrame, self).__init__(*args, **kwargs)\nwx.Frame.__init__(self, parent, *args, **kwargs)\n\n        # Attributes\n        auiFlags = aui.AUI_MGR_DEFAULT\n        if wx.Platform == '__WXGTK__' and \\\n           aui.AUI_MGR_DEFAUL & aui.AUI_MGR_TRANSPARENT_HINT:\n            # Use venetian blinds style as transparent can \n            # cause crashes on Linux when desktop compositing\n            # is used. (wxAUI bug in 2.8)\n            auiFlags -= aui.AUI_MGR_TRANSPARENT_HINT\n            auiFlags |= aui.AUI_MGR_VENETIAN_BLINDS_HINT\n        self._mgr = aui.AuiManager(self, flags=auiFlags)\n\n        # Event Handlers\n        self.Bind(wx.EVT_CLOSE, self.OnAuiBaseClose)\n\n```", "```py\ndef OnAuiBaseClose(self, event):\n        \"\"\"Save perspective on exit\"\"\"\n        appName = wx.GetApp().GetAppName()\n        assert appName, “No App Name Set!”\n        config = wx.Config(appName)\n        perspective = self._mgr.SavePerspective()\n        config.Write(\"perspective\", perspective)\n        event.Skip() # Allow event to propagate\n\n```", "```py\n    def AddPane(self, pane, auiInfo):\n        \"\"\"Add a panel to be managed by this Frame's\n        AUI Manager.\n        @param pane: wx.Window instance\n        @param auiInfo: AuiInfo Object\n        \"\"\"\n        # Delegate to AuiManager\n        self._mgr.AddPane(pane, auiInfo)\n        self._mgr.Update() # Refresh the layout\n\n```", "```py\n    def SetCenterPane(self, pane):\n        \"\"\"Set the main center pane of the frame.\n        Convenience method for AddPane.\n        @param pane: wx.Window instance\n        \"\"\"\n        info = aui.AuiPaneInfo()\n        info = info.Center().Name(\"CenterPane\")\n        info = info.Dockable(False).CaptionVisible(False)\n        self._mgr.AddPane(pane, info)\n\n```", "```py\n    def LoadDefaultPerspective(self):\n        appName = wx.GetApp().GetAppName()\n        assert appName, \"Must set an AppName!\"\n        config = wx.Config(appName)\n        perspective = config.Read(\"perspective\")\n        if perspective:\n            self._mgr.LoadPerspective(perspective)\n\n```"]