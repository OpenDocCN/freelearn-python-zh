- en: Conditional Statements, Functions, and Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build upon what you learned in the previous chapter.
    You will learn about conditional statements and how to make use of logical operators
    to check conditions using conditional statements. Next, you will learn to write
    simple functions in Python and discuss interfacing inputs to the Raspberry Pi's
    GPIO header using a tactile switch (momentary push button). We will also discuss
    motor control (this is a run-up to the final project) using the Raspberry Pi Zero
    and control the motors using the switch inputs. Let's get to it!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Conditional statements in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using conditional inputs to take actions based on GPIO pin states
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking out of loops using conditional statement
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPIO callback functions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Motor control in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conditional statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Python, conditional statements are used to determine if a specific condition
    is met by testing whether a condition is `true` or `false`. Conditional statements
    are used to determine how a program is executed. For example, conditional statements
    could be used to determine whether it is time to turn on the lights. The syntax
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The condition is usually tested using a logical operator, and the set of tasks
    under the indented block is executed. Let''s consider the example, `check_address_if_statement.py`
    (available for download with this chapter) where the user input to a program needs
    to be verified using a `yes` or `no` question:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the program expects a `yes` or `no` input. If the user provides
    the input `yes`, the condition `if check_address == "yes"` is `true`, the message
    `Your address has been saved` is printed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, if the user input is `no`, the program executes the indented code
    block under the logical test condition `if check_address == "no"` and deletes
    the variable `address`.
  prefs: []
  type: TYPE_NORMAL
- en: An if-else statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding example, we used an `if` statement to test each condition.
    In Python, there is an alternative option named the `if-else` statement. The `if-else`
    statement enables testing an alternative condition if the main condition is not
    `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, if the user input is `yes`, the indented code block under `if`
    is executed. Otherwise, the code block under `else` is executed.
  prefs: []
  type: TYPE_NORMAL
- en: if-elif-else statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding example, the program executes any piece of code under the
    `else` block for any user input other than `yes` that is if the user pressed the
    return key without providing any input or provided random characters instead of
    `no`, the `if-elif-else` statement works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user input is `yes`, the indented code block under the `if` statement
    is executed. If the user input is `no`, the indented code block under `elif` (*else-if*)
    is executed. If the user input is something else, the program prints the message:
    `Invalid input. Try again`.'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the code block indentation determines the block
    of code that needs to be executed when a specific condition is met. We recommend
    modifying the indentation of the conditional statement block and find out what
    happens to the program execution. This will help understand the importance of
    indentation in Python.
  prefs: []
  type: TYPE_NORMAL
- en: In the three examples that we discussed so far, it could be noted that an `if`
    statement does not need to be complemented by an `else` statement. The `else`
    and `elif` statements need to have a preceding `if` statement or the program execution
    would result in an error.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking out of loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Conditional statements can be used to break out of a loop execution (`for`
    loop and `while` loop). When a specific condition is met, an `if` statement can
    be used to break out of a loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the `while` loop is executed in an infinite loop.
    The value of `i` is incremented and printed on the screen. The program breaks
    out of the `while` loop when the value of `i` is greater than `100` and the value
    of `i` is printed from 1 to 100.
  prefs: []
  type: TYPE_NORMAL
- en: 'The applications of conditional statements: executing tasks using GPIO'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed interfacing outputs to the Raspberry Pi's
    GPIO. Let's discuss an example where a simple push button is pressed. A button
    press is detected by reading the GPIO pin state. We are going to make use of conditional
    statements to execute a task based on the GPIO pin state.
  prefs: []
  type: TYPE_NORMAL
- en: Let us connect a button to the Raspberry Pi's GPIO. All you need to get started
    are a button, pull-up resistor, and a few jumper wires. The figure given later
    shows an illustration on connecting the push button to the Raspberry Pi Zero.
    One of the push button's terminals is connected to the ground pin of the Raspberry
    Pi Zero's GPIO pin.
  prefs: []
  type: TYPE_NORMAL
- en: 'The schematic of the button''s interface is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_03_001.png)'
  prefs: []
  type: TYPE_IMG
- en: Raspberry Pi GPIO schematic
  prefs: []
  type: TYPE_NORMAL
- en: The other terminal of the push button is pulled up to 3.3V using a 10 K resistor.
    The junction of the push button terminal and the 10 K resistor is connected to
    the GPIO pin 2 (refer to the BCM GPIO pin map shared in the earlier chapter).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_03_002.png)'
  prefs: []
  type: TYPE_IMG
- en: Interfacing the push button to the Raspberry Pi Zero's GPIO - an image generated
    using Fritzing
  prefs: []
  type: TYPE_NORMAL
- en: Let's review the code required to review the button state. We make use of loops
    and conditional statements to read the button inputs using the Raspberry Pi Zero.
  prefs: []
  type: TYPE_NORMAL
- en: We will be making use of the `gpiozero` library introduced in the previous chapter.
    The code sample for this section is `GPIO_button_test.py` and available for download
    along with this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In a later chapter, we will discuss **object-oriented programming** (**OOP**).
    For now, let's briefly discuss the concept of classes for this example. A **class**
    in Python is a blueprint that contains all the attributes that define an object.
    For example, the `Button` class of the `gpiozero` library contains all attributes
    required to interface a button to the Raspberry Pi Zero's GPIO interface. These
    attributes include button states and functions required to check the button states
    and so on. In order to interface a button and read its states, we need to make
    use of this blueprint. The process of creating a copy of this blueprint is called
    instantiation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with importing the `gpiozero` library and instantiate the
    `Button` class of the `gpiozero` library (we will discuss Python''s classes, objects,
    and their attributes in a later chapter). The button is interfaced to GPIO pin
    2\. We need to pass the pin number as an argument during instantiation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `gpiozero` library''s documentation is available at [http://gpiozero.readthedocs.io/en/v1.2.0/api_input.html](http://gpiozero.readthedocs.io/en/v1.2.0/api_input.html). According
    to the documentation, there is a variable named `is_pressed` in the `Button` class
    that could be tested using a conditional statement to determine if the button
    is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Whenever the button is pressed, the message `Button pressed` is printed on
    the screen. Let''s stick this code snippet inside an infinite loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In an infinite `while` loop, the program constantly checks for a button press
    and prints the message as long as the button is being pressed. Once the button
    is released, it goes back to checking whether the button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking out a loop by counting button presses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s review another example where we would like to count the number of button
    presses and break out of the infinite loop when the button has received a predetermined
    number of presses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example is available for downloading along with this chapter as
    `GPIO_button_loop_break.py`.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the program checks for the state of the `is_pressed` variable.
    On receiving a button press, the program can be paused until the button is released
    using the `wait_for_release` method. When the button is released, the variable
    used to store the number of presses is incremented by one.
  prefs: []
  type: TYPE_NORMAL
- en: The program breaks out of the infinite loop, when the button has received 10
    presses.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_03_003.png)'
  prefs: []
  type: TYPE_IMG
- en: A red momentary push button interfaced to Raspberry Pi Zero GPIO pin 2
  prefs: []
  type: TYPE_NORMAL
- en: Functions in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We briefly discussed functions in Python. Functions execute a predefined set
    of task. `print` is one example of a function in Python. It enables printing something
    to the screen. Let's discuss writing our own functions in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'A function can be declared in Python using the `def` keyword. A function could
    be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this function `my_func`, the `print` statement is written under an indented
    code block. Any block of code that is indented under the function definition is
    executed when the function is called during the code execution. The function could
    be executed as `my_func()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing arguments to a function:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A function is always defined with parentheses. The parentheses are used to pass
    any requisite arguments to a function. Arguments are parameters required to execute
    a function. In the earlier example, there are no arguments passed to the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review an example where we pass an argument to a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `a` and `b` are arguments to the function. The function adds
    `a` and `b` and prints the sum on the screen. When the function `add_function`
    is called by passing the arguments `3` and `2` as `add_function(3,2)` where `a` is
    `3` and `b` is `2`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, the arguments `a` and `b` are required to execute function, or calling
    the function without the arguments would result in an error. Errors related to
    missing arguments could be avoided by setting default values to the arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function expects two arguments. If we pass only one argument to
    this function, the other defaults to zero. For example, `add_function(a=3)`, `b`
    defaults to `0`, or `add_function(b=2)`, `a` defaults to `0`. When an argument
    is not furnished while calling a function, it defaults to zero (declared in the
    function).
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the `print` function prints any variable passed as an argument. If
    the `print` function is called without any arguments, a blank line is printed.
  prefs: []
  type: TYPE_NORMAL
- en: Returning values from a function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Functions can perform a set of defined operations and finally return a value
    at the end. Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the function returns a square of the argument. In Python, the
    `return` keyword is used to return a value requested upon completion of execution.
  prefs: []
  type: TYPE_NORMAL
- en: The scope of variables in a function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two types of variables in a Python program: local and global variables.
    **Local variables** are local to a function, that is, it is a variable declared
    within a function is accessible within that function. The example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the variables `a` and `b` are local to the function `add_function`.
    Let''s consider an example of a **global variable**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the variables `a` and `b` are declared in the main body of the
    Python script. They are accessible across the entire program. Now, let''s consider
    this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The program output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, when `my_function` is called, the value of `a` is `5` and the
    value of `a` is `3` in the `print` statement of the main body of the script. In
    Python, it is not possible to explicitly modify the value of global variables
    inside functions. In order to modify the value of a global variable, we need to
    make use of the `global` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In general, it is not recommended to modify variables inside functions as it
    is not a very safe practice of modifying variables. The best practice would be
    passing variables as arguments and returning the modified value. Consider the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding program, the value of `a` is `3`. It is passed as an argument
    to `my_function`. The function returns `5`, which is saved to `a`. We were able
    to safely modify the value of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: GPIO callback functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s review some uses of functions with the GPIO example. Functions can be
    used in order to handle specific events related to the GPIO pins of the Raspberry
    Pi. For example, the `gpiozero` library provides the capability of calling a function
    either when a button is pressed or released:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we make use of the attributes `when_pressed` and `when_released`
    of the library's GPIO class. When the button is pressed, the function `button_pressed`
    is executed. Likewise, when the button is released, the function `button_released`
    is executed. We make use of the `while` loop to avoid exiting the program and
    keep listening for button events. The `pass` keyword is used to avoid an error
    and nothing happens when a `pass` keyword is executed.
  prefs: []
  type: TYPE_NORMAL
- en: This capability of being able to execute different functions for different events
    is useful in applications like *home automation*. For example, it could be used
    to turn on lights when it is dark and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: DC motor control in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss motor control using the Raspberry Pi Zero.
    Why discuss motor control? As we progress through different topics in this book,
    we will culminate in building a mobile robot. Hence, we need to discuss writing
    code in Python to control a motor using a Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to control a motor, we need an **H-bridge motor driver** (Discussing
    H-bridge is beyond our scope. There are several resources for H-bridge motor drivers:
    [http://www.mcmanis.com/chuck/robotics/tutorial/h-bridge/](http://www.mcmanis.com/chuck/robotics/tutorial/h-bridge/)).
    There are several motor driver kits designed for the Raspberry Pi. In this section,
    we will make use of the following kit: [https://www.pololu.com/product/2753](https://www.pololu.com/product/2753).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Pololu** product page also provides instructions on how to connect the
    motor. Let''s get to writing some Python code to operate the motor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/image_03_004.png)'
  prefs: []
  type: TYPE_IMG
- en: Raspberry Pi based motor control
  prefs: []
  type: TYPE_NORMAL
- en: In order to control the motor, let's declare the pins, the motor's speed pins
    and direction pins. As per the motor driver's documentation, the motors are controlled
    by GPIO pins 12, 13 and 5, 6, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Controlling the motor is as simple as turning on the motor using the `on()`
    method and moving the motor in the forward direction using the `forward()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, reversing the motor direction could be done by calling the `reverse()` method.
    Stopping the motor could be done by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Some mini-project challenges for the reader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some of mini-project challenged for our readers:'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we discussed interfacing inputs for the Raspberry Pi and controlling
    motors. Think about a project where we could drive a mobile robot that reads inputs
    from whisker switches and operate a mobile robot. Is it possible to build a wall
    following robot in combination with the limit switches and motors?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We discussed controlling a DC motor in this chapter. How do we control a stepper
    motor using a Raspberry Pi?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can we interface a motion sensor to control the lights at home using a Raspberry
    Pi Zero?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read on to find out!
  prefs: []
  type: TYPE_NORMAL
- en: Interested in playing tricks on your friends with your Raspberry Pi Zero? Check
    this book's website!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed conditional statements and the applications of
    conditional statements in Python. We also discussed functions in Python, passing
    arguments to a function, returning values from a function and scope of variables
    in a Python program. We discussed callback functions and motor control in Python.
  prefs: []
  type: TYPE_NORMAL
