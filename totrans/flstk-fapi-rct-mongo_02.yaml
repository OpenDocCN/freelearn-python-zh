- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the Database with MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will explore some of the main features of MongoDB through
    several simple yet illustrative examples. You will learn about the basic commands
    of the MongoDB Query API to start interacting with your data stored in a MongoDB
    database. You will learn the essential commands and methods that will enable you
    to insert, manage, query, and update your data.
  prefs: []
  type: TYPE_NORMAL
- en: The aim of this chapter is to help you understand how easy it is to set up a
    MongoDB database on your local machine or in the cloud and perform the operations
    that might be needed in a fast-paced web development process.
  prefs: []
  type: TYPE_NORMAL
- en: Querying, through MongoDB methods and aggregation, is best learned by experimenting
    with data. This chapter utilizes real-world sample datasets provided by MongoDB
    Atlas that are loaded into your cloud database. You will learn to execute CRUD
    and aggregation queries against them.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The structure of a MongoDB database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing MongoDB Community Server and tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Atlas cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB querying and CRUD operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aggregation framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will require MongoDB version 7.0.7 and Windows 11 (and
    Ubuntu 22.04 LTS).
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB version 7.0 is compatible with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows 11, Windows Server 2019, or Windows Server 2022 (64-bit versions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu 20.04 LTS (Focal) and Ubuntu 22.04 LTS (Jammy) for Linux (64-bit releases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are recommended system configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: A desktop or laptop with at least 8 GB of RAM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no CPU requirements specified as such but make sure it’s modern (a
    multi-core processor) to ensure efficient performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of a MongoDB database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is widely regarded as the leading NoSQL database in terms of popularity
    and usage—its power, ease of use, and versatility make it an excellent choice
    for large- and small-scale projects. Its scalability and performance enable the
    data layer of your app to have a very solid foundation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following sections, you will take a deeper look into the basic concepts
    and building blocks of MongoDB: the document, the collection, and the database.
    Since this book takes a bottom-up approach, you will start from the very bottom
    and see an overview of the simplest data structures available in MongoDB and then
    take it up from there into documents, collections, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MongoDB is a document-oriented database. But what does that actually mean?
  prefs: []
  type: TYPE_NORMAL
- en: In MongoDB, documents serve a similar purpose to rows in a traditional relational
    database. Each document in MongoDB is a data structure that consists of key-value
    pairs, representing a single record. Data stored in MongoDB offers great flexibility
    to application developers to model their data as per their needs and allows them
    to easily evolve the schema as their application requirements change in the future.
    MongoDB has a flexible schema model, which essentially means that you can have
    different fields in different documents within a collection. You can also have
    different data types for fields across documents based on your needs.
  prefs: []
  type: TYPE_NORMAL
- en: However, if your application requires a more consistent structure of the data
    throughout the documents in a collection, you can use schema validation rules
    in MongoDB to enforce consistency. MongoDB empowers you to store data in a way
    that makes the most sense for your application needs.
  prefs: []
  type: TYPE_NORMAL
- en: Documents in MongoDB are just an ordered set of key-value pairs. In this book,
    the terms **key** and **field** are used interchangeably as they represent the
    same thing. This structure, as you will explore later, corresponds with data structures
    in every programming language; in Python, you will see that this structure is
    a dictionary and lends itself perfectly to the flow of data of a web app or a
    desktop application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rules for creating documents are pretty simple: the key/field name must
    be a string, with a few exception that you can read more about in the docs, and
    a document cannot contain duplicate key names. Remember that MongoDB is case sensitive.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will load a sample dataset into your MongoDB Atlas cluster
    called `sample_mflix`. The dataset has many collections, but one that is of interest
    to us in this chapter is the `movies` collection, which contains documents that
    describe movies. The following document could be in this collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to nesting documents within documents, MongoDB supports 100 levels
    of nesting, which is a limit you probably won’t reach in most applications.
  prefs: []
  type: TYPE_NORMAL
- en: Supported data types in MongoDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MongoDB allows you to store any of the BSON data types as field values. BSON
    is very closely related to JSON and it stands for “Binary JSON.” BSON’s binary
    structure makes it faster and adds native support for more data types than JSON.
    One of the first important decisions when designing any type of application is
    the choice of data types. As a developer, you would never want to use the wrong
    tools for the job at hand.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The full list of supported data types in MongoDB can be found in the official
    documentation: [https://www.mongodb.com/docs/mongodb-shell/reference/data-types/](https://www.mongodb.com/docs/mongodb-shell/reference/data-types/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most important data types supported by MongoDB are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strings**: These are probably the most basic and universal data type in MongoDB,
    and they are used to represent all text fields in a document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Numbers**: MongoDB supports different types of numbers, including:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**int**: 32-bit integer'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**long**: 64-bit integer'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**double**: 64-bit floating point'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decimal**: 128-bit decimal-based floating point'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`true` or `false` value; they are written without quotes since you do not want
    them to be interpreted as strings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Objects or embedded documents**: In MongoDB, fields within a document can
    contain embedded documents, allowing for complex data structuring within a single
    document. This capability supports the deep nesting of JSON-like structures, facilitating
    flexible and hierarchical data modeling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arrays**: Arrays can contain zero or more values in a list-like structure.
    The elements of the array can be any MongoDB data type, including other documents
    and arrays. They are zero-based and particularly suited for making **embedded
    relationships**. For instance, you could store all of the post comments inside
    the blog post document itself, along with a timestamp and the user that made the
    comment. Arrays can benefit from the standard JavaScript array methods for fast
    editing, pushing, and other methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_id` that acts as the primary key. If an inserted document omits the `_id`
    field, MongoDB automatically generates an ObjectId for the `_id` field that is
    used to uniquely identify a document in the collection. ObjectId values are 12
    bytes in length. They are small, likely unique, fast to generate, and ordered.
    These ObjectIds are extensively used as keys for traditional relationships – ObjectIds
    are automatically indexed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dates**: Though JSON does not support date types and stores them as plain
    strings, MongoDB’s BSON format supports date types explicitly. They represent
    the 64-bit number of milliseconds since the Unix epoch (January 1, 1970). All
    dates are stored in UTC and have no time zone associated. A BSON date type is
    signed. Negative values represent dates before 1970.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Binary data**: Binary data fields can store arbitrary binary data and are
    the only way to save non-UTF-8 strings to a database. These fields can be used
    in conjunction with MongoDB’s GridFS filesystem to store images, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Null**: This can represent a null value or a nonexistent field, and we can
    even store JavaScript functions as a different data type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you have an idea of what types of fields are available in MongoDB and
    how you can map your business logic to a (flexible) schema, it is time to get
    introduced to collections—groups of documents and a counterpart to a table in
    the relational database world.
  prefs: []
  type: TYPE_NORMAL
- en: Collections and databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even though you can store multiple schemas in the same collection, there are
    many reasons to store your data in multiple databases and multiple collections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data separation**: Collections allow you to logically separate different
    types of data. For example, you can have a collection for user data, another collection
    for product data, and yet another collection for order data. This separation makes
    it easier to manage and query specific types of data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance optimization**: By separating data into different collections,
    you can optimize performance by indexing and querying specific collections more
    efficiently. This can improve query performance and reduce the amount of data
    that needs to be scanned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data locality**: Grouping documents of the same type in a collection will
    require less disk seek time, and considering that indexing is defined by collection,
    the querying is much more efficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although a single instance of MongoDB can host several databases at once, it
    is considered good practice to keep all the document collections used in an application
    inside a single database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'When you install MongoDB, there will be three databases created and their names
    cannot be used for your application database: `admin`, `local`, and `config`.
    They are built-in databases that shouldn’t be replaced, so avoid accidentally
    naming your database the same way or making any changes to these databases.'
  prefs: []
  type: TYPE_NORMAL
- en: Options to install the MongoDB database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After reviewing the basic terms, concepts, and structure of the MongoDB database,
    it is time to learn how to set up a MongoDB database server locally and in the
    cloud.
  prefs: []
  type: TYPE_NORMAL
- en: The local database setup is convenient for quick prototyping that doesn’t even
    require an internet connection. However, we recommend that you use a cloud-hosted
    database in MongoDB Atlas when you’re setting up a database to use as the backend
    in future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Atlas offers many benefits over the local installation. First, it is
    easy to set up, and, as you will see, you can get it up and running literally
    in minutes with a generous free-tier database ready for work. MongoDB handles
    all the operational aspects of the database, such as provisioning, scaling, backup,
    and monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: Atlas takes away much of the manual setup and guarantees availability. Other
    benefits include the involvement of the MongoDB team (which tries to implement
    best practices), high security by default with access control, firewalls and granular
    access control, automated backups (depending on the tier), and the possibility
    to be productive right away.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB and related tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MongoDB is not just a database service provider, but a full-fledged developer
    data platform that has a set of technologies built around the core database to
    meet all your data needs and improve your productivity as a developer. Let’s examine
    the following components that you will be installing or using in the following
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MongoDB Community Edition**: A free version of MongoDB that runs on all major
    operating systems. It is what you are going to use to play around with data locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MongoDB Compass**: A **graphical user interface** (**GUI**) for managing,
    querying, aggregating, and analyzing MongoDB data in a visual environment. Compass
    is a mature and useful tool that you’ll be using throughout your initial querying
    and aggregation explorations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MongoDB Atlas**: The database-as-a-service solution from MongoDB. This offering
    is one of the main reasons MongoDB is a central part of the FARM stack. It is
    relatively easy to set up and it relieves you from manually administering the
    database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mongosh`): A command-line shell that not only performs simple **create**,
    **read**, **update**, and **delete** (**CRUD**) operations on your database but
    also enables administrative tasks such as creating and deleting databases, starting
    and stopping services, and similar jobs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MongoDB Database Tools**: Several command-line utilities that allow administrators
    and developers to export or import data to and from a database, provide diagnostics,
    or enable manipulation of large files stored in MongoDB’s GridFS system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will focus on the procedure to have a fully functional installation.
    Check the installation instructions that correspond to your operating system.
    This chapter includes instructions for Windows, Linux, and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB and Compass on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to install the latest version of MongoDB
    Community Edition, which at the time of writing is 7.0\. MongoDB Community is
    only supported on 64-bit versions of Windows on x86_64 architecture. Windows versions
    supported are Windows 11, Windows Server 2019, and Windows Server 2022\. To install
    MongoDB and Compass, you can refer to the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We strongly advise you to check the instructions on the MongoDB website ([https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-windows/](https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-windows/))
    to ensure you have access to the latest information, as they might slightly change.
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the installer, head over to the MongoDB Download Center at [https://www.mongodb.com/try/download/community](https://www.mongodb.com/try/download/community),
    select the Windows version, and click on **Download** as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: MongoDB download page'
  prefs: []
  type: TYPE_NORMAL
- en: Next, execute it. If a security prompt displays **Open Executable File**, select
    **Yes** and proceed to the MongoDB setup wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read the license agreement, select the checkbox, and then click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is an important screen. When asked which type of setup to choose, select
    **Complete**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Complete installation'
  prefs: []
  type: TYPE_NORMAL
- en: The next wizard will ask you whether you want MongoDB to run as a Windows network
    service (that’s what you should prefer) or as a local and domain service. Leave
    the default values selected and proceed to the next step without making any changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Another wizard will appear prompting whether you want to install Compass, MongoDB’s
    GUI tool for database management. Select the checkbox and proceed to install it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_03.jpg)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_IMG
- en: 'Figure 2.3: Install Compass'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the **User Account Control** (**UAC**) Windows warning screen will
    pop up, and you should select **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have installed MongoDB Community Server on your local machine,
    the next section will show you how to install other necessary tools that you will
    be using throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the MongoDB Shell (mongosh)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing MongoDB Community Server and Compass on your computer, you
    will next install `mongosh`, the MongoDB Shell.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For instructions on other operating systems, please visit the MongoDB documentation:
    [https://www.mongodb.com/docs/mongodb-shell/install/](https://www.mongodb.com/docs/mongodb-shell/install/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can do it for Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the MongoDB Download Center ([https://www.mongodb.com/try/download/shell](https://www.mongodb.com/try/download/shell))
    and, in the **Tools** section, select **MongoDB Shell**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the dropdowns, select the Windows version and the **msi** package and click
    on **Download**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: Download the MongoDB Shell'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, locate the **msi** package on your computer and execute it. If a security
    prompt asks **Open Executable File**, select **Yes** and proceed to the MongoDB
    setup wizard. The wizard will open the following page. Click on **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: The MongoDB Shell Setup Wizard'
  prefs: []
  type: TYPE_NORMAL
- en: In the prompt, select the destination folder for installing `mongosh`, or leave
    the default option as it is if it looks good to you, and then finish the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you should be able to test whether MongoDB is running (as a
    service). Enter the following command in the command prompt of your choice (preferably,
    use **cmder**, available at [https://cmder.app](https://cmder.app)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see various notifications and a tiny prompt denoted with `>`. Try
    typing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you see the automatically generated `admin`, `config`, and `locals` databases,
    you should be good to go.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, check the installation of Compass. On Windows, you should be able to find
    it in your start menu under **MongoDBCompass** (no spacing).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you just click the `27017` and you should be able to see all of the databases
    that you saw when you used the command line with MongoDB: `admin`, `config`, and
    `local`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MongoDB Database Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MongoDB Database Tools are a collection of command-line utilities for working
    with a MongoDB deployment. Some of the common database tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mongoimport`: Imports content from an extended JSON, CSV, or TSV export file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mongoexport`: Produces a JSON or CSV export of data stored in a `mongod` instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mongodump`: Creates a binary export of the contents of a `mongod` database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are some other tools, such as `mongorestore`, `bsondump`, `mongostat`,
    `mongotop`, and `mongofiles`. The MongoDB Database Tools can be installed with
    an MSI installer (or downloaded as a ZIP archive).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `msi` package can be downloaded from the MongoDB Download Center ([https://www.mongodb.com/try/download/database-tools](https://www.mongodb.com/try/download/database-tools)).
  prefs: []
  type: TYPE_NORMAL
- en: After downloading, you can follow the installation instructions provided in
    the MongoDB documentation ([https://www.mongodb.com/docs/database-tools/installation/installation-windows/](https://www.mongodb.com/docs/database-tools/installation/installation-windows/)).
  prefs: []
  type: TYPE_NORMAL
- en: The next section provides a walk-through of the process of installing MongoDB
    on a standard Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing MongoDB and Compass on Linux: Ubuntu'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux offers numerous benefits for the development and management of local servers,
    but most importantly, should you decide that the database-as-a-service of MongoDB
    isn’t what you want to use anymore, you will probably want to work on a Linux-based
    server.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will go over the installation process on Ubuntu version 22.04
    LTS (Jammy), while the MongoDB version also supports Ubuntu 20.04 LTS (Focal)
    on x86_64 architecture. The necessary steps to install MongoDB Ubuntu will be
    listed here, but you should always check the MongoDB Ubuntu installation page
    ([https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/](https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/))
    for recent changes. The process, however, shouldn’t change.
  prefs: []
  type: TYPE_NORMAL
- en: The following actions are to be performed in a Bash shell. Download the public
    key that will allow you to install MongoDB, then you will create a list file and
    reload the package manager. Similar steps are required for other Linux distributions,
    so be sure to check the documentation on the website of your chosen distribution.
    Finally, you will perform the actual installation of MongoDB through the package
    manager and start the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is always preferable to skip the packages provided by the Linux distribution
    as they are often not updated to the latest version. Perform the following steps
    to install MongoDB on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the public key used by the package management system as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to have `gnupg` and `curl` installed on your system. If you don’t
    already have them, you can install them by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To import the MongoDB public GPG key, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/etc/apt/sources.list.d/mongodb-org-7.0.list` file for Ubuntu 22.04
    (Jammy) by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the local package database with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the MongoDB package. To install the latest stable version, issue the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run MongoDB Community Edition. If you follow these instructions and install
    MongoDB through the package manager, the `/var/lib/mongodb` data directory and
    the `/var/log/mongodb` log directory will be created during the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can start the `mongod` process with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command first:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then run the `start` command (shown in *step* *5*) again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should be able to start using the MongoDB Shell (`mongosh`) by simply typing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: MongoDB isn’t particularly different than any other Linux software when it comes
    to installation and process management. However, if you have any issues with the
    installation, the first recommendation would be to visit the MongoDB Linux installation
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Atlas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB Atlas—a cloud database service provided by MongoDB—is one of the strongest
    selling points of MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB Atlas is a fully managed database service, which means that MongoDB
    handles the infrastructure management, database setup, configuration, and maintenance
    tasks for you. This allows you to focus on developing your applications instead
    of managing the underlying infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The processes of signing up and setting up a MongoDB Atlas instance are well
    documented at [https://www.mongodb.com/docs/atlas/getting-started/](https://www.mongodb.com/docs/atlas/getting-started/).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways in which you can set up your Atlas account:'
  prefs: []
  type: TYPE_NORMAL
- en: Atlas UI (website)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atlas CLI (command line)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Atlas CLI provides a dedicated CLI for MongoDB Atlas, allowing you to manage
    your Atlas database deployments and Atlas Search directly from your terminal.
    In this book, you will see how to do it from the UI.
  prefs: []
  type: TYPE_NORMAL
- en: Head over to [https://www.mongodb.com/cloud/atlas/register](https://www.mongodb.com/cloud/atlas/register)
    to create an Atlas account if you don’t already have it. You can use either your
    Google account, GitHub account, or email account to sign up for this service.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Atlas UI and cluster creation steps may change as more features are introduced.
    It is highly recommended that you refer to the documentation while setting up
    the cluster for the latest instructions ([https://www.mongodb.com/docs/atlas/getting-started/](https://www.mongodb.com/docs/atlas/getting-started/)).
  prefs: []
  type: TYPE_NORMAL
- en: After setting up the account (here, a Gmail address is used, so you can log
    in with a Google account for faster access), you will be prompted to create a
    cluster. You will create an `M0` cluster, which is free, and you should select
    a **Cloud Provider & Region** option that is as close to your physical location
    as possible to minimize latency.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Atlas cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up an Atlas cluster, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On your Atlas dashboard, you will see the **Create a deployment** option. Click
    on **Create** to start the process of creating your first Atlas cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: The Atlas dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this step, you need to do multiple things:'
  prefs: []
  type: TYPE_NORMAL
- en: Select a free **M0** **sandbox** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give your cluster a meaningful name, such as `farm-stack`. You can choose any
    other name of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that both the **Automate security setup** and **Add sample dataset**
    options are checked. This will come in very handy later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the cloud service provider of your choice (by default, it’s AWS)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the region that is nearest to your location to minimize latency, and
    click on **Create Deployment**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Atlas user and setting up IP is an important step that you must
    complete before you start using the Atlas cluster.
  prefs: []
  type: TYPE_NORMAL
- en: On the next screen, you will be asked to create a database user that will have
    a username and password. Both the fields are auto-populated for you to simplify
    the process. Feel free to change the username and password according to your preference.
    **Make sure that you save the password somewhere as you will require it later
    when you connect to** **your cluster.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, your current IP address is added to enable local connectivity. MongoDB
    Atlas provides many layers of security and restricted IP address access is one
    of them. If you are going to use your cluster from any other IP address, you can
    add that later, or you also have the option to enable access from anywhere (`0.0.0.0/0`),
    which will allow you to connect from anywhere, but this is not the recommended
    option for security reasons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you complete these steps, you have successfully created your first Atlas
    cluster!
  prefs: []
  type: TYPE_NORMAL
- en: Getting the connection string of your Atlas Cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, you’ll look at the sample dataset that is automatically loaded for you.
    In this section, you will connect the dataset to your Atlas cluster from Compass
    and explore the same dataset using it:'
  prefs: []
  type: TYPE_NORMAL
- en: On the Atlas dashboard, click on the **Browse collections** button, as shown
    in *Figure 2**.7*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: The Atlas dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that the `sample_mflix` dataset has already been loaded in your
    cluster. You’ll have a database named `sample_mflix` and six collections created
    under it: `comments`, `embedded_movies`, `movies`, `sessions`, `theatres`, and
    `users`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to your Atlas dashboard and get the connection string to connect to
    your Atlas cluster from Compass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Atlas dashboard, click on the green **Connect** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: Connect to your cluster'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, select **Compass**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: Connect to your cluster'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next wizard, copy the connection string shown in the box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: Get the connection string'
  prefs: []
  type: TYPE_NORMAL
- en: Great! Now, you have the connection string for your Atlas cluster. You can go
    to Compass and use this connection string to connect to your Atlas cluster from
    Compass. Don’t forget to replace `<password>` with your Atlas user password before
    connecting to your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the Atlas cluster from Compass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to connect to your Atlas Cluster from Compass:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch Compass if it’s not already running on your computer. In the **URI**
    box, paste the connection string you copied from the previous step and add your
    password to it. Next, click on **Connect**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: MongoDB Compass'
  prefs: []
  type: TYPE_NORMAL
- en: 'After successfully connecting to your Atlas cluster, you will see something
    similar to *Figure 2**.12*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: The My Queries tab in MongoDB Compass'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the list of databases in your cluster in the left panel. Click
    on **sample_mflix** to expand the dropdown and expose the list of collections.
    Then, click on **movies** to see the documents stored in that collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.13: List of documents in collections'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2**.13* shows that you have 21.4k documents in your `sample_mflix.movies`
    collection.'
  prefs: []
  type: TYPE_NORMAL
- en: Now you should have a fully functional instance of the world’s most popular
    NoSQL database on your machine. You have also created an online account and managed
    to create your very own cluster, ready to take on most data challenges and power
    your web app.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB querying and CRUD operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see MongoDB in action and experience firsthand the power of the most popular
    NoSQL database. This section will show you the most essential MongoDB commands,
    through simple examples. These methods will enable you, as a developer, to take
    control of your data, create new documents, query documents by using different
    criteria and conditions, perform simple and more complex aggregations, and output
    data in various forms.
  prefs: []
  type: TYPE_NORMAL
- en: Although you will be talking to MongoDB through the Python drivers (Motor and
    PyMongo), it is helpful to learn how to write queries directly at first. You’ll
    begin by querying the `sample_mflix.movies` dataset that was imported into your
    cluster at the time of cluster creation, then you’ll go through the process of
    creating new data—inserting, updating, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first define the two options for executing MongoDB commands, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Compass GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB Shell (`mongosh`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Connect to your MongoDB Atlas cluster from `mongosh` and perform CRUD operations
    on your data:'
  prefs: []
  type: TYPE_NORMAL
- en: To connect to your Atlas cluster from `mongosh` (MongoDB Shell), navigate to
    your Atlas cluster dashboard and fetch the connection string for `mongosh`. The
    steps will be the same as for Compass, except for the connecting tool. For this,
    you’ll need the MongoDB Shell and not Compass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 2**.14* shows the connection string for `mongosh`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B22406_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.14: Connect to mongosh (MongoDB Shell)'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the connection string and navigate to the CLI on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, to set up the options for working with and executing commands in our cloud
    database in Atlas, perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a shell session (Command Prompt on Windows or Bash on Linux), paste the connection
    string in the prompt, and hit *Enter*. Then, provide the password and hit *Enter*.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also explicitly pass the password in the connection string by using
    the `--password` option followed by your password. To avoid any typos/errors in
    typing the password, you can use this option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On successfully connecting to your Atlas cluster, you should see something
    like this:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22406_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.15: Connecting to a MongoDB database successfully'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, use the `show dbs` command to list all the databases present in your
    cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This command should lists all of the available databases: `admin`, `local`,
    and `sample_mflix` (your database).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use your database, type the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The console will respond with `switched to db sample_mflix`, which means that
    now you can query and work on your database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the available collections inside `sample_mflix`, try the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You should be able to view all six collections that we saw in the Atlas UI and
    Compass, that is, `comments`, `embedded_movies`, `movies`, `sessions`, `theatres`,
    and `users`. Now that you have your database and collection available, you can
    proceed and use some querying options.
  prefs: []
  type: TYPE_NORMAL
- en: Querying in MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will show the use of the `sample_mflix.movies` collection as an
    example for demonstration. Working with real data with some expected query results
    helps reinforce the acquired notions and makes understanding the underlying processes
    easier and more thorough.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most frequent MongoDB query language commands—and the ones that this chapter
    will be covering—are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`find()`: Finds and selects documents matching simple or complex criteria'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insertOne()`: Inserts a new document into the collection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insertMany()`: Inserts an array of documents into the collection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updateOne()` and `updateMany()`: Update one or more documents according to
    some criteria'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleteOne()` and `deleteMany()`: Delete one or more documents from the collection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are 21,349 documents in the `sample_mflix.movies` collection. To query
    for all the documents, type the following command in the MongoDB Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will print several documents, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22406_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16: find() query output'
  prefs: []
  type: TYPE_NORMAL
- en: The console will print the message `Type "it" for more`, as the console prints
    out only 20 documents at a time. This statement could be interpreted as a classic
    `SELECT * FROM TABLE` in the SQL world.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `find()` method returns a cursor and not the actual results. The cursor
    enables performing some standard database operations on the returned documents,
    such as limiting the number of results, ordering by one or more keys (ascending
    or descending), and skipping records.
  prefs: []
  type: TYPE_NORMAL
- en: You can also apply some filters and only return those documents that satisfy
    the specified criteria. The `movies` collection has the `years` field, which represents
    the year in which the movie was released. For instance, you can write a query
    to only return movies that were released in `1969`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command prompt, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, you used the `limit()` method on the cursor to specify the maximum number
    of documents the cursor should return, in this case `5`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding command will return the search results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22406_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.17: find() operation with a filter criteria'
  prefs: []
  type: TYPE_NORMAL
- en: 'The results should now contain only documents that satisfy the condition that
    the `year` key is equal to `1969`. Looking at the results, it seems like there
    are many documents. You can also do a count operation on a query by using the
    `db.collection.countDocuments()` method. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command returns `107`, which means you have 107 documents in your
    collection that matched your search criteria; that is, 107 movies were released
    in the year `1969`.
  prefs: []
  type: TYPE_NORMAL
- en: The JSON syntax that you used in the previous query is a **filter**, and it
    can have numerous key-value pairs with which you define your query method. MongoDB
    has many operators that enable you to query fields with more complex conditions
    than plain equality, and their updated documentation is available on the MongoDB
    site at [https://docs.mongodb.com/manual/reference/operator/query/](https://docs.mongodb.com/manual/reference/operator/query/).
  prefs: []
  type: TYPE_NORMAL
- en: You can visit the page and look around some of the operators as they can give
    you an idea of how you might be able to structure your queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, suppose you want to find all the `Comedy` (genre) movies that
    were released in `USA` after the year `1945`. The following query will do the
    job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: After running the query, you should see a bunch of documents returned by the
    cursor.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the `countDocuments` method to find out the exact number of
    documents that match the filter criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You will find that there are `3521` documents in the collection that match your
    search criteria.
  prefs: []
  type: TYPE_NORMAL
- en: The `$gt` operator is used to specify that the year should be greater than `1945`,
    ensuring the movies selected were released after this year. The conditions on
    country and genre are straightforward, requiring the `countries` array to include
    `USA` and the `genres` array to contain `Comedy`.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the `find()` method implies an **AND** operation, so only documents
    satisfying all three conditions will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most widely used query operators are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$gt`: Greater than'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$lt`: Less than'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$in`: Providing a list of values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, you can see on the MongoDB documentation ([https://www.mongodb.com/docs/manual/reference/operator/query/](https://www.mongodb.com/docs/manual/reference/operator/query/))
    that there are many more—logical *and*, *or*, and *nor*; *geospatial* operators
    for finding the nearest points on a map; and so on. It is time to explore other
    methods that allow you to perform queries and operations.
  prefs: []
  type: TYPE_NORMAL
- en: '`findOne()` is similar to `find()`; it also takes an optional filter parameter
    but returns only the first document that satisfies the criteria.'
  prefs: []
  type: TYPE_NORMAL
- en: Before you dive into the process of creating, deleting, and updating existing
    documents, it’s important to mention a very useful feature called **projection**.
  prefs: []
  type: TYPE_NORMAL
- en: Projection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Projection allows you to specify which fields should be included or excluded
    in the documents returned from query results. This is achieved by providing an
    additional argument to the `find()` and `findOne()` methods. This argument is
    an object that specifies which fields to include or exclude, effectively tailoring
    the query results to only contain the information that is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Building projections is easy; a projection query is just a JSON object in which
    the keys are the names of the fields, while the values are `0` if you want to
    exclude a field from the output or `1` if we want to include it. The `ObjectId`
    type is included by default, so if you want to remove it from the output, you
    have to set it to `0` explicitly. Also, if you have not included the name of any
    field in the projection, it is assumed to have a `0` value and is not projected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose in your previous query you only want to project the movie title, country
    released, and year. To do that, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The sort and limit operations first sort the returned documents by the `year`
    field in ascending order and then restrict the result to five documents, as specified
    by the `limit` parameter. In the projection part, the `_id` field is suppressed
    by setting it to `0`, and the `title`, `countries`, and `year` fields are included
    by setting them to `1`. Since the `genres` field and all other fields in the projection
    are omitted, they are automatically excluded from the returned documents.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The method used to create new documents in MongoDB is `insertOne()`. You can
    try inserting the following fictitious movie into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will print the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The first part means that MongoDB acknowledged the insertion operation, whereas
    the second property prints out the `ObjectId` key, which is the primary key that
    MongoDB uses and assigns automatically to the newly inserted documents if not
    provided manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB, naturally, also supports inserting many documents at once with the
    `insertMany()` method. Instead of providing a single document, the method accepts
    an array of documents. You could, for example, insert another couple of sample
    movies as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Here, you inserted three fictitious movies and the third one has a new property,
    rating (which is set to `G`), which does not exist in any other movies, just to
    highlight MongoDB’s schema flexibility. The shell acknowledges this and prints
    out the `ObjectId` key of the newly inserted documents.
  prefs: []
  type: TYPE_NORMAL
- en: Updating documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Updating documents in MongoDB is possible through several different methods
    that are suited for different scenarios that might arise in your business logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `updateOne()` method updates the first encountered document with the data
    provided in the fields. For example, let’s update the first movie whose `genres`
    field has `Test` in it and set it to `PlaceHolder` `genre`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also update existing properties of the document as long as you use
    the `$set` operator. Let’s say that you want to make similar updates to all documents
    in your collection (i.e., set the `genres` field value to the `placeHolder` genre)
    that match the passed filter criteria and also increase the year value by `1`
    in all matched documents. You could try it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command updates many documents, namely all movies that satisfy
    the simple requirement of having `Test` in the `genres` field.
  prefs: []
  type: TYPE_NORMAL
- en: Updating documents is an atomic operation—if two or more updates are issued
    at the same time, the one that reaches the server first will be applied.
  prefs: []
  type: TYPE_NORMAL
- en: '`mongosh` also provides a `replaceOne()` method that takes a filter, like your
    earlier methods, but also expects an entire document that will take the place
    of the preceding one. You can get more information on the collection methods in
    the following documentation: [https://www.mongodb.com/docs/manual/reference/method/db.collection.updateOne/](https://www.mongodb.com/docs/manual/reference/method/db.collection.updateOne/).'
  prefs: []
  type: TYPE_NORMAL
- en: Deleting documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deleting documents works in a similar way to the `find` methods—you can provide
    a filter specifying the documents to be deleted and use the `deleteOne` or `deleteMany`
    method to execute the operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s delete all the fake movies that you inserted in your collection by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The shell will acknowledge this operation with a `deletedCount` variable equal
    to `4`—the number of deleted documents. The `deleteOne` method operates in a very
    similar way by deleting the first document that matches the filter criteria.
  prefs: []
  type: TYPE_NORMAL
- en: To drop an entire collection in MongoDB, you can use the `db.collection.drop()`
    command. However, it is not recommended to drop an entire collection without careful
    consideration as it will delete all the data and related indexes. It is advised
    that you don’t run this command for the movies dataset as we need it for the rest
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to import the data again in Atlas (you should see an option on the
    Atlas dashboard) if you deleted all the documents.
  prefs: []
  type: TYPE_NORMAL
- en: Aggregation framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The MongoDB aggregation framework is an extremely useful tool that enables offloading
    some (or most) of the computing burden of making calculations and aggregations
    of varying complexity to the MongoDB server and sparing your client side, as well
    as the (Python-based) backend, of some workload.
  prefs: []
  type: TYPE_NORMAL
- en: Centered around the concept of a `find` method that you already used extensively
    but with the additional benefit of data processing in different stages or steps.
  prefs: []
  type: TYPE_NORMAL
- en: The MongoDB documentation site ([https://www.mongodb.com/docs/manual/reference/method/db.collection.aggregate/](https://www.mongodb.com/docs/manual/reference/method/db.collection.aggregate/))
    is the best place to start if you want to get acquainted with all the possibilities.
    However, we’ll start with a couple of simple examples.
  prefs: []
  type: TYPE_NORMAL
- en: The syntax for the aggregation is similar to other methods that you used earlier,
    such as `find()` and `findOne()`. We use the `aggregate()` method, which takes
    a list of stages as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Probably the best aggregation, to begin with, would be to mimic the `find` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write an aggregation query to select all movies where the `genres` field includes
    `Comedy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This is probably the simplest possible aggregation, and it consists of just
    one stage, the `$match` stage, which tells MongoDB that you only want comedy movies,
    so the output of the first stage is exactly that.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your collection, you have both `series` and `movies` data. Let’s write an
    aggregation pipeline to filter out films that are of the movie type and have `Comedy`
    as the genre. Then, group them together to find out the average runtime of comedy
    movies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will return the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a more detailed explanation of the preceding aggregation query:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$match` define the criteria for filtering documents. In this case, `{type:
    "movie", genres: "Comedy"}` specifies that documents must have the type equal
    to `movie` and must include `Comedy` in their `genres` array to pass through.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$group` stage takes parameters that define how to group the documents and
    what calculations to perform on the grouped data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$group` stage, `_id` specifies the grouping criteria. Setting `_id` to null
    means all documents passed from the previous stage will be aggregated into a single
    group, rather than being divided into multiple groups based on distinct field
    values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$avg` is an accumulator operator used here to compute the average. `$runtime`
    specifies that the runtime field from each document should be used in the calculation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the data is grouped and aggregated the way you want it, you can apply other
    simpler operations, such as sorting, ordering, and limiting.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter detailed the basic building blocks that define MongoDB and its
    structure. You have seen how to set up a database in the cloud using MongoDB Atlas
    and explored the basics of creating, updating, and deleting documents. Further,
    this chapter detailed the aggregation pipeline framework—a strong analytic tool.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will show how to create APIs with FastAPI—an exciting and new
    Python framework. We will provide a minimal yet complete guide of the main concepts
    and features, which should hopefully convince you that building APIs can be fast,
    efficient, and fun.
  prefs: []
  type: TYPE_NORMAL
