["```py\n<scheme>://<authority>/<path>/<query><fragment>\n```", "```py\n<userinfo>@<host>:<port>\n```", "```py\nhttp://someserver.com:5000/blog/user/user1?title=sometitle#1\n```", "```py\nGET /blog/user/user1 HTTP/1.1\nHost: someserver.com\nAccept: image/gif, image/jpeg, */*\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\nCookie: cookie1=somevalue; cookie2=othervalue; session:dsofksdfok439349i3sdkfoskfoskfosdkfo\n(blank line)\n```", "```py\nHTTP/1.0 200 OK\nContent-Type: application/json\nContent-Length: 1330\nServer: Werkzeug/0.14.1 Python/2.7.10\nDate: Thu, 19 Jul 2018 11:14:16 GMT\n{ \"author\": \"user1\" ... }\n```", "```py\nHTTP/1.0 200 OK\nContent-Type: application/json\nContent-Length: 1330\nServer: Werkzeug/0.14.1 Python/2.7.10\nDate: Thu, 19 Jul 2018 11:14:16 GMT\n\n{ \"id\": 100, \"title\": \"Some blog post title\" }\n```", "```py\n$ # Initialise the virtual environment and database with test data\n$ ./init.sh\n$ # Activate the python virtual environment\n$ source venv/bin/activate\n$ export FLASK_APP=main.py\n$ echo app.url_map | flask shell | grep api ..\n <Rule '/auth/api' (POST, OPTIONS) -> auth.api>,\n <Rule '/api/post' (HEAD, GET, PUT, POST, OPTIONS, DELETE) -> postapi>,\n <Rule '/api/post/<post_id>' (HEAD, GET, PUT, POST, OPTIONS, DELETE) \n -> postapi>,\n```", "```py\n... \nFlask-Restful ...\n```", "```py\n./\n  main.py\n  config.py\n  ...\n  webapp/\n    blog/\n    main/\n    auth/\n    api/\n __init__.py      blog/\n controlers.py\n          fields.py\n parsers.py\n    templates/\n    static/\n```", "```py\nfrom flask_restful import Api\nfrom .blog.controllers import PostApi\n\nrest_api = Api()\n\ndef create_module(app, **kwargs):\n    rest_api.add_resource(\n        PostApi,\n        '/api/post',\n        '/api/post/<int:post_id>',\n    )\n    rest_api.init_app(app)\n```", "```py\n...\ndef create_app(object_name):\n...\n    from api import create_module as api_create_module\n    ...\n    api_create_module(app)\n\n    return app\n```", "```py\nfrom flask_restful import Resource \n\nclass PostApi(Resource): \n  ...\n```", "```py\n...\nflask-jwt-extended\n...\n```", "```py\nfrom flask_jwt_extended import JWTManager\n...\njwt = JWTManager()\n...\ndef create_module(app, **kwargs):\n    ...\n    jwt.init_app(app)\n    ...\n```", "```py\n\ndef authenticate(username, password):\n    from .models import User\n    user = User.query.filter_by(username=username).first()\n    if not user:\n        return None\n    # Do the passwords match\n    if not user.check_password(password):\n        return None\n    return user\n```", "```py\n@auth_blueprint.route('/api', methods=['POST'])\ndef api():\n    if not request.is_json:\n        return jsonify({\"msg\": \"Missing JSON in request\"}), 400\n\n    username = request.json.get('username', None)\n password = request.json.get('password', None)\n    if not username:\n        return jsonify({\"msg\": \"Missing username parameter\"}), 400\n    if not password:\n        return jsonify({\"msg\": \"Missing password parameter\"}), 400\n user = authenticate(username, password)\n    if not user:\n        return jsonify({\"msg\": \"Bad username or password\"}), 401\n    # Identity can be any data that is json serializable\n    access_token = create_access_token(identity=user.id)\n    return jsonify(access_token=access_token), 200\n```", "```py\n$ curl -H \"Content-Type: application/json\" -d '{\"username\":\"user1\",\"password\":\"password\"}' http://localhost:5000/auth/api {\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIyOGZjMDNkOC0xY2MyLTQwZDQtODJlMS0xMGQ0Mjc2YTk1ZjciLCJleHAiOjE1MzIwMTg4NDMsImZyZXNoIjpmYWxzZSwiaWF0IjoxNTMyMDE3OTQzLCJ0eXBlIjoiYWNjZXNzIiwibmJmIjoxNTMyMDE3OTQzLCJpZGVudGl0eSI6InVzZXIxIn0.Cs-ANWq0I2M2XMrZpQof-_cX0gsKE7U4UG1t1rB0UoY\"\n}\n```", "```py\n$ export ACCESS=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIyOGZjMDNkOC0xY2MyLTQwZDQtODJlMS0xMGQ0Mjc2YTk1ZjciLCJleHAiOjE1MzIwMTg4NDMsImZyZXNoIjpmYWxzZSwiaWF0IjoxNTMyMDE3OTQzLCJ0eXBlIjoiYWNjZXNzIiwibmJmIjoxNTMyMDE3OTQzLCJpZGVudGl0eSI6InVzZXIxIn0.Cs-ANWq0I2M2XMrZpQof-_cX0gsKE7U4UG1t1rB0UoY\"\n$ curl -H \"Authorization: Bearer $ACCESS\" http://localhost:5000/api/post\n```", "```py\n$ curl -v http://localhost:5000/api/post\n...\n< HTTP/1.0 401 UNAUTHORIZED\n...\n{\n  \"msg\": \"Missing Authorization Header\"\n}\n```", "```py\nimport datetime\n\nfrom flask import abort\nfrom flask_restful import Resource, fields, marshal_with\nfrom flask_jwt_extended import jwt_required, get_jwt_identity\nfrom webapp.blog.models import db, Post, Tag\nfrom webapp.auth.models import User\n...\n\npost_fields = {\n 'id': fields.Integer(),\n    'author': fields.String(attribute=lambda x: x.user.username),\n    'title': fields.String(),\n    'text': HTMLField(),\n    'tags': fields.List(fields.Nested(nested_tag_fields)),\n    'publish_date': fields.DateTime(dt_format='iso8601')\n}\n\nclass PostApi(Resource):\n    @marshal_with(post_fields)\n    @jwt_required\n    def get(self, post_id=None):\n        if post_id:\n            post = Post.query.get(post_id)\n            if not post:\n                abort(404)\n            return post\n        else:\n            posts = Post.query.all()\n            return posts\n```", "```py\ntry:\n # Try python3\n    from html.parser import HTMLParser\nexcept Exception as e:\n # Nop python2\n    from HTMLParser import HTMLParser\n\nfrom flask_restful import fields\n\nclass HTMLStripper(HTMLParser):\n    fed = list()\n\n    def __init__(self):\n        self.reset()\n        self.fed = []\n\n    def handle_data(self, d):\n        self.fed.append(d)\n\n    def get_data(self):\n        return ''.join(self.fed)\n\ndef strip_tags(html):\n    s = HTMLStripper()\n    s.feed(html)\n    return s.get_data()\n\nclass HTMLField(fields.Raw):\n    def format(self, value):\n        return strip_tags(str(value))\n```", "```py\n...\nfrom flask_restful import reqparse \n...\npost_get_parser = reqparse.RequestParser() \npost_get_parser.add_argument( \n  'page', \n  type=int, \n  location=['args', 'headers'], \n  required=False,\n) \n```", "```py\nfrom .parsers import post_get_parser \n...\nclass PostApi(Resource): \n  @marshal_with(post_fields)\n  @jwt_required \n  def get(self, post_id=None):\n    if post_id: \n      .. \n      return post\n    else:\n      args = post_get_parser.parse_args() \n      page = args['page'] or 1 \n      ...\n      posts = Post.query.order_by( \n        Post.publish_date.desc() \n      ).paginate(page, current_app.config.get('POSTS_PER_PAGE', 10)) \n      ...\n      return posts.items \n```", "```py\npost_get_parser = reqparse.RequestParser()\npost_get_parser.add_argument('page', type=int, location=['args', 'headers'])\npost_get_parser.add_argument('user', type=str, location=['args', 'headers'])\n```", "```py\nclass PostApi(Resource):\n    @marshal_with(post_fields)\n    @jwt_required\n    def get(self, post_id=None):\n        if post_id:\n            ...\n            return post\n        else:\n            args = post_get_parser.parse_args()\n            page = args['page'] or 1\n\n            if args['user']:\n user = User.query.filter_by(username=args['user']).first()\n if not user:\n abort(404)\n\n                posts = user.posts.order_by(\n                    Post.publish_date.desc()\n         ).paginate(page, current_app.config.get('POSTS_PER_PAGE', 10))\n            else:\n                posts = Post.query.order_by(\n                    Post.publish_date.desc()\n        ).paginate(page, current_app.config.get('POSTS_PER_PAGE', 10))\n          return posts.items\n```", "```py\n$ curl -H \"Authorization: Bearer $ACCESS\" \"http://localhost:5000/api/post/1\"\n```", "```py\n$ curl -H \"Authorization: Bearer $ACCESS\" \"http://localhost:5000/api/post\"\n```", "```py\n$ curl -H \"Authorization: Bearer $ACCESS\" \"http://localhost:5000/api/post?page=2\"\n```", "```py\n$ curl -H \"Authorization: Bearer $ACCESS\" \"http://localhost:5000/api/post?user=user1\"\n```", "```py\npost_post_parser = reqparse.RequestParser()\npost_post_parser.add_argument(\n    'title',\n    type=str,\n    required=True,\n    help=\"Title is required\",\n    location=('json', 'values')\n)\npost_post_parser.add_argument(\n    'text',\n    type=str,\n    required=True,\n    help=\"Body text is required\",\n    location=('json', 'values')\n)\npost_post_parser.add_argument(\n    'tags',\n    type=str,\n    action='append',\n    location=('json', 'values')\n)\n```", "```py\nimport datetime \nfrom .parsers import ( \n  post_get_parser, \n  post_post_parser \n) \nfrom webapp.models import db, User, Post, Tag \nclass PostApi(Resource): \n  ... \n  @jwt_required\n  def post(self, post_id=None):  \n      args = post_post_parser.parse_args(strict=True) \n      new_post = Post(args['title'])\n      new_post.user_id = get_jwt_identity()\n      new_post.text = args['text'] \n      if args['tags']:\n        add_tags_to_post(post, args['tags']) \n      db.session.add(new_post) \n      db.session.commit()\n      return {'id': new_post.id}, 201\n```", "```py\n$ curl -X POST -H \"Authorization: Bearer $ACCESS\" -H \"Content-Type: application/json\" -d '{\"title\":\"Text Title\", \"text\":\"Some text\"}' \"http://localhost:5000/api/post\" {\n    \"id\": 310\n}\n```", "```py\npost_put_parser = reqparse.RequestParser()\npost_put_parser.add_argument(\n    'title',\n    type=str,\n    location=('json', 'values')\n)\npost_put_parser.add_argument(\n    'text',\n    type=str,\n    location=('json', 'values')\n)\npost_put_parser.add_argument(\n    'tags',\n    type=str,\n    action='append',\n    location=('json', 'values')\n)\n```", "```py\n...\ndef add_tags_to_post(post, tags_list):\n    for item in tags_list:\n        tag = Tag.query.filter_by(title=item).first()\n\n        # Add the tag if it exists. If not, make a new tag\n        if tag:\n            post.tags.append(tag)\n        else:\n            new_tag = Tag(item)\n            post.tags.append(new_tag)\n...\n\n    @jwt_required\n    def put(self, post_id=None):\n        if not post_id:\n            abort(400)\n        post = Post.query.get(post_id)\n        if not post:\n            abort(404)\n        args = post_put_parser.parse_args(strict=True)\n        if get_jwt_identity() != post.user_id:\n            abort(403)\n        if args['title']:\n            post.title = args['title']\n        if args['text']:\n            post.text = args['text']\n        if args['tags']:\n            print(\"Tags %s\" % args['tags'])\n            add_tags_to_post(post, args['tags'])\n\n        db.session.merge(post)\n        db.session.commit()\n        return {'id': post.id}, 201\n```", "```py\n$ curl -X PUT -H \"Authorization: Bearer $ACCESS\" -H \"Content-Type: application/json\" \\\n -d '{\"title\": \"Modified From REST\", \"text\": \"this is from REST\", \"tags\": [\"tag1\",\"tag2\"]}' \\\nhttp://localhost:5000/api/post/5\n```", "```py\n@jwt_required\ndef delete(self, post_id=None):\n    if post_id:\n        abort(400)\n    post = Post.query.get(post_id)\n    if not post:\n        abort(404)\n    if get_jwt_identity() != post.user_id:\n        abort(401)\n    db.session.delete(post)\n    db.session.commit()\n    return \"\", 204\n```", "```py\n$ curl -X DELETE -H \"Authorization: Bearer $ACCESS\"\nhttp://localhost:5000/api/post/102\n```"]