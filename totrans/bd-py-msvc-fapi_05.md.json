["```py\npip list \n```", "```py\npip install SQLAlchemy\n```", "```py\npip install psycopg2\n```", "```py\nfrom sqlalchemy import create_engine\nDB_URL =   \n   \"postgresql://postgres:admin2255@localhost:5433/fcms\"\nengine = create_engine(DB_URL)\n```", "```py\nfrom sqlalchemy.orm import sessionmaker\nengine = create_engine(DB_URL)\nSessionFactory = sessionmaker(autocommit=False, \n                     autoflush=False, bind=engine)\n```", "```py\nfrom sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base()\n```", "```py\nfrom sqlalchemy import Time, Boolean, Column, Integer, \n    String, Float, Date, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom db_config.sqlalchemy_connect import Base\nclass Signup(Base):\n    __tablename__ = \"signup\"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column('username', String, unique=False, \n                       index=False)\n    password = Column('password' ,String, unique=False, \n                       index=False)\n```", "```py\nclass Login(Base): \n    __tablename__ = \"login\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=False, index=False)\n    password = Column(String, unique=False, index=False)\n    date_approved = Column(Date, unique=False, index=False)\n    user_type = Column(Integer, unique=False, index=False)\n\n    trainers = relationship('Profile_Trainers', \n         back_populates=\"login\", uselist=False)\n    members = relationship('Profile_Members', \n         back_populates=\"login\", uselist=False)\n```", "```py\nclass Profile_Trainers(Base):\n    __tablename__ = \"profile_trainers\"\n    id = Column(Integer, ForeignKey('login.id'), \n         primary_key=True, index=True, )\n    firstname = Column(String, unique=False, index=False)\n    … … … … …\n    … … … … …\n    login = relationship('Login', \n         back_populates=\"trainers\")\n    gclass = relationship('Gym_Class', \n         back_populates=\"trainers\")\n\nclass Profile_Members(Base): \n    __tablename__ = \"profile_members\"\n    id = Column(Integer, ForeignKey('login.id'), \n         primary_key=True, index=True)\n    firstname = Column(String, unique=False, index=False)\n    lastname = Column(String, unique=False, index=False)\n    age = Column(Integer, unique=False, index=False)\n    … … … … … …\n    … … … … … …\n    trainer_id = Column(Integer, \n        ForeignKey('profile_trainers.id'), unique=False, \n        index=False)\n    login = relationship('Login', back_populates=\"members\")\n    attendance = relationship('Attendance_Member', \n          back_populates=\"members\")\n    gclass = relationship('Gym_Class', \n          back_populates=\"members\") \n```", "```py\nclass Attendance_Member(Base):\n    __tablename__ = \"attendance_member\"\n    id = Column(Integer, primary_key=True, index=True)\n    member_id = Column(Integer, \n        ForeignKey('profile_members.id'), unique=False, \n        index=False)\n    timeout = Column(Time, unique=False, index=False)\n    timein = Column(Time, unique=False, index=False)\n    date_log = Column(Date, unique=False, index=False)\n\n    members = relationship('Profile_Members', \n             back_populates=\"attendance\")\n```", "```py\nfrom typing import Dict, List, Any\nfrom sqlalchemy.orm import Session\nfrom models.data.sqlalchemy_models import Signup\nfrom sqlalchemy import desc\nclass SignupRepository: \n\n    def __init__(self, sess:Session):\n        self.sess:Session = sess\n\n    def insert_signup(self, signup: Signup) -> bool: \n        try:\n            self.sess.add(signup)\n            self.sess.commit()\n        except: \n            return False \n        return True\n```", "```py\n    def update_signup(self, id:int, \n           details:Dict[str, Any]) -> bool: \n       try:\n             self.sess.query(Signup).\n                 filter(Signup.id == id).update(details)     \n             self.sess.commit() \n       except: \n           return False \n       return True\n```", "```py\n    def delete_signup(self, id:int) -> bool: \n        try:\n           signup = self.sess.query(Signup).\n                  filter(Signup.id == id).delete()\n           self.sess.commit()\n        except: \n            return False \n        return True\n```", "```py\n    def get_all_signup(self):\n        return self.sess.query(Signup).all() \n    def get_all_signup_where(self, username:str):\n        return self.sess.\n             query(Signup.username, Signup.password).\n             filter(Signup.username == username).all() \n\n    def get_all_signup_sorted_desc(self):\n        return self.sess.\n            query(Signup.username,Signup.password).\n            order_by(desc(Signup.username)).all()\n\n    def get_signup(self, id:int): \n        return self.sess.query(Signup).\n             filter(Signup.id == id).one_or_none()\n```", "```py\nclass LoginMemberRepository(): \n    def __init__(self, sess:Session):\n        self.sess:Session = sess\n\n    def join_login_members(self):\n        return self.sess.\n           query(Login, Profile_Members).\n             filter(Login.id == Profile_Members.id).all()\n```", "```py\nclass MemberAttendanceRepository(): \n    def __init__(self, sess:Session):\n        self.sess:Session = sess\n\n    def join_member_attendance(self):\n        return self.sess.\n           query(Profile_Members, Attendance_Member).\n           join(Attendance_Member).all()\n    def outer_join_member(self):\n         return self.sess.\n            query(Profile_Members, Attendance_Member).\n            outerjoin(Attendance_Member).all()\n```", "```py\nfrom fastapi import APIRouter, Depends\nfrom fastapi.responses import JSONResponse\nfrom sqlalchemy.orm import Session\nfrom db_config.sqlalchemy_connect import SessionFactory\nfrom repository.sqlalchemy.signup import SignupRepository,\n   LoginMemberRepository, MemberAttendanceRepository\nfrom typing import List\nrouter = APIRouter()\ndef sess_db():\n    db = SessionFactory()\n    try:\n        yield db\n    finally:\n        db.close()\n```", "```py\n@router.post(\"/signup/add\")\ndef add_signup(req: SignupReq, \n          sess:Session = Depends(sess_db)):\n    repo:SignupRepository = SignupRepository(sess)\n    signup = Signup(password= req.password, \n                 username=req.username,id=req.id)\n    result = repo.insert_signup(signup)\n    if result == True:\n        return signup\n    else: \n        return JSONResponse(content={'message':'create \n                  signup problem encountered'}, \n                status_code=500)\n```", "```py\n@router.get(\"/signup/list\", response_model=List[SignupReq])\ndef list_signup(sess:Session = Depends(sess_db)):\n    repo:SignupRepository = SignupRepository(sess)\n    result = repo.get_all_signup()\n    return result\n@router.get(\"/signup/list/{id}\", response_model=SignupReq)\ndef get_signup(id:int, sess:Session = Depends(create_db)): \n    repo:SignupRepository = SignupRepository(sess)\n    result = repo.get_signup(id)\n    return result\n```", "```py\nfrom pydantic import BaseModel\nclass SignupReq(BaseModel): \n    id : int \n    username: str \n    password: str \n\n    class Config:\n        orm_mode = True\n```", "```py\nfrom sqlalchemy import Table, Column, Integer, String, \n               MetaData\nfrom db_config.sqlalchemy_connect import engine\nmeta = MetaData()\nsignup = Table(\n   'signup', meta, \n   Column('id', Integer, primary_key = True, \n          nullable=False), \n   Column('username', String, unique = False, \n          nullable = False), \n   Column('password', String, unique = False, \n          nullable = False), \n)\nmeta.create_all(bind=engine)\n```", "```py\npip install aiopg\n```", "```py\npip install asyncpg\n```", "```py\nfrom sqlalchemy.ext.asyncio import create_async_engine\nDB_URL = \n  \"postgresql+asyncpg://postgres:admin2255@\n       localhost:5433/fcms\"\nengine = create_async_engine(DB_URL, future=True, \n               echo=True)\n```", "```py\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import sessionmaker\nengine = create_async_engine(DB_URL, future=True, \n               echo=True)\nAsynSessionFactory = sessionmaker(engine, \n       expire_on_commit=False, class_=AsyncSession)\n```", "```py\nfrom typing import List, Dict, Any\nfrom sqlalchemy import update, delete, insert\nfrom sqlalchemy.future import select\nfrom sqlalchemy.orm import Session\nfrom models.data.sqlalchemy_async_models import \n            Attendance_Member\nclass AttendanceRepository: \n\n    def __init__(self, sess:Session):\n        self.sess:Session = sess\n\n    async def insert_attendance(self, attendance: \n           Attendance_Member) -> bool: \n        try:\n            sql = insert(Attendance_Member).\n                   values(id=attendance.id, \n                     member_id=attendance.member_id, \n                     timein=attendance.timein, \n                     timeout=attendance.timeout, \n                     date_log=attendance.date_log)\n            sql.execution_options(\n                   synchronize_session=\"fetch\")\n            await self.sess.execute(sql)        \n        except: \n            return False \n        return True\n```", "```py\n    async def update_attendance(self, id:int, \n           details:Dict[str, Any]) -> bool: \n       try:\n           sql = update(Attendance_Member).where(\n              Attendance_Member.id == id).values(**details)\n           sql.execution_options(\n              synchronize_session=\"fetch\")\n           await self.sess.execute(sql)\n\n       except: \n           return False \n       return True\n\n    async def delete_attendance(self, id:int) -> bool: \n        try:\n           sql = delete(Attendance_Member).where(\n                Attendance_Member.id == id)\n           sql.execution_options(\n                synchronize_session=\"fetch\")\n           await self.sess.execute(sql)\n        except: \n            return False \n        return True\n```", "```py\n    async def get_all_attendance(self):\n        q = await self.sess.execute(\n               select(Attendance_Member))\n        return q.scalars().all()\n\n    async def get_attendance(self, id:int): \n        q = await self.sess.execute(\n           select(Attendance_Member).\n             where(Attendance_Member.member_id == id))\n        return q.scalars().all()\n    async def check_attendance(self, id:int): \n        q = await self.sess.execute(\n          select(Attendance_Member).\n              where(Attendance_Member.id == id))\n        return q.scalar()        \n```", "```py\nfrom fastapi import APIRouter\nfrom db_config.sqlalchemy_async_connect import \n          AsynSessionFactory\nfrom repository.sqlalchemy.attendance import \n         AttendanceRepository\nfrom models.requests.attendance import AttendanceMemberReq\nfrom models.data.sqlalchemy_async_models import \n         Attendance_Member\nrouter = APIRouter()\n@router.post(\"/attendance/add\")\nasync def add_attendance(req:AttendanceMemberReq ):\n    async with AsynSessionFactory() as sess:\n        async with sess.begin():\n            repo = AttendanceRepository(sess)\n            attendance = Attendance_Member(id=req.id,  \n                member_id=req.member_id, \n                timein=req.timein, timeout=req.timeout, \n                date_log=req.date_log)\n            return await repo.insert_attendance(attendance)\n\n@router.patch(\"/attendance/update\")\nasync def update_attendance(id:int, \n                     req:AttendanceMemberReq ):\n    async with AsynSessionFactory() as sess:\n        async with sess.begin():\n            repo = AttendanceRepository(sess)\n            attendance_dict = req.dict(exclude_unset=True)\n            return await repo.update_attendance(id, \n                    attendance_dict)\n@router.delete(\"/attendance/delete/{id}\")\nasync def delete_attendance(id:int): \n     async with AsynSessionFactory() as sess:\n        async with sess.begin():\n            repo = AttendanceRepository(sess)\n            return await repo.delete_attencance(id)\n@router.get(\"/attendance/list\")\nasync def list_attendance():\n     async with AsynSessionFactory() as sess:\n        async with sess.begin():\n            repo = AttendanceRepository(sess)\n            return await repo.get_all_attendance()\n```", "```py\npip install gino\n```", "```py\nfrom gino import Gino\ndb = Gino()\n```", "```py\nfrom db_config.gino_connect import db\nclass Signup(db.Model):\n    __tablename__ = \"signup\"\n    id = db.Column(db.Integer, primary_key=True, \n               index=True)\n    username = db.Column('username',db.String, \n               unique=False, index=False)\n    password = db.Column('password',db.String, \n               unique=False, index=False)\n```", "```py\nclass Profile_Trainers(db.Model):\n    __tablename__ = \"profile_trainers\"\n    id = db.Column(db.Integer, db.ForeignKey('login.id'), \n              primary_key=True, index=True)\n    firstname = db.Column(db.String, unique=False, \n              index=False)\n    … … … … … …\n    shift = db.Column(db.Integer, unique=False, \n              index=False)\nclass Gym_Class(db.Model): \n    __tablename__ = \"gym_class\"\n    id = db.Column(db.Integer, primary_key=True, \n          index=True)\n    member_id = db.Column(db.Integer, \n       db.ForeignKey('profile_members.id'), unique=False, \n         index=False)\n    trainer_id = db.Column(db.Integer, \n      db.ForeignKey('profile_trainers.id'), unique=False,\n         index=False)\n    approved = db.Column(db.Integer, unique=False, \n       index=False)\n```", "```py\nclass Login(db.Model): \n    __tablename__ = \"login\"\n    id = db.Column(db.Integer, primary_key=True, \n               index=True)\n    username = db.Column(db.String, unique=False, \n               index=False)\n    … … … … … …\n    def __init__(self, **kw):\n        super().__init__(**kw)\n        self._child = None\n    @property\n    def child(self):\n        return self._child\n    @child.setter\n    def child(self, child):\n        self._child = child\nclass Profile_Members(db.Model): \n    __tablename__ = \"profile_members\"\n    id = db.Column(db.Integer, db.ForeignKey('login.id'), \n          primary_key=True, index=True)\n    … … … … … … \n    weight = db.Column(db.Float, unique=False, index=False)\n    trainer_id = db.Column(db.Integer, \n        db.ForeignKey('profile_trainers.id'), unique=False, \n            index=False)\n\n    def __init__(self, **kw):\n        super().__init__(**kw)\n        self._children = set()\n    @property\n    def children(self):\n        return self._children\n    @children.setter\n    def children(self, child):\n        self._children.add(child)\n```", "```py\nfrom models.data.gino_models import Profile_Members, \n           Profile_Trainers, Gym_Class\nfrom datetime import date, time\nfrom typing import List, Dict, Any\nclass TrainerRepository: \n\n    async def insert_trainer(self, \n             details:Dict[str, Any]) -> bool: \n        try:\n            await Profile_Trainers.create(**details)\n        except Exception as e: \n            print(e)\n            return False \n        return True\n```", "```py\n        async def update_trainer(self, id:int, \n                     details:Dict[str, Any]) -> bool: \n           try:\n                trainer = await Profile_Trainers.get(id)\n                await trainer.update(**details).apply()       \n           except: \n               return False \n           return True\n    ```", "```py\nProfile_Trainers.update.values(**details).\n     where(Profile_Trainers.id == id).gino.status()\n```", "```py\n    async def delete_trainer(self, id:int) -> bool: \n        try:\n           trainer = await Profile_Trainers.get(id)\n           await trainer.delete()        \n        except: \n            return False \n        return True\n```", "```py\n        async def get_all_member(self):\n            return await Profile_Trainers.query.gino.all()\n        async def get_member(self, id:int): \n                return await Profile_Trainers.get(id)\n    ```", "```py\nquery = db.select([Profile_Trainers])\nq = query.execution_options(\n         loader=ModelLoader(Profile_Trainers))\nusers = await q.gino.all()\n```", "```py\nclass GymClassRepository:\n\n    async def join_classes_trainer(self):\n        query = Gym_Class.join(Profile_Trainers).select()\n        result = await query.gino.load(Gym_Class.\n            distinct(Gym_Class.id).\n                load(parent=Profile_Trainers)).all()\n        return result \n\n    async def join_member_classes(self):\n        query = Gym_Class.join(Profile_Members).select()\n        result = await query.gino.load(Profile_Members.\n           distinct(Profile_Members.id).\n              load(add_child=Gym_Class)).all()\n        return result\n```", "```py\n    async def join_classes_member(self):\n        result = await \n          Profile_Members.load(add_child=Gym_Class)\n           .query.gino.all()\n```", "```py\nfrom fastapi import APIRouter, Depends\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\nfrom db_config.gino_connect import db\nfrom models.requests.trainers import ProfileTrainersReq\nfrom repository.gino.trainers import TrainerRepository\nasync def sess_db():\n    await db.set_bind(\n     \"postgresql+asyncpg://\n       postgres:admin2255@localhost:5433/fcms\")\n\nrouter = APIRouter(dependencies=[Depends(sess_db)])\n@router.patch(\"/trainer/update\" )\nasync def update_trainer(id:int, req: ProfileTrainersReq): \n    mem_profile_dict = req.dict(exclude_unset=True)\n    repo = TrainerRepository()\n    result = await repo.update_trainer(id, \n           mem_profile_dict)\n    if result == True: \n        return req \n    else: \n        return JSONResponse(\n    content={'message':'update trainer profile problem \n         encountered'}, status_code=500)\n\n@router.get(\"/trainer/list\")\nasync def list_trainers(): \n    repo = TrainerRepository()\n    return await repo.get_all_member()\n```", "```py\nfrom sqlalchemy import Table, Column, Integer, String, \n           MetaData, ForeignKey'\nimport gino\nfrom gino.schema import GinoSchemaVisitor\nmetadata = MetaData()\nsignup = Table(\n    'signup', metadata,\n    Column('id', Integer, primary_key=True),\n    Column('username', String),\n    Column('password', String),\n)\n   … … … … …\nasync def db_create_tbl():\n    engine = await gino.create_engine(DB_URL)\n    await GinoSchemaVisitor(metadata).create_all(engine)\n```", "```py\npip install pony\n```", "```py\npip install psycopg2\n```", "```py\nfrom pony.orm import  Database\ndb = Database(\"postgres\", host=\"localhost\", port=\"5433\", \n  user=\"postgres\", password=\"admin2255\", database=\"fcms\")\n```", "```py\nfrom pony.orm import  Database, PrimaryKey, Required, \n         Optional, Set\nfrom db_config.pony_connect import db\nfrom datetime import date, time\n\nclass Signup(db.Entity):\n    _table_ = \"signup\"\n    id = PrimaryKey(int)\n    username = Required(str, unique=True, max_len=100, \n         nullable=False, column='username')\n    password = Required(str, unique=Fals, max_len=100, \n         nullable=False, column='password')\n```", "```py\nid = PrimaryKey(int, auto=True)\n```", "```py\nclass Login(db.Entity): \n    _table_ = \"login\"\n    id = PrimaryKey(int)\n    … … … … … …\n    date_approved = Required(date)\n    user_type = Required(int)\n\n    trainers = Optional(\"Profile_Trainers\", reverse=\"id\")\n    members = Optional(\"Profile_Members\", reverse=\"id\")\n```", "```py\nclass Profile_Trainers(db.Entity):\n    _table_ = \"profile_trainers\"\n    id = PrimaryKey(\"Login\", reverse=\"trainers\")\n    firstname = Required(str)\n    … … … … … …\n    tenure = Required(float)\n    shift = Required(int)\n\nmembers = Set(\"Profile_Members\", \n           reverse=\"trainer_id\")\n    gclass = Set(\"Gym_Class\", reverse=\"trainer_id\")\nclass Profile_Members(db.Entity): \n    _table_ = \"profile_members\"\n    id = PrimaryKey(\"Login\", reverse=\"members\")\n    firstname = Required(str)\n    … … … … … …\ntrainer_id = Required(\"Profile_Trainers\", \n            reverse=\"members\")\n    … … … … … …\n```", "```py\nclass Gym_Class(db.Entity): \n    _table_ = \"gym_class\"\n    id = PrimaryKey(int)\n    member_id = Required(\"Profile_Members\", \n         reverse=\"gclass\")\n    trainer_id = Required(\"Profile_Trainers\", \n         reverse=\"gclass\")\n    approved = Required(int)\ndb.generate_mapping()\n```", "```py\nfrom pony.orm import db_session, left_join\nfrom models.data.pony_models import Profile_Members, \n            Gym_Class, Profile_Trainers\nfrom datetime import date, time\nfrom typing import List, Dict, Any\nfrom models.requests.members import ProfileMembersReq \nclass MemberRepository: \n\n    def insert_member(self, \n            details:Dict[str, Any]) -> bool: \n        try:\n            with db_session:\n                Profile_Members(**details)\n        except: \n            return False \n        return True\n```", "```py\n    def update_member(self, id:int, \n               details:Dict[str, Any]) -> bool: \n       try:\n          with db_session:\n            profile = Profile_Members[id]\n            profile.id = details[\"id\"]\n            … … … … … …\n            profile.trainer_id = details[\"trainer_id\"]\n       except: \n           return False \n       return True\n```", "```py\n    def delete_member(self, id:int) -> bool: \n        try:\n           with db_session: \n               Profile_Members[id].delete()\n        except: \n            return False \n        return True\n```", "```py\n    def get_all_member(self):\n        with db_session:\n            members = Profile_Members.select()\n            result = [ProfileMembersReq.from_orm(m) \n                 for m in members]\n            return result\n\n    def get_member(self, id:int): \n        with db_session:\n            login = Login.get(lambda l: l.id == id)\n            member = Profile_Members.get(\n                lambda m: m.id == login)\n            result = ProfileMembersReq.from_orm(member)\n        return result\n```", "```py\nfrom typing import List, Any\nfrom pydantic import BaseModel, validator\nclass ProfileMembersReq(BaseModel): \n    id: Any\n    firstname: str\n    lastname: str\n    age: int\n    height: float\n    weight: float\n    membership_type: str\n    trainer_id: Any\n\n    gclass: List\n\n    @validator('gclass', pre=True, \n         allow_reuse=True, check_fields=False)\n    def gclass_set_to_list(cls, values):\n        return [v.to_dict() for v in values]\n    @validator('trainer_id', pre=True, \n         allow_reuse=True, check_fields=False)\n    def trainer_object_to_map(cls, values):\n        return values.to_dict()\n\n    class Config:\n        orm_mode = True\n```", "```py\nclass MemberGymClassRepository:\n\n    def join_member_class(self): \n      with db_session: \n        generator_args = (m for m in Profile_Members \n              for g in m.gclass)\n        joins = left_join(tuple_args)        \n        result = [ProfileMembersReq.from_orm(m) \n              for m in joins ]\n        return result\n```", "```py\npip install peewee\n```", "```py\npip install psycopg2\n```", "```py\nfrom peewee import _ConnectionState\nfrom contextvars import ContextVar\ndb_state_default = {\"closed\": None, \"conn\": None, \n         \"ctx\": None, \"transactions\": None}\ndb_state = ContextVar(\"db_state\", \n          default=db_state_default.copy())\nclass PeeweeConnectionState(_ConnectionState):\n    def __init__(self, **kwargs):\n        super().__setattr__(\"_state\", db_state)\n        super().__init__(**kwargs)\n    def __setattr__(self, name, value):\n        self._state.get()[name] = value\n    def __getattr__(self, name):\n        return self._state.get()[name]\n```", "```py\nfrom peewee import PostgresqlDatabase\ndb = PostgresqlDatabase(\n    'fcms',\n    user='postgres',\n    password='admin2255',\n    host='localhost',\n    port=5433, \n)\ndb._state = PeeweeConnectionState()\n```", "```py\nfrom peewee import Model, ForeignKeyField, CharField, \n   IntegerField, FloatField, DateField, TimeField\nfrom db_config.peewee_connect import db\nclass Signup(Model):\n    username = CharField(unique=False, index=False)\n    password = CharField(unique=False, index=False)\n\n    class Meta:\n      database = db\n      db_table = 'signup'\n```", "```py\nclass Profile_Trainers(Model):\nlogin = ForeignKeyField(Login, \n         backref=\"trainers\", unique=True)\n    … … … … … …\n    shift = IntegerField(unique=False, index=False)\n\n    class Meta:\n      database = db\n      db_table = 'profile_trainers'\n```", "```py\nclass Login(Model): \n    username = CharField(unique=False, index=False)\n    … … … … … …\n    user_type = IntegerField(unique=False, index=False)\n\n    class Meta:\n      database = db\n      db_table = 'login'\n\nclass Gym_Class(Model): \n    member = ForeignKeyField(Profile_Members, \n          backref=\"members\")\n    trainer = ForeignKeyField(Profile_Trainers, \n          backref=\"trainers\")\n    approved = IntegerField(unique=False, index=False)\n\n    class Meta:\n      database = db\n      db_table = 'gym_class'\ndb.connect()\ndb.create_tables([Signup, Login, Profile_Members, \n     Profile_Trainers, Attendance_Member, Gym_Class],\n           safe=True)\n```", "```py\nfrom typing import Dict, List, Any\nfrom models.data.peewee_models import Login, \n   Profile_Trainers, Gym_Class, Profile_Members\nfrom datetime import date\nclass LoginRepository:\n\n    def insert_login(self, id:int, user:str, passwd:str, \n          approved:date, type:int) -> bool: \n        try:\n            Login.create(id=id, username=user, \n                password=passwd, date_approved=approved, \n                user_type=type)\n        except Exception as e: \n           return False \n        return True\n```", "```py\n    def update_login(self, id:int, \n              details:Dict[str, Any]) -> bool: \n       try:\n           query = Login.update(**details).\n                  where(Login.id == id)\n           query.execute()\n       except: \n           return False \n       return True\n```", "```py\n    def delete_login(self, id:int) -> bool: \n        try:\n           query = Login.delete_by_id(id)\n        except: \n            return False \n        return True\n```", "```py\n    def get_all_login(self):\n        return list(Login.select())\n\n    def get_login(self, id:int): \n        return Login.get(Login.id == id)\n```", "```py\nfrom peewee import JOIN\nclass LoginTrainersRepository:\n\n    def join_login_trainers(self): \n        return list(Profile_Trainers.\n          select(Profile_Trainers, Login).join(Login))\nclass MemberGymClassesRepository:\n    def outer_join_member_gym(self): \n        return list(Profile_Members.\n          select(Profile_Members,Gym_Class).join(Gym_Class, \n                    join_type=JOIN.LEFT_OUTER))\n```", "```py\nclass IQueryHandler: \n    pass \nclass ICommandHandler: \n    pass\n```", "```py\nfrom typing import Dict, Any\nclass ProfileTrainerCommand: \n\n    def __init__(self): \n        self._details:Dict[str,Any] = dict()\n\n    @property\n    def details(self):\n        return self._details\n    @details.setter\n    def details(self, details):\n        self._details = details\n```", "```py\nclass ProfileTrainerListQuery: \n\n    def __init__(self): \n        self._records:List[Profile_Trainers] = list()\n\n    @property\n    def records(self):\n        return self._records\n    @records.setter\n    def records(self, records):\n        self._records = records\n```", "```py\nfrom cqrs.handlers import ICommandHandler\nfrom repository.gino.trainers import TrainerRepository\nfrom cqrs.commands import ProfileTrainerCommand\nclass AddTrainerCommandHandler(ICommandHandler): \n\n    def __init__(self): \n        self.repo:TrainerRepository = TrainerRepository()\n\n    async def handle(self, \n             command:ProfileTrainerCommand) -> bool:\n        result = await self.repo.\n               insert_trainer(command.details)\n        return result\n```", "```py\nclass ListTrainerQueryHandler(IQueryHandler): \n    def __init__(self): \n        self.repo:TrainerRepository = TrainerRepository()\n        self.query:ProfileTrainerListQuery = \n             ProfileTrainerListQuery()\n\n    async def handle(self) -> ProfileTrainerListQuery:\n        data = await self.repo.get_all_member();\n        self.query.records = data\n        return self.query\n```", "```py\nfrom cqrs.commands import ProfileTrainerCommand\nfrom cqrs.queries import ProfileTrainerListQuery\nfrom cqrs.trainers.command.create_handlers import \n      AddTrainerCommandHandler\nfrom cqrs.trainers.query.query_handlers import \n      ListTrainerQueryHandler\nrouter = APIRouter(dependencies=[Depends(get_db)])\n@router.post(\"/trainer/add\" )\nasync def add_trainer(req: ProfileTrainersReq): \n    handler = AddTrainerCommandHandler()\n    mem_profile = dict()\n    mem_profile[\"id\"] = req.id\n    … … … … … …\n    mem_profile[\"shift\"] = req.shift\n    command = ProfileTrainerCommand()\n    command.details = mem_profile\n    result = await handler.handle(command)\n    if result == True: \n        return req \n    else: \n        return JSONResponse(content={'message':'create \n          trainer profile problem encountered'}, \n            status_code=500)\n@router.get(\"/trainer/list\")\nasync def list_trainers(): \n    handler = ListTrainerQueryHandler()\n    query:ProfileTrainerListQuery = await handler.handle() \n    return query.records\n```"]