- en: Control Statements and Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will understand the principles and working of different
    control statements, namely, `if`, `if...else`, and `if...elif...else`. We will
    also be understanding the principles and working of various loops, namely, the `for`
    and `while` loops. We will also get acquainted with the `xrange` function and
    statements such as `break`, `continue`, and `pass`.
  prefs: []
  type: TYPE_NORMAL
- en: Control statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, most of the beginners must be wondering what are control statements. Control
    statements are nothing but a series of statements that a program follows to get
    the desired results. Let's first try to understand what are control statements
    and why they form an essential part of any programming language. You might have
    used the ATM machine to withdraw money. What do you do when you insert your debit
    card? The very first thing you watch on the screen are the options to chose from
    the menu. Now you have to perform certain actions, else your card would be turned
    away after some time, in case you keep the computer waiting for a long time. When
    you choose to withdraw, you have to provide the correct amount, which is required
    to be withdrawn from the machine. If you provide the wrong amount, the computer
    will immediately give the message "Please enter the correct amount". What happened
    here? Did you notice? Here computer is merely following instructions. It has been
    ordered to accept only the correct amount and prompt an error message on input
    of the wrong amount. This is one such scenario where you can see the use of control
    statements.
  prefs: []
  type: TYPE_NORMAL
- en: The if and if...else statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*If* can be understood as metaphorical English *what if* which most people
    use in their day to day life. What if this doesn''t happen? If I were to become
    a billionaire. If this match is drawn we are out of the champions'' league. If
    Churchill had not come to power Battle of Britain would have been lost. If this
    car doesn''t start, use the other one. We are loaded with numerous examples from
    across the globe on usage of *if*. Same is the case with programming languages.
    Majority of the programming languages have control statements and you will find
    majority of them use the keyword `if` in their control statements. Python is no
    different and also facilitates the usage of if.  Let''s understand with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For entering inputs through command line `raw_input()` function is used in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Any function or control statement block in Python is started by placing the
    colon at the end of the line. Colon here marks the beginning of the `if` block
    and `print` statement begins after one tab space right after the colon. Programmers
    usually make a mistake by mixing space with tab right after the colon.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, after password is entered, the interpreter checks
    for the entered string and compares with `"MI6"`; if password entered is correct,
    it prints `Welcome Mr. Bond.`. If the password is wrong, it will skip the `if`
    block and terminate the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image-1-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But merely using only if doesn't give much of the choice to the interpreter
    and it has to terminate the program. What if the interpreter is given an alternative
    for a failed `if` test. In that case, `else` can be used to give choice to the
    interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take an example to understand `if` and `else` conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, if the password is entered wrongly, the interpreter will immediately
    execute statement inside the `else` block. Here, the control statement is divided
    into two blocks one is the `if` block and the other is the `else` block. At one
    time, the interpreter will execute either of the two blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image2-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The if...elif...else statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If there are a series of actions to be executed, then the `if...elif...else`
    block can be used. Most of the programming languages provide the `if...else if...else`
    control block, while Python has shortened `else if` to `elif` but the principle
    remains the same, that is, it divides the complete control block into number of
    blocks for specific action to be executed. It can be interpreted with day-to-day
    examples, for example, if this debit card doesn't work, use this credit card,
    else pay with a cheque.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, in the syntax, we are illustrating a series of branching statements under
    different conditions which is also called **conditional branching** in any language.
    First, we encounter an `if` block and if the condition inside the `if` block is
    satisfied or becomes true, only then will the `if` block be executed. If while executing
    the condition inside the `if` block is not satisfied, then the control is handed
    over to the immediate condition statement, that is, `elif` block, where the condition
    would be checked differently, and, finally, we have the `else` block, where if
    all the conditions before the `else` condition fail, then the `else` block will
    process the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try to put college grades into use and understand how we can put
    the grades through programming:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Grade | Score |'
  prefs: []
  type: TYPE_TB
- en: '| A | All grades above 4 |'
  prefs: []
  type: TYPE_TB
- en: '| B | All grades above 3 and below 3.5 |'
  prefs: []
  type: TYPE_TB
- en: '| C | All grades above 2.5 and below 3 |'
  prefs: []
  type: TYPE_TB
- en: '| D | All grades below 2.5 |'
  prefs: []
  type: TYPE_TB
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have declared a variable `num` to store the marks entered and we have
    created a set of conditions, which will check the marks input. For example, if
    the marks entered are greater than `4`, then the code inside the `if` condition
    would be executed and the `letter` variable would be assigned the value `''A''`
    or grade A. Likewise, if the marks entered are less than or equal to `4`, but
    greater than `3`, then the `if` condition would fail and the control will be passed
    onto the `elif num>3` conditional block and the `letter` variable would be assigned
    the value of `''B''` or the grades B would be assigned to the entered marks. Here,
    the interpreter checks for the entered input and executes the correct block as
    per the correct marks entered. We entered marks `4.5` and the interpreter gives
    us grade `A` as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image3-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There might be a situation where you might require to run a single block of
    code a number of times, in that situation, loops come in handy. Loops come handy
    in situations such as iterating through data structures in any programming language
    or traversing through large sets of data to filter out junk data, followed by
    certain keywords followed by alphanumeric characters followed by certain special
    characters.
  prefs: []
  type: TYPE_NORMAL
- en: Types of loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two types of loops, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Definite**: In this case, the code of block runs for a defined number of
    times. This is useful when the programmer exactly knows in how many counts the
    task will be executed or let''s assume that he knows the number of elements inside
    the data structure. For example, the strength of a classroom.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Indefinite**: In this case, the code of block runs until the condition is
    true. This is useful where the count is unknown. For example, trying to figure
    out the number of times London appears in a literary article.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before further delving into loops, let's try to understand the `range()` and
    `xrange()` functions in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `range()` function comes handy when you want to generate a list on-the-fly.
    Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/image4-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, `range(10)` will generate a list, which has elements starting from `0` upto
    `9`. `range(2,10)` means the list will be generated starting from `2` and will
    have elements upto `9`. The `range(2,10,3)` means the list will be generated starting
    with `2` and having a difference of `3` after each element.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `xrange()` is quite similar to `range()` except that `xrange()` releases
    or frees the memory when not in use, whereas `range()` doesn't release the memory.
  prefs: []
  type: TYPE_NORMAL
- en: Definite loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is a loop which is executed a set number of times. The best example that
    can be thought of a definite loop is a `for` loop. Let''s take a look at the `for`
    loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first line of code in the `for` loop is sometimes called the **loop header**.
    An integer expression specifies the number of times the loop has to run. The colon
    `:` ends the loop header. Python's `for` loop block or body consists of the statements
    below the header that will be executed a set number of times. The `for` loop body
    must be indented. The statements inside the loop body are executed sequentially
    on each run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try some example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, in the preceding example, we are trying to print `"Hello all"` four times.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image5-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, a is any variable or iterating variable or counter variable whose initial
    value is `0` and will execute `4` times. Let''s take another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here the value of `count` will be printed one at a time and always on a new
    line.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image6-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding examples, the output is printed on a new line, but the output
    can be formatted to be printed in one line. For this, comma or `,` can be used
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The use of `,` will give you an output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image7-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s consider some more examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We are interested to print the product times count. For this, we create a variable
    product whose value we initialize with `1` and generate a list of numbers from
    `1` to `5`, but not including `5`. For one iteration of the `for` loop, the product
    is multiplied the number of times the `count` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the `count` value is nothing but the numbers from our list. We will be
    getting an output as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image-8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take another example of the `for` loop. Here, we are interested in printing
    each character in a given string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For every single iteration of the `for` loop variable, `each` will store the
    value of every single character and will print them one by one in a single line,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image9-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Indefinite loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we learned about definite loop, now we will understand what is an indefinite
    loop? Indefinite loop is a loop that will continue to run infinite number of times
    until and unless it is asked to stop. In order to execute an indefinite loop,
    we use the `while` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This loop will continue to execute until the condition is met and will terminate
    once the condition is not met. Let''s try to understand with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are interested to validate a checking bank account. We take a variable
    `checking_acc`, which stores the value of a checking bank account. We take input
    from the user for his/her checking bank account number and store it in the `num`
    variable. We check the condition in the `while` loop and compare the input entered
    with our existing record of checking bank account. Here, until the correct account
    number is entered, the condition will keep on failing. So, in our case, if checking
    account is falsely entered, the user will get the message `Wrong number` and will
    be prompted to enter the correct number. Once he enters the correct number, the
    condition becomes true and the `while` loop terminates. You can see the output
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image10-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'But there is a little tweak with which the `while` loop can be used and made
    to behave like a definite loop. Let''s try to understand with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In our previous example, either the condition needs to be failed or it needs
    to be passed for the `while` loop to terminate. But if we insert a condition inside
    the `while` loop in such a manner that it will run for that definite time, then
    we can make the `while` loop to behave like a definite loop. In the preceding
    example, we are interested to print the sum of numbers from `1` to `10`. We are
    achieving the same result using the `for` loop as well, when using the `while`
    loop. The `for` loop is simple and self-explanatory. To achieve similar results,
    we create a `counter` variable just before the `while` loop and initialize the
    variable with the value of `1`. Now, until the value of `counter` is less than
    `10`, it will continue to execute. Inside the `while` loop, we will increment
    the value of `counter` by `1` for every iteration. Thus, the loop will run only
    `10` times and on the tenth iteration, it will terminate. In the succeeding screenshot,
    the output of the `for` loop is displayed one by one on a new line, while the
    output of the `while` loop is displayed in a single line to differentiate the
    execution of both the loops (that is,  `for` and `while`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image11-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Both the `for` loop and `while` loop produce the same outcome. But the `while`
    loop block is a bit large, containing extra statements. The `counter` is the loop
    control variable, which must be explicitly initialized before the loop header.
    The `while` loop requires extra effort to make it work as a definite loop, but
    there would be several situations where the `while` loop will be the only solution
    available at hand.
  prefs: []
  type: TYPE_NORMAL
- en: The while True and break statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execution of an infinite `while` loop can be broken by the use of the `break`
    statement. Let''s understand with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we intend to print the sum of numbers being entered. In the preceding
    example, the `while` loop condition has been set to be Boolean, that is, `True`.
    In this case, the `while` loop will continue to execute infinitely as the condition
    will always be true. However, we can break this loop by setting up a condition
    check inside the `while` loop and then using a `break` statement. So, the loop
    will continue to run until the user keeps on entering numbers, but it will terminate
    as soon as the number `0` is entered. Here, once `0` is entered, the `if` condition
    inside the `while` loop will check and as the number entered is `0`, the code
    inside the `if` block will execute, which is a `break` statement. This will terminate
    the loop and print the sum of the numbers entered as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image12-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, the `while` loop has Boolean value `True`, which is an entry condition
    for the `while` loop. In this case, the loop would execute at least once. But
    there is another way to achieve the preceding outcome without using the `break`
    statement. Let''s have look at another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We have achieved the same output without using the `break` statement. Here,
    we have used a `flag` variable instead of a `break` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image13-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The initial entry point of the `while` loop is the value of the `flag` variable
    as `1`. Until the `flag` variable is `0`, the loop will continue to execute. When
    `0` is entered, the value of `flag` variable becomes `0` and the loop terminates.
  prefs: []
  type: TYPE_NORMAL
- en: The break statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `break` statements are used to change the flow of any block of statements.
    There might be a situation where we might need to break the loop in between; in
    that scenario, using the `break` statement will help us achieve our goal. Let''s
    have a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have created a list of attractions available in the city of Vienna.
    We take a variable `first` and assign it a value as `"Donau-insel"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image14-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We want to print all the places of attraction in Vienna. But there is a twist.
    We would like to stop the moment `Donau-insel` occurs in the list. Hence, for
    every iteration of the `for` loop, the `if` block will check each and every element
    inside the list and compare it with the value we have given to compare, that is,
    `"Donau-insel"`. So the program will print all the names appearing before `Donau-insel`,
    and the moment `Donau-insel` occurs, the `break` statement terminates the loop.
    There can be several situations where the `break` statement can be handy such
    as searching for a keyword in a stack of words, searching a palindrome, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Nested loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'They are loops inside loops and there could be more than two loops each within
    another loop. In most situations, we generally use the `break` statement to break
    the inner loop while the outer loop will continue to execute. Let''s try to understand
    its working with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are interested to print all the city''s names and are not interested
    to print anything after character `o`. For this, we create a list of cities and
    we use the `for` loop to iterate through the list. We will use the second `for`
    loop to eliminate any characters appearing after character o. This condition is
    checked inside the second `for` loop, which is nested inside the first `for` loop
    with the help of the `if` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image15-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this case, the inner loop breaks whenever char `o` is encountered, while
    the outer loop continues to execute.
  prefs: []
  type: TYPE_NORMAL
- en: The continue and pass statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the `break` statement terminates, the entire loop `continue` statement
    will skip that step and the loop will continue thereafter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the list of movies but *Les Miserables* is the name of a play and we
    would like to skip this name and want the program to print all the names of the
    movies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `for` loop iterates through each element of the list and the `if` block
    checks the condition for the occurrence of `"Les Miserables Play"`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image16-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, the `continue` statement just skipped `"Les Miserables Play"` and the
    loop continued to print the rest of the names of the movies.
  prefs: []
  type: TYPE_NORMAL
- en: The pass statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There can be scenarios in various programming problems, where you might want
    to reserve a loop for future use. We may not want to write anything inside the
    block, but at the same time the block cannot have an empty body. In this case,
    we use the `pass` statement to construct a body that does nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are wondering what is `def fun()`, it''s nothing but defining the function
    with an empty body. In this case, the body does nothing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image17-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are wondering what functions are, then, do not worry, we will be covering
    them in a separate chapter on functions.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started with understanding the concept of control statements and why they
    are essential in our day-to-day programming problems. We had a chance to look
    into two functions `range()` and `xrange()` that are used to generate a list on-the-fly.
    We learned about definite loops and indefinite loops. We also learned about the
    difference between definite and indefinite loops. Under definite loops, we learned
    about various control statements such as `if`, `if...else`, `if...elif...else`,
    and `for` loop. While, in indefinite loops, we had a chance to study the while
    statement and how we can also use the `while` loop to work as a definite loop.
    We saw the usage of while with the `break` statement and without the `break` statement.
    We also looked into the working of the `continue` and `pass` statements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about functions and scope of variables.
  prefs: []
  type: TYPE_NORMAL
