- en: Control Statements and Loops
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制语句和循环
- en: In this chapter, we will understand the principles and working of different
    control statements, namely, `if`, `if...else`, and `if...elif...else`. We will
    also be understanding the principles and working of various loops, namely, the `for`
    and `while` loops. We will also get acquainted with the `xrange` function and
    statements such as `break`, `continue`, and `pass`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解不同控制语句的原则和工作原理，包括 `if`、`if...else` 和 `if...elif...else`。我们还将了解各种循环（如
    `for` 和 `while` 循环）的原则和工作原理。我们还将熟悉 `xrange` 函数以及 `break`、`continue` 和 `pass` 等语句。
- en: Control statements
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制语句
- en: Now, most of the beginners must be wondering what are control statements. Control
    statements are nothing but a series of statements that a program follows to get
    the desired results. Let's first try to understand what are control statements
    and why they form an essential part of any programming language. You might have
    used the ATM machine to withdraw money. What do you do when you insert your debit
    card? The very first thing you watch on the screen are the options to chose from
    the menu. Now you have to perform certain actions, else your card would be turned
    away after some time, in case you keep the computer waiting for a long time. When
    you choose to withdraw, you have to provide the correct amount, which is required
    to be withdrawn from the machine. If you provide the wrong amount, the computer
    will immediately give the message "Please enter the correct amount". What happened
    here? Did you notice? Here computer is merely following instructions. It has been
    ordered to accept only the correct amount and prompt an error message on input
    of the wrong amount. This is one such scenario where you can see the use of control
    statements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，大多数初学者可能都在想控制语句是什么。控制语句不过是程序遵循以获得期望结果的一系列语句。让我们首先尝试理解什么是控制语句以及为什么它们是任何编程语言的基本组成部分。你可能使用过自动柜员机（ATM）来取款。当你插入借记卡时，你会做什么？你首先会注意到屏幕上的选项菜单。现在你必须执行某些操作，否则你的卡在一段时间后会因为长时间等待而被拒绝。当你选择取款时，你必须提供正确的金额，这是从机器中需要取出的金额。如果你提供了错误的金额，计算机将立即显示消息“请输入正确的金额”。这里发生了什么？你注意到了吗？这里计算机只是在遵循指令。它被命令只接受正确的金额，并在输入错误金额时提示错误信息。这就是你可以看到控制语句使用的一个场景。
- en: The if and if...else statement
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: if 和 if...else 语句
- en: '*If* can be understood as metaphorical English *what if* which most people
    use in their day to day life. What if this doesn''t happen? If I were to become
    a billionaire. If this match is drawn we are out of the champions'' league. If
    Churchill had not come to power Battle of Britain would have been lost. If this
    car doesn''t start, use the other one. We are loaded with numerous examples from
    across the globe on usage of *if*. Same is the case with programming languages.
    Majority of the programming languages have control statements and you will find
    majority of them use the keyword `if` in their control statements. Python is no
    different and also facilitates the usage of if.  Let''s understand with an example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*If* 可以理解为隐喻性的英语 *what if*，这是大多数人日常生活中都会使用的。如果这件事没有发生怎么办？如果我成为亿万富翁。如果这场比赛打平，我们将被淘汰出冠军联赛。如果丘吉尔没有掌权，不列颠之战就会失败。如果这辆车不能启动，就使用另一辆。我们全球范围内有无数的例子说明了
    *if* 的用法。编程语言也是如此。大多数编程语言都有控制语句，你会发现它们大多数都使用 `if` 关键字。Python 也不例外，并且也方便了 `if`
    的使用。让我们通过一个例子来理解：'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For entering inputs through command line `raw_input()` function is used in Python.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，通过命令行输入输入时使用 `raw_input()` 函数。
- en: Any function or control statement block in Python is started by placing the
    colon at the end of the line. Colon here marks the beginning of the `if` block
    and `print` statement begins after one tab space right after the colon. Programmers
    usually make a mistake by mixing space with tab right after the colon.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的任何函数或控制语句块都是以在行尾放置冒号开始的。这里的冒号标志着 `if` 块的开始，而 `print` 语句在冒号后一个制表符空间处开始。程序员通常会在冒号后立即混合空格和制表符，这是一个常见的错误。
- en: 'In the preceding example, after password is entered, the interpreter checks
    for the entered string and compares with `"MI6"`; if password entered is correct,
    it prints `Welcome Mr. Bond.`. If the password is wrong, it will skip the `if`
    block and terminate the program:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，在输入密码后，解释器会检查输入的字符串并与 `"MI6"` 进行比较；如果输入的密码正确，它会打印 `欢迎，邦德先生`。如果密码错误，它将跳过
    `if` 块并终止程序：
- en: '![](img/image-1-4.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image-1-4.jpg)'
- en: But merely using only if doesn't give much of the choice to the interpreter
    and it has to terminate the program. What if the interpreter is given an alternative
    for a failed `if` test. In that case, `else` can be used to give choice to the
    interpreter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但仅仅使用`if`并不能给解释器提供很多选择，它必须终止程序。如果解释器被提供了一个失败的`if`测试的替代方案会怎样呢？在这种情况下，可以使用`else`来给解释器提供选择。
- en: '**Syntax**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s take an example to understand `if` and `else` conditions:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解`if`和`else`条件：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, if the password is entered wrongly, the interpreter will immediately
    execute statement inside the `else` block. Here, the control statement is divided
    into two blocks one is the `if` block and the other is the `else` block. At one
    time, the interpreter will execute either of the two blocks:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，如果密码输入错误，解释器将立即执行`else`块内的语句。这里，控制语句被分为两个块，一个是`if`块，另一个是`else`块。在某一时刻，解释器将执行这两个块中的任意一个：
- en: '![](img/image2-3.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image2-3.jpg)'
- en: The if...elif...else statement
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`if...elif...else`语句'
- en: If there are a series of actions to be executed, then the `if...elif...else`
    block can be used. Most of the programming languages provide the `if...else if...else`
    control block, while Python has shortened `else if` to `elif` but the principle
    remains the same, that is, it divides the complete control block into number of
    blocks for specific action to be executed. It can be interpreted with day-to-day
    examples, for example, if this debit card doesn't work, use this credit card,
    else pay with a cheque.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一系列要执行的操作，那么可以使用`if...elif...else`块。大多数编程语言提供了`if...else if...else`控制块，而Python将`else
    if`缩短为`elif`，但原理保持不变，即它将整个控制块划分为多个块，以执行特定的操作。可以用日常例子来解释，例如，如果这张借记卡不能用，就使用这张信用卡，否则用支票支付。
- en: '**Syntax**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, in the syntax, we are illustrating a series of branching statements under
    different conditions which is also called **conditional branching** in any language.
    First, we encounter an `if` block and if the condition inside the `if` block is
    satisfied or becomes true, only then will the `if` block be executed. If while executing
    the condition inside the `if` block is not satisfied, then the control is handed
    over to the immediate condition statement, that is, `elif` block, where the condition
    would be checked differently, and, finally, we have the `else` block, where if
    all the conditions before the `else` condition fail, then the `else` block will
    process the code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，在语法中，我们展示了在不同条件下的一系列分支语句，这在任何语言中也被称为**条件分支**。首先，我们遇到一个`if`块，如果`if`块内的条件得到满足或变为真，那么才会执行`if`块。如果在执行`if`块内的条件时没有得到满足，那么控制权将传递给紧接的条件语句，即`elif`块，在那里条件会被不同地检查，最后，我们有`else`块，如果所有在`else`条件之前的条件都失败了，那么`else`块将处理代码。
- en: 'Now, let''s try to put college grades into use and understand how we can put
    the grades through programming:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试将大学成绩应用于实际，并了解我们如何通过编程来处理成绩：
- en: '| Grade | Score |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 等级 | 分数 |'
- en: '| A | All grades above 4 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| A | 所有等级在4以上 |'
- en: '| B | All grades above 3 and below 3.5 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| B | 所有等级在3以上和3.5以下 |'
- en: '| C | All grades above 2.5 and below 3 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| C | 所有等级在2.5以上和3以下 |'
- en: '| D | All grades below 2.5 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| D | 所有等级在2.5以下 |'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here we have declared a variable `num` to store the marks entered and we have
    created a set of conditions, which will check the marks input. For example, if
    the marks entered are greater than `4`, then the code inside the `if` condition
    would be executed and the `letter` variable would be assigned the value `''A''`
    or grade A. Likewise, if the marks entered are less than or equal to `4`, but
    greater than `3`, then the `if` condition would fail and the control will be passed
    onto the `elif num>3` conditional block and the `letter` variable would be assigned
    the value of `''B''` or the grades B would be assigned to the entered marks. Here,
    the interpreter checks for the entered input and executes the correct block as
    per the correct marks entered. We entered marks `4.5` and the interpreter gives
    us grade `A` as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们声明了一个变量`num`来存储输入的分数，并创建了一组条件，这些条件将检查输入的分数。例如，如果输入的分数大于`4`，那么`if`条件内的代码将被执行，并将`letter`变量赋值为`'A'`或等级A。同样，如果输入的分数小于或等于`4`，但大于`3`，那么`if`条件将失败，控制权将传递到`elif
    num>3`条件块，并将`letter`变量赋值为`'B'`或等级B将被分配给输入的分数。在这里，解释器检查输入的输入，并根据输入的正确分数执行正确的块。我们输入了分数`4.5`，解释器给出了等级`A`，如下面的截图所示：
- en: '![](img/image3-3.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片3-3](img/image3-3.jpg)'
- en: Loops
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环
- en: There might be a situation where you might require to run a single block of
    code a number of times, in that situation, loops come in handy. Loops come handy
    in situations such as iterating through data structures in any programming language
    or traversing through large sets of data to filter out junk data, followed by
    certain keywords followed by alphanumeric characters followed by certain special
    characters.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有这样的情况，你需要多次运行一段代码，在这种情况下，循环就派上用场了。循环在诸如在任意编程语言中遍历数据结构或遍历大量数据以过滤掉垃圾数据等情况下很有用，随后跟随着某些关键字，再接着是字母数字字符，最后是某些特殊字符。
- en: Types of loops
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环类型
- en: 'There are two types of loops, namely:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 循环有两种类型，即：
- en: '**Definite**: In this case, the code of block runs for a defined number of
    times. This is useful when the programmer exactly knows in how many counts the
    task will be executed or let''s assume that he knows the number of elements inside
    the data structure. For example, the strength of a classroom.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**确定型**：在这种情况下，代码块运行固定次数。当程序员确切知道任务将执行多少次或假设他知道数据结构中的元素数量时，这很有用。例如，教室的人数。'
- en: '**Indefinite**: In this case, the code of block runs until the condition is
    true. This is useful where the count is unknown. For example, trying to figure
    out the number of times London appears in a literary article.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**不确定型**：在这种情况下，代码块运行直到条件为真。这在计数未知的情况下很有用。例如，试图找出伦敦在一篇文学文章中出现的次数。'
- en: Before further delving into loops, let's try to understand the `range()` and
    `xrange()` functions in Python.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步深入研究循环之前，让我们尝试理解 Python 中的 `range()` 和 `xrange()` 函数。
- en: 'The `range()` function comes handy when you want to generate a list on-the-fly.
    Its syntax is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想动态生成一个列表时，`range()` 函数很有用。其语法如下：
- en: '**Syntax**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/image4-2.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片4-2](img/image4-2.jpg)'
- en: Here, `range(10)` will generate a list, which has elements starting from `0` upto
    `9`. `range(2,10)` means the list will be generated starting from `2` and will
    have elements upto `9`. The `range(2,10,3)` means the list will be generated starting
    with `2` and having a difference of `3` after each element.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`range(10)` 将生成一个列表，其元素从 `0` 到 `9`。`range(2,10)` 表示列表将从 `2` 开始生成，并将有元素到
    `9`。`range(2,10,3)` 表示列表将从 `2` 开始生成，每个元素之后有 `3` 的差值。
- en: '**Syntax**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `xrange()` is quite similar to `range()` except that `xrange()` releases
    or frees the memory when not in use, whereas `range()` doesn't release the memory.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`xrange()` 与 `range()` 非常相似，除了 `xrange()` 在不使用时释放或释放内存，而 `range()` 不释放内存。'
- en: Definite loop
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定循环
- en: 'It is a loop which is executed a set number of times. The best example that
    can be thought of a definite loop is a `for` loop. Let''s take a look at the `for`
    loop:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个执行固定次数的循环。可以想到的确定循环的最佳例子是 `for` 循环。让我们看看 `for` 循环：
- en: '**Syntax**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first line of code in the `for` loop is sometimes called the **loop header**.
    An integer expression specifies the number of times the loop has to run. The colon
    `:` ends the loop header. Python's `for` loop block or body consists of the statements
    below the header that will be executed a set number of times. The `for` loop body
    must be indented. The statements inside the loop body are executed sequentially
    on each run.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环的第一行代码有时被称为**循环头**。一个整型表达式指定了循环需要运行的次数。冒号 `:` 结束循环头。Python 的 `for`
    循环块或主体由头部下方的语句组成，这些语句将被执行固定次数。`for` 循环的主体必须缩进。循环体内的语句在每个运行中按顺序执行。'
- en: 'Let''s try some example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些例子：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, in the preceding example, we are trying to print `"Hello all"` four times.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们正在尝试打印 `"Hello all"` 四次。
- en: '![](img/image5-3.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片5-3](img/image5-3.jpg)'
- en: 'Here, a is any variable or iterating variable or counter variable whose initial
    value is `0` and will execute `4` times. Let''s take another example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，a 是任何变量或迭代变量或计数变量，其初始值为 `0`，并将执行 `4` 次。让我们再看另一个例子：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here the value of `count` will be printed one at a time and always on a new
    line.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`count` 的值将逐个打印，并且始终在新的一行上。
- en: '![](img/image6-2.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片6-2](img/image6-2.jpg)'
- en: 'In the preceding examples, the output is printed on a new line, but the output
    can be formatted to be printed in one line. For this, comma or `,` can be used
    as shown:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，输出被打印在新的一行上，但输出可以被格式化以在一行中打印。为此，可以使用逗号 `,`，如下所示：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The use of `,` will give you an output similar to this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `,` 将会得到类似以下的输出：
- en: '![](img/image7-2.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片7-2](img/image7-2.jpg)'
- en: 'Let''s consider some more examples:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一些更多的例子：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We are interested to print the product times count. For this, we create a variable
    product whose value we initialize with `1` and generate a list of numbers from
    `1` to `5`, but not including `5`. For one iteration of the `for` loop, the product
    is multiplied the number of times the `count` value.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对打印乘积乘以`count`感兴趣。为此，我们创建了一个名为`product`的变量，其值初始化为`1`，并生成一个从`1`到`5`但不包括`5`的数字列表。对于`for`循环的一次迭代，乘积将乘以`count`值的次数。
- en: 'Here, the `count` value is nothing but the numbers from our list. We will be
    getting an output as shown here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`count`值只是我们列表中的数字。我们将得到如下所示的输出：
- en: '![](img/image-8.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image-8.jpg)'
- en: 'Let''s take another example of the `for` loop. Here, we are interested in printing
    each character in a given string:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再举一个`for`循环的例子。在这里，我们感兴趣的是打印给定字符串中的每个字符：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For every single iteration of the `for` loop variable, `each` will store the
    value of every single character and will print them one by one in a single line,
    as shown here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`for`循环变量的每一次迭代，`each`将存储每个字符的值，并将它们逐个打印在同一行中，如下所示：
- en: '![](img/image9-2.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image9-2.jpg)'
- en: Indefinite loop
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不定循环
- en: So far we learned about definite loop, now we will understand what is an indefinite
    loop? Indefinite loop is a loop that will continue to run infinite number of times
    until and unless it is asked to stop. In order to execute an indefinite loop,
    we use the `while` statement.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们学习了定循环，现在我们将了解不定循环是什么？不定循环是一个会无限次运行的循环，直到被要求停止。为了执行不定循环，我们使用`while`语句。
- en: '**Syntax**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This loop will continue to execute until the condition is met and will terminate
    once the condition is not met. Let''s try to understand with an example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环将一直执行，直到满足条件，一旦条件不满足，它将终止。让我们用一个例子来尝试理解：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we are interested to validate a checking bank account. We take a variable
    `checking_acc`, which stores the value of a checking bank account. We take input
    from the user for his/her checking bank account number and store it in the `num`
    variable. We check the condition in the `while` loop and compare the input entered
    with our existing record of checking bank account. Here, until the correct account
    number is entered, the condition will keep on failing. So, in our case, if checking
    account is falsely entered, the user will get the message `Wrong number` and will
    be prompted to enter the correct number. Once he enters the correct number, the
    condition becomes true and the `while` loop terminates. You can see the output
    here:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们感兴趣的是验证检查银行账户。我们取一个变量`checking_acc`，它存储检查银行账户的值。我们从用户那里获取他的/她的检查银行账户号码，并将其存储在`num`变量中。我们在`while`循环中检查条件，并将输入的值与我们的现有检查银行账户记录进行比较。在这里，直到输入正确的账户号码，条件才会继续失败。所以，在我们的情况下，如果检查账户被错误输入，用户将收到“错误的号码”的消息，并会被提示输入正确的号码。一旦他输入正确的号码，条件变为真，`while`循环终止。您可以在这里看到输出：
- en: '![](img/image10-2.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image10-2.jpg)'
- en: 'But there is a little tweak with which the `while` loop can be used and made
    to behave like a definite loop. Let''s try to understand with an example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有一个小技巧可以使`while`循环被用来表现得像定循环。让我们用一个例子来尝试理解：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In our previous example, either the condition needs to be failed or it needs
    to be passed for the `while` loop to terminate. But if we insert a condition inside
    the `while` loop in such a manner that it will run for that definite time, then
    we can make the `while` loop to behave like a definite loop. In the preceding
    example, we are interested to print the sum of numbers from `1` to `10`. We are
    achieving the same result using the `for` loop as well, when using the `while`
    loop. The `for` loop is simple and self-explanatory. To achieve similar results,
    we create a `counter` variable just before the `while` loop and initialize the
    variable with the value of `1`. Now, until the value of `counter` is less than
    `10`, it will continue to execute. Inside the `while` loop, we will increment
    the value of `counter` by `1` for every iteration. Thus, the loop will run only
    `10` times and on the tenth iteration, it will terminate. In the succeeding screenshot,
    the output of the `for` loop is displayed one by one on a new line, while the
    output of the `while` loop is displayed in a single line to differentiate the
    execution of both the loops (that is,  `for` and `while`):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的例子中，`while`循环要终止，条件要么需要失败，要么需要通过。但如果我们以这种方式在`while`循环内插入一个条件，使其运行特定的时间，那么我们可以使`while`循环表现得像是一个确定性的循环。在先前的例子中，我们感兴趣的是打印从`1`到`10`的数字之和。我们使用`for`循环也能达到相同的结果，当使用`while`循环时。`for`循环简单且易于理解。为了达到类似的结果，我们在`while`循环之前创建一个`counter`变量，并将变量初始化为`1`。现在，直到`counter`的值小于`10`，它将继续执行。在`while`循环内部，我们将`counter`的值每次迭代增加`1`。因此，循环将只运行`10`次，在第`10`次迭代时将终止。在随后的屏幕截图上，`for`循环的输出逐行显示，而`while`循环的输出显示在单行中，以区分两个循环（即`for`和`while`）的执行（即）：
- en: '![](img/image11-2.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片11-2](img/image11-2.jpg)'
- en: Both the `for` loop and `while` loop produce the same outcome. But the `while`
    loop block is a bit large, containing extra statements. The `counter` is the loop
    control variable, which must be explicitly initialized before the loop header.
    The `while` loop requires extra effort to make it work as a definite loop, but
    there would be several situations where the `while` loop will be the only solution
    available at hand.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环和`while`循环产生相同的输出。但`while`循环块稍微大一些，包含额外的语句。`counter`是循环控制变量，必须在循环头之前显式初始化。`while`循环需要额外的努力才能使其作为一个确定性的循环工作，但会有几种情况，`while`循环将是唯一可用的解决方案。'
- en: The while True and break statement
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`while True`和`break`语句'
- en: 'Execution of an infinite `while` loop can be broken by the use of the `break`
    statement. Let''s understand with an example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`break`语句可以中断无限`while`循环的执行。让我们通过一个例子来理解：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here we intend to print the sum of numbers being entered. In the preceding
    example, the `while` loop condition has been set to be Boolean, that is, `True`.
    In this case, the `while` loop will continue to execute infinitely as the condition
    will always be true. However, we can break this loop by setting up a condition
    check inside the `while` loop and then using a `break` statement. So, the loop
    will continue to run until the user keeps on entering numbers, but it will terminate
    as soon as the number `0` is entered. Here, once `0` is entered, the `if` condition
    inside the `while` loop will check and as the number entered is `0`, the code
    inside the `if` block will execute, which is a `break` statement. This will terminate
    the loop and print the sum of the numbers entered as shown here:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们的目的是打印输入的数字之和。在先前的例子中，`while`循环的条件已被设置为布尔值，即`True`。在这种情况下，由于条件始终为真，`while`循环将无限期地继续执行。然而，我们可以通过在`while`循环内设置条件检查并使用`break`语句来打破这个循环。因此，循环将一直运行，直到用户继续输入数字，但一旦输入数字`0`，它将终止。在这里，一旦输入`0`，`while`循环内的`if`条件将检查，由于输入的数字是`0`，`if`块内的代码将执行，这是一个`break`语句。这将终止循环，并打印出输入的数字之和，如下所示：
- en: '![](img/image12-1.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片12-1](img/image12-1.jpg)'
- en: 'Here, the `while` loop has Boolean value `True`, which is an entry condition
    for the `while` loop. In this case, the loop would execute at least once. But
    there is another way to achieve the preceding outcome without using the `break`
    statement. Let''s have look at another example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`while`循环具有布尔值`True`，这是`while`循环的入口条件。在这种情况下，循环至少会执行一次。但还有另一种方法可以实现前面的结果，而不使用`break`语句。让我们看看另一个例子：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We have achieved the same output without using the `break` statement. Here,
    we have used a `flag` variable instead of a `break` statement:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有使用`break`语句就达到了相同的效果。在这里，我们使用了一个`flag`变量而不是`break`语句：
- en: '![](img/image13-1.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片13-1](img/image13-1.jpg)'
- en: The initial entry point of the `while` loop is the value of the `flag` variable
    as `1`. Until the `flag` variable is `0`, the loop will continue to execute. When
    `0` is entered, the value of `flag` variable becomes `0` and the loop terminates.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环的初始入口点是`flag`变量的值`1`。直到`flag`变量为`0`，循环将继续执行。当输入`0`时，`flag`变量的值变为`0`，循环终止。'
- en: The break statement
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`break`语句'
- en: 'The `break` statements are used to change the flow of any block of statements.
    There might be a situation where we might need to break the loop in between; in
    that scenario, using the `break` statement will help us achieve our goal. Let''s
    have a look:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`break`语句用于改变任何代码块中的流程。可能存在一种情况，我们可能需要在循环中中断；在这种情况下，使用`break`语句将帮助我们实现目标。让我们看看：'
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here we have created a list of attractions available in the city of Vienna.
    We take a variable `first` and assign it a value as `"Donau-insel"`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个维也纳市可用的景点列表。我们取一个变量`first`并将其值设置为`"Donau-insel"`：
- en: '![](img/image14-1.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片14-1](img/image14-1.jpg)'
- en: We want to print all the places of attraction in Vienna. But there is a twist.
    We would like to stop the moment `Donau-insel` occurs in the list. Hence, for
    every iteration of the `for` loop, the `if` block will check each and every element
    inside the list and compare it with the value we have given to compare, that is,
    `"Donau-insel"`. So the program will print all the names appearing before `Donau-insel`,
    and the moment `Donau-insel` occurs, the `break` statement terminates the loop.
    There can be several situations where the `break` statement can be handy such
    as searching for a keyword in a stack of words, searching a palindrome, and so
    on.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要打印维也纳的所有景点。但是有一个转折。我们希望在列表中出现`Donau-insel`时停止。因此，对于`for`循环的每一次迭代，`if`块将检查列表中的每个元素，并将其与我们给出的比较值进行比较，即`"Donau-insel"`。所以程序将打印出在`Donau-insel`之前出现的所有名称，一旦出现`Donau-insel`，`break`语句将终止循环。`break`语句可以在多种情况下派上用场，例如在单词堆中搜索关键词、搜索回文等。
- en: Nested loops
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套循环
- en: 'They are loops inside loops and there could be more than two loops each within
    another loop. In most situations, we generally use the `break` statement to break
    the inner loop while the outer loop will continue to execute. Let''s try to understand
    its working with an example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 它是循环中的循环，并且可能存在超过两个循环，每个循环都嵌套在另一个循环中。在大多数情况下，我们通常使用`break`语句来中断内循环，而外循环将继续执行。让我们用一个例子来尝试理解其工作原理：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here we are interested to print all the city''s names and are not interested
    to print anything after character `o`. For this, we create a list of cities and
    we use the `for` loop to iterate through the list. We will use the second `for`
    loop to eliminate any characters appearing after character o. This condition is
    checked inside the second `for` loop, which is nested inside the first `for` loop
    with the help of the `if` statement:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们感兴趣的是打印所有城市的名称，并且不感兴趣打印任何在字符`o`之后的名称。为此，我们创建了一个城市列表，并使用`for`循环遍历该列表。我们将使用第二个`for`循环来消除任何在字符`o`之后出现的字符。这个条件在第二个`for`循环中检查，该循环嵌套在第一个`for`循环中，通过`if`语句实现：
- en: '![](img/image15-1.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片15-1](img/image15-1.jpg)'
- en: In this case, the inner loop breaks whenever char `o` is encountered, while
    the outer loop continues to execute.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，内循环在遇到字符`o`时中断，而外循环继续执行。
- en: The continue and pass statements
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`continue`和`pass`语句'
- en: While the `break` statement terminates, the entire loop `continue` statement
    will skip that step and the loop will continue thereafter.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当`break`语句终止时，`continue`语句将跳过该步骤，然后循环将继续执行。
- en: 'Let''s discuss with an example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个例子来讨论：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here is the list of movies but *Les Miserables* is the name of a play and we
    would like to skip this name and want the program to print all the names of the
    movies:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是电影列表，但*悲惨世界*是一部戏剧的名字，我们希望跳过这个名称，并希望程序打印出所有电影名称：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `for` loop iterates through each element of the list and the `if` block
    checks the condition for the occurrence of `"Les Miserables Play"`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环遍历列表中的每个元素，`if`块检查`"Les Miserables Play"`的出现条件。'
- en: '![](img/image16-1.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片16-1](img/image16-1.jpg)'
- en: Here, the `continue` statement just skipped `"Les Miserables Play"` and the
    loop continued to print the rest of the names of the movies.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`continue`语句只是跳过了`"Les Miserables Play"`，循环继续打印其余电影的名称。
- en: The pass statement
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`pass`语句'
- en: There can be scenarios in various programming problems, where you might want
    to reserve a loop for future use. We may not want to write anything inside the
    block, but at the same time the block cannot have an empty body. In this case,
    we use the `pass` statement to construct a body that does nothing.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种编程问题中可能会有这样的场景，你可能希望为将来使用保留一个循环。我们可能不想在块中写任何内容，但同时该块不能有一个空的主体。在这种情况下，我们使用`pass`语句来构建一个不执行任何操作的主体。
- en: '**Syntax**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you are wondering what is `def fun()`, it''s nothing but defining the function
    with an empty body. In this case, the body does nothing:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道`def fun()`是什么，那它只是用空主体定义函数。在这种情况下，主体不执行任何操作：
- en: '![](img/image17-1.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image17-1.jpg)'
- en: If you are wondering what functions are, then, do not worry, we will be covering
    them in a separate chapter on functions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在想什么是函数，那么不要担心，我们将在关于函数的单独章节中介绍它们。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started with understanding the concept of control statements and why they
    are essential in our day-to-day programming problems. We had a chance to look
    into two functions `range()` and `xrange()` that are used to generate a list on-the-fly.
    We learned about definite loops and indefinite loops. We also learned about the
    difference between definite and indefinite loops. Under definite loops, we learned
    about various control statements such as `if`, `if...else`, `if...elif...else`,
    and `for` loop. While, in indefinite loops, we had a chance to study the while
    statement and how we can also use the `while` loop to work as a definite loop.
    We saw the usage of while with the `break` statement and without the `break` statement.
    We also looked into the working of the `continue` and `pass` statements.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从理解控制语句的概念以及为什么它们在我们的日常编程问题中是必不可少的开始。我们有机会查看两个用于动态生成列表的函数`range()`和`xrange()`。我们学习了确定循环和不定循环。我们还学习了确定循环和不定循环之间的区别。在确定循环下，我们学习了各种控制语句，如`if`、`if...else`、`if...elif...else`和`for`循环。而在不定循环中，我们有机会研究`while`语句以及我们如何也可以使用`while`循环作为确定循环。我们看到了带有和不带有`break`语句的`while`的用法。我们还研究了`continue`和`pass`语句的工作原理。
- en: In the next chapter, we will learn about functions and scope of variables.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于函数和变量作用域的内容。
