["```py\n...\nimport pickle\n...\n```", "```py\n...\nclass UTools(object):\n\n    def __init__(self):\n        ...\n\n    def pickle_dump(self, obj=None, filename=None,\n                      proto=1, fimps=None):\n        fobj = open(filename, 'wb')\n        if fimps is not None:\n            pickle.dump(obj, fobj, proto, fimps)\n        else:\n            pickle.dump(obj, fobj)\n        fobj.close()\n...\n```", "```py\n...\n    ...\n    def pickle_load(self, filename=None, fimps=None,\n                        enc=\"ASCII\", err=\"strict\"):\n        fobj = open(filename, 'rb')\n        if fimps is not None:\n            pl = pickle.load(fobj, fimps, encoding=enc,\n                                             errors=err)\n        else:\n            pl = pickle.load(fobj)\n        fobj.close()\n        return pl\n...\n```", "```py\n...\nclass UWindow(UWin):\n\n    def __init__(self, parent=None):\n        ...\n        self.mb3 = UMenu(self.menubar)\n        self.mb3.addAction(\"Pickle\")\n        self.mb3.addAction(\"Shelve\")\n        self.mb3.addAction(\"CSV\")\n        self.mb3.addAction(\"Pandas\")\n        self.mb3.addAction(\"SQLite\")\n        self.mb3.addAction(\"PostgreSQL\")\n        self.mb3.addAction(\"MySQL\")\n        self.mb3.addAction(\"MongoDB\")\n        self.mb3.addAction(\"CouchDB\")\n        self.mb3.setTitle(\"&Data\")\n        ...\n        self.mb4.setTitle(\"&Options\")\n        ...\n        self.mb5.setTitle(\"&Help\")\n        ...\n        self.menubar.addMenu(self.mb5)\n...\n```", "```py\n...\nclass UApp(UWindow, UTools):\n\n    def __init__(self, parent=None):\n        ...\n        self.push_but1 = UBut1(self.frame2)\n        self.push_but1.setText(\"Save\")\n        self.push_but2 = UBut1(self.frame2)\n        self.push_but2.setText(\"Ok\")\n        ...\n        self.layfr2_1 = QtWidgets.QGridLayout()\n        self.layfr2_1.addWidget(self.push_but1, 0, 0, 1, 1)\n        self.layfr2_1.addWidget(self.push_but2, 0, 1, 1, 1)\n        ...\n        self.mb1.triggered.connect(self.files)\n        self.mb3.triggered.connect(self.data)\n        self.mb4.triggered.connect(self.options)\n        self.push_but1.clicked.connect(self.save_data)\n        # self.push_but2.clicked.connect()\n        ...\n        self.actx = \"\"\n    ...\n...\n```", "```py\n...\n    ...\n    def data(self, action):\n        self.text_edit.clear()\n        self.actx = action.text()\n        if self.actx == \"Pickle\":\n            try:\n                txtdata = self.pickle_load(\n                                    filename=r\"data/u_data.py\") \n                self.text_edit.append(str(txtdata))\n                self.stat_bar.showMessage(self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                                     self.actx + ' ' + str(err))\n    ...\n...\n```", "```py\n...\n    ...\n    def save_data(self):\n        self.error = ''\n        uname = self.line_ed1.text()\n        umail = self.line_ed2.text()\n        upass = self.line_ed3.text()\n        udata = self.text_edit.toPlainText()\n        if (uname != '') and (umail != '') and (upass != ''):\n            if self.actx == \"Pickle\":\n                self.user_data1(uname, umail, upass, udata)\n            else:\n                self.user_data1(uname, umail, upass, udata)\n            if self.error != '':\n                self.stat_bar.showMessage(\n                         self.actx + ' ' + str(self.error))\n            else:\n                self.stat_bar.showMessage(\n                                      self.actx + \" saved\")\n    ...\n...\n```", "```py\n...\n    ...\n    def user_data1(self, uname, umail, upass, udata):\n        try:\n            dictd = {\"User Name\": uname,\n                     \"User email\": umail,\n                     \"User password\": upass,\n                     \"User data\": udata}\n            self.pickle_dump(obj=dictd,\n                         filename=r\"data/u_data.py\")\n        except Exception as err:\n            self.error = err\n...\n```", "```py\n...\nimport shelve\n...\n```", "```py\n...\nclass UTools(object):\n\n    def __init__(self):\n        ...\n    def shelve_open(self, filename=None, flag='c',\n                    proto=None, writeback=False):\n        return shelve.open(filename, flag, proto, writeback)\n...\n```", "```py\n...\n    ...\n    def data(self, action):\n        ...\n        if self.actx == \"Pickle\":\n              ...\n        if self.actx == \"Shelve\":\n            try:\n                db = self.shelve_open(filename=\"data/u_data\")\n                self.text_edit.append(\"%s\\n%s\\n%s\\n%s\" % (\n                        db.get(\"User Name\"),\n                        db.get(\"User email\"),\n                        db.get(\"User password\"),\n                        db.get(\"User data\")))\n                self.stat_bar.showMessage(\n                                       self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                                  self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def save_data(self):\n        ...\n            if self.actx == \"Pickle\":\n                ...\n            elif self.actx == \"Shelve\":\n                self.user_data2(uname, umail, upass, udata)\n            ...\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def user_data2(self, uname, umail, upass, udata):\n        try:\n            db = self.shelve_open(filename=\"data/u_data\")\n            db[\"User Name\"] = uname\n            db[\"User email\"] = umail\n            db[\"User password\"] = upass\n            db[\"User data\"] = udata\n            db.close()\n        except Exception as err:\n            self.error = err\n...\n```", "```py\n...\nimport csv\nimport os\n...\n```", "```py\n...\npathf = os.path.dirname(os.path.abspath(__file__))\n...\n```", "```py\n...\nclass UTools(object):\n    ...\n    def csv_write(self, csvfile=None, fieldnames=None, mode='a',\n            newline='', rowdata=None, dialect=csv.excel,\n            delimiter=' ', quotechar='|', lineterminator='\\r\\n'):\n    csvpath = os.path.exists(r\"%s/%s\" % (pathf, csvfile))\n    csvf = open(csvfile, mode)\n    csvw = csv.DictWriter(csvf, fieldnames=fieldnames,\n                    dialect=dialect,delimiter=delimiter,\n                    lineterminator=lineterminator)\n    if csvpath is False:\n        csvw.writeheader()\n    csvdict = {k: v for (k, v) in zip(fieldnames, rowdata)}\n    csvw.writerow(csvdict)\n...\n```", "```py\n...\n    ...\n    def csv_read(self, csvfile=None, mode='r',\n                                    dialect=csv.excel):\n        csvf = open(csvfile, mode)\n        csvr = csv.DictReader(csvf, dialect=dialect,\n                                        delimiter=' ')\n        return csvr\n...\n```", "```py\n...\n    ...\n    def data(self, action):\n        ...\n        if self.actx == \"Shelve\":\n            ...\n        if self.actx == \"CSV\":\n            try:\n                for row in self.csv_read(\n                                  csvfile=\"data/tests.csv\"): \n                    self.text_edit.append(\"%s %s %s %s\" % (\n                            row[\"User_Name\"],\n                            row[\"User_email\"],\n                            row[\"User_password\"],\n                            row[\"User_data\"]))\n                self.stat_bar.showMessage(\n                                     self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                                self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def save_data(self):\n        ...\n            ...\n            elif self.actx == \"Shelve\":\n                ...\n            elif self.actx == \"CSV\":\n                self.user_data3(uname, umail, upass, udata)\n            ...\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def user_data3(self, uname, umail, upass, udata):\n        fnames = [\"User_Name\", \"User_email\",\n                  \"User_password\", \"User_data\"]\n        rdata = [uname, umail, upass, udata[:140]]\n        try:\n            for row in self.csv_read(\n                             csvfile=\"data/tests.csv\"):\n                if (row[\"User_Name\"] == rdata[0]) and (\n                        row[\"User_password\"] == rdata[2]):\n                    rdata = None\n        except Exception:\n            pass\n        if rdata is not None:\n            try: \n                self.csv_write(csvfile=\"data/tests.csv\",\n                               fieldnames=fnames,\n                               rowdata=rdata, delimiter=' ',\n                               lineterminator='\\n')\n            except Exception as err: \n                self.error = err\n...\n```", "```py\nexcept Exception as err:\n    print(err)\n```", "```py\nexcept Exception as err:\n    print err\n```", "```py\nwith pip\n> pip install pandas\nor with conda\n> conda install pandas\n```", "```py\n...\nimport pandas\n...\n```", "```py\n...\nclass UTools(object):\n    ...\n    def pandas_write(self, filename=None, writer=\"csv\",\n            data=None, columns=None, index=None, dtype=object):\n        df = pandas.DataFrame(data, columns=columns,\n                                index=index, dtype=dtype)\n        df.index.name = \"rows\\columns\"\n        if writer == \"csv\":\n            df.to_csv(filename)\n        if writer == \"excel\":\n            df.to_excel(filename)\n        if writer == \"html\":\n            df.to_html(filename)\n        if writer == \"json\":\n            df.to_json(filename)\n        return (df, writer)\n...\n```", "```py\n...\n    ...\n    def pandas_read(self, filename=None, reader=\"csv\", sep=',',\n                delimiter=None, engine='python', maxrows=999):\n        if reader == \"csv\":\n            df = pandas.read_csv(filename, engine=engine)\n        if reader == \"excel\":\n            df = pandas.read_excel(filename)\n        if reader == \"html\":\n            df = pandas.read_html(filename)\n        if reader == \"json\":\n            df = pandas.read_json(filename)\n        pandas.options.display.max_rows = maxrows\n        return (df, reader)\n...\n```", "```py\n...\n    ...\n    def data(self, action):\n        ...\n        if self.actx == \"CSV\":\n            ...\n        if self.actx == \"Pandas\":\n            try:\n                pread = self.pandas_read(\n                              filename=\"data/ptests.csv\",\n                                   reader=\"csv\", sep=',') \n                self.text_edit.append(str(pread[0]))\n                self.stat_bar.showMessage(\n                                   self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                              self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def save_data(self):\n        ...\n            ...\n            elif self.actx == \"CSV\":\n                ...\n            elif self.actx == \"Pandas\":\n                self.user_data4(uname, umail, upass, udata)\n            ...\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def user_data4(self, uname, umail, upass, udata):\n        try:\n            ucolumns = [\"User_Name\", \"User_email\",\n                        \"User_password\", \"User_data\"]\n            uindex = [i for i in range(1000)]\n            udata = {\"User_Name\": range(0, 1000),\n                     \"User_email\": range(0, 1000),\n                     \"User_password\": range(0, 1000),\n                     \"User_data\": range(0, 1000)}\n            self.pandas_write(filename=\"data/ptests.csv\",\n                           writer=\"csv\", data=udata,\n                           columns=ucolumns, index=uindex)\n        except Exception as err:\n            self.error = err\n...\n```", "```py\n...\nimport sqlite3\n...\n```", "```py\n...\npathf = os.path.dirname(os.path.abspath(__file__))\n...\n```", "```py\n...\ndbcon = sqlite3.connect(\"%s/data/u_db.sqlite\" % dbpath)\ndbcursor = dbcon.cursor()\nsql_query = \"\"\"CREATE TABLE IF NOT EXISTS u_dbtable (\n                info_date DEFAULT CURRENT_TIMESTAMP,\n                user_name TEXT UNIQUE,\n                user_email TEXT UNIQUE,\n                user_passw TEXT,\n                user_data TEXT UNIQUE);\"\"\"\ndbcursor.execute(sql_query) \ndbcursor.close()\ndbcon.close()\n...\n```", "```py\n...\nimport sqlite3\n...\n```", "```py\n...\nclass UTools(object):\n    ...\n    def sqlite_insert(self, username=None, email=None,\n                        passw=None, data=None):\n        dbcon = sqlite3.connect(\"%s/data/u_db.sqlite\" % pathf)\n        dbcursor = dbcon.cursor()\n        sql_query = \"\"\"INSERT INTO u_dbtable (user_name, user_email,\n                    user_passw, user_data) VALUES (?, ?, ?, ?);\"\"\"\n        udata = (str(username), str(email), str(passw), str(data))\n        dbcursor.execute(sql_query, udata)\n        dbcon.commit()\n        dbcursor.close()\n        dbcon.close()\n...\n```", "```py\n...\n    ...\n    def sqlite_select(self):\n        dbcon = sqlite3.connect(\"%s/data/u_db.sqlite\" % pathf)\n        dbcursor = dbcon.cursor()\n        sql_query = \"\"\"SELECT info_date, user_name,\n                        user_email, user_passw,\n                        user_data FROM u_dbtable;\"\"\"\n        dbcursor.execute(sql_query)\n        dbdata = dbcursor.fetchall()\n        dbcursor.close()\n        dbcon.close()\n        return dbdata\n...\n```", "```py\n...\n    ...\n    def data(self, action):\n        ...\n        if self.actx == \"Pandas\":\n            ...\n        if self.actx == \"SQLite\":\n            try: \n                dbdata = self.sqlite_select()\n                for dtx in dbdata:\n                    self.text_edit.append(\n                               \"%s\\n%s\\n%s\\n%s\\n%s\" % (\n                                dtx[0], dtx[1],dtx[2],\n                                dtx[3], dtx[4]))\n                self.stat_bar.showMessage(\n                                 self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                            self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def save_data(self):\n        ...\n            ...\n            elif self.actx == \"Pandas\":\n                ...\n            elif self.actx == \"SQLite\":\n                self.user_data5(uname, umail, upass, udata)\n            ...\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def user_data5(self, uname, umail, upass, udata):\n        try:\n            self.sqlite_insert(username=uname, email=umail,\n                               passw=upass, data=udata)\n        except Exception as err:\n            self.error = err\n...\n```", "```py\n> cd Path/to/the/App/App_Pyside2/data\nor\n> cd Path/to/the/App/App_PyQt5/data\n```", "```py\n> Path/to/the/installed/PostgreSQL/bin/initdb postgresdb\n```", "```py\n...Success. You can now start the database server using:\n...Path/to/the/installed/PostgreSQL/bin/pg_ctl -D postgresdb -l logfile start\n```", "```py\n> Path/to/the/installed/PostgreSQL/bin/pg_ctl -D postgresdb -l logfile start\n```", "```py\n...waiting for server to start.... done\n...server started\n```", "```py\n> Path/to/the/installed/PostgreSQL/bin/createdb psqldb\n```", "```py\n> Path/to/the/installed/PostgreSQL/bin/psql psqldb\n```", "```py\npsqldb=# CREATE TABLE u_dbtable (\npsqldb(# info_date TIMESTAMP DEFAULT NOW(),\npsqldb(# user_name TEXT UNIQUE,\npsqldb(# user_email TEXT UNIQUE,\npsqldb(# user_passw TEXT,\npsqldb(# user_data TEXT UNIQUE);\n```", "```py\npsqldb(# ...;\nCREATE TABLE\n```", "```py\n> pip install psycopg2\n```", "```py\n...\nimport psycopg2\n...\n```", "```py\n...\nclass UTools(object):\n    ...\n    def psql_insert(self, username=None, email=None,\n                     passw=None, data=None):\n        dbcon = psycopg2.connect(dbname=\"psqldb\")\n        dbcursor = dbcon.cursor()\n        sql_query = \"\"\"INSERT INTO u_dbtable (user_name,\n                user_email, user_passw,\n                user_data) VALUES (%s, %s, %s, %s);\"\"\"\n        udata = (str(username), str(email),\n                     str(passw), str(data))\n        dbcursor.execute(sql_query, udata)\n        dbcon.commit()\n        dbcursor.close()\n        dbcon.close()\n...\n```", "```py\n...\n    ...\n    def psql_select(self):\n        dbcon = psycopg2.connect(dbname=\"psqldb\")\n        dbcursor = dbcon.cursor()\n        sql_query = \"\"\"SELECT info_date, user_name, user_email,\n                    user_passw, user_data FROM u_dbtable;\"\"\"\n        dbcursor.execute(sql_query)\n        dbdata = dbcursor.fetchall()\n        dbcursor.close()\n        dbcon.close()\n        return dbdata\n...\n```", "```py\n...\n    ...\n    def data(self, action):\n        ...\n        if self.actx == \"SQLite\":\n            ...\n        if self.actx == \"PostgreSQL\":\n            try:\n                dbdata = self.psql_select()\n                for dtx in dbdata:\n                    self.text_edit.append(\n                               \"%s\\n%s\\n%s\\n%s\\n%s\" % (\n                                dtx[0], dtx[1], dtx[2],\n                                       dtx[3], dtx[4]))\n                self.stat_bar.showMessage(\n                                 self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                            self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def save_data(self):\n        ...\n            ...\n            elif self.actx == \"SQLite\":\n                ...\n            elif self.actx == \"PostgreSQL\":\n                self.user_data6(uname, umail, upass, udata)\n            ...\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def user_data6(self, uname, umail, upass, udata):\n        try:\n            self.psql_insert(username=uname, email=umail,\n                                 passw=upass, data=udata)\n        except Exception as err:\n            self.error = err\n...\n```", "```py\nmysql> CREATE DATABASE mysqldb;\n```", "```py\nmysql> SHOW DATABASES; \n```", "```py\nmysql> USE mysqldb;\n```", "```py\nmysql> CREATE TABLE u_dbtable (\n -> info_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n -> user_name VARCHAR(140) UNIQUE,\n -> user_email VARCHAR(270) UNIQUE,\n -> user_passw TEXT,\n -> user_data TEXT);\n```", "```py\nmysql> SHOW TABLES;\n```", "```py\nmysql> SELECT CURRENT_USER();\n```", "```py\n> pip install PyMySQL\n```", "```py\n...\nimport pymysql\n...\n```", "```py\n...\nclass UTools(object):\n    ...\n    def mysql_insert(self, username=None, email=None,\n                        passw=None, data=None):\n        dbcon = pymysql.connect(host=\"localhost\", user=\"root\",\n                        password=\"rootpassword\", db=\"mysqldb\")\n        dbcursor = dbcon.cursor()\n        sql_query = \"\"\"INSERT INTO u_dbtable (user_name,\n                    user_email, user_passw,\n                    user_data) VALUES (%s, %s, %s, %s);\"\"\"\n        udata = (str(username), str(email),\n                    str(passw), str(data))\n        dbcursor.execute(sql_query, udata)\n        dbcon.commit()\n        dbcursor.close()\n        dbcon.close()\n...\n```", "```py\n...\n    ...\n    def mysql_select(self):\n        dbcon = pymysql.connect(host=\"localhost\", user=\"root\",\n                        password=\"rootpassword\", db=\"mysqldb\")\n        dbcursor = dbcon.cursor()\n        sql_query = \"\"\"SELECT info_date, user_name, user_email,\n                      user_passw, user_data FROM u_dbtable;\"\"\"\n        dbcursor.execute(sql_query)\n        dbdata = dbcursor.fetchall()\n        dbcursor.close()\n        dbcon.close()\n        return dbdata\n...\n```", "```py\n...\n    ...\n    def data(self, action):\n        ...\n        if self.actx == \"PostgreSQL\":\n            ...\n        if self.actx == \"MySQL\":\n            try:\n                dbdata = self.mysql_select()\n                for dtx in dbdata:\n                    self.text_edit.append(\n                                 \"%s\\n%s\\n%s\\n%s\\n%s\" % (\n                                  dtx[0], dtx[1], dtx[2],\n                                         dtx[3], dtx[4]))\n                self.stat_bar.showMessage(\n                                   self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                              self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def save_data(self):\n        ...\n            ...\n            elif self.actx == \"PostgreSQL\":\n                ...\n            elif self.actx == \"MySQL\":\n                self.user_data7(uname, umail, upass, udata)\n            ...\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def user_data7(self, uname, umail, upass, udata):\n        try:\n            self.mysql_insert(username=uname, email=umail,\n                              passw=upass, data=udata)\n        except Exception as err:\n            self.error = err\n...\n```", "```py\n...\nfrom PyQt5 import QtSql\n...\n```", "```py\n...\nfrom PySide2 import QtSql\n...\n```", "```py\nsql_db = QtSql.QSqlDatabase()\n```", "```py\nsql_query = QtSql.QSqlQuery()\n```", "```py\n...\nclass UTools(object):\n\n    def __init__(self):\n        ...\n        self.qtsql_db = QtSql.QSqlDatabase.addDatabase('QSQLITE')\n        self.qtsql_db.setDatabaseName(\"data/u_db.sqlite\")\n        self.qtsql_db.open()\n    ...\n...\n```", "```py\n...\n    ...\n    def sql_qt_insert(self, username=None, email=None,\n                                passw=None, data=None):\n        query = QtSql.QSqlQuery(self.qtsql_db)\n        query.prepare(\"\"\"INSERT INTO u_dbtable (user_name,\n                        user_email, user_passw, user_data)\n                        VALUES (:user_name, :user_email,\n                        :user_passw, :user_data);\"\"\")\n        query.bindValue(\":user_name\", username)\n        query.bindValue(\":user_email\", email)\n        query.bindValue(\":user_passw\", passw)\n        query.bindValue(\":user_data\", data)\n        query.exec_()\n...\n```", "```py\n...\n    ...\n    def sql_qt_select(self):\n        query = QtSql.QSqlQuery(self.qtsql_db)\n        query.exec_(\"\"\"SELECT * FROM u_dbtable;\"\"\")\n        return query\n...\n```", "```py\n...\n    ...\n    def data(self, action):\n        ...\n        if self.actx == \"MySQL\":\n            ...\n        if self.actx == \"QtSQL\":\n            try:\n                dbdata = self.sql_qt_select()\n                while dbdata.next():\n                    self.text_edit.append(\n                             \"%s\\n%s\\n%s\\n%s\\n%s\" % ( \n                              dbdata.value(0),\n                              dbdata.value(1),\n                              dbdata.value(2),\n                              dbdata.value(3),\n                              dbdata.value(4)))\n                self.stat_bar.showMessage(\n                               self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                          self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def save_data(self):\n        ...\n            ...\n            elif self.actx == \"MySQL\":\n                ...\n            elif self.actx == \"QtSQL\":\n                self.user_data8(uname, umail, upass, udata)\n            ...\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def user_data8(self, uname, umail, upass, udata):\n        try:\n            self.sql_qt_insert(username=uname,\n                               email=umail,\n                               passw=upass,\n                               data=udata)\n        except Exception as err:\n            self.error = err\n...\n```", "```py\n> cd /Path/To/The/Installed/MongoDB/bin\n```", "```py\n> mongod --dbpath=/Path/To/The/App/App_PySide2/data/MongoDB_1\n```", "```py\n> /Path/To/The/installed/MongoDB/bin/mongo\n```", "```py\n> python -m pip install pymongo\n```", "```py\n...\nimport pymongo\n...\n```", "```py\n...\n    ...\n    def mongo_insert(self, username=None, email=None,\n                                passw=None, data=None):\n        client = pymongo.MongoClient('localhost', 27017)\n        db = client['umongodb']\n        post = {\"User Name\": username, \"Email\": email,\n                \"Password\": passw, \"Data\": data}\n        posts = db.posts\n        posts.insert_one(post)\n...\n```", "```py\n...\n    ...\n    def mongo_select(self):\n        client = pymongo.MongoClient('localhost', 27017)\n        db = client['umongodb']\n        dbdata = db.posts.find()\n        return dbdata\n...\n```", "```py\n...\n    ...\n    def data(self, action):\n        ...\n        if self.actx == \"QtSQL\":\n            ...\n        if self.actx == \"MongoDB\":\n            try:\n                dbdata = self.mongo_select()\n                for dtx in dbdata:\n                    self.text_edit.append(\n                            \"%s\\n%s\\n%s\\n%s\" % (\n                             dtx[\"User Name\"],\n                             dtx[\"Email\"],\n                             dtx[\"Password\"],\n                             dtx[\"Data\"]))\n                self.stat_bar.showMessage(\n                           self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                      self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def save_data(self):\n        ...\n            ...\n            elif self.actx == \"QtSQL\":\n                ...\n            elif self.actx == \"MongoDB\":\n                self.user_data9(uname, umail, upass, udata)\n            ...\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def user_data9(self, uname, umail, upass, udata):\n        try:\n            self.mongo_insert(username=uname,\n                              email=umail,\n                              passw=upass,\n                              data=udata)\n        except Exception as err:\n            self.error = err\n...\n```", "```py\n{\n    \"_id\": \"0e2484058a69f09841325dfa0d000b4e\",\n    \"User Name\": \"user\",\n    \"User email\": \"user@email.com\",\n    \"User password\": \"userpassword\",\n    \"User Data\": \"Hello CouchDB !!!\"\n}\n```", "```py\n> pip install CouchDB\n```", "```py\n...\nimport couchdb\n...\n```", "```py\n...\nclass UTools(object):\n    ...\n    def couch_insert(self, username=None, email=None,\n                                passw=None, data=None):\n        couch = couchdb.Server(\"http://127.0.0.1:5984/\")\n        db = couch[\"u_couchdb\"]\n        dbdata = {\"User Name\": username,\n                  \"User email\": email,\n                  \"User password\": passw,\n                  \"User Data\": data}\n        db.save(dbdata)\n...\n```", "```py\n...\n    ...\n    def couch_select(self):\n        couch = couchdb.Server(\"http://127.0.0.1:5984/\")\n        db = couch[\"u_couchdb\"]\n        return db\n...\n```", "```py\n...\n    ...\n    def data(self, action):\n        ...\n        if self.actx == \"MongoDB\":\n            ...\n        if self.actx == \"CouchDB\":\n            try:\n                dbdata = self.couch_select()\n                for dtx in dbdata.view(\"_all_docs\",\n                                       include_docs=True):\n                    self.text_edit.append(\n                                     \"%s\\n%s\\n%s\\n%s\" % (\n                                  dtx[\"doc\"][\"User Name\"],\n                                 dtx[\"doc\"][\"User email\"],\n                              dtx[\"doc\"][\"User password\"],\n                                 dtx[\"doc\"][\"User Data\"]))\n                self.stat_bar.showMessage(\n                                    self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                               self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def save_data(self):\n        ...\n            ...\n            elif self.actx == \"MongoDB\":\n                ...\n            elif self.actx == \"CouchDB\":\n                self.user_data10(uname, umail, upass, udata)\n            ...\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def user_data10(self, uname, umail, upass, udata):\n        try:\n            self.couch_insert(username=uname,\n                              email=umail,\n                              passw=upass,\n                              data=udata)\n        except Exception as err:\n            self.error = err\n...\n```"]