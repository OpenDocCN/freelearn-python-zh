["```py\n$ pip install jupyter pandas matplotlib fake-factory delorean xlwt\n\n```", "```py\n$ jupyter notebook\n\n```", "```py\nimport json\nimport calendar\nimport random\nfrom datetime import date, timedelta\n\nimport faker\nimport numpy as np\nfrom pandas import DataFrame\nfrom delorean import parse\nimport pandas as pd\n\n# make the graphs nicer\npd.set_option('display.mpl_style', 'default')\n```", "```py\nfake = faker.Faker()\n```", "```py\nusernames = set()\nusernames_no = 1000\n# populate the set with 1000 unique usernames\nwhile len(usernames) < usernames_no:\n    usernames.add(fake.user_name())\n```", "```py\ndef get_random_name_and_gender():\n    skew = .6  # 60% of users will be female\n    male = random.random() > skew\n    if male:\n        return fake.name_male(), 'M'\n    else:\n        return fake.name_female(), 'F'\n\ndef get_users(usernames):\n    users = []\n    for username in usernames:\n        name, gender = get_random_name_and_gender()\n        user = {\n            'username': username,\n            'name': name,\n            'gender': gender,\n            'email': fake.email(),\n            'age': fake.random_int(min=18, max=90),\n            'address': fake.address(),\n        }\n        users.append(json.dumps(user))\n    return users\n\nusers = get_users(usernames)\nusers[:3]\n```", "```py\n['{\"gender\": \"F\", \"age\": 48, \"email\": \"jovani.dickinson@gmail.com\", \"address\": \"2006 Sawayn Trail Apt. 207\\\\nHyattview, MO 27278\", \"username\": \"darcy00\", \"name\": \"Virgia Hilpert\"}',\n '{\"gender\": \"F\", \"age\": 58, \"email\": \"veum.javen@hotmail.com\", \"address\": \"5176 Andres Plains Apt. 040\\\\nLakinside, GA 92446\", \"username\": \"renner.virgie\", \"name\": \"Miss Clarabelle Kertzmann MD\"}',\n '{\"gender\": \"M\", \"age\": 33, \"email\": \"turner.felton@rippin.com\", \"address\": \"1218 Jacobson Fort\\\\nNorth Doctor, OK 04469\", \"username\": \"hettinger.alphonsus\", \"name\": \"Ludwig Prosacco\"}']\n\n```", "```py\n# campaign name format:\n# InternalType_StartDate_EndDate_TargetAge_TargetGender_Currency\ndef get_type():\n    # just some gibberish internal codes\n    types = ['AKX', 'BYU', 'GRZ', 'KTR']\n    return random.choice(types)\n\ndef get_start_end_dates():\n    duration = random.randint(1, 2 * 365)\n    offset = random.randint(-365, 365)\n    start = date.today() - timedelta(days=offset)\n    end = start + timedelta(days=duration)\n\n    def _format_date(date_):\n        return date_.strftime(\"%Y%m%d\")\n\n    return _format_date(start), _format_date(end)\n\ndef get_age():\n    age = random.randint(20, 45)\n    age -= age % 5\n    diff = random.randint(5, 25)\n    diff -= diff % 5\n    return '{}-{}'.format(age, age + diff)\n\ndef get_gender():\n    return random.choice(('M', 'F', 'B'))\n\ndef get_currency():\n    return random.choice(('GBP', 'EUR', 'USD'))\n\ndef get_campaign_name():\n    separator = '_'\n    type_ = get_type()\n    start_end = separator.join(get_start_end_dates())\n    age = get_age()\n    gender = get_gender()\n    currency = get_currency()\n    return separator.join(\n        (type_, start_end, age, gender, currency))\n```", "```py\ndef get_campaign_data():\n    name = get_campaign_name()\n    budget = random.randint(10**3, 10**6)\n    spent = random.randint(10**2, budget)    \n    clicks = int(random.triangular(10**2, 10**5, 0.2 * 10**5))    \n    impressions = int(random.gauss(0.5 * 10**6, 2))\n    return {\n        'cmp_name': name,\n        'cmp_bgt': budget,\n        'cmp_spent': spent,\n        'cmp_clicks': clicks,\n        'cmp_impr': impressions\n    }\n```", "```py\ndef get_data(users):\n    data = []\n    for user in users:\n        campaigns = [get_campaign_data()\n                     for _ in range(random.randint(2, 8))]\n        data.append({'user': user, 'campaigns': campaigns})\n    return data\n```", "```py\nrough_data = get_data(users)\nrough_data[:2]  # let's take a peek\n```", "```py\n[{'campaigns': [{'cmp_bgt': 130532,\n 'cmp_clicks': 25576,\n 'cmp_impr': 500001,\n 'cmp_name': 'AKX_20150826_20170305_35-50_B_EUR',\n 'cmp_spent': 57574},\n ... omit ...\n {'cmp_bgt': 884396,\n 'cmp_clicks': 10955,\n 'cmp_impr': 499999,\n 'cmp_name': 'KTR_20151227_20151231_45-55_B_GBP',\n 'cmp_spent': 318887}],\n 'user': '{\"age\": 44, \"username\": \"jacob43\",\n \"name\": \"Holland Strosin\",\n \"email\": \"humberto.leuschke@brakus.com\",\n \"address\": \"1038 Runolfsdottir Parks\\\\nElmapo...\",\n \"gender\": \"M\"}'}]\n\n```", "```py\ndata = []\nfor datum in rough_data:\n    for campaign in datum['campaigns']:\n        campaign.update({'user': datum['user']})\n        data.append(campaign)\ndata[:2]  # let's take another peek\n```", "```py\n[{'cmp_bgt': 130532,\n 'cmp_clicks': 25576,\n 'cmp_impr': 500001,\n 'cmp_name': 'AKX_20150826_20170305_35-50_B_EUR',\n 'cmp_spent': 57574,\n 'user': '{\"age\": 44, \"username\": \"jacob43\",\n \"name\": \"Holland Strosin\",\n \"email\": \"humberto.leuschke@brakus.com\",\n \"address\": \"1038 Runolfsdottir Parks\\\\nElmaport...\",\n \"gender\": \"M\"}'}]\n\n```", "```py\ndf = DataFrame(data)\ndf.head()\n```", "```py\ndf.count()\n```", "```py\ncmp_bgt       4974\ncmp_clicks    4974\ncmp_impr      4974\ncmp_name      4974\ncmp_spent     4974\nuser          4974\ndtype: int64\n\n```", "```py\ndf.describe()\n```", "```py\n cmp_bgt    cmp_clicks       cmp_impr      cmp_spent\ncount    4974.000000   4974.000000    4974.000000    4974.000000\nmean   503272.706876  40225.764978  499999.495979  251150.604343\nstd    289393.747465  21910.631950       2.035355  220347.594377\nmin      1250.000000    609.000000  499992.000000     142.000000\n25%    253647.500000  22720.750000  499998.000000   67526.750000\n50%    508341.000000  36561.500000  500000.000000  187833.000000\n75%    757078.250000  55962.750000  500001.000000  385803.750000\nmax    999631.000000  98767.000000  500006.000000  982716.000000\n\n```", "```py\ndf.sort_index(by=['cmp_bgt'], ascending=False).head(3)\n```", "```py\n cmp_bgt  cmp_clicks  cmp_impr                  cmp_name\n4655   999631       15343    499997  AKX_20160814_20180226_40\n3708   999606       45367    499997  KTR_20150523_20150527_35\n1995   999445       12580    499998  AKX_20141102_20151009_30\n\n```", "```py\ndef unpack_campaign_name(name):\n    # very optimistic method, assumes data in campaign name\n    # is always in good state\n    type_, start, end, age, gender, currency = name.split('_')\n    start = parse(start).date\n    end = parse(end).date\n    return type_, start, end, age, gender, currency\n\ncampaign_data = df['cmp_name'].apply(unpack_campaign_name)\ncampaign_cols = [\n    'Type', 'Start', 'End', 'Age', 'Gender', 'Currency']\ncampaign_df = DataFrame(\n    campaign_data.tolist(), columns=campaign_cols, index=df.index)\ncampaign_df.head(3)\n```", "```py\n Type       Start         End    Age Gender Currency\n0  KTR  2016-06-16  2017-01-24  20-30      M      EUR\n1  BYU  2014-10-25  2015-07-31  35-50      B      USD\n2  BYU  2015-10-26  2016-03-17  35-50      M      EUR\n\n```", "```py\ndf = df.join(campaign_df)\n```", "```py\ndf[['cmp_name'] + campaign_cols].head(3)\n```", "```py\n cmp_name Type       Start         End\n0  KTR_20160616_20170124_20-30_M_EUR  KTR  2016-06-16  2017-01-24\n1  BYU_20141025_20150731_35-50_B_USD  BYU  2014-10-25  2015-07-31\n2  BYU_20151026_20160317_35-50_M_EUR  BYU  2015-10-26  2016-03-17\n\n```", "```py\ndef unpack_user_json(user):\n    # very optimistic as well, expects user objects\n    # to have all attributes\n    user = json.loads(user.strip())\n    return [\n        user['username'],\n        user['email'],\n        user['name'],\n        user['gender'],\n        user['age'],\n        user['address'],\n    ]\n\nuser_data = df['user'].apply(unpack_user_json)\nuser_cols = [\n    'username', 'email', 'name', 'gender', 'age', 'address']\nuser_df = DataFrame(\n    user_data.tolist(), columns=user_cols, index=df.index)\n```", "```py\ndf = df.join(user_df)\ndf[['user'] + user_cols].head(2)\n```", "```py\nbetter_columns = [\n    'Budget', 'Clicks', 'Impressions',\n    'cmp_name', 'Spent', 'user',\n    'Type', 'Start', 'End',\n    'Target Age', 'Target Gender', 'Currency',\n    'Username', 'Email', 'Name',\n    'Gender', 'Age', 'Address',\n]\ndf.columns = better_columns\n```", "```py\ndef calculate_extra_columns(df):\n    # Click Through Rate\n    df['CTR'] = df['Clicks'] / df['Impressions']\n    # Cost Per Click\n    df['CPC'] = df['Spent'] / df['Clicks']\n    # Cost Per Impression\n    df['CPI'] = df['Spent'] / df['Impressions']\ncalculate_extra_columns(df)\n```", "```py\ndf[['Spent', 'Clicks', 'Impressions',\n    'CTR', 'CPC', 'CPI']].head(3)\n```", "```py\n Spent  Clicks  Impressions       CTR       CPC       CPI\n0   57574   25576       500001  0.051152  2.251095  0.115148\n1  226319   61247       499999  0.122494  3.695185  0.452639\n2    4354   15582       500004  0.031164  0.279425  0.008708\n\n```", "```py\nclicks = df['Clicks'][0]\nimpressions = df['Impressions'][0]\nspent = df['Spent'][0]\nCTR = df['CTR'][0]\nCPC = df['CPC'][0]\nCPI = df['CPI'][0]\nprint('CTR:', CTR, clicks / impressions)\nprint('CPC:', CPC, spent / clicks)\nprint('CPI:', CPI, spent / impressions)\n```", "```py\nCTR: 0.0511518976962 0.0511518976962\nCPC: 2.25109477635 2.25109477635\nCPI: 0.115147769704 0.115147769704\n\n```", "```py\ndef get_day_of_the_week(day):\n    number_to_day = dict(enumerate(calendar.day_name, 1))\n    return number_to_day[day.isoweekday()]\n\ndef get_duration(row):\n    return (row['End'] - row['Start']).days\n\ndf['Day of Week'] = df['Start'].apply(get_day_of_the_week)\ndf['Duration'] = df.apply(get_duration, axis=1)\n```", "```py\ndf[['Start', 'End', 'Duration', 'Day of Week']].head(3)\n```", "```py\n Start         End  Duration Day of Week\n0  2015-08-26  2017-03-05       557   Wednesday\n1  2014-10-15  2014-12-19        65   Wednesday\n2  2015-02-22  2016-01-14       326      Sunday\n\n```", "```py\nfinal_columns = [\n    'Type', 'Start', 'End', 'Duration', 'Day of Week', 'Budget',\n    'Currency', 'Clicks', 'Impressions', 'Spent', 'CTR', 'CPC',\n    'CPI', 'Target Age', 'Target Gender', 'Username', 'Email',\n    'Name', 'Gender', 'Age'\n]\ndf = df[final_columns]\n```", "```py\ndf.to_csv('df.csv')\n```", "```py\ndf.to_json('df.json')\n```", "```py\ndf.to_excel('df.xls')\n```", "```py\nType,Start,End,Duration,Day of Week,Budget,Currency,Clicks,Impres\n0,GRZ,2015-03-15,2015-11-10,240,Sunday,622551,GBP,35018,500002,787\n1,AKX,2016-06-19,2016-09-19,92,Sunday,148219,EUR,45185,499997,6588\n2,BYU,2014-09-25,2016-07-03,647,Thursday,537760,GBP,55771,500001,3\n\n```", "```py\n{\n \"Type\": {\n \"0\": \"GRZ\",\n \"1\": \"AKX\",\n \"2\": \"BYU\",\n\n```", "```py\n# make the graphs nicer\npd.set_option('display.mpl_style', 'default')\n```", "```py\n%matplotlib inline\n```", "```py\nimport pylab\npylab.rcParams.update({'font.family' : 'serif'})\n```", "```py\ndf[['Budget', 'Spent', 'Clicks', 'Impressions']].hist(\n    bins=16, figsize=(16, 6));\n```", "```py\ndf[['CTR', 'CPC', 'CPI']].hist(\n    bins=20, figsize=(16, 6));\n```", "```py\nmask = (df.Spent > 0.75 * df.Budget)\ndf[mask][['Budget', 'Spent', 'Clicks', 'Impressions']].hist(\n    bins=15, figsize=(16, 6), color='g');\n```", "```py\ndf_weekday = df.groupby(['Day of Week']).sum()\ndf_weekday[['Impressions', 'Spent', 'Clicks']].plot(\n    figsize=(16, 6), subplots=True);\n```", "```py\nagg_config = {\n    'Impressions': {\n        'Mean Impr': 'mean',\n        'Std Impr': 'std',\n    },\n    'Spent': ['mean', 'std'],\n}\n\ndf.groupby(['Target Gender', 'Target Age']).agg(agg_config)\n```", "```py\n Impressions              Spent\n Mean Impr  Std Impr    mean            std\nTarget Target \nGender Age \nB      20-25           500000  2.189102  239882  209442.168488\n 20-30           500000  2.245317  271285  236854.155720\n 20-35           500000  1.886396  243725  174268.898935\n 20-40           499999  2.100786  247740  211540.133771\n 20-45           500000  1.772811  148712  118603.932051\n...                    ...       ...     ...            ...\nM      20-25           500000  2.022023  212520  215857.323228\n 20-30           500000  2.111882  292577  231663.713956\n 20-35           499999  1.965177  255651  222790.960907\n 20-40           499999  1.932473  282515  250023.393334\n 20-45           499999  1.905746  271077  219901.462405\n\n```", "```py\npivot = df.pivot_table(\n    values=['Impressions', 'Clicks', 'Spent'],\n    index=['Target Age'],\n    columns=['Target Gender'],\n    aggfunc=np.sum\n)\npivot\n```"]