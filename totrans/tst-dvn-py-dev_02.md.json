["```py\n    def test_stock_update(self):\n        \"\"\"An update should set the price on the stock object\n        We will be using the `datetime` module for the timestamp\n        \"\"\"\n        goog = Stock(\"GOOG\")\n        goog.update(datetime(2014, 2, 12), price=10)\n        self.assertEqual(10, goog.price)\n```", "```py\n.E\n==================================================================\nERROR: test_stock_update (__main__.StockTest)\nAn update should set the price on the stock object\n------------------------------------------------------------------\nTraceback (most recent call last):\n File \"stock_alerter\\stock.py\", line 22, in test_stock_update\n goog.update(datetime(2014, 2, 12), price=10)\nAttributeError: 'Stock' object has no attribute 'update'\n\n------------------------------------------------------------------\nRan 2 tests in 0.001s\nFAILED (errors=1)\n\n```", "```py\n    def update(self, timestamp, price):\n        self.price = price\n```", "```py\n    def test_negative_price_should_throw_ValueError(self):\n        goog = Stock(\"GOOG\")\n        try:\n            goog.update(datetime(2014, 2, 13), -1)\n        except ValueError:\n            return\n        self.fail(\"ValueError was not raised\")\n```", "```py\n    def update(self, timestamp, price):\n        if price < 0:\n            raise ValueError(\"price should not be negative\")\n        self.price = price\n```", "```py\n    def test_negative_price_should_throw_ValueError(self):\n        goog = Stock(\"GOOG\")\n        self.assertRaises(ValueError, goog.update, datetime(2014, 2, 13), -1)\n```", "```py\n    def test_negative_price_should_throw_ValueError(self):\n        goog = Stock(\"GOOG\")\n        with self.assertRaises(ValueError):\n            goog.update(datetime(2014, 2, 13), -1)\n```", "```py\n    def test_stock_price_should_give_the_latest_price(self):\n        goog = Stock(\"GOOG\")\n        goog.update(datetime(2014, 2, 12), price=10)\n        goog.update(datetime(2014, 2, 13), price=8.4)\n        self.assertAlmostEqual(8.4, goog.price, delta=0.0001)\n```", "```py\n        self.assertAlmostEqual(8.4, goog.price, places=4)\n```", "```py\n    >>> test = unittest.TestCase()\n    >>> test.assertEqual([1, 2], [1, 2])  # Assertion Passes\n    >>> test.assertIs([1, 2], [1, 2])     # Assertion Fails\n    Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"C:\\Python34\\lib\\unittest\\case.py\", line 1067, in assertIs\n     self.fail(self._formatMessage(msg, standardMsg))\n     File \"C:\\Python34\\lib\\unittest\\case.py\", line 639, in fail\n     raise self.failureException(msg)\n    AssertionError: [1, 2] is not [1, 2]\n\n    ```", "```py\nassertInSeq(x, seq)\nassertTrue(x in seq)\n\nassertEqual(10, x)\nassertTrue(x == 10)\n```", "```py\n    def test_price_of_a_new_stock_class_should_be_None(self):\n        stock = Stock(\"GOOG\")\n        self.assertIsNone(stock.price)\n\n    def test_stock_update(self):\n        \"\"\"An update should set the price on the stock object\n        We will be using the `datetime` module for the timestamp\n        \"\"\"\n        goog = Stock(\"GOOG\")\n        goog.update(datetime(2014, 2, 12), price=10)\n        self.assertEqual(10, goog.price)\n\n    def test_negative_price_should_throw_ValueError(self):\n        goog = Stock(\"GOOG\")\n        with self.assertRaises(ValueError):\n            goog.update(datetime(2014, 2, 13), -1)\n\n    def test_stock_price_should_give_the_latest_price(self):\n        goog = Stock(\"GOOG\")\n        goog.update(datetime(2014, 2, 12), price=10)\n        goog.update(datetime(2014, 2, 13), price=8.4)\n        self.assertAlmostEqual(8.4, goog.price, delta=0.0001)\n```", "```py\n    def setUp(self):\n        self.goog = Stock(\"GOOG\")\n\n    def test_price_of_a_new_stock_class_should_be_None(self):\n        self.assertIsNone(self.goog.price)\n\n    def test_stock_update(self):\n        \"\"\"An update should set the price on the stock object We will be  using the `datetime` module for the timestamp \"\"\"\n        self.goog.update(datetime(2014, 2, 12), price=10)\n        self.assertEqual(10, self.goog.price)\n\n    def test_negative_price_should_throw_ValueError(self):\n        with self.assertRaises(ValueError):\n            self.goog.update(datetime(2014, 2, 13), -1)\n\n    def test_stock_price_should_give_the_latest_price(self):\n        self.goog.update(datetime(2014, 2, 12), price=10)\n        self.goog.update(datetime(2014, 2, 13), price=8.4)\n        self.assertAlmostEqual(8.4, self.goog.price, delta=0.0001)\n```", "```py\nimport unittest\n\ndef setUpModule():\n    print(\"setUpModule\")\n\ndef tearDownModule():\n    print(\"tearDownModule\")\n\nclass Class1Test(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        print(\"  setUpClass\")\n\n    @classmethod\n    def tearDownClass(cls):\n        print(\"  tearDownClass\")\n\n    def setUp(self):\n        print(\"       setUp\")\n\n    def tearDown(self):\n        print(\"       tearDown\")\n\n    def test_1(self):\n        print(\"         class 1 test 1\")\n\n    def test_2(self):\n        print(\"         class 1 test 2\")\n\nclass Class2Test(unittest.TestCase):\n    def test_1(self):\n        print(\"         class 2 test 1\")\n```", "```py\nsetUpModule\n  setUpClass\n       setUp\n         class 1 test 1\n       tearDown\n       setUp\n         class 1 test 2\n       tearDown\n  tearDownClass\n         class 2 test 1\ntearDownModule\n```", "```py\nclass StockTrendTest(unittest.TestCase):\n    def setUp(self):\n        self.goog = Stock(\"GOOG\")\n    def test_increasing_trend_is_true_if_price_increase_for_3_updates(self):\n        timestamps = [datetime(2014, 2, 11), datetime(2014, 2, 12), datetime(2014, 2, 13)]\n        prices = [8, 10, 12]\n        for timestamp, price in zip(timestamps, prices):\n            self.goog.update(timestamp, price)\n        self.assertTrue(self.goog.is_increasing_trend())\n```", "```py\n    def __init__(self, symbol):\n        self.symbol = symbol\n        self.price_history = []\n```", "```py\n    def update(self, timestamp, price):\n        if price < 0:\n            raise ValueError(\"price should not be negative\")\n            self.price_history.append(price)\n```", "```py\n    @property\n    def price(self):\n        return self.price_history[-1] \\\n        if self.price_history else None\n```", "```py\n    def is_increasing_trend(self):\n        return self.price_history[-3] < \\\n        self.price_history[-2] < self.price_history[-1]\n```", "```py\n    def test_increasing_trend_is_false_if_price_decreases(self):\n        timestamps = [datetime(2014, 2, 11), datetime(2014, 2, 12), \\ \n            datetime(2014, 2, 13)]\n        prices = [8, 12, 10]\n        for timestamp, price in zip(timestamps, prices):\n            self.goog.update(timestamp, price)\n        self.assertFalse(self.goog.is_increasing_trend())\n```", "```py\n    def test_increasing_trend_is_false_if_price_equal(self):\n        timestamps = [datetime(2014, 2, 11), datetime(2014, 2, 12), \\ \n            datetime(2014, 2, 13)]\n        prices = [8, 10, 10]\n        for timestamp, price in zip(timestamps, prices):\n            self.goog.update(timestamp, price)\n        self.assertFalse(self.goog.is_increasing_trend())\n```", "```py\nclass StockTrendTest(unittest.TestCase):\n    def setUp(self):\n        self.goog = Stock(\"GOOG\")\n\n    def given_a_series_of_prices(self, prices):\n        timestamps = [datetime(2014, 2, 10), datetime(2014, 2, \\ \n            11), datetime(2014, 2, 12), datetime(2014, 2, 13)]\n        for timestamp, price in zip(timestamps, prices):\n            self.goog.update(timestamp, price)\n\n    def test_increasing_trend_is_true_if_price_increase_for_3_updates(self):\n        self.given_a_series_of_prices([8, 10, 12])\n        self.assertTrue(self.goog.is_increasing_trend())\n\n    def test_increasing_trend_is_false_if_price_decreases(self):\n        self.given_a_series_of_prices([8, 12, 10])\n        self.assertFalse(self.goog.is_increasing_trend())\n\n    def test_increasing_trend_is_false_if_price_equal(self):\n        self.given_a_series_of_prices([8, 10, 10])\n        self.assertFalse(self.goog.is_increasing_trend())\n```", "```py\nclass PriceRule:\n        \"\"\"PriceRule is a rule that triggers when a stock price\n        satisfies a condition (usually greater, equal or lesser\n        than a given value)\"\"\"\n\n    def __init__(self, symbol, condition):\n        self.symbol = symbol\n        self.condition = condition\n\n    def matches(self, exchange):\n        try:\n            stock = exchange[self.symbol]\n        except KeyError:\n            return False\n        return self.condition(stock) if stock.price else False\n\n    def depends_on(self):\n        return {self.symbol}\n```", "```py\n>>> from datetime import datetime\n>>> from stock_alerter.stock import Stock\n>>> from stock_alerter.rule import PriceRule\n>>>\n>>> # First, create the exchange\n>>> exchange = {\"GOOG\": Stock(\"GOOG\"), \"MSFT\": Stock(\"MSFT\")}\n>>>\n>>> # Next, create the rule, checking if GOOG price > 100\n>>> rule = PriceRule(\"GOOG\", lambda stock: stock.price > 100)\n>>>\n>>> # No updates? The rule is False\n>>> rule.matches(exchange)\nFalse\n>>>\n>>> # Price does not match the rule? Rule is False\n>>> exchange[\"GOOG\"].update(datetime(2014, 2, 13), 50)\n>>> rule.matches(exchange)\nFalse\n>>>\n>>> # Price matches the rule? Rule is True\n>>> exchange[\"GOOG\"].update(datetime(2014, 2, 13), 101)\n>>> rule.matches(exchange)\nTrue\n>>>\n\n```", "```py\nclass PriceRuleTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        goog = Stock(\"GOOG\")\n        goog.update(datetime(2014, 2, 10), 11)\n        cls.exchange = {\"GOOG\": goog}\n\n    def test_a_PriceRule_matches_when_it_meets_the_condition(self):\n        rule = PriceRule(\"GOOG\", lambda stock: stock.price > 10)\n        self.assertTrue(rule.matches(self.exchange))\n\n    def test_a_PriceRule_is_False_if_the_condition_is_not_met(self):\n        rule = PriceRule(\"GOOG\", lambda stock: stock.price < 10)\n        self.assertFalse(rule.matches(self.exchange))\n\n    def test_a_PriceRule_is_False_if_the_stock_is_not_in_the_exchange(self):\n        rule = PriceRule(\"MSFT\", lambda stock: stock.price > 10)\n        self.assertFalse(rule.matches(self.exchange))\n\n    def test_a_PriceRule_is_False_if_the_stock_hasnt_got_an_update_yet(self):\n        self.exchange[\"AAPL\"] = Stock(\"AAPL\")\n        rule = PriceRule(\"AAPL\", lambda stock: stock.price > 10)\n        self.assertFalse(rule.matches(self.exchange))\n\n    def test_a_PriceRule_only_depends_on_its_stock(self):\n        rule = PriceRule(\"MSFT\", lambda stock: stock.price > 10)\n        self.assertEqual({\"MSFT\"}, rule.depends_on())\n```", "```py\nclass AndRuleTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        goog = Stock(\"GOOG\")\n        goog.update(datetime(2014, 2, 10), 8)\n        goog.update(datetime(2014, 2, 11), 10)\n        goog.update(datetime(2014, 2, 12), 12)\n        msft = Stock(\"MSFT\")\n        msft.update(datetime(2014, 2, 10), 10)\n        msft.update(datetime(2014, 2, 11), 10)\n        msft.update(datetime(2014, 2, 12), 12)\n        redhat = Stock(\"RHT\")\n        redhat.update(datetime(2014, 2, 10), 7)\n        cls.exchange = {\"GOOG\": goog, \"MSFT\": msft, \"RHT\": redhat}\n\n    def test_an_AndRule_matches_if_all_component_rules_are_true(self):\n        rule = AndRule(PriceRule(\"GOOG\", lambda stock: stock.price > 8), PriceRule(\"MSFT\", lambda stock: stock.price > 10))\n        self.assertTrue(rule.matches(self.exchange))\n```", "```py\nclass AndRule:\n    def __init__(self, *args):\n        self.rules = args\n\n    def matches(self, exchange):\n        return all([rule.matches(exchange) for rule in self.rules])\n```"]