["```py\n(myproject_env)$ python manage shell\n\n```", "```py\n(myproject_env)$ pip install ipython\n(myproject_env)$ pip install bpython\n\n```", "```py\n    (myproject_env)$ python manage.py shell\n\n    ```", "```py\n    >>> import re\n    >>> re.__version__\n    '2.2.1'\n\n    ```", "```py\n    >>> help(\"django.forms\")\n\n    ```", "```py\n    >>> from django.forms import ModelForm\n    >>> help(ModelForm)\n\n    ```", "```py\n    >>> from pprint import pprint\n    >>> from django.contrib.contenttypes.models import ContentType\n    >>> pprint(ContentType.objects.all()[0].__dict__)\n    {'_state': <django.db.models.base.ModelState object at 0x10756d250>,\n     'app_label': u'bulletin_board',\n     'id': 11,\n     'model': u'bulletin',\n     'name': u'Bulletin'}\n\n    ```", "```py\n    >>> dir(ContentType())\n    ['DoesNotExist', 'MultipleObjectsReturned', '__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', u'__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__unicode__', '__weakref__', '_base_manager', '_default_manager', '_deferred', '_do_insert', '_do_update', '_get_FIELD_display', '_get_next_or_previous_by_FIELD', '_get_next_or_previous_in_order', '_get_pk_val', '_get_unique_checks', '_meta', '_perform_date_checks', '_perform_unique_checks', '_save_parents', '_save_table', '_set_pk_val', '_state', 'app_label', 'clean', 'clean_fields', 'content_type_set_for_comment', 'date_error_message', 'delete', 'full_clean', 'get_all_objects_for_this_type', 'get_object_for_this_type', 'id', 'logentry_set', 'model', 'model_class', 'name', 'natural_key', 'objects', 'permission_set', 'pk', 'prepare_database_save', 'save', 'save_base', 'serializable_value', 'unique_error_message', 'validate_unique']\n\n    ```", "```py\n    >>> pprint(dir(ContentType()))\n\n    ```", "```py\n    >>> import re\n    >>> email_pattern = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\n    >>> email_pattern.match(\"aidas@bendoraitis.lt\")\n    <_sre.SRE_Match object at 0x1075681d0>\n\n    ```", "```py\n    >>> import django\n    >>> django.setup()\n    >>> from django.contrib.auth.models import User\n    >>> User.objects.filter(groups__name=\"Editors\")\n    [<User: admin>]\n\n    ```", "```py\n    >>> exit()\n\n    ```", "```py\n(myproject_env)$ pip install django-mobile\n\n```", "```py\n# conf/base.py or settings.py\nINSTALLED_APPS = (\n    # ...\n    # third party\n \"django_mobile\",\n\n    # project-specific\n    \"utils\",\n \"viral_videos\",\n)\n\nTEMPLATE_CONTEXT_PROCESSORS = (\n    # ...\n    \"django_mobile.context_processors.flavour\",\n)\n\nTEMPLATE_LOADERS = (\n    # ...\n    \"django_mobile.loader.Loader\",\n)\n\nMIDDLEWARE_CLASSES = (\n    # ...\n    \"django_mobile.middleware.MobileDetectionMiddleware\",\n    \"django_mobile.middleware.SetFlavourMiddleware\",\n)\n```", "```py\n# viral_videos/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import python_2_unicode_compatible\nfrom utils.models import CreationModificationDateMixin, UrlMixin\n\n@python_2_unicode_compatible\nclass ViralVideo(CreationModificationDateMixin, UrlMixin):\n    title = models.CharField(\n        _(\"Title\"), max_length=200, blank=True)\n    embed_code = models.TextField(_(\"YouTube embed code\"), blank=True)\n    desktop_impressions = models.PositiveIntegerField(\n        _(\"Desktop impressions\"), default=0)\n    mobile_impressions = models.PositiveIntegerField(\n        _(\"Mobile impressions\"), default=0)\n\n    class Meta:\n        verbose_name = _(\"Viral video\")\n        verbose_name_plural = _(\"Viral videos\")\n\n    def __str__(self):\n        return self.title\n\n    def get_url_path(self):\n        from django.core.urlresolvers import reverse\n        return reverse(\n            \"viral_video_detail\",\n            kwargs={\"id\": str(self.id)}\n        )\n```", "```py\n    # viral_videos/views.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import datetime\n    from django.shortcuts import render, get_object_or_404\n    from django.db import models\n    from django.conf import settings\n    from .models import ViralVideo\n\n    POPULAR_FROM = getattr(\n        settings, \"VIRAL_VIDEOS_POPULAR_FROM\", 500\n    )\n\n    def viral_video_detail(request, id):\n        yesterday = datetime.date.today() - \\\n            datetime.timedelta(days=1)\n\n        qs = ViralVideo.objects.annotate(\n            total_impressions=\\\n                models.F(\"desktop_impressions\") + \\\n                models.F(\"mobile_impressions\"),\n            label=models.Case(\n                models.When(\n                    total_impressions__gt=OPULAR_FROM,\n                    then=models.Value(\"popular\")\n                ),\n                models.When(\n                    created__gt=yesterday,\n                    then=models.Value(\"new\")\n                ),\n                default=models.Value(\"cool\"),\n                output_field=models.CharField(),\n            ),\n        )\n\n     # DEBUG: check the SQL query that Django ORM generates\n     print(qs.query)\n\n        qs = qs.filter(pk=id)\n        if request.flavour == \"mobile\":\n            qs.update(\n                mobile_impressions=\\\n                    models.F(\"mobile_impressions\") + 1\n            )\n        else:\n            qs.update(\n                desktop_impressions=\\\n                    models.F(\"desktop_impressions\") + 1\n            )\n\n        video = get_object_or_404(qs)\n\n        return render(\n            request,\n            \"viral_videos/viral_video_detail.html\",\n            {'video': video}\n        )\n    ```", "```py\n    # viral_videos/urls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf.urls import *\n    urlpatterns = [\n        url(\n            r\"^(?P<id>\\d+)/\",\n            \"viral_videos.views.viral_video_detail\",\n            name=\"viral_video_detail\"\n        ),\n    ]\n    ```", "```py\n    # myproject/urls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf.urls import include, url\n    from django.conf import settings\n    from django.conf.urls.i18n import i18n_patterns\n\n    urlpatterns = i18n_patterns(\"\",\n        # ...\n        url(r\"^viral-videos/\", include(\"viral_videos.urls\")),\n    )\n    ```", "```py\n    {# templates/viral_videos/viral_video_detail.html #}\n    {% extends \"base.html\" %}\n    {% load i18n %}\n\n    {% block content %}\n        <h1>{{ video.title }}\n            <span class=\"badge\">{{ video.label }}</span>\n        </h1>\n        <div>{{ video.embed_code|safe }}</div>\n        <div>\n            <h2>{% trans \"Impressions\" %}</h2>\n            <ul>\n                <li>{% trans \"Desktop impressions\" %}:\n                    {{ video.desktop_impressions }}</li>\n                <li>{% trans \"Mobile impressions\" %}:\n                    {{ video.mobile_impressions }}</li>\n                <li>{% trans \"Total impressions\" %}:\n                    {{ video.total_impressions }}</li>\n            </ul>\n        </div>\n    {% endblock %}\n    ```", "```py\nSELECT \"viral_videos_viralvideo\".\"id\", \"viral_videos_viralvideo\".\"created\", \"viral_videos_viralvideo\".\"modified\", \"viral_videos_viralvideo\".\"title\", \"viral_videos_viralvideo\".\"embed_code\", \"viral_videos_viralvideo\".\"desktop_impressions\", \"viral_videos_viralvideo\".\"mobile_impressions\", (\"viral_videos_viralvideo\".\"desktop_impressions\" + \"viral_videos_viralvideo\".\"mobile_impressions\") AS \"total_impressions\", CASE WHEN (\"viral_videos_viralvideo\".\"desktop_impressions\" + \"viral_videos_viralvideo\".\"mobile_impressions\") > 500 THEN popular WHEN \"viral_videos_viralvideo\".\"created\" > 2015-11-06 00:00:00 THEN new ELSE cool END AS \"label\" FROM \"viral_videos_viralvideo\"\n```", "```py\n    (myproject_env)$ pip install awesome-slugify\n\n    ```", "```py\n# guerrilla_patches/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.utils import text\nfrom slugify import slugify_de as awesome_slugify\nawesome_slugify.to_lower = True\ntext.slugify = awesome_slugify\n```", "```py\n(myproject_env)$ python manage.py shell\n>>> from django.utils.text import slugify\n>>> slugify(\"Heizölrückstoßabdämpfung\")\nu'heizolruckstoabdampfung'\n\n```", "```py\n(myproject_env)$ python manage.py shell\n>>> from django.utils.text import slugify\n>>> slugify(\"Heizölrückstoßabdämpfung\")\nu'heizoelrueckstossabdaempfung'\n\n```", "```py\nimport pdb\npdb.set_trace()\n```", "```py\nraise Warning, some_variable\n\n```", "```py\n    (myproject_env)$ pip install django-debug-toolbar==1.4\n\n    ```", "```py\n    MIDDLEWARE_CLASSES = (\n        # ...\n        \"debug_toolbar.middleware.DebugToolbarMiddleware\",\n    )\n\n    DEBUG_TOOLBAR_CONFIG = {\n        \"DISABLE_PANELS\": [],\n     \"SHOW_TOOLBAR_CALLBACK\": \\\n     \"utils.misc.custom_show_toolbar\",\n        \"SHOW_TEMPLATE_CONTEXT\": True,\n    }\n\n    DEBUG_TOOLBAR_PANELS = [\n        \"debug_toolbar.panels.versions.VersionsPanel\",\n        \"debug_toolbar.panels.timer.TimerPanel\",\n        \"debug_toolbar.panels.settings.SettingsPanel\",\n        \"debug_toolbar.panels.headers.HeadersPanel\",\n        \"debug_toolbar.panels.request.RequestPanel\",\n        \"debug_toolbar.panels.sql.SQLPanel\",\n        \"debug_toolbar.panels.templates.TemplatesPanel\",\n        \"debug_toolbar.panels.staticfiles.StaticFilesPanel\",\n        \"debug_toolbar.panels.cache.CachePanel\",\n        \"debug_toolbar.panels.signals.SignalsPanel\",\n        \"debug_toolbar.panels.logging.LoggingPanel\",\n        \"debug_toolbar.panels.redirects.RedirectsPanel\",\n    ]\n    ```", "```py\n    # utils/misc.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n\n    def custom_show_toolbar(request):\n        return \"1\" == request.COOKIES.get(\"DebugToolbar\", False)\n    ```", "```py\n    Name: Debug Toolbar On\n    URL: javascript:(function(){document.cookie=\"DebugToolbar=1; path=/\";location.reload();})();\n    ```", "```py\n    Name: Debug Toolbar Off\n    URL: javascript:(function(){document.cookie=\"DebugToolbar=0; path=/\";location.reload();})();\n    ```", "```py\n    # utils/middleware.py\n    # -*- coding: UTF-8 -*-\n    from threading import local\n    _thread_locals = local()\n\n    def get_current_request():\n        \"\"\" returns the HttpRequest object for this thread \"\"\"\n        return getattr(_thread_locals, \"request\", None)\n\n    def get_current_user():\n        \"\"\" returns the current user if it exists\n            or None otherwise \"\"\"\n        request = get_current_request()\n        if request:\n            return getattr(request, \"user\", None)\n\n    class ThreadLocalMiddleware(object):\n        \"\"\" Middleware that adds the HttpRequest object\n            to thread local storage \"\"\"\n        def process_request(self, request):\n            _thread_locals.request = request\n    ```", "```py\n    MIDDLEWARE_CLASSES = (\n        # ...\n        \"utils.middleware.ThreadLocalMiddleware\",\n    )\n    ```", "```py\n# utils/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nclass CreatorMixin(models.Model):\n    \"\"\"\n    Abstract base class with a creator\n    \"\"\"\n    creator = models.ForeignKey(\n        \"auth.User\",\n        verbose_name=_(\"creator\"),\n        editable=False,\n        blank=True,\n        null=True,\n    )\n\n    def save(self, *args, **kwargs):\n from utils.middleware import get_current_user\n        if not self.creator:\n self.creator = get_current_user()\n        super(CreatorMixin, self).save(*args, **kwargs)\n    save.alters_data = True\n\n    class Meta:\n        abstract = True\n```", "```py\nclass SomeModel(models.Model):\n    # ...\n    def some_expensive_function(self):\n        if not hasattr(self, \"_expensive_value_cached\"):\n            # do some heavy calculations...\n            # ... and save the result to result variable\n            self._expensive_value_cached = result\n        return self._expensive_value_cached\n```", "```py\n# viral_videos/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nimport re\n# ... other imports ...\n\n@python_2_unicode_compatible\nclass ViralVideo(CreationModificationDateMixin, UrlMixin):\n    # ...\n    def get_thumbnail_url(self):\n        if not hasattr(self, \"_thumbnail_url_cached\"):\n            url_pattern = re.compile(\n                r'src=\"img/([^\"]+)\"'\n            )\n            match = url_pattern.search(self.embed_code)\n            self._thumbnail_url_cached = \"\"\n            if match:\n                video_id = match.groups()[0]\n                self._thumbnail_url_cached = \\\n                    \"http://img.youtube.com/vi/{}/0.jpg\".format(\n                        video_id\n                    )\n        return self._thumbnail_url_cached\n```", "```py\n{% if object.some_expensive_function %}\n    <span class=\"special\">\n        {{ object.some_expensive_function }}\n    </span>\n{% endif %}\n```", "```py\n{% if video.get_thumbnail_url %}\n    <figure>\n        <img src=\"img/{{ video.get_thumbnail_url }}\"\n            alt=\"{{ video.title }}\" />\n        <figcaption>{{ video.title }}</figcaption>\n    </figure>\n{% endif %}\n```", "```py\n    $ wget http://memcached.org/files/memcached-1.4.23.tar.gz\n    $ tar -zxvf memcached-1.4.23.tar.gz\n    $ cd memcached-1.4.23\n    $ ./configure && make && make test && sudo make install\n\n    ```", "```py\n    $ memcached -d\n\n    ```", "```py\n    (myproject_env)$ pip install python-memcached\n\n    ```", "```py\n    CACHES = {\n        \"default\": {\n            \"BACKEND\": \"django.core.cache.backends.\"\n                \"memcached.MemcachedCache\",\n            \"LOCATION\": \"127.0.0.1:11211\",\n            \"TIMEOUT\": 60,  # 1 minute\n            \"KEY_PREFIX\": \"myproject_production\",\n        }\n    }\n    ```", "```py\n    # viral_videos/views.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.views.decorators.vary import vary_on_cookie\n    from django.views.decorators.cache import cache_page\n\n    @vary_on_cookie\n    @cache_page(60)\n    def viral_video_detail(request, id):\n      # ...\n    ```", "```py\n    # viral_videos/signals.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.db.models.signals import post_save\n    from django.dispatch import receiver\n    from .models import ViralVideo\n\n    @receiver(post_save, sender=ViralVideo)\n    def inform_administrators(sender, **kwargs):\n        from django.core.mail import mail_admins\n        instance = kwargs[\"instance\"]\n        created = kwargs[\"created\"]\n        if created:\n            context = {\n                \"title\": instance.title,\n                \"link\": instance.get_url(),\n            }\n            plain_text_message = \"\"\"\n    A new viral video called \"%(title)s\" has been created.\n    You can preview it at %(link)s.\"\"\" % context\n            html_message = \"\"\"\n    <p>A new viral video called \"%(title)s\" has been created.</p>\n    <p>You can preview it <a href=\"%(link)s\">here</a>.</p>\"\"\" % context\n\n            mail_admins(\n                subject=\"New Viral Video Added at example.com\",\n                message=plain_text_message,\n                html_message=html_message,\n                fail_silently=True,\n            )\n    ```", "```py\n    # viral_videos/apps.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.apps import AppConfig\n    from django.utils.translation import ugettext_lazy as _\n\n    class ViralVideosAppConfig(AppConfig):\n        name = \"viral_videos\"\n        verbose_name = _(\"Viral Videos\")\n\n        def ready(self):\n            from .signals import inform_administrators\n    ```", "```py\n    # viral_videos/__init__.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n\n    default_app_config = \\\n        \"viral_videos.apps.ViralVideosAppConfig\"\n    ```", "```py\n    ADMINS = (\n        (\"Aidas Bendoraitis\", \"aidas.bendoraitis@example.com\"),\n    )\n    ```", "```py\n    # viral_videos/checks.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.core.checks import Warning, register, Tags\n\n    @register(Tags.compatibility)\n    def settings_check(app_configs, **kwargs):\n        from django.conf import settings\n        errors = []\n        if not settings.ADMINS:\n            errors.append(\n                Warning(\n                    \"\"\"The system admins are not set in the project settings\"\"\",\n                    hint=\"\"\"In order to receive notifications when new videos are created, define system admins like ADMINS=((\"Admin\", \"admin@example.com\"),) in your settings\"\"\",\n                    id=\"viral_videos.W001\",\n                )\n            )\n        return errors\n    ```", "```py\n    # viral_videos/apps.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.apps import AppConfig\n    from django.utils.translation import ugettext_lazy as _\n\n    class ViralVideosAppConfig(AppConfig):\n        name = \"viral_videos\"\n        verbose_name = _(\"Viral Videos\")\n\n        def ready(self):\n            from .signals import inform_administrators\n     from .checks import settings_check\n\n    ```", "```py\n    (myproject_env)$ python manage.py check\n    System check identified some issues:\n\n    WARNINGS:\n    ?: (viral_videos.W001) The system admins are not set in the project settings\n     HINT: define system admins like ADMINS=((\"Admin\", \"admin@example.com\"),) in your settings\n\n    System check identified 1 issue (0 silenced).\n\n    ```"]