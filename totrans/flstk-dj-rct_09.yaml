- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An exciting part of every social media platform is the comment functionality.
    In the previous chapter, we’ve added post creation, listing, update, and deletion
    functionality. This chapter will cover a comment’s creation, listing, update,
    and deletion. We will create a page to display information about a post, add components
    to list comments, add a modal to display a form to create comments and add a dropdown
    to allow the user to delete or modify a comment. At the end of this chapter, you
    will learn how to navigate to a single page with URL parameters using React and
    React Router.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Listing comments on a post page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a comment using a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing and deleting a comment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a comment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure to have VS Code and an updated browser installed and configured on
    your machine. You can find the code of this chapter at [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap9](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap9).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next paragraphs, we will modify the `Post` component for consistency
    when displaying a single post, add a `Post` components. Before listing the comments,
    we need to ensure that the user can create comments. This will require building
    a page called `SinglePost` that will show details about a post and the comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the UI of the page in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 9.1 – \uFEFFResult of the SinglePost page](img/Figure_9.01_B18221.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Result of the SinglePost page
  prefs: []
  type: TYPE_NORMAL
- en: The UI in the preceding figure gives us a good idea of the result. When the
    page is built and the user clicks on a comment, a modal will appear, and the user
    will be able to create a comment. Let’s stick to this case first, and we’ll explore
    the other CRUD operations later.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we also have a back button in the top-left corner of the page –
    something to add to the `Layout` component. We will start by making some tweaks
    to the `Post.jsx` component first. This is because we are going to reuse the `Post`
    component, but we will mask options such as comment count and the **Comment**
    icon. After modifying the component, we will create a page displaying one article
    and comments.
  prefs: []
  type: TYPE_NORMAL
- en: Tweaking the Post component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Post` component will be simply reused to display more information about
    the post. Following the UI in *Figure 9**.1*, we will just mask the number of
    comments on the post and the **Comment** icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside `Post.jsx`, we will add another prop called `isSinglePost`. When this
    prop is `true`, it means that we are showing the component on the `SinglePost`
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/posts/Post.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With the modification done to the `Post` component, we can now add the back
    button to the `Layout` component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a back button to the Layout component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The back button has the role of navigating the user to the preceding page if
    the action is initiated. An interesting idea about doing that is to add the actual
    path to the component where a go-back action can happen. However, it’ll require
    a lot of code and will introduce some complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, the `react-router` library provides a simple way to navigate to
    the preceding page in just one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '**navigate(-1)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes! Let’s add this function to the `Layout.jsx` component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/Layout.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we added a prop called `hasNavigationBack`. This prop
    will tell React whether it should render the icon to nagivate back to the precedent
    page. The rendering process is done in the JSX code, using conditional. If `hasNavigationBack`
    is `true`, we show the **Back** icon, and the user can navigate.
  prefs: []
  type: TYPE_NORMAL
- en: With the option of going back added, we can now move to write the `SinglePost.jsx`
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the SinglePost component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `src/pages` directory, create a new file called `SinglePost.jsx`. This
    file will contain the code to display information about a post and, most importantly,
    the comments. The following figure shows a simple wireframe of the page so we
    can have an idea about the layout of the components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Wireframe of the SinglePost page](img/Figure_9.02_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Wireframe of the SinglePost page
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s move the file and start coding. In the following snippet, we will create
    the `SinglePost` page, add the imports, and define the functions and states that
    will be used on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: src/pages/SinglePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We are using the `Row` and `Col` feature from `react-bootstrap` again. This
    structure will help us have one column taking 8/12 of the layout and having objects
    centered. Next, we need a form for comment creation.
  prefs: []
  type: TYPE_NORMAL
- en: We are also using a new Hook, `useParams`. As stated in the official documentation,
    the `useParams` Hook returns an object of `<Route path>`. Child routes inherit
    all parameters from their parent routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'A little bit complicated to grasp, but let’s register this page and load it
    in the browser. Inside the `App.jsx` file, add a new route:'
  prefs: []
  type: TYPE_NORMAL
- en: src/App.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The path of the newly added route has an interesting pattern with the addition
    of `postId`. We can tell `react-router` to expect a parameter that will be passed,
    and this parameter will then be available in the `useParams` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add the redirection to the `SinglePost` page in the `Post` component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/posts/CreatePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `SinglePost.jsx` file, add a `console` log of `useParams()`:'
  prefs: []
  type: TYPE_NORMAL
- en: src/pages/SinglePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Go into the browser and click on a post to access the `SinglePost` page. You
    will have a similar result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Post page](img/Figure_9.03_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Post page
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the browser console to see the content of `useParams()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Content of useParams()](img/Figure_9.04_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Content of useParams()
  prefs: []
  type: TYPE_NORMAL
- en: We have an object containing the `postId` value. With `useParams()` explained,
    let’s move on to add the `CreateComment` form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a comment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inside the `src/components` directory, create a new directory called `comments`.
    This directory will contain the code for the `comments` feature components. Inside
    the newly created directory, create a new file called `CreateComment.jsx`. This
    component represents the form that the user will use to add comments to a post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file is created, add the required imports:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/comments/CreateComment.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: On the `CreateComment` page, we are going to show toast notifications when a
    CRUD action is made. That means that we are going to use the `Context` method
    again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by defining the props and creating `handleSubmit`. This process
    will be pretty similar to what we’ve done in the `CreatePost` component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/comments/CreateComment
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now add the `Form` UI:'
  prefs: []
  type: TYPE_NORMAL
- en: src/component/comments/CreateComment.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'With the UI added, we can write the `handeSubmit` method:'
  prefs: []
  type: TYPE_NORMAL
- en: src/component/comments/CreateComment.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to the `CreatePost` component, we are doing checks on the validity
    of the form but also sending a request to the `/post/${postId}/comment/` endpoint.
    Then, depending on the response, we show a toast and clean the form. Let’s test
    the form and add the first comment using React:'
  prefs: []
  type: TYPE_NORMAL
- en: src/pages/SinglePost.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should have a similar result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Creating a comment](img/Figure_9.05_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Creating a comment
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding paragraphs, we have created a page to display information about
    a post, thus allowing us to add a modal displaying a form to create a new comment
    related to this post.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to display the created comments.
  prefs: []
  type: TYPE_NORMAL
- en: Listing the comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can create comments, but we can’t see them. In `src/components/comments`,
    create a new file called `CreateComment.jsx`. This will contain the code for the
    `Comment` component that will be used to show details about a comment. Here’s
    a wireframe of the `Comment` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Wireframe of the Comment component](img/Figure_9.06_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Wireframe of the Comment component
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s move on to writing the code. Let’s start by adding the `CreateComment`
    function and the imports, and defining the state that we will use in this component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/comments/CreateComment.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We have the necessary imports. Let’s start with the UI first. It’s a little
    bit like the `Post` component in its structure:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/comments/CreateComment.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The UI for the `Comment` component is ready. Let’s see the result on a post
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – List of comments on a post](img/Figure_9.07_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – List of comments on a post
  prefs: []
  type: TYPE_NORMAL
- en: We also have the **More** dots in the top-right corner of each component, meaning
    that we need to implement features for the deletion and modification of a comment.
    Let’s add the deletion feature.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **More** dots menu provides two options: deleting and modifying a comment.
    Let’s start by adding code and actions to delete a comment. The function has already
    been declared; we just need to add the logic:'
  prefs: []
  type: TYPE_NORMAL
- en: Src/components/comments/CreateComment.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `handleDelete` function, we make a request using `axios` to `/post/${postId}/comment/${comment.id}/`
    to delete a comment. Depending on the result of the HTTP request, we show a toaster
    with the correct message. Once you are done adding the code, let’s test the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Deleting a comment](img/Figure_9.08_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – Deleting a comment
  prefs: []
  type: TYPE_NORMAL
- en: The deletion of a comment in our React application is now possible. Let’s move
    on to adding the feature for modifying comments.
  prefs: []
  type: TYPE_NORMAL
- en: Updating a comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Updating a comment will be similar to what was done in the `UpdatePost.jsx`
    file. However, I’ll assist you in writing this feature for the comments. We also
    have an exciting element to add to our comments: liking and unliking a comment,
    but as an exercise. Let’s focus on the modification of a comment. For this purpose,
    we will have to create a modal.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the UpdateComment modal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inside the `src/components/comments` directory, create a file called `UpdateComment.jsx`.
    This file will contain the modal and the form that will allow the user to update
    a comment:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/comments/UpdateComment.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We are doing the required imports and defining the states that will be used
    and updated when a modification is triggered. Note that we also pass `postId`
    and the `comment` object as **props**. The first is needed for the endpoint; the
    second is also for the endpoint, but most importantly, to have a default value,
    we need to show it in the form for the user to modify.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add the modal UI:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/comments/UpdateComment.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'With the UI ready, we can now write the `handleSubmit` function:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/comments/UpdateComment.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s import and add this component to the `Comment.jsx` file:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/comments/Comment.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding this piece of code, once you click on the **Modify** option of
    the **More** menu, a modal will appear, like in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Modify comment modal](img/Figure_9.09_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – Modify comment modal
  prefs: []
  type: TYPE_NORMAL
- en: 'If the modification is submitted and successful, a toast will appear at the
    top of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Toast showing successful comment modification](img/Figure_9.10_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 – Toast showing successful comment modification
  prefs: []
  type: TYPE_NORMAL
- en: Nice! We have completed working on CRUD actions for the comment feature. An
    exciting feature to have for the comments is the possibility to like a comment.
    It is similar to what we have done for the posts. This is the next step for this
    chapter, but also an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Liking a comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding the **Like** feature to the **Comment** feature will require some changes
    to the Django API and some code to be added to the React application. First, let
    me provide you with the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – Comments with the Like feature and likes count](img/Figure_9.11_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.11 – Comments with the Like feature and likes count
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of the requirements of the feature:'
  prefs: []
  type: TYPE_NORMAL
- en: The user can see the number of likes on a comment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user can like a comment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user can remove a like from a comment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will require some tweaks on the Django API as well. Feel free to get inspired
    by what we’ve done for the post feature.
  prefs: []
  type: TYPE_NORMAL
- en: Good luck with the exercise. You can find the solution at [https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/comments/Comment.jsx](https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/main/social-media-react/src/components/comments/Comment.jsx).
  prefs: []
  type: TYPE_NORMAL
- en: After adding the **Like** feature to comments, we are now ready to finally add
    CRUD operations to the profile of the React application. We will create a profile
    page and allow the user to edit the information in their profile. We will also
    enable the user to update their avatar and set a default avatar image for users.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on adding CRUD operations to the comments feature.
    We’ve learned how to play with `react-router` Hooks to retrieve parameters and
    use them in the code. We’ve also added a `useState` and `useContext` Hooks and
    the way they affect a state in React. We have also learned how to create a dropdown
    component, how to use the custom toaster, and how to tweak a component to fits
    some requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll focus on CRUD operations on the user profile, and
    we will also learn how to upload a profile picture.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the usage of `useParams`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you write a route in React that can support parameter passing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the use of the `useContext` Hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
