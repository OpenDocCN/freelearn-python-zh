["```py\n$(\".notsorted\").live('click',function(){\n\t$(\"input[name=sortorder]\").remove();\n\t$(\".content form\").first() \n\t.append('<input type=\"hidden\" name=\"sortorder\" value=\"' \n\t\t\t+$(\"div.colname\",this).text()+',asc\">');\n\t$(\"button[name=first]\").click();\n}).live('mouseenter mouseleave',function(){\n\t$(this).toggleClass(\"ui-state-highlight\");\n});\n$(\".sorted-asc\").live('click',function(){\n\t//alert('sorted-asc '+$(this).text())\n\t$(\"input[name=sortorder]\").remove(); $(\".content form\").first() \n\t.append('<input type=\"hidden\" name=\"sortorder\" value=\"' \n\t\t\t+$(\"div.colname\",this).text()+',desc\">');\n\t$(\"button[name=first]\").click();\n}).live('mouseenter mouseleave',function(){\n\t$(this).toggleClass(\"ui-state-highlight\");\n});\n$(\".sorted-desc\").live('click',function(){\n\t//alert('sorted-desc '+$(this).text())\n\t$(\"button[name=clear]\").click();\n}).live('mouseenter mouseleave',function(){\n\t$(this).toggleClass(\"ui-state-highlight\");\n});\n\n```", "```py\nyield '<thead><tr>'\n\t\t\t\tfor col in self.columns:\n\t\t\t\t\tif type(col) == str :\n\t\t\t\t\t\tsortclass=\"notsorted\"\n\t\t\t\t\t\ticonclass=\"ui-icon ui-icon-triangle-2-n-s\"\n\t\t\t\t\t\tfor s in sortorder:\n\t\t\t\t\t\t\t\tif s[0]==col :\n\t\t\t\t\t\t\t\t\tsortclass='sorted-'+s[1] iconclass=' ui-icon ui-icon-\ntriangle-1-%s'%({'asc':'n','desc':'s'}[s[1]])\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tyield '<th class=\"%s\"><div class=\"colname\" \nstyle=\"display:none\">%s</div>'%(sortclass,col)+self.entity.\ndisplaynames[col]+'<span class=\"%s\"><span></th>'%iconclass\n\t\t\t\telse :\n\t\t\t\t\t\tyield '<th>'+col.__name__+'</th>'\n\t\tyield '</tr></thead>\\n<tbody>\\n'\n\n```", "```py\n<th class=\"sorted-asc\">\n<div class=\"colname\" style=\"display:none\">time</div>\nTime\n<span class=\"ui-icon ui-icon-triangle-1-n\"><span>\n</th>\n\n```", "```py\nth.notsorted { padding-right:1px; border:solid 1px #f0f0f0; }\nth.sorted-asc { padding-right:1px; border:solid 1px #f0f0f0; \nbackground-color: #fff0f0; }\nth.sorted-desc { padding-right:1px; border:solid 1px #f0f0f0; \nbackground-color: #fffff0; }\nth span { float:right; }\n\n```", "```py\n$(\"button[name=search]\").button({\n\ticons: {\n\t\tprimary: \"ui-icon-search\"\n\t\t},\n\t\ttext: false\n}).click(function(){ $(\"input[name=pattern]\", $(\".content form\").first()).remove();\n\t\t$(\"input[name=pattern]\").each(function(i,e){\n\t\t\tvar val=$(e).val();\n\t\t\tvar col=$(e).next().text();\n\t\t\t$(\".content form\").first() \n\t\t\t.append(\n\t\t\t'<input type=\"hidden\" name=\"pattern\" value=\"' \n\t\t\t+col+','+val+'\">');\n\t});\n\t\t$(\"button[name=first]\").click();\n});\n\n```", "```py\n\t\t\tyield '<tfoot><tr>'\n\t\t\tfor col in self.columns:\n\t\t\t\tif type(col)==str:\n\t\t\t\t\tfiltervalue=dict(pattern).get(col,'')\n\t\t\t\t\tyield '''<td><input name=\"pattern\" \n\t\t\t\t\t\t\tvalue=\"%s\"><span \n\t\t\t\t\t\t\tstyle=\"display:none\">%s</span> \n\t\t\t\t\t\t\t</td>'''%(filtervalue,col)\n\t\t\tyield '</tr></tfoot>\\n'\n\n```", "```py\n<td>\n<input name=\"pattern\" value=\"ABC\">\n<span style=\"display:none\">name</span>\n</td>\n\n```", "```py\n<button id=\"showmap\">Map</button>\n<script>\n$(\"#showmap\").click(function(){\n\tvar url = \"http://maps.google.com/maps?f=q&q=\"\n\turl +=$(\"input[name=address]\").val()+',';\n\turl +=$(\"input[name=city]\").val()+',';\n\turl +=$(\"input[name=country]\").val();\n\twindow.open(url);\n});\n</script>\n\n```", "```py\nclass custom:\n\tdef __init__(self,db):\n\t\tclass CustomEntity(AbstractEntity):\n\t\t\tdatabase=db\n\t\tclass DisplayCustomization(CustomEntity):\n\t\t\tentity = Attribute(notnull= True, \n\t\t\t\t\tdisplayname = \"Entity\")\n\t\t\tdescription = Attribute(displayname = \"Description\")\n\t\t\tcustomhtml = Attribute(displayname = \"Custom HTML\", \n\t\t\t\t\t\thtmlescape=True, displayclass=\"mb-textarea\")\n\t\tself.DisplayCustomization = DisplayCustomization\n\tdef getDisplayCustomization(self):\n\t\treturn self.DisplayCustomization\n\tdef getDisplayCustomHTML(self,entity):\n\t\treturn \"\".join(dc.customhtml for dc in self.\nDisplayCustomization.list(pattern=[('entity',entity)]))\n\n```", "```py\n...\ndisplaycustom = User._custom().getDisplayCustomization()\nclass DisplayCustomizationBrowser(Browse):\n\tedit = Display(displaycustom, edit=True, logon=logon)\n\tadd = Display(displaycustom, add=True, logon=logon)\n...\nclass Root():\n\tlogon = logon\n\tuser = UserBrowser(User)\n\taccount = AccountBrowser(Account, \n\t\t\t\tcolumns=Account.columns+[User,Address,Contact])\n\tcontact = ContactBrowser(Contact, \n\t\t\t\tcolumns=Contact.columns+[Address,Account])\n\taddress = AddressBrowser(Address)\n\tdisplaycustomization = DisplayCustomizationBrowser(displaycustom, \n\t\tcolumns=['entity','description'])\n\t@cherrypy.expose\n\tdef index(self):\n\t\t\treturn Root.logon.index(returnpage='../entities')\n\t@cherrypy.expose\n\tdef entities(self):\n\t\tusername = self.logon.checkauth()\n\t\tif username is None : raise HTTPRedirect('.')\n\t\tuser=User.list(pattern=[('name',username)])\n\t\tif len(user) < 1 : User(name=username)\n\t\treturn basepage%'''<div class=\"navigation\">\n\t\t<a href=\"user\">Users</a>\n\t\t<a href=\"displaycustomization\">Customize</a>\n\t\t<a href=\"http://account\">Accounts</a>\n\t\t<a href=\"contact\">Contacts</a>\n\t\t<a href=\"http://address\">Addresses</a>\n\t\t</div><div class=\"content\">\n\t\t</div>\n\t\t<script src=\"img/browse.js\" type=\"text/javascript\"></script>\n\t\t'''\n\n```", "```py\nyield self.entity._custom().getDisplayCustomHTML('*')\nyield self.entity._custom().getDisplayCustomHTML(self.entity.__name__)\n\n```", "```py\nclass Attribute:\n\tdef __init__(self,\n\t\t\tunique =False,\n\t\t\tnotnull =False,\n\t\t\tdefault =None,\n\t\t\taffinity =None,\n\t\t\tvalidate =None,\n\t\t\tdisplayname =None,\n\t\t\tprimary =False,\n\t\t\tdisplayclass =None,\n\t\t\thtmlescape =False):\n\t\t\tself.unique =unique\n\t\t\tself.notnull =notnull\n\t\t\tself.default =default\n\t\t\tself.affinity=affinity\n\t\t\tself.coldef = ( \n\t\t\t\taffinity+' ' if not affinity is None else '') \n\t\t\t\t+ ('unique ' if unique else '') \n\t\t\t\t+ ('not null ' if notnull else '') \n\t\t\t\t+ ('default %s '%default if not default is None else '')\n\t\t\tself.validate = validate?\n\t\t\tself.displayname = displayname\n\t\t\tself.primary = primary\n\t\t\tself.displayclass = displayclass\n\t\t\tself.htmlescape = htmlescape\n\n```", "```py\nclassdict['htmlescape']={ k:v.htmlescape \n\t\t\tfor k,v in classdict.items() if type(v) == Attribute}\n\n```", "```py\nval=getattr(e,c)\nif self.entity.htmlescape[c] :\n\t\tval=escape(val,{'\"':'&quot;','\\n':'\n'})\n\t\tline='''<input type=\"text\" name=\"%s\" \n\t\t\t\tvalue=\"%s\" \n\t\t\t\tclass=\"%s\">'''%(c,val,displayclass)\n\n```", "```py\n<script>\nvar re = new RegExp(\"^\\\\s*\\\\+\"); $(\"td:nth-child(4)\").each(function(i){\n\tif($(this).text().match(re)){\n\t\t$(this).css({'font-weight':'bold'})\n\t};\n});\n</script>\n\n```", "```py\ndef __init__(self):\n\t\t...\n\t\tclass BrowseCustomization(CustomEntity):\n\t\t\tentity = Attribute(notnull= True, displayname = \"Entity\")\n\t\t\tdescription = Attribute(displayname = \"Description\")\n\t\t\tcustomhtml = Attribute(displayname = \"Custom HTML\", \n\t\t\t\thtmlescape=True, displayclass=\"mb-textarea\")\n\t\tself.BrowseCustomization = BrowseCustomization\n\t\t...\ndef getBrowseCustomization(self):\n\t\treturn self.BrowseCustomization\ndef getBrowseCustomHTML(self,entity):\n\t\treturn \"\".join(dc.customhtml \n\t\tfor dc in self.BrowseCustomization.list( \n\t\t\t\t\tpattern=[('entity',entity)]))\n\n```", "```py\nyield self.entity._custom().getBrowseCustomHTML('*')\nyield self.entity._custom().getBrowseCustomHTML(self.entity.__name__)\n\n```", "```py\ndisplaycustom = User._custom().getDisplayCustomization() browsecustom = User._custom().getBrowseCustomization()\nclass DisplayCustomizationBrowser(Browse):\n\tedit = Display(displaycustom, edit=True, logon=logon)\n\tadd = Display(displaycustom, add=True, logon=logon) class BrowseCustomizationBrowser(Browse):\n\tedit = Display(browsecustom, edit=True, logon=logon)\n\tadd = Display(browsecustom, add=True, logon=logon)\nwith open('basepage.html') as f:\n\tbasepage=f.read(-1)\nclass Root():\n\tlogon = logon\n\tuser = UserBrowser(User)\n\taccount = AccountBrowser(Account, \n\t\t\t\tcolumns=Account.columns+[User,Address,Contact])\n\tcontact = ContactBrowser(Contact, \n\t\t\t\tcolumns=Contact.columns+[Address,Account])\n\taddress = AddressBrowser(Address)\n\tdisplaycustomization = DisplayCustomizationBrowser( \n\t\t\t\tdisplaycustom,columns=['entity','description']) browsecustomization = BrowseCustomizationBrowser( \n\t\t\t\tbrowsecustom,columns=['entity','description'])\n\t@cherrypy.expose\n\tdef index(self):\n\t\treturn Root.logon.index(returnpage='../entities')\n\t@cherrypy.expose\n\tdef entities(self):\n\t\tusername = self.logon.checkauth()\n\tif username is None : raise HTTPRedirect('.')\n\tuser=User.list(pattern=[('name',username)])\n\tif len(user) < 1 : User(name=username)\n\treturn basepage%'''<div class=\"navigation\">\n\t<a href=\"user\">Users</a>\n\t<a href=\"displaycustomization\">Customize Item</a> <a href=\"http://browsecustomization\">Customize List</a>\n\t<a href=\"http://account\">Accounts</a>\n\t<a href=\"contact\">Contacts</a>\n\t<a href=\"http://address\">Addresses</a>\n\t</div><div class=\"content\">\n\t</div>\n\t<script src=\"img/browse.js\" type=\"text/javascript\"></script>\n\t'''\n\n```", "```py\n<button class=\"delete\">delete</button>\n<script>\n$(\"button.delete\").click(function(){ var url = $(\"form\").last().attr('action')+'/delete';\n\t$(\"tr.selected\").each(function(i){\n\t\t\tvar id=$(this).attr('id');\n\t\t\t$.get(url,{'id':id});\n\t});\n\t$(\"input[name=cacheid]\").remove();\n\t$(\"button[name=first]\").click();\n\tfalse;\n}).button({icons: { primary: \"ui-icon-trash\" },text: false});\n</script>\n\n```", "```py\n$(\"#example\").unitconverter({'cubic feet_litres':1.0/28.3168466 })\n\n```", "```py\npython.exe test_factorial.py\n.F.\n======================================================================\nFAIL: test_number (__main__.Test)\n----------------------------------------------------------------------\nTraceback (most recent call last):\nFile \"test_factorial.py\", line 7, in test_number\nself.assertEqual(24,fac(4))\nAssertionError: 24 != 12\n----------------------------------------------------------------------\nRan 3 tests in 0.094s\nFAILED (failures=1)\n\n```", "```py\nif not issubclass(instance_a, Entity) : raise TypeError()\n\n```"]