["```py\nmysql –host=<your instance IP> --user=root –password\n\n```", "```py\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 1\nServer version: 5.5.38 (Google)\n\nCopyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql>\n\n```", "```py\nmysql> CREATE DATABASE notes;\nQuery OK, 1 row affected (1.62 sec)\n\n```", "```py\nmysql> DROP USER ''@localhost;\nQuery OK, 0 rows affected (0.17 sec)\n\n```", "```py\nmysql> CREATE USER 'notes'@'%' IDENTIFIED BY 'notes_password';\nQuery OK, 0 rows affected (1.47 sec)\n\n```", "```py\nmysql> GRANT ALL PRIVILEGES ON notes.* TO 'notes'@'%';\nQuery OK, 0 rows affected (0.49 sec)\n\n```", "```py\nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.17 sec)\n\n```", "```py\nmysql> \\q\nBye\n\nmysql –host=<your instance IP> --user=notes –password\n\n```", "```py\nmysql> use notes;\nDatabase changed\n\n```", "```py\nCREATE TABLE 'notes'.'ops'\n(\n    'id'        INT NOT NULL auto_increment,\n    'user_id'   VARCHAR(128) NOT NULL,\n    'operation' VARCHAR(16) NOT NULL,\n    'date'      DATETIME NOT NULL,\n    PRIMARY KEY ('id')\n);\n```", "```py\nQuery OK, 0 rows affected (0.55 sec)\n\n```", "```py\npip install MySQL-python\n\n```", "```py\nlibraries:\n- name: webapp2\n  version: \"2.5.2\"\n\n- name: jinja2\n  version: latest\n\n- name: MySQLdb\n  version: latest\n```", "```py\nimport os\nimport MySQLdb\n```", "```py\ndef get_cloudsql_db():\n    db_ip = os.getenv('CLOUD_SQL_IP')\n    db_user = os.getenv('CLOUD_SQL_USER')\n    db_pass = os.getenv('CLOUD_SQL_PASS')\n    return MySQLdb.connect(host=db_ip, db='notes',\n                           user=db_user, passwd=db_pass)\n```", "```py\nenv_variables:\n  CLOUD_SQL_IP: '<your_instance_ip>'\n  CLOUD_SQL_USER: 'notes'\n  CLOUD_SQL_PASS: 'notes_password'\n```", "```py\nfrom utils import get_cloudsql_db\nimport logging\n```", "```py\ndef get(self):\n    user = users.get_current_user()\n    if user is not None:\n        db = get_cloudsql_db()\n        ver = db.get_server_info()\n        logging.info(\"Cloud SQL version: {}\".format(ver))\n        logout_url = users.create_logout_url(self.request.uri)\n        template_context = {\n            'user': user.nickname(),\n            'logout_url': logout_url,\n        }\n        self.response.out.write(\n            self._render_template('main.html', template_context))\n    else:\n        login_url = users.create_login_url(self.request.uri)\n        self.redirect(login_url)\n```", "```py\nINFO 2014-09-28 12:40:41,796 main.py:109] Cloud SQL version: 5.5.38\n```", "```py\ndef get_cloudsql_db():\n    db_user = os.getenv('CLOUD_SQL_USER')\n    db_pass = os.getenv('CLOUD_SQL_PASS')\n    instance_id = os.getenv('CLOUD_SQL_INSTANCE_ID')\n    unix_socket = '/cloudsql/{}'.format(instance_id)\n    return MySQLdb.connect(unix_socket=unix_socket, db='notes',\n                           user=db_user, passwd=db_pass)\n```", "```py\nenv_variables:\n  CLOUD_SQL_IP: '<your_instance_ip>'\n  CLOUD_SQL_USER: 'notes'\n  CLOUD_SQL_PASS: 'notes_password'\n  CLOUD_SQL_INSTANCE_ID: '<your_instance_id>'\n```", "```py\ndef on_appengine():\n    return os.getenv('SERVER_SOFTWARE', '').startswith('Google App Engine')\n```", "```py\ndef get_cloudsql_db():\n    db_user = os.getenv('CLOUD_SQL_USER')\n    db_pass = os.getenv('CLOUD_SQL_PASS')\n\n    if on_appengine():\n        instance_id = os.getenv('CLOUD_SQL_INSTANCE_ID')\n        sock = '/cloudsql/{}'.format(instance_id)\n        return MySQLdb.connect(unix_socket=sock, db='notes',\n                               user=db_user, passwd=db_pass)\n    else:\n        db_ip = os.getenv('CLOUD_SQL_IP')\n        return MySQLdb.connect(host=db_ip, db='notes',\n                               user=db_user, passwd=db_pass)\n```", "```py\nclass OpTypes(object):\n    NOTE_CREATED = 'NCREATED'\n    FILE_ADDED = 'FADDED'\n    SHRINK_PERFORMED = 'SHRINKED'\n```", "```py\ndef log_operation(user, operation_type, opdate):\n    db = get_cloudsql_db()\n    cursor = db.cursor()\n    cursor.execute('INSERT INTO ops (user_id, operation, date)'\n                   ' VALUES (%s, %s, %s)',\n                   (user.user_id(), operation_type, opdate))\n    db.commit()\n    db.close()\n```", "```py\n    if file_name and file_content:\n        content_t = mimetypes.guess_type(file_name)[0]\n        real_path = os.path.join('/', bucket_name, user.user_id(), file_name)\n\n        with cloudstorage.open(real_path, 'w', content_type=content_t,\n                               options={'x-goog-acl': 'public-read'}) as f:\n            f.write(file_content.read())\n        log_operation(user, OpTypes.FILE_ADDED,\n                      datetime.datetime.now())\n    self._create_note(user, file_name, real_path)\n    log_operation(user, OpTypes.NOTE_CREATED,\n                  datetime.datetime.now())\n    ```", "```py\n    taskqueue.add(url='/shrink',\n                  params={'user_email': user.email()})\n    log_operation(user, OpTypes.SHRINK_PERFORMED,\n                  datetime.datetime.now())\n    self.response.write('Task added to the queue.')\n    ```", "```py\n    attachments = getattr(mail_message, 'attachments', None)\n\n    self._create_note(user, title, content, attachments)\n    log_operation(user, OpTypes.NOTE_CREATED,\n                  datetime.datetime.now())\n    ```", "```py\n# -*- coding: utf-8 -*-\nimport sys\nimport MySQLdb\n\nCLOUD_SQL_IP = '<your_instance_ip>'\nCLOUD_SQL_USER = 'notes'\nCLOUD_SQL_PASS = 'notes_password'\n\ndef main():\n    db = MySQLdb.connect(host=CLOUD_SQL_IP, db='notes',\n                         user=CLOUD_SQL_USER,\n                         passwd=CLOUD_SQL_PASS)\n    cursor = db.cursor()\n\n    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM ops '\n                   'WHERE date > (DATE_SUB(CURDATE(), '\n                   'INTERVAL 1 MONTH));')\n    users = cursor.fetchone()[0]\n    sys.stdout.write(\"Active users: {}\\n\".format(users))\n\n    cursor.execute('SELECT COUNT(*) FROM ops WHERE date > '\n                   '(DATE_SUB(CURDATE(), INTERVAL 1 HOUR))')\n    ops = cursor.fetchone()[0]\n    sys.stdout.write(\"Ops in the last hour: {}\\n\".format(ops))\n\n    cursor.execute('SELECT COUNT(*) FROM ops WHERE '\n                   'operation = \"SHRINKED\"')\n    ops = cursor.fetchone()[0]\n    sys.stdout.write(\"Total shrinking ops: {}\\n\".format(ops))\n\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n```", "```py\npython analyze.py\n\n```", "```py\nenv_variables:\n  CLOUD_SQL_IP: 'localhost'\n  CLOUD_SQL_USER: 'notes'\n  CLOUD_SQL_PASS: 'notes_password'\n```"]