- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: User Profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A social media application should allow users to consult other user profiles.
    From another view, it should also allow an authenticated user to edit their information,
    such as their last name, first name, and avatar.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on adding CRUD features on the user side. We’ll
    build a page to visualize a user profile and a page that allows a user to edit
    their information. This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Listing profiles on the home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying user information on their profile page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing user information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure to have VS Code and an updated browser installed and configured on
    your machine. You can find all the code files used in this chapter at [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap10](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap10).
  prefs: []
  type: TYPE_NORMAL
- en: Listing profiles on the home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before building the pages and components to display user information and allow
    user information modification, we need to add a component to list some profiles
    on the home page like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Listing profiles](img/Figure_10.01_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Listing profiles
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to add the component for listing profiles on the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/components` file, create a new directory called `profile`. This
    directory will contain the code for all components related to users or profiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the newly created directory, create a file called `ProfileCard.jsx` and
    add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/profile/ProfileCard.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `ProfileCard` component will be used to display information about a profile
    and redirect the user to the profile page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the code logic concerning the navigation to the profile page
    and the props object destructuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/profile/ProfileCard.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we retrieved the user object from the props and we also
    added a function to handle the navigation to the user profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s write the JSX that will display information to the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/profile/ProfileCard.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ProfileCard` component is written. We can now import it into the `Home.jsx`
    page and use it. But before that, we need to retrieve five profiles from the API
    and loop through the results to have the wanted display:'
  prefs: []
  type: TYPE_NORMAL
- en: src/pages/Home.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the profiles are only shown if the `profiles.data` object
    is not null or undefined. This is why we are writing the `profiles.data && profiles.data.results.map()`
    inline JSX condition.
  prefs: []
  type: TYPE_NORMAL
- en: Once it’s done, reload the home page and you’ll have a new component available,
    listing a maximum of five profiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to click on the **See Profile** button. You will be redirected to a white
    page. This is normal because we haven’t written routing for the **Profile** page
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next section, we will be creating components to display information
    about a profile, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – The user profile page](img/Figure_10.02_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – The user profile page
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also allow the user to edit their information, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – The user edit form and page](img/Figure_10.03_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – The user edit form and page
  prefs: []
  type: TYPE_NORMAL
- en: Displaying user information on their profile page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create a profile page to display user information.
    We will build a component to display user details and the posts concerning this
    user, but also we will create a page displaying a form for editing user information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting to build the user profile page, we have to create some components.
    On the profile page, we are not only displaying information but also the list
    of posts created by the user. Let’s start by writing the `ProfileDetails.jsx`
    component (*Figure 10**.4*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – The ProfileDetails component](img/Figure_10.04_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – The ProfileDetails component
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the wireframe to help you with the structure of the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – The wireframe of the ProfileDetails component](img/Figure_10.05_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – The wireframe of the ProfileDetails component
  prefs: []
  type: TYPE_NORMAL
- en: In the `ProfileDetails` component, we are displaying some avatars. At this point
    of the project, it’s time to get rid of the `randomAvatar` function. It has been
    useful up until this point of the project, but we are making a lot of requests
    and some state change within the application just calls the function again that
    returns another random image, which is not something a user of the application
    might want to see.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start using the value of the avatar field on the user object but before
    that, we have to configure Django to deal with media upload and the avatar field
    on the user object.
  prefs: []
  type: TYPE_NORMAL
- en: The social media application uses the `avatar` field, which represents a link
    to a file that the browser can make a request on and receive the image. Django
    supports file uploading; we just need to add some configuration to make it effective.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `settings.py` file of the project, add the following lines at the
    end of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: CoreRoot/settings.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MEDIA_URL` setting allows us to write the URL that will be used to retrieve
    uploaded files. The `MEDIA_ROOT` setting tells Django where to stock the files
    and also checks the upload files when returning the URL of a file. In the case
    of this project, an avatar field will have this URL, for example: `http://localhost:8000/media/user_8380ca50-ad0f-4141-88ef-69dc9b0707ad/avatar-rogemon.png`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this configuration to work, you will need to create a directory called
    `uploads` at the root of the Django project. You will also need to install the
    Pillow library, which contains all the basic tools for image processing functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, let’s slightly modify the avatar field on the user model. Inside
    the `core/user/models.py`, add a function before the `UserManager` manager class:'
  prefs: []
  type: TYPE_NORMAL
- en: core/user/models.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This function will help re-write the path for the upload of a file. Instead
    of going directly into the `uploads` directory, the avatar is stocked according
    to a user. It can help with the better organization of files in your system. After
    adding the function, we can tell Django to use it for the default upload path:'
  prefs: []
  type: TYPE_NORMAL
- en: core/user/models.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In Django, the `ImageField` field is used to store image files in a database.
    It is a subclass of `FileField`, which is a generic field for storing files, so
    it has all the attributes of `FileField` as well as some additional attributes
    specific to images. The `upload_to` attribute specifies the directory where the
    image files will be stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run the `makemigrations` command and make sure to migrate the changes
    to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With this configuration done, our API can accept avatar uploading for the user.
    However, some users won’t have an avatar and we have been handling it pretty badly
    from the frontend side. Let’s set up a default avatar that will be used for users
    without an avatar.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the default avatar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To configure the default avatar, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `settings.py` file of the Django project, add the following line at
    the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CoreRoot/settings.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The avatar image looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_10.06_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Image 10.6: The default image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have added `DEFAULT_AVATAR_URL` to the `settings.py` file, we will
    slightly modify the `UserSerializer` representation method to return the `DEFAULT_AVATAR_URL`
    value by default if the avatar field is none:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Core/user/serializers.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Let’s explain what we are doing in the preceding code block. First, we need
    to check whether the avatar value exists. If that’s not the case, we will return
    the default avatar. By default, Django doesn’t return the actual route of the
    file with the domain. That’s why in this case, if we are in a development environment,
    we return an absolute URL of the avatar. In the last part of this book, we will
    deploy the application on a production server, then we will use **AWS S3** for
    file storing.
  prefs: []
  type: TYPE_NORMAL
- en: With the fix done on the backend, we can confidently modify the frontend application
    by now including the avatar field. It’s quite simple and a little bit of refactoring.
    Remove the `randomAvatar` function code from the React application and replace
    the values with `user.avatar`, `post.author.avatar`, or `comment.author.avatar`,
    depending on the file and the component.
  prefs: []
  type: TYPE_NORMAL
- en: With those small configurations done, check the **Home** page; you should have
    a similar result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.7 – The Home page with a default avatar](img/Figure_10.07_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – The Home page with a default avatar
  prefs: []
  type: TYPE_NORMAL
- en: Great! Let’s move to creating the **Profile** page so that our Django application
    is ready to accept file uploads.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the ProfileDetails component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the `ProfileDetails` component, we have to create the file that will
    contain the code for this component, add the logic for the navigation, write the
    UI (JSX), and import the component on the **Profile** page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src/components/profile` directory, create a new file called `ProfileDetail.jsx`.
    This file will contain the code for the `ProfileDetails` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/profile/ProfileDetails.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we just need to destruct the props object to retrieve the user object,
    declare the navigate variable to use the `useNagivate` Hook, and finally handle
    the case when the user object is undefined or null:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/profile/ProfileDetaisl.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can confidently write the JSX logic now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/profile/ProfileDetails.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the component is written, create a new file called `Profile.jsx` in
    the `src/pages` directory. This file will contain the code and logic for the **Profile**
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/pages/Profile.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s add the fetching logic for the user and the user posts. No need to create
    another `Post` component as the same `Post` component from `src/components/Post.jsx`
    will be used to list posts created by the profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/pages/Profile.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it’s done, we can now write the UI logic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/pages/Profile.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Let’s now register this page in the `App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/App.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s not forget to add `Link` to the profile in the `Navbar.jsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/Navbar.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! You can now click on the **See Profile** button or directly on the drop-down
    menu of the navigation bar to go to the profile page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.8 – A random profile page](img/Figure_10.08_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – A random profile page
  prefs: []
  type: TYPE_NORMAL
- en: With the profile page ready, we can move on to create the page that will contain
    the form to edit user information.
  prefs: []
  type: TYPE_NORMAL
- en: Editing user information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `useUserActions` Hook by adding a new method to edit user information via
    the API. Then, we will create the form to edit user information. Lastly, we will
    integrate the editing form component on the `EditUser` page.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by adding a new method to the `useUserActions` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the edit method to useUserActions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `src/hooks/user.actions.js` file, we will add another method to the
    `useUserActions` Hook. This function will handle the `patch` request to the API.
    As we are saving a user object in `localStorage`, we will update the value of
    the object if the request succeeds:'
  prefs: []
  type: TYPE_NORMAL
- en: src/hooks/user.actions.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: With the `edit` function written, we can confidently move to create the form
    used to edit user information.
  prefs: []
  type: TYPE_NORMAL
- en: The UpdateProfileForm component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `src/components/UpdateProfileForm.jsx`, create a file called `UpdateProfileForm.jsx`.
    This file will contain the code for the component used to edit user information:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/UpdateProfileForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s start by retrieving the user object from the props and adding the Hooks
    needed for the form handling:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/UpdateProfileForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to write the `handleSubmit` method. This method should handle
    the validity of the form, the request to update the information, and also what
    to display according to the result:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/UpdateProfileForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As we are going to include a file in the data sent to the server, we are using
    a `FormData` object. A `FormData` object is a common way to create a bundle of
    data that will be sent to a server. It provides a simple and easy way to construct
    a set of **key/value** pairs, representing the name of the form fields and their
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of our project, we will need to pass the data in the data variable
    to the `formData` object:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/UpdateProfileForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Object` constructor provides a `keys` method that returns the list of
    keys in a JavaScript object. We then use the `forEach` method to loop through
    the `keys` array, check if `data[key]` value is not null, and then we append the
    values from the data object to the `formData` object. We also need to add a case
    for the avatar field:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/UpdateProfileForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now move to the edit action:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/UpdateProfileForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Nothing complicated here. It’s like what we used to do for other requests on
    the API. Let’s move to the form now. The form will contain fields for the avatar
    such as the first name, the last name, and the bio. These fields are the only
    information the user will update. Let’s start by writing the avatar field first:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/UpdateProfileForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Let’s add the fields for the last name and first name:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/UpdateProfileForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let us add the bio field and the submit button:'
  prefs: []
  type: TYPE_NORMAL
- en: src/components/UpdateProfileForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Great! The `UpdateProfileForm` component is written and we can use it to create
    the `EditProfile.jsx` page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the EditProfile page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inside the `src/pages/` directory, create a new file called `EditProfile.jsx`.
    This file will contain the code for the page that will display the form to edit
    information about the user:'
  prefs: []
  type: TYPE_NORMAL
- en: src/pages/EditProfile.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'With the needed imports added, we can now add the fetching logic and the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: src/pages/EditProfile.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `EditProfile` function, we are planning to retrieve the `profileId`
    that will be used to fetch the up-to-date user information and pass the response
    to the `UpdateProfileForm` component. Naturally, we are returning the `App.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: src/App.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now, go to your profile and click on the **Edit** button. Change the information
    and add an avatar image to make sure everything is working.
  prefs: []
  type: TYPE_NORMAL
- en: The React application is nearly done. We have CRUD operations for authentication,
    posts, comments, and new users. Now, it’s time to focus on the quality and maintainability
    of our components.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we added CRUD operations for the user in the React application.
    We explored how powerful and simple it is to handle media uploading in Django
    and how to create a form that can accept file uploads to a remote server. We have
    also added new components to the React application for better navigation and exploration
    of other profiles. We are done implementing most features of our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to write tests for a React frontend application.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a `formData` object?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the `MEDIA_URL` setting usage in Django?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the `MEDIA_ROOT` setting usage in Django?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
