- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Designing Graphical Interfaces
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计图形界面
- en: Many tools add their own elements to the graphical interface. In the previous
    chapters, we used existing menus, but we can also add new panels to the Blender
    window.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多工具都会向图形界面添加自己的元素。在前几章中，我们使用了现有的菜单，但也可以向Blender窗口添加新的面板。
- en: To design an interface, we must decide which elements to show and how to reach
    them, what information should be provided, and which actions should be allowed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 设计界面时，我们必须决定显示哪些元素以及如何访问它们，提供哪些信息，以及允许哪些操作。
- en: In this chapter, you will learn how to insert new panels into different regions
    of Blender, how to display information and icons, and how to add buttons that
    can invoke operators.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何将新面板插入Blender的不同区域，如何显示信息和图标，以及如何添加可以调用操作员的按钮。
- en: 'This chapter will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding the Blender interface
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Blender界面
- en: Drawing a custom panel
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制自定义面板
- en: Context and UI interaction
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文和UI交互
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will use Blender and Visual Studio Code in this chapter. The examples created
    in this chapter can be found at [https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch5](https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch5).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Blender和Visual Studio Code。本章创建的示例可以在[https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch5](https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch5)找到。
- en: The example files include 2D images to be used as icons. Optionally, any 2D
    software can be used to create custom `.png` images, and you can use them instead.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 示例文件包括用作图标的2D图像。可选地，任何2D软件都可以用来创建自定义的`.png`图像，并且你可以使用它们代替。
- en: To implement our interface, we will have to learn how Blender is structured.
    Let’s begin our journey into graphical interfaces with a deep dive into the Blender
    screen.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现我们的界面，我们必须了解Blender的结构。让我们从深入Blender屏幕开始，开始我们的图形界面之旅。
- en: Areas, regions, and panels
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区域、区域和面板
- en: 'The Blender window is split into **areas**. Each area can contain an **editor**
    of a different type, such as the *viewport* for 3D objects or the *sequencer*
    for editing videos. Each editor, or space, can contain one or more **regions**.
    The number and type of regions vary across different types of editors: for instance,
    some editors, such as the **Preferences** window, have a navigation sidebar, while
    others don’t.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Blender窗口被分为**区域**。每个区域可以包含不同类型的**编辑器**，例如3D对象的*视口*或视频编辑的*序列编辑器*。每个编辑器或空间可以包含一个或多个**区域**。区域的数量和类型因不同类型的编辑器而异：例如，一些编辑器，如**首选项**窗口，有一个导航侧边栏，而其他则没有。
- en: 'The Blender manual explains the interface in detail: [https://docs.blender.org/manual/en/3.1/interface/index.xhtml](https://docs.blender.org/manual/en/3.1/interface/index.xhtml).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Blender手册详细解释了界面：[https://docs.blender.org/manual/en/3.1/interface/index.xhtml](https://docs.blender.org/manual/en/3.1/interface/index.xhtml)。
- en: What we need to know for now is that regions can contain **panels**, and panels
    are the basic containers of graphical elements such as text, editable values,
    and buttons.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们需要知道的是，区域可以包含**面板**，面板是文本、可编辑值和按钮等图形元素的基本容器。
- en: 'We can create new panels with Python, which makes it possible to customize
    any region with ease. A panel must contain information about the area and region
    to which it belongs:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Python创建新的面板，这使得轻松自定义任何区域成为可能。面板必须包含有关它所属的区域和区域的信息：
- en: '![Figure 5.1: Areas, regions, and the panel in the Blender interface](img/Figure_5.01_B18375.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1：Blender界面中的区域、区域和面板](img/Figure_5.01_B18375.jpg)'
- en: 'Figure 5.1: Areas, regions, and the panel in the Blender interface'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：Blender界面中的区域、区域和面板
- en: Internally, panels can access information about Blender and the scene so that
    they can display the status and properties of the objects and execute operators.
    Now that we are more familiar with the anatomy of the screen, we are going to
    create a panel that helps us deal with 3D objects.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，面板可以访问Blender和场景的信息，以便它们可以显示对象的状态和属性并执行操作。现在我们更熟悉屏幕的结构，我们将创建一个帮助我们处理3D对象的面板。
- en: Creating a simple panel
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单面板
- en: We will start with a simple panel that contains some text and icons, and we
    will see how to expand this initial idea into a tool that can help manage the
    objects in the scene.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从包含一些文本和图标的简单面板开始，并了解如何将这个初始想法扩展成一个可以帮助管理场景中对象的工具。
- en: Our panel is a new class that derives from `bpy.types.Panel`. Like operators,
    panels require some static members to be set; otherwise, they will not work. Similar
    to operators, panels can have a `poll()` class method that states under which
    conditions the panel can be displayed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using the `execute` function, panels set up and draw their content
    via the `draw(self,` `context)` function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Since we are adding a new piece to the Blender interface, we will do that inside
    a new add-on. It’s not mandatory, but it makes it easier to enable and disable
    our panel.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: To keep our code orderly and clean, we will create a new folder for the scripts
    written for this chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Setting the environment
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s create a folder for [*Chapter 5*](B18375_05.xhtml#_idTextAnchor100) in
    our `ch5` folder as a **Scripts Folder** and restart Blender.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Our add-on script contains a panel, much like the ones in the previous chapters
    contained operators:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Select `PythonScriptingBlender/ch5/addons` in **Visual** **Studio Code**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file by clicking the **New** **File** icon.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new file `simple_panel.py`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file by double-clicking on it.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now start writing the add-on for our panel.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Drafting our panel add-on
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we know from [*Chapter 3*](B18375_03.xhtml#_idTextAnchor049), three elements
    are required:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: A `bl_info` dictionary containing basic information
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `import bpy` statement to access the Blender API
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `register()` and `unregister()` methods for enabling/disabling add-ons,
    respectively
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also need a class for the graphical element that we want to add – in this
    case, a class that derives from `bpy.types.Panel`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: We will start with the information dictionary and add the stubs for the required
    elements to set a frame on which we can code a fully working UI add-on.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Writing the info dictionary
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `bl_info` dictionary will provide the `name` property of the add-on, its
    `author` and `version`, and the required `blender` version, plus a short `description`.
    We can also add a `category` under which the add-on is listed. Here’s what the
    code will look like:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, we can proceed with the required `import` statements and the main `class`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Drafting the Panel class
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we’ve imported the `bpy` module, we can write a class based on `bpy.types.Panel`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use any name for our class, but Blender recommends some guidelines:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Since our panel will be part of the object properties, the class name must begin
    with `OBJECT`
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name contains `_PT_` in the middle since this is a `Panel Type`
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For now, our class will only contain a *docstring* and a `pass` statement:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Before adding methods and attributes, we will handle the class activation and
    dismissal through the registration functions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Panel registration
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `register` and `unregister` functions add and remove this class to/from
    Blender when the add-on is enabled and disabled, respectively:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With that, we have created the initial structure of our panel add-on. We will
    now add the elements and attributes for displaying some text.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Setting display attributes
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blender looks for attributes that follow the `bl_*` pattern to determine where
    and how the panel is displayed. Panels have the same identification attributes
    as operators, as we saw in [*Chapter 3*](B18375_03.xhtml#_idTextAnchor049), when
    we introduced the `Operator` class:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '`bl_label`: The display name of the panel'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bl_idname`: The unique name of the panel for internal usage'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, there are attributes used only on classes that derive from `bpy.types.Panels`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '`bl_space_type`: The editor to which the panel belongs'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bl_region_type`: The region of the editor to use'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bl_context`: The sub-region for specific objects/modes'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bl_category`: The tab inside the region, when available'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of them are static strings, and `bl_space_type`, `bl_region_type`, and `bl_context`
    must match specific values known to Blender as regions of the screen.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The possible values encompass all the available editors in Blender. That might
    seem overwhelming at first, but once we have an idea of where to place our panel,
    we can look that up in the online documentation at [https://docs.blender.org/api/3.2/bpy.types.Panel.xhtml](https://docs.blender.org/api/3.2/bpy.types.Panel.xhtml).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Since Blender contains many editors and each of them has its own sub-elements,
    we will have a look at the possible combinations.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Choosing our editor view via bl_space_type
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we must decide which Blender editor we are adding our panel to. That
    depends mainly on the purpose of our tool and where it will be more convenient
    to find it. For instance, if our panel helps make videos, it will be part of the
    `bl_space_type`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '`EMPTY`: This value is not used in scripts'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VIEW_3D`: **3D Viewport** for manipulating *objects*'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IMAGE_EDITOR`: **UV/Image Editor** to view and edit *images* and UV Maps'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NODE_EDITOR`: **Node Editor** for node-based *shading* and *compositing* tools'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SEQUENCE_EDITOR`: **Video Sequencer** *editing* tools'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CLIP_EDITOR`: **Movie Clip Editor** for *motion tracking*'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOPESHEET_EDITOR`: **Dope Sheet** for adjusting the timing of *keyframes*'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GRAPH_EDITOR`: **Graph Editor** for drivers and keyframe *interpolation*'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NLA_EDITOR`: **Nonlinear Animation** to combine and layer *actions*'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TEXT_EDITOR` **Text Editor** to edit *scripts* and in-file *documentation*'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CONSOLE`: **Python Console** for interactive script *development*'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INFO`: **Info** about operations, warnings, and error *messages*'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TOPBAR`: **Topbar** for global, *per-window settings*'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STATUSBAR`: **Status Bar** at the bottom of the screen for *general information*'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OUTLINER`: **Outliner** overview of the *scene tree* and data blocks'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PROPERTIES`: **Properties** to edit the *attributes* of active objects and
    data blocks'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FILE_BROWSER`: **File Browser** to scroll through *files* *and assets*'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SPREADSHEET`: **Spreadsheet** to explore *geometry data* in a table'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PREFERENCES`: **Preferences** to edit persistent *configuration* settings'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we have decided on the space type, we are ready to pick a region for it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a region via bl_region_type
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The kind of region depends on the *space* we chose in the previous step. Different
    editors have different regions. So, only the default value is always available.
    Here is a description of all the options for `bl_region_type`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '`WINDOW`: The *main* region of a space area. This is the default value.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HEADER`: A small horizontal strip for *menus* and buttons.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CHANNELS`: Used in older versions of Blender, left for backward compatibility.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TEMPORARY`: *Poupps* detached from the main window.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UI`: Sidebar containing object settings (toggled with *N*).'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TOOLS`: A toolbar containing a set of interactive tools (toggled with *T*).'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TOOL_PROPS`: Settings in *modal windows*, such as **File Browser**.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PREVIEW`: The preview area of the **Video Sequencer**.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HUD`: The operator’s **Redo** panel.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NAVIGATION_BAR`: *Sidebar* in the **Preferences** window.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EXECUTE`: *Bottom bar* in modal windows.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FOOTER`: A bar for displaying *information* about the current operation.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TOOL_HEADER`: A small horizontal strip for *tool settings*.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`XR`: The interface for *virtual* *reality* controllers.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Picking a context via bl_context
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some areas change according to the current selection, active tool, or interaction
    mode. In that case, the `bl_context` attribute is required.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, the `''SCENE''`, `''OBJECT''`, and `''CONSTRAINTS''`. If we are
    not sure about which one to use, we can just activate the tab we are interested
    in and check the `bpy.context.space_data.context =` `NAME_OF_CONTEXT`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2: UI context name in the Info Log area, after Object Properties
    have been selected](img/Figure_5.02_B18375.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: UI context name in the Info Log area, after Object Properties have
    been selected'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Areas that do not follow the user context but still allow you to group their
    panels in tabs offer a *category* attribute instead.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Grouping in tabs using bl_category
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Regions with arbitrary tabs will look at the `bl_category` variable to look
    up the correct label. If no value is given, the new panel will be added to the
    **Miscellaneous** tab. If no tab is named after that value, a new one will be
    created.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use the category attribute at the end of this chapter in conjunction
    with the `'VIEW_3D'` space type. We are going to start with the `'PROPERTIES'`
    editor, which does not have tabs.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Adding a panel to the Object Properties area
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add our panel to the `bl_space_type` to `'PROPERTIES'` and `bl_context` to
    `'object'`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '`Panel` needs a `draw` function where the actual design takes place. At this
    stage, we can leave it blank:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Like most runtime functions of Blender classes, `draw` takes the `self` and
    `context` arguments. As per Python convention, `self` is the running instance
    of the class, while `context` contains information about the current state of
    the Blender scene.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s learn how the `draw` method is used to add elements to the panel’s
    layout.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Drawing the panel’s content
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `draw` function is executed continuously whenever a panel is used or updated.
    For this reason, it should not perform any computationally expensive task and
    just take care of the elements to display.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The elements of a panel are arranged according to its layout. Since the layout
    is a non-static member, it can be accessed inside the `draw` function using `self.layout`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: By default, all elements are stacked vertically in a `column`, but different
    types of layouts will provide a different way to arrange the widgets in a `row`
    or inside a `grid`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Layouts can be also nested together for more complex arrangements. Let’s learn
    how to access the main layout and add elements to it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Working with layouts
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All layout types derive from the `UILayout` class. They have methods to add
    child elements or sub-layouts. The full list of attributes and methods is reported
    in the API documentation at https://docs.blender.org/api/3.2/bpy.types.UILayout.xhtml.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to display text, we can use the `UILayout.label` method. Here are the first
    few lines of code for our `draw` function:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we enable this add-on and reach for the **Object Properties** area, we will
    be able to see our new panel displaying some text:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3: Our panel showing up in the Object Properties area](img/Figure_5.03_B18375.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: Our panel showing up in the Object Properties area'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Displaying icons
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Labels can display **icons** too. There are two types of icons:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '*Built-in* icons that come with Blender. The `label` method provides an `icon`
    keyword to use them.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*External Images* can be used via the `icon_value` parameter.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blender’s native set of icons is used across the application. Each icon is
    identified with a keyword. For instance, `LIGHT` displays a lightbulb:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4: Blender icon for the LIGHT keyword](img/Figure_5.04_B18375.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: Blender icon for the LIGHT keyword'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: There are more than 800 built-in icons, so Blender includes an add-on for searching
    through them.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Looking for built-in icons with the Icon Viewer add-on
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `icon` in the **Search** **Bar** area:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5: Activating the Icon Viewer add-on](img/Figure_5.05_B18375.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: Activating the Icon Viewer add-on'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the add-on has been enabled, the **Icon Viewer** button appears in the
    header of the **Python** **Console** header:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6: The Icon Viewer button in the Python Console header](img/Figure_5.06_B18375.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: The Icon Viewer button in the Python Console header'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking this button opens a window that shows all native icons. We can select
    them by left-clicking:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7: The Icon Viewer add-on window](img/Figure_5.07_B18375.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: The Icon Viewer add-on window'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting an icon displays the associated keyword in the top-right corner.
    The keyword is also copied to the clipboard. For example, if we select the *question
    mark* icon, which is the first icon on the top left at the time of writing, the
    `QUESTION` keyword will be displayed, as shown in the following figure:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个图标将在右上角显示相关的关键字。该关键字也将复制到剪贴板。例如，如果我们选择 *问号* 图标，这是在撰写本文时位于左上角的第一个图标，`QUESTION`
    关键字将被显示，如下面的图所示：
- en: '![Figure 5.8: The QUESTION keyword is displayed in the top-right corner](img/Figure_5.08_B18375.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8：`QUESTION` 关键字显示在右上角](img/Figure_5.08_B18375.jpg)'
- en: 'Figure 5.8: The QUESTION keyword is displayed in the top-right corner'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8：`QUESTION` 关键字显示在右上角
- en: We can type a search key in the filter field in the top middle, which is marked
    with a magnifier icon.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在顶部中间标记有放大镜图标的筛选字段中输入搜索关键字。
- en: 'For instance, we can type `“info”` to show the `''INFO''` icon only. Now that
    we know their keywords, we can display those icons in this way:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以输入 `“info”` 来仅显示 `'INFO'` 图标。现在我们知道了它们的关键字，我们可以这样显示这些图标：
- en: '[PRE5]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Label icons are displayed before the text and are a good way to make it stand
    out:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 标签图标显示在文本之前，是使其突出的一种好方法：
- en: '![Figure 5.9: The ‘INFO’ and ‘QUESTION’ icons displayed in our custom panel](img/Figure_5.09_B18375.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9：在自定义面板中显示的‘INFO’和‘QUESTION’图标](img/Figure_5.09_B18375.jpg)'
- en: 'Figure 5.9: The ‘INFO’ and ‘QUESTION’ icons displayed in our custom panel'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9：在自定义面板中显示的‘INFO’和‘QUESTION’图标
- en: Built-in icons are always available and don’t require external files to be distributed
    alongside our scripts. We can also use image files when needed. The `bpu.utils.previews`
    module can be used to load icons from image files and retrieve them using an index
    number.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 内置图标始终可用，并且不需要与我们的脚本一起分发外部文件。在需要时，我们也可以使用图像文件。`bpu.utils.previews` 模块可以用于从图像文件加载图标并使用索引号检索它们。
- en: Using custom image icons
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用自定义图像图标
- en: In this example, we will add the icon of a smiling face to our panel. The image
    file is named `icon_smile_64.png` and can be found in this chapter’s Git folder.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将添加笑脸图标到我们的面板。图像文件名为 `icon_smile_64.png`，可以在本章的 Git 文件夹中找到。
- en: Alternatively, any image stored in `.png` format alongside the add-on’s `.py`
    file will work. In that case, the image filename used in the script must be changed
    accordingly.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，任何存储在 `.png` 格式并与附加程序的 `.py` 文件一起的图片都将有效。在这种情况下，脚本中使用的图片文件名必须相应更改。
- en: 'The resolution should not be too high: a 64-pixel-wide square picture is usually
    more than enough:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 分辨率不应过高：一个 64 像素宽的方形图片通常就足够了：
- en: '![Figure 5.10: A 64x64 smiley face](img/Figure_5.10_B18375.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10：一个 64x64 的笑脸](img/Figure_5.10_B18375.jpg)'
- en: 'Figure 5.10: A 64x64 smiley face'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10：一个 64x64 的笑脸
- en: 'To add custom icons to Blender, our script needs to import the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要向 Blender 添加自定义图标，我们的脚本需要导入以下内容：
- en: The `os` Python module, to build the icon file path and make sure it will work
    on all platforms
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 的 `os` 模块，用于构建图标文件路径并确保它在所有平台上都能工作
- en: The `bpy.utils.previews` Blender module, to generate a Blender identifier for
    our icon
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blender 的 `bpy.utils.previews` 模块，用于为我们图标生成 Blender 标识符
- en: 'Here is what our `import` section will look like once we import them:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 导入这些内容后，我们的 `import` 部分将看起来如下：
- en: '[PRE6]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Our icons must be accessible everywhere in the script. We can use a global variable,
    a static member, or a singleton for storage. In this example, we are using a global
    variable as it is the simpler option.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的图标必须在脚本中的任何地方都可以访问。我们可以使用全局变量、静态成员或单例进行存储。在这个例子中，我们使用全局变量，因为它是一个更简单的选项。
- en: 'So, right after the `import` section, we must add the following lines:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，紧随 `import` 部分之后，我们必须添加以下行：
- en: '[PRE7]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We initialize the variable as `None` since we can load and clear it inside
    the `register`/`unregister` function. We can also add specific functions for that.
    This way, the code will be easier to follow:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将变量初始化为 `None`，因为我们可以在 `register`/`unregister` 函数内部加载和清除它。我们也可以为此添加特定的函数。这样，代码将更容易理解：
- en: '[PRE8]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we need a function that clears `custom_icons` when the add-on is unregistered:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要一个函数在附加程序注销时清除 `custom_icons`：
- en: '[PRE9]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'These functions are then invoked in the registration section:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数随后在注册部分被调用：
- en: '[PRE10]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once we read the image file, we used `"smile_face"` as the first argument of
    `custom_icons.load()`, so that is the keyword that will be used for retrieving
    its identifier. Here’s the code to use in a label:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们读取了图片文件，我们使用 `"smile_face"` 作为 `custom_icons.load()` 的第一个参数，因此这就是用于检索其标识符的关键字。以下是用于标签的代码：
- en: '[PRE11]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we look up and execute **Reload Scripts** from the *F3* search panel, we
    will see our custom icon in the panel:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11: Smiley icon loaded from our file and displayed in our panel](img/Figure_5.11_B18375.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.11: Smiley icon loaded from our file and displayed in our panel'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: For now, we have used the default column layout. We will learn how to use a
    different arrangement in the next section.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Where have my widgets gone?
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Errors in the interface code fail “silently"; that is, Blender doesn’t complain
    visibly and instead just stops drawing the buggy panel.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: This prevents the UI from crashing but makes our code more difficult to debug;
    we will only notice that some of our widgets are not displayed.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: When that happens, the best thing to do is check the console output or the **Info
    Log** area in the **Scripting** workspace. It will contain *traceback* information
    about which line of code is failing.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Using layouts in our panels
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we are not happy with the default stacking of the global layout, we can add
    a layout type of our choice to it and use that instead, and we’ll get a different
    arrangement.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, we can put two labels on the same line using a `row`. Also, even
    if we are happy with stacking our elements one under the other, it is good practice
    to create a `column` sub-layout anyway. This practice has at least two advantages:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: We preserve the panel's look, even if the default arrangement should change
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We do not pollute the original layout
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s see how we can change the way our widgets are stacked.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Arranging in columns and rows
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can nest more layout types together inside our `draw` function. For instance,
    we can place the last two labels from the previous example side by side rather
    than arrange them vertically. To do that, we must do two things:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: First, we must create a `column` and add the first label to it.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we must create a `row`. The two labels we will add to it will be next
    to each other:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, our panel consists of only two lines:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12: The second line consists of two labels](img/Figure_5.12_B18375.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.12: The second line consists of two labels'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Adding frames with box layouts
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Other types of sub-layouts provide additional effects. For instance, a box
    layout is like a column, but it is framed in a smoothed rectangle. Let’s say we
    want to display some information from the add-on’s `bl_info`. Here, we can add
    these lines to the `draw` function:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After we call **Reload Scripts**, we will see a frame around that information:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13: A box layout surrounds the version information](img/Figure_5.13_B18375.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.13: A box layout surrounds the version information'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: We have put a caption of `"version"` and some information stating `bl_info['version']`
    in a row. That gives the same space to each element. To have more control over
    how much space is taken by the first element, we can use a `split` layout.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Using composite layouts
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some layouts consist of more rows or columns. A `split` layout distributes the
    available space across different columns, while a `grid` layout creates rows and
    columns automatically.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use them to build a more sophisticated panel.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Arranging in splits
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can use the `split` method to create a layout whose columns’ width can be
    tweaked. The `factor` argument is optional and accepts values between `0.0` and
    `1.0`. Leaving it to the default value of `0.0` computes the optimal width automatically;
    otherwise, it sets the percentage occupied by the first column.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we’ll use a factor of `0.33` to give less space to the first
    column. Here, we will also create two columns so that we can fill them later and
    arrange more elements like we would in a table.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet displays two entries per line. The first column takes
    about one-third of the space:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Upon reloading the scripts, we will see our captions taking up one-third of
    the space, leaving the rest to the relevant information:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14: Author and version information taking one-third of the space](img/Figure_5.14_B18375.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.14: Author and version information taking one-third of the space'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: We can take advantage of dictionary methods to add more information from `bl_info`.
    This way, we can populate our `split` layout using a `for` loop.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Populating with dictionaries
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since we have created the columns already, we can add more entries using a loop.
    This is ideal for displaying the entries in a dictionary.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say that we want to show all the add-on information. In that case, we
    can iterate all the keyword/value pairs using the `items()` method:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here, we skip unset values of `bl_info` using `continue` when `v` is empty.
    In these few lines, we can display all the available add-on information:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15: A box layout displaying bl_info](img/Figure_5.15_B18375.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.15: A box layout displaying bl_info'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: If we are happy with leaving the column width to Blender, we can use a grid
    layout instead.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Arranging grids
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `grid_flow` layout is very convenient for arranging our elements into tables
    as it creates rows and columns automatically. For instance, we can display the
    object names from the scene on two columns by using `grid_flow(columns=2)` and
    adding labels to a `for` loop:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This code will display the names of the objects in the current scene, arranged
    in a two-column grid:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16: Object names displayed in a grid](img/Figure_5.16_B18375.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.16: Object names displayed in a grid'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have seen that labels can display icons too. This means we can
    display an icon of the object’s type beside each name, just like the outliner
    does.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Building icon keywords
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A quick search in the `OUTLINER_OB_MESH` and `OUTLINER_OB_CURVE`, follow this
    pattern:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is depicted in the following figure:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.17: Object type icons as displayed in the Icon Viewer area](img/Figure_5.17_B18375.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.17: Object type icons as displayed in the Icon Viewer area'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'With that in mind, we can build those keywords using *string formatting*, a
    feature of Python 3 that makes combining strings and variables easier. To inform
    Python that we are using formatting, we must put an `f` character before the quote
    or apostrophe delimiters, then surround our variables with curly brackets inside
    the string. Here is an example:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With that in mind, we get the string for the object type – for example, `''MESH''`,
    `''CURVE''`, or `''ARMATURE''` – using the `ob.type` attribute, then build the
    icon keyword using the following line:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This result can be fed to the `icon` parameter inside our loop:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can reload the scripts and see how icons are displayed before names:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.18: A custom panel listing the scene objects and their icons](img/Figure_5.18_B18375.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.18: A custom panel listing the scene objects and their icons'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: We don’t want this list to take up too much space on large scenes, so we will
    break the loop after a certain number of objects. For instance, we can stop listing
    objects and display an ellipsis after the fourth listed object.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'Leaving the ellipsis on the last line implies filling the grid row by row.
    To do that, we must set the `row_major` argument to `True` for our `grid_flow`:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A (bad) kind of magic
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary digits appearing in the middle of the code, such as those in `i >
    3`, are called **magic numbers**, and using them is considered bad practice as
    it makes it very difficult to find and change those values at a later stage.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: A better solution is to make those numbers members of the class and access them
    later.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'Storing `3` as a static member makes it easier to display the number of remaining
    objects. String formatting also works with numeric variables, so we can compute
    how many objects are left and use the result in curly brackets:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Since `max_objects` is an attribute of the class, it can be changed via Python.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 'Blender considers these add-ons to be Python modules, so it is possible to
    execute these lines in the **Python Console** or **Text** **Editor** area:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The downside of this trick is that every reload of the add-on resets that value.
    A better way to change the settings in our add-on, which is by using `bpy.types.Preferences`,
    will be discussed in [*Chapter 6*](B18375_06.xhtml#_idTextAnchor129):'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.19: Changing the limit displays more than three objects](img/Figure_5.19_B18375.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.19: Changing the limit displays more than three objects'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Using icons and informative text adds to the visual feedback of our UI. In the
    next section, we’ll take advantage of the colors from layout states to convey
    status information.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Providing color feedback
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our object list will be much more useful if we can highlight which objects
    are selected and which are active. For instance, to reflect the selection status
    of an object in the color of its name, our script must perform two actions:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Check whether an object is selected.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it’s selected or active, display its name in a different color.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s learn how to perform these tasks using Blender’s API.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Checking whether an object has been selected
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can get the selection status of an object using its `select_get()` method.
    For instance, if the `''Cube''` object is selected, its `selected_get` method
    will return `True`:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We already know from [*Chapter 2*](B18375_02.xhtml#_idTextAnchor033)*,* that,
    unlike the selection status, `active` is not a flag of the object, so how we retrieve
    this information is a bit different.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Checking whether an object is active
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To check whether an object is active, we can test whether it matches the one
    stored in `context.object`. Here’s what happens when `''Cube''` is the active
    object:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now that we know how to retrieve the activity status of an object, let’s look
    at ways we can alter the color of its labels.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Drawing layouts in red or gray
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, painting text with a different color is useful to make an entry
    stand out. Blender doesn’t allow us to set the color of a piece of text explicitly,
    but we can take advantage of two specific attributes that alter the way a UI layout
    is displayed:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '`UILayout.enabled = False` is meant to display an element without letting the
    user interact with it. This is very useful if we want to make the user aware that,
    even if an operation is not possible now, the interface for executing it is there
    to be found.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UILayout.alert = True` is useful for warning the user about something wrong,
    or potentially wrong.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Those are very specific purposes, but we can take advantage of how they affect
    the displayed color:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: UI layouts whose `enabled` attribute equals `False` are *gray*
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI layouts whose `alert` attribute equals `True` are *red*
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, we can use that to change the color of an entire layout. Labels are not
    layouts, and the `label()` method returns a `None` type. Since we cannot set those
    attributes directly on the text labels, we need to create a new layout for each
    entry of the grid and use that when we create our text:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can set `item_layout.enabled` to `True` for selected objects and `False`
    for the unselected ones with this line:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Likewise, we can set `item_layout.alert` by assigning the result of the equality
    test `(==`) directly:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As we can see, the list now provides information about which objects are active
    and/or selected:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.20: The active object is dark red, while unselected objects are
    gray](img/Figure_5.20_B18375.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.20: The active object is dark red, while unselected objects are gray'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: We can also add buttons to perform some operations, as we’ll see in the next
    section.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Displaying buttons
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Intuitively, pushing a button performs a transformative action. Since buttons
    take up space, the default interface displays only the more generic operations.
    When we write custom interfaces, we can add more buttons based on our specific
    needs. This is made easier by how Blender translates operators into buttons. In
    this section, we’ll learn how buttons and operators are equivalent when it comes
    to the graphical interface.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Using the operator method
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the `UILayout.operator` method to display a button. In Blender, a
    button executes an operator. This operator is found through its identifier – that
    is, the `bl_idname` attribute, which we encountered in [*Chapter 3*](B18375_03.xhtml#_idTextAnchor049)
    – and every operator must have it.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: For instance, to add a button that deletes the selected objects, we must provide
    the identifier of the **Delete** operator.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use the **Delete** action from the **Object** menu or the *X* key and
    look into the **Scripting** workspace, we will find this new line in the **Info**
    **Log** area:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The part before the parentheses, `bpy.ops.object.delete`, is the operator class.
    We must be careful as we must not use the class itself as the argument of the
    operator, but the identifier of that class. We can get the identifier using the
    `idname()` method:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Using the `'OBJECT_OT_delete'` string as the argument of `operator()` will create
    a **Delete** button.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: ID please
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `operator` class instead of an operator’s identifier with `operator`
    causes `TypeError`: the operator and all the elements that follow it will not
    be displayed.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: We can either use the `idname()` function or the identifier string directly.
    The function is preferred as it guarantees compatibility in case of future changes.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: 'To display a `draw` function:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here’s what we’ll see:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.21: The Delete button has been added to the panel](img/Figure_5.21_B18375.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.21: The Delete button has been added to the panel'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Pressing the **Delete** button deletes the selected object. It is equivalent
    to invoking **Object** | **Delete** from the menu.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Setting the operator’s text and visibility
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can customize the button text or toggle the button’s display. For instance,
    we can hide `context`:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can reflect this information in the button label. The following snippet
    changes the button’s text according to the number of objects that have been selected.
    It also adds an “s” to the word “object” at the end so that it can use the plural
    form when needed:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![Figure 5.22: The text of the button changes according to the selection](img/Figure_5.22_B18375.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.22: The text of the button changes according to the selection'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: Nothing to hide (usually)
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: It is often said that hiding pieces of the UI is generally wrong as it leaves
    the user with no knowledge of where a feature can be found once the conditions
    have been met. This is generally a valid point, even though for didactical purposes,
    a disappearing button was used in the preceding example.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to abide by the “no-hiding” rule, we can add an `else` statement
    containing a disabled layout:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: When coding, rules can be broken but not ignored!
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Overriding an operator’s settings
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `delete` operator prompts a confirm dialog before deleting an object. This
    is its default behavior, and it can be overridden:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.23: Clicking Delete opens a confirmation menu](img/Figure_5.23_B18375.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.23: Clicking Delete opens a confirmation menu'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'This is reflected in the documented docstring. If we type the operator’s address
    and press *Tab*, the autocomplete will display two optional arguments called `use_global`
    and `confirm`:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You can learn more about this by looking at the API documentation. Right-clicking
    on the **Delete** button will display a menu containing a direct link:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.24: The right-click menu of our Delete button can open the online
    documentation](img/Figure_5.24_B18375.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.24: The right-click menu of our Delete button can open the online
    documentation'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation describes these Boolean arguments:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '`use_global` (Boolean, optional): Delete globally or remove the object from
    all scenes'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`confirm` (Boolean, optional): Confirm or prompt for confirmation'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: According to the documentation, setting `use_global` to `True` would remove
    the selected objects from all the currently opened scenes. We do not want that,
    so we are not changing the default value.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: The `confirm` parameter, on the other hand, is `True` by default. We need to
    change that to `False`, and since the button takes care of invoking the operator,
    we need to change that in the button’s properties.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: Setting operator properties
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `operator` function returns an `OperatorProperties` object, which is a
    class containing the attributes that can be set. Typically, we use the following
    code:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Instead, we will store the properties returned by `operator` in the `props`
    variable so that we can change them later:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This button triggers the `delete` operator, which is native to Blender. Since
    the interface considers Python and built-in operators equivalent, we can display
    buttons for our operators too.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: Adding buttons for our functions
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a button for displacing each of the selected objects randomly.
    This can be done to give a more “natural” look to our scene. To do that, we must
    write a new operator. Blender’s operators transform all the selected objects in
    the same way. First, we must import the `random` module at the beginning of our
    script:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We proceed with our location function. It can be part of the operator class,
    but we can also write a function that stands on. The operator will call it inside
    its `execute` method. This function’s arguments are as follows:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: The objects to dislocate
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The max number of units to add or subtract from each object’s location
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which axis should be affected
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will feed the amount of displacement to the `randint` function, which will
    return a random integer number between a `min` and `max` range. We’ll do that
    for each of the three axes (*X*, *Y*, and *Z*), so long as their entries in `do_axis`
    are `True`. The `amount` and `do_axis` arguments are optional. We set their default
    values to `1` and `True, True, True` in the function’s declaration:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, we need an operator to display in the interface. We will add properties
    for the `amount` and `do_axis` function arguments. To an operator, an integer
    and a tuple of Booleans are `IntProperty` and `BoolVectorProperty`, respectively:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The operator methods are straightforward; `poll` only makes sure that there
    are objects selected, while `execute` runs `add_random_location`:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Adding this operator to the layout displays a new button. As stated earlier,
    native and scripted operators are the same to the interfacee. In both cases, it
    looks for the operator’s identifier when it comes to invoking it. Scripted operators
    offer one small advantage, though: we can refer to their `bl_idname` attribute
    directly since their classes and our graphical interface belong to the same module
    or package.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s our line for displaying the **Add random** **Location** button:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And of course, we mustn’t neglect class registration and removal. Here’s the
    line we should add to `register()`:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Likewise, the add-on’s `unregister()` function should contain the following:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'After invoking **Reload Scripts**, a new button will appear:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.25: Our panel now displays two buttons](img/Figure_5.25_B18375.jpg)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.25: Our panel now displays two buttons'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: 'Pressing this button should add random variation to the positions of selected
    objects since the operator properties do not pop up at execution. Even adding
    the `bl_options = {''REGISTER'', ''UNDO''}` operator property, which we learned
    about in the *Writing the Elevator add-on* section in [*Chapter 4*](B18375_04.xhtml#_idTextAnchor075),
    would not change that: operator properties must be displayed explicitly when they
    are not run from the **3D** **Viewport** area.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the operator properties
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides `poll` and `execute`, Blender operators involve another method, named
    `invoke`. The `invoke` method is run internally right before `execute`. Usually,
    we don’t need to define it, but in this case, we use it to tell Blender that we
    want to display and edit the operator properties – that is, our function arguments.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides `self` and `context`, `invoke` takes `event` as an argument. It contains
    information about what triggered the operator, but we don’t need that now. We
    only tell `window_manager` to display the properties dialog. So, we must add a
    few lines of code after the `poll` method:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Reloading the scripts and pressing the `add_random_location` function:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.26: Using operator properties as function arguments](img/Figure_5.26_B18375.jpg)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.26: Using operator properties as function arguments'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: With that, our object panel is finished. As a bonus, next, we will learn how
    to move it to a different part of the UI.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: Using different regions
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, panels can be moved freely to another part of the interface. There
    are a few exceptions where repositioning a panel would not make much sense. For
    instance, a tool that helps select the controls of a character would be of little
    help in the Video Editor, and its `poll()` method might be looking for attributes,
    such as animation bones, outside of the animation’s `context`.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: Outside of those cases, changing the `bl_*` attributes of a `Panel` class is
    enough to move our panel to a different place. Please refer to the *panel attributes*
    that we looked at in the *Creating a simple panel* section of this chapter.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to display our panel in the `bl_space_type` and `bl_region_type` as follows:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '![Figure 5.27: Our panel has been moved to the 3D Viewport area](img/Figure_5.27_B18375.jpg)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.27: Our panel has been moved to the 3D Viewport area'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `bl_category` attribute can be used to specify new or existing
    tabs:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If a Blender add-on contains more panels, putting them under the same tab is
    a good way to keep the interface neat:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.28: A Viewport tab created from the bl_category attribute](img/Figure_5.28_B18375.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.28: A Viewport tab created from the bl_category attribute'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: We have reached the end of our interface overview. There will be more UI insights
    in the next few chapters when we introduce lists and thumbnails, but for now,
    we have built a solid understanding of how to use layouts in Blender.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create and populate a custom `UIPanel` via
    Python and how to integrate that into our add-on. That gave us insight into how
    the Blender interface works in general and which steps we must take to add our
    widgets to it.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: We also nested layouts together for a more complex appearance and displayed
    both native and external icons.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we learned how to change our panel’s look according to the context without
    too much increase in complexity, as well as how to add functions to the UI.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: This closes the first part of this book, where we gained an overall understanding
    of how Blender and Python work together and what Python scripts can do.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: The add-on we have written relies on an external file called `icon_smile_64.png`.
    If we were to distribute it to the public, we would have to package it as a ZIP
    file. This is something we are going to do in [*Chapter 6*](B18375_06.xhtml#_idTextAnchor129),
    which marks the beginning of *Part 2*, *Interactive Tools* *and Animation*.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is it possible for an area of the screen to host more than one editor?
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do all the editors consist of the same regions?
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we set the editor, region, and context to which a panel belongs?
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Must we always set a panel’s category?
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are the elements of a panel static or can they change dynamically?
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we alter the color of a piece of text?
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we display buttons?
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 2: Interactive Tools and Animation'
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part exposes modular, structured add-ons that interact with the animation
    system. It also introduces modal tools that capture the user input and the different
    steps of an operator’s execution.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: 'This section comprises the following chapters:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18375_06.xhtml#_idTextAnchor129), *Structuring Our Code and
    Add-Ons*'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18375_07.xhtml#_idTextAnchor171), *The Animation System*'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18375_08.xhtml#_idTextAnchor206), *Animation Modifiers*'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18375_09.xhtml#_idTextAnchor226), *Animation Drivers*'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18375_10.xhtml#_idTextAnchor247), *Advanced and Modal Operators*'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
