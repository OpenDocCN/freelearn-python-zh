["```py\npip install awscli\n```", "```py\npip install boto3\n```", "```py\nimport boto3\nec2 = boto3.resource('ec2')\nfor instance in ec2.instances.all():\n    print (instance)\n    print (instance.id, instance.state)\n```", "```py\nimport boto3\n\naws_access_key_id = 'accesskey'\naws_secret_access_key = 'secretaccesskey'\nregion_name = 'us-east-2'\n\nec2 = boto3.client('ec2',aws_access_key_id=aws_access_key_id,aws_secret_access_key=aws_secret_access_key,region_name=region_name)\n```", "```py\nimport boto3\n\nec2 = boto3.client('ec2')\nresponse = ec2.describe_instances()\nfor item in response['Reservations']:\n    for eachinstance in item['Instances']:\n        print (eachinstance['InstanceId'],eachinstance['PrivateIpAddress'])\n```", "```py\nimport boto3\nec2 = boto3.resource('ec2')\nec2.create_instances(ImageId='amid-imageid', MinCount=1, MaxCount=5)\n```", "```py\nArista> enable\nArista# configure terminal\nArista(config)# management api http-commands\nArista(config-mgmt-api-http-cmds)# no shutdown\nArista(config-mgmt-api-http-cmds)# protocol http\nArista(config-mgmt-api-http-cmds)#end\n```", "```py\nArista# show management api http-commands \nEnabled: Yes \nHTTPS server: shutdown, set to use port 443 \nHTTP server: running, set to use port 80\n```", "```py\nfrom jsonrpclib import Server \nswitch = Server( \"https://admin:admin@172.16.130.16/command-api\" ) \nresponse = switch.runCmds( 1, [ \"show hostname\" ] ) \nprint (\"Hello, my name is: \", response[0][ \"hostname\" ] )\nresponse = switch.runCmds( 1, [ \"show version\" ] ) \nprint (\"My MAC address is: \", response[0][ \"systemMacAddress\" ] )\nprint (\"My version is: \", response[0][ \"version\" ])\n```", "```py\nHello, my name is: Arista \nMy MAC address is: 08:00:27:0e:bf:31 \nMy version is: 4.14.5F\n```", "```py\n>>> from pprint import pprint as pp\n>>> node = pyeapi.connect(transport='https', host='veos03', username='eapi', password='secret', return_node=True)\n>>> pp(node.enable('show version'))\n[{'command': 'show version',\n  'encoding': 'json',\n  'result': {u'architecture': u'i386',\n             u'bootupTimestamp': 1421765066.11,\n             u'hardwareRevision': u'',\n             u'internalBuildId': u'f590eed4-1e66-43c6-8943-cee0390fbafe',\n             u'internalVersion': u'4.14.5F-2209869.4145F',\n             u'memFree': 115496,\n             u'memTotal': 2028008,\n             u'modelName': u'vEOS',\n             u'serialNumber': u'',\n             u'systemMacAddress': u'00:0c:29:f5:d2:7d',\n             u'version': u'4.14.5F'}}]\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nSimple application that logs on to the APIC and displays all\nof the Tenants. \nLeverages the DevNet Sandbox - APIC Simulator Always On \n    Information at https://developer.cisco.com/site/devnet/sandbox/available-labs/data-center/index.gsp \n\nCode sample based off the ACI-Toolkit Code sample\nhttps://github.com/datacenter/acitoolkit/blob/master/samples/aci-show-tenants.py \n\"\"\"\n\nimport sys\nimport acitoolkit.acitoolkit as ACI\n\n# Credentials and information for the DevNet ACI Simulator Always-On Sandbox\nAPIC_URL = \"https://sandboxapicdc.cisco.com/\"\nAPIC_USER = \"admin\"\nAPIC_PASSWORD = \"C1sco12345\"\n\ndef main():\n    \"\"\"\n    Main execution routine\n    :return: None\n    \"\"\"\n\n    # Login to APIC\n    session = ACI.Session(APIC_URL, APIC_USER, APIC_PASSWORD)\n    resp = session.login()\n    if not resp.ok:\n        print('%% Could not login to APIC')\n        sys.exit(0)\n\n    # Download all of the tenants\n    print(\"TENANT\")\n    print(\"------\")\n    tenants = ACI.Tenant.get(session)\n    for tenant in tenants:\n        print(tenant.name)\n\nif __name__ == '__main__':\n    main()\n```", "```py\nIPaddress1 : Status is UP\nIPaddress2 : Status is Down (Active)\n```", "```py\nfrom orionsdk import SwisClient\nimport requests\n\nnpm_server = 'myserver'\nusername = \"username\"\npassword = \"password\"\n\nverify = False\nif not verify:\n    from requests.packages.urllib3.exceptions import InsecureRequestWarning\n    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nswis = SwisClient(npm_server, username, password)\n\nresults = swis.query(\"SELECT NodeID, DisplayName FROM Orion.Nodes Where Vendor= 'Cisco'\")\n\nfor row in results['results']:\n    print(\"{NodeID:<5}: {DisplayName}\".format(**row))\n\n```", "```py\nSELECT NodeID, DisplayName FROM Orion.Nodes Where Vendor= 'Cisco'\n```", "```py\n>>> \n===================== RESTART: C:\\a1\\checksolarwinds.py =====================\n101 : mytestrouter1\n102 : mytestrouter2\n>>>\n```", "```py\n#!/usr/bin/env python\nimport re\nimport sys\nimport os\nimport time\nfrom netmiko import ConnectHandler\nfrom threading import Thread\nfrom random import randrange\nusername=\"cisco\"\npassword=\"cisco\"\n\nsplitlist = lambda lst, sz: [lst[i:i+sz] for i in range(0, len(lst), sz)]\n\nreturns = {}\nresultoutput={}\ndevlist=[]\ncmdlist=\"\"\n\ndef fetchallvalues(sourceip,sourcelist,delay,cmddelay):\n    print (\"checking for.....\"+sourceip)\n    cmdend=\" repeat 10\" # this is to ensure that we ping for 10 packets\n    splitsublist=splitlist(sourcelist,6) # this is to ensure we open not more than 6 sessions on router at a time\n    threads_imagex= []\n    for item in splitsublist:\n        t = Thread(target=fetchpingvalues, args=(sourceip,item,cmdend,delay,cmddelay,))\n        t.start()\n        time.sleep(randrange(1,2,1)/20)\n        threads_imagex.append(t)\n\n    for t in threads_imagex:\n        t.join() \n\ndef fetchpingvalues(devip,destips,cmdend,delay,cmddelay):\n    global resultoutput\n    ttl=\"0\"\n    destip=\"none\"\n    command=\"\"\n    try:\n        output=\"\"\n        device = ConnectHandler(device_type='cisco_ios', ip=devip, username=username, password=password, global_delay_factor=cmddelay)\n        time.sleep(delay)\n        device.clear_buffer()\n        for destip in destips:\n            command=\"ping \"+destip+\" source \"+devip+cmdend\n            output = device.send_command_timing(command,delay_factor=cmddelay)\n            if (\"round-trip\" in output):\n                resultoutput[devip+\":\"+destip]=\"True\"\n            elif (\"Success rate is 0 percent\" in output):\n                resultoutput[devip+\":\"+destip]=\"False\"\n        device.disconnect()\n    except:\n        print (\"Error connecting to ...\"+devip)\n        for destip in destips:\n            resultoutput[devip+\":\"+destip]=\"False\"\n\ndef getallvalues(allips):\n    global resultoutput\n    threads_imagex= []\n    for item in allips:\n        #print (\"calling \"+item)\n        t = Thread(target=fetchallvalues, args=(item,allips,2,1,))\n        t.start()\n        time.sleep(randrange(1,2,1)/30)\n        threads_imagex.append(t)\n    for t in threads_imagex:\n        t.join()\n    dnew=sorted(resultoutput.items()) \n    return dnew\n\n#print (getallvalues([\"192.168.255.240\",\"192.168.255.245\",\"192.168.255.248\",\"192.168.255.249\",\"4.2.2.2\"]))\n```", "```py\nprint(getallvalues([\"192.168.255.240\",\"192.168.255.245\",\"192.168.255.248\",\"192.168.255.249\",\"4.2.2.2\"]))\n```", "```py\nimport getmeshvalue\nfrom getmeshvalue import getallvalues\n\ngetdevinformation={}\ndevicenamemapping={}\narraydeviceglobal=[]\npingmeshvalues={}\n\narraydeviceglobal=[\"192.168.255.240\",\"192.168.255.245\",\"192.168.255.248\",\"192.168.255.249\",\"4.2.2.2\"]\n\ndevicenamemapping['192.168.255.240']=\"R1\"\ndevicenamemapping['192.168.255.245']=\"R2\"\ndevicenamemapping['192.168.255.248']=\"R3\"\ndevicenamemapping['192.168.255.249']=\"R4\"\ndevicenamemapping['4.2.2.2']=\"Random\"\n\ndef getmeshvalues():\n        global arraydeviceglobal\n        global pingmeshvalues\n        arraydeviceglobal=sorted(set(arraydeviceglobal))\n        tval=getallvalues(arraydeviceglobal)\n        pingmeshvalues = dict(tval)\n\ngetmeshvalues()\n\ndef createhtml():\n    global arraydeviceglobal\n    fopen=open(\"C:\\pingmesh\\pingmesh.html\",\"w\") ### this needs to be changed as web path of the html location\n\n    head=\"\"\"<html><head><meta http-equiv=\"refresh\" content=\"60\" ></head>\"\"\"\n    head=head+\"\"\"<script type=\"text/javascript\">\nfunction updatetime() {\n    var x = new Date(document.lastModified);\n    document.getElementById(\"modified\").innerHTML = \"Last Modified: \"+x+\" \";\n}\n</script>\"\"\"+\"<body onLoad='updatetime();'>\"\n    head=head+\"<div style='display: inline-block;float: right;font-size: 80%'><h4><h4><p id='modified'></p></div>\"\n    head=head+\"<div style='display: inline-block;float: left;font-size: 90%'></h4><center><h2>Network Health Dashboard<h2></div>\"\n    head=head+\"<br><div><table border='1' align='center'><caption><b>Ping Matrix</b></caption>\"\n    head=head+\"<center><br><br><br><br><br><br><br><br>\"\n    fopen.write(head)\n    dval=\"\"\n    fopen.write(\"<tr><td>Devices</td>\")\n    for fromdevice in arraydeviceglobal:\n        fopen.write(\"<td><b>\"+devicenamemapping[fromdevice]+\"</b></td>\")\n    fopen.write(\"</tr>\")\n    for fromdevice in arraydeviceglobal:\n        fopen.write(\"<tr>\")\n        fopen.write(\"<td><b>\"+devicenamemapping[fromdevice]+\"</b></td>\")\n        for todevice in arraydeviceglobal:\n            askvalue=fromdevice+\":\"+todevice\n            if (askvalue in pingmeshvalues):\n                getallvalues=pingmeshvalues.get(askvalue)\n                bgcolor='lime'\n                if (getallvalues == \"False\"):\n                    bgcolor='salmon'\n            fopen.write(\"<td align='center' font size='2' height='2' width='2' bgcolor='\"+bgcolor+\"'title='\"+askvalue+\"'>\"+\"<font color='white'><b>\"+getallvalues+\"</b></font></td>\")\n        fopen.write(\"</tr>\\n\")\n    fopen.write(\"</table></div>\")\n    fopen.close()\n\ncreatehtml()\n\nprint(\"All done!!!!\")\n```", "```py\ndevicenamemapping['192.168.255.240']=\"R1\"\ndevicenamemapping['192.168.255.245']=\"R2\"\ndevicenamemapping['192.168.255.248']=\"R3\"\ndevicenamemapping['192.168.255.249']=\"R4\"\ndevicenamemapping['4.2.2.2']=\"Random\"\n```"]