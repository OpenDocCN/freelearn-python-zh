- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SOLID Principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of software engineering, principles and best practices are the
    backbone of a robust, maintainable, and efficient code base. In the previous chapter,
    we introduced the foundational principles every developer needs to follow.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we continue exploring design principles, focusing on **SOLID**,
    an acronym coined by Robert C. Martin, representing a set of five design principles
    he proposed, aimed at making software more understandable, flexible, and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single responsibility** **principle** (**SRP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open-closed** **principle** (**OCP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Liskov substitution** **principle** (**LSP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interface segregation** **principle** (**ISP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependency inversion** **principle** (**DIP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have an understanding of these five additional
    design principles and how to apply them in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: See the requirements presented in [*Chapter 1*](B21896_01.xhtml#_idTextAnchor017).
  prefs: []
  type: TYPE_NORMAL
- en: SRP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SRP is a fundamental concept in software design. It advocates that when
    defining a class to provide functionality, that class should have only one reason
    to exist and should be responsible for only one aspect of the functionality. In
    simpler terms, it promotes the idea that each class should have one job or responsibility,
    and that job should be encapsulated within that class.
  prefs: []
  type: TYPE_NORMAL
- en: Thus by adhering to the SRP, you are essentially striving for classes that are
    focused, cohesive, and specialized in their functionality. This approach plays
    a crucial role in enhancing the maintainability and comprehensibility of your
    code base. When each class has a well-defined and single purpose, it becomes easier
    to manage, understand, and extend your code.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there is no obligation for you to follow the SRP. But knowing about
    the principle and thinking about your code with that in mind will improve your
    code base over time.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, applying the SRP often leads to smaller, more focused classes,
    which can be combined and composed to create complex systems while maintaining
    a clear and organized structure.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The SRP is not about minimizing the number of lines of code in a class but rather
    about ensuring that a class has a single reason to change, reducing the likelihood
    of unintended side effects when making modifications.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go through a small example to make things more clear.
  prefs: []
  type: TYPE_NORMAL
- en: An example of software design following the SRP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s imagine some code that you could have in many different types of applications
    such as content or document management tools or a specialized web app, which includes
    functionality to generate a PDF file and save it to disk. To help understand the
    SRP, let’s consider an initial version where the code does not follow this principle.
    In such a version, the developer would probably define a class dealing with reports,
    called `Report`, and would implement it in a way that makes it responsible for
    generating a report and also saving it to a file. The typical code for this class
    would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `Report` class has two responsibilities. First, generating
    a report, and then, saving the report’s content to a file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, that is fine. But design principles encourage us to think about
    improving things for the future, as the requirements evolve and the code grows
    to handle complexity and change. Here, the SRP teaches us to separate things.
    To adhere to the SRP, we can refactor that code to use two different classes that
    would each have one responsibility, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the first class, responsible for generating the report’s content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a second class to deal with the need to save the report to a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To confirm that our refactored version works, let’s add the following code
    to make it possible to immediately test things:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To recapitulate, here is the complete code, saved in the `ch02/srp.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result of the code, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'class Rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, width:float, height: float):'
  prefs: []
  type: TYPE_NORMAL
- en: 'self.width: float = width'
  prefs: []
  type: TYPE_NORMAL
- en: 'self.height: float = height'
  prefs: []
  type: TYPE_NORMAL
- en: 'def calculate_area(shape) -> float:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if isinstance(shape, Rectangle):'
  prefs: []
  type: TYPE_NORMAL
- en: return shape.width * shape.height
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: import math
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from typing import Protocol
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'class Shape(Protocol):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def area(self) -> float:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'class Rectangle:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def __init__(self, width: float, height: float):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'self.width: float = width'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'self.height: float = height'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def area(self) -> float:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return self.width * self.height
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'class Circle:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def __init__(self, radius: float):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'self.radius: float = radius'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def area(self) -> float:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return math.pi * (self.radius**2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'def calculate_area(shape: Shape) -> float:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return shape.area()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'if __name__ == "__main__":'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: rect = Rectangle(12, 8)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: rect_area = calculate_area(rect)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print(f"Rectangle area: {rect_area}")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: circ = Circle(6.5)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: circ_area = calculate_area(circ)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print(f"Circle area: {circ_area:.2f}")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: import math
  prefs: []
  type: TYPE_NORMAL
- en: from typing import Protocol
  prefs: []
  type: TYPE_NORMAL
- en: 'class Shape(Protocol):'
  prefs: []
  type: TYPE_NORMAL
- en: 'def area(self) -> float:'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'class Rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, width: float, height: float):'
  prefs: []
  type: TYPE_NORMAL
- en: 'self.width: float = width'
  prefs: []
  type: TYPE_NORMAL
- en: 'self.height: float = height'
  prefs: []
  type: TYPE_NORMAL
- en: 'def area(self) -> float:'
  prefs: []
  type: TYPE_NORMAL
- en: return self.width * self.height
  prefs: []
  type: TYPE_NORMAL
- en: 'class Circle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, radius: float):'
  prefs: []
  type: TYPE_NORMAL
- en: 'self.radius: float = radius'
  prefs: []
  type: TYPE_NORMAL
- en: 'def area(self) -> float:'
  prefs: []
  type: TYPE_NORMAL
- en: return math.pi * (self.radius**2)
  prefs: []
  type: TYPE_NORMAL
- en: 'def calculate_area(shape: Shape) -> float:'
  prefs: []
  type: TYPE_NORMAL
- en: return shape.area()
  prefs: []
  type: TYPE_NORMAL
- en: 'if __name__ == "__main__":'
  prefs: []
  type: TYPE_NORMAL
- en: rect = Rectangle(12, 8)
  prefs: []
  type: TYPE_NORMAL
- en: rect_area = calculate_area(rect)
  prefs: []
  type: TYPE_NORMAL
- en: 'print(f"Rectangle area: {rect_area}")'
  prefs: []
  type: TYPE_NORMAL
- en: circ = Circle(6.5)
  prefs: []
  type: TYPE_NORMAL
- en: circ_area = calculate_area(circ)
  prefs: []
  type: TYPE_NORMAL
- en: 'print(f"Circle area: {circ_area:.2f}")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: python ch02/ocp.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Rectangle area: 96'
  prefs: []
  type: TYPE_NORMAL
- en: calculate_area function. The new design is elegant and allows ease of maintenance
    thanks to following the OCP.
  prefs: []
  type: TYPE_NORMAL
- en: So, you have now discovered another principle you should be using daily, which
    promotes designs both adaptable to evolving requirements and stable for their
    existing functionalities.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: LSP
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The LSP is another fundamental concept in object-oriented programming. It dictates
    how subclasses should relate to their superclasses. According to the LSP, if a
    program uses objects of a superclass, then the substitution of these objects with
    objects of a subclass should not change the correctness and expected behavior
    of the program.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Following this principle is important for maintaining the robustness of a software
    system. It ensures that, when using inheritance, subclasses extend their parent
    classes without altering their external behavior. For example, if a function works
    correctly with an object of a superclass, it should also work correctly with objects
    of any subclass of this superclass.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The LSP allows developers to introduce new subclass types without the risk of
    breaking existing functionality. This is particularly important in large-scale
    systems where changes in one part can have effects on other parts of the system.
    By following the LSP, developers can safely modify and extend classes, knowing
    that their new subclasses will integrate seamlessly with the established hierarchy
    and functionality.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: An example of design following the LSP
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s consider a `Bird` class and a `Penguin` class that subclasses it:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, for the needs of a hypothetical program that makes birds fly, we add
    a `make_bird_fly` function:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: With the current code, we can see that if we pass an instance of the `Bird`
    class to the function, we get the expected behavior (`the bird will fly`), whereas
    if we pass an instance of the `Penguin` class, we will get another behavior (`it
    will not fly`). You can analyze the code representing this first design provided
    in the `ch02/lsp_violation.py` file and run it to test this result. This shows
    us or at least gives us the intuition of what the LSP wants to help us avoid.
    So now, how could we improve the design by following the LSP?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To adhere to the LSP, we can refactor the code and introduce new classes to
    ensure that the behavior remains consistent:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We keep the `Bird` class, but we use a better method to represent the behavior
    we want; let’s call it `move()`. The class will now look as follows:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we introduce a `FlyingBird` class and a `FlightlessBird` class, both
    inheriting from the `Bird` class:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the `make_bird_move` function can be defined as follows:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As usual, we add some code necessary to test the design:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The complete code for this new design, saved in the `ch02/lsp.py` file, is
    as follows:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the example, run the following command:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'class AllInOnePrinter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def print_document(self):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Printing")
  prefs: []
  type: TYPE_NORMAL
- en: 'def scan_document(self):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Scanning")
  prefs: []
  type: TYPE_NORMAL
- en: 'def fax_document(self):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Faxing")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: from typing import Protocol
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'class Printer(Protocol):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def print_document(self):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'class Scanner(Protocol):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def scan_document(self):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'class Fax(Protocol):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def fax_document(self):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'class AllInOnePrinter:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def print_document(self):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Printing")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def scan_document(self):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Scanning")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def fax_document(self):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Faxing")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'class SimplePrinter:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def print_document(self):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Simply Printing")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'def do_the_print(printer: Printer):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: printer.print_document()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'if __name__ == "__main__":'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: all_in_one = AllInOnePrinter()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: all_in_one.scan_document()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: all_in_one.fax_document()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: do_the_print(all_in_one)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: simple = SimplePrinter()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: do_the_print(simple)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: from typing import Protocol
  prefs: []
  type: TYPE_NORMAL
- en: 'class Printer(Protocol):'
  prefs: []
  type: TYPE_NORMAL
- en: 'def print_document(self):'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'class Scanner(Protocol):'
  prefs: []
  type: TYPE_NORMAL
- en: 'def scan_document(self):'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'class Fax(Protocol):'
  prefs: []
  type: TYPE_NORMAL
- en: 'def fax_document(self):'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'class AllInOnePrinter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def print_document(self):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Printing")
  prefs: []
  type: TYPE_NORMAL
- en: 'def scan_document(self):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Scanning")
  prefs: []
  type: TYPE_NORMAL
- en: 'def fax_document(self):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Faxing")
  prefs: []
  type: TYPE_NORMAL
- en: 'class SimplePrinter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def print_document(self):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Simply Printing")
  prefs: []
  type: TYPE_NORMAL
- en: 'def do_the_print(printer: Printer):'
  prefs: []
  type: TYPE_NORMAL
- en: printer.print_document()
  prefs: []
  type: TYPE_NORMAL
- en: 'if __name__ == "__main__":'
  prefs: []
  type: TYPE_NORMAL
- en: all_in_one = AllInOnePrinter()
  prefs: []
  type: TYPE_NORMAL
- en: all_in_one.scan_document()
  prefs: []
  type: TYPE_NORMAL
- en: all_in_one.fax_document()
  prefs: []
  type: TYPE_NORMAL
- en: do_the_print(all_in_one)
  prefs: []
  type: TYPE_NORMAL
- en: simple = SimplePrinter()
  prefs: []
  type: TYPE_NORMAL
- en: do_the_print(simple)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: python ch02/isp.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Scanning
  prefs: []
  type: TYPE_NORMAL
- en: Faxing
  prefs: []
  type: TYPE_NORMAL
- en: Printing
  prefs: []
  type: TYPE_NORMAL
- en: Simply Printing
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'class Email:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def send_email(self, message):'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(f"Sending email: {message}")'
  prefs: []
  type: TYPE_NORMAL
- en: 'class Notification:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self):'
  prefs: []
  type: TYPE_NORMAL
- en: self.email = Email()
  prefs: []
  type: TYPE_NORMAL
- en: 'def send(self, message):'
  prefs: []
  type: TYPE_NORMAL
- en: self.email.send_email(message)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: from typing import Protocol
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'class MessageSender(Protocol):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def send(self, message: str):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'class Email:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def send(self, message: str):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print(f"Sending email: {message}")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'class Notification:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def __init__(self, sender: MessageSender):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'self.sender: MessageSender = sender'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def send(self, message: str):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.sender.send(message)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'if __name__ == "__main__":'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: email = Email()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: notif = Notification(sender=email)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: notif.send(message="This is the message.")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: from typing import Protocol
  prefs: []
  type: TYPE_NORMAL
- en: 'class MessageSender(Protocol):'
  prefs: []
  type: TYPE_NORMAL
- en: 'def send(self, message: str):'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 'class Email:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def send(self, message: str):'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(f"Sending email: {message}")'
  prefs: []
  type: TYPE_NORMAL
- en: 'class Notification:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, sender: MessageSender):'
  prefs: []
  type: TYPE_NORMAL
- en: self.sender = sender
  prefs: []
  type: TYPE_NORMAL
- en: 'def send(self, message: str):'
  prefs: []
  type: TYPE_NORMAL
- en: self.sender.send(message)
  prefs: []
  type: TYPE_NORMAL
- en: 'if __name__ == "__main__":'
  prefs: []
  type: TYPE_NORMAL
- en: email = Email()
  prefs: []
  type: TYPE_NORMAL
- en: notif = Notification(sender=email)
  prefs: []
  type: TYPE_NORMAL
- en: notif.send(message="This is the message.")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: python ch02/dip.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Notification and Email are based on the MessageSender abstraction, so this design
    adheres to the DIP.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: In this chapter, we explored additional principles to the ones presented in
    [*Chapter 1*](B21896_01.xhtml#_idTextAnchor017), *Foundational Design Principles*.
    Understanding and applying SOLID is crucial for writing maintainable, robust,
    and scalable Python code. These principles provide a strong foundation for good
    software design, making it easier to manage complexity, reduce errors, and improve
    the overall quality of your code.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next chapter, we will start exploring design patterns in Python, another
    essential topic for Python developers aiming for excellence.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Part 2: From the Gang of Four'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This part explores the classic design patterns from the Gang of Four (GoF),
    which are used to solve everyday problems, and how to apply them as a Python developer.
    This part includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21896_03.xhtml#_idTextAnchor061), *Creational Design Patterns*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21896_04.xhtml#_idTextAnchor088), *Structural Design Patterns*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21896_05.xhtml#_idTextAnchor121), *Behavioral Design Patterns*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
