- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: SOLID Principles
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOLID 原则
- en: In the world of software engineering, principles and best practices are the
    backbone of a robust, maintainable, and efficient code base. In the previous chapter,
    we introduced the foundational principles every developer needs to follow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程的世界里，原则和最佳实践是构建健壮、可维护和高效代码库的基石。在前一章中，我们介绍了每个开发者都需要遵循的基础原则。
- en: In this chapter, we continue exploring design principles, focusing on **SOLID**,
    an acronym coined by Robert C. Martin, representing a set of five design principles
    he proposed, aimed at making software more understandable, flexible, and maintainable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们继续探讨设计原则，重点关注由罗伯特·C·马丁提出的 SOLID，这是一个代表他提出的五个设计原则的首字母缩略词，旨在使软件更易于理解、灵活和可维护。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将涵盖以下主要内容：
- en: '**Single responsibility** **principle** (**SRP**)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一职责原则**（**SRP**）'
- en: '**Open-closed** **principle** (**OCP**)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放封闭原则**（**OCP**）'
- en: '**Liskov substitution** **principle** (**LSP**)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**里氏替换原则**（**LSP**）'
- en: '**Interface segregation** **principle** (**ISP**)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口隔离原则**（**ISP**）'
- en: '**Dependency inversion** **principle** (**DIP**)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖倒置原则**（**DIP**）'
- en: By the end of this chapter, you’ll have an understanding of these five additional
    design principles and how to apply them in Python.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将理解这五个额外的设计原则以及如何在 Python 中应用它们。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: See the requirements presented in [*Chapter 1*](B21896_01.xhtml#_idTextAnchor017).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第 1 章](B21896_01.xhtml#_idTextAnchor017)中提出的要求。
- en: SRP
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SRP
- en: The SRP is a fundamental concept in software design. It advocates that when
    defining a class to provide functionality, that class should have only one reason
    to exist and should be responsible for only one aspect of the functionality. In
    simpler terms, it promotes the idea that each class should have one job or responsibility,
    and that job should be encapsulated within that class.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SRP 是软件设计中的一个基本概念。它主张在定义一个类以提供功能时，该类应该只有一个存在的理由，并且只负责功能的一个方面。用更简单的话说，它提倡每个类应该有一个工作或职责，并且这个工作应该封装在该类中。
- en: Thus by adhering to the SRP, you are essentially striving for classes that are
    focused, cohesive, and specialized in their functionality. This approach plays
    a crucial role in enhancing the maintainability and comprehensibility of your
    code base. When each class has a well-defined and single purpose, it becomes easier
    to manage, understand, and extend your code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过遵循 SRP，你实际上是在努力使类专注于功能、具有凝聚力和专业化。这种方法在提高代码库的可维护性和可理解性方面发挥着至关重要的作用。当每个类都有一个明确且单一的目的时，它就更容易管理、理解和扩展。
- en: Of course, there is no obligation for you to follow the SRP. But knowing about
    the principle and thinking about your code with that in mind will improve your
    code base over time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你没有义务遵循 SRP。但了解这个原则，并带着这个想法思考你的代码，将随着时间的推移提高你的代码库。
- en: In practice, applying the SRP often leads to smaller, more focused classes,
    which can be combined and composed to create complex systems while maintaining
    a clear and organized structure.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，应用单一职责原则（SRP）通常会导致更小、更专注的类，这些类可以组合和组合以创建复杂的系统，同时保持清晰和有序的结构。
- en: Note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The SRP is not about minimizing the number of lines of code in a class but rather
    about ensuring that a class has a single reason to change, reducing the likelihood
    of unintended side effects when making modifications.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: SRP 并非关于最小化类中的代码行数，而是确保一个类只有一个改变的理由，减少在修改时产生意外副作用的可能性。
- en: Let’s go through a small example to make things more clear.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个小例子来使事情更清晰。
- en: An example of software design following the SRP
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟随 SRP 的软件设计示例
- en: 'Let’s imagine some code that you could have in many different types of applications
    such as content or document management tools or a specialized web app, which includes
    functionality to generate a PDF file and save it to disk. To help understand the
    SRP, let’s consider an initial version where the code does not follow this principle.
    In such a version, the developer would probably define a class dealing with reports,
    called `Report`, and would implement it in a way that makes it responsible for
    generating a report and also saving it to a file. The typical code for this class
    would look like the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一些可以在许多不同类型的应用程序中使用的代码，例如内容或文档管理工具或专门的Web应用程序，这些应用程序包括生成PDF文件并将其保存到磁盘的功能。为了帮助理解SRP（单一职责原则），让我们考虑一个初始版本，其中代码不遵循此原则。在这种情况下，开发者可能会定义一个处理报告的类，称为`Report`，并以使其负责生成报告并保存到文件的方式实现它。此类典型的代码可能如下所示：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, the `Report` class has two responsibilities. First, generating
    a report, and then, saving the report’s content to a file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`Report`类有两个职责。首先，生成报告，然后，将报告内容保存到文件。
- en: 'Of course, that is fine. But design principles encourage us to think about
    improving things for the future, as the requirements evolve and the code grows
    to handle complexity and change. Here, the SRP teaches us to separate things.
    To adhere to the SRP, we can refactor that code to use two different classes that
    would each have one responsibility, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是可以的。但设计原则鼓励我们考虑为未来改进事物，因为需求会演变，代码会增长以处理复杂性和变化。在这里，SRP（单一职责原则）教导我们分离事物。为了遵循SRP，我们可以重构代码以使用两个不同的类，每个类将各自有一个职责，如下所示：
- en: 'Create the first class, responsible for generating the report’s content:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第一个类，负责生成报告内容：
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a second class to deal with the need to save the report to a file:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个第二类来处理将报告保存到文件的需求：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To confirm that our refactored version works, let’s add the following code
    to make it possible to immediately test things:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确认我们的重构版本可以正常工作，让我们添加以下代码以便立即进行测试：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To recapitulate, here is the complete code, saved in the `ch02/srp.py` file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结，以下是完整的代码，保存在`ch02/srp.py`文件中：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To see the result of the code, run the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看代码的结果，请运行以下命令：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will get the following output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下输出：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'class Rectangle:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Rectangle:'
- en: 'def __init__(self, width:float, height: float):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, width:float, height: float):'
- en: 'self.width: float = width'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.width: float = width'
- en: 'self.height: float = height'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.height: float = height'
- en: 'def calculate_area(shape) -> float:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'def calculate_area(shape) -> float:'
- en: 'if isinstance(shape, Rectangle):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 'if isinstance(shape, Rectangle):'
- en: return shape.width * shape.height
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: return shape.width * shape.height
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: import math
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import math
- en: from typing import Protocol
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from typing import Protocol
- en: '[PRE8]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'class Shape(Protocol):'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class Shape(Protocol):'
- en: 'def area(self) -> float:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def area(self) -> float:'
- en: '...'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE9]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'class Rectangle:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class Rectangle:'
- en: 'def __init__(self, width: float, height: float):'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def __init__(self, width: float, height: float):'
- en: 'self.width: float = width'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'self.width: float = width'
- en: 'self.height: float = height'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'self.height: float = height'
- en: 'def area(self) -> float:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def area(self) -> float:'
- en: return self.width * self.height
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return self.width * self.height
- en: '[PRE10]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'class Circle:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class Circle:'
- en: 'def __init__(self, radius: float):'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def __init__(self, radius: float):'
- en: 'self.radius: float = radius'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'self.radius: float = radius'
- en: 'def area(self) -> float:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def area(self) -> float:'
- en: return math.pi * (self.radius**2)
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return math.pi * (self.radius**2)
- en: '[PRE11]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'def calculate_area(shape: Shape) -> float:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def calculate_area(shape: Shape) -> float:'
- en: return shape.area()
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return shape.area()
- en: '[PRE12]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'if __name__ == "__main__":'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if __name__ == "__main__":'
- en: rect = Rectangle(12, 8)
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rect = Rectangle(12, 8)
- en: rect_area = calculate_area(rect)
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rect_area = calculate_area(rect)
- en: 'print(f"Rectangle area: {rect_area}")'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'print(f"Rectangle area: {rect_area}")'
- en: circ = Circle(6.5)
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: circ = Circle(6.5)
- en: circ_area = calculate_area(circ)
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: circ_area = calculate_area(circ)
- en: 'print(f"Circle area: {circ_area:.2f}")'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'print(f"Circle area: {circ_area:.2f}")'
- en: '[PRE13]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: import math
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: import math
- en: from typing import Protocol
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: from typing import Protocol
- en: 'class Shape(Protocol):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Shape(Protocol):'
- en: 'def area(self) -> float:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 'def area(self) -> float:'
- en: '...'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'class Rectangle:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Rectangle:'
- en: 'def __init__(self, width: float, height: float):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, width: float, height: float):'
- en: 'self.width: float = width'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.width: float = width'
- en: 'self.height: float = height'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.height: float = height'
- en: 'def area(self) -> float:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 'def area(self) -> float:'
- en: return self.width * self.height
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: return self.width * self.height
- en: 'class Circle:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Circle:'
- en: 'def __init__(self, radius: float):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, radius: float):'
- en: 'self.radius: float = radius'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.radius: float = radius'
- en: 'def area(self) -> float:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'def area(self) -> float:'
- en: return math.pi * (self.radius**2)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: return math.pi * (self.radius**2)
- en: 'def calculate_area(shape: Shape) -> float:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'def calculate_area(shape: Shape) -> float:'
- en: return shape.area()
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: return shape.area()
- en: 'if __name__ == "__main__":'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 'if __name__ == "__main__":'
- en: rect = Rectangle(12, 8)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: rect = Rectangle(12, 8)
- en: rect_area = calculate_area(rect)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`rect_area = calculate_area(rect)`'
- en: 'print(f"Rectangle area: {rect_area}")'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`print(f"Rectangle area: {rect_area}")`'
- en: circ = Circle(6.5)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`circ = Circle(6.5)`'
- en: circ_area = calculate_area(circ)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`circ_area = calculate_area(circ)`'
- en: 'print(f"Circle area: {circ_area:.2f}")'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`print(f"Circle area: {circ_area:.2f}")`'
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: python ch02/ocp.py
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`python ch02/ocp.py`'
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Rectangle area: 96'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rectangle area: 96`'
- en: calculate_area function. The new design is elegant and allows ease of maintenance
    thanks to following the OCP.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`calculate_area` 函数。新的设计优雅，并且由于遵循了 OCP，易于维护。'
- en: So, you have now discovered another principle you should be using daily, which
    promotes designs both adaptable to evolving requirements and stable for their
    existing functionalities.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，你现在已经发现了另一个你应该每天使用的原则，它既促进了适应不断变化的需求的设计，又保持了现有功能的不变性。
- en: LSP
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: LSP
- en: The LSP is another fundamental concept in object-oriented programming. It dictates
    how subclasses should relate to their superclasses. According to the LSP, if a
    program uses objects of a superclass, then the substitution of these objects with
    objects of a subclass should not change the correctness and expected behavior
    of the program.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: LSP 是面向对象编程中的另一个基本概念。它规定了子类应该如何与它们的超类相关联。根据 LSP，如果一个程序使用超类的对象，那么用子类的对象替换这些对象不应该改变程序的正确性和预期的行为。
- en: Following this principle is important for maintaining the robustness of a software
    system. It ensures that, when using inheritance, subclasses extend their parent
    classes without altering their external behavior. For example, if a function works
    correctly with an object of a superclass, it should also work correctly with objects
    of any subclass of this superclass.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 遵循这一原则对于保持软件系统的健壮性非常重要。它确保在使用继承时，子类在不改变其外部行为的情况下扩展其父类。例如，如果一个函数与超类对象一起工作正确，那么它也应该与这个超类的任何子类对象一起工作正确。
- en: The LSP allows developers to introduce new subclass types without the risk of
    breaking existing functionality. This is particularly important in large-scale
    systems where changes in one part can have effects on other parts of the system.
    By following the LSP, developers can safely modify and extend classes, knowing
    that their new subclasses will integrate seamlessly with the established hierarchy
    and functionality.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: LSP 允许开发者引入新的子类类型，而不会破坏现有功能的风险。这在大型系统中尤为重要，因为一个部分的更改可能会影响系统的其他部分。通过遵循 LSP，开发者可以安全地修改和扩展类，知道他们的新子类将与既定的层次结构和功能无缝集成。
- en: An example of design following the LSP
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: LSP 设计的一个例子
- en: 'Let’s consider a `Bird` class and a `Penguin` class that subclasses it:'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们考虑一个 `Bird` 类和一个继承自它的 `Penguin` 类：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, for the needs of a hypothetical program that makes birds fly, we add
    a `make_bird_fly` function:'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，为了满足一个假设的使鸟类飞行的程序的需求，我们添加了一个 `make_bird_fly` 函数：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With the current code, we can see that if we pass an instance of the `Bird`
    class to the function, we get the expected behavior (`the bird will fly`), whereas
    if we pass an instance of the `Penguin` class, we will get another behavior (`it
    will not fly`). You can analyze the code representing this first design provided
    in the `ch02/lsp_violation.py` file and run it to test this result. This shows
    us or at least gives us the intuition of what the LSP wants to help us avoid.
    So now, how could we improve the design by following the LSP?
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据当前代码，我们可以看到，如果我们向函数传递 `Bird` 类的实例，我们会得到预期的行为（“鸟会飞”），而如果我们传递 `Penguin` 类的实例，我们会得到另一种行为（“它不会飞”）。你可以分析
    `ch02/lsp_violation.py` 文件中提供的代表这种第一个设计代码，并运行它来测试这个结果。这至少给我们提供了 LSP 希望帮助我们避免的直觉。那么，我们如何通过遵循
    LSP 来改进设计呢？
- en: 'To adhere to the LSP, we can refactor the code and introduce new classes to
    ensure that the behavior remains consistent:'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了遵循 LSP，我们可以重构代码并引入新的类，以确保行为保持一致：
- en: 'We keep the `Bird` class, but we use a better method to represent the behavior
    we want; let’s call it `move()`. The class will now look as follows:'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们保留 `Bird` 类，但使用更好的方法来表示我们想要的行为；让我们称它为 `move()`。现在这个类将看起来如下：
- en: '[PRE18]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, we introduce a `FlyingBird` class and a `FlightlessBird` class, both
    inheriting from the `Bird` class:'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们引入一个 `FlyingBird` 类和一个 `FlightlessBird` 类，它们都继承自 `Bird` 类：
- en: '[PRE19]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, the `make_bird_move` function can be defined as follows:'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`make_bird_move` 函数可以定义为以下内容：
- en: '[PRE20]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As usual, we add some code necessary to test the design:'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如往常一样，我们添加一些必要的代码来测试设计：
- en: '[PRE21]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The complete code for this new design, saved in the `ch02/lsp.py` file, is
    as follows:'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个新设计的完整代码，保存在 `ch02/lsp.py` 文件中，如下所示：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To test the example, run the following command:'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'To test the example, run the following command:'
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should get the following output:'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'You should get the following output:'
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'class AllInOnePrinter:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 'class AllInOnePrinter:'
- en: 'def print_document(self):'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 'def print_document(self):'
- en: print("Printing")
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: print("打印中")
- en: 'def scan_document(self):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'def scan_document(self):'
- en: print("Scanning")
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: print("扫描中")
- en: 'def fax_document(self):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 'def fax_document(self):'
- en: print("Faxing")
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: print("发送传真")
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: from typing import Protocol
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from typing import Protocol
- en: 'class Printer(Protocol):'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class Printer(Protocol):'
- en: 'def print_document(self):'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def print_document(self):'
- en: '...'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...'
- en: 'class Scanner(Protocol):'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class Scanner(Protocol):'
- en: 'def scan_document(self):'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def scan_document(self):'
- en: '...'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...'
- en: 'class Fax(Protocol):'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class Fax(Protocol):'
- en: 'def fax_document(self):'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def fax_document(self):'
- en: '...'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE26]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'class AllInOnePrinter:'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class AllInOnePrinter:'
- en: 'def print_document(self):'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def print_document(self):'
- en: print("Printing")
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("打印中")
- en: 'def scan_document(self):'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def scan_document(self):'
- en: print("Scanning")
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("扫描中")
- en: 'def fax_document(self):'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def fax_document(self):'
- en: print("Faxing")
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("发送传真")
- en: '[PRE27]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'class SimplePrinter:'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class SimplePrinter:'
- en: 'def print_document(self):'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def print_document(self):'
- en: print("Simply Printing")
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("简单打印")
- en: '[PRE28]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'def do_the_print(printer: Printer):'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def do_the_print(printer: Printer):'
- en: printer.print_document()
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: printer.print_document()
- en: '[PRE29]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'if __name__ == "__main__":'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if __name__ == "__main__":'
- en: all_in_one = AllInOnePrinter()
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: all_in_one = AllInOnePrinter()
- en: all_in_one.scan_document()
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: all_in_one.scan_document()
- en: all_in_one.fax_document()
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: all_in_one.fax_document()
- en: do_the_print(all_in_one)
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: do_the_print(all_in_one)
- en: simple = SimplePrinter()
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: simple = SimplePrinter()
- en: do_the_print(simple)
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: do_the_print(simple)
- en: '[PRE30]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: from typing import Protocol
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: from typing import Protocol
- en: 'class Printer(Protocol):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Printer(Protocol):'
- en: 'def print_document(self):'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 'def print_document(self):'
- en: '...'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'class Scanner(Protocol):'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Scanner(Protocol):'
- en: 'def scan_document(self):'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 'def scan_document(self):'
- en: '...'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'class Fax(Protocol):'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Fax(Protocol):'
- en: 'def fax_document(self):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 'def fax_document(self):'
- en: '...'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'class AllInOnePrinter:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 'class AllInOnePrinter:'
- en: 'def print_document(self):'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'def print_document(self):'
- en: print("Printing")
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: print("打印中")
- en: 'def scan_document(self):'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 'def scan_document(self):'
- en: print("Scanning")
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: print("扫描中")
- en: 'def fax_document(self):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 'def fax_document(self):'
- en: print("Faxing")
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: print("发送传真")
- en: 'class SimplePrinter:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 'class SimplePrinter:'
- en: 'def print_document(self):'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 'def print_document(self):'
- en: print("Simply Printing")
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: print("简单打印")
- en: 'def do_the_print(printer: Printer):'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 'def do_the_print(printer: Printer):'
- en: printer.print_document()
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: printer.print_document()
- en: 'if __name__ == "__main__":'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 'if __name__ == "__main__":'
- en: all_in_one = AllInOnePrinter()
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: all_in_one = AllInOnePrinter()
- en: all_in_one.scan_document()
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: all_in_one.scan_document()
- en: all_in_one.fax_document()
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: all_in_one.fax_document()
- en: do_the_print(all_in_one)
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: do_the_print(all_in_one)
- en: simple = SimplePrinter()
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: simple = SimplePrinter()
- en: do_the_print(simple)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: do_the_print(simple)
- en: '[PRE31]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: python ch02/isp.py
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: python ch02/isp.py
- en: '[PRE32]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Scanning
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描中
- en: Faxing
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 发送传真
- en: Printing
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Printing
- en: Simply Printing
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 简单打印
- en: '[PRE33]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'class Email:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Email:'
- en: 'def send_email(self, message):'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 'def send_email(self, message):'
- en: 'print(f"Sending email: {message}")'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(f"发送邮件: {message}")'
- en: 'class Notification:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Notification:'
- en: 'def __init__(self):'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self):'
- en: self.email = Email()
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: self.email = Email()
- en: 'def send(self, message):'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 'def send(self, message):'
- en: self.email.send_email(message)
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: self.email.send_email(message)
- en: '[PRE34]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: from typing import Protocol
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from typing import Protocol
- en: 'class MessageSender(Protocol):'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class MessageSender(Protocol):'
- en: 'def send(self, message: str):'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def send(self, message: str):'
- en: '...'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE35]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'class Email:'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class Email:'
- en: 'def send(self, message: str):'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def send(self, message: str):'
- en: 'print(f"Sending email: {message}")'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'print(f"发送邮件: {message}")'
- en: '[PRE36]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'class Notification:'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class Notification:'
- en: 'def __init__(self, sender: MessageSender):'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def __init__(self, sender: MessageSender):'
- en: 'self.sender: MessageSender = sender'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'self.sender: MessageSender = sender'
- en: 'def send(self, message: str):'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def send(self, message: str):'
- en: self.sender.send(message)
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.sender.send(message)
- en: '[PRE37]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'if __name__ == "__main__":'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if __name__ == "__main__":'
- en: email = Email()
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: email = Email()
- en: notif = Notification(sender=email)
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: notif = Notification(sender=email)
- en: notif.send(message="This is the message.")
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: notif.send(message="这是消息。")
- en: '[PRE38]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: from typing import Protocol
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: from typing import Protocol
- en: 'class MessageSender(Protocol):'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 'class MessageSender(Protocol):'
- en: 'def send(self, message: str):'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 'def send(self, message: str):'
- en: '...'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'class Email:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Email:'
- en: 'def send(self, message: str):'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 'def send(self, message: str):'
- en: 'print(f"Sending email: {message}")'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(f"发送邮件: {message}")'
- en: 'class Notification:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Notification:'
- en: 'def __init__(self, sender: MessageSender):'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, sender: MessageSender):'
- en: self.sender = sender
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: self.sender = sender
- en: 'def send(self, message: str):'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 'def send(self, message: str):'
- en: self.sender.send(message)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: self.sender.send(message)
- en: 'if __name__ == "__main__":'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 'if __name__ == "__main__":'
- en: email = Email()
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: email = Email()
- en: notif = Notification(sender=email)
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: notif = Notification(sender=email)
- en: notif.send(message="This is the message.")
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: notif.send(message="这是消息。")
- en: '[PRE39]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: python ch02/dip.py
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: python ch02/dip.py
- en: '[PRE40]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Notification and Email are based on the MessageSender abstraction, so this design
    adheres to the DIP.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Notification and Email are based on the MessageSender abstraction, so this design
    adheres to the DIP.
- en: Summary
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Summary
- en: In this chapter, we explored additional principles to the ones presented in
    [*Chapter 1*](B21896_01.xhtml#_idTextAnchor017), *Foundational Design Principles*.
    Understanding and applying SOLID is crucial for writing maintainable, robust,
    and scalable Python code. These principles provide a strong foundation for good
    software design, making it easier to manage complexity, reduce errors, and improve
    the overall quality of your code.
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了比在[*第一章*](B21896_01.xhtml#_idTextAnchor017)“基础设计原则”中介绍的原则更多的内容。理解和应用SOLID原则对于编写可维护、健壮和可扩展的Python代码至关重要。这些原则为良好的软件设计提供了坚实的基础，使得管理复杂性、减少错误和提升代码的整体质量变得更加容易。
- en: In the next chapter, we will start exploring design patterns in Python, another
    essential topic for Python developers aiming for excellence.
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始探索Python中的设计模式，这是追求卓越的Python开发者不可或缺的一个主题。
- en: '[PRE41]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Part 2: From the Gang of Four'
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：来自四人帮
- en: 'This part explores the classic design patterns from the Gang of Four (GoF),
    which are used to solve everyday problems, and how to apply them as a Python developer.
    This part includes the following chapters:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分探讨了来自四人帮（GoF）的经典设计模式，这些模式用于解决日常问题，以及如何作为Python开发者应用它们。本部分包括以下章节：
- en: '[*Chapter 3*](B21896_03.xhtml#_idTextAnchor061), *Creational Design Patterns*'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第三章*](B21896_03.xhtml#_idTextAnchor061)“创建型设计模式”'
- en: '[*Chapter 4*](B21896_04.xhtml#_idTextAnchor088), *Structural Design Patterns*'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第四章*](B21896_04.xhtml#_idTextAnchor088)“结构设计模式”'
- en: '[*Chapter 5*](B21896_05.xhtml#_idTextAnchor121), *Behavioral Design Patterns*'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第五章*](B21896_05.xhtml#_idTextAnchor121)“行为设计模式”'
