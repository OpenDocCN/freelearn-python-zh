["```py\n    using System; \n\n    public struct MyStruct \n    { \n        private int xval; \n        public int X \n        { \n            get  \n            { \n                return xval; \n            } \n            set  \n            { \n                if (value < 100) \n                    xval = value; \n            } \n        } \n\n        public void WriteXToConsole() \n        { \n            Console.WriteLine(\"The x value is: {0}\", xval); \n        } \n    } \n\n    //Usage \n    MyStruct ms1 = new MyStruct(); \n    MyStruct ms2 = MyStruct(); \n\n    ms.X = 9; \n    ms.WriteXToConsole(); \n\n    //Output \n    //The x value is: 9 \n\n```", "```py\n    public class Waypoint \n    { \n        public readonly Int32 lat; \n        public readonly Int32 lon; \n        public Boolean active { get; private set; } \n\n        public Waypoint(Int32 latitude, Int32 longitude) \n        { \n            this.lat = latitude; \n            this.lon = longitude; \n            this.active = true; \n        } \n\n        public void DeactivateWaypoint() \n        { \n            this.active = false; \n        } \n\n        public void ReactivateWaypoint() \n        { \n            this.active = true; \n        } \n    }\n```", "```py\n    public struct Waypoint \n    { \n        public readonly Int32 lat; \n        public readonly Int32 lon; \n        public Boolean active { get; private set; } \n\n        public Waypoint(Int32 latitude, Int32 longitude) \n        { \n            this.lat = latitude; \n            this.lon = longitude; \n            this.active = true; \n        } \n\n        public void DeactivateWaypoint() \n        { \n            this.active = false; \n        } \n\n        public void ReactivateWaypoint() \n        { \n            this.active = true; \n        } \n    }; \n\n```", "```py\n        struct CGPoint { \n            CGFloat x; \n            CGFloat y; \n        }; \n        typedef struct CGPoint CGPoint; \n\n```", "```py\n        struct CGSize { \n            CGFloat width; \n            CGFloat height; \n        }; \n        typedef struct CGSize CGSize; \n\n```", "```py\n        struct CGRect { \n            CGPoint origin; \n            CGSize size; \n        }; \n        typedef struct CGRect CGRect; \n\n```", "```py\n        struct CGVector { \n            CGFloat dx; \n            CGFloat dy; \n        }; \n        typedef struct CGVector CGVector; \n\n```", "```py\n    @interface EDSWaypoint() \n    { \n        NSInteger _lat; \n        NSInteger _lon; \n        BOOL _active; \n    } \n\n    @end \n\n    @implementation EDSWaypoint \n\n    -(instancetype)initWithLatitude:(NSInteger)latitude andLongitude:(NSInteger)longitude \n    { \n        if (self = [super init]) \n        { \n            _lat = latitude; \n            _lon = longitude; \n            _active = YES; \n        } \n\n        return self; \n    } \n\n    -(BOOL)active \n    { \n        return _active; \n    } \n\n    -(void)reactivateWaypoint \n    { \n        _active = YES; \n    } \n\n    -(void)deactivateWaypoint \n    { \n        _active = NO; \n    } \n\n    @end \n\n```", "```py\n    CGPoint p = CGPointMake(9.0, 5.2); \n    p.x = 9.8; \n    p.y = 5.5; \n\n```", "```py\n    struct EDSWaypoint { \n        int lat; \n        int lon; \n        BOOL active; \n    }; \n    typedef struct EDSWaypoint EDSWaypoint; \n\n```", "```py\n    Public struct MyColor { \n        var red = 0 \n        var green = 0 \n        var blue = 0 \n        var alpha = 0.0 \n    } \n\n```", "```py\n    var color = MyColor()  \n    color.red = 139 \n    color.green = 0 \n    color.blue = 139 \n    color.alpha = .5 \n\n```", "```py\n    public struct MyColor { \n        var red = 0 \n        var green = 0 \n        var blue = 0 \n        var alpha = 0.0 \n\n        public init(R: Int, G: Int, B: Int, A: Double) \n        { \n            red = R \n            green = G \n            blue = B \n            alpha = A \n        } \n    } \n\nvar color = MyColor(R: 139, G:0, B:139, A:0.5) \n\n```", "```py\n    public class Waypoint : Equatable \n    { \n        var lat: Int \n        var long: Int \n        public private(set) var active: Bool \n\n        public init(latitude: Int, longitude: Int) { \n            lat = latitude \n            long = longitude \n            active = true \n        } \n\n        public func DeactivateWaypoint() \n        { \n            active = false; \n        } \n\n        public func ReactivateWaypoint() \n        { \n            active = true; \n        } \n    } \n\n    public func == (lhs: Waypoint, rhs: Waypoint) -> Bool { \n        return (lhs.lat == rhs.lat && lhs.long == rhs.long) \n    } \n\n```", "```py\n    public struct Waypoint : Equatable \n    { \n        var lat: Int \n        var long: Int \n        public private(set) var active: Bool \n\n        public init(latitude: Int, longitude: Int) { \n            lat = latitude \n            long = longitude \n            active = true \n        } \n\n        public mutating func DeactivateWaypoint() \n        { \n            active = false; \n        } \n\n        public mutating func ReactivateWaypoint() \n        { \n            active = true; \n        } \n    } \n\n    public func == (lhs: Waypoint, rhs: Waypoint) -> Bool { \n        return (lhs.lat == rhs.lat && lhs.long == rhs.long) \n    } \n\n```", "```py\n    public enum SilverLine \n    { \n        Wiehle_Reston_East = 1000, \n        Spring_Hill = 1100, \n        Greensboro = 1200, \n        Tysons_Corner = 1300, \n        McClean = 1400, \n        East_Falls_Church = 2000, \n        Ballston_MU = 2100, \n        Virginia_Sq_GMU = 2200, \n        Clarendon = 2300, \n        Courthouse = 2400, \n        Rosslyn = 3000, \n        Foggy_Bottom_GWU = 3100, \n        Farragut_West = 3200, \n        McPherson_Sq = 3300, \n        Metro_Center = 4000, \n        Federal_Triangle = 4100, \n        Smithsonian = 4200, \n        LEnfant_Plaza = 5000, \n        Federal_Center_SW = 5100, \n        Capital_South = 5200, \n        Eastern_Market = 5300, \n        Potomac_Ave = 5400, \n        Stadium_Armory = 6000, \n        Benning_Road = 6100, \n        Capital_Heights = 6200, \n        Addison_Road = 6300, \n        Morgan_Blvd = 6400, \n        Largo_Town_Center = 6500 \n    } \n\n```", "```py\n    SilverLine nextStop = SilverLine.Federal_Triangle; \n    nextStop = SilverLine.Smithsonian; \n\n```", "```py\n    public enum SilverLine \n    { \n        WIEHLE_RESTON_EAST, \n        SPRING_HILL, \n        GREENSBORO, \n        TYSONS_CORNER, \n        MCCLEAN, \n        EAST_FALLS_CHURCH, \n        BALLSTON_MU, \n        VIRGINIA_SQ_GMU, \n        CLARENDON, \n        COURTHOUSE, \n        ROSSLYN, \n        FOGGY_BOTTOM_GWU, \n        FARRAGUT_WEST, \n        MCPHERSON_SQ, \n        METRO_CENTER, \n        FEDERAL_TRIANGLE, \n        SMITHSONIAN, \n        LENFANT_PLAZA, \n        FEDERAL_CENTER_SW, \n        CAPITAL_SOUTH, \n        EASTERN_MARKET, \n        POTOMAC_AVE, \n        STADIUM_ARMORY, \n        BENNING_ROAD, \n        CAPITAL_HEIGHTS, \n        ADDISON_ROAD, \n        MORGAN_BLVD, \n        LARGO_TOWN_CENTER \n    } \n\n```", "```py\n    typedef enum NSUInteger\n    {\n        Wiehle_Reston_East = 1000,\n        Spring_Hill = 1100,\n        Greensboro = 1200,\n        Tysons_Corner = 1300,\n        McClean = 1400,\n        East_Falls_Church = 2000,\n        Ballston_MU = 2100,\n        Virginia_Sq_GMU = 2200,\n        Clarendon = 2300,\n        Courthouse = 2400,\n        Rosslyn = 3000,\n        Foggy_Bottom_GWU = 3100,\n        Farragut_West = 3200,\n        McPherson_Sq = 3300,\n        Metro_Center = 4000,\n        Federal_Triangle = 4100,\n        Smithsonian = 4200,\n        LEnfant_Plaza = 5000,\n        Federal_Center_SW = 5100,\n        Capital_South = 5200,\n        Eastern_Market = 5300,\n        Potomac_Ave = 5400,\n        Stadium_Armory = 6000,\n        Benning_Road = 6100,\n        Capital_Heights = 6200,\n        Addison_Road = 6300,\n        Morgan_Blvd = 6400,\n        Largo_Town_Center = 6500\n    } SilverLine;\n\n```", "```py\n    public enum SilverLine : Int \n    { \n        case Wiehle_Reston_East = 1000 \n        case Spring_Hill = 1100 \n        case Greensboro = 1200 \n        case Tysons_Corner = 1300 \n        case McClean = 1400 \n        case East_Falls_Church = 2000 \n        case Ballston_MU = 2100 \n        case Virginia_Sq_GMU = 2200 \n        case Clarendon = 2300 \n        case Courthouse = 2400 \n        case Rosslyn = 3000 \n        case Foggy_Bottom_GWU = 3100 \n        case Farragut_West = 3200 \n        case McPherson_Sq = 3300 \n        case Metro_Center = 4000 \n        case Federal_Triangle = 4100 \n        case Smithsonian = 4200 \n        case LEnfant_Plaza = 5000 \n        case Federal_Center_SW = 5100 \n        case Capital_South = 5200 \n        case Eastern_Market = 5300 \n        case Potomac_Ave = 5400 \n        case Stadium_Armory = 6000 \n        case Benning_Road = 6100 \n        case Capital_Heights = 6200 \n        case Addison_Road = 6300 \n        case Morgan_Blvd = 6400 \n        case Largo_Town_Center = 6500 \n    } \n\n```"]