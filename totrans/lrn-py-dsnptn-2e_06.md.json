["```py\nclass Subject:\n    def __init__(self):\n        self.__observers = []\n\n    def register(self, observer):\n        self.__observers.append(observer)\n\n    def notifyAll(self, *args, **kwargs):\n        for observer in self.__observers:\n            observer.notify(self, *args, **kwargs)\n\nclass Observer1:\n    def __init__(self, subject):\n        subject.register(self)\n\n    def notify(self, subject, *args):\n        print(type(self).__name__,':: Got', args, 'From', subject)\n\nclass Observer2:\n    def __init__(self, subject):\n        subject.register(self)\n\n    def notify(self, subject, *args):\n        print(type(self).__name__, ':: Got', args, 'From', subject)\n\nsubject = Subject()\nobserver1 = Observer1(subject)\nobserver2 = Observer2(subject)\nsubject.notifyAll('notification')\n```", "```py\nclass NewsPublisher:\n    def __init__(self):\n        self.__subscribers = []\n        self.__latestNews = None\n\n    def attach(self, subscriber):\n        self.__subscribers.append(subscriber)\n\n    def detach(self):\n        return self.__subscribers.pop()\n\n    def subscribers(self):\n        return [type(x).__name__ for x in self.__subscribers]\n\n    def notifySubscribers(self):\n        for sub in self.__subscribers:\n            sub.update()\n\n    def addNews(self, news):\n        self.__latestNews = news\n\n    def getNews(self):\n        return \"Got News:\", self.__latestNews\n```", "```py\nfrom abc import ABCMeta, abstractmethod\n\nclass Subscriber(metaclass=ABCMeta):\n\n    @abstractmethod\n    def update(self):\n        pass\n```", "```py\nclass SMSSubscriber:\n    def __init__(self, publisher):\n        self.publisher = publisher\n        self.publisher.attach(self)\n\n    def update(self):\n        print(type(self).__name__, self.publisher.getNews())\n\nclass EmailSubscriber:\n    def __init__(self, publisher):\n        self.publisher = publisher\n        self.publisher.attach(self)\n\n    def update(self):\n        print(type(self).__name__, self.publisher.getNews())\n\nclass AnyOtherSubscriber:\n    def __init__(self, publisher):\n        self.publisher = publisher\n        self.publisher.attach(self)\n\n    def update(self):\n        print(type(self).__name__, self.publisher.getNews())\n```", "```py\nif __name__ == '__main__':\n    news_publisher = NewsPublisher()\n\n    for Subscribers in [SMSSubscriber, EmailSubscriber, AnyOtherSubscriber]:\n        Subscribers(news_publisher)\n    print(\"\\nSubscribers:\", news_publisher.subscribers())\n\n    news_publisher.addNews('Hello World!')\n    news_publisher.notifySubscribers()\n\n    print(\"\\nDetached:\", type(news_publisher.detach()).__name__)\n    print(\"\\nSubscribers:\", news_publisher.subscribers())\n\n    news_publisher.addNews('My second news!')\n    news_publisher.notifySubscribers()\n```"]