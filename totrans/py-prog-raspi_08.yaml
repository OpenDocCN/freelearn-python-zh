- en: Awesome Things You Could Develop Using Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 可以开发的一些酷炫事物
- en: In this chapter, we will discuss some advanced topics in Python. We will also
    discuss certain unique topics (such as image processing) that let you get started
    with application development in Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论 Python 的一些高级主题。我们还将讨论某些独特主题（如图像处理），这些主题可以让您开始使用 Python 进行应用程序开发。
- en: Image processing using a Raspberry Pi Zero
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Raspberry Pi Zero 进行图像处理
- en: The Raspberry Pi Zero is an inexpensive piece of hardware that is powered by
    a 1 GHz processor. While it is not powerful to run certain advanced image processing
    operations, it can help you learn the basics on a $25 budget (the cost of Raspberry
    Pi Zero and a camera).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi Zero 是一块由 1 GHz 处理器供电的廉价硬件。虽然它不足以运行某些高级图像处理操作，但它可以帮助您在 25 美元的预算下学习基础知识（Raspberry
    Pi Zero 和摄像头的成本）。
- en: We recommend using a 16 GB card (or higher) with your Raspberry Pi Zero in order
    to install the image processing tool set discussed in this section.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用 16 GB 的卡（或更高）来安装本节讨论的图像处理工具集。
- en: For example, you could use a Raspberry Pi Zero to track a bird in your backyard.
    In this chapter, we are going to discuss different ways to get started with image
    processing on the Raspberry Pi Zero.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用 Raspberry Pi Zero 来追踪您后院的一只鸟。在本章中，我们将讨论在 Raspberry Pi Zero 上开始图像处理的不同方法。
- en: 'In order to test some examples using the camera in this section, a Raspberry
    Pi Zero v1.3 or later is required. Check the back of your Raspberry Pi Zero to
    verify the board version:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试本节中使用的摄像头示例，需要一台 Raspberry Pi Zero v1.3 或更高版本。检查您的 Raspberry Pi Zero 的背面以验证板子版本：
- en: '![](img/image_08_001.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_08_001.png)'
- en: Identifying your Raspberry Pi Zero's version
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 识别您的 Raspberry Pi Zero 版本
- en: OpenCV
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenCV
- en: '**OpenCV** is an open source toolbox that consists of different software tools
    developed for image processing. OpenCV is a cross-platform toolbox that has been developed
    with support for different operating systems. Because OpenCV is available under
    an open source license, researchers across the world have contributed to its growth
    by developing tools and techniques. This has made developing applications with
    relative ease. Some applications of OpenCV include face recognition and license
    plate recognition.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenCV** 是一个开源工具箱，由为图像处理开发的多个软件工具组成。OpenCV 是一个跨平台工具箱，它支持不同的操作系统。由于 OpenCV
    在开源许可下可用，全球的研究人员通过开发工具和技术对其增长做出了贡献。这使得开发应用程序相对容易。OpenCV 的应用包括人脸识别和车牌识别。'
- en: Due to its limited processing power, it can take several hours to complete the
    installation of the framework. It took us approximately 10 hours at our end.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其有限的处理能力，完成框架的安装可能需要几个小时。在我们的终端上，大约花费了 10 个小时。
- en: We followed the instructions to install OpenCV on the Raspberry Pi Zero from
    [http://www.pyimagesearch.com/2015/10/26/how-to-install-opencv-3-on-raspbian-jessie/](http://www.pyimagesearch.com/2015/10/26/how-to-install-opencv-3-on-raspbian-jessie/).We
    specifically followed the instructions to install OpenCV with Python 3.x bindings
    and verified the installation process. It took us approximately 10 hours to finish
    installing OpenCV on the Raspberry Pi Zero. We are not repeating the instructions
    in the interest of not reinventing the wheel.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遵循了从 [http://www.pyimagesearch.com/2015/10/26/how-to-install-opencv-3-on-raspbian-jessie/](http://www.pyimagesearch.com/2015/10/26/how-to-install-opencv-3-on-raspbian-jessie/)
    安装 OpenCV 到 Raspberry Pi Zero 的说明。我们特别遵循了使用 Python 3.x 绑定安装 OpenCV 的说明，并验证了安装过程。我们大约花费了
    10 个小时来完成在 Raspberry Pi Zero 上安装 OpenCV。我们出于不重复造轮子的考虑，没有重复这些说明。
- en: The verification of the installation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装验证
- en: 'Let''s make sure that the OpenCV installation and its Python bindings work.
    Launch the command-line terminal and make sure that you have launched the `cv`
    virtual environment by executing the `workon cv` command (you can verify that
    you are in the `cv` virtual environment):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保 OpenCV 的安装及其 Python 绑定正常工作。启动命令行终端并确保您已通过执行 `workon cv` 命令启动了 `cv` 虚拟环境（您可以通过检查确认您是否处于
    `cv` 虚拟环境）：
- en: '![](img/image_08_002.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_08_002.png)'
- en: Verify that you are in the cv virtual environment
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 验证您是否处于 cv 虚拟环境
- en: 'Now, let''s make sure that our installation works correctly. Launch the Python
    interpreter from the command line and try to import the `cv2` module:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们确保我们的安装正确无误。从命令行启动 Python 解释器并尝试导入 `cv2` 模块：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This proves that OpenCV is installed on the Raspberry Pi Zero. Let''s write
    a *hello world* example involving OpenCV. In this example, we are going to open
    an image (this can be any color image on your Raspberry Pi Zero''s desktop) and
    display it after converting it to grayscale. We will be using the following documentation
    to write our first example: [http://docs.opencv.org/3.0-beta/doc/py_tutorials/py_gui/py_image_display/py_image_display.html](http://docs.opencv.org/3.0-beta/doc/py_tutorials/py_gui/py_image_display/py_image_display.html).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the documentation, we need to make use of the `imread()` function
    to read the contents of the image file. We also need to specify the format in
    which we would like to read the image. In this case, we are going to read the
    image in grayscale format. This is specified by `cv2.IMREAD_GRAYSCALE` that is
    passed as the second argument to the function:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that the image is loaded in grayscale format and saved to the `img` variable,
    we need to display it in a new window. This is enabled by the `imshow()` function.
    According to the documentation, we can display an image by specifying the window
    name as the first argument and the image as the second argument:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this case, we are going to open a window named `image` and display the contents
    of `img` that we loaded in the previous step. We will display the image until
    a keystroke is received. This is achieved using the `cv2.waitKey()` function.
    According to the documentation, the `waitkey()` function listens for keyboard
    events:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `0` argument indicates that we are going to wait indefinitely for a keystroke.
    According to the documentation, when the duration, in milliseconds, is passed
    as an argument, the `waitkey()` function listens to keystrokes for the specified
    duration. When any key is pressed, the window is closed by the `destroyAllWindows()`
    function:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Putting it all together, we have this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding code sample is available for download along with this chapter
    as `opencv_test.py`. Once you are done installing OpenCV libraries, try loading
    an image as shown in this example. It should load an image in grayscale, as shown
    in the following figure:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_003.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: The Raspberry Pi desktop loaded in grayscale
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: This window would close at the press of any key.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: A challenge to the reader
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding example, the window closes at the press of any key. Take a
    look at the documentation and determine if it is possible to close all windows
    at the press of a mouse button.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Installing the camera to the Raspberry Zero
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A camera connector and a camera is required for testing our next example. One
    source to buy the camera and the adapter is provided here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Source** |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| Raspberry Pi Zero camera adapter | [https://thepihut.com/products/raspberry-pi-zero-camera-adapter](https://thepihut.com/products/raspberry-pi-zero-camera-adapter)
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| Raspberry Pi camera | [https://thepihut.com/products/raspberry-pi-camera-module](https://thepihut.com/products/raspberry-pi-camera-module)
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 树莓派相机 | [https://thepihut.com/products/raspberry-pi-camera-module](https://thepihut.com/products/raspberry-pi-camera-module)
    |'
- en: 'Perform the following steps to install a camera to the Raspberry Pi Zero:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将相机安装到树莓派Zero上：
- en: 'The first step is interfacing the camera to the Raspberry Pi Zero. The camera
    adapter can be installed as shown in the following figure. Lift the connector
    tab and slide the camera adapter and press the connector gently:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是将相机连接到树莓派Zero。相机适配器可以按照以下图示安装。抬起连接器卡扣，滑动相机适配器并轻轻按下连接器：
- en: '![](img/image_08_004.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_08_004.jpg)'
- en: 'We need to enable the camera interface on the Raspberry Pi Zero. On your desktop,
    go to Preferences and launch Raspberry Pi Configuration. Under the Interfaces
    tab of the Raspberry Pi configuration, enable the camera, and save the configuration:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在树莓派Zero上启用相机接口。在你的桌面上，转到“首选项”并启动树莓派配置。在树莓派配置的“接口”选项卡下启用相机，并保存配置：
- en: '![](img/image_08_005.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_08_005.png)'
- en: Enable the camera interface
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 启用相机接口
- en: 'Let''s test the camera by taking a picture by running the following command
    from the command-line terminal:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过在命令行终端运行以下命令来测试相机：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It should take a picture and save it to your Raspberry Pi''s desktop. Verify
    that the camera is functioning correctly. If you are not able to get the camera
    working, we recommend the troubleshooting guide published by the Raspberry Pi
    Foundation: [https://www.raspberrypi.org/documentation/raspbian/applications/camera.md](https://www.raspberrypi.org/documentation/raspbian/applications/camera.md).'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它应该会拍照并将照片保存到你的树莓派桌面上。验证相机是否正常工作。如果你无法使相机工作，我们建议查看树莓派基金会发布的故障排除指南：[https://www.raspberrypi.org/documentation/raspbian/applications/camera.md](https://www.raspberrypi.org/documentation/raspbian/applications/camera.md)。
- en: 'The camera cable is a bit unwieldy, and it can make things difficult while
    trying to take a picture. We recommend using a camera mount. We found this one
    to be useful (shown in the following image) at [http://a.co/hQolR7O](http://a.co/hQolR7O):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 相机线缆有点难以操控，在尝试拍照时可能会造成困难。我们建议使用相机支架。我们发现这个支架很有用（如图所示），可以在[http://a.co/hQolR7O](http://a.co/hQolR7O)找到：
- en: '![](img/image_08_006.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_08_006.png)'
- en: Use a mount for your Raspberry Pi's camera
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的树莓派相机使用挂载
- en: 'Let''s take the camera for a spin and use it alongside OpenCV libraries:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用树莓派相机，并配合OpenCV库一起使用：
- en: 'We are going to take a picture using the camera and display it using the OpenCV
    framework. In order to access the camera in Python, we need the `picamera` package.
    This can be installed as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用相机拍照，并使用OpenCV框架显示它。为了在Python中访问相机，我们需要`picamera`包。可以按照以下方式安装：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's make sure that the package works as intended with a simple program. The
    documentation for the `picamera` package is available at [https://picamera.readthedocs.io/en/release-1.12/api_camera.html](https://picamera.readthedocs.io/en/release-1.12/api_camera.html).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的程序来确保包按预期工作。`picamera`包的文档可在[https://picamera.readthedocs.io/en/release-1.12/api_camera.html](https://picamera.readthedocs.io/en/release-1.12/api_camera.html)找到。
- en: 'The first step is initializing the `PiCamera` class. This is followed by flipping
    the image across the vertical axis. This is only required because the camera is
    mounted upside down on the mount. This may not be necessary with other mounts:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是初始化`PiCamera`类。然后是沿垂直轴翻转图像。这仅因为相机在支架上安装是颠倒的。在其他支架上可能不需要这样做：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Before taking a picture, we can preview the picture that is going to be captured
    using the `start_preview()` method:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在拍照之前，我们可以使用`start_preview()`方法预览将要捕获的图片：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s preview for `10` seconds before we take a picture. We can take a picture
    using the `capture()` method:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在拍照之前，让我们预览10秒钟。我们可以使用`capture()`方法拍照：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `capture()` method requires the file location as an argument (as shown in
    the preceding snippet). Once we are done, we can close the camera preview using
    `stop_preview()`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`capture()`方法需要一个文件位置作为参数（如前文所示）。完成后，我们可以使用`stop_preview()`关闭相机预览。'
- en: 'Putting it altogether, we have this:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有这些放在一起，我们得到以下内容：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code sample is available for download along with this chapter
    as `picamera_test.py`. A snapshot taken using the camera is shown in the following
    figure:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码示例作为本章的一部分提供下载，名为`picamera_test.py`。以下图显示了使用相机拍摄的照片快照：
- en: '![](img/image_08_007.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_08_007.png)'
- en: Image captured using the Raspberry Pi camera module
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Raspberry Pi 摄像头模块捕获的图像
- en: Let's combine this example with the previous one—convert this image to grayscale
    and display it until a key is pressed. Ensure that you are still within the `cv`
    virtual environment workspace.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将这个示例与上一个示例结合起来——将此图像转换为灰度并显示，直到按下键。请确保您仍在 `cv` 虚拟环境工作区中。
- en: 'Let''s convert the captured image to grayscale as follows:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按以下方式将捕获的图像转换为灰度：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is the image converted upon capture:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在捕获时转换的图像：
- en: '![](img/image_08_008.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_08_008.png)'
- en: Image converted to grayscale upon capture
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获时转换为灰度的图像
- en: 'Now we can display the grayscale image as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以按以下方式显示灰度图像：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The modified example is available for download as `picamera_opencvtest.py`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的示例作为 `picamera_opencvtest.py` 可以下载。
- en: So far, we have demonstrated developing image processing applications in Python.
    In [Chapter 10](8ab7d103-3b8b-459e-b64c-fb95200c8a52.xhtml), *Home Automation
    Using the Raspberry Pi Zero*, we have demonstrated another example using OpenCV.
    This should get you kick-started with learning OpenCV in Python. We also recommend
    checking out examples available with the OpenCV Python binding documentation (link
    provided in the introduction part of this section).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经展示了在 Python 中开发图像处理应用程序。在第 10 章[8ab7d103-3b8b-459e-b64c-fb95200c8a52.xhtml]，*使用
    Raspberry Pi Zero 的家庭自动化*中，我们展示了另一个使用 OpenCV 的示例。这应该可以帮助您开始学习 Python 中的 OpenCV。我们还建议查看
    OpenCV Python 绑定文档中提供的示例（本节介绍部分提供的链接）。
- en: Speech recognition
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语音识别
- en: In this section, we will discuss developing a speech recognition example in
    Python involving speech recognition. We will make use of the `requests` module
    (discussed in the previous chapter) to transcribe audio using `wit.ai` ([https://wit.ai/](https://wit.ai/)).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论在 Python 中开发涉及语音识别的语音识别示例。我们将使用上一章中讨论的 `requests` 模块，通过 `wit.ai`（[https://wit.ai/](https://wit.ai/)）进行音频转录。
- en: There are several speech recognition tools, including Google's Speech API, IBM
    Watson, Microsoft Bing's speech recognition API. We are demonstrating `wit.ai`
    as an example.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种语音识别工具，包括 Google 的语音 API、IBM Watson、Microsoft Bing 的语音识别 API。我们以 `wit.ai`
    作为示例。
- en: Speech recognition can be useful in applications where we would like to enable
    the Raspberry Pi Zero responses to voice commands. For example, in [Chapter 10](8ab7d103-3b8b-459e-b64c-fb95200c8a52.xhtml),
    *Home Automation Using the Raspberry Pi Zero*, we will be working on a home automation
    project. We could make use of speech recognition to respond to voice commands.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 语音识别在需要启用 Raspberry Pi Zero 对语音命令做出响应的应用程序中非常有用。例如，在第 10 章[8ab7d103-3b8b-459e-b64c-fb95200c8a52.xhtml]，*使用
    Raspberry Pi Zero 的家庭自动化*中，我们将进行一个家庭自动化项目的开发。我们可以利用语音识别来响应语音命令。
- en: Let's review building the speech recognition application in Python using `wit.ai`
    (its documentation is available here at [https://github.com/wit-ai/pywit](https://github.com/wit-ai/pywit)).
    In order to perform speech recognition and recognize voice commands, we will need
    a microphone. However, we will demonstrate using a readily available audio sample.
    We will make use of audio samples made available by a research publication (available
    at [http://ecs.utdallas.edu/loizou/speech/noizeus/clean.zip](http://ecs.utdallas.edu/loizou/speech/noizeus/clean.zip)).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾使用 `wit.ai` 在 Python 中构建语音识别应用程序的过程（其文档在此处提供[https://github.com/wit-ai/pywit](https://github.com/wit-ai/pywit)）。为了执行语音识别和识别语音命令，我们需要一个麦克风。然而，我们将演示使用现成的音频样本。我们将使用由研究出版物提供的音频样本（可在[http://ecs.utdallas.edu/loizou/speech/noizeus/clean.zip](http://ecs.utdallas.edu/loizou/speech/noizeus/clean.zip)获取）。
- en: The `wit.ai` API license states that the tool is free to use, but the audio
    uploaded to their servers are used to tune their speech transcription tool.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`wit.ai` API 许可证声明该工具可免费使用，但上传到他们服务器的音频将用于调整他们的语音转录工具。'
- en: 'We will now attempt transcribing the `sp02.wav` audio sample performing the
    following steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将尝试转录 `sp02.wav` 音频样本，执行以下步骤：
- en: 'The first step is signing up for an account with `wit.ai`. Make a note of the
    API as shown in the following screenshot:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是在 `wit.ai` 上注册账户。注意以下截图中的 API：
- en: '![](img/image_08_009.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_08_009.png)'
- en: 'The first step is installing the requests library. It could be installed as
    follows:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是安装 requests 库。它可以按以下方式安装：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'According to the `wit.ai` documentation, we need to add custom headers to our
    request that includes the API key (replace `$TOKEN` with the token from your account).
    We also need to specify the file format in the header. In this case, it is a `.wav`
    file, and the sampling frequency is 8000 Hz:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据`wit.ai`文档，我们需要在我们的请求中添加自定义头信息，包括API密钥（将`$TOKEN`替换为您的账户中的令牌）。我们还需要在头信息中指定文件格式。在这种情况下，是一个`.wav`文件，采样频率为8000
    Hz：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In order to transcribe the audio sample, we need to attach the audio sample
    in the request body:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了转录音频样本，我们需要在请求体中附加音频样本：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Putting it all together, gives us this:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有这些放在一起，我们得到以下内容：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code sample is available for download along with this chapter
    as `wit_ai.py`. Try executing the preceding code sample, and it should transcribe
    the audio sample: `sp02.wav`. We have the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码示例可以作为本章的`wit_ai.py`一起下载。尝试执行之前的代码示例，它应该能够转录音频样本：`sp02.wav`。我们有以下代码：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The audio sample contains the following recording: *He knew the skill of the
    great young actress*. According to the `wit.ai` API, the transcription is *He
    knew the the great young actress*. The word error rate is 22% ([https://en.wikipedia.org/wiki/Word_error_rate](https://en.wikipedia.org/wiki/Word_error_rate)).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 音频样本包含以下录音：*他深知那位年轻女演员的技艺*。根据`wit.ai` API，转录结果是*他深知那位年轻女演员*。单词错误率为22%([https://en.wikipedia.org/wiki/Word_error_rate](https://en.wikipedia.org/wiki/Word_error_rate))。
- en: We will be making use of the speech transcription API to issue voice commands
    in our home automation project.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的智能家居项目中使用语音转录API来发布语音命令。
- en: Automating routing tasks
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化路由任务
- en: In this section, we are going to discuss automating routing tasks in Python.
    We took two examples such that they demonstrate the ability of a Raspberry Pi
    Zero acting as a personal assistant. The first example involves improving your
    commute, whereas the second example serves as an aid to improve your vocabulary.
    Let's get started.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论在Python中自动化路由任务。我们选取了两个示例，以展示Raspberry Pi Zero作为个人助理的能力。第一个示例涉及改善通勤，而第二个示例则有助于提高词汇量。让我们开始吧。
- en: Improving daily commute
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改善日常通勤
- en: Many cities and public transit systems have started sharing data with the public
    in the interest of being transparent and improving their operational efficiency.
    Transit systems have started sharing advisories and transit information to the
    public through an API. This enables anyone to develop mobile applications that
    provide information to commuters. At times, it helps with easing congestion within
    the public transit system.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 许多城市和公共交通系统已经开始与公众共享数据，以实现透明度和提高运营效率。交通系统已经开始通过API向公众共享警告和交通信息。这使得任何人都可以开发移动应用程序，为通勤者提供信息。有时，这有助于缓解公共交通系统中的拥堵。
- en: This example was inspired by a friend who tracks bicycle availability in San
    Francisco's bike share stations. In the San Francisco Bay Area, there is a bicycle
    sharing program that enables commuters to rent a bike from a transit center to
    their work. In a crowded city like San Francisco, bike availability at a given
    station fluctuates depending on the time of day.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子是受一个追踪旧金山共享单车站自行车可用性的朋友所启发。在旧金山湾区，有一个自行车共享项目，使通勤者可以从交通中心租用自行车到工作地点。在像旧金山这样拥挤的城市，特定站点的自行车可用性会根据一天中的时间而波动。
- en: This friend wanted to plan his day based on bike availability at the nearest
    bike share station. If there are very few bikes left at the station, this friend
    preferred leaving early to rent a bike. He was looking for a simple hack that
    would push a notification to his phone when the number of bikes is below a certain
    threshold. San Francisco's bike share program makes this data available at [http://feeds.bayareabikeshare.com/stations/stations.json](http://feeds.bayareabikeshare.com/stations/stations.json).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个朋友想要根据最近共享单车站的自行车可用性来规划他的日程。如果站内剩余的自行车非常少，这位朋友更愿意早点离开去租一辆自行车。他正在寻找一个简单的技巧，当自行车数量低于某个阈值时，能够向他的手机发送通知。旧金山的共享单车项目在[http://feeds.bayareabikeshare.com/stations/stations.json](http://feeds.bayareabikeshare.com/stations/stations.json)提供了这些数据。
- en: Let's review building a simple example that would enable sending a push notification
    to a mobile device. In order to send a mobile push notification, we will be making
    use of **If This Then That** (**IFTTT**)—a service that enables connecting your
    project to third-party services.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下构建一个简单的示例，该示例将允许向移动设备发送推送通知。为了发送移动推送通知，我们将使用**If This Then That**（**IFTTT**）——一种允许将您的项目连接到第三方服务的服务。
- en: In this example, we will parse the data available in JSON format, check the
    number of available bikes at a specific station, and if it is lower than the specified
    threshold, it triggers a notification on your mobile device.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将解析JSON格式的数据，检查特定站点的可用自行车数量，如果它低于指定的阈值，就会在您的移动设备上触发通知。
- en: 'Let''s get started:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: The first step is retrieving the bike availability from the bike share service.
    This data is available in JSON format at [http://feeds.bayareabikeshare.com/stations/stations.json](http://feeds.bayareabikeshare.com/stations/stations.json).
    The data includes bike availability throughout the network.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是从自行车共享服务中检索自行车可用性。这些数据以JSON格式提供，可在[http://feeds.bayareabikeshare.com/stations/stations.json](http://feeds.bayareabikeshare.com/stations/stations.json)找到。数据包括整个网络中的自行车可用性。
- en: The bike availability at each station is provided with parameters, such as station
    ID, station name, address, number of bikes available, and so on.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个站点的自行车可用性都提供了参数，例如站点ID、站点名称、地址、可用自行车数量等。
- en: 'In this example, we will retrieve the bike availability for the `Townsend at
    7th` station in San Francisco. The station ID is `65` (open the earlier-mentioned
    link in a browser to find `id`). Let''s write some Python code to retrieve the
    bike availability data and parse this information:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将检索旧金山`Townsend at 7th`站点的自行车可用性。站点ID是`65`（在浏览器中打开前面提到的链接以找到`id`）。让我们编写一些Python代码来检索自行车可用性数据并解析这些信息：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The first step is fetching the data using a `GET` request (via the `requests`
    module). The `requests` module provides an inbuilt JSON decoder. The JSON data
    can be parsed by calling the `json()` function.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是使用`GET`请求（通过`requests`模块）获取数据。`requests`模块提供了一个内置的JSON解码器。可以通过调用`json()`函数来解析JSON数据。
- en: 'Now, we can iterate through the dictionary of stations and find the bike availability
    at `Townsend at 7th`, by performing the following steps:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以遍历站点字典，通过以下步骤找到`Townsend at 7th`的自行车可用性：
- en: 'In the retrieved data, each station''s data is furnished with an ID. The station
    ID in question is `65` (open the data feed URL provided earlier in a browser to
    understand the data format; a snippet of the data is shown in the following screenshot):'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检索到的数据中，每个站点的数据都附有一个ID。所讨论的站点ID是`65`（在浏览器中打开前面提供的早期数据馈送URL以了解数据格式；以下截图显示了数据片段）：
- en: '![](img/image_08_010.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_010.png)'
- en: A snippet of the bike share data feed fetched using a browser
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器获取的自行车共享数据片段
- en: 'We need to iterate through the values and determine if the station `id` matches
    that of `Townsend at 7th`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要遍历值并确定站点`id`是否与`Townsend at 7th`匹配：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If there are less than `2` bikes available at the station, we push a mobile
    notification to our mobile device.
  id: totrans-120
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果站点上的自行车可用量少于`2`辆，我们将向我们的移动设备推送移动通知。
- en: In order to receive mobile notifications, you need to install *IF by IFTTT*
    app (available for Apple and Android devices).
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了接收移动通知，您需要安装*IF by IFTTT*应用程序（适用于苹果和安卓设备）。
- en: We also need to set up a recipe on IFTTT to trigger mobile notifications. Sign
    up for an account at [https://ifttt.com/](https://ifttt.com/).
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要在IFTTT上设置一个食谱来触发移动通知。在[https://ifttt.com/](https://ifttt.com/)注册一个账户。
- en: IFTTT is a service that enables creating recipes that connecting devices to
    different applications and automating tasks. For example, it is possible to log
    events tracked by the Raspberry Pi Zero to a spreadsheet on your Google Drive.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: IFTTT是一种服务，它允许创建食谱，将设备连接到不同的应用程序并自动化任务。例如，可以将Raspberry Pi Zero跟踪的事件记录到您的Google
    Drive上的电子表格中。
- en: All recipes on IFTTT follow a common template—*if this then that*, that is,
    if a particular event has occurred, then a specific action is triggered. For this
    example, we need to create an applet that triggers a mobile notification on receiving
    a web request.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: IFTTT上的所有食谱都遵循一个通用模板—*如果这个，那么那个*，也就是说，如果发生了特定的事件，就会触发特定的动作。对于这个例子，我们需要创建一个应用，当接收到网络请求时触发移动通知。
- en: 'You can start creating an applet using the drop-down menu under your account,
    as shown in the following screenshot:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用账户下的下拉菜单开始创建一个applet，如下面的截图所示：
- en: '![](img/image_08_011.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_011.png)'
- en: Start creating a recipe on IFTTT
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在IFTTT上开始创建一个菜谱
- en: 'It should take you to a recipe setup page (shown as follows). Click on this
    and set up an incoming web request:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该会带您到一个菜谱设置页面（如下所示）。点击此处并设置一个传入的Web请求：
- en: '![](img/image_08_012.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_012.png)'
- en: Click on this
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 点击此处
- en: 'Select the Maker Webhooks channel as the incoming trigger:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Maker Webhooks通道作为传入的触发器：
- en: '![](img/image_08_013.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_013.png)'
- en: Select the Maker Webhooks channel
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Maker Webhooks通道
- en: 'Select Receive a web request. A web request from the Raspberry Pi would act
    as a trigger to send a mobile notification:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择接收Web请求。来自树莓派的Web请求将作为发送移动通知的触发器：
- en: '![](img/image_08_014.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_014.png)'
- en: Select Receive a web request
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 选择接收Web请求
- en: 'Create a trigger named `mobile_notify`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mobile_notify`的触发器：
- en: '![](img/image_08_015.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_015.png)'
- en: Create a new trigger named mobile_notify
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为mobile_notify的新触发器
- en: It is time to create an action for the incoming trigger. Click on that.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候为传入的触发器创建一个动作了。点击它。
- en: '![](img/image_08_016.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_016.png)'
- en: Click on that
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 点击那个
- en: 'Select Notifications:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择通知：
- en: '![](img/image_08_017.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_017.png)'
- en: Select Notifications
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 选择通知
- en: 'Now, let''s format the notification that we would like to receive on our devices:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们格式化我们希望在设备上接收的通知：
- en: '![](img/image_08_018.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_018.png)'
- en: Setup notification for your device
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 设置设备通知
- en: In the mobile notification, we need to receive the number of bikes available
    at the bike share station. Click on the + Ingredient button and select `Value1`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在移动通知中，我们需要接收共享自行车站点的可用自行车数量。点击+成分按钮并选择`Value1`。
- en: '![](img/image_08_019.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_019.png)'
- en: 'Format the message to suit your needs. For example, when a notification is
    triggered by the Raspberry Pi, it would be great to receive a message in the following
    format: `Time to go home! Only 2 bikes are available at Townsend & 7th!`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化消息以满足您的需求。例如，当树莓派触发通知时，收到以下格式的消息会很好：`回家时间！Townsend & 7th只有2辆自行车可用！`
- en: '![](img/image_08_020.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_020.png)'
- en: Once you are satisfied with the message format, select Create action and your
    recipe should be ready!
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您对消息格式满意，选择创建动作，您的菜谱就应该准备好了！
- en: '![](img/image_08_021.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_021.png)'
- en: Create a recipe
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个菜谱
- en: In order to trigger a notification on our mobile device, we need a URL to make
    the `POST` request and a trigger key. This is available under Services | Maker
    Webhooks | Settings in your IFTTT account.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在移动设备上触发通知，我们需要一个用于发送`POST`请求的URL和一个触发键。这可以在您的IFTTT账户中的“服务”|“Maker Webhooks”|“设置”下找到。
- en: 'The trigger can be located here:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器可以在这里找到：
- en: '![](img/image_08_022.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_022.png)'
- en: 'Open the URL listed in the preceding screenshot in a new browser window. It
    provides the URL for the `POST` request as well as an explanation on (shown in
    the following screenshot) how to make a web request:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在新浏览器窗口中打开前面截图中的URL。它提供了`POST`请求的URL以及如何进行Web请求的解释（如下面的截图所示）：
- en: '![](img/image_08_023.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_023.png)'
- en: Making a POST request using the earlier-mentioned URL (key concealed for privacy)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面提到的URL（出于隐私考虑，键被隐藏）发送一个`POST`请求
- en: While making a request (as explained in the IFTTT documentation), if we include
    the number of bikes in the JSON body of request (using `Value1`), it can be shown
    on the mobile notification.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行请求（如IFTTT文档中所述）时，如果我们包括请求的JSON体中的自行车数量（使用`Value1`），它可以在移动通知中显示。
- en: 'Let''s revisit the Python example to make a web request when the number of
    bikes is below a certain threshold. Save the `IFTTT` URL and your IFTTT access
    key (retrieved from your IFTTT account) to your code as follows:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回顾一下Python示例，当自行车数量低于某个阈值时，进行Web请求。将`IFTTT` URL和您的IFTTT访问密钥（从您的IFTTT账户中获取）保存到您的代码中如下所示：
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When the number of bikes is below a certain threshold, we need to make a `POST`
    request with the bike information encoded in the JSON body:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当自行车数量低于某个阈值时，我们需要在JSON体中编码自行车信息并发送一个`POST`请求：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the preceding code snippet, if there are less than three bikes, a `POST`
    request is made using the `requests` module. The number of available bikes is
    encoded with the key `value1`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，如果少于三辆自行车，将使用`requests`模块发送一个`POST`请求。可用自行车的数量使用键`value1`进行编码：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Putting it all together, we have this:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有这些放在一起，我们得到这个：
- en: '[PRE24]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding code sample is available for download along with this chapter
    as `bike_share.py`. Try executing it after setting up a recipe on IFTTT. If necessary,
    adjust the threshold for the number of available bikes. You should receive a mobile
    notification on your device:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码示例作为`bike_share.py`与本章一起提供下载。在设置IFTTT配方后尝试执行它。如有必要，调整可用自行车的阈值。你应该会在你的设备上收到移动通知：
- en: '![](img/image_08_024.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_08_024.png)'
- en: Notification on your mobile device
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备上的通知
- en: A challenge to the reader
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对读者的挑战
- en: 'In this example, the bike information is fetched and parsed and if necessary,
    a notification is triggered. How would you go about modifying this code example
    to make sure that it is executed between a given time of the day? (hint: make
    use of `datetime` module).'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，自行车信息被检索和解析，并在必要时触发通知。你会如何修改这个代码示例以确保它在一天中的特定时间执行？（提示：使用`datetime`模块）。
- en: How would you go about building a desktop display that serves as a visual aid?
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你会如何构建一个作为视觉辅助的桌面显示屏？
- en: Project challenge
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目挑战
- en: Try to find out if the transit systems in your area provide such data to its
    users. How would you make use of the data to help commuters save time? For example,
    how would you provide transit system advisories to your friends/colleagues using
    such data?
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试找出你所在地区的交通系统是否向用户提供此类数据。你将如何利用这些数据帮助通勤者节省时间？例如，你将如何使用这些数据向你的朋友/同事提供交通系统建议？
- en: On completion of the book, we will post a similar example using the data from
    San Francisco **Bay Area Rapid Transit** (**BART**).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 书完成后，我们将发布一个使用旧金山湾区快速交通（**BART**）的数据的类似示例。
- en: Improving your vocabulary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高你的词汇量
- en: 'It is possible to improve your vocabulary using Python! Imagine setting up
    a large display that is installed somewhere prominently and updated on a daily
    basis. We will be making use of the `wordnik` API (sign up for an API key at [https://www.wordnik.com/signup](https://www.wordnik.com/signup)):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python提高你的词汇量是可能的！想象一下设置一个大型显示屏，安装在显眼的位置，并每天更新。我们将使用`wordnik` API（在[https://www.wordnik.com/signup](https://www.wordnik.com/signup)注册API密钥）：
- en: 'The first step is to install the `wordnik` API client for `python3`:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是安装`wordnik` API客户端的`python3`版本：
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There are restrictions on the wordnik API usage. Refer to the API documentation
    for more details.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 对wordnik API的使用有限制。请参阅API文档以获取更多详细信息。
- en: 'Let''s review writing our first example using the `wordnik` Python client.
    In order to fetch the word of the day, we need to initialize the `WordsApi` class.
    According to the API documentation, this could be done as follows:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回顾一下使用`wordnik` Python客户端编写的第一个示例。为了获取每日一词，我们需要初始化`WordsApi`类。根据API文档，可以这样做：
- en: '[PRE26]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now that the `WordsApi` class is initialized, let''s go ahead and fetch the
    word of the day:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在已经初始化了`WordsApi`类，让我们继续获取每日一词：
- en: '[PRE27]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This returns a `WordOfTheDay` object. According to the `wordnik` Python client
    documentation, this object consists of different parameters including the word,
    its synonym, source, usage, and so on. The word of the day and its synonym could
    be printed as follows:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这返回一个`WordOfTheDay`对象。根据`wordnik` Python客户端文档，该对象包含不同的参数，包括单词、同义词、来源、用法等。每日一词及其同义词可以按以下方式打印：
- en: '[PRE28]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Putting it all together, we have this:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起，我们得到如下：
- en: '[PRE29]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The preceding code snippet is available for download along with this chapter
    as `wordOfTheDay.py`. Sign up for an API key, and you should be able to retrieve
    the word of the day:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段作为`wordOfTheDay.py`与本章一起提供下载。注册API密钥，你应该能够检索每日一词：
- en: '[PRE30]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: A challenge to the reader
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对读者的挑战
- en: 'How would you daemonize this application such that the word of the day is updated
    every day? (hint: cronjob or `datetime`).'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你会如何使这个应用程序成为守护进程，以便每日一词能够每天更新？（提示：cronjob或`datetime`）。
- en: Project challenge
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目挑战
- en: It is possible to build a word game using the `wordnik` API. Think of a word
    game that is entertaining as well as helps improve your vocabulary. How would
    you go about building something that prompts questions to the player and accepting
    answer inputs?
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`wordnik` API构建一个单词游戏是可能的。想象一下一个既有趣又能帮助你提高词汇量的单词游戏。你将如何构建一个提示玩家问题并接受答案输入的东西？
- en: Try displaying the word of the day on a display. How would you implement this?
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在显示屏上显示每日一词。你会如何实现这一点？
- en: Logging
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录
- en: 'This is a topic that is going to be useful for the next two chapters. Logging
    ([https://docs.python.org/3/library/logging.html](https://docs.python.org/3/library/logging.html))
    helps with troubleshooting a problem. It helps with determining the root cause
    of a problem by tracing back through the sequence of events logged by the application.
    While we will be making extensive use of logging in the next two chapters, let''s
    review logging using a simple application. In order to review logging, let''s
    review it by making a `POST` request:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个将在接下来的两章中非常有用的主题。记录日志 ([https://docs.python.org/3/library/logging.html](https://docs.python.org/3/library/logging.html))
    有助于解决问题。它通过追踪应用程序记录的事件序列来确定问题的根本原因。虽然我们将在接下来的两章中广泛使用日志记录，但让我们通过一个简单的应用程序来回顾日志记录。为了回顾日志记录，让我们通过发送一个
    `POST` 请求来查看它：
- en: 'The first step in logging is setting the log file location and the log level:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日志的第一步是设置日志文件位置和日志级别：
- en: '[PRE31]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'While initializing the `logging` class, we need to specify the format for logging
    information, errors, and so on to the file. In this case, the format is as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化 `logging` 类时，我们需要指定将日志信息、错误等写入文件的格式。在这种情况下，格式如下：
- en: '[PRE32]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The log messages are in the following format:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 日志消息的格式如下：
- en: '[PRE33]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The log messages are saved to a file named `log_file.log`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 日志消息被保存到名为 `log_file.log` 的文件中。
- en: The logging level determines the level of logging needed for our application.
    The different log levels include `DEBUG`, `INFO`, `WARN`, and `ERROR`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 日志级别决定了我们应用程序所需的日志记录级别。不同的日志级别包括 `DEBUG`、`INFO`、`WARN` 和 `ERROR`。
- en: In this example, we have set the logging level to `INFO`. So, any log message
    belonging to `INFO`, `WARNING`, or `ERROR` levels are saved to the file.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将日志级别设置为 `INFO`。因此，属于 `INFO`、`WARNING` 或 `ERROR` 级别的任何日志消息都将保存到文件中。
- en: If the logging level is set to `ERROR`, only those log messages are saved to
    the file.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将日志级别设置为 `ERROR`，则只有那些日志消息会被保存到文件中。
- en: 'Let''s log a message based on the outcome of the `POST` request:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于对 `POST` 请求结果的输出记录一条消息：
- en: '[PRE34]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Putting it all together, we have this:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有这些放在一起，我们得到如下：
- en: '[PRE35]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The preceding code sample (`logging_example.py`) is available for download along
    with this chapter. This is a very soft introduction to the concept of logging
    in Python. We are going to make use of logging to troubleshoot any errors in our
    project.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例（`logging_example.py`）与本章一起提供下载。这是对 Python 中日志记录概念的非常温和的介绍。我们将使用日志记录来排查我们项目中可能出现的任何错误。
- en: In the final chapter, we will discuss best practices in logging.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将讨论日志记录的最佳实践。
- en: Threading in Python
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的多线程
- en: In this section, we are going to discuss the concept of threading in Python.
    We will be making use of threading in the next chapter. Threads enable running
    multiple processes at the same time. For example, we can run motors while listening
    to incoming events from sensors. Let's demonstrate this with an example.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论 Python 中的多线程概念。我们将在下一章中使用多线程。线程允许同时运行多个进程。例如，我们可以在监听传感器传入事件的同时运行电机。让我们用一个例子来演示这一点。
- en: 'We are going to emulate a situation where we would like to process events from
    sensors of the same type. In this example, we are just going to print something
    to the screen. We need to define a function that listens to events from each sensor:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将模拟一个我们想要处理相同类型传感器的事件的情况。在这个例子中，我们只是将一些内容打印到屏幕上。我们需要定义一个函数来监听每个传感器的事件：
- en: '[PRE36]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We can make use of the preceding function to listen for sensor events from
    three different sensors at the same time using the `threading` module in Python:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用前面的函数，通过 Python 中的 `threading` 模块同时监听来自三个不同传感器的传感器事件：
- en: '[PRE37]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Putting it all together, we have this:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些放在一起，我们得到如下：
- en: '[PRE38]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The preceding code sample (available for download as `threading_example.py`)
    starts three threads that listens to events from three sensors at the same time.
    The output looks something like this:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例（作为 `threading_example.py` 可以下载）启动了三个线程，同时监听来自三个传感器的事件。输出看起来像这样：
- en: '[PRE39]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the next chapter, we are going to make use of threading to control the motors
    of a robot-based on sensor inputs.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用多线程根据传感器输入控制机器人的电机。
- en: PEP8 style guide for Python
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 的 PEP8 风格指南
- en: '**PEP8** is a style guide for Python that helps programmers write readable
    code. It is important to follow certain conventions to make our code readable.
    Some examples of coding conventions include the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**PEP8**是Python的风格指南，有助于程序员编写可读的代码。遵循某些约定对于使我们的代码可读非常重要。以下是一些编码约定的示例：'
- en: Inline comments should start with a `# ` and be followed by a single space.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联注释应以`# `开头，并后跟一个空格。
- en: Variables should have the following convention: `first_var`.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量应遵循以下约定：`first_var`。
- en: Avoiding trailing whitespaces on each line. For example, `if name == "test":`
    should not be followed by whitespaces.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免每行尾随空格。例如，`if name == "test":`后面不应跟空格。
- en: You can read the entire PEP8 standards at [https://www.python.org/dev/peps/pep-0008/#block-comments](https://www.python.org/dev/peps/pep-0008/#block-comments).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.python.org/dev/peps/pep-0008/#block-comments](https://www.python.org/dev/peps/pep-0008/#block-comments)阅读整个PEP8标准。
- en: Verifying PEP8 guidelines
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证PEP8指南
- en: 'There are tools to verify PEP8 standards of your code. After writing a code
    sample, ensure that your code adheres to PEP8 standards. This can be done using
    the `pep8` package. It can be installed as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 有工具可以验证代码的PEP8标准。在编写代码示例后，确保您的代码遵循PEP8标准。这可以通过使用`pep8`包来完成。它可以按照以下方式安装：
- en: '[PRE40]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Let''s check whether one of our code samples has been written according to
    the PEP8 convention. This can be done as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查我们的代码示例是否按照PEP8约定编写。这可以通过以下方式完成：
- en: '[PRE41]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The check indicated the following errors:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 检查显示以下错误：
- en: '[PRE42]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'As the output indicates, the following lines are missing a whitespace after
    a comma on lines `5` and `6`:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如输出所示，以下行在行`5`和`6`后缺少逗号后的空格：
- en: '![](img/image_08_025.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_08_025.png)'
- en: Missing trailing whitespace after the comma
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 逗号后缺少尾随空格
- en: Let's fix the problem, and our code should adhere to PEP8 conventions. Recheck
    the file and the errors would have disappeared. In order to make your code readable,
    always run a PEP8 check before checking in your code to a public repository.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修复这个问题，并确保我们的代码遵循PEP8约定。重新检查文件，错误就会消失。为了使您的代码可读，在将代码提交到公共存储库之前，始终运行PEP8检查。
- en: Summary
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed advanced topics in Python. We discussed topics
    including speech recognition, building a commuter information tool, and a Python
    client to improve your vocabulary. There are advanced tools in Python that are
    widely used in the fields of data science, AI, and so on. We hope that the topics
    discussed in this chapter are the first step in learning such tools.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Python的高级主题。我们讨论了包括语音识别、构建通勤信息工具以及用于提高词汇量的Python客户端等主题。Python中有一些高级工具，在数据科学、人工智能等领域被广泛使用。我们希望本章讨论的主题是学习这些工具的第一步。
