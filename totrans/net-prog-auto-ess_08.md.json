["```py\nimport subprocess\nTARGET = \"yahoo.com\"\ncommand = [\"ping\", \"-c\", \"1\", TARGET]\nresponse = subprocess.call(\n    command,\n    stdout=subprocess.DEVNULL,\n)\nif response == 0:\n    print(TARGET, \"OK\")\nelse:\n    print(TARGET, \"FAILED\")\n```", "```py\nimport pythonping\nTARGET = \"yahoo.com\"\nresponse = pythonping.ping(TARGET, count=1)\nif response.success:\n    print(TARGET, \"OK\")\nelse:\n    print(TARGET, \"FAILED\")\n```", "```py\n% sudo python3 single-pyping-example.py\nyahoo.com OK\n```", "```py\nfrom pythonping import ping\nfrom multiprocessing import Process\nTARGETS = [\"yahoo.com\", \"google.com\", \"cisco.com\", \"cern.ch\"]\ndef myping(host):\n    response = ping(host, count=1)\n    if response.success:\n        print(\"%s OK, latency is %.2fms\" % (host, response.rtt_avg_ms))\n    else:\n        print(host, \"FAILED\")\ndef main():\n    for host in TARGETS:\n        Process(target=myping, args=(host,)).start()\nif __name__ == \"__main__\":\n    main()\n```", "```py\n% sudo python3 multiple-pyping-example.py\ngoogle.com OK, latency is 45.31ms\nyahoo.com OK, latency is 192.17ms\ncisco.com OK, latency is 195.44ms\ncern.ch OK, latency is 272.97ms\n```", "```py\nfrom pythonping import ping\nimport threading\nTARGETS = [\"yahoo.com\", \"google.com\", \"cisco.com\", \"cern.ch\"]\nclass myPing(threading.Thread):\n    def __init__(self, host):\n        threading.Thread.__init__(self)\n        self.host = host\n    def run(self):\n        response = ping(self.host)\n        if response.success:\n            print(\"%s OK, latency is %.2fms\" % (self.host, response.rtt_avg_ms))\n        else:\n            print(self.host, \"FAILED\")\ndef main():\n    for host in TARGETS:\n        myPing(host).start()\nif __name__ == \"__main__\":\n    main()\n```", "```py\n% sudo python3 threads-pyping-example.py\ngoogle.com OK, latency is 36.21ms\nyahoo.com OK, latency is 136.16ms\ncisco.com OK, latency is 144.67ms\ncern.ch OK, latency is 215.81ms\n```", "```py\n% sudo python3 performance-thread-process-example.py 10\nMulti-threading test --- duration 0.015 seconds\nMulti-processing test--- duration 0.193 seconds\n% sudo python3 performance-thread-process-example.py 20\nMulti-threading test --- duration 0.030 seconds\nMulti-processing test--- duration 0.315 seconds\n% sudo python3 performance-thread-process-example.py 50\nMulti-threading test --- duration 2.095 seconds\nMulti-processing test--- duration 0.765 seconds\n% sudo python3 performance-thread-process-example.py 100\nMulti-threading test --- duration 2.273 seconds\nMulti-processing test--- duration 1.507 seconds\n```", "```py\nfrom pythonping import ping\nimport asyncio\nTARGETS = [\"yahoo.com\", \"google.com\", \"cisco.com\", \"cern.ch\"]\nasync def myping(host):\n    response = ping(host)\n    if response.success:\n        print(\"%s OK, latency is %.3fms\" % (host, response.rtt_avg_ms))\n    else:\n        print(host, \"FAILED\")\nasync def main():\n    coroutines = []\n    for target in TARGETS:\n        coroutines.append(\n            asyncio.ensure_future(myping(target)))\n    for coroutine in coroutines:\n        await coroutine\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```", "```py\n% sudo python3 asyncio-example.py\nyahoo.com OK, latency is 192.75ms\ngoogle.com OK, latency is 29.93ms\ncisco.com OK, latency is 162.89ms\ncern.ch OK, latency is 339.76ms\n```", "```py\nfrom aioping import ping\nasync def myping(host):\n    try:\n        delay = await ping(host)\n        print(\"%s OK, latency is %.3f ms\" % (host, delay * 1000))\n    except TimeoutError:\n        print(host, \"FAILED\")\n```", "```py\n% sudo python3 asyncio-example-fixed.py\ngoogle.com OK, latency is 40.175 ms\ncisco.com OK, latency is 170.222 ms\nyahoo.com OK, latency is 181.696 ms\ncern.ch OK, latency is 281.662 ms\n```", "```py\nTypeError: object ResponseList can't be used in 'await' expression\n```", "```py\nimport (\n    \"fmt\"\n    \"time\"\n    \"github.com/go-ping/ping\"\n)\nfunc myPing(host string) {\n    p, err := ping.NewPinger(host)\n    if err != nil {\n        panic(err)\n    }\n    p.Count = 1\n    p.SetPrivileged(true)\n    if err = p.Run(); err != nil {\n        panic(err)\n    }\n    stats := p.Statistics()\n    fmt.Println(host, \"OK, latency is\", stats.AvgRtt)\n}\nfunc main() {\n    targets := []string{\"yahoo.com\", \"google.com\", \"cisco.com\", \"cern.ch\"}\n    for _, target := range targets {\n        go myPing(target)\n    }\n    time.Sleep(time.Second * 3) //Wait 3 seconds\n}\n```", "```py\n$ go run goroutine-icmp-probe.go\ngoogle.com OK, latency is 15.9587ms\ncisco.com OK, latency is 163.6334ms\nyahoo.com OK, latency is 136.3522ms\ncern.ch OK, latency is 225.0571ms\n```", "```py\nimport (\n    \"fmt\"\n    \"sync\"\n    \"github.com/go-ping/ping\"\n)\nfunc myping(host string, wg *sync.WaitGroup) {\n    defer wg.Done()\n    p, err := ping.NewPinger(host)\n    if err != nil {\n        panic(err)\n    }\n    p.Count = 1\n    p.SetPrivileged(true)\n    if err = p.Run(); err != nil {\n        panic(err)\n    }\n    stats := p.Statistics()\n    fmt.Println(host, \"OK, latency is\", stats.AvgRtt)\n}\nfunc main() {\n    var targets = []string{\"yahoo.com\", \"google.com\", \"cisco.com\", \"cern.ch\"}\n    var wg sync.WaitGroup\n    wg.Add(len(targets))\n    for _, target := range targets {\n        go myping(target, &wg)\n    }\n    wg.Wait()\n}\n```", "```py\njob \"probe-icmp\" {\n  region = \"us\"\n  datacenters = [\"us-1\", \"us-12\"]\n  type = \"service\"\n  update {\n    stagger      = \"60s\"\n    max_parallel = 4\n  }\n  task \"probe\" {\n    driver = \"exec\"\n    config {\n      command = \"/usr/local/bin/icmp-probe\"\n    }\n    env {\n      TARGETS = \"cisco.com,yahoo.com,google.com\"\n    }\n    resources {\n      cpu    = 700 # approximated in MHz\n      memory = 16 # in MBytes\n    }\n}\n```", "```py\nfunc probeTargets(w http.ResponseWriter, r *http.Request) {\n    httpTargets := r.URL.Query().Get(\"targets\")\n    targets := strings.Split(httpTargets, \",\")\n    if len(httpTargets) == 0 || len(targets) > 1000{\n        fmt.Fprintf(w, \"error: 0 < targets < 1000\\n\")\n        return\n    }\n    var wg sync.WaitGroup\n    wg.Add(len(targets))\n    for _, target := range targets {\n        log.Println(\"requested ICMP probe for\", target)\n        go probe(target, w, &wg)\n    }\n    wg.Wait()\n}\nfunc main() {\n    http.HandleFunc(\"/latency\", probeTargets)\n    log.Fatal(http.ListenAndServe(\":9900\", nil))\n}\n```", "```py\nGET /latency?targets=google.com,cisco.com HTTP/1.0\n```", "```py\nfunc probe(host string, w http.ResponseWriter, wg *sync.WaitGroup) {\n    defer wg.Done()\n    p, err := ping.NewPinger(host)\n    if err != nil {\n        fmt.Fprintf(w, \"error ping creation: %v\\n\", err)\n        return\n    }\n    p.Count = 1\n    p.Timeout = time.Second * 2\n    p.SetPrivileged(true)\n    if err = p.Run(); err != nil {\n        fmt.Fprintf(w, \"error ping sent: %v\\n\", err)\n        return\n    }\n    stats := p.Statistics()\n    if stats.PacketLoss == 0 {\n        fmt.Fprintf(w, \"%s latency is %s\\n\", host, stats.AvgRtt)\n    } else {\n        fmt.Fprintf(w, \"%s no response timeout\\n\", host)\n    }\n}\n```", "```py\nfunc main() {\n    listen := \":9900\"\n    if port, ok := os.LookupEnv(\"PORT\"); ok {\n        listen = \":\" + port\n    http.HandleFunc(\"/latency\", probeTargets)\n    log.Fatal(http.ListenAndServe(listen, nil))\n}\n```", "```py\nFROM golang:1.19-alpine\nWORKDIR /usr/src/app\nCOPY go.mod go.sum ./\nRUN go mod download && go mod verify\nCOPY icmp-probe-service.go ./\nRUN go build -v -o /usr/local/bin/probe-service\nCMD [\"/usr/local/bin/probe-service\"]\n```", "```py\n% docker images\nREPOSITORY      TAG   IMAGE ID CREATED              SIZE\nprobe-service   latest  e9c2   About a minute ago   438MB\n```", "```py\ndocker run -p 9900:9900 probe-service\n```", "```py\ndocker run -e PORT=7700 -p 7700:7700 probe-service\n```", "```py\n% docker run -d -p 9001:9900 probe-service\n% docker run -d -p 9002:9900 probe-service\n% docker run -d -p 9003:9900 probe-service\n```", "```py\n% docker ps\nCONTAINER ID   IMAGE           COMMAND                  CREATED         STATUS         PORTS                    NAMES\n6266c895f11a   probe-service   \"/usr/local/bin/prob…\"   2 minutes ago   Up 2 minutes   0.0.0.0:9003->9900/tcp   gallant_heisenberg\n270d73163d19   probe-service   \"/usr/local/bin/prob…\"   2 minutes ago   Up 2 minutes   0.0.0.0:9002->9900/tcp   intelligent_clarke\n4acc6162e821   probe-service   \"/usr/local/bin/prob…\"   2 minutes ago   Up 2 minutes   0.0.0.0:9001->9900/tcp   hardcore_bhabha\n```", "```py\nversion: \"1.0\"\nservices:\n  probe1:\n    image: \"probe-service:latest\"\n    ports: [\"9001:9900\"]\n  probe2:\n    image: \"probe-service:latest\"\n    ports: [\"9002:9900\"]\n  probe3:\n    image: \"probe-service:latest\"\n    ports: [\"9003:9900\"]\n  probe4:\n    image: \"probe-service:latest\"\n    ports: [\"9004:9900\"]\n  probe5:\n    image: \"probe-service:latest\"\n    ports: [\"9005:9900\"]\n```", "```py\n% docker compose up –d\n[+] Running 6/6\n⠿ Network probe-service_default     Created   1.4s\n⠿ Container probe-service-probe5-1  Started   1.1s\n⠿ Container probe-service-probe4-1  Started   1.3s\n⠿ Container probe-service-probe3-1  Started   1.5s\n⠿ Container probe-service-probe1-1  Started   1.1s\n⠿ Container probe-service-probe2-1  Started\n```", "```py\nHost-1$ docker swarm init\nSwarm initialized: current node (9f2777swvj1gmqegbxabahxm3) is now a manager.\nTo add a worker to this swarm, run the following command:\n    docker swarm join --token SWMTKN-1-1gdb6i88ubq5drnigbwq2rh51fmyordkkpljjtwefwo2nk3ddx-6nwz531o6lqtkun4gagvrl7ws 192.168.86.158:2377\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```", "```py\nhost-2$ docker swarm join --token SWMTKN-1-1gdb6i88ubq5drnigbwq2rh51fmyordkkpljjtwefwo2nk3ddx-6nwz531o6lqtkun4gagvrl7ws 192.168.86.158:2377\nhost-3$ docker swarm join --token SWMTKN-1-1gdb6i88ubq5drnigbwq2rh51fmyordkkpljjtwefwo2nk3ddx-6nwz531o6lqtkun4gagvrl7ws 192.168.86.158:2377\nhost-4$ docker swarm join --token SWMTKN-1-1gdb6i88ubq5drnigbwq2rh51fmyordkkpljjtwefwo2nk3ddx-6nwz531o6lqtkun4gagvrl7ws 192.168.86.158:2377\n```", "```py\n$ docker node ls\nID          HOSTNAME  STATUS  AVAILABILITY MANAGER\n9f2777swvj* host-1    Ready   Active       Leader\na34f25affg* host-2    Ready   Active\n7fdd77wvgf* host-4    Ready   Active\n8ad531vabj* host-3    Ready   Active\n```", "```py\n$ docker service create --replicas 1 --name probe probe-service\n7sv66ytzq0te92dkndz5pg5q2\noverall progress: 1 out of 1 tasks\n1/1: running\n[==================================================>]\nverify: Service converged\n```", "```py\n$ docker service ls\nID          NAME  MODE       REPLICAS IMAGE\n7sv66ytzq0  probe replicated 1/1      probe-service:latest\n```", "```py\n$ docker service scale probe=10\nprobe scaled to 10\noverall progress: 10 out of 10 tasks\n1/10: running\n[==================================================>]\n2/10: running\n[==================================================>]\n3/10: running\n[==================================================>]\n4/10: running\n[==================================================>]\n5/10: running\n[==================================================>]\n6/10: running\n[==================================================>]\n7/10: running\n[==================================================>]\n8/10: running\n[==================================================>]\n9/10: running\n[==================================================>]\n10/10: running\n[==================================================>]\nverify: Service converged\n```", "```py\n$ docker service ls\nID          NAME  MODE       REPLICAS IMAGE\n7sv66ytzq0  probe replicated 10/10    probe-service:latest\n```", "```py\n$ docker service ps probe\nID      NAME    IMAGE                NODE  DESIRED STATE\ny38830 probe.1 probe-service:latest host-1 Running Running v4493s probe.2 probe-service:latest host-2 Running Running\nzhzbnj probe.3 probe-service:latest host-3 Running Running\ni84s4g probe.4 probe-service:latest host-3 Running Running 3emx3f probe.5 probe-service:latest host-1 Running Running\nrd1vp1 probe.6 probe-service:latest host-2 Running Running\np1oq0w probe.7 probe-service:latest host-3 Running Running ro0foo probe.8 probe-service:latest host-4 Running Running\nl6prr4 probe.9 probe-service:latest host-4 Running Running\ndwdr43 probe.10 probe-service:latest host-1 Running Running\n```"]