["```py\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef hello_world():\n    return 'Hello to the World of Flask!'\nif __name__ == '__main__':\n    app.run()\n```", "```py\n$ pip3 install Flask\n```", "```py\n$ python3 app.py\n* Running on http://127.0.0.1:5000 (Press CTRL+C to quit)\n```", "```py\n$ export FLASK_APP=app.py\n$ flask run\n* Running on http://127.0.0.1:5000/\n```", "```py\n$ export FLASK_APP=app.py\n$ python3 -m flask run\n* Running on http://127.0.0.1:5000/\n```", "```py\n$ python3 -m venv my_flask_env\n```", "```py\n$ source my_flask_env/bin/activate\n$ pip3 install flask\n```", "```py\n$ pip3 install flask\nCollecting Flask\n...........\n...........\nMany more lines.........\n...........\nInstalling collected packages: zipp, Werkzeug, MarkupSafe, itsdangerous, click, Jinja2, importlib-metadata, Flask\nSuccessfully installed Flask-2.1.2 Jinja2-3.1.2 MarkupSafe-2.1.1 Werkzeug-2.1.2 click-8.1.3 importlib-metadata-4.11.4 itsdangerous-2.1.2 zipp-3.8.0\n```", "```py\napp = Flask(__name__)\napp.config['DEBUG'] = True\n```", "```py\n    app.config.from_pyfile('myconfig.cfg')\n    ```", "```py\n    app.config.from_object('myapplication.default_settings')\n    ```", "```py\n    app.config.from_object(__name__)\n    ```", "```py\n    app.config.from_envvar('PATH_TO_CONFIG_FILE')\n    ```", "```py\n    app.config.from_file('config.json', load=json.load)\n    ```", "```py\nAlternatively, we can do the following:\napp.config.from_file('config.toml', load=toml.load)\n```", "```py\napp = Flask(__name__)\nDEBUG = True\nTESTING = True\napp.config.from_object(__name__)\napp.config.from_pyfile('/path/to/config/file')\n```", "```py\nclass BaseConfig(object):\n    'Base config class'\n    SECRET_KEY = 'A random secret key'\n    DEBUG = True\n    TESTING = False\n    NEW_CONFIG_VARIABLE = 'my value'\nclass ProductionConfig(BaseConfig):\n    'Production specific config'\n    DEBUG = False\n    SECRET_KEY = open('/path/to/secret/file').read()\nclass StagingConfig(BaseConfig):\n    'Staging specific config'\n    DEBUG = True\nclass DevelopmentConfig(BaseConfig):\n    'Development environment specific config'\n    DEBUG = True\n    TESTING = True\n    SECRET_KEY = 'Another random secret key'\n```", "```py\napp.config.from_object('configuration.DevelopmentConfig')\n```", "```py\nmy_app/\n    app.py\n    config.py\n    __init__.py\n    static/\n        css/\n        js/\n        images/\n            logo.png\n```", "```py\n<img src='/static/images/logo.png'>\n```", "```py\napp = Flask(__name__,\n    static_folder='/path/to/static/folder')\n```", "```py\napp = Flask(\n    _name_, static_url_path='/differentstatic',\n    static_folder='/path/to/static/folder'\n)\n```", "```py\n<img src='/differentstatic/logo.png'>\n```", "```py\n<img src=\"img/{{ url_for('static', filename='logo.png') }}\">\n```", "```py\nmy_app/\n    app.py\n    instance/\n        config.cfg\n```", "```py\napp = Flask(\n    __name__,\n    instance_path='/absolute/path/to/instance/folder')\n```", "```py\napp = Flask(__name__, instance_relative_config=True)\n```", "```py\napp = Flask(\n    __name__, instance_path='path/to/instance/folder',\n    instance_relative_config=True\n)\napp.config.from_pyfile('config.cfg', silent=True)\n```", "```py\nIOError: [Errno 2] Unable to load configuration file (No such file or directory): '/absolute/path/to/config/file'\n```", "```py\nflask_app/\n    run.py\n    my_app/\n        __init__.py\n        hello/\n            __init__.py\n            models.py\n            views.py\n```", "```py\nfrom my_app import app\napp.run(debug=True)\n```", "```py\nfrom flask import Flask\napp = Flask(__name__)\nimport my_app.hello.views\n```", "```py\n# No content.\n# We need this file just to make this folder a python module.\n```", "```py\nMESSAGES = {\n    'default': 'Hello to the World of Flask!',\n}\n```", "```py\nfrom my_app import app\nfrom my_app.hello.models import MESSAGES\n@app.route('/')\n@app.route('/hello')\ndef hello_world():\n    return MESSAGES['default']\n@app.route('/show/<key>')\ndef get_message(key):\n    return MESSAGES.get(key) or \"%s not found!\" % key\n@app.route('/add/<key>/<message>')\ndef add_or_update_message(key, message):\n    MESSAGES[key] = message\n    return \"%s Added/Updated\" % key\n```", "```py\n$ python run.py\nServing Flask app \"my_app\" (lazy loading)\nEnvironment: production\nWARNING: Do not use the development server in a production environment.\nUse a production WSGI server instead.\nDebug mode: on\nRunning on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nRestarting with stat\nDebugger is active!\n* Debugger PIN: 111-111-111\n```", "```py\nMESSAGES = {\n    'default': 'Hello to the World of Flask!',\n    'great': 'Flask is great!!',\n}\n```", "```py\nfrom flask import Flask\nfrom my_app.hello.views import hello\napp = Flask(__name__)\napp.register_blueprint(hello)\n```", "```py\nfrom flask import Blueprint\nfrom my_app.hello.models import MESSAGES\nhello = Blueprint('hello', __name__)\n@hello.route('/')\n@hello.route('/hello')\ndef hello_world():\n    return MESSAGES['default']\n@hello.route('/show/<key>')\ndef get_message(key):\n    return MESSAGES.get(key) or \"%s not found!\" % key\n@hello.route('/add/<key>/<message>')\ndef add_or_update_message(key, message):\n    MESSAGES[key] = message\n    return \"%s Added/Updated\" % key\n```", "```py\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\nimport os\nfrom setuptools import setup\nsetup(\n    name = 'my_app',\n    version='1.0',\n    license='GNU General Public License v3',\n    author='Shalabh Aggarwal',\n    author_email='contact@shalabhaggarwal.com',\n    description='Hello world application for Flask',\n    packages=['my_app'],\n    platforms='any',\n    install_requires=[\n        'Flask',\n    ],\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: GNU General Public\n          License v3',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n        'Topic :: Software Development :: Libraries ::\n          Python Modules'\n],\n)\n```", "```py\n$ python setup.py install\n```", "```py\n$ python\nPython 3.8.13 (default, May  8 2022, 17:52:27)\n>>> import my_app\n>>>\n```"]