["```py\nimport weakref\n\nclass Subject(object):\n    \"\"\"Provider of notifications to other objects\n    \"\"\"\n\n    def __init__(self, name):\n        self.name = name\n        self._observers = weakref.WeakSet()\n\n    def register_observer(self, observer):\n        \"\"\"attach the observing object for this subject\n        \"\"\"\n        self._observers.add(observer)\n        print(\"observer {0} now listening on {1}\".format(\n            observer.name, self.name))\n\n    def notify_observers(self, msg):\n        \"\"\"transmit event to all interested observers\n        \"\"\"\n        print(\"subject notifying observers about {}\".format(msg,))\n        for observer in self._observers:\n            observer.notify(self, msg)\n\nclass Observer(object):\n\n    def __init__(self, name):\n        self.name = name\n\n    def start_observing(self, subject):\n        \"\"\"register for getting event for a subject\n        \"\"\"\n        subject.register_observer(self)\n\n    def notify(self, subject, msg):\n        \"\"\"notify all observers \n        \"\"\"\n        print(\"{0} got msg from {1} that {2}\".format(\n            self.name, subject.name, msg))\n\nclass_homework = Subject(\"class homework\")\nstudent1 = Observer(\"student 1\")\nstudent2 = Observer(\"student 2\")\n\nstudent1.start_observing(class_homework)\nstudent2.start_observing(class_homework)\n\nclass_homework.notify_observers(\"result is out\")\n\ndel student2\n\nclass_homework.notify_observers(\"20/20 passed this sem\")\n```", "```py\n(tag)[ ch5 ] $ python codes/B04885_05_code_01.py\nobserver student 1 now listening on class homework\nobserver student 2 now listening on class homework\nsubject notifying observers about result is out\nstudent 1 got msg from class homework that result is out\nstudent 2 got msg from class homework that result is out\nsubject notifying observers about 20/20 passed this sem\nstudent 1 got msg from class homework that 20/20 passed this sem\n```", "```py\nTAX_PERCENT = .12\n\ndef tax_simple(billamount):\n    return billamount * TAX_PERCENT\n\ndef tax_actual(billamount):\n    if billamount < 500:\n        return billamount * (TAX_PERCENT//2)\n    else:\n        return billamount * TAX_PERCENT\n\ntax_cal = tax_simple\nprint(tax_cal(400),tax_cal(700))\n\ntax_cal = tax_actual\nprint(tax_cal(400),tax_cal(700))\n```", "```py\n48.0 84.0\n0.0 84.0\n```", "```py\nTAX_PERCENT = .12\n\nclass TaxIN(object):\n    def __init__(self,):\n        self.country_code = \"IN\"\n\n    def __call__(self, billamount):\n        return billamount * TAX_PERCENT\n\nclass TaxUS(object):\n    def __init__(self,):\n        self.country_code = \"US\"\n\n    def __call__(self,billamount):\n        if billamount < 500:\n            return billamount * (TAX_PERCENT//2)\n        else:\n            return billamount * TAX_PERCENT\n\nclass TaxCalculator(object):\n\n    def __init__(self):\n        self._impls = [TaxIN(),TaxUS()]\n\n    def __call__(self, country, billamount):\n    \"\"\"select the strategy based on country parameter\n    \"\"\"\n        for impl in self._impls:\n            if impl.country_code == country:\n                return impl(billamount)\n        else:\n            return None\n\ntax_cal = TaxCalculator()\nprint(tax_cal(\"IN\", 400), tax_cal(\"IN\", 700))\nprint(tax_cal(\"US\", 400), tax_cal(\"US\", 700))\n```", "```py\n48.0 84.0\n0.0 84.0 \n```", "```py\nfrom six import with_metaclass\n\nclass Singleton(type):\n    _registry = {}\n\n    def __call__(cls, *args, **kwargs):\n        print(cls, args, kwargs)\n        if cls not in Singleton._registry:\n            Singleton._registry[cls] = type.__call__(cls, *args, **kwargs)\n        return Singleton._registry[cls]\n\nclass Me(with_metaclass(Singleton, object)):\n\n    def __init__(self, data):\n        print(\"init ran\", data)\n        self.data = data\n\nm = Me(2)\nn = Me(3)\nprint(m.data, n.data)\n```", "```py\n<class '__main__.Me'> (2,) {}\ninit ran 2\n<class '__main__.Me'> (3,) {}\n2 2\n```", "```py\nimport six\n\nclass AlooDish(object):\n\n    def get_ingredients(self,):\n        self.ingredients = {}\n\n    def prepare_vegetables(self,):\n        for item in six.iteritems(self.ingredients):\n            print(\"take {0} {1} and cut into smaller pieces\".format(item[0],item[1]))\n        print(\"cut all vegetables in small pieces\")\n\n    def fry(self,):\n        print(\"fry for 5 minutes\")\n\n    def serve(self,):\n        print(\"Dish is ready to be served\")\n\n    def cook(self,):\n        self.get_ingredients()\n        self.prepare_vegetables()\n        self.fry()\n        self.serve()\n\nclass AlooMatar(AlooDish):\n\n    def get_ingredients(self,):\n        self.ingredients = {'aloo':\"1 Kg\",'matar':\"1/2 kg\"}\n\n    def fry(self,):\n        print(\"wait 10 min\")\n\nclass AlooPyaz(AlooDish):\n\n    def get_ingredients(self):\n        self.ingredients = {'aloo':\"1 Kg\",'pyaz':\"1/2 kg\"}\n\naloomatar = AlooMatar()\naloopyaz = AlooPyaz()\nprint(\"*******************  aloomatar cook\")\naloomatar.cook()\nprint(\"******************* aloopyaz cook\")\naloopyaz.cook()\n```", "```py\n*******************  aloomatar cook\ntake matar 1/2 kg and cut into smaller pieces\ntake aloo 1 Kg and cut into smaller pieces\ncut all vegetables in small pieces\nwait 10 min\nDish is ready to be served\n******************* aloopyaz cook\ntake pyaz 1/2 kg and cut into smaller pieces\ntake aloo 1 Kg and cut into smaller pieces\ncut all vegetables in small pieces\nfry for 5 minutes\nDish is ready to be served\n```", "```py\ndef running_competition(*list_of_animals):\n    if len(list_of_animals)<1:\n        print(\"No one Running\")\n        return\n    fastest_animal = list_of_animals[0]\n    maxspeed = fastest_animal.running_speed()\n    for animal in list_of_animals[1:]:\n        runspeed =  animal.running_speed()\n        if runspeed > maxspeed:\n            fastest_animal = animal\n            maxspeed = runspeed\n    print(\"winner is {0} with {1} Km/h\".format(fastest_animal.name,maxspeed))\n\nclass Cat(object):\n\n    def __init__(self, name, legs):\n        self.name = name\n        self.legs = legs\n\n    def running_speed(self,):\n        if self.legs>4 :\n            return 20\n        else:\n            return 40\n\nrunning_competition(Cat('cat_a',4),Cat('cat_b',3))\n\nclass Fish(object):\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def swim_speed(self):\n        if self.age < 2:\n            return 40\n        else:\n            return 60\n\n# to let our fish to participate in tournament it should have similar interface as\n# cat, we can also do this by using an adaptor class RunningFish\n\nclass RunningFish(object):\n    def __init__(self, fish):\n        self.legs = 4 # dummy\n        self.fish = fish\n\n    def running_speed(self):\n        return self.fish.swim_speed()\n\n    def __getattr__(self, attr):\n        return getattr(self.fish,attr)\n\nrunning_competition(Cat('cat_a',4),\n                    Cat('cat_b',3),\n                    RunningFish(Fish('nemo',3)),\n                    RunningFish(Fish('dollar',1)))\n```", "```py\nwinner is cat_a with 40 Km/h\nwinner is nemo with 60 Km/h\n```", "```py\nclass Leg(object):\n    def __init__(self,name):\n        self.name = name\n\n    def forward(self):\n        print(\"{0},\".format(self.name), end=\"\")\n\nclass WalkingDrone(object):\n\n    def __init__(self, name):\n        self.name = name\n        self.frontrightleg = Leg('Front Right Leg')\n        self.frontleftleg = Leg('Front Left Leg')\n        self.backrightleg = Leg('Back Right Leg')\n        self.backleftleg = Leg('Back Left Leg')\n\n    def walk(self):\n        print(\"\\nmoving \",end=\"\")\n        self.frontrightleg.forward()\n        self.backleftleg.forward()\n        print(\"\\nmoving \",end=\"\")\n        self.frontleftleg.forward()\n        self.backrightleg.forward()\n\n    def run(self):\n        print(\"\\nmoving \",end=\"\")\n        self.frontrightleg.forward()\n        self.frontleftleg.forward()\n        print(\"\\nmoving \",end=\"\")\n        self.backrightleg.forward()\n        self.backleftleg.forward()\n\nwd = WalkingDrone(\"RoboDrone\" )\nprint(\"\\nwalking\")\nwd.walk()\nprint(\"\\nrunning\")\nwd.run()\n```", "```py\nwalking\n\nmoving Front Right Leg,Back Left Leg,\nmoving Front Left Leg,Back Right Leg,\nrunning\n\nmoving Front Right Leg,Front Left Leg,\nmoving Back Right Leg,Back Left Leg,Summary\n```", "```py\nimport weakref\n\nclass Link(object):\n\n    def __init__(self, ref, text, image_path=None):\n        self.ref = ref\n        if image_path:\n            self.image = BrowserImage(image_path)\n        else:\n            self.image = None\n        self.text = text\n\n    def __str__(self):\n        if not self.image:\n            return \"<Link (%s)>\" % self.text\n        else:\n            return \"<Link (%s,%s)>\" % (self.text, str(self.image))\n\nclass BrowserImage(object):\n    _resources = weakref.WeakValueDictionary()\n\n    def __new__(cls, location):\n        image = BrowserImage._resources.get(location, None)\n        if not image:\n            image = object.__new__(cls)\n            BrowserImage._resources[location] = image\n            image.__init(location)\n        return image\n\n    def __init(self, location):\n        self.location = location\n        # self.content = load picture into memory\n\n    def __str__(self,):\n        return \"<BrowserImage(%s)>\" % self.location\n\nicon = Link(\"www.pythonunlocked.com\",\n            \"python unlocked book\",\n            \"http://pythonunlocked.com/media/logo.png\")\nfooter_icon = Link(\"www.pythonunlocked.com/#bottom\",\n                   \"unlocked series python book\",\n                   \"http://pythonunlocked.com/media/logo.png\")\ntwitter_top_header_icon = Link(\"www.twitter.com/pythonunlocked\",\n                               \"python unlocked twitter link\",\n                               \"http://pythonunlocked.com/media/logo.png\")\n\nprint(icon,)\nprint(footer_icon,)\nprint(twitter_top_header_icon,)\n```", "```py\n<Link (python unlocked book,<BrowserImage(http://pythonunlocked.com/media/logo.png)>)>\n<Link (unlocked series python book,<BrowserImage(http://pythonunlocked.com/media/logo.png)>)>\n<Link (python unlocked twitter link,<BrowserImage(http://pythonunlocked.com/media/logo.png)>)>\n```", "```py\nimport time\nimport threading\n\nclass Chef(threading.Thread):\n\n    def __init__(self,name):\n        self.q = []\n        self.doneq = []\n        self.do_orders = True\n        threading.Thread.__init__(self,)\n        self.name = name\n        self.start()\n\n    def makeorder(self, order):\n        print(\"%s Preparing Menu :\"%self.name )\n        for item in order.items:\n            print(\"cooking \",item)\n            time.sleep(1)\n        order.completed = True\n        self.doneq.append(order)\n\n    def run(self,):\n        while self.do_orders:\n            if len(self.q) > 0:\n                order = self.q.pop(0)\n                self.makeorder(order)\n                time.sleep(1)\n\n    def work_on_order(self,order):\n        self.q.append(order)\n\n    def cancel(self, order):\n        if order in self.q:\n            if order.completed == True:\n                print(\"cannot cancel, order completed\")\n                return\n            else:\n                index = self.q.index(order)\n                del self.q[index]\n                print(\" order canceled %s\"%str(order))\n                return\n        if order in self.doneq:\n            print(\"order completed, cannot be canceled\")\n            return\n        print(\"Order not given to me\")\n\nclass Check(object):\n\n    def execute(self,):\n        raise NotImplementedError()\n\n    def cancel(self,):\n        raise NotImplementedError()\n\nclass MenuOrder(Check):\n\n    def __init__(self,*items):\n        self.items = items\n        self.completed = False\n\n    def execute(self,chef):\n        self.chef = chef\n        chef.work_on_order(self)\n\n    def cancel(self,):\n        if self.chef.cancel(self):\n            print(\"order cancelled\")\n\n    def __str__(self,):\n        return ''.join(self.items)\n\nc = Chef(\"Arun\")\norder1 = MenuOrder(\"Omellette\", \"Dosa\", \"Idli\")\norder2 = MenuOrder(\"Mohito\", \"Pizza\")\norder3 = MenuOrder(\"Rajma\", )\norder1.execute(c)\norder2.execute(c)\norder3.execute(c)\n\ntime.sleep(1)\norder3.cancel()\ntime.sleep(9)\nc.do_orders = False\nc.join()\n```", "```py\nArun Preparing Menu :\ncooking  Omellette\n order canceled Rajma\ncooking  Dosa\ncooking  Idli\nArun Preparing Menu :\ncooking  Mohito\ncooking  Pizza\n```", "```py\nimport os\nimport abc\nimport six\n\nclass Animal(six.with_metaclass(abc.ABCMeta, object)):\n    \"\"\" clients only need to know this interface for animals\"\"\"\n    @abc.abstractmethod\n    def sound(self, ):\n        pass\n\nclass AnimalFactory(six.with_metaclass(abc.ABCMeta, object)):\n    \"\"\"clients only need to know this interface for creating animals\"\"\"\n    @abc.abstractmethod\n    def create_animal(self,name):\n        pass\n\nclass Dog(Animal):\n    def __init__(self, name):\n        self.name = name\n\n    def sound(self, ):\n        print(\"bark bark\")\n\nclass DogFactory(AnimalFactory):\n    def create_animal(self,name):\n        return Dog(name)\n\nclass Cat(Animal):\n    def __init__(self, name):\n        self.name = name\n    def sound(self, ):\n        print(\"meow meow\")\n\nclass CatFactory(AnimalFactory):\n    def create_animal(self,name):\n        return Cat(name)\n\nclass Animals(object):\n    def __init__(self,factory):\n        self.factory = factory\n\n    def create_animal(self, name):\n        return self.factory.create_animal(name)\n\nif __name__ == '__main__':\n    atype = input(\"what animal (cat/dog) ?\").lower()\n    if atype == 'cat':\n        animals = Animals(CatFactory())\n    elif atype == 'dog':\n        animals = Animals(DogFactory())\n    a = animals.create_animal('bulli')\n    a.sound()\n```", "```py\n1st run:\n\nwhat animal (cat/dog) ?dog\nbark bark\n\n2nd run:\nwhat animal (cat/dog) ?cat\nmeow meow\n```", "```py\nclass ConvertError(Exception):\n\n    \"\"\"Error raised on errors on conversion\"\"\"\n    pass\n\nclass Convertor(object):\n\n    def __init__(self,):\n        \"\"\"create registry for storing method mapping \"\"\"\n        self.__registry = {}\n\n    def to_object(self, data_dict):\n        \"\"\"convert to python object based on type of dictionary\"\"\"\n        dtype = data_dict.get('type', None)\n        if not dtype:\n            raise ConvertError(\"cannot create object, type not defined\")\n        elif dtype not in self.__registry:\n            raise ConvertError(\"cannot convert type not registered\")\n        else:\n            convertor = self.__registry[dtype]\n            return convertor.to_python(data_dict['data'])\n\n    def register(self, convertor):\n        iconvertor = convertor()\n        self.__registry[iconvertor.dtype] = iconvertor\n\nconvertor = Convertor()\n\nclass Person():\n\n    \"\"\" a class in application \"\"\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self,):\n        return \"<Person (%s, %s)>\" % (self.name, self.age)\n\n@convertor.register\nclass PersonConvertor(object):\n\n    def __init__(self,):\n        self.dtype = 'person'\n\n    def to_python(self, data):\n        # not checking for errors in dictionary to instance creation\n        p = Person(data['name'], data['age'])\n        return p\n\nprint(convertor.to_object(\n    {'type': 'person', 'data': {'name': 'arun', 'age': 12}}))\n```", "```py\n<Person (arun, 12)>\n```", "```py\ndef outputparser(loglines):\n    state = 'header'\n    program,end_time,send_failure= None,None,False\n    for line in loglines:\n        if state == 'header':\n            program = line.split(',')[0]\n            state = 'body'\n        elif state == 'body':\n            if 'send_failure' in line:\n                send_failure = True\n            if '======' in line:\n                state = 'footer'\n        elif state == 'footer':\n            end_time = line.split(',')[0]\n    return program, end_time, send_failure\n\nprint(outputparser(['sampleapp,only a sampleapp',\n              'logline1  sadfsfdf',\n              'logline2 send_failure',\n              '=====================',\n              '30th Jul 2016,END']))\n```", "```py\n ('sampleapp', '30th Jul 2016', True)\n```"]