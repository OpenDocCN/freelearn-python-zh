["```py\n>>> import Tkinter, ttk, os, time, threading, wave, pickle, tkFileDialog, tkMessageBox\n\n```", "```py\n>>> import pymedia\n\n```", "```py\nfrom Tkinter import *\nclass DrumMachine():\n  def app(self):\n    self.root = Tk()\n    # all other code are called from here\n    self.root.mainloop()\n\nif __name__ == '__main__':\n  dm = DrumMachine()\n  dm.app()\n```", "```py\n    def create_top_bar(self):\n      top_bar_frame = Frame(self.root)\n      top_bar_frame.config(height=25)\n      top_bar_frame.grid(row=0, columnspan=12, rowspan=10, padx=5, pady=5)\n      Label(top_bar_frame, text='Units:').grid(row=0, column=4)\n      self.units = IntVar()\n      self.units.set(4)\n      self.bpu_widget = Spinbox(top_bar_frame, from_=1, to=10, width=5, textvariable=self.units)\n      self.bpu_widget.grid(row=0, column=5)\n      Label(top_bar_frame, text='BPUs:').grid(row=0, column=6)\n      self.bpu = IntVar()\n      self.bpu.set(4)\n      self.units_widget = Spinbox(top_bar_frame, from_=1, to=8, width=5, textvariable=self.bpu)\n      self.units_widget.grid(row=0, column=7)\n    ```", "```py\n    MAX_DRUM_NUM = 5\n    def create_left_pad(self):\n      '''creating actual pattern editor pad'''\n      left_frame = Frame(self.root)\n      left_frame.grid(row=10, column=0, columnspan=6, sticky=W+E+N+S)\n      tbicon = PhotoImage(file='images/openfile.gif')\n      for i in range(0, MAX_DRUM_NUM):\n        button = Button(left_frame, image=tbicon)\n        button.image = tbicon\n        button.grid(row=i, column=0, padx=5, pady=2)\n        self.drum_entry = Entry(left_frame)\n        self.drum_entry.grid(row=i, column=4, padx=7, pady=2)\n    ```", "```py\n    def create_right_pad(self):\n      right_frame = Frame(self.root)\n      right_frame.grid(row=10, column=6,sticky=W+E+N+S, padx=15, pady=2)\n      self.button = [[0 for x in range(4)] for x in range(MAX_DRUM_NUM)]\n      for i in range(MAX_DRUM_NUM):\n        for j in range(4):\n          self.button[i][j] = Button(right_frame, bg='grey55')\n          self.button[i][j].grid(row=i, column=j)\n    ```", "```py\n    def create_play_bar(self):\n      playbar_frame = Frame(self.root, height=15)\n      ln = MAX_DRUM_NUM+10\n      playbar_frame.grid(row=ln, columnspan=13, sticky=W+E, padx=15,pa dy=10)\n      button = Button( playbar_frame, text ='Play')\n      button.grid(row= ln, column=1, padx=1)\n      button = Button( playbar_frame, text ='Stop')='Stop')\n      button.grid(row= ln, column=3, padx=1)\n      loop = BooleanVar()\n      loopbutton = Checkbutton(playbar_frame, text='Loop',variable=loop)\n      loopbutton.grid(row=ln, column=16, padx=1)\n    ```", "```py\n    def app(self):\n      self.root = Tk()\n      self.root.title('Drum Beast')\n      self.create_top_bar()\n      self.create_left_pad()\n      self.create_right_pad()\n      self.create_play_bar()\n      self.root.mainloop()\n    ```", "```py\n    self.units_widget = Spinbox(topbar_frame, from_=1, to=8, width=5, textvariable=self.units, command= self.create_right_pad)\n    self.bpu_widget = Spinbox(topbar_frame, from_=1, to=10, width=5, textvariable=self.bpu, command= self.create_right_pad)\n    ```", "```py\n    def create_right_pad(self):\n      bpu = self.bpu.get()\n      units = self.units.get()\n      c = bpu * units\n      right_frame = Frame(self.root)\n      right_frame.grid(row=10, column=6,sticky=W+E+N+S, padx=15, pady=2)\n      self.button = [[0 for x in range(c)] for x inrange(MAX_DRUM_NUM)]\n      for i in range(MAX_DRUM_NUM):\n        for j in range(c):\n          color = 'grey55' if (j/bpu)%2 else 'khaki'\n          self.button[i][j] = Button(right_frame,  bg=color, width=1, command=self.button_clicked(i,j,bpu))\n          self.button[i][j].grid(row=i, column=j)\n    ```", "```py\n    self.button[i][j] = (Button(right_frame, bg='grey55', width=1, command=self.Button_clicked(i,j,bpu)))\n    ```", "```py\n    def button_clicked(self,i,j,bpu):\n      def callback():                 \n        btn = self.button[i][j]\n        color = 'grey55' if (j/bpu)%2 else 'khaki'\n        new_color = 'green' if btn.cget('bg') != 'green' else color\n        btn.config(bg=new_color)\n      return callback\n    ```", "```py\n    import tkFileDialog\n    import tkMessageBox\n    import os\n    ```", "```py\n    def __init__(self):\n      self.widget_drum_name = []\n      self.widget_drum_file_name = [0]*MAX_DRUM_NUM\n      self.current_drum_no = 0\n    ```", "```py\n    self.widget_drum_name.append(self.drum_entry)\n    ```", "```py\n    button = Button(left_frame, image=tbicon, command=self.drum_load(i))\n    ```", "```py\n    def drum_load(self, drum_no):\n      def callback(): \n        self.current_drum_no = drum_no\n        try:\n          file_name = tkFileDialog.askopenfilename(defaultextension=\".wav\", filetypes=[(\"Wave Files\",\"*.wav\"),(\"OGG Files\",\"*.ogg\")])Files\",\"*.ogg\")])\n          if not file_name: return\n          try:\n            delself.widget_drum_file_name[drum_no]\n          except: pass\n          self.widget_drum_file_name.insert(drum_no, file_name)\n          drum_name = os.path.basename(file_name)\n          self.widget_drum_name[drum_no].delete(0, END)\n          self.widget_drum_name[drum_no].insert(0, drum_name)\n        except:\n          tkMessageBox.showerror('Invalid', \"Error loading drum samples\")\n        return callback\n    ```", "```py\nimport time, wave, pymedia.audio.sound as sound \nf= wave.open( 'YOUR FILE NAME', 'rb' )\nsampleRate= f.getframerate()\nchannels= f.getnchannels() \nformat= sound.AFMT_S16_LE\nsnd= sound.Output( sampleRate, channels, format )\ns= f.readframes( 300000 )\nsnd.play( s )\n```", "```py\n    import time\n    import wave\n    import pymedia.audio.sound as sound\n    ```", "```py\n    def play_sound(self, sound_filename):\n      try:\n        self.s = wave.open(sound_filename, 'rb')\n        sample_rate = self.s.getframerate()\n        channels = self.s.getnchannels()\n        frmt = sound.AFMT_S16_LE\n              self.snd= sound.Output(sample_rate, channels, frmt)\n              s = self.s.readframes(300000)\n        self.snd.play(s)\n      except:\n        pass\n    ```", "```py\n    def play(self):\n      for i in range(len(self.button[0])):\n        for item in self.button:\n          try:\n            if item[i].cget('bg') == 'green':\n            if not self.widget_drum_file_name [self.button.index(item)]:continue\n            sound_filename = self.widget_drum_file_name [self.button.index(item)]\n             self.play_sound(sound_filename)\n          except: continue\n          time.sleep(3/4.0)\n    ```", "```py\nfrom Tkinter import *\nroot = Tk()\nwidget = Button(root, text=\"#\", bg='green')\nwidget.pack()\nprint widget.config()\nprint widget.config('bg')\nroot.mainloop()\n```", "```py\n('background', 'background', 'Background', <border object at 022A1AC8>, 'green')\n```", "```py\n    import threading\n    ```", "```py\n    def play_in_thread(self):\n      self.thread = threading.Thread(None, self.play, None, (), {})\n      self.thread.start()\n    ```", "```py\n    button=Button(playbar_frame, text ='Play', command= self.play_in_thread)\n    ```", "```py\n    button=Button(playbar_frame, text='Stop', command= self.stop_play)\n    ```", "```py\n    def stop_play(self):\n      self.keep_playing = False\n    ```", "```py\n    self.start_button.config(state='disabled')\n    ```", "```py\n    self.start_button.config(state='normal')\n    ```", "```py\n    loopbutton = Checkbutton(playbar_frame, text='Loop', variable=loop, command=lambda: self.LoopPlay(loop.get())) )\n    ```", "```py\n    def loop_play(self, xval):\n      self.loop = xval\n    ```", "```py\n    Label(top_bar_frame, text='Pattern Number:').grid(row=0, column=1)\n    self.patt = IntVar()\n    self.patt.set(0)\n    self.prevpatvalue = 0 # to trace last click\n    Spinbox(top_bar_frame, from_=0, to=9, width=5, textvariable=self.patt, command=self.record_pattern).grid(row=0, column=2)\n    self.pat_name = Entry(top_bar_frame)\n    self.pat_name.grid(row=0, column=3, padx=7,pady=2)\n    self.pat_name.insert(0, 'Pattern %s'%self.patt.get())\n    self.pat_name.config(state='readonly')\n    ```", "```py\n    self.pattern_list = [None]*10\n    ```", "```py\n    def record_pattern(self):\n      pattern_num, bpu, units = self.patt.get(),self.bpu.get(), self.units.get()\n      self.pat_name.config(state='normal')\n      self.pat_name.delete(0, END)\n      self.pat_name.insert(0, 'Pattern %s'%pattern_num)\n      self.pat_name.config(state='readonly')\n      prevpval = self.prevpatvalue\n      self.prevpatvalue = pattern_num\n      c = bpu*units\n      self.buttonpickleformat =[[0] * c for x in range MAX_DRUM_NUM)]\n      for i in range(MAX_DRUM_NUM):\n        for j in range(c):\n          if self.button[i][j].config('bg')[-1] == 'green':\n            self.buttonpickleformat[i][j] = 'active'\n            self.pattern_list[prevpval] = {'df': self.widget_drum_file_name, 'bl': self.buttonpickleformat, 'bpu':bpu, 'units':units}\n      self.reconstruct_pattern(pattern_num, bpu, units)\n    ```", "```py\n        def reconstruct_pattern(self,pattern_num, bpu, units):\n            self.widget_drum_file_name = [0]*MAX_DRUM_NUM\n            try:\n                self.df = self.pattern_list[pattern_num]['df']\n                for i in range(len(self.df)):\n                        file_name = self.df[i]\n                        if file_name == 0:\n                            self.widget_drum_name[i].delete(0, END)\n                            continue\n                        self.widget_drum_file_name.insert(i, file_name)\n                        drum_name = os.path.basename(file_name)\n                        self.widget_drum_name[i].delete(0, END)\n                        self.widget_drum_name[i].insert(0, drum_name)\n            except:            \n                    for i in range(MAX_DRUM_NUM):\n                        try: self.df\n                        except:self.widget_drum_name[i].delete(0, END)\n            try:\n                bpu = self.pattern_list[pattern_num]['bpu']\n                units = self.pattern_list[pattern_num]['units']\n            except:\n                return\n            self.bpu_widget.delete(0, END)\n            self.bpu_widget.insert(0, bpu)\n            self.units_widget.delete(0, END)\n            self.units_widget.insert(0, units)\n            self.create_right_pad()\n            c = bpu * units\n            self.create_right_pad()\n            try:\n                for i in range(MAX_DRUM_NUM):\n                    for j in range(c):\n                        if self.pattern_list[pattern_num]['bl'][i][j] == 'active':\n                           self.button[i][j].config(bg='green')\n            except:return\n    ```", "```py\nimport pickle\nparty_menu= ['Bread', 'Salad', 'Bordelaise','Wine', 'Truffles']\npickle.dump(party_menu, open( \"mymenu.p\", \"wb\" ) )\n```", "```py\nimport pickle\nmenu= pickle.load( open( \"mymenu.p\", \"rb\" ) )\nprint menu # ['Bread', 'Salad', 'Bordelaise', 'Wine', 'Truffles']\n```", "```py\n    def create_top_menu(self):\n      self.menubar = Menu(self.root)\n      self.filemenu = Menu(self.menubar, tearoff=0 ) \n      self.filemenu.add_command(label=\"Load Project\",command=self.load_project )\n      self.filemenu.add_command(label=\"Save Project\",command=self.save_project)\n      self.filemenu.add_separator()\n      self.filemenu.add_command(label=\"Exit\",command=self.exit_app) \n      self.menubar.add_cascade(label=\"File\",menu=self.filemenu)\n      self.aboutmenu = Menu(self.menubar, tearoff=0 ) \n      self.aboutmenu.add_command(label=\"About\",command=self.about)\n      self.menubar.add_cascade(label=\"About\",menu=self.aboutmenu)\n      self.root.config(menu=self.menubar)   \n    ```", "```py\n    import pickle\n    ```", "```py\n    def save_project(self):\n      self.record_pattern() #make sure last pattern is recorded\n      file_name = tkFileDialog.asksaveasfilename(filetypes=[('Drum Beat File','*.bt')] , title=\"Save project as...\")\n      pickle.dump(self.pattern_list,open( file_name, \"wb\" ) \"wb\" ) )\n      self.root.title(os.path.basename(filenamefile_name) + \" - DrumBeast\")\n    ```", "```py\n    def load_project(self):\n      file_name = tkFileDialog.askopenfilename(filetypes=[('Drum Beat File','*.bt')], title='Load Project') \n      if file_name == '':return\n      self.root.title(os.path.basename(file_name) + \" - DrumBeast\")\n      fh = open(file_name,\"rb\") # open the file in reading mode\n      try:\n        while True: # load from the file until EOF is reached\n          self.pattern_list = pickle.load(fh)\n      exceptEOFError:\n        pass\n      fh.close()\n      try:\n        self.Reconstruct_pattern(0,pattern_listself.pattern_list[0]['bpu'],pattern_listself.pattern_list[0]['units'])\n      except:\n        tkMessageBox.showerror(\"Error\",\"An unexpected erroroccurred trying to reconstruct patterns\")\n    ```", "```py\n    def about(self):\n      tkMessageBox.showinfo(\"About\", \"About Info\")\n\n    def exit_app(self):\n      if tkMessageBox.askokcancel(\"Quit\", \"Really Quit?\"):\n        self.root.destroy()\n    ```", "```py\n    self.root.protocol('WM_DELETE_WINDOW', self.exit_app)\n    ```", "```py\nimport ttk\n```", "```py\nttk.Button(root, text='ttk Button').grid(row=1, column=1)\nttk.Checkbutton(root, text='tkCheckButton').grid(row=2, column=1)\n```", "```py\nfrom Tkinter import *\nfrom ttk import *\n```", "```py\nimport ttk\n```", "```py\n>>> b = ttk.Button()\n>>> b.winfo_class()\n\n```", "```py\nx = ttk.Style()\n```", "```py\nx.configure('mystyle.Defaultstyle', **styling options)\n\n```", "```py\nttk.Widget(root, style='mystyle.Defaultstyle')\n\n```", "```py\n>>> x = ttk.Style()\n>>>x.theme_names()\n('winnative', 'clam', 'alt', 'default', 'classic', 'xpnative')\n\n```", "```py\n>>>x.theme_use()\n'xpnative'\n\n```", "```py\nx.theme_use('yournewthemename')\n\n```", "```py\nfrom Tkinter import *\nimport ttk\nroot= Tk()\nx = ttk.Style()\nx.configure('.', font='Arial 14', foreground='brown', background='yellow')\nx.configure('danger.TButton', font='Times 12', foreground='red', padding=1)\nttk.Label(root, text='global style').pack()\nttk.Button(root, text='custom style', style='danger.TButton').pack()\n# Different  styling for different widget states\nx.map(\"s.TButton\", foreground=[('pressed', 'red'), ('active', 'blue')])\nttk.Button(text=\"state style\", style=\"s.TButton\").pack()\n# Overriding current theme styles \ncurr_theme = x.theme_use()\nx.theme_settings(curr_theme, { \"TEntry\": { \"configure\":  {\"padding\": 2}, \"map\": {\"foreground\": [(\"focus\", \"red\")]}  }})\nttk.Entry().pack()\nroot.mainloop()\n```", "```py\n    x.theme_settings('themename', ***options)\n    ```", "```py\n    import ttk\n    ```", "```py\n    button = ttk.Button()\n    loopbutton = ttk.Checkbutton(**options)\n    ```", "```py\n    photo = PhotoImage(file='images/sig.gif')\n    label = Label(playbar_frame, image=photo)\n    label.image = photo\n    label.grid(row=ln, column=35, padx=1, sticky=E)\n    ```", "```py\n    if os.path.isfile('images/beast.ico'):self.root.iconbitmap('images/beast.ico')\n    ```"]