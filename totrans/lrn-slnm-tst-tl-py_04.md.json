["```py\n    from selenium import webdriver\n    import unittest\n\n    class RegisterNewUser(unittest.TestCase):\n        def setUp(self):\n            self.driver = webdriver.Firefox\n            self.driver.implicitly_wait(30)\n            self.driver.maximize_window()\n\n            # navigate to the application home page\n            self.driver.get(\"http://demo.magentocommerce.com/\")\n    ```", "```py\n        def test_register_new_user(self):\n            driver = self.driver\n\n            # click on Log In link to open Login page\n            driver.find_element_by_link_text(\"Log In\").click()\n    ```", "```py\n# get the Create Account button\n        create_account_button = driver.find_element_by_xpath(\"//button[@title='Create an Account']\")\n        # check Create Account button is displayed and enabled\n        self.assertTrue(create_account_button.is_displayed() and\n                        create_account_button.is_enabled())\n```", "```py\n    # click on Create Account button. This will display # new account\n    create_account_button.click()\n\n    # check title\n    self.assertEquals(\"Create New Customer Account - Magento Commerce Demo Store\", driver.title)\n```", "```py\n    # get all the fields from Create an Account form\n    first_name = driver.find_element_by_id(\"firstname\")\n    last_name = driver.find_element_by_id(\"lastname\")\n    email_address = driver.find_element_by_id(\"email_address\")\n    news_letter_subscription = driver.find_element_by_id(\"is_subscribed\")\n    password = driver.find_element_by_id(\"password\")\n    confirm_password = driver.find_element_by_id(\"confirmation\")\n    submit_button = driver.find_element_by_xpath(\"//button[@title='Submit']\")\n```", "```py\n<input type=\"text\" id=\"firstname\" name=\"firstname\" value=\"\" title=\"First Name\" maxlength=\"255\" class=\"input-text required-entry\">\n```", "```py\n            # check maxlength of first name and last name textbox \n            self.assertEqual(\"255\", first_name.get_attribute(\"maxlength\"))\n            self.assertEqual(\"255\", last_name.get_attribute(\"maxlength\"))\n    ```", "```py\n    # check all fields are enabled\n            self.assertTrue(first_name.is_enabled() and last_name.is_enabled() \n              and email_address.is_enabled() and news_letter_subscription.is_enabled() \n              and password.is_enabled() and confirm_password.is_enabled() \n              and submit_button.is_enabled())\n    ```", "```py\n# check Sign Up for Newsletter is unchecked\n        self.assertFalse(news_letter_subscription.is_selected())\n```", "```py\n            # fill out all the fields\n            first_name.send_keys(\"Test\")\n            last_name.send_keys(\"User1\")\n            news_letter_subscription.click()\n            email_address.send_keys(\"TestUser_150214_2200@example.com\")\n            password.send_keys(\"tester\")\n            confirm_password.send_keys(\"tester\")\n    ```", "```py\n            # check new user is registered\n            self.assertEqual(\"Hello, Test User1!\", driver.find_element_by_css_selector(\"p.hello > strong\").text)\n            self.assertTrue(driver.find_element_by_link_text(\"Log Out\").is_displayed())\n    ```", "```py\n    from selenium import webdriver\n    from time import gmtime, strftime\n    import unittest\n\n    class RegisterNewUser(unittest.TestCase):\n        def setUp(self):\n            self.driver = webdriver.Firefox()\n            self.driver.implicitly_wait(30)\n            self.driver.maximize_window()\n\n            # navigate to the application home page\n            self.driver.get(\"http://demo.magentocommerce.com/\")\n\n        def test_register_new_user(self):\n            driver = self.driver\n\n            # click on Log In link to open Login page\n            driver.find_element_by_link_text(\"ACCOUNT\").click()\n            driver.find_element_by_link_text(\"My Account\").click()\n\n            # get the Create Account button\n            create_account_button = \\\n                driver.find_element_by_link_text(\"CREATE AN ACCOUNT\")\n\n            # check Create Account button is displayed # and enabled\n            self.assertTrue(create_account_button.is_displayed() and create_account_button.is_enabled())\n\n            # click on Create Account button. This will # display new account\n            create_account_button.click()\n\n            # check title\n            self.assertEquals(\"Create New Customer Account\", driver.title)\n\n            # get all the fields from Create an Account form\n            first_name = driver.find_element_by_id(\"firstname\")\n            last_name = driver.find_element_by_id(\"lastname\")\n            email_address = driver.find_element_by_id(\"email_address\")\n            password = driver.find_element_by_id(\"password\")\n            confirm_password = driver.find_element_by_id(\"confirmation\")\n            news_letter_subscription = driver.find_element_by_id(\"is_subscribed\")\n            submit_button = driver.\\\n                find_element_by_xpath(\"//button[@title='Register']\")\n\n            # check maxlength of first name and # last name textbox\n            self.assertEqual(\"255\", first_name.get_attribute(\"maxlength\"))\n            self.assertEqual(\"255\", last_name.get_attribute(\"maxlength\"))\n\n            # check all fields are enabled\n            self.assertTrue(first_name.is_enabled() and last_name.is_enabled() and email_address.is_enabled() and news_letter_subscription.is_enabled() and password.is_enabled() and confirm_password.is_enabled() and submit_button.is_enabled())\n\n            # check Sign Up for Newsletter is unchecked\n            self.assertFalse(news_letter_subscription.is_selected())\n\n            user_name = \"user_\" + strftime(\"%Y%m%d%H%M%S\", gmtime())\n            # fill out all the fields\n            first_name.send_keys(\"Test\")\n            last_name.send_keys(user_name)\n            news_letter_subscription.click()\n            email_address.send_keys(user_name + \"@example.com\")\n            password.send_keys(\"tester\")\n            confirm_password.send_keys(\"tester\")\n\n            # click Submit button to submit the form\n            submit_button.click()\n\n            # check new user is registered\n            self.assertEqual(\"Hello, Test \" + user_name + \"!\", driver.find_element_by_css_selector(\"p.hello > strong\").text)\n            driver.find_element_by_link_text(\"ACCOUNT\").click()\n            self.assertTrue(driver.find_element_by_link_text(\"Log Out\").is_displayed())\n\n        def tearDown(self):\n            self.driver.quit()\n\n    if __name__ == \"__main__\":\n        unittest.main(verbosity=2)\n    ```", "```py\n<select id=\"select-language\" title=\"Your Language\" onchange=\"window.location.href=this.value\">\n  <option value=\"http://demo.magentocommerce.com/?___store=default&amp;___from_store=default\" selected=\"selected\">English</option>\n  <option value=\"http://demo.magentocommerce.com/?___store=french&amp;___from_store=default\">French</option>\n  <option value=\"http://demo.magentocommerce.com/?___store=german&amp;___from_store=default\">German</option>\n</select>\n```", "```py\n<option value=\"http://demo.magentocommerce.com/customer/account/create/?___store=french&amp;___from_store=default\">French</option>\n```", "```py\ndef test_language_options(self):\n    # list of expected values in Language dropdown\n    exp_options = [\"ENGLISH\", \"FRENCH\", \"GERMAN\"]\n\n    # empty list for capturing actual options displayed # in the dropdown\n    act_options = []\n\n    # get the Your language dropdown as instance of Select class\n    select_language = \\\n        Select(self.driver.find_element_by_id(\"select-language\"))\n\n    # check number of options in dropdown\n    self.assertEqual(2, len(select_language.options))\n\n    # get options in a list\n    for option in select_language.options:\n        act_options.append(option.text)\n\n    # check expected options list with actual options list\n    self.assertListEqual(exp_options, act_options)\n\n    # check default selected option is English\n    self.assertEqual(\"ENGLISH\", select_language.first_selected_option.text)\n\n    # select an option using select_by_visible text\n    select_language.select_by_visible_text(\"German\")\n\n    # check store is now German\n    self.assertTrue(\"store=german\" in self.driver.current_url)\n\n    # changing language will refresh the page,\n    # we need to get find language dropdown once again\n    select_language = \\\n       Select(self.driver.find_element_by_id(\"select-language\"))\n        select_language.select_by_index(0)\n```", "```py\n# select an option using select_by_visible text\nselect_language.select_by_visible_text(\"German\")\n\n# check store is now German\nself.assertTrue(\"store=german\" in self.driver.current_url)\n```", "```py\nfrom selenium import webdriver\nimport unittest\n\nclass CompareProducts(unittest.TestCase):\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n        self.driver.get(\"http://demo.magentocommerce.com/\")\n\n    def test_compare_products_removal_alert(self):\n        # get the search textbox\n        search_field = self.driver.find_element_by_name(\"q\")\n        search_field.clear()\n\n        # enter search keyword and submit\n        search_field.send_keys(\"phones\")\n        search_field.submit()\n\n        # click the Add to compare link\n        self.driver.\\\n            find_element_by_link_text(\"Add to Compare\").click()\n```", "```py\n    # click on Remove this item link, this will display # an alert to the user\n    self.driver.find_element_by_link_text(\"Clear All\").click()\n\n    # switch to the alert\n    alert = self.driver.switch_to_alert()\n\n    # get the text from alert\n    alert_text = alert.text\n\n    # check alert text\n    self.assertEqual(\"Are you sure you would like to remove all products from your comparison?\", alert_text)\n\n    # click on Ok button\n    alert.accept()\n\n    def tearDown(self):\n        self.driver.quit()\n\nif __name__ == \"__main__\":\n    unittest.main()\n```", "```py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions\n\nclass NavigationTest(unittest.TestCase):\n    def setUp(self):\n      # create a new Firefox session\n      self.driver = webdriver.Chrome()\n      self.driver.implicitly_wait(30)\n      self.driver.maximize_window()\n\n      # navigate to the application home page\n      self.driver.get(\"http://www.google.com\")\n\n    def testBrowserNavigation(self):\n      driver = self.driver\n      # get the search textbox\n      search_field = driver.find_element_by_name(\"q\")\n      search_field.clear()\n\n      # enter search keyword and submit\n      search_field.send_keys(\"selenium webdriver\")\n      search_field.submit()\n\n      se_wd_link = driver.find_element_by_link_text(\"Selenium WebDriver\")\n      se_wd_link.click()\n      self.assertEqual(\"Selenium WebDriver\", driver.title)\n\n      driver.back()\n      self.assertTrue(WebDriverWait(self.driver, 10)\n          .until(expected_conditions.title_is(\"selenium webdriver - Google Search\")))\n\n      driver.forward()\n      self.assertTrue(WebDriverWait(self.driver, 10)\n          .until(expected_conditions.title_is(\"Selenium WebDriver\")))\n\n      driver.refresh()\n      self.assertTrue(WebDriverWait(self.driver, 10)\n        .until(expected_conditions.title_is(\"Selenium WebDriver\")))\n\n    def tearDown(self):\n      # close the browser window\n      self.driver.quit()\n\nif __name__ == '__main__':\n    unittest.main()\n```"]