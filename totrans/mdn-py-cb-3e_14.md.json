["```py\n# file = \"../../data/ch14/data.csv\" \n\n# samples = 10 \n\n# randomize = 0 \n\n# ----- \n\noutcome,length,chain \n\n\"Success\",1,\"7\" \n\n\"Success\",2,\"10;10\"\n```", "```py\n    def main(argv: list[str] = sys.argv[1:]) -> None:\n    ```", "```py\n    import argparse \n\n    import contextlib \n\n    import logging \n\n    from pathlib import Path \n\n    import sys\n    ```", "```py\n    import markov_gen \n\n    import markov_summ \n    ```", "```py\n    def gen_and_summ(iterations: int, samples: int) -> None: \n\n        for i in range(iterations): \n\n            markov_gen.main( \n\n                [ \n\n                    \"--samples\", str(samples), \n\n                    \"--randomize\", str(i + 1), \n\n                    \"--output\", f\"data/ch14/markov_{i}.csv\", \n\n                ] \n\n            ) \n\n        markov_summ.main()\n    ```", "```py\n    def get_options(argv: list[str]) -> argparse.Namespace: \n\n        parser = argparse.ArgumentParser(description=\"Markov Chain Generator and Summary\") \n\n        parser.add_argument(\"-s\", \"--samples\", type=int, default=1_000) \n\n        parser.add_argument(\"-i\", \"--iterations\", type=int, default=10) \n\n        return parser.parse_args(argv)\n    ```", "```py\n    def main(argv: list[str] = sys.argv[1:]) -> None: \n\n        options = get_options(argv) \n\n        target = Path.cwd() / \"summary.md\" \n\n        with target.open(\"w\") as target_file: \n\n            with contextlib.redirect_stdout(target_file): \n\n                gen_and_summ(options.iterations, options.samples)\n    ```", "```py\n    if __name__ == \"__main__\": \n\n        logging.basicConfig(stream=sys.stderr, level=logging.INFO) \n\n        main()\n    ```", "```py\n    import argparse \n\n    class Command: \n\n        def __init__(self) -> None: \n\n            pass \n\n        def execute(self, options: argparse.Namespace) -> None: \n\n            pass \n    ```", "```py\n    from pathlib import Path \n\n    from typing import Any \n\n    import markov_gen \n\n    class Generate(Command): \n\n        def __init__(self) -> None: \n\n            super().__init__() \n\n            self.seed: Any | None = None \n\n            self.output: Path \n\n        def execute(self, options: argparse.Namespace) -> None: \n\n            self.output = Path(options.output) \n\n            with self.output.open(\"w\") as target: \n\n                markov_gen.write_samples(target, options) \n\n            print(f\"Created {str(self.output)}\")\n    ```", "```py\n    import contextlib \n\n    import markov_summ_2 \n\n    class Summarize(Command): \n\n        def execute(self, options: argparse.Namespace) -> None: \n\n            self.summary_path = Path(options.summary_file) \n\n            with self.summary_path.open(\"w\") as result_file: \n\n                output_paths = [Path(f) for f in options.output_files] \n\n                outcomes, lengths = markov_summ_2.process_files(output_paths) \n\n                with contextlib.redirect_stdout(result_file): \n\n                    markov_summ_2.write_report(outcomes, lengths)\n    ```", "```py\n    def main() -> None: \n\n        options_1 = argparse.Namespace(samples=1000, output=\"data/x.csv\") \n\n        command1 = Generate() \n\n        command1.execute(options_1) \n\n        options_2 = argparse.Namespace( \n\n            summary_file=\"data/report.md\", output_files=[\"data/x.csv\"] \n\n        ) \n\n        command2 = Summarize() \n\n        command2.execute(options_2)\n    ```", "```py\nclass CmdSequence(Command): \n\n    def __init__(self, *commands: type[Command]) -> None: \n\n        super().__init__() \n\n        self.commands = [command() for command in commands] \n\n    def execute(self, options: argparse.Namespace) -> None: \n\n        for command in self.commands: \n\n            command.execute(options)\n```", "```py\n>>> from argparse import Namespace \n\n>>> options = Namespace( \n\n...     samples=1_000, \n\n...     randomize=42, \n\n...     output=\"data/x.csv\", \n\n...     summary_file=\"data/y.md\", \n\n...     output_files=[\"data/x.csv\"] \n\n... ) \n\n>>> both_command = CmdSequence(Generate, Summarize) \n\n>>> both_command.execute(options) \n\nCreated data/x.csv\n```", "```py\nclass GenSumm(CmdSequence): \n\n    def __init__(self) -> None: \n\n        super().__init__(Generate, Summarize) \n\n    def execute(self, options: argparse.Namespace) -> None: \n\n        self.intermediate = Path(\"data\") / \"ch14_r02_temporary.toml\" \n\n        new_namespace = argparse.Namespace( \n\n            output=str(self.intermediate), \n\n            output_files=[str(self.intermediate)], \n\n            **vars(options), \n\n        ) \n\n        super().execute(new_namespace)\n```", "```py\n    markov generate -o detail_file.csv -s samples \n\n    markov summarize -o summary_file.md detail_file.csv ... \n\n    markov gensumm -g samples\n    ```", "```py\n    class Command: \n\n        @classmethod \n\n        def arguments( \n\n                cls, \n\n                sub_parser: argparse.ArgumentParser \n\n        ) -> None: \n\n            pass \n\n        def __init__(self) -> None: \n\n            pass \n\n        def execute(self, options: argparse.Namespace) -> None: \n\n            pass\n    ```", "```py\n    class Generate(Command): \n\n        @classmethod \n\n        def arguments( \n\n                cls, \n\n                generate_parser: argparse.ArgumentParser \n\n        ) -> None: \n\n            default_seed = os.environ.get(\"RANDOMSEED\", \"0\") \n\n            generate_parser.add_argument( \n\n                \"-s\", \"--samples\", type=int, default=1_000) \n\n            generate_parser.add_argument( \n\n                \"-o\", \"--output\", dest=\"output\") \n\n            generate_parser.add_argument( \n\n                \"-r\", \"--randomize\", default=default_seed) \n\n            generate_parser.set_defaults(command=cls)\n    ```", "```py\n    class Summarize(Command): \n\n        @classmethod \n\n        def arguments( \n\n                cls, \n\n                summarize_parser: argparse.ArgumentParser \n\n        ) -> None: \n\n            summarize_parser.add_argument( \n\n                \"-o\", \"--output\", dest=\"summary_file\") \n\n            summarize_parser.add_argument( \n\n                \"output_files\", nargs=\"*\", type=Path) \n\n            summarize_parser.set_defaults(command=cls)\n    ```", "```py\n    class GenSumm(Command): \n\n        @classmethod \n\n        def arguments( \n\n                cls, \n\n                gensumm_parser: argparse.ArgumentParser \n\n        ) -> None: \n\n            default_seed = os.environ.get(\"RANDOMSEED\", \"0\") \n\n            gensumm_parser.add_argument( \n\n                \"-s\", \"--samples\", type=int, default=1_000) \n\n            gensumm_parser.add_argument( \n\n                \"-o\", \"--output\", dest=\"summary_file.md\") \n\n            gensumm_parser.add_argument( \n\n                \"-r\", \"--randomize\", default=default_seed) \n\n            gensumm_parser.set_defaults(command=cls)\n    ```", "```py\n    import argparse \n\n    def get_options( \n\n            argv: list[str] \n\n    ) -> argparse.Namespace: \n\n        parser = argparse.ArgumentParser(prog=\"Markov\") \n\n        subparsers = parser.add_subparsers() \n\n        generate_parser = subparsers.add_parser(\"generate\") \n\n        Generate.arguments(generate_parser) \n\n        summarize_parser = subparsers.add_parser(\"summarize\") \n\n        Summarize.arguments(summarize_parser) \n\n        gensumm_parser = subparsers.add_parser(\"gensumm\") \n\n        GenSumm.arguments(gensumm_parser)\n    ```", "```py\n        options = parser.parse_args(argv) \n\n        if \"command\" not in options: \n\n            parser.error(\"No command selected\") \n\n        return options\n    ```", "```py\nfrom typing import cast \n\ndef main(argv: list[str] = sys.argv[1:]) -> None: \n\n    options = get_options(argv) \n\n    command = cast(type[Command], options.command)() \n\n    command.execute(options)\n```", "```py\n(cookbook3) % markov generate -s 100 -o x.csv\n```", "```py\nNamespace(command=<class ’__main__.Generate’>, output=’x.csv’, samples=100)\n```", "```py\ndef get_options_2(argv: list[str] = sys.argv[1:]) -> argparse.Namespace: \n\n    parser = argparse.ArgumentParser(prog=\"markov\") \n\n    subparsers = parser.add_subparsers() \n\n    sub_commands = [ \n\n        (\"generate\", Generate), \n\n        (\"summarize\", Summarize), \n\n        (\"gensumm\", GenSumm), \n\n    ] \n\n    for name, subc in sub_commands: \n\n        cmd_parser = subparsers.add_parser(name) \n\n        subc.arguments(cmd_parser) \n\n    # The parsing and validating remains the same...\n```", "```py\n#!/usr/bin/env python\n```", "```py\n% chmod +x your_application_file.py\n```", "```py\n(cookbook3) % src/ch14/markov_gen -o data/ch14_r04.csv -s 100 -r 42 \n\n# file = \"data/ch14_r04.csv\" \n\n# samples = 100 \n\n# randomize = 42\n```", "```py\n    import argparse \n\n    import subprocess \n\n    from pathlib import Path \n\n    import sys\n    ```", "```py\n     directory, n = Path(\"/tmp\"), 42 \n\n        filename = directory / f\"sample_{n}.csv\" \n\n        command = [ \n\n            \"markov_gen\", \n\n            \"--samples\", \"10\", \n\n            \"--output\", str(filename), \n\n        ] \n\n        subprocess.run(command, check=True)\n    ```", "```py\n     def make_files(directory: Path, files: int = 100) -> None: \n\n        for n in range(files): \n\n            filename = directory / f\"sample_{n}.csv\" \n\n            command = [ \n\n                \"markov_gen\", \n\n                \"--samples\", \"10\", \n\n                \"--output\", str(filename), \n\n            ] \n\n            subprocess.run(command, check=True)\n    ```", "```py\n    def get_options(argv: list[str]) -> argparse.Namespace: \n\n        parser = argparse.ArgumentParser() \n\n        parser.add_argument(\"directory\", type=Path) \n\n        parser.add_argument(\"samples\", type=int) \n\n        options = parser.parse_args(argv) \n\n        return options\n    ```", "```py\n    def main(argv: list[str] = sys.argv[1:]) -> None: \n\n        options = get_options(argv) \n\n        make_files(options.directory, options.samples)\n    ```", "```py\ndef make_files_clean(directory: Path, files: int = 100) -> None: \n\n    \"\"\"Create sample data files, with cleanup after a failure.\"\"\" \n\n    try: \n\n        make_files(directory, files) \n\n    except subprocess.CalledProcessError as ex: \n\n        # Remove any files. \n\n        for partial in directory.glob(\"sample_*.csv\"): \n\n            partial.unlink() \n\n        raise\n```", "```py\n(cookbook3) % RANDOMSEED=42 src/ch14/markov_gen --samples 5 --output t.csv \n\n# file = \"t.csv\" \n\n# samples = 5 \n\n# randomize = 42\n```", "```py\n    import argparse \n\n    from collections.abc import Iterable, Iterator \n\n    from pathlib import Path \n\n    import subprocess \n\n    import sys \n\n    from typing import Any\n    ```", "```py\n     directory, n = Path(\"/tmp\"), 42 \n\n        filename = directory / f\"sample_{n}.toml\" \n\n        temp_path = directory / \"stdout.txt\" \n\n        command = [ \n\n            \"src/ch14/markov_gen\", \n\n            \"--samples\", \"10\", \n\n            \"--output\", str(filename), \n\n        ] \n\n        with temp_path.open(\"w\") as temp_file: \n\n            process = subprocess.run( \n\n                command, \n\n                stdout=temp_file, check=True, text=True \n\n            ) \n\n        output_text = temp_path.read_text()\n    ```", "```py\n    def command_output( \n\n        temporary: Path, command: list[str] \n\n    ) -> str: \n\n        temp_path = temporary / \"stdout\" \n\n        with temp_path.open(\"w\") as temp_file: \n\n            subprocess.run( \n\n                command, \n\n                stdout=temp_file, check=True, text=True \n\n            ) \n\n        output_text = temp_path.read_text() \n\n        temp_path.unlink() \n\n        return output_text\n    ```", "```py\n    def command_iter(options: argparse.Namespace) -> Iterable[list[str]]: \n\n        for n in range(options.iterations): \n\n            filename = options.directory / f\"sample_{n}.csv\" \n\n            command = [ \n\n                \"src/ch14/markov_gen\", \n\n                \"--samples\", str(options.samples), \n\n                \"--output\", str(filename), \n\n                \"--randomize\", str(n+1), \n\n            ] \n\n            yield command\n    ```", "```py\n    def parse_output(result: str) -> dict[str, Any]: \n\n        matches = ( \n\n            re.match(r\"^#\\s*([^\\s=]+)\\s*=\\s*(.*?)\\s*$\", line) \n\n            for line in result.splitlines() \n\n        ) \n\n        match_groups = ( \n\n            match.groups() \n\n            for match in matches \n\n            if match \n\n        ) \n\n        summary = { \n\n            name: value \n\n            for name, value in match_groups \n\n        } \n\n        return summary\n    ```", "```py\n    def summary_iter(options: argparse.Namespace) -> Iterator[dict[str, Any]]: \n\n        commands = command_iter(options) \n\n        with tempfile.TemporaryDirectory() as tempdir: \n\n            results = ( \n\n                command_output(Path(tempdir), cmd) \n\n                for cmd in commands \n\n            ) \n\n            for text in results: \n\n                yield parse_output(text)\n    ```", "```py\n    def get_options(argv: list[str]) -> argparse.Namespace: \n\n        parser = argparse.ArgumentParser() \n\n        parser.add_argument(\"directory\", type=Path) \n\n        parser.add_argument(\"-s\", \"--samples\", type=int, default=1_000) \n\n        parser.add_argument(\"-i\", \"--iterations\", type=int, default=10) \n\n        options = parser.parse_args(argv) \n\n        return options\n    ```", "```py\n    def main(argv: list[str] = sys.argv[1:]) -> None: \n\n        options = get_options(argv) \n\n        parsed_results = list(summary_iter(options)) \n\n        print(f\"Built {len(parsed_results)} files\") \n\n        # print(parsed_results) \n\n        total = sum( \n\n            int(rslt[’samples’]) for rslt in parsed_results \n\n        ) \n\n        print(f\"Total {total} samples\")\n    ```", "```py\nimport csv \n\ndef main_2(argv: list[str] = sys.argv[1:]) -> None: \n\n    options = get_options(argv) \n\n    total_counter = 0 \n\n    wtr = csv.DictWriter(sys.stdout, [\"file\", \"samples\", \"randomize\"]) \n\n    wtr.writeheader() \n\n    for summary in summary_iter(options): \n\n        wtr.writerow(summary) \n\n        total_counter += int(summary[\"samples\"]) \n\n    wtr.writerow({\"file\": \"TOTAL\", \"samples\": total_counter})\n```"]