["```py\nsudo pip install PyPDF2\n\n```", "```py\n            import PyPDF2\n            from PyPDF2 import PdfFileReader\n            pdf = open(\"diveintopython.pdf\", 'rb')\n            readerObj = PdfFileReader(pdf) \n            print \"PDF Reader Object is:\", readerObj\n    ```", "```py\n            print \"Details of diveintopython book\"\n            print \"Number of pages:\", readerObj.getNumPages()\n            print \"Title:\", readerObj.getDocumentInfo().title\n            print \"Author:\", readerObj.getDocumentInfo().author\n    ```", "```py\n            print \"Reading Page 1\"\n            page = readerObj.getPage(1)\n            print page.extractText()\n    ```", "```py\n            print \"Book Outline\"\n            for heading in readerObj.getOutlines():\n                if type(heading) is not list:\n                    print dict(heading).get('/Title') \n\n    ```", "```py\n            from PyPDF2 import PdfFileReader, PdfFileWriter\n            infile = PdfFileReader(open('Exercise.pdf', 'rb'))\n            outfile = PdfFileWriter()\n    ```", "```py\n            outfile.addBlankPage(612, 792)\n            p = infile.getPage(0)\n            outfile.addPage(p)\n    ```", "```py\n            with open('myPdf.pdf', 'wb') as f: \n                 outfile.write(f)\n            f.close()\n    ```", "```py\n     pip install fpdf\n\n    ```", "```py\n            import fpdf\n            from fpdf import FPDF\n            pdf = FPDF(format='letter')\n    ```", "```py\n            pdf.add_page()\n            pdf.set_font(\"Arial\", size=12)\n    ```", "```py\n            pdf.cell(200, 10, txt=\"Welcome to Automate It!\", ln=1, \n            align=\"C\")\n            pdf.cell(200,10,'Created by Chetan',0,1,'C') \n            pdf.output(\"automateit.pdf\")\n    ```", "```py\n            from PyPDF2 import PdfFileReader, PdfFileMerger\n            import os \n            merger = PdfFileMerger()\n            files = [x for x in os.listdir('.') if\n            x.endswith('.pdf')]\n            for fname in sorted(files):\n                merger.append(PdfFileReader(open(\n                              os.path.join('.', fname), 'rb')))\n            merger.write(\"output.pdf\")\n    ```", "```py\n            from fpdf import FPDF\n            class PDF(FPDF):\n                def footer(self):\n                    self.set_y(-15)\n                    self.set_font('Arial', 'I', 8)\n                    self.cell(0, 10, 'Page %s' % self.page_no(), 0, 0, 'C')\n                def header(self):\n                    self.set_font('Arial', 'B', 15)\n                    self.cell(80)\n                    self.cell(30, 10, 'Automate It!', 1, 0, 'C')\n                    self.ln(20)\n            pdf = PDF(format='A5')\n            pdf.add_page()\n            pdf.set_font(\"Times\", size=12)\n            for i in range(1, 50):\n                pdf.cell(0, 10, \"This my new line. line number is:\n                         %s\" % i, ln=1, align='C')\n            pdf.output(\"header_footer.pdf\")\n    ```", "```py\n            infile = PdfFileReader('myPdf.pdf', 'rb')\n            output = PdfFileWriter()\n\n            for i in xrange(infile.getNumPages()):\n                p = infile.getPage(i)\n                if p.getContents():\n                    output.addPage(p)\n            with open('myPdf_wo_blank.pdf', 'wb') as f:\n                output.write(f)\n    ```", "```py\n            from PyPDF2 import PdfFileMerger, PdfFileReader\n            mergerObj = PdfFileMerger()\n            fp = open('myPdf.pdf', 'wb')\n            metadata = {u'/edited':u'ByPdfFileMerger',}\n            mergerObj.addMetadata(metadata)\n            mergerObj.write(fp)\n            fp.close()\n            pdf = open(\"myPdf.pdf\", 'rb')\n            readerObj = PdfFileReader(pdf)\n            print \"Document Info:\", readerObj.getDocumentInfo()\n            pdf.close()\n    ```", "```py\n            from PyPDF2 import PdfFileReader\n            fp = open('Exercise.pdf', 'rb')\n            readerObj = PdfFileReader(fp)\n            page = readerObj.getPage(0)\n            page.rotateCounterClockwise(90)\n            writer = PdfFileWriter()\n            writer.addPage(page)\n            fw = open('RotatedExercise.pdf', 'wb')\n            writer.write(fw)\n            fw.close()\n            fp.close()\n    ```", "```py\nfrom datetime import datetime\n\nemployee_data = [ \n     { 'id': 123, 'name': 'John Sally', 'payment': 10000,\n       'tax': 3000, 'total': 7000 },\n     { 'id': 245, 'name': 'Robert Langford', 'payment': 12000,\n       'tax': 4000, 'total': 8000 }, \n]\nfrom fpdf import FPDF, HTMLMixin\nclass PaySlip(FPDF, HTMLMixin):\n      def footer(self): \n          self.set_y(-15) \n          self.set_font('Arial', 'I', 8)\n          self.cell(0, 10, 'Page %s' % self.page_no(), 0, 0, 'C')\n      def header(self):\n          self.set_font('Arial', 'B', 15)\n          self.cell(80)\n          self.cell(30, 10, 'Google', 1, 0, 'C')\n          self.ln(20)\ndef generate_payslip(data):\n     month = datetime.now().strftime(\"%B\")\n     year = datetime.now().strftime(\"%Y\")\n     pdf = PaySlip(format='letter')\n     pdf.add_page()\n     pdf.set_font(\"Times\", size=12)\n     pdf.cell(200, 10, txt=\"Pay Slip for %s, %s\" % \n              (month, year),  ln=3, align=\"C\")\n     pdf.cell(50)\n     pdf.cell(100, 10, txt=\"Employeed Id: %s\" % data['id'],\n              ln=1, align='L')\n     pdf.cell(50)\n     pdf.cell(100, 10, txt=\"Employeed Name: %s\" % \n              data['name'], ln=3, align='L')\n     html = \"\"\"\n         <table border=\"0\" align=\"center\" width=\"50%\">\n         <thead><tr><th align=\"left\" width=\"50%\">\n          Pay Slip Details</th><th align=\"right\" width=\"50%\">\n          Amount in USD</th></tr></thead>\n         <tbody>\n             <tr><td>Payments</td><td align=\"right\">\"\"\" + \n                     str(data['payment']) + \"\"\"</td></tr> \n             <tr><td>Tax</td><td align=\"right\">\"\"\" + \n                     str(data['tax']) + \"\"\"</td></tr>\n             <tr><td>Total</td><td align=\"right\">\"\"\" + \n                     str(data['total']) + \"\"\"</td></tr>\n         </tbody>\n         </table>\n         \"\"\"\n     pdf.write_html(html)\n     pdf.output('payslip_%s.pdf' % data['id'])\nfor emp in employee_data:\n     generate_payslip(emp)\n```", "```py\nfrom PyPDF2 import PdfFileWriter, PdfFileReader\nfp = open('Exercise.pdf', 'rb')\nreaderObj = PdfFileReader(fp)\n\nwriter = PdfFileWriter()\n\nfor page in range(readerObj.numPages):\n     writer.addPage(readerObj.getPage(page))\nwriter.encrypt('P@$$w0rd')\n\nnewfp = open('EncryptExercise.pdf', 'wb')\nwriter.write(newfp)\nnewfp.close()\nfp.close()\n```", "```py\npip install python-docx\n\n```", "```py\n            import docx\n            doc = docx.Document('WExercise.docx')\n            print \"Document Object:\", doc\n    ```", "```py\n    import docx\n    doc = docx.Document('WExercise.docx')\n    print \"Document Object:\", doc\n    print \"Title of the document:\"\n    print doc.paragraphs[0].text\n\n    ```", "```py\n            print \"Attributes of the document\"\n            print \"Author:\", doc.core_properties.author\n            print \"Date Created:\", doc.core_properties.created\n            print \"Document Revision:\", doc.core_properties.revision\n    ```", "```py\n            table = doc.tables[0]\n\n            print \"Column 1:\"\n            for i in range(len(table.rows)):\n                print table.rows[i].cells[0].paragraphs[0].text\n\n            print \"Column 2:\"\n            for i in range(len(table.rows)):\n                print table.rows[i].cells[1].paragraphs[0].text\n\n            print \"Column 3:\"\n            for i in range(len(table.rows)):\n                print table.rows[i].cells[2].paragraphs[0].text\n    ```", "```py\n            from docx import Document\n            document = Document()\n            document.add_heading('Test Document from Docx', 0)\n            document.save('testDoc.docx')\n    ```", "```py\n            document = Document('testDoc.docx')\n            p = document.add_paragraph('A plain paragraph\n                                        having some ')\n            p.add_run('bold words').bold = True\n            p.add_run(' and italics.').italic = True\n            document.save('testDoc.docx')\n    ```", "```py\n            document = Document('testDoc.docx')\n            document.add_heading('Lets talk about Python \n                                  language', level=1)\n            document.add_paragraph('First lets see the Python\n                                    logo', style='ListBullet')\n            document.save('testDoc.docx')\n    ```", "```py\n            from docx.shared import Inches\n            document = Document('testDoc.docx')\n            document.add_picture('python.png', \n                                  width=Inches(1.25)) \n            document.save('testDoc.docx')\n    ```", "```py\n            document = Document('testDoc.docx')\n            table = document.add_table(rows=1, cols=3)\n            table.style = 'TableGrid'\n\n            data = {'id':1, 'items':'apple', 'price':50}\n\n            headings = table.rows[0].cells\n            headings[0].text = 'Id'\n            headings[1].text = 'Items'\n            headings[2].text = 'Price'\n\n            row = table.add_row().cells\n            row[0].text = str(data.get('id'))\n            row[1].text = data.get('items')\n            row[2].text = str(data.get('price')) \n            document.save('testDoc.docx')\n    ```", "```py\n            from docx import Document\n\n            employee_data = [\n                {'id': 123, 'name': 'John Sally', 'department':\n                 'Operations', 'isDue': True},\n                {'id': 245, 'name': 'Robert Langford',\n                'department': 'Software', 'isDue': False},\n            ]\n            agenda = {\n                \"Operations\": [\"SAP Overview\", \"Inventory Management\"],\n                \"Software\": [\"C/C++ Overview\", \"Computer Architecture\"],\n                \"Hardware\": [\"Computer Aided Tools\", \"Hardware Design\"] }\n            def generate_document(employee_data, agenda):\n                document = Document()\n                for emp in employee_data:\n                    if emp['isDue']:\n                        name = emp['name']\n                        document.add_heading('Your New Hire\n                                        Orientationn', level=1)\n                        document.add_paragraph('Dear %s,' % name)\n                        document.add_paragraph('Welcome to Google\n                          Inc. You have been selected for our new\n                          hire orientation.')\n                       document.add_paragraph('Based on your \n                          department you will go through \n                          below sessions:')\n                       department = emp['department']\n                       for session in agenda[department]:\n                           document.add_paragraph(\n                             session , style='ListBullet'\n                       )\n                       document.add_paragraph('Thanks,n HR Manager')\n                       document.save('orientation_%s.docx' % emp['id'])\n                       generate_document(employee_data, agenda)\n    ```"]