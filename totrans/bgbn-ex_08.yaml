- en: Chapter 8. Home Security Systems Using BeagleBone Black
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on building a real-time Internet-connected home
    security surveillance system using the BeagleBone board. Similar to previous chapters,
    we will use OpenCV and Python on BeagleBone with a camera connected to it. But
    to take the project to an advanced level, we will add a PIR sensor to the BeagleBone
    board and write code on it to interact with the physical world. We will get started
    with motion detection using PIR sensors, followed by sending e-mails from BeagleBone
    boards using Python. We will finish the chapter with a project, in which we will
    build a motion-detection security camera that will send e-mail alerts with images
    captured whenever motion is detected by the PIR sensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of this chapter are divided into the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PIR sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Motion detection using PIR sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending e-mails with attachments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced project – motion detection, image capture, and alert system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: A BeagleBone Black
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A microSD Card with the latest version of Debian flashed on it to boot the BeagleBone
    board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 5V DC, 2A power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Ethernet cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PIR sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PIR sensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **PIR** (short for **passive infrared**) sensor is an electronic sensor that
    measures **infrared** (**IR**) light radiating from objects present in its field
    of view. Mostly, these sensors are used in PIR-based motion detectors.
  prefs: []
  type: TYPE_NORMAL
- en: '![PIR sensors](img/4602_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How PIR sensors work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you look at the following diagram picture, a PIR sensor has two slots in
    it, and each slot is prepared with the help of special materials that are IR sensitive.
    The Fresnel lens helps the two slots in the sensor to widen the detecting area
    of the sensor as well as its distance, that is, the sensitivity of the sensor.
    Both slots detect the same amount of IR when there is no movement in front of
    the sensor or the detection area; we call this the idle state of the sensor, during
    which the slots detect the ambient amount of IR radiated from the room or outdoors.
    The sensor calibrates itself and waits for the movement of a warm body.
  prefs: []
  type: TYPE_NORMAL
- en: '![How PIR sensors work](img/4602_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When half of the PIR sensor intercepts any warm body, such as a human or animal,
    it causes a positive differential change between the two halves of the PIR sensor.
    Similarly, a negative differential change is generated when the warm body leaves
    the sensing area, which is nothing but the reverse of the generation of a positive
    differential change. So, basically, the output we obtain is in the form of rising
    and falling pulses from the sensor output pin, using which we infer whether there
    was any movement in front of the PIR.
  prefs: []
  type: TYPE_NORMAL
- en: You might be wondering why there is a difference between the preceding diagram
    and the actual image of it, shown in the first image. Actually, the first image
    is to make you understand how the PIR sensor works. It shows the sensor available
    in market, which we will be using. In order to make the sensor work with a wide
    detection area, its lens is in the shape of a hemisphere, if you take a look at
    the following image, you can see that slots have been made at various angles on
    the lens to have a wide area of detection and for mounting at various places,
    such as ceilings and walls, to detect the motion of a moving body.
  prefs: []
  type: TYPE_NORMAL
- en: '![How PIR sensors work](img/4602_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Most of these hobby-grade PIR sensors available in the market have a detection
    area 90 degrees wide, but some have one up to 110 degrees and 5 to 6 meters length.
    You can chose and buy whichever one you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: '![How PIR sensors work](img/4602_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Motion detection using PIR sensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how a PIR sensors works, let's go ahead and hook it up with
    our BeagleBone board to detect motion.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, take three berg wires and connect the PIR sensor to the BeagleBone
    board, as per the following circuit diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Motion detection using PIR sensors](img/4602_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding circuit diagram, connect the PIR sensor's Vcc to the
    5V pin on the BeagleBone board, the output pin of PIR to GPIO60 on the BeagleBone
    board, and the ground pins on both with each other.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will turn on the BeagleBone board and log in to the Linux shell to
    start coding it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python program using `sudo nano TestPIR.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Motion detection using PIR sensors](img/4602_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Type in the code shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Motion detection using PIR sensors](img/4602_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have typed in the code, you can go ahead and save it using *Ctrl* +
    *X*.
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at the comments in the code to get an idea of how it works. We are
    setting up `GPIO_60` as `INPUT PIN`, reading the RISING edge from the output coming
    from the PIR sensor, and printing out text saying **Movement Detected** every
    time we read a RISING edge from the sensor on GPIO pin `60`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the command, you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Motion detection using PIR sensors](img/4602_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can place your hand or make any movement in front of the sensor, as shown
    in the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Motion detection using PIR sensors](img/4602_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is an option to set the sensitivity, that is, the range of the detection
    area, by varying the potentiometer on the sensor. Have a look at the following
    figure to get a better idea. You also have another potentiometer to vary the trigger
    time, which is nothing but the time period until which the pulse will be high
    and get back to low during the auto reset mode of the sensor. When it is set to
    no reset mode, the pulse will stay HIGH forever until another movement is detected.
    Usually, the preferred method is auto reset.
  prefs: []
  type: TYPE_NORMAL
- en: '![Motion detection using PIR sensors](img/4602_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have tested the PIR sensors, let's move ahead to sending an e-mail
    with an attachment using Python from BeagleBone Black.
  prefs: []
  type: TYPE_NORMAL
- en: Sending e-mail with an attachment from BeagleBone Black
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like the OpenCV library to work with images and camera on BeagleBone Black with
    Python, we have many other wonderful libraries that are developed and are built
    in Python. One such library is the SMTP e-mail library, which we will be using
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: To test this, we will use the image we captured in the project in the previous
    chapter, available inside the `ImageCapture` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will change our working directory to the `ImageCapture` directory first,
    as shown in the following screenshot, using `cd ImageCapture`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending e-mail with an attachment from BeagleBone Black](img/4602_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we will go ahead and create a Python file with code to send an e-mail
    with an attachment in it. To do that, first create a new file named `sendemail.py`,
    using `sudo nano sendemail.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending e-mail with an attachment from BeagleBone Black](img/4602_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, type in the code shown in the following screenshot and save the file inside
    the `ImageCapture` folder itself. The code has been written with comments on most
    of the lines for you to get a clear idea of how it works.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending e-mail with an attachment from BeagleBone Black](img/4602_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll see that the `Photo.jpg` file that we captured in our previous project
    is still available inside the `ImageCapture` folder, and it''s the same image
    that we will be attaching in the e-mail that is going to be sent while executing
    this program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending e-mail with an attachment from BeagleBone Black](img/4602_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you execute the program, you should get an e-mail on the receiver''s e-mail
    address you mentioned in the `sendemail.py` code file, and the output the terminal
    will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending e-mail with an attachment from BeagleBone Black](img/4602_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As it prints on the Linux shell that the e-mail was sent, you will have received
    the e-mail on your e-mail account; check out these screenshots of the e-mail I
    got:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending e-mail with an attachment from BeagleBone Black](img/4602_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, like this, you can attach any attachment to the e-mail and send it from
    BeagleBone. As we now know how to detect motion using a PIR sensor connected to
    the BeagleBone board as well as how to send an e-mail with a photo as an attachment,
    let's go ahead and merge the previous chapter's camera image-capture project with
    whatever we have learned so far in this chapter to build an advanced project.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced project – Motion-based home security alert system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build a home surveillance security alert system, where
    we will have a BeagleBone board to which a PIR sensor is connected. A USB camera
    is connected to it, and the BeagleBone board is connected to the Internet. So
    basically, the system will capture an image from the camera whenever some movement
    is detected in front of the PIR sensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up the PIR sensor with the BeagleBone board, just like we did in the motion-detection
    topic of this chapter, connect the USB web camera to the BeagleBone board and,
    log in into the system. The setup looks as shown in the following picture:![Advanced
    project – Motion-based home security alert system](img/4602_08_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory for this project with `sudo mkdir HomeSecurity`:![Advanced
    project – Motion-based home security alert system](img/4602_08_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use `cd HomeSecurity`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Advanced project – Motion-based home security alert system](img/4602_08_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Create the Python script for the project using `sudo nano EmailAlert.py`:![Advanced
    project – Motion-based home security alert system](img/4602_08_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the following code into the file. The code contains comments on most of
    the lines to give you a clear explanation of how it works.
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced project – Motion-based home security alert system](img/4602_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have typed the code, go ahead and save it. When you run it, you should
    see the output in the Linux shell, as shown in the following screenshot, whenever
    there is movement in front of the PIR sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced project – Motion-based home security alert system](img/4602_08_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following image shows how I waved my hand in front of the PIR sensor, keeping
    my finger in front of it and taking it away:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced project – Motion-based home security alert system](img/4602_08_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And the screenshots of the e-mail I got are shown in the following series of
    images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced project – Motion-based home security alert system](img/4602_08_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Like this, you can use Python, OpenCV, and the e-mail library of Python together
    to click pictures and send an e-mail alert every time some movement is detected
    by the PIR sensor.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we used our knowledge from the previous chapter about OpenCV
    with what we learned in this chapter about PIR sensor interfacing using the BeagleBone
    board and sending e-mail using Python from the BeagleBone board to build a motion-detection
    camera surveillance security e-mail alert system. Instead of stopping this project
    here, I recommend you to try out other methods of motion detection and build the
    same system without a PIR sensor. There are lots of resources online on motion
    detection using OpenCV in real time using Python. Try setting up a system where
    without the PIR sensor, motion detection is performed using just the camera and
    an e-mail alert is sent.
  prefs: []
  type: TYPE_NORMAL
