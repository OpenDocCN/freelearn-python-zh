- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fundamental thread of computer science is computer architecture. This topic
    was once called computer hardware and is concerned with the physical computer
    itself; that is, the **central processing unit** (**CPU**), memory, buses, and
    peripherals. Computer hardware contrasts with computer software, which applies
    to the programs, applications, and operating systems that computers execute.
  prefs: []
  type: TYPE_NORMAL
- en: Most users are no more concerned with computer hardware and architecture than
    drivers worry about the operation of their vehicles’ carburetors. However, a knowledge
    of computer architecture is useful in many ways, ranging from how efficiently
    you operate your computer to maximizing its security. A good analogy is with pilots.
    They learn how to fly an aircraft, and a knowledge of how its engines operate
    is considered absolutely vital in handling abnormal situations, prolonging the
    engine life, and minimizing fuel consumption.
  prefs: []
  type: TYPE_NORMAL
- en: 'Computer architecture is a large subject and is broadly divided into three
    interrelated areas: `add P,A,B`, which adds A to B and puts the sum in P. This
    book explains computer architecture by demonstrating how you can write a program
    that simulates a computer.'
  prefs: []
  type: TYPE_NORMAL
- en: The part of computer science that deals with how a computer implements the actions
    of its architecture is called computer organization and is largely beyond the
    scope of this text. Computer organization is concerned with the gates and circuits
    of the computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'An author can’t do justice to all the aspects of a computer in one book. Here,
    I am interested in tackling one topic: the ISA. I am going to introduce the computer’s
    instruction set and explain what it does. I will also discuss different types
    of instruction sets; for example, the ARM processor found in most mobile phones
    is very different from the Intel and AMD processors at the heart of PCs and laptops.
    In the second part of this book, we will concentrate on a specific computer and
    look at a real-world architecture, the ARM processor.'
  prefs: []
  type: TYPE_NORMAL
- en: This book is different. There are books on computer architecture. There are
    books on Python. There are books on the Raspberry Pi computer. Here, we combine
    all three of these topics. However, I don’t do this in a superficial way leaving
    the reader with a shallow and unsatisfactory knowledge of each topic.
  prefs: []
  type: TYPE_NORMAL
- en: My intention is to introduce a computer architecture and its instruction set.
    That is, I am going to explain how a computer works at the level of its native
    instructions (called assembly language). I describe what an instruction does and
    how it is read, interpreted (i.e., decoded), and then executed (implemented).
    I will also discuss the type of operations computers implement.
  prefs: []
  type: TYPE_NORMAL
- en: So, how does Python fit into this scheme? Python is a popular high-level programming
    language that is freely available for use on the PC, Apple Mac, and Raspberry
    Pi. Moreover, Python is probably the easiest computer language to learn, and it
    is remarkably powerful.
  prefs: []
  type: TYPE_NORMAL
- en: People learn by doing. I have decided to include sufficient Python for the reader
    to construct a simple computer simulator that can read a machine-level computer
    instruction and execute it. Because I will show how this Python simulator works,
    students can build computers to their own specifications. They can experiment
    with instruction sets, addressing modes, instruction formats, and so on. They
    can even build different types of computers to their own specifications, for example,
    by using **complex instruction set computer** (**CISC**) or **reduced instruction
    set computer** (**RISC**) architectures. CISC and RISC offer two different philosophies
    of computer design. Essentially, RISC computers have fixed-length instructions
    that permit only register load and store memory operations, whereas CISC computers
    can have variable-length instructions and permit direct data operations on memory.
    In reality, the distinction between RISC and CISC is more complex. The first generation
    of microprocesses all conformed to CISC philosophy.
  prefs: []
  type: TYPE_NORMAL
- en: Readers can build computers because they can write a program in Python that
    will execute the target language of a specific computer architecture and they
    can design that target language themselves.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most popular computer architectures is the ARM processor found in
    countless mobile applications and even Apple laptops. Not only is this an economically
    dominant processor family but it’s also very popular in education because of its
    interesting and innovative architecture and its relatively gentle learning curve.
    Even better, this is the processor used by the low-cost Raspberry Pi computer.
    You can run ARM code on Raspberry Pi using software tools that come with the computer.
    You can also run Python programs on Raspberry Pi with free software. Consequently,
    Raspberry Pi provides students with an excellent low-cost machine that lets them
    study core hardware topics with no further investment in hardware or software.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For many years, I have taught computer architecture and have used simulators
    to teach assembly language. This approach demonstrates what instructions do but
    not how they do it or how they are designed, decoded, and executed. I decided
    to create a simple instruction simulator for class use. This book evolved from
    that project.
  prefs: []
  type: TYPE_NORMAL
- en: 'My target audience can be divided into four main groups, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Students who are taking a computer architecture course and would like to enhance
    their experience of computer architecture by experimenting with their own CPUs
    by means of simulation. This approach would increase the depth of their knowledge
    of computer architecture and enhance their understanding of the trade-offs that
    the computer designer faces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The non-computer specialist, the layperson, and the enthusiast who would like
    to know how computers work. By using Python as the design language and providing
    an introductory course on Python, I have attempted to make the book accessible
    to those with little or no experience in programming.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi user. Raspberry Pi has had an immense impact on computer science
    education. This book provides a brief introduction to Raspberry Pi and shows how
    it is possible to write assembly language programs in the ARM’s native language.
    Moreover, Raspberry Pi also provides an environment (Python and its tools) that
    allows the reader to understand and simulate computers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reader wanting to learn Python. Although this is not a formal course on
    Python, it provides a goal-oriented introduction to Python; that is, it applies
    Python to an actual example. This approach avoids the breadth of a conventional
    course and enables the reader to construct a practical application with a relatively
    shallow learning curve.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have not assumed that a beginner reader has absolutely no knowledge of computers
    at all. This book assumes a very basic knowledge of binary arithmetic and number
    bases and the basic concepts of Boolean variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19624_01.xhtml#_idTextAnchor015)*, From Finite State Machines
    to the Computers,* introduces the notion of digital computers via the finite state
    machine that is used to model simple control systems. From there, we introduce
    the concept of algorithms and programs. Once we know what we want a computer to
    do, we can think about what we need to implement a computer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19624_02.xhtml#_idTextAnchor023)*, High-Speed Introduction to
    Python,* provides the initial background in Python that is required to take the
    first steps on the way to implementing a computer using Python.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19624_03.xhtml#_idTextAnchor042)*, Data Flow in a Computer,*
    demonstrates how information flows around a computer during the execution of a
    program. It is this data flow that we have to implement when we are simulating
    a program in software.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19624_04.xhtml#_idTextAnchor062)*, Crafting an Interpreter –
    First Steps,* begins the journey to a simulator. Now that we have been introduced
    to the concept of a computer and a little Python, we can go further and describe
    the fundamental ideas behind a computer simulator. In this chapter, we also look
    at the nature of computer instructions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19624_05.xhtml#_idTextAnchor075)*, A Little More Python,* expands
    our knowledge of Python and introduces us to vital topics such as Python’s dictionaries,
    which provide tools that greatly simplify the design of a computer simulator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19624_06.xhtml#_idTextAnchor091)*, TC1 Assembler and Simulator
    Design,* is the heart of this book. Here, we discuss the components of a simulator
    and then provide a program that can simulate a hypothetical teaching computer,
    TC1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19624_07.xhtml#_idTextAnchor121)*, Extending the TC1,* adds
    further facilities to the simulator, such as data checking and creating new instructions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19624_08.xhtml#_idTextAnchor135)*, Simulators for Other Architectures,*
    looks at different types of computer architecture and describes alternative simulators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19624_09.xhtml#_idTextAnchor159)*, Raspberry Pi – An Introduction,*
    changes course. Here, we look at the popular Raspberry Pi and the ARM processor
    at its core. In particular, we learn how to enter a program in ARM assembly language
    and run it in debugging mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19624_10.xhtml#_idTextAnchor184)*, A Closer Look at the ARM,*
    examines ARM’s instruction set in greater detail and provides a foundation for
    writing programs in assembly language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19624_11.xhtml#_idTextAnchor197)*, ARM Addressing Modes,* looks
    at the addressing modes of the ARM in greater detail and explains some of its
    special features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19624_12.xhtml#_idTextAnchor209)*, Subroutines and the Stack,*
    is really an extension of the previous chapter because we look at the way in which
    the ARM uses its addressing modes to implement stack operations, which are so
    important in assembly language programming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is split into two parts. The first part develops a computer simulator
    in Python and the second part provides a brief introduction to Raspberry Pi and
    uses it as a vehicle to teach ARM assembly language programming.
  prefs: []
  type: TYPE_NORMAL
- en: I used a PC with Windows to develop the Python programs. The reader may use
    a Windows-based system, an Apple Mac, or any Linux-based computer to develop Python.
    All the necessary software is freely available.
  prefs: []
  type: TYPE_NORMAL
- en: You can, of course, use Raspberry Pi itself to develop Python.
  prefs: []
  type: TYPE_NORMAL
- en: In order to write ARM assembly language programs and debug them, you need a
    Raspberry Pi. This is a single-board computer and requires a power supply, keyboard,
    mouse, and monitor. I have used both the Raspberry Pi 3 Model A+ and Raspberry
    Pi 4 Model B versions.
  prefs: []
  type: TYPE_NORMAL
- en: The software required to develop Python programs is freely available from [https://www.python.org](https://www.python.org).
    The Raspberry Pi single-board computer is not sold with an operating system. You
    must either buy an SD card with the operating system installed or download it
    yourself. Details are given at https://www.raspberrypi.com/documentation/computers/getting-started.html.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Practical-Computer-Architecture-with-Python-and-ARM](https://github.com/PacktPublishing/Practical-Computer-Architecture-with-Python-and-ARM).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates that words in text are not plain English words, but
    are words belonging to a program.'
  prefs: []
  type: TYPE_NORMAL
- en: The `break` instruction breaks out of the `while` loop (that is, execution continues
    beyond the end of the loop - it’s a sort of short-circuit mechanism).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to draw your attention to features in code, we sometimes use bold
    font or shading to highlight features. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The text following # is in a non-monospaced font and is a comment ignored by
    the computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Practical Computer Architecture with Python and ARM*, we’d
    love to hear your thoughts! Please [click here to go straight to the Amazon review
    page](https://packt.link/r/1-837-63667-2) for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Download a free PDF copy of this book](img/B19624_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: https://packt.link/free-ebook/9781837636679
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
