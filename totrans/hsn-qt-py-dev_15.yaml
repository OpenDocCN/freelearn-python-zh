- en: Creating Layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will finalize our understanding of the concepts related to arranging
    and positioning items in our application. If elements have a fixed size and position
    and you need to resize the window, these elements will not resize accordingly
    and there will be a graphical representation fault. Also, if the application will
    be used with devices that have different resolutions (as is the case in real life),
    the results of the graphical visualization will vary (and this tends to err on
    the bad side). The construction of layouts for the items is one of the basic instruments
    for making an application independent from the resizing of windows and the native
    device resolution. Layouts play the role of geometry managers in applications
    with GUIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous examples of application development, layouts have already been
    used, and we have some insight into this mechanism. This chapter will complete
    our understanding of the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Box layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grid layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stacked layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen in the examples, layouts are a convenient way to arrange items
    in an application, such as the arrangement of widgets and resizing items automatically
    according to device resolution, available space, size, and so on. In this section,
    we will cover the basics of layouts in the Qt library.
  prefs: []
  type: TYPE_NORMAL
- en: QLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is an abstract base class for implementing layouts with the Qt framework.
    All the layouts in this chapter inherit the functionality of this class; `QLayout`
    is included in the `QtWidgets` module and can be reimplemented in a custom class.
    The syntax of the reimplementation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `QLayout` class enhances functionality with the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions add elements to the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addChildLayout(QtWidgets.QLayout)`: This adds a sub-layout, specified in the
    parameter, as a child layout for this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`addChildWidget(QtWidgets.QWidget)`: This adds a managed widget, specified
    in the parameter, to this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`addItem(QtWidgets.QLayoutItem)`: This adds an item, specified in the parameter,
    to this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`addWidget(QtWidgets.QWidget)`: This adds the widget, specified in the parameter,
    to this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties of the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setAlignment(QtWidgets.QWidget, QtCore.Qt.Alignment)`: This sets the alignment
    (the second parameter) for the widget (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`setAlignment(QtWidgets.QLayout, QtCore.Qt.Alignment)`: This sets the alignment
    (the second parameter) for the layout (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`setContentsMargins(QtCore.QMargins)`: This sets the margins, specified in
    the parameter, that will be used around this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setContentsMargins(int, int, int, int)`: This sets the margins for the left
    (the first parameter), top (the second parameter), right (the third parameter),
    and bottom (the fourth parameter) sides that will be used around this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setEnabled(bool)`: If the parameter is `True`, it enables this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setMenuBar(QtWidgets.QWidget)`: This sets the menu bar widget, specified in
    the parameter, at the top of the parent widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setSizeConstraint(QtWidgets.QLayout.SizeConstraint)`: This sets the resize
    mode, specified in the parameter, for this layout. The available resizing modes
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QLayout.SetDefaultConstraint`—`0`: The minimum size of the widget
    is set to `minimumSize()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QLayout.SetNoConstraint`—`1`: The widget is not constrained.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QLayout.SetMinimumSize`—`2`: The minimum size of the widget is set
    to `minimumSize()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QLayout.SetFixedSize`—`3`: The widget is set to `sizeHint()` and
    cannot be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QLayout.SetMaximumSize`—`4`: The maximum size of the widget is set
    to `maximumSize()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QLayout.SetMinAndMaxSize`—`5`: The maximum and minimum size of the
    widget are set to `maximumSize()` and `minimumSize()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setSpacing(int)`: This sets the spacing between widgets inside this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to this layout''s state:'
  prefs: []
  type: TYPE_NORMAL
- en: '`isEnabled()`: This returns `True` if this layout is enabled. Otherwise, it
    returns `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions relate to the current values of the layout, changes in functionality,
    and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`activate()`: This redoes the layout for the parent widget of this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`alignmentRect(QtCore.QRect)`: This returns a rectangle of the `QtCore.QRect`
    type that will be covered when this layout''s geometry is set to the rectangle
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`closestAcceptableSize(QtWidgets.QWidget, QtCore.QSize)`: This returns the
    size that satisfies all the constraints on the widget (the first parameter) and
    is close to the size specified (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`contentsMargins()`: This returns the margins of the `QtCore.QMargins` type
    that are used around this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`contentsRect()`: This returns a rectangle of the `QtCore.QRect` type of the
    layout''s geometry, with the content''s margins.'
  prefs: []
  type: TYPE_NORMAL
- en: '`count()`: This returns the number of items in this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`getContentsMargins()`: This returns the margins for the left, top, right,
    and bottom sides that are used around the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`indexOf(QtWidgets.QWidget)`: This returns the index of the widget, specified
    in the parameter, that is found in this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`indexOf(QtWidgets.QLayoutItem)`: This returns the index of the item''s layout,
    specified in the parameter, that is found in this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`itemAt(int)`: This returns the item of the `QtWidgets.QLayoutItem` type at
    the index specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`menuBar()`: This returns the menu bar of the `QtWidgets.QWidget` type for
    this layout, if the menu bar exists.'
  prefs: []
  type: TYPE_NORMAL
- en: '`parentWidget()`: This returns the parent widget of the `QtWidgets.QWidget`
    type for this layout. It returns the parent widget of the parent layout, if this
    is a sub-layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`removeItem(QtWidgets.QLayoutItem)`: This removes the layout item, specified
    in the parameter, from this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`removeWidget(QtWidgets.QWidget)`: This removes the widget, specified in the
    parameter, from this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`replaceWidget(QtWidgets.QWidget, QtWidgets.QWidget, QtCore.Qt.FindChildOptions)`:
    This replaces a widget (the first parameter) with another widget (the second parameter)
    using options (the third parameter), and returns an item of the `QtWidgets.QLayoutItem`
    type that contains the new widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sizeConstraint()`: This returns the resize mode of the `QtWidgets.QLayout.SizeConstraint`
    type for this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`spacing()`: This returns the spacing between the widgets inside this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`takeAt(int)`: This returns the item of the `QtWidgets.QLayoutItem` type at
    the index specified in the parameter and removes it.'
  prefs: []
  type: TYPE_NORMAL
- en: '`update()`: This updates this layout for the parent widget.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`childEvent(QtCore.QChildEvent)`: This event handler receives child events
    of the layout, with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`widgetEvent(QtCore.QEvent)`: This event handler receives parent widget resize
    events of the layout, with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QLayoutItem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class creates an abstract item for the layout implementation with the
    Qt library. The layouts that will be described in this chapter and the `QLayout`
    class can use this functionality and manipulate these items in the custom layout
    constructions; `QLayoutItem` is included in the `QtWidgets` module and can be
    reimplemented in a custom class. The syntax of the reimplementation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `QLayoutItem` class enhances functionality with the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties of the layout item:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setAlignment(QtCore.Qt.Alignment)`: This sets the alignment, specified in
    the parameter, for this layout item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setGeometry(QtCore.QRect)`: This sets the geometry, specified in the parameter,
    for this layout item.'
  prefs: []
  type: TYPE_NORMAL
- en: has/is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return a Boolean value, `bool`, related to this layout item''s
    state:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hasHeightForWidth()`: This returns `True` if the preferred height of this
    layout depends on its width.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isEmpty()`: This returns `True` if this layout item is empty, or `False` if
    it contains any widgets.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions relate to the current values of the layout item, changes in
    functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`alignment()`: This returns the alignment of the `QtCore.Qt.Alignment` type
    for this layout item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`controlTypes()`: This returns the control types of the **`QtWidgets.QSizePolicy.ControlTypes`**
    type for this layout item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`expandingDirections()`: This returns the directions of the `QtCore.Qt.Orientations`
    type so that this layout item can make use of more space.'
  prefs: []
  type: TYPE_NORMAL
- en: '`geometry()`: This returns the rectangle of the `QtCore.QRect` type covered
    by this layout item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`heightForWidth(int)`: This returns the preferred height for this layout item
    in relation to the width specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`invalidate()`: This invalidates this layout item''s cached information.'
  prefs: []
  type: TYPE_NORMAL
- en: '`layout()`: This returns the layout of the `QtWidgets.QLayout` type if this
    item has a relative layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`maximumSize()`: This returns the maximum size of the `QtCore.QSize` type for
    this layout item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`minimumHeightForWidth(int)`: This returns the minimum height for this widget
    relative to the width specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`minimumSize()`: This returns the minimum size of the `QtCore.QSize` type for
    this layout item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sizeHint()`: This returns the preferred size of the `QtCore.QSize` type for
    this layout item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`spacerItem()`: This returns a spacer item (a blank space) of the `QtWidgets.QSpacerItem`
    type if this item is a spacer item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`widget()`: This returns widget of the `QtWidgets.QWidget` type if this item
    manages a widget.'
  prefs: []
  type: TYPE_NORMAL
- en: QSizePolicy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class can be used to set the resizing policy for the widgets in the layout.
    The size policy of a widget describes how it will be resized and treated by the
    layout engine. Usually, this policy attribute is used for widgets in layouts.
    The policy can be added by using `setSizePolicy()` with the parameter related
    to the size policy. The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `QSizePolicy` class enhances functionality with the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties of the size policy:'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.setControlType(QtWidgets.QSizePolicy.ControlType)`: This sets
    the control type for the associated widget to which the size policy will be applied.
    The available control types are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.DefaultType`: The default type; `None` is specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.ButtonBox`: This is a `QtWidgets.QDialogButtonBox` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.CheckBox`: This is a `QtWidgets.QCheckBox` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.ComboBox`: This is a `QtWidgets.QComboBox` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.Frame`: This is a `QtWidgets.QFrame` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.GroupBox`: This is a `QtWidgets.QGroupBox` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.Label`: This is a `QtWidgets.QLabel` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.Line`: This is a `QtWidgets.QFrame.HLine` or `QtWidgets.QFrame.VLine` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.LineEdit`: This is a `QtWidgets.QLineEdit` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.PushButton`: This is a `QtWidgets.QPushButton` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.RadioButton`: This is a `QtWidgets.QRadioButton` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.Slider`: This is a `QtWidgets.QAbstractSlider` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.SpinBox`: This is a `QtWidgets.QAbstractSpinBox` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.TabWidget`: This is a `QtWidgets.QTabWidget` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.ToolButton`: This is a `QtWidgets.QToolButton` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size_policy.setHeightForWidth(bool)`: If the parameter is `True`, it sets
    that the preferred height depends on the width of the widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.setHorizontalPolicy(QtWidgets.QSizePolicy.Policy)`: This sets
    the horizontal policy, specified in the parameter, for this size policy. The available
    policies are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`QtWidgets.QSizePolicy.Fixed`**: The widget has a fixed-size policy; it can
    never grow or shrink.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.Minimum`: The widget can be expanded, but it cannot
    be smaller than the minimum `sizeHint()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.Maximum`: The widget can be shrunk, but it cannot be
    larger than the maximum `sizeHint()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.Preferred`: The widget`s `sizeHint()` is as preferred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.Expanding`: The widget''s `sizeHint()` is a sensible
    size. The widget can be expanded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.MinimumExpanding`: The widget''s `sizeHint()` is minimal
    and sufficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.Ignored`: The widget''s `sizeHint()` is ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, the following flags can be used, combined together with the `|` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.GrowFlag`—`1`: The widget can grow more than the size
    hint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.ExpandFlag`—`2`: The widget can take as much space as
    is available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.ShrinkFlag`—`4`: The widget can shrink more than the
    size hint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSizePolicy.IgnoreFlag`—`8`: The size hint is ignored. The widget
    will get as much space as possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size_policy.setHorizontalStretch(int)`: This sets the horizontal stretch factor,
    specified in the parameter, for this size policy.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.setRetainSizeWhenHidden(bool)`: If the parameter is `True`, it
    determines that this layout will retain the size of the widget when it''s hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.setVerticalPolicy(QtWidgets.QSizePolicy.Policy)`: This sets the
    vertical policy, specified in the parameter, for this size policy. The available
    policies are described in the earlier bullets.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.setVerticalStretch(int)`: This sets the vertical stretch factor,
    specified in the parameter, for this size policy.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.setWidthForHeight(bool)`: If the parameter is `True`, it sets
    that the preferred width depends on the height of this widget.'
  prefs: []
  type: TYPE_NORMAL
- en: has
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return a Boolean value (`bool`) related to this size policy''s
    state:'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.hasHeightForWidth()`: This returns `True` if the preferred height
    of the widget depends on its width.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.hasWidthForHeight()`: This returns `True` if the preferred width
    of the widget depends on its height.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions relate to the current values of the size policy, changes in
    functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.controlType()`: This returns the control type of the `QtWidgets.QSizePolicy.ControlType`
    type that is associated with the widget to which the size policy will be applied.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.expandingDirections()`: This returns the direction of the `QtCore.Qt.Orientations`
    type where the widget can make use of more space than is indicated in the `sizeHint()`
    function.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.horizontalPolicy()`: This returns the horizontal policy of the
    `QtWidgets.QSizePolicy.Policy` type of this size policy.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.horizontalStretch()`: This returns the horizontal stretch factor
    used in this size policy.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.retainSizeWhenHidden()`: This returns `True`, if this layout retains
    the size of the widget when hidden. The default is `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.transpose()`: This swaps the horizontal/vertical policies/stretches.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.transposed()`: This returns the swapped size policy of the `QtWidgets.QSizePolicy`
    type with the horizontal/vertical policies/stretches.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.verticalPolicy()`: This returns the vertical policy of the `QtWidgets.QSizePolicy.Policy`
    type for this size policy.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_policy.verticalStretch()`: This returns the vertical stretch factor of
    this size policy.'
  prefs: []
  type: TYPE_NORMAL
- en: Box layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest way to arrange items in an application's widgets is to use a **box
    layout** construction. Box layouts arrange items horizontally or vertically. Horizontally,
    the items will be in a row, and vertically, they will be in a column. The class
    that provides the basic functionality is `QBoxLayout`.
  prefs: []
  type: TYPE_NORMAL
- en: QBoxLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the basic class for box layouts. It can arrange items horizontally/vertically
    in a row/column arrangement. The direction of the box layout, such as left to
    right (row) or top to bottom (column), needs to be defined in the declaration
    of the class with the relevant parameter. The declaration syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`QBoxLayout` inherits the `QLayout` class and enhances its functionality with
    the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions add elements to the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.addLayout(QtWidgets.QLayout, int)`: This adds the layout (the first
    parameter) to this box layout using the stretch factor (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.addSpacerItem(QtWidgets.QSpacerItem)`: This adds a spacer item,
    specified in the parameter, to this box layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.addSpacing(int)`: This adds a non-stretchable space to this layout
    with the size specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.addStretch(int)`: This adds a stretchable space to this layout,
    with the stretch factor specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.addStrut(int)`: This adds the limits, specified in the parameter,
    for the perpendicular dimension of this box layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.addWidget(QtWidgets.QWidget, int, QtCore.Qt.Alignment)`: This adds
    the widget (the first parameter) to this box layout, using the stretch factor
    (the second parameter) and alignment (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: insert
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions insert elements into the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.insertItem(int, QtWidgets.QLayoutItem)`: This inserts an item (the
    second parameter) into this layout at the index (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.insertLayout(int, QtWidgets.QLayout, int)`: This inserts a layout
    (the second parameter) into this layout at the index (the first parameter) with
    a stretch factor (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.insertSpacerItem(int, QtWidgets.QSpacerItem)`: This inserts a spacer
    item (the second parameter) into this layout at the index (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.insertSpacing(int, int)`: This inserts a non-stretchable space
    with a certain size (the second parameter) into this layout at the index (the
    first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.insertStretch(int, int)`: This inserts a stretchable space with
    a certain size (the second parameter) into this layout at the index (the first
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.insertWidget(int, QtWidgets.QWidget, int, QtCore.Qt.Alignment)`:
    This inserts a widget (the second parameter) into this layout at the index (the
    first parameter) with a stretch factor (the third parameter) and alignment (the
    fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties of the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.setDirection(QtWidgets.QBoxLayout.Direction)`: This sets the direction,
    specified in the parameter, for this box layout. The available directions are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`QtWidgets.QBoxLayout.LeftToRight`**—`0`: From left to right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QBoxLayout.RightToLeft`—`1`: From right to left.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QBoxLayout.TopToBottom`—`2`: From top to bottom.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QBoxLayout.BottomToTop`—`3`: From bottom to top.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`box_layout.setSpacing(int)`: This sets the spacing between widgets inside
    this box layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.setStretch(int, int)`: This sets the stretch factor (the second
    parameter) for this layout at the index (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.setStretchFactor(QtWidgets.QWidget, int)`: This sets the stretch
    factor (the second parameter) for the widget (the first parameter) in this box
    layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.setStretchFactor(QtWidgets.QLayout, int)`: This sets the stretch
    factor (the second parameter) for the layout (the first parameter) in this box
    layout.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions relate to the current values of the layout, changes in functionality,
    and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.direction()`: This returns the direction of the **`QtWidgets.QBoxLayout.Direction`**
    type used for this box layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`box_layout.stretch(int)`: This returns the stretch factor at the position
    specified by the index.'
  prefs: []
  type: TYPE_NORMAL
- en: QHBoxLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class can be used to construct layouts that can arrange items horizontally
    in a row, placing the widgets inside the row. It is an additional class for implementing
    box layouts and can be used for horizontal arrangement. It is very useful when
    constructing a simple application window with some elements that will be arranged
    at the top or bottom, or with additional windows/widgets whose elements will have
    a similar direction. The available directions for this layout are `RightToLeft`
    and `LeftToRight` (the default). The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`QHBoxLayout` inherits `QBoxLayout` with features and functions that are available
    and can be implemented in the horizontal layout relatively.'
  prefs: []
  type: TYPE_NORMAL
- en: QVBoxLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class can be used to construct layouts that can arrange items vertically
    in a column, placing the widgets inside the column. It is an additional class
    for implementing box layouts, and can be used for vertical arrangement. It is
    very useful when constructing a simple application window with some elements that
    will be arranged on the left or right side, or with additional windows/widgets
    whose elements have a similar direction. The available directions for this layout
    are `TopToBottom` (the default) and `BottomToTop`. The declaration syntax of this
    class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`QVBoxLayout` inherits `QBoxLayout` with features and functions that are available
    and can be implemented in the vertical layout relatively.'
  prefs: []
  type: TYPE_NORMAL
- en: QGridLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class arranges items in a grid. The grid means that each item will be
    positioned in a specified row and column in relation to the cell. This is a very
    useful and popular layout for constructing applications with various elements
    that have different positions, directions, and sizes in relation to the application''s
    windows. The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: QGridLayout functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QGridLayout` inherits the `QLayout` class and enhances its functionality with
    the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions add elements to the grid layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.addItem(QtWidgets.QLayoutItem, int, int, int, int, QtCore.Qt.Alignment)`:
    This adds the layout item (the first parameter) to the position in this grid layout
    specified by the row (the second parameter) and column (the third parameter).
    It will occupy a number of rows (the fourth parameter) and columns (the fifth
    parameter), and it also has an alignment (sixth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.addLayout(QtWidgets.QLayout, int, int, QtCore.Qt.Alignment)`:
    This adds the layout (the first parameter) to the position in this grid layout
    specified by the row (the second parameter) and column (the third parameter),
    with an alignment (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.addLayout(QtWidgets.QLayout, int, int, int, int, QtCore.Qt.Alignment)`:
    This adds the layout (the first parameter) to the position in this grid layout
    specified by the row (the second parameter) and column (the third parameter).
    It will occupy a number of rows (the fourth parameter) and columns (the fifth
    parameter), with an alignment (sixth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.addWidget(QtWidgets.QWidget, int, int, QtCore.Qt.Alignment)`:
    This adds the widget (the first parameter) to the position in this grid layout
    specified by the row (the second parameter) and column (the third parameter),
    with an alignment (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.addWidget(QtWidgets.QWidget, int, int, int, int, QtCore.Qt.Alignment)`:
    This adds the widget (the first parameter) to the position in this grid layout
    specified by the row (the second parameter) and column (the third parameter).
    It will occupy a number of rows (the fourth parameter) and columns (the fifth
    parameter), with an alignment (sixth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties of the grid layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.setColumnMinimumWidth(int, int)`: This sets the minimum width
    in pixels (the second parameter) for the columns (the first parameter) in this
    grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.setColumnStretch(int, int)`: This sets the stretch factor (the
    second parameter) for the columns (the first parameter) of this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.setDefaultPositioning(int, QtCore.Qt.Orientation)`: This sets
    the positioning mode that expands this layout to the number of columns/rows (the
    first parameter). If the orientation (the second parameter) is `QtCore.Qt.Horizontal`,
    it will get expanded by columns. If the orientation is `QtCore.Qt.Vertical`, it
    will get expanded by rows.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.setHorizontalSpacing(int)`: This sets the horizontal spacing,
    specified in the parameter, between the widgets of this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.setOriginCorner(QtCore.Qt.Corner)`: This sets the origin corner,
    specified in the parameter, for this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.setRowMinimumHeight(int, int)`: This sets the minimum height in
    pixels (the second parameter) for the rows (the first parameter) of this grid
    layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.setRowStretch(int, int)`: This sets the stretch factor (the second
    parameter) for the rows (the first parameter) of this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.setVerticalSpacing(int)`: This sets the vertical spacing, specified
    in the parameter, between the widgets in this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions relate to the current values of the grid layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.cellRect(int, int)`: This returns the geometry of the cell as
    a `QtCore.QRect` type, with the row (the first parameter) and column (the second
    parameter) specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.columnCount()`: This returns the number of columns in this grid
    layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.columnMinimumWidth(int)`: This returns the minimum width, specified
    in the parameter, for the columns of this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.columnStretch(int)`: This returns the stretch factor, specified
    in the parameter, for the columns in this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.getItemPosition(int)`: This returns the position of the item that
    has the index specified in the parameter in this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.horizontalSpacing()`: This returns the spacing between widgets
    that are laid horizontally.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.itemAtPosition(int, int)`: This returns the item of the `QtWidgets.QLayoutItem`
    type that occupies a row (the first parameter) and a column (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.originCorner()`: This returns the corner of the `QtCore.Qt.Corner`
    type used for the origin of this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.rowCount()`: This returns the number of rows in this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`grid_layout.rowMinimumHeight(int)`**: This returns the minimum height, specified
    in the parameter, for the columns of this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.rowStretch(int)`: This returns the stretch factor, specified in
    the parameter, for the rows of this grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grid_layout.verticalSpacing()`: This returns the spacing between widgets that
    are laid vertically.'
  prefs: []
  type: TYPE_NORMAL
- en: QGridLayout example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the earlier chapters of this book, we arranged the elements in the main application
    window, and additional widgets with the `QGridLayout` class. So, it is not necessary
    to provide examples of this class, because they were shown before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add some properties to the layouts to demonstrate the features described,
    such as adding the content margins and modifying the spacing around layouts to
    make them more representative:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `UApp` class of the `u_app.py` files, add these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Content margins for each side will be added for the layouts, and the spacing
    of the elements of the layout is `3` pixels. This doesn''t make any big changes,
    and the result will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ef52ff2-dfc0-40c8-811d-cbd65f9ab1f1.png)'
  prefs: []
  type: TYPE_IMG
- en: This is an optional example. You can experiment with some other features. Use
    them at your discretion.
  prefs: []
  type: TYPE_NORMAL
- en: QFormLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides layout constructions for various forms with items. The
    form layout includes input widgets and labels that are associated with these inputs.
    This form has two columns. The first column usually consists of labels, and the
    second column is an input widget. These similar form layouts give you the possibility
    of arranging the items in a simple form representation.  The declaration syntax
    of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: QFormLayout functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QFormLayout` inherits the `QLayout` class and enhances its functionality with
    the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions add elements to the form layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.addRow(QtWidgets.QWidget)`: This adds a row with a widget, specified
    in the parameter, to this form layout. The added widget will occupy both columns
    in the row.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.addRow(QtWidgets.QLayout)`: This adds a row with a layout, specified
    in the parameter, to this form layout. The added layout will occupy both columns
    in the row.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.addRow(QtWidgets.QWidget, QtWidgets.QWidget)`: This adds a row
    with two columns to this form layout. The first widget (the first parameter) will
    occupy the first column and the second widget (the second parameter) will occupy
    the second column.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.addRow(QtWidgets.QWidget, QtWidgets.QLayout)`: This adds a row
    with two columns to this form layout. The widget (the first parameter) will occupy
    the first column and the layout (the second parameter) will occupy the second
    column.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`form_layout.addRow(str, QtWidgets.QWidget)`**: This adds a row with two
    columns to this form layout. A label with text (the first parameter) will be added
    automatically and will occupy the first column, and a widget (the second parameter)
    will occupy the second column.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.addRow(str, QtWidgets.QLayout)`: This adds a row with two columns
    to this form layout. A label with text (the first parameter) will be added automatically
    and will occupy the first column, and a layout (the second parameter) will occupy
    the second column.'
  prefs: []
  type: TYPE_NORMAL
- en: insert
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions insert elements into the form layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.insertRow(int, QtWidgets.QWidget)`: This inserts a row with two
    columns into this form layout at the index (the first parameter). The added widget
    (the second parameter) will occupy both columns in the row.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.insertRow(int, QtWidgets.QLayout)`: This inserts a row with two
    columns into this form layout at the index (the first parameter). The added layout
    (the second parameter) will occupy both columns in the row.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.insertRow(int, QtWidgets.QWidget, QtWidgets.QWidget)`: This inserts
    a row with two columns into this form layout at the index (the first parameter).
    The first widget (the second parameter) will occupy the first column, and the
    second widget (the third parameter) will occupy the second column.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.insertRow(int, QtWidgets.QWidget, QtWidgets.QLayout)`: This inserts
    a row with two columns into this form layout at the index (the first parameter).
    The widget (the second parameter) will occupy the first column, and the layout
    (the third parameter) will occupy the second column.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.insertRow(int, str, QtWidgets.QWidget)`: This inserts a row with
    two columns into this form layout at the index (the first parameter). A label
    with text (the second parameter) will be added automatically and will occupy the
    first column, and a widget (the third parameter) will occupy the second column.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.insertRow(int, str, QtWidgets.QLayout)`: This inserts a row with
    two columns into this form layout at the index (the first parameter). A label
    with text (the second parameter) will be added automatically and will occupy the
    first column, and a layout (the third parameter) will occupy the second column.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties of the form layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.setFieldGrowthPolicy(QtWidgets.QFormLayout.FieldGrowthPolicy)`:
    This sets the growth policy for the fields in this form layout. The available
    policies are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QFormLayout.FieldsStayAtSizeHint`—`0`: The fields never grow more
    than the effective size hint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFormLayout.ExpandingFieldsGrow`—`1`: The fields with `Expanding`
    or `MinimumExpanding` will grow to fill the available space. Otherwise, they never
    grow more than the effective size hint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFormLayout.AllNonFixedFieldsGrow`—`2`: The fields with a size policy
    will grow to fill the available space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_layout.setFormAlignment(QtCore.Qt.Alignment)`: This sets the alignment
    for the contents of this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.setHorizontalSpacing(int)`: This sets the horizontal spacing,
    specified in the parameter, between the widgets in this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.setItem(int, QtWidgets.QFormLayout.ItemRole, QtWidgets.QLayoutItem)`:
    This sets the item in the row (the first parameter) with the role (the second
    parameter) to an item (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.setLabelAlignment(QtCore.Qt.Alignment)`: This sets the horizontal
    alignment, specified in the parameter, for the labels in this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.setLayout(int, QtWidgets.QFormLayout.ItemRole, QtWidgets.QLayout)`:
    This sets the sub-layout (the third parameter) in the row (the first parameter)
    for the role (the second parameter) of this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.setRowWrapPolicy(QtWidgets.QFormLayout.RowWrapPolicy)`: This sets
    the row''s wrap policy, specified in the parameter, for the form of this layout.
    The available policies are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`QtWidgets.QFormLayout.DontWrapRows`**—`0`: The rows don''t wrap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFormLayout.WrapLongRows`—`1`: There''s enough horizontal space
    to fit the widest label, and the rest of the space is for the fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFormLayout.WrapAllRows`—`2`: The fields are always below their
    labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_layout.setVerticalSpacing(int)`: This sets the vertical spacing, specified
    in the parameter, between the widgets in this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.setWidget(int, QtWidgets.QFormLayout.ItemRole, QtWidgets.QWidget)`:
    This sets the widget (the third parameter) in the row (the first parameter) for
    the role (the second parameter). The available item roles are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QFormLayout.LabelRole`—`0`: A label widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFormLayout.FieldRole`—`1`: A field widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QFormLayout.SpanningRole`—`2`: A widget that spans label and field
    columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions relate to the current values of the form layout, changes in
    functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.fieldGrowthPolicy()`: This returns the growth policy of the `QtWidgets.QFormLayout.FieldGrowthPolicy`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.formAlignment()`: This returns the alignment of the `QtCore.Qt.Alignment`
    type used for this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.getItemPosition(int)`: This retrieves the row and role of the
    item specified by the index in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.getLayoutPosition(QtWidgets.QLayout)`: This retrieves the row
    and role of the child layout specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.getWidgetPosition(QtWidgets.QWidget)`: This retrieves the row
    and role of the widget specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.horizontalSpacing()`: This returns the spacing between widgets
    that are laid horizontally in this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.itemAt(int, QtWidgets.QFormLayout.ItemRole)`: This returns the
    layout item at the row (the first parameter) with the item''s role (the second
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.labelAlignment()`: This returns the horizontal alignment of the
    `QtCore.Qt.Alignment` type for the labels in this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.labelForField(QtWidgets.QWidget)`: This returns the label associated
    with the widget specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.labelForField(QtWidgets.QLayout)`: This returns the label associated
    with the layout specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.removeRow(int)`: This removes the row specified in the parameter
    from this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.removeRow(QtWidgets.QWidget)`: This removes the row associated
    with the widget specified in the parameter from this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`form_layout.removeRow(QtWidgets.QLayout)`**: This removes the row associated
    with the layout specified in the parameter from this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.rowCount()`: This returns the number of rows in this form layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.rowWrapPolicy()`: This returns the row wrap policy of the `QtWidgets.QFormLayout.RowWrapPolicy`
    type in this layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.takeRow(int)`: This removes the row specified in the parameter
    from this form layout without deleting it.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.takeRow(QtWidgets.QWidget)`: This removes the widget specified
    in the parameter from this form layout without deleting it.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.takeRow(QtWidgets.QLayout)`: This removes the layout specified
    in the parameter from this form layout without deleting it.'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_layout.verticalSpacing()`: This returns the spacing between widgets that
    are laid vertically.'
  prefs: []
  type: TYPE_NORMAL
- en: QFormLayout example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at an example of the form layout that will be used in this application.
    Let''s create the `Settings` option in the `Options` section at the top panel
    of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, create two files called `u_settings.py`, one in `App/App_PySide2/`
    and one in `App/App_PyQt5/`, and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following to the `App_PySide2/u_settings.py`  file''s `import` section:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following to the `App_PyQt5/u_settings.py` file''s `import` section:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `USets` class to this file with lines that will open and read the `settings.txt`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This class inherits the `QWidget` class that will be displayed as a separate
    window of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the first line edit field for the first background color of the app with
    the button to open the color dialog to the `__init__()` function of the `USets`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We've made an instance of the first line edit field with some text of the first
    color from the `settings.txt` file, and a button to call the color dialog window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the second line edit field for the second background color of the app with
    the button to open a color dialog to the `__init__()` function of the `USets`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We've created an instance of the second line edit field with a text of the second
    color from the `settings.txt` file, and a button to call the color dialog window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the third line edit field for the first additional color (for the text,
    and for the hover effect) of the app with the button to open a color dialog to
    the `__init__()` function of the `USets` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We've added an instance of the third line edit field with a text of the third
    color from the `settings.txt` file, and a button to call the color dialog window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the fourth line edit field for the second additional color (for the text,
    and for the hover effect) of the app with a button that opens a color dialog to
    the `__init__()` function of the `USets` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We've added an instance of the third line edit field with a text of the third
    color from the `settings.txt` file, and a button to call the color dialog window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `Reset` and `Save` buttons to this widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: It is recommended to fix the size of the buttons. For the very best construction
    of your layouts, this is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the horizontal box layout for the label and buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This will be an addition to the main form layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the form layout with text labels (automatically created) and line edit
    fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This demonstrates the form layout construction in the application. Each row
    has a label and a line edit field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a vertical layout for the form layout and for the horizontal layout when
    adding this layout to the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We've combined two layouts into one. This demonstrates that we can create any
    nesting layout constructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the `__init__()` function, add the signals:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: These signals will call the color dialog windows for each line of the form layout
    if the corresponding button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the functions that will call the function that opens the color dialog
    when a button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Each function will call the color dialog window with the option to choose a
    color for the background of the application window and the text color of the elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the function that opens the color dialog and sets the text with the selected
    color to the related line edit field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This function will display the color dialog window. If a favorite color is chosen
    and a dialog window is accepted by clicking Ok, Accept, or another similar button,
    it will set the text to an RGBA color in the corresponding line edit field.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add the bottom section of the file if we use this widget separately
    from the application as a window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to add lines to the `u_app.py` file for running this settings widget
    from the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `UApp` class  `__init__()` function, at the bottom, add the following
    signal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Using the `triggered()` signal of the third menu section, we will call the `settings()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the function for the `Options` section of the top panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the **`options()`** function, we created an instruction for the `Settings` option.
    We imported the `USets` class of the `u_settings.py` module, and then created
    the instance of this class and showed this window. Also, we added two `clicked()`
    signals of the `Save` and `Reset` buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the function for clicking the `Save` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This function will write the string with the chosen colors to the `settings.txt`
    file using the Python standard library's `open()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the function for clicking the `Reset` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This function will restore to the default colors of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the function that will be called to run the new app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This function will open the new main application window as a sub-process and
    exit the previous window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the following lines to the `u_style.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to change the lines at the top of the file with the `color` variable
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: And now, we need to add the default color settings for the application, which
    will be installed when the application is launched. To do this, create `u_defaults.py`
    files in both the `App/App_PySide2/` and `App/App_PyQt5/` directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then we can add these lines to these files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `colors` variable must contain a string with the color values,
    split by a space.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add these lines to the `u_app.py` file for the application to run correctly. At
    the top of the `u_app.py` file, before all the imports, we need to add these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If this application starts for the first time, default colors will be used
    for the background and text. If we run the `u_app.py` file, we will see a simple
    widget with form, vertical box, and horizontal box layouts implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7504a260-74ae-4515-83f3-c2ad38271525.png)'
  prefs: []
  type: TYPE_IMG
- en: So, when we choose colors or type in RGBA values to the line edit fields, they
    will be saved in the simple text file. In reality, this is not a reliable way
    to save and hold default settings (and not just settings). This example is optional.
    Moreover, saving default settings to simple text files, and working in this manner
    in general, is not recommended at all. This piece of the application just allows
    us to play with colors. Furthermore, settings for fonts, sizes of elements, and
    more, can be added in a similar way. Which settings to use remains at the discretion
    of the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can just demonstrate, with a color selection, that the application will
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/069431b6-49a8-4a52-b4b2-f42141c6b6cd.png)'
  prefs: []
  type: TYPE_IMG
- en: The color of the application now is white.
  prefs: []
  type: TYPE_NORMAL
- en: QStackedLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition, the Qt library provides stacked layouts. This class creates a
    layout that arranges items as a stack of widgets. By default, only one widget
    is visible at a time; the others are hidden. Similar to the stacked layout is
    the tab widget that was previously implemented in the application. The `QStackedWidget`
    class is also available and can be used as the top class of the stacked layout. The
    declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: QStackedLayout functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QStackedLayout` inherits the `QLayout` class and enhances its functionality
    with the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties of the stacked layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '`stacked_layout.setCurrentIndex(int)`: This sets the index, specified in the
    parameter, of the widget that will be currently visible and active in this stacked
    layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`stacked_layout.setCurrentWidget(QtWidgets.QWidget)`: This sets the widget,
    specified in the parameter, that will be currently visible and active in this
    stacked layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`stacked_layout.setStackingMode(QtWidgets.QStackedLayout.StackingMode)`: This
    sets the stacking mode, specified in the parameter, for this stacked layout. The
    available modes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QStackedLayout.StackOne`—`0`: Only one widget is visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QStackedLayout.StackAll`—`1`: All widgets are visible, and the current
    widget is raised and active.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions relate to the current values of the stacked layout, changes
    in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`stacked_layout.currentIndex()`: This returns the index of the widget that
    is currently visible in this stacked layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`stacked_layout.currentWidget()`: This returns the widget of the `QtWidgets.QWidget`
    type that is currently visible in this stacked layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`stacked_layout.insertWidget(int, QtWidgets.QWidget)`: This inserts the widget
    (the second parameter) at the index (the first parameter) of this stacked layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`stacked_layout.stackingMode()`: This returns the current stacking mode of
    the `QtWidgets.QStackedLayout.StackingMode` type for this stacked layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`stacked_layout.widget(int)`: This returns the widget at the index specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These signals are available for the `QStackedLayout` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`stacked_layout.currentChanged(int)`: This signal is emitted when the current
    widget in the stacked layout changes, with the new current widget index passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`stacked_layout.widgetRemoved(int)`: This signal is emitted when the widget
    is removed from the stacked layout, with the index of the widget passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter completes the part of the book dedicated to learning about the
    classes and properties of the Qt framework that help us to build a basic application
    with a GUI. Layouts in an application are a very important mechanism to arrange
    items in a user-friendly way. Note that layouts are not elements or items and
    that they provide functionality behind the scenes of the GUI app's windows and
    widgets. We need to remember this when we perform nesting of the layouts within
    each other multiple times. Also, the abstract base classes, described earlier
    in this chapter, allow us to construct various special layouts for the application.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will start the section of the book about the functional features
    of the application. We will explore a very small set of related tools, from the
    giant set of tools on offer with Python that are available for implementation
    in the application for various purposes. We will be introduced to databases and
    their implementation.
  prefs: []
  type: TYPE_NORMAL
