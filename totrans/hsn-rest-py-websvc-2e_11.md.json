["```py\n    http PATCH \":8888/leds/1\" brightness_level=255\n```", "```py\n curl -iX PATCH -H \"Content-Type: application/json\" -d '{\"brightness_level\":255}' \"localhost:8888/leds/1\"\n```", "```py\n    http PATCH \":8888/leds/2\" brightness_level=128\n```", "```py\n curl -iX PATCH -H \"Content-Type: application/json\" -d '{\"brightness_level\":128}' \"localhost:8888/leds/2\"\n```", "```py\n    http PATCH \":8888/leds/3\" brightness_level=64\n```", "```py\n curl -iX PATCH -H \"Content-Type: application/json\" -d '{\"brightness_level\":64}' \"localhost:8888/leds/3\"\n```", "```py\n    I've started setting the Red LED's brightness level\n```", "```py\n    I've started setting the Red LED's brightness level\n    I've finished setting the Red LED's brightness level\n    I've started setting the Green LED's brightness level\n    I've finished setting the Green LED's brightness level\n    I've started setting the Blue LED's brightness level\n    I've finished setting the Blue LED's brightness level\n```", "```py\nclass Application(web.Application): \n    def __init__(self, **kwargs): \n        handlers = [ \n            (r\"/hexacopters/([0-9]+)\", AsyncHexacopterHandler), \n            (r\"/leds/([0-9]+)\", AsyncLedHandler), \n            (r\"/altimeters/([0-9]+)\", AsyncAltimeterHandler), \n        ] \n        super(Application, self).__init__(handlers, **kwargs) \n\nif __name__ == \"__main__\": \n    application = Application() \n    port = 8888 \n    print(\"Listening at port {0}\".format(port)) \n    application.listen(port) \n    tornado_ioloop = ioloop.IOLoop.instance() \n    periodic_callback = ioloop.PeriodicCallback(lambda: None, 500) \n    periodic_callback.start() \n    tornado_ioloop.start() \n```", "```py\n    python async_drone_service.py\n```", "```py\n    Listening at port 8888\n```", "```py\npytest==3.9.3 \ncoverage==4.5.1 \npytest-cov==2.6.0 \npytest-tornasync==0.5.0 \n```", "```py\npip install -r requirements.txt \n```", "```py\nInstalling collected packages: pytest, coverage, pytest-cov, pytest-tornasync\nSuccessfully installed coverage-4.5.2 pytest-4.0.2 pytest-cov-2.6.0 pytest-tornasync-0.5.0\n\n```", "```py\n[tool:pytest] \ntestpaths = tests.py \n\n[coverage:run] \nbranch = True \nsource =  \n    drone \n    async_drone_service \n```", "```py\nasync def \ntest_set_and_get_hexacopter_motor_speed(http_server_client): \n    \"\"\" \n    Ensure we can set and get the hexacopter's motor speed \n    \"\"\" \n    patch_args = {'motor_speed_in_rpm': 200} \n    patch_response = await http_server_client.fetch( \n        '/hexacopters/1',  \n        method='PATCH',  \n        body=json.dumps(patch_args)) \n    assert patch_response.code == HTTPStatus.OK \n    get_response = await http_server_client.fetch( \n        '/hexacopters/1', \n        method='GET') \n    assert get_response.code == HTTPStatus.OK \n    get_response_data = escape.json_decode(get_response.body) \n    assert 'motor_speed_in_rpm' in get_response_data.keys() \n    assert 'is_turned_on' in get_response_data.keys() \n    assert get_response_data['motor_speed_in_rpm'] == patch_args['motor_speed_in_rpm'] \n    assert get_response_data['is_turned_on'] \n\nasync def \ntest_get_altimeter_altitude_in_feet(http_server_client): \n    \"\"\" \n    Ensure we can get the altimeter's altitude in feet \n    \"\"\" \n    get_response = await http_server_client.fetch( \n        '/altimeters/1', \n        method='GET') \n    assert get_response.code == HTTPStatus.OK \n    get_response_data = escape.json_decode(get_response.body) \n    assert 'altitude' in get_response_data.keys() \n    assert 'unit' in get_response_data.keys() \n    assert get_response_data['altitude'] >= 0 \n    assert get_response_data['altitude'] <= 3000 \n    assert get_response_data['unit'] == 'feet' \n\nasync def \ntest_get_altimeter_altitude_in_meters(http_server_client): \n    \"\"\" \n    Ensure we can get the altimeter's altitude in meters \n    \"\"\" \n    get_response = await http_server_client.fetch( \n        '/altimeters/1?unit=meters', \n        method='GET') \n    assert get_response.code == HTTPStatus.OK \n    get_response_data = escape.json_decode(get_response.body) \n    assert 'altitude' in get_response_data.keys() \n    assert 'unit' in get_response_data.keys() \n    assert get_response_data['altitude'] >= 0 \n    assert get_response_data['altitude'] <= 914.4 \n    assert get_response_data['unit'] == 'meters'\n```", "```py\n    pytest --cov -s\n```", "```py\n================================================ test session starts =================================================\nplatform darwin -- Python 3.7.1 pytest-4.0.2, py-1.7.0, pluggy-0.8.0 -- /Users/gaston/HillarPythonREST2/Tornado01/bin/python3\ncachedir: .pytest_cache\nrootdir: /Users/gaston/HillarPythonREST2/Tornado01, inifile: \nsetup.cfg\nplugins: tornasync-0.5.0, cov-2.6.0\ncollected 4 items \n\ntests.py::test_set_and_get_leds_brightness_levels PASSED                                                       [ 25%]\ntests.py::test_set_and_get_hexacopter_motor_speed PASSED                                                       [ 50%]\ntests.py::test_get_altimeter_altitude_in_feet PASSED                                                           [ 75%]\ntests.py::test_get_altimeter_altitude_in_meters PASSED                                                         [100%]\n\n ---------- coverage: platform darwin, python 3.7.1-final-0 -----------\n    Name                     Stmts   Miss Branch BrPart  Cover\n    ----------------------------------------------------------\n    async_drone_service.py     142     41     20      8    69%\n    drone.py                    63     10     10      5    79%\n    ----------------------------------------------------------\n    TOTAL                      205     51     30     13    72%\n```", "```py\nasync def test_set_invalid_brightness_level(http_server_client): \n    \"\"\" \n    Ensure we cannot set an invalid brightness level for a LED \n    \"\"\" \n    patch_args_led_1 = {'brightness_level': 256} \n    try: \n        patch_response_led_1 = await http_server_client.fetch( \n            '/leds/1',  \n            method='PATCH',  \n            body=json.dumps(patch_args_led_1)) \n    except HTTPClientError as err: \n        assert err.code == HTTPStatus.BAD_REQUEST \n    patch_args_led_2 = {'brightness_level': -256} \n    try: \n        patch_response_led_2 = await http_server_client.fetch( \n            '/leds/2',  \n            method='PATCH',  \n            body=json.dumps(patch_args_led_2)) \n    except HTTPClientError as err: \n        assert err.code == HTTPStatus.BAD_REQUEST \n    patch_args_led_3 = {'brightness_level': 512} \n    try: \n        patch_response_led_3 = await http_server_client.fetch( \n            '/leds/3',  \n            method='PATCH',  \n            body=json.dumps(patch_args_led_3)) \n    except HTTPClientError as err: \n        assert err.code == HTTPStatus.BAD_REQUEST \n\nasync def \ntest_set_brightness_level_invalid_led_id(http_server_client): \n    \"\"\" \n    Ensure we cannot set the brightness level for an invalid LED id \n    \"\"\" \n    patch_args_led_1 = {'brightness_level': 128} \n    try: \n        patch_response_led_1 = await http_server_client.fetch( \n            '/leds/100',  \n            method='PATCH',  \n            body=json.dumps(patch_args_led_1)) \n    except HTTPClientError as err: \n        assert err.code == HTTPStatus.NOT_FOUND \n\nasync def \ntest_get_brightness_level_invalid_led_id(http_server_client): \n    \"\"\" \n    Ensure we cannot get the brightness level for an invalid LED id \n    \"\"\" \n    try: \n        patch_response_led_1 = await http_server_client.fetch( \n            '/leds/100',  \n            method='GET') \n    except HTTPClientError as err: \n        assert err.code == HTTPStatus.NOT_FOUND\n```", "```py\nasync def test_set_invalid_motor_speed(http_server_client): \n    \"\"\" \n    Ensure we cannot set an invalid motor speed for the hexacopter \n    \"\"\" \n    patch_args_hexacopter_1 = {'motor_speed': 89000} \n    try: \n        patch_response_hexacopter_1 = await http_server_client.fetch( \n            '/hexacopters/1',  \n            method='PATCH',  \n            body=json.dumps(patch_args_hexacopter_1)) \n    except HTTPClientError as err: \n        assert err.code == HTTPStatus.BAD_REQUEST \n    patch_args_hexacopter_2 = {'motor_speed': -78600} \n    try: \n        patch_response_hexacopter_2 = await http_server_client.fetch( \n            '/hexacopters/1',  \n            method='PATCH',  \n            body=json.dumps(patch_args_hexacopter_2)) \n    except HTTPClientError as err: \n        assert err.code == HTTPStatus.BAD_REQUEST \n    patch_args_hexacopter_3 = {'motor_speed': 8900} \n    try: \n        patch_response_hexacopter_3 = await http_server_client.fetch( \n            '/hexacopters/1',  \n            method='PATCH',  \n            body=json.dumps(patch_args_hexacopter_3)) \n    except HTTPClientError as err: \n        assert err.code == HTTPStatus.BAD_REQUEST \n\nasync def test_set_motor_speed_invalid_hexacopter_id(http_server_client): \n    \"\"\" \n    Ensure we cannot set the motor speed for an invalid hexacopter id \n    \"\"\" \n    patch_args_hexacopter_1 = {'motor_speed': 128} \n    try: \n        patch_response_hexacopter_1 = await http_server_client.fetch( \n            '/hexacopters/100',  \n            method='PATCH',  \n            body=json.dumps(patch_args_hexacopter_1)) \n    except HTTPClientError as err: \n        assert err.code == HTTPStatus.NOT_FOUND \n\nasync def test_get_motor_speed_invalid_hexacopter_id(http_server_client): \n    \"\"\" \n    Ensure we cannot get the motor speed for an invalid hexacopter id \n    \"\"\" \n    try: \n        patch_response_hexacopter_1 = await http_server_client.fetch( \n            '/hexacopters/5',  \n            method='GET') \n    except HTTPClientError as err: \n        assert err.code == HTTPStatus.NOT_FOUND \n\nasync def test_get_altimeter_altitude_invalid_altimeter_id(http_server_clie\nnt): \n    \"\"\" \n    Ensure we cannot get the altimeter's altitude for an invalid altimeter id \n    \"\"\" \n    try: \n        get_response = await http_server_client.fetch( \n            '/altimeters/5', \n            method='GET') \n    except HTTPClientError as err: \n        assert err.code == HTTPStatus.NOT_FOUND         \n```", "```py\n    pytest --cov -v\n```", "```py\n================================================ test session starts =================================================\nplatform darwin -- Python 3.7.1, pytest-4.0.2, py-1.7.0, pluggy-0.8.0 -- /Users/gaston/HillarPythonREST2/Tornado01/bin/python3\ncachedir: .pytest_cache\nrootdir: /Users/gaston/HillarPythonREST2/Tornado01, inifile: \nsetup.cfg\nplugins: tornasync-0.5.0, cov-2.6.0\ncollected 11 items \n\ntests.py::test_set_and_get_leds_brightness_levels PASSED                                                       [  9%]\ntests.py::test_set_and_get_hexacopter_motor_speed PASSED                                                       [ 18%]\ntests.py::test_get_altimeter_altitude_in_feet PASSED                                                           [ 27%]\ntests.py::test_get_altimeter_altitude_in_meters PASSED                                                         [ 36%]\ntests.py::test_set_invalid_brightness_level PASSED                                                             [ 45%]\ntests.py::test_set_brightness_level_invalid_led_id PASSED                                                      [ 54%]\ntests.py::test_get_brightness_level_invalid_led_id PASSED                                                      [ 63%]\ntests.py::test_set_invalid_motor_speed PASSED                                                                  [ 72%]\ntests.py::test_set_motor_speed_invalid_hexacopter_id PASSED                                                    [ 81%]\ntests.py::test_get_motor_speed_invalid_hexacopter_id PASSED                                                    [ 90%]\ntests.py::test_get_altimeter_altitude_invalid_altimeter_id PASSED                                              [100%]\n\n------------ coverage: platform darwin, python 3.7.1-final-0 -----------\n    Name                     Stmts   Miss Branch BrPart  Cover\n    ----------------------------------------------------------\n    async_drone_service.py     142     17     20      2    87%\n    drone.py                    63      8     10      3    85%\n    ----------------------------------------------------------\n    TOTAL                      205     25     30      5    86%\n\n```"]