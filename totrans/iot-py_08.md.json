["```py\nimport pyupm_th02 as upmTh02\nimport pyupm_i2clcd as upmLcd\nimport time\n\nclass Lcd:\n    # The I2C address for the LCD display\n    lcd_i2c_address = 0x3E\n    # The I2C address for the RBG backlight\n    rgb_i2c_address = 0x62\n\n    def __init__(self, bus, red, green, blue):\n        self.lcd = upmLcd.Jhd1313m1(\n            bus,\n            self.__class__.lcd_i2c_address,\n            self.__class__.rgb_i2c_address)\n        self.lcd.clear()\n        self.set_background_color(red, green, blue)\n\n    def set_background_color(self, red, green, blue):\n        self.lcd.setColor(red, green, blue)\n\n    def print_line_1(self, message):\n        self.lcd.setCursor(0, 0)\n        self.lcd.write(message)\n\n    def print_line_2(self, message):\n        self.lcd.setCursor(1, 0)\n        self.lcd.write(message)\n```", "```py\nclass TemperatureAndHumidityLcd(Lcd):\n    def print_temperature(self, temperature_fahrenheit):\n        self.print_line_1(\"Temp.    {:5.2f}F\".format(temperature_fahrenheit))\n\n    def print_humidity(self, humidity):\n        self.print_line_2(\"Humidity   {0}%\".format(humidity))\n```", "```py\nif __name__ == \"__main__\":\n    temperature_and_humidity_sensor = \\\n        TemperatureAndHumiditySensor(0)\n lcd = TemperatureAndHumidityLcd(0, 0, 0, 128)\n\n    while True:\n        temperature_and_humidity_sensor.\\\n            measure_temperature_and_humidity()\n lcd.print_temperature(\n temperature_and_humidity_sensor.temperature_fahrenheit)\n lcd.print_humidity(\n temperature_and_humidity_sensor.humidity)\n        print(\"Ambient temperature in degrees Celsius: {0}\".\n              format(temperature_and_humidity_sensor.temperature_celsius))\n        print(\"Ambient temperature in degrees Fahrenheit: {0}\".\n              format(temperature_and_humidity_sensor.temperature_fahrenheit))\n        print(\"Ambient humidity: {0}\".\n              format(temperature_and_humidity_sensor.humidity))\n        # Sleep 10 seconds (10000 milliseconds)\n        time.sleep(10)\n```", "```py\npython iot_python_chapter_08_01.py\n```", "```py\nclass Oled:\n    # The I2C address for the OLED display\n    oled_i2c_address = 0x3C\n\n    def __init__(self, bus, red, green, blue):\n        self.oled = upmLcd.SSD1327(\n            bus,\n            self.__class__.oled_i2c_address)\n        self.oled.clear()\n\n    def print_line(self, row, message):\n        self.oled.setCursor(row, 0)\n        self.oled.setGrayLevel(12)\n        self.oled.write(message)\n```", "```py\nclass TemperatureAndHumidityOled(Oled):\n    def print_temperature(self, temperature_fahrenheit, temperature_celsius):self.oled.clear()\n        self.print_line(0, \"Temperature\")\n        self.print_line(2, \"Fahrenheit\")\n        self.print_line(3, \"{:5.2f}\".format(temperature_fahrenheit))\n        self.print_line(5, \"Celsius\")\n        self.print_line(6, \"{:5.2f}\".format(temperature_celsius))\n\n    def print_humidity(self, humidity):\n        self.print_line(8, \"Humidity\")\n        self.print_line(9, \"Level\")\n        self.print_line(10, \"{0}%\".format(humidity))\n```", "```py\nif __name__ == \"__main__\":\n    temperature_and_humidity_sensor = \\\n        TemperatureAndHumiditySensor(0)\n oled = TemperatureAndHumidityOled(0)\n\n    while True:\n        temperature_and_humidity_sensor.\\\n            measure_temperature_and_humidity()\n oled.print_temperature(\n temperature_and_humidity_sensor.temperature_fahrenheit,\n temperature_and_humidity_sensor.temperature_celsius)\n oled.print_humidity(\n temperature_and_humidity_sensor.humidity)\n        print(\"Ambient temperature in degrees Celsius: {0}\".\n              format(temperature_and_humidity_sensor.temperature_celsius))\n        print(\"Ambient temperature in degrees Fahrenheit: {0}\".\n              format(temperature_and_humidity_sensor.temperature_fahrenheit))\n        print(\"Ambient humidity: {0}\".\n              format(temperature_and_humidity_sensor.humidity))\n        # Sleep 10 seconds (10000 milliseconds)\n        time.sleep(10)\n```", "```py\npython iot_python_chapter_08_02.py\n```", "```py\nimport pyupm_th02 as upmTh02\nimport pyupm_i2clcd as upmLcd\nimport pyupm_servo as upmServo\nimport time\n\nclass TemperatureServo:\n    def __init__(self, pin):\n        self.servo = upmServo.ES08A(pin)\n        self.servo.setAngle(0)\n\n    def print_temperature(self, temperature_fahrenheit):\n        angle = temperature_fahrenheit\n        if angle < 0:\n            angle = 0\n        elif angle > 180:\n            angle = 180\n        self.servo.setAngle(angle)\n```", "```py\nif __name__ == \"__main__\":\n    temperature_and_humidity_sensor = \\\n        TemperatureAndHumiditySensor(0)\n    oled = TemperatureAndHumidityOled(0)\n temperature_servo = TemperatureServo(3)\n    while True:\n\n        temperature_and_humidity_sensor.\\\n            measure_temperature_and_humidity()\n        oled.print_temperature(\n            temperature_and_humidity_sensor.temperature_fahrenheit,\n            temperature_and_humidity_sensor.temperature_celsius)\n        oled.print_humidity(\n            temperature_and_humidity_sensor.humidity)\n temperature_servo.print_temperature(\n temperature_and_humidity_sensor.temperature_fahrenheit)\n        print(\"Ambient temperature in degrees Celsius: {0}\".\n              format(temperature_and_humidity_sensor.temperature_celsius))\n        print(\"Ambient temperature in degrees Fahrenheit: {0}\".\n              format(temperature_and_humidity_sensor.temperature_fahrenheit))\n        print(\"Ambient humidity: {0}\".\n              format(temperature_and_humidity_sensor.humidity))\n        # Sleep 10 seconds (10000 milliseconds)\n        time.sleep(10)\n```", "```py\npython iot_python_chapter_08_03.py\n```"]