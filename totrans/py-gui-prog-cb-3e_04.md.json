["```py\nimport tkinter as tk\n```", "```py\nwin = tk.Tk()\n```", "```py\ndoubleData = tk.DoubleVar()\nprint(doubleData.get())\ndoubleData.set(2.4)\nprint(type(doubleData))\n\nadd_doubles = 1.222222222222222222222222 + doubleData.get()\nprint(add_doubles)\nprint(type(add_doubles))\n```", "```py\nimport tkinter as tk\n```", "```py\nwin = tk.Tk()\n```", "```py\nstrData = tk.StringVar()\n```", "```py\nstrData.set('Hello StringVar')\n```", "```py\nvarData = strData.get()\n```", "```py\nprint(varData)\n```", "```py\nprint(tk.IntVar())\nprint(tk.DoubleVar())\nprint(tk.BooleanVar())\n```", "```py\nimport tkinter as tk\n# Create instance of tkinter\nwin = tk.Tk()\n# Print out the default tkinter variable values\nintData = tk.IntVar()\nprint(intData)\nprint(intData.get())\n# Set a breakpoint here to see the values in the debugger\nprint() \n```", "```py\nstrData = spin.get() \nprint(\"Spinbox value: \" + strData) \n```", "```py\nname_entered.focus()\n```", "```py\nwin.mainloop() \n```", "```py\n# Adding a Spinbox widget using a set of values \nspin = Spinbox(mighty, values=(1, 2, 4, 42, 100), width=5, bd=8, \ncommand=_spin)  \nspin.grid(column=0, row=2) \n```", "```py\n# Adding a Spinbox widget assigning values after creation \nspin = Spinbox(mighty, width=5, bd=8, command=_spin)  \nspin['values'] = (1, 2, 4, 42, 100) \nspin.grid(column=0, row=2) \n```", "```py\nGLOBAL_CONST = 42\n# ...\nprint(GLOBAL_CONST)\n```", "```py\ndef usingGlobal():\n    print(GLOBAL_CONST)\n# call the function\nusingGlobal()\n```", "```py\ndef usingGlobal():\n    GLOBAL_CONST = 777\n    print(GLOBAL_CONST)\n```", "```py\ndef usingGlobal():\n    # global GLOBAL_CONST\n    print(GLOBAL_CONST)\n    GLOBAL_CONST = 777\n    print(GLOBAL_CONST)\n```", "```py\ndef usingGlobal():\n    global GLOBAL_CONST\n    print(GLOVAL_CONST)\n    GLOBAL_CONST = 777\n    print(GLOBAL_CONST)\n```", "```py\nclass ToolTip(object):\n    def __init__(self, widget, tip_text=None):\n        self.widget = widget\n ...\nclass OOP():\n    def __init__(self): \n        self.win = tk.Tk() \n        ToolTip(self.win, 'Hello GUI')\n        # <-- use the ToolTip class here\n ...\n```", "```py\n########################################\n# Our procedural code looked like this:\n########################################\n# Button Click Function\ndef click_me(): \n    action.configure(text='Hello ' + name.get() + ' ' + \n    number_chosen.get())\n\n# Adding a Textbox Entry widget\nname = tk.StringVar()\nname_entered = ttk.Entry(mighty, width=12, textvariable=name)\nname_entered.grid(column=0, row=1, sticky='W') \n\n# Adding a Button\naction = ttk.Button(mighty, text=\"Click Me!\", command=click_me) \naction.grid(column=2, row=1) \n\nttk.Label(mighty, text=\"Choose a number:\").grid(column=1, row=0)\nnumber = tk.StringVar()\nnumber_chosen = ttk.Combobox(mighty, width=12, \ntextvariable=number, state='readonly')\nnumber_chosen['values'] = (1, 2, 4, 42, 100)\nnumber_chosen.grid(column=1, row=1)\nnumber_chosen.current(0)\n# ...\n\n******************************************** \nThe new OOP code looks like this: \n********************************************\nclass OOP(): \n    def __init__(self):                # Initializer method\n        # Create instance \n        self.win = tk.Tk()             # notice the self keyword\n\n        ToolTip(self.win, 'Hello GUI')\n        # Add a title        \n        self.win.title(\"Python GUI\")       \n        self.create_widgets() \n\n    # Button callback \n    def click_me(self): \n        self.action.configure(text='Hello ' + self.name.get() + ' ' \n        +self.number_chosen.get()) \n        # ... more callback methods  \n\n    def create_widgets(self):     \n        # Create Tab Control \n        tabControl = ttk.Notebook(self.win)     \n        tab1 = ttk.Frame(tabControl)            # Create a tab  \n        tabControl.add(tab1, text='Tab 1')      # Add the tab \n        tab2 = ttk.Frame(tabControl)           # Create second tab \n        tabControl.add(tab2, text='Tab 2')      # Add second tab \n        # Pack to make visible \n        tabControl.pack(expand=1, fill=\"both\")  \n\n        # Adding a Textbox Entry widget - using self\n        self.name = tk.StringVar()\n        name_entered = ttk.Entry(mighty, width=12, \n        textvariable=self.name)\n        name_entered.grid(column=0, row=1, sticky='W') \n        # Adding a Button - using self\n        self.action = ttk.Button(mighty, text=\"Click Me!\", \n        command=self.click_me) \n        self.action.grid(column=2, row=1)\n        # ...\n#====================== \n# Start GUI \n#====================== \noop = OOP()    # create an instance of the class\n               # use instance variable to call mainloop via oop.win\noop.win.mainloop()   \n```", "```py\nlen_ = len(aList) \n```", "```py\nfrom Ch04_Code.ToolTip import ToolTip\n```", "```py\nToolTip(self.win, 'Hello GUI')\n\n# Add a ToolTip to the Spinbox\nToolTip(self.spin, 'This is a Spinbox control') \n\n# Add tooltips to more widgets\nToolTip(self.name_entered, 'This is an Entry control') \nToolTip(self.action, 'This is a Button control') \nToolTip(self.scrol, 'This is a ScrolledText control') \n\n# Tab 2\nToolTip(curRad, 'This is a Radiobutton control')\n```"]