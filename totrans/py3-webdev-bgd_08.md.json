["```py\n\timport os\n\timport cherrypy\n\tfrom entity import AbstractEntity, Attribute, Picklist, \n\tAbstractRelation\n\tfrom browse import Browse\n\tfrom display import Display\n\tfrom editor import Editor\n\tfrom logondb import LogonDB\n\tdb=\"/tmp/crm1.db\"\n\tclass Entity(AbstractEntity):\n\t\tdatabase = db\n\tclass Relation(AbstractRelation):\n\t\tdatabase = db\n\tclass User(Entity):\n\t\tname = Attribute(notnull=True, unique=True,\n\t\t\t\tdisplayname=\"Name\", primary=True)\n\tclass Account(Entity):\n\t\tname = Attribute(notnull=True,\n\t\t\t\tdisplayname=\"Name\", primary=True)\n\tclass Contact(Entity):\n\t\tfirstname = Attribute(displayname=\"First Name\")\n\t\tlastname = Attribute(displayname=\"Last Name\",\n\t\t\t\t\tnotnull=True, primary=True) gender = Attribute(displayname=\"Gender\",\n\t\t\tnotnull=True,\n\t\t\tvalidate=Picklist(\n\t\t\t\t\t\tMale=1,\n\t\t\t\t\t\tFemale=2,\n\t\t\t\t\t\tUnknown=0))\n\ttelephone = Attribute(displayname=\"Telephone\")\nclass Address(Entity):\n\taddress = Attribute(displayname=\"Address\",\n\t\t\t\tnotnull=True, primary=True)\n\tcity = Attribute(displayname=\"City\")\n\tzipcode = Attribute(displayname=\"Zip\")\n\tcountry = Attribute(displayname=\"Country\")\n\ttelephone = Attribute(displayname=\"Telephone\")\nclass OwnerShip(Relation):\n\ta = User\n\tb = Account\nclass Contacts(Relation):\n\ta = Account\n\tb = Contact\nclass AccountAddress(Relation):\n\ta = Account\n\tb = Address\nclass ContactAddress(Relation):\n\ta = Contact\n\tb = Address\n\n```", "```py\nlogon = LogonDB() class AccountBrowser(Browse):\n\tdisplay = Display(Account)\n\tedit = Display(Account, edit=True, logon=logon,\n\t\t\t\t\t\t\t\tcolumns=Account.columns+[Address,User])\n\tadd = Display(Account, add=True, logon=logon,\n\t\t\t\t\t\t\t\tcolumns=Account.columns+[Address,User]) class UserBrowser(Browse):\n\tdisplay = Display(User)\n\tedit = Display(User, edit=True, logon=logon)\n\tadd = Display(User, add=True, logon=logon) class ContactBrowser(Browse):\n\tdisplay = Display(Contact)\n\tedit = Display(Contact, edit=True, logon=logon,\n\t\t\t\t\t\t\t\tcolumns=Contact.\ncolumns+[Account,Address])\n\tadd = Display(Contact, add=True, logon=logon,\n\t\t\t\t\t\t\t\tcolumns=Contact.\ncolumns+[Account,Address]) class AddressBrowser(Browse):\n\tdisplay = Display(Address)\n\tedit = Display(Address, edit=True, logon=logon)\n\tadd = Display(Address, add=True, logon=logon)\n\n```", "```py\nwith open('basepage.html') as f:\n\tbasepage=f.read(-1)\nclass Root():\n\tlogon = logon\n\tuser = UserBrowser(User)\n\taccount = AccountBrowser(Account,\n\t\t\t\t\t\tcolumns=Account.\ncolumns+[User,Address,Contact])\n\tcontact = ContactBrowser(Contact,\n\t\t\t\t\t\tcolumns=Contact.columns+[Address,Account])\n\taddress = AddressBrowser(Address)\n\t@cherrypy.expose\n\tdef index(self): return Root.logon.index(returnpage='../entities')\n\t@cherrypy.expose\n\tdef entities(self):\n\t\tusername = self.logon.checkauth()\n\t\tif username is None :\n\t\t\t\traise HTTPRedirect('.')\n\t\tuser=User.list(pattern=[('name',username)])\n\t\tif len(user) < 1 :\n\t\t\t\tUser(name=username)\n\t\treturn basepage%'''\n\t\t<div class=\"navigation\">\n\t\t\t\t<a href=\"user\">Users</a>\n\t\t\t\t<a href=\"http://account\">Accounts</a>\n\t\t\t\t<a href=\"contact\">Contacts</a>\n\t\t\t\t<a href=\"http://address\">Addresses</a>\n\t\t</div>\n\t\t<div class=\"content\">\n\t\t</div>\n\t\t<script>\n\t\t... Javascript omitted ...\n\t\t</script>\n\t\t'''\ncherrypy.config.update({'server.thread_pool':1})\ncherrypy.engine.subscribe('start_thread',\n\tlambda thread_index: Root.logon.connect())\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\ncherrypy.quickstart(Root(),config={\n\t\t'/':\n\t\t{ 'log.access_file' :\n\t\t\t\tos.path.join(current_dir,\"access.log\"),\n\t\t'log.screen': False,\n\t\t'tools.sessions.on': True\n\t\t},\n\t\t'/browse.js':\n\t\t{ 'tools.staticfile.on':True,\n\t\t'tools.staticfile.filename':current_dir+\"/browse.js\"\n\t\t},\n\t\t'/base.css':\n\t\t{ 'tools.staticfile.on':True,\n\t\t'tools.staticfile.filename':current_dir+\"/base.css\"\n\t\t}\n})\n\n```", "```py\nimport os\nimport cherrypy\nfrom entity import AbstractEntity, Attribute, Picklist\nfrom browse import Browse\nfrom display import Display\nfrom logondb import LogonDB\ndb=\"/tmp/crmcontact.db\"\nclass Entity(AbstractEntity):\n\tdatabase = db\nclass Contact(Entity):\n\tfirstname = Attribute(displayname=\"First Name\")\n\tlastname = Attribute(displayname=\"Last Name\",\n\t\t\t\t\t\t\t\t\t\t\tnotnull=True, \nprimary=True)\n\tgender = Attribute(displayname=\"Gender\",\n\t\t\t\t\t\t\t\t\t\t\tnotnull=True,\n\t\t\t\t\t\t\t\t\t\t\tvalidate=Picklist(\nMale=1,Female=2,Unknown=0))\n\ttelephone = Attribute(displayname=\"Telephone\")\nclass ContactBrowser(Browse):\n\tedit = Display(Contact, edit=True)\n\tadd = Display(Contact, add=True)\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\ncherrypy.quickstart(ContactBrowser(Contact),config={\n\t'/':\n\t{ 'log.access_file' :\n\t\t\tos.path.join(current_dir,\"access.log\"),\n\t'log.screen': False,\n\t'tools.sessions.on': True\n\t}\n})\n\n```", "```py\n\tdef __init__(self, entity, edit=False, add=False,\n\t\t\t\t\t\t\t\tlogon=None, columns=None):\n\t\tself.entity = entity\n\t\tself.edit = edit\n\t\tself.add = add\n\t\tself.logon = logon\n\t\tif columns is None:\n\t\t\tself.columns = entity.columns\n\t\telse:\n\t\t\tself.columns = columns\n\n```", "```py\n@cherrypy.expose\ndef index(self, _=None,\n\tstart=0, pattern=None, sortorder=None, cacheid=None,\n\tnext=None, previous=None, first=None, last=None,\n\tclear=None):\n\ts=\"\".join(super().index(_, start, pattern, sortorder,\n\t\t\t\t\t\t\tcacheid, next,previous, first, last, \nclear))\n\ts+='''\n\t<script>\n\t$(\"table.entitylist tr\").dblclick(function(){\n\t\t\t\tvar id=$(this).attr('id');\n\t\t\t\t$(\"body\").load('edit/?id='+id);\n\t\t\t});\n\t</script>\n\t'''\n\treturn basepage%s\n\n```", "```py\n@cherrypy.expose\ndef index(self, id=None, _=None,\n\t\tadd=None, edit=None, related=None, **kw):\n\tmount = cherrypy.request.path_info\n\tif not id is None :\n\t\tid = int(id)\n\tkv=[]\n\tsubmitbutton=\"\"\n\tif edit or add:\n\t\t... code to process the results of an edit/add form omitted\n\taction=\"display\"\n\tautocomplete=''\n\tif not id is None:\n\t\te=self.entity(id=id)\n\t\t\tfor c in self.columns:\n\t\t\t\tif c in self.entity.columns:\n\t\t\t\t\tkv.append('<label for=\"%s\">%s</label>'%\n\t\t\t\t\t\t(c,self.entity.displaynames[c]))\n\t\t\t\t\tif c in self.entity.validators and type(\n\t\t\t\t\t\tself.entity.validators[c])==Picklist:\n\t\t\t\t\t\tkv.append('<select name=\"%s\">'%c)\n\t\t\t\t\t\tkv.extend(['<option %s>%s</option>'%\n\t\t\t\t\t\t\t(\"selected\" if v==getattr(e,c)\n\t\t\t\t\t\t\telse \"\",k)\n\t\t\t\t\t\tfor k,v in self.entity.validators[c]\n\t\t\t\t\t\t\t.list.items()])\n\t\t\t\t\t\tkv.append('</select>')\n\t\t\t\t\telse:\n\t\t\t\t\tkv.append(\n\t\t\t\t\t'<input type=\"text\" name=\"%s\" value=\"%s\">'%\n\t\t\t\t\t\t(c,getattr(e,c)))\n\t\t\t\t\telif issubclass(c,AbstractEntity):\n\t\t\t\t\t\tkv.append(\n\t\t\t\t\t\t'<label for=\"%s\">%s</label>'%\n\t\t\t\t\t\t(c.__name__,c.__name__))\n\t\t\t\t\t\tv=\",\".join([r.primary for r in e.get(c)])\n\t\t\t\t\t\tkv.append(\n\t\t\t\t\t\t'<input type=\"text\" name=\"%s\" value=\"%s\">'%\n\t\t\t\t\t\t(c.__name__,v))\n\t\t\t\t\t\tautocomplete += '''\n\t$(\"input[name=%s]\").autocomplete({source:\"%s\",minLength:2});\n\t\t\t\t\t\t'''%(c.__name__,\n\t\t\t\t\t\t\tmount+'autocomplete?entity='+c.__name__)\n\t\t\t\tyield self.related_entities(e) if self.edit:\n\t\t\t\t\taction='edit'\n\t\t\t\t\tsubmitbutton='''\n\t\t\t\t\t<input type=\"hidden\" name=\"id\" value=\"%s\">\n\t\t\t\t\t<input type=\"hidden\" name=\"related\" value=\"%s,%s\">\n\t\t\t\t\t<input type=\"submit\" name=\"edit\" value=\"Edit\">\n\t\t\t\t\t'''%(id,self.entity.__name__,id)\n\t\t\telif self.add:\n\t\t\t\taction='add'\n\t\t\t\t\tfor c in self.columns:\n\t\t\t\t\t\tif c in self.entity.columns:\n\t\t\t\t\t\t\tkv.append('<label for=\"%s\">%s</label>'%(\n\t\t\t\t\t\t\t\tc,self.entity.displaynames[c]))\n\t\t\t\t\t\t\tif c in self.entity.validators and type(\n\t\t\t\t\t\t\t\tself.entity.validators[c])==Picklist:\n\t\t\t\t\t\t\tkv.append('<select name=\"%s\">'%c)\n\t\t\t\t\t\t\tkv.extend(['<option>%s</option>'%v\n\t\t\t\t\t\t\t\tfor v in self.entity.validators[c].\n\t\t\t\t\t\t\t\t\tlist.keys()])\n\t\t\t\t\t\t\t\tkv.append('</select>')\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tkv.append('<input type=\"text\" name=\"%s\">'\n\t\t\t\t\t\t\t\t\t%c)\n\t\t\t\t\t\telif c==\"related\":\n\t\t\t\t\t\t\tpass\n\t\t\t\t\t\telif issubclass(c,AbstractEntity):\n\t\t\t\t\t\t\tkv.append('<label for=\"%s\">%s</label>'%\n\t\t\t\t\t\t\t\t(c.__name__,c.__name__))\n\t\t\t\t\t\t\tkv.append('<input type=\"text\" name=\"%s\">'%\n\t\t\t\t\t\t\t\tc.__name__)\n\t\t\t\t\t\t\tautocomplete += '''\n\t$(\"input[name=%s]\").autocomplete({source:\"%s\",minLength:2});\n\t\t\t\t\t\t\t'''%(c.__name__,\n\t\t\t\t\t\t\t\tmount+'autocomplete?entity='+c.__name__)\n\t\t\tsubmitbutton='''\n\t\t\t<input type=\"hidden\" name=\"related\" value=\"%s\">\n\t\t\t<input type=\"submit\" name=\"add\" value=\"Add\">\n\t\t\t'''%related\n\t\telse:\n\t\t\tyield \"\"\"cannot happen\n\t\t\tid=%s, edit=%s, add=%s, self.edit=%s, self.add=%s\n\t\t\t\"\"\"%(id,edit,add,self.edit,self.add) yield '<form action=\"%s\">'%action\n\t\tfor k in kv:\n\t\t\tyield k\n\t\tyield submitbutton\n\t\tyield \"</form>\"\n\t\tyield '<script>'+autocomplete+'</script>'\n\n```", "```py\n<form action=\"edit\">\n\t<label for=\"firstname\">First Name</label>\n\t<input name=\"firstname\" value=\"Eva\" type=\"text\">\n\t<label for=\"lastname\">Last Name</label>\n\t<input name=\"lastname\" value=\"Johnson\" type=\"text\">\n\t<label for=\"gender\">Gender</label>\n\t<select name=\"gender\">\n\t\t\t<option selected=\"selected\">Unknown</option>\n\t\t\t<option>Male</option>\n\t\t\t<option>Female</option>\n\t</select>\n\t<label for=\"telephone\">Telephone</label>\n\t<input name=\"telephone\" value=\"\" type=\"text\">\n\t<label for=\"Account\">Account</label>\n\t<input name=\"Account\" value=\"\" type=\"text\">\n\t<label for=\"Address\">Address</label>\n\t<input name=\"Address\" value=\"\" type=\"text\">\n\t<input name=\"id\" value=\"2\" type=\"hidden\">\n\t<input name=\"edit\" value=\"Edit\" type=\"submit\">\n</form>\n<script>\n$(\"input[name=Account]\").autocomplete({source:\"autocomplete?entity=\nAccount\",minLength:2});\n$(\"input[name=Address]\").autocomplete({source:\"autocomplete?entity=\nAddress\",minLength:2});\n</script>\n\n```", "```py\n@cherrypy.expose\ndef index(self, id=None, _=None,\n\t\tadd=None, edit=None, related=None, **kw):\n\tmount = cherrypy.request.path_info\n\tif not id is None :\n\t\tid = int(id)\n\tkv=[]\n\tsubmitbutton=\"\"\n\tif edit or add:\n\t\tif (edit and add):\n\t\t\traise HTTPError(500)\n\t\tif not self.logon is None:\n\t\t\tusername=self.logon.checkauth()\n\t\t\tif username is None: raise HTTPRedirect('/')\n\t\tif add:\n\t\t\tattr={}\n\t\t\tcols={}\n\t\t\trelations={c.__name__:c for c in self.columns\n\t\t\t\tif type(c)!=str}\n\t\t\tfor k,v in kw.items(): if not k in self.entity.columns:\n\t\t\t\t\tattr[k]=v\n\t\t\t\t\tif not k in relations :\n\t\t\t\t\t\traise KeyError(k,\n\t\t\t\t\t\t\t'not a defined relation')\n\t\t\t\telse:\n\t\t\t\t\tcols[k]=v e=self.entity(**cols)\n\t\t\tfor k,v in attr.items():\n\t\t\t\tif v != None and v != '':\n\t\t\t\t\trelentity = relations[k]\n\t\t\t\t\tprimary = relentity.primaryname\n\t\t\t\t\trels = relentity.listids(\n\t\t\t\t\t\tpattern=[(primary,v)])\n\t\t\t\t\tif len(rels):\n\t\t\t\t\t\tr = relentity(id=rels[0])\n\t\t\t\t\telse:\n\t\t\t\t\t\tr = relentity(**{primary:v})\n\t\t\t\t\te.add(r)\n\t\t\tif not related is None and related != '':\n\t\t\t\tr=related.split(',')\n\t\t\t\tre=e.relclass[r[0]](id=int(r[1]))\n\t\t\t\te.add(re)\n\t\t\tredit = sub(Display.finaladd,'',mount)\n\t\t\traise cherrypy.HTTPRedirect(redit)\n\t\telif edit:\n\t\t\te=self.entity(id=id)\n\t\t\te.update(**kw)\n\t\t\traise cherrypy.HTTPRedirect(\n\t\t\t\tmount.replace('edit','').replace('//','/'))\n\t\t\t\t...code to display and instance omitted\n\n```", "```py\n@cherrypy.expose\ndef autocomplete(self, entity, term, _=None): entity={c.__name__:c for c in self.columns\n\t\tif type(c)!=str}[entity]\n\tnames=entity.getcolumnvalues(entity.primaryname)\n\tpat=compile(term,IGNORECASE)\n\treturn json.dumps(list(takewhile(lambda x:pat.match(x),\n\t\t\t\tdropwhile(lambda x:not pat.match(x),names))))\n\n```", "```py\nclassmap = {} \nfor c in self.columns: \n\tif type(c)!=str: \n\t\t\tclassmap[c.__name__] = c \nentity = classmap[entity]\n\n```", "```py\nimport os\nimport cherrypy\nfrom entity import AbstractEntity, Attribute, Picklist\nfrom browse import Browse\nfrom display import Display\nfrom logondb import LogonDB\ndb=\"/tmp/fruits.db\"\nclass Entity(AbstractEntity):\n\tdatabase = db\nclass Fruit(Entity):\n\tname = Attribute(displayname=\"Name\")\n\tcolor = Attribute(displayname=\"Color\",\n\t\t\tnotnull = True,\n\t\t\tvalidate= Picklist([('Yellow',1),('Green',2),('Orange',0)]))\n\ttaste = Attribute(displayname=\"Taste\",\n\t\t\tnotnull = True,\n\t\t\tvalidate= Picklist(Sweet=1,Sour=2))\nclass FruitBrowser(Browse):\n\tedit = Display(Fruit, edit=True)\n\tadd = Display(Fruit, add=True)\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\ncherrypy.quickstart(FruitBrowser(Fruit),config={\n\t\t\t'/':\n\t\t\t{ 'log.access_file' : os.path.join(current_dir,\"access.\nlog\"),\n\t\t\t'log.screen': False,\n\t\t\t'tools.sessions.on': True\n\t\t\t}\n})\n\n```", "```py\nclass Picklist:\n\tdef __init__(self,list=None,**kw):\n\t\tself.list = collections.OrderedDict(list) if not list is \nNone else collections.OrderedDict()\n\t\tself.list.update(kw)\n\tdef __getitem__(self,key):\n\t\treturn self.list[key]\n\n```", "```py\ndef __setattr__(self,name,value):\n\t\tif name in self.validators :\n\t\t\tif type(self.validators[name])==Picklist:\n\t\t\t\ttry:\n\t\t\t\t\tvalue=self.validators[name].list[value]\n\t\t\t\texcept:\n\t\t\t\t\t# key not known, try value directly\n\t\t\t\t\tif not value in list(\n\t\t\t\tself.validators[name].list.values()):\n\t\t\t\t\t\t\traise AttributeError(\n\t\t\"assignment to \"+name+\" fails, \"+\n\t\tstr(value)+\" not in picklist\")\n\t\t\telif not self.validators[name](value):\n\t\t\t\t\traise AttributeError(\n\t\t\t\t\t\"assignment to \"+name+\" does not validate\")\n\tobject.__setattr__(self,name,value)\n\n```", "```py\nfruit.color = 'Green'\nfruit.color = 2\n\n```"]