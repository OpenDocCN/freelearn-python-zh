["```py\n# This code block runs 5 times for values of x between 0 and 4\n|  | :FOR | ${x} | IN RANGE | 5\n# This code block runs 5 times for values of x between 11 and 15\n|  | :FOR | ${x} | IN RANGE | 11 | 16 | \n# This code block runs 5 times for x = 10, 12, 14, 16,18\n|  | :FOR | ${x} | IN RANGE | 10  |  20 |  2  |\n|  |    |  Log  |  ${x} |\n```", "```py\n|  |  | Run Keyword If | ${val} > 10 | Exit For Loop\n```", "```py\n|  |  | Exit For Loop If | ${val} > 10 |\n```", "```py\n|  |  | Continue Keyword If | ${val} > 10 | Exit For Loop\n```", "```py\nimport time \nvar = [] \nwhile(time.time()%10 <8): \n  var.append(int(time.time()%10)) \n  time.sleep(1)\n```", "```py\n| *Setting* | *Value* | \n| Variables | ./dynamic_variables.py | \n| *Test Cases* | *Action* | *Argument* | \n| List should exist | Variable Should Exist | @{var} | \n| Variable not declared should not be there | Variable Should Not Exist | ${val} | \n| Iterate over Dynamic variables | :FOR | ${val} | IN | @{var} | \n|                |         | Log      | ${val} | \n|                | Log  | finished iteration |\n```", "```py\nTemplate to print params  [Template]  Log\n                                      Alpha\n                                      Beta\n                                      Gamma\n                                      Delta\n```", "```py\nA normal test to print param\n                Log  Alpha\n                Log  Beta\n                Log  Gamma\n                Log  Delta\n```", "```py\nStart Process  firefox  google.com\n```", "```py\nOpen google.com homepage in firefox browser\n```", "```py\n Open ${url} homepage on ${prog} browser  Start Process  ${prog}  ${url}\n```", "```py\n  should \"be a WEBrick\" do \n    GET(\"/test\") \n    status.should.equal 200 \n    response[\"SERVER_SOFTWARE\"].should =~ /WEBrick/ \n    response[\"HTTP_VERSION\"].should.equal \"HTTP/1.1\" \n    response[\"SERVER_PROTOCOL\"].should.equal \"HTTP/1.1\" \n    response[\"SERVER_PORT\"].should.equal \"9202\" \n    response[\"SERVER_NAME\"].should.equal \"127.0.0.1\" \n  end\n```", "```py\ndetails = [1,'ssh', .034, 'main-repository']\nuser = {'name':'john doe', 'age': 21, 'account':'basic'}\n```", "```py\n*** Setting ***\n\nLibrary  Collections\nVariables  filename.py\n\n*** Test Cases ***\n\nLists  Should not be empty  ${details}\n       Append to List  ${details}  12500\n       ${custom}  Create List  1  ssh  .34  main-repository  12500\n       Lists should be equal  ${details}  ${custom}\n\nDicts  Should not be empty  ${user}\n       Dictionary should contain key  ${user}  name\n       Dictionary should contain value  ${user}  21\n       Dictionary should contain value  ${user}  basic\n```", "```py\nExecute Manual Step  Perform manual operation and continue\n```", "```py\n  Take Screenshot  screenpic.jpg  width=500 px\n```", "```py\n*** Setting ***\nLibrary  Telnet\n*** Test Cases ***\nTelnet Session  Close All Connections\n    Open Connection  127.0.0.1  prompt=test\n    Login  test  test  login_prompt=login:  password_prompt=password:\n    ${details}  Execute Command  ls-l\n    Log  ${details}\n```", "```py\nLibrary  Remote  http://localhost:8567\n```", "```py\ndef strings_should_be_equal(self, str1, str2):\n  print \"Comparing '%s' to '%s'\" % (str1, str2)\n  if str1 != str2\n    raise AssertionError(\"Given strings are not equal\")\n  else:\n    return \"Given Strings are not equal\"\n  if name == '__main__':\n    from robotremoteserver import RobotRemoteServer\n    RobotRemoteServer(ExampleRemoteLibrary(), *sys.argv[1:])\n```"]