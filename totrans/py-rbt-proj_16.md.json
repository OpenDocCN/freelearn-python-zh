["```py\nimport numpy as np\nimport pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5)\ndata = pd.read_csv('dataset.csv')\n\nx = np.array(data[['Time', 'Temp']])\ny = np.array(data[['State']]).ravel()\n\nknn.fit(x,y)\n\ntime = raw_input(\"Enter time\")\ntemp = raw_input(\"Enter temp\")\n\ndata =. []\n\ndata.append(float(time))\ndata.append(float(temp))\n\na = knn.predict([data])\n\nprint(a[0])}\n```", "```py\nimport numpy as np\n```", "```py\nimport pandas as pd\n```", "```py\nfrom sklearn.neighbors import KNeighborsClassifier\n```", "```py\nknn = KNeighborsClassifier(n_neighbors=5)\n```", "```py\ndata = pd.read_csv('dataset.csv')\n```", "```py\nx = np.array(data[['Time', 'Temp']])\n```", "```py\ny = np.array(data[['State']]).ravel()\n```", "```py\nknn.fit(x,y)\n```", "```py\ntime = raw_input(\"Enter time\")\ntemp = raw_input(\"Enter temp\")\n```", "```py\ndata =. []\n```", "```py\ndata.append(float(time))\ndata.append(float(temp))\n```", "```py\na = knn.predict([data])\n```", "```py\nprint(a[0])\n```", "```py\nimport Adafruit_DHT\nimport datetime\nimport RPi.GPIO as GPIO\nimport time\nimport numpy as np\nimport pandas as pd\nimport Adafruit_DHT\nfrom sklearn.neighbors import KNeighborsClassifier\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setwarnings(False)\n\nfan = 22\nlight = 23\nsw1 = 13\nsw2 = 14\n\nGPIO.setup(led1,GPIO.OUT)\nGPIO.setup(led2,GPIO.OUT)\nGPIO.setup(sw1,GPIO.IN)\nGPIO.setup(sw2,GPIO.IN)\n\nsensor = 11\npin = 2\n\nf = open(\"dataset.csv\",\"a+\")\ncount = 0\nwhile count < 50:\n\n data = \"\"\n\n H = datetime.datetime.now().strftime('%H')\n M = datetime.datetime.now().strftime('%M')\n\n data = str(H)+\".\"+str(M)\n humidity,temperature = Adafruit_DHT.read_retry(sensor,pin)\n data = data + \",\" + str(temperature)\n\nprev_state = state\n\n if (GPIO.input(sw1) == 0) and (GPIO.input(sw2) == 0):\n     state = 0\n     GPIO.output(light,GPIO.LOW)\n     GPIO.output(fan,GPIO.LOW)\n\n elif (GPIO.input(sw1) == 0) and (GPIO.input(sw2) == 1):\n     state = 1\n     GPIO.output(light,GPIO.HIGH)\n     GPIO.output(fan,GPIO.LOW)\n\n elif (GPIO.input(sw1) == 1) and (GPIO.input(sw2) == 0):\n    state = 2\n     GPIO.output(light,GPIO.LOW)\n     GPIO.output(fan,GPIO.HIGH)\n\n elif (GPIO.input(sw1) == 1) and (GPIO.input(sw2) == 1):\n    state = 3\n     GPIO.output(light,GPIO.HIGH)\n     GPIO.output(fan,GPIO.HIGH)\n\n data = \",\"+str(state)\n\nif prev_state =! state:\n\n     f.write(data)\n     count = count+1\n\nf.close()\n```", "```py\nf = open(\"dataset.csv\",\"a+\")\n```", "```py\n data = \"\"\n```", "```py\n data = str(H)+\".\"+str(M)\n```", "```py\n humidity,temperature = Adafruit_DHT.read_retry(sensor,pin)\n```", "```py\ndata = data + \",\" + str(temperature)\n```", "```py\n if (GPIO.input(sw1) == 0) and (GPIO.input(sw2) == 0):\n state = 0\n elif (GPIO.input(sw1) == 0) and (GPIO.input(sw2) == 1):\n state = 1\n elif (GPIO.input(sw1) == 1) and (GPIO.input(sw2) == 0):\n state = 2\n elif (GPIO.input(sw1) == 1) and (GPIO.input(sw2) == 1):\n state = 3\n```", "```py\n data = \",\"+str(state)\n```", "```py\nf.write(data)\n```", "```py\nif prev_state =! state:\n\n     f.write(data)\n     count = count+1\n```", "```py\nimport Adafruit_DHT\nimport datetime\nimport RPi.GPIO as GPIO\nimport time\nimport numpy as np\nimport pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setwarnings(False)\n\nlight = 22\nfan = 23\nsw1 = 13\nsw2 = 14\n\nGPIO.setup(light,GPIO.OUT)\nGPIO.setup(fan,GPIO.OUT)\nGPIO.setup(sw1,GPIO.IN)\nGPIO.setup(sw2,GPIO.IN)\n\nsensor = 11\npin = 2\n\nf = open(\"dataset.csv\",\"a+\")\ncount = 0\n\nwhile count < 200:\n\n        data = \"\"\n\n        H = datetime.datetime.now().strftime('%H')\n        M = datetime.datetime.now().strftime('%M')\n\n        data = str(H)+\".\"+str(M)\n        humidity,temperature = Adafruit_DHT.read_retry(sensor,pin)\n        data = data + \",\" + str(temperature)\n\nprev_state = state\n\n if (GPIO.input(sw1) == 0) and (GPIO.input(sw2) == 0):\n     state = 0\n     GPIO.output(light,GPIO.LOW)\n     GPIO.output(fan,GPIO.LOW)\n\n elif (GPIO.input(sw1) == 0) and (GPIO.input(sw2) == 1):\n     state = 1\n     GPIO.output(light,GPIO.HIGH)\n     GPIO.output(fan,GPIO.LOW)\n\n elif (GPIO.input(sw1) == 1) and (GPIO.input(sw2) == 0):\n    state = 2\n     GPIO.output(light,GPIO.LOW)\n     GPIO.output(fan,GPIO.HIGH)\n\n elif (GPIO.input(sw1) == 1) and (GPIO.input(sw2) == 1):\n    state = 3\n     GPIO.output(light,GPIO.HIGH)\n     GPIO.output(fan,GPIO.HIGH)\n\n data = \",\"+str(state)\n\n if prev_state =! state:\n\n     f.write(data)\n     count = count+1\n\nTest_set = []\nknn = KNeighborsClassifier(n_neighbors=5)\ndata = pd.read_csv('dataset.csv')\n\nX = np.array(data[['Time', 'Temp']])\ny = np.array(data[['State']]).ravel()\n\nknn.fit(X,y)\n\nWhile Count > 200:\n\n    time = \"\"\n\n    H = datetime.datetime.now().strftime('%H')\n    M = datetime.datetime.now().strftime('%M')\n\n    time = float(str(H)+\".\"+str(M))\n\n    humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)\n\n temp = int(temperature)\n test_set.append(time)\n test_set.append(temp)\n\n a = knn.predict([test_set]])\n Out = a[0]\n\n If out == 0:\n GPIO.output(light,GPIO.LOW)\n GPIO.output(fan,GPIO.LOW)\n\n If out == 1:\n GPIO.output(light,GPIO.LOW)\n GPIO.output(fan,GPIO.HIGH)\n\n If out == 2:\n GPIO.output(light,GPIO.HIGH)\n GPIO.output(fan,GPIO.LOW)\n\n If out == 3:\n GPIO.output(light,GPIO.HIGH)\n GPIO.output(fan,GPIO.HIGH)\n\n```", "```py\nwhile count > 200:\n```", "```py\n    time = \"\"\n```", "```py\n    H = datetime.datetime.now().strftime('%H')\n    M = datetime.datetime.now().strftime('%M')\n```", "```py\n    time = float(str(H)+\".\"+str(M))\n```", "```py\n temp = int(temperature)\n```", "```py\n test_set.append(time)\n test_set.append(temp)\n```", "```py\n a = knn.predict([test_set]])\n```", "```py\n Out = a[0]\n```", "```py\n If out == 0:\n GPIO.output(light,GPIO.LOW)\n GPIO.output(fan,GPIO.LOW)\n\n If out == 1:\n GPIO.output(light,GPIO.LOW)\n GPIO.output(fan,GPIO.HIGH)\n\n If out == 2:\n GPIO.output(light,GPIO.HIGH)\n GPIO.output(fan,GPIO.LOW)\n\n If out == 3:\n GPIO.output(light,GPIO.HIGH)\n GPIO.output(fan,GPIO.HIGH)\n```"]