- en: Chapter 8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Trace Tables
  prefs: []
  type: TYPE_NORMAL
- en: 8.1 What is a Trace Table?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A trace table is a technique used to test algorithms or computer programs for
    logic errors that occur while the algorithm or program executes.
  prefs: []
  type: TYPE_NORMAL
- en: The trace table simulates the flow of execution. Statements are executed step
    by step, and the values of variables change as an assignment statement is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Trace tables are useful for educational purposes. They are typically employed
    by novice programmers to help them visualize how a particular algorithm or program
    works and to assist them in detecting logic errors.
  prefs: []
  type: TYPE_NORMAL
- en: A typical trace table is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | variable1 | variable2 | variable3 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 |   |   |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| 2 |   |   |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| … |   |   |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: Let's see a trace table in action! For the following Python program, a trace
    table is created to determine the values of the variables in each step.
  prefs: []
  type: TYPE_NORMAL
- en: x = 10
  prefs: []
  type: TYPE_NORMAL
- en: y = 15
  prefs: []
  type: TYPE_NORMAL
- en: z = x * y
  prefs: []
  type: TYPE_NORMAL
- en: z += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(z)
  prefs: []
  type: TYPE_NORMAL
- en: The trace table for this program is shown below. Notes are optional, but they
    help the reader to better understand what is really happening.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | x | y | z |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | x = 10 | The value 10 is assigned to variable x. | 10 | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | y = 15 | The value 15 is assigned to variable y. | 10 | 15 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | z = x * y | The result of the product x * y is assigned to z. | 10 |
    15 | 150 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | z += 1 | Variable z is incremented by one. | 10 | 15 | 151 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | print(z) | It displays: 151 |'
  prefs: []
  type: TYPE_TB
- en: Exercise 8.1-1 Creating a Trace Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a trace table to determine the values of the variables in each step of
    the Python program for two different executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) 0.3, and (ii) 4.5.'
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: c = 3
  prefs: []
  type: TYPE_NORMAL
- en: c = c * b
  prefs: []
  type: TYPE_NORMAL
- en: a = 10 * c
  prefs: []
  type: TYPE_NORMAL
- en: a = a % 10
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: i)For the input value of 0.3, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | b | c |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | b = float(input()) | User enters value 0.3 | ? | 0.3 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | c = 3 |   | ? | 0.3 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | c = c * b |   | ? | 0.3 | 0.9 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | a = 10 * c |   | 9.0 | 0.3 | 0.9 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | a = a % 10 |   | 9.0 | 0.3 | 0.9 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(a) | It displays: 9.0 |'
  prefs: []
  type: TYPE_TB
- en: ii)For the input value of 4.5, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | b | c |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | b = float(input()) | User enters value 4.5 | ? | 4.5 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | c = 3 |   | ? | 4.5 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | c = c * b |   | ? | 4.5 | 13.5 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | a = 10 * c |   | 135.0 | 4.5 | 13.5 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | a = a % 10 |   | 5.0 | 4.5 | 13.5 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(a) | It displays: 5.0 |'
  prefs: []
  type: TYPE_TB
- en: Exercise 8.1-2 Creating a Trace Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: What result is displayed when the following program is executed?
  prefs: []
  type: TYPE_NORMAL
- en: Ugly = "Beautiful"
  prefs: []
  type: TYPE_NORMAL
- en: Beautiful = "Ugly"
  prefs: []
  type: TYPE_NORMAL
- en: Handsome = Ugly
  prefs: []
  type: TYPE_NORMAL
- en: print("Beautiful")
  prefs: []
  type: TYPE_NORMAL
- en: print(Ugly)
  prefs: []
  type: TYPE_NORMAL
- en: print(Handsome)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a trace table to find the output result.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | Ugly | Beautiful | Handsome |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Ugly = "Beautiful" | The string “Beautiful” is assigned to the variable
    Ugly. | Beautiful | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Beautiful = "Ugly" | The string “Ugly” is assigned to the variable Beautiful.
    | Beautiful | Ugly | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Handsome = Ugly | The value of variable Ugly is assigned to the variable
    Handsome. | Beautiful | Ugly | Beautiful |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | print("Beautiful") | It displays: Beautiful |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | print(Ugly) | It displays: Beautiful |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(Handsome) | It displays: Beautiful |'
  prefs: []
  type: TYPE_TB
- en: Exercise 8.1-3 Swapping Values of Variables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter two values, in variables a and
    b. At the end of the program, the two variables must swap their values. For example,
    if variables a and b contain the values 5 and 7 respectively, after swapping their
    values, variable a must contain the value 7 and variable b must contain the value
    5!
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The following program, even though it may seem correct, is erroneous and doesn't
    really swap the values of variables a and b!
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: a = b
  prefs: []
  type: TYPE_NORMAL
- en: b = a
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  prefs: []
  type: TYPE_NORMAL
- en: Let's see why! Suppose the user enters two values, 5 and 7\. The trace table
    is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | b |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) | User enters the value 5 | 5 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | b = int(input()) | User enters the value 7 | 5 | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | a = b | The value of variable b is assigned to variable a. Value 5 is
    lost! | 7 | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | b = a | The value of variable a is assigned to variable b | 7 | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | print(a) | It displays: 7 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(b) | It displays: 7 |'
  prefs: []
  type: TYPE_TB
- en: Oops! Where is the value 5?
  prefs: []
  type: TYPE_NORMAL
- en: The solution wasn't so obvious after all! So, how do you really swap values
    anyway?
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider two glasses: a glass of orange juice (called glass A), and a glass
    of lemon juice (called glass B). If you want to swap their content, all you must
    do is find and use one extra empty glass (called glass C).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter08-01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The steps that must be followed are:'
  prefs: []
  type: TYPE_NORMAL
- en: 1)Empty the contents of glass A (orange juice) into glass C.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter08-02.png)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Empty the contents of glass B (lemon juice) into glass A.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter08-03.png)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Empty the contents of glass C (orange juice) into glass B.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter08-04.png)
  prefs: []
  type: TYPE_NORMAL
- en: Swapping completed successfully!
  prefs: []
  type: TYPE_NORMAL
- en: You can follow the same steps to swap the contents of two variables in Python.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: c = a      #Empty the contents of glass A (orange juice) into glass C
  prefs: []
  type: TYPE_NORMAL
- en: a = b      #Empty the contents of glass B (lemon juice) into glass A
  prefs: []
  type: TYPE_NORMAL
- en: b = c      #Empty the contents of glass C (orange juice) into glass B
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The text after a hash character is considered a comment
    and is never executed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, in Python you can also swap the contents of two variables
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: a, b = b, a
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 8.1-4 Swapping Values of Variables – An Alternative Approach
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter two integer values, in variables
    a and b. In the end, the two variables must swap their values. Then, use a trace
    table with input values 5 and 7 to confirm the correctness of your code.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Since the variables contain numeric values, you can use the following Python
    program (as an alternative approach).
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: a = a + b
  prefs: []
  type: TYPE_NORMAL
- en: b = a - b
  prefs: []
  type: TYPE_NORMAL
- en: a = a - b
  prefs: []
  type: TYPE_NORMAL
- en: print(a, b)
  prefs: []
  type: TYPE_NORMAL
- en: Let's now use a trace table with input values 5 and 7 to confirm that the variables
    a and b correctly swap their content.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | b |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) | User enters value 5 | 5 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | b = int(input()) | User enters value 7 | 5 | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | a = a + b |   | 12 | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | b = a ‑ b |   | 12 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | a = a ‑ b |   | 7 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(a, b) | It displays: 7 5 |'
  prefs: []
  type: TYPE_TB
- en: '![](img/notice.jpg)The disadvantage of this method is that it cannot swap the
    contents of alphanumeric variables (strings).'
  prefs: []
  type: TYPE_NORMAL
- en: '8.2 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)A trace table is a technique for testing a computer.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Trace tables help a programmer find errors in a computer program.
  prefs: []
  type: TYPE_NORMAL
- en: 3)You cannot execute a computer program without first creating its corresponding
    trace table.
  prefs: []
  type: TYPE_NORMAL
- en: 4)In order to swap the values of two integer variables, you always need an extra
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: 8.3 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Create a trace table to determine the values of the variables in each step
    of the Python program when a value of 3 is entered.
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = a + 10
  prefs: []
  type: TYPE_NORMAL
- en: a = b * (a - 3)
  prefs: []
  type: TYPE_NORMAL
- en: c = 3 * b / 6
  prefs: []
  type: TYPE_NORMAL
- en: d = c * c
  prefs: []
  type: TYPE_NORMAL
- en: d -= 1
  prefs: []
  type: TYPE_NORMAL
- en: print(d)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create a trace table to determine the values of the variables in each step
    of the Python program for three different executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) 3, (ii) 4, and (iii) 1.'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: a = (a + 1) * (a + 1) + 6 / 3 * 2 + 20
  prefs: []
  type: TYPE_NORMAL
- en: b = a % 13
  prefs: []
  type: TYPE_NORMAL
- en: c = b % 7
  prefs: []
  type: TYPE_NORMAL
- en: d = a * b * c
  prefs: []
  type: TYPE_NORMAL
- en: print(a, ",", b, ",", c, ",", d)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Create a trace table to determine the values of the variables in each step
    of the Python program for two different executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) 8, 4; and (ii) 4, 4'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: c = a + b
  prefs: []
  type: TYPE_NORMAL
- en: d = 1 + a / b * c + 2
  prefs: []
  type: TYPE_NORMAL
- en: e = c + d
  prefs: []
  type: TYPE_NORMAL
- en: c += d + e
  prefs: []
  type: TYPE_NORMAL
- en: e -= 1
  prefs: []
  type: TYPE_NORMAL
- en: d -= c + d % c
  prefs: []
  type: TYPE_NORMAL
- en: print(c, ",", d, ",", e)
  prefs: []
  type: TYPE_NORMAL
