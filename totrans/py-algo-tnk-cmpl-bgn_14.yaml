- en: Chapter 8
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Trace Tables
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 8.1 What is a Trace Table?
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A trace table is a technique used to test algorithms or computer programs for
    logic errors that occur while the algorithm or program executes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The trace table simulates the flow of execution. Statements are executed step
    by step, and the values of variables change as an assignment statement is executed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Trace tables are useful for educational purposes. They are typically employed
    by novice programmers to help them visualize how a particular algorithm or program
    works and to assist them in detecting logic errors.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: A typical trace table is shown here.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | variable1 | variable2 | variable3 |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
- en: '| 1 |   |   |   |   |   |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
- en: '| 2 |   |   |   |   |   |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
- en: '| … |   |   |   |   |   |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
- en: Let's see a trace table in action! For the following Python program, a trace
    table is created to determine the values of the variables in each step.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: x = 10
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: y = 15
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: z = x * y
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: z += 1
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: print(z)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: The trace table for this program is shown below. Notes are optional, but they
    help the reader to better understand what is really happening.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | x | y | z |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| 1 | x = 10 | The value 10 is assigned to variable x. | 10 | ? | ? |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| 2 | y = 15 | The value 15 is assigned to variable y. | 10 | 15 | ? |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| 3 | z = x * y | The result of the product x * y is assigned to z. | 10 |
    15 | 150 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '| 4 | z += 1 | Variable z is incremented by one. | 10 | 15 | 151 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: '| 5 | print(z) | It displays: 151 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: Exercise 8.1-1 Creating a Trace Table
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a trace table to determine the values of the variables in each step of
    the Python program for two different executions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) 0.3, and (ii) 4.5.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: c = 3
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: c = c * b
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: a = 10 * c
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: a = a % 10
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: i)For the input value of 0.3, the trace table looks like this.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | b | c |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| 1 | b = float(input()) | User enters value 0.3 | ? | 0.3 | ? |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| 2 | c = 3 |   | ? | 0.3 | 3 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| 3 | c = c * b |   | ? | 0.3 | 0.9 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| 4 | a = 10 * c |   | 9.0 | 0.3 | 0.9 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| 5 | a = a % 10 |   | 9.0 | 0.3 | 0.9 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(a) | It displays: 9.0 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: ii)For the input value of 4.5, the trace table looks like this.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | b | c |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| 1 | b = float(input()) | User enters value 4.5 | ? | 4.5 | ? |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '| 2 | c = 3 |   | ? | 4.5 | 3 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
- en: '| 3 | c = c * b |   | ? | 4.5 | 13.5 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| 4 | a = 10 * c |   | 135.0 | 4.5 | 13.5 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| 5 | a = a % 10 |   | 5.0 | 4.5 | 13.5 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(a) | It displays: 5.0 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: Exercise 8.1-2 Creating a Trace Table
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: What result is displayed when the following program is executed?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Ugly = "Beautiful"
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Beautiful = "Ugly"
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Handsome = Ugly
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: print("Beautiful")
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: print(Ugly)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: print(Handsome)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a trace table to find the output result.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | Ugly | Beautiful | Handsome |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '| 1 | Ugly = "Beautiful" | The string “Beautiful” is assigned to the variable
    Ugly. | Beautiful | ? | ? |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '| 2 | Beautiful = "Ugly" | The string “Ugly” is assigned to the variable Beautiful.
    | Beautiful | Ugly | ? |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 2 | Beautiful = "Ugly" | The string “Ugly” is assigned to the variable Beautiful.
    | Beautiful | Ugly | ? |'
- en: '| 3 | Handsome = Ugly | The value of variable Ugly is assigned to the variable
    Handsome. | Beautiful | Ugly | Beautiful |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 3 | Handsome = Ugly | The value of variable Ugly is assigned to the variable
    Handsome. | Beautiful | Ugly | Beautiful |'
- en: '| 4 | print("Beautiful") | It displays: Beautiful |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 4 | print("Beautiful") | It displays: Beautiful |'
- en: '| 5 | print(Ugly) | It displays: Beautiful |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 5 | print(Ugly) | It displays: Beautiful |'
- en: '| 6 | print(Handsome) | It displays: Beautiful |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 6 | print(Handsome) | It displays: Beautiful |'
- en: Exercise 8.1-3 Swapping Values of Variables
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习8.1-3 变量值交换
- en: Write a Python program that lets the user enter two values, in variables a and
    b. At the end of the program, the two variables must swap their values. For example,
    if variables a and b contain the values 5 and 7 respectively, after swapping their
    values, variable a must contain the value 7 and variable b must contain the value
    5!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，让用户输入两个值，分别存储在变量a和b中。程序结束时，两个变量必须交换它们的值。例如，如果变量a和b分别包含值5和7，在交换它们的值后，变量a必须包含值7，变量b必须包含值5！
- en: Solution
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: The following program, even though it may seem correct, is erroneous and doesn't
    really swap the values of variables a and b!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序，尽管看起来正确，但实际上并没有交换变量a和b的值！
- en: a = int(input())
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: b = int(input())
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: b = int(input())
- en: a = b
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: a = b
- en: b = a
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: b = a
- en: print(a)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: print(b)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)
- en: Let's see why! Suppose the user enters two values, 5 and 7\. The trace table
    is shown here.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看为什么！假设用户输入两个值，5和7。跟踪表如下所示。
- en: '| Step | Statement | Notes | a | b |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| Step | Statement | Notes | a | b |'
- en: '| 1 | a = int(input()) | User enters the value 5 | 5 | ? |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = int(input()) | User enters the value 5 | 5 | ? |'
- en: '| 2 | b = int(input()) | User enters the value 7 | 5 | 7 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 2 | b = int(input()) | User enters the value 7 | 5 | 7 |'
- en: '| 3 | a = b | The value of variable b is assigned to variable a. Value 5 is
    lost! | 7 | 7 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 3 | a = b | The value of variable b is assigned to variable a. Value 5 is
    lost! | 7 | 7 |'
- en: '| 4 | b = a | The value of variable a is assigned to variable b | 7 | 7 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 4 | b = a | The value of variable a is assigned to variable b | 7 | 7 |'
- en: '| 5 | print(a) | It displays: 7 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 5 | print(a) | It displays: 7 |'
- en: '| 6 | print(b) | It displays: 7 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 6 | print(b) | It displays: 7 |'
- en: Oops! Where is the value 5?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！5这个值去哪了？
- en: The solution wasn't so obvious after all! So, how do you really swap values
    anyway?
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案并不像最初想象的那么明显！那么，你到底是如何交换值的呢？
- en: 'Consider two glasses: a glass of orange juice (called glass A), and a glass
    of lemon juice (called glass B). If you want to swap their content, all you must
    do is find and use one extra empty glass (called glass C).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑两个杯子：一杯橙汁（称为杯子A），一杯柠檬汁（称为杯子B）。如果你想交换它们的内容，你只需找到并使用一个额外的空杯子（称为杯子C）。
- en: '![Image](img/chapter08-01.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter08-01.png)'
- en: 'The steps that must be followed are:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 必须遵循以下步骤：
- en: 1)Empty the contents of glass A (orange juice) into glass C.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 将杯子A（橙汁）的内容倒入杯子C。
- en: .![Image](img/chapter08-02.png)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter08-02.png)
- en: 2)Empty the contents of glass B (lemon juice) into glass A.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 将杯子B（柠檬汁）的内容倒入杯子A。
- en: .![Image](img/chapter08-03.png)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter08-03.png)
- en: 3)Empty the contents of glass C (orange juice) into glass B.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 3) 将杯子C（橙汁）的内容倒入杯子B。
- en: .![Image](img/chapter08-04.png)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter08-04.png)
- en: Swapping completed successfully!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 交换完成成功！
- en: You can follow the same steps to swap the contents of two variables in Python.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以遵循相同的步骤在Python中交换两个变量的内容。
- en: a = int(input())
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: b = int(input())
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: b = int(input())
- en: c = a      #Empty the contents of glass A (orange juice) into glass C
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: c = a      # 将杯子A（橙汁）的内容倒入杯子C
- en: a = b      #Empty the contents of glass B (lemon juice) into glass A
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: a = b      # 将杯子B（柠檬汁）的内容倒入杯子A
- en: b = c      #Empty the contents of glass C (orange juice) into glass B
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: b = c      # 将杯子C（橙汁）的内容倒入杯子B
- en: print(a)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: print(b)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)
- en: '![](img/remember.jpg)The text after a hash character is considered a comment
    and is never executed.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)The text after a hash character is considered a comment
    and is never executed.'
- en: 'Last but not least, in Python you can also swap the contents of two variables
    like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，在Python中，你也可以像这样交换两个变量的内容：
- en: a = int(input())
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: b = int(input())
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: b = int(input())
- en: a, b = b, a
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: a, b = b, a
- en: print(a)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: print(b)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)
- en: Exercise 8.1-4 Swapping Values of Variables – An Alternative Approach
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习8.1-4 变量值交换 – 另一种方法
- en: Write a Python program that lets the user enter two integer values, in variables
    a and b. In the end, the two variables must swap their values. Then, use a trace
    table with input values 5 and 7 to confirm the correctness of your code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，让用户输入两个整数值，存储在变量a和b中。最后，两个变量必须交换它们的值。然后，使用输入值5和7的跟踪表来确认代码的正确性。
- en: Solution
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Since the variables contain numeric values, you can use the following Python
    program (as an alternative approach).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Since the variables contain numeric values, you can use the following Python
    program (as an alternative approach).
- en: a = int(input())
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: b = int(input())
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: b = int(input())
- en: a = a + b
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: a = a + b
- en: b = a - b
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: b = a - b
- en: a = a - b
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: a = a - b
- en: print(a, b)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: print(a, b)
- en: Let's now use a trace table with input values 5 and 7 to confirm that the variables
    a and b correctly swap their content.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在使用输入值5和7的跟踪表来确认变量a和b正确地交换了它们的内容。
- en: '| Step | Statement | Notes | a | b |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | a | b |'
- en: '| 1 | a = int(input()) | User enters value 5 | 5 | ? |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = int(input()) | 用户输入值 5 | 5 | ? |'
- en: '| 2 | b = int(input()) | User enters value 7 | 5 | 7 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 2 | b = int(input()) | 用户输入值 7 | 5 | 7 |'
- en: '| 3 | a = a + b |   | 12 | 7 |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 3 | a = a + b |   | 12 | 7 |'
- en: '| 4 | b = a ‑ b |   | 12 | 5 |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 4 | b = a - b |   | 12 | 5 |'
- en: '| 5 | a = a ‑ b |   | 7 | 5 |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 5 | a = a - b |   | 7 | 5 |'
- en: '| 6 | print(a, b) | It displays: 7 5 |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 6 | print(a, b) | 显示：7 5 |'
- en: '![](img/notice.jpg)The disadvantage of this method is that it cannot swap the
    contents of alphanumeric variables (strings).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)这种方法的不利之处在于它不能交换字母数字变量的内容（字符串）。'
- en: '8.2 Review Questions: True/False'
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.2 复习问题：对/错
- en: Choose true or false for each of the following statements.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Choose true or false for each of the following statements.
- en: 1)A trace table is a technique for testing a computer.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 1)跟踪表是测试计算机的一种技术。
- en: 2)Trace tables help a programmer find errors in a computer program.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 2)跟踪表有助于程序员找到计算机程序中的错误。
- en: 3)You cannot execute a computer program without first creating its corresponding
    trace table.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 3)您不能在没有首先创建相应的跟踪表的情况下执行计算机程序。
- en: 4)In order to swap the values of two integer variables, you always need an extra
    variable.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 4)为了交换两个整型变量的值，您始终需要一个额外的变量。
- en: 8.3 Review Exercises
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8.3 复习练习
- en: Complete the following exercises.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Create a trace table to determine the values of the variables in each step
    of the Python program when a value of 3 is entered.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 1)创建一个跟踪表以确定当输入值为3时Python程序每一步的变量值。
- en: a = float(input())
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: b = a + 10
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: b = a + 10
- en: a = b * (a - 3)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: a = b * (a - 3)
- en: c = 3 * b / 6
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: c = 3 * b / 6
- en: d = c * c
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: d = c * c
- en: d -= 1
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: d -= 1
- en: print(d)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: print(d)
- en: 2)Create a trace table to determine the values of the variables in each step
    of the Python program for three different executions.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 2)创建一个跟踪表以确定Python程序在三次不同执行中每一步的变量值。
- en: 'The input values for the three executions are: (i) 3, (ii) 4, and (iii) 1.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 三次执行的输入值分别为：(i) 3，(ii) 4，和(iii) 1。
- en: a = int(input())
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: a = (a + 1) * (a + 1) + 6 / 3 * 2 + 20
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: a = (a + 1) * (a + 1) + 6 / 3 * 2 + 20
- en: b = a % 13
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: b = a % 13
- en: c = b % 7
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: c = b % 7
- en: d = a * b * c
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: d = a * b * c
- en: print(a, ",", b, ",", c, ",", d)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: print(a, ",", b, ",", c, ",", d)
- en: 3)Create a trace table to determine the values of the variables in each step
    of the Python program for two different executions.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 3)创建一个跟踪表以确定Python程序在两次不同执行中每一步的变量值。
- en: 'The input values for the two executions are: (i) 8, 4; and (ii) 4, 4'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 两次执行的输入值分别为：(i) 8，4；和(ii) 4，4
- en: a = int(input())
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: b = int(input())
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: b = int(input())
- en: c = a + b
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: c = a + b
- en: d = 1 + a / b * c + 2
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: d = 1 + a / b * c + 2
- en: e = c + d
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: e = c + d
- en: c += d + e
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: c += d + e
- en: e -= 1
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: e -= 1
- en: d -= c + d % c
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: d -= c + d % c
- en: print(c, ",", d, ",", e)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: print(c, ",", d, ",", e)
