["```py\n$ cd\n$ mkdir ros2_ws\n```", "```py\n$ cd ros2_ws/\n$ mkdir src\n```", "```py\n$ cd ~/ros2_ws/\n$ colcon build\nSummary: 0 packages finished [0.73s]\n```", "```py\n$ ls\nbuild  install  log  src\n```", "```py\n$ cd install/\n$ ls\nCOLCON_IGNORE       _local_setup_util_ps1.py   setup.ps1 \nlocal_setup.bash    _local_setup_util_sh.py    setup.sh\nlocal_setup.ps1     local_setup.zsh            setup.zsh\nlocal_setup.sh      setup.bash\n```", "```py\n$ source ~/ros2_ws/install/setup.bash\n```", "```py\n$ gedit ~/.bashrc\n```", "```py\nsource /opt/ros/jazzy/setup.bash\nsource ~/ros2_ws/install/setup.bash\n```", "```py\n$ cd ~/ros2_ws/src/\n```", "```py\n$ ros2 pkg create my_py_pkg --build-type ament_python --dependencies rclpy\n```", "```py\n/home/<user>/ros2_ws/src/my_py_pkg\n├── my_py_pkg\n│   └── __init__.py\n├── package.xml\n├── resource\n│   └── my_py_pkg\n├── setup.cfg\n├── setup.py\n└── test\n    ├── test_copyright.py\n    ├── test_flake8.py\n    └── test_pep257.py\n```", "```py\n$ cd ~/ros2_ws/src/\n$ ros2 pkg create my_cpp_pkg --build-type ament_cmake --dependencies rclcpp\n```", "```py\n/home/ed/ros2_ws/src/my_cpp_pkg/\n├── CMakeLists.txt\n├── include\n│   └── my_cpp_pkg\n├── package.xml\n└── src\n```", "```py\n$ cd ~/ros2_ws/\n$ colcon build\nStarting >>> my_cpp_pkg\nStarting >>> my_py_pkg\nFinished <<< my_py_pkg [1.60s]\nFinished <<< my_cpp_pkg [3.46s]\nSummary: 2 packages finished [3.72s]\n```", "```py\n$ colcon build --packages-select my_py_pkg\nStarting >>> my_py_pkg\nFinished <<< my_py_pkg [1.01s]\nSummary: 1 package finished [1.26s]\n```", "```py\n$ cd ~/ros2_ws/src/my_py_pkg/my_py_pkg/\n$ touch my_first_node.py\n$ chmod +x my_first_node.py\n```", "```py\n#!/usr/bin/env python3\nimport rclpy\nfrom rclpy.node import Node\nclass MyCustomNode(Node):\n    def __init__(self):\n        super().__init__('my_node_name')\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyCustomNode()\n    rclpy.spin(node)\n    rclpy.shutdown()\nif __name__ == '__main__':\n    main()\n```", "```py\n#!/usr/bin/env python3\nimport rclpy\nfrom rclpy.node import Node\n```", "```py\nclass MyCustomNode(Node):\n    def __init__(self):\n        super().__init__('my_node_name')\n```", "```py\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyCustomNode()\n    rclpy.spin(node)\n    rclpy.shutdown()\n```", "```py\nif __name__ == '__main__':\n    main()\n```", "```py\nclass MyCustomNode(Node):\n    def __init__(self):\n        super().__init__('my_node_name')\n        self.get_logger().info(\"Hello World\")\n```", "```py\nentry_points={\n    'console_scripts': [\n        \"test_node = my_py_pkg.my_first_node:main\"\n    ],\n},\n```", "```py\n<executable_name> = <package_name>.<file_name>:<function_name>.\n```", "```py\n$ cd ~/ros2_ws/\n$ colcon build\n```", "```py\n$ source ~/.bashrc\n```", "```py\n$ ros2 run my_py_pkg test_node\n[INFO] [1710922181.325254037] [my_node_name]: Hello World\n```", "```py\nclass MyCustomNode(Node):\n    def __init__(self):\n        super().__init__('my_node_name')\n        self.counter_ = 0\n        self.timer_ = self.create_timer(1.0, self.print_hello)\n    def print_hello(self):\n        self.get_logger().info(\"Hello \" + str(self.counter_))\n        self.counter_ += 1\n```", "```py\n$ cd ~/ros2_ws/\n$ colcon build --packages-select my_py_pkg\n```", "```py\n$ source ~/.bashrc\n$ ros2 run my_py_pkg test_node\n[INFO] [1710999909.533443384] [my_node_name]: Hello 0\n[INFO] [1710999910.533169531] [my_node_name]: Hello 1\n[INFO] [1710999911.532731467] [my_node_name]: Hello 2\n[INFO] [1710999912.534052411] [my_node_name]: Hello 3\n```", "```py\n$ cd ~/ros2_ws/src/my_cpp_pkg/src/\n$ touch my_first_node.cpp\n```", "```py\n$ cd ~/ros2_ws/src/\n$ code .\n```", "```py\n#include \"rclcpp/rclcpp.hpp\"\nclass MyCustomNode : public rclcpp::Node\n{\npublic:\n    MyCustomNode() : Node(\"my_node_name\")\n    {\n    }\nprivate:\n};\nint main(int argc, char **argv)\n{\n    rclcpp::init(argc, argv);\n    auto node = std::make_shared<MyCustomNode>();\n    rclcpp::spin(node);\n    rclcpp::shutdown();\n    return 0;\n}\n```", "```py\n#include \"rclcpp/rclcpp.hpp\"\n```", "```py\nclass MyCustomNode : public rclcpp::Node\n{\npublic:\n    MyCustomNode() : Node(\"my_node_name\")\n    {\n    }\nprivate:\n};\n```", "```py\nint main(int argc, char **argv)\n{\n    rclcpp::init(argc, argv);\n    auto node = std::make_shared<MyCustomNode>();\n    rclcpp::spin(node);\n    rclcpp::shutdown();\n    return 0;\n}\n```", "```py\nclass MyCustomNode : public rclcpp::Node\n{\npublic:\n    MyCustomNode() : Node(\"my_node_name\"), counter_(0)\n    {\n        timer_ = this->create_wall_timer(std::chrono::seconds(1), std::bind(&MyCustomNode::print_hello, this));\n    }\n    void print_hello()\n    {\n        RCLCPP_INFO(this->get_logger(), \"Hello %d\", counter_);\n        counter_++;\n    }\nprivate:\n    int counter_;\n    rclcpp::TimerBase::SharedPtr timer_;\n};\n```", "```py\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(rclcpp REQUIRED)\n```", "```py\nadd_executable(test_node src/my_first_node.cpp)\nament_target_dependencies(test_node rclcpp)\ninstall(TARGETS\n  test_node\n  DESTINATION lib/${PROJECT_NAME}/\n)\n```", "```py\n$ cd ~/ros2_ws/\n$ colcon build --packages-select my_cpp_pkg\n```", "```py\n$ source ~/.bashrc\n$ ros2 run my_cpp_pkg test_node\n[INFO] [1711006463.017149024] [my_node_name]: Hello 0\n[INFO] [1711006464.018055674] [my_node_name]: Hello 1\n[INFO] [1711006465.015927319] [my_node_name]: Hello 2\n[INFO] [1711006466.015355747] [my_node_name]: Hello 3\n```", "```py\n#!/usr/bin/env python3\nimport rclpy\nfrom rclpy.node import Node\nclass MyCustomNode(Node): # MODIFY NAME\n    def __init__(self):\n        super().__init__(\"node_name\") # MODIFY NAME\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyCustomNode() # MODIFY NAME\n    rclpy.spin(node)\n    rclpy.shutdown()\nif __name__ == \"__main__\":\n    main()\n```", "```py\n#include \"rclcpp/rclcpp.hpp\"\nclass MyCustomNode : public rclcpp::Node // MODIFY NAME\n{\npublic:\n    MyCustomNode() : Node(\"node_name\") // MODIFY NAME\n    {\n    }\nprivate:\n};\nint main(int argc, char **argv)\n{\n    rclcpp::init(argc, argv);\n    auto node = std::make_shared<MyCustomNode>(); // MODIFY NAME\n    rclcpp::spin(node);\n    rclcpp::shutdown();\n    return 0;\n}\n```", "```py\n$ ros2 run my_py_pkg test_node\n```", "```py\n$ ros2 node list\n/my_node_name\n```", "```py\n$ ros2 node info /my_node_name\n/my_node_name\n  Subscribers:\n  Publishers:\n    /parameter_events: rcl_interfaces/msg/ParameterEvent\n    /rosout: rcl_interfaces/msg/Log\n  Service Servers:\n    /my_node_name/describe_parameters: rcl_interfaces/srv/DescribeParameters\n    /my_node_name/get_parameter_types: rcl_interfaces/srv/GetParameterTypes\n    /my_node_name/get_parameters: rcl_interfaces/srv/GetParameters\n    /my_node_name/get_type_description: type_description_interfaces/srv/GetTypeDescription\n    /my_node_name/list_parameters: rcl_interfaces/srv/ListParameters\n    /my_node_name/set_parameters: rcl_interfaces/srv/SetParameters\n    /my_node_name/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically\n  Service Clients:\n  Action Servers:\n  Action Clients:\n```", "```py\n$ ros2 run my_py_pkg test_node --ros-args -r __node:=abc\n[INFO] [1711010078.801996629] [abc]: Hello 0\n[INFO] [1711010079.805748394] [abc]: Hello 1\n```", "```py\n$ ros2 node list\n/abc\n```"]