- en: Security in AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to build and configure serverless functions in AWS Lambda.
    We have learned how to scale them up using third-party tools. We have also had
    a close look at how microservices work and how to ensure security in them, while
    ensuring resilience and speed.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will understand security in the AWS environment, keeping
    in mind our Lambda functions. We will understand how services, such as AWS VPCs,
    security groups, and subnets work, with respect to Lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding AWS VPCs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding subnets in VPCs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing Lambda inside private subnets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling access to Lambda functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using STS inside Lambda for secure session-based execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding AWS Virtual Private Clouds (VPCs)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will understand AWS VPCs. **VPCs** are a very common component
    in the security layers of the AWS environment; they are isolated parts of the
    cloud where users can host their services and build their infrastructures. VPCs
    are the first layer of security. We will try to understand VPCs in the context
    of Lambda functions, in the form of bullet points, given here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'VPCs can be created and modified in the AWS''s VPC service dashboard, which
    looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00232.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s quickly learn how to create a VPC of our own. For that, click on
    Create VPC. You will see a pop-up box which asks you to enter more meta information
    for your new VPC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00233.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Name tag box needs to have the name of the VPC. The IPv4 CIDR block is
    where you enter your IP range for classless inter-domain routing. Then, you can
    choose whether you want an IPv6 CIDR block or not. You can also select the Tenancy
    settings; this defines how your EC2 instances run within your VPC, and the resource
    sharing accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have successfully created our VPC with the necessary settings and with the `Test-VPC`
    name. We can see this in our dashboard with all the corresponding meta settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00235.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also see a summary of the VPC which includes the IPv4 settings, the
    **Network Access Control List** (**ACL**) settings, the **Dynamic Host Configuration
    Protocol** (**DHCP**) options, and also the DNS settings, all of which can also
    be configured later according to our needs. You can also see IPv4 CIDR blocks
    under the next CIDR Blocks tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00236.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also create VPC flow logs, which log traffic and data movements in and
    out of the VPC. This will promote better log management, ensuring security, and
    better monitoring. Currently, flow logs have not been set up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00237.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To create VPC flow logs, you can just click on the Create Flow Log button at
    the bottom. This will open up a flow log creation wizard where you can enter the
    details for the various settings, accordingly. The creation wizard looks like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once all the details have been entered, you can go ahead and click on the Create
    Flow Log option at the bottom, which will create the VPC flow log with the desired
    settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00239.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once created, you can see the newly created VPC flow log under the Flow Logs tab,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s understand VPCs from AWS Lambda''s point of view. Just like any
    other AWS resource, Lambda functions can also be hosted inside VPCs. You can see
    that setting under the Network section of your AWS Lambda function. It looks like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the drop-down list, you can select a VPC in which you want to host your
    Lambda function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you select a VPC, it will further ask you for details regarding subnets,
    security groups, and so on, as shown in the following screenshot. We will learn
    about them in the sections following this, so, we will configure the VPC for our
    Lambda function later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Understanding subnets in VPCs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about and understand AWS subnets, which are subparts
    of AWS VPCs. VPCs can be further divided into multiple subnets. These subnets
    can either be public or private, depending on the security needs of your architecture.
    We will look at the concept of subnets from the point of view of AWS Lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can go to the Subnets menu via the VPC page itself. You need to click on
    the Subnets option under the Your VPCs option on the left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will take you to the subnets console, where you will see some already
    existing subnets. These are the default subnets for each availability zone in
    your region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, to create a new subnet, you need to click on the blue Create Subnet button
    on the top-left side of the console. In the creation wizard, you will be asked
    to enter the following details—the name of the subnet, the VPC you want to place
    it in, availability zones, and also preferred IPv4 CIDR blocks. I have placed
    this subnet inside the VPC we created in the previous section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the Yes, Create button on the bottom-right side of the creation
    wizard, the new subnet is created. You can see it listed in the list of your subnets
    on your console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will fill in the security settings for our Lambda function with our
    VPC and subnets, which we have just created. Currently, this is what the Network
    setting for AWS Lambda looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00248.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After adding in the required settings, which are the details of the VPC, subnet
    and security groups, the Network settings of our Lambda function will look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '...![](img/00250.jpeg)'
  prefs: []
  type: TYPE_NORMAL
- en: After setting up your network settings for your Lambda function, click on the
    orange Save button on the top-right of your Lambda console to save those settings
    to your Lambda function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Securing Lambda inside private subnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Private subnets** are subnets that are not open to the internet. All of their
    traffic is routed via the public subnet in the same VPC using the concept of route
    tables. Let''s understand how to position our Lambda functions inside private
    subnets to add an extra layer of security:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Subnets created in the AWS console are not private by default. Let''s evaluate
    and confirm this by going through the details of the subnet that we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00251.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Route Table tab will show us the routing settings of our subnet,
    which basically tells us what kind of traffic is allowed into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Network ACL tab, you can see the network rules assigned for our subnet.
    Here, we can see that the subnet is open to all traffic (0.0.0.0/0). So, in order
    to make our subnet private, we need to fix this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00253.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the Network ACLs console by clicking on the link to the left side of
    your console. You will arrive at the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00254.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on the blue Create Network ACL button to create a new ACL. Select
    our VPC and then enter a name for the ACL in the creation wizard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00255.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the inbound rules of the new ACL, add in the following rule. In the
    Source section, add the IPv4 setting of any of your public subnets and click Save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00256.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, replace the ACL of our current subnet with the new one that will make
    our subnet a private subnet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00257.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we have our Lambda function in a private subnet, making it more secure.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling access to Lambda functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have gone through all the security settings needed to ensure that our Lambda
    functions and our serverless architectures are secure. So, an engineer working
    on serverless systems should keep the following points in mind while designing
    their infrastructure from a security point of view:'
  prefs: []
  type: TYPE_NORMAL
- en: The VPC and the subnet settings can be added under the Network section of the
    Lambda function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended that the Lambda function is placed across at least two subnets
    for fault tolerance purposes. However, this is not compulsory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are placing your Lambda function inside a private subnet, you need to
    ensure that the private subnet is receiving the appropriate traffic from your
    public subnet(s) in that VPC. If not, then the Lambda function is essentially
    locked out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using STS inside Lambda for secure session-based execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While accessing other AWS services and components from inside your Lambda functions,
    you can make use of **AWS's Simple Token Service** (**STS**) to ensure session-based
    access, which will essentially add an extra layer of security. As we have already
    discussed, and learned how to use, STS credentials in our code, we will skip over
    to the documentation links.
  prefs: []
  type: TYPE_NORMAL
- en: The official documentation of AWS STS will help you understand how session-based
    access works: [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html).
  prefs: []
  type: TYPE_NORMAL
- en: And this is the *Boto3 Python Documentation* for using STS credentials inside
    Python code: [http://boto3.readthedocs.io/en/latest/reference/services/sts.html](http://boto3.readthedocs.io/en/latest/reference/services/sts.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how security works in Lambda functions in a
    deep-dive mode. We have understood how VPCs and subnets work in the AWS environment.
    We have learned to create a VPC and also created public and private subnets. This
    will give you a better understanding of how security works from the whole of the
    AWS perspective.
  prefs: []
  type: TYPE_NORMAL
- en: We have also learned how to place your Lambda functions inside the VPCs and
    the subnets we have created throughout this chapter. We understood how to handle
    and route traffic inside our VPCs and subnets.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we also learned how to implement better security in our Python code
    using session-based access to other AWS components, thereby placing security in
    the control of the developer.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about the **Serverless Application Model**
    (**SAM**) and how to write SAM models and deploy your Lambda applications through
    them.
  prefs: []
  type: TYPE_NORMAL
